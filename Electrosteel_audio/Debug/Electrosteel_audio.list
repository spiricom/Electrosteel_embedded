
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001b118  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c2e8  0801b3b0  0801b3b0  0002b3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027698  08027698  00059760  2**0
                  CONTENTS
  4 .ARM          00000000  08027698  08027698  00059760  2**0
                  CONTENTS
  5 .preinit_array 00000000  08027698  08027698  00059760  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027698  08027698  00037698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802769c  0802769c  0003769c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007c8  20000000  080276a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d158  200007c8  08027e68  000607c8  2**3
                  ALLOC
 10 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
 11 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
 12 .sram2_bss    00043180  30002000  30002000  00062000  2**5
                  ALLOC
 13 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 14 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 15 .itcmram      00009360  00000400  08027e68  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .sdram_bss    02000000  60000000  60000000  00060000  2**5
                  ALLOC
 17 .heap         00000000  2001d920  2001d920  00059760  2**0
                  CONTENTS
 18 .reserved_for_stack 00000000  2001d920  2001d920  00059760  2**0
                  CONTENTS
 19 .ARM.attributes 0000002e  00000000  00000000  00059760  2**0
                  CONTENTS, READONLY
 20 .comment      000000b8  00000000  00000000  0005978e  2**0
                  CONTENTS, READONLY
 21 DISCARD       000000ca  2001d920  2001d920  00059848  2**2
                  CONTENTS, READONLY
 22 .debug_info   0009b973  00000000  00000000  00059912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 0000bd58  00000000  00000000  000f5285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0005a4e4  00000000  00000000  00100fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00004210  00000000  00000000  0015b4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_rnglists 00009a87  00000000  00000000  0015f6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line   00066e88  00000000  00000000  00169158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_str    00014eb2  00000000  00000000  001cffe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000ea88  00000000  00000000  001e4e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loc    00001d34  00000000  00000000  001f391c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_ranges 00000060  00000000  00000000  001f5650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200007c8 	.word	0x200007c8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801b328 	.word	0x0801b328

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200007cc 	.word	0x200007cc
 80002d4:	0801b328 	.word	0x0801b328

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <dbToATableLookup>:
    uint32_t inAmpIndex = LEAF_clip (0, (in * atodbTableScalar) - atodbTableOffset, ATODB_TABLE_SIZE_MINUS_ONE);
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
 8000660:	b508      	push	{r3, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000662:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <dbToATableLookup+0x68>)
{
 8000664:	eef0 7a40 	vmov.f32	s15, s0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000668:	4b18      	ldr	r3, [pc, #96]	; (80006cc <dbToATableLookup+0x6c>)
 800066a:	edd2 0a00 	vldr	s1, [r2]
 800066e:	ed93 7a00 	vldr	s14, [r3]
 8000672:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80006d0 <dbToATableLookup+0x70>
 8000676:	eed7 0a27 	vfnms.f32	s1, s14, s15
 800067a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80006d4 <dbToATableLookup+0x74>
 800067e:	f013 f911 	bl	80138a4 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000682:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
    }
    float alpha = floatIndex - (float)inDBIndex;
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000686:	f643 70ff 	movw	r0, #16383	; 0x3fff
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <dbToATableLookup+0x78>)
 800068c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000690:	ee17 3a10 	vmov	r3, s14
    float alpha = floatIndex - (float)inDBIndex;
 8000694:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
 8000698:	1c59      	adds	r1, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 800069a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800069e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80006a2:	4281      	cmp	r1, r0
    float alpha = floatIndex - (float)inDBIndex;
 80006a4:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 80006a8:	bf28      	it	cs
 80006aa:	4601      	movcs	r1, r0
 80006ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006b0:	ed93 7a00 	vldr	s14, [r3]
 80006b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80006b8:	edd2 6a00 	vldr	s13, [r2]
 80006bc:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 80006c0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80006c4:	bd08      	pop	{r3, pc}
 80006c6:	bf00      	nop
 80006c8:	20000dc0 	.word	0x20000dc0
 80006cc:	20000dc4 	.word	0x20000dc4
 80006d0:	467ffc00 	.word	0x467ffc00
 80006d4:	00000000 	.word	0x00000000
 80006d8:	30002000 	.word	0x30002000

080006dc <mtofTableLookup>:
}



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
 80006dc:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80006e0:	ed9f 1a16 	vldr	s2, [pc, #88]	; 800073c <mtofTableLookup+0x60>
 80006e4:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000740 <mtofTableLookup+0x64>
{
 80006e8:	b508      	push	{r3, lr}
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80006ea:	f013 f8db 	bl	80138a4 <LEAF_clip>
 80006ee:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000744 <mtofTableLookup+0x68>
 80006f2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000748 <mtofTableLookup+0x6c>
	int tempIndexI = (int)tempIndexF;
	tempIndexF = tempIndexF -tempIndexI;
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80006f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <mtofTableLookup+0x70>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80006fc:	eee0 7a26 	vfma.f32	s15, s0, s13
	int tempIndexI = (int)tempIndexF;
 8000700:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 8000704:	ee37 7a67 	vsub.f32	s14, s14, s15
	int tempIndexI = (int)tempIndexF;
 8000708:	ee16 3a90 	vmov	r3, s13
	tempIndexF = tempIndexF -tempIndexI;
 800070c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000710:	1c59      	adds	r1, r3, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000712:	f3c3 030e 	ubfx	r3, r3, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
 8000716:	ee37 0ae6 	vsub.f32	s0, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 800071a:	f3c1 010e 	ubfx	r1, r1, #0, #15
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800071e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 8000722:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000726:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 800072a:	edd3 7a00 	vldr	s15, [r3]
 800072e:	edd2 6a00 	vldr	s13, [r2]
 8000732:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8000736:	eea7 0a27 	vfma.f32	s0, s14, s15
 800073a:	bd08      	pop	{r3, pc}
 800073c:	43230000 	.word	0x43230000
 8000740:	c3230000 	.word	0xc3230000
 8000744:	42c80000 	.word	0x42c80000
 8000748:	46800000 	.word	0x46800000
 800074c:	30022000 	.word	0x30022000

08000750 <audioInit>:


void audioInit()
{
 8000750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000754:	4da3      	ldr	r5, [pc, #652]	; (80009e4 <audioInit+0x294>)
 8000756:	f64e 2260 	movw	r2, #60000	; 0xea60
 800075a:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 80009e8 <audioInit+0x298>
 800075e:	4628      	mov	r0, r5
 8000760:	49a2      	ldr	r1, [pc, #648]	; (80009ec <audioInit+0x29c>)
 8000762:	4ba3      	ldr	r3, [pc, #652]	; (80009f0 <audioInit+0x2a0>)
 8000764:	4ca3      	ldr	r4, [pc, #652]	; (80009f4 <audioInit+0x2a4>)
{
 8000766:	ed2d 8b04 	vpush	{d8-d9}
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 800076a:	f017 fc4b 	bl	8018004 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 800076e:	462b      	mov	r3, r5
 8000770:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000774:	49a0      	ldr	r1, [pc, #640]	; (80009f8 <audioInit+0x2a8>)
 8000776:	48a1      	ldr	r0, [pc, #644]	; (80009fc <audioInit+0x2ac>)
 8000778:	f013 fcbc 	bl	80140f4 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 800077c:	462b      	mov	r3, r5
 800077e:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
 8000782:	499f      	ldr	r1, [pc, #636]	; (8000a00 <audioInit+0x2b0>)
 8000784:	489f      	ldr	r0, [pc, #636]	; (8000a04 <audioInit+0x2b4>)
 8000786:	f013 fcb5 	bl	80140f4 <tMempool_init>

	leaf.clearOnAllocation = 1;
 800078a:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000794:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8000a08 <audioInit+0x2b8>
 8000798:	eddf 0a9c 	vldr	s1, [pc, #624]	; 8000a0c <audioInit+0x2bc>
 800079c:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8000a10 <audioInit+0x2c0>
 80007a0:	489c      	ldr	r0, [pc, #624]	; (8000a14 <audioInit+0x2c4>)
	leaf.clearOnAllocation = 1;
 80007a2:	616b      	str	r3, [r5, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 80007a4:	f013 f90a 	bl	80139bc <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;

	for (int i = 0; i < 12; i++)
	{
		previousStringInputs[i]	= 0;
 80007a8:	4b9b      	ldr	r3, [pc, #620]	; (8000a18 <audioInit+0x2c8>)
 80007aa:	2200      	movs	r2, #0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 80007ac:	499b      	ldr	r1, [pc, #620]	; (8000a1c <audioInit+0x2cc>)
 80007ae:	f504 6580 	add.w	r5, r4, #1024	; 0x400
		previousStringInputs[i]	= 0;
 80007b2:	801a      	strh	r2, [r3, #0]



	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 80007b4:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8000a20 <audioInit+0x2d0>
		previousStringInputs[i]	= 0;
 80007b8:	805a      	strh	r2, [r3, #2]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 80007ba:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 8000a24 <audioInit+0x2d4>
		previousStringInputs[i]	= 0;
 80007be:	809a      	strh	r2, [r3, #4]
 80007c0:	80da      	strh	r2, [r3, #6]
 80007c2:	811a      	strh	r2, [r3, #8]
 80007c4:	815a      	strh	r2, [r3, #10]
 80007c6:	819a      	strh	r2, [r3, #12]
 80007c8:	81da      	strh	r2, [r3, #14]
 80007ca:	821a      	strh	r2, [r3, #16]
 80007cc:	825a      	strh	r2, [r3, #18]
 80007ce:	829a      	strh	r2, [r3, #20]
 80007d0:	82da      	strh	r2, [r3, #22]
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 80007d2:	4b95      	ldr	r3, [pc, #596]	; (8000a28 <audioInit+0x2d8>)
 80007d4:	600b      	str	r3, [r1, #0]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 80007d6:	f01a fdcf 	bl	801b378 <__randomNumber_veneer>
 80007da:	eef0 7a48 	vmov.f32	s15, s16
 80007de:	eee0 7a28 	vfma.f32	s15, s0, s17
 80007e2:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
 80007e6:	42ac      	cmp	r4, r5
 80007e8:	d1f5      	bne.n	80007d6 <audioInit+0x86>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
 80007ea:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80007ee:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8000a2c <audioInit+0x2dc>
 80007f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f6:	488e      	ldr	r0, [pc, #568]	; (8000a30 <audioInit+0x2e0>)
 80007f8:	f013 f94a 	bl	8013a90 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
 80007fc:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8000a34 <audioInit+0x2e4>
 8000800:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8000a38 <audioInit+0x2e8>
 8000804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000808:	488c      	ldr	r0, [pc, #560]	; (8000a3c <audioInit+0x2ec>)
 800080a:	f013 f965 	bl	8013ad8 <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 800080e:	4b8c      	ldr	r3, [pc, #560]	; (8000a40 <audioInit+0x2f0>)
 8000810:	498c      	ldr	r1, [pc, #560]	; (8000a44 <audioInit+0x2f4>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 8000812:	4a8d      	ldr	r2, [pc, #564]	; (8000a48 <audioInit+0x2f8>)
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 8000814:	6019      	str	r1, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 8000816:	498d      	ldr	r1, [pc, #564]	; (8000a4c <audioInit+0x2fc>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 8000818:	488d      	ldr	r0, [pc, #564]	; (8000a50 <audioInit+0x300>)
 800081a:	4c8e      	ldr	r4, [pc, #568]	; (8000a54 <audioInit+0x304>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 800081c:	4b8e      	ldr	r3, [pc, #568]	; (8000a58 <audioInit+0x308>)
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 800081e:	6011      	str	r1, [r2, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 8000824:	4a8d      	ldr	r2, [pc, #564]	; (8000a5c <audioInit+0x30c>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 8000826:	6004      	str	r4, [r0, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000828:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8000a60 <audioInit+0x310>
 800082c:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8000a64 <audioInit+0x314>
 8000830:	488d      	ldr	r0, [pc, #564]	; (8000a68 <audioInit+0x318>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 8000832:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000834:	f013 f97a 	bl	8013b2c <LEAF_generate_mtof>





	if (numStrings == 6)
 8000838:	4b8c      	ldr	r3, [pc, #560]	; (8000a6c <audioInit+0x31c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b06      	cmp	r3, #6
 800083e:	f000 80c4 	beq.w	80009ca <audioInit+0x27a>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
 8000842:	2b0a      	cmp	r3, #10
 8000844:	f000 80b6 	beq.w	80009b4 <audioInit+0x264>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000848:	4a89      	ldr	r2, [pc, #548]	; (8000a70 <audioInit+0x320>)
 800084a:	2302      	movs	r3, #2
 800084c:	4989      	ldr	r1, [pc, #548]	; (8000a74 <audioInit+0x324>)
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	0052      	lsls	r2, r2, #1
 8000852:	600a      	str	r2, [r1, #0]


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000854:	4e63      	ldr	r6, [pc, #396]	; (80009e4 <audioInit+0x294>)
 8000856:	eddf 8a88 	vldr	s17, [pc, #544]	; 8000a78 <audioInit+0x328>
 800085a:	4c88      	ldr	r4, [pc, #544]	; (8000a7c <audioInit+0x32c>)
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 800085c:	4631      	mov	r1, r6
		numStringsThisBoard = 1;
 800085e:	4a88      	ldr	r2, [pc, #544]	; (8000a80 <audioInit+0x330>)
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000860:	eef0 0a68 	vmov.f32	s1, s17
 8000864:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8000a0c <audioInit+0x2bc>
 8000868:	f104 0530 	add.w	r5, r4, #48	; 0x30
 800086c:	4885      	ldr	r0, [pc, #532]	; (8000a84 <audioInit+0x334>)
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 800086e:	eeb0 8a40 	vmov.f32	s16, s0
		numStringsThisBoard = 1;
 8000872:	7013      	strb	r3, [r2, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000874:	f010 f908 	bl	8010a88 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000878:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
 800087a:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 800087c:	eef0 0a68 	vmov.f32	s1, s17
 8000880:	4631      	mov	r1, r6
 8000882:	eeb0 0a48 	vmov.f32	s0, s16
 8000886:	f010 f8ff 	bl	8010a88 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 800088a:	42ac      	cmp	r4, r5
 800088c:	d1f4      	bne.n	8000878 <audioInit+0x128>
 800088e:	4c7e      	ldr	r4, [pc, #504]	; (8000a88 <audioInit+0x338>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000890:	4e54      	ldr	r6, [pc, #336]	; (80009e4 <audioInit+0x294>)
 8000892:	eddf 8a79 	vldr	s17, [pc, #484]	; 8000a78 <audioInit+0x328>
 8000896:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800089a:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8000a0c <audioInit+0x2bc>
 800089e:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
 80008a0:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 80008a2:	eef0 0a68 	vmov.f32	s1, s17
 80008a6:	4631      	mov	r1, r6
 80008a8:	eeb0 0a48 	vmov.f32	s0, s16
 80008ac:	f010 f8ec 	bl	8010a88 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 80008b0:	42ac      	cmp	r4, r5
 80008b2:	d1f4      	bne.n	800089e <audioInit+0x14e>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 80008b4:	494b      	ldr	r1, [pc, #300]	; (80009e4 <audioInit+0x294>)
 80008b6:	eddf 0a75 	vldr	s1, [pc, #468]	; 8000a8c <audioInit+0x33c>
 80008ba:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000a0c <audioInit+0x2bc>
 80008be:	4874      	ldr	r0, [pc, #464]	; (8000a90 <audioInit+0x340>)
 80008c0:	f010 f8e2 	bl	8010a88 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 80008c4:	4947      	ldr	r1, [pc, #284]	; (80009e4 <audioInit+0x294>)
 80008c6:	eddf 0a73 	vldr	s1, [pc, #460]	; 8000a94 <audioInit+0x344>
 80008ca:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8000a98 <audioInit+0x348>
 80008ce:	4873      	ldr	r0, [pc, #460]	; (8000a9c <audioInit+0x34c>)
 80008d0:	f00e ffcc 	bl	800f86c <tEnvelopeFollower_init>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 80008d4:	4943      	ldr	r1, [pc, #268]	; (80009e4 <audioInit+0x294>)
 80008d6:	4c72      	ldr	r4, [pc, #456]	; (8000aa0 <audioInit+0x350>)

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80008d8:	460d      	mov	r5, r1
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 80008da:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8000a8c <audioInit+0x33c>
 80008de:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8000a0c <audioInit+0x2bc>
 80008e2:	f104 0808 	add.w	r8, r4, #8
 80008e6:	486f      	ldr	r0, [pc, #444]	; (8000aa4 <audioInit+0x354>)
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80008e8:	ed9f 9a6f 	vldr	s18, [pc, #444]	; 8000aa8 <audioInit+0x358>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 80008ec:	f010 f8cc 	bl	8010a88 <tExpSmooth_init>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80008f0:	eddf 8a46 	vldr	s17, [pc, #280]	; 8000a0c <audioInit+0x2bc>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 80008f4:	4629      	mov	r1, r5
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80008f6:	ed9f 8a4f 	vldr	s16, [pc, #316]	; 8000a34 <audioInit+0x2e4>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 80008fa:	4f6c      	ldr	r7, [pc, #432]	; (8000aac <audioInit+0x35c>)
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 80008fc:	4e6c      	ldr	r6, [pc, #432]	; (8000ab0 <audioInit+0x360>)
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 80008fe:	eddf 0a65 	vldr	s1, [pc, #404]	; 8000a94 <audioInit+0x344>
 8000902:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8000a98 <audioInit+0x348>
 8000906:	486b      	ldr	r0, [pc, #428]	; (8000ab4 <audioInit+0x364>)
 8000908:	f00e ffb0 	bl	800f86c <tEnvelopeFollower_init>
	audioInitAdditive();
 800090c:	f01a fd44 	bl	801b398 <__audioInitAdditive_veneer>
	audioInitString1();
 8000910:	f01a fd2e 	bl	801b370 <__audioInitString1_veneer>
	audioInitVocal();
 8000914:	f01a fd14 	bl	801b340 <__audioInitVocal_veneer>
	audioInitSynth();
 8000918:	f002 fcce 	bl	80032b8 <audioInitSynth>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 800091c:	eef0 1a49 	vmov.f32	s3, s18
 8000920:	462b      	mov	r3, r5
 8000922:	eeb0 1a68 	vmov.f32	s2, s17
 8000926:	4620      	mov	r0, r4
 8000928:	eef0 0a48 	vmov.f32	s1, s16
 800092c:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8000a0c <audioInit+0x2bc>
 8000930:	4938      	ldr	r1, [pc, #224]	; (8000a14 <audioInit+0x2c4>)
 8000932:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000936:	f00f fd93 	bl	8010460 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 800093a:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 800093e:	462a      	mov	r2, r5
 8000940:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8000ab8 <audioInit+0x368>
 8000944:	2103      	movs	r1, #3
 8000946:	4638      	mov	r0, r7
 8000948:	f011 f892 	bl	8011a70 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 800094c:	462a      	mov	r2, r5
 800094e:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8000abc <audioInit+0x36c>
 8000952:	2101      	movs	r1, #1
 8000954:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8000ac0 <audioInit+0x370>
 8000958:	4630      	mov	r0, r6
 800095a:	f011 f889 	bl	8011a70 <tVZFilter_init>
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
 800095e:	4630      	mov	r0, r6
 8000960:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8000ac4 <audioInit+0x374>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000964:	3404      	adds	r4, #4
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
 8000966:	f011 f887 	bl	8011a78 <tVZFilter_setFreq>


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
 800096a:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8000ac8 <audioInit+0x378>
 800096e:	f013 f9f7 	bl	8013d60 <faster_mtof>
 8000972:	4638      	mov	r0, r7
 8000974:	f011 f880 	bl	8011a78 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000978:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000acc <audioInit+0x37c>
 800097c:	f013 f9f0 	bl	8013d60 <faster_mtof>
 8000980:	4630      	mov	r0, r6
 8000982:	f011 f879 	bl	8011a78 <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8000986:	462a      	mov	r2, r5
 8000988:	2100      	movs	r1, #0
 800098a:	4851      	ldr	r0, [pc, #324]	; (8000ad0 <audioInit+0x380>)
 800098c:	f013 ffa0 	bl	80148d0 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000990:	45a0      	cmp	r8, r4
 8000992:	d1c3      	bne.n	800091c <audioInit+0x1cc>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
 8000994:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000998:	2100      	movs	r1, #0
 800099a:	484e      	ldr	r0, [pc, #312]	; (8000ad4 <audioInit+0x384>)
 800099c:	f018 f866 	bl	8018a6c <memset>
	}

	audioFrameFunction = audioFrameSynth;
 80009a0:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <audioInit+0x388>)
 80009a2:	4a4e      	ldr	r2, [pc, #312]	; (8000adc <audioInit+0x38c>)
	HAL_Delay(1);
 80009a4:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameSynth;
 80009a6:	601a      	str	r2, [r3, #0]

}
 80009a8:	ecbd 8b04 	vpop	{d8-d9}
 80009ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(1);
 80009b0:	f003 ba46 	b.w	8003e40 <HAL_Delay>
		if (boardNumber == 0)
 80009b4:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <audioInit+0x320>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b16b      	cbz	r3, 80009d6 <audioInit+0x286>
		else if (boardNumber == 1)
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d00f      	beq.n	80009de <audioInit+0x28e>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 80009be:	1e5a      	subs	r2, r3, #1
 80009c0:	492c      	ldr	r1, [pc, #176]	; (8000a74 <audioInit+0x324>)
 80009c2:	2302      	movs	r3, #2
 80009c4:	0052      	lsls	r2, r2, #1
 80009c6:	600a      	str	r2, [r1, #0]
			numStringsThisBoard = 2;
 80009c8:	e744      	b.n	8000854 <audioInit+0x104>
		firstString = boardNumber;
 80009ca:	4929      	ldr	r1, [pc, #164]	; (8000a70 <audioInit+0x320>)
 80009cc:	2301      	movs	r3, #1
 80009ce:	4a29      	ldr	r2, [pc, #164]	; (8000a74 <audioInit+0x324>)
 80009d0:	7809      	ldrb	r1, [r1, #0]
 80009d2:	6011      	str	r1, [r2, #0]
		numStringsThisBoard = 1;
 80009d4:	e73e      	b.n	8000854 <audioInit+0x104>
			firstString = 0;
 80009d6:	4a27      	ldr	r2, [pc, #156]	; (8000a74 <audioInit+0x324>)
 80009d8:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	e73a      	b.n	8000854 <audioInit+0x104>
			firstString = 1;
 80009de:	4a25      	ldr	r2, [pc, #148]	; (8000a74 <audioInit+0x324>)
 80009e0:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
 80009e2:	e737      	b.n	8000854 <audioInit+0x104>
 80009e4:	20004e5c 	.word	0x20004e5c
 80009e8:	473b8000 	.word	0x473b8000
 80009ec:	20005344 	.word	0x20005344
 80009f0:	00001bc1 	.word	0x00001bc1
 80009f4:	20004f40 	.word	0x20004f40
 80009f8:	24040000 	.word	0x24040000
 80009fc:	20004eb0 	.word	0x20004eb0
 8000a00:	60000000 	.word	0x60000000
 8000a04:	20004e58 	.word	0x20004e58
 8000a08:	ba51b717 	.word	0xba51b717
 8000a0c:	00000000 	.word	0x00000000
 8000a10:	3a83126f 	.word	0x3a83126f
 8000a14:	20000dc8 	.word	0x20000dc8
 8000a18:	20004f28 	.word	0x20004f28
 8000a1c:	20004dc8 	.word	0x20004dc8
 8000a20:	3ecccccd 	.word	0x3ecccccd
 8000a24:	3f4ccccd 	.word	0x3f4ccccd
 8000a28:	457ff000 	.word	0x457ff000
 8000a2c:	3727c5ac 	.word	0x3727c5ac
 8000a30:	30012000 	.word	0x30012000
 8000a34:	42480000 	.word	0x42480000
 8000a38:	c2b40000 	.word	0xc2b40000
 8000a3c:	30002000 	.word	0x30002000
 8000a40:	20000d9c 	.word	0x20000d9c
 8000a44:	467ffca8 	.word	0x467ffca8
 8000a48:	20000dc4 	.word	0x20000dc4
 8000a4c:	42ea0af9 	.word	0x42ea0af9
 8000a50:	20000d98 	.word	0x20000d98
 8000a54:	3e27c37b 	.word	0x3e27c37b
 8000a58:	20000dc0 	.word	0x20000dc0
 8000a5c:	c6248fb7 	.word	0xc6248fb7
 8000a60:	4323d666 	.word	0x4323d666
 8000a64:	c323d666 	.word	0xc323d666
 8000a68:	30022000 	.word	0x30022000
 8000a6c:	200004b0 	.word	0x200004b0
 8000a70:	20013ebd 	.word	0x20013ebd
 8000a74:	20004ddc 	.word	0x20004ddc
 8000a78:	3a03126f 	.word	0x3a03126f
 8000a7c:	20004e28 	.word	0x20004e28
 8000a80:	200004b1 	.word	0x200004b1
 8000a84:	20013e24 	.word	0x20013e24
 8000a88:	20004ef4 	.word	0x20004ef4
 8000a8c:	3c23d70a 	.word	0x3c23d70a
 8000a90:	20000db4 	.word	0x20000db4
 8000a94:	3f7fd220 	.word	0x3f7fd220
 8000a98:	38d1b717 	.word	0x38d1b717
 8000a9c:	20000dac 	.word	0x20000dac
 8000aa0:	20004dd4 	.word	0x20004dd4
 8000aa4:	20000db8 	.word	0x20000db8
 8000aa8:	43480000 	.word	0x43480000
 8000aac:	20004ebc 	.word	0x20004ebc
 8000ab0:	20004ec0 	.word	0x20004ec0
 8000ab4:	20000db0 	.word	0x20000db0
 8000ab8:	44bb8000 	.word	0x44bb8000
 8000abc:	3f666666 	.word	0x3f666666
 8000ac0:	44480000 	.word	0x44480000
 8000ac4:	45504000 	.word	0x45504000
 8000ac8:	42e66666 	.word	0x42e66666
 8000acc:	42cccccd 	.word	0x42cccccd
 8000ad0:	20004eb4 	.word	0x20004eb4
 8000ad4:	30000000 	.word	0x30000000
 8000ad8:	20000da0 	.word	0x20000da0
 8000adc:	00008b61 	.word	0x00008b61

08000ae0 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	4604      	mov	r4, r0
	HAL_Delay(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f003 f9ab 	bl	8003e40 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aee:	4903      	ldr	r1, [pc, #12]	; (8000afc <audioStart+0x1c>)
 8000af0:	4620      	mov	r0, r4
 8000af2:	f008 fbe7 	bl	80092c4 <HAL_SAI_Transmit_DMA>
 8000af6:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <audioStart+0x20>)
 8000af8:	7018      	strb	r0, [r3, #0]
	//receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
}
 8000afa:	bd10      	pop	{r4, pc}
 8000afc:	30000000 	.word	0x30000000
 8000b00:	20013e14 	.word	0x20013e14

08000b04 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000b0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b12:	483b      	ldr	r0, [pc, #236]	; (8000c00 <AudioCodec_init+0xfc>)
 8000b14:	f005 f956 	bl	8005dc4 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8000b18:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8000b1a:	4c3a      	ldr	r4, [pc, #232]	; (8000c04 <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8000b1c:	f003 f990 	bl	8003e40 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b20:	4f39      	ldr	r7, [pc, #228]	; (8000c08 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 8000b22:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b26:	4e39      	ldr	r6, [pc, #228]	; (8000c0c <AudioCodec_init+0x108>)
 8000b28:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8000b2a:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	4628      	mov	r0, r5
 8000b32:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8000c14 <AudioCodec_init+0x110>
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	8833      	ldrh	r3, [r6, #0]
 8000b3a:	f005 fa63 	bl	8006004 <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b42:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b46:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8000b48:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 8000b50:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b52:	8833      	ldrh	r3, [r6, #0]
 8000b54:	f005 fa56 	bl	8006004 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b5c:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b60:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 8000b62:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b64:	2120      	movs	r1, #32
 8000b66:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 8000b68:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b6a:	8833      	ldrh	r3, [r6, #0]
 8000b6c:	f005 fa4a 	bl	8006004 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b74:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b78:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8000b7a:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b7e:	2120      	movs	r1, #32
 8000b80:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 8000b82:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b84:	8833      	ldrh	r3, [r6, #0]
 8000b86:	f005 fa3d 	bl	8006004 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b8e:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b92:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 8000b94:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b98:	2120      	movs	r1, #32
 8000b9a:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8000b9c:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000b9e:	8833      	ldrh	r3, [r6, #0]
 8000ba0:	f005 fa30 	bl	8006004 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000ba8:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bac:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8000bae:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 8000bb6:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bb8:	8833      	ldrh	r3, [r6, #0]
 8000bba:	f005 fa23 	bl	8006004 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bc2:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bc6:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8000bc8:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bcc:	2120      	movs	r1, #32
 8000bce:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8000bd0:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bd2:	8833      	ldrh	r3, [r6, #0]
 8000bd4:	f005 fa16 	bl	8006004 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bd8:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8000bda:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bde:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000be0:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000be4:	4628      	mov	r0, r5
 8000be6:	9200      	str	r2, [sp, #0]
 8000be8:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8000bea:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000bec:	2120      	movs	r1, #32
 8000bee:	f005 fa09 	bl	8006004 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <AudioCodec_init+0x10c>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]

}
 8000bf8:	b002      	add	sp, #8
 8000bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bfe:	bf00      	nop
 8000c00:	58020800 	.word	0x58020800
 8000c04:	20013e2c 	.word	0x20013e2c
 8000c08:	2000071c 	.word	0x2000071c
 8000c0c:	20000720 	.word	0x20000720
 8000c10:	20000dbc 	.word	0x20000dbc
 8000c14:	20013e2e 	.word	0x20013e2e

08000c18 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	210a      	movs	r1, #10
 8000c1e:	200c      	movs	r0, #12
{
 8000c20:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c22:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8000c26:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c28:	f044 0401 	orr.w	r4, r4, #1
 8000c2c:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8000c30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000c3c:	f003 f934 	bl	8003ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f003 f96f 	bl	8003f24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2109      	movs	r1, #9
 8000c4a:	200d      	movs	r0, #13
 8000c4c:	f003 f92c 	bl	8003ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c50:	200d      	movs	r0, #13
 8000c52:	f003 f967 	bl	8003f24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2108      	movs	r1, #8
 8000c5a:	200e      	movs	r0, #14
 8000c5c:	f003 f924 	bl	8003ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c60:	200e      	movs	r0, #14
 8000c62:	f003 f95f 	bl	8003f24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2107      	movs	r1, #7
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f003 f91c 	bl	8003ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c70:	200f      	movs	r0, #15
 8000c72:	f003 f957 	bl	8003f24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2010      	movs	r0, #16
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	f003 f914 	bl	8003ea8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c80:	2010      	movs	r0, #16

}
 8000c82:	b002      	add	sp, #8
 8000c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c88:	f003 b94c 	b.w	8003f24 <HAL_NVIC_EnableIRQ>
 8000c8c:	58024400 	.word	0x58024400

08000c90 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c90:	481b      	ldr	r0, [pc, #108]	; (8000d00 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c92:	2300      	movs	r3, #0
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000c94:	2206      	movs	r2, #6
  SdramTiming.LoadToActiveDelay = 2;
 8000c96:	2102      	movs	r1, #2
{
 8000c98:	b510      	push	{r4, lr}
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c9a:	6043      	str	r3, [r0, #4]
{
 8000c9c:	b088      	sub	sp, #32
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c9e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ca0:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 4;
 8000ca2:	2304      	movs	r3, #4
  SdramTiming.RowCycleDelay = 6;
 8000ca4:	9203      	str	r2, [sp, #12]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ca6:	4c17      	ldr	r4, [pc, #92]	; (8000d04 <MX_FMC_Init+0x74>)
  SdramTiming.LoadToActiveDelay = 2;
 8000ca8:	9100      	str	r1, [sp, #0]
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8000caa:	9106      	str	r1, [sp, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cac:	4669      	mov	r1, sp
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000cae:	6004      	str	r4, [r0, #0]
  SdramTiming.SelfRefreshTime = 4;
 8000cb0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 2;
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2308      	movs	r3, #8
 8000cc0:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cc4:	2210      	movs	r2, #16
 8000cc6:	2340      	movs	r3, #64	; 0x40
 8000cc8:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000ccc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000cd4:	6203      	str	r3, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000cda:	6182      	str	r2, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000cdc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cde:	f009 fbd3 	bl	800a488 <HAL_SDRAM_Init>
 8000ce2:	b928      	cbnz	r0, 8000cf0 <MX_FMC_Init+0x60>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000ce4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000ce8:	f003 f8c2 	bl	8003e70 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000cec:	b008      	add	sp, #32
 8000cee:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8000cf0:	f001 ff40 	bl	8002b74 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000cf4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000cf8:	f003 f8ba 	bl	8003e70 <HAL_SetFMCMemorySwappingConfig>
}
 8000cfc:	b008      	add	sp, #32
 8000cfe:	bd10      	pop	{r4, pc}
 8000d00:	20013e34 	.word	0x20013e34
 8000d04:	52004140 	.word	0x52004140

08000d08 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8000d08:	4836      	ldr	r0, [pc, #216]	; (8000de4 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000d0c:	b5d0      	push	{r4, r6, r7, lr}
 8000d0e:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 8000d10:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000d16:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000d1a:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8000d1c:	b109      	cbz	r1, 8000d22 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000d1e:	b038      	add	sp, #224	; 0xe0
 8000d20:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8000d22:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8000d26:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	a80a      	add	r0, sp, #40	; 0x28
 8000d2a:	f017 fe9f 	bl	8018a6c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000d2e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d32:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d34:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000d36:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f006 fdc5 	bl	80078c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	d14c      	bne.n	8000ddc <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d42:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d44:	f64f 003f 	movw	r0, #63551	; 0xf83f
 8000d48:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d4a:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d4c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d50:	2600      	movs	r6, #0
 8000d52:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d58:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000d5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d60:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d6a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d6c:	a902      	add	r1, sp, #8
 8000d6e:	481f      	ldr	r0, [pc, #124]	; (8000dec <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d70:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d72:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d76:	f004 fed5 	bl	8005b24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000d7a:	2219      	movs	r2, #25
 8000d7c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	a902      	add	r1, sp, #8
 8000d80:	481b      	ldr	r0, [pc, #108]	; (8000df0 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d82:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000d84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d88:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f004 feca 	bl	8005b24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000d90:	f248 1237 	movw	r2, #33079	; 0x8137
 8000d94:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d96:	a902      	add	r1, sp, #8
 8000d98:	4816      	ldr	r0, [pc, #88]	; (8000df4 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d9a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000da0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000da4:	f004 febe 	bl	8005b24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000da8:	f64f 7283 	movw	r2, #65411	; 0xff83
 8000dac:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dae:	a902      	add	r1, sp, #8
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000db2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000db4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000db8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dbc:	f004 feb2 	bl	8005b24 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000dc0:	f24c 7203 	movw	r2, #50947	; 0xc703
 8000dc4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc6:	a902      	add	r1, sp, #8
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000dcc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8000dd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd4:	f004 fea6 	bl	8005b24 <HAL_GPIO_Init>
}
 8000dd8:	b038      	add	sp, #224	; 0xe0
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8000ddc:	f001 feca 	bl	8002b74 <Error_Handler>
 8000de0:	e7af      	b.n	8000d42 <HAL_SDRAM_MspInit+0x3a>
 8000de2:	bf00      	nop
 8000de4:	20013e30 	.word	0x20013e30
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58021400 	.word	0x58021400
 8000df0:	58020800 	.word	0x58020800
 8000df4:	58021800 	.word	0x58021800
 8000df8:	58021000 	.word	0x58021000
 8000dfc:	58020c00 	.word	0x58020c00

08000e00 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e04:	4b79      	ldr	r3, [pc, #484]	; (8000fec <MX_GPIO_Init+0x1ec>)
{
 8000e06:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e0a:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8001004 <MX_GPIO_Init+0x204>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e0e:	4f78      	ldr	r7, [pc, #480]	; (8000ff0 <MX_GPIO_Init+0x1f0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e16:	4640      	mov	r0, r8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000e18:	4e76      	ldr	r6, [pc, #472]	; (8000ff4 <MX_GPIO_Init+0x1f4>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1a:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000e20:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e28:	f042 0210 	orr.w	r2, r2, #16
 8000e2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e34:	f002 0210 	and.w	r2, r2, #16
 8000e38:	9200      	str	r2, [sp, #0]
 8000e3a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e40:	f042 0204 	orr.w	r2, r2, #4
 8000e44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e4c:	f002 0204 	and.w	r2, r2, #4
 8000e50:	9201      	str	r2, [sp, #4]
 8000e52:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e58:	f042 0220 	orr.w	r2, r2, #32
 8000e5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e64:	f002 0220 	and.w	r2, r2, #32
 8000e68:	9202      	str	r2, [sp, #8]
 8000e6a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e7c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e80:	9203      	str	r2, [sp, #12]
 8000e82:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e88:	f042 0201 	orr.w	r2, r2, #1
 8000e8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e94:	f002 0201 	and.w	r2, r2, #1
 8000e98:	9204      	str	r2, [sp, #16]
 8000e9a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ea0:	f042 0202 	orr.w	r2, r2, #2
 8000ea4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ea8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eac:	f002 0202 	and.w	r2, r2, #2
 8000eb0:	9205      	str	r2, [sp, #20]
 8000eb2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ebc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ec4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000ec8:	9206      	str	r2, [sp, #24]
 8000eca:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ed0:	f042 0208 	orr.w	r2, r2, #8
 8000ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ed8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	9307      	str	r3, [sp, #28]
 8000ee4:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ee6:	f004 ff6d 	bl	8005dc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000eea:	4622      	mov	r2, r4
 8000eec:	4638      	mov	r0, r7
 8000eee:	2102      	movs	r1, #2
 8000ef0:	f004 ff68 	bl	8005dc4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ef4:	4622      	mov	r2, r4
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	2110      	movs	r1, #16
 8000efa:	f004 ff63 	bl	8005dc4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000efe:	f242 0220 	movw	r2, #8224	; 0x2020
 8000f02:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	a908      	add	r1, sp, #32
 8000f06:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f08:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000f0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f004 fe09 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	a908      	add	r1, sp, #32
 8000f18:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f1a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f22:	f004 fdff 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000f26:	f248 02c6 	movw	r2, #32966	; 0x80c6
 8000f2a:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2c:	4640      	mov	r0, r8
 8000f2e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8000f32:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f004 fdf5 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f3e:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f40:	a908      	add	r1, sp, #32
 8000f42:	482d      	ldr	r0, [pc, #180]	; (8000ff8 <MX_GPIO_Init+0x1f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f46:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f4a:	f004 fdeb 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	a908      	add	r1, sp, #32
 8000f54:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f58:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f004 fde2 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f60:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	a908      	add	r1, sp, #32
 8000f64:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f66:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f004 fdd9 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000f72:	f649 720c 	movw	r2, #40716	; 0x9f0c
 8000f76:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	4638      	mov	r0, r7
 8000f7a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8000f7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f004 fdcf 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB15 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000f86:	f24f 32e5 	movw	r2, #62437	; 0xf3e5
 8000f8a:	2303      	movs	r3, #3
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	a908      	add	r1, sp, #32
 8000f8e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8000f92:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f004 fdc5 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9e:	a908      	add	r1, sp, #32
 8000fa0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	f004 fdbc 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8000fac:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8000fb0:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb2:	a908      	add	r1, sp, #32
 8000fb4:	4811      	ldr	r0, [pc, #68]	; (8000ffc <MX_GPIO_Init+0x1fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8000fb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbc:	f004 fdb2 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8000fc0:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 8000fc4:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc6:	a908      	add	r1, sp, #32
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <MX_GPIO_Init+0x200>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8000fcc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd0:	f004 fda8 	bl	8005b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fd4:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	a908      	add	r1, sp, #32
 8000fd8:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f004 fd9f 	bl	8005b24 <HAL_GPIO_Init>

}
 8000fe6:	b00e      	add	sp, #56	; 0x38
 8000fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58020000 	.word	0x58020000
 8000ff4:	58020400 	.word	0x58020400
 8000ff8:	58021400 	.word	0x58021400
 8000ffc:	58020c00 	.word	0x58020c00
 8001000:	58021800 	.word	0x58021800
 8001004:	58020800 	.word	0x58020800

08001008 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001008:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800100a:	4817      	ldr	r0, [pc, #92]	; (8001068 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800100c:	2300      	movs	r3, #0
 800100e:	4917      	ldr	r1, [pc, #92]	; (800106c <MX_I2C2_Init+0x64>)
 8001010:	2401      	movs	r4, #1
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001014:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001016:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 800101a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001022:	f004 ff91 	bl	8005f48 <HAL_I2C_Init>
 8001026:	b950      	cbnz	r0, 800103e <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001028:	2100      	movs	r1, #0
 800102a:	480f      	ldr	r0, [pc, #60]	; (8001068 <MX_I2C2_Init+0x60>)
 800102c:	f005 fcfe 	bl	8006a2c <HAL_I2CEx_ConfigAnalogFilter>
 8001030:	b968      	cbnz	r0, 800104e <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001032:	2100      	movs	r1, #0
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_I2C2_Init+0x60>)
 8001036:	f005 fd2d 	bl	8006a94 <HAL_I2CEx_ConfigDigitalFilter>
 800103a:	b980      	cbnz	r0, 800105e <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800103c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800103e:	f001 fd99 	bl	8002b74 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001042:	2100      	movs	r1, #0
 8001044:	4808      	ldr	r0, [pc, #32]	; (8001068 <MX_I2C2_Init+0x60>)
 8001046:	f005 fcf1 	bl	8006a2c <HAL_I2CEx_ConfigAnalogFilter>
 800104a:	2800      	cmp	r0, #0
 800104c:	d0f1      	beq.n	8001032 <MX_I2C2_Init+0x2a>
    Error_Handler();
 800104e:	f001 fd91 	bl	8002b74 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_I2C2_Init+0x60>)
 8001056:	f005 fd1d 	bl	8006a94 <HAL_I2CEx_ConfigDigitalFilter>
 800105a:	2800      	cmp	r0, #0
 800105c:	d0ee      	beq.n	800103c <MX_I2C2_Init+0x34>
}
 800105e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001062:	f001 bd87 	b.w	8002b74 <Error_Handler>
 8001066:	bf00      	nop
 8001068:	20013e68 	.word	0x20013e68
 800106c:	40005800 	.word	0x40005800
 8001070:	00b03fdb 	.word	0x00b03fdb
 8001074:	00000000 	.word	0x00000000

08001078 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001078:	b510      	push	{r4, lr}
 800107a:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	2100      	movs	r1, #0
{
 800107e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001080:	22c0      	movs	r2, #192	; 0xc0
 8001082:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	9106      	str	r1, [sp, #24]
 8001086:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800108a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108e:	f017 fced 	bl	8018a6c <memset>
  if(i2cHandle->Instance==I2C2)
 8001092:	4b27      	ldr	r3, [pc, #156]	; (8001130 <HAL_I2C_MspInit+0xb8>)
 8001094:	6822      	ldr	r2, [r4, #0]
 8001096:	429a      	cmp	r2, r3
 8001098:	d001      	beq.n	800109e <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800109a:	b038      	add	sp, #224	; 0xe0
 800109c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800109e:	2208      	movs	r2, #8
 80010a0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a2:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80010a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a8:	f006 fc0e 	bl	80078c8 <HAL_RCCEx_PeriphCLKConfig>
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d138      	bne.n	8001122 <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4c20      	ldr	r4, [pc, #128]	; (8001134 <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010b2:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	a902      	add	r1, sp, #8
 80010b6:	4820      	ldr	r0, [pc, #128]	; (8001138 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80010c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010c8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010ca:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010d0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8001128 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010d8:	2303      	movs	r3, #3
 80010da:	ed8d 7b02 	vstr	d7, [sp, #8]
 80010de:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f004 fd1f 	bl	8005b24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010e6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80010f2:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010f4:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80010f8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80010fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001104:	f002 fed0 	bl	8003ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001108:	2021      	movs	r0, #33	; 0x21
 800110a:	f002 ff0b 	bl	8003f24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2101      	movs	r1, #1
 8001112:	2022      	movs	r0, #34	; 0x22
 8001114:	f002 fec8 	bl	8003ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001118:	2022      	movs	r0, #34	; 0x22
 800111a:	f002 ff03 	bl	8003f24 <HAL_NVIC_EnableIRQ>
}
 800111e:	b038      	add	sp, #224	; 0xe0
 8001120:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001122:	f001 fd27 	bl	8002b74 <Error_Handler>
 8001126:	e7c3      	b.n	80010b0 <HAL_I2C_MspInit+0x38>
 8001128:	00000c00 	.word	0x00000c00
 800112c:	00000012 	.word	0x00000012
 8001130:	40005800 	.word	0x40005800
 8001134:	58024400 	.word	0x58024400
 8001138:	58020400 	.word	0x58020400

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b530      	push	{r4, r5, lr}
 800113e:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001140:	224c      	movs	r2, #76	; 0x4c
 8001142:	2100      	movs	r1, #0
 8001144:	a80c      	add	r0, sp, #48	; 0x30
 8001146:	f017 fc91 	bl	8018a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114a:	2220      	movs	r2, #32
 800114c:	2100      	movs	r1, #0
 800114e:	a804      	add	r0, sp, #16
 8001150:	f017 fc8c 	bl	8018a6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001154:	2002      	movs	r0, #2
 8001156:	f005 fcc9 	bl	8006aec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800115a:	4b34      	ldr	r3, [pc, #208]	; (800122c <SystemClock_Config+0xf0>)
 800115c:	2100      	movs	r1, #0
 800115e:	4a34      	ldr	r2, [pc, #208]	; (8001230 <SystemClock_Config+0xf4>)
 8001160:	9101      	str	r1, [sp, #4]
 8001162:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001164:	f021 0101 	bic.w	r1, r1, #1
 8001168:	62d9      	str	r1, [r3, #44]	; 0x2c
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	6993      	ldr	r3, [r2, #24]
 8001174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001178:	6193      	str	r3, [r2, #24]
 800117a:	6993      	ldr	r3, [r2, #24]
 800117c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001184:	6993      	ldr	r3, [r2, #24]
 8001186:	049c      	lsls	r4, r3, #18
 8001188:	d5fc      	bpl.n	8001184 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <SystemClock_Config+0xf8>)
 800118c:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8001190:	f041 0102 	orr.w	r1, r1, #2
 8001194:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001198:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011a6:	9103      	str	r1, [sp, #12]
 80011a8:	6991      	ldr	r1, [r2, #24]
 80011aa:	4b20      	ldr	r3, [pc, #128]	; (800122c <SystemClock_Config+0xf0>)
 80011ac:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80011b0:	6191      	str	r1, [r2, #24]
 80011b2:	6992      	ldr	r2, [r2, #24]
 80011b4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80011b8:	9203      	str	r2, [sp, #12]
 80011ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <SystemClock_Config+0xf4>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80011be:	f041 0101 	orr.w	r1, r1, #1
 80011c2:	62d9      	str	r1, [r3, #44]	; 0x2c
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	9303      	str	r3, [sp, #12]
 80011cc:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ce:	6993      	ldr	r3, [r2, #24]
 80011d0:	0498      	lsls	r0, r3, #18
 80011d2:	d5fc      	bpl.n	80011ce <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d4:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011d6:	2508      	movs	r5, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80011d8:	2021      	movs	r0, #33	; 0x21
 80011da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011de:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e0:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e4:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011e8:	e9cd 351b 	strd	r3, r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011ec:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80011ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011f2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011f4:	2105      	movs	r1, #5
 80011f6:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011fa:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011fe:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001202:	f005 fd1d 	bl	8006c40 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001208:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800120a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120e:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001212:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001218:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800121a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800121c:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001220:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001224:	f006 f8a0 	bl	8007368 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001228:	b021      	add	sp, #132	; 0x84
 800122a:	bd30      	pop	{r4, r5, pc}
 800122c:	58000400 	.word	0x58000400
 8001230:	58024800 	.word	0x58024800
 8001234:	58024400 	.word	0x58024400

08001238 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001238:	b500      	push	{lr}
 800123a:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	22a4      	movs	r2, #164	; 0xa4
 800123e:	2100      	movs	r1, #0
 8001240:	a807      	add	r0, sp, #28
 8001242:	f017 fc13 	bl	8018a6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001246:	2019      	movs	r0, #25
 8001248:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2N = 344;
  PeriphClkInitStruct.PLL2.PLL2P = 7;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800124c:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800124e:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001250:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001256:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001258:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800125a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001280 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800125e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001262:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8001268:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800126c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001288 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001270:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001272:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001276:	f006 fb27 	bl	80078c8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800127a:	b031      	add	sp, #196	; 0xc4
 800127c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001280:	00011100 	.word	0x00011100
 8001284:	00000000 	.word	0x00000000
 8001288:	00000007 	.word	0x00000007
 800128c:	00000002 	.word	0x00000002

08001290 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
 8001290:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 8001292:	2301      	movs	r3, #1
 8001294:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
 8001298:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800129c:	b002      	add	sp, #8
 800129e:	4770      	bx	lr

080012a0 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
 80012a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 80012a4:	2301      	movs	r3, #1
{
 80012a6:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 80012a8:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 80012ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 80012b0:	b93b      	cbnz	r3, 80012c2 <getPresetNamesFromSDCard+0x22>
 80012b2:	f8df a078 	ldr.w	sl, [pc, #120]	; 800132c <getPresetNamesFromSDCard+0x8c>
			}

		}

	}
	diskBusy = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f88a 3000 	strb.w	r3, [sl]
	return;
}
 80012bc:	b009      	add	sp, #36	; 0x24
 80012be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012c2:	4b14      	ldr	r3, [pc, #80]	; (8001314 <getPresetNamesFromSDCard+0x74>)
 80012c4:	075a      	lsls	r2, r3, #29
 80012c6:	f040 82ed 	bne.w	80018a4 <getPresetNamesFromSDCard+0x604>
			audioOutBuffer[i] = 0;
 80012ca:	2000      	movs	r0, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80012d2:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d1fb      	bne.n	80012d2 <getPresetNamesFromSDCard+0x32>
		loadFailed = 0;
 80012da:	2400      	movs	r4, #0
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <getPresetNamesFromSDCard+0x78>)
		diskBusy = 1;
 80012de:	2501      	movs	r5, #1
 80012e0:	f8df a048 	ldr.w	sl, [pc, #72]	; 800132c <getPresetNamesFromSDCard+0x8c>
		disk_initialize(0);
 80012e4:	4620      	mov	r0, r4
		loadFailed = 0;
 80012e6:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 80012e8:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
 80012ec:	f00b fafa 	bl	800c8e4 <disk_initialize>
	    disk_status(0);
 80012f0:	4620      	mov	r0, r4
 80012f2:	f00b faed 	bl	800c8d0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80012f6:	462a      	mov	r2, r5
 80012f8:	4908      	ldr	r1, [pc, #32]	; (800131c <getPresetNamesFromSDCard+0x7c>)
 80012fa:	4809      	ldr	r0, [pc, #36]	; (8001320 <getPresetNamesFromSDCard+0x80>)
 80012fc:	f00d fc94 	bl	800ec28 <f_mount>
 8001300:	2800      	cmp	r0, #0
 8001302:	d1d8      	bne.n	80012b6 <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8001304:	4605      	mov	r5, r0
 8001306:	4e07      	ldr	r6, [pc, #28]	; (8001324 <getPresetNamesFromSDCard+0x84>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001308:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800131c <getPresetNamesFromSDCard+0x7c>
 800130c:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8001330 <getPresetNamesFromSDCard+0x90>
 8001310:	4f05      	ldr	r7, [pc, #20]	; (8001328 <getPresetNamesFromSDCard+0x88>)
 8001312:	e027      	b.n	8001364 <getPresetNamesFromSDCard+0xc4>
 8001314:	30000000 	.word	0x30000000
 8001318:	200180c4 	.word	0x200180c4
 800131c:	2001d5ac 	.word	0x2001d5ac
 8001320:	2001d148 	.word	0x2001d148
 8001324:	0801b3b0 	.word	0x0801b3b0
 8001328:	20013ed8 	.word	0x20013ed8
 800132c:	20013f10 	.word	0x20013f10
 8001330:	20015f78 	.word	0x20015f78
					strcat(charBuf, "*.ebp");
 8001334:	aa02      	add	r2, sp, #8
 8001336:	6830      	ldr	r0, [r6, #0]
 8001338:	88b1      	ldrh	r1, [r6, #4]
 800133a:	f10d 0c08 	add.w	ip, sp, #8
 800133e:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
 8001340:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
 8001342:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
 8001346:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
 8001348:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
 800134a:	4661      	mov	r1, ip
 800134c:	f017 fbba 	bl	8018ac4 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001350:	ab05      	add	r3, sp, #20
 8001352:	464a      	mov	r2, r9
 8001354:	4641      	mov	r1, r8
 8001356:	4638      	mov	r0, r7
 8001358:	f00e f9ae 	bl	800f6b8 <f_findfirst>
				if(res == FR_OK)
 800135c:	b358      	cbz	r0, 80013b6 <getPresetNamesFromSDCard+0x116>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 800135e:	3501      	adds	r5, #1
 8001360:	2d40      	cmp	r5, #64	; 0x40
 8001362:	d0a8      	beq.n	80012b6 <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
 8001364:	220a      	movs	r2, #10
 8001366:	a902      	add	r1, sp, #8
 8001368:	4628      	mov	r0, r5
 800136a:	f017 fb3b 	bl	80189e4 <itoa>
				int len = ((strlen(charBuf)));
 800136e:	a802      	add	r0, sp, #8
 8001370:	f7fe ffb2 	bl	80002d8 <strlen>
				if (len == 1)
 8001374:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8001376:	4603      	mov	r3, r0
				if (len == 1)
 8001378:	d1dc      	bne.n	8001334 <getPresetNamesFromSDCard+0x94>
					finalString[2] = charBuf[1];
 800137a:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
 800137e:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
 8001380:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
 8001384:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 8001386:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
 800138a:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
 800138c:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
 8001390:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
 8001394:	f7fe ffa0 	bl	80002d8 <strlen>
 8001398:	a905      	add	r1, sp, #20
 800139a:	4603      	mov	r3, r0
 800139c:	88b2      	ldrh	r2, [r6, #4]
 800139e:	4419      	add	r1, r3
 80013a0:	6830      	ldr	r0, [r6, #0]
 80013a2:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80013a4:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
 80013a6:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80013a8:	4638      	mov	r0, r7
 80013aa:	464a      	mov	r2, r9
 80013ac:	4641      	mov	r1, r8
 80013ae:	f00e f983 	bl	800f6b8 <f_findfirst>
				if(res == FR_OK)
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d1d3      	bne.n	800135e <getPresetNamesFromSDCard+0xbe>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80013b6:	f8df b354 	ldr.w	fp, [pc, #852]	; 800170c <getPresetNamesFromSDCard+0x46c>
 80013ba:	2211      	movs	r2, #17
 80013bc:	49d0      	ldr	r1, [pc, #832]	; (8001700 <getPresetNamesFromSDCard+0x460>)
 80013be:	4658      	mov	r0, fp
 80013c0:	f00d fc7e 	bl	800ecc0 <f_open>
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d1ca      	bne.n	800135e <getPresetNamesFromSDCard+0xbe>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 80013c8:	4cce      	ldr	r4, [pc, #824]	; (8001704 <getPresetNamesFromSDCard+0x464>)
 80013ca:	ab01      	add	r3, sp, #4
 80013cc:	f8db 200c 	ldr.w	r2, [fp, #12]
 80013d0:	4658      	mov	r0, fp
 80013d2:	4621      	mov	r1, r4
 80013d4:	f00d fdd8 	bl	800ef88 <f_read>
						f_close(&SDFile);
 80013d8:	4658      	mov	r0, fp
 80013da:	f00e f86d 	bl	800f4b8 <f_close>
						if (buffer[bufferIndex] == 17)
 80013de:	7820      	ldrb	r0, [r4, #0]
							presetNamesArray[i][j] = buffer[bufferIndex];
 80013e0:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80013e4:	49c8      	ldr	r1, [pc, #800]	; (8001708 <getPresetNamesFromSDCard+0x468>)
						if (buffer[bufferIndex] == 17)
 80013e6:	f1a0 0011 	sub.w	r0, r0, #17
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 80013ea:	f8df c324 	ldr.w	ip, [pc, #804]	; 8001710 <getPresetNamesFromSDCard+0x470>
						if (buffer[bufferIndex] == 17)
 80013ee:	fab0 f080 	clz	r0, r0
 80013f2:	0940      	lsrs	r0, r0, #5
 80013f4:	0083      	lsls	r3, r0, #2
							presetNamesArray[i][j] = buffer[bufferIndex];
 80013f6:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
 80013fa:	f801 0012 	strb.w	r0, [r1, r2, lsl #1]
 80013fe:	1c58      	adds	r0, r3, #1
 8001400:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8001404:	5c20      	ldrb	r0, [r4, r0]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001406:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
							presetNamesArray[i][j] = buffer[bufferIndex];
 800140a:	7048      	strb	r0, [r1, #1]
 800140c:	1c98      	adds	r0, r3, #2
 800140e:	5c20      	ldrb	r0, [r4, r0]
 8001410:	7088      	strb	r0, [r1, #2]
 8001412:	1cd8      	adds	r0, r3, #3
 8001414:	5c20      	ldrb	r0, [r4, r0]
 8001416:	70c8      	strb	r0, [r1, #3]
 8001418:	1d18      	adds	r0, r3, #4
 800141a:	5c20      	ldrb	r0, [r4, r0]
 800141c:	7108      	strb	r0, [r1, #4]
 800141e:	1d58      	adds	r0, r3, #5
 8001420:	5c20      	ldrb	r0, [r4, r0]
 8001422:	7148      	strb	r0, [r1, #5]
 8001424:	1d98      	adds	r0, r3, #6
 8001426:	5c20      	ldrb	r0, [r4, r0]
 8001428:	7188      	strb	r0, [r1, #6]
 800142a:	1dd8      	adds	r0, r3, #7
 800142c:	5c20      	ldrb	r0, [r4, r0]
 800142e:	71c8      	strb	r0, [r1, #7]
 8001430:	f103 0008 	add.w	r0, r3, #8
 8001434:	5c20      	ldrb	r0, [r4, r0]
 8001436:	7208      	strb	r0, [r1, #8]
 8001438:	f103 0009 	add.w	r0, r3, #9
 800143c:	5c20      	ldrb	r0, [r4, r0]
 800143e:	7248      	strb	r0, [r1, #9]
 8001440:	f103 000a 	add.w	r0, r3, #10
 8001444:	5c20      	ldrb	r0, [r4, r0]
 8001446:	7288      	strb	r0, [r1, #10]
 8001448:	f103 000b 	add.w	r0, r3, #11
 800144c:	5c20      	ldrb	r0, [r4, r0]
 800144e:	72c8      	strb	r0, [r1, #11]
 8001450:	f103 000c 	add.w	r0, r3, #12
 8001454:	5c20      	ldrb	r0, [r4, r0]
 8001456:	7308      	strb	r0, [r1, #12]
 8001458:	f103 000d 	add.w	r0, r3, #13
 800145c:	5c20      	ldrb	r0, [r4, r0]
 800145e:	7348      	strb	r0, [r1, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001460:	f103 010e 	add.w	r1, r3, #14
 8001464:	5c61      	ldrb	r1, [r4, r1]
 8001466:	f80c 1032 	strb.w	r1, [ip, r2, lsl #3]
 800146a:	f103 010f 	add.w	r1, r3, #15
 800146e:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
 8001472:	5c61      	ldrb	r1, [r4, r1]
 8001474:	7051      	strb	r1, [r2, #1]
 8001476:	f103 0110 	add.w	r1, r3, #16
 800147a:	5c61      	ldrb	r1, [r4, r1]
 800147c:	7091      	strb	r1, [r2, #2]
 800147e:	f103 0111 	add.w	r1, r3, #17
 8001482:	5c61      	ldrb	r1, [r4, r1]
 8001484:	70d1      	strb	r1, [r2, #3]
 8001486:	f103 0112 	add.w	r1, r3, #18
 800148a:	5c61      	ldrb	r1, [r4, r1]
 800148c:	7111      	strb	r1, [r2, #4]
 800148e:	f103 0113 	add.w	r1, r3, #19
 8001492:	5c61      	ldrb	r1, [r4, r1]
 8001494:	7151      	strb	r1, [r2, #5]
 8001496:	f103 0114 	add.w	r1, r3, #20
 800149a:	5c61      	ldrb	r1, [r4, r1]
 800149c:	7191      	strb	r1, [r2, #6]
 800149e:	f103 0115 	add.w	r1, r3, #21
 80014a2:	5c61      	ldrb	r1, [r4, r1]
 80014a4:	71d1      	strb	r1, [r2, #7]
 80014a6:	f103 0116 	add.w	r1, r3, #22
 80014aa:	5c61      	ldrb	r1, [r4, r1]
 80014ac:	7211      	strb	r1, [r2, #8]
 80014ae:	f103 0117 	add.w	r1, r3, #23
 80014b2:	5c61      	ldrb	r1, [r4, r1]
 80014b4:	7291      	strb	r1, [r2, #10]
 80014b6:	f103 0118 	add.w	r1, r3, #24
 80014ba:	5c61      	ldrb	r1, [r4, r1]
 80014bc:	72d1      	strb	r1, [r2, #11]
 80014be:	f103 0119 	add.w	r1, r3, #25
 80014c2:	5c61      	ldrb	r1, [r4, r1]
 80014c4:	7311      	strb	r1, [r2, #12]
 80014c6:	f103 011a 	add.w	r1, r3, #26
 80014ca:	5c61      	ldrb	r1, [r4, r1]
 80014cc:	7351      	strb	r1, [r2, #13]
 80014ce:	f103 011b 	add.w	r1, r3, #27
 80014d2:	5c61      	ldrb	r1, [r4, r1]
 80014d4:	7391      	strb	r1, [r2, #14]
 80014d6:	f103 011c 	add.w	r1, r3, #28
 80014da:	5c61      	ldrb	r1, [r4, r1]
 80014dc:	73d1      	strb	r1, [r2, #15]
 80014de:	f103 011d 	add.w	r1, r3, #29
 80014e2:	5c61      	ldrb	r1, [r4, r1]
 80014e4:	7411      	strb	r1, [r2, #16]
 80014e6:	f103 011e 	add.w	r1, r3, #30
 80014ea:	5c61      	ldrb	r1, [r4, r1]
 80014ec:	7451      	strb	r1, [r2, #17]
 80014ee:	f103 011f 	add.w	r1, r3, #31
 80014f2:	5c61      	ldrb	r1, [r4, r1]
 80014f4:	7491      	strb	r1, [r2, #18]
 80014f6:	f103 0120 	add.w	r1, r3, #32
 80014fa:	5c61      	ldrb	r1, [r4, r1]
 80014fc:	7511      	strb	r1, [r2, #20]
 80014fe:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8001502:	5c61      	ldrb	r1, [r4, r1]
 8001504:	7551      	strb	r1, [r2, #21]
 8001506:	f103 0122 	add.w	r1, r3, #34	; 0x22
 800150a:	5c61      	ldrb	r1, [r4, r1]
 800150c:	7591      	strb	r1, [r2, #22]
 800150e:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8001512:	5c61      	ldrb	r1, [r4, r1]
 8001514:	75d1      	strb	r1, [r2, #23]
 8001516:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800151a:	5c61      	ldrb	r1, [r4, r1]
 800151c:	7611      	strb	r1, [r2, #24]
 800151e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8001522:	5c61      	ldrb	r1, [r4, r1]
 8001524:	7651      	strb	r1, [r2, #25]
 8001526:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800152a:	5c61      	ldrb	r1, [r4, r1]
 800152c:	7691      	strb	r1, [r2, #26]
 800152e:	f103 0127 	add.w	r1, r3, #39	; 0x27
 8001532:	5c61      	ldrb	r1, [r4, r1]
 8001534:	76d1      	strb	r1, [r2, #27]
 8001536:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800153a:	5c61      	ldrb	r1, [r4, r1]
 800153c:	7711      	strb	r1, [r2, #28]
 800153e:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8001542:	5c61      	ldrb	r1, [r4, r1]
 8001544:	7791      	strb	r1, [r2, #30]
 8001546:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800154a:	5c61      	ldrb	r1, [r4, r1]
 800154c:	77d1      	strb	r1, [r2, #31]
 800154e:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 8001552:	5c61      	ldrb	r1, [r4, r1]
 8001554:	f882 1020 	strb.w	r1, [r2, #32]
 8001558:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800155c:	5c61      	ldrb	r1, [r4, r1]
 800155e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8001562:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8001566:	5c61      	ldrb	r1, [r4, r1]
 8001568:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
 800156c:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 8001570:	5c61      	ldrb	r1, [r4, r1]
 8001572:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8001576:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 800157a:	5c61      	ldrb	r1, [r4, r1]
 800157c:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 8001580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001584:	5c61      	ldrb	r1, [r4, r1]
 8001586:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
 800158a:	f103 0131 	add.w	r1, r3, #49	; 0x31
 800158e:	5c61      	ldrb	r1, [r4, r1]
 8001590:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8001594:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8001598:	5c61      	ldrb	r1, [r4, r1]
 800159a:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
 800159e:	f103 0133 	add.w	r1, r3, #51	; 0x33
 80015a2:	5c61      	ldrb	r1, [r4, r1]
 80015a4:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 80015a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80015ac:	5c61      	ldrb	r1, [r4, r1]
 80015ae:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
 80015b2:	f103 0135 	add.w	r1, r3, #53	; 0x35
 80015b6:	5c61      	ldrb	r1, [r4, r1]
 80015b8:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
 80015bc:	f103 0136 	add.w	r1, r3, #54	; 0x36
 80015c0:	5c61      	ldrb	r1, [r4, r1]
 80015c2:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
 80015c6:	f103 0137 	add.w	r1, r3, #55	; 0x37
 80015ca:	5c61      	ldrb	r1, [r4, r1]
 80015cc:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
 80015d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80015d4:	5c61      	ldrb	r1, [r4, r1]
 80015d6:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 80015da:	f103 0139 	add.w	r1, r3, #57	; 0x39
 80015de:	5c61      	ldrb	r1, [r4, r1]
 80015e0:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
 80015e4:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 80015e8:	5c61      	ldrb	r1, [r4, r1]
 80015ea:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 80015ee:	f103 013b 	add.w	r1, r3, #59	; 0x3b
 80015f2:	5c61      	ldrb	r1, [r4, r1]
 80015f4:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
 80015f8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80015fc:	5c61      	ldrb	r1, [r4, r1]
 80015fe:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
 8001602:	f103 013d 	add.w	r1, r3, #61	; 0x3d
 8001606:	5c61      	ldrb	r1, [r4, r1]
 8001608:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
 800160c:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 8001610:	5c61      	ldrb	r1, [r4, r1]
 8001612:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
 8001616:	f103 013f 	add.w	r1, r3, #63	; 0x3f
 800161a:	5c61      	ldrb	r1, [r4, r1]
 800161c:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
 8001620:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001624:	5c61      	ldrb	r1, [r4, r1]
 8001626:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
 800162a:	f103 0141 	add.w	r1, r3, #65	; 0x41
 800162e:	5c61      	ldrb	r1, [r4, r1]
 8001630:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8001634:	f103 0142 	add.w	r1, r3, #66	; 0x42
 8001638:	5c61      	ldrb	r1, [r4, r1]
 800163a:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
 800163e:	f103 0143 	add.w	r1, r3, #67	; 0x43
 8001642:	5c61      	ldrb	r1, [r4, r1]
 8001644:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
 8001648:	f103 0144 	add.w	r1, r3, #68	; 0x44
 800164c:	5c61      	ldrb	r1, [r4, r1]
 800164e:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
 8001652:	f103 0145 	add.w	r1, r3, #69	; 0x45
 8001656:	5c61      	ldrb	r1, [r4, r1]
 8001658:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
 800165c:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8001660:	5c61      	ldrb	r1, [r4, r1]
 8001662:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
 8001666:	f103 0147 	add.w	r1, r3, #71	; 0x47
 800166a:	5c61      	ldrb	r1, [r4, r1]
 800166c:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
 8001670:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001674:	5c61      	ldrb	r1, [r4, r1]
 8001676:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
 800167a:	f103 0149 	add.w	r1, r3, #73	; 0x49
 800167e:	5c61      	ldrb	r1, [r4, r1]
 8001680:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
 8001684:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 8001688:	5c61      	ldrb	r1, [r4, r1]
 800168a:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 800168e:	f103 014b 	add.w	r1, r3, #75	; 0x4b
 8001692:	5c61      	ldrb	r1, [r4, r1]
 8001694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001698:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800169c:	5c61      	ldrb	r1, [r4, r1]
 800169e:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 80016a2:	f103 014d 	add.w	r1, r3, #77	; 0x4d
 80016a6:	5c61      	ldrb	r1, [r4, r1]
 80016a8:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 80016ac:	f103 014e 	add.w	r1, r3, #78	; 0x4e
 80016b0:	5c61      	ldrb	r1, [r4, r1]
 80016b2:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
 80016b6:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 80016ba:	5c61      	ldrb	r1, [r4, r1]
 80016bc:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
 80016c0:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80016c4:	5c61      	ldrb	r1, [r4, r1]
 80016c6:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
 80016ca:	f103 0151 	add.w	r1, r3, #81	; 0x51
 80016ce:	5c61      	ldrb	r1, [r4, r1]
 80016d0:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 80016d4:	f103 0152 	add.w	r1, r3, #82	; 0x52
 80016d8:	5c61      	ldrb	r1, [r4, r1]
 80016da:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
 80016de:	f103 0153 	add.w	r1, r3, #83	; 0x53
 80016e2:	5c61      	ldrb	r1, [r4, r1]
 80016e4:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
 80016e8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80016ec:	5c61      	ldrb	r1, [r4, r1]
 80016ee:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
 80016f2:	f103 0155 	add.w	r1, r3, #85	; 0x55
 80016f6:	5c61      	ldrb	r1, [r4, r1]
 80016f8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
 80016fc:	e00a      	b.n	8001714 <getPresetNamesFromSDCard+0x474>
 80016fe:	bf00      	nop
 8001700:	20015f8e 	.word	0x20015f8e
 8001704:	30042380 	.word	0x30042380
 8001708:	30042000 	.word	0x30042000
 800170c:	2001d37c 	.word	0x2001d37c
 8001710:	30043380 	.word	0x30043380
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 8001714:	f103 0156 	add.w	r1, r3, #86	; 0x56
 8001718:	5c61      	ldrb	r1, [r4, r1]
 800171a:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
 800171e:	f103 0157 	add.w	r1, r3, #87	; 0x57
 8001722:	5c61      	ldrb	r1, [r4, r1]
 8001724:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
 8001728:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800172c:	5c61      	ldrb	r1, [r4, r1]
 800172e:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 8001732:	f103 0159 	add.w	r1, r3, #89	; 0x59
 8001736:	5c61      	ldrb	r1, [r4, r1]
 8001738:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800173c:	f103 015a 	add.w	r1, r3, #90	; 0x5a
 8001740:	5c61      	ldrb	r1, [r4, r1]
 8001742:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
 8001746:	f103 015b 	add.w	r1, r3, #91	; 0x5b
 800174a:	5c61      	ldrb	r1, [r4, r1]
 800174c:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
 8001750:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8001754:	5c61      	ldrb	r1, [r4, r1]
 8001756:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 800175a:	f103 015d 	add.w	r1, r3, #93	; 0x5d
 800175e:	5c61      	ldrb	r1, [r4, r1]
 8001760:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 8001764:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8001768:	5c61      	ldrb	r1, [r4, r1]
 800176a:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 800176e:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001772:	5c61      	ldrb	r1, [r4, r1]
 8001774:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8001778:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800177c:	5c61      	ldrb	r1, [r4, r1]
 800177e:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8001782:	f103 0161 	add.w	r1, r3, #97	; 0x61
 8001786:	5c61      	ldrb	r1, [r4, r1]
 8001788:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
 800178c:	f103 0162 	add.w	r1, r3, #98	; 0x62
 8001790:	5c61      	ldrb	r1, [r4, r1]
 8001792:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8001796:	f103 0163 	add.w	r1, r3, #99	; 0x63
 800179a:	5c61      	ldrb	r1, [r4, r1]
 800179c:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
 80017a0:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80017a4:	5c61      	ldrb	r1, [r4, r1]
 80017a6:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
 80017aa:	f103 0165 	add.w	r1, r3, #101	; 0x65
 80017ae:	5c61      	ldrb	r1, [r4, r1]
 80017b0:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
 80017b4:	f103 0166 	add.w	r1, r3, #102	; 0x66
 80017b8:	5c61      	ldrb	r1, [r4, r1]
 80017ba:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
 80017be:	f103 0167 	add.w	r1, r3, #103	; 0x67
 80017c2:	5c61      	ldrb	r1, [r4, r1]
 80017c4:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
 80017c8:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80017cc:	5c61      	ldrb	r1, [r4, r1]
 80017ce:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
 80017d2:	f103 0169 	add.w	r1, r3, #105	; 0x69
 80017d6:	5c61      	ldrb	r1, [r4, r1]
 80017d8:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
 80017dc:	f103 016a 	add.w	r1, r3, #106	; 0x6a
 80017e0:	5c61      	ldrb	r1, [r4, r1]
 80017e2:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
 80017e6:	f103 016b 	add.w	r1, r3, #107	; 0x6b
 80017ea:	5c61      	ldrb	r1, [r4, r1]
 80017ec:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
 80017f0:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80017f4:	5c61      	ldrb	r1, [r4, r1]
 80017f6:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
 80017fa:	f103 016d 	add.w	r1, r3, #109	; 0x6d
 80017fe:	5c61      	ldrb	r1, [r4, r1]
 8001800:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
 8001804:	f103 016e 	add.w	r1, r3, #110	; 0x6e
 8001808:	5c61      	ldrb	r1, [r4, r1]
 800180a:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
 800180e:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8001812:	5c61      	ldrb	r1, [r4, r1]
 8001814:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
 8001818:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800181c:	5c61      	ldrb	r1, [r4, r1]
 800181e:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 8001822:	f103 0171 	add.w	r1, r3, #113	; 0x71
 8001826:	5c61      	ldrb	r1, [r4, r1]
 8001828:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
 800182c:	f103 0172 	add.w	r1, r3, #114	; 0x72
 8001830:	5c61      	ldrb	r1, [r4, r1]
 8001832:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
 8001836:	f103 0173 	add.w	r1, r3, #115	; 0x73
 800183a:	5c61      	ldrb	r1, [r4, r1]
 800183c:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
 8001840:	f103 0174 	add.w	r1, r3, #116	; 0x74
 8001844:	5c61      	ldrb	r1, [r4, r1]
 8001846:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
 800184a:	f103 0175 	add.w	r1, r3, #117	; 0x75
 800184e:	5c61      	ldrb	r1, [r4, r1]
 8001850:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
 8001854:	f103 0176 	add.w	r1, r3, #118	; 0x76
 8001858:	5c61      	ldrb	r1, [r4, r1]
 800185a:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
 800185e:	f103 0177 	add.w	r1, r3, #119	; 0x77
 8001862:	5c61      	ldrb	r1, [r4, r1]
 8001864:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
 8001868:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800186c:	5c61      	ldrb	r1, [r4, r1]
 800186e:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
 8001872:	f103 0179 	add.w	r1, r3, #121	; 0x79
 8001876:	5c61      	ldrb	r1, [r4, r1]
 8001878:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
 800187c:	f103 017a 	add.w	r1, r3, #122	; 0x7a
 8001880:	5c61      	ldrb	r1, [r4, r1]
 8001882:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
 8001886:	f103 017b 	add.w	r1, r3, #123	; 0x7b
 800188a:	5c61      	ldrb	r1, [r4, r1]
 800188c:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 8001890:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8001894:	337d      	adds	r3, #125	; 0x7d
 8001896:	5c61      	ldrb	r1, [r4, r1]
 8001898:	5ce3      	ldrb	r3, [r4, r3]
 800189a:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
 800189e:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
						for (int j = 0; j < 4; j++)
 80018a2:	e55c      	b.n	800135e <getPresetNamesFromSDCard+0xbe>
			audioOutBuffer[i] = 0;
 80018a4:	2200      	movs	r2, #0
 80018a6:	f503 6180 	add.w	r1, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
 80018aa:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80018ae:	3308      	adds	r3, #8
 80018b0:	4299      	cmp	r1, r3
 80018b2:	d1fa      	bne.n	80018aa <getPresetNamesFromSDCard+0x60a>
 80018b4:	e511      	b.n	80012da <getPresetNamesFromSDCard+0x3a>
 80018b6:	bf00      	nop

080018b8 <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
 80018b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80018bc:	4c21      	ldr	r4, [pc, #132]	; (8001944 <SDRAM_init+0x8c>)
{
 80018be:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80018c0:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
 80018c2:	2600      	movs	r6, #0
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018c4:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80018c6:	a902      	add	r1, sp, #8
 80018c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018cc:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80018ce:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
 80018d2:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018d4:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
 80018d8:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80018dc:	f008 fdfe 	bl	800a4dc <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
 80018e0:	4628      	mov	r0, r5
 80018e2:	f002 faad 	bl	8003e40 <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80018e6:	a902      	add	r1, sp, #8
 80018e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ec:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 80018ee:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80018f0:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
 80018f4:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80018f8:	f008 fdf0 	bl	800a4dc <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80018fc:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80018fe:	a902      	add	r1, sp, #8
 8001900:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001904:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 8001906:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001908:	9302      	str	r3, [sp, #8]
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800190a:	2604      	movs	r6, #4
	        Command.AutoRefreshNumber      = 2;
 800190c:	e9cd 7803 	strd	r7, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001910:	f008 fde4 	bl	800a4dc <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8001914:	f240 2322 	movw	r3, #546	; 0x222
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001918:	2710      	movs	r7, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800191a:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 800191c:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800191e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 8001922:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001924:	4620      	mov	r0, r4
	        Command.AutoRefreshNumber      = 1;
 8001926:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
 8001928:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800192a:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800192e:	f008 fdd5 	bl	800a4dc <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
 8001932:	f240 21fa 	movw	r1, #762	; 0x2fa
 8001936:	4620      	mov	r0, r4
 8001938:	f008 fdf0 	bl	800a51c <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
 800193c:	b006      	add	sp, #24
 800193e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001942:	bf00      	nop
 8001944:	20013e34 	.word	0x20013e34

08001948 <setEffectsFunctions>:
	;
}

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
 8001948:	4ba1      	ldr	r3, [pc, #644]	; (8001bd0 <setEffectsFunctions+0x288>)
 800194a:	2201      	movs	r2, #1
{
 800194c:	b410      	push	{r4}
	effectsActive[i] = 1;
 800194e:	545a      	strb	r2, [r3, r1]
	switch (effectType)
 8001950:	2815      	cmp	r0, #21
 8001952:	d82b      	bhi.n	80019ac <setEffectsFunctions+0x64>
 8001954:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001958:	0217022b 	.word	0x0217022b
 800195c:	01ef0203 	.word	0x01ef0203
 8001960:	01d601e9 	.word	0x01d601e9
 8001964:	012601c2 	.word	0x012601c2
 8001968:	01010111 	.word	0x01010111
 800196c:	001600f1 	.word	0x001600f1
 8001970:	00c900dc 	.word	0x00c900dc
 8001974:	00a300b6 	.word	0x00a300b6
 8001978:	007c0090 	.word	0x007c0090
 800197c:	00540068 	.word	0x00540068
 8001980:	002d0040 	.word	0x002d0040
			  effectSetters[i].setParam3 = &tiltParam3;
			  effectSetters[i].setParam4 = &tiltParam4;
			  effectSetters[i].setParam5 = &param5Linear;
			  break;
		  case Wavefolder:
			  effectTick[i] = &wavefolderTick;
 8001984:	4b93      	ldr	r3, [pc, #588]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001986:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
 800198a:	4c93      	ldr	r4, [pc, #588]	; (8001bd8 <setEffectsFunctions+0x290>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 800198c:	4a93      	ldr	r2, [pc, #588]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &wavefolderTick;
 800198e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001992:	4993      	ldr	r1, [pc, #588]	; (8001be0 <setEffectsFunctions+0x298>)
 8001994:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
 8001998:	4c92      	ldr	r4, [pc, #584]	; (8001be4 <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 800199a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
 800199e:	4892      	ldr	r0, [pc, #584]	; (8001be8 <setEffectsFunctions+0x2a0>)
			  effectSetters[i].setParam4 = &param4Linear;
 80019a0:	4992      	ldr	r1, [pc, #584]	; (8001bec <setEffectsFunctions+0x2a4>)
			  effectSetters[i].setParam5 = &param5Linear;
 80019a2:	4a93      	ldr	r2, [pc, #588]	; (8001bf0 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam3 = &tiltParam3;
 80019a4:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
 80019a8:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
 80019ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019b0:	4770      	bx	lr
			  effectTick[i] = &FXLadderLowpassTick;
 80019b2:	4b88      	ldr	r3, [pc, #544]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 80019b4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
 80019b8:	4a8e      	ldr	r2, [pc, #568]	; (8001bf4 <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 80019ba:	4888      	ldr	r0, [pc, #544]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXLadderLowpassTick;
 80019bc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 80019c0:	498d      	ldr	r1, [pc, #564]	; (8001bf8 <setEffectsFunctions+0x2b0>)
 80019c2:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
 80019c6:	4a8d      	ldr	r2, [pc, #564]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 80019c8:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 80019cc:	498c      	ldr	r1, [pc, #560]	; (8001c00 <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam2 = &blankFunction;;
 80019ce:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 80019d0:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 80019d2:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 80019d6:	e7e9      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZbandrejectTick;
 80019d8:	4b7e      	ldr	r3, [pc, #504]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 80019da:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
 80019de:	4a89      	ldr	r2, [pc, #548]	; (8001c04 <setEffectsFunctions+0x2bc>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 80019e0:	487e      	ldr	r0, [pc, #504]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZbandrejectTick;
 80019e2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 80019e6:	4988      	ldr	r1, [pc, #544]	; (8001c08 <setEffectsFunctions+0x2c0>)
 80019e8:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 80019ec:	4a83      	ldr	r2, [pc, #524]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 80019ee:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
 80019f2:	4886      	ldr	r0, [pc, #536]	; (8001c0c <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 80019f4:	4986      	ldr	r1, [pc, #536]	; (8001c10 <setEffectsFunctions+0x2c8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 80019f6:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 80019f8:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 80019fa:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 80019fe:	e7d5      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZhighshelfTick;
 8001a00:	4b74      	ldr	r3, [pc, #464]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001a02:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
 8001a06:	4a83      	ldr	r2, [pc, #524]	; (8001c14 <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001a08:	4874      	ldr	r0, [pc, #464]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZhighshelfTick;
 8001a0a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001a0e:	4982      	ldr	r1, [pc, #520]	; (8001c18 <setEffectsFunctions+0x2d0>)
 8001a10:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 8001a14:	4a79      	ldr	r2, [pc, #484]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001a16:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8001a1a:	4880      	ldr	r0, [pc, #512]	; (8001c1c <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001a1c:	4980      	ldr	r1, [pc, #512]	; (8001c20 <setEffectsFunctions+0x2d8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 8001a1e:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001a20:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001a22:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001a26:	e7c1      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZlowshelfTick;
 8001a28:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001a2a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
 8001a2e:	4a7d      	ldr	r2, [pc, #500]	; (8001c24 <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001a30:	486a      	ldr	r0, [pc, #424]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZlowshelfTick;
 8001a32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001a36:	497c      	ldr	r1, [pc, #496]	; (8001c28 <setEffectsFunctions+0x2e0>)
 8001a38:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001a3c:	4a6f      	ldr	r2, [pc, #444]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001a3e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8001a42:	487a      	ldr	r0, [pc, #488]	; (8001c2c <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001a44:	497a      	ldr	r1, [pc, #488]	; (8001c30 <setEffectsFunctions+0x2e8>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001a46:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a48:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001a4a:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001a4e:	e7ad      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZpeakTick;
 8001a50:	4b60      	ldr	r3, [pc, #384]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001a52:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
 8001a56:	4a77      	ldr	r2, [pc, #476]	; (8001c34 <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001a58:	4860      	ldr	r0, [pc, #384]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZpeakTick;
 8001a5a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001a5e:	4976      	ldr	r1, [pc, #472]	; (8001c38 <setEffectsFunctions+0x2f0>)
 8001a60:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001a64:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001a66:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
 8001a6a:	4874      	ldr	r0, [pc, #464]	; (8001c3c <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001a6c:	4974      	ldr	r1, [pc, #464]	; (8001c40 <setEffectsFunctions+0x2f8>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001a6e:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a70:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001a72:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001a76:	e799      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &FXdiodeLowpassTick;
 8001a78:	4b56      	ldr	r3, [pc, #344]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001a7a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
 8001a7e:	4a71      	ldr	r2, [pc, #452]	; (8001c44 <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001a80:	4856      	ldr	r0, [pc, #344]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXdiodeLowpassTick;
 8001a82:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001a86:	4970      	ldr	r1, [pc, #448]	; (8001c48 <setEffectsFunctions+0x300>)
 8001a88:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001a8c:	4a5b      	ldr	r2, [pc, #364]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001a8e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 8001a92:	496e      	ldr	r1, [pc, #440]	; (8001c4c <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001a94:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 8001a96:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a98:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001a9c:	e786      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &FXbandpassTick;
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001aa0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
 8001aa4:	4a6a      	ldr	r2, [pc, #424]	; (8001c50 <setEffectsFunctions+0x308>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001aa6:	484d      	ldr	r0, [pc, #308]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXbandpassTick;
 8001aa8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001aac:	4969      	ldr	r1, [pc, #420]	; (8001c54 <setEffectsFunctions+0x30c>)
 8001aae:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001ab2:	4a52      	ldr	r2, [pc, #328]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001ab4:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 8001ab8:	4967      	ldr	r1, [pc, #412]	; (8001c58 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001aba:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 8001abc:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001abe:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001ac2:	e773      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &FXhighpassTick;
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001ac6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
 8001aca:	4a64      	ldr	r2, [pc, #400]	; (8001c5c <setEffectsFunctions+0x314>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001acc:	4843      	ldr	r0, [pc, #268]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXhighpassTick;
 8001ace:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001ad2:	4963      	ldr	r1, [pc, #396]	; (8001c60 <setEffectsFunctions+0x318>)
 8001ad4:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001ad8:	4a48      	ldr	r2, [pc, #288]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001ada:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8001ade:	4961      	ldr	r1, [pc, #388]	; (8001c64 <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001ae0:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8001ae2:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001ae4:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001ae8:	e760      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &FXlowpassTick;
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001aec:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
 8001af0:	4a5d      	ldr	r2, [pc, #372]	; (8001c68 <setEffectsFunctions+0x320>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001af2:	483a      	ldr	r0, [pc, #232]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXlowpassTick;
 8001af4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001af8:	495c      	ldr	r1, [pc, #368]	; (8001c6c <setEffectsFunctions+0x324>)
 8001afa:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001afe:	4a3f      	ldr	r2, [pc, #252]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001b00:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001b04:	495a      	ldr	r1, [pc, #360]	; (8001c70 <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam2 = &blankFunction;
 8001b06:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001b08:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001b0a:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001b0e:	e74d      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &delayTick;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &delayParam1;
 8001b12:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &delayTick;
 8001b16:	4c57      	ldr	r4, [pc, #348]	; (8001c74 <setEffectsFunctions+0x32c>)
			  effectSetters[i].setParam1 = &delayParam1;
 8001b18:	4a30      	ldr	r2, [pc, #192]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &delayTick;
 8001b1a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
 8001b1e:	4956      	ldr	r1, [pc, #344]	; (8001c78 <setEffectsFunctions+0x330>)
 8001b20:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &delayParam2;
 8001b24:	4c55      	ldr	r4, [pc, #340]	; (8001c7c <setEffectsFunctions+0x334>)
			  effectSetters[i].setParam1 = &delayParam1;
 8001b26:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &delayParam3;
 8001b2a:	4855      	ldr	r0, [pc, #340]	; (8001c80 <setEffectsFunctions+0x338>)
			  effectSetters[i].setParam4 = &delayParam4;
 8001b2c:	4955      	ldr	r1, [pc, #340]	; (8001c84 <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam5 = &delayParam5;
 8001b2e:	4a56      	ldr	r2, [pc, #344]	; (8001c88 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam3 = &delayParam3;
 8001b30:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &delayParam5;
 8001b34:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 8001b38:	e738      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &tiltFilterTick;
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001b3c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
 8001b40:	4c52      	ldr	r4, [pc, #328]	; (8001c8c <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001b42:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &tiltFilterTick;
 8001b44:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
 8001b48:	4951      	ldr	r1, [pc, #324]	; (8001c90 <setEffectsFunctions+0x348>)
 8001b4a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
 8001b4e:	4c51      	ldr	r4, [pc, #324]	; (8001c94 <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001b50:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
 8001b54:	4850      	ldr	r0, [pc, #320]	; (8001c98 <setEffectsFunctions+0x350>)
			  effectSetters[i].setParam4 = &tiltParam4;
 8001b56:	4951      	ldr	r1, [pc, #324]	; (8001c9c <setEffectsFunctions+0x354>)
 8001b58:	e723      	b.n	80019a2 <setEffectsFunctions+0x5a>
			  effectTick[i] = &bcTick;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001b5c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
 8001b60:	4c4f      	ldr	r4, [pc, #316]	; (8001ca0 <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001b62:	4a1e      	ldr	r2, [pc, #120]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &bcTick;
 8001b64:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001b68:	494e      	ldr	r1, [pc, #312]	; (8001ca4 <setEffectsFunctions+0x35c>)
 8001b6a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2Linear;
 8001b6e:	4c4e      	ldr	r4, [pc, #312]	; (8001ca8 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001b70:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
 8001b74:	484d      	ldr	r0, [pc, #308]	; (8001cac <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam4 = &param4Linear;
 8001b76:	491d      	ldr	r1, [pc, #116]	; (8001bec <setEffectsFunctions+0x2a4>)
 8001b78:	e713      	b.n	80019a2 <setEffectsFunctions+0x5a>
			  effectTick[i] = &chorusTick;
 8001b7a:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &chorusParam1;
 8001b7c:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
 8001b80:	4c4b      	ldr	r4, [pc, #300]	; (8001cb0 <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam1 = &chorusParam1;
 8001b82:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &chorusTick;
 8001b84:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
 8001b88:	494a      	ldr	r1, [pc, #296]	; (8001cb4 <setEffectsFunctions+0x36c>)
 8001b8a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &chorusParam2;
 8001b8e:	4c4a      	ldr	r4, [pc, #296]	; (8001cb8 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam1 = &chorusParam1;
 8001b90:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
 8001b94:	4849      	ldr	r0, [pc, #292]	; (8001cbc <setEffectsFunctions+0x374>)
			  effectSetters[i].setParam4 = &chorusParam4;
 8001b96:	494a      	ldr	r1, [pc, #296]	; (8001cc0 <setEffectsFunctions+0x378>)
			  effectSetters[i].setParam5 = &blankFunction;
 8001b98:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam3 = &chorusParam3;
 8001b9a:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8001b9e:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 8001ba2:	e703      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &compressorTick;
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &compressorParam1;
 8001ba6:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
 8001baa:	4c46      	ldr	r4, [pc, #280]	; (8001cc4 <setEffectsFunctions+0x37c>)
			  effectSetters[i].setParam1 = &compressorParam1;
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <setEffectsFunctions+0x294>)
			  effectTick[i] = &compressorTick;
 8001bae:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
 8001bb2:	4945      	ldr	r1, [pc, #276]	; (8001cc8 <setEffectsFunctions+0x380>)
 8001bb4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
 8001bb8:	4c44      	ldr	r4, [pc, #272]	; (8001ccc <setEffectsFunctions+0x384>)
			  effectSetters[i].setParam1 = &compressorParam1;
 8001bba:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
 8001bbe:	4844      	ldr	r0, [pc, #272]	; (8001cd0 <setEffectsFunctions+0x388>)
			  effectSetters[i].setParam4 = &compressorParam4;
 8001bc0:	4944      	ldr	r1, [pc, #272]	; (8001cd4 <setEffectsFunctions+0x38c>)
			  effectSetters[i].setParam5 = &compressorParam5;
 8001bc2:	4a45      	ldr	r2, [pc, #276]	; (8001cd8 <setEffectsFunctions+0x390>)
			  effectSetters[i].setParam3 = &compressorParam3;
 8001bc4:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
 8001bc8:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 8001bcc:	e6ee      	b.n	80019ac <setEffectsFunctions+0x64>
 8001bce:	bf00      	nop
 8001bd0:	20013f64 	.word	0x20013f64
 8001bd4:	2001c934 	.word	0x2001c934
 8001bd8:	00007681 	.word	0x00007681
 8001bdc:	20013f14 	.word	0x20013f14
 8001be0:	000070c1 	.word	0x000070c1
 8001be4:	00007381 	.word	0x00007381
 8001be8:	00007101 	.word	0x00007101
 8001bec:	00007541 	.word	0x00007541
 8001bf0:	00007561 	.word	0x00007561
 8001bf4:	00007ee1 	.word	0x00007ee1
 8001bf8:	00008101 	.word	0x00008101
 8001bfc:	00001981 	.word	0x00001981
 8001c00:	00008341 	.word	0x00008341
 8001c04:	00007ec1 	.word	0x00007ec1
 8001c08:	000080c1 	.word	0x000080c1
 8001c0c:	00008201 	.word	0x00008201
 8001c10:	00008321 	.word	0x00008321
 8001c14:	00007ea1 	.word	0x00007ea1
 8001c18:	00008081 	.word	0x00008081
 8001c1c:	000081c1 	.word	0x000081c1
 8001c20:	00008301 	.word	0x00008301
 8001c24:	00007e81 	.word	0x00007e81
 8001c28:	00008041 	.word	0x00008041
 8001c2c:	00008181 	.word	0x00008181
 8001c30:	000082e1 	.word	0x000082e1
 8001c34:	00007e61 	.word	0x00007e61
 8001c38:	00008001 	.word	0x00008001
 8001c3c:	00008141 	.word	0x00008141
 8001c40:	000082c1 	.word	0x000082c1
 8001c44:	00007e41 	.word	0x00007e41
 8001c48:	00007fc1 	.word	0x00007fc1
 8001c4c:	000082a1 	.word	0x000082a1
 8001c50:	00007e21 	.word	0x00007e21
 8001c54:	00007f81 	.word	0x00007f81
 8001c58:	00008281 	.word	0x00008281
 8001c5c:	00007e01 	.word	0x00007e01
 8001c60:	00007f41 	.word	0x00007f41
 8001c64:	00008261 	.word	0x00008261
 8001c68:	00007de1 	.word	0x00007de1
 8001c6c:	00007f01 	.word	0x00007f01
 8001c70:	00008241 	.word	0x00008241
 8001c74:	08003c21 	.word	0x08003c21
 8001c78:	00007881 	.word	0x00007881
 8001c7c:	000078c1 	.word	0x000078c1
 8001c80:	00007901 	.word	0x00007901
 8001c84:	00007921 	.word	0x00007921
 8001c88:	00007941 	.word	0x00007941
 8001c8c:	00007ac1 	.word	0x00007ac1
 8001c90:	00007141 	.word	0x00007141
 8001c94:	000071a1 	.word	0x000071a1
 8001c98:	00007201 	.word	0x00007201
 8001c9c:	00007241 	.word	0x00007241
 8001ca0:	00007d81 	.word	0x00007d81
 8001ca4:	00007081 	.word	0x00007081
 8001ca8:	000073a1 	.word	0x000073a1
 8001cac:	000075a1 	.word	0x000075a1
 8001cb0:	00007961 	.word	0x00007961
 8001cb4:	000077a1 	.word	0x000077a1
 8001cb8:	000077e1 	.word	0x000077e1
 8001cbc:	00007801 	.word	0x00007801
 8001cc0:	00007841 	.word	0x00007841
 8001cc4:	00007dc1 	.word	0x00007dc1
 8001cc8:	00007281 	.word	0x00007281
 8001ccc:	000072a1 	.word	0x000072a1
 8001cd0:	000072e1 	.word	0x000072e1
 8001cd4:	00007301 	.word	0x00007301
 8001cd8:	00007341 	.word	0x00007341
			  effectTick[i] = &shaperTick;
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001cde:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
 8001ce2:	4a3d      	ldr	r2, [pc, #244]	; (8001dd8 <setEffectsFunctions+0x490>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001ce4:	483d      	ldr	r0, [pc, #244]	; (8001ddc <setEffectsFunctions+0x494>)
			  effectTick[i] = &shaperTick;
 8001ce6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001cea:	493d      	ldr	r1, [pc, #244]	; (8001de0 <setEffectsFunctions+0x498>)
 8001cec:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001cf0:	4a3c      	ldr	r2, [pc, #240]	; (8001de4 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001cf2:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001cf6:	483c      	ldr	r0, [pc, #240]	; (8001de8 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Linear;
 8001cf8:	493c      	ldr	r1, [pc, #240]	; (8001dec <setEffectsFunctions+0x4a4>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001cfa:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001cfc:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Linear;
 8001cfe:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001d02:	e653      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d04:	4835      	ldr	r0, [pc, #212]	; (8001ddc <setEffectsFunctions+0x494>)
 8001d06:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <setEffectsFunctions+0x48c>)
 8001d0c:	4a38      	ldr	r2, [pc, #224]	; (8001df0 <setEffectsFunctions+0x4a8>)
 8001d0e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d12:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8001d16:	4932      	ldr	r1, [pc, #200]	; (8001de0 <setEffectsFunctions+0x498>)
			  effectSetters[i].setParam3 = &blankFunction;
 8001d18:	4a32      	ldr	r2, [pc, #200]	; (8001de4 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d1a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001d1e:	4932      	ldr	r1, [pc, #200]	; (8001de8 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &blankFunction;
 8001d20:	609a      	str	r2, [r3, #8]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001d22:	6059      	str	r1, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8001d24:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001d28:	e640      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d2a:	482c      	ldr	r0, [pc, #176]	; (8001ddc <setEffectsFunctions+0x494>)
 8001d2c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &satTick;
 8001d30:	4b28      	ldr	r3, [pc, #160]	; (8001dd4 <setEffectsFunctions+0x48c>)
 8001d32:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <setEffectsFunctions+0x4ac>)
 8001d34:	e7eb      	b.n	8001d0e <setEffectsFunctions+0x3c6>
			  effectTick[i] = &polynomialShaperTick;
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d38:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &polynomialShaperTick;
 8001d3c:	4a2e      	ldr	r2, [pc, #184]	; (8001df8 <setEffectsFunctions+0x4b0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d3e:	4827      	ldr	r0, [pc, #156]	; (8001ddc <setEffectsFunctions+0x494>)
			  effectTick[i] = &polynomialShaperTick;
 8001d40:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d44:	4926      	ldr	r1, [pc, #152]	; (8001de0 <setEffectsFunctions+0x498>)
 8001d46:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d4c:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001d50:	4825      	ldr	r0, [pc, #148]	; (8001de8 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Poly;
 8001d52:	492a      	ldr	r1, [pc, #168]	; (8001dfc <setEffectsFunctions+0x4b4>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001d54:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001d56:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Poly;
 8001d58:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001d5c:	e626      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &hardClipTick;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d60:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <setEffectsFunctions+0x4b8>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d66:	481d      	ldr	r0, [pc, #116]	; (8001ddc <setEffectsFunctions+0x494>)
			  effectTick[i] = &hardClipTick;
 8001d68:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d6c:	491c      	ldr	r1, [pc, #112]	; (8001de0 <setEffectsFunctions+0x498>)
 8001d6e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001d72:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d74:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001d78:	481b      	ldr	r0, [pc, #108]	; (8001de8 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Hard;
 8001d7a:	4922      	ldr	r1, [pc, #136]	; (8001e04 <setEffectsFunctions+0x4bc>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001d7c:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001d7e:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Hard;
 8001d80:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001d84:	e612      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectTick[i] = &softClipTick;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d88:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <setEffectsFunctions+0x4c0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d8e:	4813      	ldr	r0, [pc, #76]	; (8001ddc <setEffectsFunctions+0x494>)
			  effectTick[i] = &softClipTick;
 8001d90:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d94:	4912      	ldr	r1, [pc, #72]	; (8001de0 <setEffectsFunctions+0x498>)
 8001d96:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001d9c:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001da0:	4811      	ldr	r0, [pc, #68]	; (8001de8 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Soft;
 8001da2:	491a      	ldr	r1, [pc, #104]	; (8001e0c <setEffectsFunctions+0x4c4>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001da4:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001da6:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Soft;
 8001da8:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001dac:	e5fe      	b.n	80019ac <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &blankFunction;
 8001dae:	480d      	ldr	r0, [pc, #52]	; (8001de4 <setEffectsFunctions+0x49c>)
 8001db0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <setEffectsFunctions+0x494>)
			  effectTick[i] = &blankTick;
 8001db6:	4c07      	ldr	r4, [pc, #28]	; (8001dd4 <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &blankFunction;
 8001db8:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
 8001dbc:	eb02 028c 	add.w	r2, r2, ip, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
 8001dc0:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8001dc4:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
 8001dc8:	2200      	movs	r2, #0
 8001dca:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <setEffectsFunctions+0x4c8>)
 8001dce:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			  break;
 8001dd2:	e5eb      	b.n	80019ac <setEffectsFunctions+0x64>
 8001dd4:	2001c934 	.word	0x2001c934
 8001dd8:	00007a41 	.word	0x00007a41
 8001ddc:	20013f14 	.word	0x20013f14
 8001de0:	00007081 	.word	0x00007081
 8001de4:	00001981 	.word	0x00001981
 8001de8:	00007381 	.word	0x00007381
 8001dec:	000073c1 	.word	0x000073c1
 8001df0:	00007b01 	.word	0x00007b01
 8001df4:	00007d01 	.word	0x00007d01
 8001df8:	00007c61 	.word	0x00007c61
 8001dfc:	000074c1 	.word	0x000074c1
 8001e00:	00007bc1 	.word	0x00007bc1
 8001e04:	00007441 	.word	0x00007441
 8001e08:	00007b61 	.word	0x00007b61
 8001e0c:	000073e1 	.word	0x000073e1
 8001e10:	00007aa1 	.word	0x00007aa1

08001e14 <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
 8001e14:	b410      	push	{r4}
	switch (filterType)
 8001e16:	2808      	cmp	r0, #8
 8001e18:	d812      	bhi.n	8001e40 <setFilterTypes+0x2c>
 8001e1a:	e8df f000 	tbb	[pc, r0]
 8001e1e:	3223      	.short	0x3223
 8001e20:	6e5f5041 	.word	0x6e5f5041
 8001e24:	057d      	.short	0x057d
 8001e26:	14          	.byte	0x14
 8001e27:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001e28:	4b43      	ldr	r3, [pc, #268]	; (8001f38 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
 8001e2a:	4a44      	ldr	r2, [pc, #272]	; (8001f3c <setFilterTypes+0x128>)
 8001e2c:	4844      	ldr	r0, [pc, #272]	; (8001f40 <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001e2e:	4c45      	ldr	r4, [pc, #276]	; (8001f44 <setFilterTypes+0x130>)
				  filterTick[i] = &VZbandrejectTick;
 8001e30:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8001e34:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001e38:	4843      	ldr	r0, [pc, #268]	; (8001f48 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001e3a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8001e3e:	6050      	str	r0, [r2, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
 8001e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e44:	4770      	bx	lr
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001e46:	4b3c      	ldr	r3, [pc, #240]	; (8001f38 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
 8001e48:	4a3c      	ldr	r2, [pc, #240]	; (8001f3c <setFilterTypes+0x128>)
 8001e4a:	4840      	ldr	r0, [pc, #256]	; (8001f4c <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001e4c:	4c40      	ldr	r4, [pc, #256]	; (8001f50 <setFilterTypes+0x13c>)
				  filterTick[i] = &LadderLowpassTick;
 8001e4e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8001e52:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001e56:	483f      	ldr	r0, [pc, #252]	; (8001f54 <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001e58:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8001e5c:	6050      	str	r0, [r2, #4]
}
 8001e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e62:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
 8001e66:	4a35      	ldr	r2, [pc, #212]	; (8001f3c <setFilterTypes+0x128>)
 8001e68:	483b      	ldr	r0, [pc, #236]	; (8001f58 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &lowpassSetQ;
 8001e6a:	4c3c      	ldr	r4, [pc, #240]	; (8001f5c <setFilterTypes+0x148>)
				  filterTick[i] = &lowpassTick;
 8001e6c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
 8001e70:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001e74:	483a      	ldr	r0, [pc, #232]	; (8001f60 <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &lowpassSetQ;
 8001e76:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
 8001e7a:	6050      	str	r0, [r2, #4]
}
 8001e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e80:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
 8001e84:	4a2d      	ldr	r2, [pc, #180]	; (8001f3c <setFilterTypes+0x128>)
 8001e86:	4837      	ldr	r0, [pc, #220]	; (8001f64 <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &highpassSetQ;
 8001e88:	4c37      	ldr	r4, [pc, #220]	; (8001f68 <setFilterTypes+0x154>)
				  filterTick[i] = &highpassTick;
 8001e8a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
 8001e8e:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001e92:	4836      	ldr	r0, [pc, #216]	; (8001f6c <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &highpassSetQ;
 8001e94:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
 8001e98:	6050      	str	r0, [r2, #4]
}
 8001e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e9e:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
 8001ea2:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <setFilterTypes+0x128>)
 8001ea4:	4832      	ldr	r0, [pc, #200]	; (8001f70 <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &bandpassSetQ;
 8001ea6:	4c33      	ldr	r4, [pc, #204]	; (8001f74 <setFilterTypes+0x160>)
				  filterTick[i] = &bandpassTick;
 8001ea8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
 8001eac:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001eb0:	4831      	ldr	r0, [pc, #196]	; (8001f78 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &bandpassSetQ;
 8001eb2:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
 8001eb6:	6050      	str	r0, [r2, #4]
}
 8001eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ebc:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
 8001ec0:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <setFilterTypes+0x128>)
 8001ec2:	482e      	ldr	r0, [pc, #184]	; (8001f7c <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8001ec4:	4c2e      	ldr	r4, [pc, #184]	; (8001f80 <setFilterTypes+0x16c>)
				  filterTick[i] = &diodeLowpassTick;
 8001ec6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8001eca:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001ece:	482d      	ldr	r0, [pc, #180]	; (8001f84 <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8001ed0:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8001ed4:	6050      	str	r0, [r2, #4]
}
 8001ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001eda:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <setFilterTypes+0x128>)
 8001ee0:	4829      	ldr	r0, [pc, #164]	; (8001f88 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 8001ee2:	4c2a      	ldr	r4, [pc, #168]	; (8001f8c <setFilterTypes+0x178>)
				  filterTick[i] = &VZpeakTick;
 8001ee4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8001ee8:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001eec:	4828      	ldr	r0, [pc, #160]	; (8001f90 <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 8001eee:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8001ef2:	6050      	str	r0, [r2, #4]
}
 8001ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ef8:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
 8001efc:	4a0f      	ldr	r2, [pc, #60]	; (8001f3c <setFilterTypes+0x128>)
 8001efe:	4825      	ldr	r0, [pc, #148]	; (8001f94 <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8001f00:	4c25      	ldr	r4, [pc, #148]	; (8001f98 <setFilterTypes+0x184>)
				  filterTick[i] = &VZlowshelfTick;
 8001f02:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8001f06:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001f0a:	4824      	ldr	r0, [pc, #144]	; (8001f9c <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8001f0c:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8001f10:	6050      	str	r0, [r2, #4]
}
 8001f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f16:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
 8001f1a:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <setFilterTypes+0x128>)
 8001f1c:	4820      	ldr	r0, [pc, #128]	; (8001fa0 <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8001f1e:	4c21      	ldr	r4, [pc, #132]	; (8001fa4 <setFilterTypes+0x190>)
				  filterTick[i] = &VZhighshelfTick;
 8001f20:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8001f24:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001f28:	481f      	ldr	r0, [pc, #124]	; (8001fa8 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8001f2a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8001f2e:	6050      	str	r0, [r2, #4]
}
 8001f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20015f68 	.word	0x20015f68
 8001f3c:	2001c9a8 	.word	0x2001c9a8
 8001f40:	00006481 	.word	0x00006481
 8001f44:	00006701 	.word	0x00006701
 8001f48:	00006901 	.word	0x00006901
 8001f4c:	000064e1 	.word	0x000064e1
 8001f50:	00006721 	.word	0x00006721
 8001f54:	00006941 	.word	0x00006941
 8001f58:	00006241 	.word	0x00006241
 8001f5c:	00006621 	.word	0x00006621
 8001f60:	00006741 	.word	0x00006741
 8001f64:	000062a1 	.word	0x000062a1
 8001f68:	00006641 	.word	0x00006641
 8001f6c:	00006781 	.word	0x00006781
 8001f70:	00006301 	.word	0x00006301
 8001f74:	00006661 	.word	0x00006661
 8001f78:	000067c1 	.word	0x000067c1
 8001f7c:	00006361 	.word	0x00006361
 8001f80:	00006681 	.word	0x00006681
 8001f84:	00006801 	.word	0x00006801
 8001f88:	000063c1 	.word	0x000063c1
 8001f8c:	000066a1 	.word	0x000066a1
 8001f90:	00006841 	.word	0x00006841
 8001f94:	00006401 	.word	0x00006401
 8001f98:	000066c1 	.word	0x000066c1
 8001f9c:	00006881 	.word	0x00006881
 8001fa0:	00006441 	.word	0x00006441
 8001fa4:	000066e1 	.word	0x000066e1
 8001fa8:	000068c1 	.word	0x000068c1

08001fac <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
 8001fac:	b410      	push	{r4}
	switch(LFOShape)
 8001fae:	2805      	cmp	r0, #5
 8001fb0:	d814      	bhi.n	8001fdc <setLFOShapes+0x30>
 8001fb2:	e8df f000 	tbb	[pc, r0]
 8001fb6:	3c29      	.short	0x3c29
 8001fb8:	1603624f 	.word	0x1603624f
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
 8001fbc:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 8001fbe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
 8001fc2:	4c38      	ldr	r4, [pc, #224]	; (80020a4 <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 8001fc4:	4a38      	ldr	r2, [pc, #224]	; (80020a8 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
 8001fc6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
 8001fca:	4c38      	ldr	r4, [pc, #224]	; (80020ac <setLFOShapes+0x100>)
 8001fcc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
 8001fd0:	4937      	ldr	r1, [pc, #220]	; (80020b0 <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 8001fd2:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
 8001fd6:	4a37      	ldr	r2, [pc, #220]	; (80020b4 <setLFOShapes+0x108>)
 8001fd8:	e9c3 1201 	strd	r1, r2, [r3, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
 8001fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fe0:	4770      	bx	lr
			lfoShapeTick[i] = &lfoPulseTick;
 8001fe2:	4b2f      	ldr	r3, [pc, #188]	; (80020a0 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8001fe4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
 8001fe8:	4c33      	ldr	r4, [pc, #204]	; (80020b8 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8001fea:	4a2f      	ldr	r2, [pc, #188]	; (80020a8 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
 8001fec:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8001ff0:	4c32      	ldr	r4, [pc, #200]	; (80020bc <setLFOShapes+0x110>)
 8001ff2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
 8001ff6:	4932      	ldr	r1, [pc, #200]	; (80020c0 <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8001ff8:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8001ffc:	4a31      	ldr	r2, [pc, #196]	; (80020c4 <setLFOShapes+0x118>)
 8001ffe:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8002002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002006:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 800200a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
 800200e:	4c2e      	ldr	r4, [pc, #184]	; (80020c8 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8002010:	4a25      	ldr	r2, [pc, #148]	; (80020a8 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
 8002012:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8002016:	4c2d      	ldr	r4, [pc, #180]	; (80020cc <setLFOShapes+0x120>)
 8002018:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
 800201c:	492c      	ldr	r1, [pc, #176]	; (80020d0 <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 800201e:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8002022:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <setLFOShapes+0x128>)
 8002024:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8002028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800202c:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8002030:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
 8002034:	4c28      	ldr	r4, [pc, #160]	; (80020d8 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
 8002038:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 800203c:	4c27      	ldr	r4, [pc, #156]	; (80020dc <setLFOShapes+0x130>)
 800203e:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8002042:	4927      	ldr	r1, [pc, #156]	; (80020e0 <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8002044:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8002048:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <setLFOShapes+0x138>)
 800204a:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 800204e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002052:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 8002056:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
 800205a:	4c23      	ldr	r4, [pc, #140]	; (80020e8 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 800205c:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
 800205e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
 8002062:	4c22      	ldr	r4, [pc, #136]	; (80020ec <setLFOShapes+0x140>)
 8002064:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
 8002068:	4921      	ldr	r1, [pc, #132]	; (80020f0 <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 800206a:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
 800206e:	4a21      	ldr	r2, [pc, #132]	; (80020f4 <setLFOShapes+0x148>)
 8002070:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8002074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002078:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 800207c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
 8002080:	4c1d      	ldr	r4, [pc, #116]	; (80020f8 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
 8002084:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
 8002088:	4c1c      	ldr	r4, [pc, #112]	; (80020fc <setLFOShapes+0x150>)
 800208a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
 800208e:	491c      	ldr	r1, [pc, #112]	; (8002100 <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 8002090:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <setLFOShapes+0x158>)
 8002096:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 800209a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	2001cb2c 	.word	0x2001cb2c
 80020a4:	00006de1 	.word	0x00006de1
 80020a8:	20018094 	.word	0x20018094
 80020ac:	00006ec1 	.word	0x00006ec1
 80020b0:	00007041 	.word	0x00007041
 80020b4:	00006f81 	.word	0x00006f81
 80020b8:	00006e21 	.word	0x00006e21
 80020bc:	00006ee1 	.word	0x00006ee1
 80020c0:	00007061 	.word	0x00007061
 80020c4:	00006fa1 	.word	0x00006fa1
 80020c8:	00006d81 	.word	0x00006d81
 80020cc:	00006e61 	.word	0x00006e61
 80020d0:	00006fe1 	.word	0x00006fe1
 80020d4:	00006f21 	.word	0x00006f21
 80020d8:	00006d61 	.word	0x00006d61
 80020dc:	00006e41 	.word	0x00006e41
 80020e0:	00006fc1 	.word	0x00006fc1
 80020e4:	00006f01 	.word	0x00006f01
 80020e8:	00006da1 	.word	0x00006da1
 80020ec:	00006e81 	.word	0x00006e81
 80020f0:	00007001 	.word	0x00007001
 80020f4:	00006f41 	.word	0x00006f41
 80020f8:	00006dc1 	.word	0x00006dc1
 80020fc:	00006ea1 	.word	0x00006ea1
 8002100:	00007021 	.word	0x00007021
 8002104:	00006f61 	.word	0x00006f61

08002108 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002108:	4bbe      	ldr	r3, [pc, #760]	; (8002404 <main+0x2fc>)
{
 800210a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800210e:	ed2d 8b04 	vpush	{d8-d9}
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	b08f      	sub	sp, #60	; 0x3c
 8002116:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800211a:	d111      	bne.n	8002140 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800211c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002120:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002124:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002128:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800212c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002136:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002138:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800213c:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002140:	48b0      	ldr	r0, [pc, #704]	; (8002404 <main+0x2fc>)
 8002142:	6943      	ldr	r3, [r0, #20]
 8002144:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8002148:	d124      	bne.n	8002194 <main+0x8c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800214a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800214e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002152:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002156:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800215a:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800215e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8002162:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002164:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002168:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800216a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800216e:	3b01      	subs	r3, #1
 8002170:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002172:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8002176:	d1f8      	bne.n	800216a <main+0x62>
    } while(sets-- != 0U);
 8002178:	3c20      	subs	r4, #32
 800217a:	f114 0f20 	cmn.w	r4, #32
 800217e:	d1f1      	bne.n	8002164 <main+0x5c>
 8002180:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002184:	6943      	ldr	r3, [r0, #20]
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	6143      	str	r3, [r0, #20]
 800218c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002190:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002194:	2400      	movs	r4, #0
  HAL_Init();
 8002196:	f001 fe11 	bl	8003dbc <HAL_Init>
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800219a:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800219c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80021a0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HAL_MPU_Disable();
 80021a4:	f001 fee2 	bl	8003f6c <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80021a8:	f248 721f 	movw	r2, #34591	; 0x871f
 80021ac:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021b0:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80021b2:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80021b6:	930d      	str	r3, [sp, #52]	; 0x34
 80021b8:	e9cd 420b 	strd	r4, r2, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021bc:	f001 fef4 	bl	8003fa8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 80021c0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80021c4:	4b90      	ldr	r3, [pc, #576]	; (8002408 <main+0x300>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021c6:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80021c8:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80021cc:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021d0:	f001 feea 	bl	8003fa8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 80021d4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80021d8:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021da:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.BaseAddress = 0xc0000000;
 80021dc:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80021de:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80021e0:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80021e4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80021e8:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80021ec:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021f0:	f001 feda 	bl	8003fa8 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80021f4:	2103      	movs	r1, #3
  MPU_InitStruct.BaseAddress = 0x60000000;
 80021f6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80021fa:	2318      	movs	r3, #24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021fc:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80021fe:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x60000000;
 8002202:	920b      	str	r2, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8002204:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002208:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800220c:	f001 fecc 	bl	8003fa8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002210:	2004      	movs	r0, #4
 8002212:	f001 feb9 	bl	8003f88 <HAL_MPU_Enable>
  __ASM volatile ("cpsie i" : : : "memory");
 8002216:	b662      	cpsie	i
  SystemClock_Config();
 8002218:	f7fe ff90 	bl	800113c <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 800221c:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 80024d4 <main+0x3cc>
  PeriphCommonClock_Config();
 8002220:	f7ff f80a 	bl	8001238 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8002224:	f7fe fdec 	bl	8000e00 <MX_GPIO_Init>
  MX_DMA_Init();
 8002228:	f7fe fcf6 	bl	8000c18 <MX_DMA_Init>
  MX_FMC_Init();
 800222c:	f7fe fd30 	bl	8000c90 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8002230:	f000 fddc 	bl	8002dec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8002234:	f00a fa60 	bl	800c6f8 <MX_FATFS_Init>
  MX_SAI1_Init();
 8002238:	f000 fcde 	bl	8002bf8 <MX_SAI1_Init>
  MX_RNG_Init();
 800223c:	f000 fc9c 	bl	8002b78 <MX_RNG_Init>
  MX_I2C2_Init();
 8002240:	f7fe fee2 	bl	8001008 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002244:	f000 fe48 	bl	8002ed8 <MX_SPI1_Init>
  MX_SPI5_Init();
 8002248:	f000 fe72 	bl	8002f30 <MX_SPI5_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800224c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002250:	486e      	ldr	r0, [pc, #440]	; (800240c <main+0x304>)
 8002252:	f003 fdb1 	bl	8005db8 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800225a:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800225c:	486b      	ldr	r0, [pc, #428]	; (800240c <main+0x304>)
 800225e:	f003 fdab 	bl	8005db8 <HAL_GPIO_ReadPin>
 8002262:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002264:	2104      	movs	r1, #4
 8002266:	486a      	ldr	r0, [pc, #424]	; (8002410 <main+0x308>)
 8002268:	f003 fda6 	bl	8005db8 <HAL_GPIO_ReadPin>
 800226c:	4602      	mov	r2, r0
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 800226e:	00a3      	lsls	r3, r4, #2
	HAL_Delay(500);
 8002270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8002274:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8002278:	4413      	add	r3, r2
 800227a:	f888 3000 	strb.w	r3, [r8]
	HAL_Delay(500);
 800227e:	f001 fddf 	bl	8003e40 <HAL_Delay>
   PWR->CR1 |= PWR_CR1_DBP;
 8002282:	4a64      	ldr	r2, [pc, #400]	; (8002414 <main+0x30c>)
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800228c:	6813      	ldr	r3, [r2, #0]
 800228e:	05d9      	lsls	r1, r3, #23
 8002290:	d5fc      	bpl.n	800228c <main+0x184>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
 8002292:	4b61      	ldr	r3, [pc, #388]	; (8002418 <main+0x310>)
 8002294:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002298:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800229c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80022a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	9305      	str	r3, [sp, #20]
 80022aa:	9b05      	ldr	r3, [sp, #20]
  return __builtin_arm_get_fpscr();
 80022ac:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 80022b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 80022b4:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80022b8:	4952      	ldr	r1, [pc, #328]	; (8002404 <main+0x2fc>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80022ba:	4a58      	ldr	r2, [pc, #352]	; (800241c <main+0x314>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80022bc:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 80022c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c4:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80022c8:	f8d2 3fb4 	ldr.w	r3, [r2, #4020]	; 0xfb4
 80022cc:	07db      	lsls	r3, r3, #31
 80022ce:	d502      	bpl.n	80022d6 <main+0x1ce>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <main+0x318>)
 80022d2:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 80022d6:	4b51      	ldr	r3, [pc, #324]	; (800241c <main+0x314>)
 80022d8:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
 80022da:	4a52      	ldr	r2, [pc, #328]	; (8002424 <main+0x31c>)
	  buffer[i] = 0;
 80022dc:	4c52      	ldr	r4, [pc, #328]	; (8002428 <main+0x320>)
  DWT->CYCCNT = 0;
 80022de:	6059      	str	r1, [r3, #4]
	  SPI_PLUCK_TX[i] = 0;
 80022e0:	4852      	ldr	r0, [pc, #328]	; (800242c <main+0x324>)
  DWT->CTRL = 0x40000001;
 80022e2:	601a      	str	r2, [r3, #0]
	  SPI_PLUCK_TX[i] = 0;
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	f016 fbc1 	bl	8018a6c <memset>
	  buffer[i] = 0;
 80022ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022ee:	2100      	movs	r1, #0
 80022f0:	4620      	mov	r0, r4
 80022f2:	f016 fbbb 	bl	8018a6c <memset>
  buffer[15+112] = NUM_PARAMS;
 80022f6:	239c      	movs	r3, #156	; 0x9c
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 80022f8:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80022fc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
 8002300:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
  buffer[NUM_PARAMS*2+19+112] = 1;
 8002304:	2301      	movs	r3, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 8002306:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800230a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19+112] = 1;
 800230e:	f884 31bb 	strb.w	r3, [r4, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 8002312:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8002316:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8002430 <main+0x328>
 800231a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 800231e:	f8a4 31c1 	strh.w	r3, [r4, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8002322:	4844      	ldr	r0, [pc, #272]	; (8002434 <main+0x32c>)
 8002324:	f011 fb72 	bl	8013a0c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 8002328:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800232c:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8002438 <main+0x330>
 8002330:	eddf 0a42 	vldr	s1, [pc, #264]	; 800243c <main+0x334>
 8002334:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8002440 <main+0x338>
 8002338:	4842      	ldr	r0, [pc, #264]	; (8002444 <main+0x33c>)
 800233a:	f011 fb67 	bl	8013a0c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 800233e:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8002342:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8002346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800234a:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8002440 <main+0x338>
 800234e:	483e      	ldr	r0, [pc, #248]	; (8002448 <main+0x340>)
 8002350:	f011 fb5c 	bl	8013a0c <LEAF_generate_table_skew_non_sym>
  if (boardNumber == 0)
 8002354:	f898 3000 	ldrb.w	r3, [r8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 8404 	beq.w	8002b66 <main+0xa5e>
	  diskBusy = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	4a3a      	ldr	r2, [pc, #232]	; (800244c <main+0x344>)
  specialModeNames[0] = "PHYS STR1     ";
 8002362:	4d3b      	ldr	r5, [pc, #236]	; (8002450 <main+0x348>)
  specialModeMacroNames[2][11] = "         ";
 8002364:	243f      	movs	r4, #63	; 0x3f
	  diskBusy = 1;
 8002366:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
 8002368:	f7ff faa6 	bl	80018b8 <SDRAM_init>
  audioInit();
 800236c:	f7fe f9f0 	bl	8000750 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
 8002370:	4b38      	ldr	r3, [pc, #224]	; (8002454 <main+0x34c>)
  specialModeMacroNames[1][3] = "Decay     ";
 8002372:	4839      	ldr	r0, [pc, #228]	; (8002458 <main+0x350>)
  specialModeNames[0] = "PHYS STR1     ";
 8002374:	602b      	str	r3, [r5, #0]
  specialModeMacroNames[0][0] = "Feedback  ";
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <main+0x354>)
  specialModeMacroNames[0][5] = "          ";
 8002378:	4a39      	ldr	r2, [pc, #228]	; (8002460 <main+0x358>)
  specialModeMacroNames[1][3] = "Decay     ";
 800237a:	63d8      	str	r0, [r3, #60]	; 0x3c
  specialModeMacroNames[2][3] = "Decay     ";
 800237c:	66d8      	str	r0, [r3, #108]	; 0x6c
  specialModeMacroNames[0][0] = "Feedback  ";
 800237e:	4839      	ldr	r0, [pc, #228]	; (8002464 <main+0x35c>)
  specialModeMacroNames[0][10] = "         ";
 8002380:	4939      	ldr	r1, [pc, #228]	; (8002468 <main+0x360>)
  specialModeMacroNames[0][0] = "Feedback  ";
 8002382:	6018      	str	r0, [r3, #0]
  specialModeMacroNames[0][1] = "SlideNois ";
 8002384:	4839      	ldr	r0, [pc, #228]	; (800246c <main+0x364>)
  specialModeMacroNames[0][9] = "          ";
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
  specialModeMacroNames[0][1] = "SlideNois ";
 8002388:	6058      	str	r0, [r3, #4]
  specialModeMacroNames[0][2] = "PluckWidt ";
 800238a:	4839      	ldr	r0, [pc, #228]	; (8002470 <main+0x368>)
 800238c:	4f39      	ldr	r7, [pc, #228]	; (8002474 <main+0x36c>)
 800238e:	6098      	str	r0, [r3, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
 8002390:	4839      	ldr	r0, [pc, #228]	; (8002478 <main+0x370>)
 8002392:	4e3a      	ldr	r6, [pc, #232]	; (800247c <main+0x374>)
 8002394:	60d8      	str	r0, [r3, #12]
  specialModeMacroNames[0][4] = "PickupSim";
 8002396:	483a      	ldr	r0, [pc, #232]	; (8002480 <main+0x378>)
 8002398:	6118      	str	r0, [r3, #16]
  specialModeNames[1] = "PHYS STR2     ";
 800239a:	483a      	ldr	r0, [pc, #232]	; (8002484 <main+0x37c>)
 800239c:	6068      	str	r0, [r5, #4]
  specialModeMacroNames[1][0] = "PrepIndex ";
 800239e:	483a      	ldr	r0, [pc, #232]	; (8002488 <main+0x380>)
 80023a0:	6318      	str	r0, [r3, #48]	; 0x30
  specialModeMacroNames[1][1] = "SlideNoise";
 80023a2:	483a      	ldr	r0, [pc, #232]	; (800248c <main+0x384>)
 80023a4:	6358      	str	r0, [r3, #52]	; 0x34
  specialModeMacroNames[1][2] = "PluckPos  ";
 80023a6:	483a      	ldr	r0, [pc, #232]	; (8002490 <main+0x388>)
 80023a8:	6398      	str	r0, [r3, #56]	; 0x38
  specialModeMacroNames[1][4] = "Touch     ";
 80023aa:	483a      	ldr	r0, [pc, #232]	; (8002494 <main+0x38c>)
 80023ac:	6418      	str	r0, [r3, #64]	; 0x40
  specialModeMacroNames[1][5] = "PickupPos ";
 80023ae:	483a      	ldr	r0, [pc, #232]	; (8002498 <main+0x390>)
 80023b0:	6458      	str	r0, [r3, #68]	; 0x44
  specialModeMacroNames[1][6] = "DampFreq  ";
 80023b2:	483a      	ldr	r0, [pc, #232]	; (800249c <main+0x394>)
 80023b4:	6498      	str	r0, [r3, #72]	; 0x48
  specialModeMacroNames[1][7] = "FFAmount  ";
 80023b6:	483a      	ldr	r0, [pc, #232]	; (80024a0 <main+0x398>)
 80023b8:	64d8      	str	r0, [r3, #76]	; 0x4c
  specialModeMacroNames[1][8] = "FBAmount  ";
 80023ba:	483a      	ldr	r0, [pc, #232]	; (80024a4 <main+0x39c>)
 80023bc:	6518      	str	r0, [r3, #80]	; 0x50
  specialModeMacroNames[1][9] = "foldDepth ";
 80023be:	483a      	ldr	r0, [pc, #232]	; (80024a8 <main+0x3a0>)
 80023c0:	6558      	str	r0, [r3, #84]	; 0x54
  specialModeMacroNames[1][10] = "prepPosX ";
 80023c2:	483a      	ldr	r0, [pc, #232]	; (80024ac <main+0x3a4>)
 80023c4:	6598      	str	r0, [r3, #88]	; 0x58
  specialModeMacroNames[1][11] = "prepPosY ";
 80023c6:	483a      	ldr	r0, [pc, #232]	; (80024b0 <main+0x3a8>)
 80023c8:	65d8      	str	r0, [r3, #92]	; 0x5c
  specialModeNames[2] = "ADDITIVE      ";
 80023ca:	483a      	ldr	r0, [pc, #232]	; (80024b4 <main+0x3ac>)
 80023cc:	60a8      	str	r0, [r5, #8]
  specialModeMacroNames[2][0] = "Noise1    ";
 80023ce:	483a      	ldr	r0, [pc, #232]	; (80024b8 <main+0x3b0>)
 80023d0:	6618      	str	r0, [r3, #96]	; 0x60
  specialModeMacroNames[2][1] = "Noise2    ";
 80023d2:	483a      	ldr	r0, [pc, #232]	; (80024bc <main+0x3b4>)
 80023d4:	6658      	str	r0, [r3, #100]	; 0x64
  specialModeMacroNames[2][2] = "Tone      ";
 80023d6:	483a      	ldr	r0, [pc, #232]	; (80024c0 <main+0x3b8>)
 80023d8:	6698      	str	r0, [r3, #104]	; 0x68
  specialModeMacroNames[2][4] = "Stretch   ";
 80023da:	483a      	ldr	r0, [pc, #232]	; (80024c4 <main+0x3bc>)
 80023dc:	6718      	str	r0, [r3, #112]	; 0x70
  specialModeMacroNames[2][5] = "RandDecy  ";
 80023de:	483a      	ldr	r0, [pc, #232]	; (80024c8 <main+0x3c0>)
  specialModeMacroNames[0][6] = "          ";
 80023e0:	e9c3 2205 	strd	r2, r2, [r3, #20]
  specialModeMacroNames[0][8] = "          ";
 80023e4:	e9c3 2207 	strd	r2, r2, [r3, #28]
  specialModeMacroNames[0][11] = "         ";
 80023e8:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
  specialModeMacroNames[2][5] = "RandDecy  ";
 80023ec:	6758      	str	r0, [r3, #116]	; 0x74
  specialModeMacroNames[2][11] = "         ";
 80023ee:	2050      	movs	r0, #80	; 0x50
  specialModeMacroNames[2][9] = "          ";
 80023f0:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
  specialModeMacroNames[2][6] = "RandGain  ";
 80023f4:	4a35      	ldr	r2, [pc, #212]	; (80024cc <main+0x3c4>)
 80023f6:	679a      	str	r2, [r3, #120]	; 0x78
  specialModeMacroNames[2][7] = "NoiseVol  ";
 80023f8:	4a35      	ldr	r2, [pc, #212]	; (80024d0 <main+0x3c8>)
 80023fa:	67da      	str	r2, [r3, #124]	; 0x7c
  for (int i = 0; i < 3; i++)
 80023fc:	461a      	mov	r2, r3
  specialModeMacroNames[2][11] = "         ";
 80023fe:	e9c3 1122 	strd	r1, r1, [r3, #136]	; 0x88
 8002402:	e069      	b.n	80024d8 <main+0x3d0>
 8002404:	e000ed00 	.word	0xe000ed00
 8002408:	03010011 	.word	0x03010011
 800240c:	58020400 	.word	0x58020400
 8002410:	58020000 	.word	0x58020000
 8002414:	58024800 	.word	0x58024800
 8002418:	58024400 	.word	0x58024400
 800241c:	e0001000 	.word	0xe0001000
 8002420:	c5acce55 	.word	0xc5acce55
 8002424:	40000001 	.word	0x40000001
 8002428:	30042380 	.word	0x30042380
 800242c:	38000000 	.word	0x38000000
 8002430:	3c23d70a 	.word	0x3c23d70a
 8002434:	20019fac 	.word	0x20019fac
 8002438:	457a0000 	.word	0x457a0000
 800243c:	469c4000 	.word	0x469c4000
 8002440:	00000000 	.word	0x00000000
 8002444:	20013f68 	.word	0x20013f68
 8002448:	20016094 	.word	0x20016094
 800244c:	20013f10 	.word	0x20013f10
 8002450:	2001c03c 	.word	0x2001c03c
 8002454:	0801b3b8 	.word	0x0801b3b8
 8002458:	0801b450 	.word	0x0801b450
 800245c:	2001bfac 	.word	0x2001bfac
 8002460:	0801b404 	.word	0x0801b404
 8002464:	0801b3c8 	.word	0x0801b3c8
 8002468:	0801b410 	.word	0x0801b410
 800246c:	0801b3d4 	.word	0x0801b3d4
 8002470:	0801b3e0 	.word	0x0801b3e0
 8002474:	30042000 	.word	0x30042000
 8002478:	0801b3ec 	.word	0x0801b3ec
 800247c:	30043380 	.word	0x30043380
 8002480:	0801b3f8 	.word	0x0801b3f8
 8002484:	0801b41c 	.word	0x0801b41c
 8002488:	0801b42c 	.word	0x0801b42c
 800248c:	0801b438 	.word	0x0801b438
 8002490:	0801b444 	.word	0x0801b444
 8002494:	0801b45c 	.word	0x0801b45c
 8002498:	0801b468 	.word	0x0801b468
 800249c:	0801b474 	.word	0x0801b474
 80024a0:	0801b480 	.word	0x0801b480
 80024a4:	0801b48c 	.word	0x0801b48c
 80024a8:	0801b498 	.word	0x0801b498
 80024ac:	0801b4a4 	.word	0x0801b4a4
 80024b0:	0801b4b0 	.word	0x0801b4b0
 80024b4:	0801b4bc 	.word	0x0801b4bc
 80024b8:	0801b4cc 	.word	0x0801b4cc
 80024bc:	0801b4d8 	.word	0x0801b4d8
 80024c0:	0801b4e4 	.word	0x0801b4e4
 80024c4:	0801b4f0 	.word	0x0801b4f0
 80024c8:	0801b4fc 	.word	0x0801b4fc
 80024cc:	0801b508 	.word	0x0801b508
 80024d0:	0801b514 	.word	0x0801b514
 80024d4:	20013ebd 	.word	0x20013ebd
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 80024d8:	f855 1b04 	ldr.w	r1, [r5], #4
 80024dc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 80024e0:	f8d2 c000 	ldr.w	ip, [r2]
  for (int i = 0; i < 3; i++)
 80024e4:	3230      	adds	r2, #48	; 0x30
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 80024e6:	f807 0013 	strb.w	r0, [r7, r3, lsl #1]
 80024ea:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80024ee:	7848      	ldrb	r0, [r1, #1]
 80024f0:	7058      	strb	r0, [r3, #1]
 80024f2:	7888      	ldrb	r0, [r1, #2]
 80024f4:	7098      	strb	r0, [r3, #2]
 80024f6:	78c8      	ldrb	r0, [r1, #3]
 80024f8:	70d8      	strb	r0, [r3, #3]
 80024fa:	7908      	ldrb	r0, [r1, #4]
 80024fc:	7118      	strb	r0, [r3, #4]
 80024fe:	7948      	ldrb	r0, [r1, #5]
 8002500:	7158      	strb	r0, [r3, #5]
 8002502:	7988      	ldrb	r0, [r1, #6]
 8002504:	7198      	strb	r0, [r3, #6]
 8002506:	79c8      	ldrb	r0, [r1, #7]
 8002508:	71d8      	strb	r0, [r3, #7]
 800250a:	7a08      	ldrb	r0, [r1, #8]
 800250c:	7218      	strb	r0, [r3, #8]
 800250e:	7a48      	ldrb	r0, [r1, #9]
 8002510:	7258      	strb	r0, [r3, #9]
 8002512:	7a88      	ldrb	r0, [r1, #10]
 8002514:	7298      	strb	r0, [r3, #10]
 8002516:	7ac8      	ldrb	r0, [r1, #11]
 8002518:	72d8      	strb	r0, [r3, #11]
 800251a:	7b08      	ldrb	r0, [r1, #12]
 800251c:	7318      	strb	r0, [r3, #12]
 800251e:	7b49      	ldrb	r1, [r1, #13]
 8002520:	7359      	strb	r1, [r3, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002522:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8002526:	f89c 1000 	ldrb.w	r1, [ip]
  for (int i = 0; i < 3; i++)
 800252a:	3c01      	subs	r4, #1
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 800252c:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8002530:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002534:	f89c 1001 	ldrb.w	r1, [ip, #1]
  for (int i = 0; i < 3; i++)
 8002538:	2c3c      	cmp	r4, #60	; 0x3c
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 800253a:	7059      	strb	r1, [r3, #1]
 800253c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8002540:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 8002544:	7099      	strb	r1, [r3, #2]
 8002546:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800254a:	70d9      	strb	r1, [r3, #3]
 800254c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8002550:	7119      	strb	r1, [r3, #4]
 8002552:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8002556:	7159      	strb	r1, [r3, #5]
 8002558:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800255c:	7199      	strb	r1, [r3, #6]
 800255e:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8002562:	71d9      	strb	r1, [r3, #7]
 8002564:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8002568:	7219      	strb	r1, [r3, #8]
 800256a:	f89c 1009 	ldrb.w	r1, [ip, #9]
 800256e:	7259      	strb	r1, [r3, #9]
 8002570:	7801      	ldrb	r1, [r0, #0]
 8002572:	7299      	strb	r1, [r3, #10]
 8002574:	7841      	ldrb	r1, [r0, #1]
 8002576:	72d9      	strb	r1, [r3, #11]
 8002578:	7881      	ldrb	r1, [r0, #2]
 800257a:	7319      	strb	r1, [r3, #12]
 800257c:	78c1      	ldrb	r1, [r0, #3]
 800257e:	7359      	strb	r1, [r3, #13]
 8002580:	7901      	ldrb	r1, [r0, #4]
 8002582:	7399      	strb	r1, [r3, #14]
 8002584:	7941      	ldrb	r1, [r0, #5]
 8002586:	73d9      	strb	r1, [r3, #15]
 8002588:	7981      	ldrb	r1, [r0, #6]
 800258a:	7419      	strb	r1, [r3, #16]
 800258c:	79c1      	ldrb	r1, [r0, #7]
 800258e:	7459      	strb	r1, [r3, #17]
 8002590:	7a01      	ldrb	r1, [r0, #8]
 8002592:	7499      	strb	r1, [r3, #18]
 8002594:	f852 1c28 	ldr.w	r1, [r2, #-40]
 8002598:	7a40      	ldrb	r0, [r0, #9]
 800259a:	74d8      	strb	r0, [r3, #19]
 800259c:	7808      	ldrb	r0, [r1, #0]
 800259e:	7518      	strb	r0, [r3, #20]
 80025a0:	7848      	ldrb	r0, [r1, #1]
 80025a2:	7558      	strb	r0, [r3, #21]
 80025a4:	7888      	ldrb	r0, [r1, #2]
 80025a6:	7598      	strb	r0, [r3, #22]
 80025a8:	78c8      	ldrb	r0, [r1, #3]
 80025aa:	75d8      	strb	r0, [r3, #23]
 80025ac:	7908      	ldrb	r0, [r1, #4]
 80025ae:	7618      	strb	r0, [r3, #24]
 80025b0:	7948      	ldrb	r0, [r1, #5]
 80025b2:	7658      	strb	r0, [r3, #25]
 80025b4:	7988      	ldrb	r0, [r1, #6]
 80025b6:	7698      	strb	r0, [r3, #26]
 80025b8:	79c8      	ldrb	r0, [r1, #7]
 80025ba:	76d8      	strb	r0, [r3, #27]
 80025bc:	7a08      	ldrb	r0, [r1, #8]
 80025be:	7718      	strb	r0, [r3, #28]
 80025c0:	f852 0c24 	ldr.w	r0, [r2, #-36]
 80025c4:	7a49      	ldrb	r1, [r1, #9]
 80025c6:	7759      	strb	r1, [r3, #29]
 80025c8:	7801      	ldrb	r1, [r0, #0]
 80025ca:	7799      	strb	r1, [r3, #30]
 80025cc:	7841      	ldrb	r1, [r0, #1]
 80025ce:	77d9      	strb	r1, [r3, #31]
 80025d0:	7881      	ldrb	r1, [r0, #2]
 80025d2:	f883 1020 	strb.w	r1, [r3, #32]
 80025d6:	78c1      	ldrb	r1, [r0, #3]
 80025d8:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
 80025dc:	7901      	ldrb	r1, [r0, #4]
 80025de:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
 80025e2:	7941      	ldrb	r1, [r0, #5]
 80025e4:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 80025e8:	7981      	ldrb	r1, [r0, #6]
 80025ea:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
 80025ee:	79c1      	ldrb	r1, [r0, #7]
 80025f0:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
 80025f4:	7a01      	ldrb	r1, [r0, #8]
 80025f6:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
 80025fa:	f852 1c20 	ldr.w	r1, [r2, #-32]
 80025fe:	7a40      	ldrb	r0, [r0, #9]
 8002600:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
 8002604:	7808      	ldrb	r0, [r1, #0]
 8002606:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 800260a:	7848      	ldrb	r0, [r1, #1]
 800260c:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
 8002610:	7888      	ldrb	r0, [r1, #2]
 8002612:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
 8002616:	78c8      	ldrb	r0, [r1, #3]
 8002618:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
 800261c:	7908      	ldrb	r0, [r1, #4]
 800261e:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
 8002622:	7948      	ldrb	r0, [r1, #5]
 8002624:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
 8002628:	7988      	ldrb	r0, [r1, #6]
 800262a:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
 800262e:	79c8      	ldrb	r0, [r1, #7]
 8002630:	f883 002f 	strb.w	r0, [r3, #47]	; 0x2f
 8002634:	7a08      	ldrb	r0, [r1, #8]
 8002636:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
 800263a:	7a48      	ldrb	r0, [r1, #9]
 800263c:	f852 1c1c 	ldr.w	r1, [r2, #-28]
 8002640:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
 8002644:	f891 c000 	ldrb.w	ip, [r1]
 8002648:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800264c:	f883 c032 	strb.w	ip, [r3, #50]	; 0x32
 8002650:	f891 c001 	ldrb.w	ip, [r1, #1]
 8002654:	f883 c033 	strb.w	ip, [r3, #51]	; 0x33
 8002658:	f891 c002 	ldrb.w	ip, [r1, #2]
 800265c:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
 8002660:	f891 c003 	ldrb.w	ip, [r1, #3]
 8002664:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
 8002668:	f891 c004 	ldrb.w	ip, [r1, #4]
 800266c:	f883 c036 	strb.w	ip, [r3, #54]	; 0x36
 8002670:	f891 c005 	ldrb.w	ip, [r1, #5]
 8002674:	f883 c037 	strb.w	ip, [r3, #55]	; 0x37
 8002678:	f891 c006 	ldrb.w	ip, [r1, #6]
 800267c:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8002680:	f891 c007 	ldrb.w	ip, [r1, #7]
 8002684:	f883 c039 	strb.w	ip, [r3, #57]	; 0x39
 8002688:	f891 c008 	ldrb.w	ip, [r1, #8]
 800268c:	f883 c03a 	strb.w	ip, [r3, #58]	; 0x3a
 8002690:	7a49      	ldrb	r1, [r1, #9]
 8002692:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
 8002696:	7801      	ldrb	r1, [r0, #0]
 8002698:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 800269c:	7841      	ldrb	r1, [r0, #1]
 800269e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 80026a2:	7881      	ldrb	r1, [r0, #2]
 80026a4:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 80026a8:	78c1      	ldrb	r1, [r0, #3]
 80026aa:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 80026ae:	7901      	ldrb	r1, [r0, #4]
 80026b0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
 80026b4:	7941      	ldrb	r1, [r0, #5]
 80026b6:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
 80026ba:	7981      	ldrb	r1, [r0, #6]
 80026bc:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
 80026c0:	79c1      	ldrb	r1, [r0, #7]
 80026c2:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 80026c6:	7a01      	ldrb	r1, [r0, #8]
 80026c8:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
 80026cc:	f852 1c14 	ldr.w	r1, [r2, #-20]
 80026d0:	7a40      	ldrb	r0, [r0, #9]
 80026d2:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
 80026d6:	7808      	ldrb	r0, [r1, #0]
 80026d8:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
 80026dc:	7848      	ldrb	r0, [r1, #1]
 80026de:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
 80026e2:	7888      	ldrb	r0, [r1, #2]
 80026e4:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
 80026e8:	78c8      	ldrb	r0, [r1, #3]
 80026ea:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
 80026ee:	7908      	ldrb	r0, [r1, #4]
 80026f0:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
 80026f4:	7948      	ldrb	r0, [r1, #5]
 80026f6:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
 80026fa:	7988      	ldrb	r0, [r1, #6]
 80026fc:	f883 004c 	strb.w	r0, [r3, #76]	; 0x4c
 8002700:	79c8      	ldrb	r0, [r1, #7]
 8002702:	f883 004d 	strb.w	r0, [r3, #77]	; 0x4d
 8002706:	7a08      	ldrb	r0, [r1, #8]
 8002708:	f883 004e 	strb.w	r0, [r3, #78]	; 0x4e
 800270c:	7a49      	ldrb	r1, [r1, #9]
 800270e:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
 8002712:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8002716:	7801      	ldrb	r1, [r0, #0]
 8002718:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
 800271c:	7841      	ldrb	r1, [r0, #1]
 800271e:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
 8002722:	7881      	ldrb	r1, [r0, #2]
 8002724:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
 8002728:	78c1      	ldrb	r1, [r0, #3]
 800272a:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
 800272e:	7901      	ldrb	r1, [r0, #4]
 8002730:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
 8002734:	7941      	ldrb	r1, [r0, #5]
 8002736:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
 800273a:	7981      	ldrb	r1, [r0, #6]
 800273c:	f883 1056 	strb.w	r1, [r3, #86]	; 0x56
 8002740:	79c1      	ldrb	r1, [r0, #7]
 8002742:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
 8002746:	7a01      	ldrb	r1, [r0, #8]
 8002748:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
 800274c:	f852 1c0c 	ldr.w	r1, [r2, #-12]
 8002750:	7a40      	ldrb	r0, [r0, #9]
 8002752:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
 8002756:	7808      	ldrb	r0, [r1, #0]
 8002758:	f883 005a 	strb.w	r0, [r3, #90]	; 0x5a
 800275c:	7848      	ldrb	r0, [r1, #1]
 800275e:	f883 005b 	strb.w	r0, [r3, #91]	; 0x5b
 8002762:	7888      	ldrb	r0, [r1, #2]
 8002764:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
 8002768:	78c8      	ldrb	r0, [r1, #3]
 800276a:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
 800276e:	7908      	ldrb	r0, [r1, #4]
 8002770:	f883 005e 	strb.w	r0, [r3, #94]	; 0x5e
 8002774:	7948      	ldrb	r0, [r1, #5]
 8002776:	f883 005f 	strb.w	r0, [r3, #95]	; 0x5f
 800277a:	7988      	ldrb	r0, [r1, #6]
 800277c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
 8002780:	79c8      	ldrb	r0, [r1, #7]
 8002782:	f883 0061 	strb.w	r0, [r3, #97]	; 0x61
 8002786:	7a08      	ldrb	r0, [r1, #8]
 8002788:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
 800278c:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8002790:	7a49      	ldrb	r1, [r1, #9]
 8002792:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
 8002796:	7801      	ldrb	r1, [r0, #0]
 8002798:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 800279c:	7841      	ldrb	r1, [r0, #1]
 800279e:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
 80027a2:	7881      	ldrb	r1, [r0, #2]
 80027a4:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
 80027a8:	78c1      	ldrb	r1, [r0, #3]
 80027aa:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
 80027ae:	7901      	ldrb	r1, [r0, #4]
 80027b0:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
 80027b4:	7941      	ldrb	r1, [r0, #5]
 80027b6:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
 80027ba:	7981      	ldrb	r1, [r0, #6]
 80027bc:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
 80027c0:	79c1      	ldrb	r1, [r0, #7]
 80027c2:	f883 106b 	strb.w	r1, [r3, #107]	; 0x6b
 80027c6:	7a01      	ldrb	r1, [r0, #8]
 80027c8:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
 80027cc:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80027d0:	7a40      	ldrb	r0, [r0, #9]
 80027d2:	f883 006d 	strb.w	r0, [r3, #109]	; 0x6d
 80027d6:	7808      	ldrb	r0, [r1, #0]
 80027d8:	f883 006e 	strb.w	r0, [r3, #110]	; 0x6e
 80027dc:	7848      	ldrb	r0, [r1, #1]
 80027de:	f883 006f 	strb.w	r0, [r3, #111]	; 0x6f
 80027e2:	7888      	ldrb	r0, [r1, #2]
 80027e4:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 80027e8:	78c8      	ldrb	r0, [r1, #3]
 80027ea:	f883 0071 	strb.w	r0, [r3, #113]	; 0x71
 80027ee:	7908      	ldrb	r0, [r1, #4]
 80027f0:	f883 0072 	strb.w	r0, [r3, #114]	; 0x72
 80027f4:	7948      	ldrb	r0, [r1, #5]
 80027f6:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
 80027fa:	7988      	ldrb	r0, [r1, #6]
 80027fc:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
 8002800:	79c8      	ldrb	r0, [r1, #7]
 8002802:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
 8002806:	7a08      	ldrb	r0, [r1, #8]
 8002808:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
 800280c:	7a49      	ldrb	r1, [r1, #9]
 800280e:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
  for (int i = 0; i < 3; i++)
 8002812:	d002      	beq.n	800281a <main+0x712>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 8002814:	682b      	ldr	r3, [r5, #0]
 8002816:	7818      	ldrb	r0, [r3, #0]
 8002818:	e65e      	b.n	80024d8 <main+0x3d0>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	49a4      	ldr	r1, [pc, #656]	; (8002ab0 <main+0x9a8>)
 800281e:	48a5      	ldr	r0, [pc, #660]	; (8002ab4 <main+0x9ac>)
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8002820:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8002824:	f007 fffc 	bl	800a820 <HAL_SPI_Receive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002828:	4aa3      	ldr	r2, [pc, #652]	; (8002ab8 <main+0x9b0>)
 800282a:	2340      	movs	r3, #64	; 0x40
 800282c:	48a3      	ldr	r0, [pc, #652]	; (8002abc <main+0x9b4>)
	  if (rand > TWO_TO_31)
 800282e:	ed9f 8aa4 	vldr	s16, [pc, #656]	; 8002ac0 <main+0x9b8>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002832:	18d1      	adds	r1, r2, r3
	  if (rand > TWO_TO_31)
 8002834:	ed9f 9aa3 	vldr	s18, [pc, #652]	; 8002ac4 <main+0x9bc>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002838:	f008 f8d2 	bl	800a9e0 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 800283c:	49a2      	ldr	r1, [pc, #648]	; (8002ac8 <main+0x9c0>)
 800283e:	48a3      	ldr	r0, [pc, #652]	; (8002acc <main+0x9c4>)
	  if (rand > TWO_TO_31)
 8002840:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 8002844:	f7fe f94c 	bl	8000ae0 <audioStart>
	AudioCodec_init(&hi2c2);
 8002848:	48a1      	ldr	r0, [pc, #644]	; (8002ad0 <main+0x9c8>)
 800284a:	f7fe f95b 	bl	8000b04 <AudioCodec_init>
 800284e:	4ba1      	ldr	r3, [pc, #644]	; (8002ad4 <main+0x9cc>)
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8002850:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8002ad8 <main+0x9d0>
 8002854:	f003 0207 	and.w	r2, r3, #7
 8002858:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8002b2c <main+0xa24>
 800285c:	eee8 8a27 	vfma.f32	s17, s16, s15
 8002860:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8002864:	4f9d      	ldr	r7, [pc, #628]	; (8002adc <main+0x9d4>)
 8002866:	4e9e      	ldr	r6, [pc, #632]	; (8002ae0 <main+0x9d8>)
 8002868:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8002b30 <main+0xa28>
 800286c:	4d9d      	ldr	r5, [pc, #628]	; (8002ae4 <main+0x9dc>)
 800286e:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8002b34 <main+0xa2c>
 8002872:	9203      	str	r2, [sp, #12]
 8002874:	e014      	b.n	80028a0 <main+0x798>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
 8002876:	8833      	ldrh	r3, [r6, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	b903      	cbnz	r3, 800287e <main+0x776>
 800287c:	8873      	ldrh	r3, [r6, #2]
	  if (rand > TWO_TO_31)
 800287e:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8002882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002886:	dd04      	ble.n	8002892 <main+0x78a>
		  myTestInt++;
 8002888:	f8da 3000 	ldr.w	r3, [sl]
 800288c:	3301      	adds	r3, #1
 800288e:	f8ca 3000 	str.w	r3, [sl]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8002892:	782b      	ldrb	r3, [r5, #0]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800289a:	702a      	strb	r2, [r5, #0]
 800289c:	edc3 8a00 	vstr	s17, [r3]
	  if (boardNumber == 0)
 80028a0:	f898 3000 	ldrb.w	r3, [r8]
 80028a4:	b943      	cbnz	r3, 80028b8 <main+0x7b0>
		  if (presetWaitingToLoad > 0)
 80028a6:	f8db 1000 	ldr.w	r1, [fp]
 80028aa:	b171      	cbz	r1, 80028ca <main+0x7c2>
			  if (!i2cSending)
 80028ac:	4b8e      	ldr	r3, [pc, #568]	; (8002ae8 <main+0x9e0>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d058      	beq.n	800296a <main+0x862>
	  if (presetWaitingToParse > 0)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0db      	beq.n	8002876 <main+0x76e>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 80028be:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <main+0x9e4>)
 80028c0:	6838      	ldr	r0, [r7, #0]
 80028c2:	7819      	ldrb	r1, [r3, #0]
 80028c4:	f018 fd60 	bl	801b388 <__parsePreset_veneer>
 80028c8:	e7d5      	b.n	8002876 <main+0x76e>
		  else if (presetWaitingToWrite > 0)
 80028ca:	4b89      	ldr	r3, [pc, #548]	; (8002af0 <main+0x9e8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f2      	beq.n	80028b8 <main+0x7b0>
				  writePresetToSDCard(presetWaitingToWrite);
 80028d2:	4b87      	ldr	r3, [pc, #540]	; (8002af0 <main+0x9e8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 80028d8:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 80028da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028de:	487d      	ldr	r0, [pc, #500]	; (8002ad4 <main+0x9cc>)
 80028e0:	9101      	str	r1, [sp, #4]
 80028e2:	f016 f8c3 	bl	8018a6c <memset>
  __IO uint8_t status = SD_PRESENT;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f88d 3013 	strb.w	r3, [sp, #19]
  return status;
 80028ec:	f89d 3013 	ldrb.w	r3, [sp, #19]
	if(BSP_SD_IsDetected())
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d033      	beq.n	800295c <main+0x854>
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	9901      	ldr	r1, [sp, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 80d1 	bne.w	8002aa0 <main+0x998>
 80028fe:	4b75      	ldr	r3, [pc, #468]	; (8002ad4 <main+0x9cc>)
					audioOutBuffer[i] = 0;
 8002900:	2000      	movs	r0, #0
 8002902:	2100      	movs	r1, #0
 8002904:	e8e3 0102 	strd	r0, r1, [r3], #8
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002908:	42a3      	cmp	r3, r4
 800290a:	d1fb      	bne.n	8002904 <main+0x7fc>
				diskBusy = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	4a79      	ldr	r2, [pc, #484]	; (8002af4 <main+0x9ec>)
 8002910:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 8002912:	4a79      	ldr	r2, [pc, #484]	; (8002af8 <main+0x9f0>)
 8002914:	7813      	ldrb	r3, [r2, #0]
 8002916:	2b63      	cmp	r3, #99	; 0x63
 8002918:	d901      	bls.n	800291e <main+0x816>
			        presetNumberToSave = 99;
 800291a:	2363      	movs	r3, #99	; 0x63
 800291c:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <main+0x9f0>)
 8002920:	220a      	movs	r2, #10
 8002922:	a907      	add	r1, sp, #28
 8002924:	7818      	ldrb	r0, [r3, #0]
 8002926:	f016 f85d 	bl	80189e4 <itoa>
				int len = ((strlen(charBuf)));
 800292a:	a807      	add	r0, sp, #28
 800292c:	f7fd fcd4 	bl	80002d8 <strlen>
				if (len == 1)
 8002930:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8002932:	4602      	mov	r2, r0
				if (len == 1)
 8002934:	d04f      	beq.n	80029d6 <main+0x8ce>
					strcat(charBuf, ".ebp");
 8002936:	4971      	ldr	r1, [pc, #452]	; (8002afc <main+0x9f4>)
 8002938:	ab07      	add	r3, sp, #28
 800293a:	6808      	ldr	r0, [r1, #0]
 800293c:	7909      	ldrb	r1, [r1, #4]
 800293e:	5098      	str	r0, [r3, r2]
 8002940:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 8002942:	a80a      	add	r0, sp, #40	; 0x28
 8002944:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8002946:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 8002948:	a907      	add	r1, sp, #28
 800294a:	f016 f8bb 	bl	8018ac4 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 800294e:	220a      	movs	r2, #10
 8002950:	a90a      	add	r1, sp, #40	; 0x28
 8002952:	486b      	ldr	r0, [pc, #428]	; (8002b00 <main+0x9f8>)
 8002954:	f00c f9b4 	bl	800ecc0 <f_open>
 8002958:	2800      	cmp	r0, #0
 800295a:	d053      	beq.n	8002a04 <main+0x8fc>
	presetWaitingToWrite = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	4a64      	ldr	r2, [pc, #400]	; (8002af0 <main+0x9e8>)
 8002960:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8002962:	4a64      	ldr	r2, [pc, #400]	; (8002af4 <main+0x9ec>)
 8002964:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002966:	b662      	cpsie	i
}
 8002968:	e7a6      	b.n	80028b8 <main+0x7b0>
				  checkForSDCardPreset(presetNumberToLoad);
 800296a:	4b60      	ldr	r3, [pc, #384]	; (8002aec <main+0x9e4>)
	prevVoice = numberToLoad;
 800296c:	4a65      	ldr	r2, [pc, #404]	; (8002b04 <main+0x9fc>)
				  checkForSDCardPreset(presetNumberToLoad);
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
 8002972:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
 8002974:	4a64      	ldr	r2, [pc, #400]	; (8002b08 <main+0xa00>)
 8002976:	6013      	str	r3, [r2, #0]
  __IO uint8_t status = SD_PRESENT;
 8002978:	2201      	movs	r2, #1
 800297a:	f88d 2012 	strb.w	r2, [sp, #18]
  return status;
 800297e:	f89d 2012 	ldrb.w	r2, [sp, #18]
	if(BSP_SD_IsDetected())
 8002982:	b30a      	cbz	r2, 80029c8 <main+0x8c0>
 8002984:	9a03      	ldr	r2, [sp, #12]
 8002986:	2a00      	cmp	r2, #0
 8002988:	f040 8083 	bne.w	8002a92 <main+0x98a>
 800298c:	4a51      	ldr	r2, [pc, #324]	; (8002ad4 <main+0x9cc>)
			audioOutBuffer[i] = 0;
 800298e:	2000      	movs	r0, #0
 8002990:	2100      	movs	r1, #0
 8002992:	e8e2 0102 	strd	r0, r1, [r2], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002996:	4294      	cmp	r4, r2
 8002998:	d1fb      	bne.n	8002992 <main+0x88a>
		loadFailed = 0;
 800299a:	2100      	movs	r1, #0
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <main+0xa04>)
		diskBusy = 1;
 80029a0:	2201      	movs	r2, #1
		disk_initialize(0);
 80029a2:	4608      	mov	r0, r1
		presetWaitingToLoad = 0;
 80029a4:	f8cb 1000 	str.w	r1, [fp]
		loadFailed = 0;
 80029a8:	7019      	strb	r1, [r3, #0]
		diskBusy = 1;
 80029aa:	4b52      	ldr	r3, [pc, #328]	; (8002af4 <main+0x9ec>)
 80029ac:	701a      	strb	r2, [r3, #0]
		disk_initialize(0);
 80029ae:	f009 ff99 	bl	800c8e4 <disk_initialize>
	    disk_status(0);
 80029b2:	2100      	movs	r1, #0
 80029b4:	4608      	mov	r0, r1
 80029b6:	f009 ff8b 	bl	800c8d0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80029ba:	2201      	movs	r2, #1
 80029bc:	4954      	ldr	r1, [pc, #336]	; (8002b10 <main+0xa08>)
 80029be:	4855      	ldr	r0, [pc, #340]	; (8002b14 <main+0xa0c>)
 80029c0:	f00c f932 	bl	800ec28 <f_mount>
 80029c4:	9b01      	ldr	r3, [sp, #4]
 80029c6:	b338      	cbz	r0, 8002a18 <main+0x910>
		loadFailed = 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	4a50      	ldr	r2, [pc, #320]	; (8002b0c <main+0xa04>)
 80029cc:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	4a48      	ldr	r2, [pc, #288]	; (8002af4 <main+0x9ec>)
 80029d2:	7013      	strb	r3, [r2, #0]
	return found;
 80029d4:	e770      	b.n	80028b8 <main+0x7b0>
					finalString[2] = charBuf[1];
 80029d6:	f89d 301d 	ldrb.w	r3, [sp, #29]
					strcat(finalString, ".ebp");
 80029da:	a80a      	add	r0, sp, #40	; 0x28
					finalString[2] = charBuf[1];
 80029dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
					finalString[1] = charBuf[0];
 80029e0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80029e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
					finalString[0] = '0';
 80029e8:	2330      	movs	r3, #48	; 0x30
 80029ea:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					strcat(finalString, ".ebp");
 80029ee:	f7fd fc73 	bl	80002d8 <strlen>
 80029f2:	4a42      	ldr	r2, [pc, #264]	; (8002afc <main+0x9f4>)
 80029f4:	4603      	mov	r3, r0
 80029f6:	a90a      	add	r1, sp, #40	; 0x28
 80029f8:	6810      	ldr	r0, [r2, #0]
 80029fa:	7912      	ldrb	r2, [r2, #4]
 80029fc:	50c8      	str	r0, [r1, r3]
 80029fe:	440b      	add	r3, r1
 8002a00:	711a      	strb	r2, [r3, #4]
 8002a02:	e7a4      	b.n	800294e <main+0x846>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 8002a04:	9a02      	ldr	r2, [sp, #8]
 8002a06:	ab06      	add	r3, sp, #24
 8002a08:	4943      	ldr	r1, [pc, #268]	; (8002b18 <main+0xa10>)
 8002a0a:	483d      	ldr	r0, [pc, #244]	; (8002b00 <main+0x9f8>)
 8002a0c:	f00c fbf8 	bl	800f200 <f_write>
					f_close(&SDFile);
 8002a10:	483b      	ldr	r0, [pc, #236]	; (8002b00 <main+0x9f8>)
 8002a12:	f00c fd51 	bl	800f4b8 <f_close>
 8002a16:	e7a1      	b.n	800295c <main+0x854>
			itoa(numberToLoad, charBuf, 10);
 8002a18:	220a      	movs	r2, #10
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	a907      	add	r1, sp, #28
 8002a1e:	f015 ffe1 	bl	80189e4 <itoa>
			int len = ((strlen(charBuf)));
 8002a22:	a807      	add	r0, sp, #28
 8002a24:	f7fd fc58 	bl	80002d8 <strlen>
			if (len == 1)
 8002a28:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
 8002a2a:	4602      	mov	r2, r0
			if (len == 1)
 8002a2c:	f000 8084 	beq.w	8002b38 <main+0xa30>
				strcat(charBuf, "*.ebp");
 8002a30:	493a      	ldr	r1, [pc, #232]	; (8002b1c <main+0xa14>)
 8002a32:	ab07      	add	r3, sp, #28
 8002a34:	6808      	ldr	r0, [r1, #0]
 8002a36:	8889      	ldrh	r1, [r1, #4]
 8002a38:	5098      	str	r0, [r3, r2]
 8002a3a:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
 8002a3c:	a80a      	add	r0, sp, #40	; 0x28
 8002a3e:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
 8002a40:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
 8002a42:	a907      	add	r1, sp, #28
 8002a44:	f016 f83e 	bl	8018ac4 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 8002a48:	ab0a      	add	r3, sp, #40	; 0x28
 8002a4a:	4a31      	ldr	r2, [pc, #196]	; (8002b10 <main+0xa08>)
 8002a4c:	4934      	ldr	r1, [pc, #208]	; (8002b20 <main+0xa18>)
 8002a4e:	4835      	ldr	r0, [pc, #212]	; (8002b24 <main+0xa1c>)
 8002a50:	f00c fe32 	bl	800f6b8 <f_findfirst>
			if(res == FR_OK)
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d1b7      	bne.n	80029c8 <main+0x8c0>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8002a58:	2211      	movs	r2, #17
 8002a5a:	4933      	ldr	r1, [pc, #204]	; (8002b28 <main+0xa20>)
 8002a5c:	4828      	ldr	r0, [pc, #160]	; (8002b00 <main+0x9f8>)
 8002a5e:	f00c f92f 	bl	800ecc0 <f_open>
 8002a62:	9001      	str	r0, [sp, #4]
 8002a64:	2800      	cmp	r0, #0
 8002a66:	d1af      	bne.n	80029c8 <main+0x8c0>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8002a68:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <main+0x9f8>)
 8002a6a:	ab06      	add	r3, sp, #24
 8002a6c:	492a      	ldr	r1, [pc, #168]	; (8002b18 <main+0xa10>)
 8002a6e:	68d2      	ldr	r2, [r2, #12]
 8002a70:	4823      	ldr	r0, [pc, #140]	; (8002b00 <main+0x9f8>)
 8002a72:	f00c fa89 	bl	800ef88 <f_read>
					presetWaitingToParse = bytesRead;
 8002a76:	9b06      	ldr	r3, [sp, #24]
					f_close(&SDFile);
 8002a78:	4821      	ldr	r0, [pc, #132]	; (8002b00 <main+0x9f8>)
					presetWaitingToParse = bytesRead;
 8002a7a:	603b      	str	r3, [r7, #0]
					f_close(&SDFile);
 8002a7c:	f00c fd1c 	bl	800f4b8 <f_close>
	  	  i2cSending = 1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <main+0x9e0>)
 8002a84:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a86:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 8002a88:	b662      	cpsie	i
	  	i2cSending = 0;
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	9a01      	ldr	r2, [sp, #4]
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e79d      	b.n	80029ce <main+0x8c6>
 8002a92:	4a10      	ldr	r2, [pc, #64]	; (8002ad4 <main+0x9cc>)
			audioOutBuffer[i + 1] = 0;
 8002a94:	e9c2 1100 	strd	r1, r1, [r2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002a98:	3208      	adds	r2, #8
 8002a9a:	42a2      	cmp	r2, r4
 8002a9c:	d1fa      	bne.n	8002a94 <main+0x98c>
 8002a9e:	e77c      	b.n	800299a <main+0x892>
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <main+0x9cc>)
					audioOutBuffer[i + 1] = 0;
 8002aa2:	e9c3 1100 	strd	r1, r1, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	429c      	cmp	r4, r3
 8002aaa:	d1fa      	bne.n	8002aa2 <main+0x99a>
 8002aac:	e72e      	b.n	800290c <main+0x804>
 8002aae:	bf00      	nop
 8002ab0:	38000040 	.word	0x38000040
 8002ab4:	2001c4f0 	.word	0x2001c4f0
 8002ab8:	30000800 	.word	0x30000800
 8002abc:	2001c468 	.word	0x2001c468
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	4f000000 	.word	0x4f000000
 8002ac8:	2001c1ec 	.word	0x2001c1ec
 8002acc:	2001c154 	.word	0x2001c154
 8002ad0:	20013e68 	.word	0x20013e68
 8002ad4:	30000000 	.word	0x30000000
 8002ad8:	3000000d 	.word	0x3000000d
 8002adc:	20019b94 	.word	0x20019b94
 8002ae0:	20013dd4 	.word	0x20013dd4
 8002ae4:	20013ed6 	.word	0x20013ed6
 8002ae8:	20016092 	.word	0x20016092
 8002aec:	20019b8e 	.word	0x20019b8e
 8002af0:	20019b98 	.word	0x20019b98
 8002af4:	20013f10 	.word	0x20013f10
 8002af8:	20019b8f 	.word	0x20019b8f
 8002afc:	0801b520 	.word	0x0801b520
 8002b00:	2001d37c 	.word	0x2001d37c
 8002b04:	200004b8 	.word	0x200004b8
 8002b08:	20013e18 	.word	0x20013e18
 8002b0c:	200180c4 	.word	0x200180c4
 8002b10:	2001d5ac 	.word	0x2001d5ac
 8002b14:	2001d148 	.word	0x2001d148
 8002b18:	30042380 	.word	0x30042380
 8002b1c:	0801b3b0 	.word	0x0801b3b0
 8002b20:	20015f78 	.word	0x20015f78
 8002b24:	20013ed8 	.word	0x20013ed8
 8002b28:	20015f8e 	.word	0x20015f8e
 8002b2c:	20019b90 	.word	0x20019b90
 8002b30:	20018a50 	.word	0x20018a50
 8002b34:	20019ba8 	.word	0x20019ba8
				finalString[2] = charBuf[1];
 8002b38:	f89d 301d 	ldrb.w	r3, [sp, #29]
				strcat(finalString, "*.ebp");
 8002b3c:	a80a      	add	r0, sp, #40	; 0x28
				finalString[2] = charBuf[1];
 8002b3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				finalString[1] = charBuf[0];
 8002b42:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				finalString[0] = '0';
 8002b4a:	2330      	movs	r3, #48	; 0x30
 8002b4c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
				strcat(finalString, "*.ebp");
 8002b50:	f7fd fbc2 	bl	80002d8 <strlen>
 8002b54:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <main+0xa68>)
 8002b56:	4603      	mov	r3, r0
 8002b58:	a90a      	add	r1, sp, #40	; 0x28
 8002b5a:	6810      	ldr	r0, [r2, #0]
 8002b5c:	8892      	ldrh	r2, [r2, #4]
 8002b5e:	50c8      	str	r0, [r1, r3]
 8002b60:	440b      	add	r3, r1
 8002b62:	809a      	strh	r2, [r3, #4]
 8002b64:	e770      	b.n	8002a48 <main+0x940>
	  getPresetNamesFromSDCard();
 8002b66:	f7fe fb9b 	bl	80012a0 <getPresetNamesFromSDCard>
	  diskBusy = 1;
 8002b6a:	f7ff bbf8 	b.w	800235e <main+0x256>
 8002b6e:	bf00      	nop
 8002b70:	0801b3b0 	.word	0x0801b3b0

08002b74 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop

08002b78 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002b78:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002b7a:	4806      	ldr	r0, [pc, #24]	; (8002b94 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <MX_RNG_Init+0x20>)
 8002b80:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002b84:	f006 f894 	bl	8008cb0 <HAL_RNG_Init>
 8002b88:	b900      	cbnz	r0, 8002b8c <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002b8a:	bd08      	pop	{r3, pc}
 8002b8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002b90:	f7ff bff0 	b.w	8002b74 <Error_Handler>
 8002b94:	2001c04c 	.word	0x2001c04c
 8002b98:	48021800 	.word	0x48021800

08002b9c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002b9c:	b510      	push	{r4, lr}
 8002b9e:	b0b2      	sub	sp, #200	; 0xc8
 8002ba0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ba2:	22c0      	movs	r2, #192	; 0xc0
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	a802      	add	r0, sp, #8
 8002ba8:	f015 ff60 	bl	8018a6c <memset>
  if(rngHandle->Instance==RNG)
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_RNG_MspInit+0x54>)
 8002bae:	6822      	ldr	r2, [r4, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002bb4:	b032      	add	sp, #200	; 0xc8
 8002bb6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002bb8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bbc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bbe:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bc4:	f004 fe80 	bl	80078c8 <HAL_RCCEx_PeriphCLKConfig>
 8002bc8:	b970      	cbnz	r0, 8002be8 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_RNG_MspInit+0x58>)
 8002bcc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8002bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002bd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	9301      	str	r3, [sp, #4]
 8002be2:	9b01      	ldr	r3, [sp, #4]
}
 8002be4:	b032      	add	sp, #200	; 0xc8
 8002be6:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002be8:	f7ff ffc4 	bl	8002b74 <Error_Handler>
 8002bec:	e7ed      	b.n	8002bca <HAL_RNG_MspInit+0x2e>
 8002bee:	bf00      	nop
 8002bf0:	48021800 	.word	0x48021800
 8002bf4:	58024400 	.word	0x58024400

08002bf8 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002bf8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002bfa:	4818      	ldr	r0, [pc, #96]	; (8002c5c <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002bfc:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002bfe:	4c18      	ldr	r4, [pc, #96]	; (8002c60 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002c00:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002c02:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002c04:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002c06:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002c08:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002c0a:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002c0c:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002c0e:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002c12:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002c16:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002c1a:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002c1c:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002c20:	f006 fa96 	bl	8009150 <HAL_SAI_InitProtocol>
 8002c24:	b998      	cbnz	r0, 8002c4e <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002c26:	480f      	ldr	r0, [pc, #60]	; (8002c64 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002c28:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002c2a:	4c0f      	ldr	r4, [pc, #60]	; (8002c68 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002c2c:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002c2e:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002c30:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002c32:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002c34:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002c36:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002c38:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002c3a:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002c3c:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002c3e:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002c40:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002c42:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002c46:	f006 fa83 	bl	8009150 <HAL_SAI_InitProtocol>
 8002c4a:	b918      	cbnz	r0, 8002c54 <MX_SAI1_Init+0x5c>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002c4c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002c4e:	f7ff ff91 	bl	8002b74 <Error_Handler>
 8002c52:	e7e8      	b.n	8002c26 <MX_SAI1_Init+0x2e>
}
 8002c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002c58:	f7ff bf8c 	b.w	8002b74 <Error_Handler>
 8002c5c:	2001c154 	.word	0x2001c154
 8002c60:	40015804 	.word	0x40015804
 8002c64:	2001c1ec 	.word	0x2001c1ec
 8002c68:	40015824 	.word	0x40015824
 8002c6c:	00000000 	.word	0x00000000

08002c70 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002c70:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002c72:	4a55      	ldr	r2, [pc, #340]	; (8002dc8 <HAL_SAI_MspInit+0x158>)
{
 8002c74:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 8002c76:	6803      	ldr	r3, [r0, #0]
{
 8002c78:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002c7e:	4a53      	ldr	r2, [pc, #332]	; (8002dcc <HAL_SAI_MspInit+0x15c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d03f      	beq.n	8002d04 <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8002c84:	b009      	add	sp, #36	; 0x24
 8002c86:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 8002c88:	4b51      	ldr	r3, [pc, #324]	; (8002dd0 <HAL_SAI_MspInit+0x160>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2a00      	cmp	r2, #0
 8002c8e:	f000 8081 	beq.w	8002d94 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 8002c92:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002c94:	2074      	movs	r0, #116	; 0x74
 8002c96:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002c98:	4d4e      	ldr	r5, [pc, #312]	; (8002dd4 <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 8002c9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002c9c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002c9e:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8002dc0 <HAL_SAI_MspInit+0x150>
 8002ca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ca6:	a902      	add	r1, sp, #8
 8002ca8:	484b      	ldr	r0, [pc, #300]	; (8002dd8 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002caa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002cac:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cb0:	f002 ff38 	bl	8005b24 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002cb4:	4949      	ldr	r1, [pc, #292]	; (8002ddc <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002cb6:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb8:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002cba:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cbc:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002cbe:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002cc0:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cc8:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002cca:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002cce:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cd8:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cda:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002cde:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce6:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002cea:	2304      	movs	r3, #4
 8002cec:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002cee:	f001 fa6d 	bl	80041cc <HAL_DMA_Init>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d15c      	bne.n	8002db0 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 8002cf6:	4a35      	ldr	r2, [pc, #212]	; (8002dcc <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002cf8:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002cfe:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 8002d02:	d1bf      	bne.n	8002c84 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 8002d04:	4b32      	ldr	r3, [pc, #200]	; (8002dd0 <HAL_SAI_MspInit+0x160>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	b3b2      	cbz	r2, 8002d78 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 8002d0a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d0c:	2008      	movs	r0, #8
 8002d0e:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002d10:	4d33      	ldr	r5, [pc, #204]	; (8002de0 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 8002d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d14:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d16:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8002dc0 <HAL_SAI_MspInit+0x150>
 8002d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d1e:	a902      	add	r1, sp, #8
 8002d20:	482d      	ldr	r0, [pc, #180]	; (8002dd8 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d22:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d24:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d28:	f002 fefc 	bl	8005b24 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002d2c:	492d      	ldr	r1, [pc, #180]	; (8002de4 <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002d2e:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d30:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002d32:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002d34:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002d36:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d42:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002d46:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4e:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002d52:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002d56:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d60:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002d64:	f001 fa32 	bl	80041cc <HAL_DMA_Init>
 8002d68:	bb28      	cbnz	r0, 8002db6 <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8002d6a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8002d6e:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8002d70:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8002d74:	b009      	add	sp, #36	; 0x24
 8002d76:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002d78:	491b      	ldr	r1, [pc, #108]	; (8002de8 <HAL_SAI_MspInit+0x178>)
 8002d7a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8002d7e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002d82:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8002d86:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8002d8a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002d8e:	9101      	str	r1, [sp, #4]
 8002d90:	9901      	ldr	r1, [sp, #4]
 8002d92:	e7ba      	b.n	8002d0a <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002d94:	4914      	ldr	r1, [pc, #80]	; (8002de8 <HAL_SAI_MspInit+0x178>)
 8002d96:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8002d9a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002d9e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8002da2:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8002da6:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002daa:	9100      	str	r1, [sp, #0]
 8002dac:	9900      	ldr	r1, [sp, #0]
 8002dae:	e770      	b.n	8002c92 <HAL_SAI_MspInit+0x22>
      Error_Handler();
 8002db0:	f7ff fee0 	bl	8002b74 <Error_Handler>
 8002db4:	e79f      	b.n	8002cf6 <HAL_SAI_MspInit+0x86>
      Error_Handler();
 8002db6:	f7ff fedd 	bl	8002b74 <Error_Handler>
 8002dba:	e7d6      	b.n	8002d6a <HAL_SAI_MspInit+0xfa>
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	00000003 	.word	0x00000003
 8002dc8:	40015804 	.word	0x40015804
 8002dcc:	40015824 	.word	0x40015824
 8002dd0:	2001c060 	.word	0x2001c060
 8002dd4:	2001c064 	.word	0x2001c064
 8002dd8:	58021000 	.word	0x58021000
 8002ddc:	40020028 	.word	0x40020028
 8002de0:	2001c0dc 	.word	0x2001c0dc
 8002de4:	40020040 	.word	0x40020040
 8002de8:	58024400 	.word	0x58024400

08002dec <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002dec:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002df0:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 8002df2:	4c07      	ldr	r4, [pc, #28]	; (8002e10 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002df4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 8002df8:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 8002dfa:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002dfe:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 8002e02:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	2001c284 	.word	0x2001c284
 8002e10:	52007000 	.word	0x52007000

08002e14 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_SD_MspInit+0xb0>)
{
 8002e18:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 8002e1a:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 8002e1e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	9408      	str	r4, [sp, #32]
 8002e22:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002e26:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 8002e2a:	d001      	beq.n	8002e30 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002e2c:	b00b      	add	sp, #44	; 0x2c
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002e32:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e34:	2601      	movs	r6, #1
 8002e36:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e38:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e3c:	4823      	ldr	r0, [pc, #140]	; (8002ecc <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e42:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002e46:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002e4a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002e4e:	9201      	str	r2, [sp, #4]
 8002e50:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e56:	f042 0204 	orr.w	r2, r2, #4
 8002e5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002e5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e62:	f002 0204 	and.w	r2, r2, #4
 8002e66:	9202      	str	r2, [sp, #8]
 8002e68:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e6e:	f042 0208 	orr.w	r2, r2, #8
 8002e72:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e76:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002e7e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e86:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e88:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e8a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002e8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e90:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e94:	f002 fe46 	bl	8005b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e9c:	a904      	add	r1, sp, #16
 8002e9e:	480c      	ldr	r0, [pc, #48]	; (8002ed0 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002ea0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ea6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eaa:	f002 fe3b 	bl	8005b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002eae:	4622      	mov	r2, r4
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	2031      	movs	r0, #49	; 0x31
 8002eb4:	f000 fff8 	bl	8003ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002eb8:	2031      	movs	r0, #49	; 0x31
 8002eba:	f001 f833 	bl	8003f24 <HAL_NVIC_EnableIRQ>
}
 8002ebe:	b00b      	add	sp, #44	; 0x2c
 8002ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	52007000 	.word	0x52007000
 8002ec8:	58024400 	.word	0x58024400
 8002ecc:	58020800 	.word	0x58020800
 8002ed0:	58020c00 	.word	0x58020c00
 8002ed4:	00000000 	.word	0x00000000

08002ed8 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ed8:	4813      	ldr	r0, [pc, #76]	; (8002f28 <MX_SPI1_Init+0x50>)
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002edc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002f20 <MX_SPI1_Init+0x48>
{
 8002ee0:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002ee2:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8002ee4:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ee6:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002ee8:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eea:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eec:	ed80 7b08 	vstr	d7, [r0, #32]
 8002ef0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ef4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ef8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002efc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f00:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f04:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f08:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f0c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f10:	f007 fbba 	bl	800a688 <HAL_SPI_Init>
 8002f14:	b900      	cbnz	r0, 8002f18 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f16:	bd08      	pop	{r3, pc}
 8002f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002f1c:	f7ff be2a 	b.w	8002b74 <Error_Handler>
	...
 8002f28:	2001c468 	.word	0x2001c468
 8002f2c:	40013000 	.word	0x40013000

08002f30 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002f30:	4813      	ldr	r0, [pc, #76]	; (8002f80 <MX_SPI5_Init+0x50>)
 8002f32:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f34:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002f78 <MX_SPI5_Init+0x48>
{
 8002f38:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8002f3a:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 8002f3c:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f3e:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8002f40:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f42:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f44:	ed80 7b08 	vstr	d7, [r0, #32]
 8002f48:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002f4c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f50:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002f54:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002f58:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002f5c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002f60:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002f64:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002f68:	f007 fb8e 	bl	800a688 <HAL_SPI_Init>
 8002f6c:	b900      	cbnz	r0, 8002f70 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002f6e:	bd08      	pop	{r3, pc}
 8002f70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002f74:	f7ff bdfe 	b.w	8002b74 <Error_Handler>
	...
 8002f80:	2001c4f0 	.word	0x2001c4f0
 8002f84:	40015000 	.word	0x40015000

08002f88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f88:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8a:	2400      	movs	r4, #0
{
 8002f8c:	b0bb      	sub	sp, #236	; 0xec
 8002f8e:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f90:	22c0      	movs	r2, #192	; 0xc0
 8002f92:	4621      	mov	r1, r4
 8002f94:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f96:	9408      	str	r4, [sp, #32]
 8002f98:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002f9c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa0:	f015 fd64 	bl	8018a6c <memset>
  if(spiHandle->Instance==SPI1)
 8002fa4:	682b      	ldr	r3, [r5, #0]
 8002fa6:	4a70      	ldr	r2, [pc, #448]	; (8003168 <HAL_SPI_MspInit+0x1e0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 8002fac:	4a6f      	ldr	r2, [pc, #444]	; (800316c <HAL_SPI_MspInit+0x1e4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d071      	beq.n	8003096 <HAL_SPI_MspInit+0x10e>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002fb2:	b03b      	add	sp, #236	; 0xec
 8002fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fb6:	4b6e      	ldr	r3, [pc, #440]	; (8003170 <HAL_SPI_MspInit+0x1e8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	a904      	add	r1, sp, #16
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002fba:	4e6e      	ldr	r6, [pc, #440]	; (8003174 <HAL_SPI_MspInit+0x1ec>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fbc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002fc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fc4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002fc8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002fcc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fd0:	9200      	str	r2, [sp, #0]
 8002fd2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fd8:	f042 0201 	orr.w	r2, r2, #1
 8002fdc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fe0:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fec:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fee:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff0:	4861      	ldr	r0, [pc, #388]	; (8003178 <HAL_SPI_MspInit+0x1f0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	2305      	movs	r3, #5
 8002ffa:	e9cd 2307 	strd	r2, r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffe:	f002 fd91 	bl	8005b24 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003002:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8003004:	4a5d      	ldr	r2, [pc, #372]	; (800317c <HAL_SPI_MspInit+0x1f4>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003006:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003008:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800300a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800300e:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003010:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003014:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003016:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003018:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800301a:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800301c:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003020:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003022:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003026:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003028:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800302c:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800302e:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003030:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003032:	f001 f8cb 	bl	80041cc <HAL_DMA_Init>
 8003036:	2800      	cmp	r0, #0
 8003038:	f040 808d 	bne.w	8003156 <HAL_SPI_MspInit+0x1ce>
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800303c:	4c50      	ldr	r4, [pc, #320]	; (8003180 <HAL_SPI_MspInit+0x1f8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800303e:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8003040:	4950      	ldr	r1, [pc, #320]	; (8003184 <HAL_SPI_MspInit+0x1fc>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003042:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003044:	6062      	str	r2, [r4, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003046:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800304a:	6021      	str	r1, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800304c:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800304e:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003050:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003054:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003056:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003058:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800305a:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800305c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003060:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003062:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003064:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003066:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003068:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800306a:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800306c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800306e:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8003070:	61e1      	str	r1, [r4, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003072:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003076:	f001 f8a9 	bl	80041cc <HAL_DMA_Init>
 800307a:	2800      	cmp	r0, #0
 800307c:	d168      	bne.n	8003150 <HAL_SPI_MspInit+0x1c8>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2102      	movs	r1, #2
 8003082:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003084:	67ac      	str	r4, [r5, #120]	; 0x78
 8003086:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8003088:	f000 ff0e 	bl	8003ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800308c:	2023      	movs	r0, #35	; 0x23
 800308e:	f000 ff49 	bl	8003f24 <HAL_NVIC_EnableIRQ>
}
 8003092:	b03b      	add	sp, #236	; 0xec
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003096:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800309a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800309c:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800309e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a2:	f004 fc11 	bl	80078c8 <HAL_RCCEx_PeriphCLKConfig>
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d158      	bne.n	800315c <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80030aa:	4b31      	ldr	r3, [pc, #196]	; (8003170 <HAL_SPI_MspInit+0x1e8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80030ae:	f44f 7130 	mov.w	r1, #704	; 0x2c0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2600      	movs	r6, #0
    __HAL_RCC_SPI5_CLK_ENABLE();
 80030b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80030b8:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030ba:	4833      	ldr	r0, [pc, #204]	; (8003188 <HAL_SPI_MspInit+0x200>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80030bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030c0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80030c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80030c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030cc:	9202      	str	r2, [sp, #8]
 80030ce:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80030d4:	f042 0220 	orr.w	r2, r2, #32
 80030d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80030dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e0:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030e2:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80030e8:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ea:	9303      	str	r3, [sp, #12]
 80030ec:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	e9cd 1404 	strd	r1, r4, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030f2:	a904      	add	r1, sp, #16
 80030f4:	f002 fd16 	bl	8005b24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030f8:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030fc:	4822      	ldr	r0, [pc, #136]	; (8003188 <HAL_SPI_MspInit+0x200>)
 80030fe:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003102:	9304      	str	r3, [sp, #16]
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8003104:	4c21      	ldr	r4, [pc, #132]	; (800318c <HAL_SPI_MspInit+0x204>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003106:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	e9cd 6606 	strd	r6, r6, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800310c:	f002 fd0a 	bl	8005b24 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8003110:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_SPI_MspInit+0x208>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8003112:	2355      	movs	r3, #85	; 0x55
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8003114:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003116:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8003118:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800311c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003120:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003124:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003128:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800312c:	6122      	str	r2, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800312e:	e9c4 6307 	strd	r6, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8003132:	f001 f84b 	bl	80041cc <HAL_DMA_Init>
 8003136:	b9a0      	cbnz	r0, 8003162 <HAL_SPI_MspInit+0x1da>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8003138:	2200      	movs	r2, #0
 800313a:	2104      	movs	r1, #4
 800313c:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800313e:	67ec      	str	r4, [r5, #124]	; 0x7c
 8003140:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8003142:	f000 feb1 	bl	8003ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8003146:	2055      	movs	r0, #85	; 0x55
 8003148:	f000 feec 	bl	8003f24 <HAL_NVIC_EnableIRQ>
}
 800314c:	b03b      	add	sp, #236	; 0xec
 800314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003150:	f7ff fd10 	bl	8002b74 <Error_Handler>
 8003154:	e793      	b.n	800307e <HAL_SPI_MspInit+0xf6>
      Error_Handler();
 8003156:	f7ff fd0d 	bl	8002b74 <Error_Handler>
 800315a:	e76f      	b.n	800303c <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 800315c:	f7ff fd0a 	bl	8002b74 <Error_Handler>
 8003160:	e7a3      	b.n	80030aa <HAL_SPI_MspInit+0x122>
      Error_Handler();
 8003162:	f7ff fd07 	bl	8002b74 <Error_Handler>
 8003166:	e7e7      	b.n	8003138 <HAL_SPI_MspInit+0x1b0>
 8003168:	40013000 	.word	0x40013000
 800316c:	40015000 	.word	0x40015000
 8003170:	58024400 	.word	0x58024400
 8003174:	2001c300 	.word	0x2001c300
 8003178:	58020000 	.word	0x58020000
 800317c:	40020070 	.word	0x40020070
 8003180:	2001c378 	.word	0x2001c378
 8003184:	40020088 	.word	0x40020088
 8003188:	58021400 	.word	0x58021400
 800318c:	2001c3f0 	.word	0x2001c3f0
 8003190:	40020058 	.word	0x40020058

08003194 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8003194:	e7fe      	b.n	8003194 <Default_Handler>
 8003196:	bf00      	nop

08003198 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8003198:	480f      	ldr	r0, [pc, #60]	; (80031d8 <Reset_Handler+0x40>)
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <Reset_Handler+0x44>)
 800319c:	4290      	cmp	r0, r2
 800319e:	d003      	beq.n	80031a8 <Reset_Handler+0x10>
		*pDest = *pSource;
 80031a0:	1a12      	subs	r2, r2, r0
 80031a2:	490f      	ldr	r1, [pc, #60]	; (80031e0 <Reset_Handler+0x48>)
 80031a4:	f015 fc8e 	bl	8018ac4 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 80031a8:	480e      	ldr	r0, [pc, #56]	; (80031e4 <Reset_Handler+0x4c>)
 80031aa:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <Reset_Handler+0x50>)
 80031ac:	4290      	cmp	r0, r2
 80031ae:	d003      	beq.n	80031b8 <Reset_Handler+0x20>
		*pDest = 0;
 80031b0:	1a12      	subs	r2, r2, r0
 80031b2:	2100      	movs	r1, #0
 80031b4:	f015 fc5a 	bl	8018a6c <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 80031b8:	480c      	ldr	r0, [pc, #48]	; (80031ec <Reset_Handler+0x54>)
 80031ba:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <Reset_Handler+0x58>)
 80031bc:	4290      	cmp	r0, r2
 80031be:	d003      	beq.n	80031c8 <Reset_Handler+0x30>
		*pDest = *pSource;
 80031c0:	1a12      	subs	r2, r2, r0
 80031c2:	490c      	ldr	r1, [pc, #48]	; (80031f4 <Reset_Handler+0x5c>)
 80031c4:	f015 fc7e 	bl	8018ac4 <memcpy>
	SystemInit();
 80031c8:	f000 fd6c 	bl	8003ca4 <SystemInit>
	__libc_init_array();
 80031cc:	f015 fc56 	bl	8018a7c <__libc_init_array>
	(void)main();
 80031d0:	f7fe ff9a 	bl	8002108 <main>
	for (;;) ;
 80031d4:	e7fe      	b.n	80031d4 <Reset_Handler+0x3c>
 80031d6:	bf00      	nop
 80031d8:	20000000 	.word	0x20000000
 80031dc:	200007c8 	.word	0x200007c8
 80031e0:	080276a0 	.word	0x080276a0
 80031e4:	200007c8 	.word	0x200007c8
 80031e8:	2001d920 	.word	0x2001d920
 80031ec:	00000400 	.word	0x00000400
 80031f0:	00009760 	.word	0x00009760
 80031f4:	08027e68 	.word	0x08027e68

080031f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_MspInit+0x20>)
{
 80031fa:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003200:	f042 0202 	orr.w	r2, r2, #2
 8003204:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003208:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003214:	b002      	add	sp, #8
 8003216:	4770      	bx	lr
 8003218:	58024400 	.word	0x58024400

0800321c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800321c:	e7fe      	b.n	800321c <NMI_Handler>
 800321e:	bf00      	nop

08003220 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <HardFault_Handler>
 8003222:	bf00      	nop

08003224 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003224:	e7fe      	b.n	8003224 <MemManage_Handler>
 8003226:	bf00      	nop

08003228 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003228:	e7fe      	b.n	8003228 <BusFault_Handler>
 800322a:	bf00      	nop

0800322c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800322c:	e7fe      	b.n	800322c <UsageFault_Handler>
 800322e:	bf00      	nop

08003230 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop

08003234 <DebugMon_Handler>:
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop

08003238 <PendSV_Handler>:
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800323c:	f000 bdee 	b.w	8003e1c <HAL_IncTick>

08003240 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003240:	4801      	ldr	r0, [pc, #4]	; (8003248 <DMA1_Stream1_IRQHandler+0x8>)
 8003242:	f002 b82f 	b.w	80052a4 <HAL_DMA_IRQHandler>
 8003246:	bf00      	nop
 8003248:	2001c064 	.word	0x2001c064

0800324c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800324c:	4801      	ldr	r0, [pc, #4]	; (8003254 <DMA1_Stream2_IRQHandler+0x8>)
 800324e:	f002 b829 	b.w	80052a4 <HAL_DMA_IRQHandler>
 8003252:	bf00      	nop
 8003254:	2001c0dc 	.word	0x2001c0dc

08003258 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8003258:	4801      	ldr	r0, [pc, #4]	; (8003260 <DMA1_Stream3_IRQHandler+0x8>)
 800325a:	f002 b823 	b.w	80052a4 <HAL_DMA_IRQHandler>
 800325e:	bf00      	nop
 8003260:	2001c3f0 	.word	0x2001c3f0

08003264 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003264:	4801      	ldr	r0, [pc, #4]	; (800326c <DMA1_Stream4_IRQHandler+0x8>)
 8003266:	f002 b81d 	b.w	80052a4 <HAL_DMA_IRQHandler>
 800326a:	bf00      	nop
 800326c:	2001c300 	.word	0x2001c300

08003270 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003270:	4801      	ldr	r0, [pc, #4]	; (8003278 <DMA1_Stream5_IRQHandler+0x8>)
 8003272:	f002 b817 	b.w	80052a4 <HAL_DMA_IRQHandler>
 8003276:	bf00      	nop
 8003278:	2001c378 	.word	0x2001c378

0800327c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800327c:	4801      	ldr	r0, [pc, #4]	; (8003284 <I2C2_EV_IRQHandler+0x8>)
 800327e:	f003 b88d 	b.w	800639c <HAL_I2C_EV_IRQHandler>
 8003282:	bf00      	nop
 8003284:	20013e68 	.word	0x20013e68

08003288 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003288:	4801      	ldr	r0, [pc, #4]	; (8003290 <I2C2_ER_IRQHandler+0x8>)
 800328a:	f003 b9ff 	b.w	800668c <HAL_I2C_ER_IRQHandler>
 800328e:	bf00      	nop
 8003290:	20013e68 	.word	0x20013e68

08003294 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <SPI1_IRQHandler+0x8>)
 8003296:	f007 be1d 	b.w	800aed4 <HAL_SPI_IRQHandler>
 800329a:	bf00      	nop
 800329c:	2001c468 	.word	0x2001c468

080032a0 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <SDMMC1_IRQHandler+0x8>)
 80032a2:	f006 bfb9 	b.w	800a218 <HAL_SD_IRQHandler>
 80032a6:	bf00      	nop
 80032a8:	2001c284 	.word	0x2001c284

080032ac <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80032ac:	4801      	ldr	r0, [pc, #4]	; (80032b4 <SPI5_IRQHandler+0x8>)
 80032ae:	f007 be11 	b.w	800aed4 <HAL_SPI_IRQHandler>
 80032b2:	bf00      	nop
 80032b4:	2001c4f0 	.word	0x2001c4f0

080032b8 <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
 80032b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032bc:	ed2d 8b0a 	vpush	{d8-d12}

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);

			freqMult[i][v] = 1.0f;
 80032c0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
{
 80032c4:	b087      	sub	sp, #28
 80032c6:	2600      	movs	r6, #0
 80032c8:	4be1      	ldr	r3, [pc, #900]	; (8003650 <audioInitSynth+0x398>)
 80032ca:	f8df b46c 	ldr.w	fp, [pc, #1132]	; 8003738 <audioInitSynth+0x480>
			tPBSaw_init(&saw[i][v], &leaf);
 80032ce:	4ce1      	ldr	r4, [pc, #900]	; (8003654 <audioInitSynth+0x39c>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
 80032d0:	ed9f 9ae1 	vldr	s18, [pc, #900]	; 8003658 <audioInitSynth+0x3a0>
 80032d4:	eddf bae1 	vldr	s23, [pc, #900]	; 800365c <audioInitSynth+0x3a4>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 80032d8:	ed9f bae1 	vldr	s22, [pc, #900]	; 8003660 <audioInitSynth+0x3a8>
		}


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80032dc:	ed9f aae1 	vldr	s20, [pc, #900]	; 8003664 <audioInitSynth+0x3ac>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80032e0:	e9cd 3602 	strd	r3, r6, [sp, #8]
		for(int i = 0; i < NUM_OSC; i++)
 80032e4:	4be0      	ldr	r3, [pc, #896]	; (8003668 <audioInitSynth+0x3b0>)
{
 80032e6:	4635      	mov	r5, r6
 80032e8:	f106 0818 	add.w	r8, r6, #24
			midiAdd[i][v] = 0.0f;
 80032ec:	f04f 0a00 	mov.w	sl, #0
 80032f0:	eb03 0906 	add.w	r9, r3, r6
 80032f4:	4bdd      	ldr	r3, [pc, #884]	; (800366c <audioInitSynth+0x3b4>)
 80032f6:	199f      	adds	r7, r3, r6
			tPBSaw_init(&saw[i][v], &leaf);
 80032f8:	4648      	mov	r0, r9
 80032fa:	4621      	mov	r1, r4
 80032fc:	f011 fa18 	bl	8014730 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
 8003300:	4638      	mov	r0, r7
 8003302:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 8003304:	f109 0908 	add.w	r9, r9, #8
			tPBPulse_init(&pulse[i][v], &leaf);
 8003308:	f011 f984 	bl	8014614 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 800330c:	4bd8      	ldr	r3, [pc, #864]	; (8003670 <audioInitSynth+0x3b8>)
 800330e:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 8003310:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
 8003312:	1958      	adds	r0, r3, r5
 8003314:	f010 ff0e 	bl	8014134 <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
 8003318:	4bd6      	ldr	r3, [pc, #856]	; (8003674 <audioInitSynth+0x3bc>)
 800331a:	4621      	mov	r1, r4
 800331c:	1958      	adds	r0, r3, r5
 800331e:	f010 ffa1 	bl	8014264 <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
 8003322:	4bd5      	ldr	r3, [pc, #852]	; (8003678 <audioInitSynth+0x3c0>)
 8003324:	4621      	mov	r1, r4
 8003326:	1958      	adds	r0, r3, r5
 8003328:	f011 fa52 	bl	80147d0 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
 800332c:	4bd3      	ldr	r3, [pc, #844]	; (800367c <audioInitSynth+0x3c4>)
 800332e:	4621      	mov	r1, r4
 8003330:	1958      	adds	r0, r3, r5
 8003332:	f011 f86d 	bl	8014410 <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
 8003336:	4bd2      	ldr	r3, [pc, #840]	; (8003680 <audioInitSynth+0x3c8>)
 8003338:	eef0 0a49 	vmov.f32	s1, s18
 800333c:	4621      	mov	r1, r4
 800333e:	1958      	adds	r0, r3, r5
 8003340:	eeb0 0a6b 	vmov.f32	s0, s23
 8003344:	f00d fba0 	bl	8010a88 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
 8003348:	4bce      	ldr	r3, [pc, #824]	; (8003684 <audioInitSynth+0x3cc>)
 800334a:	442b      	add	r3, r5
 800334c:	ed83 ca00 	vstr	s24, [r3]
			midiAdd[i][v] = 0.0f;
 8003350:	4bcd      	ldr	r3, [pc, #820]	; (8003688 <audioInitSynth+0x3d0>)
 8003352:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
 8003354:	3508      	adds	r5, #8
 8003356:	4545      	cmp	r5, r8
			midiAdd[i][v] = 0.0f;
 8003358:	f8c3 a000 	str.w	sl, [r3]
		for(int i = 0; i < NUM_OSC; i++)
 800335c:	d1cc      	bne.n	80032f8 <audioInitSynth+0x40>
 800335e:	4635      	mov	r5, r6
 8003360:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003364:	eddf 8ac9 	vldr	s17, [pc, #804]	; 800368c <audioInitSynth+0x3d4>
 8003368:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 8003690 <audioInitSynth+0x3d8>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800336c:	eddf 9ac9 	vldr	s19, [pc, #804]	; 8003694 <audioInitSynth+0x3dc>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003370:	4bc9      	ldr	r3, [pc, #804]	; (8003698 <audioInitSynth+0x3e0>)
 8003372:	eef0 0a68 	vmov.f32	s1, s17
 8003376:	eeb0 0a48 	vmov.f32	s0, s16
 800337a:	2101      	movs	r1, #1
 800337c:	1958      	adds	r0, r3, r5
 800337e:	4622      	mov	r2, r4
 8003380:	f00d fefc 	bl	801117c <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8003384:	4bc5      	ldr	r3, [pc, #788]	; (800369c <audioInitSynth+0x3e4>)
 8003386:	eef0 0a68 	vmov.f32	s1, s17
 800338a:	4622      	mov	r2, r4
 800338c:	1958      	adds	r0, r3, r5
 800338e:	eeb0 0a48 	vmov.f32	s0, s16
 8003392:	2100      	movs	r1, #0
 8003394:	f00d fef2 	bl	801117c <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8003398:	4bc1      	ldr	r3, [pc, #772]	; (80036a0 <audioInitSynth+0x3e8>)
 800339a:	4622      	mov	r2, r4
 800339c:	eef0 0a68 	vmov.f32	s1, s17
 80033a0:	1958      	adds	r0, r3, r5
 80033a2:	eeb0 0a48 	vmov.f32	s0, s16
 80033a6:	2102      	movs	r1, #2
 80033a8:	f00d fee8 	bl	801117c <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 80033ac:	4bbd      	ldr	r3, [pc, #756]	; (80036a4 <audioInitSynth+0x3ec>)
 80033ae:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80033b2:	4621      	mov	r1, r4
 80033b4:	1958      	adds	r0, r3, r5
 80033b6:	eeb0 0a48 	vmov.f32	s0, s16
 80033ba:	f00f fa91 	bl	80128e0 <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 80033be:	4bba      	ldr	r3, [pc, #744]	; (80036a8 <audioInitSynth+0x3f0>)
 80033c0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80033c4:	4621      	mov	r1, r4
 80033c6:	1958      	adds	r0, r3, r5
 80033c8:	eef0 0a4b 	vmov.f32	s1, s22
 80033cc:	eeb0 0a48 	vmov.f32	s0, s16
 80033d0:	f00f f8c8 	bl	8012564 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 80033d4:	4bb5      	ldr	r3, [pc, #724]	; (80036ac <audioInitSynth+0x3f4>)
 80033d6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80033da:	4621      	mov	r1, r4
 80033dc:	1958      	adds	r0, r3, r5
 80033de:	eef0 0a69 	vmov.f32	s1, s19
 80033e2:	eeb0 0a48 	vmov.f32	s0, s16
 80033e6:	f00e fdb3 	bl	8011f50 <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 80033ea:	4bb1      	ldr	r3, [pc, #708]	; (80036b0 <audioInitSynth+0x3f8>)
 80033ec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80033f0:	4621      	mov	r1, r4
 80033f2:	1958      	adds	r0, r3, r5
 80033f4:	eef0 0a69 	vmov.f32	s1, s19
 80033f8:	eeb0 0a48 	vmov.f32	s0, s16
 80033fc:	f00e ff1c 	bl	8012238 <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003400:	4bac      	ldr	r3, [pc, #688]	; (80036b4 <audioInitSynth+0x3fc>)
 8003402:	4622      	mov	r2, r4
 8003404:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003408:	1958      	adds	r0, r3, r5
 800340a:	eeb0 0a48 	vmov.f32	s0, s16
 800340e:	2104      	movs	r1, #4
 8003410:	f00e fb2e 	bl	8011a70 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 8003414:	4ba8      	ldr	r3, [pc, #672]	; (80036b8 <audioInitSynth+0x400>)
 8003416:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800341a:	4621      	mov	r1, r4
 800341c:	1958      	adds	r0, r3, r5
 800341e:	eeb0 0a48 	vmov.f32	s0, s16
 8003422:	f00f ff0d 	bl	8013240 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8003426:	4ba5      	ldr	r3, [pc, #660]	; (80036bc <audioInitSynth+0x404>)
 8003428:	eeb0 0a6b 	vmov.f32	s0, s23
 800342c:	4621      	mov	r1, r4
 800342e:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 8003430:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8003432:	eddf 0aa3 	vldr	s1, [pc, #652]	; 80036c0 <audioInitSynth+0x408>
 8003436:	f00d fb27 	bl	8010a88 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 800343a:	42bd      	cmp	r5, r7
 800343c:	d198      	bne.n	8003370 <audioInitSynth+0xb8>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 800343e:	4ba1      	ldr	r3, [pc, #644]	; (80036c4 <audioInitSynth+0x40c>)
 8003440:	2500      	movs	r5, #0
 8003442:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8003446:	4ba0      	ldr	r3, [pc, #640]	; (80036c8 <audioInitSynth+0x410>)
 8003448:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 800344a:	eb08 0005 	add.w	r0, r8, r5
 800344e:	4621      	mov	r1, r4
 8003450:	f011 fab4 	bl	80149bc <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8003454:	1978      	adds	r0, r7, r5
 8003456:	4621      	mov	r1, r4
 8003458:	f011 faf6 	bl	8014a48 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 800345c:	4b9b      	ldr	r3, [pc, #620]	; (80036cc <audioInitSynth+0x414>)
 800345e:	4621      	mov	r1, r4
 8003460:	1998      	adds	r0, r3, r6
 8003462:	4428      	add	r0, r5
 8003464:	f010 fe66 	bl	8014134 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 8003468:	4b99      	ldr	r3, [pc, #612]	; (80036d0 <audioInitSynth+0x418>)
 800346a:	4621      	mov	r1, r4
 800346c:	1998      	adds	r0, r3, r6
 800346e:	4428      	add	r0, r5
 8003470:	f011 fcdc 	bl	8014e2c <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 8003474:	4b97      	ldr	r3, [pc, #604]	; (80036d4 <audioInitSynth+0x41c>)
 8003476:	4621      	mov	r1, r4
 8003478:	1998      	adds	r0, r3, r6
 800347a:	4428      	add	r0, r5
 800347c:	f011 fd32 	bl	8014ee4 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8003480:	4b95      	ldr	r3, [pc, #596]	; (80036d8 <audioInitSynth+0x420>)
 8003482:	4621      	mov	r1, r4
 8003484:	1998      	adds	r0, r3, r6
 8003486:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 8003488:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 800348a:	f011 fc0b 	bl	8014ca4 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 800348e:	2d20      	cmp	r5, #32
 8003490:	d1db      	bne.n	800344a <audioInitSynth+0x192>
 8003492:	9f02      	ldr	r7, [sp, #8]
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8003494:	eddf 8a91 	vldr	s17, [pc, #580]	; 80036dc <audioInitSynth+0x424>
 8003498:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 800349c:	ed9f 8a90 	vldr	s16, [pc, #576]	; 80036e0 <audioInitSynth+0x428>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80034a0:	4628      	mov	r0, r5
 80034a2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80034a6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80034aa:	4623      	mov	r3, r4
 80034ac:	eef0 0a4a 	vmov.f32	s1, s20
 80034b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034b4:	eeb0 0a68 	vmov.f32	s0, s17
 80034b8:	498a      	ldr	r1, [pc, #552]	; (80036e4 <audioInitSynth+0x42c>)
 80034ba:	f00c ffd1 	bl	8010460 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80034be:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 80034c0:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80034c2:	eeb0 0a48 	vmov.f32	s0, s16
 80034c6:	f00d f879 	bl	80105bc <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 80034ca:	42bd      	cmp	r5, r7
 80034cc:	d1e8      	bne.n	80034a0 <audioInitSynth+0x1e8>
		}

		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
 80034ce:	4b86      	ldr	r3, [pc, #536]	; (80036e8 <audioInitSynth+0x430>)
 80034d0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80034d4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80034d8:	ed9f 0a84 	vldr	s0, [pc, #528]	; 80036ec <audioInitSynth+0x434>
 80034dc:	1998      	adds	r0, r3, r6
 80034de:	4621      	mov	r1, r4
 80034e0:	f00e fd36 	bl	8011f50 <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 80034e4:	4b82      	ldr	r3, [pc, #520]	; (80036f0 <audioInitSynth+0x438>)
 80034e6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80034ea:	4621      	mov	r1, r4
 80034ec:	1998      	adds	r0, r3, r6
 80034ee:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80034f2:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80036f4 <audioInitSynth+0x43c>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 80034f6:	4635      	mov	r5, r6
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 80034f8:	f00e fe9e 	bl	8012238 <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 80034fc:	4b7e      	ldr	r3, [pc, #504]	; (80036f8 <audioInitSynth+0x440>)
 80034fe:	4a7f      	ldr	r2, [pc, #508]	; (80036fc <audioInitSynth+0x444>)
 8003500:	eef0 0a4b 	vmov.f32	s1, s22
 8003504:	eb03 0a06 	add.w	sl, r3, r6
 8003508:	4b7d      	ldr	r3, [pc, #500]	; (8003700 <audioInitSynth+0x448>)
 800350a:	1990      	adds	r0, r2, r6
 800350c:	eeb0 0a4a 	vmov.f32	s0, s20
 8003510:	199f      	adds	r7, r3, r6
 8003512:	f106 0320 	add.w	r3, r6, #32
 8003516:	4621      	mov	r1, r4
 8003518:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8003704 <audioInitSynth+0x44c>
 800351c:	9304      	str	r3, [sp, #16]
 800351e:	f00f f821 	bl	8012564 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003522:	ed9f 8a79 	vldr	s16, [pc, #484]	; 8003708 <audioInitSynth+0x450>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003526:	9605      	str	r6, [sp, #20]

	        //tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003528:	eddf 9a58 	vldr	s19, [pc, #352]	; 800368c <audioInitSynth+0x3d4>
 800352c:	eddf 8a58 	vldr	s17, [pc, #352]	; 8003690 <audioInitSynth+0x3d8>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003530:	eddf aa58 	vldr	s21, [pc, #352]	; 8003694 <audioInitSynth+0x3dc>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003534:	9e04      	ldr	r6, [sp, #16]
			tCrusher_init(&bc[i][v],&leaf);
 8003536:	4650      	mov	r0, sl
 8003538:	4621      	mov	r1, r4
 800353a:	f00c fd73 	bl	8010024 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 800353e:	4b73      	ldr	r3, [pc, #460]	; (800370c <audioInitSynth+0x454>)
 8003540:	4621      	mov	r1, r4
 8003542:	4638      	mov	r0, r7
 8003544:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003548:	eb03 0905 	add.w	r9, r3, r5
 800354c:	f00e f802 	bl	8011554 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003550:	4638      	mov	r0, r7
 8003552:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 8003556:	f10a 0a08 	add.w	sl, sl, #8
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800355a:	f00e f85b 	bl	8011614 <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 800355e:	4b6c      	ldr	r3, [pc, #432]	; (8003710 <audioInitSynth+0x458>)
 8003560:	4621      	mov	r1, r4
 8003562:	4648      	mov	r0, r9
 8003564:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003568:	eb03 0805 	add.w	r8, r3, r5
 800356c:	f00d fff2 	bl	8011554 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003570:	4648      	mov	r0, r9
 8003572:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 8003576:	3708      	adds	r7, #8
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003578:	f00e f84c 	bl	8011614 <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
 800357c:	4b65      	ldr	r3, [pc, #404]	; (8003714 <audioInitSynth+0x45c>)
 800357e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003582:	4621      	mov	r1, r4
 8003584:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003588:	4640      	mov	r0, r8
 800358a:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80036ec <audioInitSynth+0x434>
 800358e:	eb03 0905 	add.w	r9, r3, r5
 8003592:	f00e fcdd 	bl	8011f50 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003596:	4640      	mov	r0, r8
 8003598:	eeb0 0a48 	vmov.f32	s0, s16
 800359c:	f00e fcdc 	bl	8011f58 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
 80035a0:	4b5d      	ldr	r3, [pc, #372]	; (8003718 <audioInitSynth+0x460>)
 80035a2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035a6:	4621      	mov	r1, r4
 80035a8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80035ac:	4648      	mov	r0, r9
 80035ae:	ed9f 0a51 	vldr	s0, [pc, #324]	; 80036f4 <audioInitSynth+0x43c>
 80035b2:	eb03 0805 	add.w	r8, r3, r5
 80035b6:	f00e fe3f 	bl	8012238 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 80035ba:	4648      	mov	r0, r9
 80035bc:	eeb0 0a48 	vmov.f32	s0, s16
 80035c0:	f00e fe3e 	bl	8012240 <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
 80035c4:	4b55      	ldr	r3, [pc, #340]	; (800371c <audioInitSynth+0x464>)
 80035c6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80035ca:	4621      	mov	r1, r4
 80035cc:	eb03 0905 	add.w	r9, r3, r5
 80035d0:	eef0 0a4b 	vmov.f32	s1, s22
 80035d4:	4640      	mov	r0, r8
 80035d6:	eeb0 0a4a 	vmov.f32	s0, s20
 80035da:	f00e ffc3 	bl	8012564 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80035de:	eeb0 0a48 	vmov.f32	s0, s16
 80035e2:	4640      	mov	r0, r8
 80035e4:	f00e ffc2 	bl	801256c <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 80035e8:	4648      	mov	r0, r9
 80035ea:	4621      	mov	r1, r4
 80035ec:	f00c fdd6 	bl	801019c <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
 80035f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035f4:	494a      	ldr	r1, [pc, #296]	; (8003720 <audioInitSynth+0x468>)
 80035f6:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 80035fa:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80035fe:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8003724 <audioInitSynth+0x46c>
 8003602:	4a49      	ldr	r2, [pc, #292]	; (8003728 <audioInitSynth+0x470>)
 8003604:	eb01 0805 	add.w	r8, r1, r5
 8003608:	4648      	mov	r0, r9
 800360a:	4948      	ldr	r1, [pc, #288]	; (800372c <audioInitSynth+0x474>)
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8003730 <audioInitSynth+0x478>
 8003612:	f00c fe6b 	bl	80102ec <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003616:	eeb0 0a48 	vmov.f32	s0, s16
 800361a:	4648      	mov	r0, r9
 800361c:	f00c fe8c 	bl	8010338 <tCompressor_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
 8003620:	4b44      	ldr	r3, [pc, #272]	; (8003734 <audioInitSynth+0x47c>)
 8003622:	4621      	mov	r1, r4
 8003624:	4640      	mov	r0, r8
 8003626:	eb03 0905 	add.w	r9, r3, r5
 800362a:	f010 fd83 	bl	8014134 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800362e:	eeb0 0a48 	vmov.f32	s0, s16
 8003632:	4640      	mov	r0, r8
 8003634:	f010 fdfe 	bl	8014234 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
 8003638:	4621      	mov	r1, r4
 800363a:	4648      	mov	r0, r9
 800363c:	f010 fd7a 	bl	8014134 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003640:	4648      	mov	r0, r9
 8003642:	eeb0 0a48 	vmov.f32	s0, s16
 8003646:	f010 fdf5 	bl	8014234 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 800364a:	4640      	mov	r0, r8
 800364c:	e07a      	b.n	8003744 <audioInitSynth+0x48c>
 800364e:	bf00      	nop
 8003650:	2001c968 	.word	0x2001c968
 8003654:	20004e5c 	.word	0x20004e5c
 8003658:	3ba3d70a 	.word	0x3ba3d70a
 800365c:	42800000 	.word	0x42800000
 8003660:	3ff33333 	.word	0x3ff33333
 8003664:	447a0000 	.word	0x447a0000
 8003668:	2001ce94 	.word	0x2001ce94
 800366c:	2001ce78 	.word	0x2001ce78
 8003670:	2001cf50 	.word	0x2001cf50
 8003674:	2001d100 	.word	0x2001d100
 8003678:	2001ceac 	.word	0x2001ceac
 800367c:	2001cf68 	.word	0x2001cf68
 8003680:	2001ce3c 	.word	0x2001ce3c
 8003684:	2001c9c0 	.word	0x2001c9c0
 8003688:	2001ccac 	.word	0x2001ccac
 800368c:	3f333333 	.word	0x3f333333
 8003690:	44fa0000 	.word	0x44fa0000
 8003694:	3f19999a 	.word	0x3f19999a
 8003698:	2001cb9c 	.word	0x2001cb9c
 800369c:	2001ca18 	.word	0x2001ca18
 80036a0:	2001c70c 	.word	0x2001c70c
 80036a4:	2001c924 	.word	0x2001c924
 80036a8:	2001c6f4 	.word	0x2001c6f4
 80036ac:	2001c6e4 	.word	0x2001c6e4
 80036b0:	2001c6d4 	.word	0x2001c6d4
 80036b4:	2001c6c4 	.word	0x2001c6c4
 80036b8:	2001c6b4 	.word	0x2001c6b4
 80036bc:	2001c988 	.word	0x2001c988
 80036c0:	3c23d70a 	.word	0x3c23d70a
 80036c4:	2001caec 	.word	0x2001caec
 80036c8:	2001cacc 	.word	0x2001cacc
 80036cc:	2001cb3c 	.word	0x2001cb3c
 80036d0:	2001cb7c 	.word	0x2001cb7c
 80036d4:	2001cb5c 	.word	0x2001cb5c
 80036d8:	2001cb0c 	.word	0x2001cb0c
 80036dc:	3dcccccd 	.word	0x3dcccccd
 80036e0:	3f7fffac 	.word	0x3f7fffac
 80036e4:	20000dc8 	.word	0x20000dc8
 80036e8:	2001cd20 	.word	0x2001cd20
 80036ec:	42a00000 	.word	0x42a00000
 80036f0:	2001cd28 	.word	0x2001cd28
 80036f4:	463b8000 	.word	0x463b8000
 80036f8:	2001c71c 	.word	0x2001c71c
 80036fc:	2001cd04 	.word	0x2001cd04
 8003700:	2001c77c 	.word	0x2001c77c
 8003704:	3f8b851f 	.word	0x3f8b851f
 8003708:	47bb8000 	.word	0x47bb8000
 800370c:	2001c79c 	.word	0x2001c79c
 8003710:	2001cf10 	.word	0x2001cf10
 8003714:	2001cf30 	.word	0x2001cf30
 8003718:	2001c73c 	.word	0x2001c73c
 800371c:	2001c75c 	.word	0x2001c75c
 8003720:	2001ccc4 	.word	0x2001ccc4
 8003724:	c2b40000 	.word	0xc2b40000
 8003728:	30002000 	.word	0x30002000
 800372c:	30012000 	.word	0x30012000
 8003730:	3727c5ac 	.word	0x3727c5ac
 8003734:	2001cce4 	.word	0x2001cce4
 8003738:	2001ccac 	.word	0x2001ccac
 800373c:	3e4ccccd 	.word	0x3e4ccccd
 8003740:	3e638e39 	.word	0x3e638e39
 8003744:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 800373c <audioInitSynth+0x484>
 8003748:	f010 fd56 	bl	80141f8 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 800374c:	4648      	mov	r0, r9
 800374e:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 8003740 <audioInitSynth+0x488>
 8003752:	f010 fd51 	bl	80141f8 <tCycle_setFreq>
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
 8003756:	4b78      	ldr	r3, [pc, #480]	; (8003938 <audioInitSynth+0x680>)
 8003758:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 800375c:	4622      	mov	r2, r4
 800375e:	eb03 0805 	add.w	r8, r3, r5
 8003762:	4b76      	ldr	r3, [pc, #472]	; (800393c <audioInitSynth+0x684>)
 8003764:	eddf 0a76 	vldr	s1, [pc, #472]	; 8003940 <audioInitSynth+0x688>
 8003768:	2100      	movs	r1, #0
 800376a:	1958      	adds	r0, r3, r5
 800376c:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003944 <audioInitSynth+0x68c>
 8003770:	f00c fde6 	bl	8010340 <tFeedbackLeveler_init>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003774:	4b74      	ldr	r3, [pc, #464]	; (8003948 <audioInitSynth+0x690>)
 8003776:	eef0 0a69 	vmov.f32	s1, s19
 800377a:	4622      	mov	r2, r4
 800377c:	2101      	movs	r1, #1
 800377e:	4640      	mov	r0, r8
 8003780:	eeb0 0a68 	vmov.f32	s0, s17
 8003784:	eb03 0905 	add.w	r9, r3, r5
 8003788:	f00d fcf8 	bl	801117c <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 800378c:	4640      	mov	r0, r8
 800378e:	eeb0 0a48 	vmov.f32	s0, s16
 8003792:	f00d fed5 	bl	8011540 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <audioInitSynth+0x694>)
 8003798:	eef0 0a69 	vmov.f32	s1, s19
 800379c:	4622      	mov	r2, r4
 800379e:	2100      	movs	r1, #0
 80037a0:	4648      	mov	r0, r9
 80037a2:	eeb0 0a68 	vmov.f32	s0, s17
 80037a6:	eb03 0805 	add.w	r8, r3, r5
 80037aa:	f00d fce7 	bl	801117c <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80037ae:	4648      	mov	r0, r9
 80037b0:	eeb0 0a48 	vmov.f32	s0, s16
 80037b4:	f00d fec4 	bl	8011540 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80037b8:	4b65      	ldr	r3, [pc, #404]	; (8003950 <audioInitSynth+0x698>)
 80037ba:	4622      	mov	r2, r4
 80037bc:	eef0 0a69 	vmov.f32	s1, s19
 80037c0:	2102      	movs	r1, #2
 80037c2:	4640      	mov	r0, r8
 80037c4:	eeb0 0a68 	vmov.f32	s0, s17
 80037c8:	eb03 0905 	add.w	r9, r3, r5
 80037cc:	f00d fcd6 	bl	801117c <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80037d0:	4640      	mov	r0, r8
 80037d2:	eeb0 0a48 	vmov.f32	s0, s16
 80037d6:	f00d feb3 	bl	8011540 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 80037da:	4b5e      	ldr	r3, [pc, #376]	; (8003954 <audioInitSynth+0x69c>)
 80037dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80037e0:	4621      	mov	r1, r4
 80037e2:	4648      	mov	r0, r9
 80037e4:	eeb0 0a68 	vmov.f32	s0, s17
 80037e8:	eb03 0805 	add.w	r8, r3, r5
 80037ec:	f00f f878 	bl	80128e0 <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
 80037f0:	4648      	mov	r0, r9
 80037f2:	eeb0 0a48 	vmov.f32	s0, s16
 80037f6:	f00f fd09 	bl	801320c <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
 80037fa:	4b57      	ldr	r3, [pc, #348]	; (8003958 <audioInitSynth+0x6a0>)
 80037fc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003800:	eddf 0a56 	vldr	s1, [pc, #344]	; 800395c <audioInitSynth+0x6a4>
 8003804:	4621      	mov	r1, r4
 8003806:	4640      	mov	r0, r8
 8003808:	eeb0 0a68 	vmov.f32	s0, s17
 800380c:	eb03 0905 	add.w	r9, r3, r5
 8003810:	f00e fea8 	bl	8012564 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003814:	4640      	mov	r0, r8
 8003816:	eeb0 0a48 	vmov.f32	s0, s16
 800381a:	f00e fea7 	bl	801256c <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800381e:	4b50      	ldr	r3, [pc, #320]	; (8003960 <audioInitSynth+0x6a8>)
 8003820:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003824:	4621      	mov	r1, r4
 8003826:	eef0 0a6a 	vmov.f32	s1, s21
 800382a:	4648      	mov	r0, r9
 800382c:	eeb0 0a68 	vmov.f32	s0, s17
 8003830:	eb03 0805 	add.w	r8, r3, r5
 8003834:	f00e fb8c 	bl	8011f50 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003838:	4648      	mov	r0, r9
 800383a:	eeb0 0a48 	vmov.f32	s0, s16
 800383e:	f00e fb8b 	bl	8011f58 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003842:	4b48      	ldr	r3, [pc, #288]	; (8003964 <audioInitSynth+0x6ac>)
 8003844:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003848:	4621      	mov	r1, r4
 800384a:	eef0 0a6a 	vmov.f32	s1, s21
 800384e:	4640      	mov	r0, r8
 8003850:	eeb0 0a68 	vmov.f32	s0, s17
 8003854:	eb03 0905 	add.w	r9, r3, r5
 8003858:	f00e fcee 	bl	8012238 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
 800385c:	4640      	mov	r0, r8
 800385e:	eeb0 0a48 	vmov.f32	s0, s16
 8003862:	f00e fced 	bl	8012240 <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003866:	4b40      	ldr	r3, [pc, #256]	; (8003968 <audioInitSynth+0x6b0>)
 8003868:	4622      	mov	r2, r4
 800386a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800386e:	eb03 0805 	add.w	r8, r3, r5
 8003872:	2104      	movs	r1, #4
 8003874:	eeb0 0a68 	vmov.f32	s0, s17
 8003878:	4648      	mov	r0, r9
 800387a:	f00e f8f9 	bl	8011a70 <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 800387e:	eeb0 0a48 	vmov.f32	s0, s16
 8003882:	4648      	mov	r0, r9
		for (int i = 0; i < NUM_EFFECT; i++)
 8003884:	3508      	adds	r5, #8
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003886:	f00e fab1 	bl	8011dec <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 800388a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800388e:	eeb0 0a68 	vmov.f32	s0, s17
 8003892:	4621      	mov	r1, r4
 8003894:	4640      	mov	r0, r8
 8003896:	f00f fcd3 	bl	8013240 <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
 800389a:	eeb0 0a48 	vmov.f32	s0, s16
 800389e:	4640      	mov	r0, r8
 80038a0:	f00f fe96 	bl	80135d0 <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
 80038a4:	42ae      	cmp	r6, r5
 80038a6:	f47f ae46 	bne.w	8003536 <audioInitSynth+0x27e>
 80038aa:	9e05      	ldr	r6, [sp, #20]
 80038ac:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 80038b0:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 800396c <audioInitSynth+0x6b4>
 80038b4:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80038b6:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 80038b8:	eef0 0a49 	vmov.f32	s1, s18
 80038bc:	4621      	mov	r1, r4
 80038be:	eeb0 0a48 	vmov.f32	s0, s16
 80038c2:	f00d f8e1 	bl	8010a88 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80038c6:	45ab      	cmp	fp, r5
 80038c8:	d1f4      	bne.n	80038b4 <audioInitSynth+0x5fc>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80038ca:	9b02      	ldr	r3, [sp, #8]
 80038cc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
		}

		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 80038d0:	4a27      	ldr	r2, [pc, #156]	; (8003970 <audioInitSynth+0x6b8>)
 80038d2:	2501      	movs	r5, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80038d4:	3304      	adds	r3, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 80038d6:	4827      	ldr	r0, [pc, #156]	; (8003974 <audioInitSynth+0x6bc>)
 80038d8:	2102      	movs	r1, #2
 80038da:	9501      	str	r5, [sp, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80038dc:	9302      	str	r3, [sp, #8]
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 80038de:	4438      	add	r0, r7
 80038e0:	9b03      	ldr	r3, [sp, #12]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80038e2:	f10b 0b04 	add.w	fp, fp, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 80038e6:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 80038ea:	2220      	movs	r2, #32
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	4b22      	ldr	r3, [pc, #136]	; (8003978 <audioInitSynth+0x6c0>)
 80038f0:	f014 fbbc 	bl	801806c <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
 80038f4:	4a21      	ldr	r2, [pc, #132]	; (800397c <audioInitSynth+0x6c4>)
 80038f6:	eb06 1346 	add.w	r3, r6, r6, lsl #5
 80038fa:	2120      	movs	r1, #32
 80038fc:	19d0      	adds	r0, r2, r7
 80038fe:	4a20      	ldr	r2, [pc, #128]	; (8003980 <audioInitSynth+0x6c8>)
 8003900:	4413      	add	r3, r2
 8003902:	2202      	movs	r2, #2
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	9201      	str	r2, [sp, #4]
 8003908:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <audioInitSynth+0x6c0>)
 800390a:	f014 fdeb 	bl	80184e4 <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 800390e:	491d      	ldr	r1, [pc, #116]	; (8003984 <audioInitSynth+0x6cc>)
 8003910:	4622      	mov	r2, r4
 8003912:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003988 <audioInitSynth+0x6d0>
 8003916:	1988      	adds	r0, r1, r6
 8003918:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 800398c <audioInitSynth+0x6d4>
 800391c:	4629      	mov	r1, r5
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800391e:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003920:	f00d fc2c 	bl	801117c <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003924:	9b03      	ldr	r3, [sp, #12]
 8003926:	b90b      	cbnz	r3, 800392c <audioInitSynth+0x674>
 8003928:	9503      	str	r5, [sp, #12]
 800392a:	e4db      	b.n	80032e4 <audioInitSynth+0x2c>
	}

}
 800392c:	b007      	add	sp, #28
 800392e:	ecbd 8b0a 	vpop	{d8-d12}
 8003932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003936:	bf00      	nop
 8003938:	2001c694 	.word	0x2001c694
 800393c:	2001c968 	.word	0x2001c968
 8003940:	3c23d70a 	.word	0x3c23d70a
 8003944:	3f7d70a4 	.word	0x3f7d70a4
 8003948:	2001c674 	.word	0x2001c674
 800394c:	2001c634 	.word	0x2001c634
 8003950:	2001c654 	.word	0x2001c654
 8003954:	2001c614 	.word	0x2001c614
 8003958:	2001c5f4 	.word	0x2001c5f4
 800395c:	3fcccccd 	.word	0x3fcccccd
 8003960:	2001c5d4 	.word	0x2001c5d4
 8003964:	2001c5b4 	.word	0x2001c5b4
 8003968:	2001c594 	.word	0x2001c594
 800396c:	00000000 	.word	0x00000000
 8003970:	2001ca28 	.word	0x2001ca28
 8003974:	2001cd48 	.word	0x2001cd48
 8003978:	080239a8 	.word	0x080239a8
 800397c:	2001cd30 	.word	0x2001cd30
 8003980:	2001c7bc 	.word	0x2001c7bc
 8003984:	2001c9b0 	.word	0x2001c9b0
 8003988:	3e99999a 	.word	0x3e99999a
 800398c:	46947000 	.word	0x46947000

08003990 <changeOversampling>:



void changeOversampling(uint32_t newOS)
{
	if (newOS != prevOversample)
 8003990:	4b8f      	ldr	r3, [pc, #572]	; (8003bd0 <changeOversampling+0x240>)
{
 8003992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003996:	ed2d 8b02 	vpush	{d8}
	if (newOS != prevOversample)
 800399a:	681b      	ldr	r3, [r3, #0]
{
 800399c:	b089      	sub	sp, #36	; 0x24
	if (newOS != prevOversample)
 800399e:	4283      	cmp	r3, r0
{
 80039a0:	9007      	str	r0, [sp, #28]
	if (newOS != prevOversample)
 80039a2:	f000 810c 	beq.w	8003bbe <changeOversampling+0x22e>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
		for (int v = 0; v < numStringsThisBoard; v++)
 80039a6:	4b8b      	ldr	r3, [pc, #556]	; (8003bd4 <changeOversampling+0x244>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8107 	beq.w	8003bbe <changeOversampling+0x22e>
 80039b0:	4603      	mov	r3, r0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 80039b2:	eddf 7a89 	vldr	s15, [pc, #548]	; 8003bd8 <changeOversampling+0x248>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 80039b6:	2200      	movs	r2, #0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 80039b8:	3301      	adds	r3, #1
		for (int v = 0; v < numStringsThisBoard; v++)
 80039ba:	9205      	str	r2, [sp, #20]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 80039bc:	ee07 3a10 	vmov	s14, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 80039c0:	2320      	movs	r3, #32
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 80039c2:	eeb8 8a47 	vcvt.f32.u32	s16, s14
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 80039c6:	9304      	str	r3, [sp, #16]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 80039c8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80039cc:	eebc 8ac8 	vcvt.u32.f32	s16, s16
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 80039d0:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80039d4:	4b81      	ldr	r3, [pc, #516]	; (8003bdc <changeOversampling+0x24c>)
		for (int v = 0; v < numStringsThisBoard; v++)
 80039d6:	4614      	mov	r4, r2
 80039d8:	9904      	ldr	r1, [sp, #16]
 80039da:	9206      	str	r2, [sp, #24]
 80039dc:	eb03 0a01 	add.w	sl, r3, r1
 80039e0:	4b7f      	ldr	r3, [pc, #508]	; (8003be0 <changeOversampling+0x250>)
 80039e2:	eb03 0902 	add.w	r9, r3, r2
 80039e6:	4b7f      	ldr	r3, [pc, #508]	; (8003be4 <changeOversampling+0x254>)
 80039e8:	eb03 0802 	add.w	r8, r3, r2
 80039ec:	4b7e      	ldr	r3, [pc, #504]	; (8003be8 <changeOversampling+0x258>)
 80039ee:	189f      	adds	r7, r3, r2
 80039f0:	4b7e      	ldr	r3, [pc, #504]	; (8003bec <changeOversampling+0x25c>)
 80039f2:	189e      	adds	r6, r3, r2
 80039f4:	4b7e      	ldr	r3, [pc, #504]	; (8003bf0 <changeOversampling+0x260>)
 80039f6:	189d      	adds	r5, r3, r2
 80039f8:	4b7e      	ldr	r3, [pc, #504]	; (8003bf4 <changeOversampling+0x264>)
 80039fa:	4413      	add	r3, r2
 80039fc:	469b      	mov	fp, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 80039fe:	4b7e      	ldr	r3, [pc, #504]	; (8003bf8 <changeOversampling+0x268>)
 8003a00:	eeb0 0a48 	vmov.f32	s0, s16
 8003a04:	1918      	adds	r0, r3, r4
 8003a06:	f00d fe05 	bl	8011614 <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
 8003a0a:	4b7c      	ldr	r3, [pc, #496]	; (8003bfc <changeOversampling+0x26c>)
 8003a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a10:	1918      	adds	r0, r3, r4
 8003a12:	f00d fdff 	bl	8011614 <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
 8003a16:	4650      	mov	r0, sl
 8003a18:	eeb0 0a48 	vmov.f32	s0, s16
 8003a1c:	f00e fa9c 	bl	8011f58 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 8003a20:	f8da 3000 	ldr.w	r3, [sl]
 8003a24:	4650      	mov	r0, sl
			for (int i = 0; i < NUM_EFFECT; i++)
 8003a26:	f10a 0a08 	add.w	sl, sl, #8
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 8003a2a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003a2e:	f00e fae1 	bl	8011ff4 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
 8003a32:	4648      	mov	r0, r9
 8003a34:	eeb0 0a48 	vmov.f32	s0, s16
 8003a38:	f00e fc02 	bl	8012240 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 8003a3c:	f8d9 3000 	ldr.w	r3, [r9]
 8003a40:	4648      	mov	r0, r9
			for (int i = 0; i < NUM_EFFECT; i++)
 8003a42:	f109 0908 	add.w	r9, r9, #8
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 8003a46:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003a4a:	f00e fc47 	bl	80122dc <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
 8003a4e:	4640      	mov	r0, r8
 8003a50:	eeb0 0a48 	vmov.f32	s0, s16
 8003a54:	f00e fd8a 	bl	801256c <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8003a58:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5c:	4640      	mov	r0, r8
			for (int i = 0; i < NUM_EFFECT; i++)
 8003a5e:	f108 0808 	add.w	r8, r8, #8
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8003a62:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003a66:	f00e fe73 	bl	8012750 <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
 8003a6a:	4b65      	ldr	r3, [pc, #404]	; (8003c00 <changeOversampling+0x270>)
 8003a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a70:	1918      	adds	r0, r3, r4
 8003a72:	f00c fc61 	bl	8010338 <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
 8003a76:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <changeOversampling+0x274>)
 8003a78:	eeb0 0a48 	vmov.f32	s0, s16
 8003a7c:	1918      	adds	r0, r3, r4
 8003a7e:	f010 fbd9 	bl	8014234 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
 8003a82:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <changeOversampling+0x278>)
 8003a84:	eeb0 0a48 	vmov.f32	s0, s16
 8003a88:	1918      	adds	r0, r3, r4
 8003a8a:	f010 fbd3 	bl	8014234 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
 8003a8e:	4638      	mov	r0, r7
 8003a90:	eeb0 0a48 	vmov.f32	s0, s16
 8003a94:	f00d fd54 	bl	8011540 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	4638      	mov	r0, r7
			for (int i = 0; i < NUM_EFFECT; i++)
 8003a9c:	3708      	adds	r7, #8
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 8003a9e:	ed93 0a04 	vldr	s0, [r3, #16]
 8003aa2:	f00d fced 	bl	8011480 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	eeb0 0a48 	vmov.f32	s0, s16
 8003aac:	f00d fd48 	bl	8011540 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 8003ab0:	6833      	ldr	r3, [r6, #0]
 8003ab2:	4630      	mov	r0, r6
			for (int i = 0; i < NUM_EFFECT; i++)
 8003ab4:	3608      	adds	r6, #8
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 8003ab6:	ed93 0a04 	vldr	s0, [r3, #16]
 8003aba:	f00d fce1 	bl	8011480 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
 8003abe:	4628      	mov	r0, r5
 8003ac0:	eeb0 0a48 	vmov.f32	s0, s16
 8003ac4:	f00d fd3c 	bl	8011540 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	4628      	mov	r0, r5
			for (int i = 0; i < NUM_EFFECT; i++)
 8003acc:	3508      	adds	r5, #8
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8003ace:	ed93 0a04 	vldr	s0, [r3, #16]
 8003ad2:	f00d fcd5 	bl	8011480 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
 8003ad6:	4658      	mov	r0, fp
 8003ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8003adc:	f00f fb96 	bl	801320c <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 8003ae0:	f8db 3000 	ldr.w	r3, [fp]
 8003ae4:	4658      	mov	r0, fp
			for (int i = 0; i < NUM_EFFECT; i++)
 8003ae6:	f10b 0b08 	add.w	fp, fp, #8
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 8003aea:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <changeOversampling+0x27c>)
 8003af0:	4423      	add	r3, r4
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	f00f fb8a 	bl	801320c <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
 8003af8:	9b00      	ldr	r3, [sp, #0]
 8003afa:	eeb0 0a48 	vmov.f32	s0, s16
 8003afe:	4618      	mov	r0, r3
 8003b00:	f00e fd34 	bl	801256c <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
 8003b04:	9b00      	ldr	r3, [sp, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <changeOversampling+0x27c>)
 8003b0a:	591b      	ldr	r3, [r3, r4]
 8003b0c:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003b10:	f00e fe1e 	bl	8012750 <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
 8003b14:	4a3e      	ldr	r2, [pc, #248]	; (8003c10 <changeOversampling+0x280>)
 8003b16:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <changeOversampling+0x284>)
 8003b18:	eeb0 0a48 	vmov.f32	s0, s16
 8003b1c:	1911      	adds	r1, r2, r4
 8003b1e:	1918      	adds	r0, r3, r4
 8003b20:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <changeOversampling+0x288>)
 8003b22:	9103      	str	r1, [sp, #12]
 8003b24:	493d      	ldr	r1, [pc, #244]	; (8003c1c <changeOversampling+0x28c>)
 8003b26:	4423      	add	r3, r4
 8003b28:	190a      	adds	r2, r1, r4
 8003b2a:	e9cd 0300 	strd	r0, r3, [sp]
 8003b2e:	9202      	str	r2, [sp, #8]
 8003b30:	f00e fa12 	bl	8011f58 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
 8003b34:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <changeOversampling+0x284>)
 8003b36:	9800      	ldr	r0, [sp, #0]
 8003b38:	591b      	ldr	r3, [r3, r4]
 8003b3a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003b3e:	f00e fa59 	bl	8011ff4 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
 8003b42:	9903      	ldr	r1, [sp, #12]
 8003b44:	eeb0 0a48 	vmov.f32	s0, s16
 8003b48:	4608      	mov	r0, r1
 8003b4a:	9100      	str	r1, [sp, #0]
 8003b4c:	f00e fb78 	bl	8012240 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
 8003b50:	9900      	ldr	r1, [sp, #0]
 8003b52:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <changeOversampling+0x280>)
 8003b54:	4608      	mov	r0, r1
 8003b56:	5911      	ldr	r1, [r2, r4]
 8003b58:	ed91 0a11 	vldr	s0, [r1, #68]	; 0x44
 8003b5c:	f00e fbbe 	bl	80122dc <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
 8003b60:	9a02      	ldr	r2, [sp, #8]
 8003b62:	eeb0 0a48 	vmov.f32	s0, s16
 8003b66:	4610      	mov	r0, r2
 8003b68:	9200      	str	r2, [sp, #0]
 8003b6a:	f00e f93f 	bl	8011dec <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
 8003b6e:	492b      	ldr	r1, [pc, #172]	; (8003c1c <changeOversampling+0x28c>)
 8003b70:	9a00      	ldr	r2, [sp, #0]
 8003b72:	4610      	mov	r0, r2
 8003b74:	590a      	ldr	r2, [r1, r4]
 8003b76:	ed92 0a0a 	vldr	s0, [r2, #40]	; 0x28
 8003b7a:	f00d ff7d 	bl	8011a78 <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
 8003b7e:	9b01      	ldr	r3, [sp, #4]
 8003b80:	eeb0 0a48 	vmov.f32	s0, s16
 8003b84:	4618      	mov	r0, r3
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f00f fd22 	bl	80135d0 <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 8003b8c:	9b00      	ldr	r3, [sp, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <changeOversampling+0x288>)
 8003b92:	591b      	ldr	r3, [r3, r4]
			for (int i = 0; i < NUM_EFFECT; i++)
 8003b94:	3408      	adds	r4, #8
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 8003b96:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003b9a:	f00f fcd7 	bl	801354c <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
 8003b9e:	9b04      	ldr	r3, [sp, #16]
 8003ba0:	429c      	cmp	r4, r3
 8003ba2:	f47f af2c 	bne.w	80039fe <changeOversampling+0x6e>
		for (int v = 0; v < numStringsThisBoard; v++)
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8003bac:	9304      	str	r3, [sp, #16]
 8003bae:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <changeOversampling+0x244>)
 8003bb0:	3101      	adds	r1, #1
 8003bb2:	3204      	adds	r2, #4
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	9105      	str	r1, [sp, #20]
 8003bb8:	428b      	cmp	r3, r1
 8003bba:	f73f af0b 	bgt.w	80039d4 <changeOversampling+0x44>
			}
		}
	}
	prevOversample = newOS;
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <changeOversampling+0x240>)
 8003bc0:	9a07      	ldr	r2, [sp, #28]
 8003bc2:	601a      	str	r2, [r3, #0]
}
 8003bc4:	b009      	add	sp, #36	; 0x24
 8003bc6:	ecbd 8b02 	vpop	{d8}
 8003bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bce:	bf00      	nop
 8003bd0:	2001ce74 	.word	0x2001ce74
 8003bd4:	200004b1 	.word	0x200004b1
 8003bd8:	473b8000 	.word	0x473b8000
 8003bdc:	2001cef0 	.word	0x2001cef0
 8003be0:	2001cf30 	.word	0x2001cf30
 8003be4:	2001c73c 	.word	0x2001c73c
 8003be8:	2001c694 	.word	0x2001c694
 8003bec:	2001c674 	.word	0x2001c674
 8003bf0:	2001c634 	.word	0x2001c634
 8003bf4:	2001c654 	.word	0x2001c654
 8003bf8:	2001c77c 	.word	0x2001c77c
 8003bfc:	2001c79c 	.word	0x2001c79c
 8003c00:	2001c75c 	.word	0x2001c75c
 8003c04:	2001ccc4 	.word	0x2001ccc4
 8003c08:	2001cce4 	.word	0x2001cce4
 8003c0c:	2001c614 	.word	0x2001c614
 8003c10:	2001c5d4 	.word	0x2001c5d4
 8003c14:	2001c5f4 	.word	0x2001c5f4
 8003c18:	2001c594 	.word	0x2001c594
 8003c1c:	2001c5b4 	.word	0x2001c5b4

08003c20 <delayTick>:
{
	param5[v][string] = (value * 1.5f) + 1.0f;
}

float delayTick(float sample, int v, int string)
{
 8003c20:	b538      	push	{r3, r4, r5, lr}
    sample *= param5[v][string];
 8003c22:	eb01 0140 	add.w	r1, r1, r0, lsl #1

    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003c26:	4d18      	ldr	r5, [pc, #96]	; (8003c88 <delayTick+0x68>)
 8003c28:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <delayTick+0x6c>)
 8003c2a:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    sample *= param5[v][string];
 8003c2e:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <delayTick+0x70>)
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003c30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003c34:	edd5 7a00 	vldr	s15, [r5]
    sample *= param5[v][string];
 8003c38:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003c3c:	ed92 7a00 	vldr	s14, [r2]
    sample *= param5[v][string];
 8003c40:	008c      	lsls	r4, r1, #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c46:	ed93 7a00 	vldr	s14, [r3]

    sample = fast_tanh5(sample);
 8003c4a:	eee7 7a00 	vfma.f32	s15, s14, s0
 8003c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c52:	f00f fe7f 	bl	8013954 <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
 8003c56:	480f      	ldr	r0, [pc, #60]	; (8003c94 <delayTick+0x74>)
 8003c58:	4420      	add	r0, r4
 8003c5a:	f00c fbd9 	bl	8010410 <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 8003c5e:	480e      	ldr	r0, [pc, #56]	; (8003c98 <delayTick+0x78>)
 8003c60:	4420      	add	r0, r4
 8003c62:	f00c f953 	bl	800ff0c <tTapeDelay_tick>
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003c66:	480d      	ldr	r0, [pc, #52]	; (8003c9c <delayTick+0x7c>)
    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 8003c68:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003c6c:	4420      	add	r0, r4
 8003c6e:	f00d fb99 	bl	80113a4 <tSVF_tick>
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 8003c72:	480b      	ldr	r0, [pc, #44]	; (8003ca0 <delayTick+0x80>)
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003c74:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 8003c78:	4420      	add	r0, r4
 8003c7a:	f00d fb93 	bl	80113a4 <tSVF_tick>
    sample = fast_tanh5(sample);
 8003c7e:	f00f fe69 	bl	8013954 <fast_tanh5>
    delayFB[v][string] = sample;
 8003c82:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
 8003c88:	2001c904 	.word	0x2001c904
 8003c8c:	2001cdbc 	.word	0x2001cdbc
 8003c90:	2001ce1c 	.word	0x2001ce1c
 8003c94:	2001c968 	.word	0x2001c968
 8003c98:	2001d0b0 	.word	0x2001d0b0
 8003c9c:	2001c694 	.word	0x2001c694
 8003ca0:	2001c674 	.word	0x2001c674

08003ca4 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ca4:	4927      	ldr	r1, [pc, #156]	; (8003d44 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ca6:	4a28      	ldr	r2, [pc, #160]	; (8003d48 <SystemInit+0xa4>)
{
 8003ca8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003caa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003cae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	f003 030f 	and.w	r3, r3, #15
 8003cbc:	2b06      	cmp	r3, #6
 8003cbe:	d805      	bhi.n	8003ccc <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cc0:	6813      	ldr	r3, [r2, #0]
 8003cc2:	f023 030f 	bic.w	r3, r3, #15
 8003cc6:	f043 0307 	orr.w	r3, r3, #7
 8003cca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003ccc:	4b1f      	ldr	r3, [pc, #124]	; (8003d4c <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cce:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003cd2:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cd4:	481c      	ldr	r0, [pc, #112]	; (8003d48 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8003cd6:	f041 0101 	orr.w	r1, r1, #1
 8003cda:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003cdc:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ce4:	6803      	ldr	r3, [r0, #0]
 8003ce6:	071b      	lsls	r3, r3, #28
 8003ce8:	d505      	bpl.n	8003cf6 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cea:	6803      	ldr	r3, [r0, #0]
 8003cec:	f023 030f 	bic.w	r3, r3, #15
 8003cf0:	f043 0307 	orr.w	r3, r3, #7
 8003cf4:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <SystemInit+0xa8>)
 8003cf8:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003cfa:	4916      	ldr	r1, [pc, #88]	; (8003d54 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8003cfc:	4c16      	ldr	r4, [pc, #88]	; (8003d58 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8003cfe:	4817      	ldr	r0, [pc, #92]	; (8003d5c <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8003d00:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003d02:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003d04:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8003d06:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8003d08:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8003d0a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d0e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d10:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d12:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d16:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d18:	4c11      	ldr	r4, [pc, #68]	; (8003d60 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8003d1a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d1e:	4911      	ldr	r1, [pc, #68]	; (8003d64 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8003d20:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	4019      	ands	r1, r3
 8003d28:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003d2c:	d203      	bcs.n	8003d36 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <SystemInit+0xc4>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <SystemInit+0xc8>)
 8003d38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	e000ed00 	.word	0xe000ed00
 8003d48:	52002000 	.word	0x52002000
 8003d4c:	58024400 	.word	0x58024400
 8003d50:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d54:	01010280 	.word	0x01010280
 8003d58:	02020200 	.word	0x02020200
 8003d5c:	01ff0000 	.word	0x01ff0000
 8003d60:	5c001000 	.word	0x5c001000
 8003d64:	ffff0000 	.word	0xffff0000
 8003d68:	51008000 	.word	0x51008000
 8003d6c:	52004000 	.word	0x52004000

08003d70 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_InitTick+0x40>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b90b      	cbnz	r3, 8003d7a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003d76:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003d78:	4770      	bx	lr
{
 8003d7a:	b510      	push	{r4, lr}
 8003d7c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d82:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <HAL_InitTick+0x44>)
 8003d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d88:	6810      	ldr	r0, [r2, #0]
 8003d8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d8e:	f000 f8d7 	bl	8003f40 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d92:	2c0f      	cmp	r4, #15
 8003d94:	d800      	bhi.n	8003d98 <HAL_InitTick+0x28>
 8003d96:	b108      	cbz	r0, 8003d9c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003d98:	2001      	movs	r0, #1
}
 8003d9a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4621      	mov	r1, r4
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003da4:	f000 f880 	bl	8003ea8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_InitTick+0x48>)
 8003daa:	2000      	movs	r0, #0
 8003dac:	601c      	str	r4, [r3, #0]
}
 8003dae:	bd10      	pop	{r4, pc}
 8003db0:	20000760 	.word	0x20000760
 8003db4:	20000754 	.word	0x20000754
 8003db8:	20000764 	.word	0x20000764

08003dbc <HAL_Init>:
{
 8003dbc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dbe:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dc0:	4c12      	ldr	r4, [pc, #72]	; (8003e0c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc2:	f000 f85f 	bl	8003e84 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dc6:	f003 fa2d 	bl	8007224 <HAL_RCC_GetSysClockFreq>
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <HAL_Init+0x54>)
 8003dcc:	4911      	ldr	r1, [pc, #68]	; (8003e14 <HAL_Init+0x58>)
 8003dce:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dd0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dd2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dd6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dda:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ddc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003dde:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8003de2:	490d      	ldr	r1, [pc, #52]	; (8003e18 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003de4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003de8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dea:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003dee:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003df0:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003df2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003df4:	f7ff ffbc 	bl	8003d70 <HAL_InitTick>
 8003df8:	b110      	cbz	r0, 8003e00 <HAL_Init+0x44>
    return HAL_ERROR;
 8003dfa:	2401      	movs	r4, #1
}
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	bd10      	pop	{r4, pc}
 8003e00:	4604      	mov	r4, r0
  HAL_MspInit();
 8003e02:	f7ff f9f9 	bl	80031f8 <HAL_MspInit>
}
 8003e06:	4620      	mov	r0, r4
 8003e08:	bd10      	pop	{r4, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000758 	.word	0x20000758
 8003e10:	58024400 	.word	0x58024400
 8003e14:	0801b528 	.word	0x0801b528
 8003e18:	20000754 	.word	0x20000754

08003e1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003e1c:	4a03      	ldr	r2, [pc, #12]	; (8003e2c <HAL_IncTick+0x10>)
 8003e1e:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <HAL_IncTick+0x14>)
 8003e20:	6811      	ldr	r1, [r2, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	440b      	add	r3, r1
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	2001d144 	.word	0x2001d144
 8003e30:	20000760 	.word	0x20000760

08003e34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003e34:	4b01      	ldr	r3, [pc, #4]	; (8003e3c <HAL_GetTick+0x8>)
 8003e36:	6818      	ldr	r0, [r3, #0]
}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	2001d144 	.word	0x2001d144

08003e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7ff fff6 	bl	8003e34 <HAL_GetTick>
 8003e48:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e4a:	1c63      	adds	r3, r4, #1
 8003e4c:	d002      	beq.n	8003e54 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e4e:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <HAL_Delay+0x20>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e54:	f7ff ffee 	bl	8003e34 <HAL_GetTick>
 8003e58:	1b43      	subs	r3, r0, r5
 8003e5a:	42a3      	cmp	r3, r4
 8003e5c:	d3fa      	bcc.n	8003e54 <HAL_Delay+0x14>
  {
  }
}
 8003e5e:	bd38      	pop	{r3, r4, r5, pc}
 8003e60:	20000760 	.word	0x20000760

08003e64 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003e64:	4b01      	ldr	r3, [pc, #4]	; (8003e6c <HAL_GetREVID+0x8>)
 8003e66:	6818      	ldr	r0, [r3, #0]
}
 8003e68:	0c00      	lsrs	r0, r0, #16
 8003e6a:	4770      	bx	lr
 8003e6c:	5c001000 	.word	0x5c001000

08003e70 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8003e70:	4a03      	ldr	r2, [pc, #12]	; (8003e80 <HAL_SetFMCMemorySwappingConfig+0x10>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003e78:	4318      	orrs	r0, r3
 8003e7a:	6010      	str	r0, [r2, #0]
}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	52004000 	.word	0x52004000

08003e84 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e84:	4906      	ldr	r1, [pc, #24]	; (8003ea0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e86:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e8a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e8e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e90:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e94:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e98:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003e9a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003e9c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e9e:	4770      	bx	lr
 8003ea0:	e000ed00 	.word	0xe000ed00
 8003ea4:	05fa0000 	.word	0x05fa0000

08003ea8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eaa:	b500      	push	{lr}
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eba:	f1be 0f04 	cmp.w	lr, #4
 8003ebe:	bf28      	it	cs
 8003ec0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec4:	f1bc 0f06 	cmp.w	ip, #6
 8003ec8:	d91a      	bls.n	8003f00 <HAL_NVIC_SetPriority+0x58>
 8003eca:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ecc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003ed0:	fa0c fc03 	lsl.w	ip, ip, r3
 8003ed4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8003edc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ede:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003ee2:	ea21 010c 	bic.w	r1, r1, ip
 8003ee6:	fa01 f103 	lsl.w	r1, r1, r3
 8003eea:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003eee:	db0a      	blt.n	8003f06 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef0:	0109      	lsls	r1, r1, #4
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_NVIC_SetPriority+0x74>)
 8003ef4:	b2c9      	uxtb	r1, r1
 8003ef6:	4403      	add	r3, r0
 8003ef8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f00:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f02:	4613      	mov	r3, r2
 8003f04:	e7e8      	b.n	8003ed8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f06:	f000 000f 	and.w	r0, r0, #15
 8003f0a:	0109      	lsls	r1, r1, #4
 8003f0c:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <HAL_NVIC_SetPriority+0x78>)
 8003f0e:	b2c9      	uxtb	r1, r1
 8003f10:	4403      	add	r3, r0
 8003f12:	7619      	strb	r1, [r3, #24]
 8003f14:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f18:	e000ed00 	.word	0xe000ed00
 8003f1c:	e000e100 	.word	0xe000e100
 8003f20:	e000ecfc 	.word	0xe000ecfc

08003f24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003f24:	2800      	cmp	r0, #0
 8003f26:	db07      	blt.n	8003f38 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f28:	2301      	movs	r3, #1
 8003f2a:	f000 011f 	and.w	r1, r0, #31
 8003f2e:	4a03      	ldr	r2, [pc, #12]	; (8003f3c <HAL_NVIC_EnableIRQ+0x18>)
 8003f30:	0940      	lsrs	r0, r0, #5
 8003f32:	408b      	lsls	r3, r1
 8003f34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f40:	1e43      	subs	r3, r0, #1
 8003f42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f46:	d20c      	bcs.n	8003f62 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f48:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f4c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4e:	4906      	ldr	r1, [pc, #24]	; (8003f68 <HAL_SYSTICK_Config+0x28>)
 8003f50:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f54:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f56:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f58:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f5c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f5e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f60:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003f62:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003f6c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003f72:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8003f7c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_MPU_Enable+0x1c>)
 8003f8a:	f040 0001 	orr.w	r0, r0, #1
 8003f8e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003f9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003f9e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003fa2:	4770      	bx	lr
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003fa8:	7843      	ldrb	r3, [r0, #1]
 8003faa:	4a16      	ldr	r2, [pc, #88]	; (8004004 <HAL_MPU_ConfigRegion+0x5c>)
 8003fac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8003fb0:	7803      	ldrb	r3, [r0, #0]
 8003fb2:	b313      	cbz	r3, 8003ffa <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003fb4:	6843      	ldr	r3, [r0, #4]
 8003fb6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003fba:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fbc:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003fc0:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003fc2:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003fc4:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003fc8:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003fcc:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003fce:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003fd0:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003fd4:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003fd8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003fdc:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003fde:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003fe2:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003fea:	7a01      	ldrb	r1, [r0, #8]
 8003fec:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003ff0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ff4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003ff8:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8003ffa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8003ffe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 8004002:	4770      	bx	lr
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <DMA_CalcBaseAndBitshift+0xd0>)
{
 800400a:	4601      	mov	r1, r0
 800400c:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800400e:	4e33      	ldr	r6, [pc, #204]	; (80040dc <DMA_CalcBaseAndBitshift+0xd4>)
 8004010:	6802      	ldr	r2, [r0, #0]
 8004012:	4d33      	ldr	r5, [pc, #204]	; (80040e0 <DMA_CalcBaseAndBitshift+0xd8>)
 8004014:	42b2      	cmp	r2, r6
 8004016:	bf18      	it	ne
 8004018:	429a      	cmpne	r2, r3
 800401a:	4c32      	ldr	r4, [pc, #200]	; (80040e4 <DMA_CalcBaseAndBitshift+0xdc>)
 800401c:	4832      	ldr	r0, [pc, #200]	; (80040e8 <DMA_CalcBaseAndBitshift+0xe0>)
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	42aa      	cmp	r2, r5
 8004026:	bf08      	it	eq
 8004028:	f043 0301 	orreq.w	r3, r3, #1
 800402c:	42a2      	cmp	r2, r4
 800402e:	bf08      	it	eq
 8004030:	f043 0301 	orreq.w	r3, r3, #1
 8004034:	3430      	adds	r4, #48	; 0x30
 8004036:	4282      	cmp	r2, r0
 8004038:	bf08      	it	eq
 800403a:	f043 0301 	orreq.w	r3, r3, #1
 800403e:	3030      	adds	r0, #48	; 0x30
 8004040:	42a2      	cmp	r2, r4
 8004042:	bf08      	it	eq
 8004044:	f043 0301 	orreq.w	r3, r3, #1
 8004048:	3430      	adds	r4, #48	; 0x30
 800404a:	4282      	cmp	r2, r0
 800404c:	bf08      	it	eq
 800404e:	f043 0301 	orreq.w	r3, r3, #1
 8004052:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004056:	42a2      	cmp	r2, r4
 8004058:	bf08      	it	eq
 800405a:	f043 0301 	orreq.w	r3, r3, #1
 800405e:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8004062:	4282      	cmp	r2, r0
 8004064:	bf08      	it	eq
 8004066:	f043 0301 	orreq.w	r3, r3, #1
 800406a:	3030      	adds	r0, #48	; 0x30
 800406c:	42a2      	cmp	r2, r4
 800406e:	bf08      	it	eq
 8004070:	f043 0301 	orreq.w	r3, r3, #1
 8004074:	3430      	adds	r4, #48	; 0x30
 8004076:	4282      	cmp	r2, r0
 8004078:	bf08      	it	eq
 800407a:	f043 0301 	orreq.w	r3, r3, #1
 800407e:	3030      	adds	r0, #48	; 0x30
 8004080:	42a2      	cmp	r2, r4
 8004082:	bf08      	it	eq
 8004084:	f043 0301 	orreq.w	r3, r3, #1
 8004088:	3430      	adds	r4, #48	; 0x30
 800408a:	4282      	cmp	r2, r0
 800408c:	bf08      	it	eq
 800408e:	f043 0301 	orreq.w	r3, r3, #1
 8004092:	3030      	adds	r0, #48	; 0x30
 8004094:	42a2      	cmp	r2, r4
 8004096:	bf08      	it	eq
 8004098:	f043 0301 	orreq.w	r3, r3, #1
 800409c:	4282      	cmp	r2, r0
 800409e:	bf08      	it	eq
 80040a0:	f043 0301 	orreq.w	r3, r3, #1
 80040a4:	b913      	cbnz	r3, 80040ac <DMA_CalcBaseAndBitshift+0xa4>
 80040a6:	4b11      	ldr	r3, [pc, #68]	; (80040ec <DMA_CalcBaseAndBitshift+0xe4>)
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d112      	bne.n	80040d2 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040ac:	b2d3      	uxtb	r3, r2
 80040ae:	4810      	ldr	r0, [pc, #64]	; (80040f0 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040b0:	4c10      	ldr	r4, [pc, #64]	; (80040f4 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040b2:	3b10      	subs	r3, #16
 80040b4:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 80040b8:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040ba:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040be:	5c20      	ldrb	r0, [r4, r0]
 80040c0:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040c2:	480d      	ldr	r0, [pc, #52]	; (80040f8 <DMA_CalcBaseAndBitshift+0xf0>)
 80040c4:	ea00 0002 	and.w	r0, r0, r2
 80040c8:	bf88      	it	hi
 80040ca:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040cc:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80040ce:	bc70      	pop	{r4, r5, r6}
 80040d0:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040d2:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80040d6:	e7f9      	b.n	80040cc <DMA_CalcBaseAndBitshift+0xc4>
 80040d8:	40020010 	.word	0x40020010
 80040dc:	40020028 	.word	0x40020028
 80040e0:	40020040 	.word	0x40020040
 80040e4:	40020058 	.word	0x40020058
 80040e8:	40020070 	.word	0x40020070
 80040ec:	400204b8 	.word	0x400204b8
 80040f0:	aaaaaaab 	.word	0xaaaaaaab
 80040f4:	0801b538 	.word	0x0801b538
 80040f8:	fffffc00 	.word	0xfffffc00

080040fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040fc:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040fe:	4a27      	ldr	r2, [pc, #156]	; (800419c <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8004100:	4927      	ldr	r1, [pc, #156]	; (80041a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 8004102:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004104:	4d27      	ldr	r5, [pc, #156]	; (80041a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004106:	4c28      	ldr	r4, [pc, #160]	; (80041a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8004108:	42ab      	cmp	r3, r5
 800410a:	bf18      	it	ne
 800410c:	4293      	cmpne	r3, r2
 800410e:	bf0c      	ite	eq
 8004110:	2201      	moveq	r2, #1
 8004112:	2200      	movne	r2, #0
 8004114:	428b      	cmp	r3, r1
 8004116:	bf08      	it	eq
 8004118:	f042 0201 	orreq.w	r2, r2, #1
 800411c:	3128      	adds	r1, #40	; 0x28
 800411e:	42a3      	cmp	r3, r4
 8004120:	bf08      	it	eq
 8004122:	f042 0201 	orreq.w	r2, r2, #1
 8004126:	3428      	adds	r4, #40	; 0x28
 8004128:	428b      	cmp	r3, r1
 800412a:	bf08      	it	eq
 800412c:	f042 0201 	orreq.w	r2, r2, #1
 8004130:	3128      	adds	r1, #40	; 0x28
 8004132:	42a3      	cmp	r3, r4
 8004134:	bf08      	it	eq
 8004136:	f042 0201 	orreq.w	r2, r2, #1
 800413a:	428b      	cmp	r3, r1
 800413c:	bf08      	it	eq
 800413e:	f042 0201 	orreq.w	r2, r2, #1
 8004142:	b912      	cbnz	r2, 800414a <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d113      	bne.n	8004172 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800414a:	b2db      	uxtb	r3, r3
 800414c:	4918      	ldr	r1, [pc, #96]	; (80041b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800414e:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004150:	3b08      	subs	r3, #8
 8004152:	4c19      	ldr	r4, [pc, #100]	; (80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8004154:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004158:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800415a:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800415e:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004162:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004164:	fa01 f303 	lsl.w	r3, r1, r3
 8004168:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800416a:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800416e:	bc30      	pop	{r4, r5}
 8004170:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004172:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004174:	4a11      	ldr	r2, [pc, #68]	; (80041bc <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004176:	4c12      	ldr	r4, [pc, #72]	; (80041c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8004178:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800417a:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800417c:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004180:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004182:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004186:	d800      	bhi.n	800418a <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8004188:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800418a:	4a0e      	ldr	r2, [pc, #56]	; (80041c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800418c:	f001 041f 	and.w	r4, r1, #31
 8004190:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004192:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004194:	40a3      	lsls	r3, r4
 8004196:	4c0c      	ldr	r4, [pc, #48]	; (80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004198:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800419a:	e7e5      	b.n	8004168 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 800419c:	58025408 	.word	0x58025408
 80041a0:	58025430 	.word	0x58025430
 80041a4:	5802541c 	.word	0x5802541c
 80041a8:	58025444 	.word	0x58025444
 80041ac:	58025494 	.word	0x58025494
 80041b0:	cccccccd 	.word	0xcccccccd
 80041b4:	16009600 	.word	0x16009600
 80041b8:	58025880 	.word	0x58025880
 80041bc:	bffdfbf0 	.word	0xbffdfbf0
 80041c0:	aaaaaaab 	.word	0xaaaaaaab
 80041c4:	10008200 	.word	0x10008200
 80041c8:	40020880 	.word	0x40020880

080041cc <HAL_DMA_Init>:
{
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80041d0:	f7ff fe30 	bl	8003e34 <HAL_GetTick>
  if(hdma == NULL)
 80041d4:	2c00      	cmp	r4, #0
 80041d6:	f000 816a 	beq.w	80044ae <HAL_DMA_Init+0x2e2>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	4605      	mov	r5, r0
 80041de:	4ba3      	ldr	r3, [pc, #652]	; (800446c <HAL_DMA_Init+0x2a0>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d048      	beq.n	8004276 <HAL_DMA_Init+0xaa>
 80041e4:	3318      	adds	r3, #24
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d045      	beq.n	8004276 <HAL_DMA_Init+0xaa>
 80041ea:	3330      	adds	r3, #48	; 0x30
 80041ec:	49a0      	ldr	r1, [pc, #640]	; (8004470 <HAL_DMA_Init+0x2a4>)
 80041ee:	428a      	cmp	r2, r1
 80041f0:	bf18      	it	ne
 80041f2:	429a      	cmpne	r2, r3
 80041f4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80041f8:	bf0c      	ite	eq
 80041fa:	2301      	moveq	r3, #1
 80041fc:	2300      	movne	r3, #0
 80041fe:	428a      	cmp	r2, r1
 8004200:	bf08      	it	eq
 8004202:	f043 0301 	orreq.w	r3, r3, #1
 8004206:	3118      	adds	r1, #24
 8004208:	428a      	cmp	r2, r1
 800420a:	bf08      	it	eq
 800420c:	f043 0301 	orreq.w	r3, r3, #1
 8004210:	3118      	adds	r1, #24
 8004212:	428a      	cmp	r2, r1
 8004214:	bf08      	it	eq
 8004216:	f043 0301 	orreq.w	r3, r3, #1
 800421a:	3118      	adds	r1, #24
 800421c:	428a      	cmp	r2, r1
 800421e:	bf08      	it	eq
 8004220:	f043 0301 	orreq.w	r3, r3, #1
 8004224:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004228:	428a      	cmp	r2, r1
 800422a:	bf08      	it	eq
 800422c:	f043 0301 	orreq.w	r3, r3, #1
 8004230:	3118      	adds	r1, #24
 8004232:	428a      	cmp	r2, r1
 8004234:	bf08      	it	eq
 8004236:	f043 0301 	orreq.w	r3, r3, #1
 800423a:	3118      	adds	r1, #24
 800423c:	428a      	cmp	r2, r1
 800423e:	bf08      	it	eq
 8004240:	f043 0301 	orreq.w	r3, r3, #1
 8004244:	3118      	adds	r1, #24
 8004246:	428a      	cmp	r2, r1
 8004248:	bf08      	it	eq
 800424a:	f043 0301 	orreq.w	r3, r3, #1
 800424e:	3118      	adds	r1, #24
 8004250:	428a      	cmp	r2, r1
 8004252:	bf08      	it	eq
 8004254:	f043 0301 	orreq.w	r3, r3, #1
 8004258:	3118      	adds	r1, #24
 800425a:	428a      	cmp	r2, r1
 800425c:	bf08      	it	eq
 800425e:	f043 0301 	orreq.w	r3, r3, #1
 8004262:	3118      	adds	r1, #24
 8004264:	428a      	cmp	r2, r1
 8004266:	bf08      	it	eq
 8004268:	f043 0301 	orreq.w	r3, r3, #1
 800426c:	b91b      	cbnz	r3, 8004276 <HAL_DMA_Init+0xaa>
 800426e:	4b81      	ldr	r3, [pc, #516]	; (8004474 <HAL_DMA_Init+0x2a8>)
 8004270:	429a      	cmp	r2, r3
 8004272:	f040 8184 	bne.w	800457e <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004276:	2302      	movs	r3, #2
 8004278:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800427c:	2300      	movs	r3, #0
 800427e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8004282:	6813      	ldr	r3, [r2, #0]
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e005      	b.n	8004298 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800428c:	f7ff fdd2 	bl	8003e34 <HAL_GetTick>
 8004290:	1b43      	subs	r3, r0, r5
 8004292:	2b05      	cmp	r3, #5
 8004294:	f200 80fe 	bhi.w	8004494 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	07d0      	lsls	r0, r2, #31
 800429e:	d4f5      	bmi.n	800428c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 80042a0:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042a4:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 80042a6:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042a8:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ac:	430a      	orrs	r2, r1
 80042ae:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042b0:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b2:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042b6:	69a1      	ldr	r1, [r4, #24]
 80042b8:	ea42 0201 	orr.w	r2, r2, r1
 80042bc:	69e1      	ldr	r1, [r4, #28]
 80042be:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80042c2:	6a21      	ldr	r1, [r4, #32]
 80042c4:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042c8:	496b      	ldr	r1, [pc, #428]	; (8004478 <HAL_DMA_Init+0x2ac>)
 80042ca:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 80042ce:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042d2:	d103      	bne.n	80042dc <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042d4:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 80042d8:	4301      	orrs	r1, r0
 80042da:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80042dc:	4867      	ldr	r0, [pc, #412]	; (800447c <HAL_DMA_Init+0x2b0>)
 80042de:	4968      	ldr	r1, [pc, #416]	; (8004480 <HAL_DMA_Init+0x2b4>)
 80042e0:	6800      	ldr	r0, [r0, #0]
 80042e2:	4001      	ands	r1, r0
 80042e4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80042e8:	d30a      	bcc.n	8004300 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80042ea:	6861      	ldr	r1, [r4, #4]
 80042ec:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 80042f0:	281f      	cmp	r0, #31
 80042f2:	f240 80d6 	bls.w	80044a2 <HAL_DMA_Init+0x2d6>
 80042f6:	394f      	subs	r1, #79	; 0x4f
 80042f8:	2903      	cmp	r1, #3
 80042fa:	d801      	bhi.n	8004300 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 80042fc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004300:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004302:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8004304:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004306:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004308:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800430a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800430e:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004312:	d10e      	bne.n	8004332 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004314:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8004318:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800431a:	b150      	cbz	r0, 8004332 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800431c:	69a5      	ldr	r5, [r4, #24]
 800431e:	2d00      	cmp	r5, #0
 8004320:	f040 8107 	bne.w	8004532 <HAL_DMA_Init+0x366>
    switch (hdma->Init.FIFOThreshold)
 8004324:	2a01      	cmp	r2, #1
 8004326:	f000 8125 	beq.w	8004574 <HAL_DMA_Init+0x3a8>
 800432a:	f032 0202 	bics.w	r2, r2, #2
 800432e:	f000 8108 	beq.w	8004542 <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004332:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004334:	4620      	mov	r0, r4
 8004336:	f7ff fe67 	bl	8004008 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800433a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800433c:	233f      	movs	r3, #63	; 0x3f
 800433e:	f002 021f 	and.w	r2, r2, #31
 8004342:	4093      	lsls	r3, r2
 8004344:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	4b48      	ldr	r3, [pc, #288]	; (800446c <HAL_DMA_Init+0x2a0>)
 800434a:	484e      	ldr	r0, [pc, #312]	; (8004484 <HAL_DMA_Init+0x2b8>)
 800434c:	4948      	ldr	r1, [pc, #288]	; (8004470 <HAL_DMA_Init+0x2a4>)
 800434e:	4282      	cmp	r2, r0
 8004350:	bf18      	it	ne
 8004352:	429a      	cmpne	r2, r3
 8004354:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004358:	bf0c      	ite	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	2300      	movne	r3, #0
 800435e:	428a      	cmp	r2, r1
 8004360:	bf08      	it	eq
 8004362:	f043 0301 	orreq.w	r3, r3, #1
 8004366:	3130      	adds	r1, #48	; 0x30
 8004368:	4282      	cmp	r2, r0
 800436a:	bf08      	it	eq
 800436c:	f043 0301 	orreq.w	r3, r3, #1
 8004370:	3030      	adds	r0, #48	; 0x30
 8004372:	428a      	cmp	r2, r1
 8004374:	bf08      	it	eq
 8004376:	f043 0301 	orreq.w	r3, r3, #1
 800437a:	3130      	adds	r1, #48	; 0x30
 800437c:	4282      	cmp	r2, r0
 800437e:	bf08      	it	eq
 8004380:	f043 0301 	orreq.w	r3, r3, #1
 8004384:	3030      	adds	r0, #48	; 0x30
 8004386:	428a      	cmp	r2, r1
 8004388:	bf08      	it	eq
 800438a:	f043 0301 	orreq.w	r3, r3, #1
 800438e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004392:	4282      	cmp	r2, r0
 8004394:	bf08      	it	eq
 8004396:	f043 0301 	orreq.w	r3, r3, #1
 800439a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800439e:	428a      	cmp	r2, r1
 80043a0:	bf08      	it	eq
 80043a2:	f043 0301 	orreq.w	r3, r3, #1
 80043a6:	3130      	adds	r1, #48	; 0x30
 80043a8:	4282      	cmp	r2, r0
 80043aa:	bf08      	it	eq
 80043ac:	f043 0301 	orreq.w	r3, r3, #1
 80043b0:	3030      	adds	r0, #48	; 0x30
 80043b2:	428a      	cmp	r2, r1
 80043b4:	bf08      	it	eq
 80043b6:	f043 0301 	orreq.w	r3, r3, #1
 80043ba:	3130      	adds	r1, #48	; 0x30
 80043bc:	4282      	cmp	r2, r0
 80043be:	bf08      	it	eq
 80043c0:	f043 0301 	orreq.w	r3, r3, #1
 80043c4:	3030      	adds	r0, #48	; 0x30
 80043c6:	428a      	cmp	r2, r1
 80043c8:	bf08      	it	eq
 80043ca:	f043 0301 	orreq.w	r3, r3, #1
 80043ce:	3130      	adds	r1, #48	; 0x30
 80043d0:	4282      	cmp	r2, r0
 80043d2:	bf08      	it	eq
 80043d4:	f043 0301 	orreq.w	r3, r3, #1
 80043d8:	3030      	adds	r0, #48	; 0x30
 80043da:	428a      	cmp	r2, r1
 80043dc:	bf08      	it	eq
 80043de:	f043 0301 	orreq.w	r3, r3, #1
 80043e2:	4929      	ldr	r1, [pc, #164]	; (8004488 <HAL_DMA_Init+0x2bc>)
 80043e4:	4282      	cmp	r2, r0
 80043e6:	bf08      	it	eq
 80043e8:	f043 0301 	orreq.w	r3, r3, #1
 80043ec:	4827      	ldr	r0, [pc, #156]	; (800448c <HAL_DMA_Init+0x2c0>)
 80043ee:	428a      	cmp	r2, r1
 80043f0:	bf08      	it	eq
 80043f2:	f043 0301 	orreq.w	r3, r3, #1
 80043f6:	3128      	adds	r1, #40	; 0x28
 80043f8:	4282      	cmp	r2, r0
 80043fa:	bf08      	it	eq
 80043fc:	f043 0301 	orreq.w	r3, r3, #1
 8004400:	3028      	adds	r0, #40	; 0x28
 8004402:	428a      	cmp	r2, r1
 8004404:	bf08      	it	eq
 8004406:	f043 0301 	orreq.w	r3, r3, #1
 800440a:	3128      	adds	r1, #40	; 0x28
 800440c:	4282      	cmp	r2, r0
 800440e:	bf08      	it	eq
 8004410:	f043 0301 	orreq.w	r3, r3, #1
 8004414:	3028      	adds	r0, #40	; 0x28
 8004416:	428a      	cmp	r2, r1
 8004418:	bf08      	it	eq
 800441a:	f043 0301 	orreq.w	r3, r3, #1
 800441e:	3128      	adds	r1, #40	; 0x28
 8004420:	4282      	cmp	r2, r0
 8004422:	bf08      	it	eq
 8004424:	f043 0301 	orreq.w	r3, r3, #1
 8004428:	428a      	cmp	r2, r1
 800442a:	bf08      	it	eq
 800442c:	f043 0301 	orreq.w	r3, r3, #1
 8004430:	b913      	cbnz	r3, 8004438 <HAL_DMA_Init+0x26c>
 8004432:	4b17      	ldr	r3, [pc, #92]	; (8004490 <HAL_DMA_Init+0x2c4>)
 8004434:	429a      	cmp	r2, r3
 8004436:	d113      	bne.n	8004460 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004438:	4620      	mov	r0, r4
 800443a:	f7ff fe5f 	bl	80040fc <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800443e:	68a3      	ldr	r3, [r4, #8]
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d036      	beq.n	80044b2 <HAL_DMA_Init+0x2e6>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004444:	7922      	ldrb	r2, [r4, #4]
 8004446:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004448:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800444a:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 800444e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004450:	6861      	ldr	r1, [r4, #4]
 8004452:	1e4b      	subs	r3, r1, #1
 8004454:	2b07      	cmp	r3, #7
 8004456:	d930      	bls.n	80044ba <HAL_DMA_Init+0x2ee>
      hdma->DMAmuxRequestGen = 0U;
 8004458:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 800445a:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800445e:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004460:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004462:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004464:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004466:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800446a:	bd38      	pop	{r3, r4, r5, pc}
 800446c:	40020010 	.word	0x40020010
 8004470:	40020040 	.word	0x40020040
 8004474:	400204b8 	.word	0x400204b8
 8004478:	fe10803f 	.word	0xfe10803f
 800447c:	5c001000 	.word	0x5c001000
 8004480:	ffff0000 	.word	0xffff0000
 8004484:	40020028 	.word	0x40020028
 8004488:	58025408 	.word	0x58025408
 800448c:	5802541c 	.word	0x5802541c
 8004490:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004494:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004496:	2303      	movs	r3, #3
        return HAL_ERROR;
 8004498:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800449a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 800449c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80044a0:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80044a2:	496b      	ldr	r1, [pc, #428]	; (8004650 <HAL_DMA_Init+0x484>)
 80044a4:	40c1      	lsrs	r1, r0
 80044a6:	07c9      	lsls	r1, r1, #31
 80044a8:	f57f af2a 	bpl.w	8004300 <HAL_DMA_Init+0x134>
 80044ac:	e726      	b.n	80042fc <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 80044ae:	2001      	movs	r0, #1
}
 80044b0:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044b2:	2300      	movs	r3, #0
 80044b4:	461a      	mov	r2, r3
 80044b6:	6063      	str	r3, [r4, #4]
 80044b8:	e7c5      	b.n	8004446 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	4a65      	ldr	r2, [pc, #404]	; (8004654 <HAL_DMA_Init+0x488>)
 80044be:	4d66      	ldr	r5, [pc, #408]	; (8004658 <HAL_DMA_Init+0x48c>)
 80044c0:	42a8      	cmp	r0, r5
 80044c2:	bf18      	it	ne
 80044c4:	4290      	cmpne	r0, r2
 80044c6:	f105 0514 	add.w	r5, r5, #20
 80044ca:	bf0c      	ite	eq
 80044cc:	2201      	moveq	r2, #1
 80044ce:	2200      	movne	r2, #0
 80044d0:	42a8      	cmp	r0, r5
 80044d2:	bf08      	it	eq
 80044d4:	f042 0201 	orreq.w	r2, r2, #1
 80044d8:	3514      	adds	r5, #20
 80044da:	42a8      	cmp	r0, r5
 80044dc:	bf08      	it	eq
 80044de:	f042 0201 	orreq.w	r2, r2, #1
 80044e2:	3514      	adds	r5, #20
 80044e4:	42a8      	cmp	r0, r5
 80044e6:	bf08      	it	eq
 80044e8:	f042 0201 	orreq.w	r2, r2, #1
 80044ec:	3514      	adds	r5, #20
 80044ee:	42a8      	cmp	r0, r5
 80044f0:	bf08      	it	eq
 80044f2:	f042 0201 	orreq.w	r2, r2, #1
 80044f6:	3514      	adds	r5, #20
 80044f8:	42a8      	cmp	r0, r5
 80044fa:	bf08      	it	eq
 80044fc:	f042 0201 	orreq.w	r2, r2, #1
 8004500:	b93a      	cbnz	r2, 8004512 <HAL_DMA_Init+0x346>
 8004502:	4a56      	ldr	r2, [pc, #344]	; (800465c <HAL_DMA_Init+0x490>)
 8004504:	4290      	cmp	r0, r2
 8004506:	d004      	beq.n	8004512 <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004508:	4a55      	ldr	r2, [pc, #340]	; (8004660 <HAL_DMA_Init+0x494>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800450a:	4856      	ldr	r0, [pc, #344]	; (8004664 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800450c:	440a      	add	r2, r1
 800450e:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004510:	e003      	b.n	800451a <HAL_DMA_Init+0x34e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004512:	4a55      	ldr	r2, [pc, #340]	; (8004668 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004514:	4855      	ldr	r0, [pc, #340]	; (800466c <HAL_DMA_Init+0x4a0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004516:	440a      	add	r2, r1
 8004518:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800451a:	2101      	movs	r1, #1
 800451c:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004520:	2100      	movs	r1, #0
 8004522:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004526:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004528:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800452a:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 800452e:	605a      	str	r2, [r3, #4]
 8004530:	e796      	b.n	8004460 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004532:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8004536:	d00e      	beq.n	8004556 <HAL_DMA_Init+0x38a>
    switch (hdma->Init.FIFOThreshold)
 8004538:	2a02      	cmp	r2, #2
 800453a:	d905      	bls.n	8004548 <HAL_DMA_Init+0x37c>
 800453c:	2a03      	cmp	r2, #3
 800453e:	f47f aef8 	bne.w	8004332 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004542:	01c2      	lsls	r2, r0, #7
 8004544:	f57f aef5 	bpl.w	8004332 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 8004548:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800454a:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 800454c:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800454e:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004550:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004554:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8004556:	2a03      	cmp	r2, #3
 8004558:	f63f aeeb 	bhi.w	8004332 <HAL_DMA_Init+0x166>
 800455c:	a501      	add	r5, pc, #4	; (adr r5, 8004564 <HAL_DMA_Init+0x398>)
 800455e:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8004562:	bf00      	nop
 8004564:	08004549 	.word	0x08004549
 8004568:	08004543 	.word	0x08004543
 800456c:	08004549 	.word	0x08004549
 8004570:	08004575 	.word	0x08004575
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004574:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004578:	f47f aedb 	bne.w	8004332 <HAL_DMA_Init+0x166>
 800457c:	e7e4      	b.n	8004548 <HAL_DMA_Init+0x37c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800457e:	4b35      	ldr	r3, [pc, #212]	; (8004654 <HAL_DMA_Init+0x488>)
 8004580:	4835      	ldr	r0, [pc, #212]	; (8004658 <HAL_DMA_Init+0x48c>)
 8004582:	493b      	ldr	r1, [pc, #236]	; (8004670 <HAL_DMA_Init+0x4a4>)
 8004584:	4282      	cmp	r2, r0
 8004586:	bf18      	it	ne
 8004588:	429a      	cmpne	r2, r3
 800458a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 800458e:	bf0c      	ite	eq
 8004590:	2301      	moveq	r3, #1
 8004592:	2300      	movne	r3, #0
 8004594:	428a      	cmp	r2, r1
 8004596:	bf08      	it	eq
 8004598:	f043 0301 	orreq.w	r3, r3, #1
 800459c:	3128      	adds	r1, #40	; 0x28
 800459e:	4282      	cmp	r2, r0
 80045a0:	bf08      	it	eq
 80045a2:	f043 0301 	orreq.w	r3, r3, #1
 80045a6:	3028      	adds	r0, #40	; 0x28
 80045a8:	428a      	cmp	r2, r1
 80045aa:	bf08      	it	eq
 80045ac:	f043 0301 	orreq.w	r3, r3, #1
 80045b0:	3128      	adds	r1, #40	; 0x28
 80045b2:	4282      	cmp	r2, r0
 80045b4:	bf08      	it	eq
 80045b6:	f043 0301 	orreq.w	r3, r3, #1
 80045ba:	428a      	cmp	r2, r1
 80045bc:	bf08      	it	eq
 80045be:	f043 0301 	orreq.w	r3, r3, #1
 80045c2:	b913      	cbnz	r3, 80045ca <HAL_DMA_Init+0x3fe>
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <HAL_DMA_Init+0x490>)
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d13a      	bne.n	8004640 <HAL_DMA_Init+0x474>
    __HAL_UNLOCK(hdma);
 80045ca:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80045cc:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80045ce:	4929      	ldr	r1, [pc, #164]	; (8004674 <HAL_DMA_Init+0x4a8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80045d0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80045d4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80045d8:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80045da:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80045dc:	68a3      	ldr	r3, [r4, #8]
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d02c      	beq.n	800463c <HAL_DMA_Init+0x470>
 80045e2:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80045ee:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 80045f2:	08db      	lsrs	r3, r3, #3
 80045f4:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80045f8:	6965      	ldr	r5, [r4, #20]
 80045fa:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80045fe:	69a5      	ldr	r5, [r4, #24]
 8004600:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004604:	69e5      	ldr	r5, [r4, #28]
 8004606:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800460a:	6a25      	ldr	r5, [r4, #32]
 800460c:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8004610:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004612:	4919      	ldr	r1, [pc, #100]	; (8004678 <HAL_DMA_Init+0x4ac>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004614:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004616:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_DMA_Init+0x4b0>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004618:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800461a:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800461c:	6822      	ldr	r2, [r4, #0]
 800461e:	4411      	add	r1, r2
 8004620:	fba3 2301 	umull	r2, r3, r3, r1
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800462a:	f7ff fced 	bl	8004008 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800462e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004630:	2301      	movs	r3, #1
 8004632:	f002 021f 	and.w	r2, r2, #31
 8004636:	4093      	lsls	r3, r2
 8004638:	6043      	str	r3, [r0, #4]
 800463a:	e684      	b.n	8004346 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800463c:	2010      	movs	r0, #16
 800463e:	e7d6      	b.n	80045ee <HAL_DMA_Init+0x422>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004640:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004642:	2303      	movs	r3, #3
    return HAL_ERROR;
 8004644:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004646:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004648:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800464c:	bd38      	pop	{r3, r4, r5, pc}
 800464e:	bf00      	nop
 8004650:	c3c0003f 	.word	0xc3c0003f
 8004654:	58025408 	.word	0x58025408
 8004658:	5802541c 	.word	0x5802541c
 800465c:	58025494 	.word	0x58025494
 8004660:	1000823f 	.word	0x1000823f
 8004664:	40020940 	.word	0x40020940
 8004668:	1600963f 	.word	0x1600963f
 800466c:	58025940 	.word	0x58025940
 8004670:	58025430 	.word	0x58025430
 8004674:	fffe000f 	.word	0xfffe000f
 8004678:	a7fdabf8 	.word	0xa7fdabf8
 800467c:	cccccccd 	.word	0xcccccccd

08004680 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004680:	2800      	cmp	r0, #0
 8004682:	f000 8270 	beq.w	8004b66 <HAL_DMA_Start_IT+0x4e6>
 8004686:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8004688:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800468c:	2801      	cmp	r0, #1
 800468e:	f000 826c 	beq.w	8004b6a <HAL_DMA_Start_IT+0x4ea>
 8004692:	2001      	movs	r0, #1
{
 8004694:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8004696:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 800469a:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800469e:	4284      	cmp	r4, r0
 80046a0:	d008      	beq.n	80046b4 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80046a6:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046a8:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80046ac:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 80046b0:	bc70      	pop	{r4, r5, r6}
 80046b2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80046b4:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 80046b6:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ba:	4ea2      	ldr	r6, [pc, #648]	; (8004944 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 80046bc:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046c0:	2000      	movs	r0, #0
 80046c2:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80046c6:	6820      	ldr	r0, [r4, #0]
 80046c8:	f020 0001 	bic.w	r0, r0, #1
 80046cc:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046ce:	489e      	ldr	r0, [pc, #632]	; (8004948 <HAL_DMA_Start_IT+0x2c8>)
 80046d0:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d4:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046d8:	42b4      	cmp	r4, r6
 80046da:	bf18      	it	ne
 80046dc:	4284      	cmpne	r4, r0
 80046de:	f106 0618 	add.w	r6, r6, #24
 80046e2:	bf0c      	ite	eq
 80046e4:	2001      	moveq	r0, #1
 80046e6:	2000      	movne	r0, #0
 80046e8:	42b4      	cmp	r4, r6
 80046ea:	bf08      	it	eq
 80046ec:	f040 0001 	orreq.w	r0, r0, #1
 80046f0:	3618      	adds	r6, #24
 80046f2:	42b4      	cmp	r4, r6
 80046f4:	bf08      	it	eq
 80046f6:	f040 0001 	orreq.w	r0, r0, #1
 80046fa:	3618      	adds	r6, #24
 80046fc:	42b4      	cmp	r4, r6
 80046fe:	bf08      	it	eq
 8004700:	f040 0001 	orreq.w	r0, r0, #1
 8004704:	3618      	adds	r6, #24
 8004706:	42b4      	cmp	r4, r6
 8004708:	bf08      	it	eq
 800470a:	f040 0001 	orreq.w	r0, r0, #1
 800470e:	3618      	adds	r6, #24
 8004710:	42b4      	cmp	r4, r6
 8004712:	bf08      	it	eq
 8004714:	f040 0001 	orreq.w	r0, r0, #1
 8004718:	3618      	adds	r6, #24
 800471a:	42b4      	cmp	r4, r6
 800471c:	bf08      	it	eq
 800471e:	f040 0001 	orreq.w	r0, r0, #1
 8004722:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8004726:	42b4      	cmp	r4, r6
 8004728:	bf08      	it	eq
 800472a:	f040 0001 	orreq.w	r0, r0, #1
 800472e:	3618      	adds	r6, #24
 8004730:	42b4      	cmp	r4, r6
 8004732:	bf08      	it	eq
 8004734:	f040 0001 	orreq.w	r0, r0, #1
 8004738:	3618      	adds	r6, #24
 800473a:	42b4      	cmp	r4, r6
 800473c:	bf08      	it	eq
 800473e:	f040 0001 	orreq.w	r0, r0, #1
 8004742:	3618      	adds	r6, #24
 8004744:	42b4      	cmp	r4, r6
 8004746:	bf08      	it	eq
 8004748:	f040 0001 	orreq.w	r0, r0, #1
 800474c:	3618      	adds	r6, #24
 800474e:	42b4      	cmp	r4, r6
 8004750:	bf08      	it	eq
 8004752:	f040 0001 	orreq.w	r0, r0, #1
 8004756:	3618      	adds	r6, #24
 8004758:	42b4      	cmp	r4, r6
 800475a:	bf08      	it	eq
 800475c:	f040 0001 	orreq.w	r0, r0, #1
 8004760:	3618      	adds	r6, #24
 8004762:	42b4      	cmp	r4, r6
 8004764:	bf08      	it	eq
 8004766:	f040 0001 	orreq.w	r0, r0, #1
 800476a:	3618      	adds	r6, #24
 800476c:	42b4      	cmp	r4, r6
 800476e:	bf08      	it	eq
 8004770:	f040 0001 	orreq.w	r0, r0, #1
 8004774:	4e75      	ldr	r6, [pc, #468]	; (800494c <HAL_DMA_Start_IT+0x2cc>)
 8004776:	42b4      	cmp	r4, r6
 8004778:	bf08      	it	eq
 800477a:	f040 0001 	orreq.w	r0, r0, #1
 800477e:	3614      	adds	r6, #20
 8004780:	42b4      	cmp	r4, r6
 8004782:	bf08      	it	eq
 8004784:	f040 0001 	orreq.w	r0, r0, #1
 8004788:	3614      	adds	r6, #20
 800478a:	42b4      	cmp	r4, r6
 800478c:	bf08      	it	eq
 800478e:	f040 0001 	orreq.w	r0, r0, #1
 8004792:	3614      	adds	r6, #20
 8004794:	42b4      	cmp	r4, r6
 8004796:	bf08      	it	eq
 8004798:	f040 0001 	orreq.w	r0, r0, #1
 800479c:	3614      	adds	r6, #20
 800479e:	42b4      	cmp	r4, r6
 80047a0:	bf08      	it	eq
 80047a2:	f040 0001 	orreq.w	r0, r0, #1
 80047a6:	3614      	adds	r6, #20
 80047a8:	42b4      	cmp	r4, r6
 80047aa:	bf08      	it	eq
 80047ac:	f040 0001 	orreq.w	r0, r0, #1
 80047b0:	3614      	adds	r6, #20
 80047b2:	42b4      	cmp	r4, r6
 80047b4:	bf08      	it	eq
 80047b6:	f040 0001 	orreq.w	r0, r0, #1
 80047ba:	b910      	cbnz	r0, 80047c2 <HAL_DMA_Start_IT+0x142>
 80047bc:	4864      	ldr	r0, [pc, #400]	; (8004950 <HAL_DMA_Start_IT+0x2d0>)
 80047be:	4284      	cmp	r4, r0
 80047c0:	d10a      	bne.n	80047d8 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047c2:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 80047c6:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80047c8:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 80047cc:	b110      	cbz	r0, 80047d4 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047ce:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 80047d2:	6044      	str	r4, [r0, #4]
 80047d4:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047d8:	485b      	ldr	r0, [pc, #364]	; (8004948 <HAL_DMA_Start_IT+0x2c8>)
 80047da:	4e5a      	ldr	r6, [pc, #360]	; (8004944 <HAL_DMA_Start_IT+0x2c4>)
 80047dc:	42b4      	cmp	r4, r6
 80047de:	bf18      	it	ne
 80047e0:	4284      	cmpne	r4, r0
 80047e2:	f106 0618 	add.w	r6, r6, #24
 80047e6:	bf0c      	ite	eq
 80047e8:	2001      	moveq	r0, #1
 80047ea:	2000      	movne	r0, #0
 80047ec:	42b4      	cmp	r4, r6
 80047ee:	bf08      	it	eq
 80047f0:	f040 0001 	orreq.w	r0, r0, #1
 80047f4:	3618      	adds	r6, #24
 80047f6:	42b4      	cmp	r4, r6
 80047f8:	bf08      	it	eq
 80047fa:	f040 0001 	orreq.w	r0, r0, #1
 80047fe:	3618      	adds	r6, #24
 8004800:	42b4      	cmp	r4, r6
 8004802:	bf08      	it	eq
 8004804:	f040 0001 	orreq.w	r0, r0, #1
 8004808:	3618      	adds	r6, #24
 800480a:	42b4      	cmp	r4, r6
 800480c:	bf08      	it	eq
 800480e:	f040 0001 	orreq.w	r0, r0, #1
 8004812:	3618      	adds	r6, #24
 8004814:	42b4      	cmp	r4, r6
 8004816:	bf08      	it	eq
 8004818:	f040 0001 	orreq.w	r0, r0, #1
 800481c:	3618      	adds	r6, #24
 800481e:	42b4      	cmp	r4, r6
 8004820:	bf08      	it	eq
 8004822:	f040 0001 	orreq.w	r0, r0, #1
 8004826:	f506 7656 	add.w	r6, r6, #856	; 0x358
 800482a:	42b4      	cmp	r4, r6
 800482c:	bf08      	it	eq
 800482e:	f040 0001 	orreq.w	r0, r0, #1
 8004832:	3618      	adds	r6, #24
 8004834:	42b4      	cmp	r4, r6
 8004836:	bf08      	it	eq
 8004838:	f040 0001 	orreq.w	r0, r0, #1
 800483c:	3618      	adds	r6, #24
 800483e:	42b4      	cmp	r4, r6
 8004840:	bf08      	it	eq
 8004842:	f040 0001 	orreq.w	r0, r0, #1
 8004846:	3618      	adds	r6, #24
 8004848:	42b4      	cmp	r4, r6
 800484a:	bf08      	it	eq
 800484c:	f040 0001 	orreq.w	r0, r0, #1
 8004850:	3618      	adds	r6, #24
 8004852:	42b4      	cmp	r4, r6
 8004854:	bf08      	it	eq
 8004856:	f040 0001 	orreq.w	r0, r0, #1
 800485a:	3618      	adds	r6, #24
 800485c:	42b4      	cmp	r4, r6
 800485e:	bf08      	it	eq
 8004860:	f040 0001 	orreq.w	r0, r0, #1
 8004864:	3618      	adds	r6, #24
 8004866:	42b4      	cmp	r4, r6
 8004868:	bf08      	it	eq
 800486a:	f040 0001 	orreq.w	r0, r0, #1
 800486e:	b918      	cbnz	r0, 8004878 <HAL_DMA_Start_IT+0x1f8>
 8004870:	4838      	ldr	r0, [pc, #224]	; (8004954 <HAL_DMA_Start_IT+0x2d4>)
 8004872:	4284      	cmp	r4, r0
 8004874:	f040 817b 	bne.w	8004b6e <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004878:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800487c:	f000 041f 	and.w	r4, r0, #31
 8004880:	203f      	movs	r0, #63	; 0x3f
 8004882:	40a0      	lsls	r0, r4
 8004884:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004886:	f8dc 4000 	ldr.w	r4, [ip]
 800488a:	6820      	ldr	r0, [r4, #0]
 800488c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004890:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004892:	f8dc 0000 	ldr.w	r0, [ip]
 8004896:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004898:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800489c:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800489e:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048a2:	f000 815b 	beq.w	8004b5c <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80048a6:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80048a8:	f8dc 3000 	ldr.w	r3, [ip]
 80048ac:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048ae:	f8dc 4000 	ldr.w	r4, [ip]
 80048b2:	4b25      	ldr	r3, [pc, #148]	; (8004948 <HAL_DMA_Start_IT+0x2c8>)
 80048b4:	4923      	ldr	r1, [pc, #140]	; (8004944 <HAL_DMA_Start_IT+0x2c4>)
 80048b6:	4a28      	ldr	r2, [pc, #160]	; (8004958 <HAL_DMA_Start_IT+0x2d8>)
 80048b8:	428c      	cmp	r4, r1
 80048ba:	bf18      	it	ne
 80048bc:	429c      	cmpne	r4, r3
 80048be:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80048c2:	bf0c      	ite	eq
 80048c4:	2301      	moveq	r3, #1
 80048c6:	2300      	movne	r3, #0
 80048c8:	4294      	cmp	r4, r2
 80048ca:	bf08      	it	eq
 80048cc:	f043 0301 	orreq.w	r3, r3, #1
 80048d0:	3230      	adds	r2, #48	; 0x30
 80048d2:	428c      	cmp	r4, r1
 80048d4:	bf08      	it	eq
 80048d6:	f043 0301 	orreq.w	r3, r3, #1
 80048da:	3130      	adds	r1, #48	; 0x30
 80048dc:	4294      	cmp	r4, r2
 80048de:	bf08      	it	eq
 80048e0:	f043 0301 	orreq.w	r3, r3, #1
 80048e4:	3230      	adds	r2, #48	; 0x30
 80048e6:	428c      	cmp	r4, r1
 80048e8:	bf08      	it	eq
 80048ea:	f043 0301 	orreq.w	r3, r3, #1
 80048ee:	3130      	adds	r1, #48	; 0x30
 80048f0:	4294      	cmp	r4, r2
 80048f2:	bf08      	it	eq
 80048f4:	f043 0301 	orreq.w	r3, r3, #1
 80048f8:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80048fc:	428c      	cmp	r4, r1
 80048fe:	bf08      	it	eq
 8004900:	f043 0301 	orreq.w	r3, r3, #1
 8004904:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004908:	4294      	cmp	r4, r2
 800490a:	bf08      	it	eq
 800490c:	f043 0301 	orreq.w	r3, r3, #1
 8004910:	3230      	adds	r2, #48	; 0x30
 8004912:	428c      	cmp	r4, r1
 8004914:	bf08      	it	eq
 8004916:	f043 0301 	orreq.w	r3, r3, #1
 800491a:	3130      	adds	r1, #48	; 0x30
 800491c:	4294      	cmp	r4, r2
 800491e:	bf08      	it	eq
 8004920:	f043 0301 	orreq.w	r3, r3, #1
 8004924:	3230      	adds	r2, #48	; 0x30
 8004926:	428c      	cmp	r4, r1
 8004928:	bf08      	it	eq
 800492a:	f043 0301 	orreq.w	r3, r3, #1
 800492e:	3130      	adds	r1, #48	; 0x30
 8004930:	4294      	cmp	r4, r2
 8004932:	bf08      	it	eq
 8004934:	f043 0301 	orreq.w	r3, r3, #1
 8004938:	3230      	adds	r2, #48	; 0x30
 800493a:	428c      	cmp	r4, r1
 800493c:	bf08      	it	eq
 800493e:	f043 0301 	orreq.w	r3, r3, #1
 8004942:	e00b      	b.n	800495c <HAL_DMA_Start_IT+0x2dc>
 8004944:	40020028 	.word	0x40020028
 8004948:	40020010 	.word	0x40020010
 800494c:	58025408 	.word	0x58025408
 8004950:	58025494 	.word	0x58025494
 8004954:	400204b8 	.word	0x400204b8
 8004958:	40020040 	.word	0x40020040
 800495c:	4294      	cmp	r4, r2
 800495e:	bf08      	it	eq
 8004960:	f043 0301 	orreq.w	r3, r3, #1
 8004964:	b91b      	cbnz	r3, 800496e <HAL_DMA_Start_IT+0x2ee>
 8004966:	4b9b      	ldr	r3, [pc, #620]	; (8004bd4 <HAL_DMA_Start_IT+0x554>)
 8004968:	429c      	cmp	r4, r3
 800496a:	f040 8143 	bne.w	8004bf4 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	f023 031e 	bic.w	r3, r3, #30
 8004974:	f043 0316 	orr.w	r3, r3, #22
 8004978:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800497a:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800497e:	b12b      	cbz	r3, 800498c <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004980:	f8dc 2000 	ldr.w	r2, [ip]
 8004984:	6813      	ldr	r3, [r2, #0]
 8004986:	f043 0308 	orr.w	r3, r3, #8
 800498a:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800498c:	f8dc 4000 	ldr.w	r4, [ip]
 8004990:	4b91      	ldr	r3, [pc, #580]	; (8004bd8 <HAL_DMA_Start_IT+0x558>)
 8004992:	4992      	ldr	r1, [pc, #584]	; (8004bdc <HAL_DMA_Start_IT+0x55c>)
 8004994:	4a92      	ldr	r2, [pc, #584]	; (8004be0 <HAL_DMA_Start_IT+0x560>)
 8004996:	428c      	cmp	r4, r1
 8004998:	bf18      	it	ne
 800499a:	429c      	cmpne	r4, r3
 800499c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80049a0:	bf0c      	ite	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	2300      	movne	r3, #0
 80049a6:	4294      	cmp	r4, r2
 80049a8:	bf08      	it	eq
 80049aa:	f043 0301 	orreq.w	r3, r3, #1
 80049ae:	3230      	adds	r2, #48	; 0x30
 80049b0:	428c      	cmp	r4, r1
 80049b2:	bf08      	it	eq
 80049b4:	f043 0301 	orreq.w	r3, r3, #1
 80049b8:	3130      	adds	r1, #48	; 0x30
 80049ba:	4294      	cmp	r4, r2
 80049bc:	bf08      	it	eq
 80049be:	f043 0301 	orreq.w	r3, r3, #1
 80049c2:	3230      	adds	r2, #48	; 0x30
 80049c4:	428c      	cmp	r4, r1
 80049c6:	bf08      	it	eq
 80049c8:	f043 0301 	orreq.w	r3, r3, #1
 80049cc:	3130      	adds	r1, #48	; 0x30
 80049ce:	4294      	cmp	r4, r2
 80049d0:	bf08      	it	eq
 80049d2:	f043 0301 	orreq.w	r3, r3, #1
 80049d6:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80049da:	428c      	cmp	r4, r1
 80049dc:	bf08      	it	eq
 80049de:	f043 0301 	orreq.w	r3, r3, #1
 80049e2:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80049e6:	4294      	cmp	r4, r2
 80049e8:	bf08      	it	eq
 80049ea:	f043 0301 	orreq.w	r3, r3, #1
 80049ee:	3230      	adds	r2, #48	; 0x30
 80049f0:	428c      	cmp	r4, r1
 80049f2:	bf08      	it	eq
 80049f4:	f043 0301 	orreq.w	r3, r3, #1
 80049f8:	3130      	adds	r1, #48	; 0x30
 80049fa:	4294      	cmp	r4, r2
 80049fc:	bf08      	it	eq
 80049fe:	f043 0301 	orreq.w	r3, r3, #1
 8004a02:	3230      	adds	r2, #48	; 0x30
 8004a04:	428c      	cmp	r4, r1
 8004a06:	bf08      	it	eq
 8004a08:	f043 0301 	orreq.w	r3, r3, #1
 8004a0c:	3130      	adds	r1, #48	; 0x30
 8004a0e:	4294      	cmp	r4, r2
 8004a10:	bf08      	it	eq
 8004a12:	f043 0301 	orreq.w	r3, r3, #1
 8004a16:	3230      	adds	r2, #48	; 0x30
 8004a18:	428c      	cmp	r4, r1
 8004a1a:	bf08      	it	eq
 8004a1c:	f043 0301 	orreq.w	r3, r3, #1
 8004a20:	3130      	adds	r1, #48	; 0x30
 8004a22:	4294      	cmp	r4, r2
 8004a24:	bf08      	it	eq
 8004a26:	f043 0301 	orreq.w	r3, r3, #1
 8004a2a:	4a6e      	ldr	r2, [pc, #440]	; (8004be4 <HAL_DMA_Start_IT+0x564>)
 8004a2c:	428c      	cmp	r4, r1
 8004a2e:	bf08      	it	eq
 8004a30:	f043 0301 	orreq.w	r3, r3, #1
 8004a34:	496c      	ldr	r1, [pc, #432]	; (8004be8 <HAL_DMA_Start_IT+0x568>)
 8004a36:	4294      	cmp	r4, r2
 8004a38:	bf08      	it	eq
 8004a3a:	f043 0301 	orreq.w	r3, r3, #1
 8004a3e:	3228      	adds	r2, #40	; 0x28
 8004a40:	428c      	cmp	r4, r1
 8004a42:	bf08      	it	eq
 8004a44:	f043 0301 	orreq.w	r3, r3, #1
 8004a48:	3128      	adds	r1, #40	; 0x28
 8004a4a:	4294      	cmp	r4, r2
 8004a4c:	bf08      	it	eq
 8004a4e:	f043 0301 	orreq.w	r3, r3, #1
 8004a52:	3228      	adds	r2, #40	; 0x28
 8004a54:	428c      	cmp	r4, r1
 8004a56:	bf08      	it	eq
 8004a58:	f043 0301 	orreq.w	r3, r3, #1
 8004a5c:	3128      	adds	r1, #40	; 0x28
 8004a5e:	4294      	cmp	r4, r2
 8004a60:	bf08      	it	eq
 8004a62:	f043 0301 	orreq.w	r3, r3, #1
 8004a66:	3228      	adds	r2, #40	; 0x28
 8004a68:	428c      	cmp	r4, r1
 8004a6a:	bf08      	it	eq
 8004a6c:	f043 0301 	orreq.w	r3, r3, #1
 8004a70:	4294      	cmp	r4, r2
 8004a72:	bf08      	it	eq
 8004a74:	f043 0301 	orreq.w	r3, r3, #1
 8004a78:	b913      	cbnz	r3, 8004a80 <HAL_DMA_Start_IT+0x400>
 8004a7a:	4b5c      	ldr	r3, [pc, #368]	; (8004bec <HAL_DMA_Start_IT+0x56c>)
 8004a7c:	429c      	cmp	r4, r3
 8004a7e:	d111      	bne.n	8004aa4 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a80:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	03d2      	lsls	r2, r2, #15
 8004a88:	d503      	bpl.n	8004a92 <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a90:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8004a92:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8004a96:	b11b      	cbz	r3, 8004aa0 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8004aa4:	4b4c      	ldr	r3, [pc, #304]	; (8004bd8 <HAL_DMA_Start_IT+0x558>)
 8004aa6:	494d      	ldr	r1, [pc, #308]	; (8004bdc <HAL_DMA_Start_IT+0x55c>)
 8004aa8:	4a4d      	ldr	r2, [pc, #308]	; (8004be0 <HAL_DMA_Start_IT+0x560>)
 8004aaa:	428c      	cmp	r4, r1
 8004aac:	bf18      	it	ne
 8004aae:	429c      	cmpne	r4, r3
 8004ab0:	484f      	ldr	r0, [pc, #316]	; (8004bf0 <HAL_DMA_Start_IT+0x570>)
 8004ab2:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	4294      	cmp	r4, r2
 8004abe:	bf08      	it	eq
 8004ac0:	f043 0301 	orreq.w	r3, r3, #1
 8004ac4:	3230      	adds	r2, #48	; 0x30
 8004ac6:	4284      	cmp	r4, r0
 8004ac8:	bf08      	it	eq
 8004aca:	f043 0301 	orreq.w	r3, r3, #1
 8004ace:	3060      	adds	r0, #96	; 0x60
 8004ad0:	4294      	cmp	r4, r2
 8004ad2:	bf08      	it	eq
 8004ad4:	f043 0301 	orreq.w	r3, r3, #1
 8004ad8:	3230      	adds	r2, #48	; 0x30
 8004ada:	428c      	cmp	r4, r1
 8004adc:	bf08      	it	eq
 8004ade:	f043 0301 	orreq.w	r3, r3, #1
 8004ae2:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8004ae6:	4294      	cmp	r4, r2
 8004ae8:	bf08      	it	eq
 8004aea:	f043 0301 	orreq.w	r3, r3, #1
 8004aee:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8004af2:	4284      	cmp	r4, r0
 8004af4:	bf08      	it	eq
 8004af6:	f043 0301 	orreq.w	r3, r3, #1
 8004afa:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8004afe:	4294      	cmp	r4, r2
 8004b00:	bf08      	it	eq
 8004b02:	f043 0301 	orreq.w	r3, r3, #1
 8004b06:	3230      	adds	r2, #48	; 0x30
 8004b08:	428c      	cmp	r4, r1
 8004b0a:	bf08      	it	eq
 8004b0c:	f043 0301 	orreq.w	r3, r3, #1
 8004b10:	3160      	adds	r1, #96	; 0x60
 8004b12:	4294      	cmp	r4, r2
 8004b14:	bf08      	it	eq
 8004b16:	f043 0301 	orreq.w	r3, r3, #1
 8004b1a:	3230      	adds	r2, #48	; 0x30
 8004b1c:	4284      	cmp	r4, r0
 8004b1e:	bf08      	it	eq
 8004b20:	f043 0301 	orreq.w	r3, r3, #1
 8004b24:	4294      	cmp	r4, r2
 8004b26:	bf08      	it	eq
 8004b28:	f043 0301 	orreq.w	r3, r3, #1
 8004b2c:	3230      	adds	r2, #48	; 0x30
 8004b2e:	428c      	cmp	r4, r1
 8004b30:	bf08      	it	eq
 8004b32:	f043 0301 	orreq.w	r3, r3, #1
 8004b36:	4294      	cmp	r4, r2
 8004b38:	bf08      	it	eq
 8004b3a:	f043 0301 	orreq.w	r3, r3, #1
 8004b3e:	b933      	cbnz	r3, 8004b4e <HAL_DMA_Start_IT+0x4ce>
 8004b40:	3060      	adds	r0, #96	; 0x60
 8004b42:	1a20      	subs	r0, r4, r0
 8004b44:	fab0 f080 	clz	r0, r0
 8004b48:	0940      	lsrs	r0, r0, #5
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d03d      	beq.n	8004bca <HAL_DMA_Start_IT+0x54a>
 8004b4e:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b50:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004b52:	f043 0301 	orr.w	r3, r3, #1
 8004b56:	6023      	str	r3, [r4, #0]
}
 8004b58:	bc70      	pop	{r4, r5, r6}
 8004b5a:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004b5c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004b5e:	f8dc 3000 	ldr.w	r3, [ip]
 8004b62:	60d9      	str	r1, [r3, #12]
 8004b64:	e6a3      	b.n	80048ae <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8004b66:	2001      	movs	r0, #1
 8004b68:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004b6a:	2002      	movs	r0, #2
}
 8004b6c:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b6e:	481d      	ldr	r0, [pc, #116]	; (8004be4 <HAL_DMA_Start_IT+0x564>)
 8004b70:	4e1d      	ldr	r6, [pc, #116]	; (8004be8 <HAL_DMA_Start_IT+0x568>)
 8004b72:	42b4      	cmp	r4, r6
 8004b74:	bf18      	it	ne
 8004b76:	4284      	cmpne	r4, r0
 8004b78:	f106 0614 	add.w	r6, r6, #20
 8004b7c:	bf0c      	ite	eq
 8004b7e:	2001      	moveq	r0, #1
 8004b80:	2000      	movne	r0, #0
 8004b82:	42b4      	cmp	r4, r6
 8004b84:	bf08      	it	eq
 8004b86:	f040 0001 	orreq.w	r0, r0, #1
 8004b8a:	3614      	adds	r6, #20
 8004b8c:	42b4      	cmp	r4, r6
 8004b8e:	bf08      	it	eq
 8004b90:	f040 0001 	orreq.w	r0, r0, #1
 8004b94:	3614      	adds	r6, #20
 8004b96:	42b4      	cmp	r4, r6
 8004b98:	bf08      	it	eq
 8004b9a:	f040 0001 	orreq.w	r0, r0, #1
 8004b9e:	3614      	adds	r6, #20
 8004ba0:	42b4      	cmp	r4, r6
 8004ba2:	bf08      	it	eq
 8004ba4:	f040 0001 	orreq.w	r0, r0, #1
 8004ba8:	3614      	adds	r6, #20
 8004baa:	42b4      	cmp	r4, r6
 8004bac:	bf08      	it	eq
 8004bae:	f040 0001 	orreq.w	r0, r0, #1
 8004bb2:	b910      	cbnz	r0, 8004bba <HAL_DMA_Start_IT+0x53a>
 8004bb4:	480d      	ldr	r0, [pc, #52]	; (8004bec <HAL_DMA_Start_IT+0x56c>)
 8004bb6:	4284      	cmp	r4, r0
 8004bb8:	d11c      	bne.n	8004bf4 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bba:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8004bbe:	f000 041f 	and.w	r4, r0, #31
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	40a0      	lsls	r0, r4
 8004bc6:	6068      	str	r0, [r5, #4]
 8004bc8:	e663      	b.n	8004892 <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	e56d      	b.n	80046b0 <HAL_DMA_Start_IT+0x30>
 8004bd4:	400204b8 	.word	0x400204b8
 8004bd8:	40020010 	.word	0x40020010
 8004bdc:	40020028 	.word	0x40020028
 8004be0:	40020040 	.word	0x40020040
 8004be4:	58025408 	.word	0x58025408
 8004be8:	5802541c 	.word	0x5802541c
 8004bec:	58025494 	.word	0x58025494
 8004bf0:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	f023 030e 	bic.w	r3, r3, #14
 8004bfa:	f043 030a 	orr.w	r3, r3, #10
 8004bfe:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004c00:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f43f aec1 	beq.w	800498c <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004c0a:	f8dc 2000 	ldr.w	r2, [ip]
 8004c0e:	6813      	ldr	r3, [r2, #0]
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e6b9      	b.n	800498c <HAL_DMA_Start_IT+0x30c>

08004c18 <HAL_DMA_Abort>:
{
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8004c1c:	f7ff f90a 	bl	8003e34 <HAL_GetTick>
  if(hdma == NULL)
 8004c20:	2e00      	cmp	r6, #0
 8004c22:	f000 81ef 	beq.w	8005004 <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c26:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	f040 81d9 	bne.w	8004fe2 <HAL_DMA_Abort+0x3ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c30:	6832      	ldr	r2, [r6, #0]
 8004c32:	4604      	mov	r4, r0
 8004c34:	4b6e      	ldr	r3, [pc, #440]	; (8004df0 <HAL_DMA_Abort+0x1d8>)
 8004c36:	496f      	ldr	r1, [pc, #444]	; (8004df4 <HAL_DMA_Abort+0x1dc>)
 8004c38:	428a      	cmp	r2, r1
 8004c3a:	bf18      	it	ne
 8004c3c:	429a      	cmpne	r2, r3
 8004c3e:	f101 0118 	add.w	r1, r1, #24
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	428a      	cmp	r2, r1
 8004c4a:	bf08      	it	eq
 8004c4c:	f043 0301 	orreq.w	r3, r3, #1
 8004c50:	3118      	adds	r1, #24
 8004c52:	428a      	cmp	r2, r1
 8004c54:	bf08      	it	eq
 8004c56:	f043 0301 	orreq.w	r3, r3, #1
 8004c5a:	3118      	adds	r1, #24
 8004c5c:	428a      	cmp	r2, r1
 8004c5e:	bf08      	it	eq
 8004c60:	f043 0301 	orreq.w	r3, r3, #1
 8004c64:	3118      	adds	r1, #24
 8004c66:	428a      	cmp	r2, r1
 8004c68:	bf08      	it	eq
 8004c6a:	f043 0301 	orreq.w	r3, r3, #1
 8004c6e:	3118      	adds	r1, #24
 8004c70:	428a      	cmp	r2, r1
 8004c72:	bf08      	it	eq
 8004c74:	f043 0301 	orreq.w	r3, r3, #1
 8004c78:	3118      	adds	r1, #24
 8004c7a:	428a      	cmp	r2, r1
 8004c7c:	bf08      	it	eq
 8004c7e:	f043 0301 	orreq.w	r3, r3, #1
 8004c82:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004c86:	428a      	cmp	r2, r1
 8004c88:	bf08      	it	eq
 8004c8a:	f043 0301 	orreq.w	r3, r3, #1
 8004c8e:	3118      	adds	r1, #24
 8004c90:	428a      	cmp	r2, r1
 8004c92:	bf08      	it	eq
 8004c94:	f043 0301 	orreq.w	r3, r3, #1
 8004c98:	3118      	adds	r1, #24
 8004c9a:	428a      	cmp	r2, r1
 8004c9c:	bf08      	it	eq
 8004c9e:	f043 0301 	orreq.w	r3, r3, #1
 8004ca2:	3118      	adds	r1, #24
 8004ca4:	428a      	cmp	r2, r1
 8004ca6:	bf08      	it	eq
 8004ca8:	f043 0301 	orreq.w	r3, r3, #1
 8004cac:	3118      	adds	r1, #24
 8004cae:	428a      	cmp	r2, r1
 8004cb0:	bf08      	it	eq
 8004cb2:	f043 0301 	orreq.w	r3, r3, #1
 8004cb6:	3118      	adds	r1, #24
 8004cb8:	428a      	cmp	r2, r1
 8004cba:	bf08      	it	eq
 8004cbc:	f043 0301 	orreq.w	r3, r3, #1
 8004cc0:	3118      	adds	r1, #24
 8004cc2:	428a      	cmp	r2, r1
 8004cc4:	bf08      	it	eq
 8004cc6:	f043 0301 	orreq.w	r3, r3, #1
 8004cca:	b91b      	cbnz	r3, 8004cd4 <HAL_DMA_Abort+0xbc>
 8004ccc:	4b4a      	ldr	r3, [pc, #296]	; (8004df8 <HAL_DMA_Abort+0x1e0>)
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	f040 81a2 	bne.w	8005018 <HAL_DMA_Abort+0x400>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004cd4:	6813      	ldr	r3, [r2, #0]
 8004cd6:	f023 031e 	bic.w	r3, r3, #30
 8004cda:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004cdc:	6832      	ldr	r2, [r6, #0]
 8004cde:	6953      	ldr	r3, [r2, #20]
 8004ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce4:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004ce6:	6832      	ldr	r2, [r6, #0]
 8004ce8:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cea:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_DMA_Abort+0x1d8>)
 8004cec:	4941      	ldr	r1, [pc, #260]	; (8004df4 <HAL_DMA_Abort+0x1dc>)
 8004cee:	428a      	cmp	r2, r1
 8004cf0:	bf18      	it	ne
 8004cf2:	429a      	cmpne	r2, r3
 8004cf4:	f101 0118 	add.w	r1, r1, #24
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	428a      	cmp	r2, r1
 8004d00:	bf08      	it	eq
 8004d02:	f043 0301 	orreq.w	r3, r3, #1
 8004d06:	3118      	adds	r1, #24
 8004d08:	428a      	cmp	r2, r1
 8004d0a:	bf08      	it	eq
 8004d0c:	f043 0301 	orreq.w	r3, r3, #1
 8004d10:	3118      	adds	r1, #24
 8004d12:	428a      	cmp	r2, r1
 8004d14:	bf08      	it	eq
 8004d16:	f043 0301 	orreq.w	r3, r3, #1
 8004d1a:	3118      	adds	r1, #24
 8004d1c:	428a      	cmp	r2, r1
 8004d1e:	bf08      	it	eq
 8004d20:	f043 0301 	orreq.w	r3, r3, #1
 8004d24:	3118      	adds	r1, #24
 8004d26:	428a      	cmp	r2, r1
 8004d28:	bf08      	it	eq
 8004d2a:	f043 0301 	orreq.w	r3, r3, #1
 8004d2e:	3118      	adds	r1, #24
 8004d30:	428a      	cmp	r2, r1
 8004d32:	bf08      	it	eq
 8004d34:	f043 0301 	orreq.w	r3, r3, #1
 8004d38:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004d3c:	428a      	cmp	r2, r1
 8004d3e:	bf08      	it	eq
 8004d40:	f043 0301 	orreq.w	r3, r3, #1
 8004d44:	3118      	adds	r1, #24
 8004d46:	428a      	cmp	r2, r1
 8004d48:	bf08      	it	eq
 8004d4a:	f043 0301 	orreq.w	r3, r3, #1
 8004d4e:	3118      	adds	r1, #24
 8004d50:	428a      	cmp	r2, r1
 8004d52:	bf08      	it	eq
 8004d54:	f043 0301 	orreq.w	r3, r3, #1
 8004d58:	3118      	adds	r1, #24
 8004d5a:	428a      	cmp	r2, r1
 8004d5c:	bf08      	it	eq
 8004d5e:	f043 0301 	orreq.w	r3, r3, #1
 8004d62:	3118      	adds	r1, #24
 8004d64:	428a      	cmp	r2, r1
 8004d66:	bf08      	it	eq
 8004d68:	f043 0301 	orreq.w	r3, r3, #1
 8004d6c:	3118      	adds	r1, #24
 8004d6e:	428a      	cmp	r2, r1
 8004d70:	bf08      	it	eq
 8004d72:	f043 0301 	orreq.w	r3, r3, #1
 8004d76:	3118      	adds	r1, #24
 8004d78:	428a      	cmp	r2, r1
 8004d7a:	bf08      	it	eq
 8004d7c:	f043 0301 	orreq.w	r3, r3, #1
 8004d80:	3118      	adds	r1, #24
 8004d82:	428a      	cmp	r2, r1
 8004d84:	bf08      	it	eq
 8004d86:	f043 0301 	orreq.w	r3, r3, #1
 8004d8a:	491c      	ldr	r1, [pc, #112]	; (8004dfc <HAL_DMA_Abort+0x1e4>)
 8004d8c:	428a      	cmp	r2, r1
 8004d8e:	bf08      	it	eq
 8004d90:	f043 0301 	orreq.w	r3, r3, #1
 8004d94:	3114      	adds	r1, #20
 8004d96:	428a      	cmp	r2, r1
 8004d98:	bf08      	it	eq
 8004d9a:	f043 0301 	orreq.w	r3, r3, #1
 8004d9e:	3114      	adds	r1, #20
 8004da0:	428a      	cmp	r2, r1
 8004da2:	bf08      	it	eq
 8004da4:	f043 0301 	orreq.w	r3, r3, #1
 8004da8:	3114      	adds	r1, #20
 8004daa:	428a      	cmp	r2, r1
 8004dac:	bf08      	it	eq
 8004dae:	f043 0301 	orreq.w	r3, r3, #1
 8004db2:	3114      	adds	r1, #20
 8004db4:	428a      	cmp	r2, r1
 8004db6:	bf08      	it	eq
 8004db8:	f043 0301 	orreq.w	r3, r3, #1
 8004dbc:	3114      	adds	r1, #20
 8004dbe:	428a      	cmp	r2, r1
 8004dc0:	bf08      	it	eq
 8004dc2:	f043 0301 	orreq.w	r3, r3, #1
 8004dc6:	3114      	adds	r1, #20
 8004dc8:	428a      	cmp	r2, r1
 8004dca:	bf08      	it	eq
 8004dcc:	f043 0301 	orreq.w	r3, r3, #1
 8004dd0:	b913      	cbnz	r3, 8004dd8 <HAL_DMA_Abort+0x1c0>
 8004dd2:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_DMA_Abort+0x1e8>)
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d105      	bne.n	8004de4 <HAL_DMA_Abort+0x1cc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dd8:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8004dda:	6813      	ldr	r3, [r2, #0]
 8004ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8004de4:	6813      	ldr	r3, [r2, #0]
 8004de6:	f023 0301 	bic.w	r3, r3, #1
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	e010      	b.n	8004e10 <HAL_DMA_Abort+0x1f8>
 8004dee:	bf00      	nop
 8004df0:	40020010 	.word	0x40020010
 8004df4:	40020028 	.word	0x40020028
 8004df8:	400204b8 	.word	0x400204b8
 8004dfc:	58025408 	.word	0x58025408
 8004e00:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e04:	f7ff f816 	bl	8003e34 <HAL_GetTick>
 8004e08:	1b00      	subs	r0, r0, r4
 8004e0a:	2805      	cmp	r0, #5
 8004e0c:	f200 80f0 	bhi.w	8004ff0 <HAL_DMA_Abort+0x3d8>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	07db      	lsls	r3, r3, #31
 8004e14:	d4f6      	bmi.n	8004e04 <HAL_DMA_Abort+0x1ec>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e16:	6832      	ldr	r2, [r6, #0]
 8004e18:	4b83      	ldr	r3, [pc, #524]	; (8005028 <HAL_DMA_Abort+0x410>)
 8004e1a:	4884      	ldr	r0, [pc, #528]	; (800502c <HAL_DMA_Abort+0x414>)
 8004e1c:	4984      	ldr	r1, [pc, #528]	; (8005030 <HAL_DMA_Abort+0x418>)
 8004e1e:	4282      	cmp	r2, r0
 8004e20:	bf18      	it	ne
 8004e22:	429a      	cmpne	r2, r3
 8004e24:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004e28:	bf0c      	ite	eq
 8004e2a:	2301      	moveq	r3, #1
 8004e2c:	2300      	movne	r3, #0
 8004e2e:	428a      	cmp	r2, r1
 8004e30:	bf08      	it	eq
 8004e32:	f043 0301 	orreq.w	r3, r3, #1
 8004e36:	3130      	adds	r1, #48	; 0x30
 8004e38:	4282      	cmp	r2, r0
 8004e3a:	bf08      	it	eq
 8004e3c:	f043 0301 	orreq.w	r3, r3, #1
 8004e40:	3030      	adds	r0, #48	; 0x30
 8004e42:	428a      	cmp	r2, r1
 8004e44:	bf08      	it	eq
 8004e46:	f043 0301 	orreq.w	r3, r3, #1
 8004e4a:	3130      	adds	r1, #48	; 0x30
 8004e4c:	4282      	cmp	r2, r0
 8004e4e:	bf08      	it	eq
 8004e50:	f043 0301 	orreq.w	r3, r3, #1
 8004e54:	3030      	adds	r0, #48	; 0x30
 8004e56:	428a      	cmp	r2, r1
 8004e58:	bf08      	it	eq
 8004e5a:	f043 0301 	orreq.w	r3, r3, #1
 8004e5e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004e62:	4282      	cmp	r2, r0
 8004e64:	bf08      	it	eq
 8004e66:	f043 0301 	orreq.w	r3, r3, #1
 8004e6a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004e6e:	428a      	cmp	r2, r1
 8004e70:	bf08      	it	eq
 8004e72:	f043 0301 	orreq.w	r3, r3, #1
 8004e76:	3130      	adds	r1, #48	; 0x30
 8004e78:	4282      	cmp	r2, r0
 8004e7a:	bf08      	it	eq
 8004e7c:	f043 0301 	orreq.w	r3, r3, #1
 8004e80:	3030      	adds	r0, #48	; 0x30
 8004e82:	428a      	cmp	r2, r1
 8004e84:	bf08      	it	eq
 8004e86:	f043 0301 	orreq.w	r3, r3, #1
 8004e8a:	3130      	adds	r1, #48	; 0x30
 8004e8c:	4282      	cmp	r2, r0
 8004e8e:	bf08      	it	eq
 8004e90:	f043 0301 	orreq.w	r3, r3, #1
 8004e94:	3030      	adds	r0, #48	; 0x30
 8004e96:	428a      	cmp	r2, r1
 8004e98:	bf08      	it	eq
 8004e9a:	f043 0301 	orreq.w	r3, r3, #1
 8004e9e:	3130      	adds	r1, #48	; 0x30
 8004ea0:	4282      	cmp	r2, r0
 8004ea2:	bf08      	it	eq
 8004ea4:	f043 0301 	orreq.w	r3, r3, #1
 8004ea8:	428a      	cmp	r2, r1
 8004eaa:	bf08      	it	eq
 8004eac:	f043 0301 	orreq.w	r3, r3, #1
 8004eb0:	b91b      	cbnz	r3, 8004eba <HAL_DMA_Abort+0x2a2>
 8004eb2:	4b60      	ldr	r3, [pc, #384]	; (8005034 <HAL_DMA_Abort+0x41c>)
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	f040 80a7 	bne.w	8005008 <HAL_DMA_Abort+0x3f0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eba:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8004ebc:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ebe:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ec0:	f002 021f 	and.w	r2, r2, #31
 8004ec4:	4093      	lsls	r3, r2
 8004ec6:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ec8:	6832      	ldr	r2, [r6, #0]
 8004eca:	4b57      	ldr	r3, [pc, #348]	; (8005028 <HAL_DMA_Abort+0x410>)
 8004ecc:	4857      	ldr	r0, [pc, #348]	; (800502c <HAL_DMA_Abort+0x414>)
 8004ece:	4958      	ldr	r1, [pc, #352]	; (8005030 <HAL_DMA_Abort+0x418>)
 8004ed0:	4282      	cmp	r2, r0
 8004ed2:	bf18      	it	ne
 8004ed4:	429a      	cmpne	r2, r3
 8004ed6:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	428a      	cmp	r2, r1
 8004ee2:	bf08      	it	eq
 8004ee4:	f043 0301 	orreq.w	r3, r3, #1
 8004ee8:	3130      	adds	r1, #48	; 0x30
 8004eea:	4282      	cmp	r2, r0
 8004eec:	bf08      	it	eq
 8004eee:	f043 0301 	orreq.w	r3, r3, #1
 8004ef2:	3030      	adds	r0, #48	; 0x30
 8004ef4:	428a      	cmp	r2, r1
 8004ef6:	bf08      	it	eq
 8004ef8:	f043 0301 	orreq.w	r3, r3, #1
 8004efc:	3130      	adds	r1, #48	; 0x30
 8004efe:	4282      	cmp	r2, r0
 8004f00:	bf08      	it	eq
 8004f02:	f043 0301 	orreq.w	r3, r3, #1
 8004f06:	3030      	adds	r0, #48	; 0x30
 8004f08:	428a      	cmp	r2, r1
 8004f0a:	bf08      	it	eq
 8004f0c:	f043 0301 	orreq.w	r3, r3, #1
 8004f10:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004f14:	4282      	cmp	r2, r0
 8004f16:	bf08      	it	eq
 8004f18:	f043 0301 	orreq.w	r3, r3, #1
 8004f1c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004f20:	428a      	cmp	r2, r1
 8004f22:	bf08      	it	eq
 8004f24:	f043 0301 	orreq.w	r3, r3, #1
 8004f28:	3130      	adds	r1, #48	; 0x30
 8004f2a:	4282      	cmp	r2, r0
 8004f2c:	bf08      	it	eq
 8004f2e:	f043 0301 	orreq.w	r3, r3, #1
 8004f32:	3030      	adds	r0, #48	; 0x30
 8004f34:	428a      	cmp	r2, r1
 8004f36:	bf08      	it	eq
 8004f38:	f043 0301 	orreq.w	r3, r3, #1
 8004f3c:	3130      	adds	r1, #48	; 0x30
 8004f3e:	4282      	cmp	r2, r0
 8004f40:	bf08      	it	eq
 8004f42:	f043 0301 	orreq.w	r3, r3, #1
 8004f46:	3030      	adds	r0, #48	; 0x30
 8004f48:	428a      	cmp	r2, r1
 8004f4a:	bf08      	it	eq
 8004f4c:	f043 0301 	orreq.w	r3, r3, #1
 8004f50:	3130      	adds	r1, #48	; 0x30
 8004f52:	4282      	cmp	r2, r0
 8004f54:	bf08      	it	eq
 8004f56:	f043 0301 	orreq.w	r3, r3, #1
 8004f5a:	3030      	adds	r0, #48	; 0x30
 8004f5c:	428a      	cmp	r2, r1
 8004f5e:	bf08      	it	eq
 8004f60:	f043 0301 	orreq.w	r3, r3, #1
 8004f64:	4934      	ldr	r1, [pc, #208]	; (8005038 <HAL_DMA_Abort+0x420>)
 8004f66:	4282      	cmp	r2, r0
 8004f68:	bf08      	it	eq
 8004f6a:	f043 0301 	orreq.w	r3, r3, #1
 8004f6e:	4833      	ldr	r0, [pc, #204]	; (800503c <HAL_DMA_Abort+0x424>)
 8004f70:	428a      	cmp	r2, r1
 8004f72:	bf08      	it	eq
 8004f74:	f043 0301 	orreq.w	r3, r3, #1
 8004f78:	3128      	adds	r1, #40	; 0x28
 8004f7a:	4282      	cmp	r2, r0
 8004f7c:	bf08      	it	eq
 8004f7e:	f043 0301 	orreq.w	r3, r3, #1
 8004f82:	3028      	adds	r0, #40	; 0x28
 8004f84:	428a      	cmp	r2, r1
 8004f86:	bf08      	it	eq
 8004f88:	f043 0301 	orreq.w	r3, r3, #1
 8004f8c:	3128      	adds	r1, #40	; 0x28
 8004f8e:	4282      	cmp	r2, r0
 8004f90:	bf08      	it	eq
 8004f92:	f043 0301 	orreq.w	r3, r3, #1
 8004f96:	3028      	adds	r0, #40	; 0x28
 8004f98:	428a      	cmp	r2, r1
 8004f9a:	bf08      	it	eq
 8004f9c:	f043 0301 	orreq.w	r3, r3, #1
 8004fa0:	3128      	adds	r1, #40	; 0x28
 8004fa2:	4282      	cmp	r2, r0
 8004fa4:	bf08      	it	eq
 8004fa6:	f043 0301 	orreq.w	r3, r3, #1
 8004faa:	428a      	cmp	r2, r1
 8004fac:	bf08      	it	eq
 8004fae:	f043 0301 	orreq.w	r3, r3, #1
 8004fb2:	b913      	cbnz	r3, 8004fba <HAL_DMA_Abort+0x3a2>
 8004fb4:	4b22      	ldr	r3, [pc, #136]	; (8005040 <HAL_DMA_Abort+0x428>)
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d10b      	bne.n	8004fd2 <HAL_DMA_Abort+0x3ba>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fba:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
 8004fbe:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8004fc0:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8004fc2:	b133      	cbz	r3, 8004fd2 <HAL_DMA_Abort+0x3ba>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fca:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fcc:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
 8004fd0:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8004fd2:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004fd4:	2201      	movs	r2, #1
  return HAL_OK;
 8004fd6:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8004fd8:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004fdc:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8004fe0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fe2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8004fe4:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004fe6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fe8:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004fea:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ff0:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ff2:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8004ff4:	2300      	movs	r3, #0
        return HAL_ERROR;
 8004ff6:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ff8:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004ffa:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ffe:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
 8005002:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005004:	2001      	movs	r0, #1
}
 8005006:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005008:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 800500a:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800500c:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800500e:	f002 021f 	and.w	r2, r2, #31
 8005012:	4093      	lsls	r3, r2
 8005014:	604b      	str	r3, [r1, #4]
 8005016:	e757      	b.n	8004ec8 <HAL_DMA_Abort+0x2b0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005018:	6813      	ldr	r3, [r2, #0]
 800501a:	f023 030e 	bic.w	r3, r3, #14
 800501e:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005020:	6832      	ldr	r2, [r6, #0]
 8005022:	4615      	mov	r5, r2
 8005024:	e661      	b.n	8004cea <HAL_DMA_Abort+0xd2>
 8005026:	bf00      	nop
 8005028:	40020010 	.word	0x40020010
 800502c:	40020028 	.word	0x40020028
 8005030:	40020040 	.word	0x40020040
 8005034:	400204b8 	.word	0x400204b8
 8005038:	58025408 	.word	0x58025408
 800503c:	5802541c 	.word	0x5802541c
 8005040:	58025494 	.word	0x58025494

08005044 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005044:	2800      	cmp	r0, #0
 8005046:	d065      	beq.n	8005114 <HAL_DMA_Abort_IT+0xd0>
{
 8005048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800504c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8005050:	4603      	mov	r3, r0
 8005052:	2a02      	cmp	r2, #2
 8005054:	d159      	bne.n	800510a <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005056:	6801      	ldr	r1, [r0, #0]
 8005058:	4883      	ldr	r0, [pc, #524]	; (8005268 <HAL_DMA_Abort_IT+0x224>)
 800505a:	4281      	cmp	r1, r0
 800505c:	d04b      	beq.n	80050f6 <HAL_DMA_Abort_IT+0xb2>
 800505e:	4c83      	ldr	r4, [pc, #524]	; (800526c <HAL_DMA_Abort_IT+0x228>)
 8005060:	42a1      	cmp	r1, r4
 8005062:	d048      	beq.n	80050f6 <HAL_DMA_Abort_IT+0xb2>
 8005064:	f8df a228 	ldr.w	sl, [pc, #552]	; 8005290 <HAL_DMA_Abort_IT+0x24c>
 8005068:	f8df b214 	ldr.w	fp, [pc, #532]	; 8005280 <HAL_DMA_Abort_IT+0x23c>
 800506c:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8005294 <HAL_DMA_Abort_IT+0x250>
 8005070:	4559      	cmp	r1, fp
 8005072:	bf18      	it	ne
 8005074:	4551      	cmpne	r1, sl
 8005076:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8005298 <HAL_DMA_Abort_IT+0x254>
 800507a:	f8df e220 	ldr.w	lr, [pc, #544]	; 800529c <HAL_DMA_Abort_IT+0x258>
 800507e:	bf0c      	ite	eq
 8005080:	2201      	moveq	r2, #1
 8005082:	2200      	movne	r2, #0
 8005084:	f8df c218 	ldr.w	ip, [pc, #536]	; 80052a0 <HAL_DMA_Abort_IT+0x25c>
 8005088:	4549      	cmp	r1, r9
 800508a:	bf08      	it	eq
 800508c:	f042 0201 	orreq.w	r2, r2, #1
 8005090:	4d77      	ldr	r5, [pc, #476]	; (8005270 <HAL_DMA_Abort_IT+0x22c>)
 8005092:	4f78      	ldr	r7, [pc, #480]	; (8005274 <HAL_DMA_Abort_IT+0x230>)
 8005094:	4541      	cmp	r1, r8
 8005096:	bf08      	it	eq
 8005098:	f042 0201 	orreq.w	r2, r2, #1
 800509c:	4e76      	ldr	r6, [pc, #472]	; (8005278 <HAL_DMA_Abort_IT+0x234>)
 800509e:	4571      	cmp	r1, lr
 80050a0:	bf08      	it	eq
 80050a2:	f042 0201 	orreq.w	r2, r2, #1
 80050a6:	4561      	cmp	r1, ip
 80050a8:	bf08      	it	eq
 80050aa:	f042 0201 	orreq.w	r2, r2, #1
 80050ae:	42a9      	cmp	r1, r5
 80050b0:	bf08      	it	eq
 80050b2:	f042 0201 	orreq.w	r2, r2, #1
 80050b6:	3518      	adds	r5, #24
 80050b8:	42a9      	cmp	r1, r5
 80050ba:	bf08      	it	eq
 80050bc:	f042 0201 	orreq.w	r2, r2, #1
 80050c0:	3518      	adds	r5, #24
 80050c2:	42a9      	cmp	r1, r5
 80050c4:	bf08      	it	eq
 80050c6:	f042 0201 	orreq.w	r2, r2, #1
 80050ca:	3518      	adds	r5, #24
 80050cc:	42a9      	cmp	r1, r5
 80050ce:	bf08      	it	eq
 80050d0:	f042 0201 	orreq.w	r2, r2, #1
 80050d4:	3548      	adds	r5, #72	; 0x48
 80050d6:	42b9      	cmp	r1, r7
 80050d8:	bf08      	it	eq
 80050da:	f042 0201 	orreq.w	r2, r2, #1
 80050de:	42b1      	cmp	r1, r6
 80050e0:	bf08      	it	eq
 80050e2:	f042 0201 	orreq.w	r2, r2, #1
 80050e6:	42a9      	cmp	r1, r5
 80050e8:	bf08      	it	eq
 80050ea:	f042 0201 	orreq.w	r2, r2, #1
 80050ee:	b912      	cbnz	r2, 80050f6 <HAL_DMA_Abort_IT+0xb2>
 80050f0:	4a62      	ldr	r2, [pc, #392]	; (800527c <HAL_DMA_Abort_IT+0x238>)
 80050f2:	4291      	cmp	r1, r2
 80050f4:	d110      	bne.n	8005118 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 80050f6:	2204      	movs	r2, #4
  return HAL_OK;
 80050f8:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80050fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80050fe:	680b      	ldr	r3, [r1, #0]
 8005100:	f023 0301 	bic.w	r3, r3, #1
 8005104:	600b      	str	r3, [r1, #0]
}
 8005106:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800510a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800510c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
}
 8005110:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8005114:	2001      	movs	r0, #1
}
 8005116:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005118:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800511a:	4c54      	ldr	r4, [pc, #336]	; (800526c <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800511c:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005120:	4857      	ldr	r0, [pc, #348]	; (8005280 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005122:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8005124:	6819      	ldr	r1, [r3, #0]
 8005126:	680a      	ldr	r2, [r1, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800512e:	4a4e      	ldr	r2, [pc, #312]	; (8005268 <HAL_DMA_Abort_IT+0x224>)
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	42a1      	cmp	r1, r4
 8005134:	bf18      	it	ne
 8005136:	4291      	cmpne	r1, r2
 8005138:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800513c:	bf0c      	ite	eq
 800513e:	2201      	moveq	r2, #1
 8005140:	2200      	movne	r2, #0
 8005142:	4281      	cmp	r1, r0
 8005144:	bf08      	it	eq
 8005146:	f042 0201 	orreq.w	r2, r2, #1
 800514a:	3030      	adds	r0, #48	; 0x30
 800514c:	42a1      	cmp	r1, r4
 800514e:	bf08      	it	eq
 8005150:	f042 0201 	orreq.w	r2, r2, #1
 8005154:	3430      	adds	r4, #48	; 0x30
 8005156:	4281      	cmp	r1, r0
 8005158:	bf08      	it	eq
 800515a:	f042 0201 	orreq.w	r2, r2, #1
 800515e:	3030      	adds	r0, #48	; 0x30
 8005160:	42a1      	cmp	r1, r4
 8005162:	bf08      	it	eq
 8005164:	f042 0201 	orreq.w	r2, r2, #1
 8005168:	3430      	adds	r4, #48	; 0x30
 800516a:	4281      	cmp	r1, r0
 800516c:	bf08      	it	eq
 800516e:	f042 0201 	orreq.w	r2, r2, #1
 8005172:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005176:	42a1      	cmp	r1, r4
 8005178:	bf08      	it	eq
 800517a:	f042 0201 	orreq.w	r2, r2, #1
 800517e:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8005182:	4281      	cmp	r1, r0
 8005184:	bf08      	it	eq
 8005186:	f042 0201 	orreq.w	r2, r2, #1
 800518a:	3030      	adds	r0, #48	; 0x30
 800518c:	42a1      	cmp	r1, r4
 800518e:	bf08      	it	eq
 8005190:	f042 0201 	orreq.w	r2, r2, #1
 8005194:	3430      	adds	r4, #48	; 0x30
 8005196:	4281      	cmp	r1, r0
 8005198:	bf08      	it	eq
 800519a:	f042 0201 	orreq.w	r2, r2, #1
 800519e:	3030      	adds	r0, #48	; 0x30
 80051a0:	42a1      	cmp	r1, r4
 80051a2:	bf08      	it	eq
 80051a4:	f042 0201 	orreq.w	r2, r2, #1
 80051a8:	3430      	adds	r4, #48	; 0x30
 80051aa:	4281      	cmp	r1, r0
 80051ac:	bf08      	it	eq
 80051ae:	f042 0201 	orreq.w	r2, r2, #1
 80051b2:	3030      	adds	r0, #48	; 0x30
 80051b4:	42a1      	cmp	r1, r4
 80051b6:	bf08      	it	eq
 80051b8:	f042 0201 	orreq.w	r2, r2, #1
 80051bc:	3430      	adds	r4, #48	; 0x30
 80051be:	4281      	cmp	r1, r0
 80051c0:	bf08      	it	eq
 80051c2:	f042 0201 	orreq.w	r2, r2, #1
 80051c6:	482f      	ldr	r0, [pc, #188]	; (8005284 <HAL_DMA_Abort_IT+0x240>)
 80051c8:	42a1      	cmp	r1, r4
 80051ca:	bf08      	it	eq
 80051cc:	f042 0201 	orreq.w	r2, r2, #1
 80051d0:	4c2d      	ldr	r4, [pc, #180]	; (8005288 <HAL_DMA_Abort_IT+0x244>)
 80051d2:	4281      	cmp	r1, r0
 80051d4:	bf08      	it	eq
 80051d6:	f042 0201 	orreq.w	r2, r2, #1
 80051da:	3028      	adds	r0, #40	; 0x28
 80051dc:	42a1      	cmp	r1, r4
 80051de:	bf08      	it	eq
 80051e0:	f042 0201 	orreq.w	r2, r2, #1
 80051e4:	3428      	adds	r4, #40	; 0x28
 80051e6:	4281      	cmp	r1, r0
 80051e8:	bf08      	it	eq
 80051ea:	f042 0201 	orreq.w	r2, r2, #1
 80051ee:	3028      	adds	r0, #40	; 0x28
 80051f0:	42a1      	cmp	r1, r4
 80051f2:	bf08      	it	eq
 80051f4:	f042 0201 	orreq.w	r2, r2, #1
 80051f8:	3428      	adds	r4, #40	; 0x28
 80051fa:	4281      	cmp	r1, r0
 80051fc:	bf08      	it	eq
 80051fe:	f042 0201 	orreq.w	r2, r2, #1
 8005202:	3028      	adds	r0, #40	; 0x28
 8005204:	42a1      	cmp	r1, r4
 8005206:	bf08      	it	eq
 8005208:	f042 0201 	orreq.w	r2, r2, #1
 800520c:	4281      	cmp	r1, r0
 800520e:	bf08      	it	eq
 8005210:	f042 0201 	orreq.w	r2, r2, #1
 8005214:	b912      	cbnz	r2, 800521c <HAL_DMA_Abort_IT+0x1d8>
 8005216:	4a1d      	ldr	r2, [pc, #116]	; (800528c <HAL_DMA_Abort_IT+0x248>)
 8005218:	4291      	cmp	r1, r2
 800521a:	d117      	bne.n	800524c <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800521c:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800521e:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005220:	6801      	ldr	r1, [r0, #0]
 8005222:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005226:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005228:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800522c:	f001 011f 	and.w	r1, r1, #31
 8005230:	408a      	lsls	r2, r1
 8005232:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005234:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8005238:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800523a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800523c:	b132      	cbz	r2, 800524c <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800523e:	6811      	ldr	r1, [r2, #0]
 8005240:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005244:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005246:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 800524a:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800524c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800524e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8005250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8005252:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8005256:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 800525a:	b11a      	cbz	r2, 8005264 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 800525c:	4618      	mov	r0, r3
 800525e:	4790      	blx	r2
  return HAL_OK;
 8005260:	4620      	mov	r0, r4
 8005262:	e755      	b.n	8005110 <HAL_DMA_Abort_IT+0xcc>
 8005264:	4610      	mov	r0, r2
 8005266:	e753      	b.n	8005110 <HAL_DMA_Abort_IT+0xcc>
 8005268:	40020010 	.word	0x40020010
 800526c:	40020028 	.word	0x40020028
 8005270:	40020410 	.word	0x40020410
 8005274:	40020470 	.word	0x40020470
 8005278:	40020488 	.word	0x40020488
 800527c:	400204b8 	.word	0x400204b8
 8005280:	40020040 	.word	0x40020040
 8005284:	58025408 	.word	0x58025408
 8005288:	5802541c 	.word	0x5802541c
 800528c:	58025494 	.word	0x58025494
 8005290:	40020058 	.word	0x40020058
 8005294:	40020070 	.word	0x40020070
 8005298:	40020088 	.word	0x40020088
 800529c:	400200a0 	.word	0x400200a0
 80052a0:	400200b8 	.word	0x400200b8

080052a4 <HAL_DMA_IRQHandler>:
{
 80052a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80052a6:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80052a8:	4b9a      	ldr	r3, [pc, #616]	; (8005514 <HAL_DMA_IRQHandler+0x270>)
{
 80052aa:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052ac:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80052ae:	681f      	ldr	r7, [r3, #0]
{
 80052b0:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80052b2:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80052b4:	6803      	ldr	r3, [r0, #0]
 80052b6:	4a98      	ldr	r2, [pc, #608]	; (8005518 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
 80052b8:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80052ba:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 80052bc:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80052be:	d048      	beq.n	8005352 <HAL_DMA_IRQHandler+0xae>
 80052c0:	3218      	adds	r2, #24
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d045      	beq.n	8005352 <HAL_DMA_IRQHandler+0xae>
 80052c6:	3218      	adds	r2, #24
 80052c8:	4894      	ldr	r0, [pc, #592]	; (800551c <HAL_DMA_IRQHandler+0x278>)
 80052ca:	4283      	cmp	r3, r0
 80052cc:	bf18      	it	ne
 80052ce:	4293      	cmpne	r3, r2
 80052d0:	f100 0018 	add.w	r0, r0, #24
 80052d4:	bf0c      	ite	eq
 80052d6:	2201      	moveq	r2, #1
 80052d8:	2200      	movne	r2, #0
 80052da:	4283      	cmp	r3, r0
 80052dc:	bf08      	it	eq
 80052de:	f042 0201 	orreq.w	r2, r2, #1
 80052e2:	3018      	adds	r0, #24
 80052e4:	4283      	cmp	r3, r0
 80052e6:	bf08      	it	eq
 80052e8:	f042 0201 	orreq.w	r2, r2, #1
 80052ec:	3018      	adds	r0, #24
 80052ee:	4283      	cmp	r3, r0
 80052f0:	bf08      	it	eq
 80052f2:	f042 0201 	orreq.w	r2, r2, #1
 80052f6:	3018      	adds	r0, #24
 80052f8:	4283      	cmp	r3, r0
 80052fa:	bf08      	it	eq
 80052fc:	f042 0201 	orreq.w	r2, r2, #1
 8005300:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8005304:	4283      	cmp	r3, r0
 8005306:	bf08      	it	eq
 8005308:	f042 0201 	orreq.w	r2, r2, #1
 800530c:	3018      	adds	r0, #24
 800530e:	4283      	cmp	r3, r0
 8005310:	bf08      	it	eq
 8005312:	f042 0201 	orreq.w	r2, r2, #1
 8005316:	3018      	adds	r0, #24
 8005318:	4283      	cmp	r3, r0
 800531a:	bf08      	it	eq
 800531c:	f042 0201 	orreq.w	r2, r2, #1
 8005320:	3018      	adds	r0, #24
 8005322:	4283      	cmp	r3, r0
 8005324:	bf08      	it	eq
 8005326:	f042 0201 	orreq.w	r2, r2, #1
 800532a:	3018      	adds	r0, #24
 800532c:	4283      	cmp	r3, r0
 800532e:	bf08      	it	eq
 8005330:	f042 0201 	orreq.w	r2, r2, #1
 8005334:	3018      	adds	r0, #24
 8005336:	4283      	cmp	r3, r0
 8005338:	bf08      	it	eq
 800533a:	f042 0201 	orreq.w	r2, r2, #1
 800533e:	3018      	adds	r0, #24
 8005340:	4283      	cmp	r3, r0
 8005342:	bf08      	it	eq
 8005344:	f042 0201 	orreq.w	r2, r2, #1
 8005348:	b91a      	cbnz	r2, 8005352 <HAL_DMA_IRQHandler+0xae>
 800534a:	4a75      	ldr	r2, [pc, #468]	; (8005520 <HAL_DMA_IRQHandler+0x27c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	f040 8294 	bne.w	800587a <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005352:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
 8005356:	2208      	movs	r2, #8
 8005358:	f00e 011f 	and.w	r1, lr, #31
 800535c:	408a      	lsls	r2, r1
 800535e:	422a      	tst	r2, r5
 8005360:	f040 8193 	bne.w	800568a <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005364:	fa25 f201 	lsr.w	r2, r5, r1
 8005368:	07d2      	lsls	r2, r2, #31
 800536a:	d50e      	bpl.n	800538a <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	0612      	lsls	r2, r2, #24
 8005370:	f140 824d 	bpl.w	800580e <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005374:	2301      	movs	r3, #1
 8005376:	408b      	lsls	r3, r1
 8005378:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800537a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800537c:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005380:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005384:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005388:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800538a:	f04f 0c04 	mov.w	ip, #4
 800538e:	fa0c fc01 	lsl.w	ip, ip, r1
 8005392:	ea1c 0f05 	tst.w	ip, r5
 8005396:	d05f      	beq.n	8005458 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005398:	6822      	ldr	r2, [r4, #0]
 800539a:	485f      	ldr	r0, [pc, #380]	; (8005518 <HAL_DMA_IRQHandler+0x274>)
 800539c:	4b61      	ldr	r3, [pc, #388]	; (8005524 <HAL_DMA_IRQHandler+0x280>)
 800539e:	429a      	cmp	r2, r3
 80053a0:	bf18      	it	ne
 80053a2:	4282      	cmpne	r2, r0
 80053a4:	f103 0318 	add.w	r3, r3, #24
 80053a8:	bf0c      	ite	eq
 80053aa:	2001      	moveq	r0, #1
 80053ac:	2000      	movne	r0, #0
 80053ae:	429a      	cmp	r2, r3
 80053b0:	bf08      	it	eq
 80053b2:	f040 0001 	orreq.w	r0, r0, #1
 80053b6:	3318      	adds	r3, #24
 80053b8:	429a      	cmp	r2, r3
 80053ba:	bf08      	it	eq
 80053bc:	f040 0001 	orreq.w	r0, r0, #1
 80053c0:	3318      	adds	r3, #24
 80053c2:	429a      	cmp	r2, r3
 80053c4:	bf08      	it	eq
 80053c6:	f040 0001 	orreq.w	r0, r0, #1
 80053ca:	3318      	adds	r3, #24
 80053cc:	429a      	cmp	r2, r3
 80053ce:	bf08      	it	eq
 80053d0:	f040 0001 	orreq.w	r0, r0, #1
 80053d4:	3318      	adds	r3, #24
 80053d6:	429a      	cmp	r2, r3
 80053d8:	bf08      	it	eq
 80053da:	f040 0001 	orreq.w	r0, r0, #1
 80053de:	3318      	adds	r3, #24
 80053e0:	429a      	cmp	r2, r3
 80053e2:	bf08      	it	eq
 80053e4:	f040 0001 	orreq.w	r0, r0, #1
 80053e8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80053ec:	429a      	cmp	r2, r3
 80053ee:	bf08      	it	eq
 80053f0:	f040 0001 	orreq.w	r0, r0, #1
 80053f4:	3318      	adds	r3, #24
 80053f6:	429a      	cmp	r2, r3
 80053f8:	bf08      	it	eq
 80053fa:	f040 0001 	orreq.w	r0, r0, #1
 80053fe:	3318      	adds	r3, #24
 8005400:	429a      	cmp	r2, r3
 8005402:	bf08      	it	eq
 8005404:	f040 0001 	orreq.w	r0, r0, #1
 8005408:	3318      	adds	r3, #24
 800540a:	429a      	cmp	r2, r3
 800540c:	bf08      	it	eq
 800540e:	f040 0001 	orreq.w	r0, r0, #1
 8005412:	3318      	adds	r3, #24
 8005414:	429a      	cmp	r2, r3
 8005416:	bf08      	it	eq
 8005418:	f040 0001 	orreq.w	r0, r0, #1
 800541c:	3318      	adds	r3, #24
 800541e:	429a      	cmp	r2, r3
 8005420:	bf08      	it	eq
 8005422:	f040 0001 	orreq.w	r0, r0, #1
 8005426:	3318      	adds	r3, #24
 8005428:	429a      	cmp	r2, r3
 800542a:	bf08      	it	eq
 800542c:	f040 0001 	orreq.w	r0, r0, #1
 8005430:	4613      	mov	r3, r2
 8005432:	b918      	cbnz	r0, 800543c <HAL_DMA_IRQHandler+0x198>
 8005434:	483a      	ldr	r0, [pc, #232]	; (8005520 <HAL_DMA_IRQHandler+0x27c>)
 8005436:	4282      	cmp	r2, r0
 8005438:	f040 825a 	bne.w	80058f0 <HAL_DMA_IRQHandler+0x64c>
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	0790      	lsls	r0, r2, #30
 8005440:	f140 81f1 	bpl.w	8005826 <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005444:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005448:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800544a:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800544e:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005452:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005456:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005458:	f04f 0c10 	mov.w	ip, #16
 800545c:	fa0c fc01 	lsl.w	ip, ip, r1
 8005460:	ea1c 0f05 	tst.w	ip, r5
 8005464:	d075      	beq.n	8005552 <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	482b      	ldr	r0, [pc, #172]	; (8005518 <HAL_DMA_IRQHandler+0x274>)
 800546a:	4b2e      	ldr	r3, [pc, #184]	; (8005524 <HAL_DMA_IRQHandler+0x280>)
 800546c:	429a      	cmp	r2, r3
 800546e:	bf18      	it	ne
 8005470:	4282      	cmpne	r2, r0
 8005472:	f103 0318 	add.w	r3, r3, #24
 8005476:	bf0c      	ite	eq
 8005478:	2001      	moveq	r0, #1
 800547a:	2000      	movne	r0, #0
 800547c:	429a      	cmp	r2, r3
 800547e:	bf08      	it	eq
 8005480:	f040 0001 	orreq.w	r0, r0, #1
 8005484:	3318      	adds	r3, #24
 8005486:	429a      	cmp	r2, r3
 8005488:	bf08      	it	eq
 800548a:	f040 0001 	orreq.w	r0, r0, #1
 800548e:	3318      	adds	r3, #24
 8005490:	429a      	cmp	r2, r3
 8005492:	bf08      	it	eq
 8005494:	f040 0001 	orreq.w	r0, r0, #1
 8005498:	3318      	adds	r3, #24
 800549a:	429a      	cmp	r2, r3
 800549c:	bf08      	it	eq
 800549e:	f040 0001 	orreq.w	r0, r0, #1
 80054a2:	3318      	adds	r3, #24
 80054a4:	429a      	cmp	r2, r3
 80054a6:	bf08      	it	eq
 80054a8:	f040 0001 	orreq.w	r0, r0, #1
 80054ac:	3318      	adds	r3, #24
 80054ae:	429a      	cmp	r2, r3
 80054b0:	bf08      	it	eq
 80054b2:	f040 0001 	orreq.w	r0, r0, #1
 80054b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80054ba:	429a      	cmp	r2, r3
 80054bc:	bf08      	it	eq
 80054be:	f040 0001 	orreq.w	r0, r0, #1
 80054c2:	3318      	adds	r3, #24
 80054c4:	429a      	cmp	r2, r3
 80054c6:	bf08      	it	eq
 80054c8:	f040 0001 	orreq.w	r0, r0, #1
 80054cc:	3318      	adds	r3, #24
 80054ce:	429a      	cmp	r2, r3
 80054d0:	bf08      	it	eq
 80054d2:	f040 0001 	orreq.w	r0, r0, #1
 80054d6:	3318      	adds	r3, #24
 80054d8:	429a      	cmp	r2, r3
 80054da:	bf08      	it	eq
 80054dc:	f040 0001 	orreq.w	r0, r0, #1
 80054e0:	3318      	adds	r3, #24
 80054e2:	429a      	cmp	r2, r3
 80054e4:	bf08      	it	eq
 80054e6:	f040 0001 	orreq.w	r0, r0, #1
 80054ea:	3318      	adds	r3, #24
 80054ec:	429a      	cmp	r2, r3
 80054ee:	bf08      	it	eq
 80054f0:	f040 0001 	orreq.w	r0, r0, #1
 80054f4:	3318      	adds	r3, #24
 80054f6:	429a      	cmp	r2, r3
 80054f8:	bf08      	it	eq
 80054fa:	f040 0001 	orreq.w	r0, r0, #1
 80054fe:	4613      	mov	r3, r2
 8005500:	b918      	cbnz	r0, 800550a <HAL_DMA_IRQHandler+0x266>
 8005502:	4807      	ldr	r0, [pc, #28]	; (8005520 <HAL_DMA_IRQHandler+0x27c>)
 8005504:	4282      	cmp	r2, r0
 8005506:	f040 813c 	bne.w	8005782 <HAL_DMA_IRQHandler+0x4de>
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	0712      	lsls	r2, r2, #28
 800550e:	f140 8177 	bpl.w	8005800 <HAL_DMA_IRQHandler+0x55c>
 8005512:	e009      	b.n	8005528 <HAL_DMA_IRQHandler+0x284>
 8005514:	20000754 	.word	0x20000754
 8005518:	40020010 	.word	0x40020010
 800551c:	40020058 	.word	0x40020058
 8005520:	400204b8 	.word	0x400204b8
 8005524:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005528:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	0350      	lsls	r0, r2, #13
 8005532:	f100 8181 	bmi.w	8005838 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	05d2      	lsls	r2, r2, #23
 800553a:	d403      	bmi.n	8005544 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	f022 0208 	bic.w	r2, r2, #8
 8005542:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005546:	b10b      	cbz	r3, 800554c <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
 8005548:	4620      	mov	r0, r4
 800554a:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800554c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800554e:	f001 011f 	and.w	r1, r1, #31
 8005552:	2320      	movs	r3, #32
 8005554:	fa03 f101 	lsl.w	r1, r3, r1
 8005558:	4229      	tst	r1, r5
 800555a:	d066      	beq.n	800562a <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	4a92      	ldr	r2, [pc, #584]	; (80057a8 <HAL_DMA_IRQHandler+0x504>)
 8005560:	4892      	ldr	r0, [pc, #584]	; (80057ac <HAL_DMA_IRQHandler+0x508>)
 8005562:	4283      	cmp	r3, r0
 8005564:	bf18      	it	ne
 8005566:	4293      	cmpne	r3, r2
 8005568:	f100 0018 	add.w	r0, r0, #24
 800556c:	bf0c      	ite	eq
 800556e:	2201      	moveq	r2, #1
 8005570:	2200      	movne	r2, #0
 8005572:	4283      	cmp	r3, r0
 8005574:	bf08      	it	eq
 8005576:	f042 0201 	orreq.w	r2, r2, #1
 800557a:	3018      	adds	r0, #24
 800557c:	4283      	cmp	r3, r0
 800557e:	bf08      	it	eq
 8005580:	f042 0201 	orreq.w	r2, r2, #1
 8005584:	3018      	adds	r0, #24
 8005586:	4283      	cmp	r3, r0
 8005588:	bf08      	it	eq
 800558a:	f042 0201 	orreq.w	r2, r2, #1
 800558e:	3018      	adds	r0, #24
 8005590:	4283      	cmp	r3, r0
 8005592:	bf08      	it	eq
 8005594:	f042 0201 	orreq.w	r2, r2, #1
 8005598:	3018      	adds	r0, #24
 800559a:	4283      	cmp	r3, r0
 800559c:	bf08      	it	eq
 800559e:	f042 0201 	orreq.w	r2, r2, #1
 80055a2:	3018      	adds	r0, #24
 80055a4:	4283      	cmp	r3, r0
 80055a6:	bf08      	it	eq
 80055a8:	f042 0201 	orreq.w	r2, r2, #1
 80055ac:	f500 7056 	add.w	r0, r0, #856	; 0x358
 80055b0:	4283      	cmp	r3, r0
 80055b2:	bf08      	it	eq
 80055b4:	f042 0201 	orreq.w	r2, r2, #1
 80055b8:	3018      	adds	r0, #24
 80055ba:	4283      	cmp	r3, r0
 80055bc:	bf08      	it	eq
 80055be:	f042 0201 	orreq.w	r2, r2, #1
 80055c2:	3018      	adds	r0, #24
 80055c4:	4283      	cmp	r3, r0
 80055c6:	bf08      	it	eq
 80055c8:	f042 0201 	orreq.w	r2, r2, #1
 80055cc:	3018      	adds	r0, #24
 80055ce:	4283      	cmp	r3, r0
 80055d0:	bf08      	it	eq
 80055d2:	f042 0201 	orreq.w	r2, r2, #1
 80055d6:	3018      	adds	r0, #24
 80055d8:	4283      	cmp	r3, r0
 80055da:	bf08      	it	eq
 80055dc:	f042 0201 	orreq.w	r2, r2, #1
 80055e0:	3018      	adds	r0, #24
 80055e2:	4283      	cmp	r3, r0
 80055e4:	bf08      	it	eq
 80055e6:	f042 0201 	orreq.w	r2, r2, #1
 80055ea:	3018      	adds	r0, #24
 80055ec:	4283      	cmp	r3, r0
 80055ee:	bf08      	it	eq
 80055f0:	f042 0201 	orreq.w	r2, r2, #1
 80055f4:	b91a      	cbnz	r2, 80055fe <HAL_DMA_IRQHandler+0x35a>
 80055f6:	4a6e      	ldr	r2, [pc, #440]	; (80057b0 <HAL_DMA_IRQHandler+0x50c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	f040 80cf 	bne.w	800579c <HAL_DMA_IRQHandler+0x4f8>
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	06dd      	lsls	r5, r3, #27
 8005602:	d512      	bpl.n	800562a <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005604:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005606:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800560a:	2b04      	cmp	r3, #4
 800560c:	f000 80d4 	beq.w	80057b8 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	0352      	lsls	r2, r2, #13
 8005616:	f140 8118 	bpl.w	800584a <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	031e      	lsls	r6, r3, #12
 800561e:	f140 8123 	bpl.w	8005868 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
 8005622:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005624:	b10b      	cbz	r3, 800562a <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
 8005626:	4620      	mov	r0, r4
 8005628:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800562a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80e5 	beq.w	80057fc <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005632:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005634:	07dd      	lsls	r5, r3, #31
 8005636:	d51f      	bpl.n	8005678 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
 8005638:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 800563a:	2104      	movs	r1, #4
 800563c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8005640:	6813      	ldr	r3, [r2, #0]
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005648:	4a5a      	ldr	r2, [pc, #360]	; (80057b4 <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800564a:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800564c:	fba2 7207 	umull	r7, r2, r2, r7
 8005650:	0a92      	lsrs	r2, r2, #10
 8005652:	e002      	b.n	800565a <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005654:	680b      	ldr	r3, [r1, #0]
 8005656:	07d8      	lsls	r0, r3, #31
 8005658:	d504      	bpl.n	8005664 <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
 800565a:	9b01      	ldr	r3, [sp, #4]
 800565c:	3301      	adds	r3, #1
 800565e:	4293      	cmp	r3, r2
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	d9f7      	bls.n	8005654 <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005664:	680b      	ldr	r3, [r1, #0]
 8005666:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8005668:	bf4c      	ite	mi
 800566a:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800566c:	2301      	movpl	r3, #1
 800566e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005672:	2300      	movs	r3, #0
 8005674:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8005678:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800567a:	2b00      	cmp	r3, #0
 800567c:	f000 80be 	beq.w	80057fc <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
 8005680:	4620      	mov	r0, r4
}
 8005682:	b003      	add	sp, #12
 8005684:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8005688:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	0752      	lsls	r2, r2, #29
 800568e:	d511      	bpl.n	80056b4 <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	f022 0204 	bic.w	r2, r2, #4
 8005696:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005698:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800569a:	f003 021f 	and.w	r2, r3, #31
 800569e:	2308      	movs	r3, #8
 80056a0:	4093      	lsls	r3, r2
 80056a2:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056a6:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056aa:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056ae:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056b2:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056b4:	fa25 f301 	lsr.w	r3, r5, r1
 80056b8:	07d8      	lsls	r0, r3, #31
 80056ba:	f57f ae66 	bpl.w	800538a <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	4839      	ldr	r0, [pc, #228]	; (80057a8 <HAL_DMA_IRQHandler+0x504>)
 80056c2:	4b3a      	ldr	r3, [pc, #232]	; (80057ac <HAL_DMA_IRQHandler+0x508>)
 80056c4:	429a      	cmp	r2, r3
 80056c6:	bf18      	it	ne
 80056c8:	4282      	cmpne	r2, r0
 80056ca:	f103 0318 	add.w	r3, r3, #24
 80056ce:	bf0c      	ite	eq
 80056d0:	2001      	moveq	r0, #1
 80056d2:	2000      	movne	r0, #0
 80056d4:	429a      	cmp	r2, r3
 80056d6:	bf08      	it	eq
 80056d8:	f040 0001 	orreq.w	r0, r0, #1
 80056dc:	3318      	adds	r3, #24
 80056de:	429a      	cmp	r2, r3
 80056e0:	bf08      	it	eq
 80056e2:	f040 0001 	orreq.w	r0, r0, #1
 80056e6:	3318      	adds	r3, #24
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bf08      	it	eq
 80056ec:	f040 0001 	orreq.w	r0, r0, #1
 80056f0:	3318      	adds	r3, #24
 80056f2:	429a      	cmp	r2, r3
 80056f4:	bf08      	it	eq
 80056f6:	f040 0001 	orreq.w	r0, r0, #1
 80056fa:	3318      	adds	r3, #24
 80056fc:	429a      	cmp	r2, r3
 80056fe:	bf08      	it	eq
 8005700:	f040 0001 	orreq.w	r0, r0, #1
 8005704:	3318      	adds	r3, #24
 8005706:	429a      	cmp	r2, r3
 8005708:	bf08      	it	eq
 800570a:	f040 0001 	orreq.w	r0, r0, #1
 800570e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005712:	429a      	cmp	r2, r3
 8005714:	bf08      	it	eq
 8005716:	f040 0001 	orreq.w	r0, r0, #1
 800571a:	3318      	adds	r3, #24
 800571c:	429a      	cmp	r2, r3
 800571e:	bf08      	it	eq
 8005720:	f040 0001 	orreq.w	r0, r0, #1
 8005724:	3318      	adds	r3, #24
 8005726:	429a      	cmp	r2, r3
 8005728:	bf08      	it	eq
 800572a:	f040 0001 	orreq.w	r0, r0, #1
 800572e:	3318      	adds	r3, #24
 8005730:	429a      	cmp	r2, r3
 8005732:	bf08      	it	eq
 8005734:	f040 0001 	orreq.w	r0, r0, #1
 8005738:	3318      	adds	r3, #24
 800573a:	429a      	cmp	r2, r3
 800573c:	bf08      	it	eq
 800573e:	f040 0001 	orreq.w	r0, r0, #1
 8005742:	3318      	adds	r3, #24
 8005744:	429a      	cmp	r2, r3
 8005746:	bf08      	it	eq
 8005748:	f040 0001 	orreq.w	r0, r0, #1
 800574c:	3318      	adds	r3, #24
 800574e:	429a      	cmp	r2, r3
 8005750:	bf08      	it	eq
 8005752:	f040 0001 	orreq.w	r0, r0, #1
 8005756:	4613      	mov	r3, r2
 8005758:	2800      	cmp	r0, #0
 800575a:	f47f ae07 	bne.w	800536c <HAL_DMA_IRQHandler+0xc8>
 800575e:	4814      	ldr	r0, [pc, #80]	; (80057b0 <HAL_DMA_IRQHandler+0x50c>)
 8005760:	4282      	cmp	r2, r0
 8005762:	f43f ae03 	beq.w	800536c <HAL_DMA_IRQHandler+0xc8>
 8005766:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005768:	2304      	movs	r3, #4
 800576a:	408b      	lsls	r3, r1
 800576c:	422b      	tst	r3, r5
 800576e:	f040 80bf 	bne.w	80058f0 <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005772:	f04f 0c10 	mov.w	ip, #16
 8005776:	fa0c fc01 	lsl.w	ip, ip, r1
 800577a:	ea15 0f0c 	tst.w	r5, ip
 800577e:	f43f aee8 	beq.w	8005552 <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	075b      	lsls	r3, r3, #29
 8005786:	f53f aecf 	bmi.w	8005528 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800578a:	f00e 0e1f 	and.w	lr, lr, #31
 800578e:	2120      	movs	r1, #32
 8005790:	fa01 f10e 	lsl.w	r1, r1, lr
 8005794:	420d      	tst	r5, r1
 8005796:	f43f af48 	beq.w	800562a <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800579a:	4613      	mov	r3, r2
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	0798      	lsls	r0, r3, #30
 80057a0:	f57f af43 	bpl.w	800562a <HAL_DMA_IRQHandler+0x386>
 80057a4:	e72e      	b.n	8005604 <HAL_DMA_IRQHandler+0x360>
 80057a6:	bf00      	nop
 80057a8:	40020010 	.word	0x40020010
 80057ac:	40020028 	.word	0x40020028
 80057b0:	400204b8 	.word	0x400204b8
 80057b4:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	f023 0316 	bic.w	r3, r3, #22
 80057c0:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80057c2:	6822      	ldr	r2, [r4, #0]
 80057c4:	6953      	ldr	r3, [r2, #20]
 80057c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ca:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04f      	beq.n	8005872 <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	6813      	ldr	r3, [r2, #0]
 80057d6:	f023 0308 	bic.w	r3, r3, #8
 80057da:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057dc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80057de:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80057e0:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057e2:	f002 021f 	and.w	r2, r2, #31
 80057e6:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 80057e8:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057ea:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
 80057ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 80057ee:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80057f2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f47f af42 	bne.w	8005680 <HAL_DMA_IRQHandler+0x3dc>
}
 80057fc:	b003      	add	sp, #12
 80057fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005800:	2220      	movs	r2, #32
 8005802:	fa02 f101 	lsl.w	r1, r2, r1
 8005806:	420d      	tst	r5, r1
 8005808:	f47f aef9 	bne.w	80055fe <HAL_DMA_IRQHandler+0x35a>
 800580c:	e70d      	b.n	800562a <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800580e:	f04f 0c04 	mov.w	ip, #4
 8005812:	fa0c fc01 	lsl.w	ip, ip, r1
 8005816:	ea15 0f0c 	tst.w	r5, ip
 800581a:	f43f ae1d 	beq.w	8005458 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	0790      	lsls	r0, r2, #30
 8005822:	f53f ae0f 	bmi.w	8005444 <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005826:	f04f 0c10 	mov.w	ip, #16
 800582a:	fa0c fc01 	lsl.w	ip, ip, r1
 800582e:	ea15 0f0c 	tst.w	r5, ip
 8005832:	f47f ae6a 	bne.w	800550a <HAL_DMA_IRQHandler+0x266>
 8005836:	e68c      	b.n	8005552 <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	0319      	lsls	r1, r3, #12
 800583c:	f57f ae82 	bpl.w	8005544 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005840:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005842:	2b00      	cmp	r3, #0
 8005844:	f47f ae80 	bne.w	8005548 <HAL_DMA_IRQHandler+0x2a4>
 8005848:	e680      	b.n	800554c <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8005850:	f47f aee7 	bne.w	8005622 <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005854:	6819      	ldr	r1, [r3, #0]
 8005856:	f021 0110 	bic.w	r1, r1, #16
 800585a:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800585c:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 800585e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005862:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8005866:	e6dc      	b.n	8005622 <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
 8005868:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800586a:	2b00      	cmp	r3, #0
 800586c:	f47f aedb 	bne.w	8005626 <HAL_DMA_IRQHandler+0x382>
 8005870:	e6db      	b.n	800562a <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005872:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ac      	bne.n	80057d2 <HAL_DMA_IRQHandler+0x52e>
 8005878:	e7b0      	b.n	80057dc <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800587a:	4a9b      	ldr	r2, [pc, #620]	; (8005ae8 <HAL_DMA_IRQHandler+0x844>)
 800587c:	489b      	ldr	r0, [pc, #620]	; (8005aec <HAL_DMA_IRQHandler+0x848>)
 800587e:	4283      	cmp	r3, r0
 8005880:	bf18      	it	ne
 8005882:	4293      	cmpne	r3, r2
 8005884:	f100 0014 	add.w	r0, r0, #20
 8005888:	bf0c      	ite	eq
 800588a:	2201      	moveq	r2, #1
 800588c:	2200      	movne	r2, #0
 800588e:	4283      	cmp	r3, r0
 8005890:	bf08      	it	eq
 8005892:	f042 0201 	orreq.w	r2, r2, #1
 8005896:	3014      	adds	r0, #20
 8005898:	4283      	cmp	r3, r0
 800589a:	bf08      	it	eq
 800589c:	f042 0201 	orreq.w	r2, r2, #1
 80058a0:	3014      	adds	r0, #20
 80058a2:	4283      	cmp	r3, r0
 80058a4:	bf08      	it	eq
 80058a6:	f042 0201 	orreq.w	r2, r2, #1
 80058aa:	3014      	adds	r0, #20
 80058ac:	4283      	cmp	r3, r0
 80058ae:	bf08      	it	eq
 80058b0:	f042 0201 	orreq.w	r2, r2, #1
 80058b4:	3014      	adds	r0, #20
 80058b6:	4283      	cmp	r3, r0
 80058b8:	bf08      	it	eq
 80058ba:	f042 0201 	orreq.w	r2, r2, #1
 80058be:	b912      	cbnz	r2, 80058c6 <HAL_DMA_IRQHandler+0x622>
 80058c0:	4a8b      	ldr	r2, [pc, #556]	; (8005af0 <HAL_DMA_IRQHandler+0x84c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d19a      	bne.n	80057fc <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80058c6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80058c8:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80058ca:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80058cc:	f000 001f 	and.w	r0, r0, #31
 80058d0:	4085      	lsls	r5, r0
 80058d2:	420d      	tst	r5, r1
 80058d4:	d018      	beq.n	8005908 <HAL_DMA_IRQHandler+0x664>
 80058d6:	0757      	lsls	r7, r2, #29
 80058d8:	d516      	bpl.n	8005908 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058da:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80058dc:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058de:	d544      	bpl.n	800596a <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058e0:	03d2      	lsls	r2, r2, #15
 80058e2:	f100 8099 	bmi.w	8005a18 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f47f aec9 	bne.w	8005680 <HAL_DMA_IRQHandler+0x3dc>
 80058ee:	e785      	b.n	80057fc <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058f0:	f00e 011f 	and.w	r1, lr, #31
 80058f4:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80058f8:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058fa:	fa0c fc01 	lsl.w	ip, ip, r1
 80058fe:	ea15 0f0c 	tst.w	r5, ip
 8005902:	f47f af3e 	bne.w	8005782 <HAL_DMA_IRQHandler+0x4de>
 8005906:	e624      	b.n	8005552 <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005908:	2502      	movs	r5, #2
 800590a:	4085      	lsls	r5, r0
 800590c:	420d      	tst	r5, r1
 800590e:	d00d      	beq.n	800592c <HAL_DMA_IRQHandler+0x688>
 8005910:	0797      	lsls	r7, r2, #30
 8005912:	d50b      	bpl.n	800592c <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005914:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005916:	0416      	lsls	r6, r2, #16
 8005918:	f140 8083 	bpl.w	8005a22 <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800591c:	03d5      	lsls	r5, r2, #15
 800591e:	f100 80dd 	bmi.w	8005adc <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
 8005922:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005924:	2b00      	cmp	r3, #0
 8005926:	f47f aeab 	bne.w	8005680 <HAL_DMA_IRQHandler+0x3dc>
 800592a:	e767      	b.n	80057fc <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800592c:	2508      	movs	r5, #8
 800592e:	fa05 f000 	lsl.w	r0, r5, r0
 8005932:	4208      	tst	r0, r1
 8005934:	f43f af62 	beq.w	80057fc <HAL_DMA_IRQHandler+0x558>
 8005938:	0711      	lsls	r1, r2, #28
 800593a:	f57f af5f 	bpl.w	80057fc <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800593e:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005940:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005942:	f021 010e 	bic.w	r1, r1, #14
 8005946:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8005948:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800594a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
 8005956:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005958:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800595a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800595e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8005962:	2b00      	cmp	r3, #0
 8005964:	f47f ae8c 	bne.w	8005680 <HAL_DMA_IRQHandler+0x3dc>
 8005968:	e748      	b.n	80057fc <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800596a:	0693      	lsls	r3, r2, #26
 800596c:	d454      	bmi.n	8005a18 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800596e:	6822      	ldr	r2, [r4, #0]
 8005970:	4b60      	ldr	r3, [pc, #384]	; (8005af4 <HAL_DMA_IRQHandler+0x850>)
 8005972:	4861      	ldr	r0, [pc, #388]	; (8005af8 <HAL_DMA_IRQHandler+0x854>)
 8005974:	4961      	ldr	r1, [pc, #388]	; (8005afc <HAL_DMA_IRQHandler+0x858>)
 8005976:	4282      	cmp	r2, r0
 8005978:	bf18      	it	ne
 800597a:	429a      	cmpne	r2, r3
 800597c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005980:	bf0c      	ite	eq
 8005982:	2301      	moveq	r3, #1
 8005984:	2300      	movne	r3, #0
 8005986:	428a      	cmp	r2, r1
 8005988:	bf08      	it	eq
 800598a:	f043 0301 	orreq.w	r3, r3, #1
 800598e:	3130      	adds	r1, #48	; 0x30
 8005990:	4282      	cmp	r2, r0
 8005992:	bf08      	it	eq
 8005994:	f043 0301 	orreq.w	r3, r3, #1
 8005998:	3030      	adds	r0, #48	; 0x30
 800599a:	428a      	cmp	r2, r1
 800599c:	bf08      	it	eq
 800599e:	f043 0301 	orreq.w	r3, r3, #1
 80059a2:	3130      	adds	r1, #48	; 0x30
 80059a4:	4282      	cmp	r2, r0
 80059a6:	bf08      	it	eq
 80059a8:	f043 0301 	orreq.w	r3, r3, #1
 80059ac:	3030      	adds	r0, #48	; 0x30
 80059ae:	428a      	cmp	r2, r1
 80059b0:	bf08      	it	eq
 80059b2:	f043 0301 	orreq.w	r3, r3, #1
 80059b6:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80059ba:	4282      	cmp	r2, r0
 80059bc:	bf08      	it	eq
 80059be:	f043 0301 	orreq.w	r3, r3, #1
 80059c2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80059c6:	428a      	cmp	r2, r1
 80059c8:	bf08      	it	eq
 80059ca:	f043 0301 	orreq.w	r3, r3, #1
 80059ce:	3130      	adds	r1, #48	; 0x30
 80059d0:	4282      	cmp	r2, r0
 80059d2:	bf08      	it	eq
 80059d4:	f043 0301 	orreq.w	r3, r3, #1
 80059d8:	3030      	adds	r0, #48	; 0x30
 80059da:	428a      	cmp	r2, r1
 80059dc:	bf08      	it	eq
 80059de:	f043 0301 	orreq.w	r3, r3, #1
 80059e2:	3130      	adds	r1, #48	; 0x30
 80059e4:	4282      	cmp	r2, r0
 80059e6:	bf08      	it	eq
 80059e8:	f043 0301 	orreq.w	r3, r3, #1
 80059ec:	3030      	adds	r0, #48	; 0x30
 80059ee:	428a      	cmp	r2, r1
 80059f0:	bf08      	it	eq
 80059f2:	f043 0301 	orreq.w	r3, r3, #1
 80059f6:	3130      	adds	r1, #48	; 0x30
 80059f8:	4282      	cmp	r2, r0
 80059fa:	bf08      	it	eq
 80059fc:	f043 0301 	orreq.w	r3, r3, #1
 8005a00:	428a      	cmp	r2, r1
 8005a02:	bf08      	it	eq
 8005a04:	f043 0301 	orreq.w	r3, r3, #1
 8005a08:	b913      	cbnz	r3, 8005a10 <HAL_DMA_IRQHandler+0x76c>
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <HAL_DMA_IRQHandler+0x85c>)
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d179      	bne.n	8005b04 <HAL_DMA_IRQHandler+0x860>
 8005a10:	6813      	ldr	r3, [r2, #0]
 8005a12:	f023 0308 	bic.w	r3, r3, #8
 8005a16:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005a18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f47f ae30 	bne.w	8005680 <HAL_DMA_IRQHandler+0x3dc>
 8005a20:	e6ec      	b.n	80057fc <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a22:	0690      	lsls	r0, r2, #26
 8005a24:	d45a      	bmi.n	8005adc <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	4b32      	ldr	r3, [pc, #200]	; (8005af4 <HAL_DMA_IRQHandler+0x850>)
 8005a2a:	4833      	ldr	r0, [pc, #204]	; (8005af8 <HAL_DMA_IRQHandler+0x854>)
 8005a2c:	4933      	ldr	r1, [pc, #204]	; (8005afc <HAL_DMA_IRQHandler+0x858>)
 8005a2e:	4282      	cmp	r2, r0
 8005a30:	bf18      	it	ne
 8005a32:	429a      	cmpne	r2, r3
 8005a34:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005a38:	bf0c      	ite	eq
 8005a3a:	2301      	moveq	r3, #1
 8005a3c:	2300      	movne	r3, #0
 8005a3e:	428a      	cmp	r2, r1
 8005a40:	bf08      	it	eq
 8005a42:	f043 0301 	orreq.w	r3, r3, #1
 8005a46:	3130      	adds	r1, #48	; 0x30
 8005a48:	4282      	cmp	r2, r0
 8005a4a:	bf08      	it	eq
 8005a4c:	f043 0301 	orreq.w	r3, r3, #1
 8005a50:	3030      	adds	r0, #48	; 0x30
 8005a52:	428a      	cmp	r2, r1
 8005a54:	bf08      	it	eq
 8005a56:	f043 0301 	orreq.w	r3, r3, #1
 8005a5a:	3130      	adds	r1, #48	; 0x30
 8005a5c:	4282      	cmp	r2, r0
 8005a5e:	bf08      	it	eq
 8005a60:	f043 0301 	orreq.w	r3, r3, #1
 8005a64:	3030      	adds	r0, #48	; 0x30
 8005a66:	428a      	cmp	r2, r1
 8005a68:	bf08      	it	eq
 8005a6a:	f043 0301 	orreq.w	r3, r3, #1
 8005a6e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005a72:	4282      	cmp	r2, r0
 8005a74:	bf08      	it	eq
 8005a76:	f043 0301 	orreq.w	r3, r3, #1
 8005a7a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005a7e:	428a      	cmp	r2, r1
 8005a80:	bf08      	it	eq
 8005a82:	f043 0301 	orreq.w	r3, r3, #1
 8005a86:	3130      	adds	r1, #48	; 0x30
 8005a88:	4282      	cmp	r2, r0
 8005a8a:	bf08      	it	eq
 8005a8c:	f043 0301 	orreq.w	r3, r3, #1
 8005a90:	3030      	adds	r0, #48	; 0x30
 8005a92:	428a      	cmp	r2, r1
 8005a94:	bf08      	it	eq
 8005a96:	f043 0301 	orreq.w	r3, r3, #1
 8005a9a:	3130      	adds	r1, #48	; 0x30
 8005a9c:	4282      	cmp	r2, r0
 8005a9e:	bf08      	it	eq
 8005aa0:	f043 0301 	orreq.w	r3, r3, #1
 8005aa4:	3030      	adds	r0, #48	; 0x30
 8005aa6:	428a      	cmp	r2, r1
 8005aa8:	bf08      	it	eq
 8005aaa:	f043 0301 	orreq.w	r3, r3, #1
 8005aae:	3130      	adds	r1, #48	; 0x30
 8005ab0:	4282      	cmp	r2, r0
 8005ab2:	bf08      	it	eq
 8005ab4:	f043 0301 	orreq.w	r3, r3, #1
 8005ab8:	428a      	cmp	r2, r1
 8005aba:	bf08      	it	eq
 8005abc:	f043 0301 	orreq.w	r3, r3, #1
 8005ac0:	b913      	cbnz	r3, 8005ac8 <HAL_DMA_IRQHandler+0x824>
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <HAL_DMA_IRQHandler+0x85c>)
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d122      	bne.n	8005b0e <HAL_DMA_IRQHandler+0x86a>
 8005ac8:	6813      	ldr	r3, [r2, #0]
 8005aca:	f023 0314 	bic.w	r3, r3, #20
 8005ace:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005ad0:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8005ad2:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8005ad4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8005ad8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8005adc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f47f adce 	bne.w	8005680 <HAL_DMA_IRQHandler+0x3dc>
 8005ae4:	e68a      	b.n	80057fc <HAL_DMA_IRQHandler+0x558>
 8005ae6:	bf00      	nop
 8005ae8:	58025408 	.word	0x58025408
 8005aec:	5802541c 	.word	0x5802541c
 8005af0:	58025494 	.word	0x58025494
 8005af4:	40020010 	.word	0x40020010
 8005af8:	40020028 	.word	0x40020028
 8005afc:	40020040 	.word	0x40020040
 8005b00:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b04:	6813      	ldr	r3, [r2, #0]
 8005b06:	f023 0304 	bic.w	r3, r3, #4
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	e784      	b.n	8005a18 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b0e:	6813      	ldr	r3, [r2, #0]
 8005b10:	f023 030a 	bic.w	r3, r3, #10
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	e7db      	b.n	8005ad0 <HAL_DMA_IRQHandler+0x82c>

08005b18 <HAL_DMA_GetState>:
  return hdma->State;
 8005b18:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop

08005b20 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8005b20:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8005b22:	4770      	bx	lr

08005b24 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b24:	680b      	ldr	r3, [r1, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8119 	beq.w	8005d5e <HAL_GPIO_Init+0x23a>
 8005b2c:	f04f 0c00 	mov.w	ip, #0
{
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8005b34:	4662      	mov	r2, ip
{
 8005b36:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b38:	4d94      	ldr	r5, [pc, #592]	; (8005d8c <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b3a:	4f95      	ldr	r7, [pc, #596]	; (8005d90 <HAL_GPIO_Init+0x26c>)
 8005b3c:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8005da8 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b40:	f04f 0901 	mov.w	r9, #1
 8005b44:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8005b48:	ea19 0e03 	ands.w	lr, r9, r3
 8005b4c:	f000 80c1 	beq.w	8005cd2 <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b50:	684b      	ldr	r3, [r1, #4]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	1e5c      	subs	r4, r3, #1
 8005b58:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b5a:	f04f 0403 	mov.w	r4, #3
 8005b5e:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b62:	f240 80c0 	bls.w	8005ce6 <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b66:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d026      	beq.n	8005bba <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8005b6c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b6e:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b72:	688b      	ldr	r3, [r1, #8]
 8005b74:	fa03 f30c 	lsl.w	r3, r3, ip
 8005b78:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8005b7c:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b7e:	684b      	ldr	r3, [r1, #4]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d118      	bne.n	8005bba <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
 8005b88:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b8c:	f002 0b07 	and.w	fp, r2, #7
 8005b90:	230f      	movs	r3, #15
 8005b92:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8005b96:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005b9a:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005b9e:	fa03 f30b 	lsl.w	r3, r3, fp
 8005ba2:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ba6:	690b      	ldr	r3, [r1, #16]
 8005ba8:	fa03 f30b 	lsl.w	r3, r3, fp
 8005bac:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005bb0:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bb4:	684b      	ldr	r3, [r1, #4]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8005bba:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bbe:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bc2:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bc6:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8005bc8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bca:	684b      	ldr	r3, [r1, #4]
 8005bcc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8005bd0:	d07e      	beq.n	8005cd0 <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bd2:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005bd6:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bda:	f002 0903 	and.w	r9, r2, #3
 8005bde:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005be2:	f043 0302 	orr.w	r3, r3, #2
 8005be6:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bea:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005bee:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf0:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8005bf4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005bf8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bfc:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005c08:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c0a:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c0e:	d02b      	beq.n	8005c68 <HAL_GPIO_Init+0x144>
 8005c10:	4540      	cmp	r0, r8
 8005c12:	f000 8088 	beq.w	8005d26 <HAL_GPIO_Init+0x202>
 8005c16:	4e5f      	ldr	r6, [pc, #380]	; (8005d94 <HAL_GPIO_Init+0x270>)
 8005c18:	42b0      	cmp	r0, r6
 8005c1a:	f000 808b 	beq.w	8005d34 <HAL_GPIO_Init+0x210>
 8005c1e:	4e5e      	ldr	r6, [pc, #376]	; (8005d98 <HAL_GPIO_Init+0x274>)
 8005c20:	42b0      	cmp	r0, r6
 8005c22:	d079      	beq.n	8005d18 <HAL_GPIO_Init+0x1f4>
 8005c24:	4e5d      	ldr	r6, [pc, #372]	; (8005d9c <HAL_GPIO_Init+0x278>)
 8005c26:	42b0      	cmp	r0, r6
 8005c28:	f000 8092 	beq.w	8005d50 <HAL_GPIO_Init+0x22c>
 8005c2c:	4e5c      	ldr	r6, [pc, #368]	; (8005da0 <HAL_GPIO_Init+0x27c>)
 8005c2e:	42b0      	cmp	r0, r6
 8005c30:	f000 8096 	beq.w	8005d60 <HAL_GPIO_Init+0x23c>
 8005c34:	4e5b      	ldr	r6, [pc, #364]	; (8005da4 <HAL_GPIO_Init+0x280>)
 8005c36:	42b0      	cmp	r0, r6
 8005c38:	f000 8083 	beq.w	8005d42 <HAL_GPIO_Init+0x21e>
 8005c3c:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8005dac <HAL_GPIO_Init+0x288>
 8005c40:	4550      	cmp	r0, sl
 8005c42:	f000 8094 	beq.w	8005d6e <HAL_GPIO_Init+0x24a>
 8005c46:	f8df a168 	ldr.w	sl, [pc, #360]	; 8005db0 <HAL_GPIO_Init+0x28c>
 8005c4a:	4550      	cmp	r0, sl
 8005c4c:	f000 8096 	beq.w	8005d7c <HAL_GPIO_Init+0x258>
 8005c50:	f8df a160 	ldr.w	sl, [pc, #352]	; 8005db4 <HAL_GPIO_Init+0x290>
 8005c54:	4550      	cmp	r0, sl
 8005c56:	bf0c      	ite	eq
 8005c58:	f04f 0a09 	moveq.w	sl, #9
 8005c5c:	f04f 0a0a 	movne.w	sl, #10
 8005c60:	fa0a f909 	lsl.w	r9, sl, r9
 8005c64:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c68:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c6e:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8005c70:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 8005c74:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005c76:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c7a:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8005c7c:	bf54      	ite	pl
 8005c7e:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005c80:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 8005c84:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c88:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8005c8a:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005c8e:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c92:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 8005c94:	bf54      	ite	pl
 8005c96:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005c98:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 8005c9c:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ca0:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005ca2:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ca6:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005caa:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8005cac:	bf54      	ite	pl
 8005cae:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005cb0:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 8005cb4:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cb8:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8005cba:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cbe:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005cc0:	bf54      	ite	pl
 8005cc2:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8005cc4:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cc8:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8005ccc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cd0:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 8005cd2:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cd4:	f10c 0c02 	add.w	ip, ip, #2
 8005cd8:	fa33 f402 	lsrs.w	r4, r3, r2
 8005cdc:	f47f af30 	bne.w	8005b40 <HAL_GPIO_Init+0x1c>
  }
}
 8005ce0:	b003      	add	sp, #12
 8005ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005ce6:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ce8:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cec:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cee:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cf0:	fa03 f30c 	lsl.w	r3, r3, ip
 8005cf4:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8005cf8:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cfa:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8005cfc:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d00:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005d04:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d08:	4093      	lsls	r3, r2
 8005d0a:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 8005d0e:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d10:	684b      	ldr	r3, [r1, #4]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	e727      	b.n	8005b68 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d18:	f04f 0a03 	mov.w	sl, #3
 8005d1c:	fa0a f909 	lsl.w	r9, sl, r9
 8005d20:	ea43 0309 	orr.w	r3, r3, r9
 8005d24:	e7a0      	b.n	8005c68 <HAL_GPIO_Init+0x144>
 8005d26:	f04f 0a01 	mov.w	sl, #1
 8005d2a:	fa0a f909 	lsl.w	r9, sl, r9
 8005d2e:	ea43 0309 	orr.w	r3, r3, r9
 8005d32:	e799      	b.n	8005c68 <HAL_GPIO_Init+0x144>
 8005d34:	f04f 0a02 	mov.w	sl, #2
 8005d38:	fa0a f909 	lsl.w	r9, sl, r9
 8005d3c:	ea43 0309 	orr.w	r3, r3, r9
 8005d40:	e792      	b.n	8005c68 <HAL_GPIO_Init+0x144>
 8005d42:	f04f 0a06 	mov.w	sl, #6
 8005d46:	fa0a f909 	lsl.w	r9, sl, r9
 8005d4a:	ea43 0309 	orr.w	r3, r3, r9
 8005d4e:	e78b      	b.n	8005c68 <HAL_GPIO_Init+0x144>
 8005d50:	f04f 0a04 	mov.w	sl, #4
 8005d54:	fa0a f909 	lsl.w	r9, sl, r9
 8005d58:	ea43 0309 	orr.w	r3, r3, r9
 8005d5c:	e784      	b.n	8005c68 <HAL_GPIO_Init+0x144>
 8005d5e:	4770      	bx	lr
 8005d60:	f04f 0a05 	mov.w	sl, #5
 8005d64:	fa0a f909 	lsl.w	r9, sl, r9
 8005d68:	ea43 0309 	orr.w	r3, r3, r9
 8005d6c:	e77c      	b.n	8005c68 <HAL_GPIO_Init+0x144>
 8005d6e:	f04f 0a07 	mov.w	sl, #7
 8005d72:	fa0a f909 	lsl.w	r9, sl, r9
 8005d76:	ea43 0309 	orr.w	r3, r3, r9
 8005d7a:	e775      	b.n	8005c68 <HAL_GPIO_Init+0x144>
 8005d7c:	f04f 0a08 	mov.w	sl, #8
 8005d80:	fa0a f909 	lsl.w	r9, sl, r9
 8005d84:	ea43 0309 	orr.w	r3, r3, r9
 8005d88:	e76e      	b.n	8005c68 <HAL_GPIO_Init+0x144>
 8005d8a:	bf00      	nop
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	58020000 	.word	0x58020000
 8005d94:	58020800 	.word	0x58020800
 8005d98:	58020c00 	.word	0x58020c00
 8005d9c:	58021000 	.word	0x58021000
 8005da0:	58021400 	.word	0x58021400
 8005da4:	58021800 	.word	0x58021800
 8005da8:	58020400 	.word	0x58020400
 8005dac:	58021c00 	.word	0x58021c00
 8005db0:	58022000 	.word	0x58022000
 8005db4:	58022400 	.word	0x58022400

08005db8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005db8:	6903      	ldr	r3, [r0, #16]
 8005dba:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005dbc:	bf14      	ite	ne
 8005dbe:	2001      	movne	r0, #1
 8005dc0:	2000      	moveq	r0, #0
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dc4:	b902      	cbnz	r2, 8005dc8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005dc6:	0409      	lsls	r1, r1, #16
 8005dc8:	6181      	str	r1, [r0, #24]
  }
}
 8005dca:	4770      	bx	lr

08005dcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dd0:	6803      	ldr	r3, [r0, #0]
{
 8005dd2:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	0694      	lsls	r4, r2, #26
 8005dd8:	d46d      	bmi.n	8005eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 8005dda:	4605      	mov	r5, r0
 8005ddc:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dde:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8005de2:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005de4:	f014 0410 	ands.w	r4, r4, #16
 8005de8:	d068      	beq.n	8005ebc <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 8005dea:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dec:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 8005df0:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005df2:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005df4:	46b2      	mov	sl, r6
 8005df6:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	d161      	bne.n	8005ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 8005dfc:	0690      	lsls	r0, r2, #26
 8005dfe:	f100 8085 	bmi.w	8005f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 8005e02:	f1ba 0f00 	cmp.w	sl, #0
 8005e06:	d105      	bne.n	8005e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 8005e08:	699c      	ldr	r4, [r3, #24]
 8005e0a:	06a1      	lsls	r1, r4, #26
 8005e0c:	d5fc      	bpl.n	8005e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e0e:	2220      	movs	r2, #32
 8005e10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e12:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 8005e14:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 8005e18:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8005e1a:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e1c:	05d0      	lsls	r0, r2, #23
 8005e1e:	d535      	bpl.n	8005e8c <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e20:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e24:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8005e26:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e2a:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e2c:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e2e:	d505      	bpl.n	8005e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005e34:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e38:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e3a:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e3c:	0597      	lsls	r7, r2, #22
 8005e3e:	d505      	bpl.n	8005e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e40:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005e44:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e48:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e4a:	682b      	ldr	r3, [r5, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	0790      	lsls	r0, r2, #30
 8005e50:	d502      	bpl.n	8005e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 8005e52:	2200      	movs	r2, #0
 8005e54:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	699a      	ldr	r2, [r3, #24]
 8005e5a:	07d1      	lsls	r1, r2, #31
 8005e5c:	d404      	bmi.n	8005e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e5e:	699a      	ldr	r2, [r3, #24]
 8005e60:	f042 0201 	orr.w	r2, r2, #1
 8005e64:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8005e6c:	4835      	ldr	r0, [pc, #212]	; (8005f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 8005e70:	4002      	ands	r2, r0
      return HAL_ERROR;
 8005e72:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8005e74:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8005e76:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e78:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8005e7c:	4323      	orrs	r3, r4
 8005e7e:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e80:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e84:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e8c:	0550      	lsls	r0, r2, #21
 8005e8e:	d4cf      	bmi.n	8005e30 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e90:	0596      	lsls	r6, r2, #22
 8005e92:	d4d5      	bmi.n	8005e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 8005e94:	2900      	cmp	r1, #0
 8005e96:	d1d9      	bne.n	8005e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e98:	f7fd ffcc 	bl	8003e34 <HAL_GetTick>
 8005e9c:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ea0:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea2:	42b8      	cmp	r0, r7
 8005ea4:	d800      	bhi.n	8005ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 8005ea6:	b91f      	cbnz	r7, 8005eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	f012 0220 	ands.w	r2, r2, #32
 8005eae:	d032      	beq.n	8005f16 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	0692      	lsls	r2, r2, #26
 8005eb4:	d595      	bpl.n	8005de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8005eb6:	2000      	movs	r0, #0
}
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	e7ac      	b.n	8005e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ec0:	0692      	lsls	r2, r2, #26
 8005ec2:	d423      	bmi.n	8005f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 8005ec4:	f1ba 0f00 	cmp.w	sl, #0
 8005ec8:	d1a4      	bne.n	8005e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005eca:	f7fd ffb3 	bl	8003e34 <HAL_GetTick>
 8005ece:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005ed0:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ed2:	4287      	cmp	r7, r0
 8005ed4:	d301      	bcc.n	8005eda <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 8005ed6:	2f00      	cmp	r7, #0
 8005ed8:	d18d      	bne.n	8005df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005eda:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8005edc:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ee0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8005ee2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ee4:	0409      	lsls	r1, r1, #16
 8005ee6:	d503      	bpl.n	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 8005ee8:	0441      	lsls	r1, r0, #17
 8005eea:	d401      	bmi.n	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 8005eec:	2a20      	cmp	r2, #32
 8005eee:	d11f      	bne.n	8005f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	0690      	lsls	r0, r2, #26
 8005ef4:	f53f af7f 	bmi.w	8005df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ef8:	f7fd ff9c 	bl	8003e34 <HAL_GetTick>
 8005efc:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005efe:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f00:	2819      	cmp	r0, #25
 8005f02:	d9f5      	bls.n	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f04:	2620      	movs	r6, #32
              status = HAL_ERROR;
 8005f06:	f04f 0a01 	mov.w	sl, #1
 8005f0a:	e774      	b.n	8005df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 8005f0c:	f1ba 0f00 	cmp.w	sl, #0
 8005f10:	f43f af7d 	beq.w	8005e0e <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8005f14:	e77e      	b.n	8005e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f16:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f18:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f20:	430b      	orrs	r3, r1
 8005f22:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f24:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f28:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8005f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f36:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005f38:	f7fd ff7c 	bl	8003e34 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f3c:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8005f3e:	4604      	mov	r4, r0
 8005f40:	e7d6      	b.n	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 8005f42:	bf00      	nop
 8005f44:	fe00e800 	.word	0xfe00e800

08005f48 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d056      	beq.n	8005ffa <HAL_I2C_Init+0xb2>
{
 8005f4c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005f52:	4604      	mov	r4, r0
 8005f54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d049      	beq.n	8005ff0 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8005f5c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f5e:	2324      	movs	r3, #36	; 0x24
 8005f60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005f64:	6813      	ldr	r3, [r2, #0]
 8005f66:	f023 0301 	bic.w	r3, r3, #1
 8005f6a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f6c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f70:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005f74:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f76:	6822      	ldr	r2, [r4, #0]
 8005f78:	6893      	ldr	r3, [r2, #8]
 8005f7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f7e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f80:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f82:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f84:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f86:	68a3      	ldr	r3, [r4, #8]
 8005f88:	bf0c      	ite	eq
 8005f8a:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f8e:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8005f92:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f94:	68e3      	ldr	r3, [r4, #12]
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d103      	bne.n	8005fa2 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fa0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fa2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005fa4:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fa8:	4b15      	ldr	r3, [pc, #84]	; (8006000 <HAL_I2C_Init+0xb8>)
 8005faa:	6851      	ldr	r1, [r2, #4]
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005fb0:	6822      	ldr	r2, [r4, #0]
 8005fb2:	68d3      	ldr	r3, [r2, #12]
 8005fb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fb8:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005fba:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fbc:	6821      	ldr	r1, [r4, #0]
 8005fbe:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8005fc2:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc4:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fc6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005fca:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fcc:	6821      	ldr	r1, [r4, #0]
 8005fce:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005fd2:	4303      	orrs	r3, r0
  return HAL_OK;
 8005fd4:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fd6:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005fd8:	6821      	ldr	r1, [r4, #0]
 8005fda:	680b      	ldr	r3, [r1, #0]
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fe2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fe8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fea:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8005fee:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005ff0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005ff4:	f7fb f840 	bl	8001078 <HAL_I2C_MspInit>
 8005ff8:	e7b0      	b.n	8005f5c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8005ffa:	2001      	movs	r0, #1
}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	02008000 	.word	0x02008000

08006004 <HAL_I2C_Master_Transmit>:
{
 8006004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006008:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800600a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800600e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006010:	2b20      	cmp	r3, #32
 8006012:	d12c      	bne.n	800606e <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 8006014:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006018:	4683      	mov	fp, r0
 800601a:	2b01      	cmp	r3, #1
 800601c:	d027      	beq.n	800606e <HAL_I2C_Master_Transmit+0x6a>
 800601e:	2301      	movs	r3, #1
 8006020:	468a      	mov	sl, r1
 8006022:	4616      	mov	r6, r2
 8006024:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006028:	f7fd ff04 	bl	8003e34 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800602c:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 8006030:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006032:	699a      	ldr	r2, [r3, #24]
 8006034:	0417      	lsls	r7, r2, #16
 8006036:	d51d      	bpl.n	8006074 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006038:	f7fd fefc 	bl	8003e34 <HAL_GetTick>
 800603c:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006040:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006044:	2819      	cmp	r0, #25
 8006046:	d9f4      	bls.n	8006032 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	0410      	lsls	r0, r2, #16
 800604c:	d5f1      	bpl.n	8006032 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800604e:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006052:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006054:	2200      	movs	r2, #0
      return HAL_ERROR;
 8006056:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006058:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800605a:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800605e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006062:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006066:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 800606a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800606e:	2002      	movs	r0, #2
}
 8006070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006074:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006076:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8006078:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800607c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006080:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 8006082:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006086:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800608a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 800608e:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006092:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 8006096:	b292      	uxth	r2, r2
 8006098:	2aff      	cmp	r2, #255	; 0xff
 800609a:	d87e      	bhi.n	800619a <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800609c:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80060a0:	49ad      	ldr	r1, [pc, #692]	; (8006358 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 80060a2:	b292      	uxth	r2, r2
 80060a4:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060a8:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80060aa:	6858      	ldr	r0, [r3, #4]
 80060ac:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060ae:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80060b2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80060b6:	4301      	orrs	r1, r0
 80060b8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80060bc:	49a7      	ldr	r1, [pc, #668]	; (800635c <HAL_I2C_Master_Transmit+0x358>)
 80060be:	4311      	orrs	r1, r2
 80060c0:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80060c2:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 80060c6:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8107 	beq.w	80062e0 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060d2:	f8db 3000 	ldr.w	r3, [fp]
 80060d6:	699c      	ldr	r4, [r3, #24]
 80060d8:	f014 0402 	ands.w	r4, r4, #2
 80060dc:	f040 80c5 	bne.w	800626a <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 80060e0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060e2:	f012 0210 	ands.w	r2, r2, #16
 80060e6:	f000 808d 	beq.w	8006204 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ea:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 80060ec:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 80060ee:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f0:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060f2:	f8db 3000 	ldr.w	r3, [fp]
 80060f6:	1c69      	adds	r1, r5, #1
 80060f8:	699a      	ldr	r2, [r3, #24]
 80060fa:	f040 8085 	bne.w	8006208 <HAL_I2C_Master_Transmit+0x204>
 80060fe:	0690      	lsls	r0, r2, #26
 8006100:	f100 8106 	bmi.w	8006310 <HAL_I2C_Master_Transmit+0x30c>
 8006104:	b937      	cbnz	r7, 8006114 <HAL_I2C_Master_Transmit+0x110>
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	0691      	lsls	r1, r2, #26
 800610a:	d5fc      	bpl.n	8006106 <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800610c:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8006110:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 8006114:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 8006118:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800611a:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800611c:	05ce      	lsls	r6, r1, #23
 800611e:	d54b      	bpl.n	80061b8 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006120:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006124:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8006126:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800612a:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800612c:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006130:	d506      	bpl.n	8006140 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006132:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8006136:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800613a:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800613c:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006140:	0589      	lsls	r1, r1, #22
 8006142:	d506      	bpl.n	8006152 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006144:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006148:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800614c:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800614e:	f8db 3000 	ldr.w	r3, [fp]
 8006152:	6999      	ldr	r1, [r3, #24]
 8006154:	078e      	lsls	r6, r1, #30
 8006156:	d503      	bpl.n	8006160 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 8006158:	2100      	movs	r1, #0
 800615a:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800615c:	f8db 3000 	ldr.w	r3, [fp]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	07cd      	lsls	r5, r1, #31
 8006164:	d405      	bmi.n	8006172 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006166:	6999      	ldr	r1, [r3, #24]
 8006168:	f041 0101 	orr.w	r1, r1, #1
 800616c:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800616e:	f8db 3000 	ldr.w	r3, [fp]
 8006172:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006174:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 8006176:	487a      	ldr	r0, [pc, #488]	; (8006360 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 8006178:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800617a:	4001      	ands	r1, r0
        return HAL_ERROR;
 800617c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800617e:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8006180:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8006184:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8006188:	4313      	orrs	r3, r2
 800618a:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800618e:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006192:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 8006196:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800619a:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800619c:	496e      	ldr	r1, [pc, #440]	; (8006358 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800619e:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061a6:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80061aa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80061ae:	4311      	orrs	r1, r2
 80061b0:	4a6c      	ldr	r2, [pc, #432]	; (8006364 <HAL_I2C_Master_Transmit+0x360>)
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80061b6:	e784      	b.n	80060c2 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061b8:	054c      	lsls	r4, r1, #21
 80061ba:	d4ba      	bmi.n	8006132 <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061bc:	058f      	lsls	r7, r1, #22
 80061be:	d4c1      	bmi.n	8006144 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d1c6      	bne.n	8006152 <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 80061c4:	1c6c      	adds	r4, r5, #1
 80061c6:	d086      	beq.n	80060d6 <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c8:	f7fd fe34 	bl	8003e34 <HAL_GetTick>
 80061cc:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80061d0:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d4:	4285      	cmp	r5, r0
 80061d6:	d302      	bcc.n	80061de <HAL_I2C_Master_Transmit+0x1da>
 80061d8:	2d00      	cmp	r5, #0
 80061da:	f47f af7c 	bne.w	80060d6 <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80061de:	699a      	ldr	r2, [r3, #24]
 80061e0:	f012 0202 	ands.w	r2, r2, #2
 80061e4:	f47f af77 	bne.w	80060d6 <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061e8:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061ec:	2120      	movs	r1, #32
        return HAL_ERROR;
 80061ee:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 80061f0:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061f4:	430b      	orrs	r3, r1
 80061f6:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fe:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 8006202:	e735      	b.n	8006070 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 8006204:	4610      	mov	r0, r2
 8006206:	e788      	b.n	800611a <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006208:	0692      	lsls	r2, r2, #26
 800620a:	f100 8081 	bmi.w	8006310 <HAL_I2C_Master_Transmit+0x30c>
 800620e:	2f00      	cmp	r7, #0
 8006210:	d180      	bne.n	8006114 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006212:	f7fd fe0f 	bl	8003e34 <HAL_GetTick>
 8006216:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006218:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800621c:	4285      	cmp	r5, r0
 800621e:	d302      	bcc.n	8006226 <HAL_I2C_Master_Transmit+0x222>
 8006220:	2d00      	cmp	r5, #0
 8006222:	f47f af68 	bne.w	80060f6 <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006226:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8006228:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800622c:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800622e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006230:	0409      	lsls	r1, r1, #16
 8006232:	d50c      	bpl.n	800624e <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 8006234:	0441      	lsls	r1, r0, #17
 8006236:	d40a      	bmi.n	800624e <HAL_I2C_Master_Transmit+0x24a>
 8006238:	2a20      	cmp	r2, #32
 800623a:	d008      	beq.n	800624e <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006242:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006244:	f7fd fdf6 	bl	8003e34 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006248:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 800624c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800624e:	699a      	ldr	r2, [r3, #24]
 8006250:	0690      	lsls	r0, r2, #26
 8006252:	f53f af50 	bmi.w	80060f6 <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006256:	f7fd fded 	bl	8003e34 <HAL_GetTick>
 800625a:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800625c:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006260:	2819      	cmp	r0, #25
 8006262:	d9f4      	bls.n	800624e <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006264:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8006266:	2701      	movs	r7, #1
 8006268:	e745      	b.n	80060f6 <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800626a:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800626e:	7812      	ldrb	r2, [r2, #0]
 8006270:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006272:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 8006276:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 800627a:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800627c:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 8006280:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8006282:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8006284:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006286:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8006288:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800628c:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006290:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006294:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8006296:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800629a:	2b00      	cmp	r3, #0
 800629c:	f47f af13 	bne.w	80060c6 <HAL_I2C_Master_Transmit+0xc2>
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	f43f af10 	beq.w	80060c6 <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062a6:	f8db 2000 	ldr.w	r2, [fp]
 80062aa:	1c68      	adds	r0, r5, #1
 80062ac:	d134      	bne.n	8006318 <HAL_I2C_Master_Transmit+0x314>
 80062ae:	6993      	ldr	r3, [r2, #24]
 80062b0:	0619      	lsls	r1, r3, #24
 80062b2:	d5fc      	bpl.n	80062ae <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062b4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2bff      	cmp	r3, #255	; 0xff
 80062bc:	d958      	bls.n	8006370 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062be:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80062c0:	4929      	ldr	r1, [pc, #164]	; (8006368 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80062c2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80062c6:	6853      	ldr	r3, [r2, #4]
 80062c8:	400b      	ands	r3, r1
 80062ca:	4928      	ldr	r1, [pc, #160]	; (800636c <HAL_I2C_Master_Transmit+0x368>)
 80062cc:	ea4a 0303 	orr.w	r3, sl, r3
 80062d0:	4319      	orrs	r1, r3
 80062d2:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 80062d4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f47f aef9 	bne.w	80060d2 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062e0:	4642      	mov	r2, r8
 80062e2:	4629      	mov	r1, r5
 80062e4:	4658      	mov	r0, fp
 80062e6:	f7ff fd71 	bl	8005dcc <I2C_WaitOnSTOPFlagUntilTimeout>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d151      	bne.n	8006392 <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ee:	f8db 3000 	ldr.w	r3, [fp]
 80062f2:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 80062f4:	4c1a      	ldr	r4, [pc, #104]	; (8006360 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062f6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80062f8:	f8db 1000 	ldr.w	r1, [fp]
 80062fc:	684b      	ldr	r3, [r1, #4]
 80062fe:	4023      	ands	r3, r4
 8006300:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006302:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006306:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800630a:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 800630e:	e6af      	b.n	8006070 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 8006310:	2f00      	cmp	r7, #0
 8006312:	f43f aefb 	beq.w	800610c <HAL_I2C_Master_Transmit+0x108>
 8006316:	e6fd      	b.n	8006114 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006318:	6993      	ldr	r3, [r2, #24]
 800631a:	061b      	lsls	r3, r3, #24
 800631c:	d4ca      	bmi.n	80062b4 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631e:	f7fd fd89 	bl	8003e34 <HAL_GetTick>
 8006322:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006326:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632a:	4285      	cmp	r5, r0
 800632c:	d301      	bcc.n	8006332 <HAL_I2C_Master_Transmit+0x32e>
 800632e:	2d00      	cmp	r5, #0
 8006330:	d1bb      	bne.n	80062aa <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006332:	6993      	ldr	r3, [r2, #24]
 8006334:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8006338:	d1b7      	bne.n	80062aa <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800633a:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800633e:	2120      	movs	r1, #32
          return HAL_ERROR;
 8006340:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8006342:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006346:	430a      	orrs	r2, r1
 8006348:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800634c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006350:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 8006354:	e68c      	b.n	8006070 <HAL_I2C_Master_Transmit+0x6c>
 8006356:	bf00      	nop
 8006358:	fc009800 	.word	0xfc009800
 800635c:	02002000 	.word	0x02002000
 8006360:	fe00e800 	.word	0xfe00e800
 8006364:	01ff2000 	.word	0x01ff2000
 8006368:	fc009c00 	.word	0xfc009c00
 800636c:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 8006370:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8006374:	4808      	ldr	r0, [pc, #32]	; (8006398 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 8006376:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006378:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800637a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800637e:	6853      	ldr	r3, [r2, #4]
 8006380:	4003      	ands	r3, r0
 8006382:	ea4a 0303 	orr.w	r3, sl, r3
 8006386:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800638a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800638e:	6053      	str	r3, [r2, #4]
}
 8006390:	e699      	b.n	80060c6 <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 8006392:	2001      	movs	r0, #1
 8006394:	e66c      	b.n	8006070 <HAL_I2C_Master_Transmit+0x6c>
 8006396:	bf00      	nop
 8006398:	fc009c00 	.word	0xfc009c00

0800639c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800639c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800639e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80063a0:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80063a2:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80063a4:	b103      	cbz	r3, 80063a8 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80063a6:	4718      	bx	r3
}
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop

080063ac <HAL_I2C_SlaveTxCpltCallback>:
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop

080063b0 <I2C_ITSlaveSeqCplt>:
{
 80063b0:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80063b2:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b4:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80063b6:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b8:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80063bc:	0451      	lsls	r1, r2, #17
 80063be:	d526      	bpl.n	800640e <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063c6:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80063c8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80063cc:	2b29      	cmp	r3, #41	; 0x29
 80063ce:	d028      	beq.n	8006422 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80063d0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80063d4:	2b2a      	cmp	r3, #42	; 0x2a
 80063d6:	d000      	beq.n	80063da <I2C_ITSlaveSeqCplt+0x2a>
}
 80063d8:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063da:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063dc:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80063de:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 80063e0:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063e4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063e8:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80063ea:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80063ee:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80063f0:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80063f4:	2a28      	cmp	r2, #40	; 0x28
 80063f6:	bf0c      	ite	eq
 80063f8:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 80063fc:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006400:	4013      	ands	r3, r2
 8006402:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8006404:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006408:	f014 ffba 	bl	801b380 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 800640c:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800640e:	0412      	lsls	r2, r2, #16
 8006410:	d5da      	bpl.n	80063c8 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006418:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800641a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800641e:	2b29      	cmp	r3, #41	; 0x29
 8006420:	d1d6      	bne.n	80063d0 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006422:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006424:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006426:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8006428:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800642c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006430:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006432:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006436:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006438:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800643c:	2a28      	cmp	r2, #40	; 0x28
 800643e:	bf0c      	ite	eq
 8006440:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8006444:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006448:	4013      	ands	r3, r2
 800644a:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800644c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006450:	f7ff ffac 	bl	80063ac <HAL_I2C_SlaveTxCpltCallback>
}
 8006454:	bd08      	pop	{r3, pc}
 8006456:	bf00      	nop

08006458 <HAL_I2C_AddrCallback>:
}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop

0800645c <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800645c:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800645e:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006460:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006462:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8006464:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006466:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006468:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800646a:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 800646c:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006470:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006474:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006476:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800647a:	d10f      	bne.n	800649c <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800647c:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006480:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006484:	f013 0306 	ands.w	r3, r3, #6
 8006488:	d106      	bne.n	8006498 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 800648a:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800648c:	3501      	adds	r5, #1
 800648e:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006490:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8006492:	2d02      	cmp	r5, #2
 8006494:	d00c      	beq.n	80064b0 <I2C_ITAddrCplt.part.0+0x54>
}
 8006496:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006498:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 80064a2:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 80064a4:	2300      	movs	r3, #0
 80064a6:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064aa:	f7ff ffd5 	bl	8006458 <HAL_I2C_AddrCallback>
}
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80064b0:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 80064b2:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80064b4:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 80064b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80064ba:	f7ff ffcd 	bl	8006458 <HAL_I2C_AddrCallback>
}
 80064be:	bd70      	pop	{r4, r5, r6, pc}

080064c0 <HAL_I2C_ListenCpltCallback>:
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop

080064c4 <HAL_I2C_AbortCpltCallback>:
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop

080064c8 <I2C_DMAAbort>:
{
 80064c8:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80064ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 80064cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80064ce:	b10b      	cbz	r3, 80064d4 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80064d0:	2200      	movs	r2, #0
 80064d2:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 80064d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80064d6:	b10b      	cbz	r3, 80064dc <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80064d8:	2200      	movs	r2, #0
 80064da:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80064e0:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 80064e2:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064e6:	d005      	beq.n	80064f4 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 80064e8:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80064ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80064ee:	f014 ff2f 	bl	801b350 <__HAL_I2C_ErrorCallback_veneer>
}
 80064f2:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80064f4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80064f6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80064fa:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064fe:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006500:	f7ff ffe0 	bl	80064c4 <HAL_I2C_AbortCpltCallback>
}
 8006504:	bd08      	pop	{r3, pc}
 8006506:	bf00      	nop

08006508 <I2C_ITError>:
{
 8006508:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800650a:	4a5d      	ldr	r2, [pc, #372]	; (8006680 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800650c:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800650e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006512:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006514:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006518:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800651a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800651c:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800651e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006520:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8006522:	ea41 0102 	orr.w	r1, r1, r2
 8006526:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006528:	d874      	bhi.n	8006614 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800652a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800652e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006532:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006536:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006538:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800653c:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800653e:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006540:	bf14      	ite	ne
 8006542:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8006546:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800654a:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800654c:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006550:	bf18      	it	ne
 8006552:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006556:	4013      	ands	r3, r2
 8006558:	4a4a      	ldr	r2, [pc, #296]	; (8006684 <I2C_ITError+0x17c>)
 800655a:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800655c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006560:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8006562:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006564:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006566:	b118      	cbz	r0, 8006570 <I2C_ITError+0x68>
 8006568:	2b11      	cmp	r3, #17
 800656a:	d01e      	beq.n	80065aa <I2C_ITError+0xa2>
 800656c:	2b21      	cmp	r3, #33	; 0x21
 800656e:	d01c      	beq.n	80065aa <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006570:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006572:	b118      	cbz	r0, 800657c <I2C_ITError+0x74>
 8006574:	2b12      	cmp	r3, #18
 8006576:	d030      	beq.n	80065da <I2C_ITError+0xd2>
 8006578:	2b22      	cmp	r3, #34	; 0x22
 800657a:	d02e      	beq.n	80065da <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800657c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006580:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8006582:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006586:	d006      	beq.n	8006596 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 8006588:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800658a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800658c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006590:	f014 fede 	bl	801b350 <__HAL_I2C_ErrorCallback_veneer>
}
 8006594:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006596:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006598:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800659a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800659e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80065a2:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80065a4:	f7ff ff8e 	bl	80064c4 <HAL_I2C_AbortCpltCallback>
}
 80065a8:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	0451      	lsls	r1, r2, #17
 80065b0:	d45f      	bmi.n	8006672 <I2C_ITError+0x16a>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80065b2:	f7ff fab1 	bl	8005b18 <HAL_DMA_GetState>
 80065b6:	2801      	cmp	r0, #1
 80065b8:	d0e0      	beq.n	800657c <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80065bc:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065be:	4932      	ldr	r1, [pc, #200]	; (8006688 <I2C_ITError+0x180>)
 80065c0:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80065c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065c6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80065c8:	f7fe fd3c 	bl	8005044 <HAL_DMA_Abort_IT>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d0e1      	beq.n	8006594 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 80065d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065d6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80065d8:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	0412      	lsls	r2, r2, #16
 80065e0:	d504      	bpl.n	80065ec <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065e8:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80065ec:	f7ff fa94 	bl	8005b18 <HAL_DMA_GetState>
 80065f0:	2801      	cmp	r0, #1
 80065f2:	d0c3      	beq.n	800657c <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065f4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 80065f6:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065f8:	4923      	ldr	r1, [pc, #140]	; (8006688 <I2C_ITError+0x180>)
 80065fa:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 80065fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006600:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006602:	f7fe fd1f 	bl	8005044 <HAL_DMA_Abort_IT>
 8006606:	2800      	cmp	r0, #0
 8006608:	d0c4      	beq.n	8006594 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800660a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800660c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006610:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006612:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006614:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006616:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800661a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006624:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006626:	6803      	ldr	r3, [r0, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	0792      	lsls	r2, r2, #30
 800662c:	d501      	bpl.n	8006632 <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 800662e:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006630:	6803      	ldr	r3, [r0, #0]
 8006632:	699a      	ldr	r2, [r3, #24]
 8006634:	07d6      	lsls	r6, r2, #31
 8006636:	d403      	bmi.n	8006640 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006640:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006644:	2b60      	cmp	r3, #96	; 0x60
 8006646:	d012      	beq.n	800666e <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006648:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800664a:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 800664c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	0695      	lsls	r5, r2, #26
 8006654:	d50b      	bpl.n	800666e <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006656:	699a      	ldr	r2, [r3, #24]
 8006658:	06d0      	lsls	r0, r2, #27
 800665a:	d506      	bpl.n	800666a <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800665c:	2210      	movs	r2, #16
 800665e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006660:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006662:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006664:	f042 0204 	orr.w	r2, r2, #4
 8006668:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800666a:	2220      	movs	r2, #32
 800666c:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 800666e:	2200      	movs	r2, #0
 8006670:	e776      	b.n	8006560 <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006678:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800667a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800667c:	e799      	b.n	80065b2 <I2C_ITError+0xaa>
 800667e:	bf00      	nop
 8006680:	ffff0000 	.word	0xffff0000
 8006684:	08006885 	.word	0x08006885
 8006688:	080064c9 	.word	0x080064c9

0800668c <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800668c:	6803      	ldr	r3, [r0, #0]
{
 800668e:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006694:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006696:	f412 7f80 	tst.w	r2, #256	; 0x100
 800669a:	d032      	beq.n	8006702 <HAL_I2C_ER_IRQHandler+0x76>
 800669c:	f011 0f80 	tst.w	r1, #128	; 0x80
 80066a0:	d021      	beq.n	80066e6 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80066a2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066a4:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80066a8:	f041 0101 	orr.w	r1, r1, #1
 80066ac:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066ae:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80066b0:	0553      	lsls	r3, r2, #21
 80066b2:	d507      	bpl.n	80066c4 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066b4:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80066b6:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80066bc:	f041 0108 	orr.w	r1, r1, #8
 80066c0:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066c2:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80066c4:	0592      	lsls	r2, r2, #22
 80066c6:	d507      	bpl.n	80066d8 <HAL_I2C_ER_IRQHandler+0x4c>
 80066c8:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80066ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066cc:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80066d0:	f043 0302 	orr.w	r3, r3, #2
 80066d4:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066d6:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 80066d8:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80066da:	f011 0f0b 	tst.w	r1, #11
 80066de:	d10c      	bne.n	80066fa <HAL_I2C_ER_IRQHandler+0x6e>
}
 80066e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066e4:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80066e6:	0553      	lsls	r3, r2, #21
 80066e8:	d4f6      	bmi.n	80066d8 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80066ea:	0593      	lsls	r3, r2, #22
 80066ec:	d5f4      	bpl.n	80066d8 <HAL_I2C_ER_IRQHandler+0x4c>
 80066ee:	060a      	lsls	r2, r1, #24
 80066f0:	d4eb      	bmi.n	80066ca <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 80066f2:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80066f4:	f011 0f0b 	tst.w	r1, #11
 80066f8:	d0f2      	beq.n	80066e0 <HAL_I2C_ER_IRQHandler+0x54>
}
 80066fa:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 80066fe:	f7ff bf03 	b.w	8006508 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006702:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006706:	d0f0      	beq.n	80066ea <HAL_I2C_ER_IRQHandler+0x5e>
 8006708:	0609      	lsls	r1, r1, #24
 800670a:	d5e5      	bpl.n	80066d8 <HAL_I2C_ER_IRQHandler+0x4c>
 800670c:	e7d3      	b.n	80066b6 <HAL_I2C_ER_IRQHandler+0x2a>
 800670e:	bf00      	nop

08006710 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006714:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006716:	2520      	movs	r5, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006718:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800671a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800671e:	61d5      	str	r5, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006720:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8006724:	2b21      	cmp	r3, #33	; 0x21
 8006726:	d16d      	bne.n	8006804 <I2C_ITSlaveCplt.constprop.0+0xf4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006728:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800672a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800672e:	682a      	ldr	r2, [r5, #0]
 8006730:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 8006734:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006736:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006738:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 800673a:	4d50      	ldr	r5, [pc, #320]	; (800687c <I2C_ITSlaveCplt.constprop.0+0x16c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800673c:	6853      	ldr	r3, [r2, #4]
 800673e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006742:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	6853      	ldr	r3, [r2, #4]
 8006748:	402b      	ands	r3, r5
 800674a:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	0792      	lsls	r2, r2, #30
 8006752:	d502      	bpl.n	800675a <I2C_ITSlaveCplt.constprop.0+0x4a>
    hi2c->Instance->TXDR = 0x00U;
 8006754:	2200      	movs	r2, #0
 8006756:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	699a      	ldr	r2, [r3, #24]
 800675c:	07d6      	lsls	r6, r2, #31
 800675e:	d403      	bmi.n	8006768 <I2C_ITSlaveCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	f042 0201 	orr.w	r2, r2, #1
 8006766:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006768:	0445      	lsls	r5, r0, #17
 800676a:	d556      	bpl.n	800681a <I2C_ITSlaveCplt.constprop.0+0x10a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800676c:	6822      	ldr	r2, [r4, #0]
 800676e:	6813      	ldr	r3, [r2, #0]
 8006770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006774:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8006776:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006778:	b11b      	cbz	r3, 8006782 <I2C_ITSlaveCplt.constprop.0+0x72>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	6853      	ldr	r3, [r2, #4]
 800677e:	b29b      	uxth	r3, r3
 8006780:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006782:	074b      	lsls	r3, r1, #29
 8006784:	d508      	bpl.n	8006798 <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800678a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800678c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800678e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006790:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006792:	3301      	adds	r3, #1
 8006794:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006796:	bb72      	cbnz	r2, 80067f6 <I2C_ITSlaveCplt.constprop.0+0xe6>
  if (hi2c->XferCount != 0U)
 8006798:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	b11b      	cbz	r3, 80067a6 <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800679e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80067a0:	f043 0304 	orr.w	r3, r3, #4
 80067a4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a6:	2600      	movs	r6, #0
 80067a8:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067ac:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80067ae:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	d13d      	bne.n	8006830 <I2C_ITSlaveCplt.constprop.0+0x120>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80067b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067b6:	4e32      	ldr	r6, [pc, #200]	; (8006880 <I2C_ITSlaveCplt.constprop.0+0x170>)
 80067b8:	42b3      	cmp	r3, r6
 80067ba:	d10e      	bne.n	80067da <I2C_ITSlaveCplt.constprop.0+0xca>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067c0:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80067c2:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067c6:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 80067c8:	f04f 0320 	mov.w	r3, #32
 80067cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80067d0:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067d2:	d050      	beq.n	8006876 <I2C_ITSlaveCplt.constprop.0+0x166>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067d4:	f7ff fdea 	bl	80063ac <HAL_I2C_SlaveTxCpltCallback>
}
 80067d8:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 80067da:	4620      	mov	r0, r4
 80067dc:	f7ff fde8 	bl	80063b0 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 80067e0:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067e2:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 80067e4:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 80067e6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80067ea:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80067ee:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80067f0:	f7ff fe66 	bl	80064c0 <HAL_I2C_ListenCpltCallback>
}
 80067f4:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 80067f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80067f8:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80067fa:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80067fc:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80067fe:	b29b      	uxth	r3, r3
 8006800:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006802:	e7c9      	b.n	8006798 <I2C_ITSlaveCplt.constprop.0+0x88>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006804:	2b22      	cmp	r3, #34	; 0x22
 8006806:	d197      	bne.n	8006738 <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006808:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800680a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800680e:	682a      	ldr	r2, [r5, #0]
 8006810:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 8006814:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006816:	6323      	str	r3, [r4, #48]	; 0x30
 8006818:	e78e      	b.n	8006738 <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800681a:	0402      	lsls	r2, r0, #16
 800681c:	d5b1      	bpl.n	8006782 <I2C_ITSlaveCplt.constprop.0+0x72>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	6813      	ldr	r3, [r2, #0]
 8006822:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006826:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8006828:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1a5      	bne.n	800677a <I2C_ITSlaveCplt.constprop.0+0x6a>
 800682e:	e7a8      	b.n	8006782 <I2C_ITSlaveCplt.constprop.0+0x72>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006830:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006832:	4620      	mov	r0, r4
 8006834:	f7ff fe68 	bl	8006508 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006838:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800683c:	2b28      	cmp	r3, #40	; 0x28
 800683e:	d1cb      	bne.n	80067d8 <I2C_ITSlaveCplt.constprop.0+0xc8>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006840:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006842:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006844:	490e      	ldr	r1, [pc, #56]	; (8006880 <I2C_ITSlaveCplt.constprop.0+0x170>)
  HAL_I2C_ListenCpltCallback(hi2c);
 8006846:	4620      	mov	r0, r4
  hi2c->XferISR = NULL;
 8006848:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800684a:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800684c:	2110      	movs	r1, #16
  hi2c->PreviousState = I2C_STATE_NONE;
 800684e:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006850:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006854:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006858:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800685c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006860:	6813      	ldr	r3, [r2, #0]
 8006862:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006866:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800686c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006870:	f7ff fe26 	bl	80064c0 <HAL_I2C_ListenCpltCallback>
}
 8006874:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006876:	f014 fd83 	bl	801b380 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	fe00e800 	.word	0xfe00e800
 8006880:	ffff0000 	.word	0xffff0000

08006884 <I2C_Slave_ISR_IT>:
{
 8006884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006886:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800688a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800688c:	2b01      	cmp	r3, #1
 800688e:	f000 8081 	beq.w	8006994 <I2C_Slave_ISR_IT+0x110>
 8006892:	4617      	mov	r7, r2
 8006894:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006896:	068a      	lsls	r2, r1, #26
 8006898:	4604      	mov	r4, r0
 800689a:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 800689c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068a0:	d501      	bpl.n	80068a6 <I2C_Slave_ISR_IT+0x22>
 80068a2:	06bb      	lsls	r3, r7, #26
 80068a4:	d462      	bmi.n	800696c <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068a6:	06ea      	lsls	r2, r5, #27
 80068a8:	d51c      	bpl.n	80068e4 <I2C_Slave_ISR_IT+0x60>
 80068aa:	06fb      	lsls	r3, r7, #27
 80068ac:	d51a      	bpl.n	80068e4 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
 80068ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d15f      	bne.n	8006976 <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80068b6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80068ba:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	d101      	bne.n	80068c6 <I2C_Slave_ISR_IT+0x42>
 80068c2:	2a28      	cmp	r2, #40	; 0x28
 80068c4:	d07f      	beq.n	80069c6 <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068c6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ca:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068cc:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068ce:	6823      	ldr	r3, [r4, #0]
 80068d0:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068d2:	d102      	bne.n	80068da <I2C_Slave_ISR_IT+0x56>
 80068d4:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80068d8:	d162      	bne.n	80069a0 <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
 80068da:	2300      	movs	r3, #0
  return HAL_OK;
 80068dc:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 80068de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80068e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068e4:	076a      	lsls	r2, r5, #29
 80068e6:	d40d      	bmi.n	8006904 <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068e8:	0728      	lsls	r0, r5, #28
 80068ea:	d529      	bpl.n	8006940 <I2C_Slave_ISR_IT+0xbc>
 80068ec:	0739      	lsls	r1, r7, #28
 80068ee:	d527      	bpl.n	8006940 <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80068f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80068f8:	2b28      	cmp	r3, #40	; 0x28
 80068fa:	d060      	beq.n	80069be <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	2208      	movs	r2, #8
 8006900:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006902:	e7ea      	b.n	80068da <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006904:	077b      	lsls	r3, r7, #29
 8006906:	d5ef      	bpl.n	80068e8 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
 8006908:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	b16b      	cbz	r3, 800692a <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800690e:	6822      	ldr	r2, [r4, #0]
 8006910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006914:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8006916:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006918:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800691a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800691c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800691e:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006920:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006922:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006924:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006926:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006928:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800692a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800692c:	b29b      	uxth	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1d3      	bne.n	80068da <I2C_Slave_ISR_IT+0x56>
 8006932:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8006936:	d0d0      	beq.n	80068da <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
 8006938:	4620      	mov	r0, r4
 800693a:	f7ff fd39 	bl	80063b0 <I2C_ITSlaveSeqCplt>
 800693e:	e7cc      	b.n	80068da <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006940:	07aa      	lsls	r2, r5, #30
 8006942:	d5ca      	bpl.n	80068da <I2C_Slave_ISR_IT+0x56>
 8006944:	07bb      	lsls	r3, r7, #30
 8006946:	d5c8      	bpl.n	80068da <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
 8006948:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800694a:	b29b      	uxth	r3, r3
 800694c:	b323      	cbz	r3, 8006998 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800694e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	7812      	ldrb	r2, [r2, #0]
 8006954:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006956:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006958:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800695a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800695c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800695e:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006960:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006962:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006964:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006966:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006968:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800696a:	e7b6      	b.n	80068da <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800696c:	f7ff fed0 	bl	8006710 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006970:	06ea      	lsls	r2, r5, #27
 8006972:	d5b7      	bpl.n	80068e4 <I2C_Slave_ISR_IT+0x60>
 8006974:	e799      	b.n	80068aa <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	2210      	movs	r2, #16
 800697a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800697c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800697e:	f043 0304 	orr.w	r3, r3, #4
 8006982:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006984:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8006988:	d1a7      	bne.n	80068da <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800698a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800698c:	4620      	mov	r0, r4
 800698e:	f7ff fdbb 	bl	8006508 <I2C_ITError>
 8006992:	e7a2      	b.n	80068da <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
 8006994:	2002      	movs	r0, #2
}
 8006996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006998:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800699c:	d19d      	bne.n	80068da <I2C_Slave_ISR_IT+0x56>
 800699e:	e7cb      	b.n	8006938 <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	0790      	lsls	r0, r2, #30
 80069a6:	d502      	bpl.n	80069ae <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 80069a8:	2200      	movs	r2, #0
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069ac:	6823      	ldr	r3, [r4, #0]
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	07d1      	lsls	r1, r2, #31
 80069b2:	d4c1      	bmi.n	8006938 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	f042 0201 	orr.w	r2, r2, #1
 80069ba:	619a      	str	r2, [r3, #24]
 80069bc:	e7bc      	b.n	8006938 <I2C_Slave_ISR_IT+0xb4>
 80069be:	4620      	mov	r0, r4
 80069c0:	f7ff fd4c 	bl	800645c <I2C_ITAddrCplt.part.0>
 80069c4:	e789      	b.n	80068da <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069c6:	4918      	ldr	r1, [pc, #96]	; (8006a28 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
 80069c8:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80069ca:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 80069cc:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069ce:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80069d0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80069d2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80069da:	d512      	bpl.n	8006a02 <I2C_Slave_ISR_IT+0x17e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80069e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 80069e8:	3301      	adds	r3, #1
 80069ea:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80069ec:	b14a      	cbz	r2, 8006a02 <I2C_Slave_ISR_IT+0x17e>
      hi2c->XferCount--;
 80069ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80069f0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80069f2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80069f4:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80069fc:	f043 0304 	orr.w	r3, r3, #4
 8006a00:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a02:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a04:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a06:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8006a0a:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a0c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a10:	6813      	ldr	r3, [r2, #0]
 8006a12:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006a16:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 8006a1c:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 8006a1e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006a22:	f7ff fd4d 	bl	80064c0 <HAL_I2C_ListenCpltCallback>
}
 8006a26:	e758      	b.n	80068da <I2C_Slave_ISR_IT+0x56>
 8006a28:	ffff0000 	.word	0xffff0000

08006a2c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a2c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8006a30:	2a20      	cmp	r2, #32
 8006a32:	d129      	bne.n	8006a88 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 8006a34:	4603      	mov	r3, r0
{
 8006a36:	b500      	push	{lr}
 8006a38:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a3c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006a40:	2a01      	cmp	r2, #1
 8006a42:	d023      	beq.n	8006a8c <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8006a44:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a46:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a48:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8006a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a50:	2224      	movs	r2, #36	; 0x24
 8006a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8006a56:	6802      	ldr	r2, [r0, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	6802      	ldr	r2, [r0, #0]
 8006a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a66:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	6802      	ldr	r2, [r0, #0]
 8006a6c:	4311      	orrs	r1, r2
 8006a6e:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8006a70:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 8006a72:	6819      	ldr	r1, [r3, #0]
 8006a74:	680a      	ldr	r2, [r1, #0]
 8006a76:	f042 0201 	orr.w	r2, r2, #1
 8006a7a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006a7c:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006a80:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006a84:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8006a88:	2002      	movs	r0, #2
}
 8006a8a:	4770      	bx	lr
    return HAL_BUSY;
 8006a8c:	2002      	movs	r0, #2
}
 8006a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a92:	bf00      	nop

08006a94 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a94:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 8006a98:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a9a:	2a20      	cmp	r2, #32
 8006a9c:	fa5f fc82 	uxtb.w	ip, r2
 8006aa0:	d121      	bne.n	8006ae6 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa2:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006aa6:	2a01      	cmp	r2, #1
 8006aa8:	d01d      	beq.n	8006ae6 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 8006aaa:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006aac:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab2:	2224      	movs	r2, #36	; 0x24
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8006ab8:	6802      	ldr	r2, [r0, #0]
 8006aba:	f022 0201 	bic.w	r2, r2, #1
 8006abe:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ac4:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ac8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006acc:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 8006ace:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	6802      	ldr	r2, [r0, #0]
 8006ad4:	f042 0201 	orr.w	r2, r2, #1
 8006ad8:	6002      	str	r2, [r0, #0]

    return HAL_OK;
 8006ada:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8006adc:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006ae0:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
 8006ae4:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006ae6:	2002      	movs	r0, #2
  }
}
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop

08006aec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006aec:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006aee:	4c10      	ldr	r4, [pc, #64]	; (8006b30 <HAL_PWREx_ConfigSupply+0x44>)
 8006af0:	68e3      	ldr	r3, [r4, #12]
 8006af2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006af6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006af8:	d105      	bne.n	8006b06 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006afa:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006afe:	1a18      	subs	r0, r3, r0
 8006b00:	bf18      	it	ne
 8006b02:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8006b04:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b06:	f023 0307 	bic.w	r3, r3, #7
 8006b0a:	4303      	orrs	r3, r0
 8006b0c:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8006b0e:	f7fd f991 	bl	8003e34 <HAL_GetTick>
 8006b12:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b14:	e005      	b.n	8006b22 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b16:	f7fd f98d 	bl	8003e34 <HAL_GetTick>
 8006b1a:	1b40      	subs	r0, r0, r5
 8006b1c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006b20:	d804      	bhi.n	8006b2c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	049b      	lsls	r3, r3, #18
 8006b26:	d5f6      	bpl.n	8006b16 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8006b28:	2000      	movs	r0, #0
}
 8006b2a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8006b2c:	2001      	movs	r0, #1
}
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	58024800 	.word	0x58024800

08006b34 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b34:	4b3c      	ldr	r3, [pc, #240]	; (8006c28 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8006b36:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b3a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b3c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8006b3e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b42:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b44:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8006b48:	d038      	beq.n	8006bbc <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b4a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b4e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b52:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b56:	fb05 f101 	mul.w	r1, r5, r1
 8006b5a:	2a01      	cmp	r2, #1
 8006b5c:	ee07 1a90 	vmov	s15, r1
 8006b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8006b64:	d002      	beq.n	8006b6c <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8006b66:	2a02      	cmp	r2, #2
 8006b68:	d050      	beq.n	8006c0c <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 8006b6a:	b34a      	cbz	r2, 8006bc0 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b6c:	ee07 0a90 	vmov	s15, r0
 8006b70:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8006c2c <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8006b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8006b7e:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8006c30 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8006b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b92:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006b96:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006b9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b9e:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006ba6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006ba8:	ee07 3a90 	vmov	s15, r3
 8006bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bb8:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8006bbc:	bc30      	pop	{r4, r5}
 8006bbe:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	0692      	lsls	r2, r2, #26
 8006bc4:	d529      	bpl.n	8006c1a <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bc6:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bc8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bcc:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bd4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bdc:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006c30 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8006be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006be4:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be6:	ee06 3a10 	vmov	s12, r3
 8006bea:	ee05 2a90 	vmov	s11, r2
 8006bee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006bf2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006bf6:	ee36 6a26 	vadd.f32	s12, s12, s13
 8006bfa:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006bfe:	eef0 7a46 	vmov.f32	s15, s12
 8006c02:	eee7 7a05 	vfma.f32	s15, s14, s10
 8006c06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006c0a:	e7c8      	b.n	8006b9e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c0c:	ee07 0a90 	vmov	s15, r0
 8006c10:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8006c38 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8006c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c18:	e7ae      	b.n	8006b78 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c1a:	ee07 0a90 	vmov	s15, r0
 8006c1e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8006c3c <HAL_RCC_GetSysClockFreq.part.0+0x108>
 8006c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c26:	e7a7      	b.n	8006b78 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8006c28:	58024400 	.word	0x58024400
 8006c2c:	4a742400 	.word	0x4a742400
 8006c30:	39000000 	.word	0x39000000
 8006c34:	03d09000 	.word	0x03d09000
 8006c38:	4bbebc20 	.word	0x4bbebc20
 8006c3c:	4c742400 	.word	0x4c742400

08006c40 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8006c40:	2800      	cmp	r0, #0
 8006c42:	f000 81ef 	beq.w	8007024 <HAL_RCC_OscConfig+0x3e4>
{
 8006c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c48:	6803      	ldr	r3, [r0, #0]
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	07d9      	lsls	r1, r3, #31
 8006c4e:	d52e      	bpl.n	8006cae <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c50:	49a4      	ldr	r1, [pc, #656]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006c52:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c54:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c56:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006c5a:	2a10      	cmp	r2, #16
 8006c5c:	f000 8107 	beq.w	8006e6e <HAL_RCC_OscConfig+0x22e>
 8006c60:	2a18      	cmp	r2, #24
 8006c62:	f000 80ff 	beq.w	8006e64 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c66:	6863      	ldr	r3, [r4, #4]
 8006c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6c:	f000 812a 	beq.w	8006ec4 <HAL_RCC_OscConfig+0x284>
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f040 8188 	bne.w	8006f86 <HAL_RCC_OscConfig+0x346>
 8006c76:	4b9b      	ldr	r3, [pc, #620]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c86:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c88:	6863      	ldr	r3, [r4, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 815c 	beq.w	8006f48 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8006c90:	f7fd f8d0 	bl	8003e34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c94:	4e93      	ldr	r6, [pc, #588]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8006c96:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c98:	e005      	b.n	8006ca6 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c9a:	f7fd f8cb 	bl	8003e34 <HAL_GetTick>
 8006c9e:	1b40      	subs	r0, r0, r5
 8006ca0:	2864      	cmp	r0, #100	; 0x64
 8006ca2:	f200 814f 	bhi.w	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ca6:	6833      	ldr	r3, [r6, #0]
 8006ca8:	039b      	lsls	r3, r3, #14
 8006caa:	d5f6      	bpl.n	8006c9a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	079d      	lsls	r5, r3, #30
 8006cb0:	f100 808a 	bmi.w	8006dc8 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006cb4:	06d9      	lsls	r1, r3, #27
 8006cb6:	d533      	bpl.n	8006d20 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cb8:	4a8a      	ldr	r2, [pc, #552]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006cba:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cbc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	f000 80e3 	beq.w	8006e8e <HAL_RCC_OscConfig+0x24e>
 8006cc8:	2b18      	cmp	r3, #24
 8006cca:	f000 80db 	beq.w	8006e84 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006cce:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8006cd0:	4d84      	ldr	r5, [pc, #528]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8176 	beq.w	8006fc4 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cde:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ce0:	f7fd f8a8 	bl	8003e34 <HAL_GetTick>
 8006ce4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ce6:	e005      	b.n	8006cf4 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ce8:	f7fd f8a4 	bl	8003e34 <HAL_GetTick>
 8006cec:	1b80      	subs	r0, r0, r6
 8006cee:	2802      	cmp	r0, #2
 8006cf0:	f200 8128 	bhi.w	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	05db      	lsls	r3, r3, #23
 8006cf8:	d5f6      	bpl.n	8006ce8 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006cfa:	f7fd f8b3 	bl	8003e64 <HAL_GetREVID>
 8006cfe:	f241 0303 	movw	r3, #4099	; 0x1003
 8006d02:	4298      	cmp	r0, r3
 8006d04:	f200 8266 	bhi.w	80071d4 <HAL_RCC_OscConfig+0x594>
 8006d08:	6a22      	ldr	r2, [r4, #32]
 8006d0a:	686b      	ldr	r3, [r5, #4]
 8006d0c:	2a20      	cmp	r2, #32
 8006d0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006d12:	bf0c      	ite	eq
 8006d14:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8006d18:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8006d1c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	071d      	lsls	r5, r3, #28
 8006d22:	d516      	bpl.n	8006d52 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d24:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8006d26:	4d6f      	ldr	r5, [pc, #444]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 811b 	beq.w	8006f64 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 8006d2e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006d30:	f043 0301 	orr.w	r3, r3, #1
 8006d34:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006d36:	f7fd f87d 	bl	8003e34 <HAL_GetTick>
 8006d3a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d3c:	e005      	b.n	8006d4a <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d3e:	f7fd f879 	bl	8003e34 <HAL_GetTick>
 8006d42:	1b80      	subs	r0, r0, r6
 8006d44:	2802      	cmp	r0, #2
 8006d46:	f200 80fd 	bhi.w	8006f44 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d4a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006d4c:	0798      	lsls	r0, r3, #30
 8006d4e:	d5f6      	bpl.n	8006d3e <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	069a      	lsls	r2, r3, #26
 8006d54:	d516      	bpl.n	8006d84 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d56:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8006d58:	4d62      	ldr	r5, [pc, #392]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8121 	beq.w	8006fa2 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d66:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006d68:	f7fd f864 	bl	8003e34 <HAL_GetTick>
 8006d6c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d6e:	e005      	b.n	8006d7c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d70:	f7fd f860 	bl	8003e34 <HAL_GetTick>
 8006d74:	1b80      	subs	r0, r0, r6
 8006d76:	2802      	cmp	r0, #2
 8006d78:	f200 80e4 	bhi.w	8006f44 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	049f      	lsls	r7, r3, #18
 8006d80:	d5f6      	bpl.n	8006d70 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	0759      	lsls	r1, r3, #29
 8006d86:	f100 80a3 	bmi.w	8006ed0 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d8c:	b1d0      	cbz	r0, 8006dc4 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d8e:	4d55      	ldr	r5, [pc, #340]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006d90:	692b      	ldr	r3, [r5, #16]
 8006d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d96:	2b18      	cmp	r3, #24
 8006d98:	f000 81b6 	beq.w	8007108 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 8006d9c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d9e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006da4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006da6:	f000 8149 	beq.w	800703c <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 8006daa:	f7fd f843 	bl	8003e34 <HAL_GetTick>
 8006dae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006db0:	e005      	b.n	8006dbe <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db2:	f7fd f83f 	bl	8003e34 <HAL_GetTick>
 8006db6:	1b00      	subs	r0, r0, r4
 8006db8:	2802      	cmp	r0, #2
 8006dba:	f200 80c3 	bhi.w	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dbe:	682b      	ldr	r3, [r5, #0]
 8006dc0:	019b      	lsls	r3, r3, #6
 8006dc2:	d4f6      	bmi.n	8006db2 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8006dc4:	2000      	movs	r0, #0
}
 8006dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006dc8:	4a46      	ldr	r2, [pc, #280]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006dca:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006dcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006dce:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8006dd2:	d12d      	bne.n	8006e30 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006dd4:	4b43      	ldr	r3, [pc, #268]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006dd6:	68e2      	ldr	r2, [r4, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	0759      	lsls	r1, r3, #29
 8006ddc:	d501      	bpl.n	8006de2 <HAL_RCC_OscConfig+0x1a2>
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	d04e      	beq.n	8006e80 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006de2:	4d40      	ldr	r5, [pc, #256]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	f023 0319 	bic.w	r3, r3, #25
 8006dea:	4313      	orrs	r3, r2
 8006dec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006dee:	f7fd f821 	bl	8003e34 <HAL_GetTick>
 8006df2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006df4:	e005      	b.n	8006e02 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006df6:	f7fd f81d 	bl	8003e34 <HAL_GetTick>
 8006dfa:	1b80      	subs	r0, r0, r6
 8006dfc:	2802      	cmp	r0, #2
 8006dfe:	f200 80a1 	bhi.w	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	075b      	lsls	r3, r3, #29
 8006e06:	d5f6      	bpl.n	8006df6 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e08:	f7fd f82c 	bl	8003e64 <HAL_GetREVID>
 8006e0c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006e10:	4298      	cmp	r0, r3
 8006e12:	f200 80fe 	bhi.w	8007012 <HAL_RCC_OscConfig+0x3d2>
 8006e16:	6922      	ldr	r2, [r4, #16]
 8006e18:	686b      	ldr	r3, [r5, #4]
 8006e1a:	2a40      	cmp	r2, #64	; 0x40
 8006e1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006e20:	bf0c      	ite	eq
 8006e22:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8006e26:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8006e2a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	e741      	b.n	8006cb4 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e30:	2b18      	cmp	r3, #24
 8006e32:	f000 80ea 	beq.w	800700a <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e36:	4d2b      	ldr	r5, [pc, #172]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e38:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e3a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	f000 80d3 	beq.w	8006fe8 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e42:	f023 0319 	bic.w	r3, r3, #25
 8006e46:	4313      	orrs	r3, r2
 8006e48:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006e4a:	f7fc fff3 	bl	8003e34 <HAL_GetTick>
 8006e4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e50:	e004      	b.n	8006e5c <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e52:	f7fc ffef 	bl	8003e34 <HAL_GetTick>
 8006e56:	1b80      	subs	r0, r0, r6
 8006e58:	2802      	cmp	r0, #2
 8006e5a:	d873      	bhi.n	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	075f      	lsls	r7, r3, #29
 8006e60:	d5f7      	bpl.n	8006e52 <HAL_RCC_OscConfig+0x212>
 8006e62:	e7d1      	b.n	8006e08 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e64:	f001 0103 	and.w	r1, r1, #3
 8006e68:	2902      	cmp	r1, #2
 8006e6a:	f47f aefc 	bne.w	8006c66 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	0392      	lsls	r2, r2, #14
 8006e74:	f57f af1b 	bpl.w	8006cae <HAL_RCC_OscConfig+0x6e>
 8006e78:	6862      	ldr	r2, [r4, #4]
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	f47f af17 	bne.w	8006cae <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8006e80:	2001      	movs	r0, #1
}
 8006e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e84:	f002 0203 	and.w	r2, r2, #3
 8006e88:	2a01      	cmp	r2, #1
 8006e8a:	f47f af20 	bne.w	8006cce <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e8e:	4b15      	ldr	r3, [pc, #84]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	05da      	lsls	r2, r3, #23
 8006e94:	d502      	bpl.n	8006e9c <HAL_RCC_OscConfig+0x25c>
 8006e96:	69e3      	ldr	r3, [r4, #28]
 8006e98:	2b80      	cmp	r3, #128	; 0x80
 8006e9a:	d1f1      	bne.n	8006e80 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e9c:	f7fc ffe2 	bl	8003e64 <HAL_GetREVID>
 8006ea0:	f241 0303 	movw	r3, #4099	; 0x1003
 8006ea4:	4298      	cmp	r0, r3
 8006ea6:	f200 80bf 	bhi.w	8007028 <HAL_RCC_OscConfig+0x3e8>
 8006eaa:	6a22      	ldr	r2, [r4, #32]
 8006eac:	2a20      	cmp	r2, #32
 8006eae:	f000 81ad 	beq.w	800720c <HAL_RCC_OscConfig+0x5cc>
 8006eb2:	490c      	ldr	r1, [pc, #48]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006eb4:	684b      	ldr	r3, [r1, #4]
 8006eb6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006eba:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006ebe:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	e72d      	b.n	8006d20 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ec4:	4a07      	ldr	r2, [pc, #28]	; (8006ee4 <HAL_RCC_OscConfig+0x2a4>)
 8006ec6:	6813      	ldr	r3, [r2, #0]
 8006ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	e6db      	b.n	8006c88 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8006ed0:	4d05      	ldr	r5, [pc, #20]	; (8006ee8 <HAL_RCC_OscConfig+0x2a8>)
 8006ed2:	682b      	ldr	r3, [r5, #0]
 8006ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ed8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006eda:	f7fc ffab 	bl	8003e34 <HAL_GetTick>
 8006ede:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ee0:	e009      	b.n	8006ef6 <HAL_RCC_OscConfig+0x2b6>
 8006ee2:	bf00      	nop
 8006ee4:	58024400 	.word	0x58024400
 8006ee8:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eec:	f7fc ffa2 	bl	8003e34 <HAL_GetTick>
 8006ef0:	1b80      	subs	r0, r0, r6
 8006ef2:	2864      	cmp	r0, #100	; 0x64
 8006ef4:	d826      	bhi.n	8006f44 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ef6:	682b      	ldr	r3, [r5, #0]
 8006ef8:	05da      	lsls	r2, r3, #23
 8006efa:	d5f7      	bpl.n	8006eec <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006efc:	68a3      	ldr	r3, [r4, #8]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	f000 8171 	beq.w	80071e6 <HAL_RCC_OscConfig+0x5a6>
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f040 8174 	bne.w	80071f2 <HAL_RCC_OscConfig+0x5b2>
 8006f0a:	4baa      	ldr	r3, [pc, #680]	; (80071b4 <HAL_RCC_OscConfig+0x574>)
 8006f0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f0e:	f022 0201 	bic.w	r2, r2, #1
 8006f12:	671a      	str	r2, [r3, #112]	; 0x70
 8006f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f16:	f022 0204 	bic.w	r2, r2, #4
 8006f1a:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f1c:	68a3      	ldr	r3, [r4, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f000 8140 	beq.w	80071a4 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 8006f24:	f7fc ff86 	bl	8003e34 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f28:	4ea2      	ldr	r6, [pc, #648]	; (80071b4 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f2a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006f2e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f30:	e004      	b.n	8006f3c <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f32:	f7fc ff7f 	bl	8003e34 <HAL_GetTick>
 8006f36:	1b40      	subs	r0, r0, r5
 8006f38:	42b8      	cmp	r0, r7
 8006f3a:	d803      	bhi.n	8006f44 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f3c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006f3e:	079b      	lsls	r3, r3, #30
 8006f40:	d5f7      	bpl.n	8006f32 <HAL_RCC_OscConfig+0x2f2>
 8006f42:	e722      	b.n	8006d8a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8006f44:	2003      	movs	r0, #3
}
 8006f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8006f48:	f7fc ff74 	bl	8003e34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f4c:	4e99      	ldr	r6, [pc, #612]	; (80071b4 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 8006f4e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f50:	e004      	b.n	8006f5c <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f52:	f7fc ff6f 	bl	8003e34 <HAL_GetTick>
 8006f56:	1b40      	subs	r0, r0, r5
 8006f58:	2864      	cmp	r0, #100	; 0x64
 8006f5a:	d8f3      	bhi.n	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f5c:	6833      	ldr	r3, [r6, #0]
 8006f5e:	039f      	lsls	r7, r3, #14
 8006f60:	d4f7      	bmi.n	8006f52 <HAL_RCC_OscConfig+0x312>
 8006f62:	e6a3      	b.n	8006cac <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8006f64:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006f6c:	f7fc ff62 	bl	8003e34 <HAL_GetTick>
 8006f70:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f72:	e004      	b.n	8006f7e <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f74:	f7fc ff5e 	bl	8003e34 <HAL_GetTick>
 8006f78:	1b80      	subs	r0, r0, r6
 8006f7a:	2802      	cmp	r0, #2
 8006f7c:	d8e2      	bhi.n	8006f44 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f80:	0799      	lsls	r1, r3, #30
 8006f82:	d4f7      	bmi.n	8006f74 <HAL_RCC_OscConfig+0x334>
 8006f84:	e6e4      	b.n	8006d50 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f8a:	4b8a      	ldr	r3, [pc, #552]	; (80071b4 <HAL_RCC_OscConfig+0x574>)
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	f47f ae74 	bne.w	8006c7a <HAL_RCC_OscConfig+0x3a>
 8006f92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e672      	b.n	8006c88 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 8006fa2:	682b      	ldr	r3, [r5, #0]
 8006fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006faa:	f7fc ff43 	bl	8003e34 <HAL_GetTick>
 8006fae:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fb0:	e004      	b.n	8006fbc <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fb2:	f7fc ff3f 	bl	8003e34 <HAL_GetTick>
 8006fb6:	1b80      	subs	r0, r0, r6
 8006fb8:	2802      	cmp	r0, #2
 8006fba:	d8c3      	bhi.n	8006f44 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	0498      	lsls	r0, r3, #18
 8006fc0:	d4f7      	bmi.n	8006fb2 <HAL_RCC_OscConfig+0x372>
 8006fc2:	e6de      	b.n	8006d82 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006fcc:	f7fc ff32 	bl	8003e34 <HAL_GetTick>
 8006fd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fd2:	e004      	b.n	8006fde <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006fd4:	f7fc ff2e 	bl	8003e34 <HAL_GetTick>
 8006fd8:	1b80      	subs	r0, r0, r6
 8006fda:	2802      	cmp	r0, #2
 8006fdc:	d8b2      	bhi.n	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fde:	682b      	ldr	r3, [r5, #0]
 8006fe0:	05df      	lsls	r7, r3, #23
 8006fe2:	d4f7      	bmi.n	8006fd4 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	e69b      	b.n	8006d20 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
 8006fec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006fee:	f7fc ff21 	bl	8003e34 <HAL_GetTick>
 8006ff2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ff4:	e004      	b.n	8007000 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ff6:	f7fc ff1d 	bl	8003e34 <HAL_GetTick>
 8006ffa:	1b80      	subs	r0, r0, r6
 8006ffc:	2802      	cmp	r0, #2
 8006ffe:	d8a1      	bhi.n	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	0758      	lsls	r0, r3, #29
 8007004:	d4f7      	bmi.n	8006ff6 <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	e654      	b.n	8006cb4 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800700a:	0790      	lsls	r0, r2, #30
 800700c:	f47f af13 	bne.w	8006e36 <HAL_RCC_OscConfig+0x1f6>
 8007010:	e6e0      	b.n	8006dd4 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007012:	686b      	ldr	r3, [r5, #4]
 8007014:	6922      	ldr	r2, [r4, #16]
 8007016:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800701a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800701e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	e647      	b.n	8006cb4 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8007024:	2001      	movs	r0, #1
}
 8007026:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007028:	4a62      	ldr	r2, [pc, #392]	; (80071b4 <HAL_RCC_OscConfig+0x574>)
 800702a:	6a21      	ldr	r1, [r4, #32]
 800702c:	68d3      	ldr	r3, [r2, #12]
 800702e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007032:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007036:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	e671      	b.n	8006d20 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800703c:	f7fc fefa 	bl	8003e34 <HAL_GetTick>
 8007040:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007042:	e005      	b.n	8007050 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007044:	f7fc fef6 	bl	8003e34 <HAL_GetTick>
 8007048:	1b80      	subs	r0, r0, r6
 800704a:	2802      	cmp	r0, #2
 800704c:	f63f af7a 	bhi.w	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	0199      	lsls	r1, r3, #6
 8007054:	d4f6      	bmi.n	8007044 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007056:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007058:	4b57      	ldr	r3, [pc, #348]	; (80071b8 <HAL_RCC_OscConfig+0x578>)
 800705a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800705c:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800705e:	4957      	ldr	r1, [pc, #348]	; (80071bc <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007060:	4e54      	ldr	r6, [pc, #336]	; (80071b4 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007062:	4313      	orrs	r3, r2
 8007064:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007066:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800706a:	62ab      	str	r3, [r5, #40]	; 0x28
 800706c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8007070:	3b01      	subs	r3, #1
 8007072:	3a01      	subs	r2, #1
 8007074:	025b      	lsls	r3, r3, #9
 8007076:	0412      	lsls	r2, r2, #16
 8007078:	b29b      	uxth	r3, r3
 800707a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800707e:	4313      	orrs	r3, r2
 8007080:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007082:	3a01      	subs	r2, #1
 8007084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007088:	4313      	orrs	r3, r2
 800708a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800708c:	3a01      	subs	r2, #1
 800708e:	0612      	lsls	r2, r2, #24
 8007090:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007094:	4313      	orrs	r3, r2
 8007096:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8007098:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070a0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80070a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80070a4:	4011      	ands	r1, r2
 80070a6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80070aa:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80070b0:	f023 030c 	bic.w	r3, r3, #12
 80070b4:	4313      	orrs	r3, r2
 80070b6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070b8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80070bc:	f023 0302 	bic.w	r3, r3, #2
 80070c0:	4313      	orrs	r3, r2
 80070c2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070da:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80070dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070ea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80070ec:	f7fc fea2 	bl	8003e34 <HAL_GetTick>
 80070f0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80070f2:	e005      	b.n	8007100 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f4:	f7fc fe9e 	bl	8003e34 <HAL_GetTick>
 80070f8:	1b00      	subs	r0, r0, r4
 80070fa:	2802      	cmp	r0, #2
 80070fc:	f63f af22 	bhi.w	8006f44 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007100:	6833      	ldr	r3, [r6, #0]
 8007102:	019a      	lsls	r2, r3, #6
 8007104:	d5f6      	bpl.n	80070f4 <HAL_RCC_OscConfig+0x4b4>
 8007106:	e65d      	b.n	8006dc4 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007108:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800710a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800710c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800710e:	f43f ae5a 	beq.w	8006dc6 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007112:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007116:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007118:	428b      	cmp	r3, r1
 800711a:	f47f aeb1 	bne.w	8006e80 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800711e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007122:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007124:	429a      	cmp	r2, r3
 8007126:	f47f aeab 	bne.w	8006e80 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800712a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800712c:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8007130:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007132:	429a      	cmp	r2, r3
 8007134:	f47f aea4 	bne.w	8006e80 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007138:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800713a:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800713e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007140:	429a      	cmp	r2, r3
 8007142:	f47f ae9d 	bne.w	8006e80 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007148:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800714c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800714e:	429a      	cmp	r2, r3
 8007150:	f47f ae96 	bne.w	8006e80 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007154:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007156:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800715a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800715c:	429e      	cmp	r6, r3
 800715e:	f47f ae8f 	bne.w	8006e80 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007162:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007164:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007166:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800716a:	429a      	cmp	r2, r3
 800716c:	f43f ae2a 	beq.w	8006dc4 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8007170:	4a10      	ldr	r2, [pc, #64]	; (80071b4 <HAL_RCC_OscConfig+0x574>)
 8007172:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007174:	f023 0301 	bic.w	r3, r3, #1
 8007178:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800717a:	f7fc fe5b 	bl	8003e34 <HAL_GetTick>
 800717e:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007180:	f7fc fe58 	bl	8003e34 <HAL_GetTick>
 8007184:	42a8      	cmp	r0, r5
 8007186:	d0fb      	beq.n	8007180 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007188:	4a0a      	ldr	r2, [pc, #40]	; (80071b4 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 800718a:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800718c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800718e:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <HAL_RCC_OscConfig+0x57c>)
 8007190:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8007192:	4023      	ands	r3, r4
 8007194:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007198:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800719a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800719c:	f043 0301 	orr.w	r3, r3, #1
 80071a0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80071a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 80071a4:	f7fc fe46 	bl	8003e34 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071a8:	4e02      	ldr	r6, [pc, #8]	; (80071b4 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071aa:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80071ae:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071b0:	e00c      	b.n	80071cc <HAL_RCC_OscConfig+0x58c>
 80071b2:	bf00      	nop
 80071b4:	58024400 	.word	0x58024400
 80071b8:	fffffc0c 	.word	0xfffffc0c
 80071bc:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071c0:	f7fc fe38 	bl	8003e34 <HAL_GetTick>
 80071c4:	1b40      	subs	r0, r0, r5
 80071c6:	42b8      	cmp	r0, r7
 80071c8:	f63f aebc 	bhi.w	8006f44 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071cc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80071ce:	0798      	lsls	r0, r3, #30
 80071d0:	d4f6      	bmi.n	80071c0 <HAL_RCC_OscConfig+0x580>
 80071d2:	e5da      	b.n	8006d8a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071d4:	68eb      	ldr	r3, [r5, #12]
 80071d6:	6a22      	ldr	r2, [r4, #32]
 80071d8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80071dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80071e0:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	e59c      	b.n	8006d20 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071e6:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <HAL_RCC_OscConfig+0x5e0>)
 80071e8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	6713      	str	r3, [r2, #112]	; 0x70
 80071f0:	e694      	b.n	8006f1c <HAL_RCC_OscConfig+0x2dc>
 80071f2:	2b05      	cmp	r3, #5
 80071f4:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <HAL_RCC_OscConfig+0x5e0>)
 80071f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071f8:	f47f ae89 	bne.w	8006f0e <HAL_RCC_OscConfig+0x2ce>
 80071fc:	f042 0204 	orr.w	r2, r2, #4
 8007200:	671a      	str	r2, [r3, #112]	; 0x70
 8007202:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007204:	f042 0201 	orr.w	r2, r2, #1
 8007208:	671a      	str	r2, [r3, #112]	; 0x70
 800720a:	e687      	b.n	8006f1c <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800720c:	4a04      	ldr	r2, [pc, #16]	; (8007220 <HAL_RCC_OscConfig+0x5e0>)
 800720e:	6853      	ldr	r3, [r2, #4]
 8007210:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007218:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	e580      	b.n	8006d20 <HAL_RCC_OscConfig+0xe0>
 800721e:	bf00      	nop
 8007220:	58024400 	.word	0x58024400

08007224 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007224:	4a48      	ldr	r2, [pc, #288]	; (8007348 <HAL_RCC_GetSysClockFreq+0x124>)
 8007226:	6913      	ldr	r3, [r2, #16]
 8007228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800722c:	2b10      	cmp	r3, #16
 800722e:	d004      	beq.n	800723a <HAL_RCC_GetSysClockFreq+0x16>
 8007230:	2b18      	cmp	r3, #24
 8007232:	d00d      	beq.n	8007250 <HAL_RCC_GetSysClockFreq+0x2c>
 8007234:	b11b      	cbz	r3, 800723e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8007236:	4845      	ldr	r0, [pc, #276]	; (800734c <HAL_RCC_GetSysClockFreq+0x128>)
 8007238:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800723a:	4845      	ldr	r0, [pc, #276]	; (8007350 <HAL_RCC_GetSysClockFreq+0x12c>)
 800723c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800723e:	6813      	ldr	r3, [r2, #0]
 8007240:	0699      	lsls	r1, r3, #26
 8007242:	d54a      	bpl.n	80072da <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007244:	6813      	ldr	r3, [r2, #0]
 8007246:	4843      	ldr	r0, [pc, #268]	; (8007354 <HAL_RCC_GetSysClockFreq+0x130>)
 8007248:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800724c:	40d8      	lsrs	r0, r3
 800724e:	4770      	bx	lr
{
 8007250:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007252:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007254:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007256:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8007258:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800725c:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800725e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8007262:	d038      	beq.n	80072d6 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007264:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007268:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800726c:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007270:	fb05 f101 	mul.w	r1, r5, r1
 8007274:	2b01      	cmp	r3, #1
 8007276:	ee07 1a90 	vmov	s15, r1
 800727a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800727e:	d002      	beq.n	8007286 <HAL_RCC_GetSysClockFreq+0x62>
 8007280:	2b02      	cmp	r3, #2
 8007282:	d02c      	beq.n	80072de <HAL_RCC_GetSysClockFreq+0xba>
 8007284:	b393      	cbz	r3, 80072ec <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007286:	ee07 0a90 	vmov	s15, r0
 800728a:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8007358 <HAL_RCC_GetSysClockFreq+0x134>
 800728e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007292:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007294:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8007298:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800735c <HAL_RCC_GetSysClockFreq+0x138>
 800729c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a0:	ee07 3a90 	vmov	s15, r3
 80072a4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80072a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ac:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80072b0:	eee7 7a06 	vfma.f32	s15, s14, s12
 80072b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80072b8:	4b23      	ldr	r3, [pc, #140]	; (8007348 <HAL_RCC_GetSysClockFreq+0x124>)
 80072ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80072c0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80072c2:	ee07 3a90 	vmov	s15, r3
 80072c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d2:	ee17 0a90 	vmov	r0, s15
}
 80072d6:	bc30      	pop	{r4, r5}
 80072d8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80072da:	481e      	ldr	r0, [pc, #120]	; (8007354 <HAL_RCC_GetSysClockFreq+0x130>)
}
 80072dc:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072de:	ee07 0a90 	vmov	s15, r0
 80072e2:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8007360 <HAL_RCC_GetSysClockFreq+0x13c>
 80072e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ea:	e7d2      	b.n	8007292 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ec:	6813      	ldr	r3, [r2, #0]
 80072ee:	069b      	lsls	r3, r3, #26
 80072f0:	d522      	bpl.n	8007338 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072f2:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072f4:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072f8:	4916      	ldr	r1, [pc, #88]	; (8007354 <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007300:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007308:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800735c <HAL_RCC_GetSysClockFreq+0x138>
 800730c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007310:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007312:	ee06 3a10 	vmov	s12, r3
 8007316:	ee05 1a90 	vmov	s11, r1
 800731a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800731e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007322:	ee36 6a26 	vadd.f32	s12, s12, s13
 8007326:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800732a:	eef0 7a46 	vmov.f32	s15, s12
 800732e:	eee7 7a05 	vfma.f32	s15, s14, s10
 8007332:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007336:	e7bf      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007338:	ee07 0a90 	vmov	s15, r0
 800733c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8007364 <HAL_RCC_GetSysClockFreq+0x140>
 8007340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007344:	e7a5      	b.n	8007292 <HAL_RCC_GetSysClockFreq+0x6e>
 8007346:	bf00      	nop
 8007348:	58024400 	.word	0x58024400
 800734c:	003d0900 	.word	0x003d0900
 8007350:	017d7840 	.word	0x017d7840
 8007354:	03d09000 	.word	0x03d09000
 8007358:	4a742400 	.word	0x4a742400
 800735c:	39000000 	.word	0x39000000
 8007360:	4bbebc20 	.word	0x4bbebc20
 8007364:	4c742400 	.word	0x4c742400

08007368 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007368:	2800      	cmp	r0, #0
 800736a:	f000 811a 	beq.w	80075a2 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800736e:	4a92      	ldr	r2, [pc, #584]	; (80075b8 <HAL_RCC_ClockConfig+0x250>)
{
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007374:	6813      	ldr	r3, [r2, #0]
 8007376:	4604      	mov	r4, r0
 8007378:	460d      	mov	r5, r1
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	428b      	cmp	r3, r1
 8007380:	d20c      	bcs.n	800739c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007382:	6813      	ldr	r3, [r2, #0]
 8007384:	f023 030f 	bic.w	r3, r3, #15
 8007388:	430b      	orrs	r3, r1
 800738a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800738c:	6813      	ldr	r3, [r2, #0]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	428b      	cmp	r3, r1
 8007394:	d002      	beq.n	800739c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007396:	2001      	movs	r0, #1
}
 8007398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	075f      	lsls	r7, r3, #29
 80073a0:	d50c      	bpl.n	80073bc <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80073a2:	4986      	ldr	r1, [pc, #536]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 80073a4:	6920      	ldr	r0, [r4, #16]
 80073a6:	698a      	ldr	r2, [r1, #24]
 80073a8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80073ac:	4290      	cmp	r0, r2
 80073ae:	d905      	bls.n	80073bc <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80073b0:	698b      	ldr	r3, [r1, #24]
 80073b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b6:	4303      	orrs	r3, r0
 80073b8:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	071e      	lsls	r6, r3, #28
 80073be:	d50c      	bpl.n	80073da <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073c0:	497e      	ldr	r1, [pc, #504]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 80073c2:	6960      	ldr	r0, [r4, #20]
 80073c4:	69ca      	ldr	r2, [r1, #28]
 80073c6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80073ca:	4290      	cmp	r0, r2
 80073cc:	d905      	bls.n	80073da <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073ce:	69cb      	ldr	r3, [r1, #28]
 80073d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d4:	4303      	orrs	r3, r0
 80073d6:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	06d8      	lsls	r0, r3, #27
 80073dc:	d50c      	bpl.n	80073f8 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073de:	4977      	ldr	r1, [pc, #476]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 80073e0:	69a0      	ldr	r0, [r4, #24]
 80073e2:	69ca      	ldr	r2, [r1, #28]
 80073e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80073e8:	4290      	cmp	r0, r2
 80073ea:	d905      	bls.n	80073f8 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073ec:	69cb      	ldr	r3, [r1, #28]
 80073ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80073f2:	4303      	orrs	r3, r0
 80073f4:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	0699      	lsls	r1, r3, #26
 80073fa:	d50c      	bpl.n	8007416 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073fc:	496f      	ldr	r1, [pc, #444]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 80073fe:	69e0      	ldr	r0, [r4, #28]
 8007400:	6a0a      	ldr	r2, [r1, #32]
 8007402:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007406:	4290      	cmp	r0, r2
 8007408:	d905      	bls.n	8007416 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800740a:	6a0b      	ldr	r3, [r1, #32]
 800740c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007410:	4303      	orrs	r3, r0
 8007412:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	079a      	lsls	r2, r3, #30
 8007418:	f140 8083 	bpl.w	8007522 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800741c:	4867      	ldr	r0, [pc, #412]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 800741e:	68e1      	ldr	r1, [r4, #12]
 8007420:	6982      	ldr	r2, [r0, #24]
 8007422:	f002 020f 	and.w	r2, r2, #15
 8007426:	4291      	cmp	r1, r2
 8007428:	f240 80a9 	bls.w	800757e <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800742c:	6983      	ldr	r3, [r0, #24]
 800742e:	f023 030f 	bic.w	r3, r3, #15
 8007432:	430b      	orrs	r3, r1
 8007434:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	07df      	lsls	r7, r3, #31
 800743a:	d474      	bmi.n	8007526 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800743c:	079f      	lsls	r7, r3, #30
 800743e:	d507      	bpl.n	8007450 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007440:	4a5e      	ldr	r2, [pc, #376]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 8007442:	68e1      	ldr	r1, [r4, #12]
 8007444:	6993      	ldr	r3, [r2, #24]
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	428b      	cmp	r3, r1
 800744c:	f200 80a0 	bhi.w	8007590 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007450:	4a59      	ldr	r2, [pc, #356]	; (80075b8 <HAL_RCC_ClockConfig+0x250>)
 8007452:	6813      	ldr	r3, [r2, #0]
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	42ab      	cmp	r3, r5
 800745a:	d909      	bls.n	8007470 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800745c:	6813      	ldr	r3, [r2, #0]
 800745e:	f023 030f 	bic.w	r3, r3, #15
 8007462:	432b      	orrs	r3, r5
 8007464:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007466:	6813      	ldr	r3, [r2, #0]
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	42ab      	cmp	r3, r5
 800746e:	d192      	bne.n	8007396 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	075e      	lsls	r6, r3, #29
 8007474:	d50c      	bpl.n	8007490 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007476:	4951      	ldr	r1, [pc, #324]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 8007478:	6920      	ldr	r0, [r4, #16]
 800747a:	698a      	ldr	r2, [r1, #24]
 800747c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007480:	4290      	cmp	r0, r2
 8007482:	d205      	bcs.n	8007490 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007484:	698b      	ldr	r3, [r1, #24]
 8007486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800748a:	4303      	orrs	r3, r0
 800748c:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	071d      	lsls	r5, r3, #28
 8007492:	d50c      	bpl.n	80074ae <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007494:	4949      	ldr	r1, [pc, #292]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 8007496:	6960      	ldr	r0, [r4, #20]
 8007498:	69ca      	ldr	r2, [r1, #28]
 800749a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800749e:	4290      	cmp	r0, r2
 80074a0:	d205      	bcs.n	80074ae <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074a2:	69cb      	ldr	r3, [r1, #28]
 80074a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a8:	4303      	orrs	r3, r0
 80074aa:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	06d8      	lsls	r0, r3, #27
 80074b0:	d50c      	bpl.n	80074cc <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80074b2:	4942      	ldr	r1, [pc, #264]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 80074b4:	69a0      	ldr	r0, [r4, #24]
 80074b6:	69ca      	ldr	r2, [r1, #28]
 80074b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80074bc:	4290      	cmp	r0, r2
 80074be:	d205      	bcs.n	80074cc <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80074c0:	69cb      	ldr	r3, [r1, #28]
 80074c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80074c6:	4303      	orrs	r3, r0
 80074c8:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	0699      	lsls	r1, r3, #26
 80074ce:	d50b      	bpl.n	80074e8 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80074d0:	4a3a      	ldr	r2, [pc, #232]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 80074d2:	69e1      	ldr	r1, [r4, #28]
 80074d4:	6a13      	ldr	r3, [r2, #32]
 80074d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074da:	4299      	cmp	r1, r3
 80074dc:	d204      	bcs.n	80074e8 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80074de:	6a13      	ldr	r3, [r2, #32]
 80074e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e4:	430b      	orrs	r3, r1
 80074e6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80074e8:	f7ff fe9c 	bl	8007224 <HAL_RCC_GetSysClockFreq>
 80074ec:	4a33      	ldr	r2, [pc, #204]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 80074ee:	4603      	mov	r3, r0
 80074f0:	4833      	ldr	r0, [pc, #204]	; (80075c0 <HAL_RCC_ClockConfig+0x258>)
 80074f2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074f4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80074f6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80074fa:	4d32      	ldr	r5, [pc, #200]	; (80075c4 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80074fc:	f002 020f 	and.w	r2, r2, #15
 8007500:	4c31      	ldr	r4, [pc, #196]	; (80075c8 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007502:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007504:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007506:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800750a:	4830      	ldr	r0, [pc, #192]	; (80075cc <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800750c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007510:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8007512:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8007514:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007516:	40d3      	lsrs	r3, r2
 8007518:	6023      	str	r3, [r4, #0]
}
 800751a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800751e:	f7fc bc27 	b.w	8003d70 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007522:	07db      	lsls	r3, r3, #31
 8007524:	d594      	bpl.n	8007450 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007526:	4a25      	ldr	r2, [pc, #148]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 8007528:	68a1      	ldr	r1, [r4, #8]
 800752a:	6993      	ldr	r3, [r2, #24]
 800752c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007530:	430b      	orrs	r3, r1
 8007532:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007534:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007536:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007538:	2902      	cmp	r1, #2
 800753a:	d034      	beq.n	80075a6 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800753c:	2903      	cmp	r1, #3
 800753e:	d02d      	beq.n	800759c <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007540:	2901      	cmp	r1, #1
 8007542:	d035      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007544:	075b      	lsls	r3, r3, #29
 8007546:	f57f af26 	bpl.w	8007396 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800754a:	4e1c      	ldr	r6, [pc, #112]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800754c:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007550:	6933      	ldr	r3, [r6, #16]
 8007552:	f023 0307 	bic.w	r3, r3, #7
 8007556:	430b      	orrs	r3, r1
 8007558:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800755a:	f7fc fc6b 	bl	8003e34 <HAL_GetTick>
 800755e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007560:	e004      	b.n	800756c <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007562:	f7fc fc67 	bl	8003e34 <HAL_GetTick>
 8007566:	1bc0      	subs	r0, r0, r7
 8007568:	4540      	cmp	r0, r8
 800756a:	d81f      	bhi.n	80075ac <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800756c:	6933      	ldr	r3, [r6, #16]
 800756e:	6862      	ldr	r2, [r4, #4]
 8007570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007574:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007578:	d1f3      	bne.n	8007562 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	e75e      	b.n	800743c <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800757e:	07da      	lsls	r2, r3, #31
 8007580:	d4d1      	bmi.n	8007526 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007582:	4a0e      	ldr	r2, [pc, #56]	; (80075bc <HAL_RCC_ClockConfig+0x254>)
 8007584:	6993      	ldr	r3, [r2, #24]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	428b      	cmp	r3, r1
 800758c:	f67f af60 	bls.w	8007450 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007590:	6993      	ldr	r3, [r2, #24]
 8007592:	f023 030f 	bic.w	r3, r3, #15
 8007596:	430b      	orrs	r3, r1
 8007598:	6193      	str	r3, [r2, #24]
 800759a:	e759      	b.n	8007450 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800759c:	0198      	lsls	r0, r3, #6
 800759e:	d4d4      	bmi.n	800754a <HAL_RCC_ClockConfig+0x1e2>
 80075a0:	e6f9      	b.n	8007396 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80075a2:	2001      	movs	r0, #1
}
 80075a4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80075a6:	039e      	lsls	r6, r3, #14
 80075a8:	d4cf      	bmi.n	800754a <HAL_RCC_ClockConfig+0x1e2>
 80075aa:	e6f4      	b.n	8007396 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80075ac:	2003      	movs	r0, #3
 80075ae:	e6f3      	b.n	8007398 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075b0:	05da      	lsls	r2, r3, #23
 80075b2:	d4ca      	bmi.n	800754a <HAL_RCC_ClockConfig+0x1e2>
 80075b4:	e6ef      	b.n	8007396 <HAL_RCC_ClockConfig+0x2e>
 80075b6:	bf00      	nop
 80075b8:	52002000 	.word	0x52002000
 80075bc:	58024400 	.word	0x58024400
 80075c0:	0801b528 	.word	0x0801b528
 80075c4:	20000754 	.word	0x20000754
 80075c8:	20000758 	.word	0x20000758
 80075cc:	20000764 	.word	0x20000764

080075d0 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075d0:	4a18      	ldr	r2, [pc, #96]	; (8007634 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075d2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075d4:	6913      	ldr	r3, [r2, #16]
 80075d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075da:	2b10      	cmp	r3, #16
 80075dc:	d01a      	beq.n	8007614 <HAL_RCC_GetHCLKFreq+0x44>
 80075de:	2b18      	cmp	r3, #24
 80075e0:	d023      	beq.n	800762a <HAL_RCC_GetHCLKFreq+0x5a>
 80075e2:	b1cb      	cbz	r3, 8007618 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 80075e4:	4814      	ldr	r0, [pc, #80]	; (8007638 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <HAL_RCC_GetHCLKFreq+0x64>)
 80075e8:	4914      	ldr	r1, [pc, #80]	; (800763c <HAL_RCC_GetHCLKFreq+0x6c>)
 80075ea:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075ec:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075ee:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075f2:	4c13      	ldr	r4, [pc, #76]	; (8007640 <HAL_RCC_GetHCLKFreq+0x70>)
 80075f4:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075f8:	4d12      	ldr	r5, [pc, #72]	; (8007644 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075fa:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075fc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80075fe:	f002 021f 	and.w	r2, r2, #31
 8007602:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007606:	f003 001f 	and.w	r0, r3, #31
 800760a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800760e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007610:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007612:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007614:	480c      	ldr	r0, [pc, #48]	; (8007648 <HAL_RCC_GetHCLKFreq+0x78>)
 8007616:	e7e6      	b.n	80075e6 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007618:	6813      	ldr	r3, [r2, #0]
 800761a:	069b      	lsls	r3, r3, #26
 800761c:	d508      	bpl.n	8007630 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800761e:	6813      	ldr	r3, [r2, #0]
 8007620:	480a      	ldr	r0, [pc, #40]	; (800764c <HAL_RCC_GetHCLKFreq+0x7c>)
 8007622:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007626:	40d8      	lsrs	r0, r3
 8007628:	e7dd      	b.n	80075e6 <HAL_RCC_GetHCLKFreq+0x16>
 800762a:	f7ff fa83 	bl	8006b34 <HAL_RCC_GetSysClockFreq.part.0>
 800762e:	e7da      	b.n	80075e6 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007630:	4806      	ldr	r0, [pc, #24]	; (800764c <HAL_RCC_GetHCLKFreq+0x7c>)
 8007632:	e7d8      	b.n	80075e6 <HAL_RCC_GetHCLKFreq+0x16>
 8007634:	58024400 	.word	0x58024400
 8007638:	003d0900 	.word	0x003d0900
 800763c:	0801b528 	.word	0x0801b528
 8007640:	20000758 	.word	0x20000758
 8007644:	20000754 	.word	0x20000754
 8007648:	017d7840 	.word	0x017d7840
 800764c:	03d09000 	.word	0x03d09000

08007650 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007652:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007654:	6913      	ldr	r3, [r2, #16]
 8007656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800765a:	2b10      	cmp	r3, #16
 800765c:	d021      	beq.n	80076a2 <HAL_RCC_GetPCLK1Freq+0x52>
 800765e:	2b18      	cmp	r3, #24
 8007660:	d02a      	beq.n	80076b8 <HAL_RCC_GetPCLK1Freq+0x68>
 8007662:	b303      	cbz	r3, 80076a6 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8007664:	4818      	ldr	r0, [pc, #96]	; (80076c8 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007666:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <HAL_RCC_GetPCLK1Freq+0x74>)
 8007668:	4918      	ldr	r1, [pc, #96]	; (80076cc <HAL_RCC_GetPCLK1Freq+0x7c>)
 800766a:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800766c:	4c18      	ldr	r4, [pc, #96]	; (80076d0 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800766e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8007672:	4d18      	ldr	r5, [pc, #96]	; (80076d4 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007674:	5ccb      	ldrb	r3, [r1, r3]
 8007676:	f003 031f 	and.w	r3, r3, #31
 800767a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800767c:	6993      	ldr	r3, [r2, #24]
 800767e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 8007682:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007684:	5ccb      	ldrb	r3, [r1, r3]
 8007686:	f003 031f 	and.w	r3, r3, #31
 800768a:	fa20 f303 	lsr.w	r3, r0, r3
 800768e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007690:	69d2      	ldr	r2, [r2, #28]
 8007692:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007696:	5c88      	ldrb	r0, [r1, r2]
 8007698:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800769c:	fa23 f000 	lsr.w	r0, r3, r0
 80076a0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076a2:	480d      	ldr	r0, [pc, #52]	; (80076d8 <HAL_RCC_GetPCLK1Freq+0x88>)
 80076a4:	e7df      	b.n	8007666 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076a6:	6813      	ldr	r3, [r2, #0]
 80076a8:	069b      	lsls	r3, r3, #26
 80076aa:	d508      	bpl.n	80076be <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076ac:	6813      	ldr	r3, [r2, #0]
 80076ae:	480b      	ldr	r0, [pc, #44]	; (80076dc <HAL_RCC_GetPCLK1Freq+0x8c>)
 80076b0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80076b4:	40d8      	lsrs	r0, r3
 80076b6:	e7d6      	b.n	8007666 <HAL_RCC_GetPCLK1Freq+0x16>
 80076b8:	f7ff fa3c 	bl	8006b34 <HAL_RCC_GetSysClockFreq.part.0>
 80076bc:	e7d3      	b.n	8007666 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80076be:	4807      	ldr	r0, [pc, #28]	; (80076dc <HAL_RCC_GetPCLK1Freq+0x8c>)
 80076c0:	e7d1      	b.n	8007666 <HAL_RCC_GetPCLK1Freq+0x16>
 80076c2:	bf00      	nop
 80076c4:	58024400 	.word	0x58024400
 80076c8:	003d0900 	.word	0x003d0900
 80076cc:	0801b528 	.word	0x0801b528
 80076d0:	20000758 	.word	0x20000758
 80076d4:	20000754 	.word	0x20000754
 80076d8:	017d7840 	.word	0x017d7840
 80076dc:	03d09000 	.word	0x03d09000

080076e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076e2:	4c3a      	ldr	r4, [pc, #232]	; (80077cc <RCCEx_PLL2_Config+0xec>)
 80076e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d067      	beq.n	80077be <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	4606      	mov	r6, r0
 80076f2:	460f      	mov	r7, r1
 80076f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076f8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fa:	f7fc fb9b 	bl	8003e34 <HAL_GetTick>
 80076fe:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007700:	e004      	b.n	800770c <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007702:	f7fc fb97 	bl	8003e34 <HAL_GetTick>
 8007706:	1b43      	subs	r3, r0, r5
 8007708:	2b02      	cmp	r3, #2
 800770a:	d856      	bhi.n	80077ba <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	011a      	lsls	r2, r3, #4
 8007710:	d4f7      	bmi.n	8007702 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007712:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007714:	6832      	ldr	r2, [r6, #0]
 8007716:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800771a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800771e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007720:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007724:	3b01      	subs	r3, #1
 8007726:	3a01      	subs	r2, #1
 8007728:	025b      	lsls	r3, r3, #9
 800772a:	0412      	lsls	r2, r2, #16
 800772c:	b29b      	uxth	r3, r3
 800772e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007732:	4313      	orrs	r3, r2
 8007734:	6872      	ldr	r2, [r6, #4]
 8007736:	3a01      	subs	r2, #1
 8007738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800773c:	4313      	orrs	r3, r2
 800773e:	6932      	ldr	r2, [r6, #16]
 8007740:	3a01      	subs	r2, #1
 8007742:	0612      	lsls	r2, r2, #24
 8007744:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007748:	4313      	orrs	r3, r2
 800774a:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800774c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800774e:	6972      	ldr	r2, [r6, #20]
 8007750:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007754:	4313      	orrs	r3, r2
 8007756:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007758:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800775a:	69b3      	ldr	r3, [r6, #24]
 800775c:	f022 0220 	bic.w	r2, r2, #32
 8007760:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007762:	4b1b      	ldr	r3, [pc, #108]	; (80077d0 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007764:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007766:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007768:	f022 0210 	bic.w	r2, r2, #16
 800776c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800776e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007770:	69f2      	ldr	r2, [r6, #28]
 8007772:	400b      	ands	r3, r1
 8007774:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007778:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800777a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800777c:	f043 0310 	orr.w	r3, r3, #16
 8007780:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007782:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007784:	b1ef      	cbz	r7, 80077c2 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007786:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007788:	bf0c      	ite	eq
 800778a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800778e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8007792:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007794:	4c0d      	ldr	r4, [pc, #52]	; (80077cc <RCCEx_PLL2_Config+0xec>)
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800779c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800779e:	f7fc fb49 	bl	8003e34 <HAL_GetTick>
 80077a2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077a4:	e004      	b.n	80077b0 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077a6:	f7fc fb45 	bl	8003e34 <HAL_GetTick>
 80077aa:	1b40      	subs	r0, r0, r5
 80077ac:	2802      	cmp	r0, #2
 80077ae:	d804      	bhi.n	80077ba <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	011b      	lsls	r3, r3, #4
 80077b4:	d5f7      	bpl.n	80077a6 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 80077b6:	2000      	movs	r0, #0
}
 80077b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80077ba:	2003      	movs	r0, #3
}
 80077bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80077be:	2001      	movs	r0, #1
}
 80077c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077c8:	e7e4      	b.n	8007794 <RCCEx_PLL2_Config+0xb4>
 80077ca:	bf00      	nop
 80077cc:	58024400 	.word	0x58024400
 80077d0:	ffff0007 	.word	0xffff0007

080077d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077d6:	4c3a      	ldr	r4, [pc, #232]	; (80078c0 <RCCEx_PLL3_Config+0xec>)
 80077d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d067      	beq.n	80078b2 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	4606      	mov	r6, r0
 80077e6:	460f      	mov	r7, r1
 80077e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077ec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ee:	f7fc fb21 	bl	8003e34 <HAL_GetTick>
 80077f2:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077f4:	e004      	b.n	8007800 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077f6:	f7fc fb1d 	bl	8003e34 <HAL_GetTick>
 80077fa:	1b43      	subs	r3, r0, r5
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d856      	bhi.n	80078ae <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	009a      	lsls	r2, r3, #2
 8007804:	d4f7      	bmi.n	80077f6 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007808:	6832      	ldr	r2, [r6, #0]
 800780a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800780e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007812:	62a3      	str	r3, [r4, #40]	; 0x28
 8007814:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007818:	3b01      	subs	r3, #1
 800781a:	3a01      	subs	r2, #1
 800781c:	025b      	lsls	r3, r3, #9
 800781e:	0412      	lsls	r2, r2, #16
 8007820:	b29b      	uxth	r3, r3
 8007822:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007826:	4313      	orrs	r3, r2
 8007828:	6872      	ldr	r2, [r6, #4]
 800782a:	3a01      	subs	r2, #1
 800782c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007830:	4313      	orrs	r3, r2
 8007832:	6932      	ldr	r2, [r6, #16]
 8007834:	3a01      	subs	r2, #1
 8007836:	0612      	lsls	r2, r2, #24
 8007838:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800783c:	4313      	orrs	r3, r2
 800783e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007840:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007842:	6972      	ldr	r2, [r6, #20]
 8007844:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007848:	4313      	orrs	r3, r2
 800784a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800784c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800784e:	69b3      	ldr	r3, [r6, #24]
 8007850:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007854:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007856:	4b1b      	ldr	r3, [pc, #108]	; (80078c4 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007858:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800785a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800785c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007860:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007862:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007864:	69f2      	ldr	r2, [r6, #28]
 8007866:	400b      	ands	r3, r1
 8007868:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800786c:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800786e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007874:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007876:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007878:	b1ef      	cbz	r7, 80078b6 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800787a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800787c:	bf0c      	ite	eq
 800787e:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007882:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8007886:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007888:	4c0d      	ldr	r4, [pc, #52]	; (80078c0 <RCCEx_PLL3_Config+0xec>)
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007890:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007892:	f7fc facf 	bl	8003e34 <HAL_GetTick>
 8007896:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007898:	e004      	b.n	80078a4 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800789a:	f7fc facb 	bl	8003e34 <HAL_GetTick>
 800789e:	1b40      	subs	r0, r0, r5
 80078a0:	2802      	cmp	r0, #2
 80078a2:	d804      	bhi.n	80078ae <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	d5f7      	bpl.n	800789a <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 80078aa:	2000      	movs	r0, #0
}
 80078ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80078ae:	2003      	movs	r0, #3
}
 80078b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80078b2:	2001      	movs	r0, #1
}
 80078b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078bc:	e7e4      	b.n	8007888 <RCCEx_PLL3_Config+0xb4>
 80078be:	bf00      	nop
 80078c0:	58024400 	.word	0x58024400
 80078c4:	ffff0007 	.word	0xffff0007

080078c8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80078c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078cc:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 80078d0:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078d2:	011d      	lsls	r5, r3, #4
 80078d4:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 80078d8:	d521      	bpl.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80078da:	6e81      	ldr	r1, [r0, #104]	; 0x68
 80078dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80078e0:	f000 8577 	beq.w	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80078e4:	d80e      	bhi.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80078e6:	2900      	cmp	r1, #0
 80078e8:	f000 85d2 	beq.w	8008490 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 80078ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80078f0:	f040 85cb 	bne.w	800848a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078f4:	2102      	movs	r1, #2
 80078f6:	3008      	adds	r0, #8
 80078f8:	f7ff fef2 	bl	80076e0 <RCCEx_PLL2_Config>
 80078fc:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80078fe:	b966      	cbnz	r6, 800791a <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007900:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007902:	e003      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007904:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007908:	f040 85bf 	bne.w	800848a <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800790c:	4aa3      	ldr	r2, [pc, #652]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800790e:	2600      	movs	r6, #0
 8007910:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007912:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007916:	430b      	orrs	r3, r1
 8007918:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800791a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800791e:	05d8      	lsls	r0, r3, #23
 8007920:	d50a      	bpl.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007922:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007924:	2904      	cmp	r1, #4
 8007926:	d806      	bhi.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007928:	e8df f011 	tbh	[pc, r1, lsl #1]
 800792c:	0564055d 	.word	0x0564055d
 8007930:	0310057b 	.word	0x0310057b
 8007934:	0310      	.short	0x0310
 8007936:	2601      	movs	r6, #1
 8007938:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800793a:	0599      	lsls	r1, r3, #22
 800793c:	d517      	bpl.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800793e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007940:	2980      	cmp	r1, #128	; 0x80
 8007942:	f000 8575 	beq.w	8008430 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8007946:	f200 80e1 	bhi.w	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800794a:	2900      	cmp	r1, #0
 800794c:	f000 8446 	beq.w	80081dc <HAL_RCCEx_PeriphCLKConfig+0x914>
 8007950:	2940      	cmp	r1, #64	; 0x40
 8007952:	f040 80e2 	bne.w	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007956:	2100      	movs	r1, #0
 8007958:	f104 0008 	add.w	r0, r4, #8
 800795c:	f7ff fec0 	bl	80076e0 <RCCEx_PLL2_Config>
 8007960:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007962:	2d00      	cmp	r5, #0
 8007964:	f000 83f6 	beq.w	8008154 <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007968:	462e      	mov	r6, r5
 800796a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800796e:	055f      	lsls	r7, r3, #21
 8007970:	d51a      	bpl.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007972:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8007976:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800797a:	f000 8522 	beq.w	80083c2 <HAL_RCCEx_PeriphCLKConfig+0xafa>
 800797e:	f200 80cf 	bhi.w	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8007982:	2900      	cmp	r1, #0
 8007984:	f000 8431 	beq.w	80081ea <HAL_RCCEx_PeriphCLKConfig+0x922>
 8007988:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800798c:	f040 80d0 	bne.w	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007990:	2100      	movs	r1, #0
 8007992:	f104 0008 	add.w	r0, r4, #8
 8007996:	f7ff fea3 	bl	80076e0 <RCCEx_PLL2_Config>
 800799a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800799c:	2d00      	cmp	r5, #0
 800799e:	f000 83f8 	beq.w	8008192 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80079a2:	462e      	mov	r6, r5
 80079a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80079a8:	0518      	lsls	r0, r3, #20
 80079aa:	d51a      	bpl.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 80079ac:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80079b0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80079b4:	f000 852d 	beq.w	8008412 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 80079b8:	f200 80bd 	bhi.w	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80079bc:	2900      	cmp	r1, #0
 80079be:	f000 8406 	beq.w	80081ce <HAL_RCCEx_PeriphCLKConfig+0x906>
 80079c2:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80079c6:	f040 80be 	bne.w	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ca:	2100      	movs	r1, #0
 80079cc:	f104 0008 	add.w	r0, r4, #8
 80079d0:	f7ff fe86 	bl	80076e0 <RCCEx_PLL2_Config>
 80079d4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	f000 83b1 	beq.w	800813e <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80079dc:	462e      	mov	r6, r5
 80079de:	e9d4 3200 	ldrd	r3, r2, [r4]
 80079e2:	0199      	lsls	r1, r3, #6
 80079e4:	d51a      	bpl.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 80079e6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80079e8:	2920      	cmp	r1, #32
 80079ea:	f000 84b4 	beq.w	8008356 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 80079ee:	f200 80ad 	bhi.w	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x284>
 80079f2:	b139      	cbz	r1, 8007a04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80079f4:	2910      	cmp	r1, #16
 80079f6:	f040 80ac 	bne.w	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079fa:	4a68      	ldr	r2, [pc, #416]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80079fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a02:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	f040 8418 	bne.w	800823a <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a0a:	4a64      	ldr	r2, [pc, #400]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a0c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007a0e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007a10:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007a14:	430b      	orrs	r3, r1
 8007a16:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a18:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a1c:	04df      	lsls	r7, r3, #19
 8007a1e:	d519      	bpl.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007a20:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007a22:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007a26:	f000 84ec 	beq.w	8008402 <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 8007a2a:	f200 8095 	bhi.w	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8007a2e:	2900      	cmp	r1, #0
 8007a30:	f000 83c7 	beq.w	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 8007a34:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007a38:	f040 8096 	bne.w	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	f104 0008 	add.w	r0, r4, #8
 8007a42:	f7ff fe4d 	bl	80076e0 <RCCEx_PLL2_Config>
 8007a46:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007a48:	2d00      	cmp	r5, #0
 8007a4a:	f000 838d 	beq.w	8008168 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a4e:	462e      	mov	r6, r5
 8007a50:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a54:	0498      	lsls	r0, r3, #18
 8007a56:	d51d      	bpl.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007a58:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007a5a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007a5e:	f000 8466 	beq.w	800832e <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8007a62:	f200 8084 	bhi.w	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007a66:	b149      	cbz	r1, 8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007a68:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007a6c:	f040 8088 	bne.w	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a70:	2101      	movs	r1, #1
 8007a72:	f104 0008 	add.w	r0, r4, #8
 8007a76:	f7ff fe33 	bl	80076e0 <RCCEx_PLL2_Config>
 8007a7a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007a7c:	2d00      	cmp	r5, #0
 8007a7e:	f040 83eb 	bne.w	8008258 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007a82:	4a46      	ldr	r2, [pc, #280]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a84:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007a86:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007a88:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007a90:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a94:	0459      	lsls	r1, r3, #17
 8007a96:	d51d      	bpl.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007a98:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8007a9c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007aa0:	f000 844f 	beq.w	8008342 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007aa4:	d86f      	bhi.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007aa6:	b141      	cbz	r1, 8007aba <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007aa8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007aac:	d173      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007aae:	2101      	movs	r1, #1
 8007ab0:	f104 0008 	add.w	r0, r4, #8
 8007ab4:	f7ff fe14 	bl	80076e0 <RCCEx_PLL2_Config>
 8007ab8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007aba:	2d00      	cmp	r5, #0
 8007abc:	f040 83d4 	bne.w	8008268 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007ac0:	4a36      	ldr	r2, [pc, #216]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ac2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8007ac6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007ac8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007acc:	430b      	orrs	r3, r1
 8007ace:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ad0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ad4:	041f      	lsls	r7, r3, #16
 8007ad6:	d50d      	bpl.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 8007ad8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007ada:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007ade:	f000 841d 	beq.w	800831c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8007ae2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007ae6:	f000 8239 	beq.w	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007aea:	2900      	cmp	r1, #0
 8007aec:	f000 823c 	beq.w	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8007af0:	2601      	movs	r6, #1
 8007af2:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007af4:	01d8      	lsls	r0, r3, #7
 8007af6:	d55e      	bpl.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
 8007af8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007afa:	2903      	cmp	r1, #3
 8007afc:	f200 84f3 	bhi.w	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007b00:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007b04:	004e0053 	.word	0x004e0053
 8007b08:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
 8007b0c:	29c0      	cmp	r1, #192	; 0xc0
 8007b0e:	f43f af28 	beq.w	8007962 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007b12:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007b16:	f43f af24 	beq.w	8007962 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007b1a:	2601      	movs	r6, #1
 8007b1c:	4635      	mov	r5, r6
 8007b1e:	e726      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007b20:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8007b24:	f43f af3a 	beq.w	800799c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007b28:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007b2c:	f43f af36 	beq.w	800799c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007b30:	2601      	movs	r6, #1
 8007b32:	4635      	mov	r5, r6
 8007b34:	e738      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007b36:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8007b3a:	f43f af4c 	beq.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007b3e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007b42:	f43f af48 	beq.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007b46:	2601      	movs	r6, #1
 8007b48:	4635      	mov	r5, r6
 8007b4a:	e74a      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 8007b4c:	2930      	cmp	r1, #48	; 0x30
 8007b4e:	f43f af59 	beq.w	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b52:	2601      	movs	r6, #1
 8007b54:	4635      	mov	r5, r6
 8007b56:	e761      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007b58:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8007b5c:	f43f af74 	beq.w	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007b60:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8007b64:	f43f af70 	beq.w	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007b68:	2601      	movs	r6, #1
 8007b6a:	4635      	mov	r5, r6
 8007b6c:	e772      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007b6e:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8007b72:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8007b76:	d081      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007b78:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8007b7c:	f43f af7e 	beq.w	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007b80:	2601      	movs	r6, #1
 8007b82:	4635      	mov	r5, r6
 8007b84:	e786      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 8007b86:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8007b8a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007b8e:	d094      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007b90:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8007b94:	d091      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8007b96:	2601      	movs	r6, #1
 8007b98:	4635      	mov	r5, r6
 8007b9a:	e79b      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8007b9c:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba0:	4a34      	ldr	r2, [pc, #208]	; (8007c74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8007ba2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	f000 834a 	beq.w	8008244 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bb0:	462e      	mov	r6, r5
 8007bb2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007bb6:	0259      	lsls	r1, r3, #9
 8007bb8:	f100 826f 	bmi.w	800809a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bbc:	07d8      	lsls	r0, r3, #31
 8007bbe:	d52f      	bpl.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
 8007bc0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007bc2:	2928      	cmp	r1, #40	; 0x28
 8007bc4:	d82a      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007bc6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007bca:	020d      	.short	0x020d
 8007bcc:	00290029 	.word	0x00290029
 8007bd0:	00290029 	.word	0x00290029
 8007bd4:	00290029 	.word	0x00290029
 8007bd8:	02070029 	.word	0x02070029
 8007bdc:	00290029 	.word	0x00290029
 8007be0:	00290029 	.word	0x00290029
 8007be4:	00290029 	.word	0x00290029
 8007be8:	04500029 	.word	0x04500029
 8007bec:	00290029 	.word	0x00290029
 8007bf0:	00290029 	.word	0x00290029
 8007bf4:	00290029 	.word	0x00290029
 8007bf8:	020d0029 	.word	0x020d0029
 8007bfc:	00290029 	.word	0x00290029
 8007c00:	00290029 	.word	0x00290029
 8007c04:	00290029 	.word	0x00290029
 8007c08:	020d0029 	.word	0x020d0029
 8007c0c:	00290029 	.word	0x00290029
 8007c10:	00290029 	.word	0x00290029
 8007c14:	00290029 	.word	0x00290029
 8007c18:	020d0029 	.word	0x020d0029
 8007c1c:	2601      	movs	r6, #1
 8007c1e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c20:	0799      	lsls	r1, r3, #30
 8007c22:	d517      	bpl.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007c24:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007c26:	2905      	cmp	r1, #5
 8007c28:	f200 8465 	bhi.w	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8007c2c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007c30:	0006000c 	.word	0x0006000c
 8007c34:	000c0412 	.word	0x000c0412
 8007c38:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	f104 0008 	add.w	r0, r4, #8
 8007c42:	f7ff fd4d 	bl	80076e0 <RCCEx_PLL2_Config>
 8007c46:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	f000 82dd 	beq.w	8008208 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c4e:	462e      	mov	r6, r5
 8007c50:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c54:	075f      	lsls	r7, r3, #29
 8007c56:	d51b      	bpl.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007c58:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007c5c:	2905      	cmp	r1, #5
 8007c5e:	f200 8446 	bhi.w	80084ee <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007c62:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007c66:	000f      	.short	0x000f
 8007c68:	03ed0009 	.word	0x03ed0009
 8007c6c:	000f000f 	.word	0x000f000f
 8007c70:	000f      	.short	0x000f
 8007c72:	bf00      	nop
 8007c74:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c78:	2101      	movs	r1, #1
 8007c7a:	f104 0008 	add.w	r0, r4, #8
 8007c7e:	f7ff fd2f 	bl	80076e0 <RCCEx_PLL2_Config>
 8007c82:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	f000 82c9 	beq.w	800821c <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c8a:	462e      	mov	r6, r5
 8007c8c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c90:	0698      	lsls	r0, r3, #26
 8007c92:	d51f      	bpl.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c94:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007c98:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007c9c:	f000 8365 	beq.w	800836a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007ca0:	f200 811c 	bhi.w	8007edc <HAL_RCCEx_PeriphCLKConfig+0x614>
 8007ca4:	b149      	cbz	r1, 8007cba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007ca6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8007caa:	f040 8121 	bne.w	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cae:	2100      	movs	r1, #0
 8007cb0:	f104 0008 	add.w	r0, r4, #8
 8007cb4:	f7ff fd14 	bl	80076e0 <RCCEx_PLL2_Config>
 8007cb8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	f040 82b9 	bne.w	8008232 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cc0:	4ab0      	ldr	r2, [pc, #704]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007cc2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007cc6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007cc8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007ccc:	430b      	orrs	r3, r1
 8007cce:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cd0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007cd4:	0659      	lsls	r1, r3, #25
 8007cd6:	d51f      	bpl.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007cd8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007cdc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8007ce0:	f000 8308 	beq.w	80082f4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007ce4:	f200 8107 	bhi.w	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8007ce8:	b149      	cbz	r1, 8007cfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007cea:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007cee:	f040 810c 	bne.w	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	f104 0008 	add.w	r0, r4, #8
 8007cf8:	f7ff fcf2 	bl	80076e0 <RCCEx_PLL2_Config>
 8007cfc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007cfe:	2d00      	cmp	r5, #0
 8007d00:	f040 82b6 	bne.w	8008270 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d04:	4a9f      	ldr	r2, [pc, #636]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007d06:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007d0a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007d0c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007d10:	430b      	orrs	r3, r1
 8007d12:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d14:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d18:	061f      	lsls	r7, r3, #24
 8007d1a:	d51f      	bpl.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007d1c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007d20:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8007d24:	f000 82f0 	beq.w	8008308 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007d28:	f200 80f2 	bhi.w	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007d2c:	b149      	cbz	r1, 8007d42 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007d2e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007d32:	f040 80f7 	bne.w	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d36:	2100      	movs	r1, #0
 8007d38:	f104 0008 	add.w	r0, r4, #8
 8007d3c:	f7ff fcd0 	bl	80076e0 <RCCEx_PLL2_Config>
 8007d40:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007d42:	2d00      	cmp	r5, #0
 8007d44:	f040 828c 	bne.w	8008260 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007d48:	4a8e      	ldr	r2, [pc, #568]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007d4a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007d4e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007d50:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007d54:	430b      	orrs	r3, r1
 8007d56:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007d58:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d5c:	0718      	lsls	r0, r3, #28
 8007d5e:	d50d      	bpl.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007d60:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007d64:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007d68:	f000 8313 	beq.w	8008392 <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d6c:	4985      	ldr	r1, [pc, #532]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007d6e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8007d70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d74:	4313      	orrs	r3, r2
 8007d76:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d78:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d7c:	06d9      	lsls	r1, r3, #27
 8007d7e:	d50d      	bpl.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007d80:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8007d84:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007d88:	f000 830f 	beq.w	80083aa <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d8c:	497d      	ldr	r1, [pc, #500]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007d8e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8007d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d94:	4313      	orrs	r3, r2
 8007d96:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d98:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d9c:	031f      	lsls	r7, r3, #12
 8007d9e:	d50e      	bpl.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
 8007da0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8007da4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007da8:	f000 8102 	beq.w	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 8007dac:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007db0:	f000 8104 	beq.w	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8007db4:	2900      	cmp	r1, #0
 8007db6:	f000 8292 	beq.w	80082de <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007dba:	2601      	movs	r6, #1
 8007dbc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dbe:	0358      	lsls	r0, r3, #13
 8007dc0:	d50f      	bpl.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
 8007dc2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007dc6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007dca:	f000 80dd 	beq.w	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8007dce:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007dd2:	f000 80df 	beq.w	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8007dd6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007dda:	f000 8277 	beq.w	80082cc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007dde:	2601      	movs	r6, #1
 8007de0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007de2:	03d9      	lsls	r1, r3, #15
 8007de4:	d509      	bpl.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
 8007de6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007de8:	2900      	cmp	r1, #0
 8007dea:	f000 825a 	beq.w	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007dee:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007df2:	f000 81da 	beq.w	80081aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007df6:	2601      	movs	r6, #1
 8007df8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dfa:	009f      	lsls	r7, r3, #2
 8007dfc:	f100 80ff 	bmi.w	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e00:	0398      	lsls	r0, r3, #14
 8007e02:	d50e      	bpl.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
 8007e04:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007e08:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007e0c:	f000 8240 	beq.w	8008290 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 8007e10:	f240 808b 	bls.w	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007e14:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007e18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007e1c:	f000 8088 	beq.w	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8007e20:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e22:	02d9      	lsls	r1, r3, #11
 8007e24:	d508      	bpl.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e26:	4a57      	ldr	r2, [pc, #348]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007e28:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007e2a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e30:	430b      	orrs	r3, r1
 8007e32:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e34:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e38:	00df      	lsls	r7, r3, #3
 8007e3a:	d509      	bpl.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e3c:	4a51      	ldr	r2, [pc, #324]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007e3e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8007e42:	6913      	ldr	r3, [r2, #16]
 8007e44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e4c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e50:	029d      	lsls	r5, r3, #10
 8007e52:	d508      	bpl.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e54:	4a4b      	ldr	r2, [pc, #300]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007e56:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007e58:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e5e:	430b      	orrs	r3, r1
 8007e60:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e62:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e66:	0058      	lsls	r0, r3, #1
 8007e68:	d50b      	bpl.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e6a:	4b46      	ldr	r3, [pc, #280]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007e6c:	691a      	ldr	r2, [r3, #16]
 8007e6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e72:	611a      	str	r2, [r3, #16]
 8007e74:	691a      	ldr	r2, [r3, #16]
 8007e76:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007e7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da08      	bge.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007e86:	4a3f      	ldr	r2, [pc, #252]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007e88:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007e8a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007e8c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007e90:	430b      	orrs	r3, r1
 8007e92:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e94:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e98:	0219      	lsls	r1, r3, #8
 8007e9a:	d508      	bpl.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e9c:	4a39      	ldr	r2, [pc, #228]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007e9e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007ea2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007ea4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007ea8:	430b      	orrs	r3, r1
 8007eaa:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007eac:	6862      	ldr	r2, [r4, #4]
 8007eae:	07d3      	lsls	r3, r2, #31
 8007eb0:	f100 80b1 	bmi.w	8008016 <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007eb4:	0797      	lsls	r7, r2, #30
 8007eb6:	f100 80bb 	bmi.w	8008030 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007eba:	0755      	lsls	r5, r2, #29
 8007ebc:	f100 80c5 	bmi.w	800804a <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007ec0:	0710      	lsls	r0, r2, #28
 8007ec2:	f100 80cf 	bmi.w	8008064 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ec6:	06d1      	lsls	r1, r2, #27
 8007ec8:	f100 80d9 	bmi.w	800807e <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007ecc:	0692      	lsls	r2, r2, #26
 8007ece:	f100 812a 	bmi.w	8008126 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
 8007ed2:	1e30      	subs	r0, r6, #0
 8007ed4:	bf18      	it	ne
 8007ed6:	2001      	movne	r0, #1
}
 8007ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007edc:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8007ee0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007ee4:	f43f aee9 	beq.w	8007cba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007ee8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8007eec:	f43f aee5 	beq.w	8007cba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007ef0:	2601      	movs	r6, #1
 8007ef2:	4635      	mov	r5, r6
 8007ef4:	e6ee      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007ef6:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8007efa:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007efe:	f43f aefe 	beq.w	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007f02:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8007f06:	f43f aefa 	beq.w	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007f0a:	2601      	movs	r6, #1
 8007f0c:	4635      	mov	r5, r6
 8007f0e:	e703      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007f10:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8007f14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007f18:	f43f af13 	beq.w	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007f1c:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8007f20:	f43f af0f 	beq.w	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007f24:	2601      	movs	r6, #1
 8007f26:	4635      	mov	r5, r6
 8007f28:	e718      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
 8007f2a:	2900      	cmp	r1, #0
 8007f2c:	f47f af78 	bne.w	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
 8007f30:	2d00      	cmp	r5, #0
 8007f32:	f040 81c7 	bne.w	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f36:	4a13      	ldr	r2, [pc, #76]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007f38:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007f3c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f42:	430b      	orrs	r3, r1
 8007f44:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f46:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f4a:	e76a      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007f4c:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8007f4e:	2d00      	cmp	r5, #0
 8007f50:	f000 8114 	beq.w	800817c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007f54:	462e      	mov	r6, r5
 8007f56:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f5a:	e4ee      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	f104 0008 	add.w	r0, r4, #8
 8007f62:	f7ff fbbd 	bl	80076e0 <RCCEx_PLL2_Config>
 8007f66:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007f68:	2d00      	cmp	r5, #0
 8007f6a:	f040 8149 	bne.w	8008200 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f6e:	4a05      	ldr	r2, [pc, #20]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007f70:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007f72:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007f74:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007f7c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f80:	e5b8      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8007f82:	bf00      	nop
 8007f84:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f88:	2101      	movs	r1, #1
 8007f8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007f8e:	f7ff fc21 	bl	80077d4 <RCCEx_PLL3_Config>
 8007f92:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007f94:	2d00      	cmp	r5, #0
 8007f96:	f040 8173 	bne.w	8008280 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f9a:	4abb      	ldr	r2, [pc, #748]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007f9c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007fa0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007fa2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007faa:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fae:	e718      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007fb6:	f7ff fc0d 	bl	80077d4 <RCCEx_PLL3_Config>
 8007fba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	f040 815b 	bne.w	8008278 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fc2:	4ab1      	ldr	r2, [pc, #708]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007fc4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8007fc8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007fca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007fce:	430b      	orrs	r3, r1
 8007fd0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fd2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fd6:	e6f2      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fd8:	2101      	movs	r1, #1
 8007fda:	f104 0008 	add.w	r0, r4, #8
 8007fde:	f7ff fb7f 	bl	80076e0 <RCCEx_PLL2_Config>
 8007fe2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007fe4:	2d00      	cmp	r5, #0
 8007fe6:	f040 8107 	bne.w	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007fea:	4aa7      	ldr	r2, [pc, #668]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007fec:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007fee:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007ff0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ff8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ffc:	e610      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ffe:	2102      	movs	r1, #2
 8008000:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008004:	f7ff fbe6 	bl	80077d4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008008:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800800c:	2800      	cmp	r0, #0
 800800e:	f43f aef7 	beq.w	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
 8008012:	2601      	movs	r6, #1
 8008014:	e6f4      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008016:	2100      	movs	r1, #0
 8008018:	f104 0008 	add.w	r0, r4, #8
 800801c:	f7ff fb60 	bl	80076e0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008020:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008022:	2800      	cmp	r0, #0
 8008024:	f43f af46 	beq.w	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008028:	0797      	lsls	r7, r2, #30
 800802a:	4606      	mov	r6, r0
 800802c:	f57f af45 	bpl.w	8007eba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008030:	2101      	movs	r1, #1
 8008032:	f104 0008 	add.w	r0, r4, #8
 8008036:	f7ff fb53 	bl	80076e0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800803a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800803c:	2800      	cmp	r0, #0
 800803e:	f43f af3c 	beq.w	8007eba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008042:	0755      	lsls	r5, r2, #29
 8008044:	4606      	mov	r6, r0
 8008046:	f57f af3b 	bpl.w	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800804a:	2102      	movs	r1, #2
 800804c:	f104 0008 	add.w	r0, r4, #8
 8008050:	f7ff fb46 	bl	80076e0 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008054:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008056:	2800      	cmp	r0, #0
 8008058:	f43f af32 	beq.w	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800805c:	4606      	mov	r6, r0
 800805e:	0710      	lsls	r0, r2, #28
 8008060:	f57f af31 	bpl.w	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008064:	2100      	movs	r1, #0
 8008066:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800806a:	f7ff fbb3 	bl	80077d4 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800806e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008070:	2800      	cmp	r0, #0
 8008072:	f43f af28 	beq.w	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008076:	06d1      	lsls	r1, r2, #27
 8008078:	4606      	mov	r6, r0
 800807a:	f57f af27 	bpl.w	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800807e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8008082:	2101      	movs	r1, #1
 8008084:	4628      	mov	r0, r5
 8008086:	f7ff fba5 	bl	80077d4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800808a:	2800      	cmp	r0, #0
 800808c:	f000 8130 	beq.w	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008090:	6863      	ldr	r3, [r4, #4]
 8008092:	069b      	lsls	r3, r3, #26
 8008094:	d550      	bpl.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8008096:	4606      	mov	r6, r0
 8008098:	e047      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800809a:	4f7c      	ldr	r7, [pc, #496]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080a2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80080a4:	f7fb fec6 	bl	8003e34 <HAL_GetTick>
 80080a8:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080aa:	e006      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080ac:	f7fb fec2 	bl	8003e34 <HAL_GetTick>
 80080b0:	eba0 0008 	sub.w	r0, r0, r8
 80080b4:	2864      	cmp	r0, #100	; 0x64
 80080b6:	f200 81e2 	bhi.w	800847e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	05da      	lsls	r2, r3, #23
 80080be:	d5f5      	bpl.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	f040 820b 	bne.w	80084dc <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80080c6:	4b70      	ldr	r3, [pc, #448]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80080c8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80080cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80080ce:	4051      	eors	r1, r2
 80080d0:	f411 7f40 	tst.w	r1, #768	; 0x300
 80080d4:	d00d      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80080d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80080de:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80080e2:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80080e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80080e6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80080ea:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80080ec:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80080ee:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80080f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80080f6:	f000 81d3 	beq.w	80084a0 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080fa:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80080fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008102:	f000 81e1 	beq.w	80084c8 <HAL_RCCEx_PeriphCLKConfig+0xc00>
 8008106:	4a60      	ldr	r2, [pc, #384]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008108:	6913      	ldr	r3, [r2, #16]
 800810a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800810e:	6113      	str	r3, [r2, #16]
 8008110:	4a5d      	ldr	r2, [pc, #372]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008112:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8008116:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800811c:	430b      	orrs	r3, r1
 800811e:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008120:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008124:	e54a      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008126:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800812a:	2102      	movs	r1, #2
 800812c:	4628      	mov	r0, r5
 800812e:	f7ff fb51 	bl	80077d4 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8008132:	2800      	cmp	r0, #0
 8008134:	f43f aecd 	beq.w	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
 8008138:	2001      	movs	r0, #1
}
 800813a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800813e:	4a52      	ldr	r2, [pc, #328]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008140:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8008144:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008146:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800814a:	430b      	orrs	r3, r1
 800814c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800814e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008152:	e446      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008154:	4a4c      	ldr	r2, [pc, #304]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008156:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008158:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800815a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800815e:	430b      	orrs	r3, r1
 8008160:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008162:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008166:	e402      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008168:	4a47      	ldr	r2, [pc, #284]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800816a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800816c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800816e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008172:	430b      	orrs	r3, r1
 8008174:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008176:	e9d4 3200 	ldrd	r3, r2, [r4]
 800817a:	e46b      	b.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800817c:	4a42      	ldr	r2, [pc, #264]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800817e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008180:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008182:	f023 0307 	bic.w	r3, r3, #7
 8008186:	430b      	orrs	r3, r1
 8008188:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800818a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800818e:	f7ff bbd4 	b.w	800793a <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008192:	4a3d      	ldr	r2, [pc, #244]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008194:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8008198:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800819a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800819e:	430b      	orrs	r3, r1
 80081a0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80081a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80081a6:	f7ff bbff 	b.w	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80081aa:	2102      	movs	r1, #2
 80081ac:	f104 0008 	add.w	r0, r4, #8
 80081b0:	f7ff fa96 	bl	80076e0 <RCCEx_PLL2_Config>
 80081b4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80081b6:	2d00      	cmp	r5, #0
 80081b8:	d07a      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081ba:	462e      	mov	r6, r5
 80081bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80081c0:	e61b      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081c2:	4a31      	ldr	r2, [pc, #196]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80081c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80081c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ca:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80081cc:	e43c      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ce:	4a2e      	ldr	r2, [pc, #184]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80081d0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80081d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081d6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80081d8:	f7ff bbfd 	b.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081dc:	4a2a      	ldr	r2, [pc, #168]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80081de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80081e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80081e6:	f7ff bbbc 	b.w	8007962 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ea:	4a27      	ldr	r2, [pc, #156]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80081ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80081ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80081f4:	f7ff bbd2 	b.w	800799c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80081f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80081fc:	462e      	mov	r6, r5
 80081fe:	e50f      	b.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008200:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008204:	462e      	mov	r6, r5
 8008206:	e475      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008208:	4a1f      	ldr	r2, [pc, #124]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800820a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800820c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800820e:	f023 0307 	bic.w	r3, r3, #7
 8008212:	430b      	orrs	r3, r1
 8008214:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008216:	e9d4 3200 	ldrd	r3, r2, [r4]
 800821a:	e51b      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800821c:	4a1a      	ldr	r2, [pc, #104]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800821e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8008222:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008224:	f023 0307 	bic.w	r3, r3, #7
 8008228:	430b      	orrs	r3, r1
 800822a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800822c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008230:	e52e      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008232:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008236:	462e      	mov	r6, r5
 8008238:	e54c      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800823a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800823e:	462e      	mov	r6, r5
 8008240:	f7ff bbec 	b.w	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008244:	4a10      	ldr	r2, [pc, #64]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008246:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008248:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	430b      	orrs	r3, r1
 8008250:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008252:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008256:	e4ae      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008258:	e9d4 3200 	ldrd	r3, r2, [r4]
 800825c:	462e      	mov	r6, r5
 800825e:	e419      	b.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008260:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008264:	462e      	mov	r6, r5
 8008266:	e579      	b.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008268:	e9d4 3200 	ldrd	r3, r2, [r4]
 800826c:	462e      	mov	r6, r5
 800826e:	e431      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008270:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008274:	462e      	mov	r6, r5
 8008276:	e54f      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008278:	e9d4 3200 	ldrd	r3, r2, [r4]
 800827c:	462e      	mov	r6, r5
 800827e:	e59e      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008280:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008284:	462e      	mov	r6, r5
 8008286:	e5ac      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008288:	58024400 	.word	0x58024400
 800828c:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008290:	4a9b      	ldr	r2, [pc, #620]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8008292:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008298:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800829a:	2d00      	cmp	r5, #0
 800829c:	f43f ae4b 	beq.w	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80082a0:	e010      	b.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a2:	4a97      	ldr	r2, [pc, #604]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80082a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80082a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082aa:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80082ac:	2d00      	cmp	r5, #0
 80082ae:	d184      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80082b0:	4a93      	ldr	r2, [pc, #588]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80082b2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80082b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80082b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ba:	430b      	orrs	r3, r1
 80082bc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80082c2:	e59a      	b.n	8007dfa <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80082c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80082c8:	462e      	mov	r6, r5
 80082ca:	e5aa      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082cc:	4a8c      	ldr	r2, [pc, #560]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80082ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80082d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80082d6:	2d00      	cmp	r5, #0
 80082d8:	f43f ae5f 	beq.w	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 80082dc:	e7d0      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082de:	f104 0008 	add.w	r0, r4, #8
 80082e2:	f7ff f9fd 	bl	80076e0 <RCCEx_PLL2_Config>
 80082e6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80082e8:	2d00      	cmp	r5, #0
 80082ea:	f43f ae6a 	beq.w	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 80082ee:	e7c3      	b.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80082f0:	6862      	ldr	r2, [r4, #4]
 80082f2:	e5eb      	b.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80082f4:	2102      	movs	r1, #2
 80082f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80082fa:	f7ff fa6b 	bl	80077d4 <RCCEx_PLL3_Config>
 80082fe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008300:	2d00      	cmp	r5, #0
 8008302:	f43f acff 	beq.w	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8008306:	e7b3      	b.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008308:	2102      	movs	r1, #2
 800830a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800830e:	f7ff fa61 	bl	80077d4 <RCCEx_PLL3_Config>
 8008312:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008314:	2d00      	cmp	r5, #0
 8008316:	f43f ad17 	beq.w	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800831a:	e7a1      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800831c:	4a78      	ldr	r2, [pc, #480]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 800831e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008324:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8008326:	2d00      	cmp	r5, #0
 8008328:	f43f ae21 	beq.w	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800832c:	e768      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800832e:	2101      	movs	r1, #1
 8008330:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008334:	f7ff fa4e 	bl	80077d4 <RCCEx_PLL3_Config>
 8008338:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800833a:	2d00      	cmp	r5, #0
 800833c:	f43f aba1 	beq.w	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8008340:	e78a      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008342:	2101      	movs	r1, #1
 8008344:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008348:	f7ff fa44 	bl	80077d4 <RCCEx_PLL3_Config>
 800834c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800834e:	2d00      	cmp	r5, #0
 8008350:	f43f abb6 	beq.w	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008354:	e788      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008356:	2102      	movs	r1, #2
 8008358:	f104 0008 	add.w	r0, r4, #8
 800835c:	f7ff f9c0 	bl	80076e0 <RCCEx_PLL2_Config>
 8008360:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008362:	2d00      	cmp	r5, #0
 8008364:	f43f ab51 	beq.w	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8008368:	e767      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800836a:	2102      	movs	r1, #2
 800836c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008370:	f7ff fa30 	bl	80077d4 <RCCEx_PLL3_Config>
 8008374:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008376:	2d00      	cmp	r5, #0
 8008378:	f43f aca2 	beq.w	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800837c:	e759      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800837e:	2102      	movs	r1, #2
 8008380:	f104 0008 	add.w	r0, r4, #8
 8008384:	f7ff f9ac 	bl	80076e0 <RCCEx_PLL2_Config>
 8008388:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800838a:	2d00      	cmp	r5, #0
 800838c:	f43f af5a 	beq.w	8008244 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8008390:	e40e      	b.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008392:	2102      	movs	r1, #2
 8008394:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008398:	f7ff fa1c 	bl	80077d4 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800839c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083a0:	2800      	cmp	r0, #0
 80083a2:	f43f ace3 	beq.w	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
 80083a6:	2601      	movs	r6, #1
 80083a8:	e4e0      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083aa:	2102      	movs	r1, #2
 80083ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80083b0:	f7ff fa10 	bl	80077d4 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083b4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083b8:	2800      	cmp	r0, #0
 80083ba:	f43f ace7 	beq.w	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
 80083be:	2601      	movs	r6, #1
 80083c0:	e4e4      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083c2:	2100      	movs	r1, #0
 80083c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80083c8:	f7ff fa04 	bl	80077d4 <RCCEx_PLL3_Config>
 80083cc:	4605      	mov	r5, r0
        break;
 80083ce:	f7ff bae5 	b.w	800799c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083d2:	2102      	movs	r1, #2
 80083d4:	3028      	adds	r0, #40	; 0x28
 80083d6:	f7ff f9fd 	bl	80077d4 <RCCEx_PLL3_Config>
 80083da:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80083dc:	2e00      	cmp	r6, #0
 80083de:	f43f aa8f 	beq.w	8007900 <HAL_RCCEx_PeriphCLKConfig+0x38>
 80083e2:	f7ff ba9a 	b.w	800791a <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e6:	4a46      	ldr	r2, [pc, #280]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
 80083e8:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80083ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083f0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80083f2:	e5ac      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083f4:	2100      	movs	r1, #0
 80083f6:	f104 0008 	add.w	r0, r4, #8
 80083fa:	f7ff f971 	bl	80076e0 <RCCEx_PLL2_Config>
 80083fe:	4605      	mov	r5, r0
        break;
 8008400:	e5a5      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008402:	2100      	movs	r1, #0
 8008404:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008408:	f7ff f9e4 	bl	80077d4 <RCCEx_PLL3_Config>
 800840c:	4605      	mov	r5, r0
        break;
 800840e:	f7ff bb1b 	b.w	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008412:	2100      	movs	r1, #0
 8008414:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008418:	f7ff f9dc 	bl	80077d4 <RCCEx_PLL3_Config>
 800841c:	4605      	mov	r5, r0
        break;
 800841e:	f7ff bada 	b.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008422:	2100      	movs	r1, #0
 8008424:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008428:	f7ff f9d4 	bl	80077d4 <RCCEx_PLL3_Config>
 800842c:	4605      	mov	r5, r0
        break;
 800842e:	e58e      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008430:	2100      	movs	r1, #0
 8008432:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008436:	f7ff f9cd 	bl	80077d4 <RCCEx_PLL3_Config>
 800843a:	4605      	mov	r5, r0
        break;
 800843c:	f7ff ba91 	b.w	8007962 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008440:	2101      	movs	r1, #1
 8008442:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008446:	f7ff f9c5 	bl	80077d4 <RCCEx_PLL3_Config>
 800844a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800844c:	2d00      	cmp	r5, #0
 800844e:	f43f aee5 	beq.w	800821c <HAL_RCCEx_PeriphCLKConfig+0x954>
 8008452:	e41a      	b.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008454:	2101      	movs	r1, #1
 8008456:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800845a:	f7ff f9bb 	bl	80077d4 <RCCEx_PLL3_Config>
 800845e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008460:	2d00      	cmp	r5, #0
 8008462:	f43f aed1 	beq.w	8008208 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8008466:	f7ff bbf2 	b.w	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800846a:	2101      	movs	r1, #1
 800846c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008470:	f7ff f9b0 	bl	80077d4 <RCCEx_PLL3_Config>
 8008474:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008476:	2d00      	cmp	r5, #0
 8008478:	f43f adb7 	beq.w	8007fea <HAL_RCCEx_PeriphCLKConfig+0x722>
 800847c:	e6bc      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
 800847e:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008480:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008484:	4635      	mov	r5, r6
 8008486:	f7ff bb99 	b.w	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800848a:	2601      	movs	r6, #1
 800848c:	f7ff ba47 	b.w	800791e <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008490:	4a1b      	ldr	r2, [pc, #108]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8008492:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008498:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800849a:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800849c:	f7ff ba36 	b.w	800790c <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 80084a0:	f7fb fcc8 	bl	8003e34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084a4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8008500 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
 80084a8:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084aa:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084ae:	e004      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084b0:	f7fb fcc0 	bl	8003e34 <HAL_GetTick>
 80084b4:	1bc0      	subs	r0, r0, r7
 80084b6:	4548      	cmp	r0, r9
 80084b8:	d8e1      	bhi.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084ba:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80084be:	079b      	lsls	r3, r3, #30
 80084c0:	d5f6      	bpl.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084c2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80084c6:	e618      	b.n	80080fa <HAL_RCCEx_PeriphCLKConfig+0x832>
 80084c8:	490d      	ldr	r1, [pc, #52]	; (8008500 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80084ca:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
 80084cc:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 80084d0:	690a      	ldr	r2, [r1, #16]
 80084d2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80084d6:	4313      	orrs	r3, r2
 80084d8:	610b      	str	r3, [r1, #16]
 80084da:	e619      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80084dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80084e0:	462e      	mov	r6, r5
 80084e2:	f7ff bb6b 	b.w	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
 80084e6:	2601      	movs	r6, #1
 80084e8:	4635      	mov	r5, r6
 80084ea:	f7ff bb64 	b.w	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80084ee:	2601      	movs	r6, #1
 80084f0:	4635      	mov	r5, r6
 80084f2:	f7ff bbcd 	b.w	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80084f6:	2601      	movs	r6, #1
 80084f8:	4635      	mov	r5, r6
 80084fa:	f7ff bbab 	b.w	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80084fe:	bf00      	nop
 8008500:	58024400 	.word	0x58024400
 8008504:	00ffffcf 	.word	0x00ffffcf

08008508 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008508:	4a50      	ldr	r2, [pc, #320]	; (800864c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 800850a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800850c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800850e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008510:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8008512:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008516:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800851a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800851c:	d05d      	beq.n	80085da <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800851e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008522:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008526:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800852a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800852e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008530:	ee07 4a90 	vmov	s15, r4
 8008534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008538:	d003      	beq.n	8008542 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800853a:	2902      	cmp	r1, #2
 800853c:	d078      	beq.n	8008630 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 800853e:	2900      	cmp	r1, #0
 8008540:	d050      	beq.n	80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008650 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800854a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800854e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008550:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008554:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8008654 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8008558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855c:	ee07 3a90 	vmov	s15, r3
 8008560:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008568:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800856c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008570:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008574:	4a35      	ldr	r2, [pc, #212]	; (800864c <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8008576:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800857a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800857c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008580:	ee07 3a90 	vmov	s15, r3
 8008584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008588:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800858a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800858e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008592:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008596:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800859a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800859c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80085a0:	ee07 3a90 	vmov	s15, r3
 80085a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085a8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80085ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80085b4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80085b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80085ba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80085be:	ee07 3a10 	vmov	s14, r3
 80085c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80085c6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80085ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085d2:	ee17 3a90 	vmov	r3, s15
 80085d6:	6083      	str	r3, [r0, #8]
}
 80085d8:	4770      	bx	lr
 80085da:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085dc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80085e0:	6083      	str	r3, [r0, #8]
}
 80085e2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085e4:	6811      	ldr	r1, [r2, #0]
 80085e6:	0689      	lsls	r1, r1, #26
 80085e8:	d529      	bpl.n	800863e <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085ea:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085ec:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085f0:	4919      	ldr	r1, [pc, #100]	; (8008658 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085f6:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085f8:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80085fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008600:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8008654 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8008604:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008608:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800860a:	ee06 3a10 	vmov	s12, r3
 800860e:	ee05 1a90 	vmov	s11, r1
 8008612:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008616:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800861a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800861e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008622:	eef0 7a46 	vmov.f32	s15, s12
 8008626:	eee7 7a05 	vfma.f32	s15, s14, s10
 800862a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800862e:	e7a1      	b.n	8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008630:	ee07 3a90 	vmov	s15, r3
 8008634:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800865c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8008638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800863c:	e787      	b.n	800854e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008660 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 8008646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800864a:	e780      	b.n	800854e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800864c:	58024400 	.word	0x58024400
 8008650:	4a742400 	.word	0x4a742400
 8008654:	39000000 	.word	0x39000000
 8008658:	03d09000 	.word	0x03d09000
 800865c:	4bbebc20 	.word	0x4bbebc20
 8008660:	4c742400 	.word	0x4c742400

08008664 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008664:	4a50      	ldr	r2, [pc, #320]	; (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 8008666:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008668:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800866a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800866c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 800866e:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008672:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008676:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8008678:	d05d      	beq.n	8008736 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800867a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800867e:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008682:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008686:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800868a:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800868c:	ee07 4a90 	vmov	s15, r4
 8008690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008694:	d003      	beq.n	800869e <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8008696:	2902      	cmp	r1, #2
 8008698:	d078      	beq.n	800878c <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 800869a:	2900      	cmp	r1, #0
 800869c:	d050      	beq.n	8008740 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800869e:	ee07 3a90 	vmov	s15, r3
 80086a2:	ed9f 5a42 	vldr	s10, [pc, #264]	; 80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80086a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086aa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80086ac:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80086b0:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 80086b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b8:	ee07 3a90 	vmov	s15, r3
 80086bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80086c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80086c8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80086cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086d0:	4a35      	ldr	r2, [pc, #212]	; (80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 80086d2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80086d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80086d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80086dc:	ee07 3a90 	vmov	s15, r3
 80086e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80086e4:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086e6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80086ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80086f2:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80086f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80086f8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80086fc:	ee07 3a90 	vmov	s15, r3
 8008700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008704:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008708:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800870c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008710:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008714:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008716:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800871a:	ee07 3a10 	vmov	s14, r3
 800871e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008722:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800872a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800872e:	ee17 3a90 	vmov	r3, s15
 8008732:	6083      	str	r3, [r0, #8]
}
 8008734:	4770      	bx	lr
 8008736:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008738:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800873c:	6083      	str	r3, [r0, #8]
}
 800873e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008740:	6811      	ldr	r1, [r2, #0]
 8008742:	0689      	lsls	r1, r1, #26
 8008744:	d529      	bpl.n	800879a <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008746:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008748:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800874c:	4919      	ldr	r1, [pc, #100]	; (80087b4 <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800874e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008752:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008754:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800875c:	ed9f 5a14 	vldr	s10, [pc, #80]	; 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8008760:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008764:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008766:	ee06 3a10 	vmov	s12, r3
 800876a:	ee05 1a90 	vmov	s11, r1
 800876e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008772:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008776:	ee36 6a26 	vadd.f32	s12, s12, s13
 800877a:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800877e:	eef0 7a46 	vmov.f32	s15, s12
 8008782:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008786:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800878a:	e7a1      	b.n	80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800878c:	ee07 3a90 	vmov	s15, r3
 8008790:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80087b8 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8008794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008798:	e787      	b.n	80086aa <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800879a:	ee07 3a90 	vmov	s15, r3
 800879e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80087bc <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 80087a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087a6:	e780      	b.n	80086aa <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80087a8:	58024400 	.word	0x58024400
 80087ac:	4a742400 	.word	0x4a742400
 80087b0:	39000000 	.word	0x39000000
 80087b4:	03d09000 	.word	0x03d09000
 80087b8:	4bbebc20 	.word	0x4bbebc20
 80087bc:	4c742400 	.word	0x4c742400

080087c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087c0:	4a51      	ldr	r2, [pc, #324]	; (8008908 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 80087c2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087c4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80087c6:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80087c8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 80087ca:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80087ce:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087d2:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 80087d4:	d05e      	beq.n	8008894 <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087d6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80087da:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087de:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087e2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80087e6:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087e8:	ee07 4a90 	vmov	s15, r4
 80087ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80087f0:	f000 8082 	beq.w	80088f8 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 80087f4:	2902      	cmp	r1, #2
 80087f6:	d078      	beq.n	80088ea <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 80087f8:	2900      	cmp	r1, #0
 80087fa:	d050      	beq.n	800889e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087fc:	ee07 3a90 	vmov	s15, r3
 8008800:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800890c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008808:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800880a:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800880e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008910 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8008812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800881e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008822:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008826:	eee7 7a06 	vfma.f32	s15, s14, s12
 800882a:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800882e:	4a36      	ldr	r2, [pc, #216]	; (8008908 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8008830:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008834:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008836:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800883a:	ee07 3a90 	vmov	s15, r3
 800883e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008842:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008844:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008848:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008850:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008854:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008856:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008862:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800886a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800886e:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008872:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008874:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008878:	ee07 3a10 	vmov	s14, r3
 800887c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008880:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800888c:	ee17 3a90 	vmov	r3, s15
 8008890:	6083      	str	r3, [r0, #8]
}
 8008892:	4770      	bx	lr
 8008894:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008896:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800889a:	6083      	str	r3, [r0, #8]
}
 800889c:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800889e:	6811      	ldr	r1, [r2, #0]
 80088a0:	0689      	lsls	r1, r1, #26
 80088a2:	d5ab      	bpl.n	80087fc <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088a4:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088a6:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088aa:	491a      	ldr	r1, [pc, #104]	; (8008914 <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088b2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ba:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8008910 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 80088be:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088c2:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088c4:	ee06 3a10 	vmov	s12, r3
 80088c8:	ee05 1a90 	vmov	s11, r1
 80088cc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80088d0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80088d4:	ee36 6a26 	vadd.f32	s12, s12, s13
 80088d8:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80088dc:	eef0 7a46 	vmov.f32	s15, s12
 80088e0:	eee7 7a05 	vfma.f32	s15, s14, s10
 80088e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80088e8:	e7a1      	b.n	800882e <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088ea:	ee07 3a90 	vmov	s15, r3
 80088ee:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8008918 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 80088f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088f6:	e787      	b.n	8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088f8:	ee07 3a90 	vmov	s15, r3
 80088fc:	ed9f 5a07 	vldr	s10, [pc, #28]	; 800891c <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8008900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008904:	e780      	b.n	8008808 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 8008906:	bf00      	nop
 8008908:	58024400 	.word	0x58024400
 800890c:	4c742400 	.word	0x4c742400
 8008910:	39000000 	.word	0x39000000
 8008914:	03d09000 	.word	0x03d09000
 8008918:	4bbebc20 	.word	0x4bbebc20
 800891c:	4a742400 	.word	0x4a742400

08008920 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008920:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8008924:	430b      	orrs	r3, r1
{
 8008926:	b500      	push	{lr}
 8008928:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800892a:	f000 8083 	beq.w	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800892e:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8008932:	430b      	orrs	r3, r1
 8008934:	d038      	beq.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008936:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800893a:	430b      	orrs	r3, r1
 800893c:	f000 80e6 	beq.w	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008940:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8008944:	430b      	orrs	r3, r1
 8008946:	f000 8089 	beq.w	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800894a:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800894e:	430b      	orrs	r3, r1
 8008950:	d060      	beq.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008952:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8008956:	430b      	orrs	r3, r1
 8008958:	f000 8112 	beq.w	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800895c:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8008960:	430b      	orrs	r3, r1
 8008962:	f000 80a3 	beq.w	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008966:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800896a:	430b      	orrs	r3, r1
 800896c:	f000 80fa 	beq.w	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008970:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8008974:	430b      	orrs	r3, r1
 8008976:	f000 8143 	beq.w	8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800897a:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800897e:	4308      	orrs	r0, r1
 8008980:	d137      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008982:	4a9a      	ldr	r2, [pc, #616]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008984:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008986:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800898a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800898e:	f000 8084 	beq.w	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008996:	f000 8157 	beq.w	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800899a:	bb53      	cbnz	r3, 80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800899c:	6810      	ldr	r0, [r2, #0]
 800899e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80089a2:	d044      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 80089a4:	4892      	ldr	r0, [pc, #584]	; (8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80089a6:	e042      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80089a8:	4a90      	ldr	r2, [pc, #576]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80089ac:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 80089b0:	2b80      	cmp	r3, #128	; 0x80
 80089b2:	f000 80a6 	beq.w	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80089b6:	d920      	bls.n	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80089b8:	2bc0      	cmp	r3, #192	; 0xc0
 80089ba:	d037      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80089bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089c0:	d117      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089c4:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089ca:	0749      	lsls	r1, r1, #29
 80089cc:	d502      	bpl.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 80c2 	beq.w	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80089d4:	4a85      	ldr	r2, [pc, #532]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	05d0      	lsls	r0, r2, #23
 80089da:	d503      	bpl.n	80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80089dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089e0:	f000 8102 	beq.w	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089e4:	4a81      	ldr	r2, [pc, #516]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	0391      	lsls	r1, r2, #14
 80089ea:	d502      	bpl.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80089ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f0:	d0d8      	beq.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 80089f2:	2000      	movs	r0, #0
}
 80089f4:	b005      	add	sp, #20
 80089f6:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d04d      	beq.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d1f7      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a02:	6810      	ldr	r0, [r2, #0]
 8008a04:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008a08:	d011      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a0a:	a801      	add	r0, sp, #4
 8008a0c:	f7ff fd7c 	bl	8008508 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a10:	9801      	ldr	r0, [sp, #4]
 8008a12:	e00c      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008a14:	4a75      	ldr	r2, [pc, #468]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a16:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008a18:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8008a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a20:	d06f      	beq.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008a22:	d938      	bls.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008a24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a28:	f040 8088 	bne.w	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008a2c:	4871      	ldr	r0, [pc, #452]	; (8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8008a2e:	b005      	add	sp, #20
 8008a30:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008a34:	4b6d      	ldr	r3, [pc, #436]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a38:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8008a3c:	2b04      	cmp	r3, #4
 8008a3e:	d8d8      	bhi.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008aeb 	.word	0x08008aeb
 8008a4c:	08008ac7 	.word	0x08008ac7
 8008a50:	08008ad7 	.word	0x08008ad7
 8008a54:	08008a2d 	.word	0x08008a2d
 8008a58:	08008ad3 	.word	0x08008ad3
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008a5c:	4a63      	ldr	r2, [pc, #396]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a5e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008a60:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8008a64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a68:	d04b      	beq.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008a6a:	d944      	bls.n	8008af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8008a6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a70:	d0dc      	beq.n	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a76:	d1bc      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a78:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a7a:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a80:	0752      	lsls	r2, r2, #29
 8008a82:	d5a7      	bpl.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1a5      	bne.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a88:	4b58      	ldr	r3, [pc, #352]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008a8a:	485b      	ldr	r0, [pc, #364]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a92:	40d8      	lsrs	r0, r3
 8008a94:	e7cb      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d154      	bne.n	8008b44 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a9a:	6810      	ldr	r0, [r2, #0]
 8008a9c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008aa0:	d0c5      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008aa2:	a801      	add	r0, sp, #4
 8008aa4:	f7ff fe8c 	bl	80087c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008aa8:	9802      	ldr	r0, [sp, #8]
 8008aaa:	e7c0      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008aac:	4a4f      	ldr	r2, [pc, #316]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008aae:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8008ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab8:	f000 80d0 	beq.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 8008abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac0:	d0da      	beq.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d195      	bne.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ac6:	4b49      	ldr	r3, [pc, #292]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008ace:	d0ae      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008ad0:	e79b      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ad2:	4a46      	ldr	r2, [pc, #280]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ad4:	e775      	b.n	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ad6:	4b45      	ldr	r3, [pc, #276]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008ade:	d0a6      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ae0:	a801      	add	r0, sp, #4
 8008ae2:	f7ff fdbf 	bl	8008664 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ae6:	9801      	ldr	r0, [sp, #4]
 8008ae8:	e7a1      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008aea:	4b40      	ldr	r3, [pc, #256]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008af2:	d09c      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008af4:	e7d5      	b.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0cf      	beq.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008afa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008afe:	d080      	beq.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008b00:	e777      	b.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b02:	6810      	ldr	r0, [r2, #0]
 8008b04:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008b08:	d091      	beq.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008b0a:	e7e9      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008b0c:	4a37      	ldr	r2, [pc, #220]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b0e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008b10:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8008b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b18:	d0f3      	beq.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008b1a:	d806      	bhi.n	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0bc      	beq.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008b20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b24:	f43f af6d 	beq.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008b28:	e763      	b.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008b2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008b2e:	f43f af7d 	beq.w	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008b32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b36:	f43f af44 	beq.w	80089c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8008b3a:	e75a      	b.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8008b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b40:	d09a      	beq.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8008b42:	e756      	b.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b48:	f43f af5b 	beq.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008b4c:	e751      	b.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b4e:	6810      	ldr	r0, [r2, #0]
 8008b50:	f010 0004 	ands.w	r0, r0, #4
 8008b54:	f43f af6b 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b58:	6813      	ldr	r3, [r2, #0]
 8008b5a:	4827      	ldr	r0, [pc, #156]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008b5c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008b60:	40d8      	lsrs	r0, r3
 8008b62:	e764      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008b64:	4b21      	ldr	r3, [pc, #132]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8008b68:	03d2      	lsls	r2, r2, #15
 8008b6a:	d5bf      	bpl.n	8008aec <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008b72:	f43f af5c 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b76:	a801      	add	r0, sp, #4
 8008b78:	f7ff fcc6 	bl	8008508 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b7c:	9803      	ldr	r0, [sp, #12]
 8008b7e:	e756      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b80:	4a1a      	ldr	r2, [pc, #104]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b82:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008b84:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8008b88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b8c:	d0df      	beq.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008b8e:	d810      	bhi.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8008b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b94:	d058      	beq.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b9a:	d118      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b9c:	4b13      	ldr	r3, [pc, #76]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008ba4:	f43f af43 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ba8:	a801      	add	r0, sp, #4
 8008baa:	f7ff fd5b 	bl	8008664 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bae:	9802      	ldr	r0, [sp, #8]
 8008bb0:	e73d      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008bb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008bb6:	d012      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 8008bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bbc:	f47f af19 	bne.w	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008bc0:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008bc2:	6818      	ldr	r0, [r3, #0]
 8008bc4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008bc8:	f43f af31 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008bcc:	e6ea      	b.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f47f af0f 	bne.w	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8008bd4:	b005      	add	sp, #20
 8008bd6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8008bda:	f7fe bd39 	b.w	8007650 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bde:	6810      	ldr	r0, [r2, #0]
 8008be0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008be4:	f43f af23 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8008be8:	4804      	ldr	r0, [pc, #16]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008bea:	e720      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	017d7840 	.word	0x017d7840
 8008bf4:	00bb8000 	.word	0x00bb8000
 8008bf8:	03d09000 	.word	0x03d09000
 8008bfc:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008c00:	4b28      	ldr	r3, [pc, #160]	; (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c04:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8008c08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008c0c:	d037      	beq.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8008c0e:	d814      	bhi.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8008c10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c14:	d03f      	beq.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c1a:	d0bf      	beq.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	f47f aee8 	bne.w	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c22:	f7fe fcd5 	bl	80075d0 <HAL_RCC_GetHCLKFreq>
 8008c26:	4b1f      	ldr	r3, [pc, #124]	; (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008c28:	4a1f      	ldr	r2, [pc, #124]	; (8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8008c30:	5cd3      	ldrb	r3, [r2, r3]
 8008c32:	f003 031f 	and.w	r3, r3, #31
 8008c36:	40d8      	lsrs	r0, r3
        break;
 8008c38:	e6f9      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c3e:	d017      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8008c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c44:	d0bc      	beq.n	8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8008c46:	e6d4      	b.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c48:	6810      	ldr	r0, [r2, #0]
 8008c4a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008c4e:	f43f aeee 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c52:	a801      	add	r0, sp, #4
 8008c54:	f7ff fc58 	bl	8008508 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c58:	9802      	ldr	r0, [sp, #8]
 8008c5a:	e6e8      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c5c:	6810      	ldr	r0, [r2, #0]
 8008c5e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008c62:	f43f aee4 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c66:	a801      	add	r0, sp, #4
 8008c68:	f7ff fcfc 	bl	8008664 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008c6c:	9803      	ldr	r0, [sp, #12]
 8008c6e:	e6de      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c70:	4b0c      	ldr	r3, [pc, #48]	; (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008c72:	6818      	ldr	r0, [r3, #0]
 8008c74:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008c78:	f43f aed9 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008c7c:	e7b4      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c7e:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	f010 0004 	ands.w	r0, r0, #4
 8008c86:	f43f aed2 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4807      	ldr	r0, [pc, #28]	; (8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 8008c8e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008c92:	40d8      	lsrs	r0, r3
 8008c94:	e6cb      	b.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c96:	4b03      	ldr	r3, [pc, #12]	; (8008ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008c9e:	f43f aec6 	beq.w	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008ca2:	e7d6      	b.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008ca4:	58024400 	.word	0x58024400
 8008ca8:	0801b528 	.word	0x0801b528
 8008cac:	03d09000 	.word	0x03d09000

08008cb0 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d03c      	beq.n	8008d2e <HAL_RNG_Init+0x7e>
{
 8008cb4:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008cb6:	7a43      	ldrb	r3, [r0, #9]
 8008cb8:	4604      	mov	r4, r0
 8008cba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d031      	beq.n	8008d26 <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008cc2:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8008cc4:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008cc6:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8008cc8:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008cca:	6813      	ldr	r3, [r2, #0]
 8008ccc:	f023 0320 	bic.w	r3, r3, #32
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008cd4:	6822      	ldr	r2, [r4, #0]
 8008cd6:	6813      	ldr	r3, [r2, #0]
 8008cd8:	f043 0304 	orr.w	r3, r3, #4
 8008cdc:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	0658      	lsls	r0, r3, #25
 8008ce4:	d503      	bpl.n	8008cee <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008ce6:	2304      	movs	r3, #4
    return HAL_ERROR;
 8008ce8:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8008cea:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8008cec:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8008cee:	f7fb f8a1 	bl	8003e34 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008cf2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008cf4:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	0759      	lsls	r1, r3, #29
 8008cfa:	d50e      	bpl.n	8008d1a <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008cfc:	f7fb f89a 	bl	8003e34 <HAL_GetTick>
 8008d00:	1b43      	subs	r3, r0, r5
 8008d02:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008d04:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008d06:	d9f6      	bls.n	8008cf6 <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008d08:	685a      	ldr	r2, [r3, #4]
 8008d0a:	0752      	lsls	r2, r2, #29
 8008d0c:	d5f3      	bpl.n	8008cf6 <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 8008d0e:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008d10:	2302      	movs	r3, #2
        return HAL_ERROR;
 8008d12:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 8008d14:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008d16:	60e3      	str	r3, [r4, #12]
}
 8008d18:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008d1a:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 8008d1c:	2201      	movs	r2, #1
  return HAL_OK;
 8008d1e:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8008d20:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008d22:	60e3      	str	r3, [r4, #12]
}
 8008d24:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8008d26:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8008d28:	f7f9 ff38 	bl	8002b9c <HAL_RNG_MspInit>
 8008d2c:	e7c9      	b.n	8008cc2 <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 8008d2e:	2001      	movs	r0, #1
}
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop

08008d34 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008d36:	7a03      	ldrb	r3, [r0, #8]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d027      	beq.n	8008d8c <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008d3c:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 8008d3e:	2201      	movs	r2, #1
 8008d40:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 8008d46:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8008d48:	d006      	beq.n	8008d58 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008d4a:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8008d4c:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008d4e:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008d50:	2300      	movs	r3, #0
 8008d52:	7223      	strb	r3, [r4, #8]

  return status;
}
 8008d54:	4630      	mov	r0, r6
 8008d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8008d58:	2302      	movs	r3, #2
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8008d5e:	f7fb f869 	bl	8003e34 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008d62:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8008d64:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	07d2      	lsls	r2, r2, #31
 8008d6a:	d412      	bmi.n	8008d92 <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008d6c:	f7fb f862 	bl	8003e34 <HAL_GetTick>
 8008d70:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008d72:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008d74:	2802      	cmp	r0, #2
 8008d76:	d9f6      	bls.n	8008d66 <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	f012 0201 	ands.w	r2, r2, #1
 8008d7e:	d1f2      	bne.n	8008d66 <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 8008d80:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008d82:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 8008d84:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 8008d86:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008d88:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 8008d8a:	e7e3      	b.n	8008d54 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8008d8c:	2602      	movs	r6, #2
}
 8008d8e:	4630      	mov	r0, r6
 8008d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 8008d92:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 8008d94:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8008d96:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8008d98:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8008d9a:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8008d9c:	7262      	strb	r2, [r4, #9]
 8008d9e:	e7d7      	b.n	8008d50 <HAL_RNG_GenerateRandomNumber+0x1c>

08008da0 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 8008da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008da2:	4ba3      	ldr	r3, [pc, #652]	; (8009030 <HAL_SAI_Init.part.0+0x290>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 8008da4:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008da6:	6802      	ldr	r2, [r0, #0]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d01c      	beq.n	8008de6 <HAL_SAI_Init.part.0+0x46>
 8008dac:	3320      	adds	r3, #32
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d019      	beq.n	8008de6 <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008db2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d04d      	beq.n	8008e56 <HAL_SAI_Init.part.0+0xb6>
 8008dba:	3320      	adds	r3, #32
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d04a      	beq.n	8008e56 <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008dc0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	f000 812f 	beq.w	8009028 <HAL_SAI_Init.part.0+0x288>
 8008dca:	3320      	adds	r3, #32
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	f000 812b 	beq.w	8009028 <HAL_SAI_Init.part.0+0x288>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008dd2:	4b98      	ldr	r3, [pc, #608]	; (8009034 <HAL_SAI_Init.part.0+0x294>)
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	f000 8129 	beq.w	800902c <HAL_SAI_Init.part.0+0x28c>
 8008dda:	3320      	adds	r3, #32
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	f000 8125 	beq.w	800902c <HAL_SAI_Init.part.0+0x28c>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008de2:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 8008de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 8008de6:	4c94      	ldr	r4, [pc, #592]	; (8009038 <HAL_SAI_Init.part.0+0x298>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8008de8:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 8008dec:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d037      	beq.n	8008e64 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008df4:	4b91      	ldr	r3, [pc, #580]	; (800903c <HAL_SAI_Init.part.0+0x29c>)
 8008df6:	4992      	ldr	r1, [pc, #584]	; (8009040 <HAL_SAI_Init.part.0+0x2a0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008dfe:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008e00:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8008e02:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008e06:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8008e08:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d031      	beq.n	8008e72 <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008e0e:	682a      	ldr	r2, [r5, #0]
    count--;
 8008e10:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008e12:	6812      	ldr	r2, [r2, #0]
 8008e14:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8008e18:	d1f7      	bne.n	8008e0a <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 8008e1a:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8008e1c:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
 8008e1e:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8008e20:	f885 1091 	strb.w	r1, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8008e24:	f000 8150 	beq.w	80090c8 <HAL_SAI_Init.part.0+0x328>
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf19      	ittee	ne
 8008e2c:	460e      	movne	r6, r1
 8008e2e:	2003      	movne	r0, #3
 8008e30:	2023      	moveq	r0, #35	; 0x23
 8008e32:	2622      	moveq	r6, #34	; 0x22
 8008e34:	bf15      	itete	ne
 8008e36:	2701      	movne	r7, #1
 8008e38:	2721      	moveq	r7, #33	; 0x21
 8008e3a:	2100      	movne	r1, #0
 8008e3c:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
 8008e3e:	68ab      	ldr	r3, [r5, #8]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	f200 8180 	bhi.w	8009148 <HAL_SAI_Init.part.0+0x3a8>
 8008e48:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008e4c:	001c00e3 	.word	0x001c00e3
 8008e50:	001b00ea 	.word	0x001b00ea
 8008e54:	00e6      	.short	0x00e6
  if (hsai->State == HAL_SAI_STATE_RESET)
 8008e56:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
 8008e5a:	4c7a      	ldr	r4, [pc, #488]	; (8009044 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8008e5c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1c7      	bne.n	8008df4 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 8008e64:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
 8008e66:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8008e6a:	f7f9 ff01 	bl	8002c70 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 8008e6e:	682a      	ldr	r2, [r5, #0]
 8008e70:	e7c0      	b.n	8008df4 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008e72:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
 8008e76:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e7c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
 8008e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8008e82:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008e84:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008e88:	6021      	str	r1, [r4, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008e8a:	6a2b      	ldr	r3, [r5, #32]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d046      	beq.n	8008f1e <HAL_SAI_Init.part.0+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	4967      	ldr	r1, [pc, #412]	; (8009030 <HAL_SAI_Init.part.0+0x290>)
 8008e94:	428b      	cmp	r3, r1
 8008e96:	f000 812b 	beq.w	80090f0 <HAL_SAI_Init.part.0+0x350>
 8008e9a:	3120      	adds	r1, #32
 8008e9c:	428b      	cmp	r3, r1
 8008e9e:	f000 8127 	beq.w	80090f0 <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008ea2:	4969      	ldr	r1, [pc, #420]	; (8009048 <HAL_SAI_Init.part.0+0x2a8>)
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	f000 8133 	beq.w	8009110 <HAL_SAI_Init.part.0+0x370>
 8008eaa:	3120      	adds	r1, #32
 8008eac:	428b      	cmp	r3, r1
 8008eae:	f000 812f 	beq.w	8009110 <HAL_SAI_Init.part.0+0x370>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008eb2:	4966      	ldr	r1, [pc, #408]	; (800904c <HAL_SAI_Init.part.0+0x2ac>)
 8008eb4:	428b      	cmp	r3, r1
 8008eb6:	f000 8123 	beq.w	8009100 <HAL_SAI_Init.part.0+0x360>
 8008eba:	3120      	adds	r1, #32
 8008ebc:	428b      	cmp	r3, r1
 8008ebe:	f000 811f 	beq.w	8009100 <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
 8008ec2:	495c      	ldr	r1, [pc, #368]	; (8009034 <HAL_SAI_Init.part.0+0x294>)
 8008ec4:	428b      	cmp	r3, r1
 8008ec6:	f000 8135 	beq.w	8009134 <HAL_SAI_Init.part.0+0x394>
    if (hsai->Instance == SAI4_Block_B)
 8008eca:	4961      	ldr	r1, [pc, #388]	; (8009050 <HAL_SAI_Init.part.0+0x2b0>)
 8008ecc:	428b      	cmp	r3, r1
 8008ece:	f000 812a 	beq.w	8009126 <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008ed2:	69ab      	ldr	r3, [r5, #24]
 8008ed4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ed8:	f000 80fb 	beq.w	80090d2 <HAL_SAI_Init.part.0+0x332>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008edc:	6aab      	ldr	r3, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008ede:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008ee2:	6a29      	ldr	r1, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008ee4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008ee8:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008eec:	bf0c      	ite	eq
 8008eee:	2202      	moveq	r2, #2
 8008ef0:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008ef2:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008ef6:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008ef8:	0212      	lsls	r2, r2, #8
 8008efa:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8008efe:	4a55      	ldr	r2, [pc, #340]	; (8009054 <HAL_SAI_Init.part.0+0x2b4>)
 8008f00:	fba2 0203 	umull	r0, r2, r2, r3
 8008f04:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8008f06:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8008f0a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8008f0e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8008f10:	bf08      	it	eq
 8008f12:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008f14:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 8008f16:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008f18:	d101      	bne.n	8008f1e <HAL_SAI_Init.part.0+0x17e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008f1a:	0852      	lsrs	r2, r2, #1
 8008f1c:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f1e:	686b      	ldr	r3, [r5, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008f20:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f22:	f033 0302 	bics.w	r3, r3, #2
 8008f26:	f040 80c8 	bne.w	80090ba <HAL_SAI_Init.part.0+0x31a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008f2a:	3f01      	subs	r7, #1
 8008f2c:	bf18      	it	ne
 8008f2e:	2701      	movne	r7, #1
 8008f30:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008f32:	f7fa ff97 	bl	8003e64 <HAL_GetREVID>
 8008f36:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f3a:	682a      	ldr	r2, [r5, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008f3c:	f0c0 80a9 	bcc.w	8009092 <HAL_SAI_Init.part.0+0x2f2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f40:	6811      	ldr	r1, [r2, #0]
 8008f42:	4b45      	ldr	r3, [pc, #276]	; (8009058 <HAL_SAI_Init.part.0+0x2b8>)
 8008f44:	400b      	ands	r3, r1
 8008f46:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f48:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8008f4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f4e:	430b      	orrs	r3, r1
 8008f50:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8008f52:	430b      	orrs	r3, r1
 8008f54:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8008f56:	430b      	orrs	r3, r1
 8008f58:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8008f5a:	430b      	orrs	r3, r1
 8008f5c:	6969      	ldr	r1, [r5, #20]
 8008f5e:	430b      	orrs	r3, r1
 8008f60:	69a9      	ldr	r1, [r5, #24]
 8008f62:	430b      	orrs	r3, r1
 8008f64:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008f66:	430b      	orrs	r3, r1
 8008f68:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f6a:	430b      	orrs	r3, r1
 8008f6c:	6811      	ldr	r1, [r2, #0]
 8008f6e:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f70:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f72:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8008f76:	4333      	orrs	r3, r6
 8008f78:	433b      	orrs	r3, r7
 8008f7a:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008f7c:	682a      	ldr	r2, [r5, #0]
 8008f7e:	4b37      	ldr	r3, [pc, #220]	; (800905c <HAL_SAI_Init.part.0+0x2bc>)
 8008f80:	6851      	ldr	r1, [r2, #4]
 8008f82:	400b      	ands	r3, r1
 8008f84:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008f86:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8008f88:	69eb      	ldr	r3, [r5, #28]
 8008f8a:	682a      	ldr	r2, [r5, #0]
 8008f8c:	430b      	orrs	r3, r1
 8008f8e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8008f90:	430b      	orrs	r3, r1
 8008f92:	6851      	ldr	r1, [r2, #4]
 8008f94:	430b      	orrs	r3, r1
 8008f96:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008f98:	682a      	ldr	r2, [r5, #0]
 8008f9a:	4b31      	ldr	r3, [pc, #196]	; (8009060 <HAL_SAI_Init.part.0+0x2c0>)
 8008f9c:	6891      	ldr	r1, [r2, #8]
 8008f9e:	400b      	ands	r3, r1
 8008fa0:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008fa2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8008fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fa6:	6829      	ldr	r1, [r5, #0]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8008fac:	6888      	ldr	r0, [r1, #8]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8008fb2:	4303      	orrs	r3, r0
 8008fb4:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008fb6:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008fba:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008fbc:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008fbe:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008fc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008fc4:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008fc6:	682a      	ldr	r2, [r5, #0]
 8008fc8:	68d3      	ldr	r3, [r2, #12]
 8008fca:	4003      	ands	r3, r0
 8008fcc:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008fce:	6829      	ldr	r1, [r5, #0]
 8008fd0:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
 8008fd4:	68ca      	ldr	r2, [r1, #12]
 8008fd6:	4303      	orrs	r3, r0
 8008fd8:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008fda:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008fe0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8008fe2:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008fe4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008fe8:	4a11      	ldr	r2, [pc, #68]	; (8009030 <HAL_SAI_Init.part.0+0x290>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008fea:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008fec:	682b      	ldr	r3, [r5, #0]
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d03c      	beq.n	800906c <HAL_SAI_Init.part.0+0x2cc>
 8008ff2:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8008ff6:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d036      	beq.n	800906c <HAL_SAI_Init.part.0+0x2cc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008ffe:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8009000:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009002:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
 8009006:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 8009008:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800900c:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
 8009010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 8009012:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8009016:	e737      	b.n	8008e88 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009018:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800901a:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 800901e:	e733      	b.n	8008e88 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009020:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009022:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 8009026:	e72f      	b.n	8008e88 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 8009028:	4c0e      	ldr	r4, [pc, #56]	; (8009064 <HAL_SAI_Init.part.0+0x2c4>)
 800902a:	e6dd      	b.n	8008de8 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 800902c:	4c0e      	ldr	r4, [pc, #56]	; (8009068 <HAL_SAI_Init.part.0+0x2c8>)
 800902e:	e6db      	b.n	8008de8 <HAL_SAI_Init.part.0+0x48>
 8009030:	40015804 	.word	0x40015804
 8009034:	58005404 	.word	0x58005404
 8009038:	40015800 	.word	0x40015800
 800903c:	20000754 	.word	0x20000754
 8009040:	95cbec1b 	.word	0x95cbec1b
 8009044:	40015c00 	.word	0x40015c00
 8009048:	40015c04 	.word	0x40015c04
 800904c:	40016004 	.word	0x40016004
 8009050:	58005424 	.word	0x58005424
 8009054:	cccccccd 	.word	0xcccccccd
 8009058:	f005c010 	.word	0xf005c010
 800905c:	ffff1ff0 	.word	0xffff1ff0
 8009060:	fff88000 	.word	0xfff88000
 8009064:	40016000 	.word	0x40016000
 8009068:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800906c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800906e:	f023 0301 	bic.w	r3, r3, #1
 8009072:	6463      	str	r3, [r4, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8009074:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8009078:	2b01      	cmp	r3, #1
 800907a:	d1c0      	bne.n	8008ffe <HAL_SAI_Init.part.0+0x25e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800907c:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8009080:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8009082:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009086:	6463      	str	r3, [r4, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8009088:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	6463      	str	r3, [r4, #68]	; 0x44
 8009090:	e7b5      	b.n	8008ffe <HAL_SAI_Init.part.0+0x25e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009092:	6811      	ldr	r1, [r2, #0]
 8009094:	4b2d      	ldr	r3, [pc, #180]	; (800914c <HAL_SAI_Init.part.0+0x3ac>)
 8009096:	400b      	ands	r3, r1
 8009098:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800909a:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800909c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090a0:	430b      	orrs	r3, r1
 80090a2:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80090a4:	430b      	orrs	r3, r1
 80090a6:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80090a8:	430b      	orrs	r3, r1
 80090aa:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6969      	ldr	r1, [r5, #20]
 80090b0:	430b      	orrs	r3, r1
 80090b2:	69a9      	ldr	r1, [r5, #24]
 80090b4:	430b      	orrs	r3, r1
 80090b6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80090b8:	e757      	b.n	8008f6a <HAL_SAI_Init.part.0+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80090ba:	f1a7 0701 	sub.w	r7, r7, #1
 80090be:	fab7 f787 	clz	r7, r7
 80090c2:	097f      	lsrs	r7, r7, #5
 80090c4:	027f      	lsls	r7, r7, #9
 80090c6:	e734      	b.n	8008f32 <HAL_SAI_Init.part.0+0x192>
  switch (hsai->Init.SynchroExt)
 80090c8:	2013      	movs	r0, #19
 80090ca:	2612      	movs	r6, #18
 80090cc:	2711      	movs	r7, #17
 80090ce:	2110      	movs	r1, #16
 80090d0:	e6b5      	b.n	8008e3e <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80090d2:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80090d4:	2904      	cmp	r1, #4
 80090d6:	d035      	beq.n	8009144 <HAL_SAI_Init.part.0+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80090d8:	2908      	cmp	r1, #8
 80090da:	d021      	beq.n	8009120 <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
 80090dc:	6d68      	ldr	r0, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80090de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80090e2:	0053      	lsls	r3, r2, #1
 80090e4:	6a2a      	ldr	r2, [r5, #32]
 80090e6:	fb00 f202 	mul.w	r2, r0, r2
 80090ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80090ee:	e706      	b.n	8008efe <HAL_SAI_Init.part.0+0x15e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80090f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80090f4:	2100      	movs	r1, #0
 80090f6:	f7ff fc13 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80090fa:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80090fc:	4602      	mov	r2, r0
 80090fe:	e6d0      	b.n	8008ea2 <HAL_SAI_Init.part.0+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009100:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009104:	2100      	movs	r1, #0
 8009106:	f7ff fc0b 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 800910a:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800910c:	4602      	mov	r2, r0
 800910e:	e6d8      	b.n	8008ec2 <HAL_SAI_Init.part.0+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009110:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009114:	2100      	movs	r1, #0
 8009116:	f7ff fc03 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800911a:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800911c:	4602      	mov	r2, r0
 800911e:	e6c8      	b.n	8008eb2 <HAL_SAI_Init.part.0+0x112>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009120:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009124:	e7db      	b.n	80090de <HAL_SAI_Init.part.0+0x33e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8009126:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800912a:	2100      	movs	r1, #0
 800912c:	f7ff fbf8 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
 8009130:	4602      	mov	r2, r0
 8009132:	e6ce      	b.n	8008ed2 <HAL_SAI_Init.part.0+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009134:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009138:	2100      	movs	r1, #0
 800913a:	f7ff fbf1 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 800913e:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009140:	4602      	mov	r2, r0
 8009142:	e6c2      	b.n	8008eca <HAL_SAI_Init.part.0+0x12a>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8009144:	2040      	movs	r0, #64	; 0x40
 8009146:	e7ca      	b.n	80090de <HAL_SAI_Init.part.0+0x33e>
      syncen_bits = 0;
 8009148:	2600      	movs	r6, #0
 800914a:	e69d      	b.n	8008e88 <HAL_SAI_Init.part.0+0xe8>
 800914c:	f805c010 	.word	0xf805c010

08009150 <HAL_SAI_InitProtocol>:
  switch (protocol)
 8009150:	2902      	cmp	r1, #2
{
 8009152:	b538      	push	{r3, r4, r5, lr}
 8009154:	4604      	mov	r4, r0
  switch (protocol)
 8009156:	d935      	bls.n	80091c4 <HAL_SAI_InitProtocol+0x74>
 8009158:	1ec8      	subs	r0, r1, #3
 800915a:	2801      	cmp	r0, #1
 800915c:	d830      	bhi.n	80091c0 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800915e:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8009160:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009162:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009164:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8009166:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 8009168:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800916a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800916e:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009170:	6860      	ldr	r0, [r4, #4]
 8009172:	f030 0002 	bics.w	r0, r0, #2
 8009176:	bf0c      	ite	eq
 8009178:	2501      	moveq	r5, #1
 800917a:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 800917c:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800917e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8009182:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 8009184:	bf0c      	ite	eq
 8009186:	2001      	moveq	r0, #1
 8009188:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800918a:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800918c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8009190:	65a0      	str	r0, [r4, #88]	; 0x58
 8009192:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 8009194:	2a03      	cmp	r2, #3
 8009196:	d813      	bhi.n	80091c0 <HAL_SAI_InitProtocol+0x70>
 8009198:	e8df f002 	tbb	[pc, r2]
 800919c:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80091a0:	6823      	ldr	r3, [r4, #0]
 80091a2:	4a47      	ldr	r2, [pc, #284]	; (80092c0 <HAL_SAI_InitProtocol+0x170>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d005      	beq.n	80091b4 <HAL_SAI_InitProtocol+0x64>
 80091a8:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80091ac:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d105      	bne.n	80091c0 <HAL_SAI_InitProtocol+0x70>
 80091b4:	6863      	ldr	r3, [r4, #4]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d102      	bne.n	80091c0 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80091ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d037      	beq.n	8009230 <HAL_SAI_InitProtocol+0xe0>
}
 80091c0:	2001      	movs	r0, #1
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80091c4:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80091c6:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80091c8:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80091ca:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 80091cc:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80091ce:	6860      	ldr	r0, [r4, #4]
 80091d0:	f030 0002 	bics.w	r0, r0, #2
 80091d4:	bf14      	ite	ne
 80091d6:	2001      	movne	r0, #1
 80091d8:	2000      	moveq	r0, #0
 80091da:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80091dc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80091e0:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80091e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80091e6:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 80091e8:	f013 0001 	ands.w	r0, r3, #1
 80091ec:	d1e8      	bne.n	80091c0 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 80091ee:	b949      	cbnz	r1, 8009204 <HAL_SAI_InitProtocol+0xb4>
 80091f0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80091f4:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 80091f8:	2a03      	cmp	r2, #3
 80091fa:	d8e1      	bhi.n	80091c0 <HAL_SAI_InitProtocol+0x70>
 80091fc:	e8df f002 	tbb	[pc, r2]
 8009200:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8009204:	6660      	str	r0, [r4, #100]	; 0x64
 8009206:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800920a:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 800920c:	2a03      	cmp	r2, #3
 800920e:	d8d7      	bhi.n	80091c0 <HAL_SAI_InitProtocol+0x70>
 8009210:	e8df f002 	tbb	[pc, r2]
 8009214:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009218:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800921a:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800921c:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800921e:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009220:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009222:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009224:	f7fa fe1e 	bl	8003e64 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009228:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800922c:	2b01      	cmp	r3, #1
 800922e:	d0b7      	beq.n	80091a0 <HAL_SAI_InitProtocol+0x50>
 8009230:	4620      	mov	r0, r4
}
 8009232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009236:	f7ff bdb3 	b.w	8008da0 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800923a:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800923c:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800923e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009240:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009242:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 8009244:	e7ee      	b.n	8009224 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009246:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009248:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800924a:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800924c:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800924e:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009250:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 8009252:	e7e7      	b.n	8009224 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009254:	21e0      	movs	r1, #224	; 0xe0
 8009256:	e7f7      	b.n	8009248 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009258:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800925a:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800925c:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800925e:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009260:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009262:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009264:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009266:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800926a:	e7db      	b.n	8009224 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800926c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800926e:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009270:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009272:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009274:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009278:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800927a:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800927e:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009280:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009282:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009284:	d1ce      	bne.n	8009224 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 8009286:	2308      	movs	r3, #8
 8009288:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800928a:	e7cb      	b.n	8009224 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800928c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800928e:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009290:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009292:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009296:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009298:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800929c:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800929e:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80092a2:	d1bf      	bne.n	8009224 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 80092a4:	2310      	movs	r3, #16
 80092a6:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 80092a8:	e7bc      	b.n	8009224 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80092aa:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80092ac:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80092ae:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80092b0:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80092b2:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80092b4:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80092b6:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80092b8:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80092bc:	e7b2      	b.n	8009224 <HAL_SAI_InitProtocol+0xd4>
 80092be:	bf00      	nop
 80092c0:	40015804 	.word	0x40015804

080092c4 <HAL_SAI_Transmit_DMA>:
{
 80092c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	4615      	mov	r5, r2
 80092ca:	f04f 0800 	mov.w	r8, #0
 80092ce:	460f      	mov	r7, r1
 80092d0:	4604      	mov	r4, r0
 80092d2:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
 80092d6:	f7fa fdad 	bl	8003e34 <HAL_GetTick>
 80092da:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
 80092de:	2f00      	cmp	r7, #0
 80092e0:	d066      	beq.n	80093b0 <HAL_SAI_Transmit_DMA+0xec>
 80092e2:	fab5 f985 	clz	r9, r5
 80092e6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80092ea:	2d00      	cmp	r5, #0
 80092ec:	d060      	beq.n	80093b0 <HAL_SAI_Transmit_DMA+0xec>
  if (hsai->State == HAL_SAI_STATE_READY)
 80092ee:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	fa5f fa83 	uxtb.w	sl, r3
 80092f8:	d155      	bne.n	80093a6 <HAL_SAI_Transmit_DMA+0xe2>
    __HAL_LOCK(hsai);
 80092fa:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d051      	beq.n	80093a6 <HAL_SAI_Transmit_DMA+0xe2>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009302:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009304:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009308:	4a39      	ldr	r2, [pc, #228]	; (80093f0 <HAL_SAI_Transmit_DMA+0x12c>)
 800930a:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800930c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009310:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    __HAL_LOCK(hsai);
 8009314:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 8009318:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800931c:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800931e:	4a35      	ldr	r2, [pc, #212]	; (80093f4 <HAL_SAI_Transmit_DMA+0x130>)
 8009320:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009324:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009326:	4a34      	ldr	r2, [pc, #208]	; (80093f8 <HAL_SAI_Transmit_DMA+0x134>)
 8009328:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800932c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800932e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009332:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009336:	6822      	ldr	r2, [r4, #0]
 8009338:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800933c:	321c      	adds	r2, #28
 800933e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009340:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8009344:	f7fb f99c 	bl	8004680 <HAL_DMA_Start_IT>
 8009348:	2800      	cmp	r0, #0
 800934a:	d13f      	bne.n	80093cc <HAL_SAI_Transmit_DMA+0x108>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800934c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800934e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009350:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009352:	d032      	beq.n	80093ba <HAL_SAI_Transmit_DMA+0xf6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009354:	2205      	movs	r2, #5
 8009356:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009358:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800935a:	2b01      	cmp	r3, #1
 800935c:	bf98      	it	ls
 800935e:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009360:	6821      	ldr	r1, [r4, #0]
 8009362:	690b      	ldr	r3, [r1, #16]
 8009364:	4313      	orrs	r3, r2
 8009366:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	6813      	ldr	r3, [r2, #0]
 800936c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009370:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009372:	e005      	b.n	8009380 <HAL_SAI_Transmit_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009374:	f7fa fd5e 	bl	8003e34 <HAL_GetTick>
 8009378:	1b83      	subs	r3, r0, r6
 800937a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800937e:	d82a      	bhi.n	80093d6 <HAL_SAI_Transmit_DMA+0x112>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009380:	6822      	ldr	r2, [r4, #0]
 8009382:	6955      	ldr	r5, [r2, #20]
 8009384:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8009388:	d0f4      	beq.n	8009374 <HAL_SAI_Transmit_DMA+0xb0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800938a:	6813      	ldr	r3, [r2, #0]
 800938c:	03db      	lsls	r3, r3, #15
 800938e:	d403      	bmi.n	8009398 <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
 8009390:	6813      	ldr	r3, [r2, #0]
 8009392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009396:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8009398:	2300      	movs	r3, #0
    return HAL_OK;
 800939a:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
 800939c:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80093a0:	4650      	mov	r0, sl
 80093a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 80093a6:	f04f 0a02 	mov.w	sl, #2
}
 80093aa:	4650      	mov	r0, sl
 80093ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
 80093b0:	f04f 0a01 	mov.w	sl, #1
}
 80093b4:	4650      	mov	r0, sl
 80093b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80093ba:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80093be:	2a01      	cmp	r2, #1
 80093c0:	bf0b      	itete	eq
 80093c2:	2215      	moveq	r2, #21
 80093c4:	2205      	movne	r2, #5
 80093c6:	2171      	moveq	r1, #113	; 0x71
 80093c8:	2161      	movne	r1, #97	; 0x61
 80093ca:	e7c5      	b.n	8009358 <HAL_SAI_Transmit_DMA+0x94>
}
 80093cc:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
 80093ce:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
 80093d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80093d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 80093da:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
 80093de:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80093e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 80093e6:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80093e8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 80093ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f0:	08009461 	.word	0x08009461
 80093f4:	080093fd 	.word	0x080093fd
 80093f8:	0800946d 	.word	0x0800946d

080093fc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80093fc:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80093fe:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009400:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009406:	d01b      	beq.n	8009440 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009408:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009410:	6813      	ldr	r3, [r2, #0]
 8009412:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009416:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009418:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800941a:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800941c:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800941e:	d012      	beq.n	8009446 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009420:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8009424:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009428:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800942a:	3b02      	subs	r3, #2
 800942c:	2b01      	cmp	r3, #1
 800942e:	bf98      	it	ls
 8009430:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009432:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009434:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009438:	4013      	ands	r3, r2
 800943a:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800943c:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8009440:	f011 ffb2 	bl	801b3a8 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
 8009444:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009446:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800944a:	2a01      	cmp	r2, #1
 800944c:	bf0b      	itete	eq
 800944e:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8009452:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8009456:	f06f 0215 	mvneq.w	r2, #21
 800945a:	f06f 0205 	mvnne.w	r2, #5
 800945e:	e7e3      	b.n	8009428 <SAI_DMATxCplt+0x2c>

08009460 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009460:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8009462:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009464:	f011 ff9c 	bl	801b3a0 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
 8009468:	bd08      	pop	{r3, pc}
 800946a:	bf00      	nop

0800946c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800946c:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800946e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009470:	f7fc fb56 	bl	8005b20 <HAL_DMA_GetError>
 8009474:	2802      	cmp	r0, #2
 8009476:	d025      	beq.n	80094c4 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009478:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800947c:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800947e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009482:	4814      	ldr	r0, [pc, #80]	; (80094d4 <SAI_DMAError+0x68>)
 8009484:	4a14      	ldr	r2, [pc, #80]	; (80094d8 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009486:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800948a:	680b      	ldr	r3, [r1, #0]
 800948c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009490:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009492:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
 8009494:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
 800949a:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800949c:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800949e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80094a2:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80094a4:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 80094a6:	b173      	cbz	r3, 80094c6 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80094a8:	6822      	ldr	r2, [r4, #0]
    count--;
 80094aa:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	03d2      	lsls	r2, r2, #15
 80094b0:	d4f9      	bmi.n	80094a6 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80094b2:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80094b4:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80094b6:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 80094b8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 80094bc:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 80094c0:	f011 ff4e 	bl	801b360 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
 80094c4:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80094c6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80094ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ce:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 80094d2:	e7ee      	b.n	80094b2 <SAI_DMAError+0x46>
 80094d4:	20000754 	.word	0x20000754
 80094d8:	95cbec1b 	.word	0x95cbec1b

080094dc <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e0:	4604      	mov	r4, r0
 80094e2:	b096      	sub	sp, #88	; 0x58
 80094e4:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80094e6:	f7fa fca5 	bl	8003e34 <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094ea:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 80094ec:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094ee:	6820      	ldr	r0, [r4, #0]
 80094f0:	f001 feec 	bl	800b2cc <SDMMC_GetResponse>
 80094f4:	0181      	lsls	r1, r0, #6
 80094f6:	d45a      	bmi.n	80095ae <HAL_SD_GetCardStatus.part.0+0xd2>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80094f8:	2140      	movs	r1, #64	; 0x40
 80094fa:	6820      	ldr	r0, [r4, #0]
 80094fc:	f001 ff00 	bl	800b300 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009500:	b1e8      	cbz	r0, 800953e <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009504:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	4955      	ldr	r1, [pc, #340]	; (8009660 <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
 800950a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800950c:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800950e:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 8009510:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009512:	4303      	orrs	r3, r0
 8009514:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009516:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800951a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800951e:	6820      	ldr	r0, [r4, #0]
 8009520:	f001 feee 	bl	800b300 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009524:	b138      	cbz	r0, 8009536 <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8009526:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009528:	6822      	ldr	r2, [r4, #0]
 800952a:	494d      	ldr	r1, [pc, #308]	; (8009660 <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
 800952c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800952e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009530:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009532:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8009536:	4630      	mov	r0, r6
 8009538:	b016      	add	sp, #88	; 0x58
 800953a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800953e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009540:	6820      	ldr	r0, [r4, #0]
 8009542:	0409      	lsls	r1, r1, #16
 8009544:	f002 fc64 	bl	800be10 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009548:	2800      	cmp	r0, #0
 800954a:	d1da      	bne.n	8009502 <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
 800954c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009550:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009552:	4669      	mov	r1, sp
 8009554:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 8009556:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800955a:	2260      	movs	r2, #96	; 0x60
 800955c:	2302      	movs	r3, #2
 800955e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009562:	2200      	movs	r2, #0
 8009564:	2301      	movs	r3, #1
 8009566:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800956a:	f001 feb3 	bl	800b2d4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	f003 f81a 	bl	800c5a8 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009574:	2800      	cmp	r0, #0
 8009576:	d1c4      	bne.n	8009502 <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
 8009578:	ae06      	add	r6, sp, #24
 800957a:	e004      	b.n	8009586 <HAL_SD_GetCardStatus.part.0+0xaa>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800957c:	f7fa fc5a 	bl	8003e34 <HAL_GetTick>
 8009580:	1bc0      	subs	r0, r0, r7
 8009582:	3001      	adds	r0, #1
 8009584:	d017      	beq.n	80095b6 <HAL_SD_GetCardStatus.part.0+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800958a:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800958e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009590:	d114      	bne.n	80095bc <HAL_SD_GetCardStatus.part.0+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009592:	0412      	lsls	r2, r2, #16
 8009594:	d5f2      	bpl.n	800957c <HAL_SD_GetCardStatus.part.0+0xa0>
 8009596:	f106 0820 	add.w	r8, r6, #32
 800959a:	e000      	b.n	800959e <HAL_SD_GetCardStatus.part.0+0xc2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	4618      	mov	r0, r3
 80095a0:	f001 fe7e 	bl	800b2a0 <SDMMC_ReadFIFO>
 80095a4:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 80095a8:	4546      	cmp	r6, r8
 80095aa:	d1f7      	bne.n	800959c <HAL_SD_GetCardStatus.part.0+0xc0>
 80095ac:	e7e6      	b.n	800957c <HAL_SD_GetCardStatus.part.0+0xa0>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80095ae:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80095b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80095b4:	e7a8      	b.n	8009508 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80095b6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80095ba:	e7a4      	b.n	8009506 <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80095bc:	0710      	lsls	r0, r2, #28
 80095be:	d449      	bmi.n	8009654 <HAL_SD_GetCardStatus.part.0+0x178>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80095c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095c2:	0791      	lsls	r1, r2, #30
 80095c4:	d448      	bmi.n	8009658 <HAL_SD_GetCardStatus.part.0+0x17c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80095c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095c8:	0692      	lsls	r2, r2, #26
 80095ca:	d50a      	bpl.n	80095e2 <HAL_SD_GetCardStatus.part.0+0x106>
 80095cc:	e046      	b.n	800965c <HAL_SD_GetCardStatus.part.0+0x180>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80095ce:	f001 fe67 	bl	800b2a0 <SDMMC_ReadFIFO>
 80095d2:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80095d6:	f7fa fc2d 	bl	8003e34 <HAL_GetTick>
 80095da:	1bc0      	subs	r0, r0, r7
 80095dc:	3001      	adds	r0, #1
 80095de:	d0ea      	beq.n	80095b6 <HAL_SD_GetCardStatus.part.0+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095e0:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80095e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80095e4:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80095e6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095ea:	d1f0      	bne.n	80095ce <HAL_SD_GetCardStatus.part.0+0xf2>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095ec:	491d      	ldr	r1, [pc, #116]	; (8009664 <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
 80095ee:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095f0:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80095f2:	9b06      	ldr	r3, [sp, #24]
 80095f4:	f3c3 1281 	ubfx	r2, r3, #6, #2
 80095f8:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80095fa:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80095fe:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009600:	0a1a      	lsrs	r2, r3, #8
 8009602:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009606:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800960a:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 800960e:	b292      	uxth	r2, r2
 8009610:	ba09      	rev	r1, r1
 8009612:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009614:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009616:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009618:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800961a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800961e:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009622:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009624:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009628:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800962a:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800962c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800962e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009632:	b2d0      	uxtb	r0, r2
 8009634:	4303      	orrs	r3, r0
 8009636:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009638:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800963c:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800963e:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8009642:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009644:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009648:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800964c:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800964e:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009650:	74a9      	strb	r1, [r5, #18]
 8009652:	e762      	b.n	800951a <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009654:	2008      	movs	r0, #8
 8009656:	e757      	b.n	8009508 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009658:	2002      	movs	r0, #2
 800965a:	e755      	b.n	8009508 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 800965c:	2020      	movs	r0, #32
 800965e:	e753      	b.n	8009508 <HAL_SD_GetCardStatus.part.0+0x2c>
 8009660:	1fe00fff 	.word	0x1fe00fff
 8009664:	18000f3a 	.word	0x18000f3a

08009668 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8009668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	4605      	mov	r5, r0
 800966e:	b086      	sub	sp, #24
 8009670:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009672:	f7fa fbdf 	bl	8003e34 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009676:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8009678:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800967a:	6828      	ldr	r0, [r5, #0]
 800967c:	f001 fe40 	bl	800b300 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009680:	4604      	mov	r4, r0
 8009682:	b118      	cbz	r0, 800968c <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8009684:	4620      	mov	r0, r4
 8009686:	b006      	add	sp, #24
 8009688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800968c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800968e:	6828      	ldr	r0, [r5, #0]
 8009690:	0409      	lsls	r1, r1, #16
 8009692:	f002 fbbd 	bl	800be10 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009696:	4604      	mov	r4, r0
 8009698:	2800      	cmp	r0, #0
 800969a:	d1f3      	bne.n	8009684 <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 800969c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096a0:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096a2:	4669      	mov	r1, sp
 80096a4:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 80096a6:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096aa:	2230      	movs	r2, #48	; 0x30
 80096ac:	2302      	movs	r3, #2
 80096ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80096b2:	2200      	movs	r2, #0
 80096b4:	2301      	movs	r3, #1
 80096b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096ba:	f001 fe0b 	bl	800b2d4 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80096be:	6828      	ldr	r0, [r5, #0]
 80096c0:	f002 fd3e 	bl	800c140 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80096c4:	4604      	mov	r4, r0
 80096c6:	2800      	cmp	r0, #0
 80096c8:	d1dc      	bne.n	8009684 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80096ca:	4682      	mov	sl, r0
 80096cc:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80096ce:	f240 582a 	movw	r8, #1322	; 0x52a
 80096d2:	e004      	b.n	80096de <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80096d4:	f7fa fbae 	bl	8003e34 <HAL_GetTick>
 80096d8:	1b83      	subs	r3, r0, r6
 80096da:	3301      	adds	r3, #1
 80096dc:	d024      	beq.n	8009728 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80096de:	6828      	ldr	r0, [r5, #0]
 80096e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80096e2:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80096e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80096e8:	d10c      	bne.n	8009704 <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80096ea:	0319      	lsls	r1, r3, #12
 80096ec:	d4f2      	bmi.n	80096d4 <SD_FindSCR.constprop.0+0x6c>
 80096ee:	2c00      	cmp	r4, #0
 80096f0:	d1f0      	bne.n	80096d4 <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80096f2:	f001 fdd5 	bl	800b2a0 <SDMMC_ReadFIFO>
 80096f6:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80096f8:	6828      	ldr	r0, [r5, #0]
      index++;
 80096fa:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80096fc:	f001 fdd0 	bl	800b2a0 <SDMMC_ReadFIFO>
 8009700:	4682      	mov	sl, r0
      index++;
 8009702:	e7e7      	b.n	80096d4 <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009704:	071a      	lsls	r2, r3, #28
 8009706:	d416      	bmi.n	8009736 <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009708:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800970a:	079b      	lsls	r3, r3, #30
 800970c:	d40f      	bmi.n	800972e <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800970e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009710:	f014 0420 	ands.w	r4, r4, #32
 8009714:	d113      	bne.n	800973e <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009716:	fa9a f28a 	rev.w	r2, sl
 800971a:	fa99 f389 	rev.w	r3, r9
 800971e:	490a      	ldr	r1, [pc, #40]	; (8009748 <SD_FindSCR.constprop.0+0xe0>)
 8009720:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009722:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8009726:	e7ad      	b.n	8009684 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8009728:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800972c:	e7aa      	b.n	8009684 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800972e:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009730:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009732:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009734:	e7a6      	b.n	8009684 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009736:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009738:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800973a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800973c:	e7a2      	b.n	8009684 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800973e:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8009740:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009742:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8009744:	e79e      	b.n	8009684 <SD_FindSCR.constprop.0+0x1c>
 8009746:	bf00      	nop
 8009748:	18000f3a 	.word	0x18000f3a

0800974c <HAL_SD_ReadBlocks>:
{
 800974c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	460d      	mov	r5, r1
 8009752:	b087      	sub	sp, #28
 8009754:	4604      	mov	r4, r0
 8009756:	4692      	mov	sl, r2
 8009758:	461f      	mov	r7, r3
 800975a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800975e:	f7fa fb69 	bl	8003e34 <HAL_GetTick>
  if (NULL == pData)
 8009762:	2d00      	cmp	r5, #0
 8009764:	d069      	beq.n	800983a <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
 8009766:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800976a:	2b01      	cmp	r3, #1
 800976c:	fa5f f983 	uxtb.w	r9, r3
 8009770:	d152      	bne.n	8009818 <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009772:	eb0a 0307 	add.w	r3, sl, r7
 8009776:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009778:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800977a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800977c:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800977e:	d866      	bhi.n	800984e <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
 8009780:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009782:	f04f 0b02 	mov.w	fp, #2
 8009786:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 8009788:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800978c:	6823      	ldr	r3, [r4, #0]
 800978e:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009790:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009792:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009794:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009796:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009798:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800979c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 80097a4:	bf18      	it	ne
 80097a6:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097aa:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80097ac:	027b      	lsls	r3, r7, #9
 80097ae:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80097b0:	2390      	movs	r3, #144	; 0x90
 80097b2:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80097b6:	f001 fd8d 	bl	800b2d4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80097ba:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 80097bc:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80097be:	68d3      	ldr	r3, [r2, #12]
 80097c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097c4:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80097c6:	d931      	bls.n	800982c <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80097c8:	4651      	mov	r1, sl
 80097ca:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80097cc:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80097d0:	f001 fef2 	bl	800b5b8 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d142      	bne.n	800985e <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
 80097d8:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80097dc:	e004      	b.n	80097e8 <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80097de:	f7fa fb29 	bl	8003e34 <HAL_GetTick>
 80097e2:	1b80      	subs	r0, r0, r6
 80097e4:	4540      	cmp	r0, r8
 80097e6:	d267      	bcs.n	80098b8 <HAL_SD_ReadBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80097e8:	6820      	ldr	r0, [r4, #0]
 80097ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80097ec:	f413 7f95 	tst.w	r3, #298	; 0x12a
 80097f0:	d141      	bne.n	8009876 <HAL_SD_ReadBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80097f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80097f4:	041a      	lsls	r2, r3, #16
 80097f6:	d5f2      	bpl.n	80097de <HAL_SD_ReadBlocks+0x92>
 80097f8:	f1bb 0f1f 	cmp.w	fp, #31
 80097fc:	d9ef      	bls.n	80097de <HAL_SD_ReadBlocks+0x92>
 80097fe:	f105 0a20 	add.w	sl, r5, #32
 8009802:	e000      	b.n	8009806 <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009804:	6820      	ldr	r0, [r4, #0]
 8009806:	f001 fd4b 	bl	800b2a0 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 800980a:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 800980e:	45aa      	cmp	sl, r5
 8009810:	d1f8      	bne.n	8009804 <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
 8009812:	f1ab 0b20 	sub.w	fp, fp, #32
 8009816:	e7e2      	b.n	80097de <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009818:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800981a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800981e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009822:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009824:	4648      	mov	r0, r9
 8009826:	b007      	add	sp, #28
 8009828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800982c:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800982e:	4651      	mov	r1, sl
 8009830:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009832:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009834:	f001 fe12 	bl	800b45c <SDMMC_CmdReadSingleBlock>
 8009838:	e7cc      	b.n	80097d4 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800983a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800983c:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8009844:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009846:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009848:	b007      	add	sp, #28
 800984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800984e:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8009850:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009856:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009858:	b007      	add	sp, #28
 800985a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	4a30      	ldr	r2, [pc, #192]	; (8009924 <HAL_SD_ReadBlocks+0x1d8>)
 8009862:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009864:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8009866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009868:	4303      	orrs	r3, r0
 800986a:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800986c:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 800986e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009872:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8009874:	e7d6      	b.n	8009824 <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009876:	68c3      	ldr	r3, [r0, #12]
 8009878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800987c:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800987e:	6820      	ldr	r0, [r4, #0]
 8009880:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009882:	05db      	lsls	r3, r3, #23
 8009884:	d501      	bpl.n	800988a <HAL_SD_ReadBlocks+0x13e>
 8009886:	2f01      	cmp	r7, #1
 8009888:	d825      	bhi.n	80098d6 <HAL_SD_ReadBlocks+0x18a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800988a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800988c:	f013 0308 	ands.w	r3, r3, #8
 8009890:	d135      	bne.n	80098fe <HAL_SD_ReadBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009892:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009894:	f012 0202 	ands.w	r2, r2, #2
 8009898:	d126      	bne.n	80098e8 <HAL_SD_ReadBlocks+0x19c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800989a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800989c:	f013 0320 	ands.w	r3, r3, #32
 80098a0:	d039      	beq.n	8009916 <HAL_SD_ReadBlocks+0x1ca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098a2:	4b20      	ldr	r3, [pc, #128]	; (8009924 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 80098a4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098a6:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80098a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098aa:	f043 0320 	orr.w	r3, r3, #32
 80098ae:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80098b0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80098b4:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 80098b6:	e7b5      	b.n	8009824 <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098b8:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80098ba:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098bc:	4819      	ldr	r0, [pc, #100]	; (8009924 <HAL_SD_ReadBlocks+0x1d8>)
        hsd->Context = SD_CONTEXT_NONE;
 80098be:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 80098c0:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098c4:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80098c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098cc:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80098ce:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80098d2:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 80098d4:	e7a6      	b.n	8009824 <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80098d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d0d6      	beq.n	800988a <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80098dc:	f002 f876 	bl	800b9cc <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d1bc      	bne.n	800985e <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098e4:	6820      	ldr	r0, [r4, #0]
 80098e6:	e7d0      	b.n	800988a <HAL_SD_ReadBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098e8:	4a0e      	ldr	r2, [pc, #56]	; (8009924 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 80098ea:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098ec:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80098ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80098f0:	f042 0202 	orr.w	r2, r2, #2
 80098f4:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80098f6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80098fa:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 80098fc:	e792      	b.n	8009824 <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098fe:	4b09      	ldr	r3, [pc, #36]	; (8009924 <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009900:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009902:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009906:	f043 0308 	orr.w	r3, r3, #8
 800990a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800990c:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800990e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009912:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009914:	e786      	b.n	8009824 <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009916:	4904      	ldr	r1, [pc, #16]	; (8009928 <HAL_SD_ReadBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
 8009918:	2201      	movs	r2, #1
    return HAL_OK;
 800991a:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800991c:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800991e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 8009922:	e77f      	b.n	8009824 <HAL_SD_ReadBlocks+0xd8>
 8009924:	1fe00fff 	.word	0x1fe00fff
 8009928:	18000f3a 	.word	0x18000f3a

0800992c <HAL_SD_WriteBlocks>:
{
 800992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	460d      	mov	r5, r1
 8009932:	b089      	sub	sp, #36	; 0x24
 8009934:	4604      	mov	r4, r0
 8009936:	4692      	mov	sl, r2
 8009938:	461f      	mov	r7, r3
 800993a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800993e:	f7fa fa79 	bl	8003e34 <HAL_GetTick>
  if (NULL == pData)
 8009942:	2d00      	cmp	r5, #0
 8009944:	d068      	beq.n	8009a18 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
 8009946:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800994a:	2b01      	cmp	r3, #1
 800994c:	fa5f f983 	uxtb.w	r9, r3
 8009950:	d152      	bne.n	80099f8 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009952:	eb0a 0307 	add.w	r3, sl, r7
 8009956:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009958:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800995a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800995c:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800995e:	d865      	bhi.n	8009a2c <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
 8009960:	2303      	movs	r3, #3
 8009962:	4606      	mov	r6, r0
 8009964:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800996c:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800996e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009970:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009972:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009974:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009978:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800997c:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800997e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 8009982:	bf18      	it	ne
 8009984:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009988:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800998a:	027b      	lsls	r3, r7, #9
 800998c:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800998e:	2390      	movs	r3, #144	; 0x90
 8009990:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009992:	f001 fc9f 	bl	800b2d4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009996:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 8009998:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800999a:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800999c:	68d3      	ldr	r3, [r2, #12]
 800999e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a2:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80099a4:	d932      	bls.n	8009a0c <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80099a6:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80099a8:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80099aa:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80099ac:	f001 ff60 	bl	800b870 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d143      	bne.n	8009a3c <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 80099b4:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80099b8:	e004      	b.n	80099c4 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80099ba:	f7fa fa3b 	bl	8003e34 <HAL_GetTick>
 80099be:	1b80      	subs	r0, r0, r6
 80099c0:	4540      	cmp	r0, r8
 80099c2:	d268      	bcs.n	8009a96 <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80099c4:	6820      	ldr	r0, [r4, #0]
 80099c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099c8:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 80099cc:	d142      	bne.n	8009a54 <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80099ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099d0:	045a      	lsls	r2, r3, #17
 80099d2:	d5f2      	bpl.n	80099ba <HAL_SD_WriteBlocks+0x8e>
 80099d4:	f1bb 0f1f 	cmp.w	fp, #31
 80099d8:	d9ef      	bls.n	80099ba <HAL_SD_WriteBlocks+0x8e>
 80099da:	f105 0a20 	add.w	sl, r5, #32
 80099de:	e000      	b.n	80099e2 <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80099e0:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 80099e2:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80099e6:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 80099e8:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80099ea:	f001 fc5d 	bl	800b2a8 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80099ee:	4555      	cmp	r5, sl
 80099f0:	d1f6      	bne.n	80099e0 <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 80099f2:	f1ab 0b20 	sub.w	fp, fp, #32
 80099f6:	e7e0      	b.n	80099ba <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80099f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80099fa:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80099fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a02:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009a04:	4648      	mov	r0, r9
 8009a06:	b009      	add	sp, #36	; 0x24
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009a0c:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009a0e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009a10:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009a12:	f001 fe7f 	bl	800b714 <SDMMC_CmdWriteSingleBlock>
 8009a16:	e7cb      	b.n	80099b0 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009a1a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8009a22:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a24:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009a26:	b009      	add	sp, #36	; 0x24
 8009a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8009a2e:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a34:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009a36:	b009      	add	sp, #36	; 0x24
 8009a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	4a30      	ldr	r2, [pc, #192]	; (8009b00 <HAL_SD_WriteBlocks+0x1d4>)
 8009a40:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009a42:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8009a44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a46:	4303      	orrs	r3, r0
 8009a48:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009a4a:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 8009a4c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009a50:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8009a52:	e7d7      	b.n	8009a04 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009a54:	68c3      	ldr	r3, [r0, #12]
 8009a56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a5a:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a60:	05db      	lsls	r3, r3, #23
 8009a62:	d501      	bpl.n	8009a68 <HAL_SD_WriteBlocks+0x13c>
 8009a64:	2f01      	cmp	r7, #1
 8009a66:	d823      	bhi.n	8009ab0 <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a6a:	f013 0308 	ands.w	r3, r3, #8
 8009a6e:	d133      	bne.n	8009ad8 <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a70:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009a72:	f012 0202 	ands.w	r2, r2, #2
 8009a76:	d124      	bne.n	8009ac2 <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009a78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009a7a:	f013 0310 	ands.w	r3, r3, #16
 8009a7e:	d037      	beq.n	8009af0 <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a80:	4b1f      	ldr	r3, [pc, #124]	; (8009b00 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009a82:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a84:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a88:	f043 0310 	orr.w	r3, r3, #16
 8009a8c:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009a8e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a92:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009a94:	e7b6      	b.n	8009a04 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a96:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8009a98:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a9a:	4819      	ldr	r0, [pc, #100]	; (8009b00 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 8009a9c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8009a9e:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009aa2:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009aa6:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009aa8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009aac:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009aae:	e7a9      	b.n	8009a04 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009ab0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	d0d8      	beq.n	8009a68 <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ab6:	f001 ff89 	bl	800b9cc <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d1be      	bne.n	8009a3c <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009abe:	6820      	ldr	r0, [r4, #0]
 8009ac0:	e7d2      	b.n	8009a68 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ac2:	4a0f      	ldr	r2, [pc, #60]	; (8009b00 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009ac4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ac6:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009ac8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009aca:	f042 0202 	orr.w	r2, r2, #2
 8009ace:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ad0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009ad4:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009ad6:	e795      	b.n	8009a04 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009ada:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009adc:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009ade:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ae0:	f043 0308 	orr.w	r3, r3, #8
 8009ae4:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ae6:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009ae8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009aec:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009aee:	e789      	b.n	8009a04 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009af0:	4904      	ldr	r1, [pc, #16]	; (8009b04 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 8009af2:	2201      	movs	r2, #1
    return HAL_OK;
 8009af4:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009af6:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009af8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 8009afc:	e782      	b.n	8009a04 <HAL_SD_WriteBlocks+0xd8>
 8009afe:	bf00      	nop
 8009b00:	1fe00fff 	.word	0x1fe00fff
 8009b04:	18000f3a 	.word	0x18000f3a

08009b08 <HAL_SD_ErrorCallback>:
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop

08009b0c <HAL_SD_GetCardCSD>:
{
 8009b0c:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009b0e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009b10:	f04f 0c00 	mov.w	ip, #0
{
 8009b14:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009b16:	0f92      	lsrs	r2, r2, #30
 8009b18:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009b1a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009b1c:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8009b20:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009b22:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 8009b26:	f002 0203 	and.w	r2, r2, #3
 8009b2a:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009b2c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 8009b30:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009b32:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 8009b36:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009b38:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8009b3c:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009b3e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009b40:	0d12      	lsrs	r2, r2, #20
 8009b42:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009b44:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8009b48:	f002 020f 	and.w	r2, r2, #15
 8009b4c:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009b4e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009b50:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009b54:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009b56:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009b58:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009b5c:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009b5e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009b60:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009b64:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009b66:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009b68:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009b6c:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009b6e:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 8009b72:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8009b74:	2a00      	cmp	r2, #0
 8009b76:	f040 808a 	bne.w	8009c8e <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009b7a:	6e04      	ldr	r4, [r0, #96]	; 0x60
 8009b7c:	f640 72fc 	movw	r2, #4092	; 0xffc
 8009b80:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009b82:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 8009b86:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8009b8a:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009b8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009b8e:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8009b92:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009b94:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8009b98:	f002 0207 	and.w	r2, r2, #7
 8009b9c:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009b9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ba0:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8009ba4:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009ba6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009ba8:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8009bac:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009bae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009bb0:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8009bb4:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009bb6:	690a      	ldr	r2, [r1, #16]
 8009bb8:	3201      	adds	r2, #1
 8009bba:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009bbc:	7e08      	ldrb	r0, [r1, #24]
 8009bbe:	f000 0007 	and.w	r0, r0, #7
 8009bc2:	3002      	adds	r0, #2
 8009bc4:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009bc6:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009bc8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009bca:	f891 c008 	ldrb.w	ip, [r1, #8]
 8009bce:	f00c 0c0f 	and.w	ip, ip, #15
 8009bd2:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009bd6:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009bda:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009bdc:	fb02 f20c 	mul.w	r2, r2, ip
 8009be0:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009be2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
 8009be4:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
 8009be8:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 8009bea:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009bee:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 8009bf2:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009bf4:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009bf6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009bf8:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8009bfc:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009bfe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009c00:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009c04:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009c06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c08:	0fd2      	lsrs	r2, r2, #31
 8009c0a:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009c0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c0e:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8009c12:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009c14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c16:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8009c1a:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009c1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c1e:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8009c22:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009c24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c26:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8009c2a:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8009c2e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009c32:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009c36:	ea02 020c 	and.w	r2, r2, ip
 8009c3a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009c3e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c40:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009c44:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009c48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c4a:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009c4e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009c52:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c54:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009c58:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009c5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c5e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009c62:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009c66:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c68:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8009c6c:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009c70:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009c72:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8009c76:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c7c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009c80:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009c84:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 8009c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c8c:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c8e:	2a01      	cmp	r2, #1
 8009c90:	d110      	bne.n	8009cb4 <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009c92:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009c94:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 8009c98:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009c9c:	0412      	lsls	r2, r2, #16
 8009c9e:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8009ca2:	4322      	orrs	r2, r4
 8009ca4:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009ca6:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8009ca8:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009caa:	3201      	adds	r2, #1
 8009cac:	0292      	lsls	r2, r2, #10
 8009cae:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009cb0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009cb2:	e796      	b.n	8009be2 <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cb4:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 8009cb6:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cb8:	4805      	ldr	r0, [pc, #20]	; (8009cd0 <HAL_SD_GetCardCSD+0x1c4>)
 8009cba:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 8009cbc:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009cc4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009cc6:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 8009cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	1fe00fff 	.word	0x1fe00fff

08009cd4 <HAL_SD_InitCard>:
{
 8009cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009cd6:	2200      	movs	r2, #0
{
 8009cd8:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009cda:	2300      	movs	r3, #0
{
 8009cdc:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009cde:	2100      	movs	r1, #0
 8009ce0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009ce4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009cec:	f7fe fe18 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8009cf0:	b940      	cbnz	r0, 8009d04 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 8009cf2:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 8009cf8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009cfc:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009cfe:	4630      	mov	r0, r6
 8009d00:	b015      	add	sp, #84	; 0x54
 8009d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009d04:	0a06      	lsrs	r6, r0, #8
 8009d06:	4b8e      	ldr	r3, [pc, #568]	; (8009f40 <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
 8009d08:	aa07      	add	r2, sp, #28
 8009d0a:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009d0c:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 8009d10:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009d12:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 8009d14:	9608      	str	r6, [sp, #32]
 8009d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d1a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d20:	6820      	ldr	r0, [r4, #0]
 8009d22:	f001 faa1 	bl	800b268 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009d26:	6820      	ldr	r0, [r4, #0]
 8009d28:	f001 fac4 	bl	800b2b4 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8009d2c:	4b85      	ldr	r3, [pc, #532]	; (8009f44 <HAL_SD_InitCard+0x270>)
 8009d2e:	429d      	cmp	r5, r3
 8009d30:	d902      	bls.n	8009d38 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009d32:	0076      	lsls	r6, r6, #1
 8009d34:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009d38:	4883      	ldr	r0, [pc, #524]	; (8009f48 <HAL_SD_InitCard+0x274>)
 8009d3a:	fbb0 f0f5 	udiv	r0, r0, r5
 8009d3e:	3001      	adds	r0, #1
 8009d40:	f7fa f87e 	bl	8003e40 <HAL_Delay>
  __IO uint32_t count = 0U;
 8009d44:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d46:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8009d48:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d4a:	f001 fff5 	bl	800bd38 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d4e:	4605      	mov	r5, r0
 8009d50:	b140      	cbz	r0, 8009d64 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 8009d52:	2601      	movs	r6, #1
 8009d54:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 8009d58:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8009d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d5c:	432b      	orrs	r3, r5
 8009d5e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009d60:	b015      	add	sp, #84	; 0x54
 8009d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009d64:	6820      	ldr	r0, [r4, #0]
 8009d66:	f002 f813 	bl	800bd90 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009d6a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8009d6e:	f000 80ce 	beq.w	8009f0e <HAL_SD_InitCard+0x23a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009d72:	2301      	movs	r3, #1
 8009d74:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d76:	2100      	movs	r1, #0
 8009d78:	6820      	ldr	r0, [r4, #0]
 8009d7a:	f002 f849 	bl	800be10 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d7e:	bb08      	cbnz	r0, 8009dc4 <HAL_SD_InitCard+0xf0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009d80:	9b03      	ldr	r3, [sp, #12]
 8009d82:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8009d86:	42b3      	cmp	r3, r6
 8009d88:	f200 80d3 	bhi.w	8009f32 <HAL_SD_InitCard+0x25e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009d8c:	4f6f      	ldr	r7, [pc, #444]	; (8009f4c <HAL_SD_InitCard+0x278>)
 8009d8e:	e010      	b.n	8009db2 <HAL_SD_InitCard+0xde>
 8009d90:	6820      	ldr	r0, [r4, #0]
 8009d92:	f002 f8eb 	bl	800bf6c <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009d96:	4601      	mov	r1, r0
 8009d98:	b9a0      	cbnz	r0, 8009dc4 <HAL_SD_InitCard+0xf0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d9a:	6820      	ldr	r0, [r4, #0]
 8009d9c:	f001 fa96 	bl	800b2cc <SDMMC_GetResponse>
    count++;
 8009da0:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009da2:	2800      	cmp	r0, #0
    count++;
 8009da4:	f103 0301 	add.w	r3, r3, #1
 8009da8:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	db0d      	blt.n	8009dca <HAL_SD_InitCard+0xf6>
 8009dae:	42b3      	cmp	r3, r6
 8009db0:	d80b      	bhi.n	8009dca <HAL_SD_InitCard+0xf6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009db2:	2100      	movs	r1, #0
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	f002 f82b 	bl	800be10 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009dba:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d0e7      	beq.n	8009d90 <HAL_SD_InitCard+0xbc>
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	e7c6      	b.n	8009d52 <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009dc4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009dc8:	e7c3      	b.n	8009d52 <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009dca:	9a03      	ldr	r2, [sp, #12]
 8009dcc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	f200 80b2 	bhi.w	8009f3a <HAL_SD_InitCard+0x266>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009dd6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
 8009dda:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009dde:	bf18      	it	ne
 8009de0:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
 8009de2:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 8009de4:	2300      	movs	r3, #0
 8009de6:	63a5      	str	r5, [r4, #56]	; 0x38
 8009de8:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 8009dec:	f7fa f822 	bl	8003e34 <HAL_GetTick>
 8009df0:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009df2:	6820      	ldr	r0, [r4, #0]
 8009df4:	f001 fa66 	bl	800b2c4 <SDMMC_GetPowerState>
 8009df8:	b350      	cbz	r0, 8009e50 <HAL_SD_InitCard+0x17c>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009dfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d132      	bne.n	8009e66 <HAL_SD_InitCard+0x192>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009e00:	2104      	movs	r1, #4
 8009e02:	6820      	ldr	r0, [r4, #0]
 8009e04:	f001 fa62 	bl	800b2cc <SDMMC_GetResponse>
 8009e08:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009e0a:	a909      	add	r1, sp, #36	; 0x24
 8009e0c:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009e0e:	0d1b      	lsrs	r3, r3, #20
 8009e10:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009e12:	f7ff fe7b 	bl	8009b0c <HAL_SD_GetCardCSD>
 8009e16:	4606      	mov	r6, r0
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	f040 8084 	bne.w	8009f26 <HAL_SD_InitCard+0x252>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009e1e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	0409      	lsls	r1, r1, #16
 8009e24:	f001 feda 	bl	800bbdc <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e28:	b9a0      	cbnz	r0, 8009e54 <HAL_SD_InitCard+0x180>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e2e:	6820      	ldr	r0, [r4, #0]
 8009e30:	f001 fa66 	bl	800b300 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e34:	2800      	cmp	r0, #0
 8009e36:	f43f af62 	beq.w	8009cfe <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e3a:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8009e3c:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e3e:	4944      	ldr	r1, [pc, #272]	; (8009f50 <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
 8009e40:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e42:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009e44:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009e46:	4310      	orrs	r0, r2
 8009e48:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009e4a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 8009e4e:	e756      	b.n	8009cfe <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e50:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8009e54:	2601      	movs	r6, #1
 8009e56:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e5c:	4303      	orrs	r3, r0
}
 8009e5e:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8009e60:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009e62:	b015      	add	sp, #84	; 0x54
 8009e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009e66:	6820      	ldr	r0, [r4, #0]
 8009e68:	f002 fa12 	bl	800c290 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d1f1      	bne.n	8009e54 <HAL_SD_InitCard+0x180>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e70:	4601      	mov	r1, r0
 8009e72:	6820      	ldr	r0, [r4, #0]
 8009e74:	f001 fa2a 	bl	800b2cc <SDMMC_GetResponse>
 8009e78:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e7a:	2104      	movs	r1, #4
 8009e7c:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e7e:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e80:	f001 fa24 	bl	800b2cc <SDMMC_GetResponse>
 8009e84:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e86:	2108      	movs	r1, #8
 8009e88:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e8a:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e8c:	f001 fa1e 	bl	800b2cc <SDMMC_GetResponse>
 8009e90:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e92:	210c      	movs	r1, #12
 8009e94:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e96:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e98:	f001 fa18 	bl	800b2cc <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009e9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e9e:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009ea0:	2b03      	cmp	r3, #3
 8009ea2:	d0ad      	beq.n	8009e00 <HAL_SD_InitCard+0x12c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009ea4:	f241 3687 	movw	r6, #4999	; 0x1387
 8009ea8:	e009      	b.n	8009ebe <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009eaa:	6820      	ldr	r0, [r4, #0]
 8009eac:	f002 fa6e 	bl	800c38c <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	d1cf      	bne.n	8009e54 <HAL_SD_InitCard+0x180>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009eb4:	f7f9 ffbe 	bl	8003e34 <HAL_GetTick>
 8009eb8:	1b43      	subs	r3, r0, r5
 8009eba:	42b3      	cmp	r3, r6
 8009ebc:	d836      	bhi.n	8009f2c <HAL_SD_InitCard+0x258>
    while (sd_rca == 0U)
 8009ebe:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009ec2:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0ef      	beq.n	8009eaa <HAL_SD_InitCard+0x1d6>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009eca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009ecc:	2a03      	cmp	r2, #3
 8009ece:	d097      	beq.n	8009e00 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ed0:	0419      	lsls	r1, r3, #16
 8009ed2:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8009ed4:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ed6:	f002 fa19 	bl	800c30c <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d1ba      	bne.n	8009e54 <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ede:	4601      	mov	r1, r0
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	f001 f9f3 	bl	800b2cc <SDMMC_GetResponse>
 8009ee6:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009ee8:	2104      	movs	r1, #4
 8009eea:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009eec:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009eee:	f001 f9ed 	bl	800b2cc <SDMMC_GetResponse>
 8009ef2:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ef4:	2108      	movs	r1, #8
 8009ef6:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009ef8:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009efa:	f001 f9e7 	bl	800b2cc <SDMMC_GetResponse>
 8009efe:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009f00:	210c      	movs	r1, #12
 8009f02:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009f04:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009f06:	f001 f9e1 	bl	800b2cc <SDMMC_GetResponse>
 8009f0a:	66a0      	str	r0, [r4, #104]	; 0x68
 8009f0c:	e778      	b.n	8009e00 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f0e:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f10:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f12:	f001 ff11 	bl	800bd38 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f16:	2800      	cmp	r0, #0
 8009f18:	f47f af52 	bne.w	8009dc0 <HAL_SD_InitCard+0xec>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009f1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	f47f af2e 	bne.w	8009d80 <HAL_SD_InitCard+0xac>
 8009f24:	e727      	b.n	8009d76 <HAL_SD_InitCard+0xa2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f26:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009f2a:	e793      	b.n	8009e54 <HAL_SD_InitCard+0x180>
        return HAL_SD_ERROR_TIMEOUT;
 8009f2c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f30:	e790      	b.n	8009e54 <HAL_SD_InitCard+0x180>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009f32:	9b03      	ldr	r3, [sp, #12]
 8009f34:	42b3      	cmp	r3, r6
 8009f36:	f67f af55 	bls.w	8009de4 <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009f3a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8009f3e:	e708      	b.n	8009d52 <HAL_SD_InitCard+0x7e>
 8009f40:	014f8b59 	.word	0x014f8b59
 8009f44:	000c34ff 	.word	0x000c34ff
 8009f48:	00012110 	.word	0x00012110
 8009f4c:	c1100000 	.word	0xc1100000
 8009f50:	1fe00fff 	.word	0x1fe00fff

08009f54 <HAL_SD_GetCardInfo>:
{
 8009f54:	4603      	mov	r3, r0
}
 8009f56:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f5a:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f5e:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f62:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f66:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f6a:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009f6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f6e:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f72:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f76:	61cb      	str	r3, [r1, #28]
}
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop

08009f7c <HAL_SD_ConfigWideBusOperation>:
{
 8009f7c:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8009f7e:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009f80:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 8009f82:	b089      	sub	sp, #36	; 0x24
 8009f84:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009f86:	4293      	cmp	r3, r2
{
 8009f88:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8009f8a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009f8e:	d040      	beq.n	800a012 <HAL_SD_ConfigWideBusOperation+0x96>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009f90:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009f94:	d03d      	beq.n	800a012 <HAL_SD_ConfigWideBusOperation+0x96>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009f96:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8009f9a:	d07d      	beq.n	800a098 <HAL_SD_ConfigWideBusOperation+0x11c>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009f9c:	2900      	cmp	r1, #0
 8009f9e:	d05c      	beq.n	800a05a <HAL_SD_ConfigWideBusOperation+0xde>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fa0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009fa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fa6:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009fa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d138      	bne.n	800a020 <HAL_SD_ConfigWideBusOperation+0xa4>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009fae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	f7fe fcb4 	bl	8008920 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d048      	beq.n	800a04e <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009fbc:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009fbe:	4b50      	ldr	r3, [pc, #320]	; (800a100 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009fc0:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 8009fc2:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009fc4:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009fc6:	fba3 5300 	umull	r5, r3, r3, r0
 8009fca:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009fcc:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009fce:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009fd2:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009fd4:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009fd8:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009fda:	d20e      	bcs.n	8009ffa <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009fdc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009fde:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009fe2:	d00a      	beq.n	8009ffa <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009fe4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009fe8:	d078      	beq.n	800a0dc <HAL_SD_ConfigWideBusOperation+0x160>
        if (hsd->Init.ClockDiv == 0U)
 8009fea:	b112      	cbz	r2, 8009ff2 <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009fec:	0053      	lsls	r3, r2, #1
 8009fee:	fbb0 f0f3 	udiv	r0, r0, r3
 8009ff2:	4b44      	ldr	r3, [pc, #272]	; (800a104 <HAL_SD_ConfigWideBusOperation+0x188>)
 8009ff4:	4298      	cmp	r0, r3
 8009ff6:	bf88      	it	hi
 8009ff8:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 8009ffa:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009ffc:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 8009ffe:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800a000:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800a002:	c903      	ldmia	r1, {r0, r1}
 800a004:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a008:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a00a:	6820      	ldr	r0, [r4, #0]
 800a00c:	f001 f92c 	bl	800b268 <SDMMC_Init>
 800a010:	e00a      	b.n	800a028 <HAL_SD_ConfigWideBusOperation+0xac>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a018:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a01a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d0c6      	beq.n	8009fae <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a020:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a022:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a024:	4a38      	ldr	r2, [pc, #224]	; (800a108 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a026:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	f001 f967 	bl	800b300 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a032:	b130      	cbz	r0, 800a042 <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a034:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a036:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a038:	4a33      	ldr	r2, [pc, #204]	; (800a108 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a03a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a03c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a03e:	4303      	orrs	r3, r0
 800a040:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800a042:	2301      	movs	r3, #1
}
 800a044:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800a046:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800a04a:	b009      	add	sp, #36	; 0x24
 800a04c:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a04e:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800a050:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a052:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a056:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800a058:	e7e6      	b.n	800a028 <HAL_SD_ConfigWideBusOperation+0xac>
  uint32_t scr[2U] = {0UL, 0UL};
 800a05a:	2200      	movs	r2, #0
 800a05c:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a05e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a060:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a064:	f001 f932 	bl	800b2cc <SDMMC_GetResponse>
 800a068:	0182      	lsls	r2, r0, #6
 800a06a:	d434      	bmi.n	800a0d6 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800a06c:	a902      	add	r1, sp, #8
 800a06e:	4620      	mov	r0, r4
 800a070:	f7ff fafa 	bl	8009668 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a074:	b960      	cbnz	r0, 800a090 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	03db      	lsls	r3, r3, #15
 800a07a:	d535      	bpl.n	800a0e8 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a07c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a07e:	6820      	ldr	r0, [r4, #0]
 800a080:	0409      	lsls	r1, r1, #16
 800a082:	f001 fec5 	bl	800be10 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a086:	b918      	cbnz	r0, 800a090 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a088:	4601      	mov	r1, r0
 800a08a:	6820      	ldr	r0, [r4, #0]
 800a08c:	f001 ffaa 	bl	800bfe4 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a092:	4303      	orrs	r3, r0
 800a094:	6363      	str	r3, [r4, #52]	; 0x34
 800a096:	e7c0      	b.n	800a01a <HAL_SD_ConfigWideBusOperation+0x9e>
  uint32_t scr[2U] = {0UL, 0UL};
 800a098:	2200      	movs	r2, #0
 800a09a:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a09c:	2100      	movs	r1, #0
 800a09e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a0a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a0a4:	f001 f912 	bl	800b2cc <SDMMC_GetResponse>
 800a0a8:	0180      	lsls	r0, r0, #6
 800a0aa:	d414      	bmi.n	800a0d6 <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800a0ac:	a902      	add	r1, sp, #8
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f7ff fada 	bl	8009668 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d1eb      	bne.n	800a090 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a0b8:	9b03      	ldr	r3, [sp, #12]
 800a0ba:	0359      	lsls	r1, r3, #13
 800a0bc:	d514      	bpl.n	800a0e8 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a0be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a0c0:	6820      	ldr	r0, [r4, #0]
 800a0c2:	0409      	lsls	r1, r1, #16
 800a0c4:	f001 fea4 	bl	800be10 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d1e1      	bne.n	800a090 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a0cc:	2102      	movs	r1, #2
 800a0ce:	6820      	ldr	r0, [r4, #0]
 800a0d0:	f001 ff88 	bl	800bfe4 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a0d4:	e7dc      	b.n	800a090 <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a0d6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a0da:	e7d9      	b.n	800a090 <HAL_SD_ConfigWideBusOperation+0x114>
        if (hsd->Init.ClockDiv == 0U)
 800a0dc:	b93a      	cbnz	r2, 800a0ee <HAL_SD_ConfigWideBusOperation+0x172>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a0de:	490b      	ldr	r1, [pc, #44]	; (800a10c <HAL_SD_ConfigWideBusOperation+0x190>)
 800a0e0:	4288      	cmp	r0, r1
 800a0e2:	d98a      	bls.n	8009ffa <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a0e4:	0e5a      	lsrs	r2, r3, #25
 800a0e6:	e788      	b.n	8009ffa <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a0e8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a0ec:	e7d0      	b.n	800a090 <HAL_SD_ConfigWideBusOperation+0x114>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a0ee:	0051      	lsls	r1, r2, #1
 800a0f0:	fbb0 f1f1 	udiv	r1, r0, r1
 800a0f4:	4805      	ldr	r0, [pc, #20]	; (800a10c <HAL_SD_ConfigWideBusOperation+0x190>)
 800a0f6:	4281      	cmp	r1, r0
 800a0f8:	f67f af7f 	bls.w	8009ffa <HAL_SD_ConfigWideBusOperation+0x7e>
 800a0fc:	e7f2      	b.n	800a0e4 <HAL_SD_ConfigWideBusOperation+0x168>
 800a0fe:	bf00      	nop
 800a100:	55e63b89 	.word	0x55e63b89
 800a104:	017d7840 	.word	0x017d7840
 800a108:	1fe00fff 	.word	0x1fe00fff
 800a10c:	02faf080 	.word	0x02faf080

0800a110 <HAL_SD_Init>:
{
 800a110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a112:	b087      	sub	sp, #28
  if (hsd == NULL)
 800a114:	2800      	cmp	r0, #0
 800a116:	d045      	beq.n	800a1a4 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
 800a118:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800a11c:	4604      	mov	r4, r0
 800a11e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a122:	2b00      	cmp	r3, #0
 800a124:	d042      	beq.n	800a1ac <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a126:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a128:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a12a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a12e:	f7ff fdd1 	bl	8009cd4 <HAL_SD_InitCard>
 800a132:	2800      	cmp	r0, #0
 800a134:	d136      	bne.n	800a1a4 <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800a136:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	d032      	beq.n	800a1a4 <HAL_SD_Init+0x94>
 800a13e:	a901      	add	r1, sp, #4
 800a140:	4620      	mov	r0, r4
 800a142:	f7ff f9cb 	bl	80094dc <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a146:	bb68      	cbnz	r0, 800a1a4 <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a148:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800a14a:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a14e:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a150:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800a154:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a156:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a158:	d02c      	beq.n	800a1b4 <HAL_SD_Init+0xa4>
 800a15a:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a15c:	68e1      	ldr	r1, [r4, #12]
 800a15e:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a160:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a162:	f7ff ff0b 	bl	8009f7c <HAL_SD_ConfigWideBusOperation>
 800a166:	4606      	mov	r6, r0
 800a168:	b9e0      	cbnz	r0, 800a1a4 <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
 800a16a:	f7f9 fe63 	bl	8003e34 <HAL_GetTick>
 800a16e:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a170:	e00c      	b.n	800a18c <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a172:	6820      	ldr	r0, [r4, #0]
 800a174:	4629      	mov	r1, r5
 800a176:	f001 f8a9 	bl	800b2cc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a17a:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a17e:	2804      	cmp	r0, #4
 800a180:	d01f      	beq.n	800a1c2 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a182:	f7f9 fe57 	bl	8003e34 <HAL_GetTick>
 800a186:	1bc3      	subs	r3, r0, r7
 800a188:	3301      	adds	r3, #1
 800a18a:	d020      	beq.n	800a1ce <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a18c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a18e:	6820      	ldr	r0, [r4, #0]
 800a190:	0409      	lsls	r1, r1, #16
 800a192:	f002 f95b 	bl	800c44c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a196:	4605      	mov	r5, r0
 800a198:	2800      	cmp	r0, #0
 800a19a:	d0ea      	beq.n	800a172 <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
 800a19c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a19e:	4303      	orrs	r3, r0
 800a1a0:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800a1a2:	e7ee      	b.n	800a182 <HAL_SD_Init+0x72>
    return HAL_ERROR;
 800a1a4:	2601      	movs	r6, #1
}
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	b007      	add	sp, #28
 800a1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800a1ac:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800a1ae:	f7f8 fe31 	bl	8002e14 <HAL_SD_MspInit>
 800a1b2:	e7b8      	b.n	800a126 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	bf0c      	ite	eq
 800a1b8:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800a1bc:	f44f 7300 	movne.w	r3, #512	; 0x200
 800a1c0:	e7cc      	b.n	800a15c <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800a1c2:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1c4:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a1c6:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800a1c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800a1cc:	e7eb      	b.n	800a1a6 <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a1ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800a1d2:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800a1d4:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a1d6:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a1d8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800a1dc:	e7e3      	b.n	800a1a6 <HAL_SD_Init+0x96>
 800a1de:	bf00      	nop

0800a1e0 <HAL_SD_GetCardState>:
{
 800a1e0:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1e2:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800a1e4:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a1e6:	6800      	ldr	r0, [r0, #0]
 800a1e8:	0409      	lsls	r1, r1, #16
 800a1ea:	f002 f92f 	bl	800c44c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	b120      	cbz	r0, 800a1fc <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800a1f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	430b      	orrs	r3, r1
 800a1f8:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a1fa:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a1fc:	6820      	ldr	r0, [r4, #0]
 800a1fe:	f001 f865 	bl	800b2cc <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a202:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800a206:	bd10      	pop	{r4, pc}

0800a208 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop

0800a20c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop

0800a210 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop

0800a214 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop

0800a218 <HAL_SD_IRQHandler>:
{
 800a218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a21a:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a21c:	6800      	ldr	r0, [r0, #0]
{
 800a21e:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800a220:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a222:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a224:	041b      	lsls	r3, r3, #16
 800a226:	d502      	bpl.n	800a22e <HAL_SD_IRQHandler+0x16>
 800a228:	072f      	lsls	r7, r5, #28
 800a22a:	f100 80b4 	bmi.w	800a396 <HAL_SD_IRQHandler+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a22e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a230:	05de      	lsls	r6, r3, #23
 800a232:	d529      	bpl.n	800a288 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a234:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a238:	4b91      	ldr	r3, [pc, #580]	; (800a480 <HAL_SD_IRQHandler+0x268>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a23a:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a23c:	6822      	ldr	r2, [r4, #0]
 800a23e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a240:	400b      	ands	r3, r1
 800a242:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a244:	6822      	ldr	r2, [r4, #0]
 800a246:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a24c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	68d3      	ldr	r3, [r2, #12]
 800a252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a256:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800a258:	f015 0308 	ands.w	r3, r5, #8
 800a25c:	d076      	beq.n	800a34c <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a25e:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a262:	f040 80d9 	bne.w	800a418 <HAL_SD_IRQHandler+0x200>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a266:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800a268:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a26a:	4986      	ldr	r1, [pc, #536]	; (800a484 <HAL_SD_IRQHandler+0x26c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a26c:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a26e:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800a270:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800a274:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a278:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a27a:	f000 80a0 	beq.w	800a3be <HAL_SD_IRQHandler+0x1a6>
        HAL_SD_RxCpltCallback(hsd);
 800a27e:	4620      	mov	r0, r4
 800a280:	f002 fa86 	bl	800c790 <HAL_SD_RxCpltCallback>
}
 800a284:	b003      	add	sp, #12
 800a286:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a288:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a28a:	045b      	lsls	r3, r3, #17
 800a28c:	d502      	bpl.n	800a294 <HAL_SD_IRQHandler+0x7c>
 800a28e:	072f      	lsls	r7, r5, #28
 800a290:	f100 809a 	bmi.w	800a3c8 <HAL_SD_IRQHandler+0x1b0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a294:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a296:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a29a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a29c:	d06c      	beq.n	800a378 <HAL_SD_IRQHandler+0x160>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a29e:	079e      	lsls	r6, r3, #30
 800a2a0:	d503      	bpl.n	800a2aa <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a2a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2a4:	f043 0302 	orr.w	r3, r3, #2
 800a2a8:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a2aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a2ac:	0719      	lsls	r1, r3, #28
 800a2ae:	d503      	bpl.n	800a2b8 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a2b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2b2:	f043 0308 	orr.w	r3, r3, #8
 800a2b6:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a2b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a2ba:	069a      	lsls	r2, r3, #26
 800a2bc:	d503      	bpl.n	800a2c6 <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a2be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2c0:	f043 0320 	orr.w	r3, r3, #32
 800a2c4:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a2c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a2c8:	06db      	lsls	r3, r3, #27
 800a2ca:	d503      	bpl.n	800a2d4 <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a2cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2ce:	f043 0310 	orr.w	r3, r3, #16
 800a2d2:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a2d4:	4b6b      	ldr	r3, [pc, #428]	; (800a484 <HAL_SD_IRQHandler+0x26c>)
 800a2d6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a2d8:	6822      	ldr	r2, [r4, #0]
 800a2da:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a2dc:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a2e0:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a2e2:	6822      	ldr	r2, [r4, #0]
 800a2e4:	68d3      	ldr	r3, [r2, #12]
 800a2e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ea:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a2ec:	6822      	ldr	r2, [r4, #0]
 800a2ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a2f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a2f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a2f6:	6822      	ldr	r2, [r4, #0]
 800a2f8:	68d3      	ldr	r3, [r2, #12]
 800a2fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2fe:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	f001 fb63 	bl	800b9cc <SDMMC_CmdStopTransfer>
 800a306:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a308:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a30a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a30e:	4318      	orrs	r0, r3
 800a310:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a312:	68d3      	ldr	r3, [r2, #12]
 800a314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a318:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a31e:	f015 0308 	ands.w	r3, r5, #8
 800a322:	f040 8087 	bne.w	800a434 <HAL_SD_IRQHandler+0x21c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a326:	062f      	lsls	r7, r5, #24
 800a328:	d5ac      	bpl.n	800a284 <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a32a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a32c:	2a00      	cmp	r2, #0
 800a32e:	d0a9      	beq.n	800a284 <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a330:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800a332:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800a334:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a336:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800a338:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a33c:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a33e:	6822      	ldr	r2, [r4, #0]
 800a340:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a342:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a346:	f7ff fbdf 	bl	8009b08 <HAL_SD_ErrorCallback>
 800a34a:	e79b      	b.n	800a284 <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a34c:	0629      	lsls	r1, r5, #24
 800a34e:	d599      	bpl.n	800a284 <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800a350:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a352:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800a356:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a358:	6822      	ldr	r2, [r4, #0]
 800a35a:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a35c:	6822      	ldr	r2, [r4, #0]
 800a35e:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a360:	d176      	bne.n	800a450 <HAL_SD_IRQHandler+0x238>
      hsd->State = HAL_SD_STATE_READY;
 800a362:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a364:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a366:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800a36a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a36e:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a370:	d17b      	bne.n	800a46a <HAL_SD_IRQHandler+0x252>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a372:	07aa      	lsls	r2, r5, #30
 800a374:	d086      	beq.n	800a284 <HAL_SD_IRQHandler+0x6c>
 800a376:	e782      	b.n	800a27e <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a378:	00de      	lsls	r6, r3, #3
 800a37a:	d583      	bpl.n	800a284 <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a37c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a380:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a382:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a384:	6823      	ldr	r3, [r4, #0]
 800a386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a388:	0759      	lsls	r1, r3, #29
 800a38a:	d45c      	bmi.n	800a446 <HAL_SD_IRQHandler+0x22e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a38c:	06aa      	lsls	r2, r5, #26
 800a38e:	d573      	bpl.n	800a478 <HAL_SD_IRQHandler+0x260>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a390:	f7ff ff40 	bl	800a214 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a394:	e776      	b.n	800a284 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800a396:	e9d4 5309 	ldrd	r5, r3, [r4, #36]	; 0x24
  if (hsd->RxXferSize >= 32U)
 800a39a:	2b1f      	cmp	r3, #31
 800a39c:	f67f af72 	bls.w	800a284 <HAL_SD_IRQHandler+0x6c>
 800a3a0:	f105 0620 	add.w	r6, r5, #32
 800a3a4:	e000      	b.n	800a3a8 <HAL_SD_IRQHandler+0x190>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a3a6:	6820      	ldr	r0, [r4, #0]
 800a3a8:	f000 ff7a 	bl	800b2a0 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800a3ac:	f845 0b04 	str.w	r0, [r5], #4
    for (count = 0U; count < 8U; count++)
 800a3b0:	42ae      	cmp	r6, r5
 800a3b2:	d1f8      	bne.n	800a3a6 <HAL_SD_IRQHandler+0x18e>
    hsd->RxXferSize -= 32U;
 800a3b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hsd->pRxBuffPtr = tmp;
 800a3b6:	6266      	str	r6, [r4, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a3b8:	3b20      	subs	r3, #32
 800a3ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3bc:	e762      	b.n	800a284 <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f002 f9e0 	bl	800c784 <HAL_SD_TxCpltCallback>
}
 800a3c4:	b003      	add	sp, #12
 800a3c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800a3c8:	6a23      	ldr	r3, [r4, #32]
 800a3ca:	2b1f      	cmp	r3, #31
 800a3cc:	f67f af5a 	bls.w	800a284 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800a3d0:	69e6      	ldr	r6, [r4, #28]
 800a3d2:	1d37      	adds	r7, r6, #4
 800a3d4:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800a3d8:	e000      	b.n	800a3dc <HAL_SD_IRQHandler+0x1c4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a3da:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800a3dc:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800a3e0:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a3e2:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800a3e4:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800a3e6:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800a3ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a3ee:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800a3f0:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800a3f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3f8:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800a3fa:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800a3fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a402:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a404:	f000 ff50 	bl	800b2a8 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800a408:	42af      	cmp	r7, r5
 800a40a:	d1e6      	bne.n	800a3da <HAL_SD_IRQHandler+0x1c2>
    hsd->TxXferSize -= 32U;
 800a40c:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800a40e:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800a410:	3b20      	subs	r3, #32
 800a412:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800a416:	e735      	b.n	800a284 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a418:	6820      	ldr	r0, [r4, #0]
 800a41a:	f001 fad7 	bl	800b9cc <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a41e:	4603      	mov	r3, r0
 800a420:	2800      	cmp	r0, #0
 800a422:	f43f af20 	beq.w	800a266 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800a426:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a428:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800a42a:	4313      	orrs	r3, r2
 800a42c:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a42e:	f7ff fb6b 	bl	8009b08 <HAL_SD_ErrorCallback>
 800a432:	e718      	b.n	800a266 <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800a434:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a436:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800a438:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800a43a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a43e:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a440:	f7ff fb62 	bl	8009b08 <HAL_SD_ErrorCallback>
 800a444:	e71e      	b.n	800a284 <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a446:	06ab      	lsls	r3, r5, #26
 800a448:	d513      	bpl.n	800a472 <HAL_SD_IRQHandler+0x25a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a44a:	f7ff fee1 	bl	800a210 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800a44e:	e719      	b.n	800a284 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a450:	6820      	ldr	r0, [r4, #0]
 800a452:	f001 fabb 	bl	800b9cc <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a456:	4603      	mov	r3, r0
 800a458:	2800      	cmp	r0, #0
 800a45a:	d082      	beq.n	800a362 <HAL_SD_IRQHandler+0x14a>
          hsd->ErrorCode |= errorstate;
 800a45c:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a45e:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800a460:	4313      	orrs	r3, r2
 800a462:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a464:	f7ff fb50 	bl	8009b08 <HAL_SD_ErrorCallback>
 800a468:	e77b      	b.n	800a362 <HAL_SD_IRQHandler+0x14a>
        HAL_SD_TxCpltCallback(hsd);
 800a46a:	4620      	mov	r0, r4
 800a46c:	f002 f98a 	bl	800c784 <HAL_SD_TxCpltCallback>
 800a470:	e77f      	b.n	800a372 <HAL_SD_IRQHandler+0x15a>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a472:	f7ff fec9 	bl	800a208 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a476:	e705      	b.n	800a284 <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a478:	f7ff fec8 	bl	800a20c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800a47c:	e702      	b.n	800a284 <HAL_SD_IRQHandler+0x6c>
 800a47e:	bf00      	nop
 800a480:	ffff3ec5 	.word	0xffff3ec5
 800a484:	18000f3a 	.word	0x18000f3a

0800a488 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a488:	b318      	cbz	r0, 800a4d2 <HAL_SDRAM_Init+0x4a>
{
 800a48a:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a48c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a490:	4604      	mov	r4, r0
 800a492:	460d      	mov	r5, r1
 800a494:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a498:	b1b3      	cbz	r3, 800a4c8 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a49a:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a49c:	2302      	movs	r3, #2
 800a49e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a4a2:	f851 0b04 	ldr.w	r0, [r1], #4
 800a4a6:	f000 fe2d 	bl	800b104 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a4aa:	6862      	ldr	r2, [r4, #4]
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	6820      	ldr	r0, [r4, #0]
 800a4b0:	f000 fe66 	bl	800b180 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a4b4:	4a08      	ldr	r2, [pc, #32]	; (800a4d8 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a4b6:	2101      	movs	r1, #1

  return HAL_OK;
 800a4b8:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a4ba:	6813      	ldr	r3, [r2, #0]
 800a4bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4c0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a4c2:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800a4c8:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800a4cc:	f7f6 fc1c 	bl	8000d08 <HAL_SDRAM_MspInit>
 800a4d0:	e7e3      	b.n	800a49a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800a4d2:	2001      	movs	r0, #1
}
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	52004000 	.word	0x52004000

0800a4dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a4dc:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a4de:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a4e2:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a4e4:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a4e6:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a4e8:	d004      	beq.n	800a4f4 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a4ea:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800a4ee:	2e01      	cmp	r6, #1
 800a4f0:	d001      	beq.n	800a4f6 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800a4f2:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a4f4:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a4fa:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a500:	f000 fe8c 	bl	800b21c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d003      	beq.n	800a512 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800a50a:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a50c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800a510:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a512:	2305      	movs	r3, #5
  return HAL_OK;
 800a514:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a516:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a51a:	bd70      	pop	{r4, r5, r6, pc}

0800a51c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a51c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a51e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a522:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a524:	2b02      	cmp	r3, #2
 800a526:	b2d8      	uxtb	r0, r3
 800a528:	d005      	beq.n	800a536 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a52a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a52e:	2b01      	cmp	r3, #1
 800a530:	b2dd      	uxtb	r5, r3
 800a532:	d001      	beq.n	800a538 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800a534:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a536:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a538:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a53a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a53c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a540:	f000 fe84 	bl	800b24c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800a544:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a546:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a54a:	bd38      	pop	{r3, r4, r5, pc}

0800a54c <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a54c:	6801      	ldr	r1, [r0, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a54e:	4b1b      	ldr	r3, [pc, #108]	; (800a5bc <SPI_AbortTransfer+0x70>)
  __HAL_SPI_DISABLE(hspi);
 800a550:	680a      	ldr	r2, [r1, #0]
 800a552:	f022 0201 	bic.w	r2, r2, #1
 800a556:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a558:	6802      	ldr	r2, [r0, #0]
 800a55a:	6911      	ldr	r1, [r2, #16]
 800a55c:	400b      	ands	r3, r1
 800a55e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a560:	6802      	ldr	r2, [r0, #0]
 800a562:	6993      	ldr	r3, [r2, #24]
 800a564:	f043 0308 	orr.w	r3, r3, #8
 800a568:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a56a:	6802      	ldr	r2, [r0, #0]
 800a56c:	6993      	ldr	r3, [r2, #24]
 800a56e:	f043 0310 	orr.w	r3, r3, #16
 800a572:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a574:	6802      	ldr	r2, [r0, #0]
 800a576:	6893      	ldr	r3, [r2, #8]
 800a578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a57c:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a57e:	6802      	ldr	r2, [r0, #0]
 800a580:	6993      	ldr	r3, [r2, #24]
 800a582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a586:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a588:	6802      	ldr	r2, [r0, #0]
 800a58a:	6993      	ldr	r3, [r2, #24]
 800a58c:	f043 0320 	orr.w	r3, r3, #32
 800a590:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a592:	6802      	ldr	r2, [r0, #0]
 800a594:	6993      	ldr	r3, [r2, #24]
 800a596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a59a:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800a59c:	2200      	movs	r2, #0
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a59e:	6801      	ldr	r1, [r0, #0]
 800a5a0:	698b      	ldr	r3, [r1, #24]
 800a5a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5a6:	618b      	str	r3, [r1, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a5a8:	6801      	ldr	r1, [r0, #0]
 800a5aa:	698b      	ldr	r3, [r1, #24]
 800a5ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a5b0:	618b      	str	r3, [r1, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800a5b2:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a5b6:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
}
 800a5ba:	4770      	bx	lr
 800a5bc:	fffffc90 	.word	0xfffffc90

0800a5c0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800a5c0:	6802      	ldr	r2, [r0, #0]
{
 800a5c2:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800a5c4:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a5c6:	6991      	ldr	r1, [r2, #24]
 800a5c8:	f041 0108 	orr.w	r1, r1, #8
 800a5cc:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a5ce:	6801      	ldr	r1, [r0, #0]
 800a5d0:	698a      	ldr	r2, [r1, #24]
 800a5d2:	f042 0210 	orr.w	r2, r2, #16
 800a5d6:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a5d8:	6801      	ldr	r1, [r0, #0]
 800a5da:	680a      	ldr	r2, [r1, #0]
 800a5dc:	f022 0201 	bic.w	r2, r2, #1
 800a5e0:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a5e2:	6801      	ldr	r1, [r0, #0]
 800a5e4:	4a27      	ldr	r2, [pc, #156]	; (800a684 <SPI_CloseTransfer+0xc4>)
 800a5e6:	690c      	ldr	r4, [r1, #16]
 800a5e8:	4022      	ands	r2, r4
 800a5ea:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a5ec:	6801      	ldr	r1, [r0, #0]
 800a5ee:	688a      	ldr	r2, [r1, #8]
 800a5f0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a5f4:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a5f6:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a5fa:	2a04      	cmp	r2, #4
 800a5fc:	d001      	beq.n	800a602 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a5fe:	069c      	lsls	r4, r3, #26
 800a600:	d433      	bmi.n	800a66a <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a602:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a606:	2a03      	cmp	r2, #3
 800a608:	d001      	beq.n	800a60e <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a60a:	0659      	lsls	r1, r3, #25
 800a60c:	d421      	bmi.n	800a652 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a60e:	059a      	lsls	r2, r3, #22
 800a610:	d50a      	bpl.n	800a628 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a612:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a616:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a618:	f042 0201 	orr.w	r2, r2, #1
 800a61c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a620:	698a      	ldr	r2, [r1, #24]
 800a622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a626:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a628:	05db      	lsls	r3, r3, #23
 800a62a:	d50a      	bpl.n	800a642 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a62c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a630:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a632:	f043 0308 	orr.w	r3, r3, #8
 800a636:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a63a:	6993      	ldr	r3, [r2, #24]
 800a63c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a640:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a642:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800a644:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800a648:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a64c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a650:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a652:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a656:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a658:	f042 0204 	orr.w	r2, r2, #4
 800a65c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a660:	698a      	ldr	r2, [r1, #24]
 800a662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a666:	618a      	str	r2, [r1, #24]
 800a668:	e7d1      	b.n	800a60e <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a66a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a66e:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a674:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a678:	698a      	ldr	r2, [r1, #24]
 800a67a:	f042 0220 	orr.w	r2, r2, #32
 800a67e:	618a      	str	r2, [r1, #24]
 800a680:	e7bf      	b.n	800a602 <SPI_CloseTransfer+0x42>
 800a682:	bf00      	nop
 800a684:	fffffc90 	.word	0xfffffc90

0800a688 <HAL_SPI_Init>:
  if (hspi == NULL)
 800a688:	2800      	cmp	r0, #0
 800a68a:	f000 80be 	beq.w	800a80a <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a68e:	4a62      	ldr	r2, [pc, #392]	; (800a818 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a690:	2100      	movs	r1, #0
{
 800a692:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a694:	6803      	ldr	r3, [r0, #0]
 800a696:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a698:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d015      	beq.n	800a6ca <HAL_SPI_Init+0x42>
 800a69e:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d011      	beq.n	800a6ca <HAL_SPI_Init+0x42>
 800a6a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	68c2      	ldr	r2, [r0, #12]
 800a6ae:	f000 80a5 	beq.w	800a7fc <HAL_SPI_Init+0x174>
 800a6b2:	2a0f      	cmp	r2, #15
 800a6b4:	d807      	bhi.n	800a6c6 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a6b6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a6b8:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a6ba:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a6bc:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800a6be:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6c2:	2a08      	cmp	r2, #8
 800a6c4:	d914      	bls.n	800a6f0 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800a6c6:	2001      	movs	r0, #1
}
 800a6c8:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800a6ca:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a6cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800a6ce:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6d0:	4851      	ldr	r0, [pc, #324]	; (800a818 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a6d2:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a6d4:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800a6d6:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a6da:	4950      	ldr	r1, [pc, #320]	; (800a81c <HAL_SPI_Init+0x194>)
 800a6dc:	428b      	cmp	r3, r1
 800a6de:	bf18      	it	ne
 800a6e0:	4283      	cmpne	r3, r0
 800a6e2:	d003      	beq.n	800a6ec <HAL_SPI_Init+0x64>
 800a6e4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a6e8:	428b      	cmp	r3, r1
 800a6ea:	d101      	bne.n	800a6f0 <HAL_SPI_Init+0x68>
 800a6ec:	2a10      	cmp	r2, #16
 800a6ee:	d8ea      	bhi.n	800a6c6 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6f0:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800a6f4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800a6f8:	2a00      	cmp	r2, #0
 800a6fa:	d078      	beq.n	800a7ee <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	f022 0201 	bic.w	r2, r2, #1
 800a708:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a70a:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a70c:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a70e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a712:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a714:	689a      	ldr	r2, [r3, #8]
 800a716:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a71a:	d058      	beq.n	800a7ce <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a71c:	0249      	lsls	r1, r1, #9
 800a71e:	d502      	bpl.n	800a726 <HAL_SPI_Init+0x9e>
 800a720:	68e1      	ldr	r1, [r4, #12]
 800a722:	2906      	cmp	r1, #6
 800a724:	d84c      	bhi.n	800a7c0 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a726:	6819      	ldr	r1, [r3, #0]
 800a728:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a72c:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a72e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a730:	69e3      	ldr	r3, [r4, #28]
 800a732:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a734:	432b      	orrs	r3, r5
 800a736:	6821      	ldr	r1, [r4, #0]
 800a738:	4303      	orrs	r3, r0
 800a73a:	68e0      	ldr	r0, [r4, #12]
 800a73c:	4303      	orrs	r3, r0
 800a73e:	4313      	orrs	r3, r2
 800a740:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a742:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a744:	69a0      	ldr	r0, [r4, #24]
 800a746:	6822      	ldr	r2, [r4, #0]
 800a748:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800a74c:	432b      	orrs	r3, r5
 800a74e:	430b      	orrs	r3, r1
 800a750:	6921      	ldr	r1, [r4, #16]
 800a752:	4303      	orrs	r3, r0
 800a754:	6960      	ldr	r0, [r4, #20]
 800a756:	430b      	orrs	r3, r1
 800a758:	6a21      	ldr	r1, [r4, #32]
 800a75a:	4303      	orrs	r3, r0
 800a75c:	6860      	ldr	r0, [r4, #4]
 800a75e:	430b      	orrs	r3, r1
 800a760:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a762:	4303      	orrs	r3, r0
 800a764:	68a0      	ldr	r0, [r4, #8]
 800a766:	430b      	orrs	r3, r1
 800a768:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a76a:	4303      	orrs	r3, r0
 800a76c:	430b      	orrs	r3, r1
 800a76e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a770:	430b      	orrs	r3, r1
 800a772:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a774:	6863      	ldr	r3, [r4, #4]
 800a776:	b96b      	cbnz	r3, 800a794 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a778:	6822      	ldr	r2, [r4, #0]
 800a77a:	6893      	ldr	r3, [r2, #8]
 800a77c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a784:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a786:	6822      	ldr	r2, [r4, #0]
 800a788:	6893      	ldr	r3, [r2, #8]
 800a78a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a78e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a792:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a794:	6822      	ldr	r2, [r4, #0]
 800a796:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a798:	f023 0301 	bic.w	r3, r3, #1
 800a79c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a79e:	6863      	ldr	r3, [r4, #4]
 800a7a0:	025b      	lsls	r3, r3, #9
 800a7a2:	d506      	bpl.n	800a7b2 <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a7a4:	6822      	ldr	r2, [r4, #0]
 800a7a6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a7a8:	68d3      	ldr	r3, [r2, #12]
 800a7aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7ae:	430b      	orrs	r3, r1
 800a7b0:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7b2:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800a7b4:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7b6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a7ba:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a7c0:	6819      	ldr	r1, [r3, #0]
 800a7c2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a7c4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a7c8:	4301      	orrs	r1, r0
 800a7ca:	6019      	str	r1, [r3, #0]
 800a7cc:	e7af      	b.n	800a72e <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a7ce:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a7d2:	d01c      	beq.n	800a80e <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a7d4:	2900      	cmp	r1, #0
 800a7d6:	d1a1      	bne.n	800a71c <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a7d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a7da:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a7de:	d1a2      	bne.n	800a726 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a7e0:	6819      	ldr	r1, [r3, #0]
 800a7e2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a7e6:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a7e8:	e9d4 3100 	ldrd	r3, r1, [r4]
 800a7ec:	e796      	b.n	800a71c <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800a7ee:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800a7f0:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a7f4:	f7f8 fbc8 	bl	8002f88 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	e77f      	b.n	800a6fc <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a7fc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800a7fe:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a800:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a802:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800a804:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a808:	e770      	b.n	800a6ec <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800a80a:	2001      	movs	r0, #1
}
 800a80c:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a80e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a810:	2900      	cmp	r1, #0
 800a812:	d0e5      	beq.n	800a7e0 <HAL_SPI_Init+0x158>
 800a814:	e784      	b.n	800a720 <HAL_SPI_Init+0x98>
 800a816:	bf00      	nop
 800a818:	40013000 	.word	0x40013000
 800a81c:	40003800 	.word	0x40003800

0800a820 <HAL_SPI_Receive_DMA>:
{
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800a822:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a826:	2b01      	cmp	r3, #1
 800a828:	f000 80a9 	beq.w	800a97e <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a82c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800a830:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800a832:	2201      	movs	r2, #1
 800a834:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a836:	b2de      	uxtb	r6, r3
 800a838:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800a83a:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800a83e:	f040 8093 	bne.w	800a968 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800a842:	2900      	cmp	r1, #0
 800a844:	f000 808b 	beq.w	800a95e <HAL_SPI_Receive_DMA+0x13e>
 800a848:	fab5 f385 	clz	r3, r5
 800a84c:	095b      	lsrs	r3, r3, #5
 800a84e:	2d00      	cmp	r5, #0
 800a850:	f000 8085 	beq.w	800a95e <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a854:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a856:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a858:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a85a:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800a85e:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a862:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800a866:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a868:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a86c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800a870:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a874:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800a878:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a87c:	d07a      	beq.n	800a974 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800a87e:	68d3      	ldr	r3, [r2, #12]
 800a880:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a888:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a88a:	68e3      	ldr	r3, [r4, #12]
 800a88c:	2b0f      	cmp	r3, #15
 800a88e:	d861      	bhi.n	800a954 <HAL_SPI_Receive_DMA+0x134>
 800a890:	2b07      	cmp	r3, #7
 800a892:	f200 8092 	bhi.w	800a9ba <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a896:	6822      	ldr	r2, [r4, #0]
 800a898:	6893      	ldr	r3, [r2, #8]
 800a89a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a89e:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a8a0:	68e3      	ldr	r3, [r4, #12]
 800a8a2:	2b07      	cmp	r3, #7
 800a8a4:	d86e      	bhi.n	800a984 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a8a6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a8a8:	699a      	ldr	r2, [r3, #24]
 800a8aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a8ae:	d107      	bne.n	800a8c0 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a8b0:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a8b4:	b292      	uxth	r2, r2
 800a8b6:	3201      	adds	r2, #1
 800a8b8:	0852      	lsrs	r2, r2, #1
 800a8ba:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a8be:	699a      	ldr	r2, [r3, #24]
 800a8c0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a8c4:	d106      	bne.n	800a8d4 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a8c6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a8ca:	b292      	uxth	r2, r2
 800a8cc:	3203      	adds	r2, #3
 800a8ce:	0892      	lsrs	r2, r2, #2
 800a8d0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a8d4:	4a3e      	ldr	r2, [pc, #248]	; (800a9d0 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800a8d6:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a8d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a8da:	4a3e      	ldr	r2, [pc, #248]	; (800a9d4 <HAL_SPI_Receive_DMA+0x1b4>)
 800a8dc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a8de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a8e0:	4a3d      	ldr	r2, [pc, #244]	; (800a9d8 <HAL_SPI_Receive_DMA+0x1b8>)
 800a8e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a8e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a8e6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a8e8:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800a8ea:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a8ee:	6821      	ldr	r1, [r4, #0]
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8f4:	3130      	adds	r1, #48	; 0x30
 800a8f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a8f8:	f7f9 fec2 	bl	8004680 <HAL_DMA_Start_IT>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d150      	bne.n	800a9a2 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a900:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a902:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a904:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a906:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a90c:	4b33      	ldr	r3, [pc, #204]	; (800a9dc <HAL_SPI_Receive_DMA+0x1bc>)
 800a90e:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a912:	bf18      	it	ne
 800a914:	432b      	orrne	r3, r5
 800a916:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a918:	6822      	ldr	r2, [r4, #0]
 800a91a:	6893      	ldr	r3, [r2, #8]
 800a91c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a920:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a922:	6822      	ldr	r2, [r4, #0]
 800a924:	6913      	ldr	r3, [r2, #16]
 800a926:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800a92a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800a92c:	6822      	ldr	r2, [r4, #0]
 800a92e:	6813      	ldr	r3, [r2, #0]
 800a930:	f043 0301 	orr.w	r3, r3, #1
 800a934:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a936:	6863      	ldr	r3, [r4, #4]
 800a938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a93c:	d104      	bne.n	800a948 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a93e:	6822      	ldr	r2, [r4, #0]
 800a940:	6813      	ldr	r3, [r2, #0]
 800a942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a946:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800a948:	2300      	movs	r3, #0
  return errorcode;
 800a94a:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800a94c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800a950:	4630      	mov	r0, r6
 800a952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a954:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a95c:	d09b      	beq.n	800a896 <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800a95e:	2300      	movs	r3, #0
 800a960:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800a964:	4630      	mov	r0, r6
 800a966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800a968:	2300      	movs	r3, #0
    return errorcode;
 800a96a:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800a96c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800a970:	4630      	mov	r0, r6
 800a972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800a974:	6813      	ldr	r3, [r2, #0]
 800a976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	e785      	b.n	800a88a <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800a97e:	2602      	movs	r6, #2
}
 800a980:	4630      	mov	r0, r6
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a984:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a986:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a988:	d8a4      	bhi.n	800a8d4 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a98a:	699a      	ldr	r2, [r3, #24]
 800a98c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a990:	d1a0      	bne.n	800a8d4 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a992:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a996:	b292      	uxth	r2, r2
 800a998:	3201      	adds	r2, #1
 800a99a:	0852      	lsrs	r2, r2, #1
 800a99c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800a9a0:	e798      	b.n	800a8d4 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a9a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a9a6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800a9a8:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a9ac:	f043 0310 	orr.w	r3, r3, #16
 800a9b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a9b4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800a9b8:	e7d4      	b.n	800a964 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a9ba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9c2:	f43f af68 	beq.w	800a896 <HAL_SPI_Receive_DMA+0x76>
 800a9c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9ca:	d1c8      	bne.n	800a95e <HAL_SPI_Receive_DMA+0x13e>
 800a9cc:	e763      	b.n	800a896 <HAL_SPI_Receive_DMA+0x76>
 800a9ce:	bf00      	nop
 800a9d0:	0800adb1 	.word	0x0800adb1
 800a9d4:	0800ad61 	.word	0x0800ad61
 800a9d8:	0800adcd 	.word	0x0800adcd
 800a9dc:	ffff0000 	.word	0xffff0000

0800a9e0 <HAL_SPI_TransmitReceive_DMA>:
{
 800a9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800a9e6:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	f000 809a 	beq.w	800ab24 <HAL_SPI_TransmitReceive_DMA+0x144>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800a9f8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	b2de      	uxtb	r6, r3
 800aa00:	d158      	bne.n	800aab4 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	bf18      	it	ne
 800aa06:	2a00      	cmpne	r2, #0
 800aa08:	d04e      	beq.n	800aaa8 <HAL_SPI_TransmitReceive_DMA+0xc8>
 800aa0a:	fab1 f381 	clz	r3, r1
 800aa0e:	095b      	lsrs	r3, r3, #5
 800aa10:	2900      	cmp	r1, #0
 800aa12:	d049      	beq.n	800aaa8 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800aa14:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800aa16:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa18:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 800aa1a:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800aa1c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 800aa20:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa24:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 800aa28:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 800aa2c:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 800aa30:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800aa34:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 800aa38:	68d3      	ldr	r3, [r2, #12]
 800aa3a:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800aa3e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800aa40:	6802      	ldr	r2, [r0, #0]
 800aa42:	6893      	ldr	r3, [r2, #8]
 800aa44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800aa48:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800aa4a:	68c3      	ldr	r3, [r0, #12]
 800aa4c:	2b0f      	cmp	r3, #15
 800aa4e:	d938      	bls.n	800aac2 <HAL_SPI_TransmitReceive_DMA+0xe2>
 800aa50:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800aa52:	699a      	ldr	r2, [r3, #24]
 800aa54:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800aa58:	d126      	bne.n	800aaa8 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800aa5a:	4a6c      	ldr	r2, [pc, #432]	; (800ac0c <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800aa5c:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800aa60:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800ac18 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800aa64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800aa66:	4a6a      	ldr	r2, [pc, #424]	; (800ac10 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800aa68:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aa6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800aa6c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aa6e:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800aa72:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aa74:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800aa78:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800aa7c:	6821      	ldr	r1, [r4, #0]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa82:	3130      	adds	r1, #48	; 0x30
 800aa84:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aa86:	f7f9 fdfb 	bl	8004680 <HAL_DMA_Start_IT>
 800aa8a:	4607      	mov	r7, r0
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d04d      	beq.n	800ab2c <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aa90:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800aa94:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800aa96:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aa9a:	f043 0310 	orr.w	r3, r3, #16
 800aa9e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800aaa2:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800aaa6:	e002      	b.n	800aaae <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800aaae:	4630      	mov	r0, r6
 800aab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 800aab4:	2300      	movs	r3, #0
    return errorcode;
 800aab6:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800aab8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800aabc:	4630      	mov	r0, r6
 800aabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800aac2:	2b07      	cmp	r3, #7
 800aac4:	d87f      	bhi.n	800abc6 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aac6:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800aac8:	6993      	ldr	r3, [r2, #24]
 800aaca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aace:	d107      	bne.n	800aae0 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800aad0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	3301      	adds	r3, #1
 800aad8:	085b      	lsrs	r3, r3, #1
 800aada:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800aade:	6993      	ldr	r3, [r2, #24]
 800aae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aae4:	d106      	bne.n	800aaf4 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800aae6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	3303      	adds	r3, #3
 800aaee:	089b      	lsrs	r3, r3, #2
 800aaf0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aaf4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aaf6:	699a      	ldr	r2, [r3, #24]
 800aaf8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800aafc:	d107      	bne.n	800ab0e <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800aafe:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ab02:	b292      	uxth	r2, r2
 800ab04:	3201      	adds	r2, #1
 800ab06:	0852      	lsrs	r2, r2, #1
 800ab08:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ab0c:	699a      	ldr	r2, [r3, #24]
 800ab0e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ab12:	d1a2      	bne.n	800aa5a <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ab14:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ab18:	b292      	uxth	r2, r2
 800ab1a:	3203      	adds	r2, #3
 800ab1c:	0892      	lsrs	r2, r2, #2
 800ab1e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ab22:	e79a      	b.n	800aa5a <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 800ab24:	2602      	movs	r6, #2
}
 800ab26:	4630      	mov	r0, r6
 800ab28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ab2c:	6822      	ldr	r2, [r4, #0]
 800ab2e:	6893      	ldr	r3, [r2, #8]
 800ab30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab34:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ab36:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ab38:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ab3a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ab3c:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ab3e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ab40:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800ab42:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ab44:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 800ab48:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ab4c:	6822      	ldr	r2, [r4, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ab52:	3220      	adds	r2, #32
 800ab54:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ab56:	f7f9 fd93 	bl	8004680 <HAL_DMA_Start_IT>
 800ab5a:	bb40      	cbnz	r0, 800abae <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ab5c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ab5e:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ab60:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ab62:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ab64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ab68:	4b2a      	ldr	r3, [pc, #168]	; (800ac14 <HAL_SPI_TransmitReceive_DMA+0x234>)
 800ab6a:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ab6e:	bf18      	it	ne
 800ab70:	432b      	orrne	r3, r5
 800ab72:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ab74:	6822      	ldr	r2, [r4, #0]
 800ab76:	6893      	ldr	r3, [r2, #8]
 800ab78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab7c:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800ab7e:	6822      	ldr	r2, [r4, #0]
 800ab80:	6913      	ldr	r3, [r2, #16]
 800ab82:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800ab86:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	6813      	ldr	r3, [r2, #0]
 800ab8c:	f043 0301 	orr.w	r3, r3, #1
 800ab90:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab92:	6863      	ldr	r3, [r4, #4]
 800ab94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab98:	d104      	bne.n	800aba4 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ab9a:	6822      	ldr	r2, [r4, #0]
 800ab9c:	6813      	ldr	r3, [r2, #0]
 800ab9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aba2:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800aba4:	2300      	movs	r3, #0
  return errorcode;
 800aba6:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800aba8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800abac:	e77f      	b.n	800aaae <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abae:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800abb2:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800abb4:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abb8:	f043 0310 	orr.w	r3, r3, #16
 800abbc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800abc0:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800abc4:	e773      	b.n	800aaae <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800abc6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800abce:	d003      	beq.n	800abd8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800abd0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800abd4:	f47f af68 	bne.w	800aaa8 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800abd8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800abda:	6989      	ldr	r1, [r1, #24]
 800abdc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800abe0:	d107      	bne.n	800abf2 <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800abe2:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800abe6:	b292      	uxth	r2, r2
 800abe8:	3201      	adds	r2, #1
 800abea:	0852      	lsrs	r2, r2, #1
 800abec:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800abf0:	699a      	ldr	r2, [r3, #24]
 800abf2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800abf6:	f47f af30 	bne.w	800aa5a <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800abfa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800abfe:	b292      	uxth	r2, r2
 800ac00:	3201      	adds	r2, #1
 800ac02:	0852      	lsrs	r2, r2, #1
 800ac04:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ac08:	e727      	b.n	800aa5a <HAL_SPI_TransmitReceive_DMA+0x7a>
 800ac0a:	bf00      	nop
 800ac0c:	0800adbd 	.word	0x0800adbd
 800ac10:	0800ad89 	.word	0x0800ad89
 800ac14:	ffff0000 	.word	0xffff0000
 800ac18:	0800adcd 	.word	0x0800adcd

0800ac1c <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
 800ac1c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	f000 8095 	beq.w	800ad50 <HAL_SPI_Abort+0x134>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ac26:	4b4b      	ldr	r3, [pc, #300]	; (800ad54 <HAL_SPI_Abort+0x138>)
 800ac28:	2164      	movs	r1, #100	; 0x64
 800ac2a:	4a4b      	ldr	r2, [pc, #300]	; (800ad58 <HAL_SPI_Abort+0x13c>)
{
 800ac2c:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800ac32:	2001      	movs	r0, #1
{
 800ac34:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ac36:	fba2 2303 	umull	r2, r3, r2, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800ac3a:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
 800ac3c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
 800ac40:	2007      	movs	r0, #7
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ac42:	0a5b      	lsrs	r3, r3, #9
  hspi->State = HAL_SPI_STATE_ABORT;
 800ac44:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800ac48:	fb01 f303 	mul.w	r3, r1, r3
 800ac4c:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800ac4e:	6813      	ldr	r3, [r2, #0]
 800ac50:	0598      	lsls	r0, r3, #22
 800ac52:	d53e      	bpl.n	800acd2 <HAL_SPI_Abort+0xb6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ac54:	6913      	ldr	r3, [r2, #16]
 800ac56:	f023 0308 	bic.w	r3, r3, #8
 800ac5a:	6113      	str	r3, [r2, #16]
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800ac5c:	6822      	ldr	r2, [r4, #0]
 800ac5e:	e002      	b.n	800ac66 <HAL_SPI_Abort+0x4a>
 800ac60:	6913      	ldr	r3, [r2, #16]
 800ac62:	0719      	lsls	r1, r3, #28
 800ac64:	d50b      	bpl.n	800ac7e <HAL_SPI_Abort+0x62>
      count--;
 800ac66:	9b01      	ldr	r3, [sp, #4]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800ac6c:	9b01      	ldr	r3, [sp, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d1f6      	bne.n	800ac60 <HAL_SPI_Abort+0x44>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ac72:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ac76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac7a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800ac7e:	6813      	ldr	r3, [r2, #0]
 800ac80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac84:	6013      	str	r3, [r2, #0]
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800ac86:	6822      	ldr	r2, [r4, #0]
 800ac88:	e002      	b.n	800ac90 <HAL_SPI_Abort+0x74>
 800ac8a:	6813      	ldr	r3, [r2, #0]
 800ac8c:	059b      	lsls	r3, r3, #22
 800ac8e:	d50b      	bpl.n	800aca8 <HAL_SPI_Abort+0x8c>
      count--;
 800ac90:	9b01      	ldr	r3, [sp, #4]
 800ac92:	3b01      	subs	r3, #1
 800ac94:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800ac96:	9b01      	ldr	r3, [sp, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1f6      	bne.n	800ac8a <HAL_SPI_Abort+0x6e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ac9c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aca8:	6993      	ldr	r3, [r2, #24]
 800acaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800acae:	6193      	str	r3, [r2, #24]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800acb0:	6822      	ldr	r2, [r4, #0]
 800acb2:	e002      	b.n	800acba <HAL_SPI_Abort+0x9e>
 800acb4:	6953      	ldr	r3, [r2, #20]
 800acb6:	0518      	lsls	r0, r3, #20
 800acb8:	d50b      	bpl.n	800acd2 <HAL_SPI_Abort+0xb6>
      count--;
 800acba:	9b01      	ldr	r3, [sp, #4]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800acc0:	9b01      	ldr	r3, [sp, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1f6      	bne.n	800acb4 <HAL_SPI_Abort+0x98>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800acc6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800acca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800acd2:	6893      	ldr	r3, [r2, #8]
 800acd4:	0419      	lsls	r1, r3, #16
 800acd6:	d508      	bpl.n	800acea <HAL_SPI_Abort+0xce>
    if (hspi->hdmatx != NULL)
 800acd8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800acda:	b133      	cbz	r3, 800acea <HAL_SPI_Abort+0xce>
      hspi->hdmatx->XferAbortCallback = NULL;
 800acdc:	2200      	movs	r2, #0
 800acde:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800ace0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ace2:	f7f9 ff99 	bl	8004c18 <HAL_DMA_Abort>
 800ace6:	bb00      	cbnz	r0, 800ad2a <HAL_SPI_Abort+0x10e>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800ace8:	6822      	ldr	r2, [r4, #0]
 800acea:	6893      	ldr	r3, [r2, #8]
 800acec:	045b      	lsls	r3, r3, #17
 800acee:	d507      	bpl.n	800ad00 <HAL_SPI_Abort+0xe4>
    if (hspi->hdmarx != NULL)
 800acf0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800acf2:	b12b      	cbz	r3, 800ad00 <HAL_SPI_Abort+0xe4>
      hspi->hdmarx->XferAbortCallback = NULL;
 800acf4:	2200      	movs	r2, #0
 800acf6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800acf8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800acfa:	f7f9 ff8d 	bl	8004c18 <HAL_DMA_Abort>
 800acfe:	b9f0      	cbnz	r0, 800ad3e <HAL_SPI_Abort+0x122>
  SPI_AbortTransfer(hspi);
 800ad00:	4620      	mov	r0, r4
 800ad02:	f7ff fc23 	bl	800a54c <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800ad06:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ad0a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800ad0e:	d10a      	bne.n	800ad26 <HAL_SPI_Abort+0x10a>
  errorcode = HAL_OK;
 800ad10:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad12:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800ad16:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 800ad18:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 800ad1a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800ad1e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800ad22:	b002      	add	sp, #8
 800ad24:	bd10      	pop	{r4, pc}
    errorcode = HAL_ERROR;
 800ad26:	2001      	movs	r0, #1
 800ad28:	e7f5      	b.n	800ad16 <HAL_SPI_Abort+0xfa>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ad2a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ad2c:	f7fa fef8 	bl	8005b20 <HAL_DMA_GetError>
 800ad30:	2820      	cmp	r0, #32
 800ad32:	d1d9      	bne.n	800ace8 <HAL_SPI_Abort+0xcc>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ad34:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800ad36:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ad38:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ad3c:	e7d5      	b.n	800acea <HAL_SPI_Abort+0xce>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ad3e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ad40:	f7fa feee 	bl	8005b20 <HAL_DMA_GetError>
 800ad44:	2820      	cmp	r0, #32
 800ad46:	d1db      	bne.n	800ad00 <HAL_SPI_Abort+0xe4>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ad48:	2340      	movs	r3, #64	; 0x40
 800ad4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ad4e:	e7d7      	b.n	800ad00 <HAL_SPI_Abort+0xe4>
  __HAL_LOCK(hspi);
 800ad50:	2002      	movs	r0, #2
}
 800ad52:	4770      	bx	lr
 800ad54:	20000754 	.word	0x20000754
 800ad58:	057619f1 	.word	0x057619f1

0800ad5c <HAL_SPI_TxCpltCallback>:
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop

0800ad60 <SPI_DMAReceiveCplt>:
{
 800ad60:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad62:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ad64:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ad68:	2b07      	cmp	r3, #7
 800ad6a:	d009      	beq.n	800ad80 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ad6c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800ad6e:	69db      	ldr	r3, [r3, #28]
 800ad70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad74:	d005      	beq.n	800ad82 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ad76:	6802      	ldr	r2, [r0, #0]
 800ad78:	6913      	ldr	r3, [r2, #16]
 800ad7a:	f043 0308 	orr.w	r3, r3, #8
 800ad7e:	6113      	str	r3, [r2, #16]
}
 800ad80:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800ad82:	f010 fb05 	bl	801b390 <__HAL_SPI_RxCpltCallback_veneer>
}
 800ad86:	bd08      	pop	{r3, pc}

0800ad88 <SPI_DMATransmitReceiveCplt>:
{
 800ad88:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad8a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ad8c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ad90:	2b07      	cmp	r3, #7
 800ad92:	d009      	beq.n	800ada8 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ad94:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9c:	d005      	beq.n	800adaa <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ad9e:	6802      	ldr	r2, [r0, #0]
 800ada0:	6913      	ldr	r3, [r2, #16]
 800ada2:	f043 0308 	orr.w	r3, r3, #8
 800ada6:	6113      	str	r3, [r2, #16]
}
 800ada8:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800adaa:	f010 fad5 	bl	801b358 <__HAL_SPI_TxRxCpltCallback_veneer>
}
 800adae:	bd08      	pop	{r3, pc}

0800adb0 <SPI_DMAHalfReceiveCplt>:
{
 800adb0:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800adb2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800adb4:	f010 fac8 	bl	801b348 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
 800adb8:	bd08      	pop	{r3, pc}
 800adba:	bf00      	nop

0800adbc <SPI_DMAHalfTransmitReceiveCplt>:
{
 800adbc:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800adbe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800adc0:	f010 fad2 	bl	801b368 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
 800adc4:	bd08      	pop	{r3, pc}
 800adc6:	bf00      	nop

0800adc8 <HAL_SPI_ErrorCallback>:
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop

0800adcc <SPI_DMAError>:
{
 800adcc:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800adce:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800add0:	f7fa fea6 	bl	8005b20 <HAL_DMA_GetError>
 800add4:	2802      	cmp	r0, #2
 800add6:	d100      	bne.n	800adda <SPI_DMAError+0xe>
}
 800add8:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800adda:	6822      	ldr	r2, [r4, #0]
 800addc:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800adde:	6991      	ldr	r1, [r2, #24]
 800ade0:	f041 0108 	orr.w	r1, r1, #8
 800ade4:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ade6:	6821      	ldr	r1, [r4, #0]
 800ade8:	698a      	ldr	r2, [r1, #24]
 800adea:	f042 0210 	orr.w	r2, r2, #16
 800adee:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800adf0:	6821      	ldr	r1, [r4, #0]
 800adf2:	680a      	ldr	r2, [r1, #0]
 800adf4:	f022 0201 	bic.w	r2, r2, #1
 800adf8:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800adfa:	6821      	ldr	r1, [r4, #0]
 800adfc:	4a2c      	ldr	r2, [pc, #176]	; (800aeb0 <SPI_DMAError+0xe4>)
 800adfe:	6908      	ldr	r0, [r1, #16]
 800ae00:	4002      	ands	r2, r0
 800ae02:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ae04:	6821      	ldr	r1, [r4, #0]
 800ae06:	688a      	ldr	r2, [r1, #8]
 800ae08:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ae0c:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae0e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800ae12:	2a04      	cmp	r2, #4
 800ae14:	d001      	beq.n	800ae1a <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ae16:	0698      	lsls	r0, r3, #26
 800ae18:	d43d      	bmi.n	800ae96 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ae1a:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800ae1e:	2a03      	cmp	r2, #3
 800ae20:	d001      	beq.n	800ae26 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ae22:	0659      	lsls	r1, r3, #25
 800ae24:	d42b      	bmi.n	800ae7e <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ae26:	059a      	lsls	r2, r3, #22
 800ae28:	d50a      	bpl.n	800ae40 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae2a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae2e:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae30:	f042 0201 	orr.w	r2, r2, #1
 800ae34:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae38:	698a      	ldr	r2, [r1, #24]
 800ae3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae3e:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ae40:	05db      	lsls	r3, r3, #23
 800ae42:	d50a      	bpl.n	800ae5a <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae44:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae48:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae4a:	f043 0308 	orr.w	r3, r3, #8
 800ae4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae52:	6993      	ldr	r3, [r2, #24]
 800ae54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae58:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800ae5a:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800ae5c:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800ae5e:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800ae60:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ae64:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae68:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ae6c:	f043 0310 	orr.w	r3, r3, #16
 800ae70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ae74:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800ae78:	f7ff ffa6 	bl	800adc8 <HAL_SPI_ErrorCallback>
}
 800ae7c:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae7e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae82:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae84:	f042 0204 	orr.w	r2, r2, #4
 800ae88:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae8c:	698a      	ldr	r2, [r1, #24]
 800ae8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae92:	618a      	str	r2, [r1, #24]
 800ae94:	e7c7      	b.n	800ae26 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ae96:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ae9a:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ae9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aea0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aea4:	698a      	ldr	r2, [r1, #24]
 800aea6:	f042 0220 	orr.w	r2, r2, #32
 800aeaa:	618a      	str	r2, [r1, #24]
 800aeac:	e7b5      	b.n	800ae1a <SPI_DMAError+0x4e>
 800aeae:	bf00      	nop
 800aeb0:	fffffc90 	.word	0xfffffc90

0800aeb4 <SPI_DMAAbortOnError>:
{
 800aeb4:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800aeb6:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aeb8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800aec0:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800aec4:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800aec8:	f7ff ff7e 	bl	800adc8 <HAL_SPI_ErrorCallback>
}
 800aecc:	bd08      	pop	{r3, pc}
 800aece:	bf00      	nop

0800aed0 <HAL_SPI_SuspendCallback>:
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop

0800aed4 <HAL_SPI_IRQHandler>:
{
 800aed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800aed8:	6802      	ldr	r2, [r0, #0]
{
 800aeda:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800aedc:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800aede:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800aee0:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800aee2:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800aee6:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800aeea:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800aeec:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800aeee:	d502      	bpl.n	800aef6 <HAL_SPI_IRQHandler+0x22>
 800aef0:	0709      	lsls	r1, r1, #28
 800aef2:	f100 80e1 	bmi.w	800b0b8 <HAL_SPI_IRQHandler+0x1e4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800aef6:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d044      	beq.n	800af88 <HAL_SPI_IRQHandler+0xb4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800aefe:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800af02:	2b01      	cmp	r3, #1
 800af04:	d04a      	beq.n	800af9c <HAL_SPI_IRQHandler+0xc8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800af06:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	f000 80ea 	beq.w	800b0e4 <HAL_SPI_IRQHandler+0x210>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800af10:	072b      	lsls	r3, r5, #28
 800af12:	d563      	bpl.n	800afdc <HAL_SPI_IRQHandler+0x108>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800af14:	6993      	ldr	r3, [r2, #24]
 800af16:	f043 0308 	orr.w	r3, r3, #8
 800af1a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800af1c:	6821      	ldr	r1, [r4, #0]
 800af1e:	698b      	ldr	r3, [r1, #24]
 800af20:	f043 0310 	orr.w	r3, r3, #16
 800af24:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800af26:	6821      	ldr	r1, [r4, #0]
 800af28:	698b      	ldr	r3, [r1, #24]
 800af2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800af2e:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800af30:	6821      	ldr	r1, [r4, #0]
 800af32:	690b      	ldr	r3, [r1, #16]
 800af34:	f023 0308 	bic.w	r3, r3, #8
 800af38:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800af42:	d135      	bne.n	800afb0 <HAL_SPI_IRQHandler+0xdc>
      while (hspi->RxXferCount != 0UL)
 800af44:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800af48:	b29b      	uxth	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d030      	beq.n	800afb0 <HAL_SPI_IRQHandler+0xdc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800af4e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800af50:	e00f      	b.n	800af72 <HAL_SPI_IRQHandler+0x9e>
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800af58:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800af5a:	3104      	adds	r1, #4
        hspi->RxXferCount--;
 800af5c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800af60:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800af62:	3b01      	subs	r3, #1
 800af64:	b29b      	uxth	r3, r3
 800af66:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800af6a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800af6e:	b29b      	uxth	r3, r3
 800af70:	b1f3      	cbz	r3, 800afb0 <HAL_SPI_IRQHandler+0xdc>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800af72:	68e3      	ldr	r3, [r4, #12]
 800af74:	2b0f      	cmp	r3, #15
 800af76:	d8ec      	bhi.n	800af52 <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af78:	2b07      	cmp	r3, #7
 800af7a:	f240 80ac 	bls.w	800b0d6 <HAL_SPI_IRQHandler+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800af7e:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800af80:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800af82:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800af84:	3102      	adds	r1, #2
 800af86:	e7e9      	b.n	800af5c <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800af88:	4620      	mov	r0, r4
 800af8a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800af8c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800af8e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800af90:	4620      	mov	r0, r4
 800af92:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800af94:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d102      	bne.n	800afa2 <HAL_SPI_IRQHandler+0xce>
    hspi->RxISR(hspi);
 800af9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800af9e:	4620      	mov	r0, r4
 800afa0:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800afa2:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800afa6:	2d02      	cmp	r5, #2
 800afa8:	f000 809c 	beq.w	800b0e4 <HAL_SPI_IRQHandler+0x210>
}
 800afac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800afb0:	4620      	mov	r0, r4
 800afb2:	f7ff fb05 	bl	800a5c0 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800afb6:	2301      	movs	r3, #1
 800afb8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afbc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f040 8085 	bne.w	800b0d0 <HAL_SPI_IRQHandler+0x1fc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800afc6:	2e05      	cmp	r6, #5
 800afc8:	f000 8091 	beq.w	800b0ee <HAL_SPI_IRQHandler+0x21a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800afcc:	2e04      	cmp	r6, #4
 800afce:	f000 8091 	beq.w	800b0f4 <HAL_SPI_IRQHandler+0x220>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800afd2:	2e03      	cmp	r6, #3
 800afd4:	d1ea      	bne.n	800afac <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_TxCpltCallback(hspi);
 800afd6:	f7ff fec1 	bl	800ad5c <HAL_SPI_TxCpltCallback>
 800afda:	e7e7      	b.n	800afac <HAL_SPI_IRQHandler+0xd8>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800afdc:	f415 7f58 	tst.w	r5, #864	; 0x360
 800afe0:	d0e4      	beq.n	800afac <HAL_SPI_IRQHandler+0xd8>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800afe2:	0668      	lsls	r0, r5, #25
 800afe4:	d509      	bpl.n	800affa <HAL_SPI_IRQHandler+0x126>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800afe6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800afea:	f043 0304 	orr.w	r3, r3, #4
 800afee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aff2:	6993      	ldr	r3, [r2, #24]
 800aff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800affa:	05a9      	lsls	r1, r5, #22
 800affc:	d50a      	bpl.n	800b014 <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800affe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b002:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b004:	f043 0301 	orr.w	r3, r3, #1
 800b008:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b00c:	6993      	ldr	r3, [r2, #24]
 800b00e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b012:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b014:	05ea      	lsls	r2, r5, #23
 800b016:	d50a      	bpl.n	800b02e <HAL_SPI_IRQHandler+0x15a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b018:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b01c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b01e:	f043 0308 	orr.w	r3, r3, #8
 800b022:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b026:	6993      	ldr	r3, [r2, #24]
 800b028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b02c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b02e:	06ab      	lsls	r3, r5, #26
 800b030:	d50a      	bpl.n	800b048 <HAL_SPI_IRQHandler+0x174>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b032:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b036:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b040:	6993      	ldr	r3, [r2, #24]
 800b042:	f043 0320 	orr.w	r3, r3, #32
 800b046:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b048:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d0ad      	beq.n	800afac <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE(hspi);
 800b050:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b052:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b056:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b058:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b05c:	f023 0301 	bic.w	r3, r3, #1
 800b060:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b062:	6822      	ldr	r2, [r4, #0]
 800b064:	4b25      	ldr	r3, [pc, #148]	; (800b0fc <HAL_SPI_IRQHandler+0x228>)
 800b066:	6911      	ldr	r1, [r2, #16]
 800b068:	ea03 0301 	and.w	r3, r3, r1
 800b06c:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b06e:	d12b      	bne.n	800b0c8 <HAL_SPI_IRQHandler+0x1f4>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b070:	6822      	ldr	r2, [r4, #0]
 800b072:	6893      	ldr	r3, [r2, #8]
 800b074:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b078:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800b07a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b07c:	b15b      	cbz	r3, 800b096 <HAL_SPI_IRQHandler+0x1c2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b07e:	4a20      	ldr	r2, [pc, #128]	; (800b100 <HAL_SPI_IRQHandler+0x22c>)
 800b080:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b082:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b084:	f7f9 ffde 	bl	8005044 <HAL_DMA_Abort_IT>
 800b088:	b128      	cbz	r0, 800b096 <HAL_SPI_IRQHandler+0x1c2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b08a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b092:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b096:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d087      	beq.n	800afac <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b09c:	4a18      	ldr	r2, [pc, #96]	; (800b100 <HAL_SPI_IRQHandler+0x22c>)
 800b09e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b0a0:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b0a2:	f7f9 ffcf 	bl	8005044 <HAL_DMA_Abort_IT>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d080      	beq.n	800afac <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b0aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b0ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0b2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b0b6:	e779      	b.n	800afac <HAL_SPI_IRQHandler+0xd8>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b0b8:	6993      	ldr	r3, [r2, #24]
 800b0ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b0be:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800b0c0:	f7ff ff06 	bl	800aed0 <HAL_SPI_SuspendCallback>
}
 800b0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800b0c8:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800b0ca:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800b0cc:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b0d0:	f7ff fe7a 	bl	800adc8 <HAL_SPI_ErrorCallback>
 800b0d4:	e76a      	b.n	800afac <HAL_SPI_IRQHandler+0xd8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0dc:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0de:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b0e0:	3101      	adds	r1, #1
 800b0e2:	e73b      	b.n	800af5c <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800b0e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b0e6:	4620      	mov	r0, r4
}
 800b0e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800b0ec:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800b0ee:	f010 f933 	bl	801b358 <__HAL_SPI_TxRxCpltCallback_veneer>
 800b0f2:	e75b      	b.n	800afac <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_RxCpltCallback(hspi);
 800b0f4:	f010 f94c 	bl	801b390 <__HAL_SPI_RxCpltCallback_veneer>
 800b0f8:	e758      	b.n	800afac <HAL_SPI_IRQHandler+0xd8>
 800b0fa:	bf00      	nop
 800b0fc:	fffffc94 	.word	0xfffffc94
 800b100:	0800aeb5 	.word	0x0800aeb5

0800b104 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b104:	680b      	ldr	r3, [r1, #0]
{
 800b106:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b108:	b9d3      	cbnz	r3, 800b140 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b10a:	6804      	ldr	r4, [r0, #0]
 800b10c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b110:	684a      	ldr	r2, [r1, #4]
 800b112:	4023      	ands	r3, r4
 800b114:	4313      	orrs	r3, r2
 800b116:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800b11a:	4323      	orrs	r3, r4
 800b11c:	4313      	orrs	r3, r2
 800b11e:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800b122:	4323      	orrs	r3, r4
 800b124:	4313      	orrs	r3, r2
 800b126:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800b12a:	4323      	orrs	r3, r4
 800b12c:	4313      	orrs	r3, r2
 800b12e:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800b132:	4323      	orrs	r3, r4
 800b134:	4313      	orrs	r3, r2
 800b136:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b138:	2000      	movs	r0, #0
 800b13a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b13e:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b140:	6802      	ldr	r2, [r0, #0]
 800b142:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800b146:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b14a:	4322      	orrs	r2, r4
 800b14c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800b14e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b150:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b152:	4322      	orrs	r2, r4
 800b154:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b156:	6842      	ldr	r2, [r0, #4]
 800b158:	4013      	ands	r3, r2
 800b15a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800b15e:	4323      	orrs	r3, r4
 800b160:	4313      	orrs	r3, r2
 800b162:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800b166:	4323      	orrs	r3, r4
 800b168:	4313      	orrs	r3, r2
 800b16a:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800b16e:	4323      	orrs	r3, r4
 800b170:	4313      	orrs	r3, r2
 800b172:	6043      	str	r3, [r0, #4]
}
 800b174:	2000      	movs	r0, #0
 800b176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	ffff8000 	.word	0xffff8000

0800b180 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b180:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b182:	bb0a      	cbnz	r2, 800b1c8 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b184:	6883      	ldr	r3, [r0, #8]
 800b186:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b18a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b18e:	3c01      	subs	r4, #1
 800b190:	3a01      	subs	r2, #1
 800b192:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b196:	4313      	orrs	r3, r2
 800b198:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800b19c:	3c01      	subs	r4, #1
 800b19e:	3a01      	subs	r2, #1
 800b1a0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b1a4:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800b1a8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b1ac:	698a      	ldr	r2, [r1, #24]
 800b1ae:	3d01      	subs	r5, #1
 800b1b0:	1e61      	subs	r1, r4, #1
 800b1b2:	3a01      	subs	r2, #1
 800b1b4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800b1b8:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800b1bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b1c0:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	bc30      	pop	{r4, r5}
 800b1c6:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b1c8:	6885      	ldr	r5, [r0, #8]
 800b1ca:	68ca      	ldr	r2, [r1, #12]
 800b1cc:	4b12      	ldr	r3, [pc, #72]	; (800b218 <FMC_SDRAM_Timing_Init+0x98>)
 800b1ce:	1e54      	subs	r4, r2, #1
 800b1d0:	694a      	ldr	r2, [r1, #20]
 800b1d2:	402b      	ands	r3, r5
 800b1d4:	3a01      	subs	r2, #1
 800b1d6:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800b1da:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b1de:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b1e0:	68c3      	ldr	r3, [r0, #12]
 800b1e2:	688d      	ldr	r5, [r1, #8]
 800b1e4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b1e8:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800b1ec:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b1f0:	3c01      	subs	r4, #1
 800b1f2:	3a01      	subs	r2, #1
 800b1f4:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b1f8:	690c      	ldr	r4, [r1, #16]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	698a      	ldr	r2, [r1, #24]
 800b1fe:	1e61      	subs	r1, r4, #1
 800b200:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800b204:	3a01      	subs	r2, #1
 800b206:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b20a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b20e:	60c3      	str	r3, [r0, #12]
}
 800b210:	2000      	movs	r0, #0
 800b212:	bc30      	pop	{r4, r5}
 800b214:	4770      	bx	lr
 800b216:	bf00      	nop
 800b218:	ff0f0fff 	.word	0xff0f0fff

0800b21c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b21c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b21e:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800b222:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b224:	6900      	ldr	r0, [r0, #16]
 800b226:	4323      	orrs	r3, r4
 800b228:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800b22c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b230:	4c05      	ldr	r4, [pc, #20]	; (800b248 <FMC_SDRAM_SendCommand+0x2c>)
 800b232:	3901      	subs	r1, #1
 800b234:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b236:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b238:	4323      	orrs	r3, r4
 800b23a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800b23e:	6113      	str	r3, [r2, #16]
}
 800b240:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop
 800b248:	ffc00000 	.word	0xffc00000

0800b24c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b24c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b24e:	4b05      	ldr	r3, [pc, #20]	; (800b264 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800b250:	2000      	movs	r0, #0
{
 800b252:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b254:	6954      	ldr	r4, [r2, #20]
 800b256:	4023      	ands	r3, r4
 800b258:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800b25c:	6151      	str	r1, [r2, #20]
}
 800b25e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	ffffc001 	.word	0xffffc001

0800b268 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b268:	b084      	sub	sp, #16
 800b26a:	b410      	push	{r4}
 800b26c:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b270:	4614      	mov	r4, r2
{
 800b272:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800b276:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800b278:	9904      	ldr	r1, [sp, #16]
{
 800b27a:	4602      	mov	r2, r0
             Init.BusWide             | \
 800b27c:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800b27e:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b280:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800b282:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800b284:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800b286:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800b288:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800b28a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b28c:	4903      	ldr	r1, [pc, #12]	; (800b29c <SDMMC_Init+0x34>)
 800b28e:	4021      	ands	r1, r4
 800b290:	430b      	orrs	r3, r1
 800b292:	6053      	str	r3, [r2, #4]
}
 800b294:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b298:	b004      	add	sp, #16
 800b29a:	4770      	bx	lr
 800b29c:	ffc02c00 	.word	0xffc02c00

0800b2a0 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b2a0:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop

0800b2a8 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b2a8:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b2aa:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800b2ac:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800b2ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b2b2:	4770      	bx	lr

0800b2b4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b2b4:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800b2b6:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	f042 0203 	orr.w	r2, r2, #3
 800b2be:	601a      	str	r2, [r3, #0]
}
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop

0800b2c4 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b2c4:	6800      	ldr	r0, [r0, #0]
}
 800b2c6:	f000 0003 	and.w	r0, r0, #3
 800b2ca:	4770      	bx	lr

0800b2cc <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b2cc:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800b2ce:	5840      	ldr	r0, [r0, r1]
}
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop

0800b2d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b2d4:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b2d6:	680b      	ldr	r3, [r1, #0]
{
 800b2d8:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b2da:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b2dc:	684b      	ldr	r3, [r1, #4]
 800b2de:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800b2e0:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b2e2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b2e4:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800b2e8:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800b2ea:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b2ec:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800b2f0:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800b2f2:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800b2f4:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b2f6:	430b      	orrs	r3, r1
 800b2f8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b2fa:	bc30      	pop	{r4, r5}
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop

0800b300 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b300:	4a50      	ldr	r2, [pc, #320]	; (800b444 <SDMMC_CmdBlockLength+0x144>)
{
 800b302:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b304:	4b50      	ldr	r3, [pc, #320]	; (800b448 <SDMMC_CmdBlockLength+0x148>)
 800b306:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b308:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b30c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b310:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b314:	484d      	ldr	r0, [pc, #308]	; (800b44c <SDMMC_CmdBlockLength+0x14c>)
 800b316:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b31a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b31c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b31e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b322:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b324:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b328:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 800b32c:	1e53      	subs	r3, r2, #1
 800b32e:	b14a      	cbz	r2, 800b344 <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b330:	4947      	ldr	r1, [pc, #284]	; (800b450 <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
 800b332:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b336:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b338:	420a      	tst	r2, r1
 800b33a:	d001      	beq.n	800b340 <SDMMC_CmdBlockLength+0x40>
 800b33c:	0492      	lsls	r2, r2, #18
 800b33e:	d504      	bpl.n	800b34a <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800b340:	1c58      	adds	r0, r3, #1
 800b342:	d1f6      	bne.n	800b332 <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b344:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b348:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b34a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b34e:	0758      	lsls	r0, r3, #29
 800b350:	d445      	bmi.n	800b3de <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b352:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b356:	f010 0001 	ands.w	r0, r0, #1
 800b35a:	d137      	bne.n	800b3cc <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b35c:	4b3d      	ldr	r3, [pc, #244]	; (800b454 <SDMMC_CmdBlockLength+0x154>)
 800b35e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b362:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b366:	b2db      	uxtb	r3, r3
 800b368:	2b10      	cmp	r3, #16
 800b36a:	d136      	bne.n	800b3da <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
 800b36c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b370:	4839      	ldr	r0, [pc, #228]	; (800b458 <SDMMC_CmdBlockLength+0x158>)
 800b372:	4018      	ands	r0, r3
 800b374:	2800      	cmp	r0, #0
 800b376:	d02f      	beq.n	800b3d8 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b378:	2b00      	cmp	r3, #0
 800b37a:	db35      	blt.n	800b3e8 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b37c:	0059      	lsls	r1, r3, #1
 800b37e:	d436      	bmi.n	800b3ee <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b380:	009a      	lsls	r2, r3, #2
 800b382:	d436      	bmi.n	800b3f2 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b384:	00d9      	lsls	r1, r3, #3
 800b386:	d436      	bmi.n	800b3f6 <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b388:	011a      	lsls	r2, r3, #4
 800b38a:	d437      	bmi.n	800b3fc <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b38c:	0159      	lsls	r1, r3, #5
 800b38e:	d438      	bmi.n	800b402 <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b390:	01da      	lsls	r2, r3, #7
 800b392:	d439      	bmi.n	800b408 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b394:	0219      	lsls	r1, r3, #8
 800b396:	d43a      	bmi.n	800b40e <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b398:	025a      	lsls	r2, r3, #9
 800b39a:	d43b      	bmi.n	800b414 <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b39c:	0299      	lsls	r1, r3, #10
 800b39e:	d445      	bmi.n	800b42c <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b3a0:	02da      	lsls	r2, r3, #11
 800b3a2:	d440      	bmi.n	800b426 <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b3a4:	0359      	lsls	r1, r3, #13
 800b3a6:	d43b      	bmi.n	800b420 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b3a8:	039a      	lsls	r2, r3, #14
 800b3aa:	d436      	bmi.n	800b41a <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b3ac:	03d9      	lsls	r1, r3, #15
 800b3ae:	d446      	bmi.n	800b43e <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b3b0:	041a      	lsls	r2, r3, #16
 800b3b2:	d441      	bmi.n	800b438 <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b3b4:	0459      	lsls	r1, r3, #17
 800b3b6:	d43c      	bmi.n	800b432 <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b3b8:	049a      	lsls	r2, r3, #18
 800b3ba:	d40b      	bmi.n	800b3d4 <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b3bc:	f013 0f08 	tst.w	r3, #8
 800b3c0:	bf14      	ite	ne
 800b3c2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b3c6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b3ca:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3d2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b3d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b3d8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3da:	2001      	movs	r0, #1
 800b3dc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3de:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3e0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3e2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3e6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b3e8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b3ec:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b3ee:	2040      	movs	r0, #64	; 0x40
 800b3f0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b3f2:	2080      	movs	r0, #128	; 0x80
 800b3f4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b3f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b3fa:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b3fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b400:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b402:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b406:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b408:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b40c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b40e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b412:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b414:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b418:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b41a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b41e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b420:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b424:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b426:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b42a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b42c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b430:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b432:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b436:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b438:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b43c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b43e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b442:	4770      	bx	lr
 800b444:	20000754 	.word	0x20000754
 800b448:	10624dd3 	.word	0x10624dd3
 800b44c:	fffee0c0 	.word	0xfffee0c0
 800b450:	00200045 	.word	0x00200045
 800b454:	002000c5 	.word	0x002000c5
 800b458:	fdffe008 	.word	0xfdffe008

0800b45c <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b45c:	4a50      	ldr	r2, [pc, #320]	; (800b5a0 <SDMMC_CmdReadSingleBlock+0x144>)
{
 800b45e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b460:	4b50      	ldr	r3, [pc, #320]	; (800b5a4 <SDMMC_CmdReadSingleBlock+0x148>)
 800b462:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b464:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b468:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b46c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b470:	484d      	ldr	r0, [pc, #308]	; (800b5a8 <SDMMC_CmdReadSingleBlock+0x14c>)
 800b472:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b476:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b478:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b47a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b47e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b480:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b484:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b488:	1e53      	subs	r3, r2, #1
 800b48a:	b14a      	cbz	r2, 800b4a0 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b48c:	4947      	ldr	r1, [pc, #284]	; (800b5ac <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800b48e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b492:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b494:	420a      	tst	r2, r1
 800b496:	d001      	beq.n	800b49c <SDMMC_CmdReadSingleBlock+0x40>
 800b498:	0492      	lsls	r2, r2, #18
 800b49a:	d504      	bpl.n	800b4a6 <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800b49c:	1c58      	adds	r0, r3, #1
 800b49e:	d1f6      	bne.n	800b48e <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b4a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b4a4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4a6:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b4aa:	0758      	lsls	r0, r3, #29
 800b4ac:	d445      	bmi.n	800b53a <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4ae:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b4b2:	f010 0001 	ands.w	r0, r0, #1
 800b4b6:	d137      	bne.n	800b528 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4b8:	4b3d      	ldr	r3, [pc, #244]	; (800b5b0 <SDMMC_CmdReadSingleBlock+0x154>)
 800b4ba:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b4be:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b11      	cmp	r3, #17
 800b4c6:	d136      	bne.n	800b536 <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b4c8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b4cc:	4839      	ldr	r0, [pc, #228]	; (800b5b4 <SDMMC_CmdReadSingleBlock+0x158>)
 800b4ce:	4018      	ands	r0, r3
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	d02f      	beq.n	800b534 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	db35      	blt.n	800b544 <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b4d8:	0059      	lsls	r1, r3, #1
 800b4da:	d436      	bmi.n	800b54a <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b4dc:	009a      	lsls	r2, r3, #2
 800b4de:	d436      	bmi.n	800b54e <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b4e0:	00d9      	lsls	r1, r3, #3
 800b4e2:	d436      	bmi.n	800b552 <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b4e4:	011a      	lsls	r2, r3, #4
 800b4e6:	d437      	bmi.n	800b558 <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b4e8:	0159      	lsls	r1, r3, #5
 800b4ea:	d438      	bmi.n	800b55e <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b4ec:	01da      	lsls	r2, r3, #7
 800b4ee:	d439      	bmi.n	800b564 <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b4f0:	0219      	lsls	r1, r3, #8
 800b4f2:	d43a      	bmi.n	800b56a <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b4f4:	025a      	lsls	r2, r3, #9
 800b4f6:	d43b      	bmi.n	800b570 <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b4f8:	0299      	lsls	r1, r3, #10
 800b4fa:	d445      	bmi.n	800b588 <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b4fc:	02da      	lsls	r2, r3, #11
 800b4fe:	d440      	bmi.n	800b582 <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b500:	0359      	lsls	r1, r3, #13
 800b502:	d43b      	bmi.n	800b57c <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b504:	039a      	lsls	r2, r3, #14
 800b506:	d436      	bmi.n	800b576 <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b508:	03d9      	lsls	r1, r3, #15
 800b50a:	d446      	bmi.n	800b59a <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b50c:	041a      	lsls	r2, r3, #16
 800b50e:	d441      	bmi.n	800b594 <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b510:	0459      	lsls	r1, r3, #17
 800b512:	d43c      	bmi.n	800b58e <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b514:	049a      	lsls	r2, r3, #18
 800b516:	d40b      	bmi.n	800b530 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b518:	f013 0f08 	tst.w	r3, #8
 800b51c:	bf14      	ite	ne
 800b51e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b522:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b526:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b528:	2301      	movs	r3, #1
 800b52a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b52e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b530:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b534:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b536:	2001      	movs	r0, #1
 800b538:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b53a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b53c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b53e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b542:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b544:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b548:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b54a:	2040      	movs	r0, #64	; 0x40
 800b54c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b54e:	2080      	movs	r0, #128	; 0x80
 800b550:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b552:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b556:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b558:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b55c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b55e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b562:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b564:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b568:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b56a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b56e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b570:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b574:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b576:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b57a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b57c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b580:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b582:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b586:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b588:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b58c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b58e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b592:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b594:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b598:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b59a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b59e:	4770      	bx	lr
 800b5a0:	20000754 	.word	0x20000754
 800b5a4:	10624dd3 	.word	0x10624dd3
 800b5a8:	fffee0c0 	.word	0xfffee0c0
 800b5ac:	00200045 	.word	0x00200045
 800b5b0:	002000c5 	.word	0x002000c5
 800b5b4:	fdffe008 	.word	0xfdffe008

0800b5b8 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b5b8:	4a50      	ldr	r2, [pc, #320]	; (800b6fc <SDMMC_CmdReadMultiBlock+0x144>)
{
 800b5ba:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b5bc:	4b50      	ldr	r3, [pc, #320]	; (800b700 <SDMMC_CmdReadMultiBlock+0x148>)
 800b5be:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b5c0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b5c4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b5c8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b5cc:	484d      	ldr	r0, [pc, #308]	; (800b704 <SDMMC_CmdReadMultiBlock+0x14c>)
 800b5ce:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b5d2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b5d4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b5d6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b5da:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b5dc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b5e0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b5e4:	1e53      	subs	r3, r2, #1
 800b5e6:	b14a      	cbz	r2, 800b5fc <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b5e8:	4947      	ldr	r1, [pc, #284]	; (800b708 <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800b5ea:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b5ee:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b5f0:	420a      	tst	r2, r1
 800b5f2:	d001      	beq.n	800b5f8 <SDMMC_CmdReadMultiBlock+0x40>
 800b5f4:	0492      	lsls	r2, r2, #18
 800b5f6:	d504      	bpl.n	800b602 <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800b5f8:	1c58      	adds	r0, r3, #1
 800b5fa:	d1f6      	bne.n	800b5ea <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b5fc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b600:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b602:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b606:	0758      	lsls	r0, r3, #29
 800b608:	d445      	bmi.n	800b696 <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b60a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b60e:	f010 0001 	ands.w	r0, r0, #1
 800b612:	d137      	bne.n	800b684 <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b614:	4b3d      	ldr	r3, [pc, #244]	; (800b70c <SDMMC_CmdReadMultiBlock+0x154>)
 800b616:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b61a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b12      	cmp	r3, #18
 800b622:	d136      	bne.n	800b692 <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b624:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b628:	4839      	ldr	r0, [pc, #228]	; (800b710 <SDMMC_CmdReadMultiBlock+0x158>)
 800b62a:	4018      	ands	r0, r3
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d02f      	beq.n	800b690 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b630:	2b00      	cmp	r3, #0
 800b632:	db35      	blt.n	800b6a0 <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b634:	0059      	lsls	r1, r3, #1
 800b636:	d436      	bmi.n	800b6a6 <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b638:	009a      	lsls	r2, r3, #2
 800b63a:	d436      	bmi.n	800b6aa <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b63c:	00d9      	lsls	r1, r3, #3
 800b63e:	d436      	bmi.n	800b6ae <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b640:	011a      	lsls	r2, r3, #4
 800b642:	d437      	bmi.n	800b6b4 <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b644:	0159      	lsls	r1, r3, #5
 800b646:	d438      	bmi.n	800b6ba <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b648:	01da      	lsls	r2, r3, #7
 800b64a:	d439      	bmi.n	800b6c0 <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b64c:	0219      	lsls	r1, r3, #8
 800b64e:	d43a      	bmi.n	800b6c6 <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b650:	025a      	lsls	r2, r3, #9
 800b652:	d43b      	bmi.n	800b6cc <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b654:	0299      	lsls	r1, r3, #10
 800b656:	d445      	bmi.n	800b6e4 <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b658:	02da      	lsls	r2, r3, #11
 800b65a:	d440      	bmi.n	800b6de <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b65c:	0359      	lsls	r1, r3, #13
 800b65e:	d43b      	bmi.n	800b6d8 <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b660:	039a      	lsls	r2, r3, #14
 800b662:	d436      	bmi.n	800b6d2 <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b664:	03d9      	lsls	r1, r3, #15
 800b666:	d446      	bmi.n	800b6f6 <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b668:	041a      	lsls	r2, r3, #16
 800b66a:	d441      	bmi.n	800b6f0 <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b66c:	0459      	lsls	r1, r3, #17
 800b66e:	d43c      	bmi.n	800b6ea <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b670:	049a      	lsls	r2, r3, #18
 800b672:	d40b      	bmi.n	800b68c <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b674:	f013 0f08 	tst.w	r3, #8
 800b678:	bf14      	ite	ne
 800b67a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b67e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b682:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b684:	2301      	movs	r3, #1
 800b686:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b68a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b68c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b690:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b692:	2001      	movs	r0, #1
 800b694:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b696:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b698:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b69a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b69e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b6a0:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b6a4:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b6a6:	2040      	movs	r0, #64	; 0x40
 800b6a8:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b6aa:	2080      	movs	r0, #128	; 0x80
 800b6ac:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b6ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b6b2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b6b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b6b8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b6ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b6be:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b6c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b6c4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b6c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b6ca:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b6cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b6d0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b6d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b6d6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b6d8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b6dc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b6de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b6e2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b6e4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b6e8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b6ea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b6ee:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b6f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b6f4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b6f6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b6fa:	4770      	bx	lr
 800b6fc:	20000754 	.word	0x20000754
 800b700:	10624dd3 	.word	0x10624dd3
 800b704:	fffee0c0 	.word	0xfffee0c0
 800b708:	00200045 	.word	0x00200045
 800b70c:	002000c5 	.word	0x002000c5
 800b710:	fdffe008 	.word	0xfdffe008

0800b714 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b714:	4a50      	ldr	r2, [pc, #320]	; (800b858 <SDMMC_CmdWriteSingleBlock+0x144>)
{
 800b716:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b718:	4b50      	ldr	r3, [pc, #320]	; (800b85c <SDMMC_CmdWriteSingleBlock+0x148>)
 800b71a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b71c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b720:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b724:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b728:	484d      	ldr	r0, [pc, #308]	; (800b860 <SDMMC_CmdWriteSingleBlock+0x14c>)
 800b72a:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b72e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b730:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b732:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b736:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b738:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b73c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b740:	1e53      	subs	r3, r2, #1
 800b742:	b14a      	cbz	r2, 800b758 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b744:	4947      	ldr	r1, [pc, #284]	; (800b864 <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800b746:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b74a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b74c:	420a      	tst	r2, r1
 800b74e:	d001      	beq.n	800b754 <SDMMC_CmdWriteSingleBlock+0x40>
 800b750:	0492      	lsls	r2, r2, #18
 800b752:	d504      	bpl.n	800b75e <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800b754:	1c58      	adds	r0, r3, #1
 800b756:	d1f6      	bne.n	800b746 <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b758:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b75c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b75e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b762:	0758      	lsls	r0, r3, #29
 800b764:	d445      	bmi.n	800b7f2 <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b766:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b76a:	f010 0001 	ands.w	r0, r0, #1
 800b76e:	d137      	bne.n	800b7e0 <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b770:	4b3d      	ldr	r3, [pc, #244]	; (800b868 <SDMMC_CmdWriteSingleBlock+0x154>)
 800b772:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b776:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b18      	cmp	r3, #24
 800b77e:	d136      	bne.n	800b7ee <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b780:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b784:	4839      	ldr	r0, [pc, #228]	; (800b86c <SDMMC_CmdWriteSingleBlock+0x158>)
 800b786:	4018      	ands	r0, r3
 800b788:	2800      	cmp	r0, #0
 800b78a:	d02f      	beq.n	800b7ec <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	db35      	blt.n	800b7fc <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b790:	0059      	lsls	r1, r3, #1
 800b792:	d436      	bmi.n	800b802 <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b794:	009a      	lsls	r2, r3, #2
 800b796:	d436      	bmi.n	800b806 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b798:	00d9      	lsls	r1, r3, #3
 800b79a:	d436      	bmi.n	800b80a <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b79c:	011a      	lsls	r2, r3, #4
 800b79e:	d437      	bmi.n	800b810 <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b7a0:	0159      	lsls	r1, r3, #5
 800b7a2:	d438      	bmi.n	800b816 <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b7a4:	01da      	lsls	r2, r3, #7
 800b7a6:	d439      	bmi.n	800b81c <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b7a8:	0219      	lsls	r1, r3, #8
 800b7aa:	d43a      	bmi.n	800b822 <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b7ac:	025a      	lsls	r2, r3, #9
 800b7ae:	d43b      	bmi.n	800b828 <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b7b0:	0299      	lsls	r1, r3, #10
 800b7b2:	d445      	bmi.n	800b840 <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b7b4:	02da      	lsls	r2, r3, #11
 800b7b6:	d440      	bmi.n	800b83a <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b7b8:	0359      	lsls	r1, r3, #13
 800b7ba:	d43b      	bmi.n	800b834 <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b7bc:	039a      	lsls	r2, r3, #14
 800b7be:	d436      	bmi.n	800b82e <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b7c0:	03d9      	lsls	r1, r3, #15
 800b7c2:	d446      	bmi.n	800b852 <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b7c4:	041a      	lsls	r2, r3, #16
 800b7c6:	d441      	bmi.n	800b84c <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b7c8:	0459      	lsls	r1, r3, #17
 800b7ca:	d43c      	bmi.n	800b846 <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b7cc:	049a      	lsls	r2, r3, #18
 800b7ce:	d40b      	bmi.n	800b7e8 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b7d0:	f013 0f08 	tst.w	r3, #8
 800b7d4:	bf14      	ite	ne
 800b7d6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b7da:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b7de:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7e6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b7e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b7ec:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7ee:	2001      	movs	r0, #1
 800b7f0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7f2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7f4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7f6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7fa:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b7fc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b800:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b802:	2040      	movs	r0, #64	; 0x40
 800b804:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b806:	2080      	movs	r0, #128	; 0x80
 800b808:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b80a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b80e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b810:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b814:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b816:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b81a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b81c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b820:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b822:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b826:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b828:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b82c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b82e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b832:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b834:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b838:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b83a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b83e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b840:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b844:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b846:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b84a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b84c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b850:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b852:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b856:	4770      	bx	lr
 800b858:	20000754 	.word	0x20000754
 800b85c:	10624dd3 	.word	0x10624dd3
 800b860:	fffee0c0 	.word	0xfffee0c0
 800b864:	00200045 	.word	0x00200045
 800b868:	002000c5 	.word	0x002000c5
 800b86c:	fdffe008 	.word	0xfdffe008

0800b870 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b870:	4a50      	ldr	r2, [pc, #320]	; (800b9b4 <SDMMC_CmdWriteMultiBlock+0x144>)
{
 800b872:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b874:	4b50      	ldr	r3, [pc, #320]	; (800b9b8 <SDMMC_CmdWriteMultiBlock+0x148>)
 800b876:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b878:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b87c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b880:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b884:	484d      	ldr	r0, [pc, #308]	; (800b9bc <SDMMC_CmdWriteMultiBlock+0x14c>)
 800b886:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b88a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b88c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b88e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b892:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b894:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b898:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800b89c:	1e53      	subs	r3, r2, #1
 800b89e:	b14a      	cbz	r2, 800b8b4 <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b8a0:	4947      	ldr	r1, [pc, #284]	; (800b9c0 <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800b8a2:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b8a6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b8a8:	420a      	tst	r2, r1
 800b8aa:	d001      	beq.n	800b8b0 <SDMMC_CmdWriteMultiBlock+0x40>
 800b8ac:	0492      	lsls	r2, r2, #18
 800b8ae:	d504      	bpl.n	800b8ba <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800b8b0:	1c58      	adds	r0, r3, #1
 800b8b2:	d1f6      	bne.n	800b8a2 <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b8b4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b8b8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8ba:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b8be:	0758      	lsls	r0, r3, #29
 800b8c0:	d445      	bmi.n	800b94e <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8c2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b8c6:	f010 0001 	ands.w	r0, r0, #1
 800b8ca:	d137      	bne.n	800b93c <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b8cc:	4b3d      	ldr	r3, [pc, #244]	; (800b9c4 <SDMMC_CmdWriteMultiBlock+0x154>)
 800b8ce:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b8d2:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b19      	cmp	r3, #25
 800b8da:	d136      	bne.n	800b94a <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800b8dc:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b8e0:	4839      	ldr	r0, [pc, #228]	; (800b9c8 <SDMMC_CmdWriteMultiBlock+0x158>)
 800b8e2:	4018      	ands	r0, r3
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d02f      	beq.n	800b948 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	db35      	blt.n	800b958 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b8ec:	0059      	lsls	r1, r3, #1
 800b8ee:	d436      	bmi.n	800b95e <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b8f0:	009a      	lsls	r2, r3, #2
 800b8f2:	d436      	bmi.n	800b962 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b8f4:	00d9      	lsls	r1, r3, #3
 800b8f6:	d436      	bmi.n	800b966 <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b8f8:	011a      	lsls	r2, r3, #4
 800b8fa:	d437      	bmi.n	800b96c <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b8fc:	0159      	lsls	r1, r3, #5
 800b8fe:	d438      	bmi.n	800b972 <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b900:	01da      	lsls	r2, r3, #7
 800b902:	d439      	bmi.n	800b978 <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b904:	0219      	lsls	r1, r3, #8
 800b906:	d43a      	bmi.n	800b97e <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b908:	025a      	lsls	r2, r3, #9
 800b90a:	d43b      	bmi.n	800b984 <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b90c:	0299      	lsls	r1, r3, #10
 800b90e:	d445      	bmi.n	800b99c <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b910:	02da      	lsls	r2, r3, #11
 800b912:	d440      	bmi.n	800b996 <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b914:	0359      	lsls	r1, r3, #13
 800b916:	d43b      	bmi.n	800b990 <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b918:	039a      	lsls	r2, r3, #14
 800b91a:	d436      	bmi.n	800b98a <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b91c:	03d9      	lsls	r1, r3, #15
 800b91e:	d446      	bmi.n	800b9ae <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b920:	041a      	lsls	r2, r3, #16
 800b922:	d441      	bmi.n	800b9a8 <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b924:	0459      	lsls	r1, r3, #17
 800b926:	d43c      	bmi.n	800b9a2 <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b928:	049a      	lsls	r2, r3, #18
 800b92a:	d40b      	bmi.n	800b944 <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b92c:	f013 0f08 	tst.w	r3, #8
 800b930:	bf14      	ite	ne
 800b932:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b936:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b93a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b93c:	2301      	movs	r3, #1
 800b93e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b942:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800b944:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800b948:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b94a:	2001      	movs	r0, #1
 800b94c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b94e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b950:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b952:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b956:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b958:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b95c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b95e:	2040      	movs	r0, #64	; 0x40
 800b960:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b962:	2080      	movs	r0, #128	; 0x80
 800b964:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b966:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b96a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b96c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b970:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b972:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b976:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b978:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b97c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b97e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b982:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b984:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b988:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b98a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b98e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b990:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b994:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800b996:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b99a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b99c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b9a0:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b9a2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b9a6:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b9a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b9ac:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b9ae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b9b2:	4770      	bx	lr
 800b9b4:	20000754 	.word	0x20000754
 800b9b8:	10624dd3 	.word	0x10624dd3
 800b9bc:	fffee0c0 	.word	0xfffee0c0
 800b9c0:	00200045 	.word	0x00200045
 800b9c4:	002000c5 	.word	0x002000c5
 800b9c8:	fdffe008 	.word	0xfdffe008

0800b9cc <SDMMC_CmdStopTransfer>:
{
 800b9cc:	b430      	push	{r4, r5}
 800b9ce:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9d0:	4b7b      	ldr	r3, [pc, #492]	; (800bbc0 <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b9d2:	68c0      	ldr	r0, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800b9d4:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9d6:	4c7b      	ldr	r4, [pc, #492]	; (800bbc4 <SDMMC_CmdStopTransfer+0x1f8>)
 800b9d8:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b9da:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b9de:	4b7a      	ldr	r3, [pc, #488]	; (800bbc8 <SDMMC_CmdStopTransfer+0x1fc>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b9e0:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9e2:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b9e6:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9e8:	4c78      	ldr	r4, [pc, #480]	; (800bbcc <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b9ea:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9ee:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b9f0:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b9f2:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 800b9f6:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9f8:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b9fc:	68cc      	ldr	r4, [r1, #12]
 800b9fe:	4023      	ands	r3, r4
 800ba00:	4318      	orrs	r0, r3
 800ba02:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800ba04:	b14a      	cbz	r2, 800ba1a <SDMMC_CmdStopTransfer+0x4e>
 800ba06:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ba08:	4871      	ldr	r0, [pc, #452]	; (800bbd0 <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
 800ba0a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800ba0c:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba0e:	4202      	tst	r2, r0
 800ba10:	d001      	beq.n	800ba16 <SDMMC_CmdStopTransfer+0x4a>
 800ba12:	0492      	lsls	r2, r2, #18
 800ba14:	d509      	bpl.n	800ba2a <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800ba16:	1c5c      	adds	r4, r3, #1
 800ba18:	d1f7      	bne.n	800ba0a <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba1a:	68cb      	ldr	r3, [r1, #12]
 800ba1c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800ba20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba24:	60cb      	str	r3, [r1, #12]
}
 800ba26:	bc30      	pop	{r4, r5}
 800ba28:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba2a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ba2c:	075b      	lsls	r3, r3, #29
 800ba2e:	d452      	bmi.n	800bad6 <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba30:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800ba32:	f010 0001 	ands.w	r0, r0, #1
 800ba36:	d13b      	bne.n	800bab0 <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba38:	4b66      	ldr	r3, [pc, #408]	; (800bbd4 <SDMMC_CmdStopTransfer+0x208>)
 800ba3a:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ba3c:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b0c      	cmp	r3, #12
 800ba42:	d142      	bne.n	800baca <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
 800ba44:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba46:	4a64      	ldr	r2, [pc, #400]	; (800bbd8 <SDMMC_CmdStopTransfer+0x20c>)
 800ba48:	401a      	ands	r2, r3
 800ba4a:	2a00      	cmp	r2, #0
 800ba4c:	d037      	beq.n	800babe <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	db35      	blt.n	800babe <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba52:	005d      	lsls	r5, r3, #1
 800ba54:	d446      	bmi.n	800bae4 <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba56:	009c      	lsls	r4, r3, #2
 800ba58:	d44a      	bmi.n	800baf0 <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba5a:	00d8      	lsls	r0, r3, #3
 800ba5c:	d44e      	bmi.n	800bafc <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba5e:	011a      	lsls	r2, r3, #4
 800ba60:	d453      	bmi.n	800bb0a <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba62:	015d      	lsls	r5, r3, #5
 800ba64:	d458      	bmi.n	800bb18 <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ba66:	01dc      	lsls	r4, r3, #7
 800ba68:	d464      	bmi.n	800bb34 <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ba6a:	0218      	lsls	r0, r3, #8
 800ba6c:	d45b      	bmi.n	800bb26 <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba6e:	025a      	lsls	r2, r3, #9
 800ba70:	d46e      	bmi.n	800bb50 <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba72:	029d      	lsls	r5, r3, #10
 800ba74:	d465      	bmi.n	800bb42 <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba76:	02dc      	lsls	r4, r3, #11
 800ba78:	d47f      	bmi.n	800bb7a <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba7a:	0358      	lsls	r0, r3, #13
 800ba7c:	d476      	bmi.n	800bb6c <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba7e:	039a      	lsls	r2, r3, #14
 800ba80:	d46d      	bmi.n	800bb5e <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ba82:	03dd      	lsls	r5, r3, #15
 800ba84:	f100 8095 	bmi.w	800bbb2 <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ba88:	041c      	lsls	r4, r3, #16
 800ba8a:	f100 8084 	bmi.w	800bb96 <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ba8e:	0458      	lsls	r0, r3, #17
 800ba90:	d47a      	bmi.n	800bb88 <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ba92:	049a      	lsls	r2, r3, #18
 800ba94:	f100 8086 	bmi.w	800bba4 <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ba98:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ba9c:	68cb      	ldr	r3, [r1, #12]
 800ba9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800baa2:	bf14      	ite	ne
 800baa4:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800baa8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800baac:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800baae:	e7ba      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bab0:	2301      	movs	r3, #1
 800bab2:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bab4:	68cb      	ldr	r3, [r1, #12]
 800bab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baba:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800babc:	e7b3      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800babe:	68cb      	ldr	r3, [r1, #12]
 800bac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bac4:	60cb      	str	r3, [r1, #12]
}
 800bac6:	bc30      	pop	{r4, r5}
 800bac8:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800baca:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bacc:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bad2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bad4:	e7a7      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bad6:	2004      	movs	r0, #4
 800bad8:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bada:	68cb      	ldr	r3, [r1, #12]
 800badc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bae0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bae2:	e7a0      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bae4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bae6:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bae8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baec:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800baee:	e79a      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800baf0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800baf2:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800baf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baf8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bafa:	e794      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bafc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bafe:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb06:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb08:	e78d      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb0a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb0c:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb14:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb16:	e786      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb18:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb1a:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb22:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb24:	e77f      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb26:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb30:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb32:	e778      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb34:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb36:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb3e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb40:	e771      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb42:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb4c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb4e:	e76a      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb50:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb52:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb5a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb5c:	e763      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb5e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb60:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb68:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb6a:	e75c      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb6c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb76:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb78:	e755      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb7a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 800bb7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb84:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb86:	e74e      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb88:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb8a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb92:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bb94:	e747      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb96:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb98:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bb9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bba0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bba2:	e740      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bba4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800bba6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bbaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbae:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bbb0:	e739      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bbb2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bbb4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800bbb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbbc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800bbbe:	e732      	b.n	800ba26 <SDMMC_CmdStopTransfer+0x5a>
 800bbc0:	20000754 	.word	0x20000754
 800bbc4:	10624dd3 	.word	0x10624dd3
 800bbc8:	fffee0c0 	.word	0xfffee0c0
 800bbcc:	05f5e100 	.word	0x05f5e100
 800bbd0:	00200045 	.word	0x00200045
 800bbd4:	002000c5 	.word	0x002000c5
 800bbd8:	fdffe008 	.word	0xfdffe008

0800bbdc <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbdc:	4a50      	ldr	r2, [pc, #320]	; (800bd20 <SDMMC_CmdSelDesel+0x144>)
{
 800bbde:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbe0:	4b50      	ldr	r3, [pc, #320]	; (800bd24 <SDMMC_CmdSelDesel+0x148>)
 800bbe2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bbe4:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbe8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bbec:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bbf0:	484d      	ldr	r0, [pc, #308]	; (800bd28 <SDMMC_CmdSelDesel+0x14c>)
 800bbf2:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbf6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bbf8:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbfa:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bbfe:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bc00:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc04:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bc08:	1e53      	subs	r3, r2, #1
 800bc0a:	b14a      	cbz	r2, 800bc20 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bc0c:	4947      	ldr	r1, [pc, #284]	; (800bd2c <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
 800bc0e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800bc12:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc14:	420a      	tst	r2, r1
 800bc16:	d001      	beq.n	800bc1c <SDMMC_CmdSelDesel+0x40>
 800bc18:	0492      	lsls	r2, r2, #18
 800bc1a:	d504      	bpl.n	800bc26 <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800bc1c:	1c58      	adds	r0, r3, #1
 800bc1e:	d1f6      	bne.n	800bc0e <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800bc20:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bc24:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc26:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800bc2a:	0758      	lsls	r0, r3, #29
 800bc2c:	d445      	bmi.n	800bcba <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc2e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800bc32:	f010 0001 	ands.w	r0, r0, #1
 800bc36:	d137      	bne.n	800bca8 <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc38:	4b3d      	ldr	r3, [pc, #244]	; (800bd30 <SDMMC_CmdSelDesel+0x154>)
 800bc3a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc3e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	2b07      	cmp	r3, #7
 800bc46:	d136      	bne.n	800bcb6 <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
 800bc48:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bc4c:	4839      	ldr	r0, [pc, #228]	; (800bd34 <SDMMC_CmdSelDesel+0x158>)
 800bc4e:	4018      	ands	r0, r3
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d02f      	beq.n	800bcb4 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	db35      	blt.n	800bcc4 <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bc58:	0059      	lsls	r1, r3, #1
 800bc5a:	d436      	bmi.n	800bcca <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bc5c:	009a      	lsls	r2, r3, #2
 800bc5e:	d436      	bmi.n	800bcce <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bc60:	00d9      	lsls	r1, r3, #3
 800bc62:	d436      	bmi.n	800bcd2 <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bc64:	011a      	lsls	r2, r3, #4
 800bc66:	d437      	bmi.n	800bcd8 <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bc68:	0159      	lsls	r1, r3, #5
 800bc6a:	d438      	bmi.n	800bcde <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bc6c:	01da      	lsls	r2, r3, #7
 800bc6e:	d439      	bmi.n	800bce4 <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc70:	0219      	lsls	r1, r3, #8
 800bc72:	d43a      	bmi.n	800bcea <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc74:	025a      	lsls	r2, r3, #9
 800bc76:	d43b      	bmi.n	800bcf0 <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bc78:	0299      	lsls	r1, r3, #10
 800bc7a:	d445      	bmi.n	800bd08 <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bc7c:	02da      	lsls	r2, r3, #11
 800bc7e:	d440      	bmi.n	800bd02 <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bc80:	0359      	lsls	r1, r3, #13
 800bc82:	d43b      	bmi.n	800bcfc <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc84:	039a      	lsls	r2, r3, #14
 800bc86:	d436      	bmi.n	800bcf6 <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc88:	03d9      	lsls	r1, r3, #15
 800bc8a:	d446      	bmi.n	800bd1a <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bc8c:	041a      	lsls	r2, r3, #16
 800bc8e:	d441      	bmi.n	800bd14 <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bc90:	0459      	lsls	r1, r3, #17
 800bc92:	d43c      	bmi.n	800bd0e <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bc94:	049a      	lsls	r2, r3, #18
 800bc96:	d40b      	bmi.n	800bcb0 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bc98:	f013 0f08 	tst.w	r3, #8
 800bc9c:	bf14      	ite	ne
 800bc9e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bca2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bca6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bca8:	2301      	movs	r3, #1
 800bcaa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcae:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bcb0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bcb4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcb6:	2001      	movs	r0, #1
 800bcb8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcba:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcbc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcbe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcc2:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bcc4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bcc8:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bcca:	2040      	movs	r0, #64	; 0x40
 800bccc:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bcce:	2080      	movs	r0, #128	; 0x80
 800bcd0:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bcd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bcd6:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bcd8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bcdc:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bcde:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bce2:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bce4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bce8:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bcea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bcee:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bcf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bcf4:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bcf6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bcfa:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bcfc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bd00:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bd02:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bd06:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bd08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bd0c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bd0e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bd12:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bd14:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bd18:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bd1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bd1e:	4770      	bx	lr
 800bd20:	20000754 	.word	0x20000754
 800bd24:	10624dd3 	.word	0x10624dd3
 800bd28:	fffee0c0 	.word	0xfffee0c0
 800bd2c:	00200045 	.word	0x00200045
 800bd30:	002000c5 	.word	0x002000c5
 800bd34:	fdffe008 	.word	0xfdffe008

0800bd38 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd38:	4b11      	ldr	r3, [pc, #68]	; (800bd80 <SDMMC_CmdGoIdleState+0x48>)
{
 800bd3a:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd3c:	4a11      	ldr	r2, [pc, #68]	; (800bd84 <SDMMC_CmdGoIdleState+0x4c>)
{
 800bd3e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd40:	4c11      	ldr	r4, [pc, #68]	; (800bd88 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800bd42:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd44:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800bd46:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd48:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd4c:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd4e:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd52:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd54:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd5a:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd5e:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd60:	e002      	b.n	800bd68 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bd62:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800bd64:	0612      	lsls	r2, r2, #24
 800bd66:	d405      	bmi.n	800bd74 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	d2fa      	bcs.n	800bd62 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800bd6c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bd70:	bc30      	pop	{r4, r5}
 800bd72:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd74:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800bd76:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd78:	638b      	str	r3, [r1, #56]	; 0x38
}
 800bd7a:	bc30      	pop	{r4, r5}
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	20000754 	.word	0x20000754
 800bd84:	fffee0c0 	.word	0xfffee0c0
 800bd88:	10624dd3 	.word	0x10624dd3
 800bd8c:	002000c5 	.word	0x002000c5

0800bd90 <SDMMC_CmdOperCond>:
{
 800bd90:	b410      	push	{r4}
 800bd92:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800bd94:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd98:	4a1a      	ldr	r2, [pc, #104]	; (800be04 <SDMMC_CmdOperCond+0x74>)
 800bd9a:	4b1b      	ldr	r3, [pc, #108]	; (800be08 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 800bd9c:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd9e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bda0:	68cc      	ldr	r4, [r1, #12]
 800bda2:	481a      	ldr	r0, [pc, #104]	; (800be0c <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bda4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bda8:	f241 1308 	movw	r3, #4360	; 0x1108
 800bdac:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bdae:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bdb0:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bdb2:	f241 3088 	movw	r0, #5000	; 0x1388
 800bdb6:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bdba:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800bdbc:	b14a      	cbz	r2, 800bdd2 <SDMMC_CmdOperCond+0x42>
 800bdbe:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800bdc0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800bdc2:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdc4:	f012 0f45 	tst.w	r2, #69	; 0x45
 800bdc8:	d001      	beq.n	800bdce <SDMMC_CmdOperCond+0x3e>
 800bdca:	0490      	lsls	r0, r2, #18
 800bdcc:	d506      	bpl.n	800bddc <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800bdce:	1c5c      	adds	r4, r3, #1
 800bdd0:	d1f6      	bne.n	800bdc0 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800bdd2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bdd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdda:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bddc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bdde:	075a      	lsls	r2, r3, #29
 800bde0:	d40c      	bmi.n	800bdfc <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bde2:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800bde4:	f010 0001 	ands.w	r0, r0, #1
 800bde8:	d105      	bne.n	800bdf6 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800bdea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800bdec:	065b      	lsls	r3, r3, #25
 800bdee:	d5f2      	bpl.n	800bdd6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800bdf0:	2340      	movs	r3, #64	; 0x40
 800bdf2:	638b      	str	r3, [r1, #56]	; 0x38
 800bdf4:	e7ef      	b.n	800bdd6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdfa:	e7ec      	b.n	800bdd6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bdfc:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bdfe:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be00:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be02:	e7e8      	b.n	800bdd6 <SDMMC_CmdOperCond+0x46>
 800be04:	20000754 	.word	0x20000754
 800be08:	10624dd3 	.word	0x10624dd3
 800be0c:	fffee0c0 	.word	0xfffee0c0

0800be10 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800be10:	4a50      	ldr	r2, [pc, #320]	; (800bf54 <SDMMC_CmdAppCommand+0x144>)
{
 800be12:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800be14:	4b50      	ldr	r3, [pc, #320]	; (800bf58 <SDMMC_CmdAppCommand+0x148>)
 800be16:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800be18:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800be1c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be20:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800be24:	484d      	ldr	r0, [pc, #308]	; (800bf5c <SDMMC_CmdAppCommand+0x14c>)
 800be26:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800be2a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be2c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800be2e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be32:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800be34:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800be38:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800be3c:	1e53      	subs	r3, r2, #1
 800be3e:	b14a      	cbz	r2, 800be54 <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800be40:	4947      	ldr	r1, [pc, #284]	; (800bf60 <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
 800be42:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800be46:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800be48:	420a      	tst	r2, r1
 800be4a:	d001      	beq.n	800be50 <SDMMC_CmdAppCommand+0x40>
 800be4c:	0492      	lsls	r2, r2, #18
 800be4e:	d504      	bpl.n	800be5a <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800be50:	1c58      	adds	r0, r3, #1
 800be52:	d1f6      	bne.n	800be42 <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800be54:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800be58:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be5a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800be5e:	0758      	lsls	r0, r3, #29
 800be60:	d445      	bmi.n	800beee <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be62:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800be66:	f010 0001 	ands.w	r0, r0, #1
 800be6a:	d137      	bne.n	800bedc <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be6c:	4b3d      	ldr	r3, [pc, #244]	; (800bf64 <SDMMC_CmdAppCommand+0x154>)
 800be6e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800be72:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b37      	cmp	r3, #55	; 0x37
 800be7a:	d136      	bne.n	800beea <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
 800be7c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800be80:	4839      	ldr	r0, [pc, #228]	; (800bf68 <SDMMC_CmdAppCommand+0x158>)
 800be82:	4018      	ands	r0, r3
 800be84:	2800      	cmp	r0, #0
 800be86:	d02f      	beq.n	800bee8 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800be88:	2b00      	cmp	r3, #0
 800be8a:	db35      	blt.n	800bef8 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800be8c:	0059      	lsls	r1, r3, #1
 800be8e:	d436      	bmi.n	800befe <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800be90:	009a      	lsls	r2, r3, #2
 800be92:	d436      	bmi.n	800bf02 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800be94:	00d9      	lsls	r1, r3, #3
 800be96:	d436      	bmi.n	800bf06 <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800be98:	011a      	lsls	r2, r3, #4
 800be9a:	d437      	bmi.n	800bf0c <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800be9c:	0159      	lsls	r1, r3, #5
 800be9e:	d438      	bmi.n	800bf12 <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bea0:	01da      	lsls	r2, r3, #7
 800bea2:	d439      	bmi.n	800bf18 <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bea4:	0219      	lsls	r1, r3, #8
 800bea6:	d43a      	bmi.n	800bf1e <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bea8:	025a      	lsls	r2, r3, #9
 800beaa:	d43b      	bmi.n	800bf24 <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800beac:	0299      	lsls	r1, r3, #10
 800beae:	d445      	bmi.n	800bf3c <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800beb0:	02da      	lsls	r2, r3, #11
 800beb2:	d440      	bmi.n	800bf36 <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800beb4:	0359      	lsls	r1, r3, #13
 800beb6:	d43b      	bmi.n	800bf30 <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800beb8:	039a      	lsls	r2, r3, #14
 800beba:	d436      	bmi.n	800bf2a <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bebc:	03d9      	lsls	r1, r3, #15
 800bebe:	d446      	bmi.n	800bf4e <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bec0:	041a      	lsls	r2, r3, #16
 800bec2:	d441      	bmi.n	800bf48 <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bec4:	0459      	lsls	r1, r3, #17
 800bec6:	d43c      	bmi.n	800bf42 <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bec8:	049a      	lsls	r2, r3, #18
 800beca:	d40b      	bmi.n	800bee4 <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800becc:	f013 0f08 	tst.w	r3, #8
 800bed0:	bf14      	ite	ne
 800bed2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bed6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800beda:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bedc:	2301      	movs	r3, #1
 800bede:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bee2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bee4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bee8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800beea:	2001      	movs	r0, #1
 800beec:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800beee:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bef0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bef2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bef6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bef8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800befc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800befe:	2040      	movs	r0, #64	; 0x40
 800bf00:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bf02:	2080      	movs	r0, #128	; 0x80
 800bf04:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bf06:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bf0a:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bf0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bf10:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bf12:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bf16:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bf18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bf1c:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bf22:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bf28:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bf2a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bf2e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bf30:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bf34:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bf36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bf3a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bf3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bf40:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bf42:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bf46:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bf48:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bf4c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bf4e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bf52:	4770      	bx	lr
 800bf54:	20000754 	.word	0x20000754
 800bf58:	10624dd3 	.word	0x10624dd3
 800bf5c:	fffee0c0 	.word	0xfffee0c0
 800bf60:	00200045 	.word	0x00200045
 800bf64:	002000c5 	.word	0x002000c5
 800bf68:	fdffe008 	.word	0xfdffe008

0800bf6c <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf6c:	4a19      	ldr	r2, [pc, #100]	; (800bfd4 <SDMMC_CmdAppOperCommand+0x68>)
{
 800bf6e:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf70:	4b19      	ldr	r3, [pc, #100]	; (800bfd8 <SDMMC_CmdAppOperCommand+0x6c>)
 800bf72:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bf74:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf78:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf7c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bf80:	4816      	ldr	r0, [pc, #88]	; (800bfdc <SDMMC_CmdAppOperCommand+0x70>)
 800bf82:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf86:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf88:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf8a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf8e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bf90:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bf94:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bf98:	1e53      	subs	r3, r2, #1
 800bf9a:	b14a      	cbz	r2, 800bfb0 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800bf9c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800bfa0:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bfa2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800bfa6:	d001      	beq.n	800bfac <SDMMC_CmdAppOperCommand+0x40>
 800bfa8:	0492      	lsls	r2, r2, #18
 800bfaa:	d504      	bpl.n	800bfb6 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800bfac:	1c59      	adds	r1, r3, #1
 800bfae:	d1f5      	bne.n	800bf9c <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800bfb0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800bfb4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bfb6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800bfba:	f010 0004 	ands.w	r0, r0, #4
 800bfbe:	d103      	bne.n	800bfc8 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfc0:	4b07      	ldr	r3, [pc, #28]	; (800bfe0 <SDMMC_CmdAppOperCommand+0x74>)
 800bfc2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800bfc6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfc8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfca:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bfcc:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfd0:	4770      	bx	lr
 800bfd2:	bf00      	nop
 800bfd4:	20000754 	.word	0x20000754
 800bfd8:	10624dd3 	.word	0x10624dd3
 800bfdc:	fffee0c0 	.word	0xfffee0c0
 800bfe0:	002000c5 	.word	0x002000c5

0800bfe4 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bfe4:	4a50      	ldr	r2, [pc, #320]	; (800c128 <SDMMC_CmdBusWidth+0x144>)
{
 800bfe6:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bfe8:	4b50      	ldr	r3, [pc, #320]	; (800c12c <SDMMC_CmdBusWidth+0x148>)
 800bfea:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bfec:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bff0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bff4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bff8:	484d      	ldr	r0, [pc, #308]	; (800c130 <SDMMC_CmdBusWidth+0x14c>)
 800bffa:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bffe:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c000:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c002:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c006:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c008:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c00c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c010:	1e53      	subs	r3, r2, #1
 800c012:	b14a      	cbz	r2, 800c028 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c014:	4947      	ldr	r1, [pc, #284]	; (800c134 <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
 800c016:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c01a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c01c:	420a      	tst	r2, r1
 800c01e:	d001      	beq.n	800c024 <SDMMC_CmdBusWidth+0x40>
 800c020:	0492      	lsls	r2, r2, #18
 800c022:	d504      	bpl.n	800c02e <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800c024:	1c58      	adds	r0, r3, #1
 800c026:	d1f6      	bne.n	800c016 <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c028:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c02c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c02e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c032:	0758      	lsls	r0, r3, #29
 800c034:	d445      	bmi.n	800c0c2 <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c036:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c03a:	f010 0001 	ands.w	r0, r0, #1
 800c03e:	d137      	bne.n	800c0b0 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c040:	4b3d      	ldr	r3, [pc, #244]	; (800c138 <SDMMC_CmdBusWidth+0x154>)
 800c042:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c046:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b06      	cmp	r3, #6
 800c04e:	d136      	bne.n	800c0be <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
 800c050:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c054:	4839      	ldr	r0, [pc, #228]	; (800c13c <SDMMC_CmdBusWidth+0x158>)
 800c056:	4018      	ands	r0, r3
 800c058:	2800      	cmp	r0, #0
 800c05a:	d02f      	beq.n	800c0bc <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	db35      	blt.n	800c0cc <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c060:	0059      	lsls	r1, r3, #1
 800c062:	d436      	bmi.n	800c0d2 <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c064:	009a      	lsls	r2, r3, #2
 800c066:	d436      	bmi.n	800c0d6 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c068:	00d9      	lsls	r1, r3, #3
 800c06a:	d436      	bmi.n	800c0da <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c06c:	011a      	lsls	r2, r3, #4
 800c06e:	d437      	bmi.n	800c0e0 <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c070:	0159      	lsls	r1, r3, #5
 800c072:	d438      	bmi.n	800c0e6 <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c074:	01da      	lsls	r2, r3, #7
 800c076:	d439      	bmi.n	800c0ec <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c078:	0219      	lsls	r1, r3, #8
 800c07a:	d43a      	bmi.n	800c0f2 <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c07c:	025a      	lsls	r2, r3, #9
 800c07e:	d43b      	bmi.n	800c0f8 <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c080:	0299      	lsls	r1, r3, #10
 800c082:	d445      	bmi.n	800c110 <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c084:	02da      	lsls	r2, r3, #11
 800c086:	d440      	bmi.n	800c10a <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c088:	0359      	lsls	r1, r3, #13
 800c08a:	d43b      	bmi.n	800c104 <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c08c:	039a      	lsls	r2, r3, #14
 800c08e:	d436      	bmi.n	800c0fe <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c090:	03d9      	lsls	r1, r3, #15
 800c092:	d446      	bmi.n	800c122 <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c094:	041a      	lsls	r2, r3, #16
 800c096:	d441      	bmi.n	800c11c <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c098:	0459      	lsls	r1, r3, #17
 800c09a:	d43c      	bmi.n	800c116 <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c09c:	049a      	lsls	r2, r3, #18
 800c09e:	d40b      	bmi.n	800c0b8 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0a0:	f013 0f08 	tst.w	r3, #8
 800c0a4:	bf14      	ite	ne
 800c0a6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c0aa:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c0ae:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0b6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c0b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c0bc:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0be:	2001      	movs	r0, #1
 800c0c0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0c2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0c4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c0c6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0ca:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c0cc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c0d0:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c0d2:	2040      	movs	r0, #64	; 0x40
 800c0d4:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c0d6:	2080      	movs	r0, #128	; 0x80
 800c0d8:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c0da:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c0de:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c0e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c0e4:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c0e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c0ea:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c0ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c0f0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c0f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c0f6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c0f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c0fc:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c0fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c102:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c104:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c108:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c10a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c10e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c110:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c114:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c116:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c11a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c11c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c120:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c122:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c126:	4770      	bx	lr
 800c128:	20000754 	.word	0x20000754
 800c12c:	10624dd3 	.word	0x10624dd3
 800c130:	fffee0c0 	.word	0xfffee0c0
 800c134:	00200045 	.word	0x00200045
 800c138:	002000c5 	.word	0x002000c5
 800c13c:	fdffe008 	.word	0xfdffe008

0800c140 <SDMMC_CmdSendSCR>:
{
 800c140:	b410      	push	{r4}
 800c142:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c144:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c146:	4a4c      	ldr	r2, [pc, #304]	; (800c278 <SDMMC_CmdSendSCR+0x138>)
 800c148:	4b4c      	ldr	r3, [pc, #304]	; (800c27c <SDMMC_CmdSendSCR+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800c14a:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c14c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c14e:	68cc      	ldr	r4, [r1, #12]
 800c150:	484b      	ldr	r0, [pc, #300]	; (800c280 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c152:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c156:	f241 1333 	movw	r3, #4403	; 0x1133
 800c15a:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c15c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c15e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c160:	f241 3088 	movw	r0, #5000	; 0x1388
 800c164:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c168:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c16a:	b14a      	cbz	r2, 800c180 <SDMMC_CmdSendSCR+0x40>
 800c16c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c16e:	4845      	ldr	r0, [pc, #276]	; (800c284 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800c170:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c172:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c174:	4202      	tst	r2, r0
 800c176:	d001      	beq.n	800c17c <SDMMC_CmdSendSCR+0x3c>
 800c178:	0494      	lsls	r4, r2, #18
 800c17a:	d506      	bpl.n	800c18a <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800c17c:	1c5a      	adds	r2, r3, #1
 800c17e:	d1f7      	bne.n	800c170 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c180:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c184:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c188:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c18a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c18c:	0758      	lsls	r0, r3, #29
 800c18e:	d43d      	bmi.n	800c20c <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c190:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c192:	f010 0001 	ands.w	r0, r0, #1
 800c196:	d134      	bne.n	800c202 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c198:	4b3b      	ldr	r3, [pc, #236]	; (800c288 <SDMMC_CmdSendSCR+0x148>)
 800c19a:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c19c:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b33      	cmp	r3, #51	; 0x33
 800c1a2:	d131      	bne.n	800c208 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800c1a4:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c1a6:	4839      	ldr	r0, [pc, #228]	; (800c28c <SDMMC_CmdSendSCR+0x14c>)
 800c1a8:	4018      	ands	r0, r3
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d0ea      	beq.n	800c184 <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	db30      	blt.n	800c214 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c1b2:	005a      	lsls	r2, r3, #1
 800c1b4:	d431      	bmi.n	800c21a <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c1b6:	009c      	lsls	r4, r3, #2
 800c1b8:	d431      	bmi.n	800c21e <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c1ba:	00d9      	lsls	r1, r3, #3
 800c1bc:	d431      	bmi.n	800c222 <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c1be:	011a      	lsls	r2, r3, #4
 800c1c0:	d432      	bmi.n	800c228 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c1c2:	015c      	lsls	r4, r3, #5
 800c1c4:	d433      	bmi.n	800c22e <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c1c6:	01d9      	lsls	r1, r3, #7
 800c1c8:	d434      	bmi.n	800c234 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c1ca:	021a      	lsls	r2, r3, #8
 800c1cc:	d435      	bmi.n	800c23a <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c1ce:	025c      	lsls	r4, r3, #9
 800c1d0:	d436      	bmi.n	800c240 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c1d2:	0299      	lsls	r1, r3, #10
 800c1d4:	d440      	bmi.n	800c258 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c1d6:	02da      	lsls	r2, r3, #11
 800c1d8:	d43b      	bmi.n	800c252 <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c1da:	035c      	lsls	r4, r3, #13
 800c1dc:	d436      	bmi.n	800c24c <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c1de:	0399      	lsls	r1, r3, #14
 800c1e0:	d431      	bmi.n	800c246 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c1e2:	03da      	lsls	r2, r3, #15
 800c1e4:	d444      	bmi.n	800c270 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c1e6:	041c      	lsls	r4, r3, #16
 800c1e8:	d43f      	bmi.n	800c26a <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c1ea:	0459      	lsls	r1, r3, #17
 800c1ec:	d43a      	bmi.n	800c264 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c1ee:	049a      	lsls	r2, r3, #18
 800c1f0:	d435      	bmi.n	800c25e <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c1f2:	f013 0f08 	tst.w	r3, #8
 800c1f6:	bf14      	ite	ne
 800c1f8:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c1fc:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c200:	e7c0      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c202:	2301      	movs	r3, #1
 800c204:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c206:	e7bd      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c208:	2001      	movs	r0, #1
 800c20a:	e7bb      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c20c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c20e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c210:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c212:	e7b7      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c214:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c218:	e7b4      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c21a:	2040      	movs	r0, #64	; 0x40
 800c21c:	e7b2      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c21e:	2080      	movs	r0, #128	; 0x80
 800c220:	e7b0      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c222:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c226:	e7ad      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c22c:	e7aa      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c22e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c232:	e7a7      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c234:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c238:	e7a4      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c23a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c23e:	e7a1      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c240:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c244:	e79e      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c246:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c24a:	e79b      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c24c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c250:	e798      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c252:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c256:	e795      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c258:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c25c:	e792      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c25e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c262:	e78f      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c264:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c268:	e78c      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c26a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c26e:	e789      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c270:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c274:	e786      	b.n	800c184 <SDMMC_CmdSendSCR+0x44>
 800c276:	bf00      	nop
 800c278:	20000754 	.word	0x20000754
 800c27c:	10624dd3 	.word	0x10624dd3
 800c280:	fffee0c0 	.word	0xfffee0c0
 800c284:	00200045 	.word	0x00200045
 800c288:	002000c5 	.word	0x002000c5
 800c28c:	fdffe008 	.word	0xfdffe008

0800c290 <SDMMC_CmdSendCID>:
{
 800c290:	b410      	push	{r4}
 800c292:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c294:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c296:	4a19      	ldr	r2, [pc, #100]	; (800c2fc <SDMMC_CmdSendCID+0x6c>)
 800c298:	4b19      	ldr	r3, [pc, #100]	; (800c300 <SDMMC_CmdSendCID+0x70>)
  SDMMCx->ARG = Command->Argument;
 800c29a:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c29c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c29e:	68cc      	ldr	r4, [r1, #12]
 800c2a0:	4818      	ldr	r0, [pc, #96]	; (800c304 <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2a2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2a6:	f241 3302 	movw	r3, #4866	; 0x1302
 800c2aa:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2ac:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2ae:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c2b0:	f241 3088 	movw	r0, #5000	; 0x1388
 800c2b4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2b8:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c2ba:	b14a      	cbz	r2, 800c2d0 <SDMMC_CmdSendCID+0x40>
 800c2bc:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c2be:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c2c0:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c2c2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c2c6:	d001      	beq.n	800c2cc <SDMMC_CmdSendCID+0x3c>
 800c2c8:	0492      	lsls	r2, r2, #18
 800c2ca:	d506      	bpl.n	800c2da <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800c2cc:	1c58      	adds	r0, r3, #1
 800c2ce:	d1f6      	bne.n	800c2be <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c2d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c2d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2d8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c2da:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c2dc:	075b      	lsls	r3, r3, #29
 800c2de:	d409      	bmi.n	800c2f4 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c2e0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c2e2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2e6:	bf14      	ite	ne
 800c2e8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2ea:	4b07      	ldreq	r3, [pc, #28]	; (800c308 <SDMMC_CmdSendCID+0x78>)
 800c2ec:	638b      	str	r3, [r1, #56]	; 0x38
}
 800c2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2f2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2f4:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2f6:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2f8:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2fa:	e7eb      	b.n	800c2d4 <SDMMC_CmdSendCID+0x44>
 800c2fc:	20000754 	.word	0x20000754
 800c300:	10624dd3 	.word	0x10624dd3
 800c304:	fffee0c0 	.word	0xfffee0c0
 800c308:	002000c5 	.word	0x002000c5

0800c30c <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c30c:	4a1b      	ldr	r2, [pc, #108]	; (800c37c <SDMMC_CmdSendCSD+0x70>)
{
 800c30e:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c310:	4b1b      	ldr	r3, [pc, #108]	; (800c380 <SDMMC_CmdSendCSD+0x74>)
 800c312:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c314:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c318:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c31c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c320:	4818      	ldr	r0, [pc, #96]	; (800c384 <SDMMC_CmdSendCSD+0x78>)
 800c322:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c326:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c328:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c32a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c32e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c330:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c334:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c338:	1e53      	subs	r3, r2, #1
 800c33a:	b14a      	cbz	r2, 800c350 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800c33c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c340:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c342:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c346:	d001      	beq.n	800c34c <SDMMC_CmdSendCSD+0x40>
 800c348:	0492      	lsls	r2, r2, #18
 800c34a:	d504      	bpl.n	800c356 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800c34c:	1c59      	adds	r1, r3, #1
 800c34e:	d1f5      	bne.n	800c33c <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c350:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c354:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c356:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c35a:	075b      	lsls	r3, r3, #29
 800c35c:	d409      	bmi.n	800c372 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c35e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c362:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c366:	bf14      	ite	ne
 800c368:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c36a:	4b07      	ldreq	r3, [pc, #28]	; (800c388 <SDMMC_CmdSendCSD+0x7c>)
 800c36c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c370:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c372:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c374:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c376:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c37a:	4770      	bx	lr
 800c37c:	20000754 	.word	0x20000754
 800c380:	10624dd3 	.word	0x10624dd3
 800c384:	fffee0c0 	.word	0xfffee0c0
 800c388:	002000c5 	.word	0x002000c5

0800c38c <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800c38c:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c38e:	4a2b      	ldr	r2, [pc, #172]	; (800c43c <SDMMC_CmdSetRelAdd+0xb0>)
{
 800c390:	4684      	mov	ip, r0
 800c392:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c394:	6083      	str	r3, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c396:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c398:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c39a:	4829      	ldr	r0, [pc, #164]	; (800c440 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c39c:	4c29      	ldr	r4, [pc, #164]	; (800c444 <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c39e:	fba0 0202 	umull	r0, r2, r0, r2
 800c3a2:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3a6:	401c      	ands	r4, r3
 800c3a8:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3ac:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3ae:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3b0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3b4:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c3b8:	b152      	cbz	r2, 800c3d0 <SDMMC_CmdSetRelAdd+0x44>
 800c3ba:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c3bc:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c3c0:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3c2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c3c6:	d001      	beq.n	800c3cc <SDMMC_CmdSetRelAdd+0x40>
 800c3c8:	0494      	lsls	r4, r2, #18
 800c3ca:	d506      	bpl.n	800c3da <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	d1f5      	bne.n	800c3bc <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c3d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c3d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3d8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3da:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c3de:	0758      	lsls	r0, r3, #29
 800c3e0:	d421      	bmi.n	800c426 <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3e2:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c3e6:	f010 0001 	ands.w	r0, r0, #1
 800c3ea:	d116      	bne.n	800c41a <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800c3ec:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	2b03      	cmp	r3, #3
 800c3f4:	d115      	bne.n	800c422 <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3f6:	4b14      	ldr	r3, [pc, #80]	; (800c448 <SDMMC_CmdSetRelAdd+0xbc>)
 800c3f8:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800c3fc:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800c400:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800c404:	d017      	beq.n	800c436 <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c406:	045a      	lsls	r2, r3, #17
 800c408:	d412      	bmi.n	800c430 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c40a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800c40e:	bf14      	ite	ne
 800c410:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800c414:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c418:	e7dc      	b.n	800c3d4 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c41a:	2301      	movs	r3, #1
 800c41c:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c420:	e7d8      	b.n	800c3d4 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c422:	2001      	movs	r0, #1
 800c424:	e7d6      	b.n	800c3d4 <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c426:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c428:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c42a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c42e:	e7d1      	b.n	800c3d4 <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c430:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c434:	e7ce      	b.n	800c3d4 <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800c436:	0c1b      	lsrs	r3, r3, #16
 800c438:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800c43a:	e7cb      	b.n	800c3d4 <SDMMC_CmdSetRelAdd+0x48>
 800c43c:	20000754 	.word	0x20000754
 800c440:	10624dd3 	.word	0x10624dd3
 800c444:	fffee0c0 	.word	0xfffee0c0
 800c448:	002000c5 	.word	0x002000c5

0800c44c <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c44c:	4a50      	ldr	r2, [pc, #320]	; (800c590 <SDMMC_CmdSendStatus+0x144>)
{
 800c44e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c450:	4b50      	ldr	r3, [pc, #320]	; (800c594 <SDMMC_CmdSendStatus+0x148>)
 800c452:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c454:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c458:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c45c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c460:	484d      	ldr	r0, [pc, #308]	; (800c598 <SDMMC_CmdSendStatus+0x14c>)
 800c462:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c466:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c468:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c46a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c46e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c470:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c474:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c478:	1e53      	subs	r3, r2, #1
 800c47a:	b14a      	cbz	r2, 800c490 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c47c:	4947      	ldr	r1, [pc, #284]	; (800c59c <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
 800c47e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c482:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c484:	420a      	tst	r2, r1
 800c486:	d001      	beq.n	800c48c <SDMMC_CmdSendStatus+0x40>
 800c488:	0492      	lsls	r2, r2, #18
 800c48a:	d504      	bpl.n	800c496 <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800c48c:	1c58      	adds	r0, r3, #1
 800c48e:	d1f6      	bne.n	800c47e <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c490:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c494:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c496:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c49a:	0758      	lsls	r0, r3, #29
 800c49c:	d445      	bmi.n	800c52a <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c49e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c4a2:	f010 0001 	ands.w	r0, r0, #1
 800c4a6:	d137      	bne.n	800c518 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4a8:	4b3d      	ldr	r3, [pc, #244]	; (800c5a0 <SDMMC_CmdSendStatus+0x154>)
 800c4aa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c4ae:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c4b2:	b2db      	uxtb	r3, r3
 800c4b4:	2b0d      	cmp	r3, #13
 800c4b6:	d136      	bne.n	800c526 <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
 800c4b8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c4bc:	4839      	ldr	r0, [pc, #228]	; (800c5a4 <SDMMC_CmdSendStatus+0x158>)
 800c4be:	4018      	ands	r0, r3
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d02f      	beq.n	800c524 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	db35      	blt.n	800c534 <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c4c8:	0059      	lsls	r1, r3, #1
 800c4ca:	d436      	bmi.n	800c53a <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c4cc:	009a      	lsls	r2, r3, #2
 800c4ce:	d436      	bmi.n	800c53e <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c4d0:	00d9      	lsls	r1, r3, #3
 800c4d2:	d436      	bmi.n	800c542 <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c4d4:	011a      	lsls	r2, r3, #4
 800c4d6:	d437      	bmi.n	800c548 <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c4d8:	0159      	lsls	r1, r3, #5
 800c4da:	d438      	bmi.n	800c54e <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c4dc:	01da      	lsls	r2, r3, #7
 800c4de:	d439      	bmi.n	800c554 <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c4e0:	0219      	lsls	r1, r3, #8
 800c4e2:	d43a      	bmi.n	800c55a <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c4e4:	025a      	lsls	r2, r3, #9
 800c4e6:	d43b      	bmi.n	800c560 <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c4e8:	0299      	lsls	r1, r3, #10
 800c4ea:	d445      	bmi.n	800c578 <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c4ec:	02da      	lsls	r2, r3, #11
 800c4ee:	d440      	bmi.n	800c572 <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4f0:	0359      	lsls	r1, r3, #13
 800c4f2:	d43b      	bmi.n	800c56c <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4f4:	039a      	lsls	r2, r3, #14
 800c4f6:	d436      	bmi.n	800c566 <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4f8:	03d9      	lsls	r1, r3, #15
 800c4fa:	d446      	bmi.n	800c58a <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4fc:	041a      	lsls	r2, r3, #16
 800c4fe:	d441      	bmi.n	800c584 <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c500:	0459      	lsls	r1, r3, #17
 800c502:	d43c      	bmi.n	800c57e <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c504:	049a      	lsls	r2, r3, #18
 800c506:	d40b      	bmi.n	800c520 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c508:	f013 0f08 	tst.w	r3, #8
 800c50c:	bf14      	ite	ne
 800c50e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c512:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c516:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c518:	2301      	movs	r3, #1
 800c51a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c51e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c520:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c524:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c526:	2001      	movs	r0, #1
 800c528:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c52a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c52c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c52e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c532:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c534:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c538:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c53a:	2040      	movs	r0, #64	; 0x40
 800c53c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c53e:	2080      	movs	r0, #128	; 0x80
 800c540:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c542:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c546:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c548:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c54c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c54e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c552:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c554:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c558:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c55a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c55e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c560:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c564:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c566:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c56a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c56c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c570:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c572:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c576:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c578:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c57c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c57e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c582:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c584:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c588:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c58a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c58e:	4770      	bx	lr
 800c590:	20000754 	.word	0x20000754
 800c594:	10624dd3 	.word	0x10624dd3
 800c598:	fffee0c0 	.word	0xfffee0c0
 800c59c:	00200045 	.word	0x00200045
 800c5a0:	002000c5 	.word	0x002000c5
 800c5a4:	fdffe008 	.word	0xfdffe008

0800c5a8 <SDMMC_CmdStatusRegister>:
{
 800c5a8:	b410      	push	{r4}
 800c5aa:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c5ac:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c5ae:	4a4c      	ldr	r2, [pc, #304]	; (800c6e0 <SDMMC_CmdStatusRegister+0x138>)
 800c5b0:	4b4c      	ldr	r3, [pc, #304]	; (800c6e4 <SDMMC_CmdStatusRegister+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800c5b2:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c5b4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5b6:	68cc      	ldr	r4, [r1, #12]
 800c5b8:	484b      	ldr	r0, [pc, #300]	; (800c6e8 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c5ba:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5be:	f241 130d 	movw	r3, #4365	; 0x110d
 800c5c2:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c5c4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5c6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c5c8:	f241 3088 	movw	r0, #5000	; 0x1388
 800c5cc:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5d0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c5d2:	b14a      	cbz	r2, 800c5e8 <SDMMC_CmdStatusRegister+0x40>
 800c5d4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c5d6:	4845      	ldr	r0, [pc, #276]	; (800c6ec <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800c5d8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c5da:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c5dc:	4202      	tst	r2, r0
 800c5de:	d001      	beq.n	800c5e4 <SDMMC_CmdStatusRegister+0x3c>
 800c5e0:	0494      	lsls	r4, r2, #18
 800c5e2:	d506      	bpl.n	800c5f2 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800c5e4:	1c5a      	adds	r2, r3, #1
 800c5e6:	d1f7      	bne.n	800c5d8 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c5e8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5f0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5f2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c5f4:	0758      	lsls	r0, r3, #29
 800c5f6:	d43d      	bmi.n	800c674 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5f8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c5fa:	f010 0001 	ands.w	r0, r0, #1
 800c5fe:	d134      	bne.n	800c66a <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c600:	4b3b      	ldr	r3, [pc, #236]	; (800c6f0 <SDMMC_CmdStatusRegister+0x148>)
 800c602:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c604:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c606:	b2db      	uxtb	r3, r3
 800c608:	2b0d      	cmp	r3, #13
 800c60a:	d131      	bne.n	800c670 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800c60c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c60e:	4839      	ldr	r0, [pc, #228]	; (800c6f4 <SDMMC_CmdStatusRegister+0x14c>)
 800c610:	4018      	ands	r0, r3
 800c612:	2800      	cmp	r0, #0
 800c614:	d0ea      	beq.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c616:	2b00      	cmp	r3, #0
 800c618:	db30      	blt.n	800c67c <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c61a:	005a      	lsls	r2, r3, #1
 800c61c:	d431      	bmi.n	800c682 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c61e:	009c      	lsls	r4, r3, #2
 800c620:	d431      	bmi.n	800c686 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c622:	00d9      	lsls	r1, r3, #3
 800c624:	d431      	bmi.n	800c68a <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c626:	011a      	lsls	r2, r3, #4
 800c628:	d432      	bmi.n	800c690 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c62a:	015c      	lsls	r4, r3, #5
 800c62c:	d433      	bmi.n	800c696 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c62e:	01d9      	lsls	r1, r3, #7
 800c630:	d434      	bmi.n	800c69c <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c632:	021a      	lsls	r2, r3, #8
 800c634:	d435      	bmi.n	800c6a2 <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c636:	025c      	lsls	r4, r3, #9
 800c638:	d436      	bmi.n	800c6a8 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c63a:	0299      	lsls	r1, r3, #10
 800c63c:	d440      	bmi.n	800c6c0 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c63e:	02da      	lsls	r2, r3, #11
 800c640:	d43b      	bmi.n	800c6ba <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c642:	035c      	lsls	r4, r3, #13
 800c644:	d436      	bmi.n	800c6b4 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c646:	0399      	lsls	r1, r3, #14
 800c648:	d431      	bmi.n	800c6ae <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c64a:	03da      	lsls	r2, r3, #15
 800c64c:	d444      	bmi.n	800c6d8 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c64e:	041c      	lsls	r4, r3, #16
 800c650:	d43f      	bmi.n	800c6d2 <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c652:	0459      	lsls	r1, r3, #17
 800c654:	d43a      	bmi.n	800c6cc <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c656:	049a      	lsls	r2, r3, #18
 800c658:	d435      	bmi.n	800c6c6 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c65a:	f013 0f08 	tst.w	r3, #8
 800c65e:	bf14      	ite	ne
 800c660:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c664:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c668:	e7c0      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c66a:	2301      	movs	r3, #1
 800c66c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c66e:	e7bd      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c670:	2001      	movs	r0, #1
 800c672:	e7bb      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c674:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c676:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c678:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c67a:	e7b7      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c67c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c680:	e7b4      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c682:	2040      	movs	r0, #64	; 0x40
 800c684:	e7b2      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c686:	2080      	movs	r0, #128	; 0x80
 800c688:	e7b0      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c68a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c68e:	e7ad      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c690:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c694:	e7aa      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c696:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c69a:	e7a7      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c69c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c6a0:	e7a4      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c6a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c6a6:	e7a1      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c6a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c6ac:	e79e      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c6ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c6b2:	e79b      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c6b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c6b8:	e798      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c6ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c6be:	e795      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c6c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c6c4:	e792      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c6c6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c6ca:	e78f      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c6cc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c6d0:	e78c      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c6d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c6d6:	e789      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c6d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c6dc:	e786      	b.n	800c5ec <SDMMC_CmdStatusRegister+0x44>
 800c6de:	bf00      	nop
 800c6e0:	20000754 	.word	0x20000754
 800c6e4:	10624dd3 	.word	0x10624dd3
 800c6e8:	fffee0c0 	.word	0xfffee0c0
 800c6ec:	00200045 	.word	0x00200045
 800c6f0:	002000c5 	.word	0x002000c5
 800c6f4:	fdffe008 	.word	0xfdffe008

0800c6f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c6f8:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c6fa:	4903      	ldr	r1, [pc, #12]	; (800c708 <MX_FATFS_Init+0x10>)
 800c6fc:	4803      	ldr	r0, [pc, #12]	; (800c70c <MX_FATFS_Init+0x14>)
 800c6fe:	f003 f825 	bl	800f74c <FATFS_LinkDriver>
 800c702:	4b03      	ldr	r3, [pc, #12]	; (800c710 <MX_FATFS_Init+0x18>)
 800c704:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c706:	bd08      	pop	{r3, pc}
 800c708:	2001d5ac 	.word	0x2001d5ac
 800c70c:	0801b540 	.word	0x0801b540
 800c710:	2001d5b0 	.word	0x2001d5b0

0800c714 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800c714:	2000      	movs	r0, #0
 800c716:	4770      	bx	lr

0800c718 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c718:	b510      	push	{r4, lr}
 800c71a:	4694      	mov	ip, r2
 800c71c:	b082      	sub	sp, #8
 800c71e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c720:	460a      	mov	r2, r1
 800c722:	4663      	mov	r3, ip
 800c724:	4601      	mov	r1, r0
 800c726:	9400      	str	r4, [sp, #0]
 800c728:	4803      	ldr	r0, [pc, #12]	; (800c738 <BSP_SD_ReadBlocks+0x20>)
 800c72a:	f7fd f80f 	bl	800974c <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800c72e:	3800      	subs	r0, #0
 800c730:	bf18      	it	ne
 800c732:	2001      	movne	r0, #1
 800c734:	b002      	add	sp, #8
 800c736:	bd10      	pop	{r4, pc}
 800c738:	2001c284 	.word	0x2001c284

0800c73c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c73c:	b510      	push	{r4, lr}
 800c73e:	4694      	mov	ip, r2
 800c740:	b082      	sub	sp, #8
 800c742:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c744:	460a      	mov	r2, r1
 800c746:	4663      	mov	r3, ip
 800c748:	4601      	mov	r1, r0
 800c74a:	9400      	str	r4, [sp, #0]
 800c74c:	4803      	ldr	r0, [pc, #12]	; (800c75c <BSP_SD_WriteBlocks+0x20>)
 800c74e:	f7fd f8ed 	bl	800992c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800c752:	3800      	subs	r0, #0
 800c754:	bf18      	it	ne
 800c756:	2001      	movne	r0, #1
 800c758:	b002      	add	sp, #8
 800c75a:	bd10      	pop	{r4, pc}
 800c75c:	2001c284 	.word	0x2001c284

0800c760 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c760:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c762:	4803      	ldr	r0, [pc, #12]	; (800c770 <BSP_SD_GetCardState+0x10>)
 800c764:	f7fd fd3c 	bl	800a1e0 <HAL_SD_GetCardState>
}
 800c768:	3804      	subs	r0, #4
 800c76a:	bf18      	it	ne
 800c76c:	2001      	movne	r0, #1
 800c76e:	bd08      	pop	{r3, pc}
 800c770:	2001c284 	.word	0x2001c284

0800c774 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c774:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c776:	4801      	ldr	r0, [pc, #4]	; (800c77c <BSP_SD_GetCardInfo+0x8>)
 800c778:	f7fd bbec 	b.w	8009f54 <HAL_SD_GetCardInfo>
 800c77c:	2001c284 	.word	0x2001c284

0800c780 <BSP_SD_WriteCpltCallback>:
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop

0800c784 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c784:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800c786:	f7ff fffb 	bl	800c780 <BSP_SD_WriteCpltCallback>
}
 800c78a:	bd08      	pop	{r3, pc}

0800c78c <BSP_SD_ReadCpltCallback>:
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop

0800c790 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c790:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800c792:	f7ff fffb 	bl	800c78c <BSP_SD_ReadCpltCallback>
}
 800c796:	bd08      	pop	{r3, pc}

0800c798 <BSP_SD_Init>:
{
 800c798:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c79a:	f7f4 fd79 	bl	8001290 <BSP_SD_IsDetected>
 800c79e:	2801      	cmp	r0, #1
 800c7a0:	d001      	beq.n	800c7a6 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800c7a2:	2002      	movs	r0, #2
}
 800c7a4:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800c7a6:	4807      	ldr	r0, [pc, #28]	; (800c7c4 <BSP_SD_Init+0x2c>)
 800c7a8:	f7fd fcb2 	bl	800a110 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d1f9      	bne.n	800c7a4 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c7b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c7b4:	4803      	ldr	r0, [pc, #12]	; (800c7c4 <BSP_SD_Init+0x2c>)
 800c7b6:	f7fd fbe1 	bl	8009f7c <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800c7ba:	3800      	subs	r0, #0
 800c7bc:	bf18      	it	ne
 800c7be:	2001      	movne	r0, #1
}
 800c7c0:	bd08      	pop	{r3, pc}
 800c7c2:	bf00      	nop
 800c7c4:	2001c284 	.word	0x2001c284

0800c7c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c7c8:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800c7ca:	4c0a      	ldr	r4, [pc, #40]	; (800c7f4 <SD_initialize+0x2c>)
 800c7cc:	2501      	movs	r5, #1
 800c7ce:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c7d0:	f7ff ffe2 	bl	800c798 <BSP_SD_Init>
 800c7d4:	b108      	cbz	r0, 800c7da <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c7d6:	7820      	ldrb	r0, [r4, #0]
}
 800c7d8:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800c7da:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800c7dc:	f7ff ffc0 	bl	800c760 <BSP_SD_GetCardState>
 800c7e0:	b918      	cbnz	r0, 800c7ea <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800c7e2:	7823      	ldrb	r3, [r4, #0]
 800c7e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c7e8:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c7ea:	7823      	ldrb	r3, [r4, #0]
 800c7ec:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800c7ee:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c7f0:	7820      	ldrb	r0, [r4, #0]
}
 800c7f2:	bd38      	pop	{r3, r4, r5, pc}
 800c7f4:	20000768 	.word	0x20000768

0800c7f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c7f8:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	4c05      	ldr	r4, [pc, #20]	; (800c814 <SD_status+0x1c>)
 800c7fe:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800c800:	f7ff ffae 	bl	800c760 <BSP_SD_GetCardState>
 800c804:	b918      	cbnz	r0, 800c80e <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800c806:	7823      	ldrb	r3, [r4, #0]
 800c808:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c80c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800c80e:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800c810:	bd10      	pop	{r4, pc}
 800c812:	bf00      	nop
 800c814:	20000768 	.word	0x20000768

0800c818 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c818:	b508      	push	{r3, lr}
 800c81a:	4608      	mov	r0, r1
 800c81c:	4611      	mov	r1, r2
 800c81e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c824:	f7ff ff78 	bl	800c718 <BSP_SD_ReadBlocks>
 800c828:	b108      	cbz	r0, 800c82e <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800c82a:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800c82c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c82e:	f7ff ff97 	bl	800c760 <BSP_SD_GetCardState>
 800c832:	2800      	cmp	r0, #0
 800c834:	d0fa      	beq.n	800c82c <SD_read+0x14>
 800c836:	f7ff ff93 	bl	800c760 <BSP_SD_GetCardState>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d1f7      	bne.n	800c82e <SD_read+0x16>
 800c83e:	e7f5      	b.n	800c82c <SD_read+0x14>

0800c840 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c840:	4b18      	ldr	r3, [pc, #96]	; (800c8a4 <SD_ioctl+0x64>)
{
 800c842:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c844:	7818      	ldrb	r0, [r3, #0]
{
 800c846:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c848:	f010 0401 	ands.w	r4, r0, #1
 800c84c:	d106      	bne.n	800c85c <SD_ioctl+0x1c>
 800c84e:	4615      	mov	r5, r2

  switch (cmd)
 800c850:	2903      	cmp	r1, #3
 800c852:	d824      	bhi.n	800c89e <SD_ioctl+0x5e>
 800c854:	e8df f001 	tbb	[pc, r1]
 800c858:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c85c:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800c85e:	4620      	mov	r0, r4
 800c860:	b00b      	add	sp, #44	; 0x2c
 800c862:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800c864:	460c      	mov	r4, r1
}
 800c866:	4620      	mov	r0, r4
 800c868:	b00b      	add	sp, #44	; 0x2c
 800c86a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c86c:	a801      	add	r0, sp, #4
 800c86e:	f7ff ff81 	bl	800c774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c872:	9b07      	ldr	r3, [sp, #28]
}
 800c874:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c876:	602b      	str	r3, [r5, #0]
}
 800c878:	b00b      	add	sp, #44	; 0x2c
 800c87a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c87c:	a801      	add	r0, sp, #4
 800c87e:	f7ff ff79 	bl	800c774 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c882:	9b08      	ldr	r3, [sp, #32]
}
 800c884:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c886:	802b      	strh	r3, [r5, #0]
}
 800c888:	b00b      	add	sp, #44	; 0x2c
 800c88a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800c88c:	a801      	add	r0, sp, #4
 800c88e:	f7ff ff71 	bl	800c774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c892:	9b08      	ldr	r3, [sp, #32]
}
 800c894:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c896:	0a5b      	lsrs	r3, r3, #9
 800c898:	602b      	str	r3, [r5, #0]
}
 800c89a:	b00b      	add	sp, #44	; 0x2c
 800c89c:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800c89e:	2404      	movs	r4, #4
 800c8a0:	e7dd      	b.n	800c85e <SD_ioctl+0x1e>
 800c8a2:	bf00      	nop
 800c8a4:	20000768 	.word	0x20000768

0800c8a8 <SD_write>:
{
 800c8a8:	b508      	push	{r3, lr}
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c8b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8b4:	f7ff ff42 	bl	800c73c <BSP_SD_WriteBlocks>
 800c8b8:	b108      	cbz	r0, 800c8be <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800c8ba:	2001      	movs	r0, #1
}
 800c8bc:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c8be:	f7ff ff4f 	bl	800c760 <BSP_SD_GetCardState>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d0fa      	beq.n	800c8bc <SD_write+0x14>
 800c8c6:	f7ff ff4b 	bl	800c760 <BSP_SD_GetCardState>
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d1f7      	bne.n	800c8be <SD_write+0x16>
 800c8ce:	e7f5      	b.n	800c8bc <SD_write+0x14>

0800c8d0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c8d0:	4b03      	ldr	r3, [pc, #12]	; (800c8e0 <disk_status+0x10>)
 800c8d2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800c8d6:	4418      	add	r0, r3
 800c8d8:	6853      	ldr	r3, [r2, #4]
 800c8da:	7a00      	ldrb	r0, [r0, #8]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	4718      	bx	r3
 800c8e0:	2001d7dc 	.word	0x2001d7dc

0800c8e4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800c8e4:	4b07      	ldr	r3, [pc, #28]	; (800c904 <disk_initialize+0x20>)
 800c8e6:	5c1a      	ldrb	r2, [r3, r0]
 800c8e8:	b952      	cbnz	r2, 800c900 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c8ea:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800c8ee:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800c8f0:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c8f4:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800c8f6:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c8fa:	7a08      	ldrb	r0, [r1, #8]
 800c8fc:	6813      	ldr	r3, [r2, #0]
 800c8fe:	4718      	bx	r3
  }
  return stat;
}
 800c900:	2000      	movs	r0, #0
 800c902:	4770      	bx	lr
 800c904:	2001d7dc 	.word	0x2001d7dc

0800c908 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c908:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c90a:	4c06      	ldr	r4, [pc, #24]	; (800c924 <disk_read+0x1c>)
 800c90c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800c910:	4420      	add	r0, r4
 800c912:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800c916:	7a00      	ldrb	r0, [r0, #8]
 800c918:	68a4      	ldr	r4, [r4, #8]
 800c91a:	46a4      	mov	ip, r4
  return res;
}
 800c91c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c920:	4760      	bx	ip
 800c922:	bf00      	nop
 800c924:	2001d7dc 	.word	0x2001d7dc

0800c928 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c928:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c92a:	4c06      	ldr	r4, [pc, #24]	; (800c944 <disk_write+0x1c>)
 800c92c:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800c930:	4420      	add	r0, r4
 800c932:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800c936:	7a00      	ldrb	r0, [r0, #8]
 800c938:	68e4      	ldr	r4, [r4, #12]
 800c93a:	46a4      	mov	ip, r4
  return res;
}
 800c93c:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c940:	4760      	bx	ip
 800c942:	bf00      	nop
 800c944:	2001d7dc 	.word	0x2001d7dc

0800c948 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c948:	4b04      	ldr	r3, [pc, #16]	; (800c95c <disk_ioctl+0x14>)
 800c94a:	eb03 0c00 	add.w	ip, r3, r0
 800c94e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c952:	6843      	ldr	r3, [r0, #4]
 800c954:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	4718      	bx	r3
 800c95c:	2001d7dc 	.word	0x2001d7dc

0800c960 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800c960:	4b2a      	ldr	r3, [pc, #168]	; (800ca0c <inc_lock+0xac>)
{
 800c962:	4684      	mov	ip, r0
 800c964:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	6804      	ldr	r4, [r0, #0]
 800c96a:	4294      	cmp	r4, r2
 800c96c:	d01c      	beq.n	800c9a8 <inc_lock+0x48>
 800c96e:	6918      	ldr	r0, [r3, #16]
 800c970:	42a0      	cmp	r0, r4
 800c972:	d005      	beq.n	800c980 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c974:	b372      	cbz	r2, 800c9d4 <inc_lock+0x74>
 800c976:	2800      	cmp	r0, #0
 800c978:	d044      	beq.n	800ca04 <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c97a:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800c97c:	bc70      	pop	{r4, r5, r6}
 800c97e:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800c980:	695d      	ldr	r5, [r3, #20]
 800c982:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800c986:	42b5      	cmp	r5, r6
 800c988:	d1f4      	bne.n	800c974 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800c98a:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800c98e:	699e      	ldr	r6, [r3, #24]
 800c990:	42ae      	cmp	r6, r5
 800c992:	d1ef      	bne.n	800c974 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c994:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c996:	b999      	cbnz	r1, 800c9c0 <inc_lock+0x60>
 800c998:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c99c:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c99e:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9a0:	89a2      	ldrh	r2, [r4, #12]
 800c9a2:	3201      	adds	r2, #1
 800c9a4:	b292      	uxth	r2, r2
 800c9a6:	e029      	b.n	800c9fc <inc_lock+0x9c>
		if (Files[i].fs == dp->obj.fs &&
 800c9a8:	6880      	ldr	r0, [r0, #8]
 800c9aa:	685d      	ldr	r5, [r3, #4]
 800c9ac:	4285      	cmp	r5, r0
 800c9ae:	d1de      	bne.n	800c96e <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800c9b0:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800c9b4:	6898      	ldr	r0, [r3, #8]
 800c9b6:	4285      	cmp	r5, r0
 800c9b8:	d1d9      	bne.n	800c96e <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c9ba:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9bc:	2900      	cmp	r1, #0
 800c9be:	d0eb      	beq.n	800c998 <inc_lock+0x38>
 800c9c0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c9c4:	0111      	lsls	r1, r2, #4
 800c9c6:	8980      	ldrh	r0, [r0, #12]
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d1d6      	bne.n	800c97a <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c9cc:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9d2:	e013      	b.n	800c9fc <inc_lock+0x9c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c9d4:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9d6:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800c9d8:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800c9dc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800c9e0:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800c9e2:	f8dc 4014 	ldr.w	r4, [ip, #20]
 800c9e6:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800c9ea:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
 800c9ee:	f04f 0400 	mov.w	r4, #0
 800c9f2:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9f4:	bf14      	ite	ne
 800c9f6:	f44f 7280 	movne.w	r2, #256	; 0x100
 800c9fa:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9fc:	440b      	add	r3, r1
 800c9fe:	819a      	strh	r2, [r3, #12]
}
 800ca00:	bc70      	pop	{r4, r5, r6}
 800ca02:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ca04:	2002      	movs	r0, #2
 800ca06:	2201      	movs	r2, #1
 800ca08:	e7e5      	b.n	800c9d6 <inc_lock+0x76>
 800ca0a:	bf00      	nop
 800ca0c:	2001d5b8 	.word	0x2001d5b8

0800ca10 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800ca10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca14:	440a      	add	r2, r1
 800ca16:	460d      	mov	r5, r1
 800ca18:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ca1a:	4f37      	ldr	r7, [pc, #220]	; (800caf8 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800ca1c:	42aa      	cmp	r2, r5
 800ca1e:	d012      	beq.n	800ca46 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ca20:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ca24:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ca28:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ca2c:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ca30:	2919      	cmp	r1, #25
 800ca32:	d9f3      	bls.n	800ca1c <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ca34:	2c7f      	cmp	r4, #127	; 0x7f
 800ca36:	bf88      	it	hi
 800ca38:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800ca3c:	2c00      	cmp	r4, #0
 800ca3e:	d1ed      	bne.n	800ca1c <pattern_matching+0xc>
 800ca40:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800ca42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800ca46:	1e1f      	subs	r7, r3, #0
 800ca48:	f896 8000 	ldrb.w	r8, [r6]
 800ca4c:	bf18      	it	ne
 800ca4e:	2701      	movne	r7, #1
 800ca50:	f1b8 0f00 	cmp.w	r8, #0
 800ca54:	d100      	bne.n	800ca58 <pattern_matching+0x48>
 800ca56:	bb8f      	cbnz	r7, 800cabc <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ca58:	4c27      	ldr	r4, [pc, #156]	; (800caf8 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ca5a:	4630      	mov	r0, r6
{
 800ca5c:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ca5e:	46a9      	mov	r9, r5
 800ca60:	e010      	b.n	800ca84 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ca62:	3a20      	subs	r2, #32
 800ca64:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ca66:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ca6a:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ca6e:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ca70:	f1bc 0f19 	cmp.w	ip, #25
 800ca74:	d815      	bhi.n	800caa2 <pattern_matching+0x92>
 800ca76:	3b20      	subs	r3, #32
 800ca78:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d118      	bne.n	800cab0 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800ca7e:	b1eb      	cbz	r3, 800cabc <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800ca80:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ca84:	2b3f      	cmp	r3, #63	; 0x3f
 800ca86:	d01c      	beq.n	800cac2 <pattern_matching+0xb2>
 800ca88:	2b2a      	cmp	r3, #42	; 0x2a
 800ca8a:	d01a      	beq.n	800cac2 <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ca8c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ca90:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ca92:	2919      	cmp	r1, #25
 800ca94:	d9e5      	bls.n	800ca62 <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ca96:	2a7f      	cmp	r2, #127	; 0x7f
 800ca98:	d9e5      	bls.n	800ca66 <pattern_matching+0x56>
 800ca9a:	4423      	add	r3, r4
 800ca9c:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800caa0:	e7e1      	b.n	800ca66 <pattern_matching+0x56>
 800caa2:	2b7f      	cmp	r3, #127	; 0x7f
 800caa4:	d9e9      	bls.n	800ca7a <pattern_matching+0x6a>
 800caa6:	4421      	add	r1, r4
 800caa8:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800caac:	4293      	cmp	r3, r2
 800caae:	d0e6      	beq.n	800ca7e <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800cab0:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d0c4      	beq.n	800ca40 <pattern_matching+0x30>
 800cab6:	2f00      	cmp	r7, #0
 800cab8:	d1cf      	bne.n	800ca5a <pattern_matching+0x4a>
 800caba:	e7c1      	b.n	800ca40 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800cabc:	2001      	movs	r0, #1
}
 800cabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac2:	4601      	mov	r1, r0
				nm = nx = 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	f811 cb01 	ldrb.w	ip, [r1], #1
 800caca:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800cacc:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800cad0:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800cad2:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800cad6:	bf0c      	ite	eq
 800cad8:	3201      	addeq	r2, #1
 800cada:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800cadc:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800cae0:	d0f4      	beq.n	800cacc <pattern_matching+0xbc>
 800cae2:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800cae6:	d0f1      	beq.n	800cacc <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800cae8:	4649      	mov	r1, r9
 800caea:	f7ff ff91 	bl	800ca10 <pattern_matching>
 800caee:	2800      	cmp	r0, #0
 800caf0:	d1e4      	bne.n	800cabc <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 800caf2:	f899 3000 	ldrb.w	r3, [r9]
 800caf6:	e7db      	b.n	800cab0 <pattern_matching+0xa0>
 800caf8:	0801b568 	.word	0x0801b568

0800cafc <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800cafc:	2300      	movs	r3, #0
{
 800cafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800cb02:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800cb06:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cb08:	69c2      	ldr	r2, [r0, #28]
 800cb0a:	2a00      	cmp	r2, #0
 800cb0c:	d063      	beq.n	800cbd6 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cb0e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800cb10:	4604      	mov	r4, r0
 800cb12:	460d      	mov	r5, r1
 800cb14:	3201      	adds	r2, #1
 800cb16:	d01f      	beq.n	800cb58 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cb18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb1c:	8818      	ldrh	r0, [r3, #0]
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d063      	beq.n	800cbea <get_fileinfo+0xee>
 800cb22:	f101 0715 	add.w	r7, r1, #21
 800cb26:	2601      	movs	r6, #1
 800cb28:	e000      	b.n	800cb2c <get_fileinfo+0x30>
 800cb2a:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	f002 fe33 	bl	800f798 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cb32:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cb34:	2800      	cmp	r0, #0
 800cb36:	d058      	beq.n	800cbea <get_fileinfo+0xee>
 800cb38:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800cb3c:	d055      	beq.n	800cbea <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 800cb3e:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cb42:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800cb46:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d1ed      	bne.n	800cb2a <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cb4e:	442e      	add	r6, r5
 800cb50:	2300      	movs	r3, #0
 800cb52:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cb54:	7da8      	ldrb	r0, [r5, #22]
 800cb56:	e000      	b.n	800cb5a <get_fileinfo+0x5e>
 800cb58:	4618      	mov	r0, r3
	i = j = 0;
 800cb5a:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 800cb5e:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 800cb60:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 800cb62:	6a21      	ldr	r1, [r4, #32]
 800cb64:	5c8b      	ldrb	r3, [r1, r2]
 800cb66:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800cb68:	2b20      	cmp	r3, #32
 800cb6a:	d01b      	beq.n	800cba4 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cb6c:	2b05      	cmp	r3, #5
 800cb6e:	bf08      	it	eq
 800cb70:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800cb72:	2a09      	cmp	r2, #9
 800cb74:	d031      	beq.n	800cbda <get_fileinfo+0xde>
		fno->altname[j] = c;
 800cb76:	eb05 010c 	add.w	r1, r5, ip
 800cb7a:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800cb7c:	b980      	cbnz	r0, 800cba0 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cb7e:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 800cb82:	2e19      	cmp	r6, #25
 800cb84:	d80b      	bhi.n	800cb9e <get_fileinfo+0xa2>
 800cb86:	6a26      	ldr	r6, [r4, #32]
 800cb88:	2a08      	cmp	r2, #8
 800cb8a:	f896 e00c 	ldrb.w	lr, [r6, #12]
 800cb8e:	bf8c      	ite	hi
 800cb90:	2610      	movhi	r6, #16
 800cb92:	2608      	movls	r6, #8
 800cb94:	ea1e 0f06 	tst.w	lr, r6
 800cb98:	d001      	beq.n	800cb9e <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800cb9a:	3320      	adds	r3, #32
 800cb9c:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 800cb9e:	758b      	strb	r3, [r1, #22]
		j++;
 800cba0:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800cba4:	2a0b      	cmp	r2, #11
 800cba6:	d1dc      	bne.n	800cb62 <get_fileinfo+0x66>
		fno->fname[j] = 0;
 800cba8:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 800cbac:	b928      	cbnz	r0, 800cbba <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 800cbae:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cbb0:	6a23      	ldr	r3, [r4, #32]
 800cbb2:	7b1b      	ldrb	r3, [r3, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	bf08      	it	eq
 800cbb8:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cbba:	2300      	movs	r3, #0
 800cbbc:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cbbe:	6a23      	ldr	r3, [r4, #32]
 800cbc0:	7adb      	ldrb	r3, [r3, #11]
 800cbc2:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800cbc4:	6a23      	ldr	r3, [r4, #32]
 800cbc6:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cbc8:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800cbca:	6a23      	ldr	r3, [r4, #32]
 800cbcc:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cbd0:	0c1a      	lsrs	r2, r3, #16
 800cbd2:	80eb      	strh	r3, [r5, #6]
 800cbd4:	80aa      	strh	r2, [r5, #4]
}
 800cbd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800cbda:	eb05 010c 	add.w	r1, r5, ip
 800cbde:	b900      	cbnz	r0, 800cbe2 <get_fileinfo+0xe6>
 800cbe0:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800cbe2:	f10c 0c01 	add.w	ip, ip, #1
 800cbe6:	724f      	strb	r7, [r1, #9]
 800cbe8:	e7c5      	b.n	800cb76 <get_fileinfo+0x7a>
			i = j = 0;
 800cbea:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cbec:	2300      	movs	r3, #0
 800cbee:	442e      	add	r6, r5
 800cbf0:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cbf2:	7da8      	ldrb	r0, [r5, #22]
 800cbf4:	e7b1      	b.n	800cb5a <get_fileinfo+0x5e>
 800cbf6:	bf00      	nop

0800cbf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cbf8:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cbfa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800cbfe:	2300      	movs	r3, #0
{
 800cc00:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc02:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cc04:	70c3      	strb	r3, [r0, #3]
 800cc06:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc08:	d00c      	beq.n	800cc24 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	460a      	mov	r2, r1
 800cc0e:	2301      	movs	r3, #1
 800cc10:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800cc14:	7840      	ldrb	r0, [r0, #1]
 800cc16:	f7ff fe77 	bl	800c908 <disk_read>
 800cc1a:	b110      	cbz	r0, 800cc22 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cc1c:	2004      	movs	r0, #4
			fs->winsect = sector;
 800cc1e:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800cc20:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800cc22:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cc24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cc28:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d11a      	bne.n	800cc66 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cc30:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800cc34:	2be9      	cmp	r3, #233	; 0xe9
 800cc36:	d007      	beq.n	800cc48 <check_fs+0x50>
 800cc38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc3a:	4a0d      	ldr	r2, [pc, #52]	; (800cc70 <check_fs+0x78>)
 800cc3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d001      	beq.n	800cc48 <check_fs+0x50>
	return 2;
 800cc44:	2002      	movs	r0, #2
}
 800cc46:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800cc48:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cc4c:	4a09      	ldr	r2, [pc, #36]	; (800cc74 <check_fs+0x7c>)
 800cc4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d009      	beq.n	800cc6a <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800cc56:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cc5a:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <check_fs+0x80>)
 800cc5c:	1ac0      	subs	r0, r0, r3
 800cc5e:	bf18      	it	ne
 800cc60:	2001      	movne	r0, #1
 800cc62:	0040      	lsls	r0, r0, #1
}
 800cc64:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cc66:	2003      	movs	r0, #3
}
 800cc68:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cc6a:	2000      	movs	r0, #0
}
 800cc6c:	bd70      	pop	{r4, r5, r6, pc}
 800cc6e:	bf00      	nop
 800cc70:	009000eb 	.word	0x009000eb
 800cc74:	00544146 	.word	0x00544146
 800cc78:	33544146 	.word	0x33544146

0800cc7c <move_window>:
{
 800cc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc7e:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
 800cc80:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc82:	428e      	cmp	r6, r1
 800cc84:	d024      	beq.n	800ccd0 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cc86:	78c3      	ldrb	r3, [r0, #3]
 800cc88:	460d      	mov	r5, r1
 800cc8a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cc8c:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cc90:	b963      	cbnz	r3, 800ccac <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cc92:	2301      	movs	r3, #1
 800cc94:	462a      	mov	r2, r5
 800cc96:	7860      	ldrb	r0, [r4, #1]
 800cc98:	f7ff fe36 	bl	800c908 <disk_read>
 800cc9c:	b910      	cbnz	r0, 800cca4 <move_window+0x28>
			fs->winsect = sector;
 800cc9e:	6325      	str	r5, [r4, #48]	; 0x30
}
 800cca0:	b003      	add	sp, #12
 800cca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 800cca4:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cca6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ccaa:	e7f8      	b.n	800cc9e <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ccac:	2301      	movs	r3, #1
 800ccae:	4632      	mov	r2, r6
 800ccb0:	7840      	ldrb	r0, [r0, #1]
 800ccb2:	9101      	str	r1, [sp, #4]
 800ccb4:	f7ff fe38 	bl	800c928 <disk_write>
 800ccb8:	b9d0      	cbnz	r0, 800ccf0 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ccba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ccbc:	69e3      	ldr	r3, [r4, #28]
 800ccbe:	1ab2      	subs	r2, r6, r2
 800ccc0:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 800ccc2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d2e4      	bcs.n	800cc92 <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ccc8:	78a7      	ldrb	r7, [r4, #2]
 800ccca:	2f01      	cmp	r7, #1
 800cccc:	d804      	bhi.n	800ccd8 <move_window+0x5c>
 800ccce:	e7e0      	b.n	800cc92 <move_window+0x16>
	FRESULT res = FR_OK;
 800ccd0:	2000      	movs	r0, #0
}
 800ccd2:	b003      	add	sp, #12
 800ccd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 800ccd6:	69e3      	ldr	r3, [r4, #28]
 800ccd8:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ccda:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800ccdc:	2301      	movs	r3, #1
 800ccde:	7860      	ldrb	r0, [r4, #1]
 800cce0:	4632      	mov	r2, r6
 800cce2:	9101      	str	r1, [sp, #4]
 800cce4:	f7ff fe20 	bl	800c928 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cce8:	2f01      	cmp	r7, #1
 800ccea:	9901      	ldr	r1, [sp, #4]
 800ccec:	d1f3      	bne.n	800ccd6 <move_window+0x5a>
 800ccee:	e7d0      	b.n	800cc92 <move_window+0x16>
			res = FR_DISK_ERR;
 800ccf0:	2001      	movs	r0, #1
}
 800ccf2:	b003      	add	sp, #12
 800ccf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccf6:	bf00      	nop

0800ccf8 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ccf8:	2300      	movs	r3, #0
{
 800ccfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 800ccfe:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800cd00:	6804      	ldr	r4, [r0, #0]
 800cd02:	b18c      	cbz	r4, 800cd28 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd04:	7825      	ldrb	r5, [r4, #0]
 800cd06:	2d1f      	cmp	r5, #31
 800cd08:	d912      	bls.n	800cd30 <find_volume+0x38>
 800cd0a:	2d3a      	cmp	r5, #58	; 0x3a
 800cd0c:	d010      	beq.n	800cd30 <find_volume+0x38>
 800cd0e:	46a4      	mov	ip, r4
 800cd10:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800cd14:	2b1f      	cmp	r3, #31
 800cd16:	d90d      	bls.n	800cd34 <find_volume+0x3c>
 800cd18:	2b3a      	cmp	r3, #58	; 0x3a
 800cd1a:	d1f9      	bne.n	800cd10 <find_volume+0x18>
			i = *tp++ - '0';
 800cd1c:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd1e:	45a4      	cmp	ip, r4
 800cd20:	d102      	bne.n	800cd28 <find_volume+0x30>
 800cd22:	2d30      	cmp	r5, #48	; 0x30
 800cd24:	f000 80da 	beq.w	800cedc <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd28:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd30:	462b      	mov	r3, r5
 800cd32:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd34:	2b3a      	cmp	r3, #58	; 0x3a
 800cd36:	d0f1      	beq.n	800cd1c <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cd38:	4ba3      	ldr	r3, [pc, #652]	; (800cfc8 <find_volume+0x2d0>)
 800cd3a:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cd3c:	2d00      	cmp	r5, #0
 800cd3e:	f000 80c9 	beq.w	800ced4 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 800cd42:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cd44:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cd48:	782b      	ldrb	r3, [r5, #0]
 800cd4a:	b17b      	cbz	r3, 800cd6c <find_volume+0x74>
		stat = disk_status(fs->drv);
 800cd4c:	7868      	ldrb	r0, [r5, #1]
 800cd4e:	f7ff fdbf 	bl	800c8d0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cd52:	07c1      	lsls	r1, r0, #31
 800cd54:	d40a      	bmi.n	800cd6c <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cd56:	2c00      	cmp	r4, #0
 800cd58:	f000 80ab 	beq.w	800ceb2 <find_volume+0x1ba>
 800cd5c:	f010 0404 	ands.w	r4, r0, #4
 800cd60:	f000 80a7 	beq.w	800ceb2 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 800cd64:	240a      	movs	r4, #10
}
 800cd66:	4620      	mov	r0, r4
 800cd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cd70:	f7ff fdb8 	bl	800c8e4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cd74:	07c2      	lsls	r2, r0, #31
 800cd76:	f100 809f 	bmi.w	800ceb8 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cd7a:	b10c      	cbz	r4, 800cd80 <find_volume+0x88>
 800cd7c:	0743      	lsls	r3, r0, #29
 800cd7e:	d4f1      	bmi.n	800cd64 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cd80:	2100      	movs	r1, #0
 800cd82:	4628      	mov	r0, r5
 800cd84:	f7ff ff38 	bl	800cbf8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cd88:	2802      	cmp	r0, #2
 800cd8a:	d077      	beq.n	800ce7c <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cd8c:	2804      	cmp	r0, #4
 800cd8e:	f000 809f 	beq.w	800ced0 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cd92:	2801      	cmp	r0, #1
 800cd94:	f200 808c 	bhi.w	800ceb0 <find_volume+0x1b8>
	bsect = 0;
 800cd98:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cd9a:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 800cd9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cda2:	f040 8085 	bne.w	800ceb0 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cda6:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cdaa:	b902      	cbnz	r2, 800cdae <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 800cdac:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cdae:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 800cdb2:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cdb4:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cdb6:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cdb8:	2901      	cmp	r1, #1
 800cdba:	d879      	bhi.n	800ceb0 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cdbc:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 800cdc0:	b288      	uxth	r0, r1
 800cdc2:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d073      	beq.n	800ceb0 <find_volume+0x1b8>
 800cdc8:	1e48      	subs	r0, r1, #1
 800cdca:	4208      	tst	r0, r1
 800cdcc:	d170      	bne.n	800ceb0 <find_volume+0x1b8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cdce:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cdd2:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cdd6:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cdda:	d169      	bne.n	800ceb0 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cddc:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cde0:	b900      	cbnz	r0, 800cde4 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 800cde2:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cde4:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cde8:	2f00      	cmp	r7, #0
 800cdea:	d061      	beq.n	800ceb0 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cdec:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cdf0:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 800cdf4:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cdf6:	42b0      	cmp	r0, r6
 800cdf8:	d35a      	bcc.n	800ceb0 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cdfa:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cdfe:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ce00:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ce04:	d354      	bcc.n	800ceb0 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ce06:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 800ce0a:	4288      	cmp	r0, r1
 800ce0c:	f200 8084 	bhi.w	800cf18 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ce10:	f640 71f5 	movw	r1, #4085	; 0xff5
 800ce14:	4288      	cmp	r0, r1
 800ce16:	f200 80a3 	bhi.w	800cf60 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce1a:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce1c:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800ce1e:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800ce20:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ce22:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800ce24:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ce26:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ce28:	f1bc 0f00 	cmp.w	ip, #0
 800ce2c:	d040      	beq.n	800ceb0 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ce2e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800ce32:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ce36:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ce38:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 800ce3c:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ce3e:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ce42:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ce44:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 800ce48:	d332      	bcc.n	800ceb0 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800ce4e:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ce50:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 800ce54:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce56:	495d      	ldr	r1, [pc, #372]	; (800cfcc <find_volume+0x2d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800ce58:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce5a:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ce5c:	485c      	ldr	r0, [pc, #368]	; (800cfd0 <find_volume+0x2d8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce5e:	4a5d      	ldr	r2, [pc, #372]	; (800cfd4 <find_volume+0x2dc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800ce60:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ce62:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce64:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ce66:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce68:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 800ce6a:	800b      	strh	r3, [r1, #0]
 800ce6c:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce6e:	f000 8085 	beq.w	800cf7c <find_volume+0x284>
 800ce72:	6913      	ldr	r3, [r2, #16]
 800ce74:	429d      	cmp	r5, r3
 800ce76:	d06f      	beq.n	800cf58 <find_volume+0x260>
	return FR_OK;
 800ce78:	2400      	movs	r4, #0
 800ce7a:	e01a      	b.n	800ceb2 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce7c:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 800ce80:	b10e      	cbz	r6, 800ce86 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 800ce82:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce86:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 800ce8a:	b10c      	cbz	r4, 800ce90 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800ce8c:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce90:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 800ce94:	b303      	cbz	r3, 800ced8 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 800ce96:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ce9a:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 800ce9e:	b10f      	cbz	r7, 800cea4 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 800cea0:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cea4:	b9f6      	cbnz	r6, 800cee4 <find_volume+0x1ec>
 800cea6:	bb2c      	cbnz	r4, 800cef4 <find_volume+0x1fc>
 800cea8:	f1b8 0f00 	cmp.w	r8, #0
 800ceac:	d12c      	bne.n	800cf08 <find_volume+0x210>
 800ceae:	b93f      	cbnz	r7, 800cec0 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ceb0:	240d      	movs	r4, #13
}
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ceb8:	2403      	movs	r4, #3
}
 800ceba:	4620      	mov	r0, r4
 800cebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cec0:	4639      	mov	r1, r7
 800cec2:	4628      	mov	r0, r5
 800cec4:	f7ff fe98 	bl	800cbf8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cec8:	2801      	cmp	r0, #1
 800ceca:	d95a      	bls.n	800cf82 <find_volume+0x28a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cecc:	2804      	cmp	r0, #4
 800cece:	d1ef      	bne.n	800ceb0 <find_volume+0x1b8>
 800ced0:	2401      	movs	r4, #1
 800ced2:	e7ee      	b.n	800ceb2 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ced4:	240c      	movs	r4, #12
 800ced6:	e7ec      	b.n	800ceb2 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ced8:	4698      	mov	r8, r3
 800ceda:	e7de      	b.n	800ce9a <find_volume+0x1a2>
					*path = ++tt;
 800cedc:	f10c 0301 	add.w	r3, ip, #1
 800cee0:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cee2:	e729      	b.n	800cd38 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cee4:	4631      	mov	r1, r6
 800cee6:	4628      	mov	r0, r5
 800cee8:	f7ff fe86 	bl	800cbf8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ceec:	2801      	cmp	r0, #1
 800ceee:	d8da      	bhi.n	800cea6 <find_volume+0x1ae>
 800cef0:	4634      	mov	r4, r6
 800cef2:	e752      	b.n	800cd9a <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cef4:	4621      	mov	r1, r4
 800cef6:	4628      	mov	r0, r5
 800cef8:	f7ff fe7e 	bl	800cbf8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cefc:	2801      	cmp	r0, #1
 800cefe:	f67f af4c 	bls.w	800cd9a <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf02:	f1b8 0f00 	cmp.w	r8, #0
 800cf06:	d0d2      	beq.n	800ceae <find_volume+0x1b6>
 800cf08:	4641      	mov	r1, r8
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	f7ff fe74 	bl	800cbf8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cf10:	2801      	cmp	r0, #1
 800cf12:	d8cc      	bhi.n	800ceae <find_volume+0x1b6>
 800cf14:	4644      	mov	r4, r8
 800cf16:	e740      	b.n	800cd9a <find_volume+0xa2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cf18:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cf1c:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf1e:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800cf20:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cf22:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cf26:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf28:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cf2a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800cf2c:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cf2e:	d1bf      	bne.n	800ceb0 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cf30:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 800cf32:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf34:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cf38:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cf3a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800cf3e:	d3b7      	bcc.n	800ceb0 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf40:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800cf48:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf4a:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800cf4c:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cf4e:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cf52:	d018      	beq.n	800cf86 <find_volume+0x28e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cf54:	2003      	movs	r0, #3
 800cf56:	e77e      	b.n	800ce56 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cf58:	2300      	movs	r3, #0
	return FR_OK;
 800cf5a:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cf5c:	6113      	str	r3, [r2, #16]
 800cf5e:	e7a8      	b.n	800ceb2 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cf60:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf62:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800cf64:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800cf66:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cf68:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800cf6a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cf6c:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cf6e:	f1bc 0f00 	cmp.w	ip, #0
 800cf72:	d09d      	beq.n	800ceb0 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cf74:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cf76:	0049      	lsls	r1, r1, #1
 800cf78:	2002      	movs	r0, #2
 800cf7a:	e760      	b.n	800ce3e <find_volume+0x146>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	6013      	str	r3, [r2, #0]
 800cf80:	e777      	b.n	800ce72 <find_volume+0x17a>
 800cf82:	463c      	mov	r4, r7
 800cf84:	e709      	b.n	800cd9a <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cf86:	1c61      	adds	r1, r4, #1
 800cf88:	4628      	mov	r0, r5
 800cf8a:	f7ff fe77 	bl	800cc7c <move_window>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	d1e0      	bne.n	800cf54 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf92:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf96:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 800cf9a:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d1d9      	bne.n	800cf54 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800cfa0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cfa2:	4b0d      	ldr	r3, [pc, #52]	; (800cfd8 <find_volume+0x2e0>)
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d1d5      	bne.n	800cf54 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfa8:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800cfac:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cfb0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cfb4:	3320      	adds	r3, #32
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d1cc      	bne.n	800cf54 <find_volume+0x25c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cfba:	2003      	movs	r0, #3
 800cfbc:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
 800cfc0:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800cfc4:	e747      	b.n	800ce56 <find_volume+0x15e>
 800cfc6:	bf00      	nop
 800cfc8:	2001d5b4 	.word	0x2001d5b4
 800cfcc:	2001d5d8 	.word	0x2001d5d8
 800cfd0:	2001d5dc 	.word	0x2001d5dc
 800cfd4:	2001d5b8 	.word	0x2001d5b8
 800cfd8:	41615252 	.word	0x41615252

0800cfdc <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800cfdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 800cfe0:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	460d      	mov	r5, r1
 800cfe6:	4690      	mov	r8, r2
		switch (fs->fs_type) {
 800cfe8:	2e02      	cmp	r6, #2
 800cfea:	d007      	beq.n	800cffc <put_fat.part.0+0x20>
 800cfec:	2e03      	cmp	r6, #3
 800cfee:	d041      	beq.n	800d074 <put_fat.part.0+0x98>
 800cff0:	2e01      	cmp	r6, #1
 800cff2:	d01b      	beq.n	800d02c <put_fat.part.0+0x50>
 800cff4:	2702      	movs	r7, #2
}
 800cff6:	4638      	mov	r0, r7
 800cff8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cffc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800cffe:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800d002:	f7ff fe3b 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800d006:	4607      	mov	r7, r0
 800d008:	2800      	cmp	r0, #0
 800d00a:	d1f4      	bne.n	800cff6 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d00c:	006d      	lsls	r5, r5, #1
 800d00e:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800d012:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
 800d016:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d018:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
 800d01c:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800d01e:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d022:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 800d024:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 800d026:	70e1      	strb	r1, [r4, #3]
}
 800d028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d02c:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d02e:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d032:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800d036:	f7ff fe21 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800d03a:	4607      	mov	r7, r0
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d1da      	bne.n	800cff6 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d040:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 800d042:	f109 0b01 	add.w	fp, r9, #1
 800d046:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 800d04a:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d04e:	d52a      	bpl.n	800d0a6 <put_fat.part.0+0xca>
 800d050:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d054:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d056:	f003 030f 	and.w	r3, r3, #15
 800d05a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 800d05e:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d062:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800d064:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d066:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d06a:	f7ff fe07 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800d06e:	b3a0      	cbz	r0, 800d0da <put_fat.part.0+0xfe>
 800d070:	4607      	mov	r7, r0
	return res;
 800d072:	e7c0      	b.n	800cff6 <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d074:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d076:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800d07a:	f7ff fdff 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800d07e:	4607      	mov	r7, r0
 800d080:	2800      	cmp	r0, #0
 800d082:	d1b8      	bne.n	800cff6 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d084:	00ad      	lsls	r5, r5, #2
 800d086:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800d08a:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
 800d08e:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d090:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d094:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d096:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d09a:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 800d09c:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
 800d09e:	70e0      	strb	r0, [r4, #3]
}
 800d0a0:	4638      	mov	r0, r7
 800d0a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d0a6:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800d0ae:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0b0:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d0b4:	f7ff fde2 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d1d9      	bne.n	800d070 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
 800d0bc:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0c0:	f3c8 2203 	ubfx	r2, r8, #8, #4
 800d0c4:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
 800d0c8:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0ca:	f023 030f 	bic.w	r3, r3, #15
 800d0ce:	4313      	orrs	r3, r2
			fs->wflag = 1;
 800d0d0:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0d2:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
 800d0d6:	70e2      	strb	r2, [r4, #3]
			break;
 800d0d8:	e78d      	b.n	800cff6 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800d0da:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0de:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
 800d0e2:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0e4:	e7f4      	b.n	800d0d0 <put_fat.part.0+0xf4>
 800d0e6:	bf00      	nop

0800d0e8 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d0e8:	2901      	cmp	r1, #1
 800d0ea:	d90e      	bls.n	800d10a <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d0ee:	6983      	ldr	r3, [r0, #24]
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	4605      	mov	r5, r0
 800d0f4:	4299      	cmp	r1, r3
 800d0f6:	d206      	bcs.n	800d106 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800d0f8:	7803      	ldrb	r3, [r0, #0]
 800d0fa:	2b02      	cmp	r3, #2
 800d0fc:	d021      	beq.n	800d142 <get_fat.isra.0+0x5a>
 800d0fe:	2b03      	cmp	r3, #3
 800d100:	d010      	beq.n	800d124 <get_fat.isra.0+0x3c>
 800d102:	2b01      	cmp	r3, #1
 800d104:	d003      	beq.n	800d10e <get_fat.isra.0+0x26>
 800d106:	2001      	movs	r0, #1
}
 800d108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800d10a:	2001      	movs	r0, #1
}
 800d10c:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d10e:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d110:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d114:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800d118:	f7ff fdb0 	bl	800cc7c <move_window>
 800d11c:	b1f0      	cbz	r0, 800d15c <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d11e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800d122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d124:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d126:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d12a:	f7ff fda7 	bl	800cc7c <move_window>
 800d12e:	2800      	cmp	r0, #0
 800d130:	d1f5      	bne.n	800d11e <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d132:	00a4      	lsls	r4, r4, #2
 800d134:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d138:	4425      	add	r5, r4
 800d13a:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d13c:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800d140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d142:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d144:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d148:	f7ff fd98 	bl	800cc7c <move_window>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d1e6      	bne.n	800d11e <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d150:	0063      	lsls	r3, r4, #1
 800d152:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d156:	442b      	add	r3, r5
 800d158:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
 800d15a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800d15c:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d160:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d162:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d164:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d166:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d168:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d16c:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d170:	f7ff fd84 	bl	800cc7c <move_window>
 800d174:	2800      	cmp	r0, #0
 800d176:	d1d2      	bne.n	800d11e <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d178:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800d17c:	442f      	add	r7, r5
 800d17e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d182:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d186:	07e3      	lsls	r3, r4, #31
 800d188:	bf4c      	ite	mi
 800d18a:	0900      	lsrmi	r0, r0, #4
 800d18c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800d190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d192:	bf00      	nop

0800d194 <dir_read>:
{
 800d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800d198:	69c6      	ldr	r6, [r0, #28]
{
 800d19a:	b083      	sub	sp, #12
 800d19c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800d19e:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 800d1a0:	2e00      	cmp	r6, #0
 800d1a2:	d064      	beq.n	800d26e <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 800d1a4:	23ff      	movs	r3, #255	; 0xff
 800d1a6:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d1a8:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 800d1ac:	4698      	mov	r8, r3
 800d1ae:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d1b0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800d1b2:	42b5      	cmp	r5, r6
 800d1b4:	d014      	beq.n	800d1e0 <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d1b6:	78fb      	ldrb	r3, [r7, #3]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f040 80d1 	bne.w	800d360 <dir_read+0x1cc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d1be:	2301      	movs	r3, #1
 800d1c0:	4632      	mov	r2, r6
 800d1c2:	4649      	mov	r1, r9
 800d1c4:	7878      	ldrb	r0, [r7, #1]
 800d1c6:	f7ff fb9f 	bl	800c908 <disk_read>
 800d1ca:	b140      	cbz	r0, 800d1de <dir_read+0x4a>
			fs->winsect = sector;
 800d1cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800d1d0:	2001      	movs	r0, #1
			fs->winsect = sector;
 800d1d2:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	61e3      	str	r3, [r4, #28]
}
 800d1d8:	b003      	add	sp, #12
 800d1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800d1de:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d1e0:	6a21      	ldr	r1, [r4, #32]
 800d1e2:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800d1e4:	2a00      	cmp	r2, #0
 800d1e6:	d042      	beq.n	800d26e <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d1e8:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d1ea:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d1ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1f0:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d1f2:	d00a      	beq.n	800d20a <dir_read+0x76>
 800d1f4:	2a2e      	cmp	r2, #46	; 0x2e
 800d1f6:	d008      	beq.n	800d20a <dir_read+0x76>
 800d1f8:	f023 0020 	bic.w	r0, r3, #32
 800d1fc:	f1a0 0008 	sub.w	r0, r0, #8
 800d200:	fab0 f080 	clz	r0, r0
 800d204:	0940      	lsrs	r0, r0, #5
 800d206:	4550      	cmp	r0, sl
 800d208:	d038      	beq.n	800d27c <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d20a:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d20e:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800d210:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d212:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d214:	69e6      	ldr	r6, [r4, #28]
 800d216:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800d21a:	d228      	bcs.n	800d26e <dir_read+0xda>
 800d21c:	b33e      	cbz	r6, 800d26e <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d21e:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800d222:	bb32      	cbnz	r2, 800d272 <dir_read+0xde>
		dp->sect++;				/* Next sector */
 800d224:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800d226:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800d228:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800d22a:	b961      	cbnz	r1, 800d246 <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d22c:	891a      	ldrh	r2, [r3, #8]
 800d22e:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800d232:	d91c      	bls.n	800d26e <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d234:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800d236:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d238:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	d1b8      	bne.n	800d1b0 <dir_read+0x1c>
		res = move_window(fs, dp->sect);
 800d23e:	2000      	movs	r0, #0
}
 800d240:	b003      	add	sp, #12
 800d242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d246:	895a      	ldrh	r2, [r3, #10]
 800d248:	3a01      	subs	r2, #1
 800d24a:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 800d24e:	d1f1      	bne.n	800d234 <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d250:	4618      	mov	r0, r3
 800d252:	9301      	str	r3, [sp, #4]
 800d254:	f7ff ff48 	bl	800d0e8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d258:	2801      	cmp	r0, #1
 800d25a:	f240 80b5 	bls.w	800d3c8 <dir_read+0x234>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d25e:	1c43      	adds	r3, r0, #1
 800d260:	f000 8085 	beq.w	800d36e <dir_read+0x1da>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d264:	9b01      	ldr	r3, [sp, #4]
 800d266:	699a      	ldr	r2, [r3, #24]
 800d268:	4290      	cmp	r0, r2
 800d26a:	f0c0 80a1 	bcc.w	800d3b0 <dir_read+0x21c>
	FRESULT res = FR_NO_FILE;
 800d26e:	2004      	movs	r0, #4
 800d270:	e7b0      	b.n	800d1d4 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d272:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800d274:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d276:	4413      	add	r3, r2
 800d278:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d27a:	e799      	b.n	800d1b0 <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d27c:	2b0f      	cmp	r3, #15
 800d27e:	f040 80ab 	bne.w	800d3d8 <dir_read+0x244>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d282:	0650      	lsls	r0, r2, #25
 800d284:	d575      	bpl.n	800d372 <dir_read+0x1de>
						sum = dp->dir[LDIR_Chksum];
 800d286:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800d288:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800d28c:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 800d28e:	6963      	ldr	r3, [r4, #20]
 800d290:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d292:	7b4b      	ldrb	r3, [r1, #13]
 800d294:	9a00      	ldr	r2, [sp, #0]
 800d296:	4293      	cmp	r3, r2
 800d298:	d1b7      	bne.n	800d20a <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d29a:	8b4b      	ldrh	r3, [r1, #26]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d1b4      	bne.n	800d20a <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d2a0:	780b      	ldrb	r3, [r1, #0]
 800d2a2:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 800d2a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2aa:	3b01      	subs	r3, #1
 800d2ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d2b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d2b4:	2bfe      	cmp	r3, #254	; 0xfe
 800d2b6:	d8a8      	bhi.n	800d20a <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d2b8:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d2ba:	1c5a      	adds	r2, r3, #1
 800d2bc:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 800d2c0:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	f040 8090 	bne.w	800d3ea <dir_read+0x256>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d2ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2ce:	429e      	cmp	r6, r3
 800d2d0:	d19b      	bne.n	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d2d2:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d2d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2da:	459e      	cmp	lr, r3
 800d2dc:	d195      	bne.n	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d2de:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d2e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2e6:	459c      	cmp	ip, r3
 800d2e8:	d18f      	bne.n	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d2ea:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d2ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2f2:	429e      	cmp	r6, r3
 800d2f4:	d189      	bne.n	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d2f6:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d2fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2fe:	459c      	cmp	ip, r3
 800d300:	d183      	bne.n	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d302:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d306:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d30a:	459e      	cmp	lr, r3
 800d30c:	f47f af7d 	bne.w	800d20a <dir_read+0x76>
	rv = rv << 8 | ptr[0];
 800d310:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d316:	429e      	cmp	r6, r3
 800d318:	f47f af77 	bne.w	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d31c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d324:	459c      	cmp	ip, r3
 800d326:	f47f af70 	bne.w	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d32a:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d32c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d330:	429e      	cmp	r6, r3
 800d332:	f47f af6a 	bne.w	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d336:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d33a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d33e:	459c      	cmp	ip, r3
 800d340:	f47f af63 	bne.w	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d344:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d34a:	429e      	cmp	r6, r3
 800d34c:	f47f af5d 	bne.w	800d20a <dir_read+0x76>
	rv = ptr[1];
 800d350:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d358:	459c      	cmp	ip, r3
 800d35a:	f000 80ca 	beq.w	800d4f2 <dir_read+0x35e>
 800d35e:	e754      	b.n	800d20a <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d360:	2301      	movs	r3, #1
 800d362:	462a      	mov	r2, r5
 800d364:	4649      	mov	r1, r9
 800d366:	7878      	ldrb	r0, [r7, #1]
 800d368:	f7ff fade 	bl	800c928 <disk_write>
 800d36c:	b128      	cbz	r0, 800d37a <dir_read+0x1e6>
	FRESULT res = FR_NO_FILE;
 800d36e:	2001      	movs	r0, #1
 800d370:	e730      	b.n	800d1d4 <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d372:	4542      	cmp	r2, r8
 800d374:	f47f af49 	bne.w	800d20a <dir_read+0x76>
 800d378:	e78b      	b.n	800d292 <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800d37c:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d37e:	1aea      	subs	r2, r5, r3
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	429a      	cmp	r2, r3
 800d384:	f4bf af1b 	bcs.w	800d1be <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d388:	f897 b002 	ldrb.w	fp, [r7, #2]
 800d38c:	f1bb 0f01 	cmp.w	fp, #1
 800d390:	d801      	bhi.n	800d396 <dir_read+0x202>
 800d392:	e714      	b.n	800d1be <dir_read+0x2a>
					wsect += fs->fsize;
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d398:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800d39c:	2301      	movs	r3, #1
 800d39e:	4649      	mov	r1, r9
 800d3a0:	462a      	mov	r2, r5
 800d3a2:	7878      	ldrb	r0, [r7, #1]
 800d3a4:	f7ff fac0 	bl	800c928 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d3a8:	f1bb 0f01 	cmp.w	fp, #1
 800d3ac:	d1f2      	bne.n	800d394 <dir_read+0x200>
 800d3ae:	e706      	b.n	800d1be <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 800d3b0:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800d3b2:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d3b4:	699a      	ldr	r2, [r3, #24]
 800d3b6:	3a02      	subs	r2, #2
 800d3b8:	4290      	cmp	r0, r2
 800d3ba:	d207      	bcs.n	800d3cc <dir_read+0x238>
	return clst * fs->csize + fs->database;
 800d3bc:	895a      	ldrh	r2, [r3, #10]
 800d3be:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800d3c0:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 800d3c4:	61e6      	str	r6, [r4, #28]
 800d3c6:	e735      	b.n	800d234 <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d3c8:	2002      	movs	r0, #2
 800d3ca:	e703      	b.n	800d1d4 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d3cc:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 800d3ce:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 800d3d2:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d3d4:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d3d6:	e732      	b.n	800d23e <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d3d8:	f1b8 0f00 	cmp.w	r8, #0
 800d3dc:	f000 8096 	beq.w	800d50c <dir_read+0x378>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d3e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 800d3e4:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d3e6:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d3e8:	e6f6      	b.n	800d1d8 <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d3ea:	2aff      	cmp	r2, #255	; 0xff
 800d3ec:	f000 80d9 	beq.w	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d3f0:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
 800d3f4:	0050      	lsls	r0, r2, #1
 800d3f6:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 800d3fa:	1c9a      	adds	r2, r3, #2
		if (wc) {
 800d3fc:	2e00      	cmp	r6, #0
 800d3fe:	f43f af6a 	beq.w	800d2d6 <dir_read+0x142>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d402:	2aff      	cmp	r2, #255	; 0xff
 800d404:	f000 80cd 	beq.w	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d408:	4428      	add	r0, r5
 800d40a:	1cda      	adds	r2, r3, #3
 800d40c:	f8a0 e002 	strh.w	lr, [r0, #2]
 800d410:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 800d414:	f1be 0f00 	cmp.w	lr, #0
 800d418:	f43f af63 	beq.w	800d2e2 <dir_read+0x14e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d41c:	2aff      	cmp	r2, #255	; 0xff
 800d41e:	f000 80c0 	beq.w	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d422:	f8a0 c004 	strh.w	ip, [r0, #4]
 800d426:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
 800d428:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 800d42c:	f1bc 0f00 	cmp.w	ip, #0
 800d430:	f43f af5d 	beq.w	800d2ee <dir_read+0x15a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d434:	2aff      	cmp	r2, #255	; 0xff
 800d436:	f000 80b4 	beq.w	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d43a:	80c6      	strh	r6, [r0, #6]
 800d43c:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
 800d43e:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 800d442:	2e00      	cmp	r6, #0
 800d444:	f43f af59 	beq.w	800d2fa <dir_read+0x166>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d448:	2aff      	cmp	r2, #255	; 0xff
 800d44a:	f000 80aa 	beq.w	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d44e:	f8a0 c008 	strh.w	ip, [r0, #8]
 800d452:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
 800d454:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 800d458:	f1bc 0f00 	cmp.w	ip, #0
 800d45c:	f43f af53 	beq.w	800d306 <dir_read+0x172>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d460:	2aff      	cmp	r2, #255	; 0xff
 800d462:	f000 809e 	beq.w	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d466:	f8a0 e00a 	strh.w	lr, [r0, #10]
 800d46a:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
 800d46c:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 800d46e:	f1be 0f00 	cmp.w	lr, #0
 800d472:	f43f af4e 	beq.w	800d312 <dir_read+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d476:	2aff      	cmp	r2, #255	; 0xff
 800d478:	f000 8093 	beq.w	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d47c:	8186      	strh	r6, [r0, #12]
 800d47e:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
 800d482:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 800d486:	2e00      	cmp	r6, #0
 800d488:	f43f af4a 	beq.w	800d320 <dir_read+0x18c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d48c:	2aff      	cmp	r2, #255	; 0xff
 800d48e:	f000 8088 	beq.w	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d492:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800d496:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
 800d49a:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 800d49c:	f1bc 0f00 	cmp.w	ip, #0
 800d4a0:	f43f af44 	beq.w	800d32c <dir_read+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d4a4:	2aff      	cmp	r2, #255	; 0xff
 800d4a6:	d07c      	beq.n	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d4a8:	8206      	strh	r6, [r0, #16]
 800d4aa:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
 800d4ae:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 800d4b2:	2e00      	cmp	r6, #0
 800d4b4:	f43f af41 	beq.w	800d33a <dir_read+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d4b8:	2aff      	cmp	r2, #255	; 0xff
 800d4ba:	d072      	beq.n	800d5a2 <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d4bc:	f8a0 c012 	strh.w	ip, [r0, #18]
 800d4c0:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
 800d4c4:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 800d4c6:	f1bc 0f00 	cmp.w	ip, #0
 800d4ca:	f43f af3c 	beq.w	800d346 <dir_read+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d4ce:	2aff      	cmp	r2, #255	; 0xff
 800d4d0:	f43f ae9b 	beq.w	800d20a <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d4d4:	8286      	strh	r6, [r0, #20]
 800d4d6:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
 800d4da:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 800d4de:	2e00      	cmp	r6, #0
 800d4e0:	f43f af38 	beq.w	800d354 <dir_read+0x1c0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d4e4:	2aff      	cmp	r2, #255	; 0xff
 800d4e6:	f43f ae90 	beq.w	800d20a <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d4ea:	f103 020d 	add.w	r2, r3, #13
 800d4ee:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800d4f2:	780b      	ldrb	r3, [r1, #0]
 800d4f4:	0659      	lsls	r1, r3, #25
 800d4f6:	d504      	bpl.n	800d502 <dir_read+0x36e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800d4f8:	2aff      	cmp	r2, #255	; 0xff
 800d4fa:	d052      	beq.n	800d5a2 <dir_read+0x40e>
		lfnbuf[i] = 0;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d502:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d506:	fa5f f888 	uxtb.w	r8, r8
 800d50a:	e680      	b.n	800d20e <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d50c:	780b      	ldrb	r3, [r1, #0]
 800d50e:	01da      	lsls	r2, r3, #7
 800d510:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800d514:	784b      	ldrb	r3, [r1, #1]
 800d516:	441a      	add	r2, r3
 800d518:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d51c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d520:	788a      	ldrb	r2, [r1, #2]
 800d522:	fa52 f383 	uxtab	r3, r2, r3
 800d526:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d52a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d52e:	78cb      	ldrb	r3, [r1, #3]
 800d530:	fa53 f282 	uxtab	r2, r3, r2
 800d534:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d538:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d53c:	790a      	ldrb	r2, [r1, #4]
 800d53e:	fa52 f383 	uxtab	r3, r2, r3
 800d542:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d546:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d54a:	794b      	ldrb	r3, [r1, #5]
 800d54c:	fa53 f282 	uxtab	r2, r3, r2
 800d550:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d554:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d558:	798a      	ldrb	r2, [r1, #6]
 800d55a:	fa52 f383 	uxtab	r3, r2, r3
 800d55e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d562:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d566:	79cb      	ldrb	r3, [r1, #7]
 800d568:	fa53 f282 	uxtab	r2, r3, r2
 800d56c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d570:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800d574:	7a0a      	ldrb	r2, [r1, #8]
 800d576:	fa52 f383 	uxtab	r3, r2, r3
 800d57a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800d57e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800d582:	7a4b      	ldrb	r3, [r1, #9]
 800d584:	7a89      	ldrb	r1, [r1, #10]
 800d586:	fa53 f282 	uxtab	r2, r3, r2
 800d58a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800d58e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d592:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d594:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	4293      	cmp	r3, r2
 800d59c:	f47f af20 	bne.w	800d3e0 <dir_read+0x24c>
 800d5a0:	e64d      	b.n	800d23e <dir_read+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d5a2:	4690      	mov	r8, r2
 800d5a4:	e633      	b.n	800d20e <dir_read+0x7a>
 800d5a6:	bf00      	nop

0800d5a8 <sync_fs>:
{
 800d5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d5aa:	78c3      	ldrb	r3, [r0, #3]
{
 800d5ac:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d5ae:	b95b      	cbnz	r3, 800d5c8 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d5b0:	7823      	ldrb	r3, [r4, #0]
 800d5b2:	2b03      	cmp	r3, #3
 800d5b4:	d029      	beq.n	800d60a <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	7860      	ldrb	r0, [r4, #1]
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	f7ff f9c4 	bl	800c948 <disk_ioctl>
			res = FR_DISK_ERR;
 800d5c0:	3800      	subs	r0, #0
 800d5c2:	bf18      	it	ne
 800d5c4:	2001      	movne	r0, #1
}
 800d5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800d5c8:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d5ca:	f100 0734 	add.w	r7, r0, #52	; 0x34
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	7840      	ldrb	r0, [r0, #1]
 800d5d2:	462a      	mov	r2, r5
 800d5d4:	4639      	mov	r1, r7
 800d5d6:	f7ff f9a7 	bl	800c928 <disk_write>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d13e      	bne.n	800d65c <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d5de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d5e0:	69e3      	ldr	r3, [r4, #28]
 800d5e2:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800d5e4:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d2e2      	bcs.n	800d5b0 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5ea:	78a6      	ldrb	r6, [r4, #2]
 800d5ec:	2e01      	cmp	r6, #1
 800d5ee:	d801      	bhi.n	800d5f4 <sync_fs+0x4c>
 800d5f0:	e7de      	b.n	800d5b0 <sync_fs+0x8>
					wsect += fs->fsize;
 800d5f2:	69e3      	ldr	r3, [r4, #28]
 800d5f4:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5f6:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	462a      	mov	r2, r5
 800d5fe:	7860      	ldrb	r0, [r4, #1]
 800d600:	f7ff f992 	bl	800c928 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d604:	2e01      	cmp	r6, #1
 800d606:	d1f4      	bne.n	800d5f2 <sync_fs+0x4a>
 800d608:	e7d2      	b.n	800d5b0 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d60a:	7925      	ldrb	r5, [r4, #4]
 800d60c:	2d01      	cmp	r5, #1
 800d60e:	d1d2      	bne.n	800d5b6 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800d610:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 800d614:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d618:	2100      	movs	r1, #0
 800d61a:	4630      	mov	r0, r6
 800d61c:	f00b fa26 	bl	8018a6c <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800d620:	480f      	ldr	r0, [pc, #60]	; (800d660 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800d622:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800d626:	6360      	str	r0, [r4, #52]	; 0x34
 800d628:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800d62c:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d630:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800d632:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 800d636:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800d63a:	3020      	adds	r0, #32
 800d63c:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
 800d640:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800d642:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d646:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800d648:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800d64a:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d64e:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800d650:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d652:	f7ff f969 	bl	800c928 <disk_write>
			fs->fsi_flag = 0;
 800d656:	2300      	movs	r3, #0
 800d658:	7123      	strb	r3, [r4, #4]
 800d65a:	e7ac      	b.n	800d5b6 <sync_fs+0xe>
			res = FR_DISK_ERR;
 800d65c:	2001      	movs	r0, #1
}
 800d65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d660:	41615252 	.word	0x41615252

0800d664 <create_chain>:
{
 800d664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d668:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 800d66a:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 800d66c:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800d670:	2900      	cmp	r1, #0
 800d672:	f040 80a7 	bne.w	800d7c4 <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d676:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d67a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d67e:	b9c6      	cbnz	r6, 800d6b2 <create_chain+0x4e>
 800d680:	2601      	movs	r6, #1
 800d682:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800d684:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d686:	429c      	cmp	r4, r3
 800d688:	d317      	bcc.n	800d6ba <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
 800d68a:	2e01      	cmp	r6, #1
 800d68c:	f000 8096 	beq.w	800d7bc <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d690:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 800d694:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d696:	69ab      	ldr	r3, [r5, #24]
 800d698:	42a3      	cmp	r3, r4
 800d69a:	d906      	bls.n	800d6aa <create_chain+0x46>
		switch (fs->fs_type) {
 800d69c:	782b      	ldrb	r3, [r5, #0]
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d07e      	beq.n	800d7a0 <create_chain+0x13c>
 800d6a2:	2b03      	cmp	r3, #3
 800d6a4:	d064      	beq.n	800d770 <create_chain+0x10c>
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d00c      	beq.n	800d6c4 <create_chain+0x60>
 800d6aa:	2401      	movs	r4, #1
}
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d6b2:	42b3      	cmp	r3, r6
 800d6b4:	bf98      	it	ls
 800d6b6:	2601      	movls	r6, #1
 800d6b8:	e7e3      	b.n	800d682 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d6ba:	2c01      	cmp	r4, #1
 800d6bc:	f8d9 5000 	ldr.w	r5, [r9]
 800d6c0:	d9f3      	bls.n	800d6aa <create_chain+0x46>
 800d6c2:	e7e8      	b.n	800d696 <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6c4:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d6c6:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d6d0:	f7ff fad4 	bl	800cc7c <move_window>
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	d146      	bne.n	800d766 <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
 800d6d8:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d6de:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6e2:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d6e4:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6e6:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d6ea:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6ee:	f7ff fac5 	bl	800cc7c <move_window>
 800d6f2:	bbc0      	cbnz	r0, 800d766 <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d6f4:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d6f8:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800d6fa:	44ab      	add	fp, r5
 800d6fc:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 800d700:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d704:	bf4c      	ite	mi
 800d706:	091b      	lsrmi	r3, r3, #4
 800d708:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d140      	bne.n	800d792 <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d710:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d714:	42a3      	cmp	r3, r4
 800d716:	d9c8      	bls.n	800d6aa <create_chain+0x46>
 800d718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d71c:	4621      	mov	r1, r4
 800d71e:	4640      	mov	r0, r8
 800d720:	f7ff fc5c 	bl	800cfdc <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800d724:	b958      	cbnz	r0, 800d73e <create_chain+0xda>
 800d726:	b157      	cbz	r7, 800d73e <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d728:	2f01      	cmp	r7, #1
 800d72a:	d0be      	beq.n	800d6aa <create_chain+0x46>
 800d72c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d730:	429f      	cmp	r7, r3
 800d732:	d2ba      	bcs.n	800d6aa <create_chain+0x46>
 800d734:	4622      	mov	r2, r4
 800d736:	4639      	mov	r1, r7
 800d738:	4640      	mov	r0, r8
 800d73a:	f7ff fc4f 	bl	800cfdc <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d73e:	b980      	cbnz	r0, 800d762 <create_chain+0xfe>
		fs->last_clst = ncl;
 800d740:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d744:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 800d748:	3b02      	subs	r3, #2
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d802      	bhi.n	800d754 <create_chain+0xf0>
 800d74e:	3a01      	subs	r2, #1
 800d750:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 800d754:	f898 3004 	ldrb.w	r3, [r8, #4]
 800d758:	f043 0301 	orr.w	r3, r3, #1
 800d75c:	f888 3004 	strb.w	r3, [r8, #4]
 800d760:	e7a4      	b.n	800d6ac <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d762:	2801      	cmp	r0, #1
 800d764:	d1a1      	bne.n	800d6aa <create_chain+0x46>
 800d766:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800d76a:	4620      	mov	r0, r4
 800d76c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d770:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800d772:	4628      	mov	r0, r5
 800d774:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d778:	f7ff fa80 	bl	800cc7c <move_window>
 800d77c:	2800      	cmp	r0, #0
 800d77e:	d1f2      	bne.n	800d766 <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d780:	00a3      	lsls	r3, r4, #2
 800d782:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d786:	441d      	add	r5, r3
 800d788:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d78a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0be      	beq.n	800d710 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d792:	2b01      	cmp	r3, #1
 800d794:	d089      	beq.n	800d6aa <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800d796:	42a6      	cmp	r6, r4
 800d798:	d010      	beq.n	800d7bc <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d79a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d79e:	e771      	b.n	800d684 <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d7a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d7a8:	f7ff fa68 	bl	800cc7c <move_window>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d1da      	bne.n	800d766 <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d7b0:	0063      	lsls	r3, r4, #1
 800d7b2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d7b6:	442b      	add	r3, r5
 800d7b8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
 800d7ba:	e7a7      	b.n	800d70c <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
 800d7bc:	2400      	movs	r4, #0
}
 800d7be:	4620      	mov	r0, r4
 800d7c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7c4:	4640      	mov	r0, r8
 800d7c6:	f7ff fc8f 	bl	800d0e8 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7ca:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7cc:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7ce:	f67f af6c 	bls.w	800d6aa <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d7d2:	1c41      	adds	r1, r0, #1
 800d7d4:	d0c7      	beq.n	800d766 <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d7d6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d7da:	4283      	cmp	r3, r0
 800d7dc:	f63f af66 	bhi.w	800d6ac <create_chain+0x48>
 800d7e0:	463e      	mov	r6, r7
 800d7e2:	e74e      	b.n	800d682 <create_chain+0x1e>

0800d7e4 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d7e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 800d7e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800d7ec:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d7f0:	d24e      	bcs.n	800d890 <dir_sdi+0xac>
 800d7f2:	06ca      	lsls	r2, r1, #27
 800d7f4:	460c      	mov	r4, r1
 800d7f6:	d14b      	bne.n	800d890 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d7f8:	6885      	ldr	r5, [r0, #8]
 800d7fa:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800d7fc:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d7fe:	2d00      	cmp	r5, #0
 800d800:	d049      	beq.n	800d896 <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d802:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d806:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d80a:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800d80e:	f0c0 8084 	bcc.w	800d91a <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d812:	2d01      	cmp	r5, #1
 800d814:	d03c      	beq.n	800d890 <dir_sdi+0xac>
 800d816:	4647      	mov	r7, r8
 800d818:	e037      	b.n	800d88a <dir_sdi+0xa6>
		switch (fs->fs_type) {
 800d81a:	783b      	ldrb	r3, [r7, #0]
 800d81c:	2b02      	cmp	r3, #2
 800d81e:	d06e      	beq.n	800d8fe <dir_sdi+0x11a>
 800d820:	2b03      	cmp	r3, #3
 800d822:	d05c      	beq.n	800d8de <dir_sdi+0xfa>
 800d824:	2b01      	cmp	r3, #1
 800d826:	d133      	bne.n	800d890 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d828:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d82a:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d82e:	4638      	mov	r0, r7
 800d830:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800d834:	f7ff fa22 	bl	800cc7c <move_window>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d14d      	bne.n	800d8d8 <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
 800d83c:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d840:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d842:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d846:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800d848:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d84a:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d84e:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d852:	f7ff fa13 	bl	800cc7c <move_window>
 800d856:	2800      	cmp	r0, #0
 800d858:	d13e      	bne.n	800d8d8 <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d85a:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800d85e:	44ba      	add	sl, r7
 800d860:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 800d864:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d868:	07eb      	lsls	r3, r5, #31
 800d86a:	bf4c      	ite	mi
 800d86c:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 800d870:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d874:	2d01      	cmp	r5, #1
 800d876:	d90b      	bls.n	800d890 <dir_sdi+0xac>
 800d878:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d87c:	42ab      	cmp	r3, r5
 800d87e:	d907      	bls.n	800d890 <dir_sdi+0xac>
			ofs -= csz;
 800d880:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 800d884:	45a1      	cmp	r9, r4
 800d886:	d84a      	bhi.n	800d91e <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d888:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	42ab      	cmp	r3, r5
 800d88e:	d8c4      	bhi.n	800d81a <dir_sdi+0x36>
		switch (fs->fs_type) {
 800d890:	2002      	movs	r0, #2
}
 800d892:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d896:	f898 3000 	ldrb.w	r3, [r8]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d816      	bhi.n	800d8cc <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d89e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800d8a2:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800d8a6:	d9f3      	bls.n	800d890 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 800d8a8:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
 800d8ac:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d0ed      	beq.n	800d890 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d8b4:	f108 0834 	add.w	r8, r8, #52	; 0x34
 800d8b8:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d8bc:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
 800d8c0:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d8c2:	4441      	add	r1, r8
 800d8c4:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
 800d8c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 800d8cc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d0e4      	beq.n	800d89e <dir_sdi+0xba>
 800d8d4:	461d      	mov	r5, r3
 800d8d6:	e794      	b.n	800d802 <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d8d8:	2001      	movs	r0, #1
}
 800d8da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d8de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8e0:	4638      	mov	r0, r7
 800d8e2:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800d8e6:	f7ff f9c9 	bl	800cc7c <move_window>
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	d1f4      	bne.n	800d8d8 <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d8ee:	00ab      	lsls	r3, r5, #2
 800d8f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d8f4:	443b      	add	r3, r7
 800d8f6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d8f8:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 800d8fc:	e7ba      	b.n	800d874 <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d8fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d900:	4638      	mov	r0, r7
 800d902:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800d906:	f7ff f9b9 	bl	800cc7c <move_window>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d1e4      	bne.n	800d8d8 <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d90e:	006b      	lsls	r3, r5, #1
 800d910:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d914:	443b      	add	r3, r7
 800d916:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
 800d918:	e7ac      	b.n	800d874 <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d91a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d91e:	3b02      	subs	r3, #2
	clst -= 2;
 800d920:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d922:	429a      	cmp	r2, r3
 800d924:	d206      	bcs.n	800d934 <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
 800d926:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 800d92a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800d92e:	fb02 3301 	mla	r3, r2, r1, r3
 800d932:	e7bb      	b.n	800d8ac <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
 800d934:	2300      	movs	r3, #0
 800d936:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d93a:	e7a9      	b.n	800d890 <dir_sdi+0xac>

0800d93c <dir_find>:
{
 800d93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d940:	2100      	movs	r1, #0
{
 800d942:	b085      	sub	sp, #20
 800d944:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800d946:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d94a:	f7ff ff4b 	bl	800d7e4 <dir_sdi>
	if (res != FR_OK) return res;
 800d94e:	4607      	mov	r7, r0
 800d950:	b9e8      	cbnz	r0, 800d98e <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d952:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800d956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 800d95a:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d95c:	464f      	mov	r7, r9
 800d95e:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d960:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 800d964:	42b5      	cmp	r5, r6
 800d966:	d018      	beq.n	800d99a <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d968:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d96c:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d970:	2b00      	cmp	r3, #0
 800d972:	f040 8085 	bne.w	800da80 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d976:	2301      	movs	r3, #1
 800d978:	4632      	mov	r2, r6
 800d97a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d97e:	f7fe ffc3 	bl	800c908 <disk_read>
 800d982:	b140      	cbz	r0, 800d996 <dir_find+0x5a>
			fs->winsect = sector;
 800d984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800d988:	2701      	movs	r7, #1
			fs->winsect = sector;
 800d98a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 800d98e:	4638      	mov	r0, r7
 800d990:	b005      	add	sp, #20
 800d992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800d996:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 800d99a:	6a25      	ldr	r5, [r4, #32]
 800d99c:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d99e:	b346      	cbz	r6, 800d9f2 <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d9a0:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d9a2:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d9a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d9a8:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d9aa:	d004      	beq.n	800d9b6 <dir_find+0x7a>
 800d9ac:	071b      	lsls	r3, r3, #28
 800d9ae:	d525      	bpl.n	800d9fc <dir_find+0xc0>
 800d9b0:	2a0f      	cmp	r2, #15
 800d9b2:	f000 8093 	beq.w	800dadc <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d9b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9ba:	27ff      	movs	r7, #255	; 0xff
 800d9bc:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d9be:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800d9c0:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d9c2:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d9c4:	69e6      	ldr	r6, [r4, #28]
 800d9c6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800d9ca:	d212      	bcs.n	800d9f2 <dir_find+0xb6>
 800d9cc:	b18e      	cbz	r6, 800d9f2 <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d9ce:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800d9d2:	b94a      	cbnz	r2, 800d9e8 <dir_find+0xac>
		dp->sect++;				/* Next sector */
 800d9d4:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800d9d6:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800d9d8:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800d9da:	2900      	cmp	r1, #0
 800d9dc:	d15c      	bne.n	800da98 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d9de:	8919      	ldrh	r1, [r3, #8]
 800d9e0:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 800d9e4:	f240 813a 	bls.w	800dc5c <dir_find+0x320>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d9e8:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800d9ea:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d9ec:	4413      	add	r3, r2
 800d9ee:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 800d9f0:	e7b6      	b.n	800d960 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d9f2:	2704      	movs	r7, #4
}
 800d9f4:	4638      	mov	r0, r7
 800d9f6:	b005      	add	sp, #20
 800d9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d9fc:	2a0f      	cmp	r2, #15
 800d9fe:	d06d      	beq.n	800dadc <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800da00:	2f00      	cmp	r7, #0
 800da02:	f000 80d9 	beq.w	800dbb8 <dir_find+0x27c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800da06:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 800da0a:	f017 0701 	ands.w	r7, r7, #1
 800da0e:	d1d2      	bne.n	800d9b6 <dir_find+0x7a>
	} while (--cnt && r == 0);
 800da10:	782a      	ldrb	r2, [r5, #0]
 800da12:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800da16:	429a      	cmp	r2, r3
 800da18:	d1cd      	bne.n	800d9b6 <dir_find+0x7a>
 800da1a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800da1e:	786b      	ldrb	r3, [r5, #1]
 800da20:	429a      	cmp	r2, r3
 800da22:	d1c8      	bne.n	800d9b6 <dir_find+0x7a>
 800da24:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800da28:	78ab      	ldrb	r3, [r5, #2]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d1c3      	bne.n	800d9b6 <dir_find+0x7a>
 800da2e:	78ea      	ldrb	r2, [r5, #3]
 800da30:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800da34:	429a      	cmp	r2, r3
 800da36:	d1be      	bne.n	800d9b6 <dir_find+0x7a>
 800da38:	792a      	ldrb	r2, [r5, #4]
 800da3a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800da3e:	429a      	cmp	r2, r3
 800da40:	d1b9      	bne.n	800d9b6 <dir_find+0x7a>
 800da42:	796a      	ldrb	r2, [r5, #5]
 800da44:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800da48:	429a      	cmp	r2, r3
 800da4a:	d1b4      	bne.n	800d9b6 <dir_find+0x7a>
 800da4c:	79aa      	ldrb	r2, [r5, #6]
 800da4e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800da52:	429a      	cmp	r2, r3
 800da54:	d1af      	bne.n	800d9b6 <dir_find+0x7a>
 800da56:	79ea      	ldrb	r2, [r5, #7]
 800da58:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d1aa      	bne.n	800d9b6 <dir_find+0x7a>
 800da60:	7a2a      	ldrb	r2, [r5, #8]
 800da62:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800da66:	429a      	cmp	r2, r3
 800da68:	d1a5      	bne.n	800d9b6 <dir_find+0x7a>
 800da6a:	7a6a      	ldrb	r2, [r5, #9]
 800da6c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800da70:	429a      	cmp	r2, r3
 800da72:	d1a0      	bne.n	800d9b6 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800da74:	7aaa      	ldrb	r2, [r5, #10]
 800da76:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d19b      	bne.n	800d9b6 <dir_find+0x7a>
 800da7e:	e786      	b.n	800d98e <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800da80:	2301      	movs	r3, #1
 800da82:	462a      	mov	r2, r5
 800da84:	f898 0001 	ldrb.w	r0, [r8, #1]
 800da88:	9100      	str	r1, [sp, #0]
 800da8a:	f7fe ff4d 	bl	800c928 <disk_write>
 800da8e:	9900      	ldr	r1, [sp, #0]
 800da90:	2800      	cmp	r0, #0
 800da92:	d06e      	beq.n	800db72 <dir_find+0x236>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800da94:	2701      	movs	r7, #1
 800da96:	e77a      	b.n	800d98e <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da98:	8958      	ldrh	r0, [r3, #10]
 800da9a:	3801      	subs	r0, #1
 800da9c:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 800daa0:	d1a2      	bne.n	800d9e8 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800daa2:	4618      	mov	r0, r3
 800daa4:	9201      	str	r2, [sp, #4]
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	f7ff fb1e 	bl	800d0e8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800daac:	2801      	cmp	r0, #1
 800daae:	f240 80d9 	bls.w	800dc64 <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dab2:	1c43      	adds	r3, r0, #1
 800dab4:	d0ee      	beq.n	800da94 <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dab6:	9b00      	ldr	r3, [sp, #0]
 800dab8:	6999      	ldr	r1, [r3, #24]
 800daba:	4288      	cmp	r0, r1
 800dabc:	f080 80ce 	bcs.w	800dc5c <dir_find+0x320>
				dp->clust = clst;		/* Initialize data for new cluster */
 800dac0:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800dac2:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dac4:	6999      	ldr	r1, [r3, #24]
 800dac6:	9a01      	ldr	r2, [sp, #4]
 800dac8:	3902      	subs	r1, #2
 800daca:	4288      	cmp	r0, r1
 800dacc:	f080 80cc 	bcs.w	800dc68 <dir_find+0x32c>
	return clst * fs->csize + fs->database;
 800dad0:	8959      	ldrh	r1, [r3, #10]
 800dad2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800dad4:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
 800dad8:	61e6      	str	r6, [r4, #28]
 800dada:	e785      	b.n	800d9e8 <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800dadc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800dae0:	0658      	lsls	r0, r3, #25
 800dae2:	f53f af6c 	bmi.w	800d9be <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800dae6:	0671      	lsls	r1, r6, #25
 800dae8:	f140 80b3 	bpl.w	800dc52 <dir_find+0x316>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800daec:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800daee:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800daf2:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800daf6:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800daf8:	7b6b      	ldrb	r3, [r5, #13]
 800dafa:	454b      	cmp	r3, r9
 800dafc:	f040 80ac 	bne.w	800dc58 <dir_find+0x31c>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800db00:	8b6b      	ldrh	r3, [r5, #26]
 800db02:	2b00      	cmp	r3, #0
 800db04:	f040 80a8 	bne.w	800dc58 <dir_find+0x31c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800db08:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800db0a:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800db0c:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800db10:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800db14:	f8df a178 	ldr.w	sl, [pc, #376]	; 800dc90 <dir_find+0x354>
 800db18:	9602      	str	r6, [sp, #8]
 800db1a:	462e      	mov	r6, r5
 800db1c:	3f01      	subs	r7, #1
 800db1e:	f10a 0b0d 	add.w	fp, sl, #13
 800db22:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800db24:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800db26:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800db2a:	f8cd 8000 	str.w	r8, [sp]
 800db2e:	9401      	str	r4, [sp, #4]
 800db30:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800db34:	e010      	b.n	800db58 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800db36:	2ffe      	cmp	r7, #254	; 0xfe
 800db38:	4620      	mov	r0, r4
 800db3a:	d816      	bhi.n	800db6a <dir_find+0x22e>
 800db3c:	f001 fe4a 	bl	800f7d4 <ff_wtoupper>
 800db40:	4680      	mov	r8, r0
 800db42:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 800db46:	3701      	adds	r7, #1
 800db48:	f001 fe44 	bl	800f7d4 <ff_wtoupper>
 800db4c:	4580      	cmp	r8, r0
 800db4e:	4621      	mov	r1, r4
 800db50:	d10b      	bne.n	800db6a <dir_find+0x22e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800db52:	45d3      	cmp	fp, sl
 800db54:	f000 808a 	beq.w	800dc6c <dir_find+0x330>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800db58:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800db5c:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 800db5e:	2900      	cmp	r1, #0
 800db60:	d1e9      	bne.n	800db36 <dir_find+0x1fa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800db62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800db66:	429c      	cmp	r4, r3
 800db68:	d0f3      	beq.n	800db52 <dir_find+0x216>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800db6a:	e9dd 8400 	ldrd	r8, r4, [sp]
 800db6e:	27ff      	movs	r7, #255	; 0xff
 800db70:	e725      	b.n	800d9be <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800db72:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 800db76:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800db7a:	1aea      	subs	r2, r5, r3
 800db7c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800db80:	429a      	cmp	r2, r3
 800db82:	f4bf aef8 	bcs.w	800d976 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db86:	f898 a002 	ldrb.w	sl, [r8, #2]
 800db8a:	f1ba 0f01 	cmp.w	sl, #1
 800db8e:	f67f aef2 	bls.w	800d976 <dir_find+0x3a>
 800db92:	468b      	mov	fp, r1
 800db94:	e001      	b.n	800db9a <dir_find+0x25e>
					wsect += fs->fsize;
 800db96:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800db9a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db9c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800dba0:	2301      	movs	r3, #1
 800dba2:	4659      	mov	r1, fp
 800dba4:	462a      	mov	r2, r5
 800dba6:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dbaa:	f7fe febd 	bl	800c928 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dbae:	f1ba 0f01 	cmp.w	sl, #1
 800dbb2:	d1f0      	bne.n	800db96 <dir_find+0x25a>
 800dbb4:	4659      	mov	r1, fp
 800dbb6:	e6de      	b.n	800d976 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800dbb8:	782a      	ldrb	r2, [r5, #0]
 800dbba:	7869      	ldrb	r1, [r5, #1]
 800dbbc:	01d0      	lsls	r0, r2, #7
 800dbbe:	78ae      	ldrb	r6, [r5, #2]
 800dbc0:	78eb      	ldrb	r3, [r5, #3]
 800dbc2:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
 800dbc6:	792a      	ldrb	r2, [r5, #4]
 800dbc8:	f895 a005 	ldrb.w	sl, [r5, #5]
 800dbcc:	4408      	add	r0, r1
 800dbce:	f895 e006 	ldrb.w	lr, [r5, #6]
 800dbd2:	f895 c007 	ldrb.w	ip, [r5, #7]
 800dbd6:	f3c0 0146 	ubfx	r1, r0, #1, #7
 800dbda:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 800dbde:	7a68      	ldrb	r0, [r5, #9]
 800dbe0:	fa56 f181 	uxtab	r1, r6, r1
 800dbe4:	7a2e      	ldrb	r6, [r5, #8]
 800dbe6:	f3c1 0b46 	ubfx	fp, r1, #1, #7
 800dbea:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
 800dbee:	7aa9      	ldrb	r1, [r5, #10]
 800dbf0:	fa53 fb8b 	uxtab	fp, r3, fp
 800dbf4:	f3cb 0346 	ubfx	r3, fp, #1, #7
 800dbf8:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
 800dbfc:	fa52 f383 	uxtab	r3, r2, r3
 800dc00:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800dc04:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800dc08:	fa5a f282 	uxtab	r2, sl, r2
 800dc0c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800dc10:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800dc14:	fa5e f383 	uxtab	r3, lr, r3
 800dc18:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800dc1c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800dc20:	fa5c f282 	uxtab	r2, ip, r2
 800dc24:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800dc28:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800dc2c:	fa56 f383 	uxtab	r3, r6, r3
 800dc30:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800dc34:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800dc38:	fa50 f282 	uxtab	r2, r0, r2
 800dc3c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800dc40:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800dc44:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	4599      	cmp	r9, r3
 800dc4c:	f47f aedb 	bne.w	800da06 <dir_find+0xca>
 800dc50:	e69d      	b.n	800d98e <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dc52:	42b7      	cmp	r7, r6
 800dc54:	f43f af50 	beq.w	800daf8 <dir_find+0x1bc>
 800dc58:	27ff      	movs	r7, #255	; 0xff
 800dc5a:	e6b0      	b.n	800d9be <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	2704      	movs	r7, #4
 800dc60:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 800dc62:	e694      	b.n	800d98e <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dc64:	2702      	movs	r7, #2
 800dc66:	e692      	b.n	800d98e <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc68:	4616      	mov	r6, r2
 800dc6a:	e735      	b.n	800dad8 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dc6c:	4635      	mov	r5, r6
 800dc6e:	f8dd 8000 	ldr.w	r8, [sp]
 800dc72:	782b      	ldrb	r3, [r5, #0]
 800dc74:	065a      	lsls	r2, r3, #25
 800dc76:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 800dc7a:	d500      	bpl.n	800dc7e <dir_find+0x342>
 800dc7c:	b911      	cbnz	r1, 800dc84 <dir_find+0x348>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dc7e:	3e01      	subs	r6, #1
 800dc80:	b2f7      	uxtb	r7, r6
 800dc82:	e69c      	b.n	800d9be <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dc84:	9b03      	ldr	r3, [sp, #12]
 800dc86:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d0f7      	beq.n	800dc7e <dir_find+0x342>
 800dc8e:	e7e3      	b.n	800dc58 <dir_find+0x31c>
 800dc90:	0801b5e8 	.word	0x0801b5e8

0800dc94 <follow_path>:
{
 800dc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dc98:	780b      	ldrb	r3, [r1, #0]
{
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	4688      	mov	r8, r1
 800dc9e:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dca0:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 800dca2:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dca6:	d103      	bne.n	800dcb0 <follow_path+0x1c>
 800dca8:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800dcac:	2b2f      	cmp	r3, #47	; 0x2f
 800dcae:	d0fb      	beq.n	800dca8 <follow_path+0x14>
 800dcb0:	2b5c      	cmp	r3, #92	; 0x5c
 800dcb2:	d0f9      	beq.n	800dca8 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dcb8:	f898 3000 	ldrb.w	r3, [r8]
 800dcbc:	2b1f      	cmp	r3, #31
 800dcbe:	f240 8147 	bls.w	800df50 <follow_path+0x2bc>
 800dcc2:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 800dcc4:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dcc6:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 800dcc8:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 800dcca:	d929      	bls.n	800dd20 <follow_path+0x8c>
 800dccc:	f1a5 0902 	sub.w	r9, r5, #2
 800dcd0:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 800dcd2:	2401      	movs	r4, #1
 800dcd4:	e008      	b.n	800dce8 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 800dcd6:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 800dcda:	1c63      	adds	r3, r4, #1
 800dcdc:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800dce0:	281f      	cmp	r0, #31
 800dce2:	f240 80f6 	bls.w	800ded2 <follow_path+0x23e>
		w = p[si++];					/* Get a character */
 800dce6:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800dce8:	282f      	cmp	r0, #47	; 0x2f
 800dcea:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800dcee:	d01d      	beq.n	800dd2c <follow_path+0x98>
 800dcf0:	285c      	cmp	r0, #92	; 0x5c
 800dcf2:	d01b      	beq.n	800dd2c <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800dcf4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800dcf8:	d00e      	beq.n	800dd18 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800dcfa:	2101      	movs	r1, #1
 800dcfc:	f001 fd4c 	bl	800f798 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800dd00:	b150      	cbz	r0, 800dd18 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800dd02:	287f      	cmp	r0, #127	; 0x7f
 800dd04:	d8e7      	bhi.n	800dcd6 <follow_path+0x42>
	while (*str && *str != chr) str++;
 800dd06:	2322      	movs	r3, #34	; 0x22
 800dd08:	4aa5      	ldr	r2, [pc, #660]	; (800dfa0 <follow_path+0x30c>)
 800dd0a:	e003      	b.n	800dd14 <follow_path+0x80>
 800dd0c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d0e0      	beq.n	800dcd6 <follow_path+0x42>
 800dd14:	4298      	cmp	r0, r3
 800dd16:	d1f9      	bne.n	800dd0c <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dd18:	2006      	movs	r0, #6
}
 800dd1a:	b003      	add	sp, #12
 800dd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 800dd20:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dd22:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 800dd24:	802b      	strh	r3, [r5, #0]
}
 800dd26:	b003      	add	sp, #12
 800dd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dd2c:	f818 3004 	ldrb.w	r3, [r8, r4]
 800dd30:	eb08 0204 	add.w	r2, r8, r4
 800dd34:	2b2f      	cmp	r3, #47	; 0x2f
 800dd36:	d002      	beq.n	800dd3e <follow_path+0xaa>
 800dd38:	2b5c      	cmp	r3, #92	; 0x5c
 800dd3a:	f040 811e 	bne.w	800df7a <follow_path+0x2e6>
 800dd3e:	1c63      	adds	r3, r4, #1
 800dd40:	4443      	add	r3, r8
 800dd42:	4698      	mov	r8, r3
 800dd44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd48:	2a2f      	cmp	r2, #47	; 0x2f
 800dd4a:	d0fa      	beq.n	800dd42 <follow_path+0xae>
 800dd4c:	2a5c      	cmp	r2, #92	; 0x5c
 800dd4e:	d0f8      	beq.n	800dd42 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dd50:	f1ba 0f00 	cmp.w	sl, #0
 800dd54:	d0e4      	beq.n	800dd20 <follow_path+0x8c>
 800dd56:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dd58:	2400      	movs	r4, #0
 800dd5a:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 800dd5e:	e002      	b.n	800dd66 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dd60:	f1ba 0a01 	subs.w	sl, sl, #1
 800dd64:	d0dc      	beq.n	800dd20 <follow_path+0x8c>
		w = lfn[di - 1];
 800dd66:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800dd6a:	2b20      	cmp	r3, #32
 800dd6c:	d0f8      	beq.n	800dd60 <follow_path+0xcc>
 800dd6e:	2b2e      	cmp	r3, #46	; 0x2e
 800dd70:	d0f6      	beq.n	800dd60 <follow_path+0xcc>
		*d++ = (BYTE)val;
 800dd72:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 800dd76:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
 800dd78:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
 800dd7c:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 800dd80:	627b      	str	r3, [r7, #36]	; 0x24
 800dd82:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd84:	2320      	movs	r3, #32
 800dd86:	85ba      	strh	r2, [r7, #44]	; 0x2c
 800dd88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dd8c:	8828      	ldrh	r0, [r5, #0]
 800dd8e:	282e      	cmp	r0, #46	; 0x2e
 800dd90:	d002      	beq.n	800dd98 <follow_path+0x104>
 800dd92:	4298      	cmp	r0, r3
 800dd94:	f040 80e5 	bne.w	800df62 <follow_path+0x2ce>
 800dd98:	462a      	mov	r2, r5
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800dda0:	461c      	mov	r4, r3
 800dda2:	3301      	adds	r3, #1
 800dda4:	2820      	cmp	r0, #32
 800dda6:	d0f9      	beq.n	800dd9c <follow_path+0x108>
 800dda8:	282e      	cmp	r0, #46	; 0x2e
 800ddaa:	d0f7      	beq.n	800dd9c <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
 800ddac:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ddae:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 800ddb2:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800ddb6:	2a2e      	cmp	r2, #46	; 0x2e
 800ddb8:	d002      	beq.n	800ddc0 <follow_path+0x12c>
 800ddba:	f1ba 0a01 	subs.w	sl, sl, #1
 800ddbe:	d1f8      	bne.n	800ddb2 <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
 800ddc0:	b3b0      	cbz	r0, 800de30 <follow_path+0x19c>
 800ddc2:	2208      	movs	r2, #8
 800ddc4:	4641      	mov	r1, r8
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	46b8      	mov	r8, r7
 800ddca:	462f      	mov	r7, r5
 800ddcc:	4615      	mov	r5, r2
 800ddce:	4699      	mov	r9, r3
 800ddd0:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ddd2:	2820      	cmp	r0, #32
 800ddd4:	d003      	beq.n	800ddde <follow_path+0x14a>
 800ddd6:	282e      	cmp	r0, #46	; 0x2e
 800ddd8:	d14d      	bne.n	800de76 <follow_path+0x1e2>
 800ddda:	45a2      	cmp	sl, r4
 800dddc:	d04b      	beq.n	800de76 <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
 800ddde:	f046 0603 	orr.w	r6, r6, #3
 800dde2:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 800dde4:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800dde8:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 800ddea:	2800      	cmp	r0, #0
 800ddec:	d1f1      	bne.n	800ddd2 <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ddee:	4647      	mov	r7, r8
 800ddf0:	4690      	mov	r8, r2
 800ddf2:	462a      	mov	r2, r5
 800ddf4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800ddf8:	29e5      	cmp	r1, #229	; 0xe5
 800ddfa:	d102      	bne.n	800de02 <follow_path+0x16e>
 800ddfc:	2105      	movs	r1, #5
 800ddfe:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800de02:	2a08      	cmp	r2, #8
 800de04:	f000 8093 	beq.w	800df2e <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800de08:	f003 020c 	and.w	r2, r3, #12
 800de0c:	2a0c      	cmp	r2, #12
 800de0e:	d065      	beq.n	800dedc <follow_path+0x248>
 800de10:	f003 0303 	and.w	r3, r3, #3
 800de14:	2b03      	cmp	r3, #3
 800de16:	d061      	beq.n	800dedc <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800de18:	07b1      	lsls	r1, r6, #30
 800de1a:	d409      	bmi.n	800de30 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d102      	bne.n	800de26 <follow_path+0x192>
 800de20:	f046 0610 	orr.w	r6, r6, #16
 800de24:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800de26:	2a04      	cmp	r2, #4
 800de28:	d102      	bne.n	800de30 <follow_path+0x19c>
 800de2a:	f046 0608 	orr.w	r6, r6, #8
 800de2e:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 800de30:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800de32:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800de36:	f7ff fd81 	bl	800d93c <dir_find>
			ns = dp->fn[NSFLAG];
 800de3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800de3e:	2800      	cmp	r0, #0
 800de40:	d158      	bne.n	800def4 <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de42:	075a      	lsls	r2, r3, #29
 800de44:	f53f af69 	bmi.w	800dd1a <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800de48:	79bb      	ldrb	r3, [r7, #6]
 800de4a:	06db      	lsls	r3, r3, #27
 800de4c:	f140 8097 	bpl.w	800df7e <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 800de56:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800de5e:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de60:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800de62:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800de64:	d102      	bne.n	800de6c <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800de66:	8a9b      	ldrh	r3, [r3, #20]
 800de68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de6c:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800de6e:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 800de70:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de74:	e726      	b.n	800dcc4 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800de76:	454d      	cmp	r5, r9
 800de78:	d91c      	bls.n	800deb4 <follow_path+0x220>
 800de7a:	ebaa 0104 	sub.w	r1, sl, r4
 800de7e:	fab1 f181 	clz	r1, r1
 800de82:	0949      	lsrs	r1, r1, #5
 800de84:	b9b1      	cbnz	r1, 800deb4 <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
 800de86:	287f      	cmp	r0, #127	; 0x7f
 800de88:	d83c      	bhi.n	800df04 <follow_path+0x270>
	while (*str && *str != chr) str++;
 800de8a:	212b      	movs	r1, #43	; 0x2b
 800de8c:	f8df c118 	ldr.w	ip, [pc, #280]	; 800dfa8 <follow_path+0x314>
 800de90:	e003      	b.n	800de9a <follow_path+0x206>
 800de92:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800de96:	2900      	cmp	r1, #0
 800de98:	d052      	beq.n	800df40 <follow_path+0x2ac>
 800de9a:	4281      	cmp	r1, r0
 800de9c:	d1f9      	bne.n	800de92 <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800de9e:	f046 0603 	orr.w	r6, r6, #3
 800dea2:	205f      	movs	r0, #95	; 0x5f
 800dea4:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 800dea6:	eb08 0109 	add.w	r1, r8, r9
 800deaa:	f109 0901 	add.w	r9, r9, #1
 800deae:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800deb2:	e797      	b.n	800dde4 <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
 800deb4:	2d0b      	cmp	r5, #11
 800deb6:	d064      	beq.n	800df82 <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800deb8:	45a2      	cmp	sl, r4
 800deba:	d003      	beq.n	800dec4 <follow_path+0x230>
 800debc:	f046 0603 	orr.w	r6, r6, #3
 800dec0:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 800dec2:	d394      	bcc.n	800ddee <follow_path+0x15a>
			b <<= 2; continue;
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dec8:	250b      	movs	r5, #11
 800deca:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	e788      	b.n	800dde4 <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
 800ded2:	46a2      	mov	sl, r4
 800ded4:	4498      	add	r8, r3
 800ded6:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ded8:	2404      	movs	r4, #4
 800deda:	e73e      	b.n	800dd5a <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dedc:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 800dee0:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800dee2:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800dee4:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800dee8:	f7ff fd28 	bl	800d93c <dir_find>
			ns = dp->fn[NSFLAG];
 800deec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800def0:	2800      	cmp	r0, #0
 800def2:	d0a6      	beq.n	800de42 <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800def4:	2804      	cmp	r0, #4
 800def6:	f47f af10 	bne.w	800dd1a <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800defa:	f013 0f04 	tst.w	r3, #4
 800defe:	bf08      	it	eq
 800df00:	2005      	moveq	r0, #5
 800df02:	e70a      	b.n	800dd1a <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800df04:	e9cd 3200 	strd	r3, r2, [sp]
 800df08:	f001 fc46 	bl	800f798 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800df0c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df10:	b918      	cbnz	r0, 800df1a <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
 800df12:	f046 0602 	orr.w	r6, r6, #2
 800df16:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800df18:	e7c1      	b.n	800de9e <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800df1a:	4922      	ldr	r1, [pc, #136]	; (800dfa4 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 800df1c:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800df20:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 800df22:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800df24:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800df28:	2800      	cmp	r0, #0
 800df2a:	d0b8      	beq.n	800de9e <follow_path+0x20a>
 800df2c:	e7ad      	b.n	800de8a <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
 800df2e:	009a      	lsls	r2, r3, #2
 800df30:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800df34:	2a0c      	cmp	r2, #12
 800df36:	d0d1      	beq.n	800dedc <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800df38:	07b0      	lsls	r0, r6, #30
 800df3a:	f57f af74 	bpl.w	800de26 <follow_path+0x192>
 800df3e:	e777      	b.n	800de30 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
 800df40:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800df44:	2919      	cmp	r1, #25
 800df46:	d80f      	bhi.n	800df68 <follow_path+0x2d4>
					b |= 2;
 800df48:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 800df4c:	b2c0      	uxtb	r0, r0
 800df4e:	e7aa      	b.n	800dea6 <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
 800df50:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800df52:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 800df54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 800df58:	b003      	add	sp, #12
 800df5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800df5e:	f7ff bc41 	b.w	800d7e4 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800df62:	4626      	mov	r6, r4
 800df64:	2401      	movs	r4, #1
 800df66:	e722      	b.n	800ddae <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
 800df68:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800df6c:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800df6e:	bf9c      	itt	ls
 800df70:	3820      	subls	r0, #32
 800df72:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 800df76:	b2c0      	uxtb	r0, r0
 800df78:	e795      	b.n	800dea6 <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800df7a:	4690      	mov	r8, r2
 800df7c:	e6e8      	b.n	800dd50 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800df7e:	2005      	movs	r0, #5
 800df80:	e6cb      	b.n	800dd1a <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 800df82:	4647      	mov	r7, r8
 800df84:	4690      	mov	r8, r2
 800df86:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800df8a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 800df8e:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800df90:	2ae5      	cmp	r2, #229	; 0xe5
 800df92:	f47f af39 	bne.w	800de08 <follow_path+0x174>
 800df96:	2205      	movs	r2, #5
 800df98:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800df9c:	e734      	b.n	800de08 <follow_path+0x174>
 800df9e:	bf00      	nop
 800dfa0:	0801b554 	.word	0x0801b554
 800dfa4:	0801b568 	.word	0x0801b568
 800dfa8:	0801b560 	.word	0x0801b560

0800dfac <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dfac:	2901      	cmp	r1, #1
{
 800dfae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
 800dfb6:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dfb8:	d914      	bls.n	800dfe4 <remove_chain+0x38>
 800dfba:	69ab      	ldr	r3, [r5, #24]
 800dfbc:	428b      	cmp	r3, r1
 800dfbe:	d911      	bls.n	800dfe4 <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dfc0:	4606      	mov	r6, r0
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	b992      	cbnz	r2, 800dfec <remove_chain+0x40>
 800dfc6:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dfc8:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
 800dfcc:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dfd0:	429c      	cmp	r4, r3
 800dfd2:	d207      	bcs.n	800dfe4 <remove_chain+0x38>
		switch (fs->fs_type) {
 800dfd4:	783b      	ldrb	r3, [r7, #0]
 800dfd6:	2b02      	cmp	r3, #2
 800dfd8:	f000 80a3 	beq.w	800e122 <remove_chain+0x176>
 800dfdc:	2b03      	cmp	r3, #3
 800dfde:	d022      	beq.n	800e026 <remove_chain+0x7a>
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d011      	beq.n	800e008 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dfe4:	2002      	movs	r0, #2
}
 800dfe6:	b003      	add	sp, #12
 800dfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dfec:	4293      	cmp	r3, r2
 800dfee:	d9f9      	bls.n	800dfe4 <remove_chain+0x38>
 800dff0:	2a01      	cmp	r2, #1
 800dff2:	d0f7      	beq.n	800dfe4 <remove_chain+0x38>
 800dff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dff8:	4628      	mov	r0, r5
 800dffa:	f7fe ffef 	bl	800cfdc <put_fat.part.0>
		if (res != FR_OK) return res;
 800dffe:	2800      	cmp	r0, #0
 800e000:	d1f1      	bne.n	800dfe6 <remove_chain+0x3a>
 800e002:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e004:	69bb      	ldr	r3, [r7, #24]
 800e006:	e7df      	b.n	800dfc8 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e008:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e00a:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e00e:	4638      	mov	r0, r7
 800e010:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800e014:	f7fe fe32 	bl	800cc7c <move_window>
 800e018:	2800      	cmp	r0, #0
 800e01a:	f000 80a9 	beq.w	800e170 <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e01e:	2001      	movs	r0, #1
}
 800e020:	b003      	add	sp, #12
 800e022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e026:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e028:	4638      	mov	r0, r7
 800e02a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e02e:	f7fe fe25 	bl	800cc7c <move_window>
 800e032:	2800      	cmp	r0, #0
 800e034:	d1f3      	bne.n	800e01e <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e036:	00a3      	lsls	r3, r4, #2
 800e038:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800e03c:	443b      	add	r3, r7
 800e03e:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e042:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 800e046:	f1ba 0f00 	cmp.w	sl, #0
 800e04a:	f000 80af 	beq.w	800e1ac <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e04e:	f1ba 0f01 	cmp.w	sl, #1
 800e052:	d0c7      	beq.n	800dfe4 <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e054:	69ab      	ldr	r3, [r5, #24]
 800e056:	42a3      	cmp	r3, r4
 800e058:	d9c4      	bls.n	800dfe4 <remove_chain+0x38>
		switch (fs->fs_type) {
 800e05a:	782f      	ldrb	r7, [r5, #0]
 800e05c:	2f02      	cmp	r7, #2
 800e05e:	d029      	beq.n	800e0b4 <remove_chain+0x108>
 800e060:	2f03      	cmp	r7, #3
 800e062:	d047      	beq.n	800e0f4 <remove_chain+0x148>
 800e064:	2f01      	cmp	r7, #1
 800e066:	d1bd      	bne.n	800dfe4 <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e068:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e06a:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e06e:	4628      	mov	r0, r5
 800e070:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800e074:	f7fe fe02 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800e078:	2800      	cmp	r0, #0
 800e07a:	d1b4      	bne.n	800dfe6 <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e07c:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
 800e07e:	f10b 0301 	add.w	r3, fp, #1
 800e082:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e086:	d55c      	bpl.n	800e142 <remove_chain+0x196>
 800e088:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e08c:	4628      	mov	r0, r5
 800e08e:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e090:	f002 020f 	and.w	r2, r2, #15
 800e094:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e098:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800e09a:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e09c:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 800e0a0:	f7fe fdec 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800e0a4:	9b01      	ldr	r3, [sp, #4]
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d19d      	bne.n	800dfe6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 800e0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0ae:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e0b0:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800e0b2:	e00c      	b.n	800e0ce <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e0b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e0bc:	f7fe fdde 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d190      	bne.n	800dfe6 <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e0c4:	0064      	lsls	r4, r4, #1
 800e0c6:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800e0ca:	442c      	add	r4, r5
 800e0cc:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
 800e0ce:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e0d2:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800e0d6:	1e91      	subs	r1, r2, #2
 800e0d8:	428b      	cmp	r3, r1
 800e0da:	d205      	bcs.n	800e0e8 <remove_chain+0x13c>
			fs->free_clst++;
 800e0dc:	3301      	adds	r3, #1
 800e0de:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800e0e0:	792b      	ldrb	r3, [r5, #4]
 800e0e2:	f043 0301 	orr.w	r3, r3, #1
 800e0e6:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e0e8:	4552      	cmp	r2, sl
 800e0ea:	d95f      	bls.n	800e1ac <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e0ec:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e0ee:	4654      	mov	r4, sl
 800e0f0:	69bb      	ldr	r3, [r7, #24]
 800e0f2:	e76d      	b.n	800dfd0 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e0f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800e0f6:	4628      	mov	r0, r5
 800e0f8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e0fc:	f7fe fdbe 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800e100:	2800      	cmp	r0, #0
 800e102:	f47f af70 	bne.w	800dfe6 <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e106:	00a4      	lsls	r4, r4, #2
 800e108:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800e10c:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800e110:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e114:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
 800e116:	0e13      	lsrs	r3, r2, #24
 800e118:	70a0      	strb	r0, [r4, #2]
 800e11a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 800e11e:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
 800e120:	e7d5      	b.n	800e0ce <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e124:	4638      	mov	r0, r7
 800e126:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e12a:	f7fe fda7 	bl	800cc7c <move_window>
 800e12e:	2800      	cmp	r0, #0
 800e130:	f47f af75 	bne.w	800e01e <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e134:	0063      	lsls	r3, r4, #1
 800e136:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e13a:	443b      	add	r3, r7
 800e13c:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
 800e140:	e781      	b.n	800e046 <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e142:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e146:	4628      	mov	r0, r5
 800e148:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800e14a:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e14c:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 800e150:	9301      	str	r3, [sp, #4]
 800e152:	f7fe fd93 	bl	800cc7c <move_window>
			if (res != FR_OK) break;
 800e156:	2800      	cmp	r0, #0
 800e158:	f47f af45 	bne.w	800dfe6 <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 800e15c:	9b01      	ldr	r3, [sp, #4]
 800e15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e162:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
 800e166:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e168:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800e16c:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800e16e:	e7ae      	b.n	800e0ce <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
 800e170:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e174:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800e176:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e17a:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800e17c:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e17e:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e182:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e186:	f7fe fd79 	bl	800cc7c <move_window>
 800e18a:	2800      	cmp	r0, #0
 800e18c:	f47f af47 	bne.w	800e01e <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e190:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e194:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800e196:	44ba      	add	sl, r7
 800e198:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 800e19c:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e1a0:	bf4c      	ite	mi
 800e1a2:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
 800e1a6:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
 800e1aa:	e74c      	b.n	800e046 <remove_chain+0x9a>
	return FR_OK;
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	e71a      	b.n	800dfe6 <remove_chain+0x3a>

0800e1b0 <dir_next>:
{
 800e1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e1b4:	69c3      	ldr	r3, [r0, #28]
{
 800e1b6:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e1b8:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d03d      	beq.n	800e23a <dir_next+0x8a>
 800e1be:	3520      	adds	r5, #32
 800e1c0:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800e1c4:	d239      	bcs.n	800e23a <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e1c6:	f3c5 0808 	ubfx	r8, r5, #0, #9
 800e1ca:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800e1cc:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e1ce:	f1b8 0f00 	cmp.w	r8, #0
 800e1d2:	d008      	beq.n	800e1e6 <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e1d4:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e1d8:	4446      	add	r6, r8
	return FR_OK;
 800e1da:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800e1dc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e1de:	6226      	str	r6, [r4, #32]
}
 800e1e0:	b005      	add	sp, #20
 800e1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
 800e1e6:	460e      	mov	r6, r1
 800e1e8:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800e1ea:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800e1ec:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800e1ee:	b341      	cbz	r1, 800e242 <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e1f0:	897b      	ldrh	r3, [r7, #10]
 800e1f2:	3b01      	subs	r3, #1
 800e1f4:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	d1eb      	bne.n	800e1d4 <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e1fc:	4638      	mov	r0, r7
 800e1fe:	f7fe ff73 	bl	800d0e8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e202:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e204:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e206:	d924      	bls.n	800e252 <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e208:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e20c:	d023      	beq.n	800e256 <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	4283      	cmp	r3, r0
 800e212:	d922      	bls.n	800e25a <dir_next+0xaa>
	clst -= 2;
 800e214:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e216:	f107 0634 	add.w	r6, r7, #52	; 0x34
 800e21a:	4619      	mov	r1, r3
	clst -= 2;
 800e21c:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
 800e21e:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	3b02      	subs	r3, #2
 800e226:	428b      	cmp	r3, r1
 800e228:	d904      	bls.n	800e234 <dir_next+0x84>
	return clst * fs->csize + fs->database;
 800e22a:	897a      	ldrh	r2, [r7, #10]
 800e22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22e:	fb01 3302 	mla	r3, r1, r2, r3
 800e232:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
 800e234:	9b00      	ldr	r3, [sp, #0]
 800e236:	61e3      	str	r3, [r4, #28]
 800e238:	e7ce      	b.n	800e1d8 <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e23a:	2004      	movs	r0, #4
}
 800e23c:	b005      	add	sp, #20
 800e23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e242:	893b      	ldrh	r3, [r7, #8]
 800e244:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800e248:	d8c4      	bhi.n	800e1d4 <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
 800e24a:	2300      	movs	r3, #0
 800e24c:	2004      	movs	r0, #4
 800e24e:	61e3      	str	r3, [r4, #28]
 800e250:	e7c6      	b.n	800e1e0 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e252:	2002      	movs	r0, #2
 800e254:	e7c4      	b.n	800e1e0 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e256:	2001      	movs	r0, #1
 800e258:	e7c2      	b.n	800e1e0 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
 800e25a:	2e00      	cmp	r6, #0
 800e25c:	d0f5      	beq.n	800e24a <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e25e:	69a1      	ldr	r1, [r4, #24]
 800e260:	4620      	mov	r0, r4
 800e262:	f7ff f9ff 	bl	800d664 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e266:	4681      	mov	r9, r0
 800e268:	2800      	cmp	r0, #0
 800e26a:	d05a      	beq.n	800e322 <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e26c:	2801      	cmp	r0, #1
 800e26e:	d0f0      	beq.n	800e252 <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e270:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e274:	d0ef      	beq.n	800e256 <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e276:	78fb      	ldrb	r3, [r7, #3]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d154      	bne.n	800e326 <dir_next+0x176>
 800e27c:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
 800e280:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e284:	2100      	movs	r1, #0
 800e286:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e288:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
 800e28a:	f00a fbef 	bl	8018a6c <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e28e:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
 800e290:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e294:	3b02      	subs	r3, #2
	clst -= 2;
 800e296:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e298:	429a      	cmp	r2, r3
 800e29a:	d267      	bcs.n	800e36c <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
 800e29c:	4611      	mov	r1, r2
 800e29e:	897b      	ldrh	r3, [r7, #10]
 800e2a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2a2:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e2a6:	633a      	str	r2, [r7, #48]	; 0x30
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d036      	beq.n	800e31a <dir_next+0x16a>
 800e2ac:	2300      	movs	r3, #0
						fs->wflag = 1;
 800e2ae:	e9cd 6402 	strd	r6, r4, [sp, #8]
 800e2b2:	465e      	mov	r6, fp
 800e2b4:	461c      	mov	r4, r3
 800e2b6:	46ab      	mov	fp, r5
 800e2b8:	4615      	mov	r5, r2
 800e2ba:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e2be:	462a      	mov	r2, r5
 800e2c0:	4631      	mov	r1, r6
 800e2c2:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800e2c4:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	f7fe fb2e 	bl	800c928 <disk_write>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	d1c2      	bne.n	800e256 <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800e2d2:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e2d4:	1aea      	subs	r2, r5, r3
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d212      	bcs.n	800e302 <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2dc:	f897 a002 	ldrb.w	sl, [r7, #2]
 800e2e0:	f1ba 0f01 	cmp.w	sl, #1
 800e2e4:	d801      	bhi.n	800e2ea <dir_next+0x13a>
 800e2e6:	e00c      	b.n	800e302 <dir_next+0x152>
					wsect += fs->fsize;
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	4631      	mov	r1, r6
 800e2f4:	462a      	mov	r2, r5
 800e2f6:	7878      	ldrb	r0, [r7, #1]
 800e2f8:	f7fe fb16 	bl	800c928 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2fc:	f1ba 0f01 	cmp.w	sl, #1
 800e300:	d1f2      	bne.n	800e2e8 <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e304:	3401      	adds	r4, #1
 800e306:	1c5d      	adds	r5, r3, #1
 800e308:	897b      	ldrh	r3, [r7, #10]
 800e30a:	42a3      	cmp	r3, r4
 800e30c:	633d      	str	r5, [r7, #48]	; 0x30
 800e30e:	d8d4      	bhi.n	800e2ba <dir_next+0x10a>
 800e310:	462a      	mov	r2, r5
 800e312:	4623      	mov	r3, r4
 800e314:	465d      	mov	r5, fp
 800e316:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
 800e31a:	1ad2      	subs	r2, r2, r3
 800e31c:	9901      	ldr	r1, [sp, #4]
 800e31e:	633a      	str	r2, [r7, #48]	; 0x30
 800e320:	e77d      	b.n	800e21e <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e322:	2007      	movs	r0, #7
 800e324:	e75c      	b.n	800e1e0 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
 800e326:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e32a:	f107 0b34 	add.w	fp, r7, #52	; 0x34
 800e32e:	2301      	movs	r3, #1
 800e330:	7878      	ldrb	r0, [r7, #1]
 800e332:	4652      	mov	r2, sl
 800e334:	4659      	mov	r1, fp
 800e336:	f7fe faf7 	bl	800c928 <disk_write>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d18b      	bne.n	800e256 <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800e340:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e342:	ebaa 0203 	sub.w	r2, sl, r3
 800e346:	69fb      	ldr	r3, [r7, #28]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d299      	bcs.n	800e280 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e34c:	78be      	ldrb	r6, [r7, #2]
 800e34e:	2e01      	cmp	r6, #1
 800e350:	d801      	bhi.n	800e356 <dir_next+0x1a6>
 800e352:	e795      	b.n	800e280 <dir_next+0xd0>
 800e354:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
 800e356:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e358:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800e35a:	2301      	movs	r3, #1
 800e35c:	4659      	mov	r1, fp
 800e35e:	4652      	mov	r2, sl
 800e360:	7878      	ldrb	r0, [r7, #1]
 800e362:	f7fe fae1 	bl	800c928 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e366:	2e01      	cmp	r6, #1
 800e368:	d1f4      	bne.n	800e354 <dir_next+0x1a4>
 800e36a:	e789      	b.n	800e280 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
 800e36c:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e36e:	2200      	movs	r2, #0
 800e370:	e799      	b.n	800e2a6 <dir_next+0xf6>
 800e372:	bf00      	nop

0800e374 <dir_register>:
{
 800e374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e378:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 800e37c:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e37e:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
 800e382:	9302      	str	r3, [sp, #8]
 800e384:	f040 82ce 	bne.w	800e924 <dir_register+0x5b0>
	FATFS *fs = dp->obj.fs;
 800e388:	f8d0 a000 	ldr.w	sl, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e38c:	4605      	mov	r5, r0
 800e38e:	f8da 200c 	ldr.w	r2, [sl, #12]
 800e392:	8813      	ldrh	r3, [r2, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	f000 82ca 	beq.w	800e92e <dir_register+0x5ba>
 800e39a:	468b      	mov	fp, r1
 800e39c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800e3a0:	f10b 0b01 	add.w	fp, fp, #1
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1f9      	bne.n	800e39c <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 800e3a8:	f105 0724 	add.w	r7, r5, #36	; 0x24
			*d++ = *s++;
 800e3ac:	ab0a      	add	r3, sp, #40	; 0x28
 800e3ae:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e3b2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e3b6:	9b02      	ldr	r3, [sp, #8]
 800e3b8:	07dc      	lsls	r4, r3, #31
 800e3ba:	d462      	bmi.n	800e482 <dir_register+0x10e>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e3bc:	f013 0402 	ands.w	r4, r3, #2
 800e3c0:	4657      	mov	r7, sl
 800e3c2:	f000 8239 	beq.w	800e838 <dir_register+0x4c4>
 800e3c6:	4bc5      	ldr	r3, [pc, #788]	; (800e6dc <dir_register+0x368>)
 800e3c8:	f10b 040c 	add.w	r4, fp, #12
	res = dir_sdi(dp, 0);
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e3d0:	fba3 3404 	umull	r3, r4, r3, r4
	res = dir_sdi(dp, 0);
 800e3d4:	f7ff fa06 	bl	800d7e4 <dir_sdi>
	if (res == FR_OK) {
 800e3d8:	4606      	mov	r6, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e3da:	08a4      	lsrs	r4, r4, #2
 800e3dc:	f104 0901 	add.w	r9, r4, #1
	if (res == FR_OK) {
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	f040 8233 	bne.w	800e84c <dir_register+0x4d8>
		n = 0;
 800e3e6:	4680      	mov	r8, r0
 800e3e8:	e008      	b.n	800e3fc <dir_register+0x88>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e3ea:	0952      	lsrs	r2, r2, #5
 800e3ec:	b1c3      	cbz	r3, 800e420 <dir_register+0xac>
				n = 0;					/* Not a blank entry. Restart to search */
 800e3ee:	4690      	mov	r8, r2
			res = dir_next(dp, 1);
 800e3f0:	f7ff fede 	bl	800e1b0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e3f4:	4606      	mov	r6, r0
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	f040 8228 	bne.w	800e84c <dir_register+0x4d8>
			res = move_window(fs, dp->sect);
 800e3fc:	69e9      	ldr	r1, [r5, #28]
 800e3fe:	4638      	mov	r0, r7
 800e400:	f7fe fc3c 	bl	800cc7c <move_window>
 800e404:	4606      	mov	r6, r0
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e406:	f108 0801 	add.w	r8, r8, #1
			res = dir_next(dp, 1);
 800e40a:	2101      	movs	r1, #1
 800e40c:	4628      	mov	r0, r5
			if (res != FR_OK) break;
 800e40e:	2e00      	cmp	r6, #0
 800e410:	f040 821c 	bne.w	800e84c <dir_register+0x4d8>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e414:	6a2b      	ldr	r3, [r5, #32]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2be5      	cmp	r3, #229	; 0xe5
 800e41a:	fab3 f283 	clz	r2, r3
 800e41e:	d1e4      	bne.n	800e3ea <dir_register+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e420:	45c1      	cmp	r9, r8
 800e422:	d1e5      	bne.n	800e3f0 <dir_register+0x7c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e424:	2c00      	cmp	r4, #0
 800e426:	f040 8284 	bne.w	800e932 <dir_register+0x5be>
		res = move_window(fs, dp->sect);
 800e42a:	69e9      	ldr	r1, [r5, #28]
 800e42c:	4650      	mov	r0, sl
 800e42e:	f7fe fc25 	bl	800cc7c <move_window>
		if (res == FR_OK) {
 800e432:	4606      	mov	r6, r0
 800e434:	bb08      	cbnz	r0, 800e47a <dir_register+0x106>
		*d++ = (BYTE)val;
 800e436:	2220      	movs	r2, #32
 800e438:	4601      	mov	r1, r0
 800e43a:	6a28      	ldr	r0, [r5, #32]
 800e43c:	f00a fb16 	bl	8018a6c <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e440:	6a2b      	ldr	r3, [r5, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e442:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800e446:	1a9a      	subs	r2, r3, r2
 800e448:	2a02      	cmp	r2, #2
 800e44a:	f240 83d3 	bls.w	800ebf4 <dir_register+0x880>
			*d++ = *s++;
 800e44e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800e450:	601a      	str	r2, [r3, #0]
 800e452:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800e454:	605a      	str	r2, [r3, #4]
 800e456:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800e45a:	721a      	strb	r2, [r3, #8]
 800e45c:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800e460:	725a      	strb	r2, [r3, #9]
 800e462:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
 800e466:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 800e468:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e46a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800e46e:	6a29      	ldr	r1, [r5, #32]
 800e470:	f003 0318 	and.w	r3, r3, #24
 800e474:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800e476:	f88a 2003 	strb.w	r2, [sl, #3]
}
 800e47a:	4630      	mov	r0, r6
 800e47c:	b00b      	add	sp, #44	; 0x2c
 800e47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*d++ = *s++;
 800e482:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
		for (n = 1; n < 100; n++) {
 800e486:	f04f 0801 	mov.w	r8, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e48a:	2240      	movs	r2, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e48c:	f8cd b00c 	str.w	fp, [sp, #12]
			*d++ = *s++;
 800e490:	9300      	str	r3, [sp, #0]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e492:	46c3      	mov	fp, r8
			*d++ = *s++;
 800e494:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800e498:	460e      	mov	r6, r1
				if (sr & 0x10000) sr ^= 0x11021;
 800e49a:	4c91      	ldr	r4, [pc, #580]	; (800e6e0 <dir_register+0x36c>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e49c:	f04f 0920 	mov.w	r9, #32
 800e4a0:	4698      	mov	r8, r3
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e4a2:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
			*d++ = *s++;
 800e4a6:	9001      	str	r0, [sp, #4]
 800e4a8:	9b01      	ldr	r3, [sp, #4]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e4aa:	f1bb 0f05 	cmp.w	fp, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e4ae:	f8da 100c 	ldr.w	r1, [sl, #12]
			*d++ = *s++;
 800e4b2:	f8a5 802c 	strh.w	r8, [r5, #44]	; 0x2c
 800e4b6:	e9c5 3609 	strd	r3, r6, [r5, #36]	; 0x24
 800e4ba:	9b00      	ldr	r3, [sp, #0]
 800e4bc:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e4c0:	f240 8135 	bls.w	800e72e <dir_register+0x3ba>
		while (*lfn) {	/* Create a CRC */
 800e4c4:	880a      	ldrh	r2, [r1, #0]
 800e4c6:	2a00      	cmp	r2, #0
 800e4c8:	f000 8131 	beq.w	800e72e <dir_register+0x3ba>
				sr = (sr << 1) + (wc & 1);
 800e4cc:	468c      	mov	ip, r1
 800e4ce:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 800e4d2:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 800e4d4:	eb01 014b 	add.w	r1, r1, fp, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e4d8:	e009      	b.n	800e4ee <dir_register+0x17a>
				sr = (sr << 1) + (wc & 1);
 800e4da:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e4de:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 800e4e2:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 800e4e6:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e4ea:	bf18      	it	ne
 800e4ec:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e4ee:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 800e4f2:	0893      	lsrs	r3, r2, #2
 800e4f4:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 800e4f6:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e4fa:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 800e4fc:	f003 0301 	and.w	r3, r3, #1
 800e500:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e504:	bf48      	it	mi
 800e506:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
 800e50a:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 800e50c:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e510:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 800e514:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
 800e518:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 800e51c:	bf18      	it	ne
 800e51e:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e520:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e524:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e526:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 800e52a:	bf48      	it	mi
 800e52c:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e52e:	f003 0301 	and.w	r3, r3, #1
 800e532:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e536:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800e538:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 800e53c:	bf48      	it	mi
 800e53e:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e540:	f000 0001 	and.w	r0, r0, #1
 800e544:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e548:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800e54a:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 800e54e:	bf48      	it	mi
 800e550:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e552:	f001 0101 	and.w	r1, r1, #1
 800e556:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e55a:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e55c:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 800e560:	bf48      	it	mi
 800e562:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e564:	f003 0301 	and.w	r3, r3, #1
 800e568:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e56c:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800e56e:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 800e572:	bf48      	it	mi
 800e574:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e576:	f000 0001 	and.w	r0, r0, #1
 800e57a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e57e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800e580:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 800e584:	bf48      	it	mi
 800e586:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e588:	f001 0101 	and.w	r1, r1, #1
 800e58c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e590:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e592:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 800e596:	bf48      	it	mi
 800e598:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e59a:	f003 0301 	and.w	r3, r3, #1
 800e59e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e5a2:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800e5a4:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 800e5a8:	bf48      	it	mi
 800e5aa:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e5ac:	f000 0001 	and.w	r0, r0, #1
 800e5b0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e5b4:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800e5b6:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 800e5ba:	bf48      	it	mi
 800e5bc:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e5be:	f001 0101 	and.w	r1, r1, #1
 800e5c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e5c6:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800e5c8:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 800e5cc:	bf48      	it	mi
 800e5ce:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800e5d0:	f003 0301 	and.w	r3, r3, #1
 800e5d4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e5d8:	0400      	lsls	r0, r0, #16
 800e5da:	bf48      	it	mi
 800e5dc:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800e5de:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e5e2:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
 800e5e4:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 800e5e8:	bf48      	it	mi
 800e5ea:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800e5ec:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800e5f0:	041b      	lsls	r3, r3, #16
 800e5f2:	bf48      	it	mi
 800e5f4:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
 800e5f8:	2a00      	cmp	r2, #0
 800e5fa:	f47f af6e 	bne.w	800e4da <dir_register+0x166>
		c = (BYTE)((seq % 16) + '0');
 800e5fe:	f00e 010f 	and.w	r1, lr, #15
 800e602:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800e606:	2a39      	cmp	r2, #57	; 0x39
 800e608:	bf88      	it	hi
 800e60a:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800e60e:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 800e612:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 800e616:	f88d 201b 	strb.w	r2, [sp, #27]
	} while (seq);
 800e61a:	f240 8156 	bls.w	800e8ca <dir_register+0x556>
		c = (BYTE)((seq % 16) + '0');
 800e61e:	f001 000f 	and.w	r0, r1, #15
 800e622:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800e626:	2a39      	cmp	r2, #57	; 0x39
 800e628:	bf88      	it	hi
 800e62a:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800e62e:	290f      	cmp	r1, #15
		seq /= 16;
 800e630:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 800e634:	f88d 201a 	strb.w	r2, [sp, #26]
	} while (seq);
 800e638:	f240 814d 	bls.w	800e8d6 <dir_register+0x562>
		c = (BYTE)((seq % 16) + '0');
 800e63c:	f000 010f 	and.w	r1, r0, #15
 800e640:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800e644:	2a39      	cmp	r2, #57	; 0x39
 800e646:	bf88      	it	hi
 800e648:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800e64c:	280f      	cmp	r0, #15
		seq /= 16;
 800e64e:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 800e652:	f88d 2019 	strb.w	r2, [sp, #25]
	} while (seq);
 800e656:	f240 814d 	bls.w	800e8f4 <dir_register+0x580>
		c = (BYTE)((seq % 16) + '0');
 800e65a:	f001 000f 	and.w	r0, r1, #15
 800e65e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800e662:	2a39      	cmp	r2, #57	; 0x39
 800e664:	bf88      	it	hi
 800e666:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800e66a:	290f      	cmp	r1, #15
		seq /= 16;
 800e66c:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 800e670:	f88d 2018 	strb.w	r2, [sp, #24]
	} while (seq);
 800e674:	f240 8144 	bls.w	800e900 <dir_register+0x58c>
		c = (BYTE)((seq % 16) + '0');
 800e678:	f000 010f 	and.w	r1, r0, #15
 800e67c:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800e680:	2a39      	cmp	r2, #57	; 0x39
 800e682:	bf88      	it	hi
 800e684:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800e688:	280f      	cmp	r0, #15
		seq /= 16;
 800e68a:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 800e68e:	f88d 2017 	strb.w	r2, [sp, #23]
	} while (seq);
 800e692:	f240 813b 	bls.w	800e90c <dir_register+0x598>
		c = (BYTE)((seq % 16) + '0');
 800e696:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 800e69a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 800e69e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800e6a2:	2a39      	cmp	r2, #57	; 0x39
 800e6a4:	bf88      	it	hi
 800e6a6:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800e6aa:	290f      	cmp	r1, #15
		ns[i--] = c;
 800e6ac:	f88d 2016 	strb.w	r2, [sp, #22]
	} while (seq);
 800e6b0:	f240 8132 	bls.w	800e918 <dir_register+0x5a4>
		c = (BYTE)((seq % 16) + '0');
 800e6b4:	f00e 010f 	and.w	r1, lr, #15
 800e6b8:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800e6bc:	2a39      	cmp	r2, #57	; 0x39
 800e6be:	bf88      	it	hi
 800e6c0:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800e6c4:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 800e6c8:	f88d 2015 	strb.w	r2, [sp, #21]
	} while (seq);
 800e6cc:	f240 8109 	bls.w	800e8e2 <dir_register+0x56e>
		ns[i--] = c;
 800e6d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e6d4:	f105 0123 	add.w	r1, r5, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e6d8:	2200      	movs	r2, #0
 800e6da:	e006      	b.n	800e6ea <dir_register+0x376>
 800e6dc:	4ec4ec4f 	.word	0x4ec4ec4f
 800e6e0:	00011021 	.word	0x00011021
 800e6e4:	3201      	adds	r2, #1
 800e6e6:	4562      	cmp	r2, ip
 800e6e8:	d003      	beq.n	800e6f2 <dir_register+0x37e>
 800e6ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e6ee:	2b20      	cmp	r3, #32
 800e6f0:	d1f8      	bne.n	800e6e4 <dir_register+0x370>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e6f2:	f1bc 0f07 	cmp.w	ip, #7
 800e6f6:	d91c      	bls.n	800e732 <dir_register+0x3be>
 800e6f8:	1c50      	adds	r0, r2, #1
 800e6fa:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 800e6fe:	2807      	cmp	r0, #7
 800e700:	d809      	bhi.n	800e716 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e702:	1c42      	adds	r2, r0, #1
 800e704:	2120      	movs	r1, #32
 800e706:	2a08      	cmp	r2, #8
 800e708:	f1c0 0208 	rsb	r2, r0, #8
 800e70c:	4438      	add	r0, r7
 800e70e:	bf88      	it	hi
 800e710:	2201      	movhi	r2, #1
 800e712:	f00a f9ab 	bl	8018a6c <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e716:	4628      	mov	r0, r5
 800e718:	f7ff f910 	bl	800d93c <dir_find>
			if (res != FR_OK) break;
 800e71c:	2800      	cmp	r0, #0
 800e71e:	d17d      	bne.n	800e81c <dir_register+0x4a8>
		for (n = 1; n < 100; n++) {
 800e720:	f10b 0b01 	add.w	fp, fp, #1
 800e724:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
 800e728:	f47f aebe 	bne.w	800e4a8 <dir_register+0x134>
 800e72c:	e091      	b.n	800e852 <dir_register+0x4de>
 800e72e:	46de      	mov	lr, fp
 800e730:	e765      	b.n	800e5fe <dir_register+0x28a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e732:	f10c 0328 	add.w	r3, ip, #40	; 0x28
 800e736:	f10c 0c01 	add.w	ip, ip, #1
 800e73a:	eb0d 0103 	add.w	r1, sp, r3
 800e73e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e742:	54b9      	strb	r1, [r7, r2]
 800e744:	3201      	adds	r2, #1
	} while (j < 8);
 800e746:	2a07      	cmp	r2, #7
 800e748:	d8e5      	bhi.n	800e716 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e74a:	f1bc 0f08 	cmp.w	ip, #8
 800e74e:	f000 8085 	beq.w	800e85c <dir_register+0x4e8>
 800e752:	f10c 0328 	add.w	r3, ip, #40	; 0x28
	} while (j < 8);
 800e756:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e758:	f102 0001 	add.w	r0, r2, #1
 800e75c:	eb0d 0103 	add.w	r1, sp, r3
 800e760:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e764:	54b9      	strb	r1, [r7, r2]
 800e766:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 800e76a:	d0d4      	beq.n	800e716 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e76c:	2908      	cmp	r1, #8
 800e76e:	d07d      	beq.n	800e86c <dir_register+0x4f8>
 800e770:	f10c 0329 	add.w	r3, ip, #41	; 0x29
	} while (j < 8);
 800e774:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e776:	eb0d 0103 	add.w	r1, sp, r3
 800e77a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e77e:	5439      	strb	r1, [r7, r0]
 800e780:	f10c 0102 	add.w	r1, ip, #2
 800e784:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800e788:	d0c5      	beq.n	800e716 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e78a:	2908      	cmp	r1, #8
 800e78c:	d076      	beq.n	800e87c <dir_register+0x508>
 800e78e:	f10c 032a 	add.w	r3, ip, #42	; 0x2a
	} while (j < 8);
 800e792:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e794:	eb0d 0103 	add.w	r1, sp, r3
 800e798:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e79c:	5439      	strb	r1, [r7, r0]
 800e79e:	f10c 0103 	add.w	r1, ip, #3
 800e7a2:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800e7a6:	d0b6      	beq.n	800e716 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7a8:	2908      	cmp	r1, #8
 800e7aa:	d06f      	beq.n	800e88c <dir_register+0x518>
 800e7ac:	f10c 032b 	add.w	r3, ip, #43	; 0x2b
	} while (j < 8);
 800e7b0:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7b2:	eb0d 0103 	add.w	r1, sp, r3
 800e7b6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e7ba:	5439      	strb	r1, [r7, r0]
 800e7bc:	f10c 0104 	add.w	r1, ip, #4
 800e7c0:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800e7c4:	d0a7      	beq.n	800e716 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7c6:	2908      	cmp	r1, #8
 800e7c8:	d068      	beq.n	800e89c <dir_register+0x528>
 800e7ca:	f10c 032c 	add.w	r3, ip, #44	; 0x2c
	} while (j < 8);
 800e7ce:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7d0:	eb0d 0103 	add.w	r1, sp, r3
 800e7d4:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e7d8:	5439      	strb	r1, [r7, r0]
 800e7da:	f10c 0105 	add.w	r1, ip, #5
 800e7de:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800e7e2:	d098      	beq.n	800e716 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7e4:	2908      	cmp	r1, #8
 800e7e6:	d061      	beq.n	800e8ac <dir_register+0x538>
 800e7e8:	f10c 032d 	add.w	r3, ip, #45	; 0x2d
	} while (j < 8);
 800e7ec:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7ee:	eb0d 0103 	add.w	r1, sp, r3
 800e7f2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800e7f6:	5439      	strb	r1, [r7, r0]
 800e7f8:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 800e7fc:	d08b      	beq.n	800e716 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e7fe:	f1bc 0f01 	cmp.w	ip, #1
 800e802:	d15b      	bne.n	800e8bc <dir_register+0x548>
 800e804:	f89d 201b 	ldrb.w	r2, [sp, #27]
	} while (j < 8);
 800e808:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e80a:	547a      	strb	r2, [r7, r1]
	} while (j < 8);
 800e80c:	d183      	bne.n	800e716 <dir_register+0x3a2>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e80e:	4628      	mov	r0, r5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e810:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e814:	f7ff f892 	bl	800d93c <dir_find>
			if (res != FR_OK) break;
 800e818:	2800      	cmp	r0, #0
 800e81a:	d081      	beq.n	800e720 <dir_register+0x3ac>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e81c:	2804      	cmp	r0, #4
 800e81e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e822:	4606      	mov	r6, r0
 800e824:	f47f ae29 	bne.w	800e47a <dir_register+0x106>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e828:	9b02      	ldr	r3, [sp, #8]
	FATFS *fs = dp->obj.fs;
 800e82a:	682f      	ldr	r7, [r5, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e82c:	f013 0402 	ands.w	r4, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e830:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e834:	f47f adc7 	bne.w	800e3c6 <dir_register+0x52>
	res = dir_sdi(dp, 0);
 800e838:	2100      	movs	r1, #0
 800e83a:	4628      	mov	r0, r5
 800e83c:	f7fe ffd2 	bl	800d7e4 <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e840:	f04f 0901 	mov.w	r9, #1
	if (res == FR_OK) {
 800e844:	4606      	mov	r6, r0
 800e846:	2800      	cmp	r0, #0
 800e848:	f43f adcd 	beq.w	800e3e6 <dir_register+0x72>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e84c:	2e04      	cmp	r6, #4
 800e84e:	f47f ae14 	bne.w	800e47a <dir_register+0x106>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e852:	2607      	movs	r6, #7
}
 800e854:	4630      	mov	r0, r6
 800e856:	b00b      	add	sp, #44	; 0x2c
 800e858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 800e85c:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e85e:	f102 0001 	add.w	r0, r2, #1
 800e862:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 800e866:	f47f af4c 	bne.w	800e702 <dir_register+0x38e>
 800e86a:	e754      	b.n	800e716 <dir_register+0x3a2>
 800e86c:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e86e:	f807 9000 	strb.w	r9, [r7, r0]
 800e872:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800e876:	f47f af44 	bne.w	800e702 <dir_register+0x38e>
 800e87a:	e74c      	b.n	800e716 <dir_register+0x3a2>
 800e87c:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e87e:	f807 9000 	strb.w	r9, [r7, r0]
 800e882:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800e886:	f47f af3c 	bne.w	800e702 <dir_register+0x38e>
 800e88a:	e744      	b.n	800e716 <dir_register+0x3a2>
 800e88c:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e88e:	f807 9000 	strb.w	r9, [r7, r0]
 800e892:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800e896:	f47f af34 	bne.w	800e702 <dir_register+0x38e>
 800e89a:	e73c      	b.n	800e716 <dir_register+0x3a2>
 800e89c:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e89e:	f807 9000 	strb.w	r9, [r7, r0]
 800e8a2:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800e8a6:	f47f af2c 	bne.w	800e702 <dir_register+0x38e>
 800e8aa:	e734      	b.n	800e716 <dir_register+0x3a2>
 800e8ac:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8ae:	f807 9000 	strb.w	r9, [r7, r0]
 800e8b2:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 800e8b6:	f47f af24 	bne.w	800e702 <dir_register+0x38e>
 800e8ba:	e72c      	b.n	800e716 <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8bc:	f807 9001 	strb.w	r9, [r7, r1]
	} while (j < 8);
 800e8c0:	2a00      	cmp	r2, #0
 800e8c2:	f47f af28 	bne.w	800e716 <dir_register+0x3a2>
 800e8c6:	2007      	movs	r0, #7
 800e8c8:	e71b      	b.n	800e702 <dir_register+0x38e>
	ns[i] = '~';
 800e8ca:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800e8cc:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 800e8d0:	f88d 201a 	strb.w	r2, [sp, #26]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e8d4:	e6fe      	b.n	800e6d4 <dir_register+0x360>
	ns[i] = '~';
 800e8d6:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800e8d8:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 800e8dc:	f88d 2019 	strb.w	r2, [sp, #25]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e8e0:	e6f8      	b.n	800e6d4 <dir_register+0x360>
	ns[i] = '~';
 800e8e2:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8e4:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800e8e8:	f88d 2014 	strb.w	r2, [sp, #20]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e8ec:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 800e8f0:	4662      	mov	r2, ip
 800e8f2:	e72e      	b.n	800e752 <dir_register+0x3de>
	ns[i] = '~';
 800e8f4:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800e8f6:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 800e8fa:	f88d 2018 	strb.w	r2, [sp, #24]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e8fe:	e6e9      	b.n	800e6d4 <dir_register+0x360>
	ns[i] = '~';
 800e900:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800e902:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 800e906:	f88d 2017 	strb.w	r2, [sp, #23]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e90a:	e6e3      	b.n	800e6d4 <dir_register+0x360>
	ns[i] = '~';
 800e90c:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800e90e:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 800e912:	f88d 2016 	strb.w	r2, [sp, #22]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e916:	e6dd      	b.n	800e6d4 <dir_register+0x360>
	ns[i] = '~';
 800e918:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800e91a:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800e91e:	f88d 2015 	strb.w	r2, [sp, #21]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e922:	e6d7      	b.n	800e6d4 <dir_register+0x360>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e924:	2606      	movs	r6, #6
}
 800e926:	4630      	mov	r0, r6
 800e928:	b00b      	add	sp, #44	; 0x2c
 800e92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e92e:	469b      	mov	fp, r3
 800e930:	e53a      	b.n	800e3a8 <dir_register+0x34>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e932:	6969      	ldr	r1, [r5, #20]
 800e934:	4628      	mov	r0, r5
 800e936:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800e93a:	f7fe ff53 	bl	800d7e4 <dir_sdi>
		if (res == FR_OK) {
 800e93e:	4606      	mov	r6, r0
 800e940:	2800      	cmp	r0, #0
 800e942:	f47f ad9a 	bne.w	800e47a <dir_register+0x106>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e946:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e94a:	f04f 080f 	mov.w	r8, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e94e:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 800e952:	f64f 7bff 	movw	fp, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e956:	01d3      	lsls	r3, r2, #7
 800e958:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800e95c:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800e960:	4413      	add	r3, r2
 800e962:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e966:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e96a:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800e96e:	fa53 f282 	uxtab	r2, r3, r2
 800e972:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e976:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e97a:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800e97e:	fa52 f383 	uxtab	r3, r2, r3
 800e982:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e986:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e98a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800e98e:	fa53 f282 	uxtab	r2, r3, r2
 800e992:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e996:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e99a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800e99e:	fa52 f383 	uxtab	r3, r2, r3
 800e9a2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e9a6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e9aa:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800e9ae:	fa53 f282 	uxtab	r2, r3, r2
 800e9b2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e9b6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e9ba:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800e9be:	fa52 f383 	uxtab	r3, r2, r3
 800e9c2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e9c6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e9ca:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800e9ce:	fa53 f282 	uxtab	r2, r3, r2
 800e9d2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e9d6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e9da:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800e9de:	fa52 f383 	uxtab	r3, r2, r3
 800e9e2:	f3c3 0746 	ubfx	r7, r3, #1, #7
 800e9e6:	ea47 17c3 	orr.w	r7, r7, r3, lsl #7
 800e9ea:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 800e9ee:	fa53 f787 	uxtab	r7, r3, r7
 800e9f2:	b2ff      	uxtb	r7, r7
	} while (--n);
 800e9f4:	e028      	b.n	800ea48 <dir_register+0x6d4>
	*ptr++ = (BYTE)val; val >>= 8;
 800e9f6:	f8a3 b003 	strh.w	fp, [r3, #3]
 800e9fa:	f8a3 b005 	strh.w	fp, [r3, #5]
 800e9fe:	f8a3 b007 	strh.w	fp, [r3, #7]
 800ea02:	f8a3 b009 	strh.w	fp, [r3, #9]
 800ea06:	f8a3 b00e 	strh.w	fp, [r3, #14]
 800ea0a:	f8a3 b010 	strh.w	fp, [r3, #16]
 800ea0e:	f8a3 b012 	strh.w	fp, [r3, #18]
 800ea12:	f8a3 b014 	strh.w	fp, [r3, #20]
 800ea16:	f8a3 b016 	strh.w	fp, [r3, #22]
 800ea1a:	f8a3 b018 	strh.w	fp, [r3, #24]
 800ea1e:	f8a3 b01c 	strh.w	fp, [r3, #28]
 800ea22:	f8a3 b01e 	strh.w	fp, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ea26:	f046 0640 	orr.w	r6, r6, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ea2a:	701e      	strb	r6, [r3, #0]
				fs->wflag = 1;
 800ea2c:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800ea2e:	2100      	movs	r1, #0
 800ea30:	4628      	mov	r0, r5
				fs->wflag = 1;
 800ea32:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ea36:	f7ff fbbb 	bl	800e1b0 <dir_next>
			} while (res == FR_OK && --nent);
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	f47f ad1c 	bne.w	800e47a <dir_register+0x106>
 800ea42:	3c01      	subs	r4, #1
 800ea44:	f43f acf1 	beq.w	800e42a <dir_register+0xb6>
				res = move_window(fs, dp->sect);
 800ea48:	69e9      	ldr	r1, [r5, #28]
 800ea4a:	4650      	mov	r0, sl
 800ea4c:	f7fe f916 	bl	800cc7c <move_window>
 800ea50:	4606      	mov	r6, r0
				if (res != FR_OK) break;
 800ea52:	2800      	cmp	r0, #0
 800ea54:	f47f ad11 	bne.w	800e47a <dir_register+0x106>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ea58:	b2e6      	uxtb	r6, r4
 800ea5a:	6a2b      	ldr	r3, [r5, #32]
 800ea5c:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ea60:	1e72      	subs	r2, r6, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ea62:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ea64:	735f      	strb	r7, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ea66:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ea6a:	f8a3 800b 	strh.w	r8, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ea6e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ea72:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800ea76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ea7a:	7058      	strb	r0, [r3, #1]
 800ea7c:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ea7e:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
 800ea82:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ea84:	0050      	lsls	r0, r2, #1
 800ea86:	45cc      	cmp	ip, r9
 800ea88:	d8b5      	bhi.n	800e9f6 <dir_register+0x682>
 800ea8a:	3201      	adds	r2, #1
 800ea8c:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 800ea90:	0052      	lsls	r2, r2, #1
 800ea92:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ea96:	f883 c003 	strb.w	ip, [r3, #3]
 800ea9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ea9e:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eaa2:	f883 c004 	strb.w	ip, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eaa6:	45ce      	cmp	lr, r9
 800eaa8:	d8a7      	bhi.n	800e9fa <dir_register+0x686>
 800eaaa:	440a      	add	r2, r1
 800eaac:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800eab0:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eab4:	f883 c005 	strb.w	ip, [r3, #5]
 800eab8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eabc:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eac0:	f883 c006 	strb.w	ip, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eac4:	45ce      	cmp	lr, r9
 800eac6:	d89a      	bhi.n	800e9fe <dir_register+0x68a>
 800eac8:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 800eacc:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ead0:	f883 c007 	strb.w	ip, [r3, #7]
 800ead4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ead8:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eadc:	f883 c008 	strb.w	ip, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eae0:	45ce      	cmp	lr, r9
 800eae2:	d88e      	bhi.n	800ea02 <dir_register+0x68e>
 800eae4:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 800eae8:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eaec:	f883 c009 	strb.w	ip, [r3, #9]
 800eaf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eaf4:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eaf8:	f883 c00a 	strb.w	ip, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eafc:	45ce      	cmp	lr, r9
 800eafe:	d882      	bhi.n	800ea06 <dir_register+0x692>
 800eb00:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 800eb04:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eb08:	f883 c00e 	strb.w	ip, [r3, #14]
 800eb0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb10:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eb14:	f883 c00f 	strb.w	ip, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb18:	45ce      	cmp	lr, r9
 800eb1a:	f63f af76 	bhi.w	800ea0a <dir_register+0x696>
 800eb1e:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
 800eb22:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eb26:	f883 c010 	strb.w	ip, [r3, #16]
 800eb2a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb2e:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eb32:	f883 c011 	strb.w	ip, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb36:	45ce      	cmp	lr, r9
 800eb38:	f63f af69 	bhi.w	800ea0e <dir_register+0x69a>
 800eb3c:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
 800eb40:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eb44:	f883 c012 	strb.w	ip, [r3, #18]
 800eb48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb4c:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eb50:	f883 c013 	strb.w	ip, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb54:	45ce      	cmp	lr, r9
 800eb56:	f63f af5c 	bhi.w	800ea12 <dir_register+0x69e>
 800eb5a:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
 800eb5e:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eb62:	f883 c014 	strb.w	ip, [r3, #20]
 800eb66:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb6a:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eb6e:	f883 c015 	strb.w	ip, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb72:	45ce      	cmp	lr, r9
 800eb74:	f63f af4f 	bhi.w	800ea16 <dir_register+0x6a2>
 800eb78:	f8b2 c010 	ldrh.w	ip, [r2, #16]
 800eb7c:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eb80:	f883 c016 	strb.w	ip, [r3, #22]
 800eb84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb88:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800eb8c:	f883 c017 	strb.w	ip, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eb90:	45ce      	cmp	lr, r9
 800eb92:	f63f af42 	bhi.w	800ea1a <dir_register+0x6a6>
 800eb96:	f8b2 c012 	ldrh.w	ip, [r2, #18]
 800eb9a:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800eb9e:	f883 c018 	strb.w	ip, [r3, #24]
 800eba2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eba6:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ebaa:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ebae:	45ce      	cmp	lr, r9
 800ebb0:	f63f af35 	bhi.w	800ea1e <dir_register+0x6aa>
 800ebb4:	f8b2 c014 	ldrh.w	ip, [r2, #20]
 800ebb8:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ebbc:	f883 c01c 	strb.w	ip, [r3, #28]
 800ebc0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ebc4:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ebc8:	f883 c01d 	strb.w	ip, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ebcc:	45ce      	cmp	lr, r9
 800ebce:	f63f af28 	bhi.w	800ea22 <dir_register+0x6ae>
 800ebd2:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ebd4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ebd8:	779a      	strb	r2, [r3, #30]
 800ebda:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800ebdc:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ebde:	fa1f f28c 	uxth.w	r2, ip
 800ebe2:	454a      	cmp	r2, r9
 800ebe4:	f63f af1f 	bhi.w	800ea26 <dir_register+0x6b2>
 800ebe8:	180a      	adds	r2, r1, r0
 800ebea:	8b52      	ldrh	r2, [r2, #26]
 800ebec:	2a00      	cmp	r2, #0
 800ebee:	f47f af1c 	bne.w	800ea2a <dir_register+0x6b6>
 800ebf2:	e718      	b.n	800ea26 <dir_register+0x6b2>
			*d++ = *s++;
 800ebf4:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800ebf8:	701a      	strb	r2, [r3, #0]
 800ebfa:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800ebfe:	705a      	strb	r2, [r3, #1]
 800ec00:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 800ec04:	709a      	strb	r2, [r3, #2]
 800ec06:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800ec0a:	70da      	strb	r2, [r3, #3]
 800ec0c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800ec10:	711a      	strb	r2, [r3, #4]
 800ec12:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800ec16:	715a      	strb	r2, [r3, #5]
 800ec18:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 800ec1c:	719a      	strb	r2, [r3, #6]
 800ec1e:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800ec22:	71da      	strb	r2, [r3, #7]
 800ec24:	e417      	b.n	800e456 <dir_register+0xe2>
 800ec26:	bf00      	nop

0800ec28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ec28:	b510      	push	{r4, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800ec30:	b1a1      	cbz	r1, 800ec5c <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ec32:	f891 c000 	ldrb.w	ip, [r1]
 800ec36:	f1bc 0f1f 	cmp.w	ip, #31
 800ec3a:	d912      	bls.n	800ec62 <f_mount+0x3a>
 800ec3c:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 800ec40:	d00f      	beq.n	800ec62 <f_mount+0x3a>
 800ec42:	4608      	mov	r0, r1
 800ec44:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ec48:	2b1f      	cmp	r3, #31
 800ec4a:	d90c      	bls.n	800ec66 <f_mount+0x3e>
 800ec4c:	2b3a      	cmp	r3, #58	; 0x3a
 800ec4e:	d1f9      	bne.n	800ec44 <f_mount+0x1c>
			i = *tp++ - '0';
 800ec50:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ec52:	4288      	cmp	r0, r1
 800ec54:	d102      	bne.n	800ec5c <f_mount+0x34>
 800ec56:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ec5a:	d006      	beq.n	800ec6a <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800ec5c:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800ec5e:	b002      	add	sp, #8
 800ec60:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ec62:	4663      	mov	r3, ip
 800ec64:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ec66:	2b3a      	cmp	r3, #58	; 0x3a
 800ec68:	d0f2      	beq.n	800ec50 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ec6a:	4913      	ldr	r1, [pc, #76]	; (800ecb8 <f_mount+0x90>)
 800ec6c:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800ec6e:	b143      	cbz	r3, 800ec82 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ec70:	4812      	ldr	r0, [pc, #72]	; (800ecbc <f_mount+0x94>)
 800ec72:	6804      	ldr	r4, [r0, #0]
 800ec74:	42a3      	cmp	r3, r4
 800ec76:	d019      	beq.n	800ecac <f_mount+0x84>
 800ec78:	6904      	ldr	r4, [r0, #16]
 800ec7a:	429c      	cmp	r4, r3
 800ec7c:	d013      	beq.n	800eca6 <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800ec7e:	2000      	movs	r0, #0
 800ec80:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800ec82:	9b01      	ldr	r3, [sp, #4]
 800ec84:	b15b      	cbz	r3, 800ec9e <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800ec86:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ec88:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800ec8a:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800ec8c:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ec8e:	d1e6      	bne.n	800ec5e <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ec90:	4602      	mov	r2, r0
 800ec92:	a901      	add	r1, sp, #4
 800ec94:	4668      	mov	r0, sp
 800ec96:	f7fe f82f 	bl	800ccf8 <find_volume>
}
 800ec9a:	b002      	add	sp, #8
 800ec9c:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ec9e:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 800eca0:	600b      	str	r3, [r1, #0]
}
 800eca2:	b002      	add	sp, #8
 800eca4:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800eca6:	2400      	movs	r4, #0
 800eca8:	6104      	str	r4, [r0, #16]
 800ecaa:	e7e8      	b.n	800ec7e <f_mount+0x56>
 800ecac:	2400      	movs	r4, #0
 800ecae:	6004      	str	r4, [r0, #0]
 800ecb0:	6904      	ldr	r4, [r0, #16]
 800ecb2:	429c      	cmp	r4, r3
 800ecb4:	d1e3      	bne.n	800ec7e <f_mount+0x56>
 800ecb6:	e7f6      	b.n	800eca6 <f_mount+0x7e>
 800ecb8:	2001d5b4 	.word	0x2001d5b4
 800ecbc:	2001d5b8 	.word	0x2001d5b8

0800ecc0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ecc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc4:	b092      	sub	sp, #72	; 0x48
 800ecc6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	f000 8096 	beq.w	800edfa <f_open+0x13a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ecce:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800ecd2:	4616      	mov	r6, r2
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	a903      	add	r1, sp, #12
 800ecd8:	a801      	add	r0, sp, #4
 800ecda:	463a      	mov	r2, r7
 800ecdc:	f7fe f80c 	bl	800ccf8 <find_volume>
	if (res == FR_OK) {
 800ece0:	4605      	mov	r5, r0
 800ece2:	b128      	cbz	r0, 800ecf0 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ece4:	2300      	movs	r3, #0
 800ece6:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800ece8:	4628      	mov	r0, r5
 800ecea:	b012      	add	sp, #72	; 0x48
 800ecec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800ecf0:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ecf4:	a804      	add	r0, sp, #16
 800ecf6:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800ecf8:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800ecfc:	f7fe ffca 	bl	800dc94 <follow_path>
		if (res == FR_OK) {
 800ed00:	b9f0      	cbnz	r0, 800ed40 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ed02:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	db7e      	blt.n	800ee08 <f_open+0x148>
		if (Files[i].fs) {	/* Existing entry */
 800ed0a:	4b9e      	ldr	r3, [pc, #632]	; (800ef84 <f_open+0x2c4>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ed0c:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ed10:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800ed12:	f8d3 9000 	ldr.w	r9, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ed16:	4601      	mov	r1, r0
				Files[i].clu == dp->obj.sclust &&
 800ed18:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 800ed1c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 800ed20:	f1b9 0f00 	cmp.w	r9, #0
 800ed24:	f000 80d9 	beq.w	800eeda <f_open+0x21a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ed28:	4591      	cmp	r9, r2
 800ed2a:	d06f      	beq.n	800ee0c <f_open+0x14c>
		if (Files[i].fs) {	/* Existing entry */
 800ed2c:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800ed30:	f1b9 0f00 	cmp.w	r9, #0
 800ed34:	d071      	beq.n	800ee1a <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ed36:	454a      	cmp	r2, r9
 800ed38:	f000 80e8 	beq.w	800ef0c <f_open+0x24c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ed3c:	2512      	movs	r5, #18
 800ed3e:	e7d1      	b.n	800ece4 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ed40:	f016 0f1c 	tst.w	r6, #28
 800ed44:	d05e      	beq.n	800ee04 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ed46:	2804      	cmp	r0, #4
 800ed48:	d15c      	bne.n	800ee04 <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed4a:	4b8e      	ldr	r3, [pc, #568]	; (800ef84 <f_open+0x2c4>)
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	b112      	cbz	r2, 800ed56 <f_open+0x96>
 800ed50:	691b      	ldr	r3, [r3, #16]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d1f2      	bne.n	800ed3c <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ed56:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ed58:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ed5c:	f7ff fb0a 	bl	800e374 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d14f      	bne.n	800ee04 <f_open+0x144>
				dw = GET_FATTIME();
 800ed64:	f7fd fcd6 	bl	800c714 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ed68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800ed6a:	0a02      	lsrs	r2, r0, #8
 800ed6c:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ed70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800ed72:	75da      	strb	r2, [r3, #23]
 800ed74:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ed76:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800ed78:	0e00      	lsrs	r0, r0, #24
 800ed7a:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ed7c:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
 800ed7e:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ed80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed82:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 800ed84:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ed88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800ed8a:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800ed8c:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800ed8e:	d102      	bne.n	800ed96 <f_open+0xd6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ed90:	8a9a      	ldrh	r2, [r3, #20]
 800ed92:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800ed96:	2200      	movs	r2, #0
 800ed98:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800ed9a:	f898 1000 	ldrb.w	r1, [r8]
 800ed9e:	2903      	cmp	r1, #3
 800eda0:	d100      	bne.n	800eda4 <f_open+0xe4>
	*ptr++ = (BYTE)val; val >>= 8;
 800eda2:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 800eda4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800eda6:	2200      	movs	r2, #0
 800eda8:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 800edaa:	2301      	movs	r3, #1
 800edac:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800edb0:	b186      	cbz	r6, 800edd4 <f_open+0x114>
						dw = fs->winsect;
 800edb2:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800edb6:	4631      	mov	r1, r6
 800edb8:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800edba:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 800edbc:	f7ff f8f6 	bl	800dfac <remove_chain>
						if (res == FR_OK) {
 800edc0:	9b00      	ldr	r3, [sp, #0]
 800edc2:	b9f8      	cbnz	r0, 800ee04 <f_open+0x144>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800edc4:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800edc6:	4619      	mov	r1, r3
 800edc8:	4640      	mov	r0, r8
 800edca:	f7fd ff57 	bl	800cc7c <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800edce:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
 800edd2:	b9b8      	cbnz	r0, 800ee04 <f_open+0x144>
				mode |= FA_MODIFIED;
 800edd4:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800edd8:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eddc:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ede0:	3900      	subs	r1, #0
 800ede2:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ede4:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ede6:	bf18      	it	ne
 800ede8:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 800edea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edec:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800edee:	f7fd fdb7 	bl	800c960 <inc_lock>
 800edf2:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800edf4:	b9e8      	cbnz	r0, 800ee32 <f_open+0x172>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800edf6:	2502      	movs	r5, #2
 800edf8:	e774      	b.n	800ece4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800edfa:	2509      	movs	r5, #9
}
 800edfc:	4628      	mov	r0, r5
 800edfe:	b012      	add	sp, #72	; 0x48
 800ee00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee04:	4605      	mov	r5, r0
 800ee06:	e76d      	b.n	800ece4 <f_open+0x24>
				res = FR_INVALID_NAME;
 800ee08:	2506      	movs	r5, #6
 800ee0a:	e76b      	b.n	800ece4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ee0c:	685a      	ldr	r2, [r3, #4]
 800ee0e:	4562      	cmp	r2, ip
 800ee10:	f000 8085 	beq.w	800ef1e <f_open+0x25e>
		if (Files[i].fs) {	/* Existing entry */
 800ee14:	691a      	ldr	r2, [r3, #16]
 800ee16:	2a00      	cmp	r2, #0
 800ee18:	d18d      	bne.n	800ed36 <f_open+0x76>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee1a:	f016 0f1c 	tst.w	r6, #28
 800ee1e:	d049      	beq.n	800eeb4 <f_open+0x1f4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ee20:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800ee24:	f013 0f11 	tst.w	r3, #17
 800ee28:	d155      	bne.n	800eed6 <f_open+0x216>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ee2a:	0773      	lsls	r3, r6, #29
 800ee2c:	d550      	bpl.n	800eed0 <f_open+0x210>
 800ee2e:	2508      	movs	r5, #8
 800ee30:	e758      	b.n	800ece4 <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
 800ee32:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ee36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800ee38:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800ee3a:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800ee3c:	d102      	bne.n	800ee44 <f_open+0x184>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ee3e:	8a9a      	ldrh	r2, [r3, #20]
 800ee40:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ee44:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ee46:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 800ee48:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ee4c:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ee50:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
 800ee54:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ee58:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
 800ee5c:	4650      	mov	r0, sl
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ee5e:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 800ee60:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
 800ee64:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
 800ee66:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
 800ee68:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ee6a:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ee6c:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 800ee6e:	f009 fdfd 	bl	8018a6c <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ee72:	06bf      	lsls	r7, r7, #26
 800ee74:	f57f af38 	bpl.w	800ece8 <f_open+0x28>
 800ee78:	f1b9 0f00 	cmp.w	r9, #0
 800ee7c:	f43f af34 	beq.w	800ece8 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ee80:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ee84:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee88:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ee8c:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ee90:	d804      	bhi.n	800ee9c <f_open+0x1dc>
 800ee92:	e04a      	b.n	800ef2a <f_open+0x26a>
 800ee94:	1c70      	adds	r0, r6, #1
 800ee96:	d06c      	beq.n	800ef72 <f_open+0x2b2>
 800ee98:	454f      	cmp	r7, r9
 800ee9a:	d26a      	bcs.n	800ef72 <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
 800ee9c:	4631      	mov	r1, r6
 800ee9e:	6820      	ldr	r0, [r4, #0]
 800eea0:	f7fe f922 	bl	800d0e8 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800eea4:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800eea6:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800eeaa:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800eeac:	d8f2      	bhi.n	800ee94 <f_open+0x1d4>
 800eeae:	2502      	movs	r5, #2
				fp->clust = clst;
 800eeb0:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800eeb2:	e717      	b.n	800ece4 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800eeb4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800eeb8:	06da      	lsls	r2, r3, #27
 800eeba:	d425      	bmi.n	800ef08 <f_open+0x248>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800eebc:	07b2      	lsls	r2, r6, #30
 800eebe:	d501      	bpl.n	800eec4 <f_open+0x204>
 800eec0:	07db      	lsls	r3, r3, #31
 800eec2:	d408      	bmi.n	800eed6 <f_open+0x216>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eec4:	f006 0608 	and.w	r6, r6, #8
 800eec8:	2e00      	cmp	r6, #0
 800eeca:	d183      	bne.n	800edd4 <f_open+0x114>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eecc:	4601      	mov	r1, r0
 800eece:	e785      	b.n	800eddc <f_open+0x11c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eed0:	0730      	lsls	r0, r6, #28
 800eed2:	d583      	bpl.n	800eddc <f_open+0x11c>
 800eed4:	e746      	b.n	800ed64 <f_open+0xa4>
						res = FR_DENIED;
 800eed6:	2507      	movs	r5, #7
 800eed8:	e704      	b.n	800ece4 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 800eeda:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800eede:	f1b9 0f00 	cmp.w	r9, #0
 800eee2:	d09a      	beq.n	800ee1a <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800eee4:	4591      	cmp	r9, r2
 800eee6:	d198      	bne.n	800ee1a <f_open+0x15a>
 800eee8:	695a      	ldr	r2, [r3, #20]
 800eeea:	4562      	cmp	r2, ip
 800eeec:	d195      	bne.n	800ee1a <f_open+0x15a>
				Files[i].clu == dp->obj.sclust &&
 800eeee:	699a      	ldr	r2, [r3, #24]
 800eef0:	4572      	cmp	r2, lr
 800eef2:	d192      	bne.n	800ee1a <f_open+0x15a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800eef4:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eef6:	b928      	cbnz	r0, 800ef04 <f_open+0x244>
 800eef8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800eefc:	899b      	ldrh	r3, [r3, #12]
 800eefe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef02:	d18a      	bne.n	800ee1a <f_open+0x15a>
 800ef04:	2510      	movs	r5, #16
 800ef06:	e6ed      	b.n	800ece4 <f_open+0x24>
					res = FR_NO_FILE;
 800ef08:	2504      	movs	r5, #4
 800ef0a:	e6eb      	b.n	800ece4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ef0c:	695a      	ldr	r2, [r3, #20]
 800ef0e:	4562      	cmp	r2, ip
 800ef10:	f47f af14 	bne.w	800ed3c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 800ef14:	699a      	ldr	r2, [r3, #24]
 800ef16:	4572      	cmp	r2, lr
 800ef18:	f47f af10 	bne.w	800ed3c <f_open+0x7c>
 800ef1c:	e7ea      	b.n	800eef4 <f_open+0x234>
 800ef1e:	689a      	ldr	r2, [r3, #8]
 800ef20:	4572      	cmp	r2, lr
 800ef22:	f47f af77 	bne.w	800ee14 <f_open+0x154>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ef26:	462a      	mov	r2, r5
 800ef28:	e7e5      	b.n	800eef6 <f_open+0x236>
				fp->clust = clst;
 800ef2a:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ef2c:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f43f aed9 	beq.w	800ece8 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef36:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 800ef3a:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ef3c:	3b02      	subs	r3, #2
 800ef3e:	429e      	cmp	r6, r3
 800ef40:	f4bf af59 	bcs.w	800edf6 <f_open+0x136>
	return clst * fs->csize + fs->database;
 800ef44:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800ef48:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800ef4c:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ef50:	2a00      	cmp	r2, #0
 800ef52:	f43f af50 	beq.w	800edf6 <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ef56:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ef5a:	4651      	mov	r1, sl
 800ef5c:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ef5e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ef60:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ef64:	f7fd fcd0 	bl	800c908 <disk_read>
 800ef68:	2800      	cmp	r0, #0
 800ef6a:	f43f aebd 	beq.w	800ece8 <f_open+0x28>
 800ef6e:	2501      	movs	r5, #1
 800ef70:	e6b8      	b.n	800ece4 <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ef72:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
 800ef74:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 800ef76:	bf0c      	ite	eq
 800ef78:	2301      	moveq	r3, #1
 800ef7a:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ef7c:	d1d6      	bne.n	800ef2c <f_open+0x26c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ef7e:	461d      	mov	r5, r3
 800ef80:	e6b0      	b.n	800ece4 <f_open+0x24>
 800ef82:	bf00      	nop
 800ef84:	2001d5b8 	.word	0x2001d5b8

0800ef88 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef8c:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800ef8e:	2300      	movs	r3, #0
{
 800ef90:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 800ef92:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ef94:	b150      	cbz	r0, 800efac <f_read+0x24>
 800ef96:	6803      	ldr	r3, [r0, #0]
 800ef98:	4604      	mov	r4, r0
 800ef9a:	b13b      	cbz	r3, 800efac <f_read+0x24>
 800ef9c:	4691      	mov	r9, r2
 800ef9e:	781a      	ldrb	r2, [r3, #0]
 800efa0:	b122      	cbz	r2, 800efac <f_read+0x24>
 800efa2:	460d      	mov	r5, r1
 800efa4:	88da      	ldrh	r2, [r3, #6]
 800efa6:	8881      	ldrh	r1, [r0, #4]
 800efa8:	4291      	cmp	r1, r2
 800efaa:	d005      	beq.n	800efb8 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800efac:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800efb0:	4640      	mov	r0, r8
 800efb2:	b005      	add	sp, #20
 800efb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800efb8:	7858      	ldrb	r0, [r3, #1]
 800efba:	f7fd fc89 	bl	800c8d0 <disk_status>
 800efbe:	07c2      	lsls	r2, r0, #31
 800efc0:	d4f4      	bmi.n	800efac <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800efc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800efc6:	f1b8 0f00 	cmp.w	r8, #0
 800efca:	d1f1      	bne.n	800efb0 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800efcc:	7d23      	ldrb	r3, [r4, #20]
 800efce:	f013 0301 	ands.w	r3, r3, #1
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	f000 80da 	beq.w	800f18c <f_read+0x204>
	remain = fp->obj.objsize - fp->fptr;
 800efd8:	69a3      	ldr	r3, [r4, #24]
 800efda:	68e7      	ldr	r7, [r4, #12]
 800efdc:	1aff      	subs	r7, r7, r3
 800efde:	454f      	cmp	r7, r9
 800efe0:	bf28      	it	cs
 800efe2:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800efe4:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
 800efe8:	2f00      	cmp	r7, #0
 800efea:	d0e1      	beq.n	800efb0 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800efec:	f104 0231 	add.w	r2, r4, #49	; 0x31
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eff0:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800eff4:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eff8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800effc:	2a00      	cmp	r2, #0
 800effe:	d142      	bne.n	800f086 <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f000:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800f004:	0a59      	lsrs	r1, r3, #9
 800f006:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800f008:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
 800f00c:	d06f      	beq.n	800f0ee <f_read+0x166>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f00e:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f010:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 800f014:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f016:	3b02      	subs	r3, #2
 800f018:	4298      	cmp	r0, r3
 800f01a:	d275      	bcs.n	800f108 <f_read+0x180>
	return clst * fs->csize + fs->database;
 800f01c:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800f020:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800f024:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d06d      	beq.n	800f108 <f_read+0x180>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f02c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 800f030:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f034:	d36f      	bcc.n	800f116 <f_read+0x18e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f036:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f03a:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f03e:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f040:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800f044:	bf88      	it	hi
 800f046:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f04a:	465a      	mov	r2, fp
 800f04c:	4629      	mov	r1, r5
 800f04e:	4643      	mov	r3, r8
 800f050:	f7fd fc5a 	bl	800c908 <disk_read>
 800f054:	2800      	cmp	r0, #0
 800f056:	f040 8087 	bne.w	800f168 <f_read+0x1e0>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f05a:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800f05e:	2a00      	cmp	r2, #0
 800f060:	f2c0 80ab 	blt.w	800f1ba <f_read+0x232>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f064:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f068:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800f06a:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f06c:	440d      	add	r5, r1
 800f06e:	440b      	add	r3, r1
 800f070:	61a3      	str	r3, [r4, #24]
 800f072:	6833      	ldr	r3, [r6, #0]
 800f074:	440b      	add	r3, r1
 800f076:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800f078:	f000 80b5 	beq.w	800f1e6 <f_read+0x25e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f07c:	69a3      	ldr	r3, [r4, #24]
 800f07e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f082:	2a00      	cmp	r2, #0
 800f084:	d0bc      	beq.n	800f000 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f086:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f088:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f08c:	eb0a 0302 	add.w	r3, sl, r2
 800f090:	4450      	add	r0, sl
 800f092:	42b9      	cmp	r1, r7
 800f094:	eba5 0000 	sub.w	r0, r5, r0
 800f098:	bf28      	it	cs
 800f09a:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f09c:	2802      	cmp	r0, #2
 800f09e:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 800f0a2:	d969      	bls.n	800f178 <f_read+0x1f0>
 800f0a4:	f1bb 0f05 	cmp.w	fp, #5
 800f0a8:	d966      	bls.n	800f178 <f_read+0x1f0>
 800f0aa:	f021 0e03 	bic.w	lr, r1, #3
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	449e      	add	lr, r3
			*d++ = *s++;
 800f0b4:	f852 cb04 	ldr.w	ip, [r2], #4
 800f0b8:	4572      	cmp	r2, lr
 800f0ba:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 800f0be:	d1f9      	bne.n	800f0b4 <f_read+0x12c>
 800f0c0:	f021 0203 	bic.w	r2, r1, #3
 800f0c4:	4291      	cmp	r1, r2
 800f0c6:	eb05 0002 	add.w	r0, r5, r2
 800f0ca:	eb03 0c02 	add.w	ip, r3, r2
 800f0ce:	d0cb      	beq.n	800f068 <f_read+0xe0>
			*d++ = *s++;
 800f0d0:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
 800f0d2:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
 800f0d6:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 800f0d8:	d0c6      	beq.n	800f068 <f_read+0xe0>
			*d++ = *s++;
 800f0da:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 800f0de:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 800f0e2:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 800f0e4:	d0c0      	beq.n	800f068 <f_read+0xe0>
			*d++ = *s++;
 800f0e6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800f0ea:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 800f0ec:	e7bc      	b.n	800f068 <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f0ee:	bb3b      	cbnz	r3, 800f140 <f_read+0x1b8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f0f0:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f0f2:	2801      	cmp	r0, #1
 800f0f4:	d908      	bls.n	800f108 <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f0f6:	1c43      	adds	r3, r0, #1
 800f0f8:	d036      	beq.n	800f168 <f_read+0x1e0>
				fp->clust = clst;				/* Update current cluster */
 800f0fa:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800f0fc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f0fe:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800f102:	3b02      	subs	r3, #2
 800f104:	4298      	cmp	r0, r3
 800f106:	d389      	bcc.n	800f01c <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f108:	2302      	movs	r3, #2
 800f10a:	4698      	mov	r8, r3
 800f10c:	7563      	strb	r3, [r4, #21]
}
 800f10e:	4640      	mov	r0, r8
 800f110:	b005      	add	sp, #20
 800f112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f116:	6a22      	ldr	r2, [r4, #32]
 800f118:	455a      	cmp	r2, fp
 800f11a:	d00b      	beq.n	800f134 <f_read+0x1ac>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f11c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f120:	2b00      	cmp	r3, #0
 800f122:	db3d      	blt.n	800f1a0 <f_read+0x218>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f124:	2301      	movs	r3, #1
 800f126:	465a      	mov	r2, fp
 800f128:	4651      	mov	r1, sl
 800f12a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f12e:	f7fd fbeb 	bl	800c908 <disk_read>
 800f132:	b9c8      	cbnz	r0, 800f168 <f_read+0x1e0>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f134:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800f136:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f13a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f13e:	e7a2      	b.n	800f086 <f_read+0xfe>
					if (fp->cltbl) {
 800f140:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f142:	b330      	cbz	r0, 800f192 <f_read+0x20a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f144:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f146:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f148:	895b      	ldrh	r3, [r3, #10]
 800f14a:	fbb1 f3f3 	udiv	r3, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f14e:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f150:	b929      	cbnz	r1, 800f15e <f_read+0x1d6>
 800f152:	e7d9      	b.n	800f108 <f_read+0x180>
		cl -= ncl; tbl++;		/* Next fragment */
 800f154:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f156:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f15a:	2900      	cmp	r1, #0
 800f15c:	d0d4      	beq.n	800f108 <f_read+0x180>
		if (cl < ncl) break;	/* In this fragment? */
 800f15e:	4299      	cmp	r1, r3
 800f160:	d9f8      	bls.n	800f154 <f_read+0x1cc>
	return cl + *tbl;	/* Return the cluster number */
 800f162:	6840      	ldr	r0, [r0, #4]
 800f164:	4418      	add	r0, r3
 800f166:	e7c4      	b.n	800f0f2 <f_read+0x16a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f168:	f8dd 8000 	ldr.w	r8, [sp]
 800f16c:	2301      	movs	r3, #1
}
 800f16e:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f170:	7563      	strb	r3, [r4, #21]
}
 800f172:	b005      	add	sp, #20
 800f174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f178:	1e6a      	subs	r2, r5, #1
 800f17a:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 800f17e:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 800f182:	4563      	cmp	r3, ip
			*d++ = *s++;
 800f184:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800f188:	d1f9      	bne.n	800f17e <f_read+0x1f6>
 800f18a:	e76d      	b.n	800f068 <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f18c:	f04f 0807 	mov.w	r8, #7
 800f190:	e70e      	b.n	800efb0 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f192:	69e1      	ldr	r1, [r4, #28]
 800f194:	6820      	ldr	r0, [r4, #0]
 800f196:	9203      	str	r2, [sp, #12]
 800f198:	f7fd ffa6 	bl	800d0e8 <get_fat.isra.0>
 800f19c:	9a03      	ldr	r2, [sp, #12]
 800f19e:	e7a8      	b.n	800f0f2 <f_read+0x16a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	4651      	mov	r1, sl
 800f1a4:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f1a8:	f7fd fbbe 	bl	800c928 <disk_write>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d1db      	bne.n	800f168 <f_read+0x1e0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f1b0:	7d23      	ldrb	r3, [r4, #20]
 800f1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1b6:	7523      	strb	r3, [r4, #20]
 800f1b8:	e7b4      	b.n	800f124 <f_read+0x19c>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f1ba:	6a22      	ldr	r2, [r4, #32]
 800f1bc:	eba2 020b 	sub.w	r2, r2, fp
 800f1c0:	4542      	cmp	r2, r8
 800f1c2:	f4bf af4f 	bcs.w	800f064 <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f1c6:	eb05 2242 	add.w	r2, r5, r2, lsl #9
 800f1ca:	9b01      	ldr	r3, [sp, #4]
 800f1cc:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f1ce:	1ad0      	subs	r0, r2, r3
 800f1d0:	2802      	cmp	r0, #2
 800f1d2:	d90b      	bls.n	800f1ec <f_read+0x264>
 800f1d4:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 800f1d8:	f851 3b04 	ldr.w	r3, [r1], #4
 800f1dc:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800f1e0:	4562      	cmp	r2, ip
 800f1e2:	d1f9      	bne.n	800f1d8 <f_read+0x250>
 800f1e4:	e73e      	b.n	800f064 <f_read+0xdc>
 800f1e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f1ea:	e6e1      	b.n	800efb0 <f_read+0x28>
 800f1ec:	3a01      	subs	r2, #1
 800f1ee:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 800f1f2:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800f1f6:	458c      	cmp	ip, r1
			*d++ = *s++;
 800f1f8:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800f1fc:	d1f9      	bne.n	800f1f2 <f_read+0x26a>
 800f1fe:	e731      	b.n	800f064 <f_read+0xdc>

0800f200 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f204:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800f206:	2300      	movs	r3, #0
{
 800f208:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 800f20a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f20c:	b150      	cbz	r0, 800f224 <f_write+0x24>
 800f20e:	6803      	ldr	r3, [r0, #0]
 800f210:	4604      	mov	r4, r0
 800f212:	b13b      	cbz	r3, 800f224 <f_write+0x24>
 800f214:	4616      	mov	r6, r2
 800f216:	781a      	ldrb	r2, [r3, #0]
 800f218:	b122      	cbz	r2, 800f224 <f_write+0x24>
 800f21a:	460d      	mov	r5, r1
 800f21c:	88da      	ldrh	r2, [r3, #6]
 800f21e:	8881      	ldrh	r1, [r0, #4]
 800f220:	4291      	cmp	r1, r2
 800f222:	d005      	beq.n	800f230 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800f224:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800f228:	4640      	mov	r0, r8
 800f22a:	b005      	add	sp, #20
 800f22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f230:	7858      	ldrb	r0, [r3, #1]
 800f232:	f7fd fb4d 	bl	800c8d0 <disk_status>
 800f236:	07c1      	lsls	r1, r0, #31
 800f238:	d4f4      	bmi.n	800f224 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f23a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f23e:	f1b8 0f00 	cmp.w	r8, #0
 800f242:	d1f1      	bne.n	800f228 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f244:	7d23      	ldrb	r3, [r4, #20]
 800f246:	079a      	lsls	r2, r3, #30
 800f248:	f140 80f6 	bpl.w	800f438 <f_write+0x238>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f24c:	69a2      	ldr	r2, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f24e:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f252:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f254:	bf28      	it	cs
 800f256:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 800f258:	2e00      	cmp	r6, #0
 800f25a:	f000 80cb 	beq.w	800f3f4 <f_write+0x1f4>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f25e:	f504 730c 	add.w	r3, r4, #560	; 0x230
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f262:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800f266:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f268:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d160      	bne.n	800f332 <f_write+0x132>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f270:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 800f274:	0a53      	lsrs	r3, r2, #9
 800f276:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 800f27a:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 800f27e:	d110      	bne.n	800f2a2 <f_write+0xa2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f280:	2a00      	cmp	r2, #0
 800f282:	f040 80a0 	bne.w	800f3c6 <f_write+0x1c6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f286:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800f288:	2800      	cmp	r0, #0
 800f28a:	f000 80e0 	beq.w	800f44e <f_write+0x24e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f28e:	2801      	cmp	r0, #1
 800f290:	f000 8087 	beq.w	800f3a2 <f_write+0x1a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f294:	1c43      	adds	r3, r0, #1
 800f296:	f000 80be 	beq.w	800f416 <f_write+0x216>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f29a:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800f29c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f29e:	b903      	cbnz	r3, 800f2a2 <f_write+0xa2>
 800f2a0:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f2a2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f2c0 80a8 	blt.w	800f3fc <f_write+0x1fc>
	clst -= 2;
 800f2ac:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f2ae:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
 800f2b2:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f2b4:	3a02      	subs	r2, #2
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d273      	bcs.n	800f3a2 <f_write+0x1a2>
	return clst * fs->csize + fs->database;
 800f2ba:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800f2be:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 800f2c2:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f2c6:	2a00      	cmp	r2, #0
 800f2c8:	d06b      	beq.n	800f3a2 <f_write+0x1a2>
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f2ca:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 800f2ce:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f2d0:	d36e      	bcc.n	800f3b0 <f_write+0x1b0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f2d2:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f2d6:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f2d8:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2da:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800f2de:	bf88      	it	hi
 800f2e0:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2e4:	4629      	mov	r1, r5
 800f2e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f2ea:	f7fd fb1d 	bl	800c928 <disk_write>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	f040 8091 	bne.w	800f416 <f_write+0x216>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f2f4:	6a21      	ldr	r1, [r4, #32]
 800f2f6:	9a02      	ldr	r2, [sp, #8]
 800f2f8:	9b03      	ldr	r3, [sp, #12]
 800f2fa:	1a8a      	subs	r2, r1, r2
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	f0c0 80ba 	bcc.w	800f476 <f_write+0x276>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f302:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 800f306:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f30a:	69a3      	ldr	r3, [r4, #24]
 800f30c:	4615      	mov	r5, r2
 800f30e:	68e2      	ldr	r2, [r4, #12]
 800f310:	4463      	add	r3, ip
 800f312:	429a      	cmp	r2, r3
 800f314:	61a3      	str	r3, [r4, #24]
 800f316:	bf38      	it	cc
 800f318:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 800f31a:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f31e:	60e2      	str	r2, [r4, #12]
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	4463      	add	r3, ip
 800f324:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800f326:	d064      	beq.n	800f3f2 <f_write+0x1f2>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f328:	69a2      	ldr	r2, [r4, #24]
 800f32a:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d09e      	beq.n	800f270 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f332:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
 800f336:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f338:	4453      	add	r3, sl
 800f33a:	45b4      	cmp	ip, r6
 800f33c:	eba3 0202 	sub.w	r2, r3, r2
 800f340:	bf28      	it	cs
 800f342:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f344:	2a02      	cmp	r2, #2
 800f346:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 800f34a:	d96b      	bls.n	800f424 <f_write+0x224>
 800f34c:	f1bb 0f05 	cmp.w	fp, #5
 800f350:	d968      	bls.n	800f424 <f_write+0x224>
 800f352:	f02c 0e03 	bic.w	lr, ip, #3
 800f356:	461a      	mov	r2, r3
 800f358:	4629      	mov	r1, r5
 800f35a:	449e      	add	lr, r3
			*d++ = *s++;
 800f35c:	f851 0b04 	ldr.w	r0, [r1], #4
 800f360:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800f364:	4596      	cmp	lr, r2
 800f366:	d1f9      	bne.n	800f35c <f_write+0x15c>
 800f368:	f02c 0103 	bic.w	r1, ip, #3
 800f36c:	458c      	cmp	ip, r1
 800f36e:	eb03 0001 	add.w	r0, r3, r1
 800f372:	eb05 0201 	add.w	r2, r5, r1
 800f376:	d00f      	beq.n	800f398 <f_write+0x198>
			*d++ = *s++;
 800f378:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
 800f37c:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
 800f380:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 800f384:	d006      	beq.n	800f394 <f_write+0x194>
			*d++ = *s++;
 800f386:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 800f388:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 800f38c:	7043      	strb	r3, [r0, #1]
 800f38e:	bf1c      	itt	ne
 800f390:	7893      	ldrbne	r3, [r2, #2]
 800f392:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 800f394:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 800f398:	7d23      	ldrb	r3, [r4, #20]
 800f39a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f39e:	7523      	strb	r3, [r4, #20]
 800f3a0:	e7b3      	b.n	800f30a <f_write+0x10a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f3a2:	2302      	movs	r3, #2
 800f3a4:	4698      	mov	r8, r3
 800f3a6:	7563      	strb	r3, [r4, #21]
}
 800f3a8:	4640      	mov	r0, r8
 800f3aa:	b005      	add	sp, #20
 800f3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f3b0:	6a23      	ldr	r3, [r4, #32]
 800f3b2:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 800f3b4:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f3b6:	d002      	beq.n	800f3be <f_write+0x1be>
 800f3b8:	68e1      	ldr	r1, [r4, #12]
 800f3ba:	428b      	cmp	r3, r1
 800f3bc:	d34f      	bcc.n	800f45e <f_write+0x25e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 800f3c2:	6222      	str	r2, [r4, #32]
 800f3c4:	e7b5      	b.n	800f332 <f_write+0x132>
					if (fp->cltbl) {
 800f3c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f3c8:	2900      	cmp	r1, #0
 800f3ca:	d038      	beq.n	800f43e <f_write+0x23e>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f3cc:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f3ce:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f3d0:	8952      	ldrh	r2, [r2, #10]
 800f3d2:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f3d6:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f3d8:	b922      	cbnz	r2, 800f3e4 <f_write+0x1e4>
 800f3da:	e00a      	b.n	800f3f2 <f_write+0x1f2>
		cl -= ncl; tbl++;		/* Next fragment */
 800f3dc:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f3de:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f3e2:	b132      	cbz	r2, 800f3f2 <f_write+0x1f2>
		if (cl < ncl) break;	/* In this fragment? */
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d2f9      	bcs.n	800f3dc <f_write+0x1dc>
	return cl + *tbl;	/* Return the cluster number */
 800f3e8:	6848      	ldr	r0, [r1, #4]
 800f3ea:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	f47f af4e 	bne.w	800f28e <f_write+0x8e>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f3f2:	7d23      	ldrb	r3, [r4, #20]
 800f3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3f8:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800f3fa:	e715      	b.n	800f228 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	6a22      	ldr	r2, [r4, #32]
 800f400:	4651      	mov	r1, sl
 800f402:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f406:	f7fd fa8f 	bl	800c928 <disk_write>
 800f40a:	b920      	cbnz	r0, 800f416 <f_write+0x216>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f40c:	7d23      	ldrb	r3, [r4, #20]
 800f40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f412:	7523      	strb	r3, [r4, #20]
 800f414:	e74a      	b.n	800f2ac <f_write+0xac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f416:	2301      	movs	r3, #1
 800f418:	4698      	mov	r8, r3
 800f41a:	7563      	strb	r3, [r4, #21]
}
 800f41c:	4640      	mov	r0, r8
 800f41e:	b005      	add	sp, #20
 800f420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f424:	3b01      	subs	r3, #1
 800f426:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 800f42a:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 800f42e:	4295      	cmp	r5, r2
			*d++ = *s++;
 800f430:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 800f434:	d1f9      	bne.n	800f42a <f_write+0x22a>
 800f436:	e7af      	b.n	800f398 <f_write+0x198>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f438:	f04f 0807 	mov.w	r8, #7
 800f43c:	e6f4      	b.n	800f228 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f43e:	69e1      	ldr	r1, [r4, #28]
 800f440:	4620      	mov	r0, r4
 800f442:	f7fe f90f 	bl	800d664 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f446:	2800      	cmp	r0, #0
 800f448:	f47f af21 	bne.w	800f28e <f_write+0x8e>
 800f44c:	e7d1      	b.n	800f3f2 <f_write+0x1f2>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f44e:	4659      	mov	r1, fp
 800f450:	4620      	mov	r0, r4
 800f452:	f7fe f907 	bl	800d664 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f456:	2800      	cmp	r0, #0
 800f458:	f47f af19 	bne.w	800f28e <f_write+0x8e>
 800f45c:	e7c9      	b.n	800f3f2 <f_write+0x1f2>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f45e:	2301      	movs	r3, #1
 800f460:	4651      	mov	r1, sl
 800f462:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f466:	9202      	str	r2, [sp, #8]
 800f468:	f7fd fa4e 	bl	800c908 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800f46c:	2800      	cmp	r0, #0
 800f46e:	d1d2      	bne.n	800f416 <f_write+0x216>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f470:	69a3      	ldr	r3, [r4, #24]
 800f472:	9a02      	ldr	r2, [sp, #8]
 800f474:	e7a3      	b.n	800f3be <f_write+0x1be>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f476:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 800f47a:	1c42      	adds	r2, r0, #1
 800f47c:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f47e:	ebaa 0202 	sub.w	r2, sl, r2
 800f482:	2a02      	cmp	r2, #2
 800f484:	d90d      	bls.n	800f4a2 <f_write+0x2a2>
 800f486:	4652      	mov	r2, sl
 800f488:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 800f48c:	f851 0b04 	ldr.w	r0, [r1], #4
 800f490:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800f494:	4562      	cmp	r2, ip
 800f496:	d1f9      	bne.n	800f48c <f_write+0x28c>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f498:	7d22      	ldrb	r2, [r4, #20]
 800f49a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f49e:	7522      	strb	r2, [r4, #20]
 800f4a0:	e72f      	b.n	800f302 <f_write+0x102>
 800f4a2:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 800f4a6:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 800f4aa:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 800f4ae:	458c      	cmp	ip, r1
			*d++ = *s++;
 800f4b0:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800f4b4:	d1f9      	bne.n	800f4aa <f_write+0x2aa>
 800f4b6:	e7ef      	b.n	800f498 <f_write+0x298>

0800f4b8 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f4b8:	b158      	cbz	r0, 800f4d2 <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f4ba:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f4bc:	6803      	ldr	r3, [r0, #0]
 800f4be:	4604      	mov	r4, r0
 800f4c0:	b12b      	cbz	r3, 800f4ce <f_close+0x16>
 800f4c2:	781a      	ldrb	r2, [r3, #0]
 800f4c4:	b11a      	cbz	r2, 800f4ce <f_close+0x16>
 800f4c6:	8881      	ldrh	r1, [r0, #4]
 800f4c8:	88da      	ldrh	r2, [r3, #6]
 800f4ca:	4291      	cmp	r1, r2
 800f4cc:	d003      	beq.n	800f4d6 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 800f4ce:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800f4d0:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800f4d2:	2009      	movs	r0, #9
}
 800f4d4:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f4d6:	7858      	ldrb	r0, [r3, #1]
 800f4d8:	f7fd f9fa 	bl	800c8d0 <disk_status>
 800f4dc:	07c1      	lsls	r1, r0, #31
 800f4de:	d4f6      	bmi.n	800f4ce <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f4e0:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f4e2:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f4e4:	065a      	lsls	r2, r3, #25
 800f4e6:	d52e      	bpl.n	800f546 <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f4e8:	061b      	lsls	r3, r3, #24
 800f4ea:	d451      	bmi.n	800f590 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800f4ec:	f7fd f912 	bl	800c714 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800f4f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800f4f2:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	f7fd fbc1 	bl	800cc7c <move_window>
				if (res == FR_OK) {
 800f4fa:	2800      	cmp	r0, #0
 800f4fc:	d1e8      	bne.n	800f4d0 <f_close+0x18>
					dir = fp->dir_ptr;
 800f4fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f500:	7ada      	ldrb	r2, [r3, #11]
 800f502:	f042 0220 	orr.w	r2, r2, #32
 800f506:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f508:	68a2      	ldr	r2, [r4, #8]
 800f50a:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f50c:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800f510:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800f512:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800f514:	7809      	ldrb	r1, [r1, #0]
 800f516:	2903      	cmp	r1, #3
 800f518:	d103      	bne.n	800f522 <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f51a:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f51c:	751a      	strb	r2, [r3, #20]
 800f51e:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800f520:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800f522:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800f524:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800f526:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f52a:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800f52c:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800f52e:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800f530:	2301      	movs	r3, #1
 800f532:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f534:	f7fe f838 	bl	800d5a8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f538:	7d23      	ldrb	r3, [r4, #20]
 800f53a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f53e:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800f540:	2800      	cmp	r0, #0
 800f542:	d1c5      	bne.n	800f4d0 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f544:	6825      	ldr	r5, [r4, #0]
 800f546:	2d00      	cmp	r5, #0
 800f548:	d0c1      	beq.n	800f4ce <f_close+0x16>
 800f54a:	782b      	ldrb	r3, [r5, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0be      	beq.n	800f4ce <f_close+0x16>
 800f550:	88a2      	ldrh	r2, [r4, #4]
 800f552:	88eb      	ldrh	r3, [r5, #6]
 800f554:	429a      	cmp	r2, r3
 800f556:	d1ba      	bne.n	800f4ce <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f558:	7868      	ldrb	r0, [r5, #1]
 800f55a:	f7fd f9b9 	bl	800c8d0 <disk_status>
 800f55e:	f010 0001 	ands.w	r0, r0, #1
 800f562:	d1b4      	bne.n	800f4ce <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f564:	6923      	ldr	r3, [r4, #16]
 800f566:	3b01      	subs	r3, #1
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d81e      	bhi.n	800f5aa <f_close+0xf2>
		n = Files[i].ctr;
 800f56c:	4912      	ldr	r1, [pc, #72]	; (800f5b8 <f_close+0x100>)
 800f56e:	011d      	lsls	r5, r3, #4
 800f570:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800f574:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f576:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800f57a:	d01a      	beq.n	800f5b2 <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800f57c:	b11a      	cbz	r2, 800f586 <f_close+0xce>
 800f57e:	3a01      	subs	r2, #1
 800f580:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800f582:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f584:	b90a      	cbnz	r2, 800f58a <f_close+0xd2>
 800f586:	2300      	movs	r3, #0
 800f588:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800f58a:	2300      	movs	r3, #0
 800f58c:	6023      	str	r3, [r4, #0]
}
 800f58e:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f590:	2301      	movs	r3, #1
 800f592:	6a22      	ldr	r2, [r4, #32]
 800f594:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800f598:	7868      	ldrb	r0, [r5, #1]
 800f59a:	f7fd f9c5 	bl	800c928 <disk_write>
 800f59e:	b930      	cbnz	r0, 800f5ae <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f5a0:	7d23      	ldrb	r3, [r4, #20]
 800f5a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5a6:	7523      	strb	r3, [r4, #20]
 800f5a8:	e7a0      	b.n	800f4ec <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f5aa:	2002      	movs	r0, #2
}
 800f5ac:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f5ae:	2001      	movs	r0, #1
}
 800f5b0:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800f5b2:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f5b4:	e7e7      	b.n	800f586 <f_close+0xce>
 800f5b6:	bf00      	nop
 800f5b8:	2001d5b8 	.word	0x2001d5b8

0800f5bc <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800f5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f5c0:	b150      	cbz	r0, 800f5d8 <f_findnext+0x1c>
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f5c6:	4c3b      	ldr	r4, [pc, #236]	; (800f6b4 <f_findnext+0xf8>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	b12b      	cbz	r3, 800f5d8 <f_findnext+0x1c>
 800f5cc:	781a      	ldrb	r2, [r3, #0]
 800f5ce:	b11a      	cbz	r2, 800f5d8 <f_findnext+0x1c>
 800f5d0:	88a9      	ldrh	r1, [r5, #4]
 800f5d2:	88da      	ldrh	r2, [r3, #6]
 800f5d4:	4291      	cmp	r1, r2
 800f5d6:	d003      	beq.n	800f5e0 <f_findnext+0x24>
	FRESULT res = FR_INVALID_OBJECT;
 800f5d8:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800f5da:	4638      	mov	r0, r7
 800f5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f5e0:	7858      	ldrb	r0, [r3, #1]
 800f5e2:	f7fd f975 	bl	800c8d0 <disk_status>
 800f5e6:	f010 0101 	ands.w	r1, r0, #1
 800f5ea:	d1f5      	bne.n	800f5d8 <f_findnext+0x1c>
		if (!fno) {
 800f5ec:	2e00      	cmp	r6, #0
 800f5ee:	d059      	beq.n	800f6a4 <f_findnext+0xe8>
			res = dir_read(dp, 0);			/* Read an item */
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	f7fd fdcf 	bl	800d194 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 800f5f6:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800f5fa:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800f5fc:	d1ed      	bne.n	800f5da <f_findnext+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f5fe:	4631      	mov	r1, r6
 800f600:	4628      	mov	r0, r5
 800f602:	f7fd fa7b 	bl	800cafc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f606:	4641      	mov	r1, r8
 800f608:	4628      	mov	r0, r5
 800f60a:	f7fe fdd1 	bl	800e1b0 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800f60e:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 800f612:	d14d      	bne.n	800f6b0 <f_findnext+0xf4>
 800f614:	7db3      	ldrb	r3, [r6, #22]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d0df      	beq.n	800f5da <f_findnext+0x1e>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800f61a:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 800f61e:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 800f622:	e00f      	b.n	800f644 <f_findnext+0x88>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f624:	3a20      	subs	r2, #32
 800f626:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f628:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f62c:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f630:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f632:	f1be 0f19 	cmp.w	lr, #25
 800f636:	d817      	bhi.n	800f668 <f_findnext+0xac>
 800f638:	3b20      	subs	r3, #32
 800f63a:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d1c3      	bne.n	800f5c8 <f_findnext+0xc>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800f640:	2b00      	cmp	r3, #0
 800f642:	d0ca      	beq.n	800f5da <f_findnext+0x1e>
 800f644:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800f646:	f81c 3b01 	ldrb.w	r3, [ip], #1
 800f64a:	2b3f      	cmp	r3, #63	; 0x3f
 800f64c:	d012      	beq.n	800f674 <f_findnext+0xb8>
 800f64e:	2b2a      	cmp	r3, #42	; 0x2a
 800f650:	d010      	beq.n	800f674 <f_findnext+0xb8>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f652:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800f656:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800f658:	2819      	cmp	r0, #25
 800f65a:	d9e3      	bls.n	800f624 <f_findnext+0x68>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800f65c:	2a7f      	cmp	r2, #127	; 0x7f
 800f65e:	d9e3      	bls.n	800f628 <f_findnext+0x6c>
 800f660:	4423      	add	r3, r4
 800f662:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800f666:	e7df      	b.n	800f628 <f_findnext+0x6c>
 800f668:	2b7f      	cmp	r3, #127	; 0x7f
 800f66a:	d9e7      	bls.n	800f63c <f_findnext+0x80>
 800f66c:	4420      	add	r0, r4
 800f66e:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 800f672:	e7e3      	b.n	800f63c <f_findnext+0x80>
 800f674:	4694      	mov	ip, r2
				nm = nx = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	f81c eb01 	ldrb.w	lr, [ip], #1
 800f67c:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800f67e:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800f682:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 800f684:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800f688:	bf0c      	ite	eq
 800f68a:	3201      	addeq	r2, #1
 800f68c:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800f68e:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800f692:	d0f4      	beq.n	800f67e <f_findnext+0xc2>
 800f694:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 800f698:	d0f1      	beq.n	800f67e <f_findnext+0xc2>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800f69a:	f7fd f9b9 	bl	800ca10 <pattern_matching>
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	d092      	beq.n	800f5c8 <f_findnext+0xc>
 800f6a2:	e79a      	b.n	800f5da <f_findnext+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f6a4:	4631      	mov	r1, r6
 800f6a6:	4628      	mov	r0, r5
}
 800f6a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f6ac:	f7fe b89a 	b.w	800d7e4 <dir_sdi>
 800f6b0:	4607      	mov	r7, r0
 800f6b2:	e792      	b.n	800f5da <f_findnext+0x1e>
 800f6b4:	0801b568 	.word	0x0801b568

0800f6b8 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800f6b8:	b570      	push	{r4, r5, r6, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	4615      	mov	r5, r2
 800f6be:	4604      	mov	r4, r0
 800f6c0:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800f6c2:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	a901      	add	r1, sp, #4
 800f6c8:	4668      	mov	r0, sp
 800f6ca:	9500      	str	r5, [sp, #0]
 800f6cc:	f7fd fb14 	bl	800ccf8 <find_volume>
	if (res == FR_OK) {
 800f6d0:	b118      	cbz	r0, 800f6da <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800f6d6:	b002      	add	sp, #8
 800f6d8:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f6da:	e9dd 1500 	ldrd	r1, r5, [sp]
 800f6de:	4620      	mov	r0, r4
		obj->fs = fs;
 800f6e0:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f6e2:	f7fe fad7 	bl	800dc94 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800f6e6:	bb00      	cbnz	r0, 800f72a <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f6e8:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	db0b      	blt.n	800f708 <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f6f0:	79a3      	ldrb	r3, [r4, #6]
 800f6f2:	06db      	lsls	r3, r3, #27
 800f6f4:	d51f      	bpl.n	800f736 <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
 800f6f6:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f6f8:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 800f6fa:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800f6fc:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800f6fe:	d102      	bne.n	800f706 <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f700:	8a92      	ldrh	r2, [r2, #20]
 800f702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f706:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 800f708:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f70a:	2100      	movs	r1, #0
 800f70c:	4620      	mov	r0, r4
				obj->id = fs->id;
 800f70e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f710:	f7fe f868 	bl	800d7e4 <dir_sdi>
				if (res == FR_OK) {
 800f714:	b948      	cbnz	r0, 800f72a <f_findfirst+0x72>
					if (obj->sclust) {
 800f716:	68a3      	ldr	r3, [r4, #8]
 800f718:	b97b      	cbnz	r3, 800f73a <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f71a:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 800f71c:	4631      	mov	r1, r6
 800f71e:	4620      	mov	r0, r4
}
 800f720:	b002      	add	sp, #8
 800f722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 800f726:	f7ff bf49 	b.w	800f5bc <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f72a:	2804      	cmp	r0, #4
 800f72c:	d1d1      	bne.n	800f6d2 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f72e:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
 800f730:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f732:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 800f734:	e7cf      	b.n	800f6d6 <f_findfirst+0x1e>
					res = FR_NO_PATH;
 800f736:	2005      	movs	r0, #5
 800f738:	e7cb      	b.n	800f6d2 <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f73a:	4601      	mov	r1, r0
 800f73c:	4620      	mov	r0, r4
 800f73e:	f7fd f90f 	bl	800c960 <inc_lock>
 800f742:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f744:	2800      	cmp	r0, #0
 800f746:	d1e9      	bne.n	800f71c <f_findfirst+0x64>
 800f748:	2012      	movs	r0, #18
 800f74a:	e7c2      	b.n	800f6d2 <f_findfirst+0x1a>

0800f74c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800f74c:	4b11      	ldr	r3, [pc, #68]	; (800f794 <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f74e:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800f750:	7a5c      	ldrb	r4, [r3, #9]
 800f752:	b9cc      	cbnz	r4, 800f788 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 800f754:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 800f758:	7a5c      	ldrb	r4, [r3, #9]
 800f75a:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800f75c:	7a5c      	ldrb	r4, [r3, #9]
 800f75e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f762:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800f764:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800f766:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800f768:	441c      	add	r4, r3
 800f76a:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800f76c:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
 800f76e:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 800f770:	b2e4      	uxtb	r4, r4
 800f772:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800f774:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800f776:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800f778:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800f77a:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800f77c:	4610      	mov	r0, r2
 800f77e:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
 800f782:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800f784:	708b      	strb	r3, [r1, #2]
}
 800f786:	4770      	bx	lr
  uint8_t ret = 1;
 800f788:	2201      	movs	r2, #1
}
 800f78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f78e:	4610      	mov	r0, r2
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	2001d7dc 	.word	0x2001d7dc

0800f798 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f798:	287f      	cmp	r0, #127	; 0x7f
 800f79a:	d913      	bls.n	800f7c4 <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f79c:	b979      	cbnz	r1, 800f7be <ff_convert+0x26>
 800f79e:	4b0c      	ldr	r3, [pc, #48]	; (800f7d0 <ff_convert+0x38>)
 800f7a0:	e001      	b.n	800f7a6 <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f7a2:	2980      	cmp	r1, #128	; 0x80
 800f7a4:	d00d      	beq.n	800f7c2 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800f7a6:	f833 2b02 	ldrh.w	r2, [r3], #2
 800f7aa:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 800f7ae:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 800f7b0:	4282      	cmp	r2, r0
 800f7b2:	d1f6      	bne.n	800f7a2 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 800f7b4:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800f7b8:	fa1f f08c 	uxth.w	r0, ip
 800f7bc:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f7be:	28ff      	cmp	r0, #255	; 0xff
 800f7c0:	d901      	bls.n	800f7c6 <ff_convert+0x2e>
 800f7c2:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800f7c4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f7c6:	4b02      	ldr	r3, [pc, #8]	; (800f7d0 <ff_convert+0x38>)
 800f7c8:	3880      	subs	r0, #128	; 0x80
 800f7ca:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800f7ce:	4770      	bx	lr
 800f7d0:	0801b5f8 	.word	0x0801b5f8

0800f7d4 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f7d4:	4b23      	ldr	r3, [pc, #140]	; (800f864 <ff_wtoupper+0x90>)
 800f7d6:	4a24      	ldr	r2, [pc, #144]	; (800f868 <ff_wtoupper+0x94>)
 800f7d8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800f7dc:	bf28      	it	cs
 800f7de:	4613      	movcs	r3, r2
{
 800f7e0:	b510      	push	{r4, lr}
 800f7e2:	3304      	adds	r3, #4
 800f7e4:	e00a      	b.n	800f7fc <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f7e6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800f7ea:	fa5f fc82 	uxtb.w	ip, r2
 800f7ee:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 800f7f0:	eb0c 0e01 	add.w	lr, ip, r1
 800f7f4:	4570      	cmp	r0, lr
 800f7f6:	db09      	blt.n	800f80c <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800f7f8:	3304      	adds	r3, #4
 800f7fa:	b182      	cbz	r2, 800f81e <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 800f7fc:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 800f800:	461c      	mov	r4, r3
 800f802:	1e4a      	subs	r2, r1, #1
 800f804:	b292      	uxth	r2, r2
 800f806:	4290      	cmp	r0, r2
 800f808:	d8ed      	bhi.n	800f7e6 <ff_wtoupper+0x12>
	}

	return chr;
}
 800f80a:	bd10      	pop	{r4, pc}
			switch (cmd) {
 800f80c:	2a08      	cmp	r2, #8
 800f80e:	d8fc      	bhi.n	800f80a <ff_wtoupper+0x36>
 800f810:	e8df f002 	tbb	[pc, r2]
 800f814:	1916100c 	.word	0x1916100c
 800f818:	25221f1c 	.word	0x25221f1c
 800f81c:	08          	.byte	0x08
 800f81d:	00          	.byte	0x00
		if (!cmd) p += nc;
 800f81e:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 800f822:	e7de      	b.n	800f7e2 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f824:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800f828:	b280      	uxth	r0, r0
}
 800f82a:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f82c:	1a41      	subs	r1, r0, r1
 800f82e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 800f832:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f834:	1a43      	subs	r3, r0, r1
 800f836:	f003 0301 	and.w	r3, r3, #1
 800f83a:	1ac3      	subs	r3, r0, r3
 800f83c:	b298      	uxth	r0, r3
}
 800f83e:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 800f840:	3810      	subs	r0, #16
 800f842:	b280      	uxth	r0, r0
}
 800f844:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f846:	3820      	subs	r0, #32
 800f848:	b280      	uxth	r0, r0
}
 800f84a:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f84c:	3830      	subs	r0, #48	; 0x30
 800f84e:	b280      	uxth	r0, r0
}
 800f850:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f852:	381a      	subs	r0, #26
 800f854:	b280      	uxth	r0, r0
}
 800f856:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 800f858:	3008      	adds	r0, #8
 800f85a:	b280      	uxth	r0, r0
}
 800f85c:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 800f85e:	3850      	subs	r0, #80	; 0x50
 800f860:	b280      	uxth	r0, r0
}
 800f862:	bd10      	pop	{r4, pc}
 800f864:	0801b6f8 	.word	0x0801b6f8
 800f868:	0801b8ec 	.word	0x0801b8ec

0800f86c <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, LEAF* const leaf)
{
 800f86c:	b538      	push	{r3, r4, r5, lr}
 800f86e:	ed2d 8b02 	vpush	{d8}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
 800f872:	698d      	ldr	r5, [r1, #24]
{
 800f874:	eef0 8a40 	vmov.f32	s17, s0
 800f878:	eeb0 8a60 	vmov.f32	s16, s1
 800f87c:	4604      	mov	r4, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800f87e:	4629      	mov	r1, r5
 800f880:	2010      	movs	r0, #16
 800f882:	f004 fb11 	bl	8013ea8 <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
 800f886:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800f888:	6020      	str	r0, [r4, #0]
    e->mempool = m;
 800f88a:	6005      	str	r5, [r0, #0]
    e->y = 0.0f;
 800f88c:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
 800f88e:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
 800f892:	ed80 8a03 	vstr	s16, [r0, #12]
}
 800f896:	ecbd 8b02 	vpop	{d8}
 800f89a:	bd38      	pop	{r3, r4, r5, pc}

0800f89c <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
 800f89c:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800f89e:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (isnan(x)) return 0.0f;
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
 800f8a2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8a6:	eef4 7ac0 	vcmpe.f32	s15, s0
 800f8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ae:	d809      	bhi.n	800f8c4 <tEnvelopeFollower_tick+0x28>
 800f8b0:	ed93 7a02 	vldr	s14, [r3, #8]
 800f8b4:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800f8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8bc:	d502      	bpl.n	800f8c4 <tEnvelopeFollower_tick+0x28>
 800f8be:	ed83 0a01 	vstr	s0, [r3, #4]
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
#endif
    return e->y;
}
 800f8c2:	4770      	bx	lr
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
 800f8c4:	ed93 0a03 	vldr	s0, [r3, #12]
 800f8c8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f8cc:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop

0800f8d4 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
 800f8d4:	b538      	push	{r3, r4, r5, lr}
 800f8d6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800f8da:	680d      	ldr	r5, [r1, #0]
{
 800f8dc:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800f8de:	2010      	movs	r0, #16
{
 800f8e0:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	f004 fadf 	bl	8013ea8 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800f8ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 800f8ee:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800f8f0:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800f8f2:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 800f8f4:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
 800f8f8:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 800f8fa:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 800f8fe:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800f902:	ecbd 8b02 	vpop	{d8}
 800f906:	bd38      	pop	{r3, r4, r5, pc}

0800f908 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
 800f908:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 800f90a:	6801      	ldr	r1, [r0, #0]
 800f90c:	f004 bb8e 	b.w	801402c <mpool_free>

0800f910 <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
 800f910:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f914:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800f930 <tPowerFollower_setFactor+0x20>
 800f918:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
    if (factor>1.0f) factor=1.0f;
 800f91a:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 800f91e:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800f922:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
 800f926:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800f92a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800f92e:	4770      	bx	lr
 800f930:	00000000 	.word	0x00000000

0800f934 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
 800f934:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 800f936:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f93a:	edd3 6a03 	vldr	s13, [r3, #12]
 800f93e:	ed93 0a02 	vldr	s0, [r3, #8]
 800f942:	ed93 7a01 	vldr	s14, [r3, #4]
 800f946:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f94a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800f94e:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 800f952:	4770      	bx	lr

0800f954 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 800f954:	b570      	push	{r4, r5, r6, lr}
 800f956:	460d      	mov	r5, r1
 800f958:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800f95a:	202c      	movs	r0, #44	; 0x2c
{
 800f95c:	ed2d 8b02 	vpush	{d8}
 800f960:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800f962:	6811      	ldr	r1, [r2, #0]
{
 800f964:	eeb0 8a40 	vmov.f32	s16, s0
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 800f968:	eddf 8a30 	vldr	s17, [pc, #192]	; 800fa2c <tLinearDelay_initToPool+0xd8>
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800f96c:	9101      	str	r1, [sp, #4]
 800f96e:	f004 fa9b 	bl	8013ea8 <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 800f972:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800f976:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800f978:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
 800f97a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800f97e:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 800f980:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
 800f984:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 800f986:	61c5      	str	r5, [r0, #28]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800f988:	00a8      	lsls	r0, r5, #2
    if (delay > maxDelay)   d->delay = maxDelay;
 800f98a:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 800f98e:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800f992:	f004 fa89 	bl	8013ea8 <mpool_alloc>

    d->gain = 1.0f;
 800f996:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 800f99a:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800f99c:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 800f99e:	6062      	str	r2, [r4, #4]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800f9a0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    d->lastIn = 0.0f;
 800f9a4:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
 800f9a8:	edc4 8a03 	vstr	s17, [r4, #12]
    d->inPoint = 0;
 800f9ac:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800f9ae:	61a3      	str	r3, [r4, #24]
    _tLinearDelay* d = *dl;
 800f9b0:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800f9b2:	edd4 0a08 	vldr	s1, [r4, #32]
 800f9b6:	edd5 7a07 	vldr	s15, [r5, #28]
 800f9ba:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800f9be:	f003 ff71 	bl	80138a4 <LEAF_clip>

    Lfloat outPointer = d->inPoint - d->delay;
 800f9c2:	edd5 7a05 	vldr	s15, [r5, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 800f9c6:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
 800f9c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800f9cc:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
 800f9d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 800f9d4:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9dc:	d50a      	bpl.n	800f9f4 <tLinearDelay_initToPool+0xa0>
        outPointer += d->maxDelay; // modulo maximum length
 800f9de:	ee07 2a10 	vmov	s14, r2
 800f9e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800f9e6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800f9ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f2:	d4f8      	bmi.n	800f9e6 <tLinearDelay_initToPool+0x92>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800f9f4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800f9f8:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 800f9fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800fa00:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800fa04:	4293      	cmp	r3, r2
 800fa06:	bf08      	it	eq
 800fa08:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 800fa0a:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 800fa0e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800fa12:	61ab      	str	r3, [r5, #24]
 800fa14:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 800fa18:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 800fa1c:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800fa20:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
}
 800fa24:	b002      	add	sp, #8
 800fa26:	ecbd 8b02 	vpop	{d8}
 800fa2a:	bd70      	pop	{r4, r5, r6, pc}
 800fa2c:	00000000 	.word	0x00000000

0800fa30 <tLinearDelay_free>:
{
 800fa30:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800fa32:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
 800fa34:	6821      	ldr	r1, [r4, #0]
 800fa36:	68a0      	ldr	r0, [r4, #8]
 800fa38:	f004 faf8 	bl	801402c <mpool_free>
    mpool_free((char*)d, d->mempool);
 800fa3c:	6821      	ldr	r1, [r4, #0]
 800fa3e:	4620      	mov	r0, r4
}
 800fa40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 800fa44:	f004 baf2 	b.w	801402c <mpool_free>

0800fa48 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
 800fa48:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fa4a:	69cb      	ldr	r3, [r1, #28]
 800fa4c:	b14b      	cbz	r3, 800fa62 <tLinearDelay_clear+0x1a>
 800fa4e:	2300      	movs	r3, #0
        d->buff[i] = 0;
 800fa50:	2000      	movs	r0, #0
 800fa52:	688a      	ldr	r2, [r1, #8]
 800fa54:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fa58:	3301      	adds	r3, #1
        d->buff[i] = 0;
 800fa5a:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fa5c:	69ca      	ldr	r2, [r1, #28]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d8f7      	bhi.n	800fa52 <tLinearDelay_clear+0xa>
}
 800fa62:	4770      	bx	lr

0800fa64 <tLinearDelay_tick>:
{
 800fa64:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 800fa66:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 800fa68:	edd3 7a01 	vldr	s15, [r3, #4]
 800fa6c:	6959      	ldr	r1, [r3, #20]
 800fa6e:	689a      	ldr	r2, [r3, #8]
 800fa70:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fa74:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fa78:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800fa7c:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fa7e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
 800fa82:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800fa86:	3201      	adds	r2, #1
    if ((idx + 1) < d->maxDelay)
 800fa88:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800fa8a:	42a2      	cmp	r2, r4
 800fa8c:	bf08      	it	eq
 800fa8e:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
 800fa90:	4284      	cmp	r4, r0
 800fa92:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fa94:	689a      	ldr	r2, [r3, #8]
 800fa96:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800fa9a:	ed91 0a00 	vldr	s0, [r1]
 800fa9e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800faa2:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 800faa6:	d90b      	bls.n	800fac0 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800faa8:	ed91 7a01 	vldr	s14, [r1, #4]
 800faac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800fab0:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fab2:	eea7 0a27 	vfma.f32	s0, s14, s15
 800fab6:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800faba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fabe:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800fac0:	ed92 7a00 	vldr	s14, [r2]
 800fac4:	2000      	movs	r0, #0
 800fac6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800faca:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 800facc:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fad0:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800fad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop

0800fadc <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
 800fadc:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 800fade:	edd3 7a01 	vldr	s15, [r3, #4]
 800fae2:	6959      	ldr	r1, [r3, #20]
 800fae4:	689a      	ldr	r2, [r3, #8]
 800fae6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800faea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800faee:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800faf2:	695a      	ldr	r2, [r3, #20]
 800faf4:	69d9      	ldr	r1, [r3, #28]
 800faf6:	3201      	adds	r2, #1
 800faf8:	428a      	cmp	r2, r1
 800fafa:	bf08      	it	eq
 800fafc:	2200      	moveq	r2, #0
 800fafe:	615a      	str	r2, [r3, #20]
}
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop

0800fb04 <tLinearDelay_tickOut>:
{
 800fb04:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 800fb06:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 800fb08:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fb0a:	6899      	ldr	r1, [r3, #8]
 800fb0c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fb10:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
 800fb14:	69dc      	ldr	r4, [r3, #28]
 800fb16:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fb18:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
 800fb1c:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 800fb1e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fb22:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 800fb26:	d20b      	bcs.n	800fb40 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fb28:	ed90 7a01 	vldr	s14, [r0, #4]
 800fb2c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800fb30:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fb32:	eea7 0a27 	vfma.f32	s0, s14, s15
 800fb36:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800fb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb3e:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800fb40:	ed91 7a00 	vldr	s14, [r1]
 800fb44:	2200      	movs	r2, #0
 800fb46:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800fb4a:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 800fb4c:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 800fb50:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800fb54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop

0800fb5c <tLinearDelay_setDelay>:
{
 800fb5c:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800fb5e:	6804      	ldr	r4, [r0, #0]
{
 800fb60:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800fb64:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fb68:	edd4 7a07 	vldr	s15, [r4, #28]
 800fb6c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800fb70:	f003 fe98 	bl	80138a4 <LEAF_clip>
    Lfloat outPointer = d->inPoint - d->delay;
 800fb74:	edd4 7a05 	vldr	s15, [r4, #20]
        outPointer += d->maxDelay; // modulo maximum length
 800fb78:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
 800fb7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800fb7e:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
 800fb82:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 800fb86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb8e:	d50a      	bpl.n	800fba6 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 800fb90:	ee07 2a10 	vmov	s14, r2
 800fb94:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fb98:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800fb9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba4:	d4f8      	bmi.n	800fb98 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 800fba6:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800fbaa:	ee17 3a10 	vmov	r3, s14
    d->omAlpha = 1.0f - d->alpha;
 800fbae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800fbb2:	ee06 3a90 	vmov	s13, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	bf08      	it	eq
 800fbba:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 800fbbc:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 800fbc0:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800fbc4:	61a3      	str	r3, [r4, #24]
 800fbc6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 800fbca:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 800fbce:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800fbd2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
 800fbd6:	bd10      	pop	{r4, pc}

0800fbd8 <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
 800fbd8:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
 800fbda:	6953      	ldr	r3, [r2, #20]
 800fbdc:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
 800fbde:	3901      	subs	r1, #1
 800fbe0:	d502      	bpl.n	800fbe8 <tLinearDelay_addTo+0x10>
 800fbe2:	69d3      	ldr	r3, [r2, #28]
 800fbe4:	18c9      	adds	r1, r1, r3
 800fbe6:	d4fd      	bmi.n	800fbe4 <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
 800fbe8:	6893      	ldr	r3, [r2, #8]
 800fbea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800fbee:	edd3 7a00 	vldr	s15, [r3]
 800fbf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fbf6:	ed83 0a00 	vstr	s0, [r3]
}
 800fbfa:	4770      	bx	lr

0800fbfc <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
 800fbfc:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
 800fbfe:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
 800fc00:	e9d4 1000 	ldrd	r1, r0, [r4]
 800fc04:	f004 fa12 	bl	801402c <mpool_free>
    mpool_free((char*)d, d->mempool);
 800fc08:	6821      	ldr	r1, [r4, #0]
 800fc0a:	4620      	mov	r0, r4
}
 800fc0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 800fc10:	f004 ba0c 	b.w	801402c <mpool_free>

0800fc14 <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 800fc14:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fc16:	69cb      	ldr	r3, [r1, #28]
 800fc18:	b14b      	cbz	r3, 800fc2e <tLagrangeDelay_clear+0x1a>
 800fc1a:	2300      	movs	r3, #0
    {
        d->buff[i] = 0.0f;
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	684a      	ldr	r2, [r1, #4]
 800fc20:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fc24:	3301      	adds	r3, #1
        d->buff[i] = 0.0f;
 800fc26:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800fc28:	69ca      	ldr	r2, [r1, #28]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d8f7      	bhi.n	800fc1e <tLagrangeDelay_clear+0xa>
    }
}
 800fc2e:	4770      	bx	lr

0800fc30 <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
 800fc30:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
 800fc32:	6959      	ldr	r1, [r3, #20]
 800fc34:	685a      	ldr	r2, [r3, #4]
 800fc36:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800fc3a:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 800fc3e:	695a      	ldr	r2, [r3, #20]
 800fc40:	6899      	ldr	r1, [r3, #8]
 800fc42:	3201      	adds	r2, #1
 800fc44:	400a      	ands	r2, r1
 800fc46:	615a      	str	r2, [r3, #20]
}
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop

0800fc4c <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
 800fc4c:	b430      	push	{r4, r5}
	_tLagrangeDelay* d = *dl;
 800fc4e:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 800fc50:	6998      	ldr	r0, [r3, #24]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;

    d->lastOut =    (d->buff[previdx] * d->h0) +
    		(d->buff[idx] * d->h1) +
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800fc52:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 800fc56:	1c82      	adds	r2, r0, #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fc58:	1c44      	adds	r4, r0, #1
 800fc5a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800fc5e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fc62:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800fc66:	e9d3 1501 	ldrd	r1, r5, [r3, #4]
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800fc6a:	402a      	ands	r2, r5
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fc6c:	402c      	ands	r4, r5
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800fc6e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fc72:	ed92 0a00 	vldr	s0, [r2]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fc76:	eb01 0284 	add.w	r2, r1, r4, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800fc7a:	ee20 0a06 	vmul.f32	s0, s0, s12
 800fc7e:	ed92 6a00 	vldr	s12, [r2]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800fc82:	69da      	ldr	r2, [r3, #28]
 800fc84:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fc88:	4402      	add	r2, r0
    		(d->buff[idx] * d->h1) +
 800fc8a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800fc8e:	3a01      	subs	r2, #1
 800fc90:	edd0 6a00 	vldr	s13, [r0]
 800fc94:	402a      	ands	r2, r5
 800fc96:	eea6 0a87 	vfma.f32	s0, s13, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800fc9a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fc9e:	ed91 7a00 	vldr	s14, [r1]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 800fca2:	619c      	str	r4, [r3, #24]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800fca4:	eea7 0a27 	vfma.f32	s0, s14, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800fca8:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
 800fcac:	bc30      	pop	{r4, r5}
 800fcae:	4770      	bx	lr

0800fcb0 <tLagrangeDelay_setDelay>:
void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 800fcb0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	_tLagrangeDelay* d = *dl;
 800fcb4:	6803      	ldr	r3, [r0, #0]
    d->delay = delay; // not safe but faster
 800fcb6:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 800fcba:	ee37 7ac0 	vsub.f32	s14, s15, s0
 800fcbe:	edd3 7a05 	vldr	s15, [r3, #20]
 800fcc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcc6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800fcca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fcce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd2:	d50a      	bpl.n	800fcea <tLagrangeDelay_setDelay+0x3a>
        outPointer += d->maxDelay; // modulo maximum length
 800fcd4:	ed93 7a07 	vldr	s14, [r3, #28]
 800fcd8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800fcdc:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800fce0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce8:	d4f8      	bmi.n	800fcdc <tLagrangeDelay_setDelay+0x2c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800fcea:	eebc 7ae7 	vcvt.u32.f32	s14, s15

	Lfloat pdp1d = dp1*alpha;
	Lfloat pddm1 = alpha*dm1;
	Lfloat pdm1dm2 = dm1*dm2;

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800fcee:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800fd64 <tLagrangeDelay_setDelay+0xb4>
	Lfloat dp1 = alpha+1.0f;
 800fcf2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	d->h1 = 0.5f * (dp1 * pdm1dm2);
	d->h2 = -0.5f * (pdp1d * dm2);
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800fcf6:	eddf 3a1c 	vldr	s7, [pc, #112]	; 800fd68 <tLagrangeDelay_setDelay+0xb8>
	Lfloat dm2 = alpha-2.0f;
 800fcfa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0

    d->outPoint &= d->bufferMask;
 800fcfe:	689a      	ldr	r2, [r3, #8]
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 800fd00:	eeb8 6a47 	vcvt.f32.u32	s12, s14
    d->outPoint &= d->bufferMask;
 800fd04:	ee17 1a10 	vmov	r1, s14
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800fd08:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
	d->h2 = -0.5f * (pdp1d * dm2);
 800fd0c:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    d->outPoint &= d->bufferMask;
 800fd10:	400a      	ands	r2, r1
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 800fd12:	ee77 7ac6 	vsub.f32	s15, s15, s12
    d->outPoint &= d->bufferMask;
 800fd16:	619a      	str	r2, [r3, #24]
	Lfloat dm1 = alpha-1.0f;
 800fd18:	ee37 7ae4 	vsub.f32	s14, s15, s9
	Lfloat dp1 = alpha+1.0f;
 800fd1c:	ee77 4aa4 	vadd.f32	s9, s15, s9
	Lfloat dm2 = alpha-2.0f;
 800fd20:	ee37 5ac5 	vsub.f32	s10, s15, s10
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800fd24:	ee67 6aa6 	vmul.f32	s13, s15, s13
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800fd28:	ee24 6a87 	vmul.f32	s12, s9, s14
	Lfloat pdp1d = dp1*alpha;
 800fd2c:	ee67 7aa4 	vmul.f32	s15, s15, s9
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800fd30:	ee66 6a87 	vmul.f32	s13, s13, s14
	d->h2 = -0.5f * (pdp1d * dm2);
 800fd34:	ee65 5a25 	vmul.f32	s11, s10, s11
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800fd38:	ee27 7a23 	vmul.f32	s14, s14, s7
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800fd3c:	ee26 6a04 	vmul.f32	s12, s12, s8
	d->h2 = -0.5f * (pdp1d * dm2);
 800fd40:	ee65 5aa7 	vmul.f32	s11, s11, s15
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800fd44:	ee27 7a27 	vmul.f32	s14, s14, s15
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800fd48:	ee66 6a85 	vmul.f32	s13, s13, s10
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800fd4c:	ee66 7a05 	vmul.f32	s15, s12, s10
	d->h2 = -0.5f * (pdp1d * dm2);
 800fd50:	edc3 5a0b 	vstr	s11, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800fd54:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800fd58:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800fd5c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	be2aaaab 	.word	0xbe2aaaab
 800fd68:	3e2aaaab 	.word	0x3e2aaaab

0800fd6c <tLagrangeDelay_initToPool>:
{
 800fd6c:	b570      	push	{r4, r5, r6, lr}
 800fd6e:	460d      	mov	r5, r1
 800fd70:	4606      	mov	r6, r0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800fd72:	2034      	movs	r0, #52	; 0x34
{
 800fd74:	ed2d 8b02 	vpush	{d8}
 800fd78:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800fd7a:	6811      	ldr	r1, [r2, #0]
{
 800fd7c:	eeb0 8a40 	vmov.f32	s16, s0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800fd80:	9101      	str	r1, [sp, #4]
 800fd82:	f004 f891 	bl	8013ea8 <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 800fd86:	ee07 5a90 	vmov	s15, r5
 800fd8a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800fdfc <tLagrangeDelay_initToPool+0x90>
    d->mempool = m;
 800fd8e:	9901      	ldr	r1, [sp, #4]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800fd90:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 800fd92:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800fd96:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 800fd98:	fe88 0a07 	vmaxnm.f32	s0, s16, s14
    d->mempool = m;
 800fd9c:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 800fd9e:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800fda0:	fe80 0a67 	vminnm.f32	s0, s0, s15
 800fda4:	ed80 0a08 	vstr	s0, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800fda8:	bb1d      	cbnz	r5, 800fdf2 <tLagrangeDelay_initToPool+0x86>
 800fdaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        maxDelay |= maxDelay >> 1;
 800fdae:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 800fdb2:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 800fdb6:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 800fdba:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 800fdbe:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
 800fdc2:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
 800fdc4:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
 800fdc6:	60a2      	str	r2, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fdc8:	00a8      	lsls	r0, r5, #2
 800fdca:	f004 f86d 	bl	8013ea8 <mpool_alloc>
    d->lastIn = 0.0f;
 800fdce:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fdd0:	4601      	mov	r1, r0
    d->inPoint = 0;
 800fdd2:	2300      	movs	r3, #0
    tLagrangeDelay_setDelay(dl, d->delay);
 800fdd4:	ed94 0a08 	vldr	s0, [r4, #32]
 800fdd8:	4630      	mov	r0, r6
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800fdda:	6061      	str	r1, [r4, #4]
    d->lastIn = 0.0f;
 800fddc:	6122      	str	r2, [r4, #16]
    d->lastOut = 0.0f;
 800fdde:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;
 800fde0:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800fde4:	b002      	add	sp, #8
 800fde6:	ecbd 8b02 	vpop	{d8}
 800fdea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tLagrangeDelay_setDelay(dl, d->delay);
 800fdee:	f7ff bf5f 	b.w	800fcb0 <tLagrangeDelay_setDelay>
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800fdf2:	1e6b      	subs	r3, r5, #1
 800fdf4:	422b      	tst	r3, r5
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	d1d9      	bne.n	800fdae <tLagrangeDelay_initToPool+0x42>
 800fdfa:	e7e4      	b.n	800fdc6 <tLagrangeDelay_initToPool+0x5a>
 800fdfc:	00000000 	.word	0x00000000

0800fe00 <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800fe00:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800fe02:	6953      	ldr	r3, [r2, #20]
 800fe04:	1a5b      	subs	r3, r3, r1

    return d->buff[tap];
 800fe06:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	4003      	ands	r3, r0
    return d->buff[tap];
 800fe0e:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
 800fe12:	ed92 0a00 	vldr	s0, [r2]
 800fe16:	4770      	bx	lr

0800fe18 <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
 800fe18:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800fe1a:	f06f 0301 	mvn.w	r3, #1
	_tLagrangeDelay* d = *dl;
 800fe1e:	6802      	ldr	r2, [r0, #0]

    alpha = 1.0f - alpha;
 800fe20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    Lfloat pdp1d = dp1*alpha;
    Lfloat pddm1 = alpha*dm1;
    Lfloat pdm1dm2 = dm1*dm2;

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800fe24:	eddf 4a27 	vldr	s9, [pc, #156]	; 800fec4 <tLagrangeDelay_tapOutInterpolated+0xac>
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800fe28:	1a59      	subs	r1, r3, r1
 800fe2a:	6953      	ldr	r3, [r2, #20]
 800fe2c:	6894      	ldr	r4, [r2, #8]
    Lfloat dp1 = alpha+1.0f;
 800fe2e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800fe32:	4419      	add	r1, r3
    alpha = 1.0f - alpha;
 800fe34:	ee77 5ac0 	vsub.f32	s11, s15, s0
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
    Lfloat h2 = -0.5f * (pdp1d * dm2);
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800fe38:	69d3      	ldr	r3, [r2, #28]
    Lfloat dm2 = alpha-2.0f;
 800fe3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800fe3e:	4021      	ands	r1, r4
    Lfloat dp1 = alpha+1.0f;
 800fe40:	ee35 5a40 	vsub.f32	s10, s10, s0
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800fe44:	3b01      	subs	r3, #1
 800fe46:	6852      	ldr	r2, [r2, #4]
    		(d->buff[idx] * h1) +
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800fe48:	1c88      	adds	r0, r1, #2
    Lfloat dm2 = alpha-2.0f;
 800fe4a:	ee37 7a40 	vsub.f32	s14, s14, s0
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800fe4e:	ee30 6a67 	vsub.f32	s12, s0, s15
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800fe52:	440b      	add	r3, r1
    Lfloat pdp1d = dp1*alpha;
 800fe54:	ee65 5a85 	vmul.f32	s11, s11, s10
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800fe58:	4020      	ands	r0, r4
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800fe5a:	4023      	ands	r3, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800fe5c:	ee70 7a27 	vadd.f32	s15, s0, s15
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800fe60:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800fe64:	ee26 6a07 	vmul.f32	s12, s12, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800fe68:	ee65 6aa4 	vmul.f32	s13, s11, s9
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800fe6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800fe70:	ed90 4a00 	vldr	s8, [r0]
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800fe74:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800fe78:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fe7c:	edd3 3a00 	vldr	s7, [r3]
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800fe80:	ee66 6a84 	vmul.f32	s13, s13, s8
    		(d->buff[idx] * h1) +
 800fe84:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800fe88:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800fe8c:	3101      	adds	r1, #1
 800fe8e:	ed93 5a00 	vldr	s10, [r3]
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 800fe92:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
 800fe96:	eee3 6a86 	vfma.f32	s13, s7, s12
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800fe9a:	4021      	ands	r1, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800fe9c:	ee67 7a84 	vmul.f32	s15, s15, s8

}
 800fea0:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 800fea4:	ee27 7a24 	vmul.f32	s14, s14, s9
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800fea8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 800feac:	ee27 7a25 	vmul.f32	s14, s14, s11
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800feb0:	eee5 6a27 	vfma.f32	s13, s10, s15
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800feb4:	edd2 7a00 	vldr	s15, [r2]
 800feb8:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 800febc:	eea7 0a87 	vfma.f32	s0, s15, s14
 800fec0:	4770      	bx	lr
 800fec2:	bf00      	nop
 800fec4:	be2aaaab 	.word	0xbe2aaaab

0800fec8 <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800fec8:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800feca:	6953      	ldr	r3, [r2, #20]
 800fecc:	1a5b      	subs	r3, r3, r1

    d->buff[tap] = value;
 800fece:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800fed2:	3b01      	subs	r3, #1
 800fed4:	4003      	ands	r3, r0
    d->buff[tap] = value;
 800fed6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800feda:	ed82 0a00 	vstr	s0, [r2]
}
 800fede:	4770      	bx	lr

0800fee0 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800fee0:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800fee2:	6953      	ldr	r3, [r2, #20]
 800fee4:	1a5b      	subs	r3, r3, r1

    return (d->buff[tap] += value);
 800fee6:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800feea:	3b01      	subs	r3, #1
 800feec:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
 800feee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fef2:	edd3 7a00 	vldr	s15, [r3]
 800fef6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fefa:	ed83 0a00 	vstr	s0, [r3]
}
 800fefe:	4770      	bx	lr

0800ff00 <tLagrangeDelay_getMaxDelay>:


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
    return d->maxDelay;
 800ff00:	6803      	ldr	r3, [r0, #0]
 800ff02:	ed93 0a07 	vldr	s0, [r3, #28]
}
 800ff06:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800ff0a:	4770      	bx	lr

0800ff0c <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 800ff0c:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 800ff0e:	6804      	ldr	r4, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800ff10:	edd4 7a01 	vldr	s15, [r4, #4]
 800ff14:	6962      	ldr	r2, [r4, #20]
 800ff16:	68a3      	ldr	r3, [r4, #8]
 800ff18:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ff1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ff20:	ed83 0a00 	vstr	s0, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;

    int idx =  (int) d->idx;
 800ff24:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    Lfloat alpha = d->idx - idx;

    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800ff28:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
 800ff2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800ff2e:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    int idx =  (int) d->idx;
 800ff32:	ee17 2a10 	vmov	r2, s14
    Lfloat alpha = d->idx - idx;
 800ff36:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800ff3a:	3001      	adds	r0, #1
                                              d->buff[idx],
                                              d->buff[(idx + 1) % d->maxDelay],
                                              d->buff[(idx + 2) % d->maxDelay],
 800ff3c:	f102 0e02 	add.w	lr, r2, #2
                                              d->buff[(idx + 1) % d->maxDelay],
 800ff40:	f102 0c01 	add.w	ip, r2, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800ff44:	4298      	cmp	r0, r3
 800ff46:	bf08      	it	eq
 800ff48:	2000      	moveq	r0, #0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800ff4a:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800ff4e:	6160      	str	r0, [r4, #20]
 800ff50:	1e58      	subs	r0, r3, #1
 800ff52:	4410      	add	r0, r2
 800ff54:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ff58:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
 800ff5c:	fbbe f2f3 	udiv	r2, lr, r3
 800ff60:	fb03 ee12 	mls	lr, r3, r2, lr
                                              d->buff[(idx + 1) % d->maxDelay],
 800ff64:	fbbc f2f3 	udiv	r2, ip, r3
 800ff68:	fb03 cc12 	mls	ip, r3, r2, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800ff6c:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 800ff70:	fbb0 f2f3 	udiv	r2, r0, r3
 800ff74:	fb03 0012 	mls	r0, r3, r2, r0
 800ff78:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800ff7c:	edde 1a00 	vldr	s3, [lr]
 800ff80:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ff84:	ed9c 1a00 	vldr	s2, [ip]
 800ff88:	ed91 0a00 	vldr	s0, [r1]
 800ff8c:	f003 fe88 	bl	8013ca0 <LEAF_interpolate_hermite_x>
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 800ff90:	edd4 7a05 	vldr	s15, [r4, #20]
 800ff94:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800ff98:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
 800ff9c:	edd4 6a06 	vldr	s13, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800ffa0:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
 800ffa4:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat diff = (d->inPoint - d->idx);
 800ffa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (diff < 0.f) diff += d->maxDelay;
 800ffac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ffb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb4:	d506      	bpl.n	800ffc4 <tTapeDelay_tick+0xb8>
 800ffb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ffba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ffbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc2:	d4f8      	bmi.n	800ffb6 <tTapeDelay_tick+0xaa>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 800ffc4:	edd4 5a07 	vldr	s11, [r4, #28]
 800ffc8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ffcc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ffd0:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800ffd4:	ee36 6a05 	vadd.f32	s12, s12, s10

    d->idx += d->inc;
 800ffd8:	ee77 7a06 	vadd.f32	s15, s14, s12
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 800ffdc:	ed84 6a08 	vstr	s12, [r4, #32]

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 800ffe0:	eef4 7ae6 	vcmpe.f32	s15, s13
    d->idx += d->inc;
 800ffe4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 800ffe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffec:	db08      	blt.n	8010000 <tTapeDelay_tick+0xf4>
 800ffee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fff2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffa:	daf8      	bge.n	800ffee <tTapeDelay_tick+0xe2>
 800fffc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    if (d->lastOut)
        return d->lastOut;
    return 0.0f;
}
 8010000:	bd10      	pop	{r4, pc}
 8010002:	bf00      	nop

08010004 <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
 8010004:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 8010006:	6804      	ldr	r4, [r0, #0]
{
 8010008:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 801000c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010010:	edd4 7a06 	vldr	s15, [r4, #24]
 8010014:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8010018:	f003 fc44 	bl	80138a4 <LEAF_clip>
 801001c:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8010020:	bd10      	pop	{r4, pc}
 8010022:	bf00      	nop

08010024 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 8010024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 8010026:	698f      	ldr	r7, [r1, #24]
{
 8010028:	4606      	mov	r6, r0
 801002a:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 801002c:	2020      	movs	r0, #32
 801002e:	4639      	mov	r1, r7
 8010030:	f003 ff3a 	bl	8013ea8 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 8010034:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 8010038:	4a10      	ldr	r2, [pc, #64]	; (801007c <tCrusher_init+0x58>)
    c->op = 4;
 801003a:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 801003c:	6030      	str	r0, [r6, #0]
 801003e:	4604      	mov	r4, r0
    c->op = 4;
 8010040:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 8010042:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 8010044:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 8010046:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 8010048:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801004a:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 801004c:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801004e:	4629      	mov	r1, r5
 8010050:	f003 ff2a 	bl	8013ea8 <mpool_alloc>
    s->invRatio = 1.0f;
 8010054:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 8010058:	2200      	movs	r2, #0
    s->count = 0;
 801005a:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801005c:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801005e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8010080 <tCrusher_init+0x5c>
    s->mempool = m;
 8010062:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 8010064:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 8010066:	6082      	str	r2, [r0, #8]
    s->count = 0;
 8010068:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801006a:	eddf 7a06 	vldr	s15, [pc, #24]	; 8010084 <tCrusher_init+0x60>
 801006e:	edd4 6a03 	vldr	s13, [r4, #12]
 8010072:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010076:	edc4 7a06 	vstr	s15, [r4, #24]
}
 801007a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801007c:	3951b717 	.word	0x3951b717
 8010080:	3912ccf6 	.word	0x3912ccf6
 8010084:	3e99999a 	.word	0x3e99999a

08010088 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 8010088:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8010104 <tCrusher_tick+0x7c>
 801008c:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8010090:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 8010092:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 8010096:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 8010098:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 801009c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80100a0:	6960      	ldr	r0, [r4, #20]
 80100a2:	05c0      	lsls	r0, r0, #23
 80100a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80100a8:	f003 fbf6 	bl	8013898 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 80100ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80100b0:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 80100b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80100b8:	f003 fbf4 	bl	80138a4 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 80100bc:	edd4 0a04 	vldr	s1, [r4, #16]
 80100c0:	f003 fbd8 	bl	8013874 <LEAF_round>
    _tSampleReducer* s = *sr;
 80100c4:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 80100c6:	68da      	ldr	r2, [r3, #12]
 80100c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80100cc:	ee07 2a10 	vmov	s14, r2
 80100d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80100d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100dc:	dc08      	bgt.n	80100f0 <tCrusher_tick+0x68>
    s->count++;
 80100de:	3201      	adds	r2, #1
    return s->hold;
 80100e0:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 80100e4:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 80100e6:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 80100ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80100ee:	bd10      	pop	{r4, pc}
        s->hold = input;
 80100f0:	2201      	movs	r2, #1
 80100f2:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 80100f6:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 80100f8:	edd4 7a06 	vldr	s15, [r4, #24]
}
 80100fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010100:	bd10      	pop	{r4, pc}
 8010102:	bf00      	nop
 8010104:	459c4000 	.word	0x459c4000

08010108 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
 8010108:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
 801010c:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 801010e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010112:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8010116:	ed83 0a05 	vstr	s0, [r3, #20]
}
 801011a:	4770      	bx	lr

0801011c <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
 801011c:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
 8010120:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010154 <tCrusher_setQuality+0x38>
 8010124:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8010128:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 801012a:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
 801012c:	f003 fbba 	bl	80138a4 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 8010130:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8010158 <tCrusher_setQuality+0x3c>
 8010134:	eddf 7a09 	vldr	s15, [pc, #36]	; 801015c <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 8010138:	eddf 6a09 	vldr	s13, [pc, #36]	; 8010160 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
 801013c:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 8010140:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8010164 <tCrusher_setQuality+0x48>
 8010144:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
 8010148:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 801014c:	ed84 7a06 	vstr	s14, [r4, #24]
}
 8010150:	bd10      	pop	{r4, pc}
 8010152:	bf00      	nop
 8010154:	00000000 	.word	0x00000000
 8010158:	459c4000 	.word	0x459c4000
 801015c:	3c23d70a 	.word	0x3c23d70a
 8010160:	3912ccf6 	.word	0x3912ccf6
 8010164:	3e99999a 	.word	0x3e99999a

08010168 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
 8010168:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
 801016a:	ed83 0a04 	vstr	s0, [r3, #16]
}
 801016e:	4770      	bx	lr

08010170 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 8010170:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
 8010174:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 8010176:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 801017a:	eeb4 0a67 	vcmp.f32	s0, s15
 801017e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010182:	d809      	bhi.n	8010198 <tCrusher_setSamplingRatio+0x28>
 8010184:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801018c:	db04      	blt.n	8010198 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 801018e:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 8010192:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 8010194:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop

0801019c <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
 801019c:	b570      	push	{r4, r5, r6, lr}
 801019e:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
 80101a2:	698d      	ldr	r5, [r1, #24]
{
 80101a4:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 80101a6:	206c      	movs	r0, #108	; 0x6c
 80101a8:	4629      	mov	r1, r5
 80101aa:	f003 fe7d 	bl	8013ea8 <mpool_alloc>
 80101ae:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 80101b0:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 80101b2:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
 80101b6:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 80101b8:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 80101ba:	ed93 8a00 	vldr	s16, [r3]
 80101be:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 80101c2:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80101c6:	f008 fcb1 	bl	8018b2c <expf>
 80101ca:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 80101ce:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80101d2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80101d6:	f008 fca9 	bl	8018b2c <expf>
    c->x_T[0] = 0.0f;
    c->x_T[1] = 0.0f;
    c->y_T[0] = 0.0f;
    c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 80101da:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f;
 80101de:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 80101e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 80101e4:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 80101e6:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f;
 80101e8:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
 80101ea:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
 80101ec:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[1] = 0.0f;
 80101f0:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
 80101f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
 80101f4:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
 80101f6:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
 80101f8:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
 80101fa:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
 80101fc:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 80101fe:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
 8010200:	4905      	ldr	r1, [pc, #20]	; (8010218 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
 8010202:	4b06      	ldr	r3, [pc, #24]	; (801021c <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 8010204:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 8010208:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 801020a:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 801020c:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 801020e:	6223      	str	r3, [r4, #32]
}
 8010210:	ecbd 8b02 	vpop	{d8}
 8010214:	bd70      	pop	{r4, r5, r6, pc}
 8010216:	bf00      	nop
 8010218:	40400000 	.word	0x40400000
 801021c:	3e2aaaab 	.word	0x3e2aaaab

08010220 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
 8010220:	b510      	push	{r4, lr}
 8010222:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 8010226:	6804      	ldr	r4, [r0, #0]
{
 8010228:	eeb0 8a40 	vmov.f32	s16, s0
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 801022c:	f003 fa36 	bl	801369c <fastabsf>
 8010230:	f003 fdd0 	bl	8013dd4 <fasteratodb>
 8010234:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 80102e4 <tCompressor_tick+0xc4>
 8010238:	eef0 0a40 	vmov.f32	s1, s0
 801023c:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80102e8 <tCompressor_tick+0xc8>
 8010240:	f003 fb30 	bl	80138a4 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 8010244:	edd4 7a03 	vldr	s15, [r4, #12]
    

    if (overshoot <= -(c->W))
 8010248:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 801024c:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->y_T[1] = c->y_T[0];
 8010250:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 8010254:	eeb1 7a46 	vneg.f32	s14, s12
    c->y_T[1] = c->y_T[0];
 8010258:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 801025c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010264:	da16      	bge.n	8010294 <tCompressor_tick+0x74>
    {
        out_db = in_db;
        c->isActive = 0;
    }
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8010266:	eeb4 6ae7 	vcmpe.f32	s12, s15
    slope = 1.0f - c->invR; // feed-forward topology;
 801026a:	edd4 5a07 	vldr	s11, [r4, #28]
 801026e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8010272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 8010276:	ee37 7a65 	vsub.f32	s14, s14, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801027a:	dd2f      	ble.n	80102dc <tCompressor_tick+0xbc>
    {
        Lfloat squareit = (overshoot + c->W);
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 801027c:	edd4 5a08 	vldr	s11, [r4, #32]
        Lfloat squareit = (overshoot + c->W);
 8010280:	ee36 6a27 	vadd.f32	s12, s12, s15
    {
 8010284:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 8010286:	ee27 7a25 	vmul.f32	s14, s14, s11
 801028a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801028e:	ee27 7a06 	vmul.f32	s14, s14, s12
    {
 8010292:	e002      	b.n	801029a <tCompressor_tick+0x7a>
 8010294:	2300      	movs	r3, #0
 8010296:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80102e4 <tCompressor_tick+0xc4>
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 801029a:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 801029e:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 80102a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        c->isActive = 0;
 80102a6:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_T[0] = out_db - in_db;
 80102a8:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 80102ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 80102b0:	bf4c      	ite	mi
 80102b2:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 80102b6:	ed94 6a02 	vldrpl	s12, [r4, #8]
 80102ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80102be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102c2:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 80102c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80102ca:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80102ce:	f003 fdaf 	bl	8013e30 <fasterdbtoa>
    return attenuation * in;
}
 80102d2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80102d6:	ecbd 8b02 	vpop	{d8}
 80102da:	bd10      	pop	{r4, pc}
        out_db = in_db + slope * overshoot;
 80102dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102e0:	2301      	movs	r3, #1
 80102e2:	e7da      	b.n	801029a <tCompressor_tick+0x7a>
 80102e4:	00000000 	.word	0x00000000
 80102e8:	c2b40000 	.word	0xc2b40000

080102ec <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
 80102ec:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 80102ee:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
 80102f2:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 80102f4:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 80102f8:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
 80102fc:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 80102fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
 8010302:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
 8010304:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 8010306:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
 8010308:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 801030a:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 801030e:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 8010310:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010314:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010318:	ee07 3a90 	vmov	s15, r3
 801031c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 8010320:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010324:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 8010328:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 801032c:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 8010330:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop

08010338 <tCompressor_setSampleRate>:
    c->tauRelease = fasterexpf(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
 8010338:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
 801033a:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 801033e:	4770      	bx	lr

08010340 <tFeedbackLeveler_init>:
/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, LEAF* const leaf)
{
 8010340:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
 8010342:	4614      	mov	r4, r2
{
 8010344:	4606      	mov	r6, r0
 8010346:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010348:	2018      	movs	r0, #24
{
 801034a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801034e:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
 8010352:	b083      	sub	sp, #12
 8010354:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010358:	4639      	mov	r1, r7
{
 801035a:	eeb0 8a41 	vmov.f32	s16, s2
 801035e:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010362:	f003 fda1 	bl	8013ea8 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010366:	4621      	mov	r1, r4
    p->curr=0.0f;
 8010368:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801036a:	4604      	mov	r4, r0
 801036c:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 801036e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8010372:	3014      	adds	r0, #20
    p->mempool = m;
 8010374:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 8010378:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 801037c:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 801037e:	f7ff faa9 	bl	800f8d4 <tPowerFollower_initToPool>
    p->mode=mode;
 8010382:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 8010384:	ed84 8a02 	vstr	s16, [r4, #8]
}
 8010388:	b003      	add	sp, #12
 801038a:	ecbd 8b02 	vpop	{d8}
 801038e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010390 <tFeedbackLeveler_initToPool>:
{
 8010390:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8010392:	6817      	ldr	r7, [r2, #0]
{
 8010394:	4614      	mov	r4, r2
 8010396:	4606      	mov	r6, r0
 8010398:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801039a:	2018      	movs	r0, #24
 801039c:	4639      	mov	r1, r7
{
 801039e:	ed2d 8b02 	vpush	{d8}
 80103a2:	eef0 8a40 	vmov.f32	s17, s0
 80103a6:	b083      	sub	sp, #12
 80103a8:	eeb0 8a41 	vmov.f32	s16, s2
 80103ac:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80103b0:	f003 fd7a 	bl	8013ea8 <mpool_alloc>
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80103b4:	4621      	mov	r1, r4
    p->curr=0.0f;
 80103b6:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80103b8:	4604      	mov	r4, r0
 80103ba:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80103bc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80103c0:	3014      	adds	r0, #20
    p->mempool = m;
 80103c2:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 80103c6:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 80103ca:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80103cc:	f7ff fa82 	bl	800f8d4 <tPowerFollower_initToPool>
    p->mode=mode;
 80103d0:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 80103d2:	ed84 8a02 	vstr	s16, [r4, #8]
}
 80103d6:	b003      	add	sp, #12
 80103d8:	ecbd 8b02 	vpop	{d8}
 80103dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103de:	bf00      	nop

080103e0 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 80103e0:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 80103e2:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 80103e4:	f104 0014 	add.w	r0, r4, #20
 80103e8:	f7ff fa8e 	bl	800f908 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 80103ec:	6821      	ldr	r1, [r4, #0]
 80103ee:	4620      	mov	r0, r4
}
 80103f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 80103f4:	f003 be1a 	b.w	801402c <mpool_free>

080103f8 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 80103f8:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 80103fa:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80103fe:	4770      	bx	lr

08010400 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 8010400:	6800      	ldr	r0, [r0, #0]
 8010402:	3014      	adds	r0, #20
 8010404:	f7ff ba84 	b.w	800f910 <tPowerFollower_setFactor>

08010408 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 8010408:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 801040a:	60d9      	str	r1, [r3, #12]
}
 801040c:	4770      	bx	lr
 801040e:	bf00      	nop

08010410 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
 8010410:	b510      	push	{r4, lr}
 8010412:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 8010416:	6804      	ldr	r4, [r0, #0]
{
 8010418:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 801041c:	f104 0014 	add.w	r0, r4, #20
 8010420:	f7ff fa88 	bl	800f934 <tPowerFollower_tick>
 8010424:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8010428:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 801042a:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 801042e:	b91b      	cbnz	r3, 8010438 <tFeedbackLeveler_tick+0x28>
 8010430:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010454 <tFeedbackLeveler_tick+0x44>
 8010434:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
 8010438:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801043c:	edd4 6a02 	vldr	s13, [r4, #8]
 8010440:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010444:	ee27 0a88 	vmul.f32	s0, s15, s16
 8010448:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 801044c:	ecbd 8b02 	vpop	{d8}
 8010450:	bd10      	pop	{r4, pc}
 8010452:	bf00      	nop
 8010454:	00000000 	.word	0x00000000

08010458 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 8010458:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 801045a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801045e:	4770      	bx	lr

08010460 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
 8010460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010462:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 8010466:	699e      	ldr	r6, [r3, #24]
{
 8010468:	4614      	mov	r4, r2
 801046a:	4607      	mov	r7, r0
 801046c:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 801046e:	206c      	movs	r0, #108	; 0x6c
 8010470:	4631      	mov	r1, r6
{
 8010472:	eef0 9a40 	vmov.f32	s19, s0
 8010476:	eeb0 9a60 	vmov.f32	s18, s1
 801047a:	eef0 8a61 	vmov.f32	s17, s3
 801047e:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8010482:	f003 fd11 	bl	8013ea8 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010486:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 801048a:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 801048c:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 801048e:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010490:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8010494:	eddf 7a22 	vldr	s15, [pc, #136]	; 8010520 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 8010498:	6873      	ldr	r3, [r6, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
 801049a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 801049e:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80104a0:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80104a4:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->exp_buff = expBuffer;
 80104a8:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 80104aa:	6084      	str	r4, [r0, #8]
    adsr->sustain = sustain;
 80104ac:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
 80104b0:	ed93 5a00 	vldr	s10, [r3]
    adsr->whichStage = env_idle;
 80104b4:	2200      	movs	r2, #0
 80104b6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8010524 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80104ba:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->sampleRate = leaf->sampleRate;
 80104be:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80104c2:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
 80104c6:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
 80104ca:	fec8 1a87 	vmaxnm.f32	s3, s17, s14

    adsr->baseLeakFactor = 1.0f;
 80104ce:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
 80104d2:	ed80 6a19 	vstr	s12, [r0, #100]	; 0x64
    adsr->sustain = sustain;
 80104d6:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
 80104da:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
 80104de:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
 80104e0:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->decay = decay;
 80104e4:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->sustain = sustain;
 80104e8:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->release = release;
 80104ec:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80104f0:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80104f4:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80104f8:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80104fc:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010500:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010504:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010508:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 801050c:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010510:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	6683      	str	r3, [r0, #104]	; 0x68
}
 8010518:	ecbd 8b04 	vpop	{d8-d9}
 801051c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801051e:	bf00      	nop
 8010520:	4479ffff 	.word	0x4479ffff
 8010524:	00000000 	.word	0x00000000

08010528 <tADSRT_setAttack>:
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 8010528:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 801052c:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 801052e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 8010532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 8010536:	bf48      	it	mi
 8010538:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 801054c <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 801053c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 8010540:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010544:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop
 801054c:	3c23d70a 	.word	0x3c23d70a

08010550 <tADSRT_setDecay>:
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 8010550:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010554:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010556:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 801055a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 801055e:	bf48      	it	mi
 8010560:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8010574 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010564:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 8010568:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 801056c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8010570:	4770      	bx	lr
 8010572:	bf00      	nop
 8010574:	3c23d70a 	.word	0x3c23d70a

08010578 <tADSRT_setSustain>:
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8010578:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801057c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8010590 <tADSRT_setSustain+0x18>
    _tADSRT* adsr = *adsrenv;
 8010580:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8010582:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 8010586:	fe80 0a67 	vminnm.f32	s0, s0, s15
 801058a:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
    else                     adsr->sustain = sustain;
}
 801058e:	4770      	bx	lr
 8010590:	00000000 	.word	0x00000000

08010594 <tADSRT_setRelease>:
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 8010594:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010598:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 801059a:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 801059e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 80105a2:	bf48      	it	mi
 80105a4:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 80105b8 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80105a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 80105ac:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80105b0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	3c23d70a 	.word	0x3c23d70a

080105bc <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
 80105bc:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 80105be:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 80105c0:	eddf 7a06 	vldr	s15, [pc, #24]	; 80105dc <tADSRT_setLeakFactor+0x20>
 80105c4:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
 80105c8:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 80105cc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80105d0:	f008 fd26 	bl	8019020 <powf>
 80105d4:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
 80105d8:	bd10      	pop	{r4, pc}
 80105da:	bf00      	nop
 80105dc:	472c4400 	.word	0x472c4400

080105e0 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
 80105e0:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 80105e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80105e4:	b162      	cbz	r2, 8010600 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 80105e6:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 80105e8:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 80105ea:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 80105ec:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
 80105ee:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 80105f0:	2200      	movs	r2, #0
 80105f2:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 80105f4:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
 80105f8:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
 80105fa:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
 80105fc:	659a      	str	r2, [r3, #88]	; 0x58
}
 80105fe:	4770      	bx	lr
        adsr->whichStage = env_attack;
 8010600:	2101      	movs	r1, #1
 8010602:	e7f5      	b.n	80105f0 <tADSRT_on+0x10>

08010604 <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010604:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 8010606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010608:	b11a      	cbz	r2, 8010612 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 801060a:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 801060c:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 801060e:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
 8010610:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
 8010612:	4770      	bx	lr

08010614 <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010614:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
 8010616:	2100      	movs	r1, #0
    adsr->next = 0.0f;
 8010618:	2200      	movs	r2, #0
    adsr->whichStage = env_idle;
 801061a:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
 801061c:	619a      	str	r2, [r3, #24]
}
 801061e:	4770      	bx	lr

08010620 <tADSRT_tick>:
#ifdef ITCMRAM
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
 8010620:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8010622:	6804      	ldr	r4, [r0, #0]
{
 8010624:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 8010628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801062a:	3b01      	subs	r3, #1
 801062c:	2b04      	cmp	r3, #4
 801062e:	f200 8154 	bhi.w	80108da <tADSRT_tick+0x2ba>
 8010632:	e8df f003 	tbb	[pc, r3]
 8010636:	4d1f      	.short	0x4d1f
 8010638:	6f3a      	.short	0x6f3a
 801063a:	03          	.byte	0x03
 801063b:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 801063c:	edd4 7a03 	vldr	s15, [r4, #12]
 8010640:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
 8010644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010648:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801064c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010650:	dd7d      	ble.n	801074e <tADSRT_tick+0x12e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 8010652:	eddf 7aa3 	vldr	s15, [pc, #652]	; 80108e0 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
 8010656:	2301      	movs	r3, #1
 8010658:	eeb0 0a67 	vmov.f32	s0, s15
 801065c:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 801065e:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 8010662:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8010666:	ee77 7a81 	vadd.f32	s15, s15, s2
 801066a:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 801066e:	ecbd 8b02 	vpop	{d8}
 8010672:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8010674:	edd4 7a03 	vldr	s15, [r4, #12]
 8010678:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 801067c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010680:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010688:	f340 808b 	ble.w	80107a2 <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
 801068c:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 801068e:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
 8010692:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
 8010694:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 8010698:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801069c:	ee77 7a81 	vadd.f32	s15, s15, s2
 80106a0:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
 80106a4:	ecbd 8b02 	vpop	{d8}
 80106a8:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
 80106aa:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80106ae:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 80106b2:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 80106b6:	ee20 0a26 	vmul.f32	s0, s0, s13
 80106ba:	edd4 7a07 	vldr	s15, [r4, #28]
 80106be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80106c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80106c6:	ed84 0a06 	vstr	s0, [r4, #24]
}
 80106ca:	ecbd 8b02 	vpop	{d8}
 80106ce:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 80106d0:	edd4 7a03 	vldr	s15, [r4, #12]
 80106d4:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 80106d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80106dc:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80106e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106e4:	f340 808b 	ble.w	80107fe <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
 80106e8:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 80106ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 80106f0:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 80106f4:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
 80106f6:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
 80106f8:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 80106fc:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 80106fe:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 8010702:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8010706:	ee77 7a81 	vadd.f32	s15, s15, s2
 801070a:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 801070e:	ecbd 8b02 	vpop	{d8}
 8010712:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8010714:	edd4 7a03 	vldr	s15, [r4, #12]
 8010718:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 801071c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010720:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010728:	f340 809e 	ble.w	8010868 <tADSRT_tick+0x248>
                adsr->next = 0.0f;
 801072c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80108e0 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
 8010730:	2300      	movs	r3, #0
 8010732:	eeb0 0a67 	vmov.f32	s0, s15
 8010736:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 8010738:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 801073c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010740:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010744:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
}
 8010748:	ecbd 8b02 	vpop	{d8}
 801074c:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 801074e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 8010752:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010756:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 801075a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 801075e:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 8010762:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801076a:	f100 80b2 	bmi.w	80108d2 <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 801076e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010772:	6862      	ldr	r2, [r4, #4]
 8010774:	ee17 3a90 	vmov	r3, s15
 8010778:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801077c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 8010780:	ee16 3a90 	vmov	r3, s13
 8010784:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 8010788:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801078c:	ed92 0a00 	vldr	s0, [r2]
 8010790:	f003 faa8 	bl	8013ce4 <LEAF_interpolation_linear>
 8010794:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 8010798:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 801079c:	ed84 0a06 	vstr	s0, [r4, #24]
 80107a0:	e75f      	b.n	8010662 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80107a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 80107a6:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80107aa:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 80107ae:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80107b2:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 80107b6:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80107ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107be:	f100 8084 	bmi.w	80108ca <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 80107c2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80107c6:	6862      	ldr	r2, [r4, #4]
 80107c8:	ee17 3a90 	vmov	r3, s15
 80107cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80107d0:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 80107d4:	ee16 3a90 	vmov	r3, s13
 80107d8:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 80107dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80107e0:	ed92 0a00 	vldr	s0, [r2]
 80107e4:	f003 fa7e 	bl	8013ce4 <LEAF_interpolation_linear>
 80107e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 80107ec:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 80107f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80107f4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80107f8:	ed84 0a06 	vstr	s0, [r4, #24]
 80107fc:	e74c      	b.n	8010698 <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 80107fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 8010802:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010806:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 801080a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 801080e:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 8010812:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801081a:	d452      	bmi.n	80108c2 <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 801081c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010820:	6862      	ldr	r2, [r4, #4]
 8010822:	ee17 3a90 	vmov	r3, s15
 8010826:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801082a:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
 801082e:	ee16 3a90 	vmov	r3, s13
 8010832:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010836:	ed92 0a00 	vldr	s0, [r2]
 801083a:	f003 fa53 	bl	8013ce4 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 801083e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010842:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8010846:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 801084a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801084e:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
 8010852:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8010856:	ee67 7a86 	vmul.f32	s15, s15, s12
 801085a:	eea6 7a80 	vfma.f32	s14, s13, s0
 801085e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010862:	ed84 0a06 	vstr	s0, [r4, #24]
 8010866:	e74c      	b.n	8010702 <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 801086c:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010870:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 8010874:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010878:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 801087c:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010884:	d419      	bmi.n	80108ba <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 8010886:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801088a:	6862      	ldr	r2, [r4, #4]
 801088c:	ee17 3a90 	vmov	r3, s15
 8010890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010894:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 8010898:	ee16 3a90 	vmov	r3, s13
 801089c:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 80108a0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80108a4:	ed92 0a00 	vldr	s0, [r2]
 80108a8:	f003 fa1c 	bl	8013ce4 <LEAF_interpolation_linear>
 80108ac:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 80108b0:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 80108b4:	ed84 0a06 	vstr	s0, [r4, #24]
 80108b8:	e740      	b.n	801073c <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 80108ba:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 80108bc:	eddf 0a08 	vldr	s1, [pc, #32]	; 80108e0 <tADSRT_tick+0x2c0>
 80108c0:	e7ea      	b.n	8010898 <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 80108c2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 80108c4:	eddf 0a06 	vldr	s1, [pc, #24]	; 80108e0 <tADSRT_tick+0x2c0>
 80108c8:	e7b1      	b.n	801082e <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 80108ca:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 80108cc:	eddf 0a04 	vldr	s1, [pc, #16]	; 80108e0 <tADSRT_tick+0x2c0>
 80108d0:	e780      	b.n	80107d4 <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 80108d2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 80108d4:	eddf 0a02 	vldr	s1, [pc, #8]	; 80108e0 <tADSRT_tick+0x2c0>
 80108d8:	e752      	b.n	8010780 <tADSRT_tick+0x160>
    return adsr->next;
 80108da:	ed94 0a06 	vldr	s0, [r4, #24]
 80108de:	e6c6      	b.n	801066e <tADSRT_tick+0x4e>
 80108e0:	00000000 	.word	0x00000000

080108e4 <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 80108e4:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 80108e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80108e8:	3a01      	subs	r2, #1
 80108ea:	2a04      	cmp	r2, #4
 80108ec:	f200 80c7 	bhi.w	8010a7e <tADSRT_tickNoInterp+0x19a>
 80108f0:	e8df f002 	tbb	[pc, r2]
 80108f4:	6533461b 	.word	0x6533461b
 80108f8:	03          	.byte	0x03
 80108f9:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 80108fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80108fe:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8010902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801090e:	dd6e      	ble.n	80109ee <tADSRT_tickNoInterp+0x10a>
            {
                adsr->whichStage = env_attack;
 8010910:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 8010912:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8010a84 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
 8010916:	63da      	str	r2, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 8010918:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 801091c:	ed83 0a06 	vstr	s0, [r3, #24]
 8010920:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010924:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
 8010928:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 801092a:	edd3 7a03 	vldr	s15, [r3, #12]
 801092e:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8010932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010936:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801093e:	dd64      	ble.n	8010a0a <tADSRT_tickNoInterp+0x126>
            {
                adsr->whichStage = env_decay;
 8010940:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 8010942:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
 8010946:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 8010948:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 801094c:	ed83 0a06 	vstr	s0, [r3, #24]
 8010950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010954:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 8010958:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
 801095a:	edd3 7a07 	vldr	s15, [r3, #28]
 801095e:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 8010962:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 8010966:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
 801096a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 801096e:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
 8010972:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 8010976:	ee20 0a27 	vmul.f32	s0, s0, s15
 801097a:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 801097e:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8010980:	edd3 7a03 	vldr	s15, [r3, #12]
 8010984:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8010988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801098c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010994:	dd4b      	ble.n	8010a2e <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
 8010996:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 801099a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 801099e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 80109a2:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
 80109a4:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
 80109a6:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 80109aa:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
 80109ac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80109b0:	ed83 0a06 	vstr	s0, [r3, #24]
 80109b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109b8:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
 80109bc:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 80109be:	edd3 7a03 	vldr	s15, [r3, #12]
 80109c2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80109c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d2:	dd46      	ble.n	8010a62 <tADSRT_tickNoInterp+0x17e>
            {
                adsr->whichStage = env_idle;
 80109d4:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 80109d6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8010a84 <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
 80109da:	63da      	str	r2, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 80109dc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80109e0:	ed83 0a06 	vstr	s0, [r3, #24]
 80109e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80109e8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
 80109ec:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 80109ee:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 80109f2:	685a      	ldr	r2, [r3, #4]
 80109f4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80109f8:	ee16 1a90 	vmov	r1, s13
 80109fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010a00:	ed92 0a00 	vldr	s0, [r2]
 8010a04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a08:	e786      	b.n	8010918 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 8010a0a:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8010a0e:	685a      	ldr	r2, [r3, #4]
 8010a10:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010a14:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8010a18:	ee16 1a90 	vmov	r1, s13
 8010a1c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010a20:	edd2 6a00 	vldr	s13, [r2]
 8010a24:	ee30 0a66 	vsub.f32	s0, s0, s13
 8010a28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a2c:	e78c      	b.n	8010948 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 8010a2e:	eefc 5ac7 	vcvt.u32.f32	s11, s14
 8010a32:	685a      	ldr	r2, [r3, #4]
 8010a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a38:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8010a3c:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
 8010a40:	ee15 1a90 	vmov	r1, s11
 8010a44:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8010a48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010a4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010a50:	ee20 0a06 	vmul.f32	s0, s0, s12
 8010a54:	ed92 6a00 	vldr	s12, [r2]
 8010a58:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010a5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a60:	e7a4      	b.n	80109ac <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 8010a62:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8010a66:	685a      	ldr	r2, [r3, #4]
 8010a68:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8010a6c:	ee16 1a90 	vmov	r1, s13
 8010a70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010a74:	ed92 0a00 	vldr	s0, [r2]
 8010a78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010a7c:	e7ae      	b.n	80109dc <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
 8010a7e:	ed93 0a06 	vldr	s0, [r3, #24]
 8010a82:	4770      	bx	lr
 8010a84:	00000000 	.word	0x00000000

08010a88 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 8010a8e:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8010a90:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010a92:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8010a94:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010a98:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8010a9a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010a9e:	f003 fa03 	bl	8013ea8 <mpool_alloc>
 8010aa2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010aa6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8010adc <tExpSmooth_init+0x54>
 8010aaa:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 8010aac:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 8010ab0:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 8010ab4:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8010ab8:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 8010aba:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 8010abe:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 8010ac2:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 8010ac6:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 8010aca:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8010ace:	6863      	ldr	r3, [r4, #4]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	6183      	str	r3, [r0, #24]
}
 8010ad4:	ecbd 8b02 	vpop	{d8}
 8010ad8:	bd38      	pop	{r3, r4, r5, pc}
 8010ada:	bf00      	nop
 8010adc:	00000000 	.word	0x00000000

08010ae0 <tExpSmooth_initToPool>:
{
 8010ae0:	b538      	push	{r3, r4, r5, lr}
 8010ae2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8010ae6:	680c      	ldr	r4, [r1, #0]
{
 8010ae8:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010aea:	201c      	movs	r0, #28
{
 8010aec:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010af0:	4621      	mov	r1, r4
{
 8010af2:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8010af6:	f003 f9d7 	bl	8013ea8 <mpool_alloc>
 8010afa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010afe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8010b34 <tExpSmooth_initToPool+0x54>
 8010b02:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 8010b04:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 8010b08:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
 8010b0c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8010b10:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 8010b12:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 8010b16:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 8010b1a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 8010b1e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 8010b22:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8010b26:	6863      	ldr	r3, [r4, #4]
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	6183      	str	r3, [r0, #24]
}
 8010b2c:	ecbd 8b02 	vpop	{d8}
 8010b30:	bd38      	pop	{r3, r4, r5, pc}
 8010b32:	bf00      	nop
 8010b34:	00000000 	.word	0x00000000

08010b38 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8010b38:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
 8010b3a:	6801      	ldr	r1, [r0, #0]
 8010b3c:	f003 ba76 	b.w	801402c <mpool_free>

08010b40 <tExpSmooth_setFactor>:
}

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8010b40:	b510      	push	{r4, lr}
 8010b42:	ed2d 8b02 	vpush	{d8}
 8010b46:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tExpSmooth* smooth = *expsmooth;
 8010b4a:	6804      	ldr	r4, [r0, #0]
    
    if (factor < 0.0f)
 8010b4c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8010b84 <tExpSmooth_setFactor+0x44>
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
 8010b50:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8010b88 <tExpSmooth_setFactor+0x48>
 8010b54:	fe80 8a68 	vminnm.f32	s16, s0, s17
 8010b58:	edd4 0a06 	vldr	s1, [r4, #24]
 8010b5c:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    smooth->oneminusfactor = 1.0f - factor;
 8010b60:	ee78 8ac8 	vsub.f32	s17, s17, s16
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
 8010b64:	eeb0 0a48 	vmov.f32	s0, s16
    smooth->baseFactor = factor;
 8010b68:	ed84 8a01 	vstr	s16, [r4, #4]
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
 8010b6c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010b70:	f008 fa56 	bl	8019020 <powf>
    smooth->oneminusfactor = 1.0f - factor;
 8010b74:	edc4 8a03 	vstr	s17, [r4, #12]
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
 8010b78:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8010b7c:	ecbd 8b02 	vpop	{d8}
 8010b80:	bd10      	pop	{r4, pc}
 8010b82:	bf00      	nop
 8010b84:	00000000 	.word	0x00000000
 8010b88:	472c4400 	.word	0x472c4400

08010b8c <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 8010b8c:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 8010b8e:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8010b92:	4770      	bx	lr

08010b94 <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 8010b94:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 8010b96:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8010b9a:	4770      	bx	lr

08010b9c <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 8010b9c:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 8010b9e:	ed83 0a04 	vstr	s0, [r3, #16]
    smooth->dest=val;
 8010ba2:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8010ba6:	4770      	bx	lr

08010ba8 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 8010ba8:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 8010baa:	edd3 6a04 	vldr	s13, [r3, #16]
 8010bae:	ed93 0a03 	vldr	s0, [r3, #12]
 8010bb2:	ed93 7a02 	vldr	s14, [r3, #8]
 8010bb6:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010bba:	edd3 7a05 	vldr	s15, [r3, #20]
 8010bbe:	eea7 0a27 	vfma.f32	s0, s14, s15
 8010bc2:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 8010bc6:	4770      	bx	lr

08010bc8 <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
 8010bc8:	b538      	push	{r3, r4, r5, lr}
 8010bca:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8010bce:	680d      	ldr	r5, [r1, #0]
{
 8010bd0:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8010bd2:	201c      	movs	r0, #28
{
 8010bd4:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8010bd8:	4629      	mov	r1, r5
{
 8010bda:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8010bde:	f003 f963 	bl	8013ea8 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8010be2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8010be6:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8010be8:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8010bea:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8010bec:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8010bf0:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8010bf4:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8010bf8:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8010bfa:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8010bfc:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8010bfe:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8010c00:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8010c04:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8010c08:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8010c0c:	ecbd 8b02 	vpop	{d8}
 8010c10:	bd38      	pop	{r3, r4, r5, pc}
 8010c12:	bf00      	nop

08010c14 <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
 8010c14:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
 8010c16:	6801      	ldr	r1, [r0, #0]
 8010c18:	f003 ba08 	b.w	801402c <mpool_free>

08010c1c <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
 8010c1c:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
 8010c1e:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8010c22:	4770      	bx	lr

08010c24 <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
 8010c24:	6803      	ldr	r3, [r0, #0]
    Lfloat in = s->dest;

    if (in >= s->prevOut)
 8010c26:	ed93 0a01 	vldr	s0, [r3, #4]
    Lfloat in = s->dest;
 8010c2a:	edd3 7a06 	vldr	s15, [r3, #24]
    if (in >= s->prevOut)
 8010c2e:	eeb4 0ae7 	vcmpe.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 8010c32:	edc3 7a03 	vstr	s15, [r3, #12]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8010c36:	ee77 6ac0 	vsub.f32	s13, s15, s0
    if (in >= s->prevOut)
 8010c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8010c3e:	bf94      	ite	ls
 8010c40:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8010c44:	ed93 7a05 	vldrhi	s14, [r3, #20]
 8010c48:	eea6 0a87 	vfma.f32	s0, s13, s14
 8010c4c:	ed83 0a02 	vstr	s0, [r3, #8]
    s->prevOut = s->currentOut;
 8010c50:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 8010c54:	4770      	bx	lr
 8010c56:	bf00      	nop

08010c58 <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
 8010c58:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 8010c5a:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 8010c5e:	ed83 0a03 	vstr	s0, [r3, #12]
    if (in >= s->prevOut)
 8010c62:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8010c66:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
 8010c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8010c6e:	bf94      	ite	ls
 8010c70:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8010c74:	ed93 7a05 	vldrhi	s14, [r3, #20]
 8010c78:	eee6 7a87 	vfma.f32	s15, s13, s14
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 8010c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8010c80:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8010c84:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop

08010c8c <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
 8010c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c90:	460f      	mov	r7, r1
 8010c92:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 8010c94:	6811      	ldr	r1, [r2, #0]
{
 8010c96:	4604      	mov	r4, r0
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 8010c98:	2058      	movs	r0, #88	; 0x58
{
 8010c9a:	4690      	mov	r8, r2
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 8010c9c:	9101      	str	r1, [sp, #4]
 8010c9e:	f003 f903 	bl	8013ea8 <mpool_alloc>
    f->mempool = m;
    f->numFilts = numFilts;
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 8010ca2:	9901      	ldr	r1, [sp, #4]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 8010ca4:	4606      	mov	r6, r0
 8010ca6:	6020      	str	r0, [r4, #0]
    f->k3[1] = -2.9018f;
    f->C1[1] = 0.071089f;
    f->C2[1] = 2.1074f;
    f->isHigh = 0;
    f->numFiltsMap[0] = numFilts;
    f->numFiltsMap[1] = 1;
 8010ca8:	2400      	movs	r4, #0
    f->numFilts = numFilts;
 8010caa:	e9c0 1700 	strd	r1, r7, [r0]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 8010cae:	00b8      	lsls	r0, r7, #2
 8010cb0:	f003 f95e 	bl	8013f70 <mpool_calloc>
    f->k1[0] = -0.00050469f;
 8010cb4:	4b1a      	ldr	r3, [pc, #104]	; (8010d20 <tThiranAllpassSOCascade_initToPool+0x94>)
    f->numActiveFilters = numFilts;
    for (int i = 0; i < numFilts; i++)
 8010cb6:	42a7      	cmp	r7, r4
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 8010cb8:	60b0      	str	r0, [r6, #8]
    f->k1[0] = -0.00050469f;
 8010cba:	61f3      	str	r3, [r6, #28]
    f->k2[0] = -0.0064264f;
 8010cbc:	4b19      	ldr	r3, [pc, #100]	; (8010d24 <tThiranAllpassSOCascade_initToPool+0x98>)
 8010cbe:	6273      	str	r3, [r6, #36]	; 0x24
    f->k3[0] = -2.8743f;
 8010cc0:	4b19      	ldr	r3, [pc, #100]	; (8010d28 <tThiranAllpassSOCascade_initToPool+0x9c>)
 8010cc2:	62f3      	str	r3, [r6, #44]	; 0x2c
    f->C1[0] = 0.069618f;
 8010cc4:	4b19      	ldr	r3, [pc, #100]	; (8010d2c <tThiranAllpassSOCascade_initToPool+0xa0>)
 8010cc6:	6373      	str	r3, [r6, #52]	; 0x34
    f->C2[0] = 2.0427f;
 8010cc8:	4b19      	ldr	r3, [pc, #100]	; (8010d30 <tThiranAllpassSOCascade_initToPool+0xa4>)
 8010cca:	63f3      	str	r3, [r6, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
 8010ccc:	4b19      	ldr	r3, [pc, #100]	; (8010d34 <tThiranAllpassSOCascade_initToPool+0xa8>)
 8010cce:	6233      	str	r3, [r6, #32]
    f->k2[1] = -0.014811f;
 8010cd0:	4b19      	ldr	r3, [pc, #100]	; (8010d38 <tThiranAllpassSOCascade_initToPool+0xac>)
 8010cd2:	62b3      	str	r3, [r6, #40]	; 0x28
    f->k3[1] = -2.9018f;
 8010cd4:	4b19      	ldr	r3, [pc, #100]	; (8010d3c <tThiranAllpassSOCascade_initToPool+0xb0>)
 8010cd6:	6333      	str	r3, [r6, #48]	; 0x30
    f->C1[1] = 0.071089f;
 8010cd8:	4b19      	ldr	r3, [pc, #100]	; (8010d40 <tThiranAllpassSOCascade_initToPool+0xb4>)
 8010cda:	63b3      	str	r3, [r6, #56]	; 0x38
    f->C2[1] = 2.1074f;
 8010cdc:	4b19      	ldr	r3, [pc, #100]	; (8010d44 <tThiranAllpassSOCascade_initToPool+0xb8>)
 8010cde:	6433      	str	r3, [r6, #64]	; 0x40
    f->numFiltsMap[1] = 1;
 8010ce0:	f04f 0301 	mov.w	r3, #1
    f->numActiveFilters = numFilts;
 8010ce4:	e9c6 7711 	strd	r7, r7, [r6, #68]	; 0x44
    f->numFiltsMap[1] = 1;
 8010ce8:	e9c6 3413 	strd	r3, r4, [r6, #76]	; 0x4c
    for (int i = 0; i < numFilts; i++)
 8010cec:	dd15      	ble.n	8010d1a <tThiranAllpassSOCascade_initToPool+0x8e>
 8010cee:	4682      	mov	sl, r0
    f->prevSamp = 0.0f;
 8010cf0:	2500      	movs	r5, #0
 8010cf2:	e001      	b.n	8010cf8 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
 8010cf4:	f8d6 a008 	ldr.w	sl, [r6, #8]
    _tMempool* m = *mp;
 8010cf8:	f8d8 9000 	ldr.w	r9, [r8]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
 8010cfc:	201c      	movs	r0, #28
 8010cfe:	4649      	mov	r1, r9
 8010d00:	f003 f8d2 	bl	8013ea8 <mpool_alloc>
 8010d04:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    for (int i = 0; i < numFilts; i++)
 8010d08:	3401      	adds	r4, #1
    f->mempool = m;
 8010d0a:	f8c0 9000 	str.w	r9, [r0]
    f->prevSamp = 0.0f;
 8010d0e:	6045      	str	r5, [r0, #4]
    for (int i = 0; i < numFilts; i++)
 8010d10:	42a7      	cmp	r7, r4
    f->prevPrevSamp = 0.0f;
 8010d12:	6085      	str	r5, [r0, #8]
    f->a1 = 0.0f;
 8010d14:	6145      	str	r5, [r0, #20]
    f->a2 = 0.0f;
 8010d16:	6185      	str	r5, [r0, #24]
    for (int i = 0; i < numFilts; i++)
 8010d18:	d1ec      	bne.n	8010cf4 <tThiranAllpassSOCascade_initToPool+0x68>
    }
}
 8010d1a:	b002      	add	sp, #8
 8010d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d20:	ba044d2c 	.word	0xba044d2c
 8010d24:	bbd2948d 	.word	0xbbd2948d
 8010d28:	c037f488 	.word	0xc037f488
 8010d2c:	3d8e93e2 	.word	0x3d8e93e2
 8010d30:	4002bb99 	.word	0x4002bb99
 8010d34:	bb2e31d7 	.word	0xbb2e31d7
 8010d38:	bc72a9d6 	.word	0xbc72a9d6
 8010d3c:	c039b717 	.word	0xc039b717
 8010d40:	3d91971c 	.word	0x3d91971c
 8010d44:	4006dfa4 	.word	0x4006dfa4

08010d48 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
 8010d48:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 8010d4a:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 8010d4c:	686b      	ldr	r3, [r5, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	dd0a      	ble.n	8010d68 <tThiranAllpassSOCascade_free+0x20>
 8010d52:	2400      	movs	r4, #0
    _tAllpassSO* f = *ft;
 8010d54:	68ab      	ldr	r3, [r5, #8]
 8010d56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 8010d5a:	3401      	adds	r4, #1
    mpool_free((char*)f, f->mempool);
 8010d5c:	6801      	ldr	r1, [r0, #0]
 8010d5e:	f003 f965 	bl	801402c <mpool_free>
    for (int i = 0; i < f->numFilts; i++)
 8010d62:	686b      	ldr	r3, [r5, #4]
 8010d64:	42a3      	cmp	r3, r4
 8010d66:	dcf5      	bgt.n	8010d54 <tThiranAllpassSOCascade_free+0xc>
    {
        tAllpassSO_free(&f->filters[i]);
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
 8010d68:	6829      	ldr	r1, [r5, #0]
 8010d6a:	68a8      	ldr	r0, [r5, #8]
 8010d6c:	f003 f95e 	bl	801402c <mpool_free>
    mpool_free((char*)f, f->mempool);
 8010d70:	6829      	ldr	r1, [r5, #0]
 8010d72:	4628      	mov	r0, r5
}
 8010d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)f, f->mempool);
 8010d78:	f003 b958 	b.w	801402c <mpool_free>

08010d7c <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
 8010d7c:	eef0 7a40 	vmov.f32	s15, s0
 8010d80:	b510      	push	{r4, lr}
 8010d82:	ed2d 8b08 	vpush	{d8-d11}
    _tThiranAllpassSOCascade* f = *ft;

    f->B = dispersionCoeff;
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010d86:	eddf 9a68 	vldr	s19, [pc, #416]	; 8010f28 <tThiranAllpassSOCascade_setCoeff+0x1ac>
 8010d8a:	eeb2 9a08 	vmov.f32	s18, #40	; 0x41400000  12.0
    _tThiranAllpassSOCascade* f = *ft;
 8010d8e:	6804      	ldr	r4, [r0, #0]
{
 8010d90:	eef0 8a60 	vmov.f32	s17, s1
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010d94:	ee20 0aa9 	vmul.f32	s0, s1, s19
    f->B = dispersionCoeff;
 8010d98:	edc4 7a03 	vstr	s15, [r4, #12]
{
 8010d9c:	eeb0 8a41 	vmov.f32	s16, s2
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010da0:	f007 ffa0 	bl	8018ce4 <log2f>
 8010da4:	eddf 7a61 	vldr	s15, [pc, #388]	; 8010f2c <tThiranAllpassSOCascade_setCoeff+0x1b0>
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 8010da8:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010dac:	eee0 7a09 	vfma.f32	s15, s0, s18
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 8010db0:	ee28 8a29 	vmul.f32	s16, s16, s19
 8010db4:	ee28 0a28 	vmul.f32	s0, s16, s17
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 8010db8:	edc4 7a04 	vstr	s15, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 8010dbc:	f007 ff92 	bl	8018ce4 <log2f>
 8010dc0:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 8010dc4:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8010f30 <tThiranAllpassSOCascade_setCoeff+0x1b4>
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 8010dc8:	eeb0 1a4b 	vmov.f32	s2, s22
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 8010dcc:	eddf 7a59 	vldr	s15, [pc, #356]	; 8010f34 <tThiranAllpassSOCascade_setCoeff+0x1b8>
 8010dd0:	eee7 0a09 	vfma.f32	s1, s14, s18
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 8010dd4:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8010f38 <tThiranAllpassSOCascade_setCoeff+0x1bc>
 8010dd8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010ddc:	f002 fd62 	bl	80138a4 <LEAF_clip>

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8010de0:	edd4 aa08 	vldr	s21, [r4, #32]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 8010de4:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 8010de8:	ee7b 7a40 	vsub.f32	s15, s22, s0
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8010dec:	ee60 aa2a 	vmul.f32	s21, s0, s21
 8010df0:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 8010df4:	ee60 8a28 	vmul.f32	s17, s0, s17
 8010df8:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8010dfc:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8010e00:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8010e04:	eee6 aaa7 	vfma.f32	s21, s13, s15
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 8010e08:	eee7 8a27 	vfma.f32	s17, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8010e0c:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8010e10:	ee20 aa0a 	vmul.f32	s20, s0, s20
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8010e14:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8010e18:	ee20 8a06 	vmul.f32	s16, s0, s12
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8010e1c:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8010e20:	ee60 9a29 	vmul.f32	s19, s0, s19
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8010e24:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8010e28:	eea6 aa27 	vfma.f32	s20, s12, s15
    Lfloat logB = logf(f->B);
 8010e2c:	ed94 0a03 	vldr	s0, [r4, #12]
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8010e30:	eea7 8a27 	vfma.f32	s16, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8010e34:	eee6 9aa7 	vfma.f32	s19, s13, s15
    Lfloat logB = logf(f->B);
 8010e38:	f007 feee 	bl	8018c18 <logf>
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
 8010e3c:	eeea 8a80 	vfma.f32	s17, s21, s0
    Lfloat logB = logf(f->B);
 8010e40:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat kd = fastExp3(temp);
 8010e44:	eeb0 0a4a 	vmov.f32	s0, s20
 8010e48:	eea8 0a89 	vfma.f32	s0, s17, s18
 8010e4c:	f002 fc48 	bl	80136e0 <fastExp3>
 8010e50:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 8010e54:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat kd = fastExp3(temp);
 8010e58:	eeb0 8a67 	vmov.f32	s16, s15
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 8010e5c:	eea9 0a89 	vfma.f32	s0, s19, s18
 8010e60:	f002 fc3e 	bl	80136e0 <fastExp3>
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
 8010e64:	edd4 7a04 	vldr	s15, [r4, #16]
 8010e68:	eea7 0ac8 	vfms.f32	s0, s15, s16
 8010e6c:	f002 fc38 	bl	80136e0 <fastExp3>
    f->D = D;

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
 8010e70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010e74:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
	a_k *= D;
	a_k /= (D + 2.0f);

	f->a[1] = a_k;

	if (f->a[0] > 0.99f)
 8010e78:	eddf 5a30 	vldr	s11, [pc, #192]	; 8010f3c <tThiranAllpassSOCascade_setCoeff+0x1c0>
	a_k /= (D - 1.0f);
 8010e7c:	ee70 7a4b 	vsub.f32	s15, s0, s22
    f->D = D;
 8010e80:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
	a_k *= (D - 2.0f);
 8010e84:	ee70 4a47 	vsub.f32	s9, s0, s14
	a_k /= (D + 1.0f);
 8010e88:	ee30 5a0b 	vadd.f32	s10, s0, s22
	a_k /= (D + 2.0f);
 8010e8c:	ee30 7a07 	vadd.f32	s14, s0, s14
	a_k *= (D - 2.0f);
 8010e90:	ee24 6aa6 	vmul.f32	s12, s9, s13
	a_k /= D;
 8010e94:	eec4 6a80 	vdiv.f32	s13, s9, s0
	a_k /= (D - 1.0f);
 8010e98:	eec6 4a27 	vdiv.f32	s9, s12, s15
	a_k *= (D - 1.0f);
 8010e9c:	ee67 6aa6 	vmul.f32	s13, s15, s13
	a_k /= (D + 1.0f);
 8010ea0:	ee86 6a85 	vdiv.f32	s12, s13, s10
	a_k *= (D - 1.0f);
 8010ea4:	ee67 7aa4 	vmul.f32	s15, s15, s9
	a_k /= D;
 8010ea8:	eec7 6a80 	vdiv.f32	s13, s15, s0
	a_k *= D;
 8010eac:	ee60 7a06 	vmul.f32	s15, s0, s12
	a_k /= (D + 2.0f);
 8010eb0:	ee87 6a87 	vdiv.f32	s12, s15, s14
	a_k *= D;
 8010eb4:	ee60 6a26 	vmul.f32	s13, s0, s13
	a_k /= (D + 1.0f);
 8010eb8:	eec6 7a85 	vdiv.f32	s15, s13, s10
	f->a[1] = a_k;
 8010ebc:	ed84 6a06 	vstr	s12, [r4, #24]
	if (f->a[0] > 0.99f)
 8010ec0:	eef4 7ae5 	vcmpe.f32	s15, s11
	f->a[0] = a_k;
 8010ec4:	edc4 7a05 	vstr	s15, [r4, #20]
	if (f->a[0] > 0.99f)
 8010ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ecc:	dd0b      	ble.n	8010ee6 <tThiranAllpassSOCascade_setCoeff+0x16a>
	{
		f->a[0] = 0.99f;
		f->a[1] = 0.01f;
 8010ece:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8010f40 <tThiranAllpassSOCascade_setCoeff+0x1c4>
 8010ed2:	eef0 7a65 	vmov.f32	s15, s11
		D = 1.0f;
 8010ed6:	eeb0 0a4b 	vmov.f32	s0, s22
		f->a[0] = 0.99f;
 8010eda:	edc4 5a05 	vstr	s11, [r4, #20]
		f->a[1] = 0.01f;
 8010ede:	eeb0 6a47 	vmov.f32	s12, s14
 8010ee2:	ed84 7a06 	vstr	s14, [r4, #24]
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
 8010ee6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010ee8:	2a00      	cmp	r2, #0
 8010eea:	dd14      	ble.n	8010f16 <tThiranAllpassSOCascade_setCoeff+0x19a>
    _tAllpassSO* f = *ft;
 8010eec:	68a3      	ldr	r3, [r4, #8]
 8010eee:	681b      	ldr	r3, [r3, #0]
    f->a1 = a1;
 8010ef0:	edc3 7a05 	vstr	s15, [r3, #20]
    f->a2 = a2;
 8010ef4:	ed83 6a06 	vstr	s12, [r3, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
 8010ef8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010efa:	2a01      	cmp	r2, #1
 8010efc:	dd0b      	ble.n	8010f16 <tThiranAllpassSOCascade_setCoeff+0x19a>
 8010efe:	2301      	movs	r3, #1
    _tAllpassSO* f = *ft;
 8010f00:	68a2      	ldr	r2, [r4, #8]
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 8010f02:	6960      	ldr	r0, [r4, #20]
    _tAllpassSO* f = *ft;
 8010f04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 8010f08:	3301      	adds	r3, #1
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 8010f0a:	69a1      	ldr	r1, [r4, #24]
    f->a1 = a1;
 8010f0c:	6150      	str	r0, [r2, #20]
    f->a2 = a2;
 8010f0e:	6191      	str	r1, [r2, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
 8010f10:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8010f12:	429a      	cmp	r2, r3
 8010f14:	dcf4      	bgt.n	8010f00 <tThiranAllpassSOCascade_setCoeff+0x184>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
 8010f16:	ee07 2a90 	vmov	s15, r2
 8010f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8010f1e:	ecbd 8b08 	vpop	{d8-d11}
 8010f22:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010f26:	bd10      	pop	{r4, pc}
 8010f28:	3b14f209 	.word	0x3b14f209
 8010f2c:	42440000 	.word	0x42440000
 8010f30:	42040000 	.word	0x42040000
 8010f34:	3cf5c28f 	.word	0x3cf5c28f
 8010f38:	00000000 	.word	0x00000000
 8010f3c:	3f7d70a4 	.word	0x3f7d70a4
 8010f40:	3c23d70a 	.word	0x3c23d70a

08010f44 <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
    _tThiranAllpassSOCascade* f = *ft;
 8010f44:	6801      	ldr	r1, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
 8010f46:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	dd27      	ble.n	8010f9c <tThiranAllpassSOCascade_tick+0x58>
 8010f4c:	2200      	movs	r2, #0
    _tAllpassSO* f = *ft;
 8010f4e:	688b      	ldr	r3, [r1, #8]
 8010f50:	eef0 4a40 	vmov.f32	s9, s0
 8010f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 8010f58:	3201      	adds	r2, #1
 8010f5a:	edd3 6a04 	vldr	s13, [r3, #16]
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
 8010f5e:	ed93 7a01 	vldr	s14, [r3, #4]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 8010f62:	ee30 0a66 	vsub.f32	s0, s0, s13
 8010f66:	edd3 7a03 	vldr	s15, [r3, #12]
 8010f6a:	ed93 5a06 	vldr	s10, [r3, #24]
 8010f6e:	ee37 6a67 	vsub.f32	s12, s14, s15
 8010f72:	edd3 5a05 	vldr	s11, [r3, #20]
 8010f76:	ee20 0a05 	vmul.f32	s0, s0, s10
 8010f7a:	edd3 6a02 	vldr	s13, [r3, #8]
    f->prevSamp = input;
 8010f7e:	edc3 4a01 	vstr	s9, [r3, #4]
    f->prevPrevSamp = f->prevSamp;
 8010f82:	ed83 7a02 	vstr	s14, [r3, #8]
 8010f86:	eea5 0a86 	vfma.f32	s0, s11, s12
    f->prevPrevSamp2 = f->prevSamp2;
 8010f8a:	edc3 7a04 	vstr	s15, [r3, #16]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 8010f8e:	ee30 0a26 	vadd.f32	s0, s0, s13
    f->prevSamp2 = output;
 8010f92:	ed83 0a03 	vstr	s0, [r3, #12]
    for (int i = 0; i < f->numActiveFilters; i++)
 8010f96:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	dcd8      	bgt.n	8010f4e <tThiranAllpassSOCascade_tick+0xa>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
    }
    return sample;
}
 8010f9c:	4770      	bx	lr
 8010f9e:	bf00      	nop

08010fa0 <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
 8010fa0:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 8010fa2:	6853      	ldr	r3, [r2, #4]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	dd0d      	ble.n	8010fc4 <tThiranAllpassSOCascade_clear+0x24>
 8010fa8:	2300      	movs	r3, #0
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
 8010faa:	2100      	movs	r1, #0
 8010fac:	6890      	ldr	r0, [r2, #8]
 8010fae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010fb2:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
 8010fb4:	6890      	ldr	r0, [r2, #8]
 8010fb6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 8010fba:	3301      	adds	r3, #1
        f->filters[i]->prevPrevSamp = 0.0f;
 8010fbc:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
 8010fbe:	6850      	ldr	r0, [r2, #4]
 8010fc0:	4298      	cmp	r0, r3
 8010fc2:	dcf3      	bgt.n	8010fac <tThiranAllpassSOCascade_clear+0xc>

    }
}
 8010fc4:	4770      	bx	lr
 8010fc6:	bf00      	nop

08010fc8 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
 8010fc8:	b538      	push	{r3, r4, r5, lr}
 8010fca:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8010fce:	680d      	ldr	r5, [r1, #0]
{
 8010fd0:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
 8010fd2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8010fd6:	2028      	movs	r0, #40	; 0x28
 8010fd8:	4629      	mov	r1, r5
{
 8010fda:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8010fde:	f002 ff63 	bl	8013ea8 <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
 8010fe2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 801102c <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8010fe6:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8010fe8:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
 8010fec:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8010fee:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
 8010ff0:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
 8010ff4:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
 8010ff8:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
 8010ffc:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011000:	68db      	ldr	r3, [r3, #12]
 8011002:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
 8011004:	6824      	ldr	r4, [r4, #0]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 8011006:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 801100a:	ed84 8a01 	vstr	s16, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 801100e:	ee68 0a27 	vmul.f32	s1, s16, s15
 8011012:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011016:	f002 fc45 	bl	80138a4 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 801101a:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 801101e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 8011022:	edc4 8a05 	vstr	s17, [r4, #20]
}
 8011026:	ecbd 8b02 	vpop	{d8}
 801102a:	bd38      	pop	{r3, r4, r5, pc}
 801102c:	00000000 	.word	0x00000000

08011030 <tOnePole_free>:
    _tOnePole* f = *ft;
 8011030:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 8011032:	6801      	ldr	r1, [r0, #0]
 8011034:	f002 bffa 	b.w	801402c <mpool_free>

08011038 <tOnePole_setFreq>:
{
 8011038:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 801103a:	6804      	ldr	r4, [r0, #0]
{
 801103c:	eef0 0a40 	vmov.f32	s1, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011040:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8011044:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011070 <tOnePole_setFreq+0x38>
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 8011048:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 801104c:	edc4 0a01 	vstr	s1, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 8011050:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011054:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011058:	f002 fc24 	bl	80138a4 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 801105c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011060:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 8011064:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011068:	edc4 7a05 	vstr	s15, [r4, #20]
}
 801106c:	bd10      	pop	{r4, pc}
 801106e:	bf00      	nop
 8011070:	00000000 	.word	0x00000000

08011074 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
 8011074:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 8011076:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
 801107a:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 801107e:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
 8011082:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 8011086:	edd3 6a05 	vldr	s13, [r3, #20]
 801108a:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 801108e:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 8011092:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 8011096:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 801109a:	4770      	bx	lr

0801109c <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 801109c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80110d8 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80110a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80110a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80110a8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80110dc <tOnePole_setSampleRate+0x40>
{
 80110ac:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 80110ae:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80110b0:	edd4 0a01 	vldr	s1, [r4, #4]
 80110b4:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80110b8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80110bc:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80110c0:	f002 fbf0 	bl	80138a4 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 80110c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80110c8:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 80110cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80110d0:	edc4 7a04 	vstr	s15, [r4, #16]
}
 80110d4:	bd10      	pop	{r4, pc}
 80110d6:	bf00      	nop
 80110d8:	40c90fdb 	.word	0x40c90fdb
 80110dc:	00000000 	.word	0x00000000

080110e0 <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
 80110e0:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 80110e2:	680c      	ldr	r4, [r1, #0]
{
 80110e4:	4605      	mov	r5, r0
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 80110e6:	2014      	movs	r0, #20
 80110e8:	4621      	mov	r1, r4
 80110ea:	f002 fedd 	bl	8013ea8 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->poleCoeff     = 0.9f;
 80110ee:	4a06      	ldr	r2, [pc, #24]	; (8011108 <tCookOnePole_initToPool+0x28>)
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 80110f0:	6028      	str	r0, [r5, #0]
    f->sgain         = 0.1f;
 80110f2:	4906      	ldr	r1, [pc, #24]	; (801110c <tCookOnePole_initToPool+0x2c>)
    f->mempool = m;
 80110f4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 80110f6:	6863      	ldr	r3, [r4, #4]
    f->poleCoeff     = 0.9f;
 80110f8:	6042      	str	r2, [r0, #4]
    f->output         = 0.0f;
 80110fa:	2200      	movs	r2, #0
    f->sgain         = 0.1f;
 80110fc:	6081      	str	r1, [r0, #8]
    f->output         = 0.0f;
 80110fe:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011100:	68db      	ldr	r3, [r3, #12]
 8011102:	6103      	str	r3, [r0, #16]
}
 8011104:	bd38      	pop	{r3, r4, r5, pc}
 8011106:	bf00      	nop
 8011108:	3f666666 	.word	0x3f666666
 801110c:	3dcccccd 	.word	0x3dcccccd

08011110 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
    _tCookOnePole* f = *ft;
 8011110:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 8011112:	6801      	ldr	r1, [r0, #0]
 8011114:	f002 bf8a 	b.w	801402c <mpool_free>

08011118 <tCookOnePole_setPole>:
void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
    
    onepole->poleCoeff = aValue;
      if (onepole->poleCoeff > 0.0)                   // Normalize gain to 1.0 max
 8011118:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tCookOnePole* onepole = *ft;
 801111c:	6803      	ldr	r3, [r0, #0]
        onepole->sgain = (1.0 - onepole->poleCoeff);
 801111e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    onepole->poleCoeff = aValue;
 8011122:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0)                   // Normalize gain to 1.0 max
 8011126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        onepole->sgain = (1.0 - onepole->poleCoeff);
 801112a:	bfcc      	ite	gt
 801112c:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
      else
        onepole->sgain = (1.0 + onepole->poleCoeff);
 8011130:	ee30 0a27 	vaddle.f32	s0, s0, s15
 8011134:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop

0801113c <tCookOnePole_setGainAndPole>:


void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
 801113c:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
 801113e:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
 8011142:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
 8011146:	4770      	bx	lr

08011148 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
 8011148:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 801114a:	edd3 6a03 	vldr	s13, [r3, #12]
 801114e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011152:	ed93 7a02 	vldr	s14, [r3, #8]
 8011156:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801115a:	eee7 7a00 	vfma.f32	s15, s14, s0
    return onepole->output;
}
 801115e:	eeb0 0a67 	vmov.f32	s0, s15
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 8011162:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8011166:	4770      	bx	lr

08011168 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8011168:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8011178 <tCookOnePole_setSampleRate+0x10>
    _tCookOnePole* f = *ft;
 801116c:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 801116e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011172:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8011176:	4770      	bx	lr
 8011178:	40c90fdb 	.word	0x40c90fdb

0801117c <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
 801117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801117e:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 8011182:	6995      	ldr	r5, [r2, #24]
{
 8011184:	4606      	mov	r6, r0
 8011186:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8011188:	204c      	movs	r0, #76	; 0x4c
 801118a:	4629      	mov	r1, r5
{
 801118c:	eef0 8a40 	vmov.f32	s17, s0
 8011190:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8011194:	f002 fe88 	bl	8013ea8 <mpool_alloc>
 8011198:	6030      	str	r0, [r6, #0]
 801119a:	4604      	mov	r4, r0
    svf->mempool = m;
 801119c:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 801119e:	686e      	ldr	r6, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 80111a0:	2500      	movs	r5, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80111a2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8011278 <tSVF_init+0xfc>
    svf->sampleRate = leaf->sampleRate;
 80111a6:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80111a8:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 80111ac:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 80111ae:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
 80111b2:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80111b4:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 80111b8:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
 80111bc:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
 80111be:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 80111c0:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 80111c4:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80111c8:	f008 fab0 	bl	801972c <tanf>
    svf->k = 1.0f/Q;
 80111cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80111d0:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 80111d4:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 80111d6:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
 80111d8:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 80111dc:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
 80111e0:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 80111e2:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80111e4:	eef0 6a67 	vmov.f32	s13, s15
 80111e8:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 80111ec:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80111f0:	eee0 6a06 	vfma.f32	s13, s0, s12
 80111f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 80111f8:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80111fc:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8011200:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 8011204:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 8011208:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
 801120c:	d00d      	beq.n	801122a <tSVF_init+0xae>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 801120e:	2f04      	cmp	r7, #4
 8011210:	d80b      	bhi.n	801122a <tSVF_init+0xae>
 8011212:	e8df f007 	tbb	[pc, r7]
 8011216:	0a23      	.short	0x0a23
 8011218:	032a      	.short	0x032a
 801121a:	1a          	.byte	0x1a
 801121b:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
 801121c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8011220:	4a16      	ldr	r2, [pc, #88]	; (801127c <tSVF_init+0x100>)
        svf->cL = 0.0f;
 8011222:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 8011224:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 8011226:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 8011228:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
 801122a:	ed96 7a00 	vldr	s14, [r6]
 801122e:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011280 <tSVF_init+0x104>
    {
    	svf->table = __filterTanhTable_96000;
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
 8011232:	4a14      	ldr	r2, [pc, #80]	; (8011284 <tSVF_init+0x108>)
 8011234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011238:	4b13      	ldr	r3, [pc, #76]	; (8011288 <tSVF_init+0x10c>)
 801123a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801123e:	bfd8      	it	le
 8011240:	4613      	movle	r3, r2
 8011242:	64a3      	str	r3, [r4, #72]	; 0x48
}
 8011244:	ecbd 8b02 	vpop	{d8}
 8011248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 801124a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 801124e:	4a0b      	ldr	r2, [pc, #44]	; (801127c <tSVF_init+0x100>)
        svf->cL = -2.0f;
 8011250:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8011254:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 8011256:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 8011258:	63a3      	str	r3, [r4, #56]	; 0x38
 801125a:	e7e6      	b.n	801122a <tSVF_init+0xae>
        svf->cBK = -1.0f;
 801125c:	4b07      	ldr	r3, [pc, #28]	; (801127c <tSVF_init+0x100>)
        svf->cH = 1.0f;
 801125e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011262:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
 8011264:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
 8011266:	63a3      	str	r3, [r4, #56]	; 0x38
 8011268:	e7df      	b.n	801122a <tSVF_init+0xae>
        svf->cB = 1.0f;
 801126a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
 801126e:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 8011270:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
 8011272:	63a2      	str	r2, [r4, #56]	; 0x38
 8011274:	e7d9      	b.n	801122a <tSVF_init+0xae>
 8011276:	bf00      	nop
 8011278:	40490fdb 	.word	0x40490fdb
 801127c:	bf800000 	.word	0xbf800000
 8011280:	47afc800 	.word	0x47afc800
 8011284:	0801b9a8 	.word	0x0801b9a8
 8011288:	0801f9a8 	.word	0x0801f9a8

0801128c <tSVF_initToPool>:
{
 801128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801128e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011292:	6815      	ldr	r5, [r2, #0]
{
 8011294:	4606      	mov	r6, r0
 8011296:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8011298:	204c      	movs	r0, #76	; 0x4c
 801129a:	4629      	mov	r1, r5
{
 801129c:	eef0 8a40 	vmov.f32	s17, s0
 80112a0:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80112a4:	f002 fe00 	bl	8013ea8 <mpool_alloc>
 80112a8:	6030      	str	r0, [r6, #0]
 80112aa:	4604      	mov	r4, r0
    svf->mempool = m;
 80112ac:	6005      	str	r5, [r0, #0]
    LEAF* leaf = svf->mempool->leaf;
 80112ae:	686e      	ldr	r6, [r5, #4]
    svf->ic1eq = 0;
 80112b0:	2500      	movs	r5, #0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80112b2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8011388 <tSVF_initToPool+0xfc>
    svf->sampleRate = leaf->sampleRate;
 80112b6:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80112b8:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 80112bc:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 80112be:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
 80112c2:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80112c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 80112c8:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
 80112cc:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
 80112ce:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 80112d0:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 80112d4:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80112d8:	f008 fa28 	bl	801972c <tanf>
    svf->k = 1.0f/Q;
 80112dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80112e0:	ed84 0a07 	vstr	s0, [r4, #28]
    if (type == SVFTypeLowpass)
 80112e4:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 80112e6:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
 80112e8:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 80112ec:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
 80112f0:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 80112f2:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80112f4:	eef0 6a67 	vmov.f32	s13, s15
 80112f8:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 80112fc:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011300:	eee0 6a06 	vfma.f32	s13, s0, s12
 8011304:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 8011308:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801130c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8011310:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 8011314:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 8011318:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
 801131c:	d00b      	beq.n	8011336 <tSVF_initToPool+0xaa>
    else if (type == SVFTypeBandpass)
 801131e:	2f04      	cmp	r7, #4
 8011320:	d809      	bhi.n	8011336 <tSVF_initToPool+0xaa>
 8011322:	e8df f007 	tbb	[pc, r7]
 8011326:	0821      	.short	0x0821
 8011328:	2803      	.short	0x2803
 801132a:	18          	.byte	0x18
 801132b:	00          	.byte	0x00
        svf->cB = 1.0f;
 801132c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
 8011330:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 8011332:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
 8011334:	63a2      	str	r2, [r4, #56]	; 0x38
    if (leaf->sampleRate > 90000)
 8011336:	ed96 7a00 	vldr	s14, [r6]
 801133a:	eddf 7a14 	vldr	s15, [pc, #80]	; 801138c <tSVF_initToPool+0x100>
    	svf->table = __filterTanhTable_48000;
 801133e:	4a14      	ldr	r2, [pc, #80]	; (8011390 <tSVF_initToPool+0x104>)
 8011340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011344:	4b13      	ldr	r3, [pc, #76]	; (8011394 <tSVF_initToPool+0x108>)
 8011346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134a:	bfd8      	it	le
 801134c:	4613      	movle	r3, r2
 801134e:	64a3      	str	r3, [r4, #72]	; 0x48
    }
}
 8011350:	ecbd 8b02 	vpop	{d8}
 8011354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 8011356:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 801135a:	4a0f      	ldr	r2, [pc, #60]	; (8011398 <tSVF_initToPool+0x10c>)
        svf->cL = -2.0f;
 801135c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8011360:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 8011362:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 8011364:	63a3      	str	r3, [r4, #56]	; 0x38
 8011366:	e7e6      	b.n	8011336 <tSVF_initToPool+0xaa>
        svf->cBK = -1.0f;
 8011368:	4b0b      	ldr	r3, [pc, #44]	; (8011398 <tSVF_initToPool+0x10c>)
        svf->cH = 1.0f;
 801136a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 801136e:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
 8011370:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
 8011372:	63a3      	str	r3, [r4, #56]	; 0x38
 8011374:	e7df      	b.n	8011336 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 8011376:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 801137a:	4a07      	ldr	r2, [pc, #28]	; (8011398 <tSVF_initToPool+0x10c>)
        svf->cL = 0.0f;
 801137c:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 801137e:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 8011380:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 8011382:	63a3      	str	r3, [r4, #56]	; 0x38
 8011384:	e7d7      	b.n	8011336 <tSVF_initToPool+0xaa>
 8011386:	bf00      	nop
 8011388:	40490fdb 	.word	0x40490fdb
 801138c:	47afc800 	.word	0x47afc800
 8011390:	0801b9a8 	.word	0x0801b9a8
 8011394:	0801f9a8 	.word	0x0801f9a8
 8011398:	bf800000 	.word	0xbf800000

0801139c <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
 801139c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
 801139e:	6801      	ldr	r1, [r0, #0]
 80113a0:	f002 be44 	b.w	801402c <mpool_free>

080113a4 <tSVF_tick>:
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 80113a4:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80113a6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 80113aa:	edd3 6a06 	vldr	s13, [r3, #24]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80113ae:	ed93 6a05 	vldr	s12, [r3, #20]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80113b2:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80113b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    v3 = v0 - svf->ic2eq;
 80113ba:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80113be:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
 80113c2:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 80113c6:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80113ca:	edd3 2a09 	vldr	s5, [r3, #36]	; 0x24
 80113ce:	ee67 7a84 	vmul.f32	s15, s15, s8
 80113d2:	ed93 2a08 	vldr	s4, [r3, #32]
 80113d6:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 80113da:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80113de:	eea2 5a23 	vfma.f32	s10, s4, s7
 80113e2:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80113e6:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80113ea:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80113ee:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 80113f2:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 80113f6:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 80113fa:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80113fe:	ed83 6a05 	vstr	s12, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8011402:	edc3 6a06 	vstr	s13, [r3, #24]
}
 8011406:	eea3 7a80 	vfma.f32	s14, s7, s0
 801140a:	eeb0 0a47 	vmov.f32	s0, s14
 801140e:	4770      	bx	lr

08011410 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
 8011410:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
 8011412:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 8011414:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8011418:	eef0 0a40 	vmov.f32	s1, s0
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 801141c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8011478 <tSVF_setFreq+0x68>
 8011420:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 8011424:	ee21 1a27 	vmul.f32	s2, s2, s15
 8011428:	f002 fa3c 	bl	80138a4 <LEAF_clip>
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 801142c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801147c <tSVF_setFreq+0x6c>
 8011430:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 8011434:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 8011438:	ee67 7a87 	vmul.f32	s15, s15, s14
 801143c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011440:	f008 f974 	bl	801972c <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011448:	edd4 7a08 	vldr	s15, [r4, #32]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 801144c:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011450:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011454:	eeb0 6a66 	vmov.f32	s12, s13
 8011458:	eea0 6a27 	vfma.f32	s12, s0, s15
 801145c:	ee86 7a86 	vdiv.f32	s14, s13, s12
    svf->a2 = svf->g * svf->a1;
 8011460:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011464:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8011468:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 801146c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8011470:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
 8011474:	bd10      	pop	{r4, pc}
 8011476:	bf00      	nop
 8011478:	00000000 	.word	0x00000000
 801147c:	40490fdb 	.word	0x40490fdb

08011480 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
	svf->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 8011480:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8011500 <tSVF_setFreqFast+0x80>
 8011484:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tSVF* svf = *vf;
 8011488:	6803      	ldr	r3, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 801148a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 801148e:	ee20 7a07 	vmul.f32	s14, s0, s14
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011492:	6c99      	ldr	r1, [r3, #72]	; 0x48
	svf->cutoffMIDI = cutoff;
 8011494:	ed83 0a04 	vstr	s0, [r3, #16]
    int32_t intVer = (int32_t)cutoff;
 8011498:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801149c:	ed93 6a08 	vldr	s12, [r3, #32]
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 80114a0:	ee76 5ac7 	vsub.f32	s11, s13, s14
    int32_t intVer = (int32_t)cutoff;
 80114a4:	ee17 2a90 	vmov	r2, s15
 80114a8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80114ac:	4562      	cmp	r2, ip
 80114ae:	bfa8      	it	ge
 80114b0:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80114b2:	ee07 2a90 	vmov	s15, r2
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 80114b6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80114ba:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 80114be:	ed92 4a01 	vldr	s8, [r2, #4]
 80114c2:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80114c6:	ee77 7a45 	vsub.f32	s15, s14, s10
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 80114ca:	ee35 7a85 	vadd.f32	s14, s11, s10
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80114ce:	eef0 5a66 	vmov.f32	s11, s13
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 80114d2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80114d6:	eee4 7a87 	vfma.f32	s15, s9, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80114da:	ee37 7a86 	vadd.f32	s14, s15, s12
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 80114de:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80114e2:	eee7 5a87 	vfma.f32	s11, s15, s14
 80114e6:	ee86 6aa5 	vdiv.f32	s12, s13, s11
    svf->a2 = svf->g * svf->a1;
 80114ea:	ee27 7a86 	vmul.f32	s14, s15, s12
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80114ee:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 80114f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 80114f6:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 80114fa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 80114fe:	4770      	bx	lr
 8011500:	41f4898d 	.word	0x41f4898d

08011504 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 8011504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8011508:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801150a:	edd3 7a07 	vldr	s15, [r3, #28]
    svf->k = 1.0f/Q;
 801150e:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 8011512:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011516:	eeb0 6a47 	vmov.f32	s12, s14
 801151a:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 801151e:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011522:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8011526:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 801152a:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801152e:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8011532:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8011536:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 801153a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 801153e:	4770      	bx	lr

08011540 <tSVF_setSampleRate>:

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
    svf->sampleRate = sr;
    svf->invSampleRate = 1.0f/svf->sampleRate;
 8011540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8011544:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
 8011546:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
 801154a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801154e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8011552:	4770      	bx	lr

08011554 <tHighpass_init>:

#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
 8011554:	b538      	push	{r3, r4, r5, lr}
 8011556:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 801155a:	698c      	ldr	r4, [r1, #24]
{
 801155c:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 801155e:	2018      	movs	r0, #24
{
 8011560:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011564:	4621      	mov	r1, r4
 8011566:	f002 fd03 	bl	8013f70 <mpool_calloc>
 801156a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 801156c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 801156e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011572:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8011574:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011576:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 801157a:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 801157c:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8011580:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8011582:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011586:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 801158a:	edc0 7a03 	vstr	s15, [r0, #12]
}
 801158e:	ecbd 8b02 	vpop	{d8}
 8011592:	bd38      	pop	{r3, r4, r5, pc}

08011594 <tHighpass_initToPool>:
{
 8011594:	b538      	push	{r3, r4, r5, lr}
 8011596:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801159a:	680c      	ldr	r4, [r1, #0]
{
 801159c:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 801159e:	2018      	movs	r0, #24
{
 80115a0:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 80115a4:	4621      	mov	r1, r4
 80115a6:	f002 fce3 	bl	8013f70 <mpool_calloc>
 80115aa:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 80115ac:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80115ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80115b2:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 80115b4:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80115b6:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 80115ba:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80115bc:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
 80115c0:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
 80115c2:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80115c6:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80115ca:	edc0 7a03 	vstr	s15, [r0, #12]
}
 80115ce:	ecbd 8b02 	vpop	{d8}
 80115d2:	bd38      	pop	{r3, r4, r5, pc}

080115d4 <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
 80115d4:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 80115d6:	6801      	ldr	r1, [r0, #0]
 80115d8:	f002 bd28 	b.w	801402c <mpool_free>

080115dc <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
 80115dc:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80115de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80115e2:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
 80115e6:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 80115ea:	eee7 7a40 	vfms.f32	s15, s14, s0
 80115ee:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80115f2:	4770      	bx	lr

080115f4 <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
 80115f4:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 80115f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80115fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80115fe:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8011602:	ed83 0a01 	vstr	s0, [r3, #4]
 8011606:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 801160a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801160e:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8011612:	4770      	bx	lr

08011614 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8011614:	eddf 6a07 	vldr	s13, [pc, #28]	; 8011634 <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8011618:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
 801161c:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 801161e:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8011622:	edd3 6a04 	vldr	s13, [r3, #16]
 8011626:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 801162a:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 801162e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8011632:	4770      	bx	lr
 8011634:	40c90fdb 	.word	0x40c90fdb

08011638 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
 8011638:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801163a:	edd3 6a03 	vldr	s13, [r3, #12]
 801163e:	ed93 7a02 	vldr	s14, [r3, #8]
 8011642:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011646:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 801164a:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 801164e:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011652:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8011656:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 801165a:	edd3 4a08 	vldr	s9, [r3, #32]
 801165e:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011662:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8011666:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 801166a:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 801166e:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8011672:	eeb0 5a47 	vmov.f32	s10, s14
 8011676:	eea4 0a87 	vfma.f32	s0, s9, s14
 801167a:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 801167e:	eef0 7a66 	vmov.f32	s15, s13
}
 8011682:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011686:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 801168a:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 801168e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8011692:	4770      	bx	lr

08011694 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8011694:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8011696:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011698:	eddf 7a98 	vldr	s15, [pc, #608]	; 80118fc <tVZFilter_calcCoeffs+0x268>
{
 801169c:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80116a0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80116a4:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 80116a8:	ee68 8a87 	vmul.f32	s17, s17, s14
 80116ac:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80116b0:	eeb0 0a68 	vmov.f32	s0, s17
 80116b4:	f008 f83a 	bl	801972c <tanf>
    
    switch( f->type )
 80116b8:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80116ba:	eeb0 8a40 	vmov.f32	s16, s0
 80116be:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 80116c2:	2b0a      	cmp	r3, #10
 80116c4:	f200 8117 	bhi.w	80118f6 <tVZFilter_calcCoeffs+0x262>
 80116c8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80116cc:	002f0026 	.word	0x002f0026
 80116d0:	00410038 	.word	0x00410038
 80116d4:	0056004d 	.word	0x0056004d
 80116d8:	00a1008b 	.word	0x00a1008b
 80116dc:	010a00b7 	.word	0x010a00b7
 80116e0:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80116e2:	edd4 7a05 	vldr	s15, [r4, #20]
 80116e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80116ea:	eeb1 7a67 	vneg.f32	s14, s15
 80116ee:	61e3      	str	r3, [r4, #28]
 80116f0:	6263      	str	r3, [r4, #36]	; 0x24
 80116f2:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80116f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 80116fa:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80116fe:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8011702:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011706:	eee7 6a88 	vfma.f32	s13, s15, s16
 801170a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801170e:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8011712:	ecbd 8b02 	vpop	{d8}
 8011716:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011718:	2300      	movs	r3, #0
 801171a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 801171e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011722:	61e3      	str	r3, [r4, #28]
 8011724:	6223      	str	r3, [r4, #32]
 8011726:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8011728:	e7e5      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 801172a:	2300      	movs	r3, #0
 801172c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011730:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8011734:	6223      	str	r3, [r4, #32]
 8011736:	6263      	str	r3, [r4, #36]	; 0x24
 8011738:	61e2      	str	r2, [r4, #28]
            break;
 801173a:	e7dc      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 801173c:	2300      	movs	r3, #0
 801173e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011742:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8011746:	61e3      	str	r3, [r4, #28]
 8011748:	6263      	str	r3, [r4, #36]	; 0x24
 801174a:	6222      	str	r2, [r4, #32]
            break;
 801174c:	e7d3      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 801174e:	edd4 7a05 	vldr	s15, [r4, #20]
 8011752:	2300      	movs	r3, #0
 8011754:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8011758:	61e3      	str	r3, [r4, #28]
 801175a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801175e:	6263      	str	r3, [r4, #36]	; 0x24
 8011760:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8011764:	e7c7      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011766:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801176a:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 801176c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011770:	6222      	str	r2, [r4, #32]
 8011772:	61e3      	str	r3, [r4, #28]
 8011774:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8011776:	e7be      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8011778:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801177c:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8011780:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8011784:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011788:	f007 fc4a 	bl	8019020 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801178c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8011790:	f007 ffcc 	bl	801972c <tanf>
            Lfloat r  = f->g/wl;
 8011794:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011798:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801179c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80117a0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80117a4:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80117a8:	ed84 7a07 	vstr	s14, [r4, #28]
 80117ac:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80117b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80117b4:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80117b8:	eef0 6a47 	vmov.f32	s13, s14
 80117bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80117c0:	ee77 7a45 	vsub.f32	s15, s14, s10
 80117c4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80117c8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80117cc:	eef1 7ac7 	vsqrt.f32	s15, s14
 80117d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80117d4:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80117d8:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80117dc:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 80117e0:	e789      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
 80117e2:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80117e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 80117ea:	edd4 7a05 	vldr	s15, [r4, #20]
 80117ee:	eef1 6ac7 	vsqrt.f32	s13, s14
 80117f2:	ed84 7a07 	vstr	s14, [r4, #28]
 80117f6:	6263      	str	r3, [r4, #36]	; 0x24
 80117f8:	ee27 6a27 	vmul.f32	s12, s14, s15
 80117fc:	ed84 6a08 	vstr	s12, [r4, #32]
 8011800:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011804:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8011808:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 801180c:	e773      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
 801180e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011812:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011816:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801181a:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 801181e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8011822:	61e3      	str	r3, [r4, #28]
 8011824:	ee27 6a27 	vmul.f32	s12, s14, s15
 8011828:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801182c:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8011830:	ee20 8a07 	vmul.f32	s16, s0, s14
 8011834:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8011838:	e75d      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
 801183a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801183e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011842:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011846:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8011900 <tVZFilter_calcCoeffs+0x26c>
 801184a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
 801184e:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011852:	eeb0 0a48 	vmov.f32	s0, s16
 8011856:	eea7 0a67 	vfms.f32	s0, s14, s15
 801185a:	f002 fb03 	bl	8013e64 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 801185e:	eddf 0a28 	vldr	s1, [pc, #160]	; 8011900 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011862:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011866:	eeb0 0a68 	vmov.f32	s0, s17
 801186a:	f002 faff 	bl	8013e6c <minimum>
            f->cB = 1.0f-x*x;
 801186e:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011872:	edd4 7a05 	vldr	s15, [r4, #20]
 8011876:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 801187a:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801187e:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8011882:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011886:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801188a:	ee76 5a06 	vadd.f32	s11, s12, s12
 801188e:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8011892:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011896:	eee6 7a06 	vfma.f32	s15, s12, s12
 801189a:	eee0 7a00 	vfma.f32	s15, s0, s0
 801189e:	eee0 7a65 	vfms.f32	s15, s0, s11
 80118a2:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80118a6:	f001 fed7 	bl	8013658 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 80118aa:	edd4 5a07 	vldr	s11, [r4, #28]
 80118ae:	ed94 6a08 	vldr	s12, [r4, #32]
 80118b2:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 80118b6:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80118ba:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 80118be:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80118c2:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 80118c6:	ee65 5a80 	vmul.f32	s11, s11, s0
 80118ca:	ee26 6a00 	vmul.f32	s12, s12, s0
 80118ce:	ee66 6a80 	vmul.f32	s13, s13, s0
 80118d2:	edc4 5a07 	vstr	s11, [r4, #28]
 80118d6:	ed84 6a08 	vstr	s12, [r4, #32]
 80118da:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 80118de:	e70a      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 80118e0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 80118e4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 80118e8:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 80118ea:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 80118ee:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 80118f2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80118f4:	e6ff      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80118f6:	edd4 7a05 	vldr	s15, [r4, #20]
 80118fa:	e6fc      	b.n	80116f6 <tVZFilter_calcCoeffs+0x62>
 80118fc:	40490fdb 	.word	0x40490fdb
 8011900:	00000000 	.word	0x00000000

08011904 <tVZFilter_initToPool>:
{
 8011904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011908:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 801190c:	6816      	ldr	r6, [r2, #0]
{
 801190e:	b082      	sub	sp, #8
 8011910:	4605      	mov	r5, r0
 8011912:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8011914:	2054      	movs	r0, #84	; 0x54
 8011916:	4631      	mov	r1, r6
{
 8011918:	eef0 8a60 	vmov.f32	s17, s1
 801191c:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8011920:	f002 fac2 	bl	8013ea8 <mpool_alloc>
 8011924:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8011926:	6006      	str	r6, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011928:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 801192c:	6876      	ldr	r6, [r6, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 801192e:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011930:	ed9f 8a47 	vldr	s16, [pc, #284]	; 8011a50 <tVZFilter_initToPool+0x14c>
    f->sampleRate = leaf->sampleRate;
 8011934:	ed96 1a00 	vldr	s2, [r6]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011938:	eddd 0a01 	vldr	s1, [sp, #4]
 801193c:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 8011940:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011944:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 8011948:	6873      	ldr	r3, [r6, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 801194a:	ed9f 9a42 	vldr	s18, [pc, #264]	; 8011a54 <tVZFilter_initToPool+0x150>
    f->invSampleRate = leaf->invSampleRate;
 801194e:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011950:	f001 ffa8 	bl	80138a4 <LEAF_clip>
 8011954:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
 8011958:	f002 fa22 	bl	8013da0 <ftom>
    f->invG = 1.414213562373095f;
 801195c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8011a58 <tVZFilter_initToPool+0x154>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011960:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8011964:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 8011968:	edd4 7a04 	vldr	s15, [r4, #16]
    f->cutoffMIDI = ftom(f->fc);
 801196c:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011970:	ee26 0a86 	vmul.f32	s0, s13, s12
    f->R2Plusg = f->R2 + f->g;
 8011974:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = INV_SQRT2;
 8011978:	4b38      	ldr	r3, [pc, #224]	; (8011a5c <tVZFilter_initToPool+0x158>)
    f->invG = 1.414213562373095f;
 801197a:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = INV_SQRT2;
 801197e:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011980:	ee20 0a09 	vmul.f32	s0, s0, s18
    f->R2   = f->invG;
 8011984:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 8011988:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->type = type;
 801198c:	7127      	strb	r7, [r4, #4]
    f->B    = bandWidth;
 801198e:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8011992:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8011996:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 801199a:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 801199e:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80119a2:	f007 fec3 	bl	801972c <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80119a6:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8011a60 <tVZFilter_initToPool+0x15c>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80119aa:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80119ae:	eef0 0a68 	vmov.f32	s1, s17
 80119b2:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 80119b6:	f8d5 8000 	ldr.w	r8, [r5]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80119ba:	f001 ff73 	bl	80138a4 <LEAF_clip>
 80119be:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80119c2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80119c6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 80119ca:	edc8 0a0e 	vstr	s1, [r8, #56]	; 0x38
    _tVZFilter* f = *vf;
 80119ce:	682f      	ldr	r7, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 80119d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80119d4:	f007 fb24 	bl	8019020 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80119d8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80119dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80119e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80119e4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80119e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80119ec:	f007 fe9e 	bl	801972c <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80119f0:	ed97 6a04 	vldr	s12, [r7, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80119f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 80119f8:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 80119fa:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 80119fe:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8011a02:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011a0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011a12:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8011a16:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8011a1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011a1e:	edc8 7a05 	vstr	s15, [r8, #20]
    tVZFilter_calcCoeffs(vf);
 8011a22:	f7ff fe37 	bl	8011694 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 8011a26:	4628      	mov	r0, r5
 8011a28:	f7ff fe34 	bl	8011694 <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
 8011a2c:	ed96 7a00 	vldr	s14, [r6]
 8011a30:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011a64 <tVZFilter_initToPool+0x160>
    	f->table = __filterTanhTable_48000;
 8011a34:	4a0c      	ldr	r2, [pc, #48]	; (8011a68 <tVZFilter_initToPool+0x164>)
 8011a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011a3a:	4b0c      	ldr	r3, [pc, #48]	; (8011a6c <tVZFilter_initToPool+0x168>)
 8011a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a40:	bfd8      	it	le
 8011a42:	4613      	movle	r3, r2
 8011a44:	6523      	str	r3, [r4, #80]	; 0x50
}
 8011a46:	b002      	add	sp, #8
 8011a48:	ecbd 8b04 	vpop	{d8-d9}
 8011a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a50:	00000000 	.word	0x00000000
 8011a54:	40490fdb 	.word	0x40490fdb
 8011a58:	3fb504f3 	.word	0x3fb504f3
 8011a5c:	3f3504f3 	.word	0x3f3504f3
 8011a60:	42c80000 	.word	0x42c80000
 8011a64:	47afc800 	.word	0x47afc800
 8011a68:	0801b9a8 	.word	0x0801b9a8
 8011a6c:	0801f9a8 	.word	0x0801f9a8

08011a70 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8011a70:	3218      	adds	r2, #24
 8011a72:	f7ff bf47 	b.w	8011904 <tVZFilter_initToPool>
 8011a76:	bf00      	nop

08011a78 <tVZFilter_setFreq>:
{
 8011a78:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 8011a7a:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011a7c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8011a80:	4604      	mov	r4, r0
 8011a82:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011a86:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 8011a8a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8011aa4 <tVZFilter_setFreq+0x2c>
 8011a8e:	ee21 1a27 	vmul.f32	s2, s2, s15
 8011a92:	f001 ff07 	bl	80138a4 <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
 8011a96:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011a98:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
 8011a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8011aa0:	f7ff bdf8 	b.w	8011694 <tVZFilter_calcCoeffs>
 8011aa4:	00000000 	.word	0x00000000

08011aa8 <tVZFilter_setFreqFast>:
	 cutoff *= 30.567164179104478f;
 8011aa8:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8011d70 <tVZFilter_setFreqFast+0x2c8>
 8011aac:	f640 7cfe 	movw	ip, #4094	; 0xffe
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011ab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	 cutoff *= 30.567164179104478f;
 8011ab4:	ee20 7a07 	vmul.f32	s14, s0, s14
{
 8011ab8:	b510      	push	{r4, lr}
	    int32_t intVer = (int32_t)cutoff;
 8011aba:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	 _tVZFilter* f = *vf;
 8011abe:	6804      	ldr	r4, [r0, #0]
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011ac0:	ee76 6ac7 	vsub.f32	s13, s13, s14
	    int32_t intVer = (int32_t)cutoff;
 8011ac4:	ee17 3a90 	vmov	r3, s15
 8011ac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011acc:	4563      	cmp	r3, ip
 8011ace:	bfa8      	it	ge
 8011ad0:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011ad2:	ee07 3a90 	vmov	s15, r3
{
 8011ad6:	ed2d 8b02 	vpush	{d8}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011ada:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011ade:	6d22      	ldr	r2, [r4, #80]	; 0x50
	 f->cutoffMIDI = cutoff;
 8011ae0:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011ae4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    switch( f->type )
 8011ae8:	7921      	ldrb	r1, [r4, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011aea:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011aee:	ed93 5a01 	vldr	s10, [r3, #4]
 8011af2:	ee36 7a86 	vadd.f32	s14, s13, s12
 8011af6:	edd3 5a00 	vldr	s11, [r3]
 8011afa:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011afe:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011b02:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 8011b06:	290a      	cmp	r1, #10
 8011b08:	f200 812f 	bhi.w	8011d6a <tVZFilter_setFreqFast+0x2c2>
 8011b0c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8011b10:	002f0026 	.word	0x002f0026
 8011b14:	00410038 	.word	0x00410038
 8011b18:	0056004d 	.word	0x0056004d
 8011b1c:	00b5009b 	.word	0x00b5009b
 8011b20:	012200cf 	.word	0x012200cf
 8011b24:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8011b26:	ed94 7a05 	vldr	s14, [r4, #20]
 8011b2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011b2e:	eef1 6a47 	vneg.f32	s13, s14
 8011b32:	61e3      	str	r3, [r4, #28]
 8011b34:	6263      	str	r3, [r4, #36]	; 0x24
 8011b36:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 8011b3a:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011b3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8011b42:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011b46:	eef0 6a47 	vmov.f32	s13, s14
 8011b4a:	eee0 6a27 	vfma.f32	s13, s0, s15
 8011b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011b52:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8011b56:	ecbd 8b02 	vpop	{d8}
 8011b5a:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011b62:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011b66:	61e3      	str	r3, [r4, #28]
 8011b68:	6223      	str	r3, [r4, #32]
 8011b6a:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8011b6c:	e7e5      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011b74:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8011b78:	6223      	str	r3, [r4, #32]
 8011b7a:	6263      	str	r3, [r4, #36]	; 0x24
 8011b7c:	61e2      	str	r2, [r4, #28]
            break;
 8011b7e:	e7dc      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8011b80:	2300      	movs	r3, #0
 8011b82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011b86:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8011b8a:	61e3      	str	r3, [r4, #28]
 8011b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8011b8e:	6222      	str	r2, [r4, #32]
            break;
 8011b90:	e7d3      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011b92:	ed94 7a05 	vldr	s14, [r4, #20]
 8011b96:	2300      	movs	r3, #0
 8011b98:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8011b9c:	61e3      	str	r3, [r4, #28]
 8011b9e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011ba2:	6263      	str	r3, [r4, #36]	; 0x24
 8011ba4:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8011ba8:	e7c7      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011baa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011bae:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011bb0:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011bb4:	6222      	str	r2, [r4, #32]
 8011bb6:	61e3      	str	r3, [r4, #28]
 8011bb8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8011bba:	e7be      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8011bbc:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011bc0:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8011bc4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8011bc8:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011bcc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8011bd0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011bd4:	f001 fdee 	bl	80137b4 <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8011bd8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8011bdc:	eddf 7a65 	vldr	s15, [pc, #404]	; 8011d74 <tVZFilter_setFreqFast+0x2cc>
 8011be0:	ee28 8a07 	vmul.f32	s16, s16, s14
 8011be4:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011be8:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011bec:	f001 fd20 	bl	8013630 <fastertanf>
            Lfloat r  = f->g/wl;
 8011bf0:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011bf4:	eeb0 5a68 	vmov.f32	s10, s17
 8011bf8:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
 8011bfc:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011c00:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8011c04:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8011c08:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011c0c:	eea7 5aa7 	vfma.f32	s10, s15, s15
 8011c10:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8011c14:	ee77 7a65 	vsub.f32	s15, s14, s11
 8011c18:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011c1c:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8011c20:	f001 fd1a 	bl	8013658 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011c24:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 8011c28:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011c2c:	edc4 8a07 	vstr	s17, [r4, #28]
 8011c30:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011c34:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011c38:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011c3c:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011c40:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8011c44:	e779      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
 8011c46:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8011c4a:	f001 fd05 	bl	8013658 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011c4e:	f001 fd03 	bl	8013658 <fastsqrtf>
 8011c52:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011c56:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8011c5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011c5e:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011c62:	ed94 7a05 	vldr	s14, [r4, #20]
 8011c66:	edc4 6a07 	vstr	s13, [r4, #28]
 8011c6a:	6263      	str	r3, [r4, #36]	; 0x24
 8011c6c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011c70:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011c74:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 8011c78:	e75f      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
 8011c7a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8011c7e:	f001 fceb 	bl	8013658 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011c82:	f001 fce9 	bl	8013658 <fastsqrtf>
 8011c86:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011c8a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8011c8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011c92:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011c96:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011c9a:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 8011c9e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8011ca2:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011ca4:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011ca8:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8011cac:	e745      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            Lfloat x  = (2.0f*f->m-1.0f);
 8011cae:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011cb2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011cb6:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011cba:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8011d78 <tVZFilter_setFreqFast+0x2d0>
 8011cbe:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
 8011cc2:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011cc6:	eeb0 0a48 	vmov.f32	s0, s16
 8011cca:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011cce:	f002 f8c9 	bl	8013e64 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011cd2:	eddf 0a29 	vldr	s1, [pc, #164]	; 8011d78 <tVZFilter_setFreqFast+0x2d0>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011cd6:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011cda:	eeb0 0a68 	vmov.f32	s0, s17
 8011cde:	f002 f8c5 	bl	8013e6c <minimum>
            f->cB = 1.0f-x*x;
 8011ce2:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011ce6:	edd4 7a05 	vldr	s15, [r4, #20]
 8011cea:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8011cee:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011cf2:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8011cf6:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011cfa:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011cfe:	ee76 5a06 	vadd.f32	s11, s12, s12
 8011d02:	ee38 8a08 	vadd.f32	s16, s16, s16
 8011d06:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8011d0a:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011d0e:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011d12:	eee0 7a00 	vfma.f32	s15, s0, s0
 8011d16:	eee0 7a65 	vfms.f32	s15, s0, s11
 8011d1a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8011d1e:	f001 fc9b 	bl	8013658 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8011d22:	edd4 5a07 	vldr	s11, [r4, #28]
 8011d26:	ed94 6a08 	vldr	s12, [r4, #32]
 8011d2a:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8011d2e:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011d32:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 8011d36:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 8011d3a:	ee65 5a80 	vmul.f32	s11, s11, s0
 8011d3e:	ee26 6a00 	vmul.f32	s12, s12, s0
 8011d42:	ee66 6a80 	vmul.f32	s13, s13, s0
 8011d46:	edc4 5a07 	vstr	s11, [r4, #28]
 8011d4a:	ed84 6a08 	vstr	s12, [r4, #32]
 8011d4e:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 8011d52:	e6f2      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f;
 8011d54:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8011d58:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8011d5c:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8011d5e:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 8011d62:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 8011d66:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8011d68:	e6e7      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d6a:	ed94 7a05 	vldr	s14, [r4, #20]
 8011d6e:	e6e4      	b.n	8011b3a <tVZFilter_setFreqFast+0x92>
 8011d70:	41f4898d 	.word	0x41f4898d
 8011d74:	40490fdb 	.word	0x40490fdb
 8011d78:	00000000 	.word	0x00000000

08011d7c <tVZFilter_setGain>:
{
 8011d7c:	b538      	push	{r3, r4, r5, lr}
 8011d7e:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011d82:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8011dac <tVZFilter_setGain+0x30>
 8011d86:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011db0 <tVZFilter_setGain+0x34>
{
 8011d8a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8011d8c:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011d8e:	f001 fd89 	bl	80138a4 <LEAF_clip>
    f->invG = 1.0f/f->G;
 8011d92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8011d96:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011d98:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 8011d9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011da0:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 8011da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8011da8:	f7ff bc74 	b.w	8011694 <tVZFilter_calcCoeffs>
 8011dac:	457a0000 	.word	0x457a0000
 8011db0:	358637bd 	.word	0x358637bd

08011db4 <tVZFilter_setResonance>:
{
 8011db4:	b538      	push	{r3, r4, r5, lr}
 8011db6:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8011dba:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8011de4 <tVZFilter_setResonance+0x30>
 8011dbe:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011de8 <tVZFilter_setResonance+0x34>
{
 8011dc2:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8011dc4:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8011dc6:	f001 fd6d 	bl	80138a4 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 8011dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8011dce:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8011dd0:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 8011dd4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011dd8:	edc5 7a05 	vstr	s15, [r5, #20]
}
 8011ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8011de0:	f7ff bc58 	b.w	8011694 <tVZFilter_calcCoeffs>
 8011de4:	42c80000 	.word	0x42c80000
 8011de8:	3c23d70a 	.word	0x3c23d70a

08011dec <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 8011dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 8011df0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8011e18 <tVZFilter_setSampleRate+0x2c>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8011df4:	4909      	ldr	r1, [pc, #36]	; (8011e1c <tVZFilter_setSampleRate+0x30>)
 8011df6:	eeb4 0ac7 	vcmpe.f32	s0, s14
    _tVZFilter* f = *vf;
 8011dfa:	6803      	ldr	r3, [r0, #0]
    f->invSampleRate = 1.0f/f->sampleRate;
 8011dfc:	eec6 7a80 	vdiv.f32	s15, s13, s0
    	f->table = __filterTanhTable_48000;
 8011e00:	4a07      	ldr	r2, [pc, #28]	; (8011e20 <tVZFilter_setSampleRate+0x34>)
    f->sampleRate = sr;
 8011e02:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
 8011e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e0a:	bfd8      	it	le
 8011e0c:	460a      	movle	r2, r1
 8011e0e:	651a      	str	r2, [r3, #80]	; 0x50
    f->invSampleRate = 1.0f/f->sampleRate;
 8011e10:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    }
}
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop
 8011e18:	47afc800 	.word	0x47afc800
 8011e1c:	0801b9a8 	.word	0x0801b9a8
 8011e20:	0801f9a8 	.word	0x0801f9a8

08011e24 <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8011e2a:	680d      	ldr	r5, [r1, #0]
{
 8011e2c:	b082      	sub	sp, #8
 8011e2e:	4606      	mov	r6, r0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8011e30:	2048      	movs	r0, #72	; 0x48
 8011e32:	4629      	mov	r1, r5
{
 8011e34:	eef0 8a60 	vmov.f32	s17, s1
 8011e38:	eeb0 9a41 	vmov.f32	s18, s2
 8011e3c:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8011e40:	f002 f832 	bl	8013ea8 <mpool_alloc>
 8011e44:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8011e46:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011e48:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 8011e4c:	686d      	ldr	r5, [r5, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8011e4e:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 8011e50:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011f30 <tVZFilterLS_initToPool+0x10c>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 8011e54:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 8011e58:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011e5c:	eddf 9a35 	vldr	s19, [pc, #212]	; 8011f34 <tVZFilterLS_initToPool+0x110>
    f->sampRatio = 48000.0f / f->sampleRate;
 8011e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8011e64:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011e68:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e6c:	ee27 1a81 	vmul.f32	s2, s15, s2
 8011e70:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 8011e74:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
 8011e78:	686b      	ldr	r3, [r5, #4]
 8011e7a:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011e7c:	f001 fd12 	bl	80138a4 <LEAF_clip>
 8011e80:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 8011e84:	f001 ff8c 	bl	8013da0 <ftom>
    f->R2 =    1.0f/Q;
 8011e88:	ee88 7a28 	vdiv.f32	s14, s16, s17
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8011e8c:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 8011e90:	edd4 7a06 	vldr	s15, [r4, #24]
 8011e94:	eddf 6a28 	vldr	s13, [pc, #160]	; 8011f38 <tVZFilterLS_initToPool+0x114>
    f->cutoffMIDI = ftom(f->fc);
 8011e98:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8011e9c:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 8011ea0:	edc4 8a08 	vstr	s17, [r4, #32]
    f->s1    = 0.0f;
 8011ea4:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 8011ea8:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8011eac:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 8011eb0:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8011eb4:	f007 fc3a 	bl	801972c <tanf>
 8011eb8:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011ebc:	eef0 0a49 	vmov.f32	s1, s18
 8011ec0:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8011f3c <tVZFilterLS_initToPool+0x118>
 8011ec4:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8011f40 <tVZFilterLS_initToPool+0x11c>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8011ec8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8011ecc:	f001 fcea 	bl	80138a4 <LEAF_clip>
 8011ed0:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8011ed4:	f001 fbc0 	bl	8013658 <fastsqrtf>
 8011ed8:	f001 fbbe 	bl	8013658 <fastsqrtf>
 8011edc:	eec8 6a00 	vdiv.f32	s13, s16, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8011ee0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8011ee4:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 8011ee8:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8011f44 <tVZFilterLS_initToPool+0x120>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8011eec:	4a16      	ldr	r2, [pc, #88]	; (8011f48 <tVZFilterLS_initToPool+0x124>)
 8011eee:	4b17      	ldr	r3, [pc, #92]	; (8011f4c <tVZFilterLS_initToPool+0x128>)
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8011ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8011ef4:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8011ef8:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 8011efc:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8011f00:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8011f04:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
 8011f08:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8011f0c:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8011f10:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 8011f14:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 8011f18:	eef4 7ac6 	vcmpe.f32	s15, s12
 8011f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f20:	bfd8      	it	le
 8011f22:	4613      	movle	r3, r2
 8011f24:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 8011f26:	b002      	add	sp, #8
 8011f28:	ecbd 8b04 	vpop	{d8-d9}
 8011f2c:	bd70      	pop	{r4, r5, r6, pc}
 8011f2e:	bf00      	nop
 8011f30:	473b8000 	.word	0x473b8000
 8011f34:	00000000 	.word	0x00000000
 8011f38:	40490fdb 	.word	0x40490fdb
 8011f3c:	457a0000 	.word	0x457a0000
 8011f40:	358637bd 	.word	0x358637bd
 8011f44:	47afc800 	.word	0x47afc800
 8011f48:	0801b9a8 	.word	0x0801b9a8
 8011f4c:	0801f9a8 	.word	0x0801f9a8

08011f50 <tVZFilterLS_init>:
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8011f50:	3118      	adds	r1, #24
 8011f52:	f7ff bf67 	b.w	8011e24 <tVZFilterLS_initToPool>
 8011f56:	bf00      	nop

08011f58 <tVZFilterLS_setSampleRate>:

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 8011f58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8011f5c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8011f90 <tVZFilterLS_setSampleRate+0x38>
    if (sampleRate > 90000)
 8011f60:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8011f94 <tVZFilterLS_setSampleRate+0x3c>
       {
       	f->table = __filterTanhTable_96000;
       }
       else
       {
       	f->table = __filterTanhTable_48000;
 8011f64:	490c      	ldr	r1, [pc, #48]	; (8011f98 <tVZFilterLS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 8011f66:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterLS* f = *vf;
 8011f6a:	6803      	ldr	r3, [r0, #0]
       	f->table = __filterTanhTable_48000;
 8011f6c:	4a0b      	ldr	r2, [pc, #44]	; (8011f9c <tVZFilterLS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 8011f6e:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8011f72:	eec6 7a00 	vdiv.f32	s15, s12, s0
       	f->table = __filterTanhTable_48000;
 8011f76:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8011f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7e:	bfd8      	it	le
 8011f80:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 8011f82:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 8011f86:	641a      	str	r2, [r3, #64]	; 0x40
 8011f88:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
       }
}
 8011f8c:	4770      	bx	lr
 8011f8e:	bf00      	nop
 8011f90:	473b8000 	.word	0x473b8000
 8011f94:	47afc800 	.word	0x47afc800
 8011f98:	0801b9a8 	.word	0x0801b9a8
 8011f9c:	0801f9a8 	.word	0x0801f9a8

08011fa0 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
 8011fa0:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011fa2:	edd3 7a02 	vldr	s15, [r3, #8]
 8011fa6:	ed93 7a01 	vldr	s14, [r3, #4]
 8011faa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011fae:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
 8011fb2:	edd3 5a05 	vldr	s11, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8011fb6:	edd3 6a03 	vldr	s13, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011fba:	eea5 0a47 	vfms.f32	s0, s10, s14
 8011fbe:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->G*yL + f->R2*f->G*yB + yH;
 8011fc2:	ed93 6a07 	vldr	s12, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011fc6:	ee20 0a25 	vmul.f32	s0, s0, s11
    yB = v1 + f->s1;
 8011fca:	eea6 7a80 	vfma.f32	s14, s13, s0
    yL = v2 + f->s2;
 8011fce:	eee6 7a87 	vfma.f32	s15, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8011fd2:	eeb0 5a47 	vmov.f32	s10, s14
 8011fd6:	eea6 5a80 	vfma.f32	s10, s13, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011fda:	eef0 5a67 	vmov.f32	s11, s15
 8011fde:	eee4 7a87 	vfma.f32	s15, s9, s14
 8011fe2:	eee6 5a87 	vfma.f32	s11, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8011fe6:	ed83 5a01 	vstr	s10, [r3, #4]
}
 8011fea:	eea6 0a27 	vfma.f32	s0, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011fee:	edc3 5a02 	vstr	s11, [r3, #8]
}
 8011ff2:	4770      	bx	lr

08011ff4 <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 8011ff4:	eddf 7a21 	vldr	s15, [pc, #132]	; 801207c <tVZFilterLS_setFreqFast+0x88>
 8011ff8:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8011ffc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
 8012000:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
 8012002:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012006:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012008:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
 801200c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
 8012010:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012014:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012018:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
 801201c:	ee16 2a90 	vmov	r2, s13
    f->R2Plusg = f->R2+f->g;
 8012020:	edd3 6a04 	vldr	s13, [r3, #16]
 8012024:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012028:	4562      	cmp	r2, ip
 801202a:	bfa8      	it	ge
 801202c:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801202e:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012032:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012036:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801203a:	ed92 4a01 	vldr	s8, [r2, #4]
 801203e:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012042:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012046:	ee75 5a85 	vadd.f32	s11, s11, s10
 801204a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801204e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012052:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012056:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801205a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 801205e:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012062:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012066:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
 801206a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801206e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012072:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8012076:	edc3 7a05 	vstr	s15, [r3, #20]
}
 801207a:	4770      	bx	lr
 801207c:	41f4898d 	.word	0x41f4898d

08012080 <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
 8012080:	b510      	push	{r4, lr}
        _tVZFilterLS* f = *vf;
 8012082:	6804      	ldr	r4, [r0, #0]
{
 8012084:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012088:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80120d8 <tVZFilterLS_setGain+0x58>
 801208c:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80120dc <tVZFilterLS_setGain+0x5c>
 8012090:	f001 fc08 	bl	80138a4 <LEAF_clip>
 8012094:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8012098:	f001 fade 	bl	8013658 <fastsqrtf>
 801209c:	f001 fadc 	bl	8013658 <fastsqrtf>
 80120a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80120a4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 80120a8:	ed94 7a04 	vldr	s14, [r4, #16]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80120ac:	ee86 6a80 	vdiv.f32	s12, s13, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80120b0:	ee66 7a27 	vmul.f32	s15, s12, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80120b4:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80120b8:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
 80120bc:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80120c0:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80120c4:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 80120c8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80120cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80120d0:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80120d4:	bd10      	pop	{r4, pc}
 80120d6:	bf00      	nop
 80120d8:	457a0000 	.word	0x457a0000
 80120dc:	358637bd 	.word	0x358637bd

080120e0 <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 80120e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
 80120e4:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 80120e6:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
 80120ea:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
 80120ee:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
 80120f2:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
 80120f6:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80120fa:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
 80120fe:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012102:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012106:	ee87 7a86 	vdiv.f32	s14, s15, s12
 801210a:	ed83 7a05 	vstr	s14, [r3, #20]
}
 801210e:	4770      	bx	lr

08012110 <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 8012110:	b570      	push	{r4, r5, r6, lr}
 8012112:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8012116:	680d      	ldr	r5, [r1, #0]
{
 8012118:	b082      	sub	sp, #8
 801211a:	4606      	mov	r6, r0
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 801211c:	2048      	movs	r0, #72	; 0x48
 801211e:	4629      	mov	r1, r5
{
 8012120:	eeb0 8a60 	vmov.f32	s16, s1
 8012124:	eeb0 9a41 	vmov.f32	s18, s2
 8012128:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 801212c:	f001 febc 	bl	8013ea8 <mpool_alloc>
 8012130:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8012132:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012134:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 8012138:	686d      	ldr	r5, [r5, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 801213a:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 801213c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8012218 <tVZFilterHS_initToPool+0x108>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 8012140:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 8012144:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012148:	eddf 9a34 	vldr	s19, [pc, #208]	; 801221c <tVZFilterHS_initToPool+0x10c>
    f->sampRatio = 48000.0f / f->sampleRate;
 801214c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8012150:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
 8012154:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012156:	eddd 0a01 	vldr	s1, [sp, #4]
    f->invSampleRate = leaf->invSampleRate;
 801215a:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801215c:	ee27 1a81 	vmul.f32	s2, s15, s2
 8012160:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 8012164:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012168:	f001 fb9c 	bl	80138a4 <LEAF_clip>
 801216c:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 8012170:	f001 fe16 	bl	8013da0 <ftom>
    f->R2 =    1.0f/Q;
 8012174:	ee88 7a88 	vdiv.f32	s14, s17, s16
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012178:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 801217c:	edd4 7a06 	vldr	s15, [r4, #24]
 8012180:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012220 <tVZFilterHS_initToPool+0x110>
    f->cutoffMIDI = ftom(f->fc);
 8012184:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012188:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 801218c:	ed84 8a08 	vstr	s16, [r4, #32]
    f->s1    = 0.0f;
 8012190:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 8012194:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012198:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 801219c:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80121a0:	f007 fac4 	bl	801972c <tanf>
 80121a4:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80121a8:	eef0 0a49 	vmov.f32	s1, s18
 80121ac:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8012224 <tVZFilterHS_initToPool+0x114>
 80121b0:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012228 <tVZFilterHS_initToPool+0x118>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80121b4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80121b8:	f001 fb74 	bl	80138a4 <LEAF_clip>
 80121bc:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 80121c0:	f001 fa4a 	bl	8013658 <fastsqrtf>
 80121c4:	f001 fa48 	bl	8013658 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80121c8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 80121cc:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80121d0:	eeb0 6a68 	vmov.f32	s12, s17
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80121d4:	ee60 7a27 	vmul.f32	s15, s0, s15
    if (leaf->sampleRate > 90000)
 80121d8:	eddf 6a14 	vldr	s13, [pc, #80]	; 801222c <tVZFilterHS_initToPool+0x11c>
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 80121dc:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80121e0:	4a13      	ldr	r2, [pc, #76]	; (8012230 <tVZFilterHS_initToPool+0x120>)
    f->R2Plusg = f->R2+f->g;
 80121e2:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80121e6:	edc4 7a03 	vstr	s15, [r4, #12]
    	f->table = __filterTanhTable_48000;
 80121ea:	4b12      	ldr	r3, [pc, #72]	; (8012234 <tVZFilterHS_initToPool+0x124>)
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80121ec:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 80121f0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80121f4:	eec8 7a86 	vdiv.f32	s15, s17, s12
 80121f8:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 80121fc:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 8012200:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012208:	bfd8      	it	le
 801220a:	4613      	movle	r3, r2
 801220c:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 801220e:	b002      	add	sp, #8
 8012210:	ecbd 8b04 	vpop	{d8-d9}
 8012214:	bd70      	pop	{r4, r5, r6, pc}
 8012216:	bf00      	nop
 8012218:	473b8000 	.word	0x473b8000
 801221c:	00000000 	.word	0x00000000
 8012220:	40490fdb 	.word	0x40490fdb
 8012224:	457a0000 	.word	0x457a0000
 8012228:	358637bd 	.word	0x358637bd
 801222c:	47afc800 	.word	0x47afc800
 8012230:	0801b9a8 	.word	0x0801b9a8
 8012234:	0801f9a8 	.word	0x0801f9a8

08012238 <tVZFilterHS_init>:
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8012238:	3118      	adds	r1, #24
 801223a:	f7ff bf69 	b.w	8012110 <tVZFilterHS_initToPool>
 801223e:	bf00      	nop

08012240 <tVZFilterHS_setSampleRate>:

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 8012240:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012244:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8012278 <tVZFilterHS_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012248:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801227c <tVZFilterHS_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 801224c:	490c      	ldr	r1, [pc, #48]	; (8012280 <tVZFilterHS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 801224e:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterHS* f = *vf;
 8012252:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 8012254:	4a0b      	ldr	r2, [pc, #44]	; (8012284 <tVZFilterHS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 8012256:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 801225a:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 801225e:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8012262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012266:	bfd8      	it	le
 8012268:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 801226a:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 801226e:	641a      	str	r2, [r3, #64]	; 0x40
 8012270:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
          }
}
 8012274:	4770      	bx	lr
 8012276:	bf00      	nop
 8012278:	473b8000 	.word	0x473b8000
 801227c:	47afc800 	.word	0x47afc800
 8012280:	0801b9a8 	.word	0x0801b9a8
 8012284:	0801f9a8 	.word	0x0801f9a8

08012288 <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
 8012288:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801228a:	edd3 6a02 	vldr	s13, [r3, #8]
 801228e:	ed93 7a01 	vldr	s14, [r3, #4]
 8012292:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012296:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
 801229a:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 801229e:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80122a2:	eee4 7a47 	vfms.f32	s15, s8, s14
 80122a6:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + f->G*yH;
 80122aa:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80122ae:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 80122b2:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
 80122b6:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80122ba:	eeb0 5a47 	vmov.f32	s10, s14
 80122be:	eea6 5a27 	vfma.f32	s10, s12, s15
 80122c2:	eee4 7a87 	vfma.f32	s15, s9, s14
    yL = v2 + f->s2;
 80122c6:	eeb0 0a66 	vmov.f32	s0, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 80122ca:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80122ce:	ed83 5a01 	vstr	s10, [r3, #4]
}
 80122d2:	eea5 0aa7 	vfma.f32	s0, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 80122d6:	edc3 6a02 	vstr	s13, [r3, #8]
}
 80122da:	4770      	bx	lr

080122dc <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 80122dc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8012364 <tVZFilterHS_setFreqFast+0x88>
 80122e0:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80122e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
 80122e8:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
 80122ea:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80122ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80122f0:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
 80122f4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
 80122f8:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80122fc:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012300:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
 8012304:	ee16 2a90 	vmov	r2, s13
    
    f->R2Plusg = f->R2+f->g;
 8012308:	edd3 6a04 	vldr	s13, [r3, #16]
 801230c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012310:	4562      	cmp	r2, ip
 8012312:	bfa8      	it	ge
 8012314:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012316:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801231a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801231e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012322:	ed92 4a01 	vldr	s8, [r2, #4]
 8012326:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801232a:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801232e:	ee75 5a85 	vadd.f32	s11, s11, s10
 8012332:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012336:	ee67 7a84 	vmul.f32	s15, s15, s8
 801233a:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801233e:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012342:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8012346:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801234a:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801234e:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
 8012352:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012356:	eee7 6a27 	vfma.f32	s13, s14, s15
 801235a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801235e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8012362:	4770      	bx	lr
 8012364:	41f4898d 	.word	0x41f4898d

08012368 <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
 8012368:	b510      	push	{r4, lr}
        _tVZFilterHS* f = *vf;
 801236a:	6804      	ldr	r4, [r0, #0]
{
 801236c:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012370:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80123bc <tVZFilterHS_setGain+0x54>
 8012374:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80123c0 <tVZFilterHS_setGain+0x58>
 8012378:	f001 fa94 	bl	80138a4 <LEAF_clip>
 801237c:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 8012380:	f001 f96a 	bl	8013658 <fastsqrtf>
 8012384:	f001 f968 	bl	8013658 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012388:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801238c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8012390:	ed94 7a04 	vldr	s14, [r4, #16]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012394:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 8012398:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801239c:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
 80123a0:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80123a4:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80123a8:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 80123ac:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80123b0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80123b4:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80123b8:	bd10      	pop	{r4, pc}
 80123ba:	bf00      	nop
 80123bc:	457a0000 	.word	0x457a0000
 80123c0:	358637bd 	.word	0x358637bd

080123c4 <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 80123c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
 80123c8:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 80123ca:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
 80123ce:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
 80123d2:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
 80123d6:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
 80123da:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80123de:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
 80123e2:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80123e6:	eea6 6a87 	vfma.f32	s12, s13, s14
 80123ea:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80123ee:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80123f2:	4770      	bx	lr

080123f4 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
 80123f4:	b570      	push	{r4, r5, r6, lr}
 80123f6:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
 80123fa:	680d      	ldr	r5, [r1, #0]
{
 80123fc:	4606      	mov	r6, r0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 80123fe:	2040      	movs	r0, #64	; 0x40
{
 8012400:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012404:	4629      	mov	r1, r5
{
 8012406:	eef0 9a60 	vmov.f32	s19, s1
 801240a:	eeb0 aa41 	vmov.f32	s20, s2
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 801240e:	f001 fd4b 	bl	8013ea8 <mpool_alloc>
 8012412:	6030      	str	r0, [r6, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012414:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    f->mempool = m;
 8012418:	6005      	str	r5, [r0, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 801241a:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
 801241c:	686d      	ldr	r5, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801241e:	eef0 0a48 	vmov.f32	s1, s16
    f->sampRatio = 48000.0f / f->sampleRate;
 8012422:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012544 <tVZFilterBell_initToPool+0x150>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012426:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 801242a:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801242e:	ed9f 9a46 	vldr	s18, [pc, #280]	; 8012548 <tVZFilterBell_initToPool+0x154>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8012436:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
 801243a:	686b      	ldr	r3, [r5, #4]
    f->g = tanf(PI * freq * f->invSampleRate);
 801243c:	eddf aa43 	vldr	s21, [pc, #268]	; 801254c <tVZFilterBell_initToPool+0x158>
    f->invSampleRate = leaf->invSampleRate;
 8012440:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012442:	ee27 1a81 	vmul.f32	s2, s15, s2
 8012446:	eeb0 0a49 	vmov.f32	s0, s18
    f->g = tanf(PI * freq * f->invSampleRate);
 801244a:	ee28 8a2a 	vmul.f32	s16, s16, s21
    f->sampRatio = 48000.0f / f->sampleRate;
 801244e:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012452:	f001 fa27 	bl	80138a4 <LEAF_clip>
 8012456:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 801245a:	f001 fca1 	bl	8013da0 <ftom>
 801245e:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012462:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8012550 <tVZFilterBell_initToPool+0x15c>
 8012466:	eef0 0a4a 	vmov.f32	s1, s20
    f->B = BW;
 801246a:	edc4 9a08 	vstr	s19, [r4, #32]
    f->cutoffMIDI = ftom(f->fc);
 801246e:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    f->s1    = 0.0f;
 8012472:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
 8012476:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801247a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8012554 <tVZFilterBell_initToPool+0x160>
 801247e:	f001 fa11 	bl	80138a4 <LEAF_clip>
    f->g = tanf(PI * freq * f->invSampleRate);
 8012482:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012486:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
 801248a:	ee28 0a27 	vmul.f32	s0, s16, s15
 801248e:	f007 f94d 	bl	801972c <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012492:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
 8012496:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 801249a:	edd4 0a08 	vldr	s1, [r4, #32]
 801249e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80124a2:	ed94 8a06 	vldr	s16, [r4, #24]
 80124a6:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
 80124aa:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80124ae:	f001 f981 	bl	80137b4 <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80124b2:	ee20 0a2a 	vmul.f32	s0, s0, s21
 80124b6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80124ba:	ee20 0a08 	vmul.f32	s0, s0, s16
 80124be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80124c2:	f001 f8b5 	bl	8013630 <fastertanf>
    Lfloat r  = f->g/wl;
 80124c6:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80124ca:	eeb0 5a68 	vmov.f32	s10, s17
 80124ce:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
 80124d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80124d6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80124da:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80124de:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80124e2:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
 80124e6:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80124ea:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80124ee:	ee77 7a65 	vsub.f32	s15, s14, s11
 80124f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80124f6:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80124fa:	f001 f8ad 	bl	8013658 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 80124fe:	ed94 7a03 	vldr	s14, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 8012502:	eddf 6a15 	vldr	s13, [pc, #84]	; 8012558 <tVZFilterBell_initToPool+0x164>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012506:	4a15      	ldr	r2, [pc, #84]	; (801255c <tVZFilterBell_initToPool+0x168>)
 8012508:	4b15      	ldr	r3, [pc, #84]	; (8012560 <tVZFilterBell_initToPool+0x16c>)
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801250a:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801250e:	eeb0 6a68 	vmov.f32	s12, s17
    f->R2Plusg = f->R2+f->g;
 8012512:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012516:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801251a:	eea7 6a27 	vfma.f32	s12, s14, s15
    f->R2Plusg = f->R2+f->g;
 801251e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012522:	eec8 7a86 	vdiv.f32	s15, s17, s12
 8012526:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 801252a:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 801252e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012536:	bfd8      	it	le
 8012538:	4613      	movle	r3, r2
 801253a:	63a3      	str	r3, [r4, #56]	; 0x38
    }
}
 801253c:	ecbd 8b06 	vpop	{d8-d10}
 8012540:	bd70      	pop	{r4, r5, r6, pc}
 8012542:	bf00      	nop
 8012544:	473b8000 	.word	0x473b8000
 8012548:	00000000 	.word	0x00000000
 801254c:	40490fdb 	.word	0x40490fdb
 8012550:	457a0000 	.word	0x457a0000
 8012554:	358637bd 	.word	0x358637bd
 8012558:	47afc800 	.word	0x47afc800
 801255c:	0801b9a8 	.word	0x0801b9a8
 8012560:	0801f9a8 	.word	0x0801f9a8

08012564 <tVZFilterBell_init>:
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
 8012564:	3118      	adds	r1, #24
 8012566:	f7ff bf45 	b.w	80123f4 <tVZFilterBell_initToPool>
 801256a:	bf00      	nop

0801256c <tVZFilterBell_setSampleRate>:

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 801256c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012570:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80125a4 <tVZFilterBell_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012574:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80125a8 <tVZFilterBell_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 8012578:	490c      	ldr	r1, [pc, #48]	; (80125ac <tVZFilterBell_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 801257a:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterBell* f = *vf;
 801257e:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 8012580:	4a0b      	ldr	r2, [pc, #44]	; (80125b0 <tVZFilterBell_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 8012582:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
 8012586:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 801258a:	eeb4 0ae6 	vcmpe.f32	s0, s13
 801258e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012592:	bfd8      	it	le
 8012594:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 8012596:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 801259a:	639a      	str	r2, [r3, #56]	; 0x38
 801259c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
          }
}
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	473b8000 	.word	0x473b8000
 80125a8:	47afc800 	.word	0x47afc800
 80125ac:	0801b9a8 	.word	0x0801b9a8
 80125b0:	0801f9a8 	.word	0x0801f9a8

080125b4 <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
 80125b4:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80125b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80125ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80125be:	ee70 7a66 	vsub.f32	s15, s0, s13
 80125c2:	ed93 4a09 	vldr	s8, [r3, #36]	; 0x24
 80125c6:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80125ca:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80125ce:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + yH;
 80125d2:	edd3 5a04 	vldr	s11, [r3, #16]
 80125d6:	edd3 4a07 	vldr	s9, [r3, #28]
 80125da:	ee65 5aa4 	vmul.f32	s11, s11, s9
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80125de:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 80125e2:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
 80125e6:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80125ea:	eeb0 5a47 	vmov.f32	s10, s14
 80125ee:	eea6 5a27 	vfma.f32	s10, s12, s15
 80125f2:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 80125f6:	eef0 5a66 	vmov.f32	s11, s13
 80125fa:	eee6 5a07 	vfma.f32	s11, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80125fe:	ed83 5a01 	vstr	s10, [r3, #4]
}
 8012602:	ee36 0aa7 	vadd.f32	s0, s13, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012606:	edc3 5a02 	vstr	s11, [r3, #8]
}
 801260a:	4770      	bx	lr

0801260c <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
 801260c:	eef0 7a40 	vmov.f32	s15, s0
        _tVZFilterBell* f = *vf;
    f->B = bandWidth;
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012610:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
 8012614:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
{
 8012618:	b510      	push	{r4, lr}
        _tVZFilterBell* f = *vf;
 801261a:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 801261c:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
 8012620:	ed2d 8b02 	vpush	{d8}
    f->B = bandWidth;
 8012624:	edc4 7a08 	vstr	s15, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012628:	ed94 8a06 	vldr	s16, [r4, #24]
 801262c:	f001 f8c2 	bl	80137b4 <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012630:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8012634:	eddf 7a17 	vldr	s15, [pc, #92]	; 8012694 <tVZFilterBell_setBandwidth+0x88>
 8012638:	ee28 8a07 	vmul.f32	s16, s16, s14
 801263c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012640:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012644:	f000 fff4 	bl	8013630 <fastertanf>
    Lfloat r  = f->g/wl;
 8012648:	edd4 6a03 	vldr	s13, [r4, #12]
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801264c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat r  = f->g/wl;
 8012650:	eec6 7a80 	vdiv.f32	s15, s13, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012654:	ed94 0a07 	vldr	s0, [r4, #28]
 8012658:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801265c:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012660:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012664:	eea7 7aa7 	vfma.f32	s14, s15, s15
    f->rToUse = r;
 8012668:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801266c:	eef0 6a47 	vmov.f32	s13, s14
 8012670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012674:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012678:	ee67 7a86 	vmul.f32	s15, s15, s12
 801267c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012680:	f000 ffea 	bl	8013658 <fastsqrtf>
 8012684:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012688:	ed84 0a04 	vstr	s0, [r4, #16]
}
 801268c:	ecbd 8b02 	vpop	{d8}
 8012690:	bd10      	pop	{r4, pc}
 8012692:	bf00      	nop
 8012694:	40490fdb 	.word	0x40490fdb

08012698 <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
 8012698:	b510      	push	{r4, lr}
 801269a:	ed2d 8b02 	vpush	{d8}
 801269e:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 801274c <tVZFilterBell_setFreq+0xb4>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80126a2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
 80126a6:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
 80126a8:	ee20 8a08 	vmul.f32	s16, s0, s16
    f->g = tanf(PI * freq * f->invSampleRate);
 80126ac:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->fc = freq;
 80126b0:	ed84 0a06 	vstr	s0, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
 80126b4:	ee28 0a27 	vmul.f32	s0, s16, s15
 80126b8:	f007 f838 	bl	801972c <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80126bc:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
 80126c0:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80126c4:	edd4 0a08 	vldr	s1, [r4, #32]
 80126c8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80126cc:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
 80126d0:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80126d4:	f001 f86e 	bl	80137b4 <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80126d8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80126dc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80126e0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80126e4:	f000 ffa4 	bl	8013630 <fastertanf>
    Lfloat r  = f->g/wl;
 80126e8:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80126ec:	eeb0 5a68 	vmov.f32	s10, s17
 80126f0:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
 80126f4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80126f8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80126fc:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012700:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012704:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
 8012708:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801270c:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8012710:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012714:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012718:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 801271c:	f000 ff9c 	bl	8013658 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012720:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012724:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012728:	eef0 6a68 	vmov.f32	s13, s17
    f->R2Plusg = f->R2+f->g;
 801272c:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012730:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012734:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012738:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801273c:	eec8 7aa6 	vdiv.f32	s15, s17, s13
 8012740:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012744:	ecbd 8b02 	vpop	{d8}
 8012748:	bd10      	pop	{r4, pc}
 801274a:	bf00      	nop
 801274c:	40490fdb 	.word	0x40490fdb

08012750 <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 8012750:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012860 <tVZFilterBell_setFreqFast+0x110>
	{
		intVer = 0;
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012754:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 8012758:	f640 7cfe 	movw	ip, #4094	; 0xffe

    Lfloat r  = f->g/gLower;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801275c:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    cutoff *= 30.567164179104478f;
 8012760:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012764:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
	int32_t intVer = (int32_t)cutoff;
 8012768:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
 801276c:	b510      	push	{r4, lr}
    _tVZFilterBell* f = *vf;
 801276e:	6804      	ldr	r4, [r0, #0]
	int32_t intVer = (int32_t)cutoff;
 8012770:	ee17 3a10 	vmov	r3, s14
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012774:	eeb0 7a67 	vmov.f32	s14, s15
 8012778:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
{
 801277c:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012780:	ed94 6a08 	vldr	s12, [r4, #32]
 8012784:	4563      	cmp	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012786:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801278a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 801278c:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012790:	bfa8      	it	ge
 8012792:	4663      	movge	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012794:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012798:	ee05 3a10 	vmov	s10, r3
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801279c:	ee38 6a67 	vsub.f32	s12, s16, s15
 80127a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    f->cutoffMIDI = cutoff;
 80127a4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80127a8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80127ac:	ed94 0a07 	vldr	s0, [r4, #28]
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127b0:	ed93 3a01 	vldr	s6, [r3, #4]
	intVer = (int32_t)fl;
 80127b4:	eefd 6ac7 	vcvt.s32.f32	s13, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127b8:	edd3 3a00 	vldr	s7, [r3]
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80127bc:	ee77 7ac5 	vsub.f32	s15, s15, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127c0:	ee36 6a05 	vadd.f32	s12, s12, s10
	intVer = (int32_t)fl;
 80127c4:	ee16 2a90 	vmov	r2, s13
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127c8:	ee78 6a47 	vsub.f32	s13, s16, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80127d0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80127d4:	4562      	cmp	r2, ip
 80127d6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80127da:	bfa8      	it	ge
 80127dc:	4662      	movge	r2, ip
 80127de:	eee3 7a86 	vfma.f32	s15, s7, s12
	LfloatVer = fl - (Lfloat)intVer;
 80127e2:	ee05 2a10 	vmov	s10, r2
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127e6:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	LfloatVer = fl - (Lfloat)intVer;
 80127ea:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80127ee:	ee37 7a45 	vsub.f32	s14, s14, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127f2:	edc4 7a03 	vstr	s15, [r4, #12]
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80127f6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80127fa:	ed93 6a00 	vldr	s12, [r3]
 80127fe:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012802:	edd3 5a01 	vldr	s11, [r3, #4]
 8012806:	ee27 7a25 	vmul.f32	s14, s14, s11
 801280a:	eea6 7a26 	vfma.f32	s14, s12, s13
    Lfloat r  = f->g/gLower;
 801280e:	eec7 6a87 	vdiv.f32	s13, s15, s14
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012812:	ee66 7aa6 	vmul.f32	s15, s13, s13
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012816:	eef0 6a48 	vmov.f32	s13, s16
    f->rToUse = r;
 801281a:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801281e:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8012822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012826:	ee77 7a44 	vsub.f32	s15, s14, s8
 801282a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801282e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012832:	f000 ff11 	bl	8013658 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012836:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801283a:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801283e:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 8012842:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012846:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801284a:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 801284e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012852:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8012856:	edc4 7a05 	vstr	s15, [r4, #20]
}
 801285a:	ecbd 8b02 	vpop	{d8}
 801285e:	bd10      	pop	{r4, pc}
 8012860:	41f4898d 	.word	0x41f4898d

08012864 <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
 8012864:	b510      	push	{r4, lr}
 8012866:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 801286a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
 801286e:	6804      	ldr	r4, [r0, #0]
{
 8012870:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012874:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80128d8 <tVZFilterBell_setGain+0x74>
 8012878:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80128dc <tVZFilterBell_setGain+0x78>
 801287c:	f001 f812 	bl	80138a4 <LEAF_clip>
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012880:	eef0 5a48 	vmov.f32	s11, s16
 8012884:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8012888:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801288c:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012890:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012894:	eee7 5a07 	vfma.f32	s11, s14, s14
 8012898:	eec5 7a87 	vdiv.f32	s15, s11, s14
 801289c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80128a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80128a4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80128a8:	f000 fed6 	bl	8013658 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 80128ac:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 80128b0:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80128b4:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 80128b8:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 80128bc:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80128c0:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 80128c4:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80128c8:	eec8 7a26 	vdiv.f32	s15, s16, s13
 80128cc:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80128d0:	ecbd 8b02 	vpop	{d8}
 80128d4:	bd10      	pop	{r4, pc}
 80128d6:	bf00      	nop
 80128d8:	457a0000 	.word	0x457a0000
 80128dc:	358637bd 	.word	0x358637bd

080128e0 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
 80128e0:	b570      	push	{r4, r5, r6, lr}
 80128e2:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 80128e6:	698d      	ldr	r5, [r1, #24]
{
 80128e8:	eeb0 8a40 	vmov.f32	s16, s0
 80128ec:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80128ee:	2048      	movs	r0, #72	; 0x48
 80128f0:	4629      	mov	r1, r5
{
 80128f2:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80128f6:	f001 fad7 	bl	8013ea8 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 80128fa:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8012998 <tDiodeFilter_init+0xb8>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80128fe:	6030      	str	r0, [r6, #0]
 8012900:	4604      	mov	r4, r0
    f->mempool = m;
 8012902:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012904:	ee28 0a00 	vmul.f32	s0, s16, s0
    LEAF* leaf = f->mempool->leaf;
 8012908:	686d      	ldr	r5, [r5, #4]
    f->invSampleRate = leaf->invSampleRate;
 801290a:	edd5 7a01 	vldr	s15, [r5, #4]
    f->cutoff = cutoff;
 801290e:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012912:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->invSampleRate = leaf->invSampleRate;
 8012916:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 801291a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801291e:	f006 ff9b 	bl	8019858 <tan>
 8012922:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    f->cutoffMIDI = ftom(cutoff);
 8012926:	eeb0 0a48 	vmov.f32	s0, s16
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 801292a:	edc4 7a02 	vstr	s15, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
 801292e:	f001 fa37 	bl	8013da0 <ftom>
    f->r = (7.f * resonance + 0.5f);
 8012932:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012936:	eeb1 6a0c 	vmov.f32	s12, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 801293a:	4b18      	ldr	r3, [pc, #96]	; (801299c <tDiodeFilter_init+0xbc>)
    f->gamma = f->Vt*f->n;
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 801293c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->zi = 0.0f; //previous input value
 8012940:	2100      	movs	r1, #0
    f->r = (7.f * resonance + 0.5f);
 8012942:	eef0 6a67 	vmov.f32	s13, s15
    f->n = 1.836f;
 8012946:	6163      	str	r3, [r4, #20]
    f->gamma = f->Vt*f->n;
 8012948:	4b15      	ldr	r3, [pc, #84]	; (80129a0 <tDiodeFilter_init+0xc0>)
    f->zi = 0.0f; //previous input value
 801294a:	61e1      	str	r1, [r4, #28]
    f->r = (7.f * resonance + 0.5f);
 801294c:	eee8 6a86 	vfma.f32	s13, s17, s12
    f->g0inv = 1.f/(2.f*f->Vt);
 8012950:	6222      	str	r2, [r4, #32]
    f->gamma = f->Vt*f->n;
 8012952:	61a3      	str	r3, [r4, #24]
    f->g1inv = 1.f/(2.f*f->gamma);
 8012954:	4913      	ldr	r1, [pc, #76]	; (80129a4 <tDiodeFilter_init+0xc4>)
    f->g2inv = 1.f/(6.f*f->gamma);
 8012956:	4a14      	ldr	r2, [pc, #80]	; (80129a8 <tDiodeFilter_init+0xc8>)
    f->s0 = 0.01f;
 8012958:	4b14      	ldr	r3, [pc, #80]	; (80129ac <tDiodeFilter_init+0xcc>)
    f->g1inv = 1.f/(2.f*f->gamma);
 801295a:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 801295c:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s0 = 0.01f;
 801295e:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
 8012960:	4a13      	ldr	r2, [pc, #76]	; (80129b0 <tDiodeFilter_init+0xd0>)
    f->s3 = 0.04f;
 8012962:	4b14      	ldr	r3, [pc, #80]	; (80129b4 <tDiodeFilter_init+0xd4>)
    f->s1 = 0.02f;
 8012964:	4914      	ldr	r1, [pc, #80]	; (80129b8 <tDiodeFilter_init+0xd8>)
    f->s2 = 0.03f;
 8012966:	6362      	str	r2, [r4, #52]	; 0x34
    f->s3 = 0.04f;
 8012968:	63a3      	str	r3, [r4, #56]	; 0x38
    f->cutoffMIDI = ftom(cutoff);
 801296a:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Vt = 0.5f;
 801296e:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 8012972:	edc4 6a03 	vstr	s13, [r4, #12]
    f->s1 = 0.02f;
 8012976:	6321      	str	r1, [r4, #48]	; 0x30
    if (leaf->sampleRate > 90000)
 8012978:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80129bc <tDiodeFilter_init+0xdc>
 801297c:	edd5 7a00 	vldr	s15, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012980:	4a0f      	ldr	r2, [pc, #60]	; (80129c0 <tDiodeFilter_init+0xe0>)
 8012982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012986:	4b0f      	ldr	r3, [pc, #60]	; (80129c4 <tDiodeFilter_init+0xe4>)
 8012988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801298c:	bfd8      	it	le
 801298e:	4613      	movle	r3, r2
 8012990:	6423      	str	r3, [r4, #64]	; 0x40
}
 8012992:	ecbd 8b02 	vpop	{d8}
 8012996:	bd70      	pop	{r4, r5, r6, pc}
 8012998:	40490fdb 	.word	0x40490fdb
 801299c:	3feb020c 	.word	0x3feb020c
 80129a0:	3f6b020c 	.word	0x3f6b020c
 80129a4:	3f0b6efd 	.word	0x3f0b6efd
 80129a8:	3e39e952 	.word	0x3e39e952
 80129ac:	3c23d70a 	.word	0x3c23d70a
 80129b0:	3cf5c28f 	.word	0x3cf5c28f
 80129b4:	3d23d70a 	.word	0x3d23d70a
 80129b8:	3ca3d70a 	.word	0x3ca3d70a
 80129bc:	47afc800 	.word	0x47afc800
 80129c0:	0801b9a8 	.word	0x0801b9a8
 80129c4:	0801f9a8 	.word	0x0801f9a8

080129c8 <tDiodeFilter_tick>:
}

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
 80129c8:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 80129ca:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80129cc:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80129d0:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
 80129d4:	eddf 6aee 	vldr	s13, [pc, #952]	; 8012d90 <tDiodeFilter_tick+0x3c8>
    if (testVal!= 0.0f)
 80129d8:	eddf 5aee 	vldr	s11, [pc, #952]	; 8012d94 <tDiodeFilter_tick+0x3cc>
{
 80129dc:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80129e0:	ed94 4a03 	vldr	s8, [r4, #12]
{
 80129e4:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80129e8:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
 80129ec:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80129f0:	ee67 7a44 	vnmul.f32	s15, s14, s8
 80129f4:	ed94 5a08 	vldr	s10, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 80129f8:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80129fc:	ed94 2a02 	vldr	s4, [r4, #8]
 8012a00:	eee6 7a23 	vfma.f32	s15, s12, s7
 8012a04:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
 8012a08:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012a0c:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8012a10:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
 8012a14:	eef4 6a65 	vcmp.f32	s13, s11
 8012a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1c:	f000 81aa 	beq.w	8012d74 <tDiodeFilter_tick+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012a20:	ed9f 6add 	vldr	s12, [pc, #884]	; 8012d98 <tDiodeFilter_tick+0x3d0>
 8012a24:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012a28:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012a2c:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012a30:	edd4 3a0b 	vldr	s7, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012a34:	ee22 5a05 	vmul.f32	s10, s4, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012a38:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012a3c:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012a40:	ee70 6a63 	vsub.f32	s13, s0, s7
    return ((a + 105.0f)*a + 945.0f) / output;
 8012a44:	eddf 1ad4 	vldr	s3, [pc, #848]	; 8012d98 <tDiodeFilter_tick+0x3d0>
 8012a48:	eddf 4ad4 	vldr	s9, [pc, #848]	; 8012d9c <tDiodeFilter_tick+0x3d4>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012a4c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012a50:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012a54:	ed9f 6ace 	vldr	s12, [pc, #824]	; 8012d90 <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8012a58:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012a5c:	ee66 6aa2 	vmul.f32	s13, s13, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012a60:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
 8012a64:	eddf 4acb 	vldr	s9, [pc, #812]	; 8012d94 <tDiodeFilter_tick+0x3cc>
    Lfloat a = x*x;
 8012a68:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012a6c:	eef0 7a46 	vmov.f32	s15, s12
 8012a70:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 8012d90 <tDiodeFilter_tick+0x3c8>
 8012a74:	eee6 7a81 	vfma.f32	s15, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012a78:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 8012d98 <tDiodeFilter_tick+0x3d0>
 8012a7c:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012a84:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012a88:	eeb0 8a41 	vmov.f32	s16, s2
    if (testVal!= 0.0f)
 8012a8c:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012a90:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 8012a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012a98:	bf18      	it	ne
 8012a9a:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012a9e:	ee74 7ac0 	vsub.f32	s15, s9, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012aa2:	ee23 3a05 	vmul.f32	s6, s6, s10
    return ((a + 105.0f)*a + 945.0f) / output;
 8012aa6:	ed9f 5abd 	vldr	s10, [pc, #756]	; 8012d9c <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
 8012aaa:	bf08      	it	eq
 8012aac:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012ab0:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012ab4:	ee36 5a85 	vadd.f32	s10, s13, s10
 8012ab8:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
 8012abc:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
 8012ac0:	eea6 8a85 	vfma.f32	s16, s13, s10
 8012ac4:	ed9f 5ab5 	vldr	s10, [pc, #724]	; 8012d9c <tDiodeFilter_tick+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012ac8:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8012acc:	ee37 5a85 	vadd.f32	s10, s15, s10
 8012ad0:	eec8 6a25 	vdiv.f32	s13, s16, s11
    if (testVal!= 0.0f)
 8012ad4:	eddf 5aaf 	vldr	s11, [pc, #700]	; 8012d94 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012ad8:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
 8012adc:	eeb4 6a65 	vcmp.f32	s12, s11
 8012ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012ae4:	bf18      	it	ne
 8012ae6:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012aea:	ed9f 1aab 	vldr	s2, [pc, #684]	; 8012d98 <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8012aee:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 8012af2:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
 8012af6:	bf08      	it	eq
 8012af8:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8012afc:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b00:	eee7 0a85 	vfma.f32	s1, s15, s10
    if (testVal!= 0.0f)
 8012b04:	ed9f 5aa3 	vldr	s10, [pc, #652]	; 8012d94 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012b08:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 8012b0c:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012b10:	ee66 6aa1 	vmul.f32	s13, s13, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b14:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012b18:	eddf 5a9d 	vldr	s11, [pc, #628]	; 8012d90 <tDiodeFilter_tick+0x3c8>
 8012b1c:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b20:	eddf 2a9d 	vldr	s5, [pc, #628]	; 8012d98 <tDiodeFilter_tick+0x3d0>
 8012b24:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012b28:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
 8012b2c:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012b30:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
 8012b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012b38:	bf18      	it	ne
 8012b3a:	ee35 5a81 	vaddne.f32	s10, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b3e:	eddf 5a97 	vldr	s11, [pc, #604]	; 8012d9c <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
 8012b42:	bf08      	it	eq
 8012b44:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012b48:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b4c:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012b50:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b54:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012b58:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 8012d90 <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b5c:	eec0 5a85 	vdiv.f32	s11, s1, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012b60:	ee27 5a01 	vmul.f32	s10, s14, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012b64:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8012b68:	ee37 1a00 	vadd.f32	s2, s14, s0
    Lfloat a = x*x;
 8012b6c:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012b70:	eea5 6a20 	vfma.f32	s12, s10, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b74:	eddf 0a88 	vldr	s1, [pc, #544]	; 8012d98 <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8012b78:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
 8012b7c:	eddf 1a85 	vldr	s3, [pc, #532]	; 8012d94 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012b80:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
 8012b84:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b88:	eddf 1a84 	vldr	s3, [pc, #528]	; 8012d9c <tDiodeFilter_tick+0x3d4>
 8012b8c:	ee75 1a21 	vadd.f32	s3, s10, s3
    if (testVal!= 0.0f)
 8012b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
 8012b94:	eee5 0a21 	vfma.f32	s1, s10, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012b98:	bf14      	ite	ne
 8012b9a:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
 8012b9e:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012ba2:	ee37 6a24 	vadd.f32	s12, s14, s9
 8012ba6:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012baa:	ee80 5aa2 	vdiv.f32	s10, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012bae:	ee73 2aa4 	vadd.f32	s5, s7, s9
 8012bb2:	ee74 0a81 	vadd.f32	s1, s9, s2
 8012bb6:	ee72 2a81 	vadd.f32	s5, s5, s2
 8012bba:	eeb0 1a60 	vmov.f32	s2, s1
 8012bbe:	eef0 0a61 	vmov.f32	s1, s3
 8012bc2:	eee9 2a03 	vfma.f32	s5, s18, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012bc6:	ee25 5a02 	vmul.f32	s10, s10, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012bca:	eea2 1aa6 	vfma.f32	s2, s5, s13
 8012bce:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012bd2:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 8012bd6:	ee35 8a28 	vadd.f32	s16, s10, s17
 8012bda:	eea6 6aa2 	vfma.f32	s12, s13, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012bde:	ee67 2a26 	vmul.f32	s5, s14, s13
 8012be2:	eee5 0a21 	vfma.f32	s1, s10, s3
 8012be6:	eea1 6a27 	vfma.f32	s12, s2, s15
 8012bea:	eeb0 1a47 	vmov.f32	s2, s14
 8012bee:	eea2 1aa1 	vfma.f32	s2, s5, s3
 8012bf2:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8012bf6:	eee7 2a21 	vfma.f32	s5, s14, s3
 8012bfa:	eea2 1aa7 	vfma.f32	s2, s5, s15
 8012bfe:	eef0 2a41 	vmov.f32	s5, s2
 8012c02:	eeb0 1a42 	vmov.f32	s2, s4
 8012c06:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012c0a:	eea4 1a03 	vfma.f32	s2, s8, s6
 8012c0e:	eeb0 6a42 	vmov.f32	s12, s4
 8012c12:	eea5 6a21 	vfma.f32	s12, s10, s3
 8012c16:	ee35 2a01 	vadd.f32	s4, s10, s2
 8012c1a:	ee35 1a29 	vadd.f32	s2, s10, s19
 8012c1e:	eea2 8a26 	vfma.f32	s16, s4, s13
 8012c22:	ee35 2a21 	vadd.f32	s4, s10, s3
 8012c26:	eea6 2a26 	vfma.f32	s4, s12, s13
 8012c2a:	eeb0 6a45 	vmov.f32	s12, s10
 8012c2e:	eea8 2a27 	vfma.f32	s4, s16, s15
 8012c32:	ee21 8a26 	vmul.f32	s16, s2, s13
 8012c36:	eee8 0a28 	vfma.f32	s1, s16, s17
 8012c3a:	eea8 6a21 	vfma.f32	s12, s16, s3
 8012c3e:	eea0 6aa7 	vfma.f32	s12, s1, s15
 8012c42:	eea2 6a25 	vfma.f32	s12, s4, s11
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 8012c46:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 8012c4a:	eeb4 6a42 	vcmp.f32	s12, s4
 8012c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8012c52:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012c56:	bf14      	ite	ne
 8012c58:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
 8012c5c:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 8012da0 <tDiodeFilter_tick+0x3d8>
    if (t1 == 0.0f)
 8012c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8012c64:	ee82 2a86 	vdiv.f32	s4, s5, s12
    if (t1 == 0.0f)
 8012c68:	f000 808c 	beq.w	8012d84 <tDiodeFilter_tick+0x3bc>
 8012c6c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8012c70:	ee76 1aa1 	vadd.f32	s3, s13, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8012c74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c7c:	d07d      	beq.n	8012d7a <tDiodeFilter_tick+0x3b2>
 8012c7e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8012c82:	ee77 2aa2 	vadd.f32	s5, s15, s5
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8012c86:	eef5 5a40 	vcmp.f32	s11, #0.0
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
 8012c8a:	ee24 aa02 	vmul.f32	s20, s8, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8012c8e:	eeb0 4a47 	vmov.f32	s8, s14
    if (t3 == 0.0f)
 8012c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c96:	eef0 0a64 	vmov.f32	s1, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8012c9a:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
 8012c9e:	bf08      	it	eq
 8012ca0:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 8012da0 <tDiodeFilter_tick+0x3d8>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8012ca4:	ee31 1a25 	vadd.f32	s2, s2, s11
 8012ca8:	eee5 0a82 	vfma.f32	s1, s11, s4
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8012cac:	ee75 2aa2 	vadd.f32	s5, s11, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8012cb0:	ee91 4a02 	vfnms.f32	s8, s2, s4
 8012cb4:	eeb0 1a40 	vmov.f32	s2, s0
 8012cb8:	ee84 6a25 	vdiv.f32	s12, s8, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8012cbc:	eeb0 4a60 	vmov.f32	s8, s1
    Lfloat xx = (in - f->r*y3);
 8012cc0:	ee79 0a4a 	vsub.f32	s1, s18, s20
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8012cc4:	ee92 4a86 	vfnms.f32	s8, s5, s12
 8012cc8:	eea7 1a86 	vfma.f32	s2, s15, s12
 8012ccc:	eec4 2a27 	vdiv.f32	s5, s8, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8012cd0:	ee91 1aa2 	vfnms.f32	s2, s3, s5
 8012cd4:	ee81 4a26 	vdiv.f32	s8, s2, s13
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8012cd8:	ee32 4ac4 	vsub.f32	s8, s5, s8
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8012cdc:	ee76 2a62 	vsub.f32	s5, s12, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8012ce0:	ee32 6a46 	vsub.f32	s12, s4, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8012ce4:	ee64 6a26 	vmul.f32	s13, s8, s13
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8012ce8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8012cec:	eef0 1a66 	vmov.f32	s3, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8012cf0:	eee3 6a20 	vfma.f32	s13, s6, s1
 8012cf4:	eeb0 4a46 	vmov.f32	s8, s12
 8012cf8:	eed2 1aa7 	vfnms.f32	s3, s5, s15
 8012cfc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012d00:	eea2 4ae7 	vfms.f32	s8, s5, s15
 8012d04:	eea5 6a02 	vfma.f32	s12, s10, s4
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->s0 = tanhf(f->s0);
 8012d08:	eee6 3aa5 	vfma.f32	s7, s13, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8012d0c:	eea1 0aa5 	vfma.f32	s0, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8012d10:	eee4 4a25 	vfma.f32	s9, s8, s11
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8012d14:	eea6 7a65 	vfms.f32	s14, s12, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8012d18:	eef0 9a40 	vmov.f32	s19, s0
    f->s0 = tanhf(f->s0);
 8012d1c:	eeb0 0a63 	vmov.f32	s0, s7
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8012d20:	eef0 8a64 	vmov.f32	s17, s9
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8012d24:	eeb0 8a47 	vmov.f32	s16, s14
    f->s0 = tanhf(f->s0);
 8012d28:	f006 fd2c 	bl	8019784 <tanhf>
 8012d2c:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = tanhf(f->s1);
 8012d30:	eeb0 0a69 	vmov.f32	s0, s19
 8012d34:	f006 fd26 	bl	8019784 <tanhf>
 8012d38:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = tanhf(f->s2);
 8012d3c:	eeb0 0a68 	vmov.f32	s0, s17
    f->s1 = tanhf(f->s1);
 8012d40:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = tanhf(f->s2);
 8012d44:	f006 fd1e 	bl	8019784 <tanhf>
 8012d48:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = tanhf(f->s3);
 8012d4c:	eeb0 0a48 	vmov.f32	s0, s16
    f->s2 = tanhf(f->s2);
 8012d50:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = tanhf(f->s3);
 8012d54:	f006 fd16 	bl	8019784 <tanhf>
 8012d58:	eef0 7a40 	vmov.f32	s15, s0
    f->zi = in;
 8012d5c:	ed84 9a07 	vstr	s18, [r4, #28]
    return tanhf(y3*f->r);
 8012d60:	eeb0 0a4a 	vmov.f32	s0, s20
    f->s3 = tanhf(f->s3);
 8012d64:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
}
 8012d68:	ecbd 8b06 	vpop	{d8-d10}
 8012d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tanhf(y3*f->r);
 8012d70:	f006 bd08 	b.w	8019784 <tanhf>
    Lfloat output = 1.0f;
 8012d74:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012d78:	e656      	b.n	8012a28 <tDiodeFilter_tick+0x60>
 8012d7a:	eddf 2a0a 	vldr	s5, [pc, #40]	; 8012da4 <tDiodeFilter_tick+0x3dc>
        t2 = 0.000001f;
 8012d7e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012da0 <tDiodeFilter_tick+0x3d8>
 8012d82:	e780      	b.n	8012c86 <tDiodeFilter_tick+0x2be>
 8012d84:	eddf 1a07 	vldr	s3, [pc, #28]	; 8012da4 <tDiodeFilter_tick+0x3dc>
        t1 = 0.000001f;
 8012d88:	eddf 6a05 	vldr	s13, [pc, #20]	; 8012da0 <tDiodeFilter_tick+0x3d8>
 8012d8c:	e772      	b.n	8012c74 <tDiodeFilter_tick+0x2ac>
 8012d8e:	bf00      	nop
 8012d90:	43d20000 	.word	0x43d20000
 8012d94:	c46c4000 	.word	0xc46c4000
 8012d98:	446c4000 	.word	0x446c4000
 8012d9c:	42d20000 	.word	0x42d20000
 8012da0:	358637bd 	.word	0x358637bd
 8012da4:	3f800008 	.word	0x3f800008

08012da8 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
 8012da8:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8012daa:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012dac:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012db0:	eeb2 4a0e 	vmov.f32	s8, #46	; 0x41700000  15.0
 8012db4:	ed9f 7aee 	vldr	s14, [pc, #952]	; 8013170 <tDiodeFilter_tickEfficient+0x3c8>
    if (testVal!= 0.0f)
 8012db8:	eddf 5aee 	vldr	s11, [pc, #952]	; 8013174 <tDiodeFilter_tickEfficient+0x3cc>
{
 8012dbc:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012dc0:	ed94 5a03 	vldr	s10, [r4, #12]
{
 8012dc4:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012dc8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
 8012dcc:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012dd0:	ee66 7ac5 	vnmul.f32	s15, s13, s10
 8012dd4:	edd4 4a08 	vldr	s9, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 8012dd8:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012ddc:	ed94 2a02 	vldr	s4, [r4, #8]
 8012de0:	eee6 7a23 	vfma.f32	s15, s12, s7
 8012de4:	ee67 7aa4 	vmul.f32	s15, s15, s9
    Lfloat a = x*x;
 8012de8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012dec:	eea7 7a84 	vfma.f32	s14, s15, s8
 8012df0:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
 8012df4:	eeb4 7a65 	vcmp.f32	s14, s11
 8012df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dfc:	f000 81aa 	beq.w	8013154 <tDiodeFilter_tickEfficient+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012e00:	ed9f 6add 	vldr	s12, [pc, #884]	; 8013178 <tDiodeFilter_tickEfficient+0x3d0>
 8012e04:	ee77 5a06 	vadd.f32	s11, s14, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012e08:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012e0c:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012e10:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012e14:	ee62 4a24 	vmul.f32	s9, s4, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012e18:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012e1c:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012e20:	ee33 7ac0 	vsub.f32	s14, s7, s0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012e24:	eddf 1ad4 	vldr	s3, [pc, #848]	; 8013178 <tDiodeFilter_tickEfficient+0x3d0>
 8012e28:	ed9f 4ad4 	vldr	s8, [pc, #848]	; 801317c <tDiodeFilter_tickEfficient+0x3d4>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012e2c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012e30:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012e34:	ed9f 6ace 	vldr	s12, [pc, #824]	; 8013170 <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8012e38:	ee37 4a84 	vadd.f32	s8, s15, s8
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012e3c:	ee27 7a22 	vmul.f32	s14, s14, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012e40:	eee7 0a84 	vfma.f32	s1, s15, s8
    if (testVal!= 0.0f)
 8012e44:	ed9f 4acb 	vldr	s8, [pc, #812]	; 8013174 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat a = x*x;
 8012e48:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012e4c:	eef0 7a46 	vmov.f32	s15, s12
 8012e50:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 8013170 <tDiodeFilter_tickEfficient+0x3c8>
 8012e54:	eee7 7a01 	vfma.f32	s15, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012e58:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 8013178 <tDiodeFilter_tickEfficient+0x3d0>
 8012e5c:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e64:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012e68:	eef0 8a41 	vmov.f32	s17, s2
    if (testVal!= 0.0f)
 8012e6c:	eef4 7a44 	vcmp.f32	s15, s8
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012e70:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 8012e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012e78:	bf18      	it	ne
 8012e7a:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012e7e:	ee74 7a63 	vsub.f32	s15, s8, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8012e82:	ee23 3a24 	vmul.f32	s6, s6, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 8012e86:	eddf 4abd 	vldr	s9, [pc, #756]	; 801317c <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
 8012e8a:	bf08      	it	eq
 8012e8c:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012e90:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012e94:	ee77 4a24 	vadd.f32	s9, s14, s9
 8012e98:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
 8012e9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
 8012ea0:	eee7 8a24 	vfma.f32	s17, s14, s9
 8012ea4:	eddf 4ab5 	vldr	s9, [pc, #724]	; 801317c <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012ea8:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8012eac:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8012eb0:	ee88 7aa5 	vdiv.f32	s14, s17, s11
    if (testVal!= 0.0f)
 8012eb4:	eddf 5aaf 	vldr	s11, [pc, #700]	; 8013174 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012eb8:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
 8012ebc:	eeb4 6a65 	vcmp.f32	s12, s11
 8012ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012ec4:	bf18      	it	ne
 8012ec6:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012eca:	ed9f 1aab 	vldr	s2, [pc, #684]	; 8013178 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8012ece:	ee36 6ac4 	vsub.f32	s12, s13, s8
    return ((a + 105.0f)*a + 945.0f) / output;
 8012ed2:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
 8012ed6:	bf08      	it	eq
 8012ed8:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8012edc:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012ee0:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
 8012ee4:	eddf 4aa3 	vldr	s9, [pc, #652]	; 8013174 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012ee8:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 8012eec:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8012ef0:	ee27 7a21 	vmul.f32	s14, s14, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 8012ef4:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012ef8:	eddf 5a9d 	vldr	s11, [pc, #628]	; 8013170 <tDiodeFilter_tickEfficient+0x3c8>
 8012efc:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8012f00:	eddf 2a9d 	vldr	s5, [pc, #628]	; 8013178 <tDiodeFilter_tickEfficient+0x3d0>
 8012f04:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012f08:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
 8012f0c:	eef4 5a64 	vcmp.f32	s11, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8012f10:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
 8012f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012f18:	bf18      	it	ne
 8012f1a:	ee75 4a81 	vaddne.f32	s9, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012f1e:	eddf 5a97 	vldr	s11, [pc, #604]	; 801317c <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
 8012f22:	bf08      	it	eq
 8012f24:	eef7 4a00 	vmoveq.f32	s9, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012f28:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 8012f2c:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012f30:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8012f34:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012f38:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 8013170 <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8012f3c:	eec0 5aa4 	vdiv.f32	s11, s1, s9
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012f40:	ee66 4a81 	vmul.f32	s9, s13, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012f44:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8012f48:	ee36 1aa3 	vadd.f32	s2, s13, s7
    Lfloat a = x*x;
 8012f4c:	ee64 4aa4 	vmul.f32	s9, s9, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012f50:	eea4 6aa0 	vfma.f32	s12, s9, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8012f54:	eddf 0a88 	vldr	s1, [pc, #544]	; 8013178 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8012f58:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
 8012f5c:	eddf 1a85 	vldr	s3, [pc, #532]	; 8013174 <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012f60:	ee26 6a24 	vmul.f32	s12, s12, s9
    if (testVal!= 0.0f)
 8012f64:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 8012f68:	eddf 1a84 	vldr	s3, [pc, #528]	; 801317c <tDiodeFilter_tickEfficient+0x3d4>
 8012f6c:	ee74 1aa1 	vadd.f32	s3, s9, s3
    if (testVal!= 0.0f)
 8012f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
 8012f74:	eee4 0aa1 	vfma.f32	s1, s9, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8012f78:	bf14      	ite	ne
 8012f7a:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
 8012f7e:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012f82:	ee36 6a84 	vadd.f32	s12, s13, s8
 8012f86:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8012f8a:	eec0 4aa2 	vdiv.f32	s9, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012f8e:	ee70 2a04 	vadd.f32	s5, s0, s8
 8012f92:	ee74 0a01 	vadd.f32	s1, s8, s2
 8012f96:	ee72 2a81 	vadd.f32	s5, s5, s2
 8012f9a:	eeb0 1a60 	vmov.f32	s2, s1
 8012f9e:	eef0 0a61 	vmov.f32	s1, s3
 8012fa2:	eee8 2a03 	vfma.f32	s5, s16, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8012fa6:	ee64 4a82 	vmul.f32	s9, s9, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012faa:	eea2 1a87 	vfma.f32	s2, s5, s14
 8012fae:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012fb2:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 8012fb6:	ee74 8a89 	vadd.f32	s17, s9, s18
 8012fba:	eea7 6a22 	vfma.f32	s12, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8012fbe:	ee66 2a87 	vmul.f32	s5, s13, s14
 8012fc2:	eee4 0aa1 	vfma.f32	s1, s9, s3
 8012fc6:	eea1 6a27 	vfma.f32	s12, s2, s15
 8012fca:	eeb0 1a66 	vmov.f32	s2, s13
 8012fce:	eea2 1aa1 	vfma.f32	s2, s5, s3
 8012fd2:	ee62 2a89 	vmul.f32	s5, s5, s18
 8012fd6:	eee6 2aa1 	vfma.f32	s5, s13, s3
 8012fda:	eea2 1aa7 	vfma.f32	s2, s5, s15
 8012fde:	eef0 2a41 	vmov.f32	s5, s2
 8012fe2:	eeb0 1a42 	vmov.f32	s2, s4
 8012fe6:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8012fea:	eea5 1a03 	vfma.f32	s2, s10, s6
 8012fee:	eeb0 6a42 	vmov.f32	s12, s4
 8012ff2:	eea4 6aa1 	vfma.f32	s12, s9, s3
 8012ff6:	ee34 2a81 	vadd.f32	s4, s9, s2
 8012ffa:	ee34 1aa9 	vadd.f32	s2, s9, s19
 8012ffe:	eee2 8a07 	vfma.f32	s17, s4, s14
 8013002:	ee34 2aa1 	vadd.f32	s4, s9, s3
 8013006:	eea6 2a07 	vfma.f32	s4, s12, s14
 801300a:	eeb0 6a64 	vmov.f32	s12, s9
 801300e:	eea8 2aa7 	vfma.f32	s4, s17, s15
 8013012:	ee61 8a07 	vmul.f32	s17, s2, s14
 8013016:	eee8 0a89 	vfma.f32	s1, s17, s18
 801301a:	eea8 6aa1 	vfma.f32	s12, s17, s3
 801301e:	eea0 6aa7 	vfma.f32	s12, s1, s15
 8013022:	eea2 6a25 	vfma.f32	s12, s4, s11
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 8013026:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 801302a:	eeb4 6a42 	vcmp.f32	s12, s4
 801302e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8013032:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013036:	bf14      	ite	ne
 8013038:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
 801303c:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 8013180 <tDiodeFilter_tickEfficient+0x3d8>
    if (t1 == 0.0f)
 8013040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8013044:	eec2 8a86 	vdiv.f32	s17, s5, s12
    if (t1 == 0.0f)
 8013048:	f000 808c 	beq.w	8013164 <tDiodeFilter_tickEfficient+0x3bc>
 801304c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8013050:	ee77 2a22 	vadd.f32	s5, s14, s5
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8013054:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801305c:	d07d      	beq.n	801315a <tDiodeFilter_tickEfficient+0x3b2>
 801305e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8013062:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8013066:	eef5 5a40 	vcmp.f32	s11, #0.0

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
 801306a:	eef0 0a48 	vmov.f32	s1, s16
 801306e:	eef0 1a44 	vmov.f32	s3, s8
    if (t3 == 0.0f)
 8013072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat xx = (in - f->r*y3);
 8013076:	eee5 0a68 	vfms.f32	s1, s10, s17
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 801307a:	eeb0 5a66 	vmov.f32	s10, s13
        t3 = 0.000001f;
 801307e:	bf08      	it	eq
 8013080:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 8013180 <tDiodeFilter_tickEfficient+0x3d8>
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013084:	ee77 2aa2 	vadd.f32	s5, s15, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013088:	ee31 1a25 	vadd.f32	s2, s2, s11
 801308c:	eee5 1aa8 	vfma.f32	s3, s11, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8013090:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8013094:	ee91 5a28 	vfnms.f32	s10, s2, s17
 8013098:	ee85 6a25 	vdiv.f32	s12, s10, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 801309c:	eed2 1a06 	vfnms.f32	s3, s4, s12
 80130a0:	eeb0 2a63 	vmov.f32	s4, s7
 80130a4:	eea7 2a86 	vfma.f32	s4, s15, s12
 80130a8:	ee81 5aa7 	vdiv.f32	s10, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80130ac:	ee92 2a85 	vfnms.f32	s4, s5, s10
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80130b0:	ee76 2a45 	vsub.f32	s5, s12, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80130b4:	ee38 6ac6 	vsub.f32	s12, s17, s12
 80130b8:	ee26 6a25 	vmul.f32	s12, s12, s11
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80130bc:	eec2 1a07 	vdiv.f32	s3, s4, s14
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80130c0:	eeb0 2a46 	vmov.f32	s4, s12
 80130c4:	eea4 6aa8 	vfma.f32	s12, s9, s17
 80130c8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80130cc:	eea2 2ae7 	vfms.f32	s4, s5, s15
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80130d0:	eee6 6a65 	vfms.f32	s13, s12, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80130d4:	eea2 4a25 	vfma.f32	s8, s4, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80130d8:	ee35 5a61 	vsub.f32	s10, s10, s3
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80130dc:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80130e0:	ee25 5a07 	vmul.f32	s10, s10, s14
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80130e4:	ed84 4a0d 	vstr	s8, [r4, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80130e8:	eeb0 7a45 	vmov.f32	s14, s10
 80130ec:	ee92 5aa7 	vfnms.f32	s10, s5, s15
 80130f0:	eea3 7a20 	vfma.f32	s14, s6, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80130f4:	eee5 3a25 	vfma.f32	s7, s10, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80130f8:	eea7 0a25 	vfma.f32	s0, s14, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80130fc:	edc4 3a0c 	vstr	s7, [r4, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013100:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s0 = fast_tanh4(f->s0);
 8013104:	f000 fbfa 	bl	80138fc <fast_tanh4>
 8013108:	eef0 7a40 	vmov.f32	s15, s0
    f->s1 = fast_tanh4(f->s1);
 801310c:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    f->s0 = fast_tanh4(f->s0);
 8013110:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    f->s1 = fast_tanh4(f->s1);
 8013114:	f000 fbf2 	bl	80138fc <fast_tanh4>
 8013118:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = fast_tanh4(f->s2);
 801311c:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    f->s1 = fast_tanh4(f->s1);
 8013120:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = fast_tanh4(f->s2);
 8013124:	f000 fbea 	bl	80138fc <fast_tanh4>
 8013128:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = fast_tanh4(f->s3);
 801312c:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
    f->s2 = fast_tanh4(f->s2);
 8013130:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = fast_tanh4(f->s3);
 8013134:	f000 fbe2 	bl	80138fc <fast_tanh4>
    f->zi = in;
    return fast_tanh4(y3*f->r);
 8013138:	edd4 7a03 	vldr	s15, [r4, #12]
    f->s3 = fast_tanh4(f->s3);
 801313c:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
 8013140:	ed84 8a07 	vstr	s16, [r4, #28]
    return fast_tanh4(y3*f->r);
 8013144:	ee28 0aa7 	vmul.f32	s0, s17, s15
}
 8013148:	ecbd 8b04 	vpop	{d8-d9}
 801314c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return fast_tanh4(y3*f->r);
 8013150:	f000 bbd4 	b.w	80138fc <fast_tanh4>
    Lfloat output = 1.0f;
 8013154:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013158:	e656      	b.n	8012e08 <tDiodeFilter_tickEfficient+0x60>
 801315a:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8013184 <tDiodeFilter_tickEfficient+0x3dc>
        t2 = 0.000001f;
 801315e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013180 <tDiodeFilter_tickEfficient+0x3d8>
 8013162:	e780      	b.n	8013066 <tDiodeFilter_tickEfficient+0x2be>
 8013164:	eddf 2a07 	vldr	s5, [pc, #28]	; 8013184 <tDiodeFilter_tickEfficient+0x3dc>
        t1 = 0.000001f;
 8013168:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013180 <tDiodeFilter_tickEfficient+0x3d8>
 801316c:	e772      	b.n	8013054 <tDiodeFilter_tickEfficient+0x2ac>
 801316e:	bf00      	nop
 8013170:	43d20000 	.word	0x43d20000
 8013174:	c46c4000 	.word	0xc46c4000
 8013178:	446c4000 	.word	0x446c4000
 801317c:	42d20000 	.word	0x42d20000
 8013180:	358637bd 	.word	0x358637bd
 8013184:	3f800008 	.word	0x3f800008

08013188 <tDiodeFilter_setFreqFast>:

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
	f->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 8013188:	eddf 7a15 	vldr	s15, [pc, #84]	; 80131e0 <tDiodeFilter_setFreqFast+0x58>
 801318c:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tDiodeFilter* f = *vf;
 8013190:	6801      	ldr	r1, [r0, #0]
    if (intVer < 0)
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 8013196:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801319a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
	f->cutoffMIDI = cutoff;
 801319c:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
    int32_t intVer = (int32_t)cutoff;
 80131a0:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80131a4:	ee37 7a67 	vsub.f32	s14, s14, s15
    int32_t intVer = (int32_t)cutoff;
 80131a8:	ee16 3a90 	vmov	r3, s13
 80131ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80131b0:	4563      	cmp	r3, ip
 80131b2:	bfa8      	it	ge
 80131b4:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80131b6:	ee06 3a90 	vmov	s13, r3
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80131ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80131be:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80131c2:	edd3 5a01 	vldr	s11, [r3, #4]
 80131c6:	ed93 6a00 	vldr	s12, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80131ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80131ce:	ee37 7a26 	vadd.f32	s14, s14, s13
 80131d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80131d6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80131da:	edc1 7a02 	vstr	s15, [r1, #8]
}
 80131de:	4770      	bx	lr
 80131e0:	41f4898d 	.word	0x41f4898d

080131e4 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 80131e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80131e8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80131ec:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 80131f0:	eef0 0a67 	vmov.f32	s1, s15
{
 80131f4:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 80131f6:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 80131f8:	eee0 0a07 	vfma.f32	s1, s0, s14
 80131fc:	eeb0 0a67 	vmov.f32	s0, s15
 8013200:	f000 fb50 	bl	80138a4 <LEAF_clip>
 8013204:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8013208:	bd10      	pop	{r4, pc}
 801320a:	bf00      	nop

0801320c <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 801320c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 8013210:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013234 <tDiodeFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8013214:	4908      	ldr	r1, [pc, #32]	; (8013238 <tDiodeFilter_setSampleRate+0x2c>)
 8013216:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801321a:	4b08      	ldr	r3, [pc, #32]	; (801323c <tDiodeFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 801321c:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tDiodeFilter* f = *vf;
 8013220:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 8013222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013226:	bfd8      	it	le
 8013228:	460b      	movle	r3, r1
 801322a:	6413      	str	r3, [r2, #64]	; 0x40
    f->invSampleRate = 1.0f/sr;
 801322c:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
    }
}
 8013230:	4770      	bx	lr
 8013232:	bf00      	nop
 8013234:	47afc800 	.word	0x47afc800
 8013238:	0801b9a8 	.word	0x0801b9a8
 801323c:	0801f9a8 	.word	0x0801f9a8

08013240 <tLadderFilter_init>:


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
 8013240:	b570      	push	{r4, r5, r6, lr}
 8013242:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8013246:	698d      	ldr	r5, [r1, #24]
{
 8013248:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 801324a:	2040      	movs	r0, #64	; 0x40
{
 801324c:	eeb0 8a40 	vmov.f32	s16, s0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013250:	4629      	mov	r1, r5
{
 8013252:	eef0 8a60 	vmov.f32	s17, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013256:	f000 fe27 	bl	8013ea8 <mpool_alloc>
 801325a:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 801325c:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->cutoffMIDI = ftom(cutoff);
 801325e:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 8013262:	686d      	ldr	r5, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013264:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 8013266:	686b      	ldr	r3, [r5, #4]
    f->cutoff = cutoff;
 8013268:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invSampleRate = leaf->invSampleRate;
 801326c:	6083      	str	r3, [r0, #8]
    f->cutoffMIDI = ftom(cutoff);
 801326e:	f000 fd97 	bl	8013da0 <ftom>
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8013272:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80132e4 <tLadderFilter_init+0xa4>
    f->cutoffMIDI = ftom(cutoff);
 8013276:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
 801327a:	2301      	movs	r3, #1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 801327c:	ee28 0a07 	vmul.f32	s0, s16, s14
 8013280:	edd4 7a02 	vldr	s15, [r4, #8]
    f->oversampling = 1;
 8013284:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8013286:	ee20 0a27 	vmul.f32	s0, s0, s15
 801328a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801328e:	f006 fae3 	bl	8019858 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8013292:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8013296:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 801329a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 801329e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 80132a2:	4911      	ldr	r1, [pc, #68]	; (80132e8 <tLadderFilter_init+0xa8>)
    f->fb = (resonance * 8.0f);
 80132a4:	ee68 8aa6 	vmul.f32	s17, s17, s13
    f->a = 2.0f;
 80132a8:	61e3      	str	r3, [r4, #28]
    f->c2 = 2.0f * f->c;
 80132aa:	ee30 7a00 	vadd.f32	s14, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 80132ae:	4b0f      	ldr	r3, [pc, #60]	; (80132ec <tLadderFilter_init+0xac>)
    f->d = 1.0f;
 80132b0:	6262      	str	r2, [r4, #36]	; 0x24
    f->b[0] = 0.04f;
 80132b2:	62a3      	str	r3, [r4, #40]	; 0x28
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80132b4:	ed84 0a04 	vstr	s0, [r4, #16]
    f->s = 0.1f;
 80132b8:	6221      	str	r1, [r4, #32]
    f->c2 = 2.0f * f->c;
 80132ba:	ed84 7a06 	vstr	s14, [r4, #24]
    f->fb = (resonance * 8.0f);
 80132be:	edc4 8a05 	vstr	s17, [r4, #20]
    if (leaf->sampleRate > 90000)
 80132c2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80132f0 <tLadderFilter_init+0xb0>
 80132c6:	ed95 7a00 	vldr	s14, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80132ca:	4a0a      	ldr	r2, [pc, #40]	; (80132f4 <tLadderFilter_init+0xb4>)
 80132cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80132d0:	4b09      	ldr	r3, [pc, #36]	; (80132f8 <tLadderFilter_init+0xb8>)
 80132d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d6:	bfd8      	it	le
 80132d8:	4613      	movle	r3, r2
 80132da:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80132dc:	ecbd 8b02 	vpop	{d8}
 80132e0:	bd70      	pop	{r4, r5, r6, pc}
 80132e2:	bf00      	nop
 80132e4:	40490fdb 	.word	0x40490fdb
 80132e8:	3dcccccd 	.word	0x3dcccccd
 80132ec:	3d23d70a 	.word	0x3d23d70a
 80132f0:	47afc800 	.word	0x47afc800
 80132f4:	0801b9a8 	.word	0x0801b9a8
 80132f8:	0801f9a8 	.word	0x0801f9a8

080132fc <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
 80132fc:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
 80132fe:	eddf 7a90 	vldr	s15, [pc, #576]	; 8013540 <tLadderFilter_tick+0x244>
{
 8013302:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 8013306:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 8013308:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 801330c:	2900      	cmp	r1, #0
 801330e:	f340 8112 	ble.w	8013536 <tLadderFilter_tick+0x23a>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013312:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8013316:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 801331a:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 801331e:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 8013322:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013326:	ed92 7a08 	vldr	s14, [r2, #32]
 801332a:	ee72 2a27 	vadd.f32	s5, s4, s15
 801332e:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 8013332:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013336:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 801333a:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 801333e:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8013342:	ee25 9a28 	vmul.f32	s18, s10, s17
 8013346:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801334a:	ee62 2a87 	vmul.f32	s5, s5, s14
 801334e:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013352:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 8013356:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 8013358:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 801335c:	ed9f 8a79 	vldr	s16, [pc, #484]	; 8013544 <tLadderFilter_tick+0x248>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013360:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 8013364:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 8013366:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 801336a:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 801336e:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013370:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8013374:	ee26 6a06 	vmul.f32	s12, s12, s12
 8013378:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801337c:	ee22 baa5 	vmul.f32	s22, s5, s11
 8013380:	ee26 ca22 	vmul.f32	s24, s12, s5
 8013384:	ee72 5a25 	vadd.f32	s11, s4, s11
 8013388:	ee32 6a06 	vadd.f32	s12, s4, s12
 801338c:	ee66 baa2 	vmul.f32	s23, s13, s5
 8013390:	eecb ea25 	vdiv.f32	s29, s22, s11
 8013394:	eecc 5a06 	vdiv.f32	s11, s24, s12
 8013398:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 801339c:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80133a0:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 80133a4:	ee27 7a07 	vmul.f32	s14, s14, s14
 80133a8:	ee77 eaee 	vsub.f32	s29, s15, s29
 80133ac:	ee77 6ae5 	vsub.f32	s13, s15, s11
 80133b0:	ee22 ba87 	vmul.f32	s22, s5, s14
 80133b4:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 80133b8:	ee65 5a2e 	vmul.f32	s11, s10, s29
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 80133bc:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80133c0:	eecb ca07 	vdiv.f32	s25, s22, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 80133c4:	ee7e da27 	vadd.f32	s27, s28, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80133c8:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 80133cc:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 80133d0:	ee25 da07 	vmul.f32	s26, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
 80133d4:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
 80133d8:	eece 5a2d 	vdiv.f32	s11, s28, s27
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 80133dc:	ee3d ca27 	vadd.f32	s24, s26, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80133e0:	ee77 caec 	vsub.f32	s25, s15, s25
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 80133e4:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
 80133e8:	ee8d ea0c 	vdiv.f32	s28, s26, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 80133ec:	ee25 ba2c 	vmul.f32	s22, s10, s25
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80133f0:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 80133f4:	ee87 6aad 	vdiv.f32	s12, s15, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 80133f8:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80133fc:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8013400:	eec7 da8c 	vdiv.f32	s27, s15, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8013404:	ee87 caa5 	vdiv.f32	s24, s15, s11
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013408:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
 801340c:	ee8b ea25 	vdiv.f32	s28, s22, s11
        Lfloat estimate =
 8013410:	ee73 5a2a 	vadd.f32	s11, s6, s21
 8013414:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013418:	ee66 6a26 	vmul.f32	s13, s12, s13
 801341c:	ee65 5a89 	vmul.f32	s11, s11, s18
 8013420:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8013424:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8013428:	ee65 5aae 	vmul.f32	s11, s11, s29
 801342c:	ee60 ea8c 	vmul.f32	s29, s1, s24
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013430:	ee2c ca2c 	vmul.f32	s24, s24, s25
 8013434:	ee65 5a8f 	vmul.f32	s11, s11, s30
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013438:	eef0 ca67 	vmov.f32	s25, s15
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 801343c:	ee2d 7a87 	vmul.f32	s14, s27, s14
 8013440:	eee3 5aa8 	vfma.f32	s11, s7, s17
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013444:	eeeb ca8e 	vfma.f32	s25, s23, s28
 8013448:	ee6b 5a25 	vmul.f32	s11, s22, s11
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 801344c:	eec9 baac 	vdiv.f32	s23, s19, s25
 8013450:	eeed 5a04 	vfma.f32	s11, s26, s8
 8013454:	eef0 ca64 	vmov.f32	s25, s9
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 8013458:	eeb0 ba67 	vmov.f32	s22, s15
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 801345c:	eeb0 da48 	vmov.f32	s26, s16
 8013460:	eeed caa5 	vfma.f32	s25, s27, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013464:	eef0 5a4a 	vmov.f32	s11, s20
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 8013468:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 801346c:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013470:	eef0 ca48 	vmov.f32	s25, s16
 8013474:	eeab da0b 	vfma.f32	s26, s22, s22
 8013478:	eee5 caa5 	vfma.f32	s25, s11, s11
 801347c:	eef1 5acd 	vsqrt.f32	s11, s26
 8013480:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013484:	ee3b ba65 	vsub.f32	s22, s22, s11
 8013488:	eef0 5a40 	vmov.f32	s11, s0
 801348c:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8013490:	eeb0 ba43 	vmov.f32	s22, s6
 8013494:	eea5 ba25 	vfma.f32	s22, s10, s11
 8013498:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 801349c:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 80134a0:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 80134a4:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 80134a8:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80134ac:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 80134b0:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80134b4:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 80134b8:	ee36 6a66 	vsub.f32	s12, s12, s13
 80134bc:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80134c0:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80134c4:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80134c8:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 80134cc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80134d0:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80134d4:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 80134d8:	ee37 7a4c 	vsub.f32	s14, s14, s24
 80134dc:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 80134e0:	f47f af3e 	bne.w	8013360 <tLadderFilter_tick+0x64>
 80134e4:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 80134e8:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 80134ec:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 80134f0:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80134f4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013544 <tLadderFilter_tick+0x248>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 80134f8:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 80134fc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013500:	eeb0 5a67 	vmov.f32	s10, s15
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013504:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013508:	eea0 5aa0 	vfma.f32	s10, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 801350c:	ee70 0ac6 	vsub.f32	s1, s1, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013510:	eee0 7aa0 	vfma.f32	s15, s1, s1
 8013514:	eeb0 7a67 	vmov.f32	s14, s15
 8013518:	eef1 7ac5 	vsqrt.f32	s15, s10
 801351c:	eeb1 5ac7 	vsqrt.f32	s10, s14
    x = x - x2;
 8013520:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013524:	ee77 7ac5 	vsub.f32	s15, s15, s10
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013528:	eea7 0aa5 	vfma.f32	s0, s15, s11
    return y3 * compensation;
}
 801352c:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8013530:	ecbd 8b10 	vpop	{d8-d15}
 8013534:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013536:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
 801353a:	ed9f ca03 	vldr	s24, [pc, #12]	; 8013548 <tLadderFilter_tick+0x24c>
 801353e:	e7d9      	b.n	80134f4 <tLadderFilter_tick+0x1f8>
 8013540:	3c75c28f 	.word	0x3c75c28f
 8013544:	3c23d70a 	.word	0x3c23d70a
 8013548:	00000000 	.word	0x00000000

0801354c <tLadderFilter_setFreqFast>:

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 801354c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80135ac <tLadderFilter_setFreqFast+0x60>
 8013550:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tLadderFilter* f = *vf;
 8013554:	6802      	ldr	r2, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f;
 801355a:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801355e:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f->cutoffMIDI = cutoff;
 8013560:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    int32_t intVer = (int32_t)cutoff;
 8013564:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013568:	ee76 6ac7 	vsub.f32	s13, s13, s14
    int32_t intVer = (int32_t)cutoff;
 801356c:	ee17 3a90 	vmov	r3, s15
 8013570:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013574:	4563      	cmp	r3, ip
 8013576:	bfa8      	it	ge
 8013578:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801357a:	ee07 3a90 	vmov	s15, r3
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801357e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8013582:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013586:	ed93 5a01 	vldr	s10, [r3, #4]
 801358a:	edd3 5a00 	vldr	s11, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801358e:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013592:	ee36 7a86 	vadd.f32	s14, s13, s12
 8013596:	ee67 7a85 	vmul.f32	s15, s15, s10
 801359a:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->c2 = 2.0f * f->c;
 801359e:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80135a2:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
 80135a6:	ed82 7a06 	vstr	s14, [r2, #24]
}
 80135aa:	4770      	bx	lr
 80135ac:	41f4898d 	.word	0x41f4898d

080135b0 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
 80135b0:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 80135b2:	6804      	ldr	r4, [r0, #0]
{
 80135b4:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 80135b8:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 80135bc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80135cc <tLadderFilter_setQ+0x1c>
 80135c0:	f000 f970 	bl	80138a4 <LEAF_clip>
 80135c4:	ed84 0a05 	vstr	s0, [r4, #20]
}
 80135c8:	bd10      	pop	{r4, pc}
 80135ca:	bf00      	nop
 80135cc:	3e4ccccd 	.word	0x3e4ccccd

080135d0 <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 80135d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 80135d4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80135f8 <tLadderFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80135d8:	4908      	ldr	r1, [pc, #32]	; (80135fc <tLadderFilter_setSampleRate+0x2c>)
 80135da:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80135de:	4b08      	ldr	r3, [pc, #32]	; (8013600 <tLadderFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 80135e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tLadderFilter* f = *vf;
 80135e4:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 80135e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135ea:	bfd8      	it	le
 80135ec:	460b      	movle	r3, r1
 80135ee:	6393      	str	r3, [r2, #56]	; 0x38
    f->invSampleRate = 1.0f/sr;
 80135f0:	edc2 7a02 	vstr	s15, [r2, #8]
    }
}
 80135f4:	4770      	bx	lr
 80135f6:	bf00      	nop
 80135f8:	47afc800 	.word	0x47afc800
 80135fc:	0801b9a8 	.word	0x0801b9a8
 8013600:	0801f9a8 	.word	0x0801f9a8

08013604 <LEAF_map>:
    return(fraction);
}

inline float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8013604:	ee70 7a60 	vsub.f32	s15, s0, s1
 8013608:	ee31 1a60 	vsub.f32	s2, s2, s1
 801360c:	ee32 2a61 	vsub.f32	s4, s4, s3
 8013610:	ee87 7a81 	vdiv.f32	s14, s15, s2
}
 8013614:	eee2 1a07 	vfma.f32	s3, s4, s14
 8013618:	eeb0 0a61 	vmov.f32	s0, s3
 801361c:	4770      	bx	lr
 801361e:	bf00      	nop

08013620 <LEAF_mapFromZeroToOneInput>:

inline float LEAF_mapFromZeroToOneInput(float value, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * value;
 8013620:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 8013624:	eee1 0a00 	vfma.f32	s1, s2, s0
 8013628:	eeb0 0a60 	vmov.f32	s0, s1
 801362c:	4770      	bx	lr
 801362e:	bf00      	nop

08013630 <fastertanf>:
    return fResult;
}

inline Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
 8013630:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 8013634:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8013650 <fastertanf+0x20>
 8013638:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8013654 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 801363c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 8013640:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 8013644:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 8013648:	ee20 0a27 	vmul.f32	s0, s0, s15
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop
 8013650:	3e502de0 	.word	0x3e502de0
 8013654:	3ea295ea 	.word	0x3ea295ea

08013658 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
inline Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8013658:	ee10 2a10 	vmov	r2, s0
 801365c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8013660:	4b0d      	ldr	r3, [pc, #52]	; (8013698 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8013662:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013666:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 801366a:	ee60 7a27 	vmul.f32	s15, s0, s15
 801366e:	ee00 3a10 	vmov	s0, r3
 8013672:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013676:	eea0 7a67 	vfms.f32	s14, s0, s15
 801367a:	ee60 7a07 	vmul.f32	s15, s0, s14
 801367e:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8013682:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8013686:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 801368a:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 801368e:	336e      	adds	r3, #110	; 0x6e
}
 8013690:	ee00 3a10 	vmov	s0, r3
 8013694:	4770      	bx	lr
 8013696:	bf00      	nop
 8013698:	5f3759df 	.word	0x5f3759df

0801369c <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 801369c:	ee10 3a10 	vmov	r3, s0
 80136a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136a4:	ee00 3a10 	vmov	s0, r3
}
 80136a8:	4770      	bx	lr
 80136aa:	bf00      	nop

080136ac <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
 80136ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80136b0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80136dc <fasterexpf+0x30>
 80136b4:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 80136b8:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80136bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80136c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80136c4:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 80136c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80136cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80136d0:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 80136d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80136d8:	4770      	bx	lr
 80136da:	bf00      	nop
 80136dc:	3b800000 	.word	0x3b800000

080136e0 <fastExp3>:

inline Lfloat fastExp3(register Lfloat x)  // cubic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80136e0:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013724 <fastExp3+0x44>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (8.34e-5):
    reinterpreter.i +=
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 80136e4:	f240 4cfd 	movw	ip, #1277	; 0x4fd
 80136e8:	f643 11e9 	movw	r1, #14825	; 0x39e9
 80136ec:	4b0e      	ldr	r3, [pc, #56]	; (8013728 <fastExp3+0x48>)
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80136ee:	ee20 0a27 	vmul.f32	s0, s0, s15
 80136f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80136f6:	ee17 2a90 	vmov	r2, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 80136fa:	f3c2 10cf 	ubfx	r0, r2, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80136fe:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 8013702:	fb0c fc00 	mul.w	ip, ip, r0
 8013706:	eb01 31ac 	add.w	r1, r1, ip, asr #14
 801370a:	fb00 f101 	mul.w	r1, r0, r1
 801370e:	eb03 33a1 	add.w	r3, r3, r1, asr #14
 8013712:	fb00 f303 	mul.w	r3, r0, r3
 8013716:	12db      	asrs	r3, r3, #11
 8013718:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
 801371c:	4413      	add	r3, r2
 801371e:	ee00 3a10 	vmov	s0, r3
}
 8013722:	4770      	bx	lr
 8013724:	4b38aa3b 	.word	0x4b38aa3b
 8013728:	fffec87b 	.word	0xfffec87b
 801372c:	00000000 	.word	0x00000000

08013730 <fast_sinf2>:
inline Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
 8013730:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 80137a8 <fast_sinf2+0x78>
 8013734:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8013738:	ee20 0b07 	vmul.f64	d0, d0, d7
 801373c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
 8013740:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013748:	d426      	bmi.n	8013798 <fast_sinf2+0x68>
	Lfloat invert = 1.0f;
 801374a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
 801374e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int intXNext = (intX + 1) & 2047;
	Lfloat LfloatX = x-intX;

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013752:	4a17      	ldr	r2, [pc, #92]	; (80137b0 <fast_sinf2+0x80>)
	int intX = ((int)x) & 2047;
 8013754:	ee17 3a90 	vmov	r3, s15
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013758:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	int intX = ((int)x) & 2047;
 801375c:	f3c3 030a 	ubfx	r3, r3, #0, #11
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013760:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int intXNext = (intX + 1) & 2047;
 8013764:	1c59      	adds	r1, r3, #1
	Lfloat LfloatX = x-intX;
 8013766:	ee07 3a10 	vmov	s14, r3
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 801376a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	Lfloat LfloatX = x-intX;
 801376e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int intXNext = (intX + 1) & 2047;
 8013772:	f3c1 010a 	ubfx	r1, r1, #0, #11
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8013776:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	Lfloat LfloatX = x-intX;
 801377a:	ee30 0a47 	vsub.f32	s0, s0, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 801377e:	ed92 6a00 	vldr	s12, [r2]
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013782:	ee77 7a87 	vadd.f32	s15, s15, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8013786:	ed93 7a00 	vldr	s14, [r3]
 801378a:	ee20 0a06 	vmul.f32	s0, s0, s12
 801378e:	eea7 0a27 	vfma.f32	s0, s14, s15
	out *= invert;
	return out;
}
 8013792:	ee26 0a80 	vmul.f32	s0, s13, s0
 8013796:	4770      	bx	lr
		x *= -1.0f;
 8013798:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
 801379c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80137a0:	e7d5      	b.n	801374e <fast_sinf2+0x1e>
 80137a2:	bf00      	nop
 80137a4:	f3af 8000 	nop.w
 80137a8:	6dc9c883 	.word	0x6dc9c883
 80137ac:	40745f30 	.word	0x40745f30
 80137b0:	08023a28 	.word	0x08023a28

080137b4 <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 80137b4:	ee10 3a10 	vmov	r3, s0
 80137b8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80137dc <fastPowf+0x28>
 80137bc:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80137c0:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 80137c4:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 80137c8:	330b      	adds	r3, #11
 80137ca:	ee07 3a90 	vmov	s15, r3
 80137ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137d2:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 80137d6:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 80137da:	4770      	bx	lr
 80137dc:	4e7de250 	.word	0x4e7de250

080137e0 <LEAF_shaper>:
#else
		inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
 80137e0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801385c <LEAF_shaper+0x7c>
 80137e4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80137e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ec:	d406      	bmi.n	80137fc <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
 80137ee:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013860 <LEAF_shaper+0x80>
 80137f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80137f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137fa:	dd02      	ble.n	8013802 <LEAF_shaper+0x22>
 80137fc:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013864 <LEAF_shaper+0x84>
}
 8013800:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
 8013802:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013806:	eddf 4a18 	vldr	s9, [pc, #96]	; 8013868 <LEAF_shaper+0x88>
 801380a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801380e:	eddf 3a17 	vldr	s7, [pc, #92]	; 801386c <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 8013812:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    xc2 = xc*xc;
 8013816:	ee20 6a00 	vmul.f32	s12, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
 801381a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 801381e:	eeb6 5a08 	vmov.f32	s10, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013822:	ee26 4a06 	vmul.f32	s8, s12, s12
 8013826:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    c = 0.5f*fx*(3.0f - (xc2));
 801382a:	ee37 7a46 	vsub.f32	s14, s14, s12
 801382e:	ee60 7a27 	vmul.f32	s15, s0, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013832:	eee4 6a24 	vfma.f32	s13, s8, s9
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8013836:	ee70 0a85 	vadd.f32	s1, s1, s10
 801383a:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8013870 <LEAF_shaper+0x90>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 801383e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
 8013842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013846:	ee20 0aa3 	vmul.f32	s0, s1, s7
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 801384a:	eee6 7a05 	vfma.f32	s15, s12, s10
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 801384e:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8013852:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
 8013856:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
 801385a:	4770      	bx	lr
 801385c:	bfb504f3 	.word	0xbfb504f3
 8013860:	3fb504f3 	.word	0x3fb504f3
 8013864:	00000000 	.word	0x00000000
 8013868:	3c800000 	.word	0x3c800000
 801386c:	3f272f05 	.word	0x3f272f05
 8013870:	3d4ccccd 	.word	0x3d4ccccd

08013874 <LEAF_round>:
    rnd = fabsf(rnd);
 8013874:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8013878:	eddf 7a06 	vldr	s15, [pc, #24]	; 8013894 <LEAF_round+0x20>
 801387c:	eef4 0ae7 	vcmpe.f32	s1, s15
 8013880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013884:	d905      	bls.n	8013892 <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 8013886:	eec0 7a20 	vdiv.f32	s15, s0, s1
 801388a:	fef8 7a67 	vrinta.f32	s15, s15
 801388e:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
 8013892:	4770      	bx	lr
 8013894:	33d6bf95 	.word	0x33d6bf95

08013898 <LEAF_bitwise_xor>:
    return unholy.f;
 8013898:	ee10 3a10 	vmov	r3, s0
 801389c:	4043      	eors	r3, r0
 801389e:	ee00 3a10 	vmov	s0, r3
}
 80138a2:	4770      	bx	lr

080138a4 <LEAF_clip>:
    if (val < min)
 80138a4:	eef4 0ac0 	vcmpe.f32	s1, s0
 80138a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ac:	d401      	bmi.n	80138b2 <LEAF_clip+0xe>
    else if (val > max)
 80138ae:	fe80 0ac1 	vminnm.f32	s0, s1, s2
    }
}
 80138b2:	4770      	bx	lr

080138b4 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
inline Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
 80138b4:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 80138b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80138bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c0:	d418      	bmi.n	80138f4 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 80138c2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80138c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80138ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ce:	dd02      	ble.n	80138d6 <LEAF_tanh+0x22>
        return 1.0f;
 80138d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 80138d4:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 80138d6:	ee60 6a00 	vmul.f32	s13, s0, s0
 80138da:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 80138de:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 80138e2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80138e6:	eee6 7a86 	vfma.f32	s15, s13, s12
 80138ea:	ee27 7a00 	vmul.f32	s14, s14, s0
 80138ee:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80138f2:	4770      	bx	lr
        return -1.0f;
 80138f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80138f8:	4770      	bx	lr
 80138fa:	bf00      	nop

080138fc <fast_tanh4>:

//from antto on KVR forum
inline Lfloat   fast_tanh4 (Lfloat x)
{
    Lfloat xa = fabsf(x);
    Lfloat x2 = xa * xa;
 80138fc:	ee60 6a00 	vmul.f32	s13, s0, s0
 8013900:	ed9f 4a11 	vldr	s8, [pc, #68]	; 8013948 <fast_tanh4+0x4c>
    Lfloat xa = fabsf(x);
 8013904:	eeb0 7ac0 	vabs.f32	s14, s0
    Lfloat x3 = xa * x2;
 8013908:	eddf 4a10 	vldr	s9, [pc, #64]	; 801394c <fast_tanh4+0x50>
 801390c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013910:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8013950 <fast_tanh4+0x54>
    Lfloat x4 = x2 * x2;
 8013914:	ee26 5aa6 	vmul.f32	s10, s13, s13
 8013918:	ee77 7a26 	vadd.f32	s15, s14, s13
    Lfloat x3 = xa * x2;
 801391c:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat x7 = x3 * x4;
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8013920:	eee5 5a04 	vfma.f32	s11, s10, s8
 8013924:	ee77 7a86 	vadd.f32	s15, s15, s12
    Lfloat   result = (x < 0) ? -res : res;
 8013928:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801392c:	eee5 7a24 	vfma.f32	s15, s10, s9
 8013930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8013934:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013938:	ee86 7a27 	vdiv.f32	s14, s12, s15
 801393c:	bf54      	ite	pl
 801393e:	ee36 0a47 	vsubpl.f32	s0, s12, s14
    Lfloat   result = (x < 0) ? -res : res;
 8013942:	ee37 0a46 	vsubmi.f32	s0, s14, s12

    return (result);
}
 8013946:	4770      	bx	lr
 8013948:	3d6b71bb 	.word	0x3d6b71bb
 801394c:	3f0dee8b 	.word	0x3f0dee8b
 8013950:	3f15f4d3 	.word	0x3f15f4d3

08013954 <fast_tanh5>:

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8013954:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013958:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8013980 <fast_tanh5+0x2c>
 801395c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8013984 <fast_tanh5+0x30>
	return a / sqrtf(1.0f + a * a);
 8013960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013964:	eee7 6a86 	vfma.f32	s13, s15, s12
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8013968:	ee67 7a80 	vmul.f32	s15, s15, s0
 801396c:	eea7 0aa6 	vfma.f32	s0, s15, s13
	return a / sqrtf(1.0f + a * a);
 8013970:	eea0 7a00 	vfma.f32	s14, s0, s0
 8013974:	eef1 7ac7 	vsqrt.f32	s15, s14
}
 8013978:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801397c:	4770      	bx	lr
 801397e:	bf00      	nop
 8013980:	3c217586 	.word	0x3c217586
 8013984:	3e28d927 	.word	0x3e28d927

08013988 <fastSine>:
//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
inline Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
	Lfloat term2 = x * x * x * -0.6425216143f;
 8013988:	ee60 7a00 	vmul.f32	s15, s0, s0
 801398c:	eddf 6a08 	vldr	s13, [pc, #32]	; 80139b0 <fastSine+0x28>
 8013990:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80139b4 <fastSine+0x2c>
 8013994:	ee60 6a26 	vmul.f32	s13, s0, s13
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
	return term1+term2+term3;
 8013998:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80139b8 <fastSine+0x30>
	Lfloat term2 = x * x * x * -0.6425216143f;
 801399c:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
 80139a0:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return term1+term2+term3;
 80139a4:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 80139a8:	eea7 0a86 	vfma.f32	s0, s15, s12
 80139ac:	4770      	bx	lr
 80139ae:	bf00      	nop
 80139b0:	3d947433 	.word	0x3d947433
 80139b4:	3fc8f6e3 	.word	0x3fc8f6e3
 80139b8:	bf247c4c 	.word	0xbf247c4c

080139bc <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
 80139bc:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 80139be:	1e4b      	subs	r3, r1, #1
 80139c0:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
 80139c4:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 80139c6:	ee07 3a90 	vmov	s15, r3
 80139ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80139ce:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 80139d2:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 80139d6:	dd16      	ble.n	8013a06 <LEAF_generate_exp+0x4a>
 80139d8:	4604      	mov	r4, r0
 80139da:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80139de:	eeb0 8a60 	vmov.f32	s16, s1
 80139e2:	eef0 8a40 	vmov.f32	s17, s0
 80139e6:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 80139ea:	eef0 0a48 	vmov.f32	s1, s16
 80139ee:	eeb0 0a68 	vmov.f32	s0, s17
 80139f2:	f005 fb15 	bl	8019020 <powf>
 80139f6:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 80139fa:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 80139fe:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8013a02:	42a5      	cmp	r5, r4
 8013a04:	d1f1      	bne.n	80139ea <LEAF_generate_exp+0x2e>
    }
}
 8013a06:	ecbd 8b04 	vpop	{d8-d9}
 8013a0a:	bd38      	pop	{r3, r4, r5, pc}

08013a0c <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
 8013a0c:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8013a0e:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 8013a12:	460d      	mov	r5, r1
 8013a14:	4604      	mov	r4, r0
 8013a16:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8013a1a:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 8013a1e:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8013a22:	ee81 0a29 	vdiv.f32	s0, s2, s19
 8013a26:	f005 f8f7 	bl	8018c18 <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013a2a:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
 8013a2c:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013a2e:	ee07 3a90 	vmov	s15, r3
 8013a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a3a:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 8013a3e:	dd1e      	ble.n	8013a7e <LEAF_generate_table_skew_non_sym+0x72>
 8013a40:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013a84 <LEAF_generate_table_skew_non_sym+0x78>
 8013a44:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0000000001f;
 8013a48:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 8013a88 <LEAF_generate_table_skew_non_sym+0x7c>
 8013a4c:	eeb0 9a40 	vmov.f32	s18, s0
    for (int i = 0; i < size; i++)
 8013a50:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013a8c <LEAF_generate_table_skew_non_sym+0x80>
 8013a54:	ee29 9a27 	vmul.f32	s18, s18, s15
 8013a58:	e001      	b.n	8013a5e <LEAF_generate_table_skew_non_sym+0x52>
    {
        proportion = expf (logf(x) / skew);
 8013a5a:	f005 f8dd 	bl	8018c18 <logf>
 8013a5e:	ee29 0a00 	vmul.f32	s0, s18, s0
 8013a62:	f005 f863 	bl	8018b2c <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8013a66:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 8013a6a:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8013a6e:	eee9 7a80 	vfma.f32	s15, s19, s0
        proportion = expf (logf(x) / skew);
 8013a72:	eeb0 0a48 	vmov.f32	s0, s16
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8013a76:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8013a7a:	42a5      	cmp	r5, r4
 8013a7c:	d1ed      	bne.n	8013a5a <LEAF_generate_table_skew_non_sym+0x4e>
    }
}
 8013a7e:	ecbd 8b06 	vpop	{d8-d10}
 8013a82:	bd38      	pop	{r3, r4, r5, pc}
 8013a84:	bfb8aa3b 	.word	0xbfb8aa3b
 8013a88:	2edbe6ff 	.word	0x2edbe6ff
 8013a8c:	c1b834f1 	.word	0xc1b834f1

08013a90 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
 8013a90:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8013a92:	1e4b      	subs	r3, r1, #1
 8013a94:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
 8013a98:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8013a9a:	ee07 3a90 	vmov	s15, r3
 8013a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8013aa2:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8013aa6:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 8013aaa:	dd12      	ble.n	8013ad2 <LEAF_generate_atodb+0x42>
 8013aac:	4604      	mov	r4, r0
 8013aae:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8013ab2:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
 8013ab6:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 8013aba:	eeb0 0a48 	vmov.f32	s0, s16
 8013abe:	f005 fd25 	bl	801950c <log10f>
 8013ac2:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 8013ac6:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8013aca:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8013ace:	42a5      	cmp	r5, r4
 8013ad0:	d1f3      	bne.n	8013aba <LEAF_generate_atodb+0x2a>
}
 8013ad2:	ecbd 8b04 	vpop	{d8-d9}
 8013ad6:	bd38      	pop	{r3, r4, r5, pc}

08013ad8 <LEAF_generate_dbtoa>:
{
 8013ad8:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8013ada:	1e4b      	subs	r3, r1, #1
 8013adc:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
 8013ae0:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8013ae2:	ee07 3a90 	vmov	s15, r3
 8013ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8013aea:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8013aee:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 8013af2:	dd14      	ble.n	8013b1e <LEAF_generate_dbtoa+0x46>
 8013af4:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

inline Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
 8013af6:	eddf 9a0b 	vldr	s19, [pc, #44]	; 8013b24 <LEAF_generate_dbtoa+0x4c>
 8013afa:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 8013b28 <LEAF_generate_dbtoa+0x50>
 8013afe:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8013b02:	eeb0 8a40 	vmov.f32	s16, s0
 8013b06:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
 8013b0a:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
 8013b0e:	ee20 0a09 	vmul.f32	s0, s0, s18
 8013b12:	f005 f80b 	bl	8018b2c <expf>
        buffer[i] = dbtoa(x);
 8013b16:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8013b1a:	42a5      	cmp	r5, r4
 8013b1c:	d1f3      	bne.n	8013b06 <LEAF_generate_dbtoa+0x2e>
}
 8013b1e:	ecbd 8b04 	vpop	{d8-d9}
 8013b22:	bd38      	pop	{r3, r4, r5, pc}
 8013b24:	3d4ccccd 	.word	0x3d4ccccd
 8013b28:	40135d8e 	.word	0x40135d8e

08013b2c <LEAF_generate_mtof>:
{
 8013b2c:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013b2e:	1e4b      	subs	r3, r1, #1
 8013b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
 8013b34:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013b36:	ee07 3a90 	vmov	s15, r3
 8013b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8013b3e:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8013b42:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
 8013b46:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 8013b4a:	dd29      	ble.n	8013ba0 <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
 8013b4c:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8013bb4 <LEAF_generate_mtof+0x88>
 8013b50:	eef0 9a40 	vmov.f32	s19, s0
 8013b54:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
 8013b56:	eddf 8a18 	vldr	s17, [pc, #96]	; 8013bb8 <LEAF_generate_mtof+0x8c>
 8013b5a:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 8013b5e:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8013bbc <LEAF_generate_mtof+0x90>
 8013b62:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 8013b66:	ed9f ca16 	vldr	s24, [pc, #88]	; 8013bc0 <LEAF_generate_mtof+0x94>
 8013b6a:	eddf ba16 	vldr	s23, [pc, #88]	; 8013bc4 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
 8013b6e:	eeb0 0a69 	vmov.f32	s0, s19
 8013b72:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
 8013b76:	e006      	b.n	8013b86 <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8013b78:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8013b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b80:	dd11      	ble.n	8013ba6 <LEAF_generate_mtof+0x7a>
 8013b82:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 8013b86:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8013b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b8e:	d8f3      	bhi.n	8013b78 <LEAF_generate_mtof+0x4c>
 8013b90:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 8013b94:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8013b98:	42ac      	cmp	r4, r5
        x += increment;
 8013b9a:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 8013b9e:	d1e6      	bne.n	8013b6e <LEAF_generate_mtof+0x42>
}
 8013ba0:	ecbd 8b0a 	vpop	{d8-d12}
 8013ba4:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8013ba6:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8013baa:	f004 ffbf 	bl	8018b2c <expf>
 8013bae:	ee60 7a2b 	vmul.f32	s15, s0, s23
 8013bb2:	e7ef      	b.n	8013b94 <LEAF_generate_mtof+0x68>
 8013bb4:	00000000 	.word	0x00000000
 8013bb8:	c4bb8000 	.word	0xc4bb8000
 8013bbc:	44bb6000 	.word	0x44bb6000
 8013bc0:	3d6c9820 	.word	0x3d6c9820
 8013bc4:	4102d013 	.word	0x4102d013

08013bc8 <LEAF_poly_blep>:
    if (t < dt) {
 8013bc8:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8013bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd0:	d418      	bmi.n	8013c04 <LEAF_poly_blep+0x3c>
    else if (t > 1.0f - dt) {
 8013bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013bd6:	ee77 7a60 	vsub.f32	s15, s14, s1
 8013bda:	eef4 7ac0 	vcmpe.f32	s15, s0
 8013bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be2:	d50c      	bpl.n	8013bfe <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
 8013be4:	ee70 7a47 	vsub.f32	s15, s0, s14
        return t*t + t+t + 1.0f;
 8013be8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
        t = (t - 1.0f) / dt;
 8013bec:	ee87 6aa0 	vdiv.f32	s12, s15, s1
        return t*t + t+t + 1.0f;
 8013bf0:	ee76 7a26 	vadd.f32	s15, s12, s13
 8013bf4:	eea7 7a86 	vfma.f32	s14, s15, s12
 8013bf8:	eeb0 0a47 	vmov.f32	s0, s14
 8013bfc:	4770      	bx	lr
    else return 0.0f;
 8013bfe:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8013c1c <LEAF_poly_blep+0x54>
}
 8013c02:	4770      	bx	lr
        t /= dt;
 8013c04:	ee80 7a20 	vdiv.f32	s14, s0, s1
        return t+t - t*t - 1.0f;
 8013c08:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013c0c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013c10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c14:	eea7 0a87 	vfma.f32	s0, s15, s14
 8013c18:	4770      	bx	lr
 8013c1a:	bf00      	nop
 8013c1c:	00000000 	.word	0x00000000

08013c20 <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
 8013c20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c28:	db2c      	blt.n	8013c84 <LEAF_poly_blamp+0x64>
 8013c2a:	ee70 7aa0 	vadd.f32	s15, s1, s1
 8013c2e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8013c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c36:	dd25      	ble.n	8013c84 <LEAF_poly_blamp+0x64>
        Lfloat x = (t / dt);
 8013c38:	eec0 6a20 	vdiv.f32	s13, s0, s1
        Lfloat u = 2.0f - x;
 8013c3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
        if (t < dt)
 8013c40:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8013c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat u = 2.0f - x;
 8013c48:	ee37 7a66 	vsub.f32	s14, s14, s13
        Lfloat u2 = u * u;
 8013c4c:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
 8013c50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013c54:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (t < dt)
 8013c58:	d517      	bpl.n	8013c8a <LEAF_poly_blamp+0x6a>
        	Lfloat v = 1.0f - x;
 8013c5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    return y * dt / 0.066666666666667f; // divide by 15
 8013c5e:	eddf 5a0e 	vldr	s11, [pc, #56]	; 8013c98 <LEAF_poly_blamp+0x78>
 8013c62:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8013c66:	ee60 0aa5 	vmul.f32	s1, s1, s11
        	Lfloat v = 1.0f - x;
 8013c6a:	ee37 7a66 	vsub.f32	s14, s14, s13
        	Lfloat v2 = v * v;
 8013c6e:	ee67 6a07 	vmul.f32	s13, s14, s14
            y += 4.0f * v;
 8013c72:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013c76:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013c7a:	eed6 7a87 	vfnms.f32	s15, s13, s14
    return y * dt / 0.066666666666667f; // divide by 15
 8013c7e:	ee20 0aa7 	vmul.f32	s0, s1, s15
 8013c82:	4770      	bx	lr
 8013c84:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8013c9c <LEAF_poly_blamp+0x7c>
}
 8013c88:	4770      	bx	lr
    return y * dt / 0.066666666666667f; // divide by 15
 8013c8a:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8013c98 <LEAF_poly_blamp+0x78>
 8013c8e:	ee60 0a87 	vmul.f32	s1, s1, s14
 8013c92:	ee27 0ae0 	vnmul.f32	s0, s15, s1
 8013c96:	4770      	bx	lr
 8013c98:	416fffff 	.word	0x416fffff
 8013c9c:	00000000 	.word	0x00000000

08013ca0 <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8013ca0:	ee71 1ac0 	vsub.f32	s3, s3, s0
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8013ca4:	ee31 6a40 	vsub.f32	s12, s2, s0
 8013ca8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8013cac:	ee71 1aa0 	vadd.f32	s3, s3, s1
 8013cb0:	eef0 5a60 	vmov.f32	s11, s1
 8013cb4:	ee30 7ac1 	vsub.f32	s14, s1, s2
 8013cb8:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8013cbc:	eed6 5a26 	vfnms.f32	s11, s12, s13
 8013cc0:	eea1 7a26 	vfma.f32	s14, s2, s13
    Lfloat c2 = y0my1 + c1 - c3;
 8013cc4:	ee70 7a25 	vadd.f32	s15, s0, s11
 8013cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8013ccc:	eee7 7a02 	vfma.f32	s15, s14, s4
 8013cd0:	ee67 7a82 	vmul.f32	s15, s15, s4
 8013cd4:	eee6 7a26 	vfma.f32	s15, s12, s13
}
 8013cd8:	eee7 0a82 	vfma.f32	s1, s15, s4
 8013cdc:	eeb0 0a60 	vmov.f32	s0, s1
 8013ce0:	4770      	bx	lr
 8013ce2:	bf00      	nop

08013ce4 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 8013ce4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013ce8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8013d08 <LEAF_interpolation_linear+0x24>
 8013cec:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8013cf0:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
 8013cf4:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 8013cf8:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 8013cfc:	eee7 0a80 	vfma.f32	s1, s15, s0
 8013d00:	eeb0 0a60 	vmov.f32	s0, s1
 8013d04:	4770      	bx	lr
 8013d06:	bf00      	nop
 8013d08:	00000000 	.word	0x00000000

08013d0c <mtof>:
    if (f <= -1500.0f) return(0);
 8013d0c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8013d4c <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8013d10:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013d50 <mtof+0x44>
 8013d14:	e006      	b.n	8013d24 <mtof+0x18>
 8013d16:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d1e:	dd09      	ble.n	8013d34 <mtof+0x28>
 8013d20:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 8013d24:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d2c:	d8f3      	bhi.n	8013d16 <mtof+0xa>
 8013d2e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8013d54 <mtof+0x48>
}
 8013d32:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 8013d34:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013d58 <mtof+0x4c>
{
 8013d38:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8013d3a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d3e:	f004 fef5 	bl	8018b2c <expf>
 8013d42:	eddf 7a06 	vldr	s15, [pc, #24]	; 8013d5c <mtof+0x50>
 8013d46:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8013d4a:	bd08      	pop	{r3, pc}
 8013d4c:	c4bb8000 	.word	0xc4bb8000
 8013d50:	44bb6000 	.word	0x44bb6000
 8013d54:	00000000 	.word	0x00000000
 8013d58:	3d6c9820 	.word	0x3d6c9820
 8013d5c:	4102d013 	.word	0x4102d013

08013d60 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
 8013d60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013d64:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8013d98 <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8013d68:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8013d9c <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
 8013d6c:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
 8013d70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013d74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013d78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013d7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 8013d80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013d84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013d88:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8013d8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8013d90:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	396c9820 	.word	0x396c9820
 8013d9c:	4102d013 	.word	0x4102d013

08013da0 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8013da0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da8:	dd0b      	ble.n	8013dc2 <ftom+0x22>
 8013daa:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013dc8 <ftom+0x28>
{
 8013dae:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8013db0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013db4:	f004 ff30 	bl	8018c18 <logf>
 8013db8:	eddf 7a04 	vldr	s15, [pc, #16]	; 8013dcc <ftom+0x2c>
 8013dbc:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8013dc0:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8013dc2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013dd0 <ftom+0x30>
}
 8013dc6:	4770      	bx	lr
 8013dc8:	3dfa7ed2 	.word	0x3dfa7ed2
 8013dcc:	418a7fac 	.word	0x418a7fac
 8013dd0:	c4bb8000 	.word	0xc4bb8000

08013dd4 <fasteratodb>:
{
 8013dd4:	b500      	push	{lr}
 8013dd6:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 8013dd8:	eeb0 0ac0 	vabs.f32	s0, s0
 8013ddc:	a801      	add	r0, sp, #4
 8013dde:	f004 fe7f 	bl	8018ae0 <frexpf>
    Y += -4.11852516267426f;
 8013de2:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8013e1c <fasteratodb+0x48>
 8013de6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8013e20 <fasteratodb+0x4c>
    Y += 6.02197014179219f;
 8013dea:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8013e24 <fasteratodb+0x50>
    Y += -4.11852516267426f;
 8013dee:	eee0 7a06 	vfma.f32	s15, s0, s12
    Y += E;
 8013df2:	eddf 5a0d 	vldr	s11, [pc, #52]	; 8013e28 <fasteratodb+0x54>
	return 20.0f*log10f_fast(a);
 8013df6:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8013e2c <fasteratodb+0x58>
    Y += -4.11852516267426f;
 8013dfa:	eef0 6a67 	vmov.f32	s13, s15
    Y += E;
 8013dfe:	eddd 7a01 	vldr	s15, [sp, #4]
 8013e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Y += 6.02197014179219f;
 8013e06:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 8013e0a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013e0e:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 8013e12:	ee27 0a86 	vmul.f32	s0, s15, s12
 8013e16:	b003      	add	sp, #12
 8013e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e1c:	3f9da1a8 	.word	0x3f9da1a8
 8013e20:	c083caf5 	.word	0xc083caf5
 8013e24:	40c0b3fb 	.word	0x40c0b3fb
 8013e28:	404892e0 	.word	0x404892e0
 8013e2c:	40c0a8c2 	.word	0x40c0a8c2

08013e30 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 8013e30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e34:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8013e60 <fasterdbtoa+0x30>
 8013e38:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8013e3c:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8013e40:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013e44:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013e48:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8013e4c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013e50:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013e54:	ee20 0a00 	vmul.f32	s0, s0, s0

inline Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 8013e58:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop
 8013e60:	39ebc8e3 	.word	0x39ebc8e3

08013e64 <maximum>:


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8013e64:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8013e68:	4770      	bx	lr
 8013e6a:	bf00      	nop

08013e6c <minimum>:

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8013e6c:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8013e70:	4770      	bx	lr
 8013e72:	bf00      	nop

08013e74 <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8013e74:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8013e76:	6a03      	ldr	r3, [r0, #32]
 8013e78:	2510      	movs	r5, #16
    pool->usize  = 0;
 8013e7a:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8013e7c:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 8013e7e:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
 8013e80:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
 8013e84:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8013e86:	42aa      	cmp	r2, r5
 8013e88:	bf38      	it	cc
 8013e8a:	462a      	movcc	r2, r5
    pool->msize  = size;
 8013e8c:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8013e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013e90:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8013e92:	440b      	add	r3, r1
 8013e94:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8013e96:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8013e9a:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8013e9c:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8013ea0:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8013ea2:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 8013ea4:	6183      	str	r3, [r0, #24]
}
 8013ea6:	4770      	bx	lr

08013ea8 <mpool_alloc>:
{
 8013ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8013eaa:	684a      	ldr	r2, [r1, #4]
{
 8013eac:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8013eae:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8013eb0:	3301      	adds	r3, #1
 8013eb2:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8013eb4:	694b      	ldr	r3, [r1, #20]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d04a      	beq.n	8013f50 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8013eba:	1dc4      	adds	r4, r0, #7
 8013ebc:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8013ec0:	e002      	b.n	8013ec8 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8013ec2:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d043      	beq.n	8013f50 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 8013ec8:	68da      	ldr	r2, [r3, #12]
 8013eca:	42a2      	cmp	r2, r4
 8013ecc:	d3f9      	bcc.n	8013ec2 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8013ece:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8013ed0:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8013ed2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013ed6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013ed8:	4281      	cmp	r1, r0
 8013eda:	d246      	bcs.n	8013f6a <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8013edc:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8013ee0:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8013ee2:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8013ee4:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8013ee6:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8013ee8:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 8013eea:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8013eee:	4429      	add	r1, r5
 8013ef0:	5111      	str	r1, [r2, r4]
    node->size = size;
 8013ef2:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8013ef4:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8013ef8:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8013efc:	429a      	cmp	r2, r3
        pool->head = new_node;
 8013efe:	bf08      	it	eq
 8013f00:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8013f04:	685a      	ldr	r2, [r3, #4]
 8013f06:	b10a      	cbz	r2, 8013f0c <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 8013f08:	6899      	ldr	r1, [r3, #8]
 8013f0a:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8013f0c:	689a      	ldr	r2, [r3, #8]
 8013f0e:	b10a      	cbz	r2, 8013f14 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8013f10:	6859      	ldr	r1, [r3, #4]
 8013f12:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 8013f14:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8013f16:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 8013f18:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8013f1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013f20:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013f24:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8013f26:	4422      	add	r2, r4
 8013f28:	4402      	add	r2, r0
 8013f2a:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8013f2e:	694a      	ldr	r2, [r1, #20]
 8013f30:	42aa      	cmp	r2, r5
 8013f32:	dd0b      	ble.n	8013f4c <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8013f34:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8013f36:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8013f38:	b14a      	cbz	r2, 8013f4e <mpool_alloc+0xa6>
 8013f3a:	1e41      	subs	r1, r0, #1
 8013f3c:	460a      	mov	r2, r1
 8013f3e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013f42:	68dc      	ldr	r4, [r3, #12]
 8013f44:	3202      	adds	r2, #2
 8013f46:	1a12      	subs	r2, r2, r0
 8013f48:	42a2      	cmp	r2, r4
 8013f4a:	d3f7      	bcc.n	8013f3c <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 8013f4c:	6818      	ldr	r0, [r3, #0]
}
 8013f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8013f50:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8013f54:	1a9b      	subs	r3, r3, r2
 8013f56:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8013f58:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8013f5c:	bf8c      	ite	hi
 8013f5e:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8013f60:	2100      	movls	r1, #0
 8013f62:	f004 f879 	bl	8018058 <LEAF_internalErrorCallback>
        return NULL;
 8013f66:	2000      	movs	r0, #0
}
 8013f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 8013f6a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8013f6c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8013f6e:	e7c3      	b.n	8013ef8 <mpool_alloc+0x50>

08013f70 <mpool_calloc>:
{
 8013f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8013f72:	684a      	ldr	r2, [r1, #4]
{
 8013f74:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8013f76:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8013f78:	3301      	adds	r3, #1
 8013f7a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8013f7c:	694b      	ldr	r3, [r1, #20]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d044      	beq.n	801400c <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8013f82:	1dc4      	adds	r4, r0, #7
 8013f84:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8013f88:	e002      	b.n	8013f90 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8013f8a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d03d      	beq.n	801400c <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8013f90:	68da      	ldr	r2, [r3, #12]
 8013f92:	42a2      	cmp	r2, r4
 8013f94:	d3f9      	bcc.n	8013f8a <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8013f96:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8013f98:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8013f9a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013f9e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013fa0:	4281      	cmp	r1, r0
 8013fa2:	d240      	bcs.n	8014026 <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8013fa4:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8013fa8:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8013faa:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8013fac:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8013fae:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8013fb0:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 8013fb2:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8013fb6:	4429      	add	r1, r5
 8013fb8:	5111      	str	r1, [r2, r4]
    node->size = size;
 8013fba:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8013fbc:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8013fc0:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8013fc4:	429a      	cmp	r2, r3
        pool->head = new_node;
 8013fc6:	bf08      	it	eq
 8013fc8:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	b10a      	cbz	r2, 8013fd4 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 8013fd0:	6899      	ldr	r1, [r3, #8]
 8013fd2:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8013fd4:	689a      	ldr	r2, [r3, #8]
 8013fd6:	b10a      	cbz	r2, 8013fdc <mpool_calloc+0x6c>
        node->prev->next = node->next;
 8013fd8:	6859      	ldr	r1, [r3, #4]
 8013fda:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8013fdc:	2200      	movs	r2, #0
    node->prev = NULL;
 8013fde:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8013fe2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013fe6:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8013fea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013fec:	4401      	add	r1, r0
 8013fee:	68d8      	ldr	r0, [r3, #12]
 8013ff0:	4401      	add	r1, r0
 8013ff2:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8013ff6:	68d9      	ldr	r1, [r3, #12]
 8013ff8:	b131      	cbz	r1, 8014008 <mpool_calloc+0x98>
 8013ffa:	4610      	mov	r0, r2
 8013ffc:	6819      	ldr	r1, [r3, #0]
 8013ffe:	5488      	strb	r0, [r1, r2]
 8014000:	3201      	adds	r2, #1
 8014002:	68d9      	ldr	r1, [r3, #12]
 8014004:	4291      	cmp	r1, r2
 8014006:	d8f9      	bhi.n	8013ffc <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 8014008:	6818      	ldr	r0, [r3, #0]
}
 801400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 801400c:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8014010:	1a9b      	subs	r3, r3, r2
 8014012:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014014:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8014018:	bf8c      	ite	hi
 801401a:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 801401c:	2100      	movls	r1, #0
 801401e:	f004 f81b 	bl	8018058 <LEAF_internalErrorCallback>
        return NULL;
 8014022:	2000      	movs	r0, #0
}
 8014024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 8014026:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8014028:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 801402a:	e7c9      	b.n	8013fc0 <mpool_calloc+0x50>

0801402c <mpool_free>:
{
 801402c:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
 801402e:	684a      	ldr	r2, [r1, #4]
 8014030:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8014032:	3301      	adds	r3, #1
 8014034:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 8014036:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 8014038:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 801403a:	6b72      	ldr	r2, [r6, #52]	; 0x34
 801403c:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
 801403e:	1a9b      	subs	r3, r3, r2
 8014040:	68e2      	ldr	r2, [r4, #12]
 8014042:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
 8014044:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 8014046:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
 8014048:	2b00      	cmp	r3, #0
 801404a:	d051      	beq.n	80140f0 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
 801404c:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
 801404e:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
 8014050:	429a      	cmp	r2, r3
 8014052:	dc17      	bgt.n	8014084 <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 8014054:	690d      	ldr	r5, [r1, #16]
 8014056:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
 8014058:	429a      	cmp	r2, r3
 801405a:	d913      	bls.n	8014084 <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 801405c:	6b72      	ldr	r2, [r6, #52]	; 0x34
 801405e:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
 8014060:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 8014062:	eb02 0c06 	add.w	ip, r2, r6
 8014066:	eb0c 0604 	add.w	r6, ip, r4
 801406a:	42b3      	cmp	r3, r6
 801406c:	d029      	beq.n	80140c2 <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
 801406e:	68de      	ldr	r6, [r3, #12]
 8014070:	441a      	add	r2, r3
 8014072:	4432      	add	r2, r6
 8014074:	4294      	cmp	r4, r2
 8014076:	d00a      	beq.n	801408e <mpool_free+0x62>
    while (other_node != NULL)
 8014078:	b1e5      	cbz	r5, 80140b4 <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 801407a:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
 801407c:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 801407e:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
 8014080:	429a      	cmp	r2, r3
 8014082:	dde7      	ble.n	8014054 <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 8014084:	4630      	mov	r0, r6
 8014086:	2102      	movs	r1, #2
}
 8014088:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 801408a:	f003 bfe5 	b.w	8018058 <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
 801408e:	4466      	add	r6, ip
 8014090:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
 8014092:	694a      	ldr	r2, [r1, #20]
 8014094:	429a      	cmp	r2, r3
 8014096:	d028      	beq.n	80140ea <mpool_free+0xbe>
    if (node->next != NULL)
 8014098:	b10d      	cbz	r5, 801409e <mpool_free+0x72>
        node->next->prev = node->prev;
 801409a:	689a      	ldr	r2, [r3, #8]
 801409c:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
 801409e:	689a      	ldr	r2, [r3, #8]
 80140a0:	b10a      	cbz	r2, 80140a6 <mpool_free+0x7a>
        node->prev->next = node->next;
 80140a2:	685c      	ldr	r4, [r3, #4]
 80140a4:	6054      	str	r4, [r2, #4]
    node->next = NULL;
 80140a6:	461c      	mov	r4, r3
    node->prev = NULL;
 80140a8:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
 80140ac:	694a      	ldr	r2, [r1, #20]
 80140ae:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
 80140b0:	2d00      	cmp	r5, #0
 80140b2:	d1e2      	bne.n	801407a <mpool_free+0x4e>
    freed_node->next = pool->head;
 80140b4:	694b      	ldr	r3, [r1, #20]
 80140b6:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 80140b8:	b103      	cbz	r3, 80140bc <mpool_free+0x90>
 80140ba:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
 80140bc:	614c      	str	r4, [r1, #20]
}
 80140be:	bc70      	pop	{r4, r5, r6}
 80140c0:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
 80140c2:	68da      	ldr	r2, [r3, #12]
 80140c4:	4462      	add	r2, ip
 80140c6:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 80140c8:	694a      	ldr	r2, [r1, #20]
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d00a      	beq.n	80140e4 <mpool_free+0xb8>
    if (node->next != NULL)
 80140ce:	685a      	ldr	r2, [r3, #4]
 80140d0:	b10a      	cbz	r2, 80140d6 <mpool_free+0xaa>
        node->next->prev = node->prev;
 80140d2:	689e      	ldr	r6, [r3, #8]
 80140d4:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
 80140d6:	689a      	ldr	r2, [r3, #8]
 80140d8:	b10a      	cbz	r2, 80140de <mpool_free+0xb2>
        node->prev->next = node->next;
 80140da:	685e      	ldr	r6, [r3, #4]
 80140dc:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
 80140de:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
 80140e2:	e7c9      	b.n	8014078 <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
 80140e4:	685a      	ldr	r2, [r3, #4]
 80140e6:	614a      	str	r2, [r1, #20]
 80140e8:	e7f1      	b.n	80140ce <mpool_free+0xa2>
                pool->head = pool->head->next;
 80140ea:	461c      	mov	r4, r3
 80140ec:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
 80140ee:	e7c3      	b.n	8014078 <mpool_free+0x4c>
    freed_node->next = pool->head;
 80140f0:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 80140f2:	e7e3      	b.n	80140bc <mpool_free+0x90>

080140f4 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 80140f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 80140f6:	699f      	ldr	r7, [r3, #24]
{
 80140f8:	4606      	mov	r6, r0
 80140fa:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80140fc:	2018      	movs	r0, #24
 80140fe:	4639      	mov	r1, r7
{
 8014100:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8014102:	f7ff fed1 	bl	8013ea8 <mpool_alloc>
 8014106:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
 8014108:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801410a:	2210      	movs	r2, #16
    pool->usize  = 0;
 801410c:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
 801410e:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014110:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 8014112:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
 8014114:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
 8014118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801411a:	42aa      	cmp	r2, r5
 801411c:	bf38      	it	cc
 801411e:	462a      	movcc	r2, r5
    pool->msize  = size;
 8014120:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014124:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 8014126:	4423      	add	r3, r4
    node->prev = prev;
 8014128:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
 801412c:	6023      	str	r3, [r4, #0]
    node->size = size;
 801412e:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014130:	6144      	str	r4, [r0, #20]
}
 8014132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014134 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 8014134:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014136:	698c      	ldr	r4, [r1, #24]
{
 8014138:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801413a:	2018      	movs	r0, #24
 801413c:	4621      	mov	r1, r4
 801413e:	f7ff feb3 	bl	8013ea8 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 8014142:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014144:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 8014146:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 801414a:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801414c:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801414e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014168 <tCycle_init+0x34>
    c->phase    =  0;
 8014152:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014156:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 801415a:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801415c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014160:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8014164:	bd38      	pop	{r3, r4, r5, pc}
 8014166:	bf00      	nop
 8014168:	4f800000 	.word	0x4f800000

0801416c <tCycle_initToPool>:
{
 801416c:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 801416e:	680c      	ldr	r4, [r1, #0]
{
 8014170:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014172:	2018      	movs	r0, #24
 8014174:	4621      	mov	r1, r4
 8014176:	f7ff fe97 	bl	8013ea8 <mpool_alloc>
    c->inc      =  0;
 801417a:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801417c:	6028      	str	r0, [r5, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 801417e:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 8014182:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014184:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014186:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80141a0 <tCycle_initToPool+0x34>
    c->phase    =  0;
 801418a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801418e:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8014192:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014194:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014198:	edc0 7a04 	vstr	s15, [r0, #16]
}
 801419c:	bd38      	pop	{r3, r4, r5, pc}
 801419e:	bf00      	nop
 80141a0:	4f800000 	.word	0x4f800000

080141a4 <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
 80141a4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 80141a6:	6801      	ldr	r1, [r0, #0]
 80141a8:	f7ff bf40 	b.w	801402c <mpool_free>

080141ac <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 80141ac:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 80141ae:	4910      	ldr	r1, [pc, #64]	; (80141f0 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80141b0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80141f4 <tCycle_tick+0x48>
    c->phase += c->inc;
 80141b4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80141b8:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 80141ba:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 80141bc:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80141be:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 80141c2:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80141c4:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 80141c8:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 80141cc:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80141ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 80141d2:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 80141d6:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 80141d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80141dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80141e0:	ed91 7a00 	vldr	s14, [r1]
 80141e4:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 80141e8:	eea7 0a27 	vfma.f32	s0, s14, s15
 80141ec:	4770      	bx	lr
 80141ee:	bf00      	nop
 80141f0:	08023a28 	.word	0x08023a28
 80141f4:	35000004 	.word	0x35000004

080141f8 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
 80141f8:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80141fa:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 80141fe:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014202:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014206:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801420a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801420e:	4770      	bx	lr

08014210 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 8014210:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8014214:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014230 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 8014218:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801421a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801421e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014222:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014226:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801422a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801422e:	4770      	bx	lr
 8014230:	4f800000 	.word	0x4f800000

08014234 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
    _tCycle* c = *cy;
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 8014234:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014260 <tCycle_setSampleRate+0x2c>
    _tCycle* c = *cy;
 8014238:	6803      	ldr	r3, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 801423a:	ee87 7a80 	vdiv.f32	s14, s15, s0
    tCycle_setFreq(cy, c->freq);
 801423e:	edd3 7a03 	vldr	s15, [r3, #12]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 8014242:	ed83 7a04 	vstr	s14, [r3, #16]
    _tCycle* c = *cy;
 8014246:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014248:	ed93 7a04 	vldr	s14, [r3, #16]
    c->freq  = freq;
 801424c:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014258:	edc3 7a02 	vstr	s15, [r3, #8]
}
 801425c:	4770      	bx	lr
 801425e:	bf00      	nop
 8014260:	4f800000 	.word	0x4f800000

08014264 <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
 8014264:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014266:	698c      	ldr	r4, [r1, #24]
{
 8014268:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
 801426a:	2020      	movs	r0, #32
 801426c:	4621      	mov	r1, r4
 801426e:	f7ff fe1b 	bl	8013ea8 <mpool_alloc>
 8014272:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014274:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
    c->skew     =  0.5f;
 8014276:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 801427a:	6861      	ldr	r1, [r4, #4]
    c->inc      =  0.0f;
 801427c:	2300      	movs	r3, #0
    c->phase    =  0.25f;
 801427e:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
    c->invSampleRate = leaf->invSampleRate;
 8014282:	6849      	ldr	r1, [r1, #4]
    c->phase    =  0.25f;
 8014284:	f8c0 c004 	str.w	ip, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8014288:	61c1      	str	r1, [r0, #28]
    c->inc      =  0.0f;
 801428a:	6083      	str	r3, [r0, #8]
    c->skew     =  0.5f;
 801428c:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
 801428e:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
 8014290:	6183      	str	r3, [r0, #24]
}
 8014292:	bd38      	pop	{r3, r4, r5, pc}

08014294 <tPBTriangle_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_tick          (tPBTriangle* const osc)
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
 8014294:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
 8014296:	6804      	ldr	r4, [r0, #0]
{
 8014298:	ed2d 8b08 	vpush	{d8-d11}

    Lfloat t = c->phase;
 801429c:	ed94 8a01 	vldr	s16, [r4, #4]
{
 80142a0:	b082      	sub	sp, #8
    //compute the naive waveform
    
    //Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    Lfloat v = 0.0f;
    
    if (t < c->skew)
 80142a2:	edd4 7a04 	vldr	s15, [r4, #16]
 80142a6:	edd4 0a02 	vldr	s1, [r4, #8]
 80142aa:	eef4 7ac8 	vcmpe.f32	s15, s16
 80142ae:	eef0 0ae0 	vabs.f32	s1, s1
 80142b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b6:	eef1 0a60 	vneg.f32	s1, s1
 80142ba:	dd71      	ble.n	80143a0 <tPBTriangle_tick+0x10c>
    {
        v = 2.0f * t / c->skew - 1.0f;
 80142bc:	ee38 7a08 	vadd.f32	s14, s16, s16
 80142c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80142c4:	ee87 aa27 	vdiv.f32	s20, s14, s15
 80142c8:	ee3a aa66 	vsub.f32	s20, s20, s13
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
    }

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80142cc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    v += LEAF_poly_blamp(t,  dt);
 80142d0:	edcd 0a01 	vstr	s1, [sp, #4]
 80142d4:	eeb0 0a48 	vmov.f32	s0, s16
 80142d8:	f7ff fca2 	bl	8013c20 <LEAF_poly_blamp>
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80142dc:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
 80142e0:	eeb0 ba40 	vmov.f32	s22, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80142e4:	ee38 0ac8 	vsub.f32	s0, s17, s16
 80142e8:	f7ff fc9a 	bl	8013c20 <LEAF_poly_blamp>
    t += 0.5f;
 80142ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80142f0:	eef0 aa40 	vmov.f32	s21, s0
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
 80142f4:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
 80142f8:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
 80142fc:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 8014300:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    v -= LEAF_poly_blamp(t, dt);
 8014304:	ee38 0a69 	vsub.f32	s0, s16, s19
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014308:	ee38 8ac8 	vsub.f32	s16, s17, s16
    v -= LEAF_poly_blamp(t, dt);
 801430c:	f7ff fc88 	bl	8013c20 <LEAF_poly_blamp>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014310:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
 8014314:	eeb0 9a40 	vmov.f32	s18, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014318:	ee38 0a29 	vadd.f32	s0, s16, s19
 801431c:	f7ff fc80 	bl	8013c20 <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 8014320:	edd4 7a02 	vldr	s15, [r4, #8]
 8014324:	edd4 6a01 	vldr	s13, [r4, #4]
 8014328:	ee39 9a00 	vadd.f32	s18, s18, s0
 801432c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014334:	ee39 9a4a 	vsub.f32	s18, s18, s20
 8014338:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801433c:	ee77 7ac7 	vsub.f32	s15, s15, s14
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 8014340:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
 8014344:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 8014348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801434c:	db0c      	blt.n	8014368 <tPBTriangle_tick+0xd4>
 801434e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014352:	eeb0 7a67 	vmov.f32	s14, s15
 8014356:	ee77 7ae8 	vsub.f32	s15, s15, s17
 801435a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801435e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014362:	daf6      	bge.n	8014352 <tPBTriangle_tick+0xbe>
 8014364:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase < 0.0f) c->phase += 1.0f;
 8014368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801436c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014370:	d50e      	bpl.n	8014390 <tPBTriangle_tick+0xfc>
 8014372:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014376:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 801437a:	eeb0 7a67 	vmov.f32	s14, s15
 801437e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014382:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801438a:	d4f6      	bmi.n	801437a <tPBTriangle_tick+0xe6>
 801438c:	edc4 7a01 	vstr	s15, [r4, #4]
	return -v;
 8014390:	ee39 9a4b 	vsub.f32	s18, s18, s22
 8014394:	ee39 0a6a 	vsub.f32	s0, s18, s21
}
 8014398:	b002      	add	sp, #8
 801439a:	ecbd 8b08 	vpop	{d8-d11}
 801439e:	bd10      	pop	{r4, pc}
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
 80143a0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80143a4:	edd4 6a05 	vldr	s13, [r4, #20]
 80143a8:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 80143ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80143b0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80143b4:	ee87 aaa6 	vdiv.f32	s20, s15, s13
 80143b8:	ee3a aa07 	vadd.f32	s20, s20, s14
 80143bc:	e786      	b.n	80142cc <tPBTriangle_tick+0x38>
 80143be:	bf00      	nop

080143c0 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
 80143c0:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
 80143c2:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
 80143c6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 80143ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 80143ce:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80143d2:	4770      	bx	lr

080143d4 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
 80143d4:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 80143d8:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8014408 <tPBTriangle_setSkew+0x34>
 80143dc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801440c <tPBTriangle_setSkew+0x38>
{
 80143e0:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
 80143e2:	6804      	ldr	r4, [r0, #0]
    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 80143e4:	f7ff fa5e 	bl	80138a4 <LEAF_clip>
    c->skew = (mySkew + 1.0f) * 0.5f;
 80143e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80143f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80143f4:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusSkew = 1.0f - c->skew;
 80143f8:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->skew = (mySkew + 1.0f) * 0.5f;
 80143fc:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
 8014400:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8014404:	bd10      	pop	{r4, pc}
 8014406:	bf00      	nop
 8014408:	3f7d70a4 	.word	0x3f7d70a4
 801440c:	3c23d70a 	.word	0x3c23d70a

08014410 <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
 8014410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014412:	698e      	ldr	r6, [r1, #24]
{
 8014414:	4607      	mov	r7, r0
 8014416:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 8014418:	2028      	movs	r0, #40	; 0x28
 801441a:	4631      	mov	r1, r6
 801441c:	f7ff fd44 	bl	8013ea8 <mpool_alloc>
 8014420:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8014422:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 8014424:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8014426:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014428:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
 801442a:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801442c:	4629      	mov	r1, r5
 801442e:	f7ff fd3b 	bl	8013ea8 <mpool_alloc>
    c->inc      =  0;
 8014432:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014434:	61e0      	str	r0, [r4, #28]
    c->mask = SINE_TABLE_SIZE - 1;
 8014436:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->mempool = m;
 801443a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801443c:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801443e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8014474 <tPBSineTriangle_init+0x64>
    c->phase    =  0;
 8014442:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014446:	edd2 7a01 	vldr	s15, [r2, #4]
    tCycle_initToPool(&c->sine, mp);
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
 801444a:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->mask = SINE_TABLE_SIZE - 1;
 801444e:	6141      	str	r1, [r0, #20]
    c->inc      =  0.0f;
 8014450:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014452:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->shape     =  0.0f;
    c->skew 	 = 0.5f;
 8014456:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801445a:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
 801445e:	6870      	ldr	r0, [r6, #4]
    c->phase    =  0.25f;
 8014460:	6062      	str	r2, [r4, #4]
    c->oneMinusShape = 1.0f;
 8014462:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->inc      =  0.0f;
 8014466:	60a3      	str	r3, [r4, #8]
    c->invSampleRate = leaf->invSampleRate;
 8014468:	61a0      	str	r0, [r4, #24]
    c->shape     =  0.0f;
 801446a:	6123      	str	r3, [r4, #16]
    c->lastOut  =  0.0f;
 801446c:	6163      	str	r3, [r4, #20]
    c->skew 	 = 0.5f;
 801446e:	6261      	str	r1, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
 8014470:	6222      	str	r2, [r4, #32]
}
 8014472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014474:	4f800000 	.word	0x4f800000

08014478 <tPBSineTriangle_tick>:
    {
        dt = c->inc;
    }

    //compute the naive waveform
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8014478:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 801447c:	b510      	push	{r4, lr}
 801447e:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSineTriangle* c = *osc;
 8014482:	6804      	ldr	r4, [r0, #0]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8014484:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
 8014488:	eeb0 7a67 	vmov.f32	s14, s15
{
 801448c:	b082      	sub	sp, #8
    Lfloat t = c->phase;
 801448e:	edd4 9a01 	vldr	s19, [r4, #4]

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014492:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014496:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 801449a:	eea9 7a89 	vfma.f32	s14, s19, s18
 801449e:	eef0 0ae0 	vabs.f32	s1, s1
    v += LEAF_poly_blamp(t,  dt);
 80144a2:	eeb0 0a69 	vmov.f32	s0, s19
 80144a6:	eef1 0a60 	vneg.f32	s1, s1
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 80144aa:	eeb0 7ac7 	vabs.f32	s14, s14
    v += LEAF_poly_blamp(t,  dt);
 80144ae:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 80144b2:	eee7 7a09 	vfma.f32	s15, s14, s18
 80144b6:	eeb0 8a67 	vmov.f32	s16, s15
    v += LEAF_poly_blamp(t,  dt);
 80144ba:	f7ff fbb1 	bl	8013c20 <LEAF_poly_blamp>
 80144be:	eef0 7a40 	vmov.f32	s15, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80144c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80144c6:	ee38 0ae9 	vsub.f32	s0, s17, s19
    v += LEAF_poly_blamp(t,  dt);
 80144ca:	ee38 8a27 	vadd.f32	s16, s16, s15
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80144ce:	f7ff fba7 	bl	8013c20 <LEAF_poly_blamp>
    t += 0.5f;
 80144d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
 80144d6:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80144da:	ee38 8a00 	vadd.f32	s16, s16, s0
    t += 0.5f;
 80144de:	ee79 9aa7 	vadd.f32	s19, s19, s15
    t -= (int)(t);
 80144e2:	eebd aae9 	vcvt.s32.f32	s20, s19
 80144e6:	eeb8 aaca 	vcvt.f32.s32	s20, s20
    v -= LEAF_poly_blamp(t, dt);
 80144ea:	ee39 0aca 	vsub.f32	s0, s19, s20
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 80144ee:	ee78 9ae9 	vsub.f32	s19, s17, s19
    v -= LEAF_poly_blamp(t, dt);
 80144f2:	f7ff fb95 	bl	8013c20 <LEAF_poly_blamp>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 80144f6:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
 80144fa:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 80144fe:	ee39 0a8a 	vadd.f32	s0, s19, s20
 8014502:	f7ff fb8d 	bl	8013c20 <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 8014506:	edd4 7a02 	vldr	s15, [r4, #8]
 801450a:	edd4 6a01 	vldr	s13, [r4, #4]
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 801450e:	ee38 8a40 	vsub.f32	s16, s16, s0
    c->phase += c->inc - (int)c->inc;
 8014512:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801451a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801451e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8014522:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
 8014526:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 801452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452e:	db0a      	blt.n	8014546 <tPBSineTriangle_tick+0xce>
 8014530:	eeb0 7a67 	vmov.f32	s14, s15
 8014534:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8014538:	eeb4 7ac9 	vcmpe.f32	s14, s18
 801453c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014540:	daf6      	bge.n	8014530 <tPBSineTriangle_tick+0xb8>
 8014542:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
 8014546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801454a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801454e:	d50e      	bpl.n	801456e <tPBSineTriangle_tick+0xf6>
 8014550:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014554:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8014558:	eeb0 7a67 	vmov.f32	s14, s15
 801455c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014560:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014568:	d4f6      	bmi.n	8014558 <tPBSineTriangle_tick+0xe0>
 801456a:	edc4 7a01 	vstr	s15, [r4, #4]
    _tCycle* c = *cy;
 801456e:	69e0      	ldr	r0, [r4, #28]
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
 8014570:	edd4 6a04 	vldr	s13, [r4, #16]
    samp0 = __leaf_table_sinewave[idx];
 8014574:	4a14      	ldr	r2, [pc, #80]	; (80145c8 <tPBSineTriangle_tick+0x150>)
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014576:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80145cc <tPBSineTriangle_tick+0x154>
    c->phase += c->inc;
 801457a:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801457e:	440b      	add	r3, r1
 8014580:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
 8014582:	0d59      	lsrs	r1, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014584:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 8014588:	6940      	ldr	r0, [r0, #20]

    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 801458a:	ed94 6a08 	vldr	s12, [r4, #32]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 801458e:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
 8014592:	1c4b      	adds	r3, r1, #1
    samp0 = __leaf_table_sinewave[idx];
 8014594:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
 8014598:	4003      	ands	r3, r0
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 801459a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 801459e:	ed91 0a00 	vldr	s0, [r1]
    samp1 = __leaf_table_sinewave[idx];
 80145a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80145a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80145aa:	ed92 7a00 	vldr	s14, [r2]
 80145ae:	ee37 7a40 	vsub.f32	s14, s14, s0
 80145b2:	eea7 0a87 	vfma.f32	s0, s15, s14
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 80145b6:	ee20 0a06 	vmul.f32	s0, s0, s12
    return out;
}
 80145ba:	eea6 0a88 	vfma.f32	s0, s13, s16
 80145be:	b002      	add	sp, #8
 80145c0:	ecbd 8b06 	vpop	{d8-d10}
 80145c4:	bd10      	pop	{r4, pc}
 80145c6:	bf00      	nop
 80145c8:	08023a28 	.word	0x08023a28
 80145cc:	35000004 	.word	0x35000004

080145d0 <tPBSineTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
    _tPBSineTriangle* c = *osc;
 80145d0:	6803      	ldr	r3, [r0, #0]

    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
 80145d2:	edd3 7a06 	vldr	s15, [r3, #24]
    _tCycle* c = *cy;
 80145d6:	69da      	ldr	r2, [r3, #28]
    c->inc = freq * c->invSampleRate;
 80145d8:	ee67 7a80 	vmul.f32	s15, s15, s0
    c->freq  = freq;
 80145dc:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 80145e0:	edc3 7a02 	vstr	s15, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80145e4:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
 80145e8:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80145ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80145f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80145f4:	ed82 0a02 	vstr	s0, [r2, #8]
    tCycle_setFreq(&c->sine, freq);
}
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop

080145fc <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
 80145fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
 8014600:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 8014602:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
 8014606:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 801460a:	ed83 7a04 	vstr	s14, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
 801460e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8014612:	4770      	bx	lr

08014614 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
 8014614:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014616:	698c      	ldr	r4, [r1, #24]
{
 8014618:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 801461a:	2020      	movs	r0, #32
 801461c:	4621      	mov	r1, r4
 801461e:	f7ff fc43 	bl	8013ea8 <mpool_alloc>
 8014622:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014624:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8014626:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
 8014628:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
 801462a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 801462e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014650 <tPBPulse_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
 8014632:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
 8014636:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014638:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 801463c:	ed80 7a06 	vstr	s14, [r0, #24]
    c->freq = 0.0f;
 8014640:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
 8014642:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
 8014646:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 801464a:	edc0 7a07 	vstr	s15, [r0, #28]
}
 801464e:	bd38      	pop	{r3, r4, r5, pc}
 8014650:	4f800000 	.word	0x4f800000

08014654 <tPBPulse_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
 8014654:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
 8014656:	6804      	ldr	r4, [r0, #0]
    

    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8014658:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 801465c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80146d0 <tPBPulse_tick+0x7c>
{
 8014660:	ed2d 8b02 	vpush	{d8}
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014664:	6862      	ldr	r2, [r4, #4]
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8014666:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 801466a:	edd4 6a02 	vldr	s13, [r4, #8]
{
 801466e:	b082      	sub	sp, #8
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8014670:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8014674:	eef8 0ae6 	vcvt.f32.s32	s1, s13
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014678:	ee06 2a90 	vmov	s13, r2
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 801467c:	18d3      	adds	r3, r2, r3
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 801467e:	428a      	cmp	r2, r1
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014680:	eeb8 0a66 	vcvt.f32.u32	s0, s13
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014684:	ee08 3a10 	vmov	s16, r3
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8014688:	ee60 0aa7 	vmul.f32	s1, s1, s15
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 801468c:	bf28      	it	cs
 801468e:	eef0 8a47 	vmovcs.f32	s17, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014692:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
 8014696:	ee20 0a27 	vmul.f32	s0, s0, s15
 801469a:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 801469e:	ee28 8a27 	vmul.f32	s16, s16, s15
    out += LEAF_poly_blep(phaseFloat,incFloat);
 80146a2:	f7ff fa91 	bl	8013bc8 <LEAF_poly_blep>
 80146a6:	eef0 7a40 	vmov.f32	s15, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 80146aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80146ae:	eeb0 0a48 	vmov.f32	s0, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
 80146b2:	ee78 8aa7 	vadd.f32	s17, s17, s15
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 80146b6:	f7ff fa87 	bl	8013bc8 <LEAF_poly_blep>
    c->phase += c->inc;
 80146ba:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return out;
}
 80146be:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc;
 80146c2:	4413      	add	r3, r2
 80146c4:	6063      	str	r3, [r4, #4]
}
 80146c6:	b002      	add	sp, #8
 80146c8:	ecbd 8b02 	vpop	{d8}
 80146cc:	bd10      	pop	{r4, pc}
 80146ce:	bf00      	nop
 80146d0:	2f80000d 	.word	0x2f80000d

080146d4 <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
 80146d4:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80146d6:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
 80146da:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80146de:	ee20 0a27 	vmul.f32	s0, s0, s15
 80146e2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80146e6:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80146ea:	4770      	bx	lr

080146ec <tPBPulse_setWidth>:
    }
    if (width > 0.95f)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 80146ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80146f0:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8014724 <tPBPulse_setWidth+0x38>
 80146f4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8014728 <tPBPulse_setWidth+0x3c>
 80146f8:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
 80146fc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 801472c <tPBPulse_setWidth+0x40>
 8014700:	fe80 0a66 	vminnm.f32	s0, s0, s13
 8014704:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
 8014708:	ee20 0a07 	vmul.f32	s0, s0, s14
    _tPBPulse* c = *osc;
 801470c:	6803      	ldr	r3, [r0, #0]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 801470e:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
 8014712:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
 801471a:	ed83 0a04 	vstr	s0, [r3, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 801471e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8014722:	4770      	bx	lr
 8014724:	3d4ccccd 	.word	0x3d4ccccd
 8014728:	3f733333 	.word	0x3f733333
 801472c:	4f800000 	.word	0x4f800000

08014730 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
 8014730:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014732:	698c      	ldr	r4, [r1, #24]
{
 8014734:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
 8014736:	2020      	movs	r0, #32
 8014738:	4621      	mov	r1, r4
 801473a:	f7ff fbb5 	bl	8013ea8 <mpool_alloc>
 801473e:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014740:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8014742:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8014744:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 8014746:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014748:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014764 <tPBSaw_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 801474c:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 8014750:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014752:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8014756:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 801475a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 801475e:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8014762:	bd38      	pop	{r3, r4, r5, pc}
 8014764:	4f800000 	.word	0x4f800000

08014768 <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
 8014768:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
 801476a:	6804      	ldr	r4, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 801476c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80147b0 <tPBSaw_tick+0x48>
{
 8014770:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 8014774:	edd4 7a01 	vldr	s15, [r4, #4]
 8014778:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 801477c:	edd4 7a02 	vldr	s15, [r4, #8]
 8014780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    out -= LEAF_poly_blep(phaseFloat, incFloat);
 8014784:	ee28 0a20 	vmul.f32	s0, s16, s1
 8014788:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801478c:	f7ff fa1c 	bl	8013bc8 <LEAF_poly_blep>
    c->phase += c->inc;
 8014790:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014794:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80147b4 <tPBSaw_tick+0x4c>
 8014798:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 801479c:	eee8 7a47 	vfms.f32	s15, s16, s14
 80147a0:	4413      	add	r3, r2
 80147a2:	6063      	str	r3, [r4, #4]
    return (-1.0f * out);
}
 80147a4:	ecbd 8b02 	vpop	{d8}
 80147a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80147ac:	bd10      	pop	{r4, pc}
 80147ae:	bf00      	nop
 80147b0:	2f80000d 	.word	0x2f80000d
 80147b4:	2ffffff6 	.word	0x2ffffff6

080147b8 <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
 80147b8:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80147ba:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 80147be:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80147c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80147c6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80147ca:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80147ce:	4770      	bx	lr

080147d0 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
 80147d0:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 80147d2:	698c      	ldr	r4, [r1, #24]
{
 80147d4:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
 80147d6:	2028      	movs	r0, #40	; 0x28
 80147d8:	4621      	mov	r1, r4
 80147da:	f7ff fb65 	bl	8013ea8 <mpool_alloc>
 80147de:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80147e0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 80147e2:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 80147e4:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 80147e6:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80147e8:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014804 <tPBSawSquare_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 80147ec:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 80147f0:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80147f2:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 80147f6:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 80147fa:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80147fe:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8014802:	bd38      	pop	{r3, r4, r5, pc}
 8014804:	4f800000 	.word	0x4f800000

08014808 <tPBSawSquare_tick>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
 8014808:	b530      	push	{r4, r5, lr}
    _tPBSawSquare* c = *osc;
 801480a:	6804      	ldr	r4, [r0, #0]
{
 801480c:	ed2d 8b06 	vpush	{d8-d10}

    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8014810:	6865      	ldr	r5, [r4, #4]
 8014812:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014816:	edd4 7a02 	vldr	s15, [r4, #8]
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 801481a:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 801481e:	eddf 9a1f 	vldr	s19, [pc, #124]	; 801489c <tPBSawSquare_tick+0x94>
{
 8014822:	b083      	sub	sp, #12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014824:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8014828:	ee07 5a90 	vmov	s15, r5
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 801482c:	2d00      	cmp	r5, #0
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 801482e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8014832:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014836:	ee60 0aa9 	vmul.f32	s1, s1, s19
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 801483a:	fe28 8a88 	vselge.f32	s16, s17, s16
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 801483e:	ee2a 0a29 	vmul.f32	s0, s20, s19
 8014842:	edcd 0a01 	vstr	s1, [sp, #4]
 8014846:	f7ff f9bf 	bl	8013bc8 <LEAF_poly_blep>
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 801484a:	ee07 5a90 	vmov	s15, r5
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 801484e:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8014852:	eddd 0a01 	vldr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8014856:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    

    sawOut -= resetBlep;
    
    squareOut += resetBlep;
 801485a:	ee38 8a09 	vadd.f32	s16, s16, s18
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 801485e:	ee20 0a29 	vmul.f32	s0, s0, s19
 8014862:	f7ff f9b1 	bl	8013bc8 <LEAF_poly_blep>
    squareOut -= midBlep;
 8014866:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80148a0 <tPBSawSquare_tick+0x98>
 801486a:	ee38 8a40 	vsub.f32	s16, s16, s0

    c->phase += c->inc;
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 801486e:	ed94 7a08 	vldr	s14, [r4, #32]
 8014872:	eeea 8a67 	vfms.f32	s17, s20, s15
 8014876:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    c->phase += c->inc;
 801487a:	6863      	ldr	r3, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 801487c:	ee28 8a07 	vmul.f32	s16, s16, s14
    c->phase += c->inc;
 8014880:	68a2      	ldr	r2, [r4, #8]
 8014882:	4413      	add	r3, r2
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8014884:	ee38 0a89 	vadd.f32	s0, s17, s18
    c->phase += c->inc;
 8014888:	6063      	str	r3, [r4, #4]
}
 801488a:	eea0 8a27 	vfma.f32	s16, s0, s15
 801488e:	eeb0 0a48 	vmov.f32	s0, s16
 8014892:	b003      	add	sp, #12
 8014894:	ecbd 8b06 	vpop	{d8-d10}
 8014898:	bd30      	pop	{r4, r5, pc}
 801489a:	bf00      	nop
 801489c:	2f80000d 	.word	0x2f80000d
 80148a0:	3000000d 	.word	0x3000000d

080148a4 <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
 80148a4:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 80148a6:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 80148aa:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 80148ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80148b2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80148b6:	ed83 0a02 	vstr	s0, [r3, #8]

}
 80148ba:	4770      	bx	lr

080148bc <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
 80148bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
 80148c0:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
 80148c2:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
 80148c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80148ca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80148ce:	4770      	bx	lr

080148d0 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 80148d0:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 80148d2:	6995      	ldr	r5, [r2, #24]
{
 80148d4:	4606      	mov	r6, r0
 80148d6:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 80148d8:	2018      	movs	r0, #24
 80148da:	4629      	mov	r1, r5
 80148dc:	f7ff fae4 	bl	8013ea8 <mpool_alloc>
 80148e0:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 80148e2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 80148e4:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 80148e6:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 80148e8:	691b      	ldr	r3, [r3, #16]
 80148ea:	6143      	str	r3, [r0, #20]
}
 80148ec:	bd70      	pop	{r4, r5, r6, pc}
 80148ee:	bf00      	nop

080148f0 <tNoise_initToPool>:
{
 80148f0:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 80148f2:	6815      	ldr	r5, [r2, #0]
{
 80148f4:	4606      	mov	r6, r0
 80148f6:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 80148f8:	2018      	movs	r0, #24
 80148fa:	4629      	mov	r1, r5
 80148fc:	f7ff fad4 	bl	8013ea8 <mpool_alloc>
 8014900:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8014902:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8014904:	686b      	ldr	r3, [r5, #4]
    n->type = type;
 8014906:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 8014908:	691b      	ldr	r3, [r3, #16]
 801490a:	6143      	str	r3, [r0, #20]
}
 801490c:	bd70      	pop	{r4, r5, r6, pc}
 801490e:	bf00      	nop

08014910 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
 8014910:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 8014912:	6801      	ldr	r1, [r0, #0]
 8014914:	f7ff bb8a 	b.w	801402c <mpool_free>

08014918 <tNoise_tick>:
}

Lfloat   tNoise_tick(tNoise* const ns)
{
 8014918:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 801491a:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 801491c:	6963      	ldr	r3, [r4, #20]
 801491e:	4798      	blx	r3
    
    if (n->type == PinkNoise)
 8014920:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8014922:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014926:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
 801492a:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 801492c:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
 8014930:	d131      	bne.n	8014996 <tNoise_tick+0x7e>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014932:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801499c <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014936:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80149a0 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 801493a:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801493e:	ed94 5a03 	vldr	s10, [r4, #12]
 8014942:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014946:	edd4 3a02 	vldr	s7, [r4, #8]
 801494a:	eddf 4a16 	vldr	s9, [pc, #88]	; 80149a4 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801494e:	eddf 5a16 	vldr	s11, [pc, #88]	; 80149a8 <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014952:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014956:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80149ac <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801495a:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 801495e:	ed94 4a04 	vldr	s8, [r4, #16]
 8014962:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014966:	eddf 5a12 	vldr	s11, [pc, #72]	; 80149b0 <tNoise_tick+0x98>
 801496a:	eddf 4a12 	vldr	s9, [pc, #72]	; 80149b4 <tNoise_tick+0x9c>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
 801496e:	ed9f 5a12 	vldr	s10, [pc, #72]	; 80149b8 <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014972:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014976:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 801497a:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801497e:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014982:	eef0 6a65 	vmov.f32	s13, s11
 8014986:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 801498a:	eee7 6aa4 	vfma.f32	s13, s15, s9
 801498e:	ee37 7a26 	vadd.f32	s14, s14, s13
        return (tmp * 0.05f);
 8014992:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8014996:	eeb0 0a67 	vmov.f32	s0, s15
 801499a:	bd10      	pop	{r4, pc}
 801499c:	3dcad8a1 	.word	0x3dcad8a1
 80149a0:	3e97d0ff 	.word	0x3e97d0ff
 80149a4:	3f7f65fe 	.word	0x3f7f65fe
 80149a8:	3f76872b 	.word	0x3f76872b
 80149ac:	3f86be97 	.word	0x3f86be97
 80149b0:	3f11eb85 	.word	0x3f11eb85
 80149b4:	3e3d3c36 	.word	0x3e3d3c36
 80149b8:	3d4ccccd 	.word	0x3d4ccccd

080149bc <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 80149bc:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80149be:	698c      	ldr	r4, [r1, #24]
{
 80149c0:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80149c2:	201c      	movs	r0, #28
 80149c4:	4621      	mov	r1, r4
 80149c6:	f7ff fa6f 	bl	8013ea8 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 80149ca:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80149cc:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80149ce:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80149d0:	6862      	ldr	r2, [r4, #4]
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149d2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80149e8 <tIntPhasor_init+0x2c>
    c->inc  = 0;
 80149d6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149da:	edd2 7a01 	vldr	s15, [r2, #4]
 80149de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80149e2:	edc0 7a06 	vstr	s15, [r0, #24]
}
 80149e6:	bd38      	pop	{r3, r4, r5, pc}
 80149e8:	4f800000 	.word	0x4f800000

080149ec <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 80149ec:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 80149ee:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014a08 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 80149f2:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 80149f6:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 80149f8:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 80149fc:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 80149fe:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 8014a02:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a06:	4770      	bx	lr
 8014a08:	2f80000d 	.word	0x2f80000d

08014a0c <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
 8014a0c:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014a0e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8014a12:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014a16:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a1a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014a1e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014a22:	4770      	bx	lr

08014a24 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 8014a24:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8014a28:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014a44 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 8014a2c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8014a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a32:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014a36:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014a3a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014a3e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014a42:	4770      	bx	lr
 8014a44:	4f800000 	.word	0x4f800000

08014a48 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 8014a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a4a:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014a4e:	698f      	ldr	r7, [r1, #24]
{
 8014a50:	4606      	mov	r6, r0
 8014a52:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014a54:	2010      	movs	r0, #16
 8014a56:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014a58:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8014ae4 <tSquareLFO_init+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014a5c:	f7ff fa24 	bl	8013ea8 <mpool_alloc>
 8014a60:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8014a62:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014a64:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8014a66:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014a68:	201c      	movs	r0, #28
 8014a6a:	4639      	mov	r1, r7
 8014a6c:	f7ff fa1c 	bl	8013ea8 <mpool_alloc>
 8014a70:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8014a72:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014a74:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
 8014a76:	2700      	movs	r7, #0
    c->inc  = 0;
 8014a78:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014a7c:	edd2 7a01 	vldr	s15, [r2, #4]
 8014a80:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014a84:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014a88:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8014a8a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014a8c:	4629      	mov	r1, r5
 8014a8e:	f7ff fa0b 	bl	8013ea8 <mpool_alloc>
 8014a92:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8014a94:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 8014a96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8014a9a:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014a9c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8014ae8 <tSquareLFO_init+0xa0>
    c->inc  = 0;
 8014aa0:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014aa4:	ed92 7a01 	vldr	s14, [r2, #4]
 8014aa8:	ee27 7a08 	vmul.f32	s14, s14, s16
 8014aac:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8014ab0:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014ab2:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8014ab4:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014ab8:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8014abc:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014abe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014ac2:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8014ac6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014aca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014ad2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014ada:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8014ade:	ecbd 8b02 	vpop	{d8}
 8014ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ae4:	4f800000 	.word	0x4f800000
 8014ae8:	2f80000d 	.word	0x2f80000d

08014aec <tSquareLFO_initToPool>:
{
 8014aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aee:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8014af2:	680f      	ldr	r7, [r1, #0]
{
 8014af4:	4606      	mov	r6, r0
 8014af6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014af8:	2010      	movs	r0, #16
 8014afa:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014afc:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8014b88 <tSquareLFO_initToPool+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014b00:	f7ff f9d2 	bl	8013ea8 <mpool_alloc>
 8014b04:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8014b06:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014b08:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8014b0a:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014b0c:	201c      	movs	r0, #28
 8014b0e:	4639      	mov	r1, r7
 8014b10:	f7ff f9ca 	bl	8013ea8 <mpool_alloc>
 8014b14:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8014b16:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014b18:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
 8014b1a:	2700      	movs	r7, #0
    c->inc  = 0;
 8014b1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014b20:	edd2 7a01 	vldr	s15, [r2, #4]
 8014b24:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014b28:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014b2c:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8014b2e:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014b30:	4629      	mov	r1, r5
 8014b32:	f7ff f9b9 	bl	8013ea8 <mpool_alloc>
 8014b36:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8014b38:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 8014b3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8014b3e:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014b40:	eddf 6a12 	vldr	s13, [pc, #72]	; 8014b8c <tSquareLFO_initToPool+0xa0>
    c->inc  = 0;
 8014b44:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014b48:	ed92 7a01 	vldr	s14, [r2, #4]
 8014b4c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8014b50:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8014b54:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014b56:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8014b58:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014b5c:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8014b60:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014b62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014b66:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8014b6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014b6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014b76:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b7e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8014b82:	ecbd 8b02 	vpop	{d8}
 8014b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b88:	4f800000 	.word	0x4f800000
 8014b8c:	2f80000d 	.word	0x2f80000d

08014b90 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 8014b90:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014b92:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014b96:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8014bd4 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 8014b9a:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 8014b9c:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8014ba0:	4403      	add	r3, r0
 8014ba2:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8014ba4:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8014ba8:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 8014baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8014bae:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8014bb2:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 8014bb4:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 8014bb8:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014bba:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8014bbe:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014bc2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8014bc6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014bca:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8014bce:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014bd2:	4770      	bx	lr
 8014bd4:	2f80000d 	.word	0x2f80000d

08014bd8 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 8014bd8:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 8014bda:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014bdc:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8014be0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014be4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014bec:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8014bf0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014bf2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8014bf6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014bfa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014bfe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014c02:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014c06:	4770      	bx	lr

08014c08 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 8014c08:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c0a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014c40 <tSquareLFO_setPulseWidth+0x38>
 8014c0e:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8014c10:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c14:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 8014c18:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014c44 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8014c20:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c22:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 8014c26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8014c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c2e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014c32:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014c36:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014c3a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014c3e:	4770      	bx	lr
 8014c40:	2f80000d 	.word	0x2f80000d
 8014c44:	4f800000 	.word	0x4f800000

08014c48 <tSquareLFO_setPhase>:
    int i = phase;
 8014c48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8014c4c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8014c9c <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
 8014c50:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c52:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014ca0 <tSquareLFO_setPhase+0x58>
    phase -= i;
 8014c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
 8014c5a:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8014c5c:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014c60:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014c64:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014c68:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c6c:	689a      	ldr	r2, [r3, #8]
 8014c6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8014c72:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8014c76:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c78:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014c7c:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8014c80:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014c84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014c8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014c94:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8014c98:	4770      	bx	lr
 8014c9a:	bf00      	nop
 8014c9c:	4f800000 	.word	0x4f800000
 8014ca0:	2f80000d 	.word	0x2f80000d

08014ca4 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 8014ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014ca6:	460c      	mov	r4, r1
{
 8014ca8:	4606      	mov	r6, r0
 8014caa:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8014cac:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8014cae:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8014cb2:	4639      	mov	r1, r7
 8014cb4:	f7ff f8f8 	bl	8013ea8 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 8014cb8:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8014cba:	6030      	str	r0, [r6, #0]
 8014cbc:	4604      	mov	r4, r0
    c->mempool = m;
 8014cbe:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8014cc2:	f7ff ff13 	bl	8014aec <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 8014cc6:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014cc8:	201c      	movs	r0, #28
 8014cca:	4629      	mov	r1, r5
 8014ccc:	f7ff f8ec 	bl	8013ea8 <mpool_alloc>
    c->phase    =  0;
 8014cd0:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014cd2:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8014cd4:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014cd6:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014cd8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8014cf0 <tSawSquareLFO_init+0x4c>
    c->inc  = 0;
 8014cdc:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014ce0:	edd2 7a01 	vldr	s15, [r2, #4]
 8014ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ce8:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8014cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	4f800000 	.word	0x4f800000

08014cf4 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 8014cf4:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 8014cf6:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8014cf8:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8014cfc:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8014d74 <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014d00:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 8014d04:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 8014d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 8014d0a:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8014d0e:	4403      	add	r3, r0
 8014d10:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8014d12:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 8014d16:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 8014d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8014d1c:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 8014d1e:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8014d20:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 8014d24:	6884      	ldr	r4, [r0, #8]
 8014d26:	4423      	add	r3, r4
 8014d28:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 8014d2a:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8014d2e:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 8014d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8014d34:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8014d38:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 8014d3a:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 8014d3e:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8014d40:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8014d44:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014d48:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8014d4c:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8014d50:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014d54:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8014d58:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 8014d5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014d60:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014d64:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 8014d68:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8014d6c:	eea6 0a07 	vfma.f32	s0, s12, s14
 8014d70:	4770      	bx	lr
 8014d72:	bf00      	nop
 8014d74:	2f80000d 	.word	0x2f80000d

08014d78 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
 8014d78:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 8014d7a:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 8014d7c:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d7e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8014d82:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d86:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014d8e:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8014d92:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d94:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8014d98:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d9c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014da4:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8014da8:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014daa:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8014dae:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014db2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014db6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014dba:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 8014dbe:	4770      	bx	lr

08014dc0 <tSawSquareLFO_setPhase>:
    int i = phase;
 8014dc0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8014dc4:	eddf 6a15 	vldr	s13, [pc, #84]	; 8014e1c <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
 8014dc8:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014dca:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014e20 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 8014dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
 8014dd2:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 8014dd4:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 8014dd6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014dda:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014dde:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8014de2:	edc0 7a01 	vstr	s15, [r0, #4]
 8014de6:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014dea:	6890      	ldr	r0, [r2, #8]
 8014dec:	edd2 7a01 	vldr	s15, [r2, #4]
 8014df0:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 8014df4:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014df6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014dfa:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8014dfe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014e02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014e0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014e12:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 8014e16:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 8014e18:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 8014e1a:	4770      	bx	lr
 8014e1c:	4f800000 	.word	0x4f800000
 8014e20:	2f80000d 	.word	0x2f80000d

08014e24 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
 8014e24:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 8014e26:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014e2a:	4770      	bx	lr

08014e2c <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 8014e2c:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014e2e:	698d      	ldr	r5, [r1, #24]
{
 8014e30:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8014e32:	2018      	movs	r0, #24
 8014e34:	4629      	mov	r1, r5
 8014e36:	f7ff f837 	bl	8013ea8 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 8014e3a:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8014e3c:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 8014e3e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014e40:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014e42:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014e78 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 8014e46:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8014e7c <tTriLFO_init+0x50>
    c->phase    =  0;
 8014e4a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8014e4e:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
 8014e56:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014e5a:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
 8014e5e:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e60:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8014e64:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014e70:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8014e74:	bd38      	pop	{r3, r4, r5, pc}
 8014e76:	bf00      	nop
 8014e78:	4f800000 	.word	0x4f800000
 8014e7c:	435c0000 	.word	0x435c0000

08014e80 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 8014e80:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8014e82:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8014e86:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014eb0 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 8014e8a:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 8014e8e:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8014e90:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
 8014e94:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8014e96:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8014e9a:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8014e9e:	ee07 3a90 	vmov	s15, r3
 8014ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ea6:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8014eaa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014eae:	4770      	bx	lr
 8014eb0:	2ffffff6 	.word	0x2ffffff6

08014eb4 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 8014eb4:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014eb6:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8014eba:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014ebe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014ec2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014ec6:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014eca:	4770      	bx	lr

08014ecc <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 8014ecc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 8014ed0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8014ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ed6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8014eda:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 8014ede:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014ee2:	4770      	bx	lr

08014ee4 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 8014ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ee6:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014eea:	698f      	ldr	r7, [r1, #24]
{
 8014eec:	4606      	mov	r6, r0
 8014eee:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8014ef0:	2010      	movs	r0, #16
 8014ef2:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014ef4:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8014f70 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8014ef8:	f7fe ffd6 	bl	8013ea8 <mpool_alloc>
 8014efc:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8014efe:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8014f00:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 8014f02:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 8014f04:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8014f06:	4631      	mov	r1, r6
 8014f08:	f7fe ffce 	bl	8013ea8 <mpool_alloc>
 8014f0c:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8014f0e:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014f10:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 8014f12:	2600      	movs	r6, #0
    c->freq  = freq;
 8014f14:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8014f74 <tSineTriLFO_init+0x90>
    c->phase    =  0;
 8014f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8014f1c:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014f20:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 8014f24:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014f28:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014f2c:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 8014f2e:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014f30:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8014f34:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014f40:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 8014f44:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014f46:	4629      	mov	r1, r5
 8014f48:	f7fe ffae 	bl	8013ea8 <mpool_alloc>
 8014f4c:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8014f4e:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 8014f50:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 8014f54:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8014f56:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014f5a:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8014f5e:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014f60:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014f64:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8014f68:	ecbd 8b02 	vpop	{d8}
 8014f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f6e:	bf00      	nop
 8014f70:	4f800000 	.word	0x4f800000
 8014f74:	435c0000 	.word	0x435c0000

08014f78 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 8014f78:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 8014f7a:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 8014f7c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 8014f80:	4a21      	ldr	r2, [pc, #132]	; (8015008 <tSineTriLFO_tick+0x90>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8014f82:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 8014f86:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014f88:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801500c <tSineTriLFO_tick+0x94>
    idx = (idx + 1) & c->mask;
 8014f8c:	6945      	ldr	r5, [r0, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8014f8e:	eddf 4a20 	vldr	s9, [pc, #128]	; 8015010 <tSineTriLFO_tick+0x98>
    c->phase += c->inc;
 8014f92:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8014f96:	440b      	add	r3, r1
 8014f98:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
 8014f9a:	0d59      	lsrs	r1, r3, #21
    _tTriLFO* c = *cy;
 8014f9c:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014f9e:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8014fa2:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 8014fa6:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 8014fae:	4433      	add	r3, r6
 8014fb0:	6043      	str	r3, [r0, #4]
    idx = (idx + 1) & c->mask;
 8014fb2:	1c48      	adds	r0, r1, #1
    samp0 = __leaf_table_sinewave[idx];
 8014fb4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8014fb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    idx = (idx + 1) & c->mask;
 8014fbc:	4028      	ands	r0, r5
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
 8014fc2:	edd1 6a00 	vldr	s13, [r1]
    samp1 = __leaf_table_sinewave[idx];
 8014fc6:	eb02 0180 	add.w	r1, r2, r0, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 8014fca:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8014fce:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014fd2:	ed91 5a00 	vldr	s10, [r1]
    return  (1.0f - c->shape) * a + c->shape * b;
 8014fd6:	ee37 0a07 	vadd.f32	s0, s14, s14
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8014fda:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 8014fde:	ee36 6a47 	vsub.f32	s12, s12, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014fe2:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8014fe6:	ee07 2a10 	vmov	s14, r2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014fea:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8014fee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ff2:	eef0 7a65 	vmov.f32	s15, s11
}
 8014ff6:	bc70      	pop	{r4, r5, r6}
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8014ff8:	eee7 7a24 	vfma.f32	s15, s14, s9
    return  (1.0f - c->shape) * a + c->shape * b;
 8014ffc:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8015000:	eea6 0a26 	vfma.f32	s0, s12, s13
 8015004:	4770      	bx	lr
 8015006:	bf00      	nop
 8015008:	08023a28 	.word	0x08023a28
 801500c:	35000004 	.word	0x35000004
 8015010:	2ffffff6 	.word	0x2ffffff6

08015014 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
 8015014:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 8015016:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015018:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801501c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015020:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015028:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 801502c:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801502e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8015032:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015036:	ee20 0a27 	vmul.f32	s0, s0, s15
 801503a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801503e:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 8015042:	4770      	bx	lr

08015044 <tSineTriLFO_setPhase>:
    int i = phase;
 8015044:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 8015048:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8015070 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
 801504c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801504e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 8015052:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8015054:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8015058:	ee20 0a07 	vmul.f32	s0, s0, s14
 801505c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8015060:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 8015064:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 8015068:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 801506a:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 801506e:	4770      	bx	lr
 8015070:	4f800000 	.word	0x4f800000

08015074 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
 8015074:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8015076:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 801507a:	4770      	bx	lr
 801507c:	0000      	movs	r0, r0
	...

08015080 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
 8015080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015084:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
 8015088:	f8d3 9000 	ldr.w	r9, [r3]
{
 801508c:	b083      	sub	sp, #12
 801508e:	460e      	mov	r6, r1
 8015090:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8015092:	4649      	mov	r1, r9
 8015094:	206c      	movs	r0, #108	; 0x6c
{
 8015096:	461d      	mov	r5, r3
 8015098:	eeb0 8a40 	vmov.f32	s16, s0
 801509c:	eeb0 9a41 	vmov.f32	s18, s2
 80150a0:	4617      	mov	r7, r2
 80150a2:	eef0 9a61 	vmov.f32	s19, s3
 80150a6:	eeb0 aa42 	vmov.f32	s20, s4
 80150aa:	eeb0 ba62 	vmov.f32	s22, s5
 80150ae:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 80150b2:	f7fe fef9 	bl	8013ea8 <mpool_alloc>
 80150b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
 80150ba:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 80150be:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80150c2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    p->mempool = m;
 80150c6:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
 80150ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150ce:	ee87 ca08 	vdiv.f32	s24, s14, s16
    LEAF* leaf = p->mempool->leaf;
 80150d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
 80150d6:	65c6      	str	r6, [r0, #92]	; 0x5c
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 80150d8:	4604      	mov	r4, r0
    p->sampleRate = leaf->sampleRate * oversampling;
 80150da:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
 80150de:	f44f 6316 	mov.w	r3, #2400	; 0x960
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80150e2:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 80150e6:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->maxLength = 2400 * oversampling;
 80150ea:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
 80150ee:	2300      	movs	r3, #0
    p->sampleRate = leaf->sampleRate * oversampling;
 80150f0:	ee67 7a87 	vmul.f32	s15, s15, s14
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80150f4:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80152f0 <tSimpleLivingString3_initToPool+0x270>
    p->curr=0.0f;
 80150f8:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80150fa:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
 80150fc:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 80150fe:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
 8015102:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8015106:	4650      	mov	r0, sl
 8015108:	ee2c 0a2a 	vmul.f32	s0, s24, s21
 801510c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015110:	f7fb fce6 	bl	8010ae0 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 8015114:	ed94 0a02 	vldr	s0, [r4, #8]
 8015118:	462a      	mov	r2, r5
 801511a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801511c:	4658      	mov	r0, fp
 801511e:	f7fa fc19 	bl	800f954 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 8015122:	ed94 0a02 	vldr	s0, [r4, #8]
 8015126:	462a      	mov	r2, r5
 8015128:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801512a:	4648      	mov	r0, r9
 801512c:	f7fa fc12 	bl	800f954 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
 8015130:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
 8015134:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    p->freq = freq;
 8015138:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 801513c:	ee2c 7a07 	vmul.f32	s14, s24, s14
    if (waveLength<4.8) waveLength=4.8f;
 8015140:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80152e0 <tSimpleLivingString3_initToPool+0x260>
 8015144:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 8015148:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015150:	f100 80bd 	bmi.w	80152ce <tSimpleLivingString3_initToPool+0x24e>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015154:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8015156:	005b      	lsls	r3, r3, #1
 8015158:	ee07 3a90 	vmov	s15, r3
 801515c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015160:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8015164:	ee27 0aaa 	vmul.f32	s0, s15, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015168:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 801516c:	ed86 0a02 	vstr	s0, [r6, #8]
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015170:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015174:	f7fb fd0a 	bl	8010b8c <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015178:	ed96 7a05 	vldr	s14, [r6, #20]
    p->rippleDelay = 0.5f;
 801517c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015180:	eddf 7a5c 	vldr	s15, [pc, #368]	; 80152f4 <tSimpleLivingString3_initToPool+0x274>
 8015184:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015188:	ed96 6a01 	vldr	s12, [r6, #4]
 801518c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015190:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015194:	ed9f 0b54 	vldr	d0, [pc, #336]	; 80152e8 <tSimpleLivingString3_initToPool+0x268>
 8015198:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801519c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151a0:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80151a4:	f003 fe04 	bl	8018db0 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 80151a8:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 80151aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80151ae:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80151b2:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 80151b6:	ed94 0a02 	vldr	s0, [r4, #8]
 80151ba:	f7fa fccf 	bl	800fb5c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 80151be:	ed94 0a02 	vldr	s0, [r4, #8]
 80151c2:	4648      	mov	r0, r9
 80151c4:	f7fa fcca 	bl	800fb5c <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 80151c8:	4658      	mov	r0, fp
 80151ca:	f7fa fc3d 	bl	800fa48 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 80151ce:	4648      	mov	r0, r9
 80151d0:	f7fa fc3a 	bl	800fa48 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 80151d4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80151d8:	4629      	mov	r1, r5
 80151da:	eeb0 0a68 	vmov.f32	s0, s17
    p->dampFreq = dampFreq;
 80151de:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 80151e2:	9001      	str	r0, [sp, #4]
 80151e4:	f7fb fef0 	bl	8010fc8 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 80151e8:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 80151ec:	9801      	ldr	r0, [sp, #4]
 80151ee:	f7fb ff55 	bl	801109c <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 80151f2:	eeb0 0a68 	vmov.f32	s0, s17
 80151f6:	9801      	ldr	r0, [sp, #4]
 80151f8:	f7fb ff1e 	bl	8011038 <tOnePole_setFreq>
    p->rippleGain = 0.0f;
 80151fc:	2300      	movs	r3, #0
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80151fe:	4629      	mov	r1, r5
 8015200:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
    p->rippleGain = 0.0f;
 8015204:	6663      	str	r3, [r4, #100]	; 0x64
    tHighpass_initToPool(&p->DCblocker,13, mp);
 8015206:	4630      	mov	r0, r6
    p->rippleDelay = 0.5f;
 8015208:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    tHighpass_initToPool(&p->DCblocker,13, mp);
 801520c:	9601      	str	r6, [sp, #4]
 801520e:	f7fc f9c1 	bl	8011594 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 8015212:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 8015216:	9801      	ldr	r0, [sp, #4]
 8015218:	f7fc f9fc 	bl	8011614 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 801521c:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8015220:	9801      	ldr	r0, [sp, #4]
 8015222:	f7fc f9db 	bl	80115dc <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8015226:	eeb0 1a4b 	vmov.f32	s2, s22
 801522a:	eef0 0a4a 	vmov.f32	s1, s20
 801522e:	462a      	mov	r2, r5
 8015230:	eeb0 0a69 	vmov.f32	s0, s19
 8015234:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8015238:	4639      	mov	r1, r7
    p->userDecay = decay;
 801523a:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801523e:	f7fb f8a7 	bl	8010390 <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
 8015242:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    p->levMode=levMode;
 8015246:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
 8015248:	ee2c ca26 	vmul.f32	s24, s24, s13
    p->changeGainCompensator = 1.0f;
 801524c:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
 8015250:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
 8015254:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80152e0 <tSimpleLivingString3_initToPool+0x260>
 8015258:	eeb7 6acc 	vcvt.f64.f32	d6, s24
 801525c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015264:	d436      	bmi.n	80152d4 <tSimpleLivingString3_initToPool+0x254>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015266:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015268:	005b      	lsls	r3, r3, #1
 801526a:	ee00 3a10 	vmov	s0, r3
 801526e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015272:	fe80 0a4c 	vminnm.f32	s0, s0, s24
 8015276:	ee20 0a2a 	vmul.f32	s0, s0, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801527a:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
 801527c:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015280:	f7fb fc84 	bl	8010b8c <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015284:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015288:	ed94 7a05 	vldr	s14, [r4, #20]
 801528c:	eddf 7a19 	vldr	s15, [pc, #100]	; 80152f4 <tSimpleLivingString3_initToPool+0x274>
 8015290:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015294:	ed94 6a01 	vldr	s12, [r4, #4]
 8015298:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801529c:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 80152a0:	ed9f 0b11 	vldr	d0, [pc, #68]	; 80152e8 <tSimpleLivingString3_initToPool+0x268>
 80152a4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80152a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80152ac:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80152b0:	f003 fd7e 	bl	8018db0 <exp>
    p->pickupPoint = 0.9f;
 80152b4:	4a10      	ldr	r2, [pc, #64]	; (80152f8 <tSimpleLivingString3_initToPool+0x278>)
    p->prevDelayLength = p->waveLengthInSamples;
 80152b6:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
 80152b8:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 80152ba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
 80152be:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 80152c0:	ed84 0a04 	vstr	s0, [r4, #16]
}
 80152c4:	b003      	add	sp, #12
 80152c6:	ecbd 8b0a 	vpop	{d8-d12}
 80152ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ce:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80152fc <tSimpleLivingString3_initToPool+0x27c>
 80152d2:	e749      	b.n	8015168 <tSimpleLivingString3_initToPool+0xe8>
 80152d4:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80152fc <tSimpleLivingString3_initToPool+0x27c>
 80152d8:	e7cf      	b.n	801527a <tSimpleLivingString3_initToPool+0x1fa>
 80152da:	bf00      	nop
 80152dc:	f3af 8000 	nop.w
 80152e0:	33333333 	.word	0x33333333
 80152e4:	40133333 	.word	0x40133333
 80152e8:	0a3d70a4 	.word	0x0a3d70a4
 80152ec:	c01ba3d7 	.word	0xc01ba3d7
 80152f0:	3c23d70a 	.word	0x3c23d70a
 80152f4:	3d8d78c4 	.word	0x3d8d78c4
 80152f8:	3f666666 	.word	0x3f666666
 80152fc:	4019999a 	.word	0x4019999a

08015300 <tSimpleLivingString3_free>:
{
 8015300:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8015302:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
 8015304:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8015308:	f7fb f86a 	bl	80103e0 <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
 801530c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015310:	f7fc f960 	bl	80115d4 <tHighpass_free>
    tLinearDelay_free(&p->delayLineL);
 8015314:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8015318:	f7fa fb8a 	bl	800fa30 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
 801531c:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015320:	f7fa fb86 	bl	800fa30 <tLinearDelay_free>
    tOnePole_free(&p->bridgeFilter);
 8015324:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8015328:	f7fb fe82 	bl	8011030 <tOnePole_free>
    tExpSmooth_free(&p->wlSmooth);
 801532c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015330:	f7fb fc02 	bl	8010b38 <tExpSmooth_free>
    mpool_free((char*)p, p->mempool);
 8015334:	6821      	ldr	r1, [r4, #0]
 8015336:	4620      	mov	r0, r4
}
 8015338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 801533c:	f7fe be76 	b.w	801402c <mpool_free>

08015340 <tSimpleLivingString3_setFreq>:
{
 8015340:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8015342:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
 8015344:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
 8015348:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 801534c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 8015350:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 80153c8 <tSimpleLivingString3_setFreq+0x88>
 8015354:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8015358:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801535c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015360:	d42e      	bmi.n	80153c0 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015362:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015364:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015368:	005b      	lsls	r3, r3, #1
 801536a:	ee00 3a10 	vmov	s0, r3
 801536e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015372:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8015376:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801537a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 801537e:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015382:	f7fb fc03 	bl	8010b8c <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801538a:	ed94 7a05 	vldr	s14, [r4, #20]
 801538e:	eddf 7a12 	vldr	s15, [pc, #72]	; 80153d8 <tSimpleLivingString3_setFreq+0x98>
 8015392:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015396:	ed94 6a01 	vldr	s12, [r4, #4]
 801539a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801539e:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 80153a2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80153d0 <tSimpleLivingString3_setFreq+0x90>
 80153a6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80153aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80153ae:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80153b2:	f003 fcfd 	bl	8018db0 <exp>
 80153b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80153ba:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 80153be:	bd10      	pop	{r4, pc}
 80153c0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80153dc <tSimpleLivingString3_setFreq+0x9c>
 80153c4:	e7d9      	b.n	801537a <tSimpleLivingString3_setFreq+0x3a>
 80153c6:	bf00      	nop
 80153c8:	33333333 	.word	0x33333333
 80153cc:	40133333 	.word	0x40133333
 80153d0:	0a3d70a4 	.word	0x0a3d70a4
 80153d4:	c01ba3d7 	.word	0xc01ba3d7
 80153d8:	3d8d78c4 	.word	0x3d8d78c4
 80153dc:	4019999a 	.word	0x4019999a

080153e0 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 80153e0:	6800      	ldr	r0, [r0, #0]
 80153e2:	303c      	adds	r0, #60	; 0x3c
 80153e4:	f7fb be28 	b.w	8011038 <tOnePole_setFreq>

080153e8 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 80153e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80153ec:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015430 <tSimpleLivingString3_setDecay+0x48>
{
 80153f0:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 80153f2:	ee30 7a07 	vadd.f32	s14, s0, s14
    _tSimpleLivingString3* p = *pl;
 80153f6:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 80153f8:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 80153fc:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->userDecay = decay;
 8015400:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8015404:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8015408:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801540c:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8015428 <tSimpleLivingString3_setDecay+0x40>
 8015410:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015414:	ee85 0b07 	vdiv.f64	d0, d5, d7
 8015418:	f003 fcca 	bl	8018db0 <exp>
 801541c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015420:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 8015424:	bd10      	pop	{r4, pc}
 8015426:	bf00      	nop
 8015428:	52bd3c36 	.word	0x52bd3c36
 801542c:	c01ba196 	.word	0xc01ba196
 8015430:	3d8d78c4 	.word	0x3d8d78c4

08015434 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 8015434:	6800      	ldr	r0, [r0, #0]
 8015436:	3054      	adds	r0, #84	; 0x54
 8015438:	f7fb b80e 	b.w	8010458 <tFeedbackLeveler_setTargetLevel>

0801543c <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 801543c:	6800      	ldr	r0, [r0, #0]
 801543e:	3054      	adds	r0, #84	; 0x54
 8015440:	f7fa bfde 	b.w	8010400 <tFeedbackLeveler_setFactor>

08015444 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 8015444:	6800      	ldr	r0, [r0, #0]
 8015446:	3054      	adds	r0, #84	; 0x54
 8015448:	f7fa bfd6 	b.w	80103f8 <tFeedbackLeveler_setStrength>

0801544c <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 801544c:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
 801544e:	6805      	ldr	r5, [r0, #0]
{
 8015450:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 8015452:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8015456:	f7fa ffd7 	bl	8010408 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801545a:	622c      	str	r4, [r5, #32]
}
 801545c:	bd38      	pop	{r3, r4, r5, pc}
 801545e:	bf00      	nop

08015460 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
 8015460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
 8015464:	6801      	ldr	r1, [r0, #0]
{
 8015466:	b083      	sub	sp, #12
    int length = p->waveLengthInSamples;
 8015468:	edd1 7a02 	vldr	s15, [r1, #8]
 801546c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015470:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 8015474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015478:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801547c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8015480:	ee17 6a90 	vmov	r6, s15
    if (pluckPoint < 1)
 8015484:	2e00      	cmp	r6, #0
 8015486:	f340 8085 	ble.w	8015594 <tSimpleLivingString3_pluck+0x134>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 801548a:	42b0      	cmp	r0, r6
 801548c:	dc11      	bgt.n	80154b2 <tSimpleLivingString3_pluck+0x52>
    {
    	pluckPoint = length-1;
 801548e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
 8015492:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
 8015494:	4666      	mov	r6, ip
    for (int i = 0; i < length; i++)
 8015496:	dd7a      	ble.n	801558e <tSimpleLivingString3_pluck+0x12e>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015498:	ee07 ca90 	vmov	s15, ip
 801549c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80154a0:	f1bc 0f00 	cmp.w	ip, #0
 80154a4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80154a8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80154ac:	da10      	bge.n	80154d0 <tSimpleLivingString3_pluck+0x70>
 80154ae:	2300      	movs	r3, #0
 80154b0:	e02d      	b.n	801550e <tSimpleLivingString3_pluck+0xae>
    int remainder = length-pluckPoint;
 80154b2:	1b83      	subs	r3, r0, r6
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 80154b4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80154b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80154bc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80154c0:	ee07 3a90 	vmov	s15, r3
 80154c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154c8:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80154cc:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80154d0:	4566      	cmp	r6, ip
    for (int i = 0; i < length; i++)
 80154d2:	f04f 0300 	mov.w	r3, #0
 80154d6:	bfa8      	it	ge
 80154d8:	4666      	movge	r6, ip
 80154da:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80154de:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 80154e0:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80154e4:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 80154e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
 80154ec:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80154ee:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 80154f0:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80154f2:	fbb2 f7f5 	udiv	r7, r2, r5
 80154f6:	fb05 2217 	mls	r2, r5, r7, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 80154fa:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
 80154fe:	42b3      	cmp	r3, r6
        p->delayLineU->buff[bufWritePoint] = val;
 8015500:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015504:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 8015508:	dde9      	ble.n	80154de <tSimpleLivingString3_pluck+0x7e>
 801550a:	4298      	cmp	r0, r3
 801550c:	dd1d      	ble.n	801554a <tSimpleLivingString3_pluck+0xea>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 801550e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015512:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015516:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801551c:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015520:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015524:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
 8015528:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801552a:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 801552c:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 801552e:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
 8015532:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015534:	fbb2 f6f5 	udiv	r6, r2, r5
 8015538:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 801553c:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
 8015540:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015544:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 8015548:	dce3      	bgt.n	8015512 <tSimpleLivingString3_pluck+0xb2>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 801554a:	f04f 0e00 	mov.w	lr, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 801554e:	ebac 020e 	sub.w	r2, ip, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015552:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
 8015556:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8015558:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801555a:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 801555c:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801555e:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8015560:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015562:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015564:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015566:	4473      	add	r3, lr
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015568:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
 801556a:	f10e 0e01 	add.w	lr, lr, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801556e:	fbb2 f9f7 	udiv	r9, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015572:	fbb3 f8f6 	udiv	r8, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8015576:	fb07 2219 	mls	r2, r7, r9, r2
    for (int i = 0; i < length; i++)
 801557a:	4570      	cmp	r0, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801557c:	fb06 3318 	mls	r3, r6, r8, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015580:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8015584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015588:	6812      	ldr	r2, [r2, #0]
 801558a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 801558c:	d1df      	bne.n	801554e <tSimpleLivingString3_pluck+0xee>
    }
}
 801558e:	b003      	add	sp, #12
 8015590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < length; i++)
 8015594:	2800      	cmp	r0, #0
 8015596:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 801559a:	ddf8      	ble.n	801558e <tSimpleLivingString3_pluck+0x12e>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 801559c:	ee07 ca10 	vmov	s14, ip
 80155a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
 80155a4:	2601      	movs	r6, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80155a6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80155aa:	eeb0 7a67 	vmov.f32	s14, s15
 80155ae:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 80155b2:	eeb0 6a67 	vmov.f32	s12, s15
 80155b6:	e78b      	b.n	80154d0 <tSimpleLivingString3_pluck+0x70>

080155b8 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
 80155b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155bc:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
 80155c0:	6804      	ldr	r4, [r0, #0]
{
 80155c2:	eef0 8a40 	vmov.f32	s17, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 80155c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 80155ca:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 80155ce:	f7fb faeb 	bl	8010ba8 <tExpSmooth_tick>
 80155d2:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
 80155d6:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
 80155da:	4628      	mov	r0, r5
 80155dc:	f7fa fabe 	bl	800fb5c <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 80155e0:	eeb0 0a48 	vmov.f32	s0, s16
 80155e4:	4638      	mov	r0, r7
 80155e6:	f7fa fab9 	bl	800fb5c <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 80155ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	dd56      	ble.n	801569e <tSimpleLivingString3_tick+0xe6>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
 80155f0:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 80155f4:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 80155f8:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
 80155fc:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
 80155fe:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
 8015600:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
 8015602:	f7fa fa7f 	bl	800fb04 <tLinearDelay_tickOut>
 8015606:	4648      	mov	r0, r9
 8015608:	f7fb fd34 	bl	8011074 <tOnePole_tick>
 801560c:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8015610:	edd4 7a04 	vldr	s15, [r4, #16]
 8015614:	4650      	mov	r0, sl
 8015616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801561a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801561e:	f7fb ffe9 	bl	80115f4 <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015622:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay - p->rippleGain));
 8015624:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015628:	f7fa fef2 	bl	8010410 <tFeedbackLeveler_tick>
 801562c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8015630:	eef0 0a40 	vmov.f32	s1, s0
 8015634:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015638:	f7fe f934 	bl	80138a4 <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801563c:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801563e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8015642:	f7fa fa5f 	bl	800fb04 <tLinearDelay_tickOut>
 8015646:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801564a:	eef0 0a40 	vmov.f32	s1, s0
 801564e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015652:	f7fe f927 	bl	80138a4 <LEAF_clip>
 8015656:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 801565a:	4628      	mov	r0, r5
 801565c:	ee38 0ac0 	vsub.f32	s0, s17, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8015660:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 8015664:	f7fa fa3a 	bl	800fadc <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 8015668:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 801566c:	4638      	mov	r0, r7
 801566e:	eeb1 0a40 	vneg.f32	s0, s0
 8015672:	f7fa fa33 	bl	800fadc <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
 8015676:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 801567a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 801567e:	4628      	mov	r0, r5
 8015680:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015684:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 8015688:	ee26 0a80 	vmul.f32	s0, s13, s0
 801568c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015690:	ee17 1a90 	vmov	r1, s15
 8015694:	f7fa faa0 	bl	800fbd8 <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
 8015698:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801569a:	42b3      	cmp	r3, r6
 801569c:	dcaf      	bgt.n	80155fe <tSimpleLivingString3_tick+0x46>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 801569e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
 80156a2:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 80156a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 80156a8:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
 80156ac:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80156b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 80156b2:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 80156b6:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
 80156b8:	feb8 6a65 	vrinta.f32	s12, s11
 80156bc:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 80156c0:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 80156c4:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
 80156c8:	feb8 7a66 	vrinta.f32	s14, s13
 80156cc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 80156d0:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 80156d4:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 80156d8:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80156dc:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
 80156e0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 80156e4:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80156e6:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 80156e8:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80156ec:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 80156ee:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 80156f2:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80156f6:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 80156f8:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 80156fa:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
 80156fc:	ee75 5ac6 	vsub.f32	s11, s11, s12
    LfloatPart = reversePoint - whichPoint;
 8015700:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 8015704:	fb93 f6f0 	sdiv	r6, r3, r0
 8015708:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801570c:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 801570e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015712:	ee30 0a06 	vadd.f32	s0, s0, s12
    LfloatPart = reversePoint - whichPoint;
 8015716:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801571a:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 801571e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8015722:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015724:	ed92 6a00 	vldr	s12, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8015728:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 801572c:	ee20 0a06 	vmul.f32	s0, s0, s12
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8015730:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 8015734:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015736:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801573a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801573e:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8015742:	fb93 f5f0 	sdiv	r5, r3, r0
 8015746:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801574a:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 801574e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8015752:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
 8015756:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8015758:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801575c:	ee20 0a24 	vmul.f32	s0, s0, s9
 8015760:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 8015764:	ecbd 8b02 	vpop	{d8}
 8015768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801576c <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 801576c:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 801576e:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 8015772:	4770      	bx	lr

08015774 <tTString_initToPool>:
void    tTString_init                  (tTString* const b, int oversampling, Lfloat lowestFreq, LEAF* const leaf)
{
    tTString_initToPool(b, oversampling, lowestFreq, &leaf->mempool);
}
void    tTString_initToPool            (tTString* const bw, int oversampling, Lfloat lowestFreq, tMempool* const mp)
{
 8015774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015778:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
 801577c:	6817      	ldr	r7, [r2, #0]
{
 801577e:	460e      	mov	r6, r1
 8015780:	b082      	sub	sp, #8
 8015782:	4680      	mov	r8, r0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015784:	4639      	mov	r1, r7
 8015786:	f44f 70ca 	mov.w	r0, #404	; 0x194
{
 801578a:	4615      	mov	r5, r2
 801578c:	eeb0 9a40 	vmov.f32	s18, s0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015790:	f7fe fb8a 	bl	8013ea8 <mpool_alloc>
    x->mempool = m;
    LEAF* leaf = x->mempool->leaf;
    
    x->oversampling = oversampling;
    x->invOversampling = 1.0f / oversampling;
 8015794:	ee07 6a90 	vmov	s15, r6
 8015798:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 801579c:	f8c8 0000 	str.w	r0, [r8]
    x->invOversampling = 1.0f / oversampling;
 80157a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    x->mempool = m;
 80157a4:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
 80157a6:	687a      	ldr	r2, [r7, #4]
    x->tensionAmount = 0.0f;

    x->pickupPos = 0.0f;
    x->slideGain = 0.4f;
    x->barDrive = 0.5f;
    x->wound = 0;
 80157a8:	2700      	movs	r7, #0
    x->oversampling = oversampling;
 80157aa:	6046      	str	r6, [r0, #4]
    x->barPulsePhasor = 0;
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 80157ac:	f100 0614 	add.w	r6, r0, #20
    x->invOversampling = 1.0f / oversampling;
 80157b0:	ee88 7aa7 	vdiv.f32	s14, s17, s15
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 80157b4:	eddf baf7 	vldr	s23, [pc, #988]	; 8015b94 <tTString_initToPool+0x420>
    x->decayInSeconds = 10.0f;
 80157b8:	4bf7      	ldr	r3, [pc, #988]	; (8015b98 <tTString_initToPool+0x424>)
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 80157ba:	4604      	mov	r4, r0
    x->tensionGain = 0.0f;
 80157bc:	ed9f 8af7 	vldr	s16, [pc, #988]	; 8015b9c <tTString_initToPool+0x428>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
    tLagrangeDelay_clear(&x->delayP);

    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);

    tCookOnePole_initToPool(&x->reflFilt, mp);
 80157c0:	f100 0824 	add.w	r8, r0, #36	; 0x24
    x->baseDelay = 100.0f;
 80157c4:	eddf 9af6 	vldr	s19, [pc, #984]	; 8015ba0 <tTString_initToPool+0x42c>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 80157c8:	f100 0918 	add.w	r9, r0, #24
 80157cc:	eddf aaf5 	vldr	s21, [pc, #980]	; 8015ba4 <tTString_initToPool+0x430>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
   
    tTString_setFreq(&x, 440.0f);

    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 80157d0:	f104 0a4c 	add.w	sl, r4, #76	; 0x4c
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 80157d4:	eeb0 0a69 	vmov.f32	s0, s19
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 80157d8:	ed9f baf3 	vldr	s22, [pc, #972]	; 8015ba8 <tTString_initToPool+0x434>
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 80157dc:	ee77 6a07 	vadd.f32	s13, s14, s14
    x->invOversampling = 1.0f / oversampling;
 80157e0:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 80157e4:	edc0 6a03 	vstr	s13, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
 80157e8:	ed92 7a00 	vldr	s14, [r2]
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 80157ec:	462a      	mov	r2, r5
    x->decayInSeconds = 10.0f;
 80157ee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    x->sampleRate          = leaf->sampleRate * oversampling;
 80157f2:	ee67 7a87 	vmul.f32	s15, s15, s14
    x->slideGain = 0.4f;
 80157f6:	4bed      	ldr	r3, [pc, #948]	; (8015bac <tTString_initToPool+0x438>)
    x->wound = 0;
 80157f8:	f8c0 70d0 	str.w	r7, [r0, #208]	; 0xd0
    x->slideGain = 0.4f;
 80157fc:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
    x->barDrive = 0.5f;
 8015800:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
    x->invSampleRate = 1.f / x->sampleRate;
 8015804:	eec8 6aa7 	vdiv.f32	s13, s17, s15
    x->sampleRate          = leaf->sampleRate * oversampling;
 8015808:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->barDrive = 0.5f;
 801580c:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
    x->barPulsePhasor = 0;
 8015810:	f8c0 70dc 	str.w	r7, [r0, #220]	; 0xdc
    x->tensionGain = 0.0f;
 8015814:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
 8015818:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
 801581c:	ee87 7a89 	vdiv.f32	s14, s15, s18
    x->decayCoeff = 1.0f;
 8015820:	edc0 8a1c 	vstr	s17, [r0, #112]	; 0x70
    x->muteCoeff = 1.0f;
 8015824:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->output = 0.0f;
 8015828:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
 801582c:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
 8015830:	edc0 8a1f 	vstr	s17, [r0, #124]	; 0x7c
    x->r = 0.0f;
 8015834:	ed80 8a1e 	vstr	s16, [r0, #120]	; 0x78
    x->invOnePlusr = 1.0f;
 8015838:	edc0 8a22 	vstr	s17, [r0, #136]	; 0x88
    x->harmonic = 1.0f;
 801583c:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->baseDelay = 100.0f;
 8015840:	edc0 9a0b 	vstr	s19, [r0, #44]	; 0x2c
    x->tensionAmount = 0.0f;
 8015844:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->pickupPos = 0.0f;
 8015848:	ed80 8a26 	vstr	s16, [r0, #152]	; 0x98
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 801584c:	ee66 7aab 	vmul.f32	s15, s13, s23
    x->invSampleRate = 1.f / x->sampleRate;
 8015850:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8015854:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8015858:	4630      	mov	r0, r6
 801585a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801585e:	ee17 1a90 	vmov	r1, s15
 8015862:	edcd 7a01 	vstr	s15, [sp, #4]
 8015866:	f7fa fa81 	bl	800fd6c <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 801586a:	ed94 9a0c 	vldr	s18, [r4, #48]	; 0x30
 801586e:	4630      	mov	r0, r6
 8015870:	f7fa fb46 	bl	800ff00 <tLagrangeDelay_getMaxDelay>
 8015874:	eec9 7a00 	vdiv.f32	s15, s18, s0
    tLagrangeDelay_clear(&x->delay);
 8015878:	4630      	mov	r0, r6
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 801587a:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
    tLagrangeDelay_clear(&x->delay);
 801587e:	f7fa f9c9 	bl	800fc14 <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 8015882:	462a      	mov	r2, r5
 8015884:	9901      	ldr	r1, [sp, #4]
 8015886:	eeb0 0a69 	vmov.f32	s0, s19
 801588a:	4648      	mov	r0, r9
 801588c:	f7fa fa6e 	bl	800fd6c <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
 8015890:	4648      	mov	r0, r9
 8015892:	f7fa f9bf 	bl	800fc14 <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 8015896:	4630      	mov	r0, r6
 8015898:	f7fa fb32 	bl	800ff00 <tLagrangeDelay_getMaxDelay>
 801589c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 80158a0:	f104 0628 	add.w	r6, r4, #40	; 0x28
    tCookOnePole_initToPool(&x->reflFilt, mp);
 80158a4:	4629      	mov	r1, r5
 80158a6:	4640      	mov	r0, r8
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.01f * x->invOversampling, mp);
 80158a8:	f504 79c4 	add.w	r9, r4, #392	; 0x188
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 80158ac:	ed84 0a53 	vstr	s0, [r4, #332]	; 0x14c
    tCookOnePole_initToPool(&x->reflFilt, mp);
 80158b0:	f7fb fc16 	bl	80110e0 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
 80158b4:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80158b8:	4640      	mov	r0, r8
 80158ba:	f7fb fc55 	bl	8011168 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 80158be:	4629      	mov	r1, r5
 80158c0:	4630      	mov	r0, r6
 80158c2:	f7fb fc0d 	bl	80110e0 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
 80158c6:	4630      	mov	r0, r6
 80158c8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80158cc:	f7fb fc4c 	bl	8011168 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 80158d0:	4640      	mov	r0, r8
 80158d2:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8015bb0 <tTString_initToPool+0x43c>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 80158d6:	f104 0854 	add.w	r8, r4, #84	; 0x54
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 80158da:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8015bb4 <tTString_initToPool+0x440>
 80158de:	f7fb fc2d 	bl	801113c <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
 80158e2:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8015bb0 <tTString_initToPool+0x43c>
 80158e6:	4630      	mov	r0, r6
 80158e8:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8015bb4 <tTString_initToPool+0x440>
 80158ec:	f7fb fc26 	bl	801113c <tCookOnePole_setGainAndPole>
    x->freq = freq;

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 80158f0:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 80158f4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80158f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 80158fc:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8015900:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8015904:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
 8015908:	ee86 0a27 	vdiv.f32	s0, s12, s15
 801590c:	4630      	mov	r0, r6
    x->freq = freq;
 801590e:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8015912:	ee27 9a87 	vmul.f32	s18, s15, s14
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8015916:	ee30 0a66 	vsub.f32	s0, s0, s13
 801591a:	f7fb f937 	bl	8010b8c <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    x->phaseComp = atan2f(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)));
 801591e:	eeb0 0a49 	vmov.f32	s0, s18
 8015922:	ed94 aa4f 	vldr	s20, [r4, #316]	; 0x13c
 8015926:	f002 ffb5 	bl	8018894 <arm_sin_f32>
 801592a:	eef0 7a40 	vmov.f32	s15, s0
 801592e:	ed94 ca4f 	vldr	s24, [r4, #316]	; 0x13c
 8015932:	eeb0 0a49 	vmov.f32	s0, s18
 8015936:	ee2a aa27 	vmul.f32	s20, s20, s15
 801593a:	f002 fff1 	bl	8018920 <arm_cos_f32>
 801593e:	eef0 0a68 	vmov.f32	s1, s17
 8015942:	eef0 7a40 	vmov.f32	s15, s0
 8015946:	eeb0 0a4a 	vmov.f32	s0, s20
 801594a:	eeec 0a67 	vfms.f32	s1, s24, s15
 801594e:	f003 f961 	bl	8018c14 <atan2f>
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 8015952:	edd4 0a02 	vldr	s1, [r4, #8]
 8015956:	4629      	mov	r1, r5
 8015958:	4650      	mov	r0, sl
 801595a:	ee60 0a8b 	vmul.f32	s1, s1, s22
    x->phaseComp = atan2f(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)));
 801595e:	ed84 0a4e 	vstr	s0, [r4, #312]	; 0x138
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 8015962:	eeb0 0a48 	vmov.f32	s0, s16
 8015966:	f7fb f8bb 	bl	8010ae0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
 801596a:	eeb0 0a48 	vmov.f32	s0, s16
 801596e:	4650      	mov	r0, sl
 8015970:	f7fb f90c 	bl	8010b8c <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
 8015974:	eddf 7a90 	vldr	s15, [pc, #576]	; 8015bb8 <tTString_initToPool+0x444>
 8015978:	edd4 0a02 	vldr	s1, [r4, #8]
 801597c:	4629      	mov	r1, r5
 801597e:	4630      	mov	r0, r6
 8015980:	eeb0 0a69 	vmov.f32	s0, s19
 8015984:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015988:	f7fb f8aa 	bl	8010ae0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 801598c:	4630      	mov	r0, r6
 801598e:	eeb0 0a69 	vmov.f32	s0, s19
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 8015992:	f104 0658 	add.w	r6, r4, #88	; 0x58
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 8015996:	f7fb f8f9 	bl	8010b8c <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.01f * x->invOversampling, mp);
 801599a:	eddf 7a88 	vldr	s15, [pc, #544]	; 8015bbc <tTString_initToPool+0x448>
 801599e:	edd4 0a02 	vldr	s1, [r4, #8]
 80159a2:	4629      	mov	r1, r5
 80159a4:	eeb0 0a48 	vmov.f32	s0, s16
 80159a8:	4648      	mov	r0, r9
 80159aa:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80159ae:	f7fb f897 	bl	8010ae0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
 80159b2:	eeb0 0a48 	vmov.f32	s0, s16
 80159b6:	4648      	mov	r0, r9
 80159b8:	f7fb f8e8 	bl	8010b8c <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 80159bc:	462a      	mov	r2, r5
 80159be:	2104      	movs	r1, #4
 80159c0:	4640      	mov	r0, r8
 80159c2:	f7fb f963 	bl	8010c8c <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 80159c6:	462a      	mov	r2, r5
 80159c8:	2104      	movs	r1, #4
 80159ca:	4630      	mov	r0, r6
 80159cc:	f7fb f95e 	bl	8010c8c <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 80159d0:	eef0 0a69 	vmov.f32	s1, s19
 80159d4:	ed94 1a02 	vldr	s2, [r4, #8]
 80159d8:	4640      	mov	r0, r8
 80159da:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8015bc0 <tTString_initToPool+0x44c>
 80159de:	f7fb f9cd 	bl	8010d7c <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 80159e2:	ed94 1a02 	vldr	s2, [r4, #8]
 80159e6:	4630      	mov	r0, r6
 80159e8:	eef0 0a69 	vmov.f32	s1, s19
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 80159ec:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 80159f0:	f104 066c 	add.w	r6, r4, #108	; 0x6c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 80159f4:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8015bc4 <tTString_initToPool+0x450>
 80159f8:	f7fb f9c0 	bl	8010d7c <tThiranAllpassSOCascade_setCoeff>
 80159fc:	eef0 7a40 	vmov.f32	s15, s0
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 6000.0f, 0.8f, mp);
 8015a00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015a04:	eddf 0a70 	vldr	s1, [pc, #448]	; 8015bc8 <tTString_initToPool+0x454>
 8015a08:	462a      	mov	r2, r5
 8015a0a:	2101      	movs	r1, #1
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8015a0c:	edc4 7a18 	vstr	s15, [r4, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 6000.0f, 0.8f, mp);
 8015a10:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8015bcc <tTString_initToPool+0x458>
 8015a14:	9001      	str	r0, [sp, #4]
 8015a16:	f7fb fc39 	bl	801128c <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
 8015a1a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015a1e:	9801      	ldr	r0, [sp, #4]
 8015a20:	f7fb fd8e 	bl	8011540 <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
 8015a24:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8015bcc <tTString_initToPool+0x458>
 8015a28:	9801      	ldr	r0, [sp, #4]
 8015a2a:	f7fb fcf1 	bl	8011410 <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 8015a2e:	eddf 0a66 	vldr	s1, [pc, #408]	; 8015bc8 <tTString_initToPool+0x454>
 8015a32:	462a      	mov	r2, r5
 8015a34:	4639      	mov	r1, r7
 8015a36:	4630      	mov	r0, r6
 8015a38:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8015bd0 <tTString_initToPool+0x45c>
 8015a3c:	f7fb fc26 	bl	801128c <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 8015a40:	4630      	mov	r0, r6
 8015a42:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    tCycle_initToPool(&x->pickupModOsc, mp);
 8015a46:	f104 07a8 	add.w	r7, r4, #168	; 0xa8
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 8015a4a:	f7fb fd79 	bl	8011540 <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
 8015a4e:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8015bd0 <tTString_initToPool+0x45c>
 8015a52:	4630      	mov	r0, r6
    tCycle_initToPool(&x->tensionModOsc, mp);
 8015a54:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
    tSVF_setFreq(&x->highpassP, 1800.0f);
 8015a58:	f7fb fcda 	bl	8011410 <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 8015a5c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    tCycle_initToPool(&x->tensionModOsc, mp);
 8015a60:	4629      	mov	r1, r5
 8015a62:	4630      	mov	r0, r6
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 8015a64:	ee67 7aab 	vmul.f32	s15, s15, s23
 8015a68:	edc4 7a04 	vstr	s15, [r4, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
 8015a6c:	f7fe fb7e 	bl	801416c <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
 8015a70:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015a74:	4630      	mov	r0, r6
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 3500.0f, 0.8f, mp);
 8015a76:	f104 06b4 	add.w	r6, r4, #180	; 0xb4
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
 8015a7a:	f7fe fbdb 	bl	8014234 <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
 8015a7e:	4629      	mov	r1, r5
 8015a80:	4638      	mov	r0, r7
 8015a82:	f7fe fb73 	bl	801416c <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
 8015a86:	4638      	mov	r0, r7
 8015a88:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 8015a8c:	f104 071c 	add.w	r7, r4, #28
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
 8015a90:	f7fe fbd0 	bl	8014234 <tCycle_setSampleRate>
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 3500.0f, 0.8f, mp);
 8015a94:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8015bc8 <tTString_initToPool+0x454>
 8015a98:	2101      	movs	r1, #1
 8015a9a:	462a      	mov	r2, r5
 8015a9c:	4630      	mov	r0, r6
 8015a9e:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8015bd4 <tTString_initToPool+0x460>
    x->pickupModOscFreq = 440.0f;
 8015aa2:	edc4 aa2b 	vstr	s21, [r4, #172]	; 0xac
    x->pickupModOscAmp = 1.0f;
 8015aa6:	edc4 8a2c 	vstr	s17, [r4, #176]	; 0xb0
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 3500.0f, 0.8f, mp);
 8015aaa:	f7fb fbef 	bl	801128c <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
 8015aae:	4630      	mov	r0, r6
 8015ab0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015ab4:	f7fb fd44 	bl	8011540 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3500.0f);
 8015ab8:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8015bd4 <tTString_initToPool+0x460>
 8015abc:	4630      	mov	r0, r6
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 8015abe:	f104 0620 	add.w	r6, r4, #32
    tSVF_setFreq(&x->pickupFilter, 3500.0f);
 8015ac2:	f7fb fca5 	bl	8011410 <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
 8015ac6:	462a      	mov	r2, r5
 8015ac8:	2101      	movs	r1, #1
 8015aca:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 8015ace:	f7fe ff0f 	bl	80148f0 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 8015ad2:	4629      	mov	r1, r5
 8015ad4:	4638      	mov	r0, r7
 8015ad6:	eeb0 0a68 	vmov.f32	s0, s17
 8015ada:	f7fb fd5b 	bl	8011594 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
 8015ade:	4638      	mov	r0, r7
 8015ae0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 8015ae4:	f504 778a 	add.w	r7, r4, #276	; 0x114
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
 8015ae8:	f7fb fd94 	bl	8011614 <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 8015aec:	4629      	mov	r1, r5
 8015aee:	eeb0 0a68 	vmov.f32	s0, s17
 8015af2:	4630      	mov	r0, r6
 8015af4:	f7fb fd4e 	bl	8011594 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
 8015af8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015afc:	4630      	mov	r0, r6
 8015afe:	f7fb fd89 	bl	8011614 <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
 8015b02:	eeb0 0a48 	vmov.f32	s0, s16
 8015b06:	4629      	mov	r1, r5
 8015b08:	eddf 0a33 	vldr	s1, [pc, #204]	; 8015bd8 <tTString_initToPool+0x464>
 8015b0c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8015b10:	f7fb f85a 	bl	8010bc8 <tSlide_initToPool>
    	tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8015b14:	eddf 0a31 	vldr	s1, [pc, #196]	; 8015bdc <tTString_initToPool+0x468>
    if (x->wound)
 8015b18:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    	tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8015b1c:	4629      	mov	r1, r5
 8015b1e:	eeb0 0a60 	vmov.f32	s0, s1
 8015b22:	f504 7082 	add.w	r0, r4, #260	; 0x104
    if (x->wound)
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	f000 80d7 	beq.w	8015cda <tTString_initToPool+0x566>
    	tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8015b2c:	f7fb f84c 	bl	8010bc8 <tSlide_initToPool>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 8015b30:	4629      	mov	r1, r5
 8015b32:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8015be0 <tTString_initToPool+0x46c>
 8015b36:	eeb0 0a48 	vmov.f32	s0, s16
 8015b3a:	4638      	mov	r0, r7
 8015b3c:	9701      	str	r7, [sp, #4]
 8015b3e:	f7fa ffcf 	bl	8010ae0 <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 8015b42:	eeb0 0a48 	vmov.f32	s0, s16
 8015b46:	9801      	ldr	r0, [sp, #4]
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
 8015b48:	f504 768c 	add.w	r6, r4, #280	; 0x118
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 8015b4c:	f7fb f81e 	bl	8010b8c <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
 8015b50:	4629      	mov	r1, r5
 8015b52:	eddf 0a24 	vldr	s1, [pc, #144]	; 8015be4 <tTString_initToPool+0x470>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 8015b56:	eeb0 0a48 	vmov.f32	s0, s16
 8015b5a:	4630      	mov	r0, r6
 8015b5c:	9601      	str	r6, [sp, #4]
 8015b5e:	f7fa ffbf 	bl	8010ae0 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8015b62:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 8015b66:	eeb0 0a48 	vmov.f32	s0, s16
 8015b6a:	9801      	ldr	r0, [sp, #4]
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8015b6c:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 8015b9c <tTString_initToPool+0x428>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 8015b70:	f7fb f80c 	bl	8010b8c <tExpSmooth_setDest>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
 8015b74:	4629      	mov	r1, r5
 8015b76:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8015b7a:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8015b7e:	eddf 8a0e 	vldr	s17, [pc, #56]	; 8015bb8 <tTString_initToPool+0x444>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
 8015b82:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8015b86:	f7fb f81f 	bl	8010bc8 <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8015b8a:	4629      	mov	r1, r5
 8015b8c:	eeb0 0a48 	vmov.f32	s0, s16
 8015b90:	e038      	b.n	8015c04 <tTString_initToPool+0x490>
 8015b92:	bf00      	nop
 8015b94:	40c90fdb 	.word	0x40c90fdb
 8015b98:	41200000 	.word	0x41200000
 8015b9c:	00000000 	.word	0x00000000
 8015ba0:	42c80000 	.word	0x42c80000
 8015ba4:	43dc0000 	.word	0x43dc0000
 8015ba8:	3b83126f 	.word	0x3b83126f
 8015bac:	3ecccccd 	.word	0x3ecccccd
 8015bb0:	bab78034 	.word	0xbab78034
 8015bb4:	3f7fbe77 	.word	0x3f7fbe77
 8015bb8:	3d23d70a 	.word	0x3d23d70a
 8015bbc:	3c23d70a 	.word	0x3c23d70a
 8015bc0:	38d1b717 	.word	0x38d1b717
 8015bc4:	37d1b717 	.word	0x37d1b717
 8015bc8:	3f4ccccd 	.word	0x3f4ccccd
 8015bcc:	45bb8000 	.word	0x45bb8000
 8015bd0:	44e10000 	.word	0x44e10000
 8015bd4:	455ac000 	.word	0x455ac000
 8015bd8:	453b8000 	.word	0x453b8000
 8015bdc:	447a0000 	.word	0x447a0000
 8015be0:	3a03126f 	.word	0x3a03126f
 8015be4:	3a51b717 	.word	0x3a51b717
 8015be8:	3d4ccccd 	.word	0x3d4ccccd
 8015bec:	3f34fdf4 	.word	0x3f34fdf4
 8015bf0:	43960000 	.word	0x43960000
 8015bf4:	3f333333 	.word	0x3f333333
 8015bf8:	45fa0000 	.word	0x45fa0000
 8015bfc:	3dcccccd 	.word	0x3dcccccd
 8015c00:	3e7ae148 	.word	0x3e7ae148
 8015c04:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8015be8 <tTString_initToPool+0x474>
 8015c08:	4630      	mov	r0, r6
 8015c0a:	f7fa ff69 	bl	8010ae0 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 8015c0e:	eeb0 0a48 	vmov.f32	s0, s16
 8015c12:	4630      	mov	r0, r6
    x->timeSinceLastBump = 1;
 8015c14:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 8015c18:	f7fa ffb8 	bl	8010b8c <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
 8015c1c:	462a      	mov	r2, r5
 8015c1e:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8015c22:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8015c26:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8015c2a:	2102      	movs	r1, #2
 8015c2c:	f7fb fb2e 	bl	801128c <tSVF_initToPool>
    tSVF_initToPool(&x->barLowpass, SVFTypeLowpass, 300.0f, 0.707f, mp);
 8015c30:	462a      	mov	r2, r5
 8015c32:	ed5f 0a12 	vldr	s1, [pc, #-72]	; 8015bec <tTString_initToPool+0x478>
 8015c36:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8015c3a:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8015bf0 <tTString_initToPool+0x47c>
 8015c3e:	2101      	movs	r1, #1
 8015c40:	f7fb fb24 	bl	801128c <tSVF_initToPool>
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 8015c44:	4629      	mov	r1, r5
 8015c46:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8015c4a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
    x->timeSinceLastBump = 1;
 8015c4e:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 8015c52:	f7fb fc9f 	bl	8011594 <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 8000.0f, 0.7f, mp);
 8015c56:	462a      	mov	r2, r5
 8015c58:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8015c5c:	ed5f 0a1b 	vldr	s1, [pc, #-108]	; 8015bf4 <tTString_initToPool+0x480>
 8015c60:	ed1f 0a1b 	vldr	s0, [pc, #-108]	; 8015bf8 <tTString_initToPool+0x484>
 8015c64:	2101      	movs	r1, #1
 8015c66:	f7fb fb11 	bl	801128c <tSVF_initToPool>
    x->inharmonic = 1;
 8015c6a:	2101      	movs	r1, #1
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8015c6c:	edd4 0a02 	vldr	s1, [r4, #8]
 8015c70:	462a      	mov	r2, r5
 8015c72:	f504 70b2 	add.w	r0, r4, #356	; 0x164
    x->inharmonic = 1;
 8015c76:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8015c7a:	ee60 0aa8 	vmul.f32	s1, s1, s17
 8015c7e:	ed1f 1a21 	vldr	s2, [pc, #-132]	; 8015bfc <tTString_initToPool+0x488>
 8015c82:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    x->inharmonicMult = 1.0f;
 8015c86:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
    x->coupling = 0.000000f;
 8015c8a:	ed84 8a58 	vstr	s16, [r4, #352]	; 0x160
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8015c8e:	f7fa fb7f 	bl	8010390 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8015c92:	edd4 0a02 	vldr	s1, [r4, #8]
 8015c96:	462a      	mov	r2, r5
 8015c98:	f504 70b4 	add.w	r0, r4, #360	; 0x168
 8015c9c:	ee60 0aa8 	vmul.f32	s1, s1, s17
 8015ca0:	2101      	movs	r1, #1
 8015ca2:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8015ca6:	ed1f 1a2b 	vldr	s2, [pc, #-172]	; 8015bfc <tTString_initToPool+0x488>
 8015caa:	f7fa fb71 	bl	8010390 <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8015cae:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8015cb2:	ed1f 7a2d 	vldr	s14, [pc, #-180]	; 8015c00 <tTString_initToPool+0x48c>
    tNoise_initToPool(&x->pickNoiseSource, WhiteNoise, mp);
 8015cb6:	462a      	mov	r2, r5
    x->windingsPerInch = 70.0f;
 8015cb8:	4b13      	ldr	r3, [pc, #76]	; (8015d08 <tTString_initToPool+0x594>)
    tNoise_initToPool(&x->pickNoiseSource, WhiteNoise, mp);
 8015cba:	2100      	movs	r1, #0
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8015cbc:	ee67 7a87 	vmul.f32	s15, s15, s14
    tNoise_initToPool(&x->pickNoiseSource, WhiteNoise, mp);
 8015cc0:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
    x->windingsPerInch = 70.0f;
 8015cc4:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8015cc8:	edc4 7a5d 	vstr	s15, [r4, #372]	; 0x174
}
 8015ccc:	b002      	add	sp, #8
 8015cce:	ecbd 8b0a 	vpop	{d8-d12}
 8015cd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tNoise_initToPool(&x->pickNoiseSource, WhiteNoise, mp);
 8015cd6:	f7fe be0b 	b.w	80148f0 <tNoise_initToPool>
    	tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8015cda:	f7fa ff75 	bl	8010bc8 <tSlide_initToPool>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
 8015cde:	4629      	mov	r1, r5
 8015ce0:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8015d0c <tTString_initToPool+0x598>
 8015ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8015ce8:	4638      	mov	r0, r7
 8015cea:	9701      	str	r7, [sp, #4]
 8015cec:	f7fa fef8 	bl	8010ae0 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 8015cf0:	eeb0 0a48 	vmov.f32	s0, s16
 8015cf4:	9801      	ldr	r0, [sp, #4]
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 8015cf6:	f504 768c 	add.w	r6, r4, #280	; 0x118
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 8015cfa:	f7fa ff47 	bl	8010b8c <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 8015cfe:	eef0 0a4b 	vmov.f32	s1, s22
 8015d02:	4629      	mov	r1, r5
 8015d04:	e727      	b.n	8015b56 <tTString_initToPool+0x3e2>
 8015d06:	bf00      	nop
 8015d08:	428c0000 	.word	0x428c0000
 8015d0c:	3ba3d70a 	.word	0x3ba3d70a

08015d10 <tTString_free>:
{
 8015d10:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8015d12:	6804      	ldr	r4, [r0, #0]
    tHighpass_free(&x->dcBlockP);
 8015d14:	f104 0020 	add.w	r0, r4, #32
 8015d18:	f7fb fc5c 	bl	80115d4 <tHighpass_free>
    tHighpass_free(&x->dcBlock);
 8015d1c:	f104 001c 	add.w	r0, r4, #28
 8015d20:	f7fb fc58 	bl	80115d4 <tHighpass_free>
    tNoise_free(&x->noise);
 8015d24:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 8015d28:	f7fe fdf2 	bl	8014910 <tNoise_free>
    tSVF_free(&x->pickupFilter);
 8015d2c:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8015d30:	f7fb fb34 	bl	801139c <tSVF_free>
    tCycle_free(&x->tensionModOsc);
 8015d34:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 8015d38:	f7fe fa34 	bl	80141a4 <tCycle_free>
    tSVF_free(&x->highpassP);
 8015d3c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8015d40:	f7fb fb2c 	bl	801139c <tSVF_free>
    tSVF_free(&x->lowpassP),
 8015d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015d48:	f7fb fb28 	bl	801139c <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
 8015d4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015d50:	f7fa fffa 	bl	8010d48 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
 8015d54:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8015d58:	f7fa fff6 	bl	8010d48 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pitchSmoother);
 8015d5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015d60:	f7fa feea 	bl	8010b38 <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
 8015d64:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8015d68:	f7fa fee6 	bl	8010b38 <tExpSmooth_free>
    tSlide_free(&x->slide);
 8015d6c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8015d70:	f7fa ff50 	bl	8010c14 <tSlide_free>
    tCookOnePole_free(&x->reflFiltP);
 8015d74:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015d78:	f7fb f9ca 	bl	8011110 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
 8015d7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015d80:	f7fb f9c6 	bl	8011110 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
 8015d84:	f104 0018 	add.w	r0, r4, #24
 8015d88:	f7f9 ff38 	bl	800fbfc <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
 8015d8c:	f104 0014 	add.w	r0, r4, #20
 8015d90:	f7f9 ff34 	bl	800fbfc <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
 8015d94:	6821      	ldr	r1, [r4, #0]
 8015d96:	4620      	mov	r0, r4
}
 8015d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)x, x->mempool);
 8015d9c:	f7fe b946 	b.w	801402c <mpool_free>

08015da0 <tTString_tick>:
{
 8015da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015da4:	ed2d 8b10 	vpush	{d8-d15}
    _tTString* x = *bw;
 8015da8:	6804      	ldr	r4, [r0, #0]
{
 8015daa:	b08d      	sub	sp, #52	; 0x34
    x->feedbackNoise = tNoise_tick(&x->noise);
 8015dac:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 8015db0:	f7fe fdb2 	bl	8014918 <tNoise_tick>
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8015db4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015db8:	edd4 7a49 	vldr	s15, [r4, #292]	; 0x124
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8015dbc:	f504 708a 	add.w	r0, r4, #276	; 0x114
    Lfloat barPos = x->barPosition;
 8015dc0:	ed94 8a3a 	vldr	s16, [r4, #232]	; 0xe8
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8015dc4:	ee77 6a87 	vadd.f32	s13, s15, s14
    x->feedbackNoise = tNoise_tick(&x->noise);
 8015dc8:	ed84 0a5b 	vstr	s0, [r4, #364]	; 0x16c
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8015dcc:	9001      	str	r0, [sp, #4]
 8015dce:	eeb0 0a48 	vmov.f32	s0, s16
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8015dd2:	eef4 6ac8 	vcmpe.f32	s13, s16
 8015dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dda:	d407      	bmi.n	8015dec <tTString_tick+0x4c>
 8015ddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015de0:	eef4 7ac8 	vcmpe.f32	s15, s16
 8015de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015de8:	f340 8338 	ble.w	801645c <tTString_tick+0x6bc>
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8015dec:	f7fa fed6 	bl	8010b9c <tExpSmooth_setValAndDest>
 8015df0:	9801      	ldr	r0, [sp, #4]
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 8015df2:	f7fa fed9 	bl	8010ba8 <tExpSmooth_tick>
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 8015df6:	edd4 7a49 	vldr	s15, [r4, #292]	; 0x124
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 8015dfa:	f504 758c 	add.w	r5, r4, #280	; 0x118
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 8015dfe:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 8015e02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015e06:	f7fd fc49 	bl	801369c <fastabsf>
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 8015e0a:	4628      	mov	r0, r5
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 8015e0c:	eeb0 9a40 	vmov.f32	s18, s0
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 8015e10:	9501      	str	r5, [sp, #4]
 8015e12:	eeb0 0a48 	vmov.f32	s0, s16
 8015e16:	f7fa feb9 	bl	8010b8c <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 8015e1a:	9801      	ldr	r0, [sp, #4]
 8015e1c:	f7fa fec4 	bl	8010ba8 <tExpSmooth_tick>
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 8015e20:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 8015e24:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 8015e28:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015e2c:	f7fd fc36 	bl	801369c <fastabsf>
        if (differenceFastSmooth < 0.0001f)
 8015e30:	eddf 7ace 	vldr	s15, [pc, #824]	; 801616c <tTString_tick+0x3cc>
        x->prevBarPosSmoothVol = barPosSmoothVol;
 8015e34:	ed84 8a47 	vstr	s16, [r4, #284]	; 0x11c
        if (differenceFastSmooth < 0.0001f)
 8015e38:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e40:	f140 82bc 	bpl.w	80163bc <tTString_tick+0x61c>
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
 8015e44:	eddf 6aca 	vldr	s13, [pc, #808]	; 8016170 <tTString_tick+0x3d0>
 8015e48:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8016174 <tTString_tick+0x3d4>
 8015e4c:	ee30 8a66 	vsub.f32	s16, s0, s13
 8015e50:	eddf 7ad1 	vldr	s15, [pc, #836]	; 8016198 <tTString_tick+0x3f8>
 8015e54:	ee28 8a07 	vmul.f32	s16, s16, s14
 8015e58:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 8015e5c:	edd4 9a5e 	vldr	s19, [r4, #376]	; 0x178
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8015e60:	ed94 0a3e 	vldr	s0, [r4, #248]	; 0xf8
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 8015e64:	ee68 9aa9 	vmul.f32	s19, s17, s19
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8015e68:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8015e6c:	f7fd fc16 	bl	801369c <fastabsf>
 8015e70:	eef0 7a40 	vmov.f32	s15, s0
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8015e74:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    x->prevBarPosSmoothed = barPosSmoothed;
 8015e78:	edc4 8a49 	vstr	s17, [r4, #292]	; 0x124
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8015e7c:	ee79 0a09 	vadd.f32	s1, s18, s18
 8015e80:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8016198 <tTString_tick+0x3f8>
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8015e84:	eef0 8a67 	vmov.f32	s17, s15
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8015e88:	f7fd fd0c 	bl	80138a4 <LEAF_clip>
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 8015e8c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8015e90:	f7fa fee2 	bl	8010c58 <tSlide_tick>
    if (x->wound)
 8015e94:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 8015e98:	ed84 0a2e 	vstr	s0, [r4, #184]	; 0xb8
    if (x->wound)
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	f000 830c 	beq.w	80164ba <tTString_tick+0x71a>
		if (bumpDifference > 1.0f)
 8015ea2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015ea6:	eef4 8ac9 	vcmpe.f32	s17, s18
 8015eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eae:	f300 8288 	bgt.w	80163c2 <tTString_tick+0x622>
			x->bumpOsc = 0;
 8015eb2:	2300      	movs	r3, #0
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8015eb4:	f104 07d4 	add.w	r7, r4, #212	; 0xd4
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8015eb8:	f504 7688 	add.w	r6, r4, #272	; 0x110
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8015ebc:	f504 7582 	add.w	r5, r4, #260	; 0x104
			x->bumpOsc = 0;
 8015ec0:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
		if (x->sampleCount < 3000)
 8015ec4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8015ec8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8015ecc:	4293      	cmp	r3, r2
 8015ece:	f240 82c1 	bls.w	8016454 <tTString_tick+0x6b4>
			tSlide_setDest(&x->barSmooth, 5.0f);
 8015ed2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8015ed6:	4628      	mov	r0, r5
 8015ed8:	f7fa fea0 	bl	8010c1c <tSlide_setDest>
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 8015edc:	4628      	mov	r0, r5
		tSVF_setFreq(&x->barResonator, barFreq);
 8015ede:	f104 05e0 	add.w	r5, r4, #224	; 0xe0
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 8015ee2:	f7fa fe9f 	bl	8010c24 <tSlide_tickNoInput>
 8015ee6:	eef0 9a40 	vmov.f32	s19, s0
		tSVF_setFreq(&x->barResonator, barFreq);
 8015eea:	4628      	mov	r0, r5
 8015eec:	f7fb fa90 	bl	8011410 <tSVF_setFreq>
		x->slideNoise = x->feedbackNoise;
 8015ef0:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8015ef4:	4630      	mov	r0, r6
		x->slideNoise = x->feedbackNoise;
 8015ef6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8015efa:	f7fa fe93 	bl	8010c24 <tSlide_tickNoInput>
		if (pulseVal > .99f)
 8015efe:	eddf 7a9e 	vldr	s15, [pc, #632]	; 8016178 <tTString_tick+0x3d8>
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8015f02:	eef0 8a40 	vmov.f32	s17, s0
		if (pulseVal > .99f)
 8015f06:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f0e:	f300 830c 	bgt.w	801652a <tTString_tick+0x78a>
		x->slideNoise *= pulseVal;
 8015f12:	edd4 7a32 	vldr	s15, [r4, #200]	; 0xc8
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8015f16:	4638      	mov	r0, r7
		x->slideNoise *= pulseVal;
 8015f18:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015f1c:	edc4 7a32 	vstr	s15, [r4, #200]	; 0xc8
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8015f20:	f7fa fe42 	bl	8010ba8 <tExpSmooth_tick>
 8015f24:	edd4 7a32 	vldr	s15, [r4, #200]	; 0xc8
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8015f28:	4628      	mov	r0, r5
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8015f2a:	ee60 8a27 	vmul.f32	s17, s0, s15
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8015f2e:	eeb0 0a68 	vmov.f32	s0, s17
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8015f32:	edc4 8a32 	vstr	s17, [r4, #200]	; 0xc8
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8015f36:	f7fb fa35 	bl	80113a4 <tSVF_tick>
 8015f3a:	edd4 7a4b 	vldr	s15, [r4, #300]	; 0x12c
 8015f3e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015f42:	f7fd fd07 	bl	8013954 <fast_tanh5>
		if (barFreq < 300.0f)
 8015f46:	eddf 7a8d 	vldr	s15, [pc, #564]	; 801617c <tTString_tick+0x3dc>
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8015f4a:	eeb0 9a40 	vmov.f32	s18, s0
		if (barFreq < 300.0f)
 8015f4e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8015f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f56:	f100 82d9 	bmi.w	801650c <tTString_tick+0x76c>
		Lfloat filterFade = 1.0f;
 8015f5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 8015f5e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		x->slideNoise *= x->muted;
 8015f62:	edd4 7a50 	vldr	s15, [r4, #320]	; 0x140
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8015f66:	f504 7084 	add.w	r0, r4, #264	; 0x108
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 8015f6a:	ee29 9a07 	vmul.f32	s18, s18, s14
 8015f6e:	eee9 8a00 	vfma.f32	s17, s18, s0
		x->slideNoise *= x->muted;
 8015f72:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8015f76:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8015f7a:	f7fb fb3b 	bl	80115f4 <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 8015f7e:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8015f82:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 8015f86:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8015f8a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015f8e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015f92:	f7fb fa07 	bl	80113a4 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
 8015f96:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
    for (int i = 0; i < x->oversampling; i++)
 8015f9a:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
 8015f9c:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
 8015fa0:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
 8015fa2:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
    for (int i = 0; i < x->oversampling; i++)
 8015fa6:	f340 82aa 	ble.w	80164fe <tTString_tick+0x75e>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8015faa:	f104 0350 	add.w	r3, r4, #80	; 0x50
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8015fae:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8015fb2:	f104 0514 	add.w	r5, r4, #20
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8015fb6:	f104 0618 	add.w	r6, r4, #24
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8015fba:	ee0e 3a90 	vmov	s29, r3
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8015fbe:	f104 034c 	add.w	r3, r4, #76	; 0x4c
    	x->tensionAmount = tension * 0.01f;
 8015fc2:	ed9f ca6f 	vldr	s24, [pc, #444]	; 8016180 <tTString_tick+0x3e0>
        theOutput = tSVF_tick(&x->pickupFilter, prefilter);// + x->slideNoise;
 8015fc6:	f04f 0900 	mov.w	r9, #0
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8015fca:	ee0f 3a10 	vmov	s30, r3
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8015fce:	f504 73c6 	add.w	r3, r4, #396	; 0x18c
 8015fd2:	ed9f aa6c 	vldr	s20, [pc, #432]	; 8016184 <tTString_tick+0x3e4>
 8015fd6:	ee0f 3a90 	vmov	s31, r3
 8015fda:	f504 73c4 	add.w	r3, r4, #392	; 0x188
        Lfloat positionMax = (x->openStringLength * 0.021666666666667f);
 8015fde:	eddf ba6a 	vldr	s23, [pc, #424]	; 8016188 <tTString_tick+0x3e8>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8015fe2:	9301      	str	r3, [sp, #4]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8015fe4:	f104 0324 	add.w	r3, r4, #36	; 0x24
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
 8015fe8:	ed9f ba68 	vldr	s22, [pc, #416]	; 801618c <tTString_tick+0x3ec>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8015fec:	9302      	str	r3, [sp, #8]
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8015fee:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8015ff2:	9303      	str	r3, [sp, #12]
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8015ff4:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
 8015ff8:	9304      	str	r3, [sp, #16]
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + (filterOutP * x->coupling) + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8015ffa:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8015ffe:	9305      	str	r3, [sp, #20]
 8016000:	f104 031c 	add.w	r3, r4, #28
 8016004:	9306      	str	r3, [sp, #24]
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016006:	f504 73b4 	add.w	r3, r4, #360	; 0x168
 801600a:	9307      	str	r3, [sp, #28]
 801600c:	f104 0320 	add.w	r3, r4, #32
 8016010:	9308      	str	r3, [sp, #32]
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8016012:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8016016:	9309      	str	r3, [sp, #36]	; 0x24
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8016018:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 801601c:	930a      	str	r3, [sp, #40]	; 0x28
        theOutput = tSVF_tick(&x->pickupFilter, prefilter);// + x->slideNoise;
 801601e:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
 8016022:	930b      	str	r3, [sp, #44]	; 0x2c
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8016024:	ee1e 0a90 	vmov	r0, s29
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 8016028:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 801602c:	f7fa fdbc 	bl	8010ba8 <tExpSmooth_tick>
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8016030:	ee1f 0a10 	vmov	r0, s30
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8016034:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	x->prevBaseDelay = x->baseDelay;
 8016038:	ed84 0a57 	vstr	s0, [r4, #348]	; 0x15c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 801603c:	f7fa fdb4 	bl	8010ba8 <tExpSmooth_tick>
 8016040:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8016044:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016048:	4628      	mov	r0, r5
    	x->tensionAmount = tension * 0.01f;
 801604a:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
 801604e:	fec7 6aa6 	vmaxnm.f32	s13, s15, s13
 8016052:	edd4 5a17 	vldr	s11, [r4, #92]	; 0x5c
 8016056:	ee67 7a85 	vmul.f32	s15, s15, s10
        if (currentDelay > x->maxDelay)
 801605a:	ed94 5a53 	vldr	s10, [r4, #332]	; 0x14c
 801605e:	ed94 6a52 	vldr	s12, [r4, #328]	; 0x148
 8016062:	eef8 8a45 	vcvt.f32.u32	s17, s10
 8016066:	ed94 7a4e 	vldr	s14, [r4, #312]	; 0x138
    	x->tensionAmount = tension * 0.01f;
 801606a:	ee67 7a8c 	vmul.f32	s15, s15, s24
 801606e:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8016072:	fec8 8ae6 	vminnm.f32	s17, s17, s13
 8016076:	eeb1 9a68 	vneg.f32	s18, s17
 801607a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801607e:	eeb0 0a68 	vmov.f32	s0, s17
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 8016082:	ee28 8a88 	vmul.f32	s16, s17, s16
    	x->tensionAmount = tension * 0.01f;
 8016086:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 801608a:	eea5 0ac6 	vfms.f32	s0, s11, s12
 801608e:	eea8 0ac7 	vfms.f32	s0, s17, s14
 8016092:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016096:	f7f9 fe0b 	bl	800fcb0 <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 801609a:	eeb0 0a68 	vmov.f32	s0, s17
 801609e:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 80160a2:	4630      	mov	r0, r6
 80160a4:	edd4 6a52 	vldr	s13, [r4, #328]	; 0x148
 80160a8:	ed94 7a27 	vldr	s14, [r4, #156]	; 0x9c
 80160ac:	eea6 0a66 	vfms.f32	s0, s12, s13
 80160b0:	edd4 7a4e 	vldr	s15, [r4, #312]	; 0x138
 80160b4:	ee67 7a8a 	vmul.f32	s15, s15, s20
 80160b8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80160bc:	eea9 0a27 	vfma.f32	s0, s18, s15
 80160c0:	f7f9 fdf6 	bl	800fcb0 <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 80160c4:	ee1f 0a90 	vmov	r0, s31
 80160c8:	f7fe fc26 	bl	8014918 <tNoise_tick>
 80160cc:	9801      	ldr	r0, [sp, #4]
 80160ce:	eeb0 9a40 	vmov.f32	s18, s0
 80160d2:	f7fa fd69 	bl	8010ba8 <tExpSmooth_tick>
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound, (uint32_t)x->pluckPoint_forInput);
 80160d6:	edd4 7a64 	vldr	s15, [r4, #400]	; 0x190
 80160da:	4628      	mov	r0, r5
 80160dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80160e0:	ee29 0a00 	vmul.f32	s0, s18, s0
 80160e4:	ee17 1a90 	vmov	r1, s15
 80160e8:	f7f9 fefa 	bl	800fee0 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 80160ec:	9802      	ldr	r0, [sp, #8]
 80160ee:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 80160f2:	f7fb f829 	bl	8011148 <tCookOnePole_tick>
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 80160f6:	9803      	ldr	r0, [sp, #12]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 80160f8:	eef0 9a40 	vmov.f32	s19, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 80160fc:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8016100:	f7fb f822 	bl	8011148 <tCookOnePole_tick>
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 8016104:	edd4 ca1f 	vldr	s25, [r4, #124]	; 0x7c
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8016108:	4628      	mov	r0, r5
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 801610a:	eeb0 9a40 	vmov.f32	s18, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 801610e:	ee68 caac 	vmul.f32	s25, s17, s25
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
 8016112:	eebc eaec 	vcvt.u32.f32	s28, s25
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
 8016116:	eef8 7a4e 	vcvt.f32.u32	s15, s28
 801611a:	ee7c cae7 	vsub.f32	s25, s25, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 801611e:	f7f9 fd95 	bl	800fc4c <tLagrangeDelay_tickOut>
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8016122:	4630      	mov	r0, r6
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8016124:	eef0 da40 	vmov.f32	s27, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8016128:	f7f9 fd90 	bl	800fc4c <tLagrangeDelay_tickOut>
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 801612c:	ee1e 1a10 	vmov	r1, s28
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8016130:	eeb0 da40 	vmov.f32	s26, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 8016134:	4628      	mov	r0, r5
 8016136:	eeb0 0a6c 	vmov.f32	s0, s25
 801613a:	f7f9 fe6d 	bl	800fe18 <tLagrangeDelay_tapOutInterpolated>
 801613e:	eef0 7a40 	vmov.f32	s15, s0
 8016142:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 8016146:	eeb0 0a6c 	vmov.f32	s0, s25
 801614a:	ee1e 1a10 	vmov	r1, s28
 801614e:	4630      	mov	r0, r6
        Lfloat rippleOut = delayOut + rippleOut1;
 8016150:	eee7 da87 	vfma.f32	s27, s15, s14
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 8016154:	f7f9 fe60 	bl	800fe18 <tLagrangeDelay_tapOutInterpolated>
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8016158:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
        if (x->inharmonic)
 801615c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8016160:	eea0 da27 	vfma.f32	s26, s0, s15
        if (x->inharmonic)
 8016164:	2b00      	cmp	r3, #0
 8016166:	f040 8190 	bne.w	801648a <tTString_tick+0x6ea>
 801616a:	e017      	b.n	801619c <tTString_tick+0x3fc>
 801616c:	38d1b717 	.word	0x38d1b717
 8016170:	3727c5ac 	.word	0x3727c5ac
 8016174:	448ae38e 	.word	0x448ae38e
 8016178:	3f7d70a4 	.word	0x3f7d70a4
 801617c:	43960000 	.word	0x43960000
 8016180:	3c23d70a 	.word	0x3c23d70a
 8016184:	3e22f983 	.word	0x3e22f983
 8016188:	3cb17e4b 	.word	0x3cb17e4b
 801618c:	3dd55555 	.word	0x3dd55555
 8016190:	42c80000 	.word	0x42c80000
 8016194:	3ba3d70a 	.word	0x3ba3d70a
 8016198:	00000000 	.word	0x00000000
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 801619c:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 80161a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80161a4:	edd4 0a1c 	vldr	s1, [r4, #112]	; 0x70
 80161a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80161ac:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 80161b0:	ee60 0a87 	vmul.f32	s1, s1, s14
 80161b4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80161b8:	ee60 0aad 	vmul.f32	s1, s1, s27
 80161bc:	f7fd fb72 	bl	80138a4 <LEAF_clip>
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80161c0:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 80161c4:	edd4 0a1c 	vldr	s1, [r4, #112]	; 0x70
 80161c8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80161cc:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 80161d0:	ee60 0a87 	vmul.f32	s1, s1, s14
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80161d4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80161d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80161dc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80161e0:	ee60 0a8d 	vmul.f32	s1, s1, s26
 80161e4:	f7fd fb5e 	bl	80138a4 <LEAF_clip>
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 80161e8:	9804      	ldr	r0, [sp, #16]
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80161ea:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
 80161ee:	edd4 ca3c 	vldr	s25, [r4, #240]	; 0xf0
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 80161f2:	ed94 da26 	vldr	s26, [r4, #152]	; 0x98
 80161f6:	f7fd ffd9 	bl	80141ac <tCycle_tick>
 80161fa:	edd4 7a2c 	vldr	s15, [r4, #176]	; 0xb0
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 80161fe:	ee2c 1aab 	vmul.f32	s2, s25, s23
 8016202:	ee6c 0a8b 	vmul.f32	s1, s25, s22
 8016206:	eea0 da27 	vfma.f32	s26, s0, s15
 801620a:	eeb0 0a4d 	vmov.f32	s0, s26
 801620e:	f7fd fa07 	bl	8013620 <LEAF_mapFromZeroToOneInput>
        while (pickupPos > halfCurrentDelay)
 8016212:	eeb4 8ac0 	vcmpe.f32	s16, s0
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 8016216:	eef0 7a40 	vmov.f32	s15, s0
        while (pickupPos > halfCurrentDelay)
 801621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801621e:	f140 8145 	bpl.w	80164ac <tTString_tick+0x70c>
        uint32_t backwards = 0;
 8016222:	2300      	movs	r3, #0
        	pickupPos = pickupPos - halfCurrentDelay;
 8016224:	ee77 7ac8 	vsub.f32	s15, s15, s16
        	backwards = !backwards;
 8016228:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
 801622c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016234:	d4f6      	bmi.n	8016224 <tTString_tick+0x484>
        while (pickupPos < 0.0f)
 8016236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801623e:	d508      	bpl.n	8016252 <tTString_tick+0x4b2>
        	pickupPos = pickupPos + halfCurrentDelay;
 8016240:	ee77 7a88 	vadd.f32	s15, s15, s16
        	backwards = !backwards;
 8016244:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
 8016248:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801624c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016250:	d4f6      	bmi.n	8016240 <tTString_tick+0x4a0>
        if (backwards)
 8016252:	2b00      	cmp	r3, #0
 8016254:	f000 8106 	beq.w	8016464 <tTString_tick+0x6c4>
        	pickupPosFinal = halfCurrentDelay - pickupPos;
 8016258:	ee78 6a67 	vsub.f32	s13, s16, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 801625c:	ee7a dac8 	vsub.f32	s27, s21, s16
        	inversePickupPos = halfCurrentDelay + pickupPos;
 8016260:	ee78 8a27 	vadd.f32	s17, s16, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 8016264:	ee86 7a88 	vdiv.f32	s14, s13, s16
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016268:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 801626c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8016270:	ee17 7a90 	vmov	r7, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016274:	eef8 7a67 	vcvt.f32.u32	s15, s15
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8016278:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 801627c:	ee36 8ae7 	vsub.f32	s16, s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016280:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8016284:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8016288:	ed84 7a61 	vstr	s14, [r4, #388]	; 0x184
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 801628c:	ee3a dae8 	vsub.f32	s26, s21, s17
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8016290:	4639      	mov	r1, r7
 8016292:	4628      	mov	r0, r5
    for (int i = 0; i < x->oversampling; i++)
 8016294:	f109 0901 	add.w	r9, r9, #1
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8016298:	ee17 8a90 	vmov	r8, s15
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 801629c:	eef8 7a67 	vcvt.f32.u32	s15, s15
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
 80162a0:	f108 0b01 	add.w	fp, r8, #1
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 80162a4:	ee78 8ae7 	vsub.f32	s17, s17, s15
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 80162a8:	ee3d da27 	vadd.f32	s26, s26, s15
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 80162ac:	f7f9 fda8 	bl	800fe00 <tLagrangeDelay_tapOut>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 80162b0:	4651      	mov	r1, sl
 80162b2:	4628      	mov	r0, r5
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 80162b4:	eeb0 ea40 	vmov.f32	s28, s0
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 80162b8:	f7f9 fda2 	bl	800fe00 <tLagrangeDelay_tapOut>
 80162bc:	ee60 ca08 	vmul.f32	s25, s0, s16
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 80162c0:	4641      	mov	r1, r8
 80162c2:	4628      	mov	r0, r5
 80162c4:	f7f9 fd9c 	bl	800fe00 <tLagrangeDelay_tapOut>
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 80162c8:	4659      	mov	r1, fp
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 80162ca:	eeee ca2d 	vfma.f32	s25, s28, s27
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 80162ce:	4628      	mov	r0, r5
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 80162d0:	eeb0 ea40 	vmov.f32	s28, s0
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 80162d4:	f7f9 fd94 	bl	800fe00 <tLagrangeDelay_tapOut>
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 80162d8:	4639      	mov	r1, r7
 80162da:	4630      	mov	r0, r6
 80162dc:	eee0 ca68 	vfms.f32	s25, s0, s17
        x->pickupOut =  (rightgoing - leftgoing);
 80162e0:	eeee ca4d 	vfms.f32	s25, s28, s26
 80162e4:	edc4 ca24 	vstr	s25, [r4, #144]	; 0x90
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 80162e8:	f7f9 fd8a 	bl	800fe00 <tLagrangeDelay_tapOut>
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 80162ec:	4651      	mov	r1, sl
 80162ee:	4630      	mov	r0, r6
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 80162f0:	eef0 ca40 	vmov.f32	s25, s0
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 80162f4:	f7f9 fd84 	bl	800fe00 <tLagrangeDelay_tapOut>
 80162f8:	ee20 8a08 	vmul.f32	s16, s0, s16
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 80162fc:	4641      	mov	r1, r8
 80162fe:	4630      	mov	r0, r6
 8016300:	f7f9 fd7e 	bl	800fe00 <tLagrangeDelay_tapOut>
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016304:	4659      	mov	r1, fp
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8016306:	eeac 8aad 	vfma.f32	s16, s25, s27
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 801630a:	4630      	mov	r0, r6
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 801630c:	eef0 ca40 	vmov.f32	s25, s0
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016310:	f7f9 fd76 	bl	800fe00 <tLagrangeDelay_tapOut>
		x->pickupOutP =  (rightgoing - leftgoing);
 8016314:	ed94 6a5b 	vldr	s12, [r4, #364]	; 0x16c
 8016318:	edd4 6a5c 	vldr	s13, [r4, #368]	; 0x170
 801631c:	edd4 7a32 	vldr	s15, [r4, #200]	; 0xc8
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + (filterOutP * x->coupling) + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016320:	ed94 7a58 	vldr	s14, [r4, #352]	; 0x160
 8016324:	eea0 8a68 	vfms.f32	s16, s0, s17
 8016328:	9806      	ldr	r0, [sp, #24]
 801632a:	eee6 7a26 	vfma.f32	s15, s12, s13
		x->pickupOutP =  (rightgoing - leftgoing);
 801632e:	eeac 8acd 	vfms.f32	s16, s25, s26
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + (filterOutP * x->coupling) + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016332:	ee39 0aa7 	vadd.f32	s0, s19, s15
 8016336:	eea7 0a09 	vfma.f32	s0, s14, s18
		x->pickupOutP =  (rightgoing - leftgoing);
 801633a:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + (filterOutP * x->coupling) + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 801633e:	f7fb f959 	bl	80115f4 <tHighpass_tick>
 8016342:	9805      	ldr	r0, [sp, #20]
 8016344:	f7fa f864 	bl	8010410 <tFeedbackLeveler_tick>
 8016348:	edd4 6a5b 	vldr	s13, [r4, #364]	; 0x16c
 801634c:	ed94 7a5c 	vldr	s14, [r4, #368]	; 0x170
 8016350:	eef0 8a40 	vmov.f32	s17, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016354:	edd4 7a32 	vldr	s15, [r4, #200]	; 0xc8
 8016358:	9808      	ldr	r0, [sp, #32]
 801635a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801635e:	ee39 0a27 	vadd.f32	s0, s18, s15
 8016362:	f7fb f947 	bl	80115f4 <tHighpass_tick>
 8016366:	9807      	ldr	r0, [sp, #28]
 8016368:	f7fa f852 	bl	8010410 <tFeedbackLeveler_tick>
 801636c:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
 8016370:	4628      	mov	r0, r5
 8016372:	eeb0 0a68 	vmov.f32	s0, s17
 8016376:	f7f9 fc5b 	bl	800fc30 <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
 801637a:	4630      	mov	r0, r6
 801637c:	eeb0 0a48 	vmov.f32	s0, s16
 8016380:	f7f9 fc56 	bl	800fc30 <tLagrangeDelay_tickIn>
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8016384:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016386:	ed94 0a25 	vldr	s0, [r4, #148]	; 0x94
 801638a:	f7fb f80b 	bl	80113a4 <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 801638e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016390:	f7fb f808 	bl	80113a4 <tSVF_tick>
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8016394:	ed94 7a29 	vldr	s14, [r4, #164]	; 0xa4
 8016398:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
        theOutput = tSVF_tick(&x->pickupFilter, prefilter);// + x->slideNoise;
 801639c:	980b      	ldr	r0, [sp, #44]	; 0x2c
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 801639e:	eee7 7a00 	vfma.f32	s15, s14, s0
        theOutput = tSVF_tick(&x->pickupFilter, prefilter);// + x->slideNoise;
 80163a2:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80163a6:	f7fa fffd 	bl	80113a4 <tSVF_tick>
    for (int i = 0; i < x->oversampling; i++)
 80163aa:	6863      	ldr	r3, [r4, #4]
 80163ac:	454b      	cmp	r3, r9
 80163ae:	f73f ae39 	bgt.w	8016024 <tTString_tick+0x284>
}
 80163b2:	b00d      	add	sp, #52	; 0x34
 80163b4:	ecbd 8b10 	vpop	{d8-d15}
 80163b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Lfloat volCut = 1.0f;
 80163bc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80163c0:	e54c      	b.n	8015e5c <tTString_tick+0xbc>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 80163c2:	f104 07d4 	add.w	r7, r4, #212	; 0xd4
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 80163c6:	f504 7688 	add.w	r6, r4, #272	; 0x110
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 80163ca:	eeb0 0a49 	vmov.f32	s0, s18
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 80163ce:	f504 7582 	add.w	r5, r4, #260	; 0x104
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 80163d2:	4638      	mov	r0, r7
 80163d4:	f7fa fbde 	bl	8010b94 <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 80163d8:	eeb0 0a49 	vmov.f32	s0, s18
 80163dc:	4630      	mov	r0, r6
 80163de:	f7fa fc1d 	bl	8010c1c <tSlide_setDest>
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 80163e2:	eec9 6a28 	vdiv.f32	s13, s18, s17
 80163e6:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 80163ea:	4628      	mov	r0, r5
			if (x->timeSinceLastBump < 100)
 80163ec:	ed1f 7a98 	vldr	s14, [pc, #-608]	; 8016190 <tTString_tick+0x3f0>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 80163f0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80163f4:	ed94 6a02 	vldr	s12, [r4, #8]
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 80163f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
			x->lastBump = currentBump;
 80163fc:	edc4 9a3e 	vstr	s19, [r4, #248]	; 0xf8
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016400:	ee20 0a06 	vmul.f32	s0, s0, s12
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8016404:	ee77 7aa6 	vadd.f32	s15, s15, s13
			if (x->timeSinceLastBump < 100)
 8016408:	eef4 7ac7 	vcmpe.f32	s15, s14
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 801640c:	edc4 7a3f 	vstr	s15, [r4, #252]	; 0xfc
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016410:	ee80 0a27 	vdiv.f32	s0, s0, s15
			if (x->timeSinceLastBump < 100)
 8016414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016418:	bf4c      	ite	mi
 801641a:	2301      	movmi	r3, #1
 801641c:	2300      	movpl	r3, #0
 801641e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016422:	f7fa fbfb 	bl	8010c1c <tSlide_setDest>
			x->sampleCount = 0;
 8016426:	2200      	movs	r2, #0
		if (x->bumpOsc)
 8016428:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
			x->sampleCount = 0;
 801642c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if (x->bumpOsc)
 8016430:	b183      	cbz	r3, 8016454 <tTString_tick+0x6b4>
			if (x->bumpCount > x->timeSinceLastBump)
 8016432:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8016436:	edd4 7a3f 	vldr	s15, [r4, #252]	; 0xfc
 801643a:	ee07 3a10 	vmov	s14, r3
 801643e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801644a:	dc74      	bgt.n	8016536 <tTString_tick+0x796>
			x->bumpCount++;
 801644c:	3301      	adds	r3, #1
 801644e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 8016452:	4613      	mov	r3, r2
			x->sampleCount++;
 8016454:	3301      	adds	r3, #1
 8016456:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 801645a:	e53f      	b.n	8015edc <tTString_tick+0x13c>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
 801645c:	f7fa fb96 	bl	8010b8c <tExpSmooth_setDest>
 8016460:	9801      	ldr	r0, [sp, #4]
 8016462:	e4c6      	b.n	8015df2 <tTString_tick+0x52>
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016464:	eefc 6ae7 	vcvt.u32.f32	s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016468:	ee7a dae7 	vsub.f32	s27, s21, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 801646c:	ee87 7a88 	vdiv.f32	s14, s15, s16
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016470:	ee16 7a90 	vmov	r7, s13
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8016474:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016478:	eef8 6a66 	vcvt.f32.u32	s13, s13
        Lfloat inversePickupPos = currentDelay - pickupPos;
 801647c:	ee78 8ae7 	vsub.f32	s17, s17, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016480:	ee37 8ae6 	vsub.f32	s16, s15, s13
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016484:	ee7d daa6 	vadd.f32	s27, s27, s13
        if (backwards)
 8016488:	e6fc      	b.n	8016284 <tTString_tick+0x4e4>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 801648a:	eeb0 0a6d 	vmov.f32	s0, s27
 801648e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8016492:	f7fa fd57 	bl	8010f44 <tThiranAllpassSOCascade_tick>
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 8016496:	f104 0058 	add.w	r0, r4, #88	; 0x58
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 801649a:	eef0 da40 	vmov.f32	s27, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 801649e:	eeb0 0a4d 	vmov.f32	s0, s26
 80164a2:	f7fa fd4f 	bl	8010f44 <tThiranAllpassSOCascade_tick>
 80164a6:	eeb0 da40 	vmov.f32	s26, s0
 80164aa:	e677      	b.n	801619c <tTString_tick+0x3fc>
        while (pickupPos < 0.0f)
 80164ac:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80164b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164b4:	d5d6      	bpl.n	8016464 <tTString_tick+0x6c4>
        uint32_t backwards = 0;
 80164b6:	2300      	movs	r3, #0
 80164b8:	e6c2      	b.n	8016240 <tTString_tick+0x4a0>
		x->slideNoise *= x->muted;
 80164ba:	edd4 7a50 	vldr	s15, [r4, #320]	; 0x140
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 80164be:	f504 7084 	add.w	r0, r4, #264	; 0x108
		x->slideNoise *= x->muted;
 80164c2:	ed94 0a5b 	vldr	s0, [r4, #364]	; 0x16c
 80164c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80164ca:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 80164ce:	f7fb f891 	bl	80115f4 <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 80164d2:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 80164d6:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 80164da:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 80164de:	ee28 8a27 	vmul.f32	s16, s16, s15
 80164e2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80164e6:	f7fa ff5d 	bl	80113a4 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
 80164ea:	edd4 7a33 	vldr	s15, [r4, #204]	; 0xcc
    for (int i = 0; i < x->oversampling; i++)
 80164ee:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
 80164f0:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
 80164f4:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
 80164f6:	ed84 0a32 	vstr	s0, [r4, #200]	; 0xc8
    for (int i = 0; i < x->oversampling; i++)
 80164fa:	f73f ad56 	bgt.w	8015faa <tTString_tick+0x20a>
 80164fe:	ed1f 0ada 	vldr	s0, [pc, #-872]	; 8016198 <tTString_tick+0x3f8>
}
 8016502:	b00d      	add	sp, #52	; 0x34
 8016504:	ecbd 8b10 	vpop	{d8-d15}
 8016508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			filterFade = (barFreq - 100.0f) * 0.005f;
 801650c:	ed5f 7ae0 	vldr	s15, [pc, #-896]	; 8016190 <tTString_tick+0x3f0>
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 8016510:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			filterFade = (barFreq - 100.0f) * 0.005f;
 8016514:	ed5f 0ae1 	vldr	s1, [pc, #-900]	; 8016194 <tTString_tick+0x3f4>
 8016518:	ee79 9ae7 	vsub.f32	s19, s19, s15
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 801651c:	ed1f 0ae2 	vldr	s0, [pc, #-904]	; 8016198 <tTString_tick+0x3f8>
 8016520:	ee69 0aa0 	vmul.f32	s1, s19, s1
 8016524:	f7fd f9be 	bl	80138a4 <LEAF_clip>
 8016528:	e519      	b.n	8015f5e <tTString_tick+0x1be>
			tSlide_setDest(&x->barPulseSlide, 0.0f);
 801652a:	ed1f 0ae5 	vldr	s0, [pc, #-916]	; 8016198 <tTString_tick+0x3f8>
 801652e:	4630      	mov	r0, r6
 8016530:	f7fa fb74 	bl	8010c1c <tSlide_setDest>
 8016534:	e4ed      	b.n	8015f12 <tTString_tick+0x172>
				tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016536:	eeb0 0a49 	vmov.f32	s0, s18
 801653a:	4638      	mov	r0, r7
 801653c:	f7fa fb2a 	bl	8010b94 <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
 8016540:	eeb0 0a49 	vmov.f32	s0, s18
 8016544:	4630      	mov	r0, r6
 8016546:	f7fa fb69 	bl	8010c1c <tSlide_setDest>
			x->bumpCount++;
 801654a:	2201      	movs	r2, #1
		if (x->sampleCount < 3000)
 801654c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
			x->bumpCount++;
 8016550:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
 8016554:	e4b8      	b.n	8015ec8 <tTString_tick+0x128>
 8016556:	bf00      	nop

08016558 <tTString_setFreq>:
{
 8016558:	b510      	push	{r4, lr}
 801655a:	ed2d 8b04 	vpush	{d8-d9}
    _tTString* x = *bw;
 801655e:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016560:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016564:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016568:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801656c:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8016570:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 8016574:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016578:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    x->freq = freq;
 801657c:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8016580:	ee27 8a88 	vmul.f32	s16, s15, s16
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016584:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016588:	f7fa fb00 	bl	8010b8c <tExpSmooth_setDest>
    x->phaseComp = atan2f(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)));
 801658c:	eeb0 0a48 	vmov.f32	s0, s16
 8016590:	edd4 8a4f 	vldr	s17, [r4, #316]	; 0x13c
 8016594:	f002 f97e 	bl	8018894 <arm_sin_f32>
 8016598:	eef0 7a40 	vmov.f32	s15, s0
 801659c:	ed94 9a4f 	vldr	s18, [r4, #316]	; 0x13c
 80165a0:	eeb0 0a48 	vmov.f32	s0, s16
 80165a4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80165a8:	f002 f9ba 	bl	8018920 <arm_cos_f32>
 80165ac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80165b0:	eef0 7a40 	vmov.f32	s15, s0
 80165b4:	eeb0 0a68 	vmov.f32	s0, s17
 80165b8:	eee9 0a67 	vfms.f32	s1, s18, s15
 80165bc:	f002 fb2a 	bl	8018c14 <atan2f>
 80165c0:	ed84 0a4e 	vstr	s0, [r4, #312]	; 0x138
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
 80165c4:	ecbd 8b04 	vpop	{d8-d9}
 80165c8:	bd10      	pop	{r4, pc}
 80165ca:	bf00      	nop

080165cc <tTString_setDecay>:

void    tTString_setDecay               (tTString* const bw, Lfloat decay)
{
 80165cc:	b510      	push	{r4, lr}
 80165ce:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
	 x->decayInSeconds = (decay * 20.0f) + 0.1f;
 80165d2:	ed9f 8a18 	vldr	s16, [pc, #96]	; 8016634 <tTString_setDecay+0x68>
 80165d6:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
	 if (x->decayInSeconds > 20.0f)
 80165da:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8016638 <tTString_setDecay+0x6c>
	 x->decayInSeconds = (decay * 20.0f) + 0.1f;
 80165de:	eef0 7a48 	vmov.f32	s15, s16
	 _tTString* x = *bw;
 80165e2:	6804      	ldr	r4, [r0, #0]
	 if (x->decayInSeconds > 20.0f)
 80165e4:	eeb4 0ac7 	vcmpe.f32	s0, s14
	 x->decayInSeconds = (decay * 20.0f) + 0.1f;
 80165e8:	eee0 7a26 	vfma.f32	s15, s0, s13
	 if (x->decayInSeconds > 20.0f)
 80165ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	 x->decayInSeconds = (decay * 20.0f) + 0.1f;
 80165f0:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
	 if (x->decayInSeconds > 20.0f)
 80165f4:	dd06      	ble.n	8016604 <tTString_setDecay+0x38>
 80165f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	 {
		 x->decayCoeff = 1.0f;
 80165fa:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
	 }
}
 80165fe:	ecbd 8b02 	vpop	{d8}
 8016602:	bd10      	pop	{r4, pc}
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 8016604:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8016608:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801660c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016610:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8016614:	f7fd f864 	bl	80136e0 <fastExp3>
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 8016618:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 801661c:	eef0 0a40 	vmov.f32	s1, s0
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 8016620:	eeb0 0a48 	vmov.f32	s0, s16
 8016624:	f7fd f93e 	bl	80138a4 <LEAF_clip>
		 x->decayCoeff = 1.0f;
 8016628:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
}
 801662c:	ecbd 8b02 	vpop	{d8}
 8016630:	bd10      	pop	{r4, pc}
 8016632:	bf00      	nop
 8016634:	3dcccccd 	.word	0x3dcccccd
 8016638:	3f7eb852 	.word	0x3f7eb852

0801663c <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
 801663c:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
 801663e:	ed83 0a26 	vstr	s0, [r3, #152]	; 0x98
}
 8016642:	4770      	bx	lr

08016644 <tTString_setPickupModAmp>:

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
 8016644:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
 8016646:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
}
 801664a:	4770      	bx	lr

0801664c <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
	_tTString* x = *bw;
 801664c:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscFreq = freq;
	tCycle_setFreq(&x->pickupModOsc, freq);
 801664e:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
	x->pickupModOscFreq = freq;
 8016652:	ed83 0a2b 	vstr	s0, [r3, #172]	; 0xac
	tCycle_setFreq(&x->pickupModOsc, freq);
 8016656:	f7fd bdcf 	b.w	80141f8 <tCycle_setFreq>
 801665a:	bf00      	nop

0801665c <tTString_mute>:
}



void    tTString_mute              (tTString* const bw)
{
 801665c:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
 801665e:	6804      	ldr	r4, [r0, #0]
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
 8016660:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8016684 <tTString_mute+0x28>
 8016664:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8016668:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801666c:	f7fd f838 	bl	80136e0 <fastExp3>
	 if (x->muteCoeff < 0.5f)
	 {
		 x->muteCoeff = 0.5f;
	 }
	 x->muted = 0.0f;
 8016670:	2300      	movs	r3, #0
 8016672:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 8016676:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801667a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 801667e:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
}
 8016682:	bd10      	pop	{r4, pc}
 8016684:	c30edb6d 	.word	0xc30edb6d

08016688 <tTString_setFilter>:

void    tTString_setFilter              (tTString* const bw, Lfloat filter)
{
 8016688:	b510      	push	{r4, lr}
	 _tTString* x = *bw;

	//filter = ((filter * 18000.0f) + 20.0f)* x->twoPiTimesInvSampleRate;
	 //Lfloat lowestNumOvertones = LEAF_map(x->freq, 20.0f, 3000.0f, 15.0f, 12.0f);
	// LEAF_clip(7.0f, lowestNumOvertones, 10.0f);
	 Lfloat overtone = LEAF_mapFromZeroToOneInput(filter, 14.0f, 100.0f);
 801668a:	eef2 0a0c 	vmov.f32	s1, #44	; 0x41600000  14.0
 801668e:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80166ec <tTString_setFilter+0x64>
{
 8016692:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
 8016696:	6804      	ldr	r4, [r0, #0]
	 Lfloat overtone = LEAF_mapFromZeroToOneInput(filter, 14.0f, 100.0f);
 8016698:	f7fc ffc2 	bl	8013620 <LEAF_mapFromZeroToOneInput>
 801669c:	eef0 0a40 	vmov.f32	s1, s0

	 Lfloat freqToUse = (overtone * x->freq);
 80166a0:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
	freqToUse = LEAF_clip(10.0f, freqToUse, x->quarterSampleRate);
 80166a4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80166a8:	ed94 1a5d 	vldr	s2, [r4, #372]	; 0x174
#ifdef ARM_MATH_CM7
	filter = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 80166ac:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	freqToUse = LEAF_clip(10.0f, freqToUse, x->quarterSampleRate);
 80166b0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80166b4:	f7fd f8f6 	bl	80138a4 <LEAF_clip>
	filter = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 80166b8:	edd4 7a04 	vldr	s15, [r4, #16]
 80166bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80166c0:	f002 f8e8 	bl	8018894 <arm_sin_f32>
 80166c4:	ee38 8a40 	vsub.f32	s16, s16, s0
	filter = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,filter);
 80166c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80166cc:	eeb0 0a48 	vmov.f32	s0, s16
 80166d0:	f7fa fd22 	bl	8011118 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,filter);
 80166d4:	eeb0 0a48 	vmov.f32	s0, s16
 80166d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80166dc:	f7fa fd1c 	bl	8011118 <tCookOnePole_setPole>
	x->poleCoeff = filter;
 80166e0:	ed84 8a4f 	vstr	s16, [r4, #316]	; 0x13c

}
 80166e4:	ecbd 8b02 	vpop	{d8}
 80166e8:	bd10      	pop	{r4, pc}
 80166ea:	bf00      	nop
 80166ec:	42c80000 	.word	0x42c80000

080166f0 <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
 80166f0:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
 80166f2:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 80166f6:	4770      	bx	lr

080166f8 <tTString_setBarPosition>:

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
	x->prevBarPosition = x->barPosition;
	if (barPosition == 0)
 80166f8:	eeb5 0a40 	vcmp.f32	s0, #0.0
	_tTString* x = *bw;
 80166fc:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
 80166fe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
	if (barPosition == 0)
 8016702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	x->prevBarPosition = x->barPosition;
 8016706:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	if (barPosition == 0)
 801670a:	d104      	bne.n	8016716 <tTString_setBarPosition+0x1e>
	{
		x->barJumps++;
 801670c:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8016710:	3201      	adds	r2, #1
 8016712:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	}
	x->barPosition = barPosition;
 8016716:	ed83 0a3a 	vstr	s0, [r3, #232]	; 0xe8
}
 801671a:	4770      	bx	lr

0801671c <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
 801671c:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
 801671e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016722:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8016726:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801672a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801672e:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
}
 8016732:	4770      	bx	lr

08016734 <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 8016734:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
 8016736:	ed83 0a29 	vstr	s0, [r3, #164]	; 0xa4
}
 801673a:	4770      	bx	lr

0801673c <tTString_setTensionSpeed>:
}

void   tTString_setTensionSpeed                  (tTString* const bw, Lfloat tensionSpeed)
{
	_tTString* x = *bw;
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
 801673c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016740:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8016764 <tTString_setTensionSpeed+0x28>
	_tTString* x = *bw;
 8016744:	6800      	ldr	r0, [r0, #0]
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
 8016746:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8016768 <tTString_setTensionSpeed+0x2c>
 801674a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801674e:	edd0 6a02 	vldr	s13, [r0, #8]
 8016752:	304c      	adds	r0, #76	; 0x4c
 8016754:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016758:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801675c:	eeb0 0a47 	vmov.f32	s0, s14
 8016760:	f7fa b9ee 	b.w	8010b40 <tExpSmooth_setFactor>
 8016764:	3a27c5ac 	.word	0x3a27c5ac
 8016768:	3727c5ac 	.word	0x3727c5ac

0801676c <tTString_setRippleDepth>:
}


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
 801676c:	b510      	push	{r4, lr}
 801676e:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
 8016772:	6804      	ldr	r4, [r0, #0]
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8016774:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016778:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80167e8 <tTString_setRippleDepth+0x7c>
{
 801677c:	eeb0 8a40 	vmov.f32	s16, s0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8016780:	edd4 5a21 	vldr	s11, [r4, #132]	; 0x84
 8016784:	eddf 7a19 	vldr	s15, [pc, #100]	; 80167ec <tTString_setRippleDepth+0x80>
 8016788:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
 801678c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8016790:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016794:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016798:	f7fc ffa2 	bl	80136e0 <fastExp3>
	x->invOnePlusr = 1.0f / (1.0f + x->r);
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 801679c:	f104 001c 	add.w	r0, r4, #28
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80167a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 80167a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 80167a8:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80167ac:	ee68 7a27 	vmul.f32	s15, s16, s15
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 80167b0:	eef0 8a47 	vmov.f32	s17, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80167b4:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 80167b8:	eee8 8a26 	vfma.f32	s17, s16, s13
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 80167bc:	ee77 6a87 	vadd.f32	s13, s15, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 80167c0:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 80167c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 80167c8:	eeb0 0a68 	vmov.f32	s0, s17
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 80167cc:	edc4 7a22 	vstr	s15, [r4, #136]	; 0x88
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 80167d0:	f7fa ff04 	bl	80115dc <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 80167d4:	eeb0 0a68 	vmov.f32	s0, s17
 80167d8:	f104 0020 	add.w	r0, r4, #32
}
 80167dc:	ecbd 8b02 	vpop	{d8}
 80167e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 80167e4:	f7fa befa 	b.w	80115dc <tHighpass_setFreq>
 80167e8:	3ba3d70a 	.word	0x3ba3d70a
 80167ec:	38d1b717 	.word	0x38d1b717

080167f0 <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
	x->harmonic = harmonic;
	x->rippleRate = 1.0f / harmonic;
 80167f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tTString* x = *bw;
 80167f4:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
 80167f6:	ed83 0a20 	vstr	s0, [r3, #128]	; 0x80
	x->rippleRate = 1.0f / harmonic;
 80167fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80167fe:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
}
 8016802:	4770      	bx	lr

08016804 <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
	_tTString* x = *bw;
	Lfloat strengthVal = 0.5f * strength;
 8016804:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8016808:	b510      	push	{r4, lr}
 801680a:	ed2d 8b02 	vpush	{d8}
 801680e:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
 8016812:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
 8016814:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8016818:	b082      	sub	sp, #8
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
 801681a:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 801681e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8016822:	f7f9 fde9 	bl	80103f8 <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
 8016826:	ed9d 0a01 	vldr	s0, [sp, #4]
 801682a:	f504 70b4 	add.w	r0, r4, #360	; 0x168
 801682e:	f7f9 fde3 	bl	80103f8 <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
 8016832:	eddf 7a05 	vldr	s15, [pc, #20]	; 8016848 <tTString_setFeedbackStrength+0x44>
 8016836:	ee28 8a27 	vmul.f32	s16, s16, s15
 801683a:	ed84 8a5c 	vstr	s16, [r4, #368]	; 0x170

}
 801683e:	b002      	add	sp, #8
 8016840:	ecbd 8b02 	vpop	{d8}
 8016844:	bd10      	pop	{r4, pc}
 8016846:	bf00      	nop
 8016848:	3ba3d70a 	.word	0x3ba3d70a

0801684c <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
 801684c:	b510      	push	{r4, lr}
	_tTString* x = *bw;
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 801684e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8016880 <tTString_setFeedbackReactionSpeed+0x34>
{
 8016852:	ed2d 8b02 	vpush	{d8}
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8016856:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 8016884 <tTString_setFeedbackReactionSpeed+0x38>
	_tTString* x = *bw;
 801685a:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 801685c:	eea0 8a27 	vfma.f32	s16, s0, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
 8016860:	f504 70b2 	add.w	r0, r4, #356	; 0x164
 8016864:	eeb0 0a48 	vmov.f32	s0, s16
 8016868:	f7f9 fdca 	bl	8010400 <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 801686c:	eeb0 0a48 	vmov.f32	s0, s16
 8016870:	f504 70b4 	add.w	r0, r4, #360	; 0x168
}
 8016874:	ecbd 8b02 	vpop	{d8}
 8016878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 801687c:	f7f9 bdc0 	b.w	8010400 <tFeedbackLeveler_setFactor>
 8016880:	3dcccccd 	.word	0x3dcccccd
 8016884:	3727c5ac 	.word	0x3727c5ac

08016888 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
 8016888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801688c:	ed2d 8b08 	vpush	{d8-d11}
    _tTString* x = *bw;

    x->muted = 1.0f;
 8016890:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    _tTString* x = *bw;
 8016894:	f8d0 9000 	ldr.w	r9, [r0]
{
 8016898:	b085      	sub	sp, #20
 801689a:	eeb0 8a40 	vmov.f32	s16, s0
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 801689e:	f109 004c 	add.w	r0, r9, #76	; 0x4c
 80168a2:	eeb0 0a60 	vmov.f32	s0, s1
    x->muted = 1.0f;
 80168a6:	edc9 9a50 	vstr	s19, [r9, #320]	; 0x140
{
 80168aa:	eef0 8a60 	vmov.f32	s17, s1
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 80168ae:	f7fa f971 	bl	8010b94 <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 80168b2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80168b6:	f509 70b2 	add.w	r0, r9, #356	; 0x164
    Lfloat currentDelay = x->baseDelay;// - x->allpassDelay;
    x->muteCoeff = 1.0f;
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
    Lfloat positionMax = (x->openStringLength * 0.001f);
 80168ba:	ed9f 9aa1 	vldr	s18, [pc, #644]	; 8016b40 <tTString_pluck+0x2b8>
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
    tLagrangeDelay_clear(&x->delay);
 80168be:	f109 0514 	add.w	r5, r9, #20
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 80168c2:	ee28 0aa7 	vmul.f32	s0, s17, s15
 80168c6:	ed8d 0a00 	vstr	s0, [sp]
 80168ca:	f7f9 fdc5 	bl	8010458 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
 80168ce:	ed9d 0a00 	vldr	s0, [sp]
 80168d2:	f509 70b4 	add.w	r0, r9, #360	; 0x168
 80168d6:	f7f9 fdbf 	bl	8010458 <tFeedbackLeveler_setTargetLevel>
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80168da:	f109 0050 	add.w	r0, r9, #80	; 0x50
 80168de:	f7fa f963 	bl	8010ba8 <tExpSmooth_tick>
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 80168e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80168e6:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 80168ea:	edd9 6a3c 	vldr	s13, [r9, #240]	; 0xf0
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 80168ee:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 80168f2:	eddf 0a94 	vldr	s1, [pc, #592]	; 8016b44 <tTString_pluck+0x2bc>
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 80168f6:	ee26 1a89 	vmul.f32	s2, s13, s18
    x->muteCoeff = 1.0f;
 80168fa:	edc9 9a1d 	vstr	s19, [r9, #116]	; 0x74
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 80168fe:	ee27 7a87 	vmul.f32	s14, s15, s14
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8016902:	edc9 7a0b 	vstr	s15, [r9, #44]	; 0x2c
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8016906:	ee66 0aa0 	vmul.f32	s1, s13, s1
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 801690a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 801690e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8016912:	edcd 7a00 	vstr	s15, [sp]
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 8016916:	ee78 7a08 	vadd.f32	s15, s16, s16
 801691a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801691e:	ee17 7a90 	vmov	r7, s15
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8016922:	f7fc fe7d 	bl	8013620 <LEAF_mapFromZeroToOneInput>
 8016926:	eef0 7a40 	vmov.f32	s15, s0
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 801692a:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8016b48 <tTString_pluck+0x2c0>
 801692e:	eeb0 1a48 	vmov.f32	s2, s16
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8016932:	edcd 7a02 	vstr	s15, [sp, #8]
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 8016936:	eddd 0a02 	vldr	s1, [sp, #8]
 801693a:	f7fc ffb3 	bl	80138a4 <LEAF_clip>
 801693e:	ed8d 0a02 	vstr	s0, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8016942:	ed9d 7a02 	vldr	s14, [sp, #8]
    tLagrangeDelay_clear(&x->delay);
 8016946:	4628      	mov	r0, r5
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8016948:	eddd 7a02 	vldr	s15, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 801694c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8016950:	ee79 7a67 	vsub.f32	s15, s18, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8016954:	eeb8 aa47 	vcvt.f32.u32	s20, s14
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8016958:	ee17 8a10 	vmov	r8, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 801695c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8016960:	ee89 7aa7 	vdiv.f32	s14, s19, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8016964:	ee7a 9a09 	vadd.f32	s19, s20, s18
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8016968:	ed8d 7a03 	vstr	s14, [sp, #12]
    tLagrangeDelay_clear(&x->delay);
 801696c:	f7f9 f952 	bl	800fc14 <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8016970:	ed9d 7a02 	vldr	s14, [sp, #8]
    x->pluckPoint_forInput = pluckPoint;
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016974:	9b00      	ldr	r3, [sp, #0]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8016976:	eec7 7a08 	vdiv.f32	s15, s14, s16
    x->pluckPoint_forInput = pluckPoint;
 801697a:	9a02      	ldr	r2, [sp, #8]
 801697c:	f8c9 2190 	str.w	r2, [r9, #400]	; 0x190
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8016980:	edc9 7a60 	vstr	s15, [r9, #384]	; 0x180
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016984:	2b00      	cmp	r3, #0
 8016986:	f000 80a6 	beq.w	8016ad6 <tTString_pluck+0x24e>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
        }
        val = tanhf(val*1.2f) * amplitude;
        tLagrangeDelay_tapIn(&x->delay, val, i);
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 801698a:	f109 0618 	add.w	r6, r9, #24
 801698e:	f1b8 0f00 	cmp.w	r8, #0
 8016992:	f000 80d2 	beq.w	8016b3a <tTString_pluck+0x2b2>
        val = tanhf(val*1.2f) * amplitude;
 8016996:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 8016b4c <tTString_pluck+0x2c4>
 801699a:	4543      	cmp	r3, r8
 801699c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8016b50 <tTString_pluck+0x2c8>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 80169a0:	f04f 0400 	mov.w	r4, #0
        val = tanhf(val*1.2f) * amplitude;
 80169a4:	ee28 9a89 	vmul.f32	s18, s17, s18
 80169a8:	bf28      	it	cs
 80169aa:	4643      	movcs	r3, r8
 80169ac:	ee87 baa9 	vdiv.f32	s22, s15, s19
 80169b0:	eba7 0a08 	sub.w	sl, r7, r8
 80169b4:	9301      	str	r3, [sp, #4]
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 80169b6:	eef1 9a49 	vneg.f32	s19, s18
        val = tanhf(val*1.2f) * amplitude;
 80169ba:	ee07 4a90 	vmov	s15, r4
        if (i == pluckPointInt)
 80169be:	45a0      	cmp	r8, r4
 80169c0:	eba7 0b04 	sub.w	fp, r7, r4
        val = tanhf(val*1.2f) * amplitude;
 80169c4:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80169c8:	ee20 0a0b 	vmul.f32	s0, s0, s22
        if (i == pluckPointInt)
 80169cc:	f000 8096 	beq.w	8016afc <tTString_pluck+0x274>
        val = tanhf(val*1.2f) * amplitude;
 80169d0:	f002 fed8 	bl	8019784 <tanhf>
 80169d4:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 80169d8:	4621      	mov	r1, r4
 80169da:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 80169dc:	eef1 aa48 	vneg.f32	s21, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 80169e0:	eeb0 0a48 	vmov.f32	s0, s16
 80169e4:	f7f9 fa70 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 80169e8:	4659      	mov	r1, fp
 80169ea:	eeb0 0a6a 	vmov.f32	s0, s21
 80169ee:	4628      	mov	r0, r5
 80169f0:	f7f9 fa6a 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 80169f4:	4621      	mov	r1, r4
 80169f6:	eeb0 0a48 	vmov.f32	s0, s16
 80169fa:	4630      	mov	r0, r6
 80169fc:	f7f9 fa64 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8016a00:	eeb0 0a6a 	vmov.f32	s0, s21
 8016a04:	4659      	mov	r1, fp
 8016a06:	4630      	mov	r0, r6
 8016a08:	f7f9 fa5e 	bl	800fec8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016a0c:	3401      	adds	r4, #1
 8016a0e:	9b01      	ldr	r3, [sp, #4]
 8016a10:	42a3      	cmp	r3, r4
 8016a12:	d8d2      	bhi.n	80169ba <tTString_pluck+0x132>
 8016a14:	9b00      	ldr	r3, [sp, #0]
 8016a16:	42a3      	cmp	r3, r4
 8016a18:	d95d      	bls.n	8016ad6 <tTString_pluck+0x24e>
        val = tanhf(val*1.2f) * amplitude;
 8016a1a:	ed9f 9a4c 	vldr	s18, [pc, #304]	; 8016b4c <tTString_pluck+0x2c4>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8016a1e:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
        val = tanhf(val*1.2f) * amplitude;
 8016a22:	ed9f ba4b 	vldr	s22, [pc, #300]	; 8016b50 <tTString_pluck+0x2c8>
 8016a26:	eba7 0a08 	sub.w	sl, r7, r8
 8016a2a:	ee28 9a89 	vmul.f32	s18, s17, s18
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8016a2e:	eef1 9a49 	vneg.f32	s19, s18
 8016a32:	e029      	b.n	8016a88 <tTString_pluck+0x200>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8016a34:	eeb0 0a6b 	vmov.f32	s0, s23
 8016a38:	ed9d 7a03 	vldr	s14, [sp, #12]
 8016a3c:	eea7 0a27 	vfma.f32	s0, s14, s15
        val = tanhf(val*1.2f) * amplitude;
 8016a40:	ee20 0a0b 	vmul.f32	s0, s0, s22
 8016a44:	f002 fe9e 	bl	8019784 <tanhf>
 8016a48:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016a4c:	4621      	mov	r1, r4
 8016a4e:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8016a50:	eef1 aa48 	vneg.f32	s21, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016a54:	eeb0 0a48 	vmov.f32	s0, s16
 8016a58:	f7f9 fa36 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8016a5c:	4659      	mov	r1, fp
 8016a5e:	eeb0 0a6a 	vmov.f32	s0, s21
 8016a62:	4628      	mov	r0, r5
 8016a64:	f7f9 fa30 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8016a68:	4621      	mov	r1, r4
 8016a6a:	eeb0 0a48 	vmov.f32	s0, s16
 8016a6e:	4630      	mov	r0, r6
 8016a70:	f7f9 fa2a 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8016a74:	eeb0 0a6a 	vmov.f32	s0, s21
 8016a78:	4659      	mov	r1, fp
 8016a7a:	4630      	mov	r0, r6
 8016a7c:	f7f9 fa24 	bl	800fec8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016a80:	3401      	adds	r4, #1
 8016a82:	9b00      	ldr	r3, [sp, #0]
 8016a84:	42a3      	cmp	r3, r4
 8016a86:	d926      	bls.n	8016ad6 <tTString_pluck+0x24e>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8016a88:	ee07 4a90 	vmov	s15, r4
        if (i == pluckPointInt)
 8016a8c:	45a0      	cmp	r8, r4
 8016a8e:	eba7 0b04 	sub.w	fp, r7, r4
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8016a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016a96:	ee7a 7a67 	vsub.f32	s15, s20, s15
        if (i == pluckPointInt)
 8016a9a:	d1cb      	bne.n	8016a34 <tTString_pluck+0x1ac>
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016a9c:	eeb0 0a49 	vmov.f32	s0, s18
 8016aa0:	4641      	mov	r1, r8
 8016aa2:	4628      	mov	r0, r5
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016aa4:	f108 0401 	add.w	r4, r8, #1
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016aa8:	f7f9 fa0e 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8016aac:	eeb0 0a69 	vmov.f32	s0, s19
 8016ab0:	4651      	mov	r1, sl
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	f7f9 fa08 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8016ab8:	eeb0 0a49 	vmov.f32	s0, s18
 8016abc:	4641      	mov	r1, r8
 8016abe:	4630      	mov	r0, r6
 8016ac0:	f7f9 fa02 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8016ac4:	eeb0 0a69 	vmov.f32	s0, s19
 8016ac8:	4651      	mov	r1, sl
 8016aca:	4630      	mov	r0, r6
 8016acc:	f7f9 f9fc 	bl	800fec8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016ad0:	9b00      	ldr	r3, [sp, #0]
 8016ad2:	42a3      	cmp	r3, r4
 8016ad4:	d8d8      	bhi.n	8016a88 <tTString_pluck+0x200>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
 8016ad6:	f109 0054 	add.w	r0, r9, #84	; 0x54
 8016ada:	f7fa fa61 	bl	8010fa0 <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
 8016ade:	f109 0058 	add.w	r0, r9, #88	; 0x58
 8016ae2:	f7fa fa5d 	bl	8010fa0 <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
 8016ae6:	eeb0 0a68 	vmov.f32	s0, s17
 8016aea:	f509 70c4 	add.w	r0, r9, #392	; 0x188
}
 8016aee:	b005      	add	sp, #20
 8016af0:	ecbd 8b08 	vpop	{d8-d11}
 8016af4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tExpSmooth_setVal(&x->pickNoise, amplitude);
 8016af8:	f7fa b84c 	b.w	8010b94 <tExpSmooth_setVal>
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016afc:	eeb0 0a49 	vmov.f32	s0, s18
 8016b00:	4641      	mov	r1, r8
 8016b02:	4628      	mov	r0, r5
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016b04:	f108 0401 	add.w	r4, r8, #1
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8016b08:	f7f9 f9de 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8016b0c:	eeb0 0a69 	vmov.f32	s0, s19
 8016b10:	4651      	mov	r1, sl
 8016b12:	4628      	mov	r0, r5
 8016b14:	f7f9 f9d8 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8016b18:	eeb0 0a49 	vmov.f32	s0, s18
 8016b1c:	4641      	mov	r1, r8
 8016b1e:	4630      	mov	r0, r6
 8016b20:	f7f9 f9d2 	bl	800fec8 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8016b24:	eeb0 0a69 	vmov.f32	s0, s19
 8016b28:	4651      	mov	r1, sl
 8016b2a:	4630      	mov	r0, r6
 8016b2c:	f7f9 f9cc 	bl	800fec8 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8016b30:	9b01      	ldr	r3, [sp, #4]
 8016b32:	429c      	cmp	r4, r3
 8016b34:	f4ff af41 	bcc.w	80169ba <tTString_pluck+0x132>
 8016b38:	e76c      	b.n	8016a14 <tTString_pluck+0x18c>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8016b3a:	4644      	mov	r4, r8
 8016b3c:	e76d      	b.n	8016a1a <tTString_pluck+0x192>
 8016b3e:	bf00      	nop
 8016b40:	3a83126f 	.word	0x3a83126f
 8016b44:	3e511111 	.word	0x3e511111
 8016b48:	00000000 	.word	0x00000000
 8016b4c:	3f556a64 	.word	0x3f556a64
 8016b50:	3f99999a 	.word	0x3f99999a

08016b54 <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
 8016b54:	b510      	push	{r4, lr}
 8016b56:	ed2d 8b02 	vpush	{d8}
    _tTString* x = *bw;
 8016b5a:	6804      	ldr	r4, [r0, #0]
{
 8016b5c:	eeb0 8a60 	vmov.f32	s16, s1
 8016b60:	eef0 8a40 	vmov.f32	s17, s0
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8016b64:	edd4 7a01 	vldr	s15, [r4, #4]
 8016b68:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8016b6c:	edd4 0a02 	vldr	s1, [r4, #8]
 8016b70:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8016b74:	ee68 0a20 	vmul.f32	s1, s16, s1
 8016b78:	f7fa f900 	bl	8010d7c <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 8016b7c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016b80:	edd4 0a02 	vldr	s1, [r4, #8]
 8016b84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016b88:	ed94 7a01 	vldr	s14, [r4, #4]
 8016b8c:	ee68 0a20 	vmul.f32	s1, s16, s1
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8016b90:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 8016b94:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
 8016b98:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8016b9c:	f7fa f8ee 	bl	8010d7c <tThiranAllpassSOCascade_setCoeff>
 8016ba0:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8016ba4:	ecbd 8b02 	vpop	{d8}
 8016ba8:	bd10      	pop	{r4, pc}
 8016baa:	bf00      	nop

08016bac <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
    x->inharmonic = onOrOff;
    x->inharmonicMult = (Lfloat)onOrOff;
 8016bac:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 8016bb0:	6803      	ldr	r3, [r0, #0]
    x->inharmonicMult = (Lfloat)onOrOff;
 8016bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    x->inharmonic = onOrOff;
 8016bb6:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
    x->inharmonicMult = (Lfloat)onOrOff;
 8016bba:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
}
 8016bbe:	4770      	bx	lr

08016bc0 <glottis_setup_waveform>:




void glottis_setup_waveform(glottis* const glo)
{
 8016bc0:	b510      	push	{r4, lr}
	_glottis* glot = *glo;
 8016bc2:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8016bc4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8016bc8:	eddf 3a53 	vldr	s7, [pc, #332]	; 8016d18 <glottis_setup_waveform+0x158>
    if(Rd < 0.5f) Rd = 0.5f;
    if(Rd > 2.7f) Rd = 2.7f;


    Ra = -0.01f + 0.048f*Rd;
    Rk = 0.224f + 0.118f*Rd;
 8016bcc:	eddf 6a53 	vldr	s13, [pc, #332]	; 8016d1c <glottis_setup_waveform+0x15c>
 8016bd0:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8016d20 <glottis_setup_waveform+0x160>
    Ra = -0.01f + 0.048f*Rd;
 8016bd4:	ed9f 4a53 	vldr	s8, [pc, #332]	; 8016d24 <glottis_setup_waveform+0x164>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8016bd8:	eddf 4a53 	vldr	s9, [pc, #332]	; 8016d28 <glottis_setup_waveform+0x168>
 8016bdc:	eddf 5a53 	vldr	s11, [pc, #332]	; 8016d2c <glottis_setup_waveform+0x16c>
{
 8016be0:	ed2d 8b08 	vpush	{d8-d11}
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8016be4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8016be8:	edd4 7a02 	vldr	s15, [r4, #8]
 8016bec:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    glot->waveform_length = 1.0f / glot->freq;
 8016bf0:	ed94 7a01 	vldr	s14, [r4, #4]


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
    Te = Tp + Tp*Rk;
 8016bf4:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 8016d30 <glottis_setup_waveform+0x170>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8016bf8:	ee79 7a67 	vsub.f32	s15, s18, s15
    Ra = -0.01f + 0.048f*Rd;
 8016bfc:	eddf aa4d 	vldr	s21, [pc, #308]	; 8016d34 <glottis_setup_waveform+0x174>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8016c00:	ee67 7a85 	vmul.f32	s15, s15, s10
    glot->waveform_length = 1.0f / glot->freq;
 8016c04:	ee89 5a07 	vdiv.f32	s10, s18, s14
 8016c08:	fe87 7a8b 	vmaxnm.f32	s14, s15, s22
 8016c0c:	fe87 7a63 	vminnm.f32	s14, s14, s7
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8016c10:	edc4 7a03 	vstr	s15, [r4, #12]
    Rk = 0.224f + 0.118f*Rd;
 8016c14:	eea7 6a26 	vfma.f32	s12, s14, s13
    Te = Tp + Tp*Rk;
 8016c18:	eea7 8a26 	vfma.f32	s16, s14, s13
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8016c1c:	eef0 6a4b 	vmov.f32	s13, s22
    Ra = -0.01f + 0.048f*Rd;
 8016c20:	eee7 aa04 	vfma.f32	s21, s14, s8
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8016c24:	eee6 6a24 	vfma.f32	s13, s12, s9



    epsilon = (Lfloat)1.0f / Ta;
 8016c28:	eec9 ba2a 	vdiv.f32	s23, s18, s21
    glot->waveform_length = 1.0f / glot->freq;
 8016c2c:	ed84 5a04 	vstr	s10, [r4, #16]
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8016c30:	ee6a 7ae6 	vnmul.f32	s15, s21, s13
 8016c34:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016c38:	eee7 7a25 	vfma.f32	s15, s14, s11
    Tp = (Lfloat)1.0f / (2.0f*Rg);
 8016c3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016c40:	ee87 aaa6 	vdiv.f32	s20, s15, s13
    Te = Tp + Tp*Rk;
 8016c44:	ee28 8a0a 	vmul.f32	s16, s16, s20
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8016c48:	ee38 0a49 	vsub.f32	s0, s16, s18
 8016c4c:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8016c50:	f7fc fd2c 	bl	80136ac <fasterexpf>
    rhs_integral = rhs_integral / delta;
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
    upper_integral = -lower_integral;


    omega = M_PI / Tp;
 8016c54:	eeb7 5aca 	vcvt.f64.f32	d5, s20
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8016c58:	ee79 7a48 	vsub.f32	s15, s18, s16
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 8016c5c:	ee3a 7a48 	vsub.f32	s14, s20, s16
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8016c60:	eef0 9a40 	vmov.f32	s19, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8016c64:	ee67 7a80 	vmul.f32	s15, s15, s0
    omega = M_PI / Tp;
 8016c68:	ed9f 4b27 	vldr	d4, [pc, #156]	; 8016d08 <glottis_setup_waveform+0x148>
 8016c6c:	ee84 6b05 	vdiv.f64	d6, d4, d5
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8016c70:	ee70 5a49 	vsub.f32	s11, s0, s18
    delta = 1.0f - shift;
 8016c74:	ee39 9a40 	vsub.f32	s18, s18, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8016c78:	eee5 7aaa 	vfma.f32	s15, s11, s21
    rhs_integral = rhs_integral / delta;
 8016c7c:	eec7 8a89 	vdiv.f32	s17, s15, s18
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 8016c80:	eee7 8a0b 	vfma.f32	s17, s14, s22
    omega = M_PI / Tp;
 8016c84:	eef7 abc6 	vcvt.f32.f64	s21, d6
    s = fast_sinf2(omega * Te);
 8016c88:	ee28 0a2a 	vmul.f32	s0, s16, s21
 8016c8c:	f7fc fd50 	bl	8013730 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8016c90:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
    upper_integral = -lower_integral;
 8016c94:	eeb1 7a68 	vneg.f32	s14, s17
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8016c98:	ee3a 6a0a 	vadd.f32	s12, s20, s20
    s = fast_sinf2(omega * Te);
 8016c9c:	eef0 8a40 	vmov.f32	s17, s0
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8016ca0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8016ca4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8016ca8:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8016d10 <glottis_setup_waveform+0x150>
 8016cac:	ee25 5b04 	vmul.f64	d5, d5, d4
 8016cb0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8016cb4:	ee87 0b06 	vdiv.f64	d0, d7, d6
    z = logf(y);
 8016cb8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016cbc:	f001 ffac 	bl	8018c18 <logf>
    alpha = z / (Tp/2.0f - Te);
 8016cc0:	eef0 7a48 	vmov.f32	s15, s16
 8016cc4:	eeda 7a0b 	vfnms.f32	s15, s20, s22
 8016cc8:	ee80 aa27 	vdiv.f32	s20, s0, s15
    E0 = -1.0f / (s * fasterexpf(alpha*Te));
 8016ccc:	ee28 0a0a 	vmul.f32	s0, s16, s20
 8016cd0:	f7fc fcec 	bl	80136ac <fasterexpf>
 8016cd4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016cd8:	ee20 0a28 	vmul.f32	s0, s0, s17



    glot->alpha = alpha;
 8016cdc:	ed84 aa06 	vstr	s20, [r4, #24]
    glot->E0 = E0;
    glot->epsilon = epsilon;
 8016ce0:	edc4 ba08 	vstr	s23, [r4, #32]
    glot->shift = shift;
 8016ce4:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    E0 = -1.0f / (s * fasterexpf(alpha*Te));
 8016ce8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    glot->delta = delta;
 8016cec:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    glot->Te = Te;
 8016cf0:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    glot->omega = omega;
 8016cf4:	edc4 aa0c 	vstr	s21, [r4, #48]	; 0x30
    glot->E0 = E0;
 8016cf8:	edc4 7a07 	vstr	s15, [r4, #28]
}
 8016cfc:	ecbd 8b08 	vpop	{d8-d11}
 8016d00:	bd10      	pop	{r4, pc}
 8016d02:	bf00      	nop
 8016d04:	f3af 8000 	nop.w
 8016d08:	54442d18 	.word	0x54442d18
 8016d0c:	400921fb 	.word	0x400921fb
 8016d10:	54442d18 	.word	0x54442d18
 8016d14:	c00921fb 	.word	0xc00921fb
 8016d18:	402ccccd 	.word	0x402ccccd
 8016d1c:	3df1a9fc 	.word	0x3df1a9fc
 8016d20:	3e656042 	.word	0x3e656042
 8016d24:	3d449ba6 	.word	0x3d449ba6
 8016d28:	3f99999a 	.word	0x3f99999a
 8016d2c:	3de147ae 	.word	0x3de147ae
 8016d30:	3f9cac08 	.word	0x3f9cac08
 8016d34:	bc23d70a 	.word	0xbc23d70a

08016d38 <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
 8016d38:	b530      	push	{r4, r5, lr}
 8016d3a:	ed2d 8b04 	vpush	{d8-d9}
	_glottis* glot = *glo;
 8016d3e:	6804      	ldr	r4, [r0, #0]
{
 8016d40:	b083      	sub	sp, #12
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
 8016d42:	edd4 7a05 	vldr	s15, [r4, #20]
 8016d46:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34

    if(glot->time_in_waveform > glot->waveform_length) {
 8016d4a:	ed94 7a04 	vldr	s14, [r4, #16]
    glot->time_in_waveform += glot->T;
 8016d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
	LEAF* leaf = glot->mempool->leaf;
 8016d52:	6823      	ldr	r3, [r4, #0]
	_glottis* glot = *glo;
 8016d54:	9401      	str	r4, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
 8016d56:	685d      	ldr	r5, [r3, #4]
    if(glot->time_in_waveform > glot->waveform_length) {
 8016d58:	eef4 7ac7 	vcmpe.f32	s15, s14
    glot->time_in_waveform += glot->T;
 8016d5c:	edc4 7a05 	vstr	s15, [r4, #20]
    if(glot->time_in_waveform > glot->waveform_length) {
 8016d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d64:	dc4b      	bgt.n	8016dfe <glottis_compute+0xc6>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform / glot->waveform_length);
 8016d66:	eec7 8a87 	vdiv.f32	s17, s15, s14

    if(t > glot->Te) {
 8016d6a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8016d6e:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8016d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d76:	d52d      	bpl.n	8016dd4 <glottis_compute+0x9c>
        out = (-fasterexpf(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
 8016d78:	ee30 0a68 	vsub.f32	s0, s0, s17
 8016d7c:	edd4 7a08 	vldr	s15, [r4, #32]
 8016d80:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
 8016d84:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016d88:	f7fc fc90 	bl	80136ac <fasterexpf>
 8016d8c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8016d90:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8016d94:	ee80 8a27 	vdiv.f32	s16, s0, s15
    } else {
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
    }

    noise = (2.0f * leaf->random()) - 1.0f;
 8016d98:	692b      	ldr	r3, [r5, #16]
 8016d9a:	4798      	blx	r3
 8016d9c:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8016da0:	eeb0 7a40 	vmov.f32	s14, s0

    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
 8016da4:	ed94 0a02 	vldr	s0, [r4, #8]
    noise = (2.0f * leaf->random()) - 1.0f;
 8016da8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016dac:	eee7 8a27 	vfma.f32	s17, s14, s15
    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
 8016db0:	f7fc fc52 	bl	8013658 <fastsqrtf>
 8016db4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    aspiration *= 0.2f;

    out += aspiration;
 8016db8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8016e18 <glottis_compute+0xe0>
    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
 8016dbc:	ee37 0ac0 	vsub.f32	s0, s15, s0
    out += aspiration;
 8016dc0:	ee20 0a28 	vmul.f32	s0, s0, s17

    return out;
}
 8016dc4:	eea0 8a07 	vfma.f32	s16, s0, s14
 8016dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8016dcc:	b003      	add	sp, #12
 8016dce:	ecbd 8b04 	vpop	{d8-d9}
 8016dd2:	bd30      	pop	{r4, r5, pc}
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
 8016dd4:	ed94 0a06 	vldr	s0, [r4, #24]
 8016dd8:	ed94 9a07 	vldr	s18, [r4, #28]
 8016ddc:	ee28 0a80 	vmul.f32	s0, s17, s0
 8016de0:	f7fc fc64 	bl	80136ac <fasterexpf>
 8016de4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8016de8:	eeb0 8a40 	vmov.f32	s16, s0
 8016dec:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8016df0:	f7fc fc9e 	bl	8013730 <fast_sinf2>
 8016df4:	ee28 8a00 	vmul.f32	s16, s16, s0
 8016df8:	ee28 8a09 	vmul.f32	s16, s16, s18
 8016dfc:	e7cc      	b.n	8016d98 <glottis_compute+0x60>
        glot->time_in_waveform -= glot->waveform_length;
 8016dfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
        glottis_setup_waveform(&glot);
 8016e02:	a801      	add	r0, sp, #4
        glot->time_in_waveform -= glot->waveform_length;
 8016e04:	edc4 7a05 	vstr	s15, [r4, #20]
        glottis_setup_waveform(&glot);
 8016e08:	f7ff feda 	bl	8016bc0 <glottis_setup_waveform>
    t = (glot->time_in_waveform / glot->waveform_length);
 8016e0c:	9c01      	ldr	r4, [sp, #4]
 8016e0e:	edd4 7a05 	vldr	s15, [r4, #20]
 8016e12:	ed94 7a04 	vldr	s14, [r4, #16]
 8016e16:	e7a6      	b.n	8016d66 <glottis_compute+0x2e>
 8016e18:	3d75c290 	.word	0x3d75c290

08016e1c <tract_calculate_reflections>:
	mpool_free((char*)tr, tr->mempool);
}


void tract_calculate_reflections(tract* const t)
{
 8016e1c:	b500      	push	{lr}
	_tract* tr = *t;
 8016e1e:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++) {
 8016e20:	685a      	ldr	r2, [r3, #4]
 8016e22:	2a00      	cmp	r2, #0
 8016e24:	dd30      	ble.n	8016e88 <tract_calculate_reflections+0x6c>
 8016e26:	2200      	movs	r2, #0
        tr->A[i] = tr->diameter[i] * tr->diameter[i];
 8016e28:	68d8      	ldr	r0, [r3, #12]
 8016e2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8016e2c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8016e30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 8016e34:	3201      	adds	r2, #1
        tr->A[i] = tr->diameter[i] * tr->diameter[i];
 8016e36:	edd0 7a00 	vldr	s15, [r0]
 8016e3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016e3e:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 8016e42:	6859      	ldr	r1, [r3, #4]
 8016e44:	4291      	cmp	r1, r2
 8016e46:	dcef      	bgt.n	8016e28 <tract_calculate_reflections+0xc>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++) {
 8016e48:	2901      	cmp	r1, #1
 8016e4a:	dd1d      	ble.n	8016e88 <tract_calculate_reflections+0x6c>
 8016e4c:	2204      	movs	r2, #4
 8016e4e:	f04f 0c01 	mov.w	ip, #1
        tr->reflection[i] = tr->new_reflection[i];
        if(tr->A[i] == 0) {
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 8016e52:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 8016f24 <tract_calculate_reflections+0x108>
        tr->reflection[i] = tr->new_reflection[i];
 8016e56:	e9d3 1009 	ldrd	r1, r0, [r3, #36]	; 0x24
 8016e5a:	4410      	add	r0, r2
 8016e5c:	4411      	add	r1, r2
 8016e5e:	6800      	ldr	r0, [r0, #0]
 8016e60:	6008      	str	r0, [r1, #0]
        if(tr->A[i] == 0) {
 8016e62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8016e64:	4411      	add	r1, r2
 8016e66:	edd1 7a00 	vldr	s15, [r1]
 8016e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e72:	d143      	bne.n	8016efc <tract_calculate_reflections+0xe0>
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 8016e74:	6a99      	ldr	r1, [r3, #40]	; 0x28
    for(i = 1; i < tr->n; i++) {
 8016e76:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 8016e7a:	4411      	add	r1, r2
 8016e7c:	3204      	adds	r2, #4
 8016e7e:	f8c1 e000 	str.w	lr, [r1]
    for(i = 1; i < tr->n; i++) {
 8016e82:	6859      	ldr	r1, [r3, #4]
 8016e84:	4561      	cmp	r1, ip
 8016e86:	dce6      	bgt.n	8016e56 <tract_calculate_reflections+0x3a>
            tr->new_reflection[i] =
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
        }
    }

    tr->reflection_left = tr->new_reflection_left;
 8016e88:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    tr->reflection_right = tr->new_reflection_right;
    tr->reflection_nose = tr->new_reflection_nose;

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
    Lfloat invSum = 1.0f / sum;
 8016e8a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    tr->reflection_right = tr->new_reflection_right;
 8016e8e:	f8d3 c080 	ldr.w	ip, [r3, #128]	; 0x80
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 8016e92:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    tr->reflection_left = tr->new_reflection_left;
 8016e96:	6719      	str	r1, [r3, #112]	; 0x70
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8016e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    tr->reflection_nose = tr->new_reflection_nose;
 8016e9a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8016e9e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    tr->reflection_right = tr->new_reflection_right;
 8016ea0:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
    tr->reflection_nose = tr->new_reflection_nose;
 8016ea4:	6799      	str	r1, [r3, #120]	; 0x78
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8016ea6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8016eaa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016eac:	eddc 5a00 	vldr	s11, [ip]
 8016eb0:	edd1 7a00 	vldr	s15, [r1]
 8016eb4:	ed9c 7a01 	vldr	s14, [ip, #4]
 8016eb8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8016ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
    Lfloat invSum = 1.0f / sum;
 8016ec0:	ee86 7a27 	vdiv.f32	s14, s12, s15
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 8016ec4:	eeb0 6a67 	vmov.f32	s12, s15
 8016ec8:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 8016ecc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016ed0:	ed83 6a1f 	vstr	s12, [r3, #124]	; 0x7c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
 8016ed4:	eeb0 6a67 	vmov.f32	s12, s15
 8016ed8:	eddc 5a01 	vldr	s11, [ip, #4]
 8016edc:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 8016ee0:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016ee4:	ed83 6a20 	vstr	s12, [r3, #128]	; 0x80
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
 8016ee8:	ed91 6a00 	vldr	s12, [r1]
 8016eec:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8016ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016ef4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
}
 8016ef8:	f85d fb04 	ldr.w	pc, [sp], #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 8016efc:	ed11 7a01 	vldr	s14, [r1, #-4]
    for(i = 1; i < tr->n; i++) {
 8016f00:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] =
 8016f04:	6a99      	ldr	r1, [r3, #40]	; 0x28
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 8016f06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8016f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
            tr->new_reflection[i] =
 8016f0e:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++) {
 8016f10:	3204      	adds	r2, #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 8016f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            tr->new_reflection[i] =
 8016f16:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->n; i++) {
 8016f1a:	6859      	ldr	r1, [r3, #4]
 8016f1c:	4561      	cmp	r1, ip
 8016f1e:	dc9a      	bgt.n	8016e56 <tract_calculate_reflections+0x3a>
 8016f20:	e7b2      	b.n	8016e88 <tract_calculate_reflections+0x6c>
 8016f22:	bf00      	nop
 8016f24:	3f7fbe77 	.word	0x3f7fbe77

08016f28 <tract_initToPool>:
{
 8016f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f2c:	ed2d 8b04 	vpush	{d8-d9}
 8016f30:	ee08 1a10 	vmov	s16, r1
	_tMempool* m = *mp;
 8016f34:	681b      	ldr	r3, [r3, #0]
{
 8016f36:	b082      	sub	sp, #8
 8016f38:	4605      	mov	r5, r0
    Lfloat n = numTractSections;
 8016f3a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8016f3e:	4619      	mov	r1, r3
 8016f40:	20d4      	movs	r0, #212	; 0xd4
{
 8016f42:	4617      	mov	r7, r2
	_tMempool* m = *mp;
 8016f44:	9300      	str	r3, [sp, #0]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8016f46:	f7fd f813 	bl	8013f70 <mpool_calloc>
    tr->nose_length = n*0.636363636363636f; //28
 8016f4a:	eddf 3acc 	vldr	s7, [pc, #816]	; 801727c <tract_initToPool+0x354>
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8016f4e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    tr->tip_start = n*0.727272727272727f;
 8016f52:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8017280 <tract_initToPool+0x358>
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8016f56:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    tr->blade_start = n*0.227272727272727f;
 8016f5a:	eddf 7aca 	vldr	s15, [pc, #808]	; 8017284 <tract_initToPool+0x35c>
    tr->nose_length = n*0.636363636363636f; //28
 8016f5e:	ee68 3a23 	vmul.f32	s7, s16, s7
    tr->tip_start = n*0.727272727272727f;
 8016f62:	ee28 7a07 	vmul.f32	s14, s16, s14
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8016f66:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8017288 <tract_initToPool+0x360>
    tr->blade_start = n*0.227272727272727f;
 8016f6a:	ee68 7a27 	vmul.f32	s15, s16, s15
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8016f6e:	ed9f 5ac7 	vldr	s10, [pc, #796]	; 801728c <tract_initToPool+0x364>
    tr->nose_length = n*0.636363636363636f; //28
 8016f72:	eefd 3ae3 	vcvt.s32.f32	s7, s7
    tr->lip_start = n*0.886363636363636f;
 8016f76:	eddf 6ac6 	vldr	s13, [pc, #792]	; 8017290 <tract_initToPool+0x368>
    tr->tip_start = n*0.727272727272727f;
 8016f7a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	tr->mempool = m;
 8016f7e:	9b00      	ldr	r3, [sp, #0]
    tr->blade_start = n*0.227272727272727f;
 8016f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8016f84:	6028      	str	r0, [r5, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8016f86:	eeb8 2ae3 	vcvt.f32.s32	s4, s7
	tr->mempool = m;
 8016f8a:	6003      	str	r3, [r0, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8016f8c:	ee38 6a03 	vadd.f32	s12, s16, s6
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8016f90:	4604      	mov	r4, r0
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8016f92:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
    tr->reflection_left = 0.0f;
 8016f96:	2300      	movs	r3, #0
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8016f98:	eef8 4ae7 	vcvt.f32.s32	s9, s15
    tr->glottal_reflection = 0.75f;
 8016f9c:	f04f 5e7d 	mov.w	lr, #1061158912	; 0x3f400000
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8016fa0:	ee36 6a42 	vsub.f32	s12, s12, s4
    tr->lip_reflection = -0.85f;
 8016fa4:	f8df c31c 	ldr.w	ip, [pc, #796]	; 80172c4 <tract_initToPool+0x39c>
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8016fa8:	eea8 4a61 	vfms.f32	s8, s16, s3
    tr->movement_speed = 200.0f;
 8016fac:	4ab9      	ldr	r2, [pc, #740]	; (8017294 <tract_initToPool+0x36c>)
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8016fae:	eee8 4a05 	vfma.f32	s9, s16, s10
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8016fb2:	ed9f 5ab9 	vldr	s10, [pc, #740]	; 8017298 <tract_initToPool+0x370>
    tr->lip_start = n*0.886363636363636f;
 8016fb6:	ee68 6a26 	vmul.f32	s13, s16, s13
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016fba:	00be      	lsls	r6, r7, #2
    tr->n = n; //44
 8016fbc:	eefd 2ac8 	vcvt.s32.f32	s5, s16
	LEAF* leaf = m->leaf;
 8016fc0:	9900      	ldr	r1, [sp, #0]
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8016fc2:	ee68 5a25 	vmul.f32	s11, s16, s11
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8016fc6:	9001      	str	r0, [sp, #4]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8016fc8:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->last_obstruction = -1;
 8016fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    tr->lip_start = n*0.886363636363636f;
 8016fd0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->velum_target = 0.01f;
 8016fd4:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 80172c8 <tract_initToPool+0x3a0>
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8016fd8:	ee28 5a05 	vmul.f32	s10, s16, s10
	LEAF* leaf = m->leaf;
 8016fdc:	684d      	ldr	r5, [r1, #4]
	tr->turbuluencePointDiameter[0] = 1.5f;
 8016fde:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8016fe2:	ed84 6a0f 	vstr	s12, [r4, #60]	; 0x3c
    Lfloat invN = 1.0f / tr->n;
 8016fe6:	eef8 1ae2 	vcvt.f32.s32	s3, s5
    tr->glottal_reflection = 0.75f;
 8016fea:	f8c4 e08c 	str.w	lr, [r4, #140]	; 0x8c
    tr->lip_reflection = -0.85f;
 8016fee:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8016ff2:	ee83 9a02 	vdiv.f32	s18, s6, s4
    tr->movement_speed = 200.0f;
 8016ff6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    tr->lip_start = n*0.886363636363636f;
 8016ffa:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
    tr->n = n; //44
 8016ffe:	edc4 2a01 	vstr	s5, [r4, #4]
    tr->nose_length = n*0.636363636363636f; //28
 8017002:	edc4 3a0e 	vstr	s7, [r4, #56]	; 0x38
    tr->tip_start = n*0.727272727272727f;
 8017006:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    Lfloat invN = 1.0f / tr->n;
 801700a:	eec3 8a21 	vdiv.f32	s17, s6, s3
    tr->blade_start = n*0.227272727272727f;
 801700e:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017012:	ed84 4a13 	vstr	s8, [r4, #76]	; 0x4c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017016:	edc4 4a14 	vstr	s9, [r4, #80]	; 0x50
	tr->turbuluencePointPosition[0] = n* 0.45f;
 801701a:	ed84 5a2f 	vstr	s10, [r4, #188]	; 0xbc
	tr->turbuluencePointPosition[1] = n* 0.5f;
 801701e:	edc4 5a30 	vstr	s11, [r4, #192]	; 0xc0
    tr->reflection_left = 0.0f;
 8017022:	6723      	str	r3, [r4, #112]	; 0x70
    tr->reflection_right = 0.0f;
 8017024:	6763      	str	r3, [r4, #116]	; 0x74
    tr->reflection_nose = 0.0f;
 8017026:	67a3      	str	r3, [r4, #120]	; 0x78
    tr->new_reflection_left = 0.0f;
 8017028:	67e3      	str	r3, [r4, #124]	; 0x7c
    tr->new_reflection_right= 0.0f;
 801702a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    tr->new_reflection_nose = 0.0f;
 801702e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tr->lip_output = 0.0f;
 8017032:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    tr->nose_output = 0.0f;
 8017036:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    tr->maxNumTractSections = maxNumTractSections;
 801703a:	60a7      	str	r7, [r4, #8]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801703c:	1d37      	adds	r7, r6, #4
    tr->last_obstruction = -1;
 801703e:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017042:	4630      	mov	r0, r6
    tr->velum_target = 0.01f;
 8017044:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
	tr->turbuluencePointDiameter[0] = 1.5f;
 8017048:	edc4 9a31 	vstr	s19, [r4, #196]	; 0xc4
	tr->turbuluencePointDiameter[1] = 1.5f;
 801704c:	edc4 9a32 	vstr	s19, [r4, #200]	; 0xc8
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017050:	f7fc ff8e 	bl	8013f70 <mpool_calloc>
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017054:	9900      	ldr	r1, [sp, #0]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017056:	60e0      	str	r0, [r4, #12]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017058:	4630      	mov	r0, r6
 801705a:	f7fc ff89 	bl	8013f70 <mpool_calloc>
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801705e:	9900      	ldr	r1, [sp, #0]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017060:	6120      	str	r0, [r4, #16]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017062:	4630      	mov	r0, r6
 8017064:	f7fc ff84 	bl	8013f70 <mpool_calloc>
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017068:	9900      	ldr	r1, [sp, #0]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801706a:	6160      	str	r0, [r4, #20]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801706c:	4630      	mov	r0, r6
 801706e:	f7fc ff7f 	bl	8013f70 <mpool_calloc>
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017072:	9900      	ldr	r1, [sp, #0]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017074:	61a0      	str	r0, [r4, #24]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017076:	4630      	mov	r0, r6
 8017078:	f7fc ff7a 	bl	8013f70 <mpool_calloc>
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801707c:	9900      	ldr	r1, [sp, #0]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801707e:	6220      	str	r0, [r4, #32]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017080:	4630      	mov	r0, r6
 8017082:	f7fc ff75 	bl	8013f70 <mpool_calloc>
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017086:	9900      	ldr	r1, [sp, #0]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017088:	61e0      	str	r0, [r4, #28]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801708a:	4638      	mov	r0, r7
 801708c:	f7fc ff70 	bl	8013f70 <mpool_calloc>
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017090:	9900      	ldr	r1, [sp, #0]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017092:	6260      	str	r0, [r4, #36]	; 0x24
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017094:	4638      	mov	r0, r7
 8017096:	f7fc ff6b 	bl	8013f70 <mpool_calloc>
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801709a:	9900      	ldr	r1, [sp, #0]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801709c:	62a0      	str	r0, [r4, #40]	; 0x28
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801709e:	4638      	mov	r0, r7
 80170a0:	f7fc ff66 	bl	8013f70 <mpool_calloc>
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170a4:	9900      	ldr	r1, [sp, #0]
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170a6:	62e0      	str	r0, [r4, #44]	; 0x2c
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170a8:	4638      	mov	r0, r7
 80170aa:	f7fc ff61 	bl	8013f70 <mpool_calloc>
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170ae:	9900      	ldr	r1, [sp, #0]
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170b0:	6320      	str	r0, [r4, #48]	; 0x30
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170b2:	4630      	mov	r0, r6
 80170b4:	f7fc ff5c 	bl	8013f70 <mpool_calloc>
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170b8:	9900      	ldr	r1, [sp, #0]
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170ba:	6360      	str	r0, [r4, #52]	; 0x34
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170bc:	4630      	mov	r0, r6
 80170be:	f7fc ff57 	bl	8013f70 <mpool_calloc>
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170c2:	9900      	ldr	r1, [sp, #0]
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170c4:	6560      	str	r0, [r4, #84]	; 0x54
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170c6:	4630      	mov	r0, r6
 80170c8:	f7fc ff52 	bl	8013f70 <mpool_calloc>
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170cc:	9900      	ldr	r1, [sp, #0]
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170ce:	65a0      	str	r0, [r4, #88]	; 0x58
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170d0:	4638      	mov	r0, r7
 80170d2:	f7fc ff4d 	bl	8013f70 <mpool_calloc>
 80170d6:	4603      	mov	r3, r0
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170d8:	9900      	ldr	r1, [sp, #0]
 80170da:	4638      	mov	r0, r7
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170dc:	65e3      	str	r3, [r4, #92]	; 0x5c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170de:	f7fc ff47 	bl	8013f70 <mpool_calloc>
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170e2:	9900      	ldr	r1, [sp, #0]
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80170e4:	6620      	str	r0, [r4, #96]	; 0x60
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170e6:	4630      	mov	r0, r6
 80170e8:	f7fc ff42 	bl	8013f70 <mpool_calloc>
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170ec:	9900      	ldr	r1, [sp, #0]
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170ee:	66a0      	str	r0, [r4, #104]	; 0x68
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170f0:	4630      	mov	r0, r6
 80170f2:	f7fc ff3d 	bl	8013f70 <mpool_calloc>
 80170f6:	4603      	mov	r3, r0
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170f8:	9900      	ldr	r1, [sp, #0]
 80170fa:	4630      	mov	r0, r6
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170fc:	6663      	str	r3, [r4, #100]	; 0x64
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80170fe:	f7fc ff37 	bl	8013f70 <mpool_calloc>
    for(i = 0; i < tr->n; i++) {
 8017102:	6863      	ldr	r3, [r4, #4]
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017104:	66e0      	str	r0, [r4, #108]	; 0x6c
    for(i = 0; i < tr->n; i++) {
 8017106:	2b00      	cmp	r3, #0
 8017108:	dd43      	ble.n	8017192 <tract_initToPool+0x26a>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 801710a:	eebe 4a00 	vmov.f32	s8, #224	; 0xbf000000 -0.5
    for(i = 0; i < tr->n; i++) {
 801710e:	2200      	movs	r2, #0
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017110:	eddf 4a62 	vldr	s9, [pc, #392]	; 801729c <tract_initToPool+0x374>
            diameter = 0.6f;
 8017114:	ed9f 5a62 	vldr	s10, [pc, #392]	; 80172a0 <tract_initToPool+0x378>
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 8017118:	eddf 5a62 	vldr	s11, [pc, #392]	; 80172a4 <tract_initToPool+0x37c>
            diameter = 1.1f;
 801711c:	eddf 3a62 	vldr	s7, [pc, #392]	; 80172a8 <tract_initToPool+0x380>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017120:	ee07 3a90 	vmov	s15, r3
 8017124:	eef0 6a44 	vmov.f32	s13, s8
            diameter = 0.6f;
 8017128:	eeb0 7a45 	vmov.f32	s14, s10
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 801712c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017130:	ee27 6aa4 	vmul.f32	s12, s15, s9
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 8017134:	ee67 7aa5 	vmul.f32	s15, s15, s11
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017138:	ee26 6a08 	vmul.f32	s12, s12, s16
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 801713c:	ee67 7a88 	vmul.f32	s15, s15, s16
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017140:	eee8 6a86 	vfma.f32	s13, s17, s12
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 8017144:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 801714c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017150:	ee16 3a90 	vmov	r3, s13
 8017154:	4293      	cmp	r3, r2
 8017156:	dc04      	bgt.n	8017162 <tract_initToPool+0x23a>
            diameter = 1.1f;
 8017158:	ee17 3a90 	vmov	r3, s15
 801715c:	4293      	cmp	r3, r2
 801715e:	fe33 7aa9 	vselgt.f32	s14, s7, s19
            tr->new_diameter[i] = diameter;
 8017162:	69a3      	ldr	r3, [r4, #24]
 8017164:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017168:	ed83 7a00 	vstr	s14, [r3]
            tr->target_diameter[i] =
 801716c:	6963      	ldr	r3, [r4, #20]
 801716e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017172:	ed83 7a00 	vstr	s14, [r3]
            tr->rest_diameter[i] =
 8017176:	6923      	ldr	r3, [r4, #16]
 8017178:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801717c:	ed83 7a00 	vstr	s14, [r3]
        tr->diameter[i] =
 8017180:	68e3      	ldr	r3, [r4, #12]
 8017182:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 8017186:	3201      	adds	r2, #1
        tr->diameter[i] =
 8017188:	ed83 7a00 	vstr	s14, [r3]
    for(i = 0; i < tr->n; i++) {
 801718c:	6863      	ldr	r3, [r4, #4]
 801718e:	4293      	cmp	r3, r2
 8017190:	dcc6      	bgt.n	8017120 <tract_initToPool+0x1f8>
	for(i = 0; i < tr->nose_length; i++) {
 8017192:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017194:	2b00      	cmp	r3, #0
 8017196:	dd2f      	ble.n	80171f8 <tract_initToPool+0x2d0>
		if(d < 1.0f) {
 8017198:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	for(i = 0; i < tr->nose_length; i++) {
 801719c:	2300      	movs	r3, #0
			diameter = 0.5f + 1.5f*(2.0f-d);
 801719e:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
		diameter = MIN(diameter, 1.9f);
 80171a2:	ed9f 4a42 	vldr	s8, [pc, #264]	; 80172ac <tract_initToPool+0x384>
			diameter = 0.5f + 1.5f*(2.0f-d);
 80171a6:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
			diameter = 0.4f + 1.6f * d;
 80171aa:	eddf 4a41 	vldr	s9, [pc, #260]	; 80172b0 <tract_initToPool+0x388>
 80171ae:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80172b4 <tract_initToPool+0x38c>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 80171b2:	ee07 3a90 	vmov	s15, r3
			diameter = 0.4f + 1.6f * d;
 80171b6:	eef0 6a45 	vmov.f32	s13, s10
		tr->nose_diameter[i] = diameter;
 80171ba:	6ea2      	ldr	r2, [r4, #104]	; 0x68
		d = 2.0f * ((Lfloat)i * invNoseLength);
 80171bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171c0:	ee67 7a89 	vmul.f32	s15, s15, s18
 80171c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
 80171c8:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
 80171cc:	eef0 7a46 	vmov.f32	s15, s12
 80171d0:	ee73 5a47 	vsub.f32	s11, s6, s14
		if(d < 1.0f) {
 80171d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
 80171d8:	eee7 6a24 	vfma.f32	s13, s14, s9
			diameter = 0.5f + 1.5f*(2.0f-d);
 80171dc:	eee5 7aa3 	vfma.f32	s15, s11, s7
		if(d < 1.0f) {
 80171e0:	f140 80e0 	bpl.w	80173a4 <tract_initToPool+0x47c>
		tr->nose_diameter[i] = diameter;
 80171e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
 80171e8:	fec6 6ac4 	vminnm.f32	s13, s13, s8
	for(i = 0; i < tr->nose_length; i++) {
 80171ec:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
 80171ee:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 80171f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80171f4:	429a      	cmp	r2, r3
 80171f6:	dcdc      	bgt.n	80171b2 <tract_initToPool+0x28a>
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.5f, &m);
 80171f8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80171fc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8017200:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80172b8 <tract_initToPool+0x390>
 8017204:	2102      	movs	r1, #2
 8017206:	466a      	mov	r2, sp
 8017208:	f7fa f840 	bl	801128c <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.5f, &m);
 801720c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8017210:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8017214:	466a      	mov	r2, sp
 8017216:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80172bc <tract_initToPool+0x394>
 801721a:	2102      	movs	r1, #2
 801721c:	f7fa f836 	bl	801128c <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.5f, &m);
 8017220:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8017224:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8017228:	466a      	mov	r2, sp
 801722a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80172c0 <tract_initToPool+0x398>
 801722e:	2102      	movs	r1, #2
 8017230:	f7fa f82c 	bl	801128c <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
 8017234:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8017238:	466a      	mov	r2, sp
 801723a:	2100      	movs	r1, #0
 801723c:	f7fd fb58 	bl	80148f0 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
 8017240:	a801      	add	r0, sp, #4
 8017242:	f7ff fdeb 	bl	8016e1c <tract_calculate_reflections>

}

void tract_calculate_nose_reflections(tract* const t)
{
	_tract* tr = *t;
 8017246:	9c01      	ldr	r4, [sp, #4]
	int i;

    for(i = 0; i < tr->nose_length; i++) {
 8017248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801724a:	2b00      	cmp	r3, #0
 801724c:	dd59      	ble.n	8017302 <tract_initToPool+0x3da>
 801724e:	2300      	movs	r3, #0
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 8017250:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8017254:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8017258:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for(i = 0; i < tr->nose_length; i++) {
 801725c:	3301      	adds	r3, #1
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 801725e:	edd1 7a00 	vldr	s15, [r1]
 8017262:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017266:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->nose_length; i++) {
 801726a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801726c:	4293      	cmp	r3, r2
 801726e:	dbef      	blt.n	8017250 <tract_initToPool+0x328>
    }

    for(i = 1; i < tr->nose_length; i++) {
 8017270:	2a01      	cmp	r2, #1
 8017272:	dd46      	ble.n	8017302 <tract_initToPool+0x3da>
 8017274:	2000      	movs	r0, #0
 8017276:	2301      	movs	r3, #1
 8017278:	e02a      	b.n	80172d0 <tract_initToPool+0x3a8>
 801727a:	bf00      	nop
 801727c:	3f22e8ba 	.word	0x3f22e8ba
 8017280:	3f3a2e8c 	.word	0x3f3a2e8c
 8017284:	3e68ba2f 	.word	0x3e68ba2f
 8017288:	3d8ba2e9 	.word	0x3d8ba2e9
 801728c:	3d3a2e8c 	.word	0x3d3a2e8c
 8017290:	3f62e8ba 	.word	0x3f62e8ba
 8017294:	43480000 	.word	0x43480000
 8017298:	3ee66666 	.word	0x3ee66666
 801729c:	3e22e8ba 	.word	0x3e22e8ba
 80172a0:	3f19999a 	.word	0x3f19999a
 80172a4:	3e8ba2e9 	.word	0x3e8ba2e9
 80172a8:	3f8ccccd 	.word	0x3f8ccccd
 80172ac:	3ff33333 	.word	0x3ff33333
 80172b0:	3fcccccd 	.word	0x3fcccccd
 80172b4:	3ecccccd 	.word	0x3ecccccd
 80172b8:	447c8000 	.word	0x447c8000
 80172bc:	44778000 	.word	0x44778000
 80172c0:	43fa0000 	.word	0x43fa0000
 80172c4:	bf59999a 	.word	0xbf59999a
 80172c8:	3c23d70a 	.word	0x3c23d70a
 80172cc:	42800000 	.word	0x42800000
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 80172d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80172d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80172d4:	eb02 0c00 	add.w	ip, r2, r0
 80172d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80172dc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    for(i = 1; i < tr->nose_length; i++) {
 80172e0:	3301      	adds	r3, #1
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 80172e2:	ed92 7a00 	vldr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 80172e6:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 80172e8:	eddc 7a00 	vldr	s15, [ip]
 80172ec:	ee77 6ac7 	vsub.f32	s13, s15, s14
            (tr->noseA[i-1] + tr->noseA[i]);
 80172f0:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 80172f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80172f8:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 80172fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80172fe:	4293      	cmp	r3, r2
 8017300:	dbe6      	blt.n	80172d0 <tract_initToPool+0x3a8>
    tr->nose_diameter[0] = tr->velum_target;
 8017302:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    tr->T = 1.0f / leaf->sampleRate;
 8017304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    tr->nose_diameter[0] = tr->velum_target;
 8017308:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 801730c:	201c      	movs	r0, #28
    tr->block_time = 64.0f / leaf->sampleRate;
 801730e:	ed1f 6a11 	vldr	s12, [pc, #-68]	; 80172cc <tract_initToPool+0x3a4>
        tr->tpool->pool[i]->is_free = 1;
 8017312:	2701      	movs	r7, #1
    tr->nose_diameter[0] = tr->velum_target;
 8017314:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8017316:	2600      	movs	r6, #0
    tr->block_time = 64.0f / leaf->sampleRate;
 8017318:	ed95 7a00 	vldr	s14, [r5]
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 801731c:	9900      	ldr	r1, [sp, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 801731e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8017322:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    tr->T = 1.0f / leaf->sampleRate;
 8017326:	ed95 7a00 	vldr	s14, [r5]
 801732a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801732e:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017332:	f7fc fdb9 	bl	8013ea8 <mpool_alloc>
    tr->tpool->size = 0;
 8017336:	2300      	movs	r3, #0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017338:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 801733c:	461d      	mov	r5, r3
    tr->tpool->size = 0;
 801733e:	6143      	str	r3, [r0, #20]
    tr->tpool->next_free = 0;
 8017340:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 8017344:	6193      	str	r3, [r2, #24]
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
 8017346:	f8d4 80cc 	ldr.w	r8, [r4, #204]	; 0xcc
 801734a:	2020      	movs	r0, #32
 801734c:	9900      	ldr	r1, [sp, #0]
 801734e:	f7fc fdab 	bl	8013ea8 <mpool_alloc>
 8017352:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
 8017356:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
        tr->tpool->pool[i]->position = 0;
 801735a:	2200      	movs	r2, #0
        tr->tpool->pool[i]->is_free = 1;
 801735c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017360:	751f      	strb	r7, [r3, #20]
        tr->tpool->pool[i]->id = i;
 8017362:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8017366:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801736a:	619d      	str	r5, [r3, #24]
        tr->tpool->pool[i]->position = 0;
 801736c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8017370:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017374:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8017376:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 801737a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801737e:	605e      	str	r6, [r3, #4]
        tr->tpool->pool[i]->strength = 0;
 8017380:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8017384:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017388:	60de      	str	r6, [r3, #12]
        tr->tpool->pool[i]->exponent = 0;
 801738a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 801738e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8017392:	3501      	adds	r5, #1
 8017394:	2d04      	cmp	r5, #4
        tr->tpool->pool[i]->exponent = 0;
 8017396:	611e      	str	r6, [r3, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8017398:	d1d5      	bne.n	8017346 <tract_initToPool+0x41e>
}
 801739a:	b002      	add	sp, #8
 801739c:	ecbd 8b04 	vpop	{d8-d9}
 80173a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tr->nose_diameter[i] = diameter;
 80173a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
 80173a8:	fec7 7ac4 	vminnm.f32	s15, s15, s8
	for(i = 0; i < tr->nose_length; i++) {
 80173ac:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
 80173ae:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 80173b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80173b4:	429a      	cmp	r2, r3
 80173b6:	f73f aefc 	bgt.w	80171b2 <tract_initToPool+0x28a>
 80173ba:	e71d      	b.n	80171f8 <tract_initToPool+0x2d0>

080173bc <tract_newLength>:
	_tract* tr = *t;
 80173bc:	6803      	ldr	r3, [r0, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80173be:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    tr->tip_start = n*0.727272727272727f;
 80173c2:	eddf 6a86 	vldr	s13, [pc, #536]	; 80175dc <tract_newLength+0x220>
    tr->reflection_left = 0.0f;
 80173c6:	2000      	movs	r0, #0
    if (numTractSections < tr->maxNumTractSections)
 80173c8:	689a      	ldr	r2, [r3, #8]
	tr->turbuluencePointDiameter[0] = 1.5f;
 80173ca:	eef7 2a08 	vmov.f32	s5, #120	; 0x3fc00000  1.5
    tr->blade_start = n*0.227272727272727f;
 80173ce:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80175e0 <tract_newLength+0x224>
    tr->glottal_reflection = 0.75f;
 80173d2:	f04f 5c7d 	mov.w	ip, #1061158912	; 0x3f400000
    if (numTractSections < tr->maxNumTractSections)
 80173d6:	428a      	cmp	r2, r1
    tr->lip_start = n*0.886363636363636f;
 80173d8:	ed9f 6a82 	vldr	s12, [pc, #520]	; 80175e4 <tract_newLength+0x228>
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 80173dc:	ed9f 1a82 	vldr	s2, [pc, #520]	; 80175e8 <tract_newLength+0x22c>
    	n = numTractSections;
 80173e0:	bfcc      	ite	gt
 80173e2:	ee07 1a90 	vmovgt	s15, r1
    	n = tr->maxNumTractSections;
 80173e6:	ee07 2a90 	vmovle	s15, r2
    tr->reflection_left = 0.0f;
 80173ea:	6718      	str	r0, [r3, #112]	; 0x70
    	n = tr->maxNumTractSections;
 80173ec:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tr->nose_length = n*0.636363636363636f; //28
 80173f0:	eddf 7a7e 	vldr	s15, [pc, #504]	; 80175ec <tract_newLength+0x230>
    tr->reflection_right = 0.0f;
 80173f4:	6758      	str	r0, [r3, #116]	; 0x74
    tr->reflection_nose = 0.0f;
 80173f6:	6798      	str	r0, [r3, #120]	; 0x78
    tr->nose_length = n*0.636363636363636f; //28
 80173f8:	ee65 7aa7 	vmul.f32	s15, s11, s15
    tr->new_reflection_left = 0.0f;
 80173fc:	67d8      	str	r0, [r3, #124]	; 0x7c
    tr->tip_start = n*0.727272727272727f;
 80173fe:	ee65 6aa6 	vmul.f32	s13, s11, s13
    tr->new_reflection_right= 0.0f;
 8017402:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    tr->blade_start = n*0.227272727272727f;
 8017406:	ee25 7a87 	vmul.f32	s14, s11, s14
    tr->new_reflection_nose = 0.0f;
 801740a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    tr->nose_length = n*0.636363636363636f; //28
 801740e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    tr->lip_output = 0.0f;
 8017412:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
    tr->n = n; //44
 8017416:	eefd 4ae5 	vcvt.s32.f32	s9, s11
    tr->nose_output = 0.0f;
 801741a:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
    tr->tip_start = n*0.727272727272727f;
 801741e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->lip_reflection = -0.85f;
 8017422:	4873      	ldr	r0, [pc, #460]	; (80175f0 <tract_newLength+0x234>)
    tr->nose_length = n*0.636363636363636f; //28
 8017424:	ee17 2a90 	vmov	r2, s15
    tr->blade_start = n*0.227272727272727f;
 8017428:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    tr->n = n; //44
 801742c:	ee14 1a90 	vmov	r1, s9
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017430:	ee35 5aa1 	vadd.f32	s10, s11, s3
 8017434:	ee04 2a90 	vmov	s9, r2
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017438:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801743c:	eef8 3ac7 	vcvt.f32.s32	s7, s14
 8017440:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80175f4 <tract_newLength+0x238>
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017444:	eeb8 2ae4 	vcvt.f32.s32	s4, s9
    tr->lip_reflection = -0.85f;
 8017448:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 801744c:	eea5 3ac1 	vfms.f32	s6, s11, s2
    tr->last_obstruction = -1;
 8017450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017454:	eee5 3aa7 	vfma.f32	s7, s11, s15
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017458:	ed9f 4a67 	vldr	s8, [pc, #412]	; 80175f8 <tract_newLength+0x23c>
    tr->lip_start = n*0.886363636363636f;
 801745c:	ee25 6a86 	vmul.f32	s12, s11, s12
    Lfloat invN = 1.0f / tr->n;
 8017460:	ee07 1a90 	vmov	s15, r1
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017464:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    tr->last_obstruction = -1;
 8017468:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    tr->nose_start = (n - tr->nose_length) + 1; //17
 801746c:	ee35 5a42 	vsub.f32	s10, s10, s4
    tr->movement_speed = 200.0f;
 8017470:	4862      	ldr	r0, [pc, #392]	; (80175fc <tract_newLength+0x240>)
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017472:	ee25 4a84 	vmul.f32	s8, s11, s8
    for(i = 0; i < tr->n; i++) {
 8017476:	2900      	cmp	r1, #0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017478:	ee65 4aa4 	vmul.f32	s9, s11, s9
    tr->movement_speed = 200.0f;
 801747c:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017480:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->velum_target = 0.01f;
 8017484:	485e      	ldr	r0, [pc, #376]	; (8017600 <tract_newLength+0x244>)
    Lfloat invN = 1.0f / tr->n;
 8017486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tr->n = n; //44
 801748a:	6059      	str	r1, [r3, #4]
    tr->lip_start = n*0.886363636363636f;
 801748c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->nose_length = n*0.636363636363636f; //28
 8017490:	639a      	str	r2, [r3, #56]	; 0x38
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017492:	ed83 5a0f 	vstr	s10, [r3, #60]	; 0x3c
    tr->tip_start = n*0.727272727272727f;
 8017496:	edc3 6a10 	vstr	s13, [r3, #64]	; 0x40
    Lfloat invN = 1.0f / tr->n;
 801749a:	ee81 5aa7 	vdiv.f32	s10, s3, s15
    tr->blade_start = n*0.227272727272727f;
 801749e:	ed83 7a11 	vstr	s14, [r3, #68]	; 0x44
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 80174a2:	ed83 3a13 	vstr	s6, [r3, #76]	; 0x4c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 80174a6:	edc3 3a14 	vstr	s7, [r3, #80]	; 0x50
    tr->lip_start = n*0.886363636363636f;
 80174aa:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	tr->turbuluencePointPosition[0] = n* 0.45f;
 80174ae:	ed83 4a2f 	vstr	s8, [r3, #188]	; 0xbc
	tr->turbuluencePointPosition[1] = n* 0.5f;
 80174b2:	edc3 4a30 	vstr	s9, [r3, #192]	; 0xc0
	tr->turbuluencePointDiameter[0] = 1.5f;
 80174b6:	edc3 2a31 	vstr	s5, [r3, #196]	; 0xc4
	tr->turbuluencePointDiameter[1] = 1.5f;
 80174ba:	edc3 2a32 	vstr	s5, [r3, #200]	; 0xc8
    tr->glottal_reflection = 0.75f;
 80174be:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
    tr->velum_target = 0.01f;
 80174c2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    for(i = 0; i < tr->n; i++) {
 80174c6:	dd48      	ble.n	801755a <tract_newLength+0x19e>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80174c8:	eebe 3a00 	vmov.f32	s6, #224	; 0xbf000000 -0.5
    for(i = 0; i < tr->n; i++) {
 80174cc:	2200      	movs	r2, #0
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80174ce:	eddf 3a4d 	vldr	s7, [pc, #308]	; 8017604 <tract_newLength+0x248>
            diameter = 0.6f;
 80174d2:	ed9f 4a4d 	vldr	s8, [pc, #308]	; 8017608 <tract_newLength+0x24c>
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 80174d6:	eddf 4a4d 	vldr	s9, [pc, #308]	; 801760c <tract_newLength+0x250>
            diameter = 1.1f;
 80174da:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 8017610 <tract_newLength+0x254>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80174de:	ee27 6aa3 	vmul.f32	s12, s15, s7
 80174e2:	eef0 6a43 	vmov.f32	s13, s6
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 80174e6:	ee67 7aa4 	vmul.f32	s15, s15, s9
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80174ea:	ee26 6a25 	vmul.f32	s12, s12, s11
            diameter = 0.6f;
 80174ee:	eeb0 7a44 	vmov.f32	s14, s8
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 80174f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80174f6:	eee5 6a06 	vfma.f32	s13, s10, s12
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 80174fa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80174fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017502:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017506:	ee16 1a90 	vmov	r1, s13
 801750a:	4291      	cmp	r1, r2
 801750c:	dc04      	bgt.n	8017518 <tract_newLength+0x15c>
            diameter = 1.1f;
 801750e:	ee17 1a90 	vmov	r1, s15
 8017512:	4291      	cmp	r1, r2
 8017514:	fe32 7a22 	vselgt.f32	s14, s4, s5
            tr->new_diameter[i] = diameter;
 8017518:	6999      	ldr	r1, [r3, #24]
 801751a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801751e:	ed81 7a00 	vstr	s14, [r1]
            tr->target_diameter[i] =
 8017522:	6959      	ldr	r1, [r3, #20]
 8017524:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017528:	ed81 7a00 	vstr	s14, [r1]
            tr->rest_diameter[i] =
 801752c:	6919      	ldr	r1, [r3, #16]
 801752e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017532:	ed81 7a00 	vstr	s14, [r1]
        tr->diameter[i] =
 8017536:	68d9      	ldr	r1, [r3, #12]
 8017538:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 801753c:	3201      	adds	r2, #1
        tr->diameter[i] =
 801753e:	ed81 7a00 	vstr	s14, [r1]
    for(i = 0; i < tr->n; i++) {
 8017542:	6859      	ldr	r1, [r3, #4]
 8017544:	ee07 1a90 	vmov	s15, r1
 8017548:	4291      	cmp	r1, r2
 801754a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801754e:	dcc6      	bgt.n	80174de <tract_newLength+0x122>
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8017550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017552:	ee07 2a90 	vmov	s15, r2
 8017556:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 801755a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	for(i = 0; i < tr->nose_length; i++) {
 801755e:	2a00      	cmp	r2, #0
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8017560:	ee87 5a82 	vdiv.f32	s10, s15, s4
	for(i = 0; i < tr->nose_length; i++) {
 8017564:	dd39      	ble.n	80175da <tract_newLength+0x21e>
 8017566:	2200      	movs	r2, #0
		diameter = MIN(diameter, 1.9f);
 8017568:	eddf 3a2a 	vldr	s7, [pc, #168]	; 8017614 <tract_newLength+0x258>
			diameter = 0.4f + 1.6f * d;
 801756c:	ed9f 4a2a 	vldr	s8, [pc, #168]	; 8017618 <tract_newLength+0x25c>
 8017570:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801761c <tract_newLength+0x260>
		if(d < 1.0f) {
 8017574:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017578:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 801757c:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8017580:	ee07 2a90 	vmov	s15, r2
			diameter = 0.4f + 1.6f * d;
 8017584:	eef0 6a64 	vmov.f32	s13, s9
		tr->nose_diameter[i] = diameter;
 8017588:	6e99      	ldr	r1, [r3, #104]	; 0x68
		d = 2.0f * ((Lfloat)i * invNoseLength);
 801758a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801758e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017592:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
 8017596:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
 801759a:	eef0 7a46 	vmov.f32	s15, s12
 801759e:	ee72 5ac7 	vsub.f32	s11, s5, s14
		if(d < 1.0f) {
 80175a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
 80175a6:	eee7 6a04 	vfma.f32	s13, s14, s8
			diameter = 0.5f + 1.5f*(2.0f-d);
 80175aa:	eee5 7a83 	vfma.f32	s15, s11, s6
		if(d < 1.0f) {
 80175ae:	d50a      	bpl.n	80175c6 <tract_newLength+0x20a>
		tr->nose_diameter[i] = diameter;
 80175b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		diameter = MIN(diameter, 1.9f);
 80175b4:	fec6 6ae3 	vminnm.f32	s13, s13, s7
	for(i = 0; i < tr->nose_length; i++) {
 80175b8:	3201      	adds	r2, #1
		tr->nose_diameter[i] = diameter;
 80175ba:	edc1 6a00 	vstr	s13, [r1]
	for(i = 0; i < tr->nose_length; i++) {
 80175be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80175c0:	4291      	cmp	r1, r2
 80175c2:	dcdd      	bgt.n	8017580 <tract_newLength+0x1c4>
 80175c4:	4770      	bx	lr
		tr->nose_diameter[i] = diameter;
 80175c6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		diameter = MIN(diameter, 1.9f);
 80175ca:	fec7 7ae3 	vminnm.f32	s15, s15, s7
	for(i = 0; i < tr->nose_length; i++) {
 80175ce:	3201      	adds	r2, #1
		tr->nose_diameter[i] = diameter;
 80175d0:	edc1 7a00 	vstr	s15, [r1]
	for(i = 0; i < tr->nose_length; i++) {
 80175d4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80175d6:	428a      	cmp	r2, r1
 80175d8:	dbd2      	blt.n	8017580 <tract_newLength+0x1c4>
}
 80175da:	4770      	bx	lr
 80175dc:	3f3a2e8c 	.word	0x3f3a2e8c
 80175e0:	3e68ba2f 	.word	0x3e68ba2f
 80175e4:	3f62e8ba 	.word	0x3f62e8ba
 80175e8:	3d8ba2e9 	.word	0x3d8ba2e9
 80175ec:	3f22e8ba 	.word	0x3f22e8ba
 80175f0:	bf59999a 	.word	0xbf59999a
 80175f4:	3d3a2e8c 	.word	0x3d3a2e8c
 80175f8:	3ee66666 	.word	0x3ee66666
 80175fc:	43480000 	.word	0x43480000
 8017600:	3c23d70a 	.word	0x3c23d70a
 8017604:	3e22e8ba 	.word	0x3e22e8ba
 8017608:	3f19999a 	.word	0x3f19999a
 801760c:	3e8ba2e9 	.word	0x3e8ba2e9
 8017610:	3f8ccccd 	.word	0x3f8ccccd
 8017614:	3ff33333 	.word	0x3ff33333
 8017618:	3fcccccd 	.word	0x3fcccccd
 801761c:	3ecccccd 	.word	0x3ecccccd

08017620 <tract_reshape>:
{
 8017620:	b430      	push	{r4, r5}
	_tract* tr = *t;
 8017622:	6802      	ldr	r2, [r0, #0]
    for(i = 0; i < tr->n; i++) {
 8017624:	6853      	ldr	r3, [r2, #4]
    amount = tr->block_time * tr->movement_speed;
 8017626:	ed92 5a2a 	vldr	s10, [r2, #168]	; 0xa8
 801762a:	edd2 7a27 	vldr	s15, [r2, #156]	; 0x9c
    for(i = 0; i < tr->n; i++) {
 801762e:	2b00      	cmp	r3, #0
    amount = tr->block_time * tr->movement_speed;
 8017630:	ee25 5a27 	vmul.f32	s10, s10, s15
    for(i = 0; i < tr->n; i++) {
 8017634:	f340 80ab 	ble.w	801778e <tract_reshape+0x16e>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017638:	eddf 2a5f 	vldr	s5, [pc, #380]	; 80177b8 <tract_reshape+0x198>
 801763c:	ee75 3a05 	vadd.f32	s7, s10, s10
    current_obstruction = -1;
 8017640:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(i = 0; i < tr->n; i++) {
 8017644:	2300      	movs	r3, #0
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017646:	ee25 4a22 	vmul.f32	s8, s10, s5
        if(diameter < 0.001f) current_obstruction = i;
 801764a:	eddf 4a5c 	vldr	s9, [pc, #368]	; 80177bc <tract_reshape+0x19c>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 801764e:	ed9f 3a5c 	vldr	s6, [pc, #368]	; 80177c0 <tract_reshape+0x1a0>
        diameter = tr->diameter[i];
 8017652:	68d1      	ldr	r1, [r2, #12]
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017654:	eef0 7a44 	vmov.f32	s15, s8
        if(i < tr->nose_start) slow_return = 0.6f;
 8017658:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
        diameter = tr->diameter[i];
 801765a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        target_diameter = tr->target_diameter[i];
 801765e:	6955      	ldr	r5, [r2, #20]
        diameter = tr->diameter[i];
 8017660:	ed91 7a00 	vldr	s14, [r1]
        target_diameter = tr->target_diameter[i];
 8017664:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
        if(diameter < 0.001f) current_obstruction = i;
 8017668:	eeb4 7a64 	vcmp.f32	s14, s9
        target_diameter = tr->target_diameter[i];
 801766c:	ed9c 6a00 	vldr	s12, [ip]
        if(diameter < 0.001f) current_obstruction = i;
 8017670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017674:	bf48      	it	mi
 8017676:	461c      	movmi	r4, r3
        if(i < tr->nose_start) slow_return = 0.6f;
 8017678:	4298      	cmp	r0, r3
 801767a:	dc16      	bgt.n	80176aa <tract_reshape+0x8a>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 801767c:	1a1d      	subs	r5, r3, r0
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801767e:	eef0 7a45 	vmov.f32	s15, s10
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8017682:	ee05 5a90 	vmov	s11, r5
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8017686:	6c15      	ldr	r5, [r2, #64]	; 0x40
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8017688:	1a28      	subs	r0, r5, r0
 801768a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801768e:	42ab      	cmp	r3, r5
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8017690:	ee06 0a90 	vmov	s13, r0
 8017694:	ee65 5a83 	vmul.f32	s11, s11, s6
 8017698:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801769c:	da05      	bge.n	80176aa <tract_reshape+0x8a>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 801769e:	eec5 7aa6 	vdiv.f32	s15, s11, s13
            slow_return =
 80176a2:	ee77 7aa2 	vadd.f32	s15, s15, s5
        tr->diameter[i] = move_towards(diameter, target_diameter,
 80176a6:	ee67 7a85 	vmul.f32	s15, s15, s10

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
 80176aa:	eeb4 7ac6 	vcmpe.f32	s14, s12
        tmp = current + amt_up;
 80176ae:	ee77 7a27 	vadd.f32	s15, s14, s15
        return MIN(tmp, target);
    } else {
        tmp = current - amt_down;
 80176b2:	ee77 6a63 	vsub.f32	s13, s14, s7
    if(current < target) {
 80176b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return MIN(tmp, target);
 80176ba:	fec7 7ac6 	vminnm.f32	s15, s15, s12
        return MAX(tmp, target);
 80176be:	fec6 6a86 	vmaxnm.f32	s13, s13, s12
    if(current < target) {
 80176c2:	d52d      	bpl.n	8017720 <tract_reshape+0x100>
    for(i = 0; i < tr->n; i++) {
 80176c4:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
 80176c6:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 80176ca:	6851      	ldr	r1, [r2, #4]
 80176cc:	428b      	cmp	r3, r1
 80176ce:	dbc0      	blt.n	8017652 <tract_reshape+0x32>
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
 80176d0:	f1a4 31ff 	sub.w	r1, r4, #4294967295	; 0xffffffff
 80176d4:	fab1 f181 	clz	r1, r1
 80176d8:	0949      	lsrs	r1, r1, #5
 80176da:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80176de:	2b00      	cmp	r3, #0
 80176e0:	db00      	blt.n	80176e4 <tract_reshape+0xc4>
 80176e2:	bb59      	cbnz	r1, 801773c <tract_reshape+0x11c>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 80176e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80176e6:	edd2 7a22 	vldr	s15, [r2, #136]	; 0x88
    tr->last_obstruction = current_obstruction;
 80176ea:	f8c2 4094 	str.w	r4, [r2, #148]	; 0x94
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 80176ee:	ed93 7a00 	vldr	s14, [r3]
    if(current < target) {
 80176f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80176f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176fa:	d518      	bpl.n	801772e <tract_reshape+0x10e>
        tmp = current + amt_up;
 80176fc:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8017700:	eea5 7a26 	vfma.f32	s14, s10, s13
        return MIN(tmp, target);
 8017704:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 8017708:	edc3 7a00 	vstr	s15, [r3]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
 801770c:	e9d2 131a 	ldrd	r1, r3, [r2, #104]	; 0x68
 8017710:	edd1 7a00 	vldr	s15, [r1]
 8017714:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017718:	edc3 7a00 	vstr	s15, [r3]
}
 801771c:	bc30      	pop	{r4, r5}
 801771e:	4770      	bx	lr
    for(i = 0; i < tr->n; i++) {
 8017720:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017722:	edc1 6a00 	vstr	s13, [r1]
    for(i = 0; i < tr->n; i++) {
 8017726:	6851      	ldr	r1, [r2, #4]
 8017728:	4299      	cmp	r1, r3
 801772a:	dc92      	bgt.n	8017652 <tract_reshape+0x32>
 801772c:	e7d0      	b.n	80176d0 <tract_reshape+0xb0>
        tmp = current - amt_down;
 801772e:	eddf 6a25 	vldr	s13, [pc, #148]	; 80177c4 <tract_reshape+0x1a4>
 8017732:	eea5 7a66 	vfms.f32	s14, s10, s13
        return MAX(tmp, target);
 8017736:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801773a:	e7e5      	b.n	8017708 <tract_reshape+0xe8>
            tr->noseA[0] < 0.05f) {
 801773c:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
 801773e:	eddf 7a22 	vldr	s15, [pc, #136]	; 80177c8 <tract_reshape+0x1a8>
 8017742:	ed91 7a00 	vldr	s14, [r1]
 8017746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801774a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801774e:	d5c9      	bpl.n	80176e4 <tract_reshape+0xc4>
	_transient_pool* pool = *po;
 8017750:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
    if(pool->size == MAX_TRANSIENTS) return 0;
 8017754:	6948      	ldr	r0, [r1, #20]
 8017756:	2804      	cmp	r0, #4
 8017758:	d0c4      	beq.n	80176e4 <tract_reshape+0xc4>
    free_id = pool->next_free;
 801775a:	6988      	ldr	r0, [r1, #24]
    if(free_id == -1) {
 801775c:	1c45      	adds	r5, r0, #1
 801775e:	d01a      	beq.n	8017796 <tract_reshape+0x176>
    t = pool->pool[free_id];
 8017760:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    t->next = pool->root;
 8017764:	690d      	ldr	r5, [r1, #16]
 8017766:	61c5      	str	r5, [r0, #28]
    pool->size++;
 8017768:	694d      	ldr	r5, [r1, #20]
    pool->root = t;
 801776a:	6108      	str	r0, [r1, #16]
    pool->size++;
 801776c:	3501      	adds	r5, #1
 801776e:	614d      	str	r5, [r1, #20]
    t->is_free = 0;
 8017770:	2500      	movs	r5, #0
    t->position = position;
 8017772:	6003      	str	r3, [r0, #0]
    pool->next_free = -1;
 8017774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    t->is_free = 0;
 8017778:	7505      	strb	r5, [r0, #20]
    t->time_alive = 0.0f;
 801777a:	2500      	movs	r5, #0
 801777c:	6045      	str	r5, [r0, #4]
    t->lifetime = 0.2f;
 801777e:	4d13      	ldr	r5, [pc, #76]	; (80177cc <tract_reshape+0x1ac>)
 8017780:	6085      	str	r5, [r0, #8]
    t->strength = 0.3f;
 8017782:	4d13      	ldr	r5, [pc, #76]	; (80177d0 <tract_reshape+0x1b0>)
 8017784:	60c5      	str	r5, [r0, #12]
    t->exponent = 200.0f;
 8017786:	4d13      	ldr	r5, [pc, #76]	; (80177d4 <tract_reshape+0x1b4>)
 8017788:	6105      	str	r5, [r0, #16]
    pool->next_free = -1;
 801778a:	618b      	str	r3, [r1, #24]
    return 0;
 801778c:	e7aa      	b.n	80176e4 <tract_reshape+0xc4>
    for(i = 0; i < tr->n; i++) {
 801778e:	2101      	movs	r1, #1
    current_obstruction = -1;
 8017790:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017794:	e7a1      	b.n	80176da <tract_reshape+0xba>
            if(pool->pool[i]->is_free) {
 8017796:	6808      	ldr	r0, [r1, #0]
 8017798:	7d05      	ldrb	r5, [r0, #20]
 801779a:	2d00      	cmp	r5, #0
 801779c:	d1e2      	bne.n	8017764 <tract_reshape+0x144>
 801779e:	6848      	ldr	r0, [r1, #4]
 80177a0:	7d05      	ldrb	r5, [r0, #20]
 80177a2:	2d00      	cmp	r5, #0
 80177a4:	d1de      	bne.n	8017764 <tract_reshape+0x144>
 80177a6:	6888      	ldr	r0, [r1, #8]
 80177a8:	7d05      	ldrb	r5, [r0, #20]
 80177aa:	2d00      	cmp	r5, #0
 80177ac:	d1da      	bne.n	8017764 <tract_reshape+0x144>
 80177ae:	68c8      	ldr	r0, [r1, #12]
 80177b0:	7d05      	ldrb	r5, [r0, #20]
 80177b2:	2d00      	cmp	r5, #0
 80177b4:	d096      	beq.n	80176e4 <tract_reshape+0xc4>
 80177b6:	e7d5      	b.n	8017764 <tract_reshape+0x144>
 80177b8:	3f19999a 	.word	0x3f19999a
 80177bc:	3a83126f 	.word	0x3a83126f
 80177c0:	3ecccccd 	.word	0x3ecccccd
 80177c4:	3dcccccd 	.word	0x3dcccccd
 80177c8:	3d4ccccd 	.word	0x3d4ccccd
 80177cc:	3e4ccccd 	.word	0x3e4ccccd
 80177d0:	3e99999a 	.word	0x3e99999a
 80177d4:	43480000 	.word	0x43480000

080177d8 <tract_addTurbulenceNoiseAtPosition>:
{
 80177d8:	b538      	push	{r3, r4, r5, lr}
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80177da:	eddf 7a36 	vldr	s15, [pc, #216]	; 80178b4 <tract_addTurbulenceNoiseAtPosition+0xdc>
 80177de:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
	_tract* tr = *t;
 80177e2:	6805      	ldr	r5, [r0, #0]
{
 80177e4:	ed2d 8b06 	vpush	{d8-d10}
 80177e8:	eef0 8a60 	vmov.f32	s17, s1
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80177ec:	ee77 0ac1 	vsub.f32	s1, s15, s2
{
 80177f0:	eeb0 9a41 	vmov.f32	s18, s2
	int i = (int)floorf(position);
 80177f4:	fefb 7a68 	vrintm.f32	s15, s17
 80177f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80177fc:	ee60 0a87 	vmul.f32	s1, s1, s14
{
 8017800:	eeb0 8a40 	vmov.f32	s16, s0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8017804:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80178b8 <tract_addTurbulenceNoiseAtPosition+0xe0>
 8017808:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	int i = (int)floorf(position);
 801780c:	ee17 4a90 	vmov	r4, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8017810:	f7fc f848 	bl	80138a4 <LEAF_clip>
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8017814:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
	Lfloat delta = position - i;
 8017818:	ee07 4a90 	vmov	s15, r4
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 801781c:	eef0 9a40 	vmov.f32	s19, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8017820:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8017824:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80178b8 <tract_addTurbulenceNoiseAtPosition+0xe0>
 8017828:	ee69 0a20 	vmul.f32	s1, s18, s1
	Lfloat delta = position - i;
 801782c:	eeb8 aae7 	vcvt.f32.s32	s20, s15
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8017830:	f7fc f838 	bl	80138a4 <LEAF_clip>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8017834:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if ((i + 1) < tr->n) {
 8017838:	686b      	ldr	r3, [r5, #4]
 801783a:	1c62      	adds	r2, r4, #1
 801783c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017840:	429a      	cmp	r2, r3
 8017842:	ee28 8a29 	vmul.f32	s16, s16, s19
 8017846:	ee28 0a00 	vmul.f32	s0, s16, s0
 801784a:	da18      	bge.n	801787e <tract_addTurbulenceNoiseAtPosition+0xa6>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 801784c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		tr->R[i + 1] += noise0;
 8017850:	69eb      	ldr	r3, [r5, #28]
 8017852:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8017856:	ee77 7ae8 	vsub.f32	s15, s15, s17
		tr->R[i + 1] += noise0;
 801785a:	ed93 7a00 	vldr	s14, [r3]
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 801785e:	ee77 7a8a 	vadd.f32	s15, s15, s20
		tr->R[i + 1] += noise0;
 8017862:	eea7 7a80 	vfma.f32	s14, s15, s0
 8017866:	ed83 7a00 	vstr	s14, [r3]
		tr->L[i + 1] += noise0;
 801786a:	6a2b      	ldr	r3, [r5, #32]
 801786c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017870:	ed93 7a00 	vldr	s14, [r3]
 8017874:	eea7 7a80 	vfma.f32	s14, s15, s0
 8017878:	ed83 7a00 	vstr	s14, [r3]
	if ((i + 2) < tr->n) {
 801787c:	686b      	ldr	r3, [r5, #4]
 801787e:	3402      	adds	r4, #2
 8017880:	429c      	cmp	r4, r3
 8017882:	da13      	bge.n	80178ac <tract_addTurbulenceNoiseAtPosition+0xd4>
		tr->R[i + 2] += noise1;
 8017884:	69eb      	ldr	r3, [r5, #28]
	Lfloat delta = position - i;
 8017886:	ee78 8aca 	vsub.f32	s17, s17, s20
		tr->R[i + 2] += noise1;
 801788a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801788e:	edd3 7a00 	vldr	s15, [r3]
 8017892:	eee8 7a80 	vfma.f32	s15, s17, s0
 8017896:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
 801789a:	6a2b      	ldr	r3, [r5, #32]
 801789c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80178a0:	edd3 7a00 	vldr	s15, [r3]
 80178a4:	eee8 7a80 	vfma.f32	s15, s17, s0
 80178a8:	edc3 7a00 	vstr	s15, [r3]
 }
 80178ac:	ecbd 8b06 	vpop	{d8-d10}
 80178b0:	bd38      	pop	{r3, r4, r5, pc}
 80178b2:	bf00      	nop
 80178b4:	3db851ec 	.word	0x3db851ec
 80178b8:	00000000 	.word	0x00000000

080178bc <tract_compute>:
{
 80178bc:	b530      	push	{r4, r5, lr}
 80178be:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat oneMinusLambda = 1.0f - lambda;
 80178c2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	_tract* tr = *t;
 80178c6:	6804      	ldr	r4, [r0, #0]
{
 80178c8:	b083      	sub	sp, #12
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
 80178ca:	eddf 9ab2 	vldr	s19, [pc, #712]	; 8017b94 <tract_compute+0x2d8>
 80178ce:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
{
 80178d2:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat oneMinusLambda = 1.0f - lambda;
 80178d6:	ee78 8ae0 	vsub.f32	s17, s17, s1
	_tract* tr = *t;
 80178da:	9401      	str	r4, [sp, #4]
{
 80178dc:	eeb0 9a40 	vmov.f32	s18, s0
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
 80178e0:	f7fd f81a 	bl	8014918 <tNoise_tick>
 80178e4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80178e8:	ee20 0a29 	vmul.f32	s0, s0, s19
 80178ec:	f7f9 fd5a 	bl	80113a4 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 80178f0:	ed94 1a31 	vldr	s2, [r4, #196]	; 0xc4
 80178f4:	edd4 0a2f 	vldr	s1, [r4, #188]	; 0xbc
 80178f8:	a801      	add	r0, sp, #4
 80178fa:	f7ff ff6d 	bl	80177d8 <tract_addTurbulenceNoiseAtPosition>
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
 80178fe:	9d01      	ldr	r5, [sp, #4]
 8017900:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 8017904:	f7fd f808 	bl	8014918 <tNoise_tick>
 8017908:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
 801790c:	ee20 0a29 	vmul.f32	s0, s0, s19
 8017910:	f7f9 fd48 	bl	80113a4 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 8017914:	ed95 1a32 	vldr	s2, [r5, #200]	; 0xc8
 8017918:	edd5 0a30 	vldr	s1, [r5, #192]	; 0xc0
 801791c:	a801      	add	r0, sp, #4
 801791e:	f7ff ff5b 	bl	80177d8 <tract_addTurbulenceNoiseAtPosition>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 8017922:	6a23      	ldr	r3, [r4, #32]
 8017924:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8017928:	ed93 7a00 	vldr	s14, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 801792c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 8017930:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017932:	eea7 9a27 	vfma.f32	s18, s14, s15
 8017936:	ed82 9a00 	vstr	s18, [r2]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 801793a:	6862      	ldr	r2, [r4, #4]
 801793c:	69e1      	ldr	r1, [r4, #28]
 801793e:	4413      	add	r3, r2
 8017940:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 8017944:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017946:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801794a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801794e:	edd1 7a00 	vldr	s15, [r1]
 8017952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017956:	edc2 7a01 	vstr	s15, [r2, #4]
    for(i = 1; i < tr->n; i++) {
 801795a:	6863      	ldr	r3, [r4, #4]
 801795c:	2b01      	cmp	r3, #1
 801795e:	dd2f      	ble.n	80179c0 <tract_compute+0x104>
 8017960:	2304      	movs	r3, #4
 8017962:	f04f 0c01 	mov.w	ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8017966:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    for(i = 1; i < tr->n; i++) {
 8017968:	f10c 0c01 	add.w	ip, ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 801796c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801796e:	eb05 0e03 	add.w	lr, r5, r3
 8017972:	4418      	add	r0, r3
 8017974:	edde 7a00 	vldr	s15, [lr]
 8017978:	ed90 6a00 	vldr	s12, [r0]
 801797c:	ee68 7a27 	vmul.f32	s15, s16, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
 8017980:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8017984:	eee6 7a28 	vfma.f32	s15, s12, s17
        w = r * (tr->R[i - 1] + tr->L[i]);
 8017988:	4419      	add	r1, r3
 801798a:	441a      	add	r2, r3
 801798c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8017990:	ed92 7a00 	vldr	s14, [r2]
        tr->junction_outR[i] = tr->R[i - 1] - w;
 8017994:	6b22      	ldr	r2, [r4, #48]	; 0x30
        w = r * (tr->R[i - 1] + tr->L[i]);
 8017996:	ee36 7a87 	vadd.f32	s14, s13, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
 801799a:	441a      	add	r2, r3
 801799c:	eee7 6a67 	vfms.f32	s13, s14, s15
 80179a0:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
 80179a4:	6a21      	ldr	r1, [r4, #32]
 80179a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80179a8:	4419      	add	r1, r3
 80179aa:	441a      	add	r2, r3
 80179ac:	3304      	adds	r3, #4
 80179ae:	edd1 6a00 	vldr	s13, [r1]
 80179b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80179b6:	edc2 6a00 	vstr	s13, [r2]
    for(i = 1; i < tr->n; i++) {
 80179ba:	6862      	ldr	r2, [r4, #4]
 80179bc:	4562      	cmp	r2, ip
 80179be:	dcd2      	bgt.n	8017966 <tract_compute+0xaa>
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 80179c0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80179c2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 80179c6:	ed94 7a1c 	vldr	s14, [r4, #112]	; 0x70
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 80179ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80179ce:	4413      	add	r3, r2
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 80179d0:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 80179d4:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 80179d8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80179da:	009b      	lsls	r3, r3, #2
 80179dc:	6a20      	ldr	r0, [r4, #32]
 80179de:	edd2 5a00 	vldr	s11, [r2]
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 80179e2:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 80179e6:	1d1a      	adds	r2, r3, #4
 80179e8:	69e5      	ldr	r5, [r4, #28]
 80179ea:	4410      	add	r0, r2
 80179ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80179ee:	441d      	add	r5, r3
 80179f0:	edd0 7a00 	vldr	s15, [r0]
 80179f4:	4411      	add	r1, r2
 80179f6:	ed95 6a00 	vldr	s12, [r5]
 80179fa:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80179fe:	ee77 5a26 	vadd.f32	s11, s14, s13
 8017a02:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017a06:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017a0a:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 8017a0e:	ed94 7a1d 	vldr	s14, [r4, #116]	; 0x74
 8017a12:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 8017a16:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 8017a1a:	6a20      	ldr	r0, [r4, #32]
 8017a1c:	69e1      	ldr	r1, [r4, #28]
 8017a1e:	4410      	add	r0, r2
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 8017a20:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 8017a24:	4419      	add	r1, r3
 8017a26:	ed90 6a00 	vldr	s12, [r0]
 8017a2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017a2c:	edd1 7a00 	vldr	s15, [r1]
 8017a30:	ed90 5a00 	vldr	s10, [r0]
 8017a34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017a36:	ee77 5a26 	vadd.f32	s11, s14, s13
 8017a3a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017a3e:	4411      	add	r1, r2
 8017a40:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017a44:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017a48:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8017a4c:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8017a50:	6d61      	ldr	r1, [r4, #84]	; 0x54
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8017a52:	ee28 7a07 	vmul.f32	s14, s16, s14
 8017a56:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8017a5a:	ed91 6a00 	vldr	s12, [r1]
 8017a5e:	6a21      	ldr	r1, [r4, #32]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8017a60:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8017a64:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8017a66:	4411      	add	r1, r2
 8017a68:	69e2      	ldr	r2, [r4, #28]
 8017a6a:	441a      	add	r2, r3
 8017a6c:	edd1 7a00 	vldr	s15, [r1]
 8017a70:	edd2 5a00 	vldr	s11, [r2]
 8017a74:	ee77 6a26 	vadd.f32	s13, s14, s13
 8017a78:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8017a7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017a80:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017a84:	edc0 7a00 	vstr	s15, [r0]
    for(i = 0; i < tr->n; i++) {
 8017a88:	6862      	ldr	r2, [r4, #4]
 8017a8a:	2a00      	cmp	r2, #0
 8017a8c:	dd1d      	ble.n	8017aca <tract_compute+0x20e>
 8017a8e:	2300      	movs	r3, #0
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8017a90:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8017b98 <tract_compute+0x2dc>
    for(i = 0; i < tr->n; i++) {
 8017a94:	4618      	mov	r0, r3
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8017a96:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017a98:	469c      	mov	ip, r3
 8017a9a:	69e2      	ldr	r2, [r4, #28]
    for(i = 0; i < tr->n; i++) {
 8017a9c:	3001      	adds	r0, #1
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8017a9e:	4419      	add	r1, r3
 8017aa0:	441a      	add	r2, r3
 8017aa2:	3304      	adds	r3, #4
 8017aa4:	edd1 7a00 	vldr	s15, [r1]
 8017aa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017aac:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = tr->junction_outL[i + 1]*0.999f;
 8017ab0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017ab2:	6a22      	ldr	r2, [r4, #32]
 8017ab4:	4419      	add	r1, r3
 8017ab6:	4462      	add	r2, ip
 8017ab8:	edd1 7a00 	vldr	s15, [r1]
 8017abc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017ac0:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->n; i++) {
 8017ac4:	6862      	ldr	r2, [r4, #4]
 8017ac6:	4282      	cmp	r2, r0
 8017ac8:	dce5      	bgt.n	8017a96 <tract_compute+0x1da>
    tr->lip_output = tr->R[tr->n - 1];
 8017aca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017ace:	69e0      	ldr	r0, [r4, #28]
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8017ad0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    tr->lip_output = tr->R[tr->n - 1];
 8017ad2:	441a      	add	r2, r3
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8017ad4:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 8017ad8:	440b      	add	r3, r1
    tr->nose_junc_outL[tr->nose_length] =
 8017ada:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    tr->lip_output = tr->R[tr->n - 1];
 8017adc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    tr->nose_junc_outL[tr->nose_length] =
 8017ae0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    tr->lip_output = tr->R[tr->n - 1];
 8017ae4:	6802      	ldr	r2, [r0, #0]
 8017ae6:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8017aea:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017aec:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017af0:	edd2 7a00 	vldr	s15, [r2]
 8017af4:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
 8017af8:	edc1 7a01 	vstr	s15, [r1, #4]
    for(i = 1; i < tr->nose_length; i++) {
 8017afc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017afe:	2a01      	cmp	r2, #1
 8017b00:	dd27      	ble.n	8017b52 <tract_compute+0x296>
 8017b02:	2304      	movs	r3, #4
 8017b04:	f04f 0c01 	mov.w	ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8017b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
    for(i = 1; i < tr->nose_length; i++) {
 8017b0a:	f10c 0c01 	add.w	ip, ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8017b0e:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8017b10:	4418      	add	r0, r3
 8017b12:	eb05 0e03 	add.w	lr, r5, r3
 8017b16:	edd0 7a00 	vldr	s15, [r0]
 8017b1a:	ed1e 7a01 	vldr	s14, [lr, #-4]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 8017b1e:	e9d4 2118 	ldrd	r2, r1, [r4, #96]	; 0x60
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8017b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b26:	4419      	add	r1, r3
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 8017b28:	441a      	add	r2, r3
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8017b2a:	edd1 6a00 	vldr	s13, [r1]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 8017b2e:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8017b32:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
 8017b36:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8017b38:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017b3a:	4419      	add	r1, r3
 8017b3c:	441a      	add	r2, r3
 8017b3e:	3304      	adds	r3, #4
 8017b40:	ed91 7a00 	vldr	s14, [r1]
 8017b44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017b48:	ed82 7a00 	vstr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 8017b4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017b4e:	4562      	cmp	r2, ip
 8017b50:	dcda      	bgt.n	8017b08 <tract_compute+0x24c>
    for(i = 0; i < tr->nose_length; i++) {
 8017b52:	2a00      	cmp	r2, #0
 8017b54:	dd13      	ble.n	8017b7e <tract_compute+0x2c2>
 8017b56:	2300      	movs	r3, #0
 8017b58:	4618      	mov	r0, r3
        tr->noseR[i] = tr->nose_junc_outR[i];
 8017b5a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8017b5c:	469c      	mov	ip, r3
 8017b5e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    for(i = 0; i < tr->nose_length; i++) {
 8017b60:	3001      	adds	r0, #1
        tr->noseR[i] = tr->nose_junc_outR[i];
 8017b62:	4419      	add	r1, r3
 8017b64:	441a      	add	r2, r3
 8017b66:	3304      	adds	r3, #4
 8017b68:	6809      	ldr	r1, [r1, #0]
 8017b6a:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
 8017b6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017b6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8017b70:	4419      	add	r1, r3
 8017b72:	4462      	add	r2, ip
 8017b74:	6809      	ldr	r1, [r1, #0]
 8017b76:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
 8017b78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017b7a:	4282      	cmp	r2, r0
 8017b7c:	dced      	bgt.n	8017b5a <tract_compute+0x29e>
    tr->nose_output = tr->noseR[tr->nose_length - 1];
 8017b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017b80:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017b84:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8017b88:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
 8017b8c:	b003      	add	sp, #12
 8017b8e:	ecbd 8b04 	vpop	{d8-d9}
 8017b92:	bd30      	pop	{r4, r5, pc}
 8017b94:	3e8f5c29 	.word	0x3e8f5c29
 8017b98:	3f7fbe77 	.word	0x3f7fbe77

08017b9c <tVoc_init>:
}



void    tVoc_init         (tVoc* const voc, int numTractSections, int maxNumTractSections, LEAF* const leaf)
{
 8017b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
	_tMempool* m = *mp;
 8017b9e:	699d      	ldr	r5, [r3, #24]
{
 8017ba0:	b085      	sub	sp, #20
 8017ba2:	4607      	mov	r7, r0
 8017ba4:	460e      	mov	r6, r1
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 8017ba6:	2018      	movs	r0, #24
 8017ba8:	4629      	mov	r1, r5
{
 8017baa:	9201      	str	r2, [sp, #4]
	_tMempool* m = *mp;
 8017bac:	9502      	str	r5, [sp, #8]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 8017bae:	f7fc f97b 	bl	8013ea8 <mpool_alloc>
 8017bb2:	4604      	mov	r4, r0
 8017bb4:	6038      	str	r0, [r7, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8017bb6:	4629      	mov	r1, r5
	v->mempool = m;
 8017bb8:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8017bba:	2038      	movs	r0, #56	; 0x38
 8017bbc:	f7fc f9d8 	bl	8013f70 <mpool_calloc>
 8017bc0:	6060      	str	r0, [r4, #4]
 8017bc2:	4603      	mov	r3, r0
	glot->mempool = m;
 8017bc4:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8017bc6:	9003      	str	r0, [sp, #12]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8017bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	glot->freq = 140.0f; /* 140Hz frequency by default */
 8017bcc:	480d      	ldr	r0, [pc, #52]	; (8017c04 <tVoc_init+0x68>)
	LEAF* leaf = glot->mempool->leaf;
 8017bce:	6869      	ldr	r1, [r5, #4]
	glot->freq = 140.0f; /* 140Hz frequency by default */
 8017bd0:	6058      	str	r0, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
 8017bd2:	480d      	ldr	r0, [pc, #52]	; (8017c08 <tVoc_init+0x6c>)
 8017bd4:	6098      	str	r0, [r3, #8]
    glottis_setup_waveform(&glot);
 8017bd6:	a803      	add	r0, sp, #12
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8017bd8:	ed91 7a00 	vldr	s14, [r1]
    glot->time_in_waveform = 0;
 8017bdc:	2100      	movs	r1, #0
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8017bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
    glot->time_in_waveform = 0;
 8017be2:	6159      	str	r1, [r3, #20]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8017be4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    glottis_setup_waveform(&glot);
 8017be8:	f7fe ffea 	bl	8016bc0 <glottis_setup_waveform>
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
 8017bec:	ab02      	add	r3, sp, #8
 8017bee:	9a01      	ldr	r2, [sp, #4]
 8017bf0:	4631      	mov	r1, r6
 8017bf2:	f104 0008 	add.w	r0, r4, #8
 8017bf6:	f7ff f997 	bl	8016f28 <tract_initToPool>
	v->counter = 0;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	6123      	str	r3, [r4, #16]
}
 8017bfe:	b005      	add	sp, #20
 8017c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c02:	bf00      	nop
 8017c04:	430c0000 	.word	0x430c0000
 8017c08:	3f19999a 	.word	0x3f19999a

08017c0c <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
 8017c0c:	b538      	push	{r3, r4, r5, lr}
 8017c0e:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
 8017c12:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
 8017c14:	6923      	ldr	r3, [r4, #16]
		tract_reshape(&v->tr);
 8017c16:	f104 0508 	add.w	r5, r4, #8
	if(v->counter == 0) {
 8017c1a:	b323      	cbz	r3, 8017c66 <tVoc_tick+0x5a>
		*/
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8017c1c:	ee07 3a90 	vmov	s15, r3
 8017c20:	eddf 9a20 	vldr	s19, [pc, #128]	; 8017ca4 <tVoc_tick+0x98>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
	glot = glottis_compute(&v->glot);
 8017c24:	1d20      	adds	r0, r4, #4
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8017c26:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	glot = glottis_compute(&v->glot);
 8017c2a:	f7ff f885 	bl	8016d38 <glottis_compute>

	tract_compute(&v->tr, glot, lambda1);
 8017c2e:	4628      	mov	r0, r5
	glot = glottis_compute(&v->glot);
 8017c30:	eeb0 9a40 	vmov.f32	s18, s0
	tract_compute(&v->tr, glot, lambda1);
 8017c34:	ee68 0a29 	vmul.f32	s1, s16, s19
 8017c38:	f7ff fe40 	bl	80178bc <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;

	if (v->doubleCompute)
 8017c3c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
	vocal_output += v->tr->lip_output + v->tr->nose_output;
 8017c40:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8017c44:	edd3 8a28 	vldr	s17, [r3, #160]	; 0xa0
 8017c48:	ee78 8aa7 	vadd.f32	s17, s17, s15
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8017c4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if (v->doubleCompute)
 8017c50:	b98a      	cbnz	r2, 8017c76 <tVoc_tick+0x6a>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.25f;
	}
	else
	{
		vocal_output *= 0.5f;
 8017c52:	ee28 0aa7 	vmul.f32	s0, s17, s15
	}
	//v->buf[i] = vocal_output * 0.125f;


	//vocal_output = glot;
	v->counter = (v->counter + 1) & 63;
 8017c56:	6923      	ldr	r3, [r4, #16]
 8017c58:	3301      	adds	r3, #1
 8017c5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c5e:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
 8017c60:	ecbd 8b04 	vpop	{d8-d9}
 8017c64:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
 8017c66:	4628      	mov	r0, r5
 8017c68:	f7ff fcda 	bl	8017620 <tract_reshape>
		tract_calculate_reflections(&v->tr);
 8017c6c:	4628      	mov	r0, r5
 8017c6e:	f7ff f8d5 	bl	8016e1c <tract_calculate_reflections>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8017c72:	6923      	ldr	r3, [r4, #16]
 8017c74:	e7d2      	b.n	8017c1c <tVoc_tick+0x10>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8017c76:	ee78 0a27 	vadd.f32	s1, s16, s15
		tract_compute(&v->tr, glot, lambda2);
 8017c7a:	4628      	mov	r0, r5
 8017c7c:	eeb0 0a49 	vmov.f32	s0, s18
 8017c80:	ee60 0aa9 	vmul.f32	s1, s1, s19
 8017c84:	f7ff fe1a 	bl	80178bc <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 8017c88:	68a3      	ldr	r3, [r4, #8]
		vocal_output *= 0.25f;
 8017c8a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 8017c8e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8017c92:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 8017c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017c9a:	ee77 7aa8 	vadd.f32	s15, s15, s17
		vocal_output *= 0.25f;
 8017c9e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8017ca2:	e7d8      	b.n	8017c56 <tVoc_tick+0x4a>
 8017ca4:	3c800000 	.word	0x3c800000

08017ca8 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 511;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
 8017ca8:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
 8017caa:	60d9      	str	r1, [r3, #12]
}
 8017cac:	4770      	bx	lr
 8017cae:	bf00      	nop

08017cb0 <tVoc_setFreq>:


void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	v->glot->freq = freq;
 8017cb0:	6803      	ldr	r3, [r0, #0]
 8017cb2:	685b      	ldr	r3, [r3, #4]
 8017cb4:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8017cb8:	4770      	bx	lr
 8017cba:	bf00      	nop

08017cbc <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
	_tVoc* v = *voc;
	tract_newLength(&v->tr, newLength);
 8017cbc:	6800      	ldr	r0, [r0, #0]
 8017cbe:	3008      	adds	r0, #8
 8017cc0:	f7ff bb7c 	b.w	80173bc <tract_newLength>

08017cc4 <tVoc_set_tenseness>:
}

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
	v->glot->tenseness = tenseness;
 8017cc4:	6803      	ldr	r3, [r0, #0]
 8017cc6:	685b      	ldr	r3, [r3, #4]
 8017cc8:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8017ccc:	4770      	bx	lr
 8017cce:	bf00      	nop

08017cd0 <tVoc_set_velum>:
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
	v->tr->velum_target = velum;
 8017cd0:	6803      	ldr	r3, [r0, #0]
 8017cd2:	689b      	ldr	r3, [r3, #8]
 8017cd4:	ed83 0a22 	vstr	s0, [r3, #136]	; 0x88
}
 8017cd8:	4770      	bx	lr
 8017cda:	bf00      	nop
 8017cdc:	0000      	movs	r0, r0
	...

08017ce0 <tVoc_set_tongue_and_touch_diameters>:
	return &v->tr->velum_target;
}

//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
 8017ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ce4:	ed2d 8b0a 	vpush	{d8-d12}
	int i;

	_tVoc* v = *voc;
 8017ce8:	6807      	ldr	r7, [r0, #0]
{
 8017cea:	460e      	mov	r6, r1

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8017cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017cf0:	68bb      	ldr	r3, [r7, #8]
{
 8017cf2:	eeb0 9a40 	vmov.f32	s18, s0
 8017cf6:	eef0 aa41 	vmov.f32	s21, s2
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8017cfa:	6c5c      	ldr	r4, [r3, #68]	; 0x44
{
 8017cfc:	eeb0 ba61 	vmov.f32	s22, s3
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8017d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40

	for (i = 0; i < v->tr->n; i++)
 8017d02:	6859      	ldr	r1, [r3, #4]
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8017d04:	1b12      	subs	r2, r2, r4
	for (i = 0; i < v->tr->n; i++)
 8017d06:	2900      	cmp	r1, #0
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8017d08:	ee07 2a90 	vmov	s15, r2
 8017d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d10:	ee87 8a27 	vdiv.f32	s16, s14, s15
	for (i = 0; i < v->tr->n; i++)
 8017d14:	dd0d      	ble.n	8017d32 <tVoc_set_tongue_and_touch_diameters+0x52>
 8017d16:	4630      	mov	r0, r6
 8017d18:	2200      	movs	r2, #0
	{
		theDiameters[i] = v->tr->rest_diameter[i];
 8017d1a:	691b      	ldr	r3, [r3, #16]
 8017d1c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (i = 0; i < v->tr->n; i++)
 8017d20:	3201      	adds	r2, #1
		theDiameters[i] = v->tr->rest_diameter[i];
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < v->tr->n; i++)
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	6859      	ldr	r1, [r3, #4]
 8017d2c:	4291      	cmp	r1, r2
 8017d2e:	dcf4      	bgt.n	8017d1a <tVoc_set_tongue_and_touch_diameters+0x3a>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8017d30:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8017d32:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8017d34:	42a5      	cmp	r5, r4
 8017d36:	dd48      	ble.n	8017dca <tVoc_set_tongue_and_touch_diameters+0xea>
	{
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 8017d38:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8017d3c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8017f40 <tVoc_set_tongue_and_touch_diameters+0x260>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 8017d40:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8017d44:	eddf 9a7f 	vldr	s19, [pc, #508]	; 8017f44 <tVoc_set_tongue_and_touch_diameters+0x264>
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
		}
		theDiameters[i] = 1.5f - curve;
 8017d48:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
 8017d4c:	eb06 0984 	add.w	r9, r6, r4, lsl #2
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8017d50:	ee77 7ae0 	vsub.f32	s15, s15, s1
			curve *= 0.8f;
 8017d54:	ed9f ca7c 	vldr	s24, [pc, #496]	; 8017f48 <tVoc_set_tongue_and_touch_diameters+0x268>
			curve *= 0.94f;
 8017d58:	eddf ba7c 	vldr	s23, [pc, #496]	; 8017f4c <tVoc_set_tongue_and_touch_diameters+0x26c>
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8017d5c:	46a0      	mov	r8, r4
 8017d5e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8017f30 <tVoc_set_tongue_and_touch_diameters+0x250>
 8017d62:	eee7 9a87 	vfma.f32	s19, s15, s14
 8017d66:	ee28 8b06 	vmul.f64	d8, d8, d6
 8017d6a:	e00c      	b.n	8017d86 <tVoc_set_tongue_and_touch_diameters+0xa6>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8017d6c:	42a5      	cmp	r5, r4
 8017d6e:	d025      	beq.n	8017dbc <tVoc_set_tongue_and_touch_diameters+0xdc>
		theDiameters[i] = 1.5f - curve;
 8017d70:	ee7a 7a40 	vsub.f32	s15, s20, s0
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8017d74:	3401      	adds	r4, #1
		theDiameters[i] = 1.5f - curve;
 8017d76:	ece9 7a01 	vstmia	r9!, {s15}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8017d7a:	68bb      	ldr	r3, [r7, #8]
 8017d7c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8017d7e:	42a5      	cmp	r5, r4
 8017d80:	dd22      	ble.n	8017dc8 <tVoc_set_tongue_and_touch_diameters+0xe8>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8017d82:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 8017d86:	ee07 4a90 	vmov	s15, r4
 8017d8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017d8e:	ee39 7a47 	vsub.f32	s14, s18, s14
 8017d92:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8017d96:	ee27 7b08 	vmul.f64	d7, d7, d8
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8017d9a:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8017d9e:	f001 fac7 	bl	8019330 <cosf>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8017da2:	f1a8 0302 	sub.w	r3, r8, #2
 8017da6:	1e6a      	subs	r2, r5, #1
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8017da8:	ee29 0a80 	vmul.f32	s0, s19, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8017dac:	42a3      	cmp	r3, r4
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8017dae:	f1a5 0502 	sub.w	r5, r5, #2
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8017db2:	d006      	beq.n	8017dc2 <tVoc_set_tongue_and_touch_diameters+0xe2>
 8017db4:	42a2      	cmp	r2, r4
 8017db6:	d004      	beq.n	8017dc2 <tVoc_set_tongue_and_touch_diameters+0xe2>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8017db8:	4544      	cmp	r4, r8
 8017dba:	d1d7      	bne.n	8017d6c <tVoc_set_tongue_and_touch_diameters+0x8c>
			curve *= 0.94f;
 8017dbc:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8017dc0:	e7d6      	b.n	8017d70 <tVoc_set_tongue_and_touch_diameters+0x90>
			curve *= 0.8f;
 8017dc2:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8017dc6:	e7f7      	b.n	8017db8 <tVoc_set_tongue_and_touch_diameters+0xd8>
	}

	//now do additional constrictions (touch position)
	Lfloat width=2.0f;
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8017dc8:	6859      	ldr	r1, [r3, #4]
 8017dca:	ee07 1a90 	vmov	s15, r1
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
	Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 8017dce:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8017f50 <tVoc_set_tongue_and_touch_diameters+0x270>
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8017dd2:	ed9f 8a60 	vldr	s16, [pc, #384]	; 8017f54 <tVoc_set_tongue_and_touch_diameters+0x274>
 8017dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 8017dda:	ee27 7a87 	vmul.f32	s14, s15, s14
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8017dde:	ee27 8a88 	vmul.f32	s16, s15, s16
	if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
 8017de2:	eeb4 7aea 	vcmpe.f32	s14, s21
 8017de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dea:	dc0f      	bgt.n	8017e0c <tVoc_set_tongue_and_touch_diameters+0x12c>
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8017dec:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
 8017df0:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8017f58 <tVoc_set_tongue_and_touch_diameters+0x278>
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8017df4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
 8017df8:	ee27 6a86 	vmul.f32	s12, s15, s12
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8017dfc:	eef4 6aea 	vcmpe.f32	s13, s21
 8017e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e04:	f200 8087 	bhi.w	8017f16 <tVoc_set_tongue_and_touch_diameters+0x236>
 8017e08:	eeb0 8a46 	vmov.f32	s16, s12
	else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
	Lfloat invWidth = 1.0f / width;
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
 8017e0c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8017e10:	eeb4 ba47 	vcmp.f32	s22, s14
 8017e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e18:	d504      	bpl.n	8017e24 <tVoc_set_tongue_and_touch_diameters+0x144>
 8017e1a:	eef4 7aea 	vcmpe.f32	s15, s21
 8017e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e22:	dc03      	bgt.n	8017e2c <tVoc_set_tongue_and_touch_diameters+0x14c>
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
			}
		}
	}

}
 8017e24:	ecbd 8b0a 	vpop	{d8-d12}
 8017e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8017e2c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8017e30:	fefa 7a48 	vrintp.f32	s15, s16
		int intIndex = roundf(touch_index);
 8017e34:	feb8 7a6a 	vrinta.f32	s14, s21
 8017e38:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8017e3c:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8017e40:	ee78 8a29 	vadd.f32	s17, s16, s19
		int intIndex = roundf(touch_index);
 8017e44:	ee17 5a10 	vmov	r5, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8017e48:	eef1 7a67 	vneg.f32	s15, s15
 8017e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017e54:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8017e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e5c:	d5e2      	bpl.n	8017e24 <tVoc_set_tongue_and_touch_diameters+0x144>
	Lfloat invWidth = 1.0f / width;
 8017e5e:	ee89 ca88 	vdiv.f32	s24, s19, s16
 8017e62:	ee17 4a90 	vmov	r4, s15
			if (relpos <= 0.0f) shrink = 0.0f;
 8017e66:	ed9f aa3d 	vldr	s20, [pc, #244]	; 8017f5c <tVoc_set_tongue_and_touch_diameters+0x27c>
 8017e6a:	442c      	add	r4, r5
 8017e6c:	f1c5 0501 	rsb	r5, r5, #1
 8017e70:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8017e74:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8017e78:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8017f38 <tVoc_set_tongue_and_touch_diameters+0x258>
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
 8017e7c:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 8017e80:	ee2c cb06 	vmul.f64	d12, d12, d6
			Lfloat relpos = (intIndex+i) - touch_index;
 8017e84:	ee07 4a90 	vmov	s15, r4
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 8017e88:	2c00      	cmp	r4, #0
			Lfloat relpos = (intIndex+i) - touch_index;
 8017e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 8017e8e:	db32      	blt.n	8017ef6 <tVoc_set_tongue_and_touch_diameters+0x216>
 8017e90:	68bb      	ldr	r3, [r7, #8]
			Lfloat relpos = (intIndex+i) - touch_index;
 8017e92:	ee77 7aea 	vsub.f32	s15, s15, s21
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 8017e96:	685b      	ldr	r3, [r3, #4]
			relpos = fabsf(relpos)-0.5f;
 8017e98:	eef0 7ae7 	vabs.f32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 8017e9c:	429c      	cmp	r4, r3
 8017e9e:	da2a      	bge.n	8017ef6 <tVoc_set_tongue_and_touch_diameters+0x216>
			if (relpos <= 0.0f) shrink = 0.0f;
 8017ea0:	eef4 7ac9 	vcmpe.f32	s15, s18
			relpos = fabsf(relpos)-0.5f;
 8017ea4:	ee37 7ac9 	vsub.f32	s14, s15, s18
			if (relpos <= 0.0f) shrink = 0.0f;
 8017ea8:	eef0 7a4a 	vmov.f32	s15, s20
 8017eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eb0:	d912      	bls.n	8017ed8 <tVoc_set_tongue_and_touch_diameters+0x1f8>
			else if (relpos > width) shrink = 1.0f;
 8017eb2:	eeb4 8ac7 	vcmpe.f32	s16, s14
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
 8017eb6:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
			else if (relpos > width) shrink = 1.0f;
 8017eba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
 8017ec2:	ee20 0b0c 	vmul.f64	d0, d0, d12
			else if (relpos > width) shrink = 1.0f;
 8017ec6:	d407      	bmi.n	8017ed8 <tVoc_set_tongue_and_touch_diameters+0x1f8>
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
 8017ec8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8017ecc:	f001 fa30 	bl	8019330 <cosf>
 8017ed0:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8017ed4:	ee60 7a09 	vmul.f32	s15, s0, s18
			if (touch_diameter < theDiameters[intIndex+i])
 8017ed8:	ed96 7a00 	vldr	s14, [r6]
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8017edc:	ee77 6a4b 	vsub.f32	s13, s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
 8017ee0:	eeb4 7acb 	vcmpe.f32	s14, s22
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8017ee4:	eeb0 7a4b 	vmov.f32	s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
 8017ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8017eec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017ef0:	bfc8      	it	gt
 8017ef2:	ed86 7a00 	vstrgt	s14, [r6]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8017ef6:	192b      	adds	r3, r5, r4
 8017ef8:	3604      	adds	r6, #4
 8017efa:	3401      	adds	r4, #1
 8017efc:	ee07 3a90 	vmov	s15, r3
 8017f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f04:	eef4 7ae8 	vcmpe.f32	s15, s17
 8017f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f0c:	d4ba      	bmi.n	8017e84 <tVoc_set_tongue_and_touch_diameters+0x1a4>
}
 8017f0e:	ecbd 8b0a 	vpop	{d8-d12}
 8017f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
 8017f16:	ee7a 5ac7 	vsub.f32	s11, s21, s14
 8017f1a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017f1e:	ee65 6a86 	vmul.f32	s13, s11, s12
 8017f22:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8017f26:	ee38 8a06 	vadd.f32	s16, s16, s12
 8017f2a:	e76f      	b.n	8017e0c <tVoc_set_tongue_and_touch_diameters+0x12c>
 8017f2c:	f3af 8000 	nop.w
 8017f30:	4d2562ef 	.word	0x4d2562ef
 8017f34:	400ba561 	.word	0x400ba561
 8017f38:	54442d18 	.word	0x54442d18
 8017f3c:	400921fb 	.word	0x400921fb
 8017f40:	3f2aaaab 	.word	0x3f2aaaab
 8017f44:	3f99999a 	.word	0x3f99999a
 8017f48:	3f4ccccd 	.word	0x3f4ccccd
 8017f4c:	3f70a3d7 	.word	0x3f70a3d7
 8017f50:	3f11745d 	.word	0x3f11745d
 8017f54:	3e68ba2f 	.word	0x3e68ba2f
 8017f58:	3de8ba2f 	.word	0x3de8ba2f
 8017f5c:	00000000 	.word	0x00000000

08017f60 <tVoc_set_tongue_shape_and_touch>:
{
 8017f60:	b500      	push	{lr}
	tongue_diameter += 2.05f;
 8017f62:	eddf 7a23 	vldr	s15, [pc, #140]	; 8017ff0 <tVoc_set_tongue_shape_and_touch+0x90>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8017f66:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8017f6a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8017ff4 <tVoc_set_tongue_shape_and_touch+0x94>
{
 8017f6e:	ed2d 8b04 	vpush	{d8-d9}
 8017f72:	fec1 1a87 	vmaxnm.f32	s3, s3, s14
 8017f76:	b083      	sub	sp, #12
	_tVoc* v = *voc;
 8017f78:	6803      	ldr	r3, [r0, #0]
	tongue_diameter += 2.05f;
 8017f7a:	eddf 9a1f 	vldr	s19, [pc, #124]	; 8017ff8 <tVoc_set_tongue_shape_and_touch+0x98>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8017f7e:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
	_tVoc* v = *voc;
 8017f82:	9301      	str	r3, [sp, #4]
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8017f84:	a801      	add	r0, sp, #4
	return v->tr->target_diameter;
 8017f86:	689b      	ldr	r3, [r3, #8]
	tongue_diameter += 2.05f;
 8017f88:	eee0 9aa7 	vfma.f32	s19, s1, s15
	touch_diameter *= 1.6f;
 8017f8c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8017ffc <tVoc_set_tongue_shape_and_touch+0x9c>
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8017f90:	edd3 8a14 	vldr	s17, [r3, #80]	; 0x50
	touch_diameter *= 1.6f;
 8017f94:	ee21 8aa7 	vmul.f32	s16, s3, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8017f98:	edd3 7a01 	vldr	s15, [r3, #4]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8017f9c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8017fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8017fa4:	6959      	ldr	r1, [r3, #20]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8017fa6:	ee37 7a68 	vsub.f32	s14, s14, s17
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8017faa:	eef0 1a48 	vmov.f32	s3, s16
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8017fae:	ee77 7ae6 	vsub.f32	s15, s15, s13
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8017fb2:	eee7 8a00 	vfma.f32	s17, s14, s0
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8017fb6:	eef0 0a69 	vmov.f32	s1, s19
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8017fba:	eea7 9a81 	vfma.f32	s18, s15, s2
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8017fbe:	eeb0 0a68 	vmov.f32	s0, s17
 8017fc2:	eeb0 1a49 	vmov.f32	s2, s18
 8017fc6:	f7ff fe8b 	bl	8017ce0 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
 8017fca:	9b01      	ldr	r3, [sp, #4]
 8017fcc:	689a      	ldr	r2, [r3, #8]
 8017fce:	edc2 8a2f 	vstr	s17, [r2, #188]	; 0xbc
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
 8017fd2:	689a      	ldr	r2, [r3, #8]
 8017fd4:	edc2 9a31 	vstr	s19, [r2, #196]	; 0xc4
	v->tr->turbuluencePointPosition[1] = touch_index;
 8017fd8:	689a      	ldr	r2, [r3, #8]
 8017fda:	ed82 9a30 	vstr	s18, [r2, #192]	; 0xc0
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
 8017fde:	689b      	ldr	r3, [r3, #8]
 8017fe0:	ed83 8a32 	vstr	s16, [r3, #200]	; 0xc8
}
 8017fe4:	b003      	add	sp, #12
 8017fe6:	ecbd 8b04 	vpop	{d8-d9}
 8017fea:	f85d fb04 	ldr.w	pc, [sp], #4
 8017fee:	bf00      	nop
 8017ff0:	3fb9999a 	.word	0x3fb9999a
 8017ff4:	00000000 	.word	0x00000000
 8017ff8:	40033333 	.word	0x40033333
 8017ffc:	3fcccccd 	.word	0x3fcccccd

08018000 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8018000:	4770      	bx	lr
 8018002:	bf00      	nop

08018004 <LEAF_init>:
{
 8018004:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 8018006:	6200      	str	r0, [r0, #32]
{
 8018008:	4604      	mov	r4, r0
 801800a:	461d      	mov	r5, r3
 801800c:	ed2d 8b02 	vpush	{d8}
 8018010:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8018014:	f7fb ff2e 	bl	8013e74 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8018018:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801801c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8018050 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8018020:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8018022:	4b0c      	ldr	r3, [pc, #48]	; (8018054 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8018024:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8018028:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 801802c:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 801802e:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 8018030:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8018034:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 8018038:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801803c:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8018040:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8018044:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8018048:	ecbd 8b02 	vpop	{d8}
 801804c:	bd38      	pop	{r3, r4, r5, pc}
 801804e:	bf00      	nop
 8018050:	40c90fdb 	.word	0x40c90fdb
 8018054:	08018001 	.word	0x08018001

08018058 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8018058:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 801805a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801805e:	2401      	movs	r4, #1
 8018060:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 8018062:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 8018066:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018068:	4718      	bx	r3
 801806a:	bf00      	nop

0801806c <arm_fir_interpolate_init_f32>:
 801806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801806e:	fbb2 f6f1 	udiv	r6, r2, r1
 8018072:	fb01 2416 	mls	r4, r1, r6, r2
 8018076:	9f06      	ldr	r7, [sp, #24]
 8018078:	b984      	cbnz	r4, 801809c <arm_fir_interpolate_init_f32+0x30>
 801807a:	6043      	str	r3, [r0, #4]
 801807c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8018080:	9b07      	ldr	r3, [sp, #28]
 8018082:	4605      	mov	r5, r0
 8018084:	7001      	strb	r1, [r0, #0]
 8018086:	4621      	mov	r1, r4
 8018088:	441a      	add	r2, r3
 801808a:	8046      	strh	r6, [r0, #2]
 801808c:	4638      	mov	r0, r7
 801808e:	4432      	add	r2, r6
 8018090:	0092      	lsls	r2, r2, #2
 8018092:	f000 fceb 	bl	8018a6c <memset>
 8018096:	60af      	str	r7, [r5, #8]
 8018098:	4620      	mov	r0, r4
 801809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801809c:	f06f 0001 	mvn.w	r0, #1
 80180a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180a2:	bf00      	nop

080180a4 <arm_fir_interpolate_f32>:
 80180a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180a8:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 80180ac:	b08f      	sub	sp, #60	; 0x3c
 80180ae:	8845      	ldrh	r5, [r0, #2]
 80180b0:	9202      	str	r2, [sp, #8]
 80180b2:	442c      	add	r4, r5
 80180b4:	6882      	ldr	r2, [r0, #8]
 80180b6:	930d      	str	r3, [sp, #52]	; 0x34
 80180b8:	089b      	lsrs	r3, r3, #2
 80180ba:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 80180be:	9107      	str	r1, [sp, #28]
 80180c0:	950b      	str	r5, [sp, #44]	; 0x2c
 80180c2:	4616      	mov	r6, r2
 80180c4:	9209      	str	r2, [sp, #36]	; 0x24
 80180c6:	f8d0 b004 	ldr.w	fp, [r0, #4]
 80180ca:	970a      	str	r7, [sp, #40]	; 0x28
 80180cc:	930c      	str	r3, [sp, #48]	; 0x30
 80180ce:	f000 811b 	beq.w	8018308 <arm_fir_interpolate_f32+0x264>
 80180d2:	462a      	mov	r2, r5
 80180d4:	468e      	mov	lr, r1
 80180d6:	4619      	mov	r1, r3
 80180d8:	4635      	mov	r5, r6
 80180da:	4613      	mov	r3, r2
 80180dc:	ea4f 0892 	mov.w	r8, r2, lsr #2
 80180e0:	f106 0c1c 	add.w	ip, r6, #28
 80180e4:	f10e 0210 	add.w	r2, lr, #16
 80180e8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80180ec:	f003 0903 	and.w	r9, r3, #3
 80180f0:	f107 0310 	add.w	r3, r7, #16
 80180f4:	f8cd b020 	str.w	fp, [sp, #32]
 80180f8:	4693      	mov	fp, r2
 80180fa:	e9cd 3103 	strd	r3, r1, [sp, #12]
 80180fe:	f106 030c 	add.w	r3, r6, #12
 8018102:	4466      	add	r6, ip
 8018104:	18eb      	adds	r3, r5, r3
 8018106:	9301      	str	r3, [sp, #4]
 8018108:	f85b 3c10 	ldr.w	r3, [fp, #-16]
 801810c:	9a03      	ldr	r2, [sp, #12]
 801810e:	f842 3c10 	str.w	r3, [r2, #-16]
 8018112:	f85b 3c0c 	ldr.w	r3, [fp, #-12]
 8018116:	f842 3c0c 	str.w	r3, [r2, #-12]
 801811a:	f85b 3c08 	ldr.w	r3, [fp, #-8]
 801811e:	f842 3c08 	str.w	r3, [r2, #-8]
 8018122:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 8018126:	f842 3c04 	str.w	r3, [r2, #-4]
 801812a:	f890 a000 	ldrb.w	sl, [r0]
 801812e:	4653      	mov	r3, sl
 8018130:	f1ba 0f00 	cmp.w	sl, #0
 8018134:	f000 80c5 	beq.w	80182c2 <arm_fir_interpolate_f32+0x21e>
 8018138:	f1ac 0310 	sub.w	r3, ip, #16
 801813c:	f8cd b018 	str.w	fp, [sp, #24]
 8018140:	4655      	mov	r5, sl
 8018142:	9f02      	ldr	r7, [sp, #8]
 8018144:	f04f 0e01 	mov.w	lr, #1
 8018148:	f8dd b020 	ldr.w	fp, [sp, #32]
 801814c:	9305      	str	r3, [sp, #20]
 801814e:	eba5 040e 	sub.w	r4, r5, lr
 8018152:	ed1c 2a07 	vldr	s4, [ip, #-28]	; 0xffffffe4
 8018156:	ed1c 3a06 	vldr	s6, [ip, #-24]	; 0xffffffe8
 801815a:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
 801815e:	ed5c 2a05 	vldr	s5, [ip, #-20]	; 0xffffffec
 8018162:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8018444 <arm_fir_interpolate_f32+0x3a0>
 8018166:	f1b8 0f00 	cmp.w	r8, #0
 801816a:	f000 8163 	beq.w	8018434 <arm_fir_interpolate_f32+0x390>
 801816e:	eef0 5a47 	vmov.f32	s11, s14
 8018172:	00a9      	lsls	r1, r5, #2
 8018174:	eef0 4a47 	vmov.f32	s9, s14
 8018178:	4662      	mov	r2, ip
 801817a:	eef0 6a47 	vmov.f32	s13, s14
 801817e:	4623      	mov	r3, r4
 8018180:	ed52 1a04 	vldr	s3, [r2, #-16]
 8018184:	3210      	adds	r2, #16
 8018186:	edd3 7a00 	vldr	s15, [r3]
 801818a:	440b      	add	r3, r1
 801818c:	ee27 6a82 	vmul.f32	s12, s15, s4
 8018190:	edd3 3a00 	vldr	s7, [r3]
 8018194:	ee27 4a83 	vmul.f32	s8, s15, s6
 8018198:	ed12 2a07 	vldr	s4, [r2, #-28]	; 0xffffffe4
 801819c:	ee27 5aa2 	vmul.f32	s10, s15, s5
 80181a0:	440b      	add	r3, r1
 80181a2:	ee61 7aa7 	vmul.f32	s15, s3, s15
 80181a6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80181aa:	ed93 6a00 	vldr	s12, [r3]
 80181ae:	ee63 0a83 	vmul.f32	s1, s7, s6
 80181b2:	ed12 3a06 	vldr	s6, [r2, #-24]	; 0xffffffe8
 80181b6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80181ba:	440b      	add	r3, r1
 80181bc:	ee21 1aa3 	vmul.f32	s2, s3, s7
 80181c0:	ee74 4a24 	vadd.f32	s9, s8, s9
 80181c4:	ed93 5a00 	vldr	s10, [r3]
 80181c8:	ee23 4aa2 	vmul.f32	s8, s7, s5
 80181cc:	440b      	add	r3, r1
 80181ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80181d2:	ee63 3a82 	vmul.f32	s7, s7, s4
 80181d6:	ee74 4a24 	vadd.f32	s9, s8, s9
 80181da:	ee70 0aa6 	vadd.f32	s1, s1, s13
 80181de:	ee21 4a86 	vmul.f32	s8, s3, s12
 80181e2:	ee66 6a22 	vmul.f32	s13, s12, s5
 80181e6:	ed52 2a05 	vldr	s5, [r2, #-20]	; 0xffffffec
 80181ea:	ee31 1a25 	vadd.f32	s2, s2, s11
 80181ee:	4296      	cmp	r6, r2
 80181f0:	ee73 7a87 	vadd.f32	s15, s7, s14
 80181f4:	ee62 5a06 	vmul.f32	s11, s4, s12
 80181f8:	ee26 7a03 	vmul.f32	s14, s12, s6
 80181fc:	ee61 1a85 	vmul.f32	s3, s3, s10
 8018200:	ee34 4a24 	vadd.f32	s8, s8, s9
 8018204:	ee35 6a81 	vadd.f32	s12, s11, s2
 8018208:	ee62 4a05 	vmul.f32	s9, s4, s10
 801820c:	ee63 5a05 	vmul.f32	s11, s6, s10
 8018210:	ee76 6aa0 	vadd.f32	s13, s13, s1
 8018214:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018218:	ee25 5a22 	vmul.f32	s10, s10, s5
 801821c:	ee71 6aa6 	vadd.f32	s13, s3, s13
 8018220:	ee74 4a84 	vadd.f32	s9, s9, s8
 8018224:	ee75 5a86 	vadd.f32	s11, s11, s12
 8018228:	ee35 7a07 	vadd.f32	s14, s10, s14
 801822c:	d1a8      	bne.n	8018180 <arm_fir_interpolate_f32+0xdc>
 801822e:	fb08 f305 	mul.w	r3, r8, r5
 8018232:	9a01      	ldr	r2, [sp, #4]
 8018234:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8018238:	f1b9 0f00 	cmp.w	r9, #0
 801823c:	d01e      	beq.n	801827c <arm_fir_interpolate_f32+0x1d8>
 801823e:	00ad      	lsls	r5, r5, #2
 8018240:	464b      	mov	r3, r9
 8018242:	ed94 6a00 	vldr	s12, [r4]
 8018246:	3b01      	subs	r3, #1
 8018248:	ecf2 7a01 	vldmia	r2!, {s15}
 801824c:	442c      	add	r4, r5
 801824e:	ee66 3a02 	vmul.f32	s7, s12, s4
 8018252:	ee26 4a03 	vmul.f32	s8, s12, s6
 8018256:	ee26 5a22 	vmul.f32	s10, s12, s5
 801825a:	eeb0 2a43 	vmov.f32	s4, s6
 801825e:	eeb0 3a62 	vmov.f32	s6, s5
 8018262:	eef0 2a67 	vmov.f32	s5, s15
 8018266:	ee67 7a86 	vmul.f32	s15, s15, s12
 801826a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801826e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8018272:	ee75 5a85 	vadd.f32	s11, s11, s10
 8018276:	ee37 7a27 	vadd.f32	s14, s14, s15
 801827a:	d1e2      	bne.n	8018242 <arm_fir_interpolate_f32+0x19e>
 801827c:	edc7 6a00 	vstr	s13, [r7]
 8018280:	45f2      	cmp	sl, lr
 8018282:	7803      	ldrb	r3, [r0, #0]
 8018284:	f10e 0201 	add.w	r2, lr, #1
 8018288:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801828c:	edc3 4a00 	vstr	s9, [r3]
 8018290:	7803      	ldrb	r3, [r0, #0]
 8018292:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8018296:	edc3 5a00 	vstr	s11, [r3]
 801829a:	7803      	ldrb	r3, [r0, #0]
 801829c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80182a0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80182a4:	f107 0704 	add.w	r7, r7, #4
 80182a8:	ed83 7a00 	vstr	s14, [r3]
 80182ac:	d002      	beq.n	80182b4 <arm_fir_interpolate_f32+0x210>
 80182ae:	4696      	mov	lr, r2
 80182b0:	7805      	ldrb	r5, [r0, #0]
 80182b2:	e74c      	b.n	801814e <arm_fir_interpolate_f32+0xaa>
 80182b4:	9b02      	ldr	r3, [sp, #8]
 80182b6:	f8dd b018 	ldr.w	fp, [sp, #24]
 80182ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80182be:	9302      	str	r3, [sp, #8]
 80182c0:	7803      	ldrb	r3, [r0, #0]
 80182c2:	9a03      	ldr	r2, [sp, #12]
 80182c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80182c8:	f10b 0b10 	add.w	fp, fp, #16
 80182cc:	f10c 0c10 	add.w	ip, ip, #16
 80182d0:	3210      	adds	r2, #16
 80182d2:	3610      	adds	r6, #16
 80182d4:	9203      	str	r2, [sp, #12]
 80182d6:	9a01      	ldr	r2, [sp, #4]
 80182d8:	3210      	adds	r2, #16
 80182da:	9201      	str	r2, [sp, #4]
 80182dc:	9a02      	ldr	r2, [sp, #8]
 80182de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80182e2:	9302      	str	r3, [sp, #8]
 80182e4:	9b04      	ldr	r3, [sp, #16]
 80182e6:	3b01      	subs	r3, #1
 80182e8:	9304      	str	r3, [sp, #16]
 80182ea:	f47f af0d 	bne.w	8018108 <arm_fir_interpolate_f32+0x64>
 80182ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182f0:	9a07      	ldr	r2, [sp, #28]
 80182f2:	011b      	lsls	r3, r3, #4
 80182f4:	f8dd b020 	ldr.w	fp, [sp, #32]
 80182f8:	441a      	add	r2, r3
 80182fa:	9207      	str	r2, [sp, #28]
 80182fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80182fe:	441a      	add	r2, r3
 8018300:	920a      	str	r2, [sp, #40]	; 0x28
 8018302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018304:	441a      	add	r2, r3
 8018306:	9209      	str	r2, [sp, #36]	; 0x24
 8018308:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801830a:	f013 0303 	ands.w	r3, r3, #3
 801830e:	f000 80b1 	beq.w	8018474 <arm_fir_interpolate_f32+0x3d0>
 8018312:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018314:	009d      	lsls	r5, r3, #2
 8018316:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018318:	0894      	lsrs	r4, r2, #2
 801831a:	f002 0a03 	and.w	sl, r2, #3
 801831e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018320:	0123      	lsls	r3, r4, #4
 8018322:	9106      	str	r1, [sp, #24]
 8018324:	f102 0110 	add.w	r1, r2, #16
 8018328:	46a1      	mov	r9, r4
 801832a:	f103 0e10 	add.w	lr, r3, #16
 801832e:	18d3      	adds	r3, r2, r3
 8018330:	9101      	str	r1, [sp, #4]
 8018332:	9907      	ldr	r1, [sp, #28]
 8018334:	4496      	add	lr, r2
 8018336:	950c      	str	r5, [sp, #48]	; 0x30
 8018338:	4429      	add	r1, r5
 801833a:	9303      	str	r3, [sp, #12]
 801833c:	f8cd b014 	str.w	fp, [sp, #20]
 8018340:	910a      	str	r1, [sp, #40]	; 0x28
 8018342:	9004      	str	r0, [sp, #16]
 8018344:	9a07      	ldr	r2, [sp, #28]
 8018346:	f852 3b04 	ldr.w	r3, [r2], #4
 801834a:	9207      	str	r2, [sp, #28]
 801834c:	9a01      	ldr	r2, [sp, #4]
 801834e:	3a10      	subs	r2, #16
 8018350:	9208      	str	r2, [sp, #32]
 8018352:	9a06      	ldr	r2, [sp, #24]
 8018354:	f842 3b04 	str.w	r3, [r2], #4
 8018358:	9b04      	ldr	r3, [sp, #16]
 801835a:	9206      	str	r2, [sp, #24]
 801835c:	f893 b000 	ldrb.w	fp, [r3]
 8018360:	f1bb 0f00 	cmp.w	fp, #0
 8018364:	d074      	beq.n	8018450 <arm_fir_interpolate_f32+0x3ac>
 8018366:	465f      	mov	r7, fp
 8018368:	f04f 0c01 	mov.w	ip, #1
 801836c:	9b05      	ldr	r3, [sp, #20]
 801836e:	eba7 000c 	sub.w	r0, r7, ip
 8018372:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8018376:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801837a:	f1b9 0f00 	cmp.w	r9, #0
 801837e:	d055      	beq.n	801842c <arm_fir_interpolate_f32+0x388>
 8018380:	b23a      	sxth	r2, r7
 8018382:	9b01      	ldr	r3, [sp, #4]
 8018384:	4601      	mov	r1, r0
 8018386:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8018444 <arm_fir_interpolate_f32+0x3a0>
 801838a:	0094      	lsls	r4, r2, #2
 801838c:	0115      	lsls	r5, r2, #4
 801838e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8018392:	ed13 7a04 	vldr	s14, [r3, #-16]
 8018396:	190e      	adds	r6, r1, r4
 8018398:	edd1 6a00 	vldr	s13, [r1]
 801839c:	3310      	adds	r3, #16
 801839e:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 80183a2:	4429      	add	r1, r5
 80183a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80183a8:	ed96 6a00 	vldr	s12, [r6]
 80183ac:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 80183b0:	1916      	adds	r6, r2, r4
 80183b2:	ee26 6a25 	vmul.f32	s12, s12, s11
 80183b6:	ed92 5a00 	vldr	s10, [r2]
 80183ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80183be:	edd6 5a00 	vldr	s11, [r6]
 80183c2:	ee26 7a85 	vmul.f32	s14, s13, s10
 80183c6:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 80183ca:	459e      	cmp	lr, r3
 80183cc:	442a      	add	r2, r5
 80183ce:	ee76 7a27 	vadd.f32	s15, s12, s15
 80183d2:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80183d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80183da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80183de:	d1d8      	bne.n	8018392 <arm_fir_interpolate_f32+0x2ee>
 80183e0:	fb09 f404 	mul.w	r4, r9, r4
 80183e4:	9a03      	ldr	r2, [sp, #12]
 80183e6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80183ea:	f1ba 0f00 	cmp.w	sl, #0
 80183ee:	d00c      	beq.n	801840a <arm_fir_interpolate_f32+0x366>
 80183f0:	00bf      	lsls	r7, r7, #2
 80183f2:	4653      	mov	r3, sl
 80183f4:	edd0 6a00 	vldr	s13, [r0]
 80183f8:	3b01      	subs	r3, #1
 80183fa:	ecb2 7a01 	vldmia	r2!, {s14}
 80183fe:	4438      	add	r0, r7
 8018400:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018404:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018408:	d1f4      	bne.n	80183f4 <arm_fir_interpolate_f32+0x350>
 801840a:	45e3      	cmp	fp, ip
 801840c:	ece8 7a01 	vstmia	r8!, {s15}
 8018410:	f10c 0301 	add.w	r3, ip, #1
 8018414:	d018      	beq.n	8018448 <arm_fir_interpolate_f32+0x3a4>
 8018416:	469c      	mov	ip, r3
 8018418:	9b04      	ldr	r3, [sp, #16]
 801841a:	781f      	ldrb	r7, [r3, #0]
 801841c:	9b05      	ldr	r3, [sp, #20]
 801841e:	eba7 000c 	sub.w	r0, r7, ip
 8018422:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018426:	f1b9 0f00 	cmp.w	r9, #0
 801842a:	d1a9      	bne.n	8018380 <arm_fir_interpolate_f32+0x2dc>
 801842c:	9a08      	ldr	r2, [sp, #32]
 801842e:	eddf 7a05 	vldr	s15, [pc, #20]	; 8018444 <arm_fir_interpolate_f32+0x3a0>
 8018432:	e7da      	b.n	80183ea <arm_fir_interpolate_f32+0x346>
 8018434:	9a05      	ldr	r2, [sp, #20]
 8018436:	eef0 5a47 	vmov.f32	s11, s14
 801843a:	eef0 4a47 	vmov.f32	s9, s14
 801843e:	eef0 6a47 	vmov.f32	s13, s14
 8018442:	e6f9      	b.n	8018238 <arm_fir_interpolate_f32+0x194>
 8018444:	00000000 	.word	0x00000000
 8018448:	9b02      	ldr	r3, [sp, #8]
 801844a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 801844e:	9302      	str	r3, [sp, #8]
 8018450:	9b03      	ldr	r3, [sp, #12]
 8018452:	f10e 0e04 	add.w	lr, lr, #4
 8018456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018458:	3304      	adds	r3, #4
 801845a:	9303      	str	r3, [sp, #12]
 801845c:	9b01      	ldr	r3, [sp, #4]
 801845e:	3304      	adds	r3, #4
 8018460:	9301      	str	r3, [sp, #4]
 8018462:	9b07      	ldr	r3, [sp, #28]
 8018464:	4293      	cmp	r3, r2
 8018466:	f47f af6d 	bne.w	8018344 <arm_fir_interpolate_f32+0x2a0>
 801846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801846c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801846e:	9804      	ldr	r0, [sp, #16]
 8018470:	4413      	add	r3, r2
 8018472:	9309      	str	r3, [sp, #36]	; 0x24
 8018474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018476:	6885      	ldr	r5, [r0, #8]
 8018478:	1e5c      	subs	r4, r3, #1
 801847a:	08a6      	lsrs	r6, r4, #2
 801847c:	d020      	beq.n	80184c0 <arm_fir_interpolate_f32+0x41c>
 801847e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018480:	4631      	mov	r1, r6
 8018482:	f103 0210 	add.w	r2, r3, #16
 8018486:	f105 0310 	add.w	r3, r5, #16
 801848a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 801848e:	3901      	subs	r1, #1
 8018490:	f102 0210 	add.w	r2, r2, #16
 8018494:	f103 0310 	add.w	r3, r3, #16
 8018498:	f843 0c20 	str.w	r0, [r3, #-32]
 801849c:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 80184a0:	f843 0c1c 	str.w	r0, [r3, #-28]
 80184a4:	f852 0c18 	ldr.w	r0, [r2, #-24]
 80184a8:	f843 0c18 	str.w	r0, [r3, #-24]
 80184ac:	f852 0c14 	ldr.w	r0, [r2, #-20]
 80184b0:	f843 0c14 	str.w	r0, [r3, #-20]
 80184b4:	d1e9      	bne.n	801848a <arm_fir_interpolate_f32+0x3e6>
 80184b6:	0133      	lsls	r3, r6, #4
 80184b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184ba:	441d      	add	r5, r3
 80184bc:	441a      	add	r2, r3
 80184be:	9209      	str	r2, [sp, #36]	; 0x24
 80184c0:	f014 0403 	ands.w	r4, r4, #3
 80184c4:	d00a      	beq.n	80184dc <arm_fir_interpolate_f32+0x438>
 80184c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80184c8:	3c01      	subs	r4, #1
 80184ca:	6813      	ldr	r3, [r2, #0]
 80184cc:	602b      	str	r3, [r5, #0]
 80184ce:	d005      	beq.n	80184dc <arm_fir_interpolate_f32+0x438>
 80184d0:	6853      	ldr	r3, [r2, #4]
 80184d2:	2c01      	cmp	r4, #1
 80184d4:	606b      	str	r3, [r5, #4]
 80184d6:	d001      	beq.n	80184dc <arm_fir_interpolate_f32+0x438>
 80184d8:	6893      	ldr	r3, [r2, #8]
 80184da:	60ab      	str	r3, [r5, #8]
 80184dc:	b00f      	add	sp, #60	; 0x3c
 80184de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184e2:	bf00      	nop

080184e4 <arm_fir_decimate_init_f32>:
 80184e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184e8:	e9dd 8c06 	ldrd	r8, ip, [sp, #24]
 80184ec:	fbbc f4f2 	udiv	r4, ip, r2
 80184f0:	fb02 c414 	mls	r4, r2, r4, ip
 80184f4:	b99c      	cbnz	r4, 801851e <arm_fir_decimate_init_f32+0x3a>
 80184f6:	460f      	mov	r7, r1
 80184f8:	4616      	mov	r6, r2
 80184fa:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80184fe:	4605      	mov	r5, r0
 8018500:	443a      	add	r2, r7
 8018502:	8069      	strh	r1, [r5, #2]
 8018504:	6043      	str	r3, [r0, #4]
 8018506:	4621      	mov	r1, r4
 8018508:	4462      	add	r2, ip
 801850a:	4640      	mov	r0, r8
 801850c:	0092      	lsls	r2, r2, #2
 801850e:	f000 faad 	bl	8018a6c <memset>
 8018512:	4620      	mov	r0, r4
 8018514:	f8c5 8008 	str.w	r8, [r5, #8]
 8018518:	702e      	strb	r6, [r5, #0]
 801851a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801851e:	f06f 0001 	mvn.w	r0, #1
 8018522:	e7fa      	b.n	801851a <arm_fir_decimate_init_f32+0x36>

08018524 <arm_fir_decimate_f32>:
 8018524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018528:	4605      	mov	r5, r0
 801852a:	b08d      	sub	sp, #52	; 0x34
 801852c:	4694      	mov	ip, r2
 801852e:	782c      	ldrb	r4, [r5, #0]
 8018530:	886f      	ldrh	r7, [r5, #2]
 8018532:	9001      	str	r0, [sp, #4]
 8018534:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8018538:	68ae      	ldr	r6, [r5, #8]
 801853a:	4438      	add	r0, r7
 801853c:	686d      	ldr	r5, [r5, #4]
 801853e:	9207      	str	r2, [sp, #28]
 8018540:	970a      	str	r7, [sp, #40]	; 0x28
 8018542:	eb06 0b80 	add.w	fp, r6, r0, lsl #2
 8018546:	9508      	str	r5, [sp, #32]
 8018548:	fbb3 f3f4 	udiv	r3, r3, r4
 801854c:	930b      	str	r3, [sp, #44]	; 0x2c
 801854e:	089b      	lsrs	r3, r3, #2
 8018550:	9309      	str	r3, [sp, #36]	; 0x24
 8018552:	f000 80ef 	beq.w	8018734 <arm_fir_decimate_f32+0x210>
 8018556:	08ba      	lsrs	r2, r7, #2
 8018558:	462b      	mov	r3, r5
 801855a:	3510      	adds	r5, #16
 801855c:	f007 0703 	and.w	r7, r7, #3
 8018560:	9205      	str	r2, [sp, #20]
 8018562:	0112      	lsls	r2, r2, #4
 8018564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018566:	f10c 0910 	add.w	r9, ip, #16
 801856a:	4413      	add	r3, r2
 801856c:	9100      	str	r1, [sp, #0]
 801856e:	eb05 0e02 	add.w	lr, r5, r2
 8018572:	4611      	mov	r1, r2
 8018574:	9503      	str	r5, [sp, #12]
 8018576:	9704      	str	r7, [sp, #16]
 8018578:	9002      	str	r0, [sp, #8]
 801857a:	9306      	str	r3, [sp, #24]
 801857c:	00a4      	lsls	r4, r4, #2
 801857e:	4658      	mov	r0, fp
 8018580:	9a00      	ldr	r2, [sp, #0]
 8018582:	4623      	mov	r3, r4
 8018584:	f852 5b04 	ldr.w	r5, [r2], #4
 8018588:	3b01      	subs	r3, #1
 801858a:	f840 5b04 	str.w	r5, [r0], #4
 801858e:	d1f9      	bne.n	8018584 <arm_fir_decimate_f32+0x60>
 8018590:	9b01      	ldr	r3, [sp, #4]
 8018592:	00a4      	lsls	r4, r4, #2
 8018594:	eddf 0abe 	vldr	s1, [pc, #760]	; 8018890 <arm_fir_decimate_f32+0x36c>
 8018598:	f893 8000 	ldrb.w	r8, [r3]
 801859c:	44a3      	add	fp, r4
 801859e:	9b00      	ldr	r3, [sp, #0]
 80185a0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80185a4:	4423      	add	r3, r4
 80185a6:	eb06 0708 	add.w	r7, r6, r8
 80185aa:	9300      	str	r3, [sp, #0]
 80185ac:	eb07 0c08 	add.w	ip, r7, r8
 80185b0:	9b05      	ldr	r3, [sp, #20]
 80185b2:	eb0c 0a08 	add.w	sl, ip, r8
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	f000 815c 	beq.w	8018874 <arm_fir_decimate_f32+0x350>
 80185bc:	eef0 4a60 	vmov.f32	s9, s1
 80185c0:	9b03      	ldr	r3, [sp, #12]
 80185c2:	eef0 7a60 	vmov.f32	s15, s1
 80185c6:	f106 0510 	add.w	r5, r6, #16
 80185ca:	eeb0 7a60 	vmov.f32	s14, s1
 80185ce:	f107 0410 	add.w	r4, r7, #16
 80185d2:	f10c 0010 	add.w	r0, ip, #16
 80185d6:	f10a 0210 	add.w	r2, sl, #16
 80185da:	ed53 5a04 	vldr	s11, [r3, #-16]
 80185de:	3310      	adds	r3, #16
 80185e0:	ed12 5a04 	vldr	s10, [r2, #-16]
 80185e4:	3510      	adds	r5, #16
 80185e6:	ed55 6a08 	vldr	s13, [r5, #-32]	; 0xffffffe0
 80185ea:	3410      	adds	r4, #16
 80185ec:	ed14 1a08 	vldr	s2, [r4, #-32]	; 0xffffffe0
 80185f0:	3010      	adds	r0, #16
 80185f2:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 80185f6:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80185fa:	ee25 1a81 	vmul.f32	s2, s11, s2
 80185fe:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 8018602:	ee65 3aa3 	vmul.f32	s7, s11, s7
 8018606:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 801860a:	ee65 5a85 	vmul.f32	s11, s11, s10
 801860e:	ed15 2a07 	vldr	s4, [r5, #-28]	; 0xffffffe4
 8018612:	ed12 5a03 	vldr	s10, [r2, #-12]
 8018616:	ee36 7a87 	vadd.f32	s14, s13, s14
 801861a:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 801861e:	ee73 1aa4 	vadd.f32	s3, s7, s9
 8018622:	ee26 2a02 	vmul.f32	s4, s12, s4
 8018626:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 801862a:	ee31 1a27 	vadd.f32	s2, s2, s15
 801862e:	ed55 3a06 	vldr	s7, [r5, #-24]	; 0xffffffe8
 8018632:	ee66 7a22 	vmul.f32	s15, s12, s5
 8018636:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 801863a:	ee26 3a03 	vmul.f32	s6, s12, s6
 801863e:	ed50 4a06 	vldr	s9, [r0, #-24]	; 0xffffffe8
 8018642:	ee75 5aa0 	vadd.f32	s11, s11, s1
 8018646:	ed52 0a02 	vldr	s1, [r2, #-8]
 801864a:	ee26 6a05 	vmul.f32	s12, s12, s10
 801864e:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 8018652:	ee72 2a07 	vadd.f32	s5, s4, s14
 8018656:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 801865a:	ee77 7a81 	vadd.f32	s15, s15, s2
 801865e:	ed10 2a05 	vldr	s4, [r0, #-20]	; 0xffffffec
 8018662:	ee33 3a21 	vadd.f32	s6, s6, s3
 8018666:	ed14 1a05 	vldr	s2, [r4, #-20]	; 0xffffffec
 801866a:	ee66 3aa3 	vmul.f32	s7, s13, s7
 801866e:	ed52 1a01 	vldr	s3, [r2, #-4]
 8018672:	ee26 4a84 	vmul.f32	s8, s13, s8
 8018676:	459e      	cmp	lr, r3
 8018678:	ee66 4aa4 	vmul.f32	s9, s13, s9
 801867c:	f102 0210 	add.w	r2, r2, #16
 8018680:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8018684:	ee36 6a25 	vadd.f32	s12, s12, s11
 8018688:	ee25 7a07 	vmul.f32	s14, s10, s14
 801868c:	ee34 4a27 	vadd.f32	s8, s8, s15
 8018690:	ee74 4a83 	vadd.f32	s9, s9, s6
 8018694:	ee65 7a01 	vmul.f32	s15, s10, s2
 8018698:	ee25 3a02 	vmul.f32	s6, s10, s4
 801869c:	ee73 3aa2 	vadd.f32	s7, s7, s5
 80186a0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80186a4:	ee25 5a21 	vmul.f32	s10, s10, s3
 80186a8:	ee37 7a23 	vadd.f32	s14, s14, s7
 80186ac:	ee77 7a84 	vadd.f32	s15, s15, s8
 80186b0:	ee73 4a24 	vadd.f32	s9, s6, s9
 80186b4:	ee75 0a26 	vadd.f32	s1, s10, s13
 80186b8:	d18f      	bne.n	80185da <arm_fir_decimate_f32+0xb6>
 80186ba:	440e      	add	r6, r1
 80186bc:	440f      	add	r7, r1
 80186be:	448c      	add	ip, r1
 80186c0:	eb0a 0001 	add.w	r0, sl, r1
 80186c4:	9a06      	ldr	r2, [sp, #24]
 80186c6:	9b04      	ldr	r3, [sp, #16]
 80186c8:	b1db      	cbz	r3, 8018702 <arm_fir_decimate_f32+0x1de>
 80186ca:	ecb2 5a01 	vldmia	r2!, {s10}
 80186ce:	3b01      	subs	r3, #1
 80186d0:	ecf6 2a01 	vldmia	r6!, {s5}
 80186d4:	ecf7 3a01 	vldmia	r7!, {s7}
 80186d8:	ecbc 4a01 	vldmia	ip!, {s8}
 80186dc:	ee65 2a22 	vmul.f32	s5, s10, s5
 80186e0:	ecf0 6a01 	vldmia	r0!, {s13}
 80186e4:	ee65 3a23 	vmul.f32	s7, s10, s7
 80186e8:	ee25 4a04 	vmul.f32	s8, s10, s8
 80186ec:	ee25 5a26 	vmul.f32	s10, s10, s13
 80186f0:	ee37 7a22 	vadd.f32	s14, s14, s5
 80186f4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80186f8:	ee74 4a84 	vadd.f32	s9, s9, s8
 80186fc:	ee70 0a85 	vadd.f32	s1, s1, s10
 8018700:	d1e3      	bne.n	80186ca <arm_fir_decimate_f32+0x1a6>
 8018702:	9b02      	ldr	r3, [sp, #8]
 8018704:	eb0a 0608 	add.w	r6, sl, r8
 8018708:	ed09 7a04 	vstr	s14, [r9, #-16]
 801870c:	f109 0910 	add.w	r9, r9, #16
 8018710:	3b01      	subs	r3, #1
 8018712:	ed49 7a07 	vstr	s15, [r9, #-28]	; 0xffffffe4
 8018716:	ed49 4a06 	vstr	s9, [r9, #-24]	; 0xffffffe8
 801871a:	ed49 0a05 	vstr	s1, [r9, #-20]	; 0xffffffec
 801871e:	9302      	str	r3, [sp, #8]
 8018720:	d002      	beq.n	8018728 <arm_fir_decimate_f32+0x204>
 8018722:	9b01      	ldr	r3, [sp, #4]
 8018724:	781c      	ldrb	r4, [r3, #0]
 8018726:	e729      	b.n	801857c <arm_fir_decimate_f32+0x58>
 8018728:	9b07      	ldr	r3, [sp, #28]
 801872a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801872c:	9900      	ldr	r1, [sp, #0]
 801872e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8018732:	9307      	str	r3, [sp, #28]
 8018734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018736:	f013 0803 	ands.w	r8, r3, #3
 801873a:	d067      	beq.n	801880c <arm_fir_decimate_f32+0x2e8>
 801873c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801873e:	9808      	ldr	r0, [sp, #32]
 8018740:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8018744:	9d07      	ldr	r5, [sp, #28]
 8018746:	4602      	mov	r2, r0
 8018748:	f003 0703 	and.w	r7, r3, #3
 801874c:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
 8018750:	f8cd e000 	str.w	lr, [sp]
 8018754:	3210      	adds	r2, #16
 8018756:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 801875a:	eb00 090c 	add.w	r9, r0, ip
 801875e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018762:	eb02 040c 	add.w	r4, r2, ip
 8018766:	46aa      	mov	sl, r5
 8018768:	9203      	str	r2, [sp, #12]
 801876a:	f89e 5000 	ldrb.w	r5, [lr]
 801876e:	4658      	mov	r0, fp
 8018770:	460a      	mov	r2, r1
 8018772:	462b      	mov	r3, r5
 8018774:	ecf2 7a01 	vldmia	r2!, {s15}
 8018778:	3b01      	subs	r3, #1
 801877a:	ece0 7a01 	vstmia	r0!, {s15}
 801877e:	d1f9      	bne.n	8018774 <arm_fir_decimate_f32+0x250>
 8018780:	00ad      	lsls	r5, r5, #2
 8018782:	9b00      	ldr	r3, [sp, #0]
 8018784:	4429      	add	r1, r5
 8018786:	44ab      	add	fp, r5
 8018788:	2b00      	cmp	r3, #0
 801878a:	d07c      	beq.n	8018886 <arm_fir_decimate_f32+0x362>
 801878c:	9b03      	ldr	r3, [sp, #12]
 801878e:	f106 0210 	add.w	r2, r6, #16
 8018792:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8018890 <arm_fir_decimate_f32+0x36c>
 8018796:	ed13 7a04 	vldr	s14, [r3, #-16]
 801879a:	3310      	adds	r3, #16
 801879c:	ed52 6a04 	vldr	s13, [r2, #-16]
 80187a0:	3210      	adds	r2, #16
 80187a2:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 80187a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80187aa:	ed52 5a07 	vldr	s11, [r2, #-28]	; 0xffffffe4
 80187ae:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 80187b2:	ee26 6a25 	vmul.f32	s12, s12, s11
 80187b6:	ed12 5a06 	vldr	s10, [r2, #-24]	; 0xffffffe8
 80187ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187be:	ed53 5a05 	vldr	s11, [r3, #-20]	; 0xffffffec
 80187c2:	ee26 7a85 	vmul.f32	s14, s13, s10
 80187c6:	ed52 6a05 	vldr	s13, [r2, #-20]	; 0xffffffec
 80187ca:	429c      	cmp	r4, r3
 80187cc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80187d0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 80187d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80187d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80187dc:	d1db      	bne.n	8018796 <arm_fir_decimate_f32+0x272>
 80187de:	eb06 000c 	add.w	r0, r6, ip
 80187e2:	464a      	mov	r2, r9
 80187e4:	b157      	cbz	r7, 80187fc <arm_fir_decimate_f32+0x2d8>
 80187e6:	463b      	mov	r3, r7
 80187e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80187ec:	3b01      	subs	r3, #1
 80187ee:	ecf0 6a01 	vldmia	r0!, {s13}
 80187f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80187f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80187fa:	d1f5      	bne.n	80187e8 <arm_fir_decimate_f32+0x2c4>
 80187fc:	f89e 3000 	ldrb.w	r3, [lr]
 8018800:	ecea 7a01 	vstmia	sl!, {s15}
 8018804:	45c2      	cmp	sl, r8
 8018806:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 801880a:	d1ae      	bne.n	801876a <arm_fir_decimate_f32+0x246>
 801880c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801880e:	1e5c      	subs	r4, r3, #1
 8018810:	9b01      	ldr	r3, [sp, #4]
 8018812:	08a5      	lsrs	r5, r4, #2
 8018814:	689f      	ldr	r7, [r3, #8]
 8018816:	d01d      	beq.n	8018854 <arm_fir_decimate_f32+0x330>
 8018818:	f106 0210 	add.w	r2, r6, #16
 801881c:	f107 0310 	add.w	r3, r7, #16
 8018820:	4629      	mov	r1, r5
 8018822:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8018826:	3901      	subs	r1, #1
 8018828:	f102 0210 	add.w	r2, r2, #16
 801882c:	f103 0310 	add.w	r3, r3, #16
 8018830:	f843 0c20 	str.w	r0, [r3, #-32]
 8018834:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 8018838:	f843 0c1c 	str.w	r0, [r3, #-28]
 801883c:	f852 0c18 	ldr.w	r0, [r2, #-24]
 8018840:	f843 0c18 	str.w	r0, [r3, #-24]
 8018844:	f852 0c14 	ldr.w	r0, [r2, #-20]
 8018848:	f843 0c14 	str.w	r0, [r3, #-20]
 801884c:	d1e9      	bne.n	8018822 <arm_fir_decimate_f32+0x2fe>
 801884e:	012d      	lsls	r5, r5, #4
 8018850:	442e      	add	r6, r5
 8018852:	442f      	add	r7, r5
 8018854:	f014 0403 	ands.w	r4, r4, #3
 8018858:	d009      	beq.n	801886e <arm_fir_decimate_f32+0x34a>
 801885a:	6833      	ldr	r3, [r6, #0]
 801885c:	3c01      	subs	r4, #1
 801885e:	603b      	str	r3, [r7, #0]
 8018860:	d005      	beq.n	801886e <arm_fir_decimate_f32+0x34a>
 8018862:	6873      	ldr	r3, [r6, #4]
 8018864:	2c01      	cmp	r4, #1
 8018866:	607b      	str	r3, [r7, #4]
 8018868:	d001      	beq.n	801886e <arm_fir_decimate_f32+0x34a>
 801886a:	68b3      	ldr	r3, [r6, #8]
 801886c:	60bb      	str	r3, [r7, #8]
 801886e:	b00d      	add	sp, #52	; 0x34
 8018870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018874:	4650      	mov	r0, sl
 8018876:	9a08      	ldr	r2, [sp, #32]
 8018878:	eef0 4a60 	vmov.f32	s9, s1
 801887c:	eef0 7a60 	vmov.f32	s15, s1
 8018880:	eeb0 7a60 	vmov.f32	s14, s1
 8018884:	e71f      	b.n	80186c6 <arm_fir_decimate_f32+0x1a2>
 8018886:	9a08      	ldr	r2, [sp, #32]
 8018888:	4630      	mov	r0, r6
 801888a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8018890 <arm_fir_decimate_f32+0x36c>
 801888e:	e7a9      	b.n	80187e4 <arm_fir_decimate_f32+0x2c0>
 8018890:	00000000 	.word	0x00000000

08018894 <arm_sin_f32>:
 8018894:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8018914 <arm_sin_f32+0x80>
 8018898:	ee20 0a27 	vmul.f32	s0, s0, s15
 801889c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80188a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80188a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188a8:	d504      	bpl.n	80188b4 <arm_sin_f32+0x20>
 80188aa:	ee17 3a90 	vmov	r3, s15
 80188ae:	3b01      	subs	r3, #1
 80188b0:	ee07 3a90 	vmov	s15, r3
 80188b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80188b8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8018918 <arm_sin_f32+0x84>
 80188bc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80188c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80188c4:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80188c8:	ee17 3a10 	vmov	r3, s14
 80188cc:	b29b      	uxth	r3, r3
 80188ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80188d2:	d21a      	bcs.n	801890a <arm_sin_f32+0x76>
 80188d4:	ee07 3a10 	vmov	s14, r3
 80188d8:	1c59      	adds	r1, r3, #1
 80188da:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 80188de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80188e2:	4a0e      	ldr	r2, [pc, #56]	; (801891c <arm_sin_f32+0x88>)
 80188e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80188e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80188ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80188f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80188f4:	edd3 6a00 	vldr	s13, [r3]
 80188f8:	ed92 7a00 	vldr	s14, [r2]
 80188fc:	ee20 0a26 	vmul.f32	s0, s0, s13
 8018900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018904:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018908:	4770      	bx	lr
 801890a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801890e:	2101      	movs	r1, #1
 8018910:	2300      	movs	r3, #0
 8018912:	e7e6      	b.n	80188e2 <arm_sin_f32+0x4e>
 8018914:	3e22f983 	.word	0x3e22f983
 8018918:	44000000 	.word	0x44000000
 801891c:	08025a28 	.word	0x08025a28

08018920 <arm_cos_f32>:
 8018920:	eddf 7a21 	vldr	s15, [pc, #132]	; 80189a8 <arm_cos_f32+0x88>
 8018924:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8018928:	ee20 0a27 	vmul.f32	s0, s0, s15
 801892c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8018930:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018934:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801893c:	d504      	bpl.n	8018948 <arm_cos_f32+0x28>
 801893e:	ee17 3a90 	vmov	r3, s15
 8018942:	3b01      	subs	r3, #1
 8018944:	ee07 3a90 	vmov	s15, r3
 8018948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801894c:	eddf 6a17 	vldr	s13, [pc, #92]	; 80189ac <arm_cos_f32+0x8c>
 8018950:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018954:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018958:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801895c:	ee17 3a10 	vmov	r3, s14
 8018960:	b29b      	uxth	r3, r3
 8018962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018966:	d21a      	bcs.n	801899e <arm_cos_f32+0x7e>
 8018968:	ee07 3a10 	vmov	s14, r3
 801896c:	1c59      	adds	r1, r3, #1
 801896e:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8018972:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018976:	4a0e      	ldr	r2, [pc, #56]	; (80189b0 <arm_cos_f32+0x90>)
 8018978:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801897c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018980:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018984:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018988:	edd3 6a00 	vldr	s13, [r3]
 801898c:	ed92 7a00 	vldr	s14, [r2]
 8018990:	ee20 0a26 	vmul.f32	s0, s0, s13
 8018994:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018998:	ee30 0a27 	vadd.f32	s0, s0, s15
 801899c:	4770      	bx	lr
 801899e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80189a2:	2101      	movs	r1, #1
 80189a4:	2300      	movs	r3, #0
 80189a6:	e7e6      	b.n	8018976 <arm_cos_f32+0x56>
 80189a8:	3e22f983 	.word	0x3e22f983
 80189ac:	44000000 	.word	0x44000000
 80189b0:	08025a28 	.word	0x08025a28

080189b4 <__itoa>:
 80189b4:	1e93      	subs	r3, r2, #2
 80189b6:	2b22      	cmp	r3, #34	; 0x22
 80189b8:	b510      	push	{r4, lr}
 80189ba:	460c      	mov	r4, r1
 80189bc:	d904      	bls.n	80189c8 <__itoa+0x14>
 80189be:	2300      	movs	r3, #0
 80189c0:	700b      	strb	r3, [r1, #0]
 80189c2:	461c      	mov	r4, r3
 80189c4:	4620      	mov	r0, r4
 80189c6:	bd10      	pop	{r4, pc}
 80189c8:	2a0a      	cmp	r2, #10
 80189ca:	d109      	bne.n	80189e0 <__itoa+0x2c>
 80189cc:	2800      	cmp	r0, #0
 80189ce:	da07      	bge.n	80189e0 <__itoa+0x2c>
 80189d0:	232d      	movs	r3, #45	; 0x2d
 80189d2:	700b      	strb	r3, [r1, #0]
 80189d4:	4240      	negs	r0, r0
 80189d6:	2101      	movs	r1, #1
 80189d8:	4421      	add	r1, r4
 80189da:	f000 f805 	bl	80189e8 <__utoa>
 80189de:	e7f1      	b.n	80189c4 <__itoa+0x10>
 80189e0:	2100      	movs	r1, #0
 80189e2:	e7f9      	b.n	80189d8 <__itoa+0x24>

080189e4 <itoa>:
 80189e4:	f7ff bfe6 	b.w	80189b4 <__itoa>

080189e8 <__utoa>:
 80189e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189ea:	4c1f      	ldr	r4, [pc, #124]	; (8018a68 <__utoa+0x80>)
 80189ec:	b08b      	sub	sp, #44	; 0x2c
 80189ee:	4605      	mov	r5, r0
 80189f0:	460b      	mov	r3, r1
 80189f2:	466e      	mov	r6, sp
 80189f4:	f104 0c20 	add.w	ip, r4, #32
 80189f8:	6820      	ldr	r0, [r4, #0]
 80189fa:	6861      	ldr	r1, [r4, #4]
 80189fc:	4637      	mov	r7, r6
 80189fe:	c703      	stmia	r7!, {r0, r1}
 8018a00:	3408      	adds	r4, #8
 8018a02:	4564      	cmp	r4, ip
 8018a04:	463e      	mov	r6, r7
 8018a06:	d1f7      	bne.n	80189f8 <__utoa+0x10>
 8018a08:	7921      	ldrb	r1, [r4, #4]
 8018a0a:	7139      	strb	r1, [r7, #4]
 8018a0c:	1e91      	subs	r1, r2, #2
 8018a0e:	6820      	ldr	r0, [r4, #0]
 8018a10:	6038      	str	r0, [r7, #0]
 8018a12:	2922      	cmp	r1, #34	; 0x22
 8018a14:	f04f 0100 	mov.w	r1, #0
 8018a18:	d904      	bls.n	8018a24 <__utoa+0x3c>
 8018a1a:	7019      	strb	r1, [r3, #0]
 8018a1c:	460b      	mov	r3, r1
 8018a1e:	4618      	mov	r0, r3
 8018a20:	b00b      	add	sp, #44	; 0x2c
 8018a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a24:	1e58      	subs	r0, r3, #1
 8018a26:	4684      	mov	ip, r0
 8018a28:	fbb5 f7f2 	udiv	r7, r5, r2
 8018a2c:	fb02 5617 	mls	r6, r2, r7, r5
 8018a30:	3628      	adds	r6, #40	; 0x28
 8018a32:	446e      	add	r6, sp
 8018a34:	460c      	mov	r4, r1
 8018a36:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8018a3a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8018a3e:	462e      	mov	r6, r5
 8018a40:	42b2      	cmp	r2, r6
 8018a42:	f101 0101 	add.w	r1, r1, #1
 8018a46:	463d      	mov	r5, r7
 8018a48:	d9ee      	bls.n	8018a28 <__utoa+0x40>
 8018a4a:	2200      	movs	r2, #0
 8018a4c:	545a      	strb	r2, [r3, r1]
 8018a4e:	1919      	adds	r1, r3, r4
 8018a50:	1aa5      	subs	r5, r4, r2
 8018a52:	42aa      	cmp	r2, r5
 8018a54:	dae3      	bge.n	8018a1e <__utoa+0x36>
 8018a56:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8018a5a:	780e      	ldrb	r6, [r1, #0]
 8018a5c:	7006      	strb	r6, [r0, #0]
 8018a5e:	3201      	adds	r2, #1
 8018a60:	f801 5901 	strb.w	r5, [r1], #-1
 8018a64:	e7f4      	b.n	8018a50 <__utoa+0x68>
 8018a66:	bf00      	nop
 8018a68:	0802622c 	.word	0x0802622c

08018a6c <memset>:
 8018a6c:	4402      	add	r2, r0
 8018a6e:	4603      	mov	r3, r0
 8018a70:	4293      	cmp	r3, r2
 8018a72:	d100      	bne.n	8018a76 <memset+0xa>
 8018a74:	4770      	bx	lr
 8018a76:	f803 1b01 	strb.w	r1, [r3], #1
 8018a7a:	e7f9      	b.n	8018a70 <memset+0x4>

08018a7c <__libc_init_array>:
 8018a7c:	b570      	push	{r4, r5, r6, lr}
 8018a7e:	4d0d      	ldr	r5, [pc, #52]	; (8018ab4 <__libc_init_array+0x38>)
 8018a80:	4c0d      	ldr	r4, [pc, #52]	; (8018ab8 <__libc_init_array+0x3c>)
 8018a82:	1b64      	subs	r4, r4, r5
 8018a84:	10a4      	asrs	r4, r4, #2
 8018a86:	2600      	movs	r6, #0
 8018a88:	42a6      	cmp	r6, r4
 8018a8a:	d109      	bne.n	8018aa0 <__libc_init_array+0x24>
 8018a8c:	4d0b      	ldr	r5, [pc, #44]	; (8018abc <__libc_init_array+0x40>)
 8018a8e:	4c0c      	ldr	r4, [pc, #48]	; (8018ac0 <__libc_init_array+0x44>)
 8018a90:	f002 fc4a 	bl	801b328 <_init>
 8018a94:	1b64      	subs	r4, r4, r5
 8018a96:	10a4      	asrs	r4, r4, #2
 8018a98:	2600      	movs	r6, #0
 8018a9a:	42a6      	cmp	r6, r4
 8018a9c:	d105      	bne.n	8018aaa <__libc_init_array+0x2e>
 8018a9e:	bd70      	pop	{r4, r5, r6, pc}
 8018aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8018aa4:	4798      	blx	r3
 8018aa6:	3601      	adds	r6, #1
 8018aa8:	e7ee      	b.n	8018a88 <__libc_init_array+0xc>
 8018aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8018aae:	4798      	blx	r3
 8018ab0:	3601      	adds	r6, #1
 8018ab2:	e7f2      	b.n	8018a9a <__libc_init_array+0x1e>
 8018ab4:	08027698 	.word	0x08027698
 8018ab8:	08027698 	.word	0x08027698
 8018abc:	08027698 	.word	0x08027698
 8018ac0:	0802769c 	.word	0x0802769c

08018ac4 <memcpy>:
 8018ac4:	440a      	add	r2, r1
 8018ac6:	4291      	cmp	r1, r2
 8018ac8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018acc:	d100      	bne.n	8018ad0 <memcpy+0xc>
 8018ace:	4770      	bx	lr
 8018ad0:	b510      	push	{r4, lr}
 8018ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018ada:	4291      	cmp	r1, r2
 8018adc:	d1f9      	bne.n	8018ad2 <memcpy+0xe>
 8018ade:	bd10      	pop	{r4, pc}

08018ae0 <frexpf>:
 8018ae0:	ee10 3a10 	vmov	r3, s0
 8018ae4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018ae8:	2100      	movs	r1, #0
 8018aea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018aee:	6001      	str	r1, [r0, #0]
 8018af0:	da19      	bge.n	8018b26 <frexpf+0x46>
 8018af2:	b1c2      	cbz	r2, 8018b26 <frexpf+0x46>
 8018af4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8018af8:	d10a      	bne.n	8018b10 <frexpf+0x30>
 8018afa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8018b28 <frexpf+0x48>
 8018afe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018b02:	f06f 0118 	mvn.w	r1, #24
 8018b06:	ee17 3a90 	vmov	r3, s15
 8018b0a:	6001      	str	r1, [r0, #0]
 8018b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018b10:	6801      	ldr	r1, [r0, #0]
 8018b12:	15d2      	asrs	r2, r2, #23
 8018b14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018b18:	3a7e      	subs	r2, #126	; 0x7e
 8018b1a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8018b1e:	4411      	add	r1, r2
 8018b20:	ee00 3a10 	vmov	s0, r3
 8018b24:	6001      	str	r1, [r0, #0]
 8018b26:	4770      	bx	lr
 8018b28:	4c000000 	.word	0x4c000000

08018b2c <expf>:
 8018b2c:	ee10 2a10 	vmov	r2, s0
 8018b30:	f240 412a 	movw	r1, #1066	; 0x42a
 8018b34:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8018b38:	428b      	cmp	r3, r1
 8018b3a:	b430      	push	{r4, r5}
 8018b3c:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8018b40:	d92a      	bls.n	8018b98 <expf+0x6c>
 8018b42:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8018b46:	d058      	beq.n	8018bfa <expf+0xce>
 8018b48:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8018b4c:	d303      	bcc.n	8018b56 <expf+0x2a>
 8018b4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018b52:	bc30      	pop	{r4, r5}
 8018b54:	4770      	bx	lr
 8018b56:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8018c00 <expf+0xd4>
 8018b5a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b62:	dd03      	ble.n	8018b6c <expf+0x40>
 8018b64:	bc30      	pop	{r4, r5}
 8018b66:	2000      	movs	r0, #0
 8018b68:	f000 bca8 	b.w	80194bc <__math_oflowf>
 8018b6c:	eddf 7a25 	vldr	s15, [pc, #148]	; 8018c04 <expf+0xd8>
 8018b70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b78:	d503      	bpl.n	8018b82 <expf+0x56>
 8018b7a:	bc30      	pop	{r4, r5}
 8018b7c:	2000      	movs	r0, #0
 8018b7e:	f000 bc91 	b.w	80194a4 <__math_uflowf>
 8018b82:	eddf 7a21 	vldr	s15, [pc, #132]	; 8018c08 <expf+0xdc>
 8018b86:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b8e:	d503      	bpl.n	8018b98 <expf+0x6c>
 8018b90:	bc30      	pop	{r4, r5}
 8018b92:	2000      	movs	r0, #0
 8018b94:	f000 bc8c 	b.w	80194b0 <__math_may_uflowf>
 8018b98:	4b1c      	ldr	r3, [pc, #112]	; (8018c0c <expf+0xe0>)
 8018b9a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018b9e:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8018ba2:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8018ba6:	eeb0 7b44 	vmov.f64	d7, d4
 8018baa:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018bae:	ee17 0a10 	vmov	r0, s14
 8018bb2:	ee37 7b44 	vsub.f64	d7, d7, d4
 8018bb6:	f000 021f 	and.w	r2, r0, #31
 8018bba:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8018bbe:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8018bc2:	ee27 4b07 	vmul.f64	d4, d7, d7
 8018bc6:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8018bca:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8018bce:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018bd2:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8018bd6:	684d      	ldr	r5, [r1, #4]
 8018bd8:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8018bdc:	2100      	movs	r1, #0
 8018bde:	190a      	adds	r2, r1, r4
 8018be0:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8018be4:	eea5 0b07 	vfma.f64	d0, d5, d7
 8018be8:	ec43 2b17 	vmov	d7, r2, r3
 8018bec:	eea6 0b04 	vfma.f64	d0, d6, d4
 8018bf0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018bf4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018bf8:	e7ab      	b.n	8018b52 <expf+0x26>
 8018bfa:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8018c10 <expf+0xe4>
 8018bfe:	e7a8      	b.n	8018b52 <expf+0x26>
 8018c00:	42b17217 	.word	0x42b17217
 8018c04:	c2cff1b4 	.word	0xc2cff1b4
 8018c08:	c2ce8ecf 	.word	0xc2ce8ecf
 8018c0c:	08026258 	.word	0x08026258
 8018c10:	00000000 	.word	0x00000000

08018c14 <atan2f>:
 8018c14:	f000 bf34 	b.w	8019a80 <__ieee754_atan2f>

08018c18 <logf>:
 8018c18:	ee10 3a10 	vmov	r3, s0
 8018c1c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018c20:	b410      	push	{r4}
 8018c22:	d055      	beq.n	8018cd0 <logf+0xb8>
 8018c24:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8018c28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8018c2c:	d31a      	bcc.n	8018c64 <logf+0x4c>
 8018c2e:	005a      	lsls	r2, r3, #1
 8018c30:	d104      	bne.n	8018c3c <logf+0x24>
 8018c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c36:	2001      	movs	r0, #1
 8018c38:	f000 bc46 	b.w	80194c8 <__math_divzerof>
 8018c3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018c40:	d043      	beq.n	8018cca <logf+0xb2>
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	db02      	blt.n	8018c4c <logf+0x34>
 8018c46:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8018c4a:	d303      	bcc.n	8018c54 <logf+0x3c>
 8018c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c50:	f000 bc4c 	b.w	80194ec <__math_invalidf>
 8018c54:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018cd8 <logf+0xc0>
 8018c58:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018c5c:	ee10 3a10 	vmov	r3, s0
 8018c60:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8018c64:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8018c68:	491c      	ldr	r1, [pc, #112]	; (8018cdc <logf+0xc4>)
 8018c6a:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8018c6e:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8018c72:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8018c76:	0dd4      	lsrs	r4, r2, #23
 8018c78:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8018c7c:	05e4      	lsls	r4, r4, #23
 8018c7e:	ed90 6b00 	vldr	d6, [r0]
 8018c82:	1b1b      	subs	r3, r3, r4
 8018c84:	ee07 3a90 	vmov	s15, r3
 8018c88:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8018c8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018c90:	15d2      	asrs	r2, r2, #23
 8018c92:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018c96:	ed90 6b02 	vldr	d6, [r0, #8]
 8018c9a:	ee20 4b00 	vmul.f64	d4, d0, d0
 8018c9e:	ee07 2a90 	vmov	s15, r2
 8018ca2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018ca6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018caa:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8018cae:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8018cb2:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018cb6:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8018cba:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018cbe:	eea5 7b04 	vfma.f64	d7, d5, d4
 8018cc2:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018cc6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cce:	4770      	bx	lr
 8018cd0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8018ce0 <logf+0xc8>
 8018cd4:	e7f9      	b.n	8018cca <logf+0xb2>
 8018cd6:	bf00      	nop
 8018cd8:	4b000000 	.word	0x4b000000
 8018cdc:	080263a0 	.word	0x080263a0
 8018ce0:	00000000 	.word	0x00000000

08018ce4 <log2f>:
 8018ce4:	ee10 2a10 	vmov	r2, s0
 8018ce8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018cec:	b410      	push	{r4}
 8018cee:	d055      	beq.n	8018d9c <log2f+0xb8>
 8018cf0:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8018cf4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8018cf8:	d31a      	bcc.n	8018d30 <log2f+0x4c>
 8018cfa:	0053      	lsls	r3, r2, #1
 8018cfc:	d104      	bne.n	8018d08 <log2f+0x24>
 8018cfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d02:	2001      	movs	r0, #1
 8018d04:	f000 bbe0 	b.w	80194c8 <__math_divzerof>
 8018d08:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018d0c:	d043      	beq.n	8018d96 <log2f+0xb2>
 8018d0e:	2a00      	cmp	r2, #0
 8018d10:	db02      	blt.n	8018d18 <log2f+0x34>
 8018d12:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8018d16:	d303      	bcc.n	8018d20 <log2f+0x3c>
 8018d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d1c:	f000 bbe6 	b.w	80194ec <__math_invalidf>
 8018d20:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018da4 <log2f+0xc0>
 8018d24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018d28:	ee10 3a10 	vmov	r3, s0
 8018d2c:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 8018d30:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 8018d34:	491c      	ldr	r1, [pc, #112]	; (8018da8 <log2f+0xc4>)
 8018d36:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8018d3a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8018d3e:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8018d42:	0ddc      	lsrs	r4, r3, #23
 8018d44:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8018d48:	05e4      	lsls	r4, r4, #23
 8018d4a:	ed90 5b00 	vldr	d5, [r0]
 8018d4e:	1b12      	subs	r2, r2, r4
 8018d50:	ee07 2a90 	vmov	s15, r2
 8018d54:	15db      	asrs	r3, r3, #23
 8018d56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018d5a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018d5e:	ed90 7b02 	vldr	d7, [r0, #8]
 8018d62:	ee26 4b06 	vmul.f64	d4, d6, d6
 8018d66:	ee00 3a10 	vmov	s0, r3
 8018d6a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8018d6e:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8018d72:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018d76:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 8018d7a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018d7e:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8018d82:	eea5 7b04 	vfma.f64	d7, d5, d4
 8018d86:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 8018d8a:	eea5 0b06 	vfma.f64	d0, d5, d6
 8018d8e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018d92:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d9a:	4770      	bx	lr
 8018d9c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8018dac <log2f+0xc8>
 8018da0:	e7f9      	b.n	8018d96 <log2f+0xb2>
 8018da2:	bf00      	nop
 8018da4:	4b000000 	.word	0x4b000000
 8018da8:	08026d30 	.word	0x08026d30
 8018dac:	00000000 	.word	0x00000000

08018db0 <exp>:
 8018db0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8018db2:	ee10 3a90 	vmov	r3, s1
 8018db6:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8018dba:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8018dbe:	18a2      	adds	r2, r4, r2
 8018dc0:	2a3e      	cmp	r2, #62	; 0x3e
 8018dc2:	ee10 1a10 	vmov	r1, s0
 8018dc6:	d922      	bls.n	8018e0e <exp+0x5e>
 8018dc8:	2a00      	cmp	r2, #0
 8018dca:	da06      	bge.n	8018dda <exp+0x2a>
 8018dcc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8018dd0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018dd4:	b004      	add	sp, #16
 8018dd6:	bcf0      	pop	{r4, r5, r6, r7}
 8018dd8:	4770      	bx	lr
 8018dda:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8018dde:	f04f 0000 	mov.w	r0, #0
 8018de2:	d913      	bls.n	8018e0c <exp+0x5c>
 8018de4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8018de8:	bf08      	it	eq
 8018dea:	4281      	cmpeq	r1, r0
 8018dec:	f000 80a0 	beq.w	8018f30 <exp+0x180>
 8018df0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8018df4:	4294      	cmp	r4, r2
 8018df6:	d0e9      	beq.n	8018dcc <exp+0x1c>
 8018df8:	4283      	cmp	r3, r0
 8018dfa:	da03      	bge.n	8018e04 <exp+0x54>
 8018dfc:	b004      	add	sp, #16
 8018dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8018e00:	f000 b8c6 	b.w	8018f90 <__math_uflow>
 8018e04:	b004      	add	sp, #16
 8018e06:	bcf0      	pop	{r4, r5, r6, r7}
 8018e08:	f000 b8ca 	b.w	8018fa0 <__math_oflow>
 8018e0c:	4604      	mov	r4, r0
 8018e0e:	4950      	ldr	r1, [pc, #320]	; (8018f50 <exp+0x1a0>)
 8018e10:	ed91 6b02 	vldr	d6, [r1, #8]
 8018e14:	ed91 5b00 	vldr	d5, [r1]
 8018e18:	eeb0 7b46 	vmov.f64	d7, d6
 8018e1c:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018e20:	ee17 5a10 	vmov	r5, s14
 8018e24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018e28:	ed91 6b04 	vldr	d6, [r1, #16]
 8018e2c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8018e30:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018e34:	ed91 6b06 	vldr	d6, [r1, #24]
 8018e38:	18d8      	adds	r0, r3, r3
 8018e3a:	f100 030f 	add.w	r3, r0, #15
 8018e3e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8018e42:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018e46:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8018e4a:	ee20 7b00 	vmul.f64	d7, d0, d0
 8018e4e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8018e52:	ed91 4b08 	vldr	d4, [r1, #32]
 8018e56:	ee30 6b06 	vadd.f64	d6, d0, d6
 8018e5a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8018e5e:	eea3 4b00 	vfma.f64	d4, d3, d0
 8018e62:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8018e66:	eea4 6b07 	vfma.f64	d6, d4, d7
 8018e6a:	ee27 7b07 	vmul.f64	d7, d7, d7
 8018e6e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8018e72:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8018e76:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8018e7a:	eea3 4b00 	vfma.f64	d4, d3, d0
 8018e7e:	2600      	movs	r6, #0
 8018e80:	19f2      	adds	r2, r6, r7
 8018e82:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8018e86:	eea7 6b04 	vfma.f64	d6, d7, d4
 8018e8a:	2c00      	cmp	r4, #0
 8018e8c:	d14b      	bne.n	8018f26 <exp+0x176>
 8018e8e:	42b5      	cmp	r5, r6
 8018e90:	db10      	blt.n	8018eb4 <exp+0x104>
 8018e92:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8018e96:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8018f38 <exp+0x188>
 8018e9a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8018e9e:	4610      	mov	r0, r2
 8018ea0:	ec41 0b10 	vmov	d0, r0, r1
 8018ea4:	eea6 0b00 	vfma.f64	d0, d6, d0
 8018ea8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018eac:	b004      	add	sp, #16
 8018eae:	bcf0      	pop	{r4, r5, r6, r7}
 8018eb0:	f000 b88a 	b.w	8018fc8 <__math_check_oflow>
 8018eb4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018eb8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8018ebc:	4610      	mov	r0, r2
 8018ebe:	ec41 0b17 	vmov	d7, r0, r1
 8018ec2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8018ec6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018eca:	ee37 5b06 	vadd.f64	d5, d7, d6
 8018ece:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8018ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ed6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018f40 <exp+0x190>
 8018eda:	d51e      	bpl.n	8018f1a <exp+0x16a>
 8018edc:	ee35 3b04 	vadd.f64	d3, d5, d4
 8018ee0:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018ee4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018ee8:	ee34 6b43 	vsub.f64	d6, d4, d3
 8018eec:	ee36 6b05 	vadd.f64	d6, d6, d5
 8018ef0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018ef4:	ee36 6b03 	vadd.f64	d6, d6, d3
 8018ef8:	ee36 5b44 	vsub.f64	d5, d6, d4
 8018efc:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8018f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f04:	d101      	bne.n	8018f0a <exp+0x15a>
 8018f06:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8018f48 <exp+0x198>
 8018f0a:	ed8d 0b00 	vstr	d0, [sp]
 8018f0e:	ed9d 7b00 	vldr	d7, [sp]
 8018f12:	ee27 7b00 	vmul.f64	d7, d7, d0
 8018f16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018f1a:	ee25 0b00 	vmul.f64	d0, d5, d0
 8018f1e:	b004      	add	sp, #16
 8018f20:	bcf0      	pop	{r4, r5, r6, r7}
 8018f22:	f000 b845 	b.w	8018fb0 <__math_check_uflow>
 8018f26:	ec43 2b10 	vmov	d0, r2, r3
 8018f2a:	eea6 0b00 	vfma.f64	d0, d6, d0
 8018f2e:	e751      	b.n	8018dd4 <exp+0x24>
 8018f30:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8018f48 <exp+0x198>
 8018f34:	e74e      	b.n	8018dd4 <exp+0x24>
 8018f36:	bf00      	nop
 8018f38:	00000000 	.word	0x00000000
 8018f3c:	7f000000 	.word	0x7f000000
 8018f40:	00000000 	.word	0x00000000
 8018f44:	00100000 	.word	0x00100000
	...
 8018f50:	080264c0 	.word	0x080264c0

08018f54 <with_errno>:
 8018f54:	b513      	push	{r0, r1, r4, lr}
 8018f56:	4604      	mov	r4, r0
 8018f58:	ed8d 0b00 	vstr	d0, [sp]
 8018f5c:	f002 f9de 	bl	801b31c <__errno>
 8018f60:	ed9d 0b00 	vldr	d0, [sp]
 8018f64:	6004      	str	r4, [r0, #0]
 8018f66:	b002      	add	sp, #8
 8018f68:	bd10      	pop	{r4, pc}

08018f6a <xflow>:
 8018f6a:	b082      	sub	sp, #8
 8018f6c:	b158      	cbz	r0, 8018f86 <xflow+0x1c>
 8018f6e:	eeb1 7b40 	vneg.f64	d7, d0
 8018f72:	ed8d 7b00 	vstr	d7, [sp]
 8018f76:	ed9d 7b00 	vldr	d7, [sp]
 8018f7a:	2022      	movs	r0, #34	; 0x22
 8018f7c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018f80:	b002      	add	sp, #8
 8018f82:	f7ff bfe7 	b.w	8018f54 <with_errno>
 8018f86:	eeb0 7b40 	vmov.f64	d7, d0
 8018f8a:	e7f2      	b.n	8018f72 <xflow+0x8>
 8018f8c:	0000      	movs	r0, r0
	...

08018f90 <__math_uflow>:
 8018f90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018f98 <__math_uflow+0x8>
 8018f94:	f7ff bfe9 	b.w	8018f6a <xflow>
 8018f98:	00000000 	.word	0x00000000
 8018f9c:	10000000 	.word	0x10000000

08018fa0 <__math_oflow>:
 8018fa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018fa8 <__math_oflow+0x8>
 8018fa4:	f7ff bfe1 	b.w	8018f6a <xflow>
 8018fa8:	00000000 	.word	0x00000000
 8018fac:	70000000 	.word	0x70000000

08018fb0 <__math_check_uflow>:
 8018fb0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fb8:	d102      	bne.n	8018fc0 <__math_check_uflow+0x10>
 8018fba:	2022      	movs	r0, #34	; 0x22
 8018fbc:	f7ff bfca 	b.w	8018f54 <with_errno>
 8018fc0:	4770      	bx	lr
 8018fc2:	0000      	movs	r0, r0
 8018fc4:	0000      	movs	r0, r0
	...

08018fc8 <__math_check_oflow>:
 8018fc8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8018fe8 <__math_check_oflow+0x20>
 8018fcc:	eeb0 7bc0 	vabs.f64	d7, d0
 8018fd0:	eeb4 7b46 	vcmp.f64	d7, d6
 8018fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fd8:	dd02      	ble.n	8018fe0 <__math_check_oflow+0x18>
 8018fda:	2022      	movs	r0, #34	; 0x22
 8018fdc:	f7ff bfba 	b.w	8018f54 <with_errno>
 8018fe0:	4770      	bx	lr
 8018fe2:	bf00      	nop
 8018fe4:	f3af 8000 	nop.w
 8018fe8:	ffffffff 	.word	0xffffffff
 8018fec:	7fefffff 	.word	0x7fefffff

08018ff0 <checkint>:
 8018ff0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018ff4:	2b7e      	cmp	r3, #126	; 0x7e
 8018ff6:	dd10      	ble.n	801901a <checkint+0x2a>
 8018ff8:	2b96      	cmp	r3, #150	; 0x96
 8018ffa:	dc0c      	bgt.n	8019016 <checkint+0x26>
 8018ffc:	2201      	movs	r2, #1
 8018ffe:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8019002:	fa02 f303 	lsl.w	r3, r2, r3
 8019006:	1e5a      	subs	r2, r3, #1
 8019008:	4202      	tst	r2, r0
 801900a:	d106      	bne.n	801901a <checkint+0x2a>
 801900c:	4203      	tst	r3, r0
 801900e:	bf0c      	ite	eq
 8019010:	2002      	moveq	r0, #2
 8019012:	2001      	movne	r0, #1
 8019014:	4770      	bx	lr
 8019016:	2002      	movs	r0, #2
 8019018:	4770      	bx	lr
 801901a:	2000      	movs	r0, #0
 801901c:	4770      	bx	lr
	...

08019020 <powf>:
 8019020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019022:	ee10 1a10 	vmov	r1, s0
 8019026:	ee10 4a90 	vmov	r4, s1
 801902a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801902e:	0062      	lsls	r2, r4, #1
 8019030:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8019034:	eef0 7a40 	vmov.f32	s15, s0
 8019038:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801903c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8019040:	d252      	bcs.n	80190e8 <powf+0xc8>
 8019042:	4298      	cmp	r0, r3
 8019044:	d252      	bcs.n	80190ec <powf+0xcc>
 8019046:	2000      	movs	r0, #0
 8019048:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801904c:	4a9e      	ldr	r2, [pc, #632]	; (80192c8 <powf+0x2a8>)
 801904e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8019052:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8019056:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801905a:	0ddb      	lsrs	r3, r3, #23
 801905c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8019060:	05db      	lsls	r3, r3, #23
 8019062:	ed94 5b00 	vldr	d5, [r4]
 8019066:	1ac9      	subs	r1, r1, r3
 8019068:	ee07 1a90 	vmov	s15, r1
 801906c:	15db      	asrs	r3, r3, #23
 801906e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019072:	eea5 6b07 	vfma.f64	d6, d5, d7
 8019076:	ed94 5b02 	vldr	d5, [r4, #8]
 801907a:	ee26 2b06 	vmul.f64	d2, d6, d6
 801907e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8019082:	ee07 3a90 	vmov	s15, r3
 8019086:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 801908a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801908e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8019092:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8019096:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 801909a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801909e:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 80190a2:	eea6 5b04 	vfma.f64	d5, d6, d4
 80190a6:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 80190aa:	eea6 7b04 	vfma.f64	d7, d6, d4
 80190ae:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 80190b2:	eea2 7b05 	vfma.f64	d7, d2, d5
 80190b6:	eea3 7b01 	vfma.f64	d7, d3, d1
 80190ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 80190be:	ee16 3a90 	vmov	r3, s13
 80190c2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80190c6:	f248 03bf 	movw	r3, #32959	; 0x80bf
 80190ca:	429a      	cmp	r2, r3
 80190cc:	f0c0 80b0 	bcc.w	8019230 <powf+0x210>
 80190d0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80192a8 <powf+0x288>
 80190d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80190d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190dc:	dd78      	ble.n	80191d0 <powf+0x1b0>
 80190de:	b003      	add	sp, #12
 80190e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80190e4:	f000 b9ea 	b.w	80194bc <__math_oflowf>
 80190e8:	4298      	cmp	r0, r3
 80190ea:	d32d      	bcc.n	8019148 <powf+0x128>
 80190ec:	b952      	cbnz	r2, 8019104 <powf+0xe4>
 80190ee:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 80190f2:	0049      	lsls	r1, r1, #1
 80190f4:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 80190f8:	f240 80c8 	bls.w	801928c <powf+0x26c>
 80190fc:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8019100:	b003      	add	sp, #12
 8019102:	bd30      	pop	{r4, r5, pc}
 8019104:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8019108:	d105      	bne.n	8019116 <powf+0xf6>
 801910a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801910e:	0064      	lsls	r4, r4, #1
 8019110:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8019114:	e7f0      	b.n	80190f8 <powf+0xd8>
 8019116:	0049      	lsls	r1, r1, #1
 8019118:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 801911c:	d8ee      	bhi.n	80190fc <powf+0xdc>
 801911e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8019122:	d1eb      	bne.n	80190fc <powf+0xdc>
 8019124:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8019128:	f000 80b0 	beq.w	801928c <powf+0x26c>
 801912c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8019130:	ea6f 0404 	mvn.w	r4, r4
 8019134:	bf34      	ite	cc
 8019136:	2100      	movcc	r1, #0
 8019138:	2101      	movcs	r1, #1
 801913a:	0fe4      	lsrs	r4, r4, #31
 801913c:	42a1      	cmp	r1, r4
 801913e:	f040 80a8 	bne.w	8019292 <powf+0x272>
 8019142:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8019146:	e7db      	b.n	8019100 <powf+0xe0>
 8019148:	004d      	lsls	r5, r1, #1
 801914a:	1e6a      	subs	r2, r5, #1
 801914c:	429a      	cmp	r2, r3
 801914e:	d31c      	bcc.n	801918a <powf+0x16a>
 8019150:	2900      	cmp	r1, #0
 8019152:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019156:	da0f      	bge.n	8019178 <powf+0x158>
 8019158:	ee10 0a90 	vmov	r0, s1
 801915c:	f7ff ff48 	bl	8018ff0 <checkint>
 8019160:	2801      	cmp	r0, #1
 8019162:	d109      	bne.n	8019178 <powf+0x158>
 8019164:	eeb1 0a40 	vneg.f32	s0, s0
 8019168:	b945      	cbnz	r5, 801917c <powf+0x15c>
 801916a:	2c00      	cmp	r4, #0
 801916c:	dac8      	bge.n	8019100 <powf+0xe0>
 801916e:	b003      	add	sp, #12
 8019170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019174:	f000 b9a8 	b.w	80194c8 <__math_divzerof>
 8019178:	2000      	movs	r0, #0
 801917a:	e7f5      	b.n	8019168 <powf+0x148>
 801917c:	2c00      	cmp	r4, #0
 801917e:	dabf      	bge.n	8019100 <powf+0xe0>
 8019180:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019184:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019188:	e7ba      	b.n	8019100 <powf+0xe0>
 801918a:	2900      	cmp	r1, #0
 801918c:	da1e      	bge.n	80191cc <powf+0x1ac>
 801918e:	ee10 0a90 	vmov	r0, s1
 8019192:	f7ff ff2d 	bl	8018ff0 <checkint>
 8019196:	b920      	cbnz	r0, 80191a2 <powf+0x182>
 8019198:	b003      	add	sp, #12
 801919a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801919e:	f000 b9a5 	b.w	80194ec <__math_invalidf>
 80191a2:	1e43      	subs	r3, r0, #1
 80191a4:	4258      	negs	r0, r3
 80191a6:	4158      	adcs	r0, r3
 80191a8:	0400      	lsls	r0, r0, #16
 80191aa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80191ae:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80191b2:	f4bf af49 	bcs.w	8019048 <powf+0x28>
 80191b6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80192cc <powf+0x2ac>
 80191ba:	ee27 0a87 	vmul.f32	s0, s15, s14
 80191be:	ee10 3a10 	vmov	r3, s0
 80191c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80191c6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80191ca:	e73d      	b.n	8019048 <powf+0x28>
 80191cc:	2000      	movs	r0, #0
 80191ce:	e7ee      	b.n	80191ae <powf+0x18e>
 80191d0:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80192b0 <powf+0x290>
 80191d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80191d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191dc:	dd10      	ble.n	8019200 <powf+0x1e0>
 80191de:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80191e2:	2800      	cmp	r0, #0
 80191e4:	d158      	bne.n	8019298 <powf+0x278>
 80191e6:	9300      	str	r3, [sp, #0]
 80191e8:	eddd 7a00 	vldr	s15, [sp]
 80191ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80191f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80191f4:	eef4 7a47 	vcmp.f32	s15, s14
 80191f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191fc:	f47f af6f 	bne.w	80190de <powf+0xbe>
 8019200:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80192b8 <powf+0x298>
 8019204:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801920c:	d804      	bhi.n	8019218 <powf+0x1f8>
 801920e:	b003      	add	sp, #12
 8019210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019214:	f000 b946 	b.w	80194a4 <__math_uflowf>
 8019218:	ed9f 7b29 	vldr	d7, [pc, #164]	; 80192c0 <powf+0x2a0>
 801921c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019224:	d504      	bpl.n	8019230 <powf+0x210>
 8019226:	b003      	add	sp, #12
 8019228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801922c:	f000 b940 	b.w	80194b0 <__math_may_uflowf>
 8019230:	4b27      	ldr	r3, [pc, #156]	; (80192d0 <powf+0x2b0>)
 8019232:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019236:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 801923a:	ee36 7b05 	vadd.f64	d7, d6, d5
 801923e:	ee17 2a10 	vmov	r2, s14
 8019242:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019246:	f002 011f 	and.w	r1, r2, #31
 801924a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801924e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8019252:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019256:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801925a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801925e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8019262:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019266:	686d      	ldr	r5, [r5, #4]
 8019268:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801926c:	1882      	adds	r2, r0, r2
 801926e:	2300      	movs	r3, #0
 8019270:	1918      	adds	r0, r3, r4
 8019272:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8019276:	eea7 0b05 	vfma.f64	d0, d7, d5
 801927a:	ec41 0b17 	vmov	d7, r0, r1
 801927e:	eea6 0b04 	vfma.f64	d0, d6, d4
 8019282:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019286:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801928a:	e739      	b.n	8019100 <powf+0xe0>
 801928c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019290:	e736      	b.n	8019100 <powf+0xe0>
 8019292:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80192d4 <powf+0x2b4>
 8019296:	e733      	b.n	8019100 <powf+0xe0>
 8019298:	9301      	str	r3, [sp, #4]
 801929a:	eddd 7a01 	vldr	s15, [sp, #4]
 801929e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80192a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80192a6:	e7a5      	b.n	80191f4 <powf+0x1d4>
 80192a8:	ffd1d571 	.word	0xffd1d571
 80192ac:	405fffff 	.word	0x405fffff
 80192b0:	ffa3aae2 	.word	0xffa3aae2
 80192b4:	405fffff 	.word	0x405fffff
 80192b8:	00000000 	.word	0x00000000
 80192bc:	c062c000 	.word	0xc062c000
 80192c0:	00000000 	.word	0x00000000
 80192c4:	c062a000 	.word	0xc062a000
 80192c8:	080274e8 	.word	0x080274e8
 80192cc:	4b000000 	.word	0x4b000000
 80192d0:	08026258 	.word	0x08026258
 80192d4:	00000000 	.word	0x00000000

080192d8 <sinf_poly>:
 80192d8:	07cb      	lsls	r3, r1, #31
 80192da:	d412      	bmi.n	8019302 <sinf_poly+0x2a>
 80192dc:	ee21 5b00 	vmul.f64	d5, d1, d0
 80192e0:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 80192e4:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80192e8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80192ec:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 80192f0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80192f4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80192f8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80192fc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019300:	4770      	bx	lr
 8019302:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8019306:	ee21 5b01 	vmul.f64	d5, d1, d1
 801930a:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801930e:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8019312:	eea1 7b06 	vfma.f64	d7, d1, d6
 8019316:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801931a:	eea1 0b06 	vfma.f64	d0, d1, d6
 801931e:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8019322:	ee21 1b05 	vmul.f64	d1, d1, d5
 8019326:	eea5 0b06 	vfma.f64	d0, d5, d6
 801932a:	e7e5      	b.n	80192f8 <sinf_poly+0x20>
 801932c:	0000      	movs	r0, r0
	...

08019330 <cosf>:
 8019330:	b538      	push	{r3, r4, r5, lr}
 8019332:	ee10 4a10 	vmov	r4, s0
 8019336:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801933a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801933e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8019342:	d21f      	bcs.n	8019384 <cosf+0x54>
 8019344:	ee27 7b07 	vmul.f64	d7, d7, d7
 8019348:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801934c:	f0c0 8086 	bcc.w	801945c <cosf+0x12c>
 8019350:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019354:	4b46      	ldr	r3, [pc, #280]	; (8019470 <cosf+0x140>)
 8019356:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 801935a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 801935e:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 8019362:	eea7 6b05 	vfma.f64	d6, d7, d5
 8019366:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 801936a:	eea7 0b05 	vfma.f64	d0, d7, d5
 801936e:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 8019372:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019376:	eea4 0b05 	vfma.f64	d0, d4, d5
 801937a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801937e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019382:	bd38      	pop	{r3, r4, r5, pc}
 8019384:	f240 422e 	movw	r2, #1070	; 0x42e
 8019388:	4293      	cmp	r3, r2
 801938a:	d829      	bhi.n	80193e0 <cosf+0xb0>
 801938c:	4b38      	ldr	r3, [pc, #224]	; (8019470 <cosf+0x140>)
 801938e:	ed93 6b08 	vldr	d6, [r3, #32]
 8019392:	ee27 6b06 	vmul.f64	d6, d7, d6
 8019396:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801939a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801939e:	ee16 1a90 	vmov	r1, s13
 80193a2:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80193a6:	1609      	asrs	r1, r1, #24
 80193a8:	ee06 1a90 	vmov	s13, r1
 80193ac:	f001 0203 	and.w	r2, r1, #3
 80193b0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80193b4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80193b8:	ed92 0b00 	vldr	d0, [r2]
 80193bc:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 80193c0:	f011 0f02 	tst.w	r1, #2
 80193c4:	bf08      	it	eq
 80193c6:	4618      	moveq	r0, r3
 80193c8:	f081 0101 	eor.w	r1, r1, #1
 80193cc:	eea5 7b46 	vfms.f64	d7, d5, d6
 80193d0:	ee27 1b07 	vmul.f64	d1, d7, d7
 80193d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80193d8:	ee27 0b00 	vmul.f64	d0, d7, d0
 80193dc:	f7ff bf7c 	b.w	80192d8 <sinf_poly>
 80193e0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80193e4:	d236      	bcs.n	8019454 <cosf+0x124>
 80193e6:	4a23      	ldr	r2, [pc, #140]	; (8019474 <cosf+0x144>)
 80193e8:	f3c4 6183 	ubfx	r1, r4, #26, #4
 80193ec:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80193f0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80193f4:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 80193f8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80193fc:	6a2a      	ldr	r2, [r5, #32]
 80193fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019402:	4083      	lsls	r3, r0
 8019404:	fba3 2002 	umull	r2, r0, r3, r2
 8019408:	692a      	ldr	r2, [r5, #16]
 801940a:	4359      	muls	r1, r3
 801940c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8019410:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 8019414:	0f9d      	lsrs	r5, r3, #30
 8019416:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801941a:	1ac9      	subs	r1, r1, r3
 801941c:	f7e7 f8f2 	bl	8000604 <__aeabi_l2d>
 8019420:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8019424:	4b12      	ldr	r3, [pc, #72]	; (8019470 <cosf+0x140>)
 8019426:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8019468 <cosf+0x138>
 801942a:	ec41 0b17 	vmov	d7, r0, r1
 801942e:	f004 0203 	and.w	r2, r4, #3
 8019432:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8019436:	f014 0f02 	tst.w	r4, #2
 801943a:	ee27 0b00 	vmul.f64	d0, d7, d0
 801943e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8019442:	ed92 7b00 	vldr	d7, [r2]
 8019446:	ee20 1b00 	vmul.f64	d1, d0, d0
 801944a:	f085 0101 	eor.w	r1, r5, #1
 801944e:	bf08      	it	eq
 8019450:	4618      	moveq	r0, r3
 8019452:	e7bf      	b.n	80193d4 <cosf+0xa4>
 8019454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019458:	f000 b848 	b.w	80194ec <__math_invalidf>
 801945c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019460:	e78f      	b.n	8019382 <cosf+0x52>
 8019462:	bf00      	nop
 8019464:	f3af 8000 	nop.w
 8019468:	54442d18 	.word	0x54442d18
 801946c:	3c1921fb 	.word	0x3c1921fb
 8019470:	08026eb0 	.word	0x08026eb0
 8019474:	08026e50 	.word	0x08026e50

08019478 <with_errnof>:
 8019478:	b513      	push	{r0, r1, r4, lr}
 801947a:	4604      	mov	r4, r0
 801947c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019480:	f001 ff4c 	bl	801b31c <__errno>
 8019484:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019488:	6004      	str	r4, [r0, #0]
 801948a:	b002      	add	sp, #8
 801948c:	bd10      	pop	{r4, pc}

0801948e <xflowf>:
 801948e:	b130      	cbz	r0, 801949e <xflowf+0x10>
 8019490:	eef1 7a40 	vneg.f32	s15, s0
 8019494:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019498:	2022      	movs	r0, #34	; 0x22
 801949a:	f7ff bfed 	b.w	8019478 <with_errnof>
 801949e:	eef0 7a40 	vmov.f32	s15, s0
 80194a2:	e7f7      	b.n	8019494 <xflowf+0x6>

080194a4 <__math_uflowf>:
 80194a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194ac <__math_uflowf+0x8>
 80194a8:	f7ff bff1 	b.w	801948e <xflowf>
 80194ac:	10000000 	.word	0x10000000

080194b0 <__math_may_uflowf>:
 80194b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194b8 <__math_may_uflowf+0x8>
 80194b4:	f7ff bfeb 	b.w	801948e <xflowf>
 80194b8:	1a200000 	.word	0x1a200000

080194bc <__math_oflowf>:
 80194bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194c4 <__math_oflowf+0x8>
 80194c0:	f7ff bfe5 	b.w	801948e <xflowf>
 80194c4:	70000000 	.word	0x70000000

080194c8 <__math_divzerof>:
 80194c8:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80194e8 <__math_divzerof+0x20>
 80194cc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80194d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80194d4:	2800      	cmp	r0, #0
 80194d6:	f04f 0022 	mov.w	r0, #34	; 0x22
 80194da:	fe47 7a27 	vseleq.f32	s15, s14, s15
 80194de:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80194e2:	f7ff bfc9 	b.w	8019478 <with_errnof>
 80194e6:	bf00      	nop
 80194e8:	00000000 	.word	0x00000000

080194ec <__math_invalidf>:
 80194ec:	eef0 7a40 	vmov.f32	s15, s0
 80194f0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80194f4:	eef4 7a67 	vcmp.f32	s15, s15
 80194f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194fc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8019500:	d602      	bvs.n	8019508 <__math_invalidf+0x1c>
 8019502:	2021      	movs	r0, #33	; 0x21
 8019504:	f7ff bfb8 	b.w	8019478 <with_errnof>
 8019508:	4770      	bx	lr
	...

0801950c <log10f>:
 801950c:	b508      	push	{r3, lr}
 801950e:	ed2d 8b02 	vpush	{d8}
 8019512:	eeb0 8a40 	vmov.f32	s16, s0
 8019516:	f000 fb51 	bl	8019bbc <__ieee754_log10f>
 801951a:	eeb4 8a48 	vcmp.f32	s16, s16
 801951e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019522:	d60f      	bvs.n	8019544 <log10f+0x38>
 8019524:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801952c:	d80a      	bhi.n	8019544 <log10f+0x38>
 801952e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019536:	d108      	bne.n	801954a <log10f+0x3e>
 8019538:	f001 fef0 	bl	801b31c <__errno>
 801953c:	2322      	movs	r3, #34	; 0x22
 801953e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8019560 <log10f+0x54>
 8019542:	6003      	str	r3, [r0, #0]
 8019544:	ecbd 8b02 	vpop	{d8}
 8019548:	bd08      	pop	{r3, pc}
 801954a:	f001 fee7 	bl	801b31c <__errno>
 801954e:	ecbd 8b02 	vpop	{d8}
 8019552:	2321      	movs	r3, #33	; 0x21
 8019554:	6003      	str	r3, [r0, #0]
 8019556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801955a:	4802      	ldr	r0, [pc, #8]	; (8019564 <log10f+0x58>)
 801955c:	f000 b8e0 	b.w	8019720 <nanf>
 8019560:	ff800000 	.word	0xff800000
 8019564:	08026250 	.word	0x08026250

08019568 <atanf>:
 8019568:	b538      	push	{r3, r4, r5, lr}
 801956a:	ee10 5a10 	vmov	r5, s0
 801956e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8019572:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8019576:	eef0 7a40 	vmov.f32	s15, s0
 801957a:	db0f      	blt.n	801959c <atanf+0x34>
 801957c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019580:	dd04      	ble.n	801958c <atanf+0x24>
 8019582:	ee70 7a00 	vadd.f32	s15, s0, s0
 8019586:	eeb0 0a67 	vmov.f32	s0, s15
 801958a:	bd38      	pop	{r3, r4, r5, pc}
 801958c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80196c4 <atanf+0x15c>
 8019590:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80196c8 <atanf+0x160>
 8019594:	2d00      	cmp	r5, #0
 8019596:	fe77 7a87 	vselgt.f32	s15, s15, s14
 801959a:	e7f4      	b.n	8019586 <atanf+0x1e>
 801959c:	4b4b      	ldr	r3, [pc, #300]	; (80196cc <atanf+0x164>)
 801959e:	429c      	cmp	r4, r3
 80195a0:	dc10      	bgt.n	80195c4 <atanf+0x5c>
 80195a2:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80195a6:	da0a      	bge.n	80195be <atanf+0x56>
 80195a8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80196d0 <atanf+0x168>
 80195ac:	ee30 7a07 	vadd.f32	s14, s0, s14
 80195b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80195b4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80195b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195bc:	dce3      	bgt.n	8019586 <atanf+0x1e>
 80195be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80195c2:	e013      	b.n	80195ec <atanf+0x84>
 80195c4:	f000 f8a4 	bl	8019710 <fabsf>
 80195c8:	4b42      	ldr	r3, [pc, #264]	; (80196d4 <atanf+0x16c>)
 80195ca:	429c      	cmp	r4, r3
 80195cc:	dc4f      	bgt.n	801966e <atanf+0x106>
 80195ce:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80195d2:	429c      	cmp	r4, r3
 80195d4:	dc41      	bgt.n	801965a <atanf+0xf2>
 80195d6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80195da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80195de:	eea0 7a27 	vfma.f32	s14, s0, s15
 80195e2:	2300      	movs	r3, #0
 80195e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80195e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80195ec:	1c5a      	adds	r2, r3, #1
 80195ee:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80195f2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80196d8 <atanf+0x170>
 80195f6:	eddf 5a39 	vldr	s11, [pc, #228]	; 80196dc <atanf+0x174>
 80195fa:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80196e0 <atanf+0x178>
 80195fe:	ee66 6a06 	vmul.f32	s13, s12, s12
 8019602:	eee6 5a87 	vfma.f32	s11, s13, s14
 8019606:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80196e4 <atanf+0x17c>
 801960a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801960e:	eddf 5a36 	vldr	s11, [pc, #216]	; 80196e8 <atanf+0x180>
 8019612:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019616:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80196ec <atanf+0x184>
 801961a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801961e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80196f0 <atanf+0x188>
 8019622:	eee7 5a26 	vfma.f32	s11, s14, s13
 8019626:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80196f4 <atanf+0x18c>
 801962a:	eea6 5a87 	vfma.f32	s10, s13, s14
 801962e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80196f8 <atanf+0x190>
 8019632:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019636:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80196fc <atanf+0x194>
 801963a:	eea7 5a26 	vfma.f32	s10, s14, s13
 801963e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019700 <atanf+0x198>
 8019642:	eea5 7a26 	vfma.f32	s14, s10, s13
 8019646:	ee27 7a26 	vmul.f32	s14, s14, s13
 801964a:	eea5 7a86 	vfma.f32	s14, s11, s12
 801964e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8019652:	d121      	bne.n	8019698 <atanf+0x130>
 8019654:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019658:	e795      	b.n	8019586 <atanf+0x1e>
 801965a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801965e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019662:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019666:	2301      	movs	r3, #1
 8019668:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801966c:	e7be      	b.n	80195ec <atanf+0x84>
 801966e:	4b25      	ldr	r3, [pc, #148]	; (8019704 <atanf+0x19c>)
 8019670:	429c      	cmp	r4, r3
 8019672:	dc0b      	bgt.n	801968c <atanf+0x124>
 8019674:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8019678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801967c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8019680:	2302      	movs	r3, #2
 8019682:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801968a:	e7af      	b.n	80195ec <atanf+0x84>
 801968c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8019690:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019694:	2303      	movs	r3, #3
 8019696:	e7a9      	b.n	80195ec <atanf+0x84>
 8019698:	4a1b      	ldr	r2, [pc, #108]	; (8019708 <atanf+0x1a0>)
 801969a:	491c      	ldr	r1, [pc, #112]	; (801970c <atanf+0x1a4>)
 801969c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80196a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80196a4:	edd3 6a00 	vldr	s13, [r3]
 80196a8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80196ac:	2d00      	cmp	r5, #0
 80196ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80196b2:	edd2 7a00 	vldr	s15, [r2]
 80196b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80196ba:	bfb8      	it	lt
 80196bc:	eef1 7a67 	vneglt.f32	s15, s15
 80196c0:	e761      	b.n	8019586 <atanf+0x1e>
 80196c2:	bf00      	nop
 80196c4:	3fc90fdb 	.word	0x3fc90fdb
 80196c8:	bfc90fdb 	.word	0xbfc90fdb
 80196cc:	3edfffff 	.word	0x3edfffff
 80196d0:	7149f2ca 	.word	0x7149f2ca
 80196d4:	3f97ffff 	.word	0x3f97ffff
 80196d8:	3c8569d7 	.word	0x3c8569d7
 80196dc:	3d4bda59 	.word	0x3d4bda59
 80196e0:	bd6ef16b 	.word	0xbd6ef16b
 80196e4:	3d886b35 	.word	0x3d886b35
 80196e8:	3dba2e6e 	.word	0x3dba2e6e
 80196ec:	3e124925 	.word	0x3e124925
 80196f0:	3eaaaaab 	.word	0x3eaaaaab
 80196f4:	bd15a221 	.word	0xbd15a221
 80196f8:	bd9d8795 	.word	0xbd9d8795
 80196fc:	bde38e38 	.word	0xbde38e38
 8019700:	be4ccccd 	.word	0xbe4ccccd
 8019704:	401bffff 	.word	0x401bffff
 8019708:	08026f90 	.word	0x08026f90
 801970c:	08026fa0 	.word	0x08026fa0

08019710 <fabsf>:
 8019710:	ee10 3a10 	vmov	r3, s0
 8019714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019718:	ee00 3a10 	vmov	s0, r3
 801971c:	4770      	bx	lr
	...

08019720 <nanf>:
 8019720:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019728 <nanf+0x8>
 8019724:	4770      	bx	lr
 8019726:	bf00      	nop
 8019728:	7fc00000 	.word	0x7fc00000

0801972c <tanf>:
 801972c:	ee10 3a10 	vmov	r3, s0
 8019730:	b507      	push	{r0, r1, r2, lr}
 8019732:	4a12      	ldr	r2, [pc, #72]	; (801977c <tanf+0x50>)
 8019734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019738:	4293      	cmp	r3, r2
 801973a:	dc07      	bgt.n	801974c <tanf+0x20>
 801973c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8019780 <tanf+0x54>
 8019740:	2001      	movs	r0, #1
 8019742:	b003      	add	sp, #12
 8019744:	f85d eb04 	ldr.w	lr, [sp], #4
 8019748:	f000 b8ba 	b.w	80198c0 <__kernel_tanf>
 801974c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019750:	db04      	blt.n	801975c <tanf+0x30>
 8019752:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019756:	b003      	add	sp, #12
 8019758:	f85d fb04 	ldr.w	pc, [sp], #4
 801975c:	4668      	mov	r0, sp
 801975e:	f000 fa85 	bl	8019c6c <__ieee754_rem_pio2f>
 8019762:	0040      	lsls	r0, r0, #1
 8019764:	f000 0002 	and.w	r0, r0, #2
 8019768:	eddd 0a01 	vldr	s1, [sp, #4]
 801976c:	ed9d 0a00 	vldr	s0, [sp]
 8019770:	f1c0 0001 	rsb	r0, r0, #1
 8019774:	f000 f8a4 	bl	80198c0 <__kernel_tanf>
 8019778:	e7ed      	b.n	8019756 <tanf+0x2a>
 801977a:	bf00      	nop
 801977c:	3f490fda 	.word	0x3f490fda
 8019780:	00000000 	.word	0x00000000

08019784 <tanhf>:
 8019784:	b538      	push	{r3, r4, r5, lr}
 8019786:	ee10 5a10 	vmov	r5, s0
 801978a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801978e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019792:	ed2d 8b02 	vpush	{d8}
 8019796:	db0f      	blt.n	80197b8 <tanhf+0x34>
 8019798:	4b2a      	ldr	r3, [pc, #168]	; (8019844 <tanhf+0xc0>)
 801979a:	ed93 6a00 	vldr	s12, [r3]
 801979e:	edd3 6a00 	vldr	s13, [r3]
 80197a2:	eec6 7a00 	vdiv.f32	s15, s12, s0
 80197a6:	2d00      	cmp	r5, #0
 80197a8:	bfac      	ite	ge
 80197aa:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 80197ae:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 80197b2:	ecbd 8b02 	vpop	{d8}
 80197b6:	bd38      	pop	{r3, r4, r5, pc}
 80197b8:	4a23      	ldr	r2, [pc, #140]	; (8019848 <tanhf+0xc4>)
 80197ba:	4293      	cmp	r3, r2
 80197bc:	dc39      	bgt.n	8019832 <tanhf+0xae>
 80197be:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80197c2:	da07      	bge.n	80197d4 <tanhf+0x50>
 80197c4:	4b1f      	ldr	r3, [pc, #124]	; (8019844 <tanhf+0xc0>)
 80197c6:	edd3 7a00 	vldr	s15, [r3]
 80197ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 80197ce:	ee27 0a80 	vmul.f32	s0, s15, s0
 80197d2:	e7ee      	b.n	80197b2 <tanhf+0x2e>
 80197d4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80197d8:	4c1c      	ldr	r4, [pc, #112]	; (801984c <tanhf+0xc8>)
 80197da:	db19      	blt.n	8019810 <tanhf+0x8c>
 80197dc:	f7ff ff98 	bl	8019710 <fabsf>
 80197e0:	edd4 7a00 	vldr	s15, [r4]
 80197e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80197e8:	f001 f862 	bl	801a8b0 <expm1f>
 80197ec:	4b15      	ldr	r3, [pc, #84]	; (8019844 <tanhf+0xc0>)
 80197ee:	edd3 7a00 	vldr	s15, [r3]
 80197f2:	edd4 6a00 	vldr	s13, [r4]
 80197f6:	ed94 7a00 	vldr	s14, [r4]
 80197fa:	ee37 0a00 	vadd.f32	s0, s14, s0
 80197fe:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8019802:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019806:	2d00      	cmp	r5, #0
 8019808:	bfb8      	it	lt
 801980a:	eeb1 0a40 	vneglt.f32	s0, s0
 801980e:	e7d0      	b.n	80197b2 <tanhf+0x2e>
 8019810:	ed94 8a00 	vldr	s16, [r4]
 8019814:	f7ff ff7c 	bl	8019710 <fabsf>
 8019818:	ee28 0a40 	vnmul.f32	s0, s16, s0
 801981c:	f001 f848 	bl	801a8b0 <expm1f>
 8019820:	edd4 7a00 	vldr	s15, [r4]
 8019824:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019828:	eeb1 7a40 	vneg.f32	s14, s0
 801982c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019830:	e7e9      	b.n	8019806 <tanhf+0x82>
 8019832:	4b04      	ldr	r3, [pc, #16]	; (8019844 <tanhf+0xc0>)
 8019834:	ed93 0a00 	vldr	s0, [r3]
 8019838:	4b05      	ldr	r3, [pc, #20]	; (8019850 <tanhf+0xcc>)
 801983a:	edd3 7a00 	vldr	s15, [r3]
 801983e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019842:	e7e0      	b.n	8019806 <tanhf+0x82>
 8019844:	200007bc 	.word	0x200007bc
 8019848:	41afffff 	.word	0x41afffff
 801984c:	200007c4 	.word	0x200007c4
 8019850:	200007c0 	.word	0x200007c0
 8019854:	00000000 	.word	0x00000000

08019858 <tan>:
 8019858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801985a:	eeb0 7b40 	vmov.f64	d7, d0
 801985e:	ee17 3a90 	vmov	r3, s15
 8019862:	4a15      	ldr	r2, [pc, #84]	; (80198b8 <tan+0x60>)
 8019864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019868:	4293      	cmp	r3, r2
 801986a:	dc07      	bgt.n	801987c <tan+0x24>
 801986c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80198b0 <tan+0x58>
 8019870:	2001      	movs	r0, #1
 8019872:	b005      	add	sp, #20
 8019874:	f85d eb04 	ldr.w	lr, [sp], #4
 8019878:	f000 befe 	b.w	801a678 <__kernel_tan>
 801987c:	4a0f      	ldr	r2, [pc, #60]	; (80198bc <tan+0x64>)
 801987e:	4293      	cmp	r3, r2
 8019880:	dd04      	ble.n	801988c <tan+0x34>
 8019882:	ee30 0b40 	vsub.f64	d0, d0, d0
 8019886:	b005      	add	sp, #20
 8019888:	f85d fb04 	ldr.w	pc, [sp], #4
 801988c:	4668      	mov	r0, sp
 801988e:	f000 fb1b 	bl	8019ec8 <__ieee754_rem_pio2>
 8019892:	0040      	lsls	r0, r0, #1
 8019894:	f000 0002 	and.w	r0, r0, #2
 8019898:	ed9d 1b02 	vldr	d1, [sp, #8]
 801989c:	ed9d 0b00 	vldr	d0, [sp]
 80198a0:	f1c0 0001 	rsb	r0, r0, #1
 80198a4:	f000 fee8 	bl	801a678 <__kernel_tan>
 80198a8:	e7ed      	b.n	8019886 <tan+0x2e>
 80198aa:	bf00      	nop
 80198ac:	f3af 8000 	nop.w
	...
 80198b8:	3fe921fb 	.word	0x3fe921fb
 80198bc:	7fefffff 	.word	0x7fefffff

080198c0 <__kernel_tanf>:
 80198c0:	b508      	push	{r3, lr}
 80198c2:	ee10 3a10 	vmov	r3, s0
 80198c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80198ca:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80198ce:	eef0 7a40 	vmov.f32	s15, s0
 80198d2:	da17      	bge.n	8019904 <__kernel_tanf+0x44>
 80198d4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80198d8:	ee17 1a10 	vmov	r1, s14
 80198dc:	bb41      	cbnz	r1, 8019930 <__kernel_tanf+0x70>
 80198de:	1c43      	adds	r3, r0, #1
 80198e0:	4313      	orrs	r3, r2
 80198e2:	d108      	bne.n	80198f6 <__kernel_tanf+0x36>
 80198e4:	f7ff ff14 	bl	8019710 <fabsf>
 80198e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80198ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80198f0:	eeb0 0a67 	vmov.f32	s0, s15
 80198f4:	bd08      	pop	{r3, pc}
 80198f6:	2801      	cmp	r0, #1
 80198f8:	d0fa      	beq.n	80198f0 <__kernel_tanf+0x30>
 80198fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80198fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019902:	e7f5      	b.n	80198f0 <__kernel_tanf+0x30>
 8019904:	494c      	ldr	r1, [pc, #304]	; (8019a38 <__kernel_tanf+0x178>)
 8019906:	428a      	cmp	r2, r1
 8019908:	db12      	blt.n	8019930 <__kernel_tanf+0x70>
 801990a:	2b00      	cmp	r3, #0
 801990c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019a3c <__kernel_tanf+0x17c>
 8019910:	bfb8      	it	lt
 8019912:	eef1 7a40 	vneglt.f32	s15, s0
 8019916:	ee37 7a67 	vsub.f32	s14, s14, s15
 801991a:	eddf 7a49 	vldr	s15, [pc, #292]	; 8019a40 <__kernel_tanf+0x180>
 801991e:	bfb8      	it	lt
 8019920:	eef1 0a60 	vneglt.f32	s1, s1
 8019924:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019928:	eddf 0a46 	vldr	s1, [pc, #280]	; 8019a44 <__kernel_tanf+0x184>
 801992c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019930:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8019934:	eddf 5a44 	vldr	s11, [pc, #272]	; 8019a48 <__kernel_tanf+0x188>
 8019938:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8019a4c <__kernel_tanf+0x18c>
 801993c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8019a50 <__kernel_tanf+0x190>
 8019940:	493d      	ldr	r1, [pc, #244]	; (8019a38 <__kernel_tanf+0x178>)
 8019942:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019946:	428a      	cmp	r2, r1
 8019948:	eea7 6a25 	vfma.f32	s12, s14, s11
 801994c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8019a54 <__kernel_tanf+0x194>
 8019950:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019954:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8019a58 <__kernel_tanf+0x198>
 8019958:	eea5 6a87 	vfma.f32	s12, s11, s14
 801995c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8019a5c <__kernel_tanf+0x19c>
 8019960:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019964:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8019a60 <__kernel_tanf+0x1a0>
 8019968:	eea5 6a87 	vfma.f32	s12, s11, s14
 801996c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8019a64 <__kernel_tanf+0x1a4>
 8019970:	eee7 5a05 	vfma.f32	s11, s14, s10
 8019974:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019a68 <__kernel_tanf+0x1a8>
 8019978:	eea5 5a87 	vfma.f32	s10, s11, s14
 801997c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8019a6c <__kernel_tanf+0x1ac>
 8019980:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019984:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019a70 <__kernel_tanf+0x1b0>
 8019988:	eea5 5a87 	vfma.f32	s10, s11, s14
 801998c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8019a74 <__kernel_tanf+0x1b4>
 8019990:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019994:	eeb0 7a46 	vmov.f32	s14, s12
 8019998:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801999c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80199a0:	eeb0 6a60 	vmov.f32	s12, s1
 80199a4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80199a8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019a78 <__kernel_tanf+0x1b8>
 80199ac:	eee6 0a26 	vfma.f32	s1, s12, s13
 80199b0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80199b4:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80199b8:	db1d      	blt.n	80199f6 <__kernel_tanf+0x136>
 80199ba:	ee07 0a10 	vmov	s14, r0
 80199be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80199c2:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80199c6:	ee76 6a87 	vadd.f32	s13, s13, s14
 80199ca:	179b      	asrs	r3, r3, #30
 80199cc:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 80199d0:	f003 0302 	and.w	r3, r3, #2
 80199d4:	f1c3 0301 	rsb	r3, r3, #1
 80199d8:	ee76 6a60 	vsub.f32	s13, s12, s1
 80199dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80199e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80199e4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80199e8:	ee07 3a90 	vmov	s15, r3
 80199ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80199f4:	e77c      	b.n	80198f0 <__kernel_tanf+0x30>
 80199f6:	2801      	cmp	r0, #1
 80199f8:	d01b      	beq.n	8019a32 <__kernel_tanf+0x172>
 80199fa:	4b20      	ldr	r3, [pc, #128]	; (8019a7c <__kernel_tanf+0x1bc>)
 80199fc:	ee16 2a90 	vmov	r2, s13
 8019a00:	401a      	ands	r2, r3
 8019a02:	ee05 2a90 	vmov	s11, r2
 8019a06:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019a0e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019a12:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019a16:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8019a1a:	ee16 2a10 	vmov	r2, s12
 8019a1e:	4013      	ands	r3, r2
 8019a20:	ee07 3a90 	vmov	s15, r3
 8019a24:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019a28:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8019a2c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8019a30:	e75e      	b.n	80198f0 <__kernel_tanf+0x30>
 8019a32:	eef0 7a66 	vmov.f32	s15, s13
 8019a36:	e75b      	b.n	80198f0 <__kernel_tanf+0x30>
 8019a38:	3f2ca140 	.word	0x3f2ca140
 8019a3c:	3f490fda 	.word	0x3f490fda
 8019a40:	33222168 	.word	0x33222168
 8019a44:	00000000 	.word	0x00000000
 8019a48:	b79bae5f 	.word	0xb79bae5f
 8019a4c:	38a3f445 	.word	0x38a3f445
 8019a50:	37d95384 	.word	0x37d95384
 8019a54:	3a1a26c8 	.word	0x3a1a26c8
 8019a58:	3b6b6916 	.word	0x3b6b6916
 8019a5c:	3cb327a4 	.word	0x3cb327a4
 8019a60:	3e088889 	.word	0x3e088889
 8019a64:	3895c07a 	.word	0x3895c07a
 8019a68:	398137b9 	.word	0x398137b9
 8019a6c:	3abede48 	.word	0x3abede48
 8019a70:	3c11371f 	.word	0x3c11371f
 8019a74:	3d5d0dd1 	.word	0x3d5d0dd1
 8019a78:	3eaaaaab 	.word	0x3eaaaaab
 8019a7c:	fffff000 	.word	0xfffff000

08019a80 <__ieee754_atan2f>:
 8019a80:	ee10 2a90 	vmov	r2, s1
 8019a84:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019a88:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019a8c:	b510      	push	{r4, lr}
 8019a8e:	eef0 7a40 	vmov.f32	s15, s0
 8019a92:	dc06      	bgt.n	8019aa2 <__ieee754_atan2f+0x22>
 8019a94:	ee10 0a10 	vmov	r0, s0
 8019a98:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019a9c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019aa0:	dd04      	ble.n	8019aac <__ieee754_atan2f+0x2c>
 8019aa2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8019aaa:	bd10      	pop	{r4, pc}
 8019aac:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019ab0:	d103      	bne.n	8019aba <__ieee754_atan2f+0x3a>
 8019ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ab6:	f7ff bd57 	b.w	8019568 <atanf>
 8019aba:	1794      	asrs	r4, r2, #30
 8019abc:	f004 0402 	and.w	r4, r4, #2
 8019ac0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019ac4:	b93b      	cbnz	r3, 8019ad6 <__ieee754_atan2f+0x56>
 8019ac6:	2c02      	cmp	r4, #2
 8019ac8:	d05c      	beq.n	8019b84 <__ieee754_atan2f+0x104>
 8019aca:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019b98 <__ieee754_atan2f+0x118>
 8019ace:	2c03      	cmp	r4, #3
 8019ad0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8019ad4:	e7e7      	b.n	8019aa6 <__ieee754_atan2f+0x26>
 8019ad6:	b939      	cbnz	r1, 8019ae8 <__ieee754_atan2f+0x68>
 8019ad8:	eddf 7a30 	vldr	s15, [pc, #192]	; 8019b9c <__ieee754_atan2f+0x11c>
 8019adc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019ba0 <__ieee754_atan2f+0x120>
 8019ae0:	2800      	cmp	r0, #0
 8019ae2:	fe67 7a87 	vselge.f32	s15, s15, s14
 8019ae6:	e7de      	b.n	8019aa6 <__ieee754_atan2f+0x26>
 8019ae8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019aec:	d110      	bne.n	8019b10 <__ieee754_atan2f+0x90>
 8019aee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019af2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8019af6:	d107      	bne.n	8019b08 <__ieee754_atan2f+0x88>
 8019af8:	2c02      	cmp	r4, #2
 8019afa:	d846      	bhi.n	8019b8a <__ieee754_atan2f+0x10a>
 8019afc:	4b29      	ldr	r3, [pc, #164]	; (8019ba4 <__ieee754_atan2f+0x124>)
 8019afe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019b02:	edd3 7a00 	vldr	s15, [r3]
 8019b06:	e7ce      	b.n	8019aa6 <__ieee754_atan2f+0x26>
 8019b08:	2c02      	cmp	r4, #2
 8019b0a:	d841      	bhi.n	8019b90 <__ieee754_atan2f+0x110>
 8019b0c:	4b26      	ldr	r3, [pc, #152]	; (8019ba8 <__ieee754_atan2f+0x128>)
 8019b0e:	e7f6      	b.n	8019afe <__ieee754_atan2f+0x7e>
 8019b10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019b14:	d0e0      	beq.n	8019ad8 <__ieee754_atan2f+0x58>
 8019b16:	1a5b      	subs	r3, r3, r1
 8019b18:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8019b1c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019b20:	da1a      	bge.n	8019b58 <__ieee754_atan2f+0xd8>
 8019b22:	2a00      	cmp	r2, #0
 8019b24:	da01      	bge.n	8019b2a <__ieee754_atan2f+0xaa>
 8019b26:	313c      	adds	r1, #60	; 0x3c
 8019b28:	db19      	blt.n	8019b5e <__ieee754_atan2f+0xde>
 8019b2a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019b2e:	f7ff fdef 	bl	8019710 <fabsf>
 8019b32:	f7ff fd19 	bl	8019568 <atanf>
 8019b36:	eef0 7a40 	vmov.f32	s15, s0
 8019b3a:	2c01      	cmp	r4, #1
 8019b3c:	d012      	beq.n	8019b64 <__ieee754_atan2f+0xe4>
 8019b3e:	2c02      	cmp	r4, #2
 8019b40:	d017      	beq.n	8019b72 <__ieee754_atan2f+0xf2>
 8019b42:	2c00      	cmp	r4, #0
 8019b44:	d0af      	beq.n	8019aa6 <__ieee754_atan2f+0x26>
 8019b46:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8019bac <__ieee754_atan2f+0x12c>
 8019b4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b4e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8019bb0 <__ieee754_atan2f+0x130>
 8019b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b56:	e7a6      	b.n	8019aa6 <__ieee754_atan2f+0x26>
 8019b58:	eddf 7a10 	vldr	s15, [pc, #64]	; 8019b9c <__ieee754_atan2f+0x11c>
 8019b5c:	e7ed      	b.n	8019b3a <__ieee754_atan2f+0xba>
 8019b5e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019bb4 <__ieee754_atan2f+0x134>
 8019b62:	e7ea      	b.n	8019b3a <__ieee754_atan2f+0xba>
 8019b64:	ee17 3a90 	vmov	r3, s15
 8019b68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019b6c:	ee07 3a90 	vmov	s15, r3
 8019b70:	e799      	b.n	8019aa6 <__ieee754_atan2f+0x26>
 8019b72:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8019bac <__ieee754_atan2f+0x12c>
 8019b76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b7a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8019bb0 <__ieee754_atan2f+0x130>
 8019b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019b82:	e790      	b.n	8019aa6 <__ieee754_atan2f+0x26>
 8019b84:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019bb0 <__ieee754_atan2f+0x130>
 8019b88:	e78d      	b.n	8019aa6 <__ieee754_atan2f+0x26>
 8019b8a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019bb8 <__ieee754_atan2f+0x138>
 8019b8e:	e78a      	b.n	8019aa6 <__ieee754_atan2f+0x26>
 8019b90:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019bb4 <__ieee754_atan2f+0x134>
 8019b94:	e787      	b.n	8019aa6 <__ieee754_atan2f+0x26>
 8019b96:	bf00      	nop
 8019b98:	c0490fdb 	.word	0xc0490fdb
 8019b9c:	3fc90fdb 	.word	0x3fc90fdb
 8019ba0:	bfc90fdb 	.word	0xbfc90fdb
 8019ba4:	08026fb0 	.word	0x08026fb0
 8019ba8:	08026fbc 	.word	0x08026fbc
 8019bac:	33bbbd2e 	.word	0x33bbbd2e
 8019bb0:	40490fdb 	.word	0x40490fdb
 8019bb4:	00000000 	.word	0x00000000
 8019bb8:	3f490fdb 	.word	0x3f490fdb

08019bbc <__ieee754_log10f>:
 8019bbc:	b508      	push	{r3, lr}
 8019bbe:	ee10 2a10 	vmov	r2, s0
 8019bc2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019bc6:	ed2d 8b02 	vpush	{d8}
 8019bca:	d108      	bne.n	8019bde <__ieee754_log10f+0x22>
 8019bcc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8019c54 <__ieee754_log10f+0x98>
 8019bd0:	eddf 7a21 	vldr	s15, [pc, #132]	; 8019c58 <__ieee754_log10f+0x9c>
 8019bd4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019bd8:	ecbd 8b02 	vpop	{d8}
 8019bdc:	bd08      	pop	{r3, pc}
 8019bde:	2a00      	cmp	r2, #0
 8019be0:	da02      	bge.n	8019be8 <__ieee754_log10f+0x2c>
 8019be2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019be6:	e7f3      	b.n	8019bd0 <__ieee754_log10f+0x14>
 8019be8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019bec:	db02      	blt.n	8019bf4 <__ieee754_log10f+0x38>
 8019bee:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019bf2:	e7f1      	b.n	8019bd8 <__ieee754_log10f+0x1c>
 8019bf4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8019bf8:	bfbf      	itttt	lt
 8019bfa:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8019c5c <__ieee754_log10f+0xa0>
 8019bfe:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019c02:	f06f 0118 	mvnlt.w	r1, #24
 8019c06:	ee17 2a90 	vmovlt	r2, s15
 8019c0a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8019c0e:	bfa8      	it	ge
 8019c10:	2100      	movge	r1, #0
 8019c12:	3b7f      	subs	r3, #127	; 0x7f
 8019c14:	440b      	add	r3, r1
 8019c16:	0fd9      	lsrs	r1, r3, #31
 8019c18:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8019c1c:	ee07 3a90 	vmov	s15, r3
 8019c20:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8019c24:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8019c28:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019c2c:	ee00 3a10 	vmov	s0, r3
 8019c30:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8019c34:	f7fe fff0 	bl	8018c18 <logf>
 8019c38:	eddf 7a09 	vldr	s15, [pc, #36]	; 8019c60 <__ieee754_log10f+0xa4>
 8019c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019c40:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019c64 <__ieee754_log10f+0xa8>
 8019c44:	eea8 0a27 	vfma.f32	s0, s16, s15
 8019c48:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019c68 <__ieee754_log10f+0xac>
 8019c4c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8019c50:	e7c2      	b.n	8019bd8 <__ieee754_log10f+0x1c>
 8019c52:	bf00      	nop
 8019c54:	cc000000 	.word	0xcc000000
 8019c58:	00000000 	.word	0x00000000
 8019c5c:	4c000000 	.word	0x4c000000
 8019c60:	3ede5bd9 	.word	0x3ede5bd9
 8019c64:	355427db 	.word	0x355427db
 8019c68:	3e9a2080 	.word	0x3e9a2080

08019c6c <__ieee754_rem_pio2f>:
 8019c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c6e:	ee10 6a10 	vmov	r6, s0
 8019c72:	4b86      	ldr	r3, [pc, #536]	; (8019e8c <__ieee754_rem_pio2f+0x220>)
 8019c74:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019c78:	429d      	cmp	r5, r3
 8019c7a:	b087      	sub	sp, #28
 8019c7c:	4604      	mov	r4, r0
 8019c7e:	dc05      	bgt.n	8019c8c <__ieee754_rem_pio2f+0x20>
 8019c80:	2300      	movs	r3, #0
 8019c82:	ed80 0a00 	vstr	s0, [r0]
 8019c86:	6043      	str	r3, [r0, #4]
 8019c88:	2000      	movs	r0, #0
 8019c8a:	e020      	b.n	8019cce <__ieee754_rem_pio2f+0x62>
 8019c8c:	4b80      	ldr	r3, [pc, #512]	; (8019e90 <__ieee754_rem_pio2f+0x224>)
 8019c8e:	429d      	cmp	r5, r3
 8019c90:	dc38      	bgt.n	8019d04 <__ieee754_rem_pio2f+0x98>
 8019c92:	2e00      	cmp	r6, #0
 8019c94:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8019e94 <__ieee754_rem_pio2f+0x228>
 8019c98:	4b7f      	ldr	r3, [pc, #508]	; (8019e98 <__ieee754_rem_pio2f+0x22c>)
 8019c9a:	f025 050f 	bic.w	r5, r5, #15
 8019c9e:	dd18      	ble.n	8019cd2 <__ieee754_rem_pio2f+0x66>
 8019ca0:	429d      	cmp	r5, r3
 8019ca2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019ca6:	bf09      	itett	eq
 8019ca8:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8019e9c <__ieee754_rem_pio2f+0x230>
 8019cac:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8019ea0 <__ieee754_rem_pio2f+0x234>
 8019cb0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019cb4:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8019ea4 <__ieee754_rem_pio2f+0x238>
 8019cb8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019cbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019cc0:	edc0 6a00 	vstr	s13, [r0]
 8019cc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019cc8:	edc0 7a01 	vstr	s15, [r0, #4]
 8019ccc:	2001      	movs	r0, #1
 8019cce:	b007      	add	sp, #28
 8019cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cd2:	429d      	cmp	r5, r3
 8019cd4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019cd8:	bf09      	itett	eq
 8019cda:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8019e9c <__ieee754_rem_pio2f+0x230>
 8019cde:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8019ea0 <__ieee754_rem_pio2f+0x234>
 8019ce2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8019ce6:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8019ea4 <__ieee754_rem_pio2f+0x238>
 8019cea:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019cee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019cf2:	edc0 6a00 	vstr	s13, [r0]
 8019cf6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019cfa:	edc0 7a01 	vstr	s15, [r0, #4]
 8019cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d02:	e7e4      	b.n	8019cce <__ieee754_rem_pio2f+0x62>
 8019d04:	4b68      	ldr	r3, [pc, #416]	; (8019ea8 <__ieee754_rem_pio2f+0x23c>)
 8019d06:	429d      	cmp	r5, r3
 8019d08:	dc71      	bgt.n	8019dee <__ieee754_rem_pio2f+0x182>
 8019d0a:	f7ff fd01 	bl	8019710 <fabsf>
 8019d0e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019eac <__ieee754_rem_pio2f+0x240>
 8019d12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019d16:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019d22:	ee17 0a90 	vmov	r0, s15
 8019d26:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019e94 <__ieee754_rem_pio2f+0x228>
 8019d2a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019d2e:	281f      	cmp	r0, #31
 8019d30:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019ea0 <__ieee754_rem_pio2f+0x234>
 8019d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d38:	eeb1 6a47 	vneg.f32	s12, s14
 8019d3c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019d40:	ee16 2a90 	vmov	r2, s13
 8019d44:	dc1c      	bgt.n	8019d80 <__ieee754_rem_pio2f+0x114>
 8019d46:	495a      	ldr	r1, [pc, #360]	; (8019eb0 <__ieee754_rem_pio2f+0x244>)
 8019d48:	1e47      	subs	r7, r0, #1
 8019d4a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8019d4e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019d52:	428b      	cmp	r3, r1
 8019d54:	d014      	beq.n	8019d80 <__ieee754_rem_pio2f+0x114>
 8019d56:	6022      	str	r2, [r4, #0]
 8019d58:	ed94 7a00 	vldr	s14, [r4]
 8019d5c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019d60:	2e00      	cmp	r6, #0
 8019d62:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019d66:	ed84 0a01 	vstr	s0, [r4, #4]
 8019d6a:	dab0      	bge.n	8019cce <__ieee754_rem_pio2f+0x62>
 8019d6c:	eeb1 7a47 	vneg.f32	s14, s14
 8019d70:	eeb1 0a40 	vneg.f32	s0, s0
 8019d74:	ed84 7a00 	vstr	s14, [r4]
 8019d78:	ed84 0a01 	vstr	s0, [r4, #4]
 8019d7c:	4240      	negs	r0, r0
 8019d7e:	e7a6      	b.n	8019cce <__ieee754_rem_pio2f+0x62>
 8019d80:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019d84:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8019d88:	2908      	cmp	r1, #8
 8019d8a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019d8e:	dde2      	ble.n	8019d56 <__ieee754_rem_pio2f+0xea>
 8019d90:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019e9c <__ieee754_rem_pio2f+0x230>
 8019d94:	eef0 6a40 	vmov.f32	s13, s0
 8019d98:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019d9c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019da0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019da4:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8019ea4 <__ieee754_rem_pio2f+0x238>
 8019da8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019dac:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019db0:	ee15 2a90 	vmov	r2, s11
 8019db4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019db8:	1a5b      	subs	r3, r3, r1
 8019dba:	2b19      	cmp	r3, #25
 8019dbc:	dc04      	bgt.n	8019dc8 <__ieee754_rem_pio2f+0x15c>
 8019dbe:	edc4 5a00 	vstr	s11, [r4]
 8019dc2:	eeb0 0a66 	vmov.f32	s0, s13
 8019dc6:	e7c7      	b.n	8019d58 <__ieee754_rem_pio2f+0xec>
 8019dc8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019eb4 <__ieee754_rem_pio2f+0x248>
 8019dcc:	eeb0 0a66 	vmov.f32	s0, s13
 8019dd0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019dd4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019dd8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019eb8 <__ieee754_rem_pio2f+0x24c>
 8019ddc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019de0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019de4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019de8:	ed84 7a00 	vstr	s14, [r4]
 8019dec:	e7b4      	b.n	8019d58 <__ieee754_rem_pio2f+0xec>
 8019dee:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019df2:	db06      	blt.n	8019e02 <__ieee754_rem_pio2f+0x196>
 8019df4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019df8:	edc0 7a01 	vstr	s15, [r0, #4]
 8019dfc:	edc0 7a00 	vstr	s15, [r0]
 8019e00:	e742      	b.n	8019c88 <__ieee754_rem_pio2f+0x1c>
 8019e02:	15ea      	asrs	r2, r5, #23
 8019e04:	3a86      	subs	r2, #134	; 0x86
 8019e06:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019e0a:	ee07 3a90 	vmov	s15, r3
 8019e0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019e12:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8019ebc <__ieee754_rem_pio2f+0x250>
 8019e16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e1e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019e22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e26:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019e2a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e32:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019e36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e42:	edcd 7a05 	vstr	s15, [sp, #20]
 8019e46:	d11e      	bne.n	8019e86 <__ieee754_rem_pio2f+0x21a>
 8019e48:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e50:	bf14      	ite	ne
 8019e52:	2302      	movne	r3, #2
 8019e54:	2301      	moveq	r3, #1
 8019e56:	491a      	ldr	r1, [pc, #104]	; (8019ec0 <__ieee754_rem_pio2f+0x254>)
 8019e58:	9101      	str	r1, [sp, #4]
 8019e5a:	2102      	movs	r1, #2
 8019e5c:	9100      	str	r1, [sp, #0]
 8019e5e:	a803      	add	r0, sp, #12
 8019e60:	4621      	mov	r1, r4
 8019e62:	f000 fecb 	bl	801abfc <__kernel_rem_pio2f>
 8019e66:	2e00      	cmp	r6, #0
 8019e68:	f6bf af31 	bge.w	8019cce <__ieee754_rem_pio2f+0x62>
 8019e6c:	edd4 7a00 	vldr	s15, [r4]
 8019e70:	eef1 7a67 	vneg.f32	s15, s15
 8019e74:	edc4 7a00 	vstr	s15, [r4]
 8019e78:	edd4 7a01 	vldr	s15, [r4, #4]
 8019e7c:	eef1 7a67 	vneg.f32	s15, s15
 8019e80:	edc4 7a01 	vstr	s15, [r4, #4]
 8019e84:	e77a      	b.n	8019d7c <__ieee754_rem_pio2f+0x110>
 8019e86:	2303      	movs	r3, #3
 8019e88:	e7e5      	b.n	8019e56 <__ieee754_rem_pio2f+0x1ea>
 8019e8a:	bf00      	nop
 8019e8c:	3f490fd8 	.word	0x3f490fd8
 8019e90:	4016cbe3 	.word	0x4016cbe3
 8019e94:	3fc90f80 	.word	0x3fc90f80
 8019e98:	3fc90fd0 	.word	0x3fc90fd0
 8019e9c:	37354400 	.word	0x37354400
 8019ea0:	37354443 	.word	0x37354443
 8019ea4:	2e85a308 	.word	0x2e85a308
 8019ea8:	43490f80 	.word	0x43490f80
 8019eac:	3f22f984 	.word	0x3f22f984
 8019eb0:	08026fc8 	.word	0x08026fc8
 8019eb4:	2e85a300 	.word	0x2e85a300
 8019eb8:	248d3132 	.word	0x248d3132
 8019ebc:	43800000 	.word	0x43800000
 8019ec0:	08027048 	.word	0x08027048
 8019ec4:	00000000 	.word	0x00000000

08019ec8 <__ieee754_rem_pio2>:
 8019ec8:	b570      	push	{r4, r5, r6, lr}
 8019eca:	eeb0 7b40 	vmov.f64	d7, d0
 8019ece:	ee17 5a90 	vmov	r5, s15
 8019ed2:	4b99      	ldr	r3, [pc, #612]	; (801a138 <__ieee754_rem_pio2+0x270>)
 8019ed4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019ed8:	429e      	cmp	r6, r3
 8019eda:	b088      	sub	sp, #32
 8019edc:	4604      	mov	r4, r0
 8019ede:	dc07      	bgt.n	8019ef0 <__ieee754_rem_pio2+0x28>
 8019ee0:	2200      	movs	r2, #0
 8019ee2:	2300      	movs	r3, #0
 8019ee4:	ed84 0b00 	vstr	d0, [r4]
 8019ee8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019eec:	2000      	movs	r0, #0
 8019eee:	e01b      	b.n	8019f28 <__ieee754_rem_pio2+0x60>
 8019ef0:	4b92      	ldr	r3, [pc, #584]	; (801a13c <__ieee754_rem_pio2+0x274>)
 8019ef2:	429e      	cmp	r6, r3
 8019ef4:	dc3b      	bgt.n	8019f6e <__ieee754_rem_pio2+0xa6>
 8019ef6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8019efa:	2d00      	cmp	r5, #0
 8019efc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801a0f8 <__ieee754_rem_pio2+0x230>
 8019f00:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8019f04:	dd19      	ble.n	8019f3a <__ieee754_rem_pio2+0x72>
 8019f06:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019f0a:	429e      	cmp	r6, r3
 8019f0c:	d00e      	beq.n	8019f2c <__ieee754_rem_pio2+0x64>
 8019f0e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801a100 <__ieee754_rem_pio2+0x238>
 8019f12:	ee37 5b46 	vsub.f64	d5, d7, d6
 8019f16:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019f1a:	ed84 5b00 	vstr	d5, [r4]
 8019f1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019f22:	ed84 7b02 	vstr	d7, [r4, #8]
 8019f26:	2001      	movs	r0, #1
 8019f28:	b008      	add	sp, #32
 8019f2a:	bd70      	pop	{r4, r5, r6, pc}
 8019f2c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801a108 <__ieee754_rem_pio2+0x240>
 8019f30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019f34:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801a110 <__ieee754_rem_pio2+0x248>
 8019f38:	e7eb      	b.n	8019f12 <__ieee754_rem_pio2+0x4a>
 8019f3a:	429e      	cmp	r6, r3
 8019f3c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8019f40:	d00e      	beq.n	8019f60 <__ieee754_rem_pio2+0x98>
 8019f42:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801a100 <__ieee754_rem_pio2+0x238>
 8019f46:	ee37 5b06 	vadd.f64	d5, d7, d6
 8019f4a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019f4e:	ed84 5b00 	vstr	d5, [r4]
 8019f52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f5a:	ed84 7b02 	vstr	d7, [r4, #8]
 8019f5e:	e7e3      	b.n	8019f28 <__ieee754_rem_pio2+0x60>
 8019f60:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801a108 <__ieee754_rem_pio2+0x240>
 8019f64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019f68:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801a110 <__ieee754_rem_pio2+0x248>
 8019f6c:	e7eb      	b.n	8019f46 <__ieee754_rem_pio2+0x7e>
 8019f6e:	4b74      	ldr	r3, [pc, #464]	; (801a140 <__ieee754_rem_pio2+0x278>)
 8019f70:	429e      	cmp	r6, r3
 8019f72:	dc70      	bgt.n	801a056 <__ieee754_rem_pio2+0x18e>
 8019f74:	f000 fdb8 	bl	801aae8 <fabs>
 8019f78:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019f7c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a118 <__ieee754_rem_pio2+0x250>
 8019f80:	eea0 7b06 	vfma.f64	d7, d0, d6
 8019f84:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019f88:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019f8c:	ee17 0a90 	vmov	r0, s15
 8019f90:	eeb1 4b45 	vneg.f64	d4, d5
 8019f94:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801a0f8 <__ieee754_rem_pio2+0x230>
 8019f98:	eea5 0b47 	vfms.f64	d0, d5, d7
 8019f9c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801a100 <__ieee754_rem_pio2+0x238>
 8019fa0:	281f      	cmp	r0, #31
 8019fa2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8019fa6:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019faa:	dc08      	bgt.n	8019fbe <__ieee754_rem_pio2+0xf6>
 8019fac:	4b65      	ldr	r3, [pc, #404]	; (801a144 <__ieee754_rem_pio2+0x27c>)
 8019fae:	1e42      	subs	r2, r0, #1
 8019fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019fb4:	42b3      	cmp	r3, r6
 8019fb6:	d002      	beq.n	8019fbe <__ieee754_rem_pio2+0xf6>
 8019fb8:	ed84 6b00 	vstr	d6, [r4]
 8019fbc:	e024      	b.n	801a008 <__ieee754_rem_pio2+0x140>
 8019fbe:	ee16 3a90 	vmov	r3, s13
 8019fc2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019fc6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8019fca:	2b10      	cmp	r3, #16
 8019fcc:	ea4f 5226 	mov.w	r2, r6, asr #20
 8019fd0:	ddf2      	ble.n	8019fb8 <__ieee754_rem_pio2+0xf0>
 8019fd2:	eeb0 6b40 	vmov.f64	d6, d0
 8019fd6:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 801a108 <__ieee754_rem_pio2+0x240>
 8019fda:	eea4 6b03 	vfma.f64	d6, d4, d3
 8019fde:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019fe2:	eea4 7b03 	vfma.f64	d7, d4, d3
 8019fe6:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 801a110 <__ieee754_rem_pio2+0x248>
 8019fea:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8019fee:	ee36 3b47 	vsub.f64	d3, d6, d7
 8019ff2:	ee13 3a90 	vmov	r3, s7
 8019ff6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019ffa:	1ad3      	subs	r3, r2, r3
 8019ffc:	2b31      	cmp	r3, #49	; 0x31
 8019ffe:	dc17      	bgt.n	801a030 <__ieee754_rem_pio2+0x168>
 801a000:	eeb0 0b46 	vmov.f64	d0, d6
 801a004:	ed84 3b00 	vstr	d3, [r4]
 801a008:	ed94 6b00 	vldr	d6, [r4]
 801a00c:	2d00      	cmp	r5, #0
 801a00e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801a012:	ee30 0b47 	vsub.f64	d0, d0, d7
 801a016:	ed84 0b02 	vstr	d0, [r4, #8]
 801a01a:	da85      	bge.n	8019f28 <__ieee754_rem_pio2+0x60>
 801a01c:	eeb1 6b46 	vneg.f64	d6, d6
 801a020:	eeb1 0b40 	vneg.f64	d0, d0
 801a024:	ed84 6b00 	vstr	d6, [r4]
 801a028:	ed84 0b02 	vstr	d0, [r4, #8]
 801a02c:	4240      	negs	r0, r0
 801a02e:	e77b      	b.n	8019f28 <__ieee754_rem_pio2+0x60>
 801a030:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801a120 <__ieee754_rem_pio2+0x258>
 801a034:	eeb0 0b46 	vmov.f64	d0, d6
 801a038:	eea4 0b07 	vfma.f64	d0, d4, d7
 801a03c:	ee36 6b40 	vsub.f64	d6, d6, d0
 801a040:	eea4 6b07 	vfma.f64	d6, d4, d7
 801a044:	ed9f 4b38 	vldr	d4, [pc, #224]	; 801a128 <__ieee754_rem_pio2+0x260>
 801a048:	eeb0 7b46 	vmov.f64	d7, d6
 801a04c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 801a050:	ee30 6b47 	vsub.f64	d6, d0, d7
 801a054:	e7b0      	b.n	8019fb8 <__ieee754_rem_pio2+0xf0>
 801a056:	4b3c      	ldr	r3, [pc, #240]	; (801a148 <__ieee754_rem_pio2+0x280>)
 801a058:	429e      	cmp	r6, r3
 801a05a:	dd06      	ble.n	801a06a <__ieee754_rem_pio2+0x1a2>
 801a05c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801a060:	ed80 7b02 	vstr	d7, [r0, #8]
 801a064:	ed80 7b00 	vstr	d7, [r0]
 801a068:	e740      	b.n	8019eec <__ieee754_rem_pio2+0x24>
 801a06a:	1532      	asrs	r2, r6, #20
 801a06c:	ee10 0a10 	vmov	r0, s0
 801a070:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801a074:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801a078:	ec41 0b17 	vmov	d7, r0, r1
 801a07c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801a080:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801a130 <__ieee754_rem_pio2+0x268>
 801a084:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801a088:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a08c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a090:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a094:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801a098:	a808      	add	r0, sp, #32
 801a09a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801a09e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a0a2:	ed8d 6b04 	vstr	d6, [sp, #16]
 801a0a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a0aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a0ae:	2103      	movs	r1, #3
 801a0b0:	ed30 7b02 	vldmdb	r0!, {d7}
 801a0b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0bc:	460b      	mov	r3, r1
 801a0be:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 801a0c2:	d0f5      	beq.n	801a0b0 <__ieee754_rem_pio2+0x1e8>
 801a0c4:	4921      	ldr	r1, [pc, #132]	; (801a14c <__ieee754_rem_pio2+0x284>)
 801a0c6:	9101      	str	r1, [sp, #4]
 801a0c8:	2102      	movs	r1, #2
 801a0ca:	9100      	str	r1, [sp, #0]
 801a0cc:	a802      	add	r0, sp, #8
 801a0ce:	4621      	mov	r1, r4
 801a0d0:	f000 f83e 	bl	801a150 <__kernel_rem_pio2>
 801a0d4:	2d00      	cmp	r5, #0
 801a0d6:	f6bf af27 	bge.w	8019f28 <__ieee754_rem_pio2+0x60>
 801a0da:	ed94 7b00 	vldr	d7, [r4]
 801a0de:	eeb1 7b47 	vneg.f64	d7, d7
 801a0e2:	ed84 7b00 	vstr	d7, [r4]
 801a0e6:	ed94 7b02 	vldr	d7, [r4, #8]
 801a0ea:	eeb1 7b47 	vneg.f64	d7, d7
 801a0ee:	ed84 7b02 	vstr	d7, [r4, #8]
 801a0f2:	e79b      	b.n	801a02c <__ieee754_rem_pio2+0x164>
 801a0f4:	f3af 8000 	nop.w
 801a0f8:	54400000 	.word	0x54400000
 801a0fc:	3ff921fb 	.word	0x3ff921fb
 801a100:	1a626331 	.word	0x1a626331
 801a104:	3dd0b461 	.word	0x3dd0b461
 801a108:	1a600000 	.word	0x1a600000
 801a10c:	3dd0b461 	.word	0x3dd0b461
 801a110:	2e037073 	.word	0x2e037073
 801a114:	3ba3198a 	.word	0x3ba3198a
 801a118:	6dc9c883 	.word	0x6dc9c883
 801a11c:	3fe45f30 	.word	0x3fe45f30
 801a120:	2e000000 	.word	0x2e000000
 801a124:	3ba3198a 	.word	0x3ba3198a
 801a128:	252049c1 	.word	0x252049c1
 801a12c:	397b839a 	.word	0x397b839a
 801a130:	00000000 	.word	0x00000000
 801a134:	41700000 	.word	0x41700000
 801a138:	3fe921fb 	.word	0x3fe921fb
 801a13c:	4002d97b 	.word	0x4002d97b
 801a140:	413921fb 	.word	0x413921fb
 801a144:	08027360 	.word	0x08027360
 801a148:	7fefffff 	.word	0x7fefffff
 801a14c:	080273e0 	.word	0x080273e0

0801a150 <__kernel_rem_pio2>:
 801a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a154:	ed2d 8b06 	vpush	{d8-d10}
 801a158:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801a15c:	460f      	mov	r7, r1
 801a15e:	9002      	str	r0, [sp, #8]
 801a160:	49c3      	ldr	r1, [pc, #780]	; (801a470 <__kernel_rem_pio2+0x320>)
 801a162:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801a164:	9301      	str	r3, [sp, #4]
 801a166:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801a16a:	9901      	ldr	r1, [sp, #4]
 801a16c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 801a16e:	f112 0f14 	cmn.w	r2, #20
 801a172:	bfa8      	it	ge
 801a174:	1ed0      	subge	r0, r2, #3
 801a176:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 801a17a:	bfaa      	itet	ge
 801a17c:	2418      	movge	r4, #24
 801a17e:	2000      	movlt	r0, #0
 801a180:	fb90 f0f4 	sdivge	r0, r0, r4
 801a184:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 801a458 <__kernel_rem_pio2+0x308>
 801a188:	f06f 0417 	mvn.w	r4, #23
 801a18c:	fb00 4404 	mla	r4, r0, r4, r4
 801a190:	eba0 060a 	sub.w	r6, r0, sl
 801a194:	4414      	add	r4, r2
 801a196:	eb09 0c0a 	add.w	ip, r9, sl
 801a19a:	ad1a      	add	r5, sp, #104	; 0x68
 801a19c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 801a1a0:	2200      	movs	r2, #0
 801a1a2:	4562      	cmp	r2, ip
 801a1a4:	dd10      	ble.n	801a1c8 <__kernel_rem_pio2+0x78>
 801a1a6:	9a01      	ldr	r2, [sp, #4]
 801a1a8:	a91a      	add	r1, sp, #104	; 0x68
 801a1aa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801a1ae:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 801a1b2:	f04f 0c00 	mov.w	ip, #0
 801a1b6:	45cc      	cmp	ip, r9
 801a1b8:	dc26      	bgt.n	801a208 <__kernel_rem_pio2+0xb8>
 801a1ba:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801a458 <__kernel_rem_pio2+0x308>
 801a1be:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a1c2:	4616      	mov	r6, r2
 801a1c4:	2500      	movs	r5, #0
 801a1c6:	e015      	b.n	801a1f4 <__kernel_rem_pio2+0xa4>
 801a1c8:	42d6      	cmn	r6, r2
 801a1ca:	d409      	bmi.n	801a1e0 <__kernel_rem_pio2+0x90>
 801a1cc:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 801a1d0:	ee07 1a90 	vmov	s15, r1
 801a1d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a1d8:	eca5 7b02 	vstmia	r5!, {d7}
 801a1dc:	3201      	adds	r2, #1
 801a1de:	e7e0      	b.n	801a1a2 <__kernel_rem_pio2+0x52>
 801a1e0:	eeb0 7b46 	vmov.f64	d7, d6
 801a1e4:	e7f8      	b.n	801a1d8 <__kernel_rem_pio2+0x88>
 801a1e6:	ecbe 5b02 	vldmia	lr!, {d5}
 801a1ea:	ed96 6b00 	vldr	d6, [r6]
 801a1ee:	3501      	adds	r5, #1
 801a1f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a1f4:	4555      	cmp	r5, sl
 801a1f6:	f1a6 0608 	sub.w	r6, r6, #8
 801a1fa:	ddf4      	ble.n	801a1e6 <__kernel_rem_pio2+0x96>
 801a1fc:	eca8 7b02 	vstmia	r8!, {d7}
 801a200:	f10c 0c01 	add.w	ip, ip, #1
 801a204:	3208      	adds	r2, #8
 801a206:	e7d6      	b.n	801a1b6 <__kernel_rem_pio2+0x66>
 801a208:	aa06      	add	r2, sp, #24
 801a20a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801a460 <__kernel_rem_pio2+0x310>
 801a20e:	ed9f ab96 	vldr	d10, [pc, #600]	; 801a468 <__kernel_rem_pio2+0x318>
 801a212:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801a216:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801a21a:	9204      	str	r2, [sp, #16]
 801a21c:	9303      	str	r3, [sp, #12]
 801a21e:	464d      	mov	r5, r9
 801a220:	00eb      	lsls	r3, r5, #3
 801a222:	9305      	str	r3, [sp, #20]
 801a224:	ab92      	add	r3, sp, #584	; 0x248
 801a226:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801a22a:	f10d 0b18 	add.w	fp, sp, #24
 801a22e:	ab6a      	add	r3, sp, #424	; 0x1a8
 801a230:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801a234:	465e      	mov	r6, fp
 801a236:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801a23a:	4628      	mov	r0, r5
 801a23c:	2800      	cmp	r0, #0
 801a23e:	f1a2 0208 	sub.w	r2, r2, #8
 801a242:	dc48      	bgt.n	801a2d6 <__kernel_rem_pio2+0x186>
 801a244:	4620      	mov	r0, r4
 801a246:	f000 fc5b 	bl	801ab00 <scalbn>
 801a24a:	eeb0 8b40 	vmov.f64	d8, d0
 801a24e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801a252:	ee28 0b00 	vmul.f64	d0, d8, d0
 801a256:	f000 ff43 	bl	801b0e0 <floor>
 801a25a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801a25e:	eea0 8b47 	vfms.f64	d8, d0, d7
 801a262:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801a266:	2c00      	cmp	r4, #0
 801a268:	ee17 8a90 	vmov	r8, s15
 801a26c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a270:	ee38 8b47 	vsub.f64	d8, d8, d7
 801a274:	dd41      	ble.n	801a2fa <__kernel_rem_pio2+0x1aa>
 801a276:	1e68      	subs	r0, r5, #1
 801a278:	ab06      	add	r3, sp, #24
 801a27a:	f1c4 0c18 	rsb	ip, r4, #24
 801a27e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801a282:	fa46 f20c 	asr.w	r2, r6, ip
 801a286:	4490      	add	r8, r2
 801a288:	fa02 f20c 	lsl.w	r2, r2, ip
 801a28c:	1ab6      	subs	r6, r6, r2
 801a28e:	f1c4 0217 	rsb	r2, r4, #23
 801a292:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801a296:	4116      	asrs	r6, r2
 801a298:	2e00      	cmp	r6, #0
 801a29a:	dd3d      	ble.n	801a318 <__kernel_rem_pio2+0x1c8>
 801a29c:	f04f 0c00 	mov.w	ip, #0
 801a2a0:	f108 0801 	add.w	r8, r8, #1
 801a2a4:	4660      	mov	r0, ip
 801a2a6:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801a2aa:	4565      	cmp	r5, ip
 801a2ac:	dc6a      	bgt.n	801a384 <__kernel_rem_pio2+0x234>
 801a2ae:	2c00      	cmp	r4, #0
 801a2b0:	dd04      	ble.n	801a2bc <__kernel_rem_pio2+0x16c>
 801a2b2:	2c01      	cmp	r4, #1
 801a2b4:	d07b      	beq.n	801a3ae <__kernel_rem_pio2+0x25e>
 801a2b6:	2c02      	cmp	r4, #2
 801a2b8:	f000 8083 	beq.w	801a3c2 <__kernel_rem_pio2+0x272>
 801a2bc:	2e02      	cmp	r6, #2
 801a2be:	d12b      	bne.n	801a318 <__kernel_rem_pio2+0x1c8>
 801a2c0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a2c4:	ee30 8b48 	vsub.f64	d8, d0, d8
 801a2c8:	b330      	cbz	r0, 801a318 <__kernel_rem_pio2+0x1c8>
 801a2ca:	4620      	mov	r0, r4
 801a2cc:	f000 fc18 	bl	801ab00 <scalbn>
 801a2d0:	ee38 8b40 	vsub.f64	d8, d8, d0
 801a2d4:	e020      	b.n	801a318 <__kernel_rem_pio2+0x1c8>
 801a2d6:	ee20 7b09 	vmul.f64	d7, d0, d9
 801a2da:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a2de:	3801      	subs	r0, #1
 801a2e0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801a2e4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801a2e8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a2ec:	eca6 0a01 	vstmia	r6!, {s0}
 801a2f0:	ed92 0b00 	vldr	d0, [r2]
 801a2f4:	ee37 0b00 	vadd.f64	d0, d7, d0
 801a2f8:	e7a0      	b.n	801a23c <__kernel_rem_pio2+0xec>
 801a2fa:	d105      	bne.n	801a308 <__kernel_rem_pio2+0x1b8>
 801a2fc:	1e6a      	subs	r2, r5, #1
 801a2fe:	ab06      	add	r3, sp, #24
 801a300:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a304:	15f6      	asrs	r6, r6, #23
 801a306:	e7c7      	b.n	801a298 <__kernel_rem_pio2+0x148>
 801a308:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a30c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a314:	da34      	bge.n	801a380 <__kernel_rem_pio2+0x230>
 801a316:	2600      	movs	r6, #0
 801a318:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a320:	f040 80aa 	bne.w	801a478 <__kernel_rem_pio2+0x328>
 801a324:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801a328:	4658      	mov	r0, fp
 801a32a:	2200      	movs	r2, #0
 801a32c:	4548      	cmp	r0, r9
 801a32e:	da50      	bge.n	801a3d2 <__kernel_rem_pio2+0x282>
 801a330:	2a00      	cmp	r2, #0
 801a332:	d06b      	beq.n	801a40c <__kernel_rem_pio2+0x2bc>
 801a334:	ab06      	add	r3, sp, #24
 801a336:	3c18      	subs	r4, #24
 801a338:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	f000 8087 	beq.w	801a450 <__kernel_rem_pio2+0x300>
 801a342:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a346:	4620      	mov	r0, r4
 801a348:	f000 fbda 	bl	801ab00 <scalbn>
 801a34c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 801a460 <__kernel_rem_pio2+0x310>
 801a350:	f10b 0201 	add.w	r2, fp, #1
 801a354:	a96a      	add	r1, sp, #424	; 0x1a8
 801a356:	00d3      	lsls	r3, r2, #3
 801a358:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a35c:	465a      	mov	r2, fp
 801a35e:	2a00      	cmp	r2, #0
 801a360:	f280 80b8 	bge.w	801a4d4 <__kernel_rem_pio2+0x384>
 801a364:	465a      	mov	r2, fp
 801a366:	2a00      	cmp	r2, #0
 801a368:	f2c0 80d6 	blt.w	801a518 <__kernel_rem_pio2+0x3c8>
 801a36c:	a96a      	add	r1, sp, #424	; 0x1a8
 801a36e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801a372:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801a458 <__kernel_rem_pio2+0x308>
 801a376:	4d3f      	ldr	r5, [pc, #252]	; (801a474 <__kernel_rem_pio2+0x324>)
 801a378:	2000      	movs	r0, #0
 801a37a:	ebab 0102 	sub.w	r1, fp, r2
 801a37e:	e0c0      	b.n	801a502 <__kernel_rem_pio2+0x3b2>
 801a380:	2602      	movs	r6, #2
 801a382:	e78b      	b.n	801a29c <__kernel_rem_pio2+0x14c>
 801a384:	f8db 2000 	ldr.w	r2, [fp]
 801a388:	b958      	cbnz	r0, 801a3a2 <__kernel_rem_pio2+0x252>
 801a38a:	b122      	cbz	r2, 801a396 <__kernel_rem_pio2+0x246>
 801a38c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801a390:	f8cb 2000 	str.w	r2, [fp]
 801a394:	2201      	movs	r2, #1
 801a396:	f10c 0c01 	add.w	ip, ip, #1
 801a39a:	f10b 0b04 	add.w	fp, fp, #4
 801a39e:	4610      	mov	r0, r2
 801a3a0:	e783      	b.n	801a2aa <__kernel_rem_pio2+0x15a>
 801a3a2:	ebae 0202 	sub.w	r2, lr, r2
 801a3a6:	f8cb 2000 	str.w	r2, [fp]
 801a3aa:	4602      	mov	r2, r0
 801a3ac:	e7f3      	b.n	801a396 <__kernel_rem_pio2+0x246>
 801a3ae:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a3b2:	ab06      	add	r3, sp, #24
 801a3b4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a3b8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a3bc:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801a3c0:	e77c      	b.n	801a2bc <__kernel_rem_pio2+0x16c>
 801a3c2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a3c6:	ab06      	add	r3, sp, #24
 801a3c8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a3cc:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801a3d0:	e7f4      	b.n	801a3bc <__kernel_rem_pio2+0x26c>
 801a3d2:	ab06      	add	r3, sp, #24
 801a3d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a3d8:	3801      	subs	r0, #1
 801a3da:	431a      	orrs	r2, r3
 801a3dc:	e7a6      	b.n	801a32c <__kernel_rem_pio2+0x1dc>
 801a3de:	3201      	adds	r2, #1
 801a3e0:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801a3e4:	2e00      	cmp	r6, #0
 801a3e6:	d0fa      	beq.n	801a3de <__kernel_rem_pio2+0x28e>
 801a3e8:	9b05      	ldr	r3, [sp, #20]
 801a3ea:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801a3ee:	eb0d 0003 	add.w	r0, sp, r3
 801a3f2:	9b01      	ldr	r3, [sp, #4]
 801a3f4:	18ee      	adds	r6, r5, r3
 801a3f6:	ab1a      	add	r3, sp, #104	; 0x68
 801a3f8:	f105 0c01 	add.w	ip, r5, #1
 801a3fc:	3898      	subs	r0, #152	; 0x98
 801a3fe:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a402:	442a      	add	r2, r5
 801a404:	4562      	cmp	r2, ip
 801a406:	da04      	bge.n	801a412 <__kernel_rem_pio2+0x2c2>
 801a408:	4615      	mov	r5, r2
 801a40a:	e709      	b.n	801a220 <__kernel_rem_pio2+0xd0>
 801a40c:	9804      	ldr	r0, [sp, #16]
 801a40e:	2201      	movs	r2, #1
 801a410:	e7e6      	b.n	801a3e0 <__kernel_rem_pio2+0x290>
 801a412:	9b03      	ldr	r3, [sp, #12]
 801a414:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a418:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a41c:	9305      	str	r3, [sp, #20]
 801a41e:	ee07 3a90 	vmov	s15, r3
 801a422:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a426:	2500      	movs	r5, #0
 801a428:	eca6 7b02 	vstmia	r6!, {d7}
 801a42c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801a458 <__kernel_rem_pio2+0x308>
 801a430:	46b0      	mov	r8, r6
 801a432:	4555      	cmp	r5, sl
 801a434:	dd04      	ble.n	801a440 <__kernel_rem_pio2+0x2f0>
 801a436:	eca0 7b02 	vstmia	r0!, {d7}
 801a43a:	f10c 0c01 	add.w	ip, ip, #1
 801a43e:	e7e1      	b.n	801a404 <__kernel_rem_pio2+0x2b4>
 801a440:	ecbe 5b02 	vldmia	lr!, {d5}
 801a444:	ed38 6b02 	vldmdb	r8!, {d6}
 801a448:	3501      	adds	r5, #1
 801a44a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a44e:	e7f0      	b.n	801a432 <__kernel_rem_pio2+0x2e2>
 801a450:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a454:	e76e      	b.n	801a334 <__kernel_rem_pio2+0x1e4>
 801a456:	bf00      	nop
	...
 801a464:	3e700000 	.word	0x3e700000
 801a468:	00000000 	.word	0x00000000
 801a46c:	41700000 	.word	0x41700000
 801a470:	08027650 	.word	0x08027650
 801a474:	08027610 	.word	0x08027610
 801a478:	4260      	negs	r0, r4
 801a47a:	eeb0 0b48 	vmov.f64	d0, d8
 801a47e:	f000 fb3f 	bl	801ab00 <scalbn>
 801a482:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801a660 <__kernel_rem_pio2+0x510>
 801a486:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801a48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a48e:	db18      	blt.n	801a4c2 <__kernel_rem_pio2+0x372>
 801a490:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801a668 <__kernel_rem_pio2+0x518>
 801a494:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a498:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a49c:	aa06      	add	r2, sp, #24
 801a49e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801a4a2:	eea5 0b46 	vfms.f64	d0, d5, d6
 801a4a6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a4aa:	f105 0b01 	add.w	fp, r5, #1
 801a4ae:	ee10 3a10 	vmov	r3, s0
 801a4b2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a4b6:	ee17 3a10 	vmov	r3, s14
 801a4ba:	3418      	adds	r4, #24
 801a4bc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801a4c0:	e73f      	b.n	801a342 <__kernel_rem_pio2+0x1f2>
 801a4c2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a4c6:	aa06      	add	r2, sp, #24
 801a4c8:	ee10 3a10 	vmov	r3, s0
 801a4cc:	46ab      	mov	fp, r5
 801a4ce:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a4d2:	e736      	b.n	801a342 <__kernel_rem_pio2+0x1f2>
 801a4d4:	a806      	add	r0, sp, #24
 801a4d6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801a4da:	9001      	str	r0, [sp, #4]
 801a4dc:	ee07 0a90 	vmov	s15, r0
 801a4e0:	3a01      	subs	r2, #1
 801a4e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a4e6:	ee27 7b00 	vmul.f64	d7, d7, d0
 801a4ea:	ee20 0b06 	vmul.f64	d0, d0, d6
 801a4ee:	ed21 7b02 	vstmdb	r1!, {d7}
 801a4f2:	e734      	b.n	801a35e <__kernel_rem_pio2+0x20e>
 801a4f4:	ecb5 5b02 	vldmia	r5!, {d5}
 801a4f8:	ecb4 6b02 	vldmia	r4!, {d6}
 801a4fc:	3001      	adds	r0, #1
 801a4fe:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a502:	4548      	cmp	r0, r9
 801a504:	dc01      	bgt.n	801a50a <__kernel_rem_pio2+0x3ba>
 801a506:	4288      	cmp	r0, r1
 801a508:	ddf4      	ble.n	801a4f4 <__kernel_rem_pio2+0x3a4>
 801a50a:	a842      	add	r0, sp, #264	; 0x108
 801a50c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a510:	ed81 7b00 	vstr	d7, [r1]
 801a514:	3a01      	subs	r2, #1
 801a516:	e726      	b.n	801a366 <__kernel_rem_pio2+0x216>
 801a518:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a51a:	2a02      	cmp	r2, #2
 801a51c:	dc0a      	bgt.n	801a534 <__kernel_rem_pio2+0x3e4>
 801a51e:	2a00      	cmp	r2, #0
 801a520:	dc2e      	bgt.n	801a580 <__kernel_rem_pio2+0x430>
 801a522:	d047      	beq.n	801a5b4 <__kernel_rem_pio2+0x464>
 801a524:	f008 0007 	and.w	r0, r8, #7
 801a528:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801a52c:	ecbd 8b06 	vpop	{d8-d10}
 801a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a534:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a536:	2a03      	cmp	r2, #3
 801a538:	d1f4      	bne.n	801a524 <__kernel_rem_pio2+0x3d4>
 801a53a:	a942      	add	r1, sp, #264	; 0x108
 801a53c:	f1a3 0208 	sub.w	r2, r3, #8
 801a540:	440a      	add	r2, r1
 801a542:	4611      	mov	r1, r2
 801a544:	4658      	mov	r0, fp
 801a546:	2800      	cmp	r0, #0
 801a548:	f1a1 0108 	sub.w	r1, r1, #8
 801a54c:	dc55      	bgt.n	801a5fa <__kernel_rem_pio2+0x4aa>
 801a54e:	4659      	mov	r1, fp
 801a550:	2901      	cmp	r1, #1
 801a552:	f1a2 0208 	sub.w	r2, r2, #8
 801a556:	dc60      	bgt.n	801a61a <__kernel_rem_pio2+0x4ca>
 801a558:	ed9f 7b45 	vldr	d7, [pc, #276]	; 801a670 <__kernel_rem_pio2+0x520>
 801a55c:	aa42      	add	r2, sp, #264	; 0x108
 801a55e:	4413      	add	r3, r2
 801a560:	f1bb 0f01 	cmp.w	fp, #1
 801a564:	dc69      	bgt.n	801a63a <__kernel_rem_pio2+0x4ea>
 801a566:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801a56a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801a56e:	2e00      	cmp	r6, #0
 801a570:	d16a      	bne.n	801a648 <__kernel_rem_pio2+0x4f8>
 801a572:	ed87 5b00 	vstr	d5, [r7]
 801a576:	ed87 6b02 	vstr	d6, [r7, #8]
 801a57a:	ed87 7b04 	vstr	d7, [r7, #16]
 801a57e:	e7d1      	b.n	801a524 <__kernel_rem_pio2+0x3d4>
 801a580:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801a670 <__kernel_rem_pio2+0x520>
 801a584:	aa42      	add	r2, sp, #264	; 0x108
 801a586:	4413      	add	r3, r2
 801a588:	465a      	mov	r2, fp
 801a58a:	2a00      	cmp	r2, #0
 801a58c:	da26      	bge.n	801a5dc <__kernel_rem_pio2+0x48c>
 801a58e:	b35e      	cbz	r6, 801a5e8 <__kernel_rem_pio2+0x498>
 801a590:	eeb1 7b46 	vneg.f64	d7, d6
 801a594:	ed87 7b00 	vstr	d7, [r7]
 801a598:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801a59c:	aa44      	add	r2, sp, #272	; 0x110
 801a59e:	2301      	movs	r3, #1
 801a5a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a5a4:	459b      	cmp	fp, r3
 801a5a6:	da22      	bge.n	801a5ee <__kernel_rem_pio2+0x49e>
 801a5a8:	b10e      	cbz	r6, 801a5ae <__kernel_rem_pio2+0x45e>
 801a5aa:	eeb1 7b47 	vneg.f64	d7, d7
 801a5ae:	ed87 7b02 	vstr	d7, [r7, #8]
 801a5b2:	e7b7      	b.n	801a524 <__kernel_rem_pio2+0x3d4>
 801a5b4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801a670 <__kernel_rem_pio2+0x520>
 801a5b8:	aa42      	add	r2, sp, #264	; 0x108
 801a5ba:	4413      	add	r3, r2
 801a5bc:	f1bb 0f00 	cmp.w	fp, #0
 801a5c0:	da05      	bge.n	801a5ce <__kernel_rem_pio2+0x47e>
 801a5c2:	b10e      	cbz	r6, 801a5c8 <__kernel_rem_pio2+0x478>
 801a5c4:	eeb1 7b47 	vneg.f64	d7, d7
 801a5c8:	ed87 7b00 	vstr	d7, [r7]
 801a5cc:	e7aa      	b.n	801a524 <__kernel_rem_pio2+0x3d4>
 801a5ce:	ed33 6b02 	vldmdb	r3!, {d6}
 801a5d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a5d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a5da:	e7ef      	b.n	801a5bc <__kernel_rem_pio2+0x46c>
 801a5dc:	ed33 7b02 	vldmdb	r3!, {d7}
 801a5e0:	3a01      	subs	r2, #1
 801a5e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 801a5e6:	e7d0      	b.n	801a58a <__kernel_rem_pio2+0x43a>
 801a5e8:	eeb0 7b46 	vmov.f64	d7, d6
 801a5ec:	e7d2      	b.n	801a594 <__kernel_rem_pio2+0x444>
 801a5ee:	ecb2 6b02 	vldmia	r2!, {d6}
 801a5f2:	3301      	adds	r3, #1
 801a5f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a5f8:	e7d4      	b.n	801a5a4 <__kernel_rem_pio2+0x454>
 801a5fa:	ed91 7b00 	vldr	d7, [r1]
 801a5fe:	ed91 5b02 	vldr	d5, [r1, #8]
 801a602:	3801      	subs	r0, #1
 801a604:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a608:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a60c:	ed81 6b00 	vstr	d6, [r1]
 801a610:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a614:	ed81 7b02 	vstr	d7, [r1, #8]
 801a618:	e795      	b.n	801a546 <__kernel_rem_pio2+0x3f6>
 801a61a:	ed92 7b00 	vldr	d7, [r2]
 801a61e:	ed92 5b02 	vldr	d5, [r2, #8]
 801a622:	3901      	subs	r1, #1
 801a624:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a628:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a62c:	ed82 6b00 	vstr	d6, [r2]
 801a630:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a634:	ed82 7b02 	vstr	d7, [r2, #8]
 801a638:	e78a      	b.n	801a550 <__kernel_rem_pio2+0x400>
 801a63a:	ed33 6b02 	vldmdb	r3!, {d6}
 801a63e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a642:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a646:	e78b      	b.n	801a560 <__kernel_rem_pio2+0x410>
 801a648:	eeb1 5b45 	vneg.f64	d5, d5
 801a64c:	eeb1 6b46 	vneg.f64	d6, d6
 801a650:	ed87 5b00 	vstr	d5, [r7]
 801a654:	eeb1 7b47 	vneg.f64	d7, d7
 801a658:	ed87 6b02 	vstr	d6, [r7, #8]
 801a65c:	e78d      	b.n	801a57a <__kernel_rem_pio2+0x42a>
 801a65e:	bf00      	nop
 801a660:	00000000 	.word	0x00000000
 801a664:	41700000 	.word	0x41700000
 801a668:	00000000 	.word	0x00000000
 801a66c:	3e700000 	.word	0x3e700000
	...

0801a678 <__kernel_tan>:
 801a678:	eeb0 7b40 	vmov.f64	d7, d0
 801a67c:	ee17 3a90 	vmov	r3, s15
 801a680:	4989      	ldr	r1, [pc, #548]	; (801a8a8 <__kernel_tan+0x230>)
 801a682:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a686:	428a      	cmp	r2, r1
 801a688:	b510      	push	{r4, lr}
 801a68a:	dc33      	bgt.n	801a6f4 <__kernel_tan+0x7c>
 801a68c:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801a690:	ee16 1a90 	vmov	r1, s13
 801a694:	2900      	cmp	r1, #0
 801a696:	d143      	bne.n	801a720 <__kernel_tan+0xa8>
 801a698:	ee10 4a10 	vmov	r4, s0
 801a69c:	1c43      	adds	r3, r0, #1
 801a69e:	4323      	orrs	r3, r4
 801a6a0:	4313      	orrs	r3, r2
 801a6a2:	d108      	bne.n	801a6b6 <__kernel_tan+0x3e>
 801a6a4:	f000 fa20 	bl	801aae8 <fabs>
 801a6a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a6ac:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801a6b0:	eeb0 0b47 	vmov.f64	d0, d7
 801a6b4:	bd10      	pop	{r4, pc}
 801a6b6:	2801      	cmp	r0, #1
 801a6b8:	d0fa      	beq.n	801a6b0 <__kernel_tan+0x38>
 801a6ba:	ee30 6b01 	vadd.f64	d6, d0, d1
 801a6be:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a6c2:	ec53 2b16 	vmov	r2, r3, d6
 801a6c6:	ee87 3b06 	vdiv.f64	d3, d7, d6
 801a6ca:	460a      	mov	r2, r1
 801a6cc:	ec43 2b15 	vmov	d5, r2, r3
 801a6d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a6d4:	ec53 2b13 	vmov	r2, r3, d3
 801a6d8:	ee35 4b40 	vsub.f64	d4, d5, d0
 801a6dc:	460a      	mov	r2, r1
 801a6de:	ec43 2b17 	vmov	d7, r2, r3
 801a6e2:	ee31 4b44 	vsub.f64	d4, d1, d4
 801a6e6:	eea5 6b07 	vfma.f64	d6, d5, d7
 801a6ea:	eea4 6b07 	vfma.f64	d6, d4, d7
 801a6ee:	eea6 7b03 	vfma.f64	d7, d6, d3
 801a6f2:	e7dd      	b.n	801a6b0 <__kernel_tan+0x38>
 801a6f4:	496d      	ldr	r1, [pc, #436]	; (801a8ac <__kernel_tan+0x234>)
 801a6f6:	428a      	cmp	r2, r1
 801a6f8:	dd12      	ble.n	801a720 <__kernel_tan+0xa8>
 801a6fa:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 801a828 <__kernel_tan+0x1b0>
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	bfb8      	it	lt
 801a702:	eeb1 7b40 	vneglt.f64	d7, d0
 801a706:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a70a:	ed9f 7b49 	vldr	d7, [pc, #292]	; 801a830 <__kernel_tan+0x1b8>
 801a70e:	bfb8      	it	lt
 801a710:	eeb1 1b41 	vneglt.f64	d1, d1
 801a714:	ee37 7b41 	vsub.f64	d7, d7, d1
 801a718:	ed9f 1b47 	vldr	d1, [pc, #284]	; 801a838 <__kernel_tan+0x1c0>
 801a71c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a720:	ee27 5b07 	vmul.f64	d5, d7, d7
 801a724:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801a840 <__kernel_tan+0x1c8>
 801a728:	ee25 6b05 	vmul.f64	d6, d5, d5
 801a72c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801a848 <__kernel_tan+0x1d0>
 801a730:	eea6 4b03 	vfma.f64	d4, d6, d3
 801a734:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801a850 <__kernel_tan+0x1d8>
 801a738:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a73c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801a858 <__kernel_tan+0x1e0>
 801a740:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a744:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801a860 <__kernel_tan+0x1e8>
 801a748:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a74c:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801a868 <__kernel_tan+0x1f0>
 801a750:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801a870 <__kernel_tan+0x1f8>
 801a754:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a758:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801a878 <__kernel_tan+0x200>
 801a75c:	eea6 3b02 	vfma.f64	d3, d6, d2
 801a760:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801a880 <__kernel_tan+0x208>
 801a764:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a768:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801a888 <__kernel_tan+0x210>
 801a76c:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a770:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801a890 <__kernel_tan+0x218>
 801a774:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a778:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801a898 <__kernel_tan+0x220>
 801a77c:	494b      	ldr	r1, [pc, #300]	; (801a8ac <__kernel_tan+0x234>)
 801a77e:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a782:	ee27 2b05 	vmul.f64	d2, d7, d5
 801a786:	eeb0 6b44 	vmov.f64	d6, d4
 801a78a:	eeb0 4b41 	vmov.f64	d4, d1
 801a78e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801a792:	eea6 4b02 	vfma.f64	d4, d6, d2
 801a796:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801a8a0 <__kernel_tan+0x228>
 801a79a:	eea4 1b05 	vfma.f64	d1, d4, d5
 801a79e:	428a      	cmp	r2, r1
 801a7a0:	eea2 1b06 	vfma.f64	d1, d2, d6
 801a7a4:	ee37 5b01 	vadd.f64	d5, d7, d1
 801a7a8:	dd1d      	ble.n	801a7e6 <__kernel_tan+0x16e>
 801a7aa:	ee25 3b05 	vmul.f64	d3, d5, d5
 801a7ae:	179b      	asrs	r3, r3, #30
 801a7b0:	ee06 0a90 	vmov	s13, r0
 801a7b4:	f003 0302 	and.w	r3, r3, #2
 801a7b8:	f1c3 0301 	rsb	r3, r3, #1
 801a7bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a7c0:	ee35 5b06 	vadd.f64	d5, d5, d6
 801a7c4:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801a7c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801a7cc:	ee34 4b41 	vsub.f64	d4, d4, d1
 801a7d0:	ee37 7b44 	vsub.f64	d7, d7, d4
 801a7d4:	eea7 6b45 	vfms.f64	d6, d7, d5
 801a7d8:	ee07 3a90 	vmov	s15, r3
 801a7dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a7e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a7e4:	e764      	b.n	801a6b0 <__kernel_tan+0x38>
 801a7e6:	2801      	cmp	r0, #1
 801a7e8:	d01a      	beq.n	801a820 <__kernel_tan+0x1a8>
 801a7ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a7ee:	ec51 0b15 	vmov	r0, r1, d5
 801a7f2:	2000      	movs	r0, #0
 801a7f4:	ec41 0b13 	vmov	d3, r0, r1
 801a7f8:	ee33 7b47 	vsub.f64	d7, d3, d7
 801a7fc:	ee31 1b47 	vsub.f64	d1, d1, d7
 801a800:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a804:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801a808:	ec53 2b14 	vmov	r2, r3, d4
 801a80c:	4602      	mov	r2, r0
 801a80e:	ec43 2b17 	vmov	d7, r2, r3
 801a812:	eea3 6b07 	vfma.f64	d6, d3, d7
 801a816:	eea1 6b07 	vfma.f64	d6, d1, d7
 801a81a:	eea6 7b04 	vfma.f64	d7, d6, d4
 801a81e:	e747      	b.n	801a6b0 <__kernel_tan+0x38>
 801a820:	eeb0 7b45 	vmov.f64	d7, d5
 801a824:	e744      	b.n	801a6b0 <__kernel_tan+0x38>
 801a826:	bf00      	nop
 801a828:	54442d18 	.word	0x54442d18
 801a82c:	3fe921fb 	.word	0x3fe921fb
 801a830:	33145c07 	.word	0x33145c07
 801a834:	3c81a626 	.word	0x3c81a626
	...
 801a840:	db605373 	.word	0xdb605373
 801a844:	bef375cb 	.word	0xbef375cb
 801a848:	a03792a6 	.word	0xa03792a6
 801a84c:	3f147e88 	.word	0x3f147e88
 801a850:	f2f26501 	.word	0xf2f26501
 801a854:	3f4344d8 	.word	0x3f4344d8
 801a858:	c9560328 	.word	0xc9560328
 801a85c:	3f6d6d22 	.word	0x3f6d6d22
 801a860:	8406d637 	.word	0x8406d637
 801a864:	3f9664f4 	.word	0x3f9664f4
 801a868:	1110fe7a 	.word	0x1110fe7a
 801a86c:	3fc11111 	.word	0x3fc11111
 801a870:	74bf7ad4 	.word	0x74bf7ad4
 801a874:	3efb2a70 	.word	0x3efb2a70
 801a878:	32f0a7e9 	.word	0x32f0a7e9
 801a87c:	3f12b80f 	.word	0x3f12b80f
 801a880:	1a8d1068 	.word	0x1a8d1068
 801a884:	3f3026f7 	.word	0x3f3026f7
 801a888:	fee08315 	.word	0xfee08315
 801a88c:	3f57dbc8 	.word	0x3f57dbc8
 801a890:	e96e8493 	.word	0xe96e8493
 801a894:	3f8226e3 	.word	0x3f8226e3
 801a898:	1bb341fe 	.word	0x1bb341fe
 801a89c:	3faba1ba 	.word	0x3faba1ba
 801a8a0:	55555563 	.word	0x55555563
 801a8a4:	3fd55555 	.word	0x3fd55555
 801a8a8:	3e2fffff 	.word	0x3e2fffff
 801a8ac:	3fe59427 	.word	0x3fe59427

0801a8b0 <expm1f>:
 801a8b0:	ee10 2a10 	vmov	r2, s0
 801a8b4:	497d      	ldr	r1, [pc, #500]	; (801aaac <expm1f+0x1fc>)
 801a8b6:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801a8ba:	428b      	cmp	r3, r1
 801a8bc:	d920      	bls.n	801a900 <expm1f+0x50>
 801a8be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a8c2:	d902      	bls.n	801a8ca <expm1f+0x1a>
 801a8c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a8c8:	4770      	bx	lr
 801a8ca:	d105      	bne.n	801a8d8 <expm1f+0x28>
 801a8cc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801a8d0:	2a00      	cmp	r2, #0
 801a8d2:	fe20 0a27 	vselge.f32	s0, s0, s15
 801a8d6:	4770      	bx	lr
 801a8d8:	2a00      	cmp	r2, #0
 801a8da:	db05      	blt.n	801a8e8 <expm1f+0x38>
 801a8dc:	4974      	ldr	r1, [pc, #464]	; (801aab0 <expm1f+0x200>)
 801a8de:	428b      	cmp	r3, r1
 801a8e0:	d95c      	bls.n	801a99c <expm1f+0xec>
 801a8e2:	2000      	movs	r0, #0
 801a8e4:	f7fe bdea 	b.w	80194bc <__math_oflowf>
 801a8e8:	eddf 7a72 	vldr	s15, [pc, #456]	; 801aab4 <expm1f+0x204>
 801a8ec:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a8f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8f8:	d550      	bpl.n	801a99c <expm1f+0xec>
 801a8fa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801a8fe:	4770      	bx	lr
 801a900:	496d      	ldr	r1, [pc, #436]	; (801aab8 <expm1f+0x208>)
 801a902:	428b      	cmp	r3, r1
 801a904:	d966      	bls.n	801a9d4 <expm1f+0x124>
 801a906:	496d      	ldr	r1, [pc, #436]	; (801aabc <expm1f+0x20c>)
 801a908:	428b      	cmp	r3, r1
 801a90a:	d847      	bhi.n	801a99c <expm1f+0xec>
 801a90c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801aac0 <expm1f+0x210>
 801a910:	2a00      	cmp	r2, #0
 801a912:	bfa7      	ittee	ge
 801a914:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801a918:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 801aac4 <expm1f+0x214>
 801a91c:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 801aac8 <expm1f+0x218>
 801a920:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801a924:	bfac      	ite	ge
 801a926:	2301      	movge	r3, #1
 801a928:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a92c:	ee37 0a66 	vsub.f32	s0, s14, s13
 801a930:	ee77 7a40 	vsub.f32	s15, s14, s0
 801a934:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a938:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801a93c:	ee20 4a25 	vmul.f32	s8, s0, s11
 801a940:	ed9f 6a62 	vldr	s12, [pc, #392]	; 801aacc <expm1f+0x21c>
 801a944:	eddf 6a62 	vldr	s13, [pc, #392]	; 801aad0 <expm1f+0x220>
 801a948:	ed9f 5a62 	vldr	s10, [pc, #392]	; 801aad4 <expm1f+0x224>
 801a94c:	ee20 7a04 	vmul.f32	s14, s0, s8
 801a950:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801a954:	eee7 6a06 	vfma.f32	s13, s14, s12
 801a958:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 801aad8 <expm1f+0x228>
 801a95c:	eea6 6a87 	vfma.f32	s12, s13, s14
 801a960:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801aadc <expm1f+0x22c>
 801a964:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a968:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a96c:	eea6 5a87 	vfma.f32	s10, s13, s14
 801a970:	eef0 6a46 	vmov.f32	s13, s12
 801a974:	eee5 6a07 	vfma.f32	s13, s10, s14
 801a978:	eee4 4a66 	vfms.f32	s9, s8, s13
 801a97c:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801a980:	eea0 4a64 	vfms.f32	s8, s0, s9
 801a984:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801a988:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801a98c:	ee66 6a87 	vmul.f32	s13, s13, s14
 801a990:	bb73      	cbnz	r3, 801a9f0 <expm1f+0x140>
 801a992:	ee90 7a26 	vfnms.f32	s14, s0, s13
 801a996:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a99a:	4770      	bx	lr
 801a99c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801a9a0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a9a4:	2a00      	cmp	r2, #0
 801a9a6:	fe67 7a87 	vselge.f32	s15, s15, s14
 801a9aa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801aae0 <expm1f+0x230>
 801a9ae:	ee40 7a07 	vmla.f32	s15, s0, s14
 801a9b2:	eeb0 7a40 	vmov.f32	s14, s0
 801a9b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a9ba:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a9be:	ee17 3a90 	vmov	r3, s15
 801a9c2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 801aac0 <expm1f+0x210>
 801a9c6:	eea6 7ae7 	vfms.f32	s14, s13, s15
 801a9ca:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801aac4 <expm1f+0x214>
 801a9ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801a9d2:	e7ab      	b.n	801a92c <expm1f+0x7c>
 801a9d4:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801a9d8:	d208      	bcs.n	801a9ec <expm1f+0x13c>
 801a9da:	eddf 7a42 	vldr	s15, [pc, #264]	; 801aae4 <expm1f+0x234>
 801a9de:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a9e2:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801a9e6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a9ea:	4770      	bx	lr
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	e7a3      	b.n	801a938 <expm1f+0x88>
 801a9f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801a9f4:	1c5a      	adds	r2, r3, #1
 801a9f6:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801a9fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a9fe:	d106      	bne.n	801aa0e <expm1f+0x15e>
 801aa00:	ee70 7a67 	vsub.f32	s15, s0, s15
 801aa04:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801aa08:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801aa0c:	4770      	bx	lr
 801aa0e:	2b01      	cmp	r3, #1
 801aa10:	d118      	bne.n	801aa44 <expm1f+0x194>
 801aa12:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801aa16:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801aa1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa1e:	bf5b      	ittet	pl
 801aa20:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801aa24:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801aa28:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 801aa2c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801aa30:	bf43      	ittte	mi
 801aa32:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 801aa36:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801aa3a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801aa3e:	eeb0 0a46 	vmovpl.f32	s0, s12
 801aa42:	4770      	bx	lr
 801aa44:	1c5a      	adds	r2, r3, #1
 801aa46:	2a39      	cmp	r2, #57	; 0x39
 801aa48:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801aa4c:	d90b      	bls.n	801aa66 <expm1f+0x1b6>
 801aa4e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801aa52:	ee76 7a67 	vsub.f32	s15, s12, s15
 801aa56:	ee17 3a90 	vmov	r3, s15
 801aa5a:	4419      	add	r1, r3
 801aa5c:	ee07 1a90 	vmov	s15, r1
 801aa60:	ee37 0ac6 	vsub.f32	s0, s15, s12
 801aa64:	4770      	bx	lr
 801aa66:	2b16      	cmp	r3, #22
 801aa68:	dc11      	bgt.n	801aa8e <expm1f+0x1de>
 801aa6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801aa6e:	fa42 f303 	asr.w	r3, r2, r3
 801aa72:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801aa76:	ee07 3a10 	vmov	s14, r3
 801aa7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801aa7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801aa82:	ee17 3a90 	vmov	r3, s15
 801aa86:	440b      	add	r3, r1
 801aa88:	ee00 3a10 	vmov	s0, r3
 801aa8c:	4770      	bx	lr
 801aa8e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801aa92:	05db      	lsls	r3, r3, #23
 801aa94:	ee07 3a10 	vmov	s14, r3
 801aa98:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aa9c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801aaa0:	ee77 7a86 	vadd.f32	s15, s15, s12
 801aaa4:	ee17 3a90 	vmov	r3, s15
 801aaa8:	e7ed      	b.n	801aa86 <expm1f+0x1d6>
 801aaaa:	bf00      	nop
 801aaac:	4195b843 	.word	0x4195b843
 801aab0:	42b17217 	.word	0x42b17217
 801aab4:	0da24260 	.word	0x0da24260
 801aab8:	3eb17218 	.word	0x3eb17218
 801aabc:	3f851591 	.word	0x3f851591
 801aac0:	3f317180 	.word	0x3f317180
 801aac4:	3717f7d1 	.word	0x3717f7d1
 801aac8:	b717f7d1 	.word	0xb717f7d1
 801aacc:	b457edbb 	.word	0xb457edbb
 801aad0:	36867e54 	.word	0x36867e54
 801aad4:	bd088889 	.word	0xbd088889
 801aad8:	b8a670cd 	.word	0xb8a670cd
 801aadc:	3ad00d01 	.word	0x3ad00d01
 801aae0:	3fb8aa3b 	.word	0x3fb8aa3b
 801aae4:	7149f2ca 	.word	0x7149f2ca

0801aae8 <fabs>:
 801aae8:	ec51 0b10 	vmov	r0, r1, d0
 801aaec:	ee10 2a10 	vmov	r2, s0
 801aaf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aaf4:	ec43 2b10 	vmov	d0, r2, r3
 801aaf8:	4770      	bx	lr
 801aafa:	0000      	movs	r0, r0
 801aafc:	0000      	movs	r0, r0
	...

0801ab00 <scalbn>:
 801ab00:	ee10 1a90 	vmov	r1, s1
 801ab04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ab08:	b98b      	cbnz	r3, 801ab2e <scalbn+0x2e>
 801ab0a:	ee10 3a10 	vmov	r3, s0
 801ab0e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ab12:	4319      	orrs	r1, r3
 801ab14:	d00a      	beq.n	801ab2c <scalbn+0x2c>
 801ab16:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801abc8 <scalbn+0xc8>
 801ab1a:	4b37      	ldr	r3, [pc, #220]	; (801abf8 <scalbn+0xf8>)
 801ab1c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ab20:	4298      	cmp	r0, r3
 801ab22:	da0b      	bge.n	801ab3c <scalbn+0x3c>
 801ab24:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801abd0 <scalbn+0xd0>
 801ab28:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ab2c:	4770      	bx	lr
 801ab2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801ab32:	4293      	cmp	r3, r2
 801ab34:	d107      	bne.n	801ab46 <scalbn+0x46>
 801ab36:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ab3a:	4770      	bx	lr
 801ab3c:	ee10 1a90 	vmov	r1, s1
 801ab40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ab44:	3b36      	subs	r3, #54	; 0x36
 801ab46:	f24c 3250 	movw	r2, #50000	; 0xc350
 801ab4a:	4290      	cmp	r0, r2
 801ab4c:	dd0d      	ble.n	801ab6a <scalbn+0x6a>
 801ab4e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801abd8 <scalbn+0xd8>
 801ab52:	ee10 3a90 	vmov	r3, s1
 801ab56:	eeb0 6b47 	vmov.f64	d6, d7
 801ab5a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801abe0 <scalbn+0xe0>
 801ab5e:	2b00      	cmp	r3, #0
 801ab60:	fe27 7b05 	vselge.f64	d7, d7, d5
 801ab64:	ee27 0b06 	vmul.f64	d0, d7, d6
 801ab68:	4770      	bx	lr
 801ab6a:	4418      	add	r0, r3
 801ab6c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801ab70:	4298      	cmp	r0, r3
 801ab72:	dcec      	bgt.n	801ab4e <scalbn+0x4e>
 801ab74:	2800      	cmp	r0, #0
 801ab76:	dd0a      	ble.n	801ab8e <scalbn+0x8e>
 801ab78:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801ab7c:	ec53 2b10 	vmov	r2, r3, d0
 801ab80:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801ab84:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801ab88:	ec43 2b10 	vmov	d0, r2, r3
 801ab8c:	4770      	bx	lr
 801ab8e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801ab92:	da09      	bge.n	801aba8 <scalbn+0xa8>
 801ab94:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801abd0 <scalbn+0xd0>
 801ab98:	ee10 3a90 	vmov	r3, s1
 801ab9c:	eeb0 6b47 	vmov.f64	d6, d7
 801aba0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 801abe8 <scalbn+0xe8>
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	e7db      	b.n	801ab60 <scalbn+0x60>
 801aba8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801abac:	ec53 2b10 	vmov	r2, r3, d0
 801abb0:	3036      	adds	r0, #54	; 0x36
 801abb2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801abb6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801abba:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 801abf0 <scalbn+0xf0>
 801abbe:	ec43 2b10 	vmov	d0, r2, r3
 801abc2:	e7b1      	b.n	801ab28 <scalbn+0x28>
 801abc4:	f3af 8000 	nop.w
 801abc8:	00000000 	.word	0x00000000
 801abcc:	43500000 	.word	0x43500000
 801abd0:	c2f8f359 	.word	0xc2f8f359
 801abd4:	01a56e1f 	.word	0x01a56e1f
 801abd8:	8800759c 	.word	0x8800759c
 801abdc:	7e37e43c 	.word	0x7e37e43c
 801abe0:	8800759c 	.word	0x8800759c
 801abe4:	fe37e43c 	.word	0xfe37e43c
 801abe8:	c2f8f359 	.word	0xc2f8f359
 801abec:	81a56e1f 	.word	0x81a56e1f
 801abf0:	00000000 	.word	0x00000000
 801abf4:	3c900000 	.word	0x3c900000
 801abf8:	ffff3cb0 	.word	0xffff3cb0

0801abfc <__kernel_rem_pio2f>:
 801abfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac00:	ed2d 8b04 	vpush	{d8-d9}
 801ac04:	b0d9      	sub	sp, #356	; 0x164
 801ac06:	4688      	mov	r8, r1
 801ac08:	9002      	str	r0, [sp, #8]
 801ac0a:	49b8      	ldr	r1, [pc, #736]	; (801aeec <__kernel_rem_pio2f+0x2f0>)
 801ac0c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801ac0e:	9301      	str	r3, [sp, #4]
 801ac10:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801ac14:	9901      	ldr	r1, [sp, #4]
 801ac16:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801ac18:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801ac1c:	1d11      	adds	r1, r2, #4
 801ac1e:	db25      	blt.n	801ac6c <__kernel_rem_pio2f+0x70>
 801ac20:	1ed0      	subs	r0, r2, #3
 801ac22:	bf48      	it	mi
 801ac24:	1d10      	addmi	r0, r2, #4
 801ac26:	10c0      	asrs	r0, r0, #3
 801ac28:	1c45      	adds	r5, r0, #1
 801ac2a:	00e9      	lsls	r1, r5, #3
 801ac2c:	eba0 070b 	sub.w	r7, r0, fp
 801ac30:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801aefc <__kernel_rem_pio2f+0x300>
 801ac34:	9103      	str	r1, [sp, #12]
 801ac36:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801ac3a:	eb0a 0c0b 	add.w	ip, sl, fp
 801ac3e:	ae1c      	add	r6, sp, #112	; 0x70
 801ac40:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801ac44:	2400      	movs	r4, #0
 801ac46:	4564      	cmp	r4, ip
 801ac48:	dd12      	ble.n	801ac70 <__kernel_rem_pio2f+0x74>
 801ac4a:	9901      	ldr	r1, [sp, #4]
 801ac4c:	ac1c      	add	r4, sp, #112	; 0x70
 801ac4e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801ac52:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801ac56:	f04f 0c00 	mov.w	ip, #0
 801ac5a:	45d4      	cmp	ip, sl
 801ac5c:	dc27      	bgt.n	801acae <__kernel_rem_pio2f+0xb2>
 801ac5e:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ac62:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801aefc <__kernel_rem_pio2f+0x300>
 801ac66:	4627      	mov	r7, r4
 801ac68:	2600      	movs	r6, #0
 801ac6a:	e016      	b.n	801ac9a <__kernel_rem_pio2f+0x9e>
 801ac6c:	2000      	movs	r0, #0
 801ac6e:	e7db      	b.n	801ac28 <__kernel_rem_pio2f+0x2c>
 801ac70:	42e7      	cmn	r7, r4
 801ac72:	bf5d      	ittte	pl
 801ac74:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801ac78:	ee07 1a90 	vmovpl	s15, r1
 801ac7c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801ac80:	eef0 7a47 	vmovmi.f32	s15, s14
 801ac84:	ece6 7a01 	vstmia	r6!, {s15}
 801ac88:	3401      	adds	r4, #1
 801ac8a:	e7dc      	b.n	801ac46 <__kernel_rem_pio2f+0x4a>
 801ac8c:	ecfe 6a01 	vldmia	lr!, {s13}
 801ac90:	ed97 7a00 	vldr	s14, [r7]
 801ac94:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ac98:	3601      	adds	r6, #1
 801ac9a:	455e      	cmp	r6, fp
 801ac9c:	f1a7 0704 	sub.w	r7, r7, #4
 801aca0:	ddf4      	ble.n	801ac8c <__kernel_rem_pio2f+0x90>
 801aca2:	ece9 7a01 	vstmia	r9!, {s15}
 801aca6:	f10c 0c01 	add.w	ip, ip, #1
 801acaa:	3404      	adds	r4, #4
 801acac:	e7d5      	b.n	801ac5a <__kernel_rem_pio2f+0x5e>
 801acae:	a908      	add	r1, sp, #32
 801acb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801acb4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801acb8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801aef8 <__kernel_rem_pio2f+0x2fc>
 801acbc:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801aef4 <__kernel_rem_pio2f+0x2f8>
 801acc0:	9105      	str	r1, [sp, #20]
 801acc2:	9304      	str	r3, [sp, #16]
 801acc4:	4656      	mov	r6, sl
 801acc6:	00b3      	lsls	r3, r6, #2
 801acc8:	9306      	str	r3, [sp, #24]
 801acca:	ab58      	add	r3, sp, #352	; 0x160
 801accc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801acd0:	ac08      	add	r4, sp, #32
 801acd2:	ab44      	add	r3, sp, #272	; 0x110
 801acd4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801acd8:	46a4      	mov	ip, r4
 801acda:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801acde:	4637      	mov	r7, r6
 801ace0:	2f00      	cmp	r7, #0
 801ace2:	f1a0 0004 	sub.w	r0, r0, #4
 801ace6:	dc4a      	bgt.n	801ad7e <__kernel_rem_pio2f+0x182>
 801ace8:	4628      	mov	r0, r5
 801acea:	9207      	str	r2, [sp, #28]
 801acec:	f000 fab2 	bl	801b254 <scalbnf>
 801acf0:	eeb0 8a40 	vmov.f32	s16, s0
 801acf4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801acf8:	ee28 0a00 	vmul.f32	s0, s16, s0
 801acfc:	f000 fa68 	bl	801b1d0 <floorf>
 801ad00:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801ad04:	eea0 8a67 	vfms.f32	s16, s0, s15
 801ad08:	2d00      	cmp	r5, #0
 801ad0a:	9a07      	ldr	r2, [sp, #28]
 801ad0c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801ad10:	ee17 9a90 	vmov	r9, s15
 801ad14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad18:	ee38 8a67 	vsub.f32	s16, s16, s15
 801ad1c:	dd41      	ble.n	801ada2 <__kernel_rem_pio2f+0x1a6>
 801ad1e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801ad22:	ab08      	add	r3, sp, #32
 801ad24:	f1c5 0e08 	rsb	lr, r5, #8
 801ad28:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801ad2c:	fa47 f00e 	asr.w	r0, r7, lr
 801ad30:	4481      	add	r9, r0
 801ad32:	fa00 f00e 	lsl.w	r0, r0, lr
 801ad36:	1a3f      	subs	r7, r7, r0
 801ad38:	f1c5 0007 	rsb	r0, r5, #7
 801ad3c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801ad40:	4107      	asrs	r7, r0
 801ad42:	2f00      	cmp	r7, #0
 801ad44:	dd3c      	ble.n	801adc0 <__kernel_rem_pio2f+0x1c4>
 801ad46:	f04f 0e00 	mov.w	lr, #0
 801ad4a:	f109 0901 	add.w	r9, r9, #1
 801ad4e:	4671      	mov	r1, lr
 801ad50:	4576      	cmp	r6, lr
 801ad52:	dc67      	bgt.n	801ae24 <__kernel_rem_pio2f+0x228>
 801ad54:	2d00      	cmp	r5, #0
 801ad56:	dd03      	ble.n	801ad60 <__kernel_rem_pio2f+0x164>
 801ad58:	2d01      	cmp	r5, #1
 801ad5a:	d074      	beq.n	801ae46 <__kernel_rem_pio2f+0x24a>
 801ad5c:	2d02      	cmp	r5, #2
 801ad5e:	d07b      	beq.n	801ae58 <__kernel_rem_pio2f+0x25c>
 801ad60:	2f02      	cmp	r7, #2
 801ad62:	d12d      	bne.n	801adc0 <__kernel_rem_pio2f+0x1c4>
 801ad64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ad68:	ee30 8a48 	vsub.f32	s16, s0, s16
 801ad6c:	b341      	cbz	r1, 801adc0 <__kernel_rem_pio2f+0x1c4>
 801ad6e:	4628      	mov	r0, r5
 801ad70:	9207      	str	r2, [sp, #28]
 801ad72:	f000 fa6f 	bl	801b254 <scalbnf>
 801ad76:	9a07      	ldr	r2, [sp, #28]
 801ad78:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ad7c:	e020      	b.n	801adc0 <__kernel_rem_pio2f+0x1c4>
 801ad7e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801ad82:	3f01      	subs	r7, #1
 801ad84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ad88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ad8c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801ad90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ad94:	ecac 0a01 	vstmia	ip!, {s0}
 801ad98:	ed90 0a00 	vldr	s0, [r0]
 801ad9c:	ee37 0a80 	vadd.f32	s0, s15, s0
 801ada0:	e79e      	b.n	801ace0 <__kernel_rem_pio2f+0xe4>
 801ada2:	d105      	bne.n	801adb0 <__kernel_rem_pio2f+0x1b4>
 801ada4:	1e70      	subs	r0, r6, #1
 801ada6:	ab08      	add	r3, sp, #32
 801ada8:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801adac:	11ff      	asrs	r7, r7, #7
 801adae:	e7c8      	b.n	801ad42 <__kernel_rem_pio2f+0x146>
 801adb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801adb4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801adb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adbc:	da30      	bge.n	801ae20 <__kernel_rem_pio2f+0x224>
 801adbe:	2700      	movs	r7, #0
 801adc0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801adc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adc8:	f040 809a 	bne.w	801af00 <__kernel_rem_pio2f+0x304>
 801adcc:	1e74      	subs	r4, r6, #1
 801adce:	46a4      	mov	ip, r4
 801add0:	2100      	movs	r1, #0
 801add2:	45d4      	cmp	ip, sl
 801add4:	da47      	bge.n	801ae66 <__kernel_rem_pio2f+0x26a>
 801add6:	2900      	cmp	r1, #0
 801add8:	d063      	beq.n	801aea2 <__kernel_rem_pio2f+0x2a6>
 801adda:	ab08      	add	r3, sp, #32
 801addc:	3d08      	subs	r5, #8
 801adde:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d07f      	beq.n	801aee6 <__kernel_rem_pio2f+0x2ea>
 801ade6:	4628      	mov	r0, r5
 801ade8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801adec:	f000 fa32 	bl	801b254 <scalbnf>
 801adf0:	1c63      	adds	r3, r4, #1
 801adf2:	aa44      	add	r2, sp, #272	; 0x110
 801adf4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801aef8 <__kernel_rem_pio2f+0x2fc>
 801adf8:	0099      	lsls	r1, r3, #2
 801adfa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801adfe:	4623      	mov	r3, r4
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	f280 80ad 	bge.w	801af60 <__kernel_rem_pio2f+0x364>
 801ae06:	4623      	mov	r3, r4
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	f2c0 80cb 	blt.w	801afa4 <__kernel_rem_pio2f+0x3a8>
 801ae0e:	aa44      	add	r2, sp, #272	; 0x110
 801ae10:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801ae14:	4e36      	ldr	r6, [pc, #216]	; (801aef0 <__kernel_rem_pio2f+0x2f4>)
 801ae16:	eddf 7a39 	vldr	s15, [pc, #228]	; 801aefc <__kernel_rem_pio2f+0x300>
 801ae1a:	2000      	movs	r0, #0
 801ae1c:	1ae2      	subs	r2, r4, r3
 801ae1e:	e0b6      	b.n	801af8e <__kernel_rem_pio2f+0x392>
 801ae20:	2702      	movs	r7, #2
 801ae22:	e790      	b.n	801ad46 <__kernel_rem_pio2f+0x14a>
 801ae24:	6820      	ldr	r0, [r4, #0]
 801ae26:	b949      	cbnz	r1, 801ae3c <__kernel_rem_pio2f+0x240>
 801ae28:	b118      	cbz	r0, 801ae32 <__kernel_rem_pio2f+0x236>
 801ae2a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801ae2e:	6020      	str	r0, [r4, #0]
 801ae30:	2001      	movs	r0, #1
 801ae32:	f10e 0e01 	add.w	lr, lr, #1
 801ae36:	3404      	adds	r4, #4
 801ae38:	4601      	mov	r1, r0
 801ae3a:	e789      	b.n	801ad50 <__kernel_rem_pio2f+0x154>
 801ae3c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801ae40:	6020      	str	r0, [r4, #0]
 801ae42:	4608      	mov	r0, r1
 801ae44:	e7f5      	b.n	801ae32 <__kernel_rem_pio2f+0x236>
 801ae46:	1e74      	subs	r4, r6, #1
 801ae48:	ab08      	add	r3, sp, #32
 801ae4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ae4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ae52:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801ae56:	e783      	b.n	801ad60 <__kernel_rem_pio2f+0x164>
 801ae58:	1e74      	subs	r4, r6, #1
 801ae5a:	ab08      	add	r3, sp, #32
 801ae5c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801ae60:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801ae64:	e7f5      	b.n	801ae52 <__kernel_rem_pio2f+0x256>
 801ae66:	ab08      	add	r3, sp, #32
 801ae68:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801ae6c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801ae70:	4301      	orrs	r1, r0
 801ae72:	e7ae      	b.n	801add2 <__kernel_rem_pio2f+0x1d6>
 801ae74:	3001      	adds	r0, #1
 801ae76:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801ae7a:	2f00      	cmp	r7, #0
 801ae7c:	d0fa      	beq.n	801ae74 <__kernel_rem_pio2f+0x278>
 801ae7e:	9b06      	ldr	r3, [sp, #24]
 801ae80:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801ae84:	eb0d 0403 	add.w	r4, sp, r3
 801ae88:	9b01      	ldr	r3, [sp, #4]
 801ae8a:	18f7      	adds	r7, r6, r3
 801ae8c:	ab1c      	add	r3, sp, #112	; 0x70
 801ae8e:	f106 0c01 	add.w	ip, r6, #1
 801ae92:	3c4c      	subs	r4, #76	; 0x4c
 801ae94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ae98:	4430      	add	r0, r6
 801ae9a:	4560      	cmp	r0, ip
 801ae9c:	da04      	bge.n	801aea8 <__kernel_rem_pio2f+0x2ac>
 801ae9e:	4606      	mov	r6, r0
 801aea0:	e711      	b.n	801acc6 <__kernel_rem_pio2f+0xca>
 801aea2:	9c05      	ldr	r4, [sp, #20]
 801aea4:	2001      	movs	r0, #1
 801aea6:	e7e6      	b.n	801ae76 <__kernel_rem_pio2f+0x27a>
 801aea8:	9b04      	ldr	r3, [sp, #16]
 801aeaa:	f8dd e008 	ldr.w	lr, [sp, #8]
 801aeae:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801aeb2:	9306      	str	r3, [sp, #24]
 801aeb4:	ee07 3a90 	vmov	s15, r3
 801aeb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aebc:	2600      	movs	r6, #0
 801aebe:	ece7 7a01 	vstmia	r7!, {s15}
 801aec2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801aefc <__kernel_rem_pio2f+0x300>
 801aec6:	46b9      	mov	r9, r7
 801aec8:	455e      	cmp	r6, fp
 801aeca:	dd04      	ble.n	801aed6 <__kernel_rem_pio2f+0x2da>
 801aecc:	ece4 7a01 	vstmia	r4!, {s15}
 801aed0:	f10c 0c01 	add.w	ip, ip, #1
 801aed4:	e7e1      	b.n	801ae9a <__kernel_rem_pio2f+0x29e>
 801aed6:	ecfe 6a01 	vldmia	lr!, {s13}
 801aeda:	ed39 7a01 	vldmdb	r9!, {s14}
 801aede:	3601      	adds	r6, #1
 801aee0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aee4:	e7f0      	b.n	801aec8 <__kernel_rem_pio2f+0x2cc>
 801aee6:	3c01      	subs	r4, #1
 801aee8:	e777      	b.n	801adda <__kernel_rem_pio2f+0x1de>
 801aeea:	bf00      	nop
 801aeec:	0802768c 	.word	0x0802768c
 801aef0:	08027660 	.word	0x08027660
 801aef4:	43800000 	.word	0x43800000
 801aef8:	3b800000 	.word	0x3b800000
 801aefc:	00000000 	.word	0x00000000
 801af00:	9b03      	ldr	r3, [sp, #12]
 801af02:	eeb0 0a48 	vmov.f32	s0, s16
 801af06:	1a98      	subs	r0, r3, r2
 801af08:	f000 f9a4 	bl	801b254 <scalbnf>
 801af0c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801aef4 <__kernel_rem_pio2f+0x2f8>
 801af10:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801af14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af18:	db19      	blt.n	801af4e <__kernel_rem_pio2f+0x352>
 801af1a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801aef8 <__kernel_rem_pio2f+0x2fc>
 801af1e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801af22:	aa08      	add	r2, sp, #32
 801af24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af28:	1c74      	adds	r4, r6, #1
 801af2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af2e:	3508      	adds	r5, #8
 801af30:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801af34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af38:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801af3c:	ee10 3a10 	vmov	r3, s0
 801af40:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801af44:	ee17 3a90 	vmov	r3, s15
 801af48:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801af4c:	e74b      	b.n	801ade6 <__kernel_rem_pio2f+0x1ea>
 801af4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801af52:	aa08      	add	r2, sp, #32
 801af54:	ee10 3a10 	vmov	r3, s0
 801af58:	4634      	mov	r4, r6
 801af5a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801af5e:	e742      	b.n	801ade6 <__kernel_rem_pio2f+0x1ea>
 801af60:	a808      	add	r0, sp, #32
 801af62:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801af66:	9001      	str	r0, [sp, #4]
 801af68:	ee07 0a90 	vmov	s15, r0
 801af6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af70:	3b01      	subs	r3, #1
 801af72:	ee67 7a80 	vmul.f32	s15, s15, s0
 801af76:	ee20 0a07 	vmul.f32	s0, s0, s14
 801af7a:	ed62 7a01 	vstmdb	r2!, {s15}
 801af7e:	e73f      	b.n	801ae00 <__kernel_rem_pio2f+0x204>
 801af80:	ecf6 6a01 	vldmia	r6!, {s13}
 801af84:	ecb5 7a01 	vldmia	r5!, {s14}
 801af88:	eee6 7a87 	vfma.f32	s15, s13, s14
 801af8c:	3001      	adds	r0, #1
 801af8e:	4550      	cmp	r0, sl
 801af90:	dc01      	bgt.n	801af96 <__kernel_rem_pio2f+0x39a>
 801af92:	4290      	cmp	r0, r2
 801af94:	ddf4      	ble.n	801af80 <__kernel_rem_pio2f+0x384>
 801af96:	a858      	add	r0, sp, #352	; 0x160
 801af98:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801af9c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801afa0:	3b01      	subs	r3, #1
 801afa2:	e731      	b.n	801ae08 <__kernel_rem_pio2f+0x20c>
 801afa4:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801afa6:	2b02      	cmp	r3, #2
 801afa8:	dc09      	bgt.n	801afbe <__kernel_rem_pio2f+0x3c2>
 801afaa:	2b00      	cmp	r3, #0
 801afac:	dc2b      	bgt.n	801b006 <__kernel_rem_pio2f+0x40a>
 801afae:	d044      	beq.n	801b03a <__kernel_rem_pio2f+0x43e>
 801afb0:	f009 0007 	and.w	r0, r9, #7
 801afb4:	b059      	add	sp, #356	; 0x164
 801afb6:	ecbd 8b04 	vpop	{d8-d9}
 801afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afbe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801afc0:	2b03      	cmp	r3, #3
 801afc2:	d1f5      	bne.n	801afb0 <__kernel_rem_pio2f+0x3b4>
 801afc4:	aa30      	add	r2, sp, #192	; 0xc0
 801afc6:	1f0b      	subs	r3, r1, #4
 801afc8:	4413      	add	r3, r2
 801afca:	461a      	mov	r2, r3
 801afcc:	4620      	mov	r0, r4
 801afce:	2800      	cmp	r0, #0
 801afd0:	f1a2 0204 	sub.w	r2, r2, #4
 801afd4:	dc52      	bgt.n	801b07c <__kernel_rem_pio2f+0x480>
 801afd6:	4622      	mov	r2, r4
 801afd8:	2a01      	cmp	r2, #1
 801afda:	f1a3 0304 	sub.w	r3, r3, #4
 801afde:	dc5d      	bgt.n	801b09c <__kernel_rem_pio2f+0x4a0>
 801afe0:	ab30      	add	r3, sp, #192	; 0xc0
 801afe2:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801aefc <__kernel_rem_pio2f+0x300>
 801afe6:	440b      	add	r3, r1
 801afe8:	2c01      	cmp	r4, #1
 801afea:	dc67      	bgt.n	801b0bc <__kernel_rem_pio2f+0x4c0>
 801afec:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801aff0:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801aff4:	2f00      	cmp	r7, #0
 801aff6:	d167      	bne.n	801b0c8 <__kernel_rem_pio2f+0x4cc>
 801aff8:	edc8 6a00 	vstr	s13, [r8]
 801affc:	ed88 7a01 	vstr	s14, [r8, #4]
 801b000:	edc8 7a02 	vstr	s15, [r8, #8]
 801b004:	e7d4      	b.n	801afb0 <__kernel_rem_pio2f+0x3b4>
 801b006:	ab30      	add	r3, sp, #192	; 0xc0
 801b008:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801aefc <__kernel_rem_pio2f+0x300>
 801b00c:	440b      	add	r3, r1
 801b00e:	4622      	mov	r2, r4
 801b010:	2a00      	cmp	r2, #0
 801b012:	da24      	bge.n	801b05e <__kernel_rem_pio2f+0x462>
 801b014:	b34f      	cbz	r7, 801b06a <__kernel_rem_pio2f+0x46e>
 801b016:	eef1 7a47 	vneg.f32	s15, s14
 801b01a:	edc8 7a00 	vstr	s15, [r8]
 801b01e:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801b022:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b026:	aa31      	add	r2, sp, #196	; 0xc4
 801b028:	2301      	movs	r3, #1
 801b02a:	429c      	cmp	r4, r3
 801b02c:	da20      	bge.n	801b070 <__kernel_rem_pio2f+0x474>
 801b02e:	b10f      	cbz	r7, 801b034 <__kernel_rem_pio2f+0x438>
 801b030:	eef1 7a67 	vneg.f32	s15, s15
 801b034:	edc8 7a01 	vstr	s15, [r8, #4]
 801b038:	e7ba      	b.n	801afb0 <__kernel_rem_pio2f+0x3b4>
 801b03a:	ab30      	add	r3, sp, #192	; 0xc0
 801b03c:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801aefc <__kernel_rem_pio2f+0x300>
 801b040:	440b      	add	r3, r1
 801b042:	2c00      	cmp	r4, #0
 801b044:	da05      	bge.n	801b052 <__kernel_rem_pio2f+0x456>
 801b046:	b10f      	cbz	r7, 801b04c <__kernel_rem_pio2f+0x450>
 801b048:	eef1 7a67 	vneg.f32	s15, s15
 801b04c:	edc8 7a00 	vstr	s15, [r8]
 801b050:	e7ae      	b.n	801afb0 <__kernel_rem_pio2f+0x3b4>
 801b052:	ed33 7a01 	vldmdb	r3!, {s14}
 801b056:	3c01      	subs	r4, #1
 801b058:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b05c:	e7f1      	b.n	801b042 <__kernel_rem_pio2f+0x446>
 801b05e:	ed73 7a01 	vldmdb	r3!, {s15}
 801b062:	3a01      	subs	r2, #1
 801b064:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b068:	e7d2      	b.n	801b010 <__kernel_rem_pio2f+0x414>
 801b06a:	eef0 7a47 	vmov.f32	s15, s14
 801b06e:	e7d4      	b.n	801b01a <__kernel_rem_pio2f+0x41e>
 801b070:	ecb2 7a01 	vldmia	r2!, {s14}
 801b074:	3301      	adds	r3, #1
 801b076:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b07a:	e7d6      	b.n	801b02a <__kernel_rem_pio2f+0x42e>
 801b07c:	edd2 7a00 	vldr	s15, [r2]
 801b080:	edd2 6a01 	vldr	s13, [r2, #4]
 801b084:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b088:	3801      	subs	r0, #1
 801b08a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b08e:	ed82 7a00 	vstr	s14, [r2]
 801b092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b096:	edc2 7a01 	vstr	s15, [r2, #4]
 801b09a:	e798      	b.n	801afce <__kernel_rem_pio2f+0x3d2>
 801b09c:	edd3 7a00 	vldr	s15, [r3]
 801b0a0:	edd3 6a01 	vldr	s13, [r3, #4]
 801b0a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b0a8:	3a01      	subs	r2, #1
 801b0aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b0ae:	ed83 7a00 	vstr	s14, [r3]
 801b0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b0b6:	edc3 7a01 	vstr	s15, [r3, #4]
 801b0ba:	e78d      	b.n	801afd8 <__kernel_rem_pio2f+0x3dc>
 801b0bc:	ed33 7a01 	vldmdb	r3!, {s14}
 801b0c0:	3c01      	subs	r4, #1
 801b0c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b0c6:	e78f      	b.n	801afe8 <__kernel_rem_pio2f+0x3ec>
 801b0c8:	eef1 6a66 	vneg.f32	s13, s13
 801b0cc:	eeb1 7a47 	vneg.f32	s14, s14
 801b0d0:	edc8 6a00 	vstr	s13, [r8]
 801b0d4:	ed88 7a01 	vstr	s14, [r8, #4]
 801b0d8:	eef1 7a67 	vneg.f32	s15, s15
 801b0dc:	e790      	b.n	801b000 <__kernel_rem_pio2f+0x404>
 801b0de:	bf00      	nop

0801b0e0 <floor>:
 801b0e0:	ee10 1a90 	vmov	r1, s1
 801b0e4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801b0e8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801b0ec:	2b13      	cmp	r3, #19
 801b0ee:	b530      	push	{r4, r5, lr}
 801b0f0:	ee10 0a10 	vmov	r0, s0
 801b0f4:	ee10 5a10 	vmov	r5, s0
 801b0f8:	dc31      	bgt.n	801b15e <floor+0x7e>
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	da15      	bge.n	801b12a <floor+0x4a>
 801b0fe:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801b1c0 <floor+0xe0>
 801b102:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b106:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b10e:	dd07      	ble.n	801b120 <floor+0x40>
 801b110:	2900      	cmp	r1, #0
 801b112:	da4e      	bge.n	801b1b2 <floor+0xd2>
 801b114:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801b118:	4308      	orrs	r0, r1
 801b11a:	d04d      	beq.n	801b1b8 <floor+0xd8>
 801b11c:	492a      	ldr	r1, [pc, #168]	; (801b1c8 <floor+0xe8>)
 801b11e:	2000      	movs	r0, #0
 801b120:	460b      	mov	r3, r1
 801b122:	4602      	mov	r2, r0
 801b124:	ec43 2b10 	vmov	d0, r2, r3
 801b128:	e020      	b.n	801b16c <floor+0x8c>
 801b12a:	4a28      	ldr	r2, [pc, #160]	; (801b1cc <floor+0xec>)
 801b12c:	411a      	asrs	r2, r3
 801b12e:	ea01 0402 	and.w	r4, r1, r2
 801b132:	4304      	orrs	r4, r0
 801b134:	d01a      	beq.n	801b16c <floor+0x8c>
 801b136:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801b1c0 <floor+0xe0>
 801b13a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b13e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b146:	ddeb      	ble.n	801b120 <floor+0x40>
 801b148:	2900      	cmp	r1, #0
 801b14a:	bfbe      	ittt	lt
 801b14c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801b150:	fa40 f303 	asrlt.w	r3, r0, r3
 801b154:	18c9      	addlt	r1, r1, r3
 801b156:	ea21 0102 	bic.w	r1, r1, r2
 801b15a:	2000      	movs	r0, #0
 801b15c:	e7e0      	b.n	801b120 <floor+0x40>
 801b15e:	2b33      	cmp	r3, #51	; 0x33
 801b160:	dd05      	ble.n	801b16e <floor+0x8e>
 801b162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b166:	d101      	bne.n	801b16c <floor+0x8c>
 801b168:	ee30 0b00 	vadd.f64	d0, d0, d0
 801b16c:	bd30      	pop	{r4, r5, pc}
 801b16e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801b172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b176:	40e2      	lsrs	r2, r4
 801b178:	4210      	tst	r0, r2
 801b17a:	d0f7      	beq.n	801b16c <floor+0x8c>
 801b17c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801b1c0 <floor+0xe0>
 801b180:	ee30 0b07 	vadd.f64	d0, d0, d7
 801b184:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b18c:	ddc8      	ble.n	801b120 <floor+0x40>
 801b18e:	2900      	cmp	r1, #0
 801b190:	da02      	bge.n	801b198 <floor+0xb8>
 801b192:	2b14      	cmp	r3, #20
 801b194:	d103      	bne.n	801b19e <floor+0xbe>
 801b196:	3101      	adds	r1, #1
 801b198:	ea20 0002 	bic.w	r0, r0, r2
 801b19c:	e7c0      	b.n	801b120 <floor+0x40>
 801b19e:	2401      	movs	r4, #1
 801b1a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b1a4:	fa04 f303 	lsl.w	r3, r4, r3
 801b1a8:	4418      	add	r0, r3
 801b1aa:	4285      	cmp	r5, r0
 801b1ac:	bf88      	it	hi
 801b1ae:	1909      	addhi	r1, r1, r4
 801b1b0:	e7f2      	b.n	801b198 <floor+0xb8>
 801b1b2:	2000      	movs	r0, #0
 801b1b4:	4601      	mov	r1, r0
 801b1b6:	e7b3      	b.n	801b120 <floor+0x40>
 801b1b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801b1bc:	e7b0      	b.n	801b120 <floor+0x40>
 801b1be:	bf00      	nop
 801b1c0:	8800759c 	.word	0x8800759c
 801b1c4:	7e37e43c 	.word	0x7e37e43c
 801b1c8:	bff00000 	.word	0xbff00000
 801b1cc:	000fffff 	.word	0x000fffff

0801b1d0 <floorf>:
 801b1d0:	ee10 3a10 	vmov	r3, s0
 801b1d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b1d8:	3a7f      	subs	r2, #127	; 0x7f
 801b1da:	2a16      	cmp	r2, #22
 801b1dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801b1e0:	dc2a      	bgt.n	801b238 <floorf+0x68>
 801b1e2:	2a00      	cmp	r2, #0
 801b1e4:	da11      	bge.n	801b20a <floorf+0x3a>
 801b1e6:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b248 <floorf+0x78>
 801b1ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b1ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1f6:	dd05      	ble.n	801b204 <floorf+0x34>
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	da23      	bge.n	801b244 <floorf+0x74>
 801b1fc:	4a13      	ldr	r2, [pc, #76]	; (801b24c <floorf+0x7c>)
 801b1fe:	2900      	cmp	r1, #0
 801b200:	bf18      	it	ne
 801b202:	4613      	movne	r3, r2
 801b204:	ee00 3a10 	vmov	s0, r3
 801b208:	4770      	bx	lr
 801b20a:	4911      	ldr	r1, [pc, #68]	; (801b250 <floorf+0x80>)
 801b20c:	4111      	asrs	r1, r2
 801b20e:	420b      	tst	r3, r1
 801b210:	d0fa      	beq.n	801b208 <floorf+0x38>
 801b212:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b248 <floorf+0x78>
 801b216:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b21a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b222:	ddef      	ble.n	801b204 <floorf+0x34>
 801b224:	2b00      	cmp	r3, #0
 801b226:	bfbe      	ittt	lt
 801b228:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801b22c:	fa40 f202 	asrlt.w	r2, r0, r2
 801b230:	189b      	addlt	r3, r3, r2
 801b232:	ea23 0301 	bic.w	r3, r3, r1
 801b236:	e7e5      	b.n	801b204 <floorf+0x34>
 801b238:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801b23c:	d3e4      	bcc.n	801b208 <floorf+0x38>
 801b23e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b242:	4770      	bx	lr
 801b244:	2300      	movs	r3, #0
 801b246:	e7dd      	b.n	801b204 <floorf+0x34>
 801b248:	7149f2ca 	.word	0x7149f2ca
 801b24c:	bf800000 	.word	0xbf800000
 801b250:	007fffff 	.word	0x007fffff

0801b254 <scalbnf>:
 801b254:	ee10 3a10 	vmov	r3, s0
 801b258:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801b25c:	d02a      	beq.n	801b2b4 <scalbnf+0x60>
 801b25e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801b262:	d302      	bcc.n	801b26a <scalbnf+0x16>
 801b264:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b268:	4770      	bx	lr
 801b26a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801b26e:	d122      	bne.n	801b2b6 <scalbnf+0x62>
 801b270:	4b23      	ldr	r3, [pc, #140]	; (801b300 <scalbnf+0xac>)
 801b272:	eddf 7a24 	vldr	s15, [pc, #144]	; 801b304 <scalbnf+0xb0>
 801b276:	4298      	cmp	r0, r3
 801b278:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b27c:	db16      	blt.n	801b2ac <scalbnf+0x58>
 801b27e:	ee10 3a10 	vmov	r3, s0
 801b282:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b286:	3a19      	subs	r2, #25
 801b288:	f24c 3150 	movw	r1, #50000	; 0xc350
 801b28c:	4288      	cmp	r0, r1
 801b28e:	dd14      	ble.n	801b2ba <scalbnf+0x66>
 801b290:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801b308 <scalbnf+0xb4>
 801b294:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801b30c <scalbnf+0xb8>
 801b298:	ee10 3a10 	vmov	r3, s0
 801b29c:	eeb0 7a67 	vmov.f32	s14, s15
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801b2a6:	ee27 0a87 	vmul.f32	s0, s15, s14
 801b2aa:	4770      	bx	lr
 801b2ac:	eddf 7a18 	vldr	s15, [pc, #96]	; 801b310 <scalbnf+0xbc>
 801b2b0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801b2b4:	4770      	bx	lr
 801b2b6:	0dd2      	lsrs	r2, r2, #23
 801b2b8:	e7e6      	b.n	801b288 <scalbnf+0x34>
 801b2ba:	4410      	add	r0, r2
 801b2bc:	28fe      	cmp	r0, #254	; 0xfe
 801b2be:	dce7      	bgt.n	801b290 <scalbnf+0x3c>
 801b2c0:	2800      	cmp	r0, #0
 801b2c2:	dd06      	ble.n	801b2d2 <scalbnf+0x7e>
 801b2c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b2c8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b2cc:	ee00 3a10 	vmov	s0, r3
 801b2d0:	4770      	bx	lr
 801b2d2:	f110 0f16 	cmn.w	r0, #22
 801b2d6:	da09      	bge.n	801b2ec <scalbnf+0x98>
 801b2d8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801b310 <scalbnf+0xbc>
 801b2dc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801b314 <scalbnf+0xc0>
 801b2e0:	ee10 3a10 	vmov	r3, s0
 801b2e4:	eeb0 7a67 	vmov.f32	s14, s15
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	e7da      	b.n	801b2a2 <scalbnf+0x4e>
 801b2ec:	3019      	adds	r0, #25
 801b2ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801b2f2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801b2f6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b318 <scalbnf+0xc4>
 801b2fa:	ee07 3a90 	vmov	s15, r3
 801b2fe:	e7d7      	b.n	801b2b0 <scalbnf+0x5c>
 801b300:	ffff3cb0 	.word	0xffff3cb0
 801b304:	4c000000 	.word	0x4c000000
 801b308:	7149f2ca 	.word	0x7149f2ca
 801b30c:	f149f2ca 	.word	0xf149f2ca
 801b310:	0da24260 	.word	0x0da24260
 801b314:	8da24260 	.word	0x8da24260
 801b318:	33000000 	.word	0x33000000

0801b31c <__errno>:
 801b31c:	4b01      	ldr	r3, [pc, #4]	; (801b324 <__errno+0x8>)
 801b31e:	6818      	ldr	r0, [r3, #0]
 801b320:	4770      	bx	lr
 801b322:	bf00      	nop
 801b324:	200007b8 	.word	0x200007b8

0801b328 <_init>:
 801b328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b32a:	bf00      	nop
 801b32c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b32e:	bc08      	pop	{r3}
 801b330:	469e      	mov	lr, r3
 801b332:	4770      	bx	lr

0801b334 <_fini>:
 801b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b336:	bf00      	nop
 801b338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b33a:	bc08      	pop	{r3}
 801b33c:	469e      	mov	lr, r3
 801b33e:	4770      	bx	lr

0801b340 <__audioInitVocal_veneer>:
 801b340:	f85f f000 	ldr.w	pc, [pc]	; 801b344 <__audioInitVocal_veneer+0x4>
 801b344:	00008e81 	.word	0x00008e81

0801b348 <__HAL_SPI_RxHalfCpltCallback_veneer>:
 801b348:	f85f f000 	ldr.w	pc, [pc]	; 801b34c <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
 801b34c:	00004d41 	.word	0x00004d41

0801b350 <__HAL_I2C_ErrorCallback_veneer>:
 801b350:	f85f f000 	ldr.w	pc, [pc]	; 801b354 <__HAL_I2C_ErrorCallback_veneer+0x4>
 801b354:	00004441 	.word	0x00004441

0801b358 <__HAL_SPI_TxRxCpltCallback_veneer>:
 801b358:	f85f f000 	ldr.w	pc, [pc]	; 801b35c <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
 801b35c:	00004481 	.word	0x00004481

0801b360 <__HAL_SAI_ErrorCallback_veneer>:
 801b360:	f85f f000 	ldr.w	pc, [pc]	; 801b364 <__HAL_SAI_ErrorCallback_veneer+0x4>
 801b364:	000018a1 	.word	0x000018a1

0801b368 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
 801b368:	f85f f000 	ldr.w	pc, [pc]	; 801b36c <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
 801b36c:	000047a1 	.word	0x000047a1

0801b370 <__audioInitString1_veneer>:
 801b370:	f85f f000 	ldr.w	pc, [pc]	; 801b374 <__audioInitString1_veneer+0x4>
 801b374:	00004fc1 	.word	0x00004fc1

0801b378 <__randomNumber_veneer>:
 801b378:	f85f f000 	ldr.w	pc, [pc]	; 801b37c <__randomNumber_veneer+0x4>
 801b37c:	00001bc1 	.word	0x00001bc1

0801b380 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
 801b380:	f85f f000 	ldr.w	pc, [pc]	; 801b384 <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
 801b384:	00004401 	.word	0x00004401

0801b388 <__parsePreset_veneer>:
 801b388:	f85f f000 	ldr.w	pc, [pc]	; 801b38c <__parsePreset_veneer+0x4>
 801b38c:	00001c21 	.word	0x00001c21

0801b390 <__HAL_SPI_RxCpltCallback_veneer>:
 801b390:	f85f f000 	ldr.w	pc, [pc]	; 801b394 <__HAL_SPI_RxCpltCallback_veneer+0x4>
 801b394:	00004ac1 	.word	0x00004ac1

0801b398 <__audioInitAdditive_veneer>:
 801b398:	f85f f000 	ldr.w	pc, [pc]	; 801b39c <__audioInitAdditive_veneer+0x4>
 801b39c:	00000401 	.word	0x00000401

0801b3a0 <__HAL_SAI_TxHalfCpltCallback_veneer>:
 801b3a0:	f85f f000 	ldr.w	pc, [pc]	; 801b3a4 <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
 801b3a4:	00001761 	.word	0x00001761

0801b3a8 <__HAL_SAI_TxCpltCallback_veneer>:
 801b3a8:	f85f f000 	ldr.w	pc, [pc]	; 801b3ac <__HAL_SAI_TxCpltCallback_veneer+0x4>
 801b3ac:	00001621 	.word	0x00001621

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
}
     400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     404:	49f9      	ldr	r1, [pc, #996]	; (7ec <audioInitAdditive+0x3ec>)
     406:	4cfa      	ldr	r4, [pc, #1000]	; (7f0 <audioInitAdditive+0x3f0>)
     408:	4afa      	ldr	r2, [pc, #1000]	; (7f4 <audioInitAdditive+0x3f4>)
     40a:	4bfb      	ldr	r3, [pc, #1004]	; (7f8 <audioInitAdditive+0x3f8>)
     40c:	48fb      	ldr	r0, [pc, #1004]	; (7fc <audioInitAdditive+0x3fc>)
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     40e:	4dfc      	ldr	r5, [pc, #1008]	; (800 <audioInitAdditive+0x400>)
     410:	4efc      	ldr	r6, [pc, #1008]	; (804 <audioInitAdditive+0x404>)
     412:	ed2d 8b10 	vpush	{d8-d15}
     416:	ed94 3a01 	vldr	s6, [r4, #4]
}
     41a:	b083      	sub	sp, #12
        p->curr = pickupOut;
     41c:	edd1 4a00 	vldr	s9, [r1]
}
     420:	edd1 3a01 	vldr	s7, [r1, #4]
     424:	ee33 3a24 	vadd.f32	s6, s6, s9
     428:	edd2 0a00 	vldr	s1, [r2]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     42c:	edd4 2a00 	vldr	s5, [r4]
     430:	ed92 2a01 	vldr	s4, [r2, #4]
     434:	ee33 3a23 	vadd.f32	s6, s6, s7
     438:	edd1 4a03 	vldr	s9, [r1, #12]
     43c:	ee72 2aa0 	vadd.f32	s5, s5, s1
     440:	edd1 0a02 	vldr	s1, [r1, #8]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
     444:	edd2 7a02 	vldr	s15, [r2, #8]
     448:	ee33 3a20 	vadd.f32	s6, s6, s1
    __HAL_UNLOCK(hdma);
     44c:	edd2 1a03 	vldr	s3, [r2, #12]
  return status;
     450:	ee72 2a82 	vadd.f32	s5, s5, s4
    hdma->State = HAL_DMA_STATE_READY;
     454:	edd1 3a05 	vldr	s7, [r1, #20]
    __HAL_UNLOCK(hdma);
     458:	ed92 6a04 	vldr	s12, [r2, #16]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
     45c:	ee33 3a24 	vadd.f32	s6, s6, s9
     460:	ed91 2a06 	vldr	s4, [r1, #24]
     464:	ee72 2aa7 	vadd.f32	s5, s5, s15
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
     468:	edd1 7a04 	vldr	s15, [r1, #16]
        hdma->State = HAL_DMA_STATE_READY;
     46c:	ed92 1a05 	vldr	s2, [r2, #20]
        __HAL_UNLOCK(hdma);
     470:	ee33 3a27 	vadd.f32	s6, s6, s15
        return HAL_ERROR;
     474:	edd1 0a07 	vldr	s1, [r1, #28]
        (void) HAL_DMA_Abort(hdma);
     478:	ee72 2aa1 	vadd.f32	s5, s5, s3
     47c:	ed92 5a06 	vldr	s10, [r2, #24]
        return HAL_ERROR;
     480:	edd1 1a08 	vldr	s3, [r1, #32]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     484:	ee33 3a23 	vadd.f32	s6, s6, s7
     488:	edd0 3a00 	vldr	s7, [r0]
     48c:	ee72 2a86 	vadd.f32	s5, s5, s12
     490:	ed92 0a07 	vldr	s0, [r2, #28]
     494:	edd1 4a09 	vldr	s9, [r1, #36]	; 0x24
     498:	ee33 3a02 	vadd.f32	s6, s6, s4
     49c:	edd2 6a08 	vldr	s13, [r2, #32]
     4a0:	ee72 2a81 	vadd.f32	s5, s5, s2
     4a4:	ed93 1a01 	vldr	s2, [r3, #4]
     4a8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
     4ac:	ee33 3a20 	vadd.f32	s6, s6, s1
     4b0:	ed93 2a02 	vldr	s4, [r3, #8]
     4b4:	ee72 2a85 	vadd.f32	s5, s5, s10
     4b8:	ed93 5a00 	vldr	s10, [r3]
     4bc:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
     4c0:	ee33 3a21 	vadd.f32	s6, s6, s3
     4c4:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
     4c8:	ee73 3a85 	vadd.f32	s7, s7, s10
     4cc:	edd2 5a0a 	vldr	s11, [r2, #40]	; 0x28
     4d0:	ee72 2a80 	vadd.f32	s5, s5, s0
     4d4:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
     4d8:	ee33 3a24 	vadd.f32	s6, s6, s9
     4dc:	ed93 5a03 	vldr	s10, [r3, #12]
     4e0:	ee73 3a81 	vadd.f32	s7, s7, s2
     4e4:	ed93 1a04 	vldr	s2, [r3, #16]
     4e8:	ee72 2aa6 	vadd.f32	s5, s5, s13
     4ec:	edd3 1a05 	vldr	s3, [r3, #20]
     4f0:	ee33 3a06 	vadd.f32	s6, s6, s12
     4f4:	ed93 6a07 	vldr	s12, [r3, #28]
     4f8:	ee73 3a82 	vadd.f32	s7, s7, s4
     4fc:	ed93 2a0e 	vldr	s4, [r3, #56]	; 0x38
     500:	ee72 2a84 	vadd.f32	s5, s5, s8
     504:	ed90 4a01 	vldr	s8, [r0, #4]
     508:	ee33 3a27 	vadd.f32	s6, s6, s15
     50c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
     510:	ee73 3a85 	vadd.f32	s7, s7, s10
     514:	edd3 4a08 	vldr	s9, [r3, #32]
     518:	ee34 4a27 	vadd.f32	s8, s8, s15
     51c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
     520:	ee72 2aa5 	vadd.f32	s5, s5, s11
     524:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
     528:	ee73 3a81 	vadd.f32	s7, s7, s2
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     52c:	ed93 1a0f 	vldr	s2, [r3, #60]	; 0x3c
     530:	ee34 4a25 	vadd.f32	s8, s8, s11
     534:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
     538:	ee72 2a87 	vadd.f32	s5, s5, s14
     53c:	ed93 7a06 	vldr	s14, [r3, #24]
     540:	ee73 3aa1 	vadd.f32	s7, s7, s3
     544:	edd3 1a11 	vldr	s3, [r3, #68]	; 0x44
     548:	ee34 4a02 	vadd.f32	s8, s8, s4
     54c:	edd3 5a12 	vldr	s11, [r3, #72]	; 0x48
     550:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     558:	ee73 3a87 	vadd.f32	s7, s7, s14
     55c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
     560:	ee34 4a01 	vadd.f32	s8, s8, s2
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     564:	ed93 2a15 	vldr	s4, [r3, #84]	; 0x54
     568:	edd3 0a0b 	vldr	s1, [r3, #44]	; 0x2c
     56c:	ee73 3a86 	vadd.f32	s7, s7, s12
        __HAL_UNLOCK(hdma);
     570:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
     574:	ee34 4a27 	vadd.f32	s8, s8, s15
        return HAL_ERROR;
     578:	edd0 7a02 	vldr	s15, [r0, #8]
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     57c:	ed93 1a17 	vldr	s2, [r3, #92]	; 0x5c
     580:	ee73 3aa4 	vadd.f32	s7, s7, s9
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     584:	edd3 4a16 	vldr	s9, [r3, #88]	; 0x58
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     588:	ee34 4a21 	vadd.f32	s8, s8, s3
     58c:	edd3 1a1b 	vldr	s3, [r3, #108]	; 0x6c
    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
     590:	602e      	str	r6, [r5, #0]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     592:	ee73 3a80 	vadd.f32	s7, s7, s0
     596:	ed93 0a1a 	vldr	s0, [r3, #104]	; 0x68
     59a:	ee34 4a25 	vadd.f32	s8, s8, s11
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     59e:	edd3 5a18 	vldr	s11, [r3, #96]	; 0x60
     5a2:	ee77 7aa5 	vadd.f32	s15, s15, s11
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     5a6:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
     5aa:	ee73 3a85 	vadd.f32	s7, s7, s10
     5ae:	ed93 5a19 	vldr	s10, [r3, #100]	; 0x64
     5b2:	ee34 4a07 	vadd.f32	s8, s8, s14
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
     5ba:	ee77 7a85 	vadd.f32	s15, s15, s10
     5be:	ed93 5a1e 	vldr	s10, [r3, #120]	; 0x78
  return status;
     5c2:	ee73 3aa0 	vadd.f32	s7, s7, s1
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c6:	edd3 0a1f 	vldr	s1, [r3, #124]	; 0x7c
     5ca:	ee34 4a06 	vadd.f32	s8, s8, s12

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5ce:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
     5d2:	ee77 7a80 	vadd.f32	s15, s15, s0
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
     5d6:	ed93 0a22 	vldr	s0, [r3, #136]	; 0x88
     5da:	ee86 aaa3 	vdiv.f32	s20, s13, s7
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5de:	ee77 7aa1 	vadd.f32	s15, s15, s3
     5e2:	edd3 1a24 	vldr	s3, [r3, #144]	; 0x90
	pb->buf[i++] = (BYTE)c;
     5e6:	ee34 4a02 	vadd.f32	s8, s8, s4
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
     5ea:	ed93 2a21 	vldr	s4, [r3, #132]	; 0x84
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
     5ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
	pb->nchr++;
     5f2:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
				while (j++ < w) putc_bfd(&pb, ' ');
     5f6:	ee34 4a24 	vadd.f32	s8, s8, s9
     5fa:	edd0 4a03 	vldr	s9, [r0, #12]
     5fe:	ee77 7a87 	vadd.f32	s15, s15, s14
     602:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
     606:	ee74 4aa1 	vadd.f32	s9, s9, s3
     60a:	edd3 1a25 	vldr	s3, [r3, #148]	; 0x94
     60e:	ee34 4a01 	vadd.f32	s8, s8, s2
			}
			while (*p) putc_bfd(&pb, *p++);
			while (j++ < w) putc_bfd(&pb, ' ');
     612:	ed93 1a27 	vldr	s2, [r3, #156]	; 0x9c
			while (*p) putc_bfd(&pb, *p++);
     616:	ee77 7a85 	vadd.f32	s15, s15, s10
     61a:	ed93 5a29 	vldr	s10, [r3, #164]	; 0xa4
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     61e:	ee74 4aa1 	vadd.f32	s9, s9, s3
     622:	edd3 1a2a 	vldr	s3, [r3, #168]	; 0xa8
		switch (d) {				/* Type is... */
     626:	eec6 9a84 	vdiv.f32	s19, s13, s8
     62a:	ee74 4a87 	vadd.f32	s9, s9, s14
     62e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     632:	ee77 7aa0 	vadd.f32	s15, s15, s1
     636:	edd3 0a2e 	vldr	s1, [r3, #184]	; 0xb8
	if (i < 0) return;
     63a:	ee74 4a81 	vadd.f32	s9, s9, s2
     63e:	ed93 1a2d 	vldr	s2, [r3, #180]	; 0xb4
	pb->buf[i++] = (BYTE)c;
     642:	ee77 7a86 	vadd.f32	s15, s15, s12
     646:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     64a:	ee74 4a87 	vadd.f32	s9, s9, s14
	pb->buf[i++] = (BYTE)c;
     64e:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
	pb->nchr++;
     652:	ee77 7a82 	vadd.f32	s15, s15, s4
	pb->idx = i;
     656:	ed93 2a2f 	vldr	s4, [r3, #188]	; 0xbc
	pb->nchr++;
     65a:	ee74 4a85 	vadd.f32	s9, s9, s10
     65e:	ed90 5a04 	vldr	s10, [r0, #16]
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     662:	ee77 7a80 	vadd.f32	s15, s15, s0
     666:	ed93 0a31 	vldr	s0, [r3, #196]	; 0xc4
     66a:	ee74 4aa1 	vadd.f32	s9, s9, s3
		i = (bw == (UINT)i) ? 0 : -1;
     66e:	edd3 1a32 	vldr	s3, [r3, #200]	; 0xc8
     672:	ee77 7aa5 	vadd.f32	s15, s15, s11
     676:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
     67a:	ee35 5a25 	vadd.f32	s10, s10, s11
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
     67e:	edd3 5a34 	vldr	s11, [r3, #208]	; 0xd0
     682:	ee74 4a87 	vadd.f32	s9, s9, s14
	if (i < 0) return;
     686:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
	pb->buf[i++] = (BYTE)c;
     68a:	ee86 9aa7 	vdiv.f32	s18, s13, s15
     68e:	ee35 5a00 	vadd.f32	s10, s10, s0
     692:	ed93 0a37 	vldr	s0, [r3, #220]	; 0xdc
     696:	ee74 4a86 	vadd.f32	s9, s9, s12
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     69a:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
	pb->nchr++;
     69e:	ee35 5a21 	vadd.f32	s10, s10, s3
     6a2:	edd3 1a36 	vldr	s3, [r3, #216]	; 0xd8
     6a6:	ee74 4a81 	vadd.f32	s9, s9, s2
	return EOF;
     6aa:	ed93 1a38 	vldr	s2, [r3, #224]	; 0xe0
	}

	va_end(arp);

	return putc_flush(&pb);
}
     6ae:	ee35 5a07 	vadd.f32	s10, s10, s14
     6b2:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     6b6:	ee74 4aa0 	vadd.f32	s9, s9, s1
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
     6ba:	edd3 0a3a 	vldr	s1, [r3, #232]	; 0xe8
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6be:	ee35 5a25 	vadd.f32	s10, s10, s11
     6c2:	edd0 5a05 	vldr	s11, [r0, #20]
     6c6:	ee74 4a82 	vadd.f32	s9, s9, s4
		i = (bw == (UINT)i) ? 0 : -1;
     6ca:	ed93 2a3c 	vldr	s4, [r3, #240]	; 0xf0
     6ce:	ee35 5a06 	vadd.f32	s10, s10, s12
     6d2:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6d6:	ee75 5a82 	vadd.f32	s11, s11, s4
     6da:	ed93 2a3d 	vldr	s4, [r3, #244]	; 0xf4
     6de:	ed93 8a5a 	vldr	s16, [r3, #360]	; 0x168
		i = (bw == (UINT)i) ? 0 : -1;
     6e2:	eec6 8aa4 	vdiv.f32	s17, s13, s9
     6e6:	ee35 5a21 	vadd.f32	s10, s10, s3
     6ea:	edd3 1a3f 	vldr	s3, [r3, #252]	; 0xfc
				while (j++ < w) putc_bfd(&pb, ' ');
     6ee:	ee75 5a82 	vadd.f32	s11, s11, s4
     6f2:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
     6f6:	ee35 5a00 	vadd.f32	s10, s10, s0
     6fa:	ed93 0a40 	vldr	s0, [r3, #256]	; 0x100
		totalGain[1] += partialsHigh[i];
		for (int j = 0; j < 3; j++)
		{
			for (int k = 0; k < 3; k++)
			{
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     6fe:	ee75 5a82 	vadd.f32	s11, s11, s4
     702:	ed93 2a41 	vldr	s4, [r3, #260]	; 0x104
     706:	ee35 5a01 	vadd.f32	s10, s10, s2
     70a:	ed93 1a44 	vldr	s2, [r3, #272]	; 0x110
     70e:	ee75 5aa1 	vadd.f32	s11, s11, s3
     712:	edd3 1a43 	vldr	s3, [r3, #268]	; 0x10c
     716:	ee35 5a07 	vadd.f32	s10, s10, s14
     71a:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
     71e:	ee75 5a80 	vadd.f32	s11, s11, s0
     722:	ed93 0a47 	vldr	s0, [r3, #284]	; 0x11c
     726:	ee35 5a20 	vadd.f32	s10, s10, s1
     72a:	edd3 0a45 	vldr	s1, [r3, #276]	; 0x114
     72e:	ee75 5a82 	vadd.f32	s11, s11, s4
     732:	ed93 2a46 	vldr	s4, [r3, #280]	; 0x118
     736:	ee35 5a06 	vadd.f32	s10, s10, s12
     73a:	ed90 6a06 	vldr	s12, [r0, #24]
     73e:	ee75 5a87 	vadd.f32	s11, s11, s14
     742:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
     746:	ee36 6a07 	vadd.f32	s12, s12, s14
     74a:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
     74e:	ee75 5aa1 	vadd.f32	s11, s11, s3
     752:	edd3 1a4b 	vldr	s3, [r3, #300]	; 0x12c
     756:	ee36 6a07 	vadd.f32	s12, s12, s14
     75a:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
     75e:	ee75 5a81 	vadd.f32	s11, s11, s2
     762:	ed93 1a4d 	vldr	s2, [r3, #308]	; 0x134
     766:	ee36 6a07 	vadd.f32	s12, s12, s14
     76a:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
     76e:	ee75 5aa0 	vadd.f32	s11, s11, s1
     772:	edd3 0a50 	vldr	s1, [r3, #320]	; 0x140
     776:	ee36 6a21 	vadd.f32	s12, s12, s3
     77a:	edd3 1a51 	vldr	s3, [r3, #324]	; 0x144
     77e:	ee75 5a82 	vadd.f32	s11, s11, s4
     782:	ed93 2a4e 	vldr	s4, [r3, #312]	; 0x138
     786:	ee36 6a07 	vadd.f32	s12, s12, s14
     78a:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
     78e:	ee75 5a80 	vadd.f32	s11, s11, s0
     792:	ed93 0a52 	vldr	s0, [r3, #328]	; 0x148
     796:	ee36 6a01 	vadd.f32	s12, s12, s2
     79a:	ed93 1a53 	vldr	s2, [r3, #332]	; 0x14c
     79e:	ee36 6a02 	vadd.f32	s12, s12, s4
     7a2:	ed93 2a54 	vldr	s4, [r3, #336]	; 0x150
     7a6:	ee36 6a07 	vadd.f32	s12, s12, s14
     7aa:	ed90 7a07 	vldr	s14, [r0, #28]
     7ae:	ee37 7a02 	vadd.f32	s14, s14, s4
     7b2:	ed93 2a55 	vldr	s4, [r3, #340]	; 0x154
     7b6:	ee36 6a20 	vadd.f32	s12, s12, s1
     7ba:	edd3 0a57 	vldr	s1, [r3, #348]	; 0x15c
     7be:	ee37 7a02 	vadd.f32	s14, s14, s4
     7c2:	ed93 2a56 	vldr	s4, [r3, #344]	; 0x158
     7c6:	ee36 6a21 	vadd.f32	s12, s12, s3
     7ca:	edd3 1a58 	vldr	s3, [r3, #352]	; 0x160
     7ce:	ee37 7a02 	vadd.f32	s14, s14, s4
     7d2:	ed93 2a59 	vldr	s4, [r3, #356]	; 0x164
     7d6:	ee36 6a00 	vadd.f32	s12, s12, s0
     7da:	ed93 0a5b 	vldr	s0, [r3, #364]	; 0x16c
     7de:	ed80 4a01 	vstr	s8, [r0, #4]
     7e2:	ee37 7a20 	vadd.f32	s14, s14, s1
     7e6:	ed93 4a60 	vldr	s8, [r3, #384]	; 0x180
     7ea:	e00d      	b.n	808 <audioInitAdditive+0x408>
     7ec:	200000d8 	.word	0x200000d8
     7f0:	20000d6c 	.word	0x20000d6c
     7f4:	20000090 	.word	0x20000090
     7f8:	200002f4 	.word	0x200002f4
     7fc:	20000d74 	.word	0x20000d74
     800:	20000d68 	.word	0x20000d68
     804:	3daaaaab 	.word	0x3daaaaab
     808:	edc0 7a02 	vstr	s15, [r0, #8]
     80c:	ee36 6a01 	vadd.f32	s12, s12, s2
     810:	edd0 7a08 	vldr	s15, [r0, #32]
     814:	ee37 7a21 	vadd.f32	s14, s14, s3
     818:	edc4 2a00 	vstr	s5, [r4]
     81c:	ee77 7a84 	vadd.f32	s15, s15, s8
     820:	edc0 3a00 	vstr	s7, [r0]
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
     824:	eec6 1aa2 	vdiv.f32	s3, s13, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     828:	edd3 2a61 	vldr	s5, [r3, #388]	; 0x184
     82c:	edd3 3a62 	vldr	s7, [r3, #392]	; 0x188
     830:	edd3 0a5c 	vldr	s1, [r3, #368]	; 0x170
     834:	ed80 5a04 	vstr	s10, [r0, #16]
     838:	ed93 1a5d 	vldr	s2, [r3, #372]	; 0x174
     83c:	ee37 7a02 	vadd.f32	s14, s14, s4
     840:	ed84 3a01 	vstr	s6, [r4, #4]
     844:	ee77 7aa2 	vadd.f32	s15, s15, s5
     848:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
	gainNormalizers[1] = 1.0f / totalGain[1];
     84c:	ee86 2a83 	vdiv.f32	s4, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     850:	ed93 3a5e 	vldr	s6, [r3, #376]	; 0x178
     854:	edc0 4a03 	vstr	s9, [r0, #12]
     858:	edd3 4a67 	vldr	s9, [r3, #412]	; 0x19c
     85c:	edc0 5a05 	vstr	s11, [r0, #20]
     860:	ed80 6a06 	vstr	s12, [r0, #24]
     864:	ee37 7a08 	vadd.f32	s14, s14, s16
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     868:	4cd3      	ldr	r4, [pc, #844]	; (bb8 <audioInitAdditive+0x7b8>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     86a:	ee77 7aa3 	vadd.f32	s15, s15, s7
     86e:	edd3 3a64 	vldr	s7, [r3, #400]	; 0x190
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     872:	ee86 8a85 	vdiv.f32	s16, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     876:	ed93 5a63 	vldr	s10, [r3, #396]	; 0x18c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     87a:	ed84 aa00 	vstr	s20, [r4]
     87e:	edc4 9a01 	vstr	s19, [r4, #4]
     882:	ed84 9a02 	vstr	s18, [r4, #8]
     886:	edc4 8a03 	vstr	s17, [r4, #12]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     88a:	ee37 7a00 	vadd.f32	s14, s14, s0
     88e:	ee77 7a85 	vadd.f32	s15, s15, s10
     892:	ed93 5a65 	vldr	s10, [r3, #404]	; 0x194
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     896:	ee86 0aa5 	vdiv.f32	s0, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     89a:	edd3 5a69 	vldr	s11, [r3, #420]	; 0x1a4
     89e:	ee37 7a20 	vadd.f32	s14, s14, s1
     8a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8a6:	eec6 0a86 	vdiv.f32	s1, s13, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8aa:	ed93 6a6a 	vldr	s12, [r3, #424]	; 0x1a8
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8ae:	ed84 8a04 	vstr	s16, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8b2:	ee37 7a01 	vadd.f32	s14, s14, s2
     8b6:	ee77 7a85 	vadd.f32	s15, s15, s10
     8ba:	ed93 5a68 	vldr	s10, [r3, #416]	; 0x1a0
     8be:	ee37 7a03 	vadd.f32	s14, s14, s6
     8c2:	ee37 7a04 	vadd.f32	s14, s14, s8
     8c6:	ed93 4a66 	vldr	s8, [r3, #408]	; 0x198
     8ca:	ee77 7a84 	vadd.f32	s15, s15, s8
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8ce:	ee86 1a87 	vdiv.f32	s2, s13, s14
     8d2:	ed80 7a07 	vstr	s14, [r0, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8d6:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8da:	ed84 0a05 	vstr	s0, [r4, #20]
     8de:	edc4 0a06 	vstr	s1, [r4, #24]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8e2:	ee77 7aa4 	vadd.f32	s15, s15, s9
     8e6:	ee77 7a85 	vadd.f32	s15, s15, s10
     8ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
     8ee:	ee77 7a86 	vadd.f32	s15, s15, s12
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8f2:	ed84 1a07 	vstr	s2, [r4, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8f6:	ee77 7a87 	vadd.f32	s15, s15, s14
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8fa:	eec6 2aa7 	vdiv.f32	s5, s13, s15
     8fe:	edc0 7a08 	vstr	s15, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
     902:	48ae      	ldr	r0, [pc, #696]	; (bbc <audioInitAdditive+0x7bc>)
     904:	edc0 1a00 	vstr	s3, [r0]
	gainNormalizers[1] = 1.0f / totalGain[1];
     908:	ed80 2a01 	vstr	s4, [r0, #4]
     90c:	f102 0030 	add.w	r0, r2, #48	; 0x30
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     910:	edc4 2a08 	vstr	s5, [r4, #32]
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
		for (int j = 0; j < 3; j++)
		{
			for (int k = 0; k < 3; k++)
			{
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     914:	edd3 7a00 	vldr	s15, [r3]
		partials[i] = partials[i] * gainNormalizers[0];
     918:	ed92 3a00 	vldr	s6, [r2]
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     91c:	ee67 7a8a 	vmul.f32	s15, s15, s20
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
     920:	edd1 3a00 	vldr	s7, [r1]
		partials[i] = partials[i] * gainNormalizers[0];
     924:	ee21 3a83 	vmul.f32	s6, s3, s6
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
     928:	ee62 3a23 	vmul.f32	s7, s4, s7
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     92c:	ece3 7a01 	vstmia	r3!, {s15}
     930:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
     934:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
     938:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
     93c:	ee24 4a29 	vmul.f32	s8, s8, s19
     940:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
     944:	ee64 4a89 	vmul.f32	s9, s9, s18
     948:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
     94c:	ee25 5a28 	vmul.f32	s10, s10, s17
     950:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
     954:	ee65 5a88 	vmul.f32	s11, s11, s16
     958:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
     95c:	ee26 6a00 	vmul.f32	s12, s12, s0
     960:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
     964:	ee66 6aa0 	vmul.f32	s13, s13, s1
     968:	ee27 7a01 	vmul.f32	s14, s14, s2
		partials[i] = partials[i] * gainNormalizers[0];
     96c:	eca2 3a01 	vstmia	r2!, {s6}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     970:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
     974:	4290      	cmp	r0, r2
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
     976:	ece1 3a01 	vstmia	r1!, {s7}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     97a:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
     97e:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
     982:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
     986:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
     98a:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
     98e:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
     992:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
     996:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
     99a:	d1bb      	bne.n	914 <audioInitAdditive+0x514>
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
		  for (int j = 0; j < 3; j++)
		  {
			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
     99c:	4b88      	ldr	r3, [pc, #544]	; (bc0 <audioInitAdditive+0x7c0>)
     99e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     9a2:	4c88      	ldr	r4, [pc, #544]	; (bc4 <audioInitAdditive+0x7c4>)
     9a4:	ed93 8a01 	vldr	s16, [r3, #4]
     9a8:	ed93 0a04 	vldr	s0, [r3, #16]
     9ac:	f104 0830 	add.w	r8, r4, #48	; 0x30
     9b0:	edd3 0a07 	vldr	s1, [r3, #28]
     9b4:	edd3 9a00 	vldr	s19, [r3]
     9b8:	ed93 6a02 	vldr	s12, [r3, #8]
     9bc:	ed93 9a03 	vldr	s18, [r3, #12]
     9c0:	ee78 4a69 	vsub.f32	s9, s16, s19
     9c4:	edd3 6a05 	vldr	s13, [r3, #20]
     9c8:	ee36 6a48 	vsub.f32	s12, s12, s16
     9cc:	edd3 8a06 	vldr	s17, [r3, #24]
     9d0:	ee30 5a49 	vsub.f32	s10, s0, s18
     9d4:	ed93 7a08 	vldr	s14, [r3, #32]
     9d8:	ee76 6ac0 	vsub.f32	s13, s13, s0
     9dc:	ee70 5ae8 	vsub.f32	s11, s1, s17
     9e0:	f8df c21c 	ldr.w	ip, [pc, #540]	; c00 <audioInitAdditive+0x800>
     9e4:	ee37 7a60 	vsub.f32	s14, s14, s1
     9e8:	4f77      	ldr	r7, [pc, #476]	; (bc8 <audioInitAdditive+0x7c8>)
     9ea:	eec7 daa4 	vdiv.f32	s27, s15, s9
     9ee:	4e77      	ldr	r6, [pc, #476]	; (bcc <audioInitAdditive+0x7cc>)
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     9f0:	eddf aa77 	vldr	s21, [pc, #476]	; bd0 <audioInitAdditive+0x7d0>
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     9f4:	ed9f aa77 	vldr	s20, [pc, #476]	; bd4 <audioInitAdditive+0x7d4>
     9f8:	4b77      	ldr	r3, [pc, #476]	; (bd8 <audioInitAdditive+0x7d8>)
     9fa:	4878      	ldr	r0, [pc, #480]	; (bdc <audioInitAdditive+0x7dc>)
     9fc:	ee87 da86 	vdiv.f32	s26, s15, s12
     a00:	4977      	ldr	r1, [pc, #476]	; (be0 <audioInitAdditive+0x7e0>)
     a02:	4a78      	ldr	r2, [pc, #480]	; (be4 <audioInitAdditive+0x7e4>)
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
     a04:	4d78      	ldr	r5, [pc, #480]	; (be8 <audioInitAdditive+0x7e8>)
     a06:	eec7 ca85 	vdiv.f32	s25, s15, s10
     a0a:	ee87 caa6 	vdiv.f32	s24, s15, s13
     a0e:	eec7 baa5 	vdiv.f32	s23, s15, s11
     a12:	ee87 ba87 	vdiv.f32	s22, s15, s14
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a16:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
     a1a:	3304      	adds	r3, #4
     a1c:	ed53 2a01 	vldr	s5, [r3, #-4]
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a20:	ecb5 2a01 	vldmia	r5!, {s4}
     a24:	ecb4 6a01 	vldmia	r4!, {s12}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a28:	ee87 4aa4 	vdiv.f32	s8, s15, s9
     a2c:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
     a30:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
	for (int i = 0; i < NUM_OVERTONES; i++)
     a34:	4544      	cmp	r4, r8
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a36:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
     a3a:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
     a3e:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a42:	eec7 ea82 	vdiv.f32	s29, s15, s4
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a46:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
     a4a:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
     a4e:	ee87 2aa2 	vdiv.f32	s4, s15, s5
     a52:	eec7 4a85 	vdiv.f32	s9, s15, s10
     a56:	eec7 faa3 	vdiv.f32	s31, s15, s7
     a5a:	ee87 5aa1 	vdiv.f32	s10, s15, s3
     a5e:	eec7 3aa5 	vdiv.f32	s7, s15, s11
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a62:	eec7 5a86 	vdiv.f32	s11, s15, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a66:	ee87 6aa6 	vdiv.f32	s12, s15, s13
     a6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
     a6e:	ee87 7a83 	vdiv.f32	s14, s15, s6
     a72:	ee74 1a42 	vsub.f32	s3, s8, s4
     a76:	ee35 3a63 	vsub.f32	s6, s10, s7
     a7a:	ee74 2aef 	vsub.f32	s5, s9, s31
     a7e:	ee61 1aad 	vmul.f32	s3, s3, s27
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a82:	ee75 5aee 	vsub.f32	s11, s11, s29
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a86:	ee36 6a44 	vsub.f32	s12, s12, s8

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     a8a:	ee29 1aa1 	vmul.f32	s2, s19, s3
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a8e:	ece0 1a01 	vstmia	r0!, {s3}
     a92:	ee76 6ae4 	vsub.f32	s13, s13, s9
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a96:	ee65 5aaa 	vmul.f32	s11, s11, s21
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a9a:	ee26 6a0d 	vmul.f32	s12, s12, s26
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     a9e:	eca1 1a01 	vstmia	r1!, {s2}

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     aa2:	ee32 2a41 	vsub.f32	s4, s4, s2
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     aa6:	ee37 7a45 	vsub.f32	s14, s14, s10
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     aaa:	ecec 5a01 	vstmia	ip!, {s11}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     aae:	ee62 2aac 	vmul.f32	s5, s5, s25
     ab2:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
     ab6:	ee66 6a8c 	vmul.f32	s13, s13, s24
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     aba:	eca2 2a01 	vstmia	r2!, {s4}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     abe:	ee27 7a0b 	vmul.f32	s14, s14, s22
     ac2:	ee23 3a2b 	vmul.f32	s6, s6, s23
     ac6:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     aca:	ee25 fa8a 	vmul.f32	s30, s11, s20
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     ace:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     ad2:	ee28 ea06 	vmul.f32	s28, s16, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     ad6:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     ada:	ee29 1a22 	vmul.f32	s2, s18, s5
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     ade:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     ae2:	ee60 1a26 	vmul.f32	s3, s0, s13
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     ae6:	eca7 fa01 	vstmia	r7!, {s30}
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     aea:	ee28 2a83 	vmul.f32	s4, s17, s6
     aee:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
     af2:	ee20 6a87 	vmul.f32	s12, s1, s14
     af6:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     afa:	ee7e eacf 	vsub.f32	s29, s29, s30
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     afe:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b02:	ee34 4a4e 	vsub.f32	s8, s8, s28
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     b06:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b0a:	ee7f 5ac1 	vsub.f32	s11, s31, s2
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     b0e:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b12:	ee74 4ae1 	vsub.f32	s9, s9, s3
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     b16:	ece6 ea01 	vstmia	r6!, {s29}
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b1a:	ee73 3ac2 	vsub.f32	s7, s7, s4
     b1e:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
     b22:	ee35 5a46 	vsub.f32	s10, s10, s12
     b26:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
     b2a:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
     b2e:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
     b32:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
	for (int i = 0; i < NUM_OVERTONES; i++)
     b36:	f47f af6e 	bne.w	a16 <audioInitAdditive+0x616>
     b3a:	4b2c      	ldr	r3, [pc, #176]	; (bec <audioInitAdditive+0x7ec>)
     b3c:	f04f 0900 	mov.w	r9, #0
     b40:	f8df b0c0 	ldr.w	fp, [pc, #192]	; c04 <audioInitAdditive+0x804>
     b44:	9301      	str	r3, [sp, #4]
     b46:	4b28      	ldr	r3, [pc, #160]	; (be8 <audioInitAdditive+0x7e8>)
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     b48:	ed9f 9a29 	vldr	s18, [pc, #164]	; bf0 <audioInitAdditive+0x7f0>
     b4c:	f103 0830 	add.w	r8, r3, #48	; 0x30
     b50:	eddf 8a28 	vldr	s17, [pc, #160]	; bf4 <audioInitAdditive+0x7f4>
     b54:	ed9f 8a28 	vldr	s16, [pc, #160]	; bf8 <audioInitAdditive+0x7f8>
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
     b58:	9e01      	ldr	r6, [sp, #4]
     b5a:	465c      	mov	r4, fp
     b5c:	4d22      	ldr	r5, [pc, #136]	; (be8 <audioInitAdditive+0x7e8>)
			tCycle_init(&additive[i][j], &leaf);
     b5e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; c08 <audioInitAdditive+0x808>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     b62:	4f26      	ldr	r7, [pc, #152]	; (bfc <audioInitAdditive+0x7fc>)
			tCycle_init(&additive[i][j], &leaf);
     b64:	4620      	mov	r0, r4
     b66:	4651      	mov	r1, sl
     b68:	f008 fd7e 	bl	9668 <__tCycle_init_veneer>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     b6c:	ecf5 0a01 	vldmia	r5!, {s1}
     b70:	4630      	mov	r0, r6
     b72:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
     b76:	ee60 0a89 	vmul.f32	s1, s1, s18
     b7a:	4653      	mov	r3, sl
     b7c:	eef0 1a68 	vmov.f32	s3, s17
     b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b84:	eeb0 1a48 	vmov.f32	s2, s16
     b88:	4639      	mov	r1, r7
     b8a:	f008 fbdd 	bl	9348 <__tADSRT_init_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     b8e:	4545      	cmp	r5, r8
     b90:	f104 0404 	add.w	r4, r4, #4
     b94:	f106 0604 	add.w	r6, r6, #4
     b98:	d1e4      	bne.n	b64 <audioInitAdditive+0x764>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
     b9a:	9b01      	ldr	r3, [sp, #4]
     b9c:	f109 0912 	add.w	r9, r9, #18
     ba0:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
     ba4:	3348      	adds	r3, #72	; 0x48
     ba6:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
     baa:	9301      	str	r3, [sp, #4]
     bac:	d1d4      	bne.n	b58 <audioInitAdditive+0x758>
		}
		//tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
	}
}
     bae:	b003      	add	sp, #12
     bb0:	ecbd 8b10 	vpop	{d8-d15}
     bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bb8:	20000d44 	.word	0x20000d44
     bbc:	20000d3c 	.word	0x20000d3c
     bc0:	200002d0 	.word	0x200002d0
     bc4:	20000048 	.word	0x20000048
     bc8:	20000c64 	.word	0x20000c64
     bcc:	20000cf4 	.word	0x20000cf4
     bd0:	3b84a9fa 	.word	0x3b84a9fa
     bd4:	42f60000 	.word	0x42f60000
     bd8:	20000120 	.word	0x20000120
     bdc:	20000a24 	.word	0x20000a24
     be0:	20000904 	.word	0x20000904
     be4:	20000b44 	.word	0x20000b44
     be8:	20000000 	.word	0x20000000
     bec:	20000874 	.word	0x20000874
     bf0:	447a0000 	.word	0x447a0000
     bf4:	43160000 	.word	0x43160000
     bf8:	00000000 	.word	0x00000000
     bfc:	20000dc8 	.word	0x20000dc8
     c00:	20000cac 	.word	0x20000cac
     c04:	200007e4 	.word	0x200007e4
     c08:	20004e5c 	.word	0x20004e5c
     c0c:	f3af 8000 	nop.w
     c10:	f3af 8000 	nop.w
     c14:	f3af 8000 	nop.w
     c18:	f3af 8000 	nop.w
     c1c:	f3af 8000 	nop.w

00000c20 <audioFreeAdditive>:


void __ATTR_ITCMRAM audioFreeAdditive()
{

}
     c20:	4770      	bx	lr
     c22:	bf00      	nop
     c24:	f3af 8000 	nop.w
     c28:	f3af 8000 	nop.w
     c2c:	f3af 8000 	nop.w
     c30:	f3af 8000 	nop.w
     c34:	f3af 8000 	nop.w
     c38:	f3af 8000 	nop.w
     c3c:	f3af 8000 	nop.w

00000c40 <audioTickAdditive>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickAdditive(void)
{
     c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c44:	4f68      	ldr	r7, [pc, #416]	; (de8 <audioTickAdditive+0x1a8>)
     c46:	4d69      	ldr	r5, [pc, #420]	; (dec <audioTickAdditive+0x1ac>)
     c48:	463c      	mov	r4, r7
     c4a:	f107 0630 	add.w	r6, r7, #48	; 0x30
     c4e:	ed2d 8b0a 	vpush	{d8-d12}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     c52:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
     c54:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     c56:	f008 fc9b 	bl	9590 <__tExpSmooth_tick_veneer>
     c5a:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
     c5e:	42b4      	cmp	r4, r6
     c60:	d1f7      	bne.n	c52 <audioTickAdditive+0x12>
	}

	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     c62:	4863      	ldr	r0, [pc, #396]	; (df0 <audioTickAdditive+0x1b0>)
     c64:	f008 fb00 	bl	9268 <__tNoise_tick_veneer>
     c68:	4862      	ldr	r0, [pc, #392]	; (df4 <audioTickAdditive+0x1b4>)
     c6a:	f008 fb89 	bl	9380 <__tVZFilter_tickEfficient_veneer>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c6e:	4860      	ldr	r0, [pc, #384]	; (df0 <audioTickAdditive+0x1b0>)
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     c70:	eeb0 ca40 	vmov.f32	s24, s0
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c74:	f008 faf8 	bl	9268 <__tNoise_tick_veneer>
     c78:	485f      	ldr	r0, [pc, #380]	; (df8 <audioTickAdditive+0x1b8>)
     c7a:	f008 fb81 	bl	9380 <__tVZFilter_tickEfficient_veneer>


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     c7e:	485f      	ldr	r0, [pc, #380]	; (dfc <audioTickAdditive+0x1bc>)
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c80:	eeb0 8a40 	vmov.f32	s16, s0
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     c84:	f008 fc84 	bl	9590 <__tExpSmooth_tick_veneer>
	//float Env2 = 0.0f;
	for (int i = 0; i < numStringsThisBoard; i++)
     c88:	4b5d      	ldr	r3, [pc, #372]	; (e00 <audioTickAdditive+0x1c0>)
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     c8a:	eef0 ca40 	vmov.f32	s25, s0
	float tempSamp = 0.0f;
     c8e:	ed9f 9a5d 	vldr	s18, [pc, #372]	; e04 <audioTickAdditive+0x1c4>
	for (int i = 0; i < numStringsThisBoard; i++)
     c92:	781b      	ldrb	r3, [r3, #0]
     c94:	2b00      	cmp	r3, #0
     c96:	d072      	beq.n	d7e <audioTickAdditive+0x13e>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c98:	ee3c ca08 	vadd.f32	s24, s24, s16
     c9c:	f8df b194 	ldr.w	fp, [pc, #404]	; e34 <audioTickAdditive+0x1f4>
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     ca0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
     ca4:	f8df 8190 	ldr.w	r8, [pc, #400]	; e38 <audioTickAdditive+0x1f8>
			//float tempFreq = 0.0f;
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
			//float tempGain = LEAF_map(tempFreq, 15000.0f, 19000.0f, 0.0, 1.0f);
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     ca8:	eeb0 aa49 	vmov.f32	s20, s18
     cac:	f8df a18c 	ldr.w	sl, [pc, #396]	; e3c <audioTickAdditive+0x1fc>
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     cb0:	eddf ba55 	vldr	s23, [pc, #340]	; e08 <audioTickAdditive+0x1c8>
	for (int i = 0; i < numStringsThisBoard; i++)
     cb4:	f04f 0900 	mov.w	r9, #0
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
     cb8:	ed9f ba54 	vldr	s22, [pc, #336]	; e0c <audioTickAdditive+0x1cc>
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     cbc:	eddf aa54 	vldr	s21, [pc, #336]	; e10 <audioTickAdditive+0x1d0>
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     cc0:	4b54      	ldr	r3, [pc, #336]	; (e14 <audioTickAdditive+0x1d4>)
     cc2:	ea4f 0489 	mov.w	r4, r9, lsl #2
     cc6:	eb09 05c9 	add.w	r5, r9, r9, lsl #3
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cca:	4656      	mov	r6, sl
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     ccc:	eb03 0089 	add.w	r0, r3, r9, lsl #2
     cd0:	f008 fd3a 	bl	9748 <__tADSRT_tick_veneer>
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
     cd4:	edd7 7a07 	vldr	s15, [r7, #28]
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cd8:	4b4f      	ldr	r3, [pc, #316]	; (e18 <audioTickAdditive+0x1d8>)
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
     cda:	ee6c 7a27 	vmul.f32	s15, s24, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cde:	441c      	add	r4, r3
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
     ce0:	eea0 9a27 	vfma.f32	s18, s0, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     ce4:	ed94 7a00 	vldr	s14, [r4]
     ce8:	ecbb 0a01 	vldmia	fp!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     cec:	2400      	movs	r4, #0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cee:	ee37 0a00 	vadd.f32	s0, s14, s0
     cf2:	f008 fcb1 	bl	9658 <__mtof_veneer>
     cf6:	4b49      	ldr	r3, [pc, #292]	; (e1c <audioTickAdditive+0x1dc>)
     cf8:	eca8 0a01 	vstmia	r8!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     cfc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     d00:	4630      	mov	r0, r6
		for (int j = 0; j < NUM_OVERTONES; j++)
     d02:	3604      	adds	r6, #4
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     d04:	f008 fd20 	bl	9748 <__tADSRT_tick_veneer>
     d08:	ee07 4a10 	vmov	s14, r4
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d0c:	3401      	adds	r4, #1
     d0e:	edd7 7a04 	vldr	s15, [r7, #16]
     d12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
     d16:	ed18 6a01 	vldr	s12, [r8, #-4]
     d1a:	ee06 4a90 	vmov	s13, r4
     d1e:	ee67 7aab 	vmul.f32	s15, s15, s23
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d22:	eef0 0a69 	vmov.f32	s1, s19
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d26:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
     d2a:	eef0 6a69 	vmov.f32	s13, s19
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d2e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d32:	ee28 8a06 	vmul.f32	s16, s16, s12
     d36:	eee7 6a27 	vfma.f32	s13, s14, s15
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     d3a:	eef0 8a40 	vmov.f32	s17, s0
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d3e:	eeb0 0a4a 	vmov.f32	s0, s20
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d42:	ee28 8a26 	vmul.f32	s16, s16, s13
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d46:	ee7b 7a48 	vsub.f32	s15, s22, s16
     d4a:	eee7 0aaa 	vfma.f32	s1, s15, s21
     d4e:	f008 fbe7 	bl	9520 <__LEAF_clip_veneer>
			tCycle_setFreq(&additive[i][j], tempFreq);
     d52:	4628      	mov	r0, r5
     d54:	eeb0 0a48 	vmov.f32	s0, s16
     d58:	f008 fb36 	bl	93c8 <__tCycle_setFreq_veneer>
			//float upRamp = (j * invNumOvertones);
			//float downRamp = 1.0f - (j * invNumOvertones);
			//float freqWeight = (upRamp * knobScaled[0]) + (downRamp * (1.0f - knobScaled[0]));
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
     d5c:	4628      	mov	r0, r5
     d5e:	f008 fbd7 	bl	9510 <__tCycle_tick_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     d62:	2c0c      	cmp	r4, #12
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
     d64:	eea0 9a28 	vfma.f32	s18, s0, s17
		for (int j = 0; j < NUM_OVERTONES; j++)
     d68:	f105 0504 	add.w	r5, r5, #4
     d6c:	d1c8      	bne.n	d00 <audioTickAdditive+0xc0>
	for (int i = 0; i < numStringsThisBoard; i++)
     d6e:	4b24      	ldr	r3, [pc, #144]	; (e00 <audioTickAdditive+0x1c0>)
     d70:	f109 0901 	add.w	r9, r9, #1
     d74:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	454b      	cmp	r3, r9
     d7c:	dca0      	bgt.n	cc0 <audioTickAdditive+0x80>
		}


	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
     d7e:	ed9f 0a28 	vldr	s0, [pc, #160]	; e20 <audioTickAdditive+0x1e0>
     d82:	eddf 7a28 	vldr	s15, [pc, #160]	; e24 <audioTickAdditive+0x1e4>
     d86:	eef0 0a40 	vmov.f32	s1, s0
     d8a:	ed9f 1a27 	vldr	s2, [pc, #156]	; e28 <audioTickAdditive+0x1e8>
     d8e:	eeec 0aa7 	vfma.f32	s1, s25, s15
     d92:	f008 fbc5 	bl	9520 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
     d96:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
     d9a:	4924      	ldr	r1, [pc, #144]	; (e2c <audioTickAdditive+0x1ec>)
	float omAlpha = 1.0f - alpha;
     d9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     da0:	4a23      	ldr	r2, [pc, #140]	; (e30 <audioTickAdditive+0x1f0>)
	int volIdxInt = (int) volIdx;
     da2:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
     da6:	edd1 6a00 	vldr	s13, [r1]
     daa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     dae:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     db0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
     db4:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     db8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
     dbc:	ee30 0a47 	vsub.f32	s0, s0, s14
     dc0:	ee29 9a26 	vmul.f32	s18, s18, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     dc4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
     dc8:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     dcc:	ed93 7a00 	vldr	s14, [r3]
     dd0:	edd2 6a00 	vldr	s13, [r2]
     dd4:	ee20 0a26 	vmul.f32	s0, s0, s13
     dd8:	eea7 0a27 	vfma.f32	s0, s14, s15
	return tempSamp;
}
     ddc:	ee29 0a00 	vmul.f32	s0, s18, s0
     de0:	ecbd 8b0a 	vpop	{d8-d12}
     de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     de8:	20004df8 	.word	0x20004df8
     dec:	20004e28 	.word	0x20004e28
     df0:	20004eb4 	.word	0x20004eb4
     df4:	20004ebc 	.word	0x20004ebc
     df8:	20004ec0 	.word	0x20004ec0
     dfc:	20013e24 	.word	0x20013e24
     e00:	200004b1 	.word	0x200004b1
     e04:	00000000 	.word	0x00000000
     e08:	3b449ba6 	.word	0x3b449ba6
     e0c:	466a6000 	.word	0x466a6000
     e10:	3983126f 	.word	0x3983126f
     e14:	20004dd4 	.word	0x20004dd4
     e18:	20013dec 	.word	0x20013dec
     e1c:	200007e4 	.word	0x200007e4
     e20:	423c0000 	.word	0x423c0000
     e24:	42a00000 	.word	0x42a00000
     e28:	42fe0000 	.word	0x42fe0000
     e2c:	200004a8 	.word	0x200004a8
     e30:	2000051c 	.word	0x2000051c
     e34:	20013df4 	.word	0x20013df4
     e38:	20013da4 	.word	0x20013da4
     e3c:	20000874 	.word	0x20000874

00000e40 <audioFrameAdditive>:
	uint32_t tempCountFrame = DWT->CYCCNT;
     e40:	4ba4      	ldr	r3, [pc, #656]	; (10d4 <audioFrameAdditive+0x294>)
{
     e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e46:	ed2d 8b10 	vpush	{d8-d15}
	uint32_t tempCountFrame = DWT->CYCCNT;
     e4a:	685b      	ldr	r3, [r3, #4]
{
     e4c:	b08d      	sub	sp, #52	; 0x34
	uint32_t tempCountFrame = DWT->CYCCNT;
     e4e:	9305      	str	r3, [sp, #20]
	if (newPluck)
     e50:	4ba1      	ldr	r3, [pc, #644]	; (10d8 <audioFrameAdditive+0x298>)
{
     e52:	9006      	str	r0, [sp, #24]
	if (newPluck)
     e54:	681b      	ldr	r3, [r3, #0]
     e56:	2b00      	cmp	r3, #0
     e58:	d043      	beq.n	ee2 <audioFrameAdditive+0xa2>
		for (int i = 0; i < numStringsThisBoard; i++)
     e5a:	4ba0      	ldr	r3, [pc, #640]	; (10dc <audioFrameAdditive+0x29c>)
     e5c:	781a      	ldrb	r2, [r3, #0]
     e5e:	2a00      	cmp	r2, #0
     e60:	d03c      	beq.n	edc <audioFrameAdditive+0x9c>
     e62:	4b9f      	ldr	r3, [pc, #636]	; (10e0 <audioFrameAdditive+0x2a0>)
     e64:	2600      	movs	r6, #0
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
     e66:	eddf ca9f 	vldr	s25, [pc, #636]	; 10e4 <audioFrameAdditive+0x2a4>
     e6a:	9302      	str	r3, [sp, #8]
     e6c:	4b9e      	ldr	r3, [pc, #632]	; (10e8 <audioFrameAdditive+0x2a8>)
     e6e:	ed9f aa9f 	vldr	s20, [pc, #636]	; 10ec <audioFrameAdditive+0x2ac>
     e72:	9301      	str	r3, [sp, #4]
     e74:	4b9e      	ldr	r3, [pc, #632]	; (10f0 <audioFrameAdditive+0x2b0>)
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     e76:	ed9f fa9f 	vldr	s30, [pc, #636]	; 10f4 <audioFrameAdditive+0x2b4>
     e7a:	9304      	str	r3, [sp, #16]
     e7c:	eddf fa9e 	vldr	s31, [pc, #632]	; 10f8 <audioFrameAdditive+0x2b8>
     e80:	4b9e      	ldr	r3, [pc, #632]	; (10fc <audioFrameAdditive+0x2bc>)
     e82:	9303      	str	r3, [sp, #12]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
     e84:	4b9e      	ldr	r3, [pc, #632]	; (1100 <audioFrameAdditive+0x2c0>)
     e86:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     e8a:	b29b      	uxth	r3, r3
     e8c:	b92b      	cbnz	r3, e9a <audioFrameAdditive+0x5a>
     e8e:	4b9d      	ldr	r3, [pc, #628]	; (1104 <audioFrameAdditive+0x2c4>)
     e90:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     e94:	b29b      	uxth	r3, r3
     e96:	2b00      	cmp	r3, #0
     e98:	d16a      	bne.n	f70 <audioFrameAdditive+0x130>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
     e9a:	4b99      	ldr	r3, [pc, #612]	; (1100 <audioFrameAdditive+0x2c0>)
     e9c:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     ea0:	b29b      	uxth	r3, r3
     ea2:	b12b      	cbz	r3, eb0 <audioFrameAdditive+0x70>
     ea4:	4b97      	ldr	r3, [pc, #604]	; (1104 <audioFrameAdditive+0x2c4>)
     ea6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     eaa:	b29b      	uxth	r3, r3
     eac:	2b00      	cmp	r3, #0
     eae:	d04f      	beq.n	f50 <audioFrameAdditive+0x110>
		for (int i = 0; i < numStringsThisBoard; i++)
     eb0:	9b02      	ldr	r3, [sp, #8]
			previousStringInputs[i] = stringInputs[i];
     eb2:	4993      	ldr	r1, [pc, #588]	; (1100 <audioFrameAdditive+0x2c0>)
		for (int i = 0; i < numStringsThisBoard; i++)
     eb4:	3304      	adds	r3, #4
     eb6:	9302      	str	r3, [sp, #8]
     eb8:	9b01      	ldr	r3, [sp, #4]
     eba:	3348      	adds	r3, #72	; 0x48
     ebc:	9301      	str	r3, [sp, #4]
     ebe:	9b04      	ldr	r3, [sp, #16]
     ec0:	3304      	adds	r3, #4
     ec2:	9304      	str	r3, [sp, #16]
     ec4:	9b03      	ldr	r3, [sp, #12]
     ec6:	3304      	adds	r3, #4
     ec8:	9303      	str	r3, [sp, #12]
			previousStringInputs[i] = stringInputs[i];
     eca:	4b8e      	ldr	r3, [pc, #568]	; (1104 <audioFrameAdditive+0x2c4>)
     ecc:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     ed0:	b29b      	uxth	r3, r3
     ed2:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     ed6:	3601      	adds	r6, #1
     ed8:	42b2      	cmp	r2, r6
     eda:	dcd3      	bgt.n	e84 <audioFrameAdditive+0x44>
		newPluck = 0;
     edc:	2300      	movs	r3, #0
     ede:	4a7e      	ldr	r2, [pc, #504]	; (10d8 <audioFrameAdditive+0x298>)
     ee0:	6013      	str	r3, [r2, #0]
     ee2:	4c89      	ldr	r4, [pc, #548]	; (1108 <audioFrameAdditive+0x2c8>)
     ee4:	9b06      	ldr	r3, [sp, #24]
     ee6:	f504 7500 	add.w	r5, r4, #512	; 0x200
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     eea:	ed9f 8a88 	vldr	s16, [pc, #544]	; 110c <audioFrameAdditive+0x2cc>
     eee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     ef2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     ef6:	f7ff fea3 	bl	c40 <audioTickAdditive>
     efa:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     efe:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     f00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     f04:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     f06:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
     f0a:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     f0e:	d1f2      	bne.n	ef6 <audioFrameAdditive+0xb6>
	if (switchStrings)
     f10:	4c7f      	ldr	r4, [pc, #508]	; (1110 <audioFrameAdditive+0x2d0>)
     f12:	6823      	ldr	r3, [r4, #0]
     f14:	b9c3      	cbnz	r3, f48 <audioFrameAdditive+0x108>
	switchStrings = 0;
     f16:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f18:	487e      	ldr	r0, [pc, #504]	; (1114 <audioFrameAdditive+0x2d4>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
     f1a:	4b6e      	ldr	r3, [pc, #440]	; (10d4 <audioFrameAdditive+0x294>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f1c:	ed90 7a00 	vldr	s14, [r0]
	switchStrings = 0;
     f20:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
     f22:	9805      	ldr	r0, [sp, #20]
     f24:	685b      	ldr	r3, [r3, #4]
     f26:	497c      	ldr	r1, [pc, #496]	; (1118 <audioFrameAdditive+0x2d8>)
     f28:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f2a:	4a7c      	ldr	r2, [pc, #496]	; (111c <audioFrameAdditive+0x2dc>)
     f2c:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
     f30:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
     f36:	ee67 7a87 	vmul.f32	s15, s15, s14
     f3a:	edc2 7a00 	vstr	s15, [r2]
}
     f3e:	b00d      	add	sp, #52	; 0x34
     f40:	ecbd 8b10 	vpop	{d8-d15}
     f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switchStringModel(switchStrings);
     f48:	6820      	ldr	r0, [r4, #0]
     f4a:	f000 faf9 	bl	1540 <switchStringModel>
     f4e:	e7e2      	b.n	f16 <audioFrameAdditive+0xd6>
     f50:	9b01      	ldr	r3, [sp, #4]
     f52:	461c      	mov	r4, r3
     f54:	f103 0530 	add.w	r5, r3, #48	; 0x30
					tADSRT_off(&additiveEnv[i][j]);
     f58:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
     f5a:	3404      	adds	r4, #4
					tADSRT_off(&additiveEnv[i][j]);
     f5c:	f008 fb0c 	bl	9578 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
     f60:	42a5      	cmp	r5, r4
     f62:	d1f9      	bne.n	f58 <audioFrameAdditive+0x118>
				tADSRT_off(&fenvelopes[i]);
     f64:	9802      	ldr	r0, [sp, #8]
     f66:	f008 fb07 	bl	9578 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     f6a:	4b5c      	ldr	r3, [pc, #368]	; (10dc <audioFrameAdditive+0x29c>)
     f6c:	781a      	ldrb	r2, [r3, #0]
     f6e:	e79f      	b.n	eb0 <audioFrameAdditive+0x70>
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f70:	4b64      	ldr	r3, [pc, #400]	; (1104 <audioFrameAdditive+0x2c4>)
     f72:	eddf 7a6b 	vldr	s15, [pc, #428]	; 1120 <audioFrameAdditive+0x2e0>
     f76:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
				stringOctave[i] = octave;
     f7a:	9c04      	ldr	r4, [sp, #16]
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f7c:	b29b      	uxth	r3, r3
				tADSRT_on(&fenvelopes[i], amplitz);
     f7e:	9802      	ldr	r0, [sp, #8]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
     f80:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 1144 <audioFrameAdditive+0x304>
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f84:	ee0c 3a10 	vmov	s24, r3
				stringOctave[i] = octave;
     f88:	4b66      	ldr	r3, [pc, #408]	; (1124 <audioFrameAdditive+0x2e4>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f8a:	eeb8 cacc 	vcvt.f32.s32	s24, s24
				stringOctave[i] = octave;
     f8e:	681b      	ldr	r3, [r3, #0]
     f90:	6023      	str	r3, [r4, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
     f92:	ee2c ca27 	vmul.f32	s24, s24, s15
				tADSRT_on(&fenvelopes[i], amplitz);
     f96:	eeb0 0a4c 	vmov.f32	s0, s24
     f9a:	f008 f9f9 	bl	9390 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     f9e:	4b62      	ldr	r3, [pc, #392]	; (1128 <audioFrameAdditive+0x2e8>)
     fa0:	edd4 7a00 	vldr	s15, [r4]
     fa4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     fa8:	ed93 0a00 	vldr	s0, [r3]
     fac:	ee30 0a27 	vadd.f32	s0, s0, s15
     fb0:	f008 fb52 	bl	9658 <__mtof_veneer>
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
     fb4:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
     fb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     fbc:	9b03      	ldr	r3, [sp, #12]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
     fbe:	eddb 6a02 	vldr	s13, [fp, #8]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     fc2:	ed83 0a00 	vstr	s0, [r3]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
     fc6:	eee6 7a87 	vfma.f32	s15, s13, s14
				int thisString = i + firstString;
     fca:	4b58      	ldr	r3, [pc, #352]	; (112c <audioFrameAdditive+0x2ec>)
     fcc:	681b      	ldr	r3, [r3, #0]
     fce:	4433      	add	r3, r6
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
     fd0:	ee60 9a27 	vmul.f32	s19, s0, s15
				if (thisString < 6)
     fd4:	2b05      	cmp	r3, #5
					stringFade = (float)thisString * 0.2f;
     fd6:	ee07 3a90 	vmov	s15, r3
				int thisString = i + firstString;
     fda:	9308      	str	r3, [sp, #32]
					stringFade = (float)thisString * 0.2f;
     fdc:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
				if (thisString < 6)
     fe0:	f340 8183 	ble.w	12ea <audioFrameAdditive+0x4aa>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     fe4:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     fe8:	4f51      	ldr	r7, [pc, #324]	; (1130 <audioFrameAdditive+0x2f0>)
     fea:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     fee:	eef0 1a6f 	vmov.f32	s3, s31
     ff2:	ed97 1a05 	vldr	s2, [r7, #20]
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     ff6:	ee39 9a67 	vsub.f32	s18, s18, s15
     ffa:	eddf 7a4e 	vldr	s15, [pc, #312]	; 1134 <audioFrameAdditive+0x2f4>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     ffe:	edd7 0a03 	vldr	s1, [r7, #12]
    1002:	eeb0 0a69 	vmov.f32	s0, s19
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    1006:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    100a:	f008 fa09 	bl	9420 <__LEAF_map_veneer>
    100e:	eeb0 1a4f 	vmov.f32	s2, s30
    1012:	eef0 0a40 	vmov.f32	s1, s0
    1016:	eeb0 0a6f 	vmov.f32	s0, s31
    101a:	f008 fa81 	bl	9520 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    101e:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1022:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1026:	ed97 1a02 	vldr	s2, [r7, #8]
    102a:	eef0 1a6f 	vmov.f32	s3, s31
    102e:	edd7 0a00 	vldr	s1, [r7]
    1032:	eeb0 0a69 	vmov.f32	s0, s19
    1036:	f8df 9110 	ldr.w	r9, [pc, #272]	; 1148 <audioFrameAdditive+0x308>
    103a:	f008 f9f1 	bl	9420 <__LEAF_map_veneer>
    103e:	eeb0 1a4f 	vmov.f32	s2, s30
    1042:	eef0 0a40 	vmov.f32	s1, s0
    1046:	4d3c      	ldr	r5, [pc, #240]	; (1138 <audioFrameAdditive+0x2f8>)
    1048:	eeb0 0a6f 	vmov.f32	s0, s31
    104c:	4c3b      	ldr	r4, [pc, #236]	; (113c <audioFrameAdditive+0x2fc>)
    104e:	f008 fa67 	bl	9520 <__LEAF_clip_veneer>
				int height2Int = floor(height2);
    1052:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
				int height1Int = floor(height1);
    1056:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    105a:	4939      	ldr	r1, [pc, #228]	; (1140 <audioFrameAdditive+0x300>)
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    105c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    1060:	960b      	str	r6, [sp, #44]	; 0x2c
				int height2Int = floor(height2);
    1062:	febb 7b47 	vrintm.f64	d7, d7
    1066:	eebd 7bc7 	vcvt.s32.f64	s14, d7
				int height1Int = floor(height1);
    106a:	febb 6b46 	vrintm.f64	d6, d6
    106e:	eebd 6bc6 	vcvt.s32.f64	s12, d6
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1072:	ee38 eac0 	vsub.f32	s28, s17, s0
    1076:	464e      	mov	r6, r9
    1078:	ee17 3a10 	vmov	r3, s14
				float height2Float = height2 - height2Int;
    107c:	eeb8 dac7 	vcvt.f32.s32	s26, s14
    1080:	ee16 2a10 	vmov	r2, s12
				float height1Float = height1 - height1Int;
    1084:	eef8 7ac6 	vcvt.f32.s32	s15, s12
    1088:	eb03 0343 	add.w	r3, r3, r3, lsl #1
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    108c:	ee78 eaeb 	vsub.f32	s29, s17, s23
    1090:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1094:	9707      	str	r7, [sp, #28]
    1096:	011b      	lsls	r3, r3, #4
				float height1Float = height1 - height1Int;
    1098:	ee70 da67 	vsub.f32	s27, s0, s15
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    109c:	ee7e 7a27 	vadd.f32	s15, s28, s15
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    10a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
    10a4:	f103 0a90 	add.w	sl, r3, #144	; 0x90
    10a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10ac:	ee7e ea8d 	vadd.f32	s29, s29, s26
    10b0:	18c8      	adds	r0, r1, r3
    10b2:	eb01 1302 	add.w	r3, r1, r2, lsl #4
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    10b6:	eeb0 ba40 	vmov.f32	s22, s0
				float height2Float = height2 - height2Int;
    10ba:	448a      	add	sl, r1
    10bc:	461a      	mov	r2, r3
    10be:	33c0      	adds	r3, #192	; 0xc0
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    10c0:	ee78 aac9 	vsub.f32	s21, s17, s18
    10c4:	4607      	mov	r7, r0
				float height2Float = height2 - height2Int;
    10c6:	ee3b dacd 	vsub.f32	s26, s23, s26
				for (int j = 0; j < NUM_OVERTONES; j++)
    10ca:	4691      	mov	r9, r2
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10cc:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
    10d0:	9300      	str	r3, [sp, #0]
    10d2:	e0c3      	b.n	125c <audioFrameAdditive+0x41c>
    10d4:	e0001000 	.word	0xe0001000
    10d8:	20004eb8 	.word	0x20004eb8
    10dc:	200004b1 	.word	0x200004b1
    10e0:	20004dd4 	.word	0x20004dd4
    10e4:	44fa0000 	.word	0x44fa0000
    10e8:	20000874 	.word	0x20000874
    10ec:	3dcccccd 	.word	0x3dcccccd
    10f0:	20013df4 	.word	0x20013df4
    10f4:	3ffeb852 	.word	0x3ffeb852
    10f8:	00000000 	.word	0x00000000
    10fc:	20013da4 	.word	0x20013da4
    1100:	20004f28 	.word	0x20004f28
    1104:	20013dd4 	.word	0x20013dd4
    1108:	30000000 	.word	0x30000000
    110c:	4b000000 	.word	0x4b000000
    1110:	20013e0c 	.word	0x20013e0c
    1114:	200004a4 	.word	0x200004a4
    1118:	20013e10 	.word	0x20013e10
    111c:	20004de4 	.word	0x20004de4
    1120:	37800080 	.word	0x37800080
    1124:	20004ec4 	.word	0x20004ec4
    1128:	20013dec 	.word	0x20013dec
    112c:	20004ddc 	.word	0x20004ddc
    1130:	200002d0 	.word	0x200002d0
    1134:	3e4ccccd 	.word	0x3e4ccccd
    1138:	20000a24 	.word	0x20000a24
    113c:	20013ed6 	.word	0x20013ed6
    1140:	200002f4 	.word	0x200002f4
    1144:	20004df8 	.word	0x20004df8
    1148:	20000b44 	.word	0x20000b44
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    114c:	ed97 8a00 	vldr	s16, [r7]
						if (height2 < 1.0f)
    1150:	eef4 bae8 	vcmpe.f32	s23, s17
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1154:	edd3 7a00 	vldr	s15, [r3]
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1158:	ee2d 8a08 	vmul.f32	s16, s26, s16
    115c:	ed9a 7a24 	vldr	s14, [sl, #144]	; 0x90
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1160:	ee6d 7aa7 	vmul.f32	s15, s27, s15
    1164:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
						if (height2 < 1.0f)
    1168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    116c:	9b07      	ldr	r3, [sp, #28]
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    116e:	eea7 8a2e 	vfma.f32	s16, s14, s29
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1172:	ed99 7a24 	vldr	s14, [r9, #144]	; 0x90
    1176:	eee7 7a26 	vfma.f32	s15, s14, s13
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    117a:	ee28 8a2a 	vmul.f32	s16, s16, s21
    117e:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    1182:	f100 80eb 	bmi.w	135c <audioFrameAdditive+0x51c>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    1186:	eef0 0a69 	vmov.f32	s1, s19
    118a:	ed93 1a08 	vldr	s2, [r3, #32]
    118e:	ed93 0a07 	vldr	s0, [r3, #28]
    1192:	ed95 ea3c 	vldr	s28, [r5, #240]	; 0xf0
    1196:	f008 f9c3 	bl	9520 <__LEAF_clip_veneer>
    119a:	ed96 7a3c 	vldr	s14, [r6, #240]	; 0xf0
    119e:	eeae 7a00 	vfma.f32	s14, s28, s0
    11a2:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    11a6:	9b07      	ldr	r3, [sp, #28]
						if (height1 < 1.0f)
    11a8:	eeb4 bae8 	vcmpe.f32	s22, s17
    11ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11b0:	f100 80bf 	bmi.w	1332 <audioFrameAdditive+0x4f2>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    11b4:	edd5 6a24 	vldr	s13, [r5, #144]	; 0x90
    11b8:	eef0 0a69 	vmov.f32	s1, s19
    11bc:	ed93 1a05 	vldr	s2, [r3, #20]
    11c0:	ed93 0a04 	vldr	s0, [r3, #16]
    11c4:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    11c8:	f008 f9aa 	bl	9520 <__LEAF_clip_veneer>
    11cc:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    11d0:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    11d4:	eea6 7a80 	vfma.f32	s14, s13, s0
    11d8:	eec8 6a87 	vdiv.f32	s13, s17, s14
				for (int j = 0; j < NUM_OVERTONES; j++)
    11dc:	9b00      	ldr	r3, [sp, #0]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    11de:	4640      	mov	r0, r8
    11e0:	4a7c      	ldr	r2, [pc, #496]	; (13d4 <audioFrameAdditive+0x594>)
				for (int j = 0; j < NUM_OVERTONES; j++)
    11e2:	3504      	adds	r5, #4
    11e4:	3304      	adds	r3, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    11e6:	ed9b 0a05 	vldr	s0, [fp, #20]
				for (int j = 0; j < NUM_OVERTONES; j++)
    11ea:	3604      	adds	r6, #4
    11ec:	f109 0904 	add.w	r9, r9, #4
    11f0:	9300      	str	r3, [sp, #0]
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    11f2:	ee6e 7a2a 	vmul.f32	s15, s28, s21
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    11f6:	7823      	ldrb	r3, [r4, #0]
    11f8:	ee20 0a0a 	vmul.f32	s0, s0, s20
				for (int j = 0; j < NUM_OVERTONES; j++)
    11fc:	f10a 0a04 	add.w	sl, sl, #4
    1200:	3704      	adds	r7, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    1202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    1206:	eee6 7a89 	vfma.f32	s15, s13, s18
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    120a:	ed93 7a00 	vldr	s14, [r3]
    120e:	ee20 0a07 	vmul.f32	s0, s0, s14
    1212:	ed9b 7a03 	vldr	s14, [fp, #12]
    1216:	ee27 7a2c 	vmul.f32	s14, s14, s25
    121a:	eea7 0a87 	vfma.f32	s0, s15, s14
    121e:	f008 f9ef 	bl	9600 <__tADSRT_setDecay_veneer>
					currentRandom++;
    1222:	7823      	ldrb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    1224:	4a6b      	ldr	r2, [pc, #428]	; (13d4 <audioFrameAdditive+0x594>)
    1226:	4640      	mov	r0, r8
					currentRandom++;
    1228:	3301      	adds	r3, #1
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    122a:	eddb 7a06 	vldr	s15, [fp, #24]
				for (int j = 0; j < NUM_OVERTONES; j++)
    122e:	f108 0804 	add.w	r8, r8, #4
					currentRandom++;
    1232:	b2db      	uxtb	r3, r3
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    1234:	ee67 7a8a 	vmul.f32	s15, s15, s20
					currentRandom++;
    1238:	7023      	strb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    123a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    123e:	ed93 7a00 	vldr	s14, [r3]
    1242:	eea7 8a27 	vfma.f32	s16, s14, s15
    1246:	ee28 0a0c 	vmul.f32	s0, s16, s24
    124a:	f008 f8a1 	bl	9390 <__tADSRT_on_veneer>
					currentRandom++;
    124e:	7823      	ldrb	r3, [r4, #0]
    1250:	3301      	adds	r3, #1
    1252:	7023      	strb	r3, [r4, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    1254:	4b60      	ldr	r3, [pc, #384]	; (13d8 <audioFrameAdditive+0x598>)
    1256:	42ab      	cmp	r3, r5
    1258:	f000 80b7 	beq.w	13ca <audioFrameAdditive+0x58a>
					if (thisString < 6)
    125c:	9b08      	ldr	r3, [sp, #32]
    125e:	2b05      	cmp	r3, #5
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1260:	9b00      	ldr	r3, [sp, #0]
					if (thisString < 6)
    1262:	f77f af73 	ble.w	114c <audioFrameAdditive+0x30c>
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1266:	edd7 7a00 	vldr	s15, [r7]
						if (height2 < 1.0f)
    126a:	eef4 bae8 	vcmpe.f32	s23, s17
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    126e:	ed9a 8a00 	vldr	s16, [sl]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1272:	ed93 7a00 	vldr	s14, [r3]
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1276:	eea7 8a8d 	vfma.f32	s16, s15, s26
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    127a:	edd9 7a00 	vldr	s15, [r9]
						if (height2 < 1.0f)
    127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1282:	9b07      	ldr	r3, [sp, #28]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1284:	eee7 7a2d 	vfma.f32	s15, s14, s27
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1288:	ee28 8a2a 	vmul.f32	s16, s16, s21
    128c:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    1290:	f100 808a 	bmi.w	13a8 <audioFrameAdditive+0x568>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    1294:	eef0 0a69 	vmov.f32	s1, s19
    1298:	ed93 1a05 	vldr	s2, [r3, #20]
    129c:	ed93 0a04 	vldr	s0, [r3, #16]
    12a0:	ed95 ea24 	vldr	s28, [r5, #144]	; 0x90
    12a4:	f008 f93c 	bl	9520 <__LEAF_clip_veneer>
    12a8:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    12ac:	eeae 7a00 	vfma.f32	s14, s28, s0
    12b0:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    12b4:	9b07      	ldr	r3, [sp, #28]
						if (height1 < 1.0f)
    12b6:	eeb4 bae8 	vcmpe.f32	s22, s17
    12ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12be:	d45e      	bmi.n	137e <audioFrameAdditive+0x53e>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    12c0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
    12c4:	eef0 0a69 	vmov.f32	s1, s19
    12c8:	ed93 1a02 	vldr	s2, [r3, #8]
    12cc:	ed93 0a01 	vldr	s0, [r3, #4]
    12d0:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    12d4:	f008 f924 	bl	9520 <__LEAF_clip_veneer>
    12d8:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    12dc:	ed96 7a0c 	vldr	s14, [r6, #48]	; 0x30
    12e0:	eea6 7a80 	vfma.f32	s14, s13, s0
    12e4:	eec8 6a87 	vdiv.f32	s13, s17, s14
    12e8:	e778      	b.n	11dc <audioFrameAdditive+0x39c>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    12ea:	4f3c      	ldr	r7, [pc, #240]	; (13dc <audioFrameAdditive+0x59c>)
    12ec:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					stringFade = (float)thisString * 0.2f;
    12f0:	eddf 7a3b 	vldr	s15, [pc, #236]	; 13e0 <audioFrameAdditive+0x5a0>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    12f4:	eef0 1a6f 	vmov.f32	s3, s31
    12f8:	ed97 1a08 	vldr	s2, [r7, #32]
    12fc:	eeb0 0a69 	vmov.f32	s0, s19
    1300:	edd7 0a06 	vldr	s1, [r7, #24]
					stringFade = (float)thisString * 0.2f;
    1304:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1308:	f008 f88a 	bl	9420 <__LEAF_map_veneer>
    130c:	eeb0 1a4f 	vmov.f32	s2, s30
    1310:	eef0 0a40 	vmov.f32	s1, s0
    1314:	eeb0 0a6f 	vmov.f32	s0, s31
    1318:	f008 f902 	bl	9520 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    131c:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1320:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1324:	ed97 1a05 	vldr	s2, [r7, #20]
    1328:	eef0 1a6f 	vmov.f32	s3, s31
    132c:	edd7 0a03 	vldr	s1, [r7, #12]
    1330:	e67f      	b.n	1032 <audioFrameAdditive+0x1f2>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1332:	edd5 6a18 	vldr	s13, [r5, #96]	; 0x60
    1336:	eef0 0a69 	vmov.f32	s1, s19
    133a:	ed93 1a04 	vldr	s2, [r3, #16]
    133e:	ed93 0a03 	vldr	s0, [r3, #12]
    1342:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    1346:	f008 f8eb 	bl	9520 <__LEAF_clip_veneer>
    134a:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    134e:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    1352:	eea6 7a80 	vfma.f32	s14, s13, s0
    1356:	eec8 6a87 	vdiv.f32	s13, s17, s14
    135a:	e73f      	b.n	11dc <audioFrameAdditive+0x39c>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    135c:	eef0 0a69 	vmov.f32	s1, s19
    1360:	ed93 1a07 	vldr	s2, [r3, #28]
    1364:	ed93 0a06 	vldr	s0, [r3, #24]
    1368:	ed95 ea30 	vldr	s28, [r5, #192]	; 0xc0
    136c:	f008 f8d8 	bl	9520 <__LEAF_clip_veneer>
    1370:	ed96 7a30 	vldr	s14, [r6, #192]	; 0xc0
    1374:	eeae 7a00 	vfma.f32	s14, s28, s0
    1378:	ee88 ea87 	vdiv.f32	s28, s17, s14
    137c:	e713      	b.n	11a6 <audioFrameAdditive+0x366>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    137e:	edd5 6a00 	vldr	s13, [r5]
    1382:	eef0 0a69 	vmov.f32	s1, s19
    1386:	ed93 1a01 	vldr	s2, [r3, #4]
    138a:	ed93 0a00 	vldr	s0, [r3]
    138e:	edcd 6a0a 	vstr	s13, [sp, #40]	; 0x28
    1392:	f008 f8c5 	bl	9520 <__LEAF_clip_veneer>
    1396:	eddd 6a0a 	vldr	s13, [sp, #40]	; 0x28
    139a:	ed96 7a00 	vldr	s14, [r6]
    139e:	eea6 7a80 	vfma.f32	s14, s13, s0
    13a2:	eec8 6a87 	vdiv.f32	s13, s17, s14
    13a6:	e719      	b.n	11dc <audioFrameAdditive+0x39c>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    13a8:	eef0 0a69 	vmov.f32	s1, s19
    13ac:	ed93 1a04 	vldr	s2, [r3, #16]
    13b0:	ed93 0a03 	vldr	s0, [r3, #12]
    13b4:	ed95 ea18 	vldr	s28, [r5, #96]	; 0x60
    13b8:	f008 f8b2 	bl	9520 <__LEAF_clip_veneer>
    13bc:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    13c0:	eeae 7a00 	vfma.f32	s14, s28, s0
    13c4:	ee88 ea87 	vdiv.f32	s28, s17, s14
    13c8:	e774      	b.n	12b4 <audioFrameAdditive+0x474>
		for (int i = 0; i < numStringsThisBoard; i++)
    13ca:	4b06      	ldr	r3, [pc, #24]	; (13e4 <audioFrameAdditive+0x5a4>)
    13cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    13ce:	781a      	ldrb	r2, [r3, #0]
    13d0:	e56e      	b.n	eb0 <audioFrameAdditive+0x70>
    13d2:	bf00      	nop
    13d4:	20004f40 	.word	0x20004f40
    13d8:	20000a54 	.word	0x20000a54
    13dc:	200002d0 	.word	0x200002d0
    13e0:	3e4ccccd 	.word	0x3e4ccccd
    13e4:	200004b1 	.word	0x200004b1
	...

00001400 <updateStateFromSPIMessage>:


void __ATTR_ITCMRAM updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1400:	4a3a      	ldr	r2, [pc, #232]	; (14ec <updateStateFromSPIMessage+0xec>)
	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS_RX[25 + offset];



	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1402:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1406:	1813      	adds	r3, r2, r0
{
    1408:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    140a:	7e19      	ldrb	r1, [r3, #24]
	voice = SPI_LEVERS_RX[25 + offset];
    140c:	7e5e      	ldrb	r6, [r3, #25]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    140e:	f001 030f 	and.w	r3, r1, #15
	octaveAction = (modeBit >> 6) & 1;
    1412:	4c37      	ldr	r4, [pc, #220]	; (14f0 <updateStateFromSPIMessage+0xf0>)
	voice = SPI_LEVERS_RX[25 + offset];
    1414:	4d37      	ldr	r5, [pc, #220]	; (14f4 <updateStateFromSPIMessage+0xf4>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1416:	3b05      	subs	r3, #5
    1418:	4f37      	ldr	r7, [pc, #220]	; (14f8 <updateStateFromSPIMessage+0xf8>)
    141a:	ee07 3a90 	vmov	s15, r3
	octaveAction = (modeBit >> 6) & 1;
    141e:	f3c1 1380 	ubfx	r3, r1, #6, #1
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	octaveAction = (modeBit >> 6) & 1;
    1426:	7023      	strb	r3, [r4, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    1428:	602e      	str	r6, [r5, #0]
	dualSlider = (modeBit >> 5) & 1;
    142a:	f3c1 1540 	ubfx	r5, r1, #5, #1
	//if "octave action" is set to 1, then immediately change octave instead of waiting for new note
	if (octaveAction)
    142e:	7823      	ldrb	r3, [r4, #0]
	edit = (modeBit >> 4) & 1;
    1430:	f3c1 1100 	ubfx	r1, r1, #4, #1
	dualSlider = (modeBit >> 5) & 1;
    1434:	4c31      	ldr	r4, [pc, #196]	; (14fc <updateStateFromSPIMessage+0xfc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1436:	ee67 7a87 	vmul.f32	s15, s15, s14
	dualSlider = (modeBit >> 5) & 1;
    143a:	6025      	str	r5, [r4, #0]
	edit = (modeBit >> 4) & 1;
    143c:	4c30      	ldr	r4, [pc, #192]	; (1500 <updateStateFromSPIMessage+0x100>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    143e:	edc7 7a00 	vstr	s15, [r7]
	edit = (modeBit >> 4) & 1;
    1442:	6021      	str	r1, [r4, #0]
	if (octaveAction)
    1444:	b14b      	cbz	r3, 145a <updateStateFromSPIMessage+0x5a>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    1446:	4b2f      	ldr	r3, [pc, #188]	; (1504 <updateStateFromSPIMessage+0x104>)
    1448:	781b      	ldrb	r3, [r3, #0]
    144a:	b133      	cbz	r3, 145a <updateStateFromSPIMessage+0x5a>
		{
			stringOctave[i] = octave;
    144c:	492e      	ldr	r1, [pc, #184]	; (1508 <updateStateFromSPIMessage+0x108>)
		for (int i = 0; i < numStringsThisBoard; i++)
    144e:	2b01      	cmp	r3, #1
			stringOctave[i] = octave;
    1450:	edc1 7a00 	vstr	s15, [r1]
    1454:	bf18      	it	ne
    1456:	edc1 7a01 	vstrne	s15, [r1, #4]
		}
	}

	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    145a:	4410      	add	r0, r2
    145c:	4c2b      	ldr	r4, [pc, #172]	; (150c <updateStateFromSPIMessage+0x10c>)
	volumePedal = volumePedalInt * 0.0002442002442f;

	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    145e:	4a2c      	ldr	r2, [pc, #176]	; (1510 <updateStateFromSPIMessage+0x110>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1460:	7e81      	ldrb	r1, [r0, #26]
    1462:	7ec3      	ldrb	r3, [r0, #27]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1464:	eddf 7a2b 	vldr	s15, [pc, #172]	; 1514 <updateStateFromSPIMessage+0x114>
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1468:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    146c:	7f01      	ldrb	r1, [r0, #28]
    146e:	7f40      	ldrb	r0, [r0, #29]
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1470:	b29b      	uxth	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    1472:	4d29      	ldr	r5, [pc, #164]	; (1518 <updateStateFromSPIMessage+0x118>)
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1474:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    1478:	4928      	ldr	r1, [pc, #160]	; (151c <updateStateFromSPIMessage+0x11c>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    147a:	8023      	strh	r3, [r4, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    147c:	8823      	ldrh	r3, [r4, #0]
    147e:	b29b      	uxth	r3, r3
    1480:	ee00 3a10 	vmov	s0, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1484:	7813      	ldrb	r3, [r2, #0]
    1486:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    1488:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    148c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    1490:	7813      	ldrb	r3, [r2, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1492:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    1496:	4822      	ldr	r0, [pc, #136]	; (1520 <updateStateFromSPIMessage+0x120>)
    1498:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    149a:	ed85 0a00 	vstr	s0, [r5]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    149e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    14a2:	7813      	ldrb	r3, [r2, #0]
    14a4:	b2db      	uxtb	r3, r3
    14a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    14aa:	429c      	cmp	r4, r3
    14ac:	d01a      	beq.n	14e4 <updateStateFromSPIMessage+0xe4>
	{
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    14ae:	7814      	ldrb	r4, [r2, #0]
    14b0:	7813      	ldrb	r3, [r2, #0]
    14b2:	b2e2      	uxtb	r2, r4
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14b4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1524 <updateStateFromSPIMessage+0x124>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    14b8:	b2db      	uxtb	r3, r3
    14ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    14be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14c2:	ed91 7a00 	vldr	s14, [r1]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14c6:	edd1 7a01 	vldr	s15, [r1, #4]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    14ce:	4b16      	ldr	r3, [pc, #88]	; (1528 <updateStateFromSPIMessage+0x128>)
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14d4:	ee27 7a26 	vmul.f32	s14, s14, s13
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    14dc:	ed83 7a00 	vstr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    14e0:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    14e4:	4811      	ldr	r0, [pc, #68]	; (152c <updateStateFromSPIMessage+0x12c>)
}
    14e6:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    14e8:	f007 bf4e 	b.w	9388 <__tExpSmooth_setDest_veneer>
    14ec:	30000800 	.word	0x30000800
    14f0:	20004ec8 	.word	0x20004ec8
    14f4:	20013e18 	.word	0x20013e18
    14f8:	20004ec4 	.word	0x20004ec4
    14fc:	20004dcc 	.word	0x20004dcc
    1500:	20004dd0 	.word	0x20004dd0
    1504:	200004b1 	.word	0x200004b1
    1508:	20013df4 	.word	0x20013df4
    150c:	20013e20 	.word	0x20013e20
    1510:	20013e28 	.word	0x20013e28
    1514:	39800801 	.word	0x39800801
    1518:	20013e1c 	.word	0x20013e1c
    151c:	20013dfc 	.word	0x20013dfc
    1520:	20013e04 	.word	0x20013e04
    1524:	3b000000 	.word	0x3b000000
    1528:	20000da4 	.word	0x20000da4
    152c:	20013e24 	.word	0x20013e24
    1530:	f3af 8000 	nop.w
    1534:	f3af 8000 	nop.w
    1538:	f3af 8000 	nop.w
    153c:	f3af 8000 	nop.w

00001540 <switchStringModel>:



void __ATTR_ITCMRAM switchStringModel(int which)
{
	if (which == 1)
    1540:	2801      	cmp	r0, #1
{
    1542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1546:	4604      	mov	r4, r0
	if (which == 1)
    1548:	d027      	beq.n	159a <switchStringModel+0x5a>
			audioFrameFunction = audioFrameString1;
		}
	}


	else if (which == 2)
    154a:	2802      	cmp	r0, #2
    154c:	d00c      	beq.n	1568 <switchStringModel+0x28>
		}
		audioFrameFunction = audioFrameString2;
	}
	presetReady = 1;
	diskBusy = 0;
	currentActivePreset = voice;
    154e:	4b25      	ldr	r3, [pc, #148]	; (15e4 <switchStringModel+0xa4>)
	diskBusy = 0;
    1550:	2100      	movs	r1, #0
    1552:	4a25      	ldr	r2, [pc, #148]	; (15e8 <switchStringModel+0xa8>)
	presetReady = 1;
    1554:	2401      	movs	r4, #1
	currentActivePreset = voice;
    1556:	681b      	ldr	r3, [r3, #0]
	diskBusy = 0;
    1558:	7011      	strb	r1, [r2, #0]
	presetReady = 1;
    155a:	4824      	ldr	r0, [pc, #144]	; (15ec <switchStringModel+0xac>)
	currentActivePreset = voice;
    155c:	b2db      	uxtb	r3, r3
    155e:	4a24      	ldr	r2, [pc, #144]	; (15f0 <switchStringModel+0xb0>)
	presetReady = 1;
    1560:	6004      	str	r4, [r0, #0]
	currentActivePreset = voice;
    1562:	7013      	strb	r3, [r2, #0]

}
    1564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (whichStringModelLoaded != String2Loaded)
    1568:	4b22      	ldr	r3, [pc, #136]	; (15f4 <switchStringModel+0xb4>)
    156a:	781b      	ldrb	r3, [r3, #0]
    156c:	2b01      	cmp	r3, #1
    156e:	d134      	bne.n	15da <switchStringModel+0x9a>
    1570:	4e21      	ldr	r6, [pc, #132]	; (15f8 <switchStringModel+0xb8>)
			for (int i = 0; i < 12; i++)
    1572:	2400      	movs	r4, #0
    1574:	4d21      	ldr	r5, [pc, #132]	; (15fc <switchStringModel+0xbc>)
			knobFrozen[i] = 1;
    1576:	f04f 0801 	mov.w	r8, #1
    157a:	4f21      	ldr	r7, [pc, #132]	; (1600 <switchStringModel+0xc0>)
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    157c:	4628      	mov	r0, r5
    157e:	ecb6 0a01 	vldmia	r6!, {s0}
    1582:	f008 f8c9 	bl	9718 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[i] = 1;
    1586:	f807 8004 	strb.w	r8, [r7, r4]
		for (int i = 0; i < 12; i++)
    158a:	3401      	adds	r4, #1
    158c:	3504      	adds	r5, #4
    158e:	2c0c      	cmp	r4, #12
    1590:	d1f4      	bne.n	157c <switchStringModel+0x3c>
		audioFrameFunction = audioFrameString2;
    1592:	4b1c      	ldr	r3, [pc, #112]	; (1604 <switchStringModel+0xc4>)
    1594:	4a1c      	ldr	r2, [pc, #112]	; (1608 <switchStringModel+0xc8>)
    1596:	601a      	str	r2, [r3, #0]
    1598:	e7d9      	b.n	154e <switchStringModel+0xe>
		if (whichStringModelLoaded != String1Loaded)
    159a:	4b16      	ldr	r3, [pc, #88]	; (15f4 <switchStringModel+0xb4>)
    159c:	781b      	ldrb	r3, [r3, #0]
    159e:	2b00      	cmp	r3, #0
    15a0:	d0d5      	beq.n	154e <switchStringModel+0xe>
			audioFreeString2();
    15a2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1618 <switchStringModel+0xd8>
			for (int i = 0; i < 12; i++)
    15a6:	2500      	movs	r5, #0
    15a8:	4e14      	ldr	r6, [pc, #80]	; (15fc <switchStringModel+0xbc>)
    15aa:	4f15      	ldr	r7, [pc, #84]	; (1600 <switchStringModel+0xc0>)
			audioFreeString2();
    15ac:	f004 f858 	bl	5660 <audioFreeString2>
			audioInitString1();
    15b0:	f003 fd06 	bl	4fc0 <audioInitString1>
				tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    15b4:	4630      	mov	r0, r6
    15b6:	ecb8 0a01 	vldmia	r8!, {s0}
    15ba:	f008 f8ad 	bl	9718 <__tExpSmooth_setValAndDest_veneer>
				knobFrozen[i] = 1;
    15be:	557c      	strb	r4, [r7, r5]
			for (int i = 0; i < 12; i++)
    15c0:	3501      	adds	r5, #1
    15c2:	3604      	adds	r6, #4
    15c4:	2d0c      	cmp	r5, #12
    15c6:	d1f5      	bne.n	15b4 <switchStringModel+0x74>
			tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    15c8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 160c <switchStringModel+0xcc>
    15cc:	4810      	ldr	r0, [pc, #64]	; (1610 <switchStringModel+0xd0>)
    15ce:	f007 fe7b 	bl	92c8 <__tVZFilter_setFreq_veneer>
			audioFrameFunction = audioFrameString1;
    15d2:	4b0c      	ldr	r3, [pc, #48]	; (1604 <switchStringModel+0xc4>)
    15d4:	4a0f      	ldr	r2, [pc, #60]	; (1614 <switchStringModel+0xd4>)
    15d6:	601a      	str	r2, [r3, #0]
    15d8:	e7b9      	b.n	154e <switchStringModel+0xe>
			audioFreeString1();
    15da:	f003 fd51 	bl	5080 <audioFreeString1>
			audioInitString2();
    15de:	f003 ffdf 	bl	55a0 <audioInitString2>
    15e2:	e7c5      	b.n	1570 <switchStringModel+0x30>
    15e4:	20013e18 	.word	0x20013e18
    15e8:	20013f10 	.word	0x20013f10
    15ec:	20004f1c 	.word	0x20004f1c
    15f0:	20000728 	.word	0x20000728
    15f4:	20013e29 	.word	0x20013e29
    15f8:	200004ec 	.word	0x200004ec
    15fc:	20004e28 	.word	0x20004e28
    1600:	20004dec 	.word	0x20004dec
    1604:	20000da0 	.word	0x20000da0
    1608:	00005a61 	.word	0x00005a61
    160c:	45504000 	.word	0x45504000
    1610:	20004ec0 	.word	0x20004ec0
    1614:	000053c1 	.word	0x000053c1
    1618:	200004bc 	.word	0x200004bc
    161c:	f3af 8000 	nop.w

00001620 <HAL_SAI_TxCpltCallback>:




void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    1620:	b538      	push	{r3, r4, r5, lr}
	//if ((!diskBusy)&& (presetReady))
	{
		audioFrameFunction(HALF_BUFFER_SIZE);
    1622:	4c3e      	ldr	r4, [pc, #248]	; (171c <HAL_SAI_TxCpltCallback+0xfc>)
    1624:	2080      	movs	r0, #128	; 0x80
    1626:	6823      	ldr	r3, [r4, #0]
    1628:	4798      	blx	r3
		{
			audioOutBuffer[HALF_BUFFER_SIZE+i] = 0;
		}
	}
	*/
	if (voice != prevVoice)
    162a:	4b3d      	ldr	r3, [pc, #244]	; (1720 <HAL_SAI_TxCpltCallback+0x100>)
    162c:	4a3d      	ldr	r2, [pc, #244]	; (1724 <HAL_SAI_TxCpltCallback+0x104>)
    162e:	6818      	ldr	r0, [r3, #0]
    1630:	6811      	ldr	r1, [r2, #0]
    1632:	4288      	cmp	r0, r1
    1634:	d01f      	beq.n	1676 <HAL_SAI_TxCpltCallback+0x56>
	{
		if (voice == 63)
    1636:	6819      	ldr	r1, [r3, #0]
    1638:	293f      	cmp	r1, #63	; 0x3f
    163a:	d049      	beq.n	16d0 <HAL_SAI_TxCpltCallback+0xb0>

			switchStrings = 1;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 62)
    163c:	6819      	ldr	r1, [r3, #0]
    163e:	293e      	cmp	r1, #62	; 0x3e
    1640:	d05d      	beq.n	16fe <HAL_SAI_TxCpltCallback+0xde>

			switchStrings = 2;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 61)
    1642:	6819      	ldr	r1, [r3, #0]
    1644:	293d      	cmp	r1, #61	; 0x3d
		{
			audioFrameFunction = audioFrameAdditive;
			currentActivePreset = voice;
    1646:	6819      	ldr	r1, [r3, #0]
		else if (voice == 61)
    1648:	d04b      	beq.n	16e2 <HAL_SAI_TxCpltCallback+0xc2>
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    164a:	293c      	cmp	r1, #60	; 0x3c
    164c:	d061      	beq.n	1712 <HAL_SAI_TxCpltCallback+0xf2>
			presetReady = 1;
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
    164e:	4936      	ldr	r1, [pc, #216]	; (1728 <HAL_SAI_TxCpltCallback+0x108>)
			presetWaitingToLoad = 1;
    1650:	2001      	movs	r0, #1
    1652:	4d36      	ldr	r5, [pc, #216]	; (172c <HAL_SAI_TxCpltCallback+0x10c>)
			audioFrameFunction = audioFrameSynth;
    1654:	6021      	str	r1, [r4, #0]
			presetWaitingToLoad = 1;
    1656:	6028      	str	r0, [r5, #0]
			presetNumberToLoad = voice;
    1658:	6819      	ldr	r1, [r3, #0]
    165a:	4c35      	ldr	r4, [pc, #212]	; (1730 <HAL_SAI_TxCpltCallback+0x110>)
    165c:	b2c9      	uxtb	r1, r1
    165e:	7021      	strb	r1, [r4, #0]
			presetReady = 0;
    1660:	2400      	movs	r4, #0
    1662:	4934      	ldr	r1, [pc, #208]	; (1734 <HAL_SAI_TxCpltCallback+0x114>)
    1664:	600c      	str	r4, [r1, #0]
			if (prevVoice > 60)
    1666:	6811      	ldr	r1, [r2, #0]
    1668:	293c      	cmp	r1, #60	; 0x3c
    166a:	dd01      	ble.n	1670 <HAL_SAI_TxCpltCallback+0x50>
			{
				resetStringInputs = 1;
    166c:	4932      	ldr	r1, [pc, #200]	; (1738 <HAL_SAI_TxCpltCallback+0x118>)
    166e:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    1670:	4932      	ldr	r1, [pc, #200]	; (173c <HAL_SAI_TxCpltCallback+0x11c>)
    1672:	2000      	movs	r0, #0
    1674:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    1676:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    1678:	4b31      	ldr	r3, [pc, #196]	; (1740 <HAL_SAI_TxCpltCallback+0x120>)
	prevVoice = voice;
    167a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    167c:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1680:	4a30      	ldr	r2, [pc, #192]	; (1744 <HAL_SAI_TxCpltCallback+0x124>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1682:	f103 0420 	add.w	r4, r3, #32
    1686:	f103 0140 	add.w	r1, r3, #64	; 0x40
    168a:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    168e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1692:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1696:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    169a:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    169e:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    16a2:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    16a6:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    16aa:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    16ae:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    16b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    16b6:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    16ba:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    16be:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    16c2:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    16c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16ca:	f3bf 8f6f 	isb	sy
}
    16ce:	bd38      	pop	{r3, r4, r5, pc}
			switchStrings = 1;
    16d0:	2101      	movs	r1, #1
    16d2:	4c1d      	ldr	r4, [pc, #116]	; (1748 <HAL_SAI_TxCpltCallback+0x128>)
			diskBusy = 0;
    16d4:	481d      	ldr	r0, [pc, #116]	; (174c <HAL_SAI_TxCpltCallback+0x12c>)
			switchStrings = 1;
    16d6:	6021      	str	r1, [r4, #0]
			diskBusy = 0;
    16d8:	2400      	movs	r4, #0
    16da:	7004      	strb	r4, [r0, #0]
			resetStringInputs = 1;
    16dc:	4816      	ldr	r0, [pc, #88]	; (1738 <HAL_SAI_TxCpltCallback+0x118>)
    16de:	7001      	strb	r1, [r0, #0]
    16e0:	e7c9      	b.n	1676 <HAL_SAI_TxCpltCallback+0x56>
			presetReady = 1;
    16e2:	2001      	movs	r0, #1
			audioFrameFunction = audioFrameAdditive;
    16e4:	4d1a      	ldr	r5, [pc, #104]	; (1750 <HAL_SAI_TxCpltCallback+0x130>)
			audioFrameFunction = audioFrameVocal;
    16e6:	6025      	str	r5, [r4, #0]
			currentActivePreset = voice;
    16e8:	b2c9      	uxtb	r1, r1
    16ea:	4c1a      	ldr	r4, [pc, #104]	; (1754 <HAL_SAI_TxCpltCallback+0x134>)
    16ec:	7021      	strb	r1, [r4, #0]
			diskBusy = 0;
    16ee:	2400      	movs	r4, #0
    16f0:	4916      	ldr	r1, [pc, #88]	; (174c <HAL_SAI_TxCpltCallback+0x12c>)
    16f2:	700c      	strb	r4, [r1, #0]
			presetReady = 1;
    16f4:	4c0f      	ldr	r4, [pc, #60]	; (1734 <HAL_SAI_TxCpltCallback+0x114>)
			resetStringInputs = 1;
    16f6:	4910      	ldr	r1, [pc, #64]	; (1738 <HAL_SAI_TxCpltCallback+0x118>)
			presetReady = 1;
    16f8:	6020      	str	r0, [r4, #0]
			resetStringInputs = 1;
    16fa:	7008      	strb	r0, [r1, #0]
    16fc:	e7bb      	b.n	1676 <HAL_SAI_TxCpltCallback+0x56>
			switchStrings = 2;
    16fe:	4912      	ldr	r1, [pc, #72]	; (1748 <HAL_SAI_TxCpltCallback+0x128>)
    1700:	2402      	movs	r4, #2
			diskBusy = 0;
    1702:	4812      	ldr	r0, [pc, #72]	; (174c <HAL_SAI_TxCpltCallback+0x12c>)
			switchStrings = 2;
    1704:	600c      	str	r4, [r1, #0]
			diskBusy = 0;
    1706:	2400      	movs	r4, #0
			resetStringInputs = 1;
    1708:	490b      	ldr	r1, [pc, #44]	; (1738 <HAL_SAI_TxCpltCallback+0x118>)
			diskBusy = 0;
    170a:	7004      	strb	r4, [r0, #0]
			resetStringInputs = 1;
    170c:	2001      	movs	r0, #1
    170e:	7008      	strb	r0, [r1, #0]
    1710:	e7b1      	b.n	1676 <HAL_SAI_TxCpltCallback+0x56>
			currentActivePreset = voice;
    1712:	6819      	ldr	r1, [r3, #0]
			presetReady = 1;
    1714:	2001      	movs	r0, #1
			audioFrameFunction = audioFrameVocal;
    1716:	4d10      	ldr	r5, [pc, #64]	; (1758 <HAL_SAI_TxCpltCallback+0x138>)
    1718:	e7e5      	b.n	16e6 <HAL_SAI_TxCpltCallback+0xc6>
    171a:	bf00      	nop
    171c:	20000da0 	.word	0x20000da0
    1720:	20013e18 	.word	0x20013e18
    1724:	200004b8 	.word	0x200004b8
    1728:	00008b61 	.word	0x00008b61
    172c:	20019b90 	.word	0x20019b90
    1730:	20019b8e 	.word	0x20019b8e
    1734:	20004f1c 	.word	0x20004f1c
    1738:	20005340 	.word	0x20005340
    173c:	20004de0 	.word	0x20004de0
    1740:	30000000 	.word	0x30000000
    1744:	e000ed00 	.word	0xe000ed00
    1748:	20013e0c 	.word	0x20013e0c
    174c:	20013f10 	.word	0x20013f10
    1750:	00000e41 	.word	0x00000e41
    1754:	20000728 	.word	0x20000728
    1758:	00009081 	.word	0x00009081
    175c:	f3af 8000 	nop.w

00001760 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    1760:	b538      	push	{r3, r4, r5, lr}
	//if ((!diskBusy)&& (presetReady))
	{
		audioFrameFunction(0);
    1762:	4c3e      	ldr	r4, [pc, #248]	; (185c <HAL_SAI_TxHalfCpltCallback+0xfc>)
    1764:	2000      	movs	r0, #0
    1766:	6823      	ldr	r3, [r4, #0]
    1768:	4798      	blx	r3
		{
			audioOutBuffer[i] = 0;
		}
	}
	*/
	if (voice != prevVoice)
    176a:	4b3d      	ldr	r3, [pc, #244]	; (1860 <HAL_SAI_TxHalfCpltCallback+0x100>)
    176c:	4a3d      	ldr	r2, [pc, #244]	; (1864 <HAL_SAI_TxHalfCpltCallback+0x104>)
    176e:	6818      	ldr	r0, [r3, #0]
    1770:	6811      	ldr	r1, [r2, #0]
    1772:	4288      	cmp	r0, r1
    1774:	d01f      	beq.n	17b6 <HAL_SAI_TxHalfCpltCallback+0x56>
	{
		if (voice == 63)
    1776:	6819      	ldr	r1, [r3, #0]
    1778:	293f      	cmp	r1, #63	; 0x3f
    177a:	d049      	beq.n	1810 <HAL_SAI_TxHalfCpltCallback+0xb0>

			switchStrings = 1;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 62)
    177c:	6819      	ldr	r1, [r3, #0]
    177e:	293e      	cmp	r1, #62	; 0x3e
    1780:	d05d      	beq.n	183e <HAL_SAI_TxHalfCpltCallback+0xde>

			switchStrings = 2;
			diskBusy = 0;
			resetStringInputs = 1;
		}
		else if (voice == 61)
    1782:	6819      	ldr	r1, [r3, #0]
    1784:	293d      	cmp	r1, #61	; 0x3d
		{
			audioFrameFunction = audioFrameAdditive;
			currentActivePreset = voice;
    1786:	6819      	ldr	r1, [r3, #0]
		else if (voice == 61)
    1788:	d04b      	beq.n	1822 <HAL_SAI_TxHalfCpltCallback+0xc2>
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    178a:	293c      	cmp	r1, #60	; 0x3c
    178c:	d061      	beq.n	1852 <HAL_SAI_TxHalfCpltCallback+0xf2>
			presetReady = 1;
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
    178e:	4936      	ldr	r1, [pc, #216]	; (1868 <HAL_SAI_TxHalfCpltCallback+0x108>)
			presetWaitingToLoad = 1;
    1790:	2001      	movs	r0, #1
    1792:	4d36      	ldr	r5, [pc, #216]	; (186c <HAL_SAI_TxHalfCpltCallback+0x10c>)
			audioFrameFunction = audioFrameSynth;
    1794:	6021      	str	r1, [r4, #0]
			presetWaitingToLoad = 1;
    1796:	6028      	str	r0, [r5, #0]
			presetNumberToLoad = voice;
    1798:	6819      	ldr	r1, [r3, #0]
    179a:	4c35      	ldr	r4, [pc, #212]	; (1870 <HAL_SAI_TxHalfCpltCallback+0x110>)
    179c:	b2c9      	uxtb	r1, r1
    179e:	7021      	strb	r1, [r4, #0]
			presetReady = 0;
    17a0:	2400      	movs	r4, #0
    17a2:	4934      	ldr	r1, [pc, #208]	; (1874 <HAL_SAI_TxHalfCpltCallback+0x114>)
    17a4:	600c      	str	r4, [r1, #0]
			if (prevVoice > 60)
    17a6:	6811      	ldr	r1, [r2, #0]
    17a8:	293c      	cmp	r1, #60	; 0x3c
    17aa:	dd01      	ble.n	17b0 <HAL_SAI_TxHalfCpltCallback+0x50>
			{
				resetStringInputs = 1;
    17ac:	4932      	ldr	r1, [pc, #200]	; (1878 <HAL_SAI_TxHalfCpltCallback+0x118>)
    17ae:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    17b0:	4932      	ldr	r1, [pc, #200]	; (187c <HAL_SAI_TxHalfCpltCallback+0x11c>)
    17b2:	2000      	movs	r0, #0
    17b4:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    17b6:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    17b8:	4b31      	ldr	r3, [pc, #196]	; (1880 <HAL_SAI_TxHalfCpltCallback+0x120>)
	prevVoice = voice;
    17ba:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    17bc:	f3bf 8f4f 	dsb	sy
    17c0:	4a30      	ldr	r2, [pc, #192]	; (1884 <HAL_SAI_TxHalfCpltCallback+0x124>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    17c2:	f103 0420 	add.w	r4, r3, #32
    17c6:	f103 0140 	add.w	r1, r3, #64	; 0x40
    17ca:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17ce:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    17d2:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    17d6:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17da:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    17de:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17e2:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    17e6:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17ea:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    17ee:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    17f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17f6:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    17fa:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    17fe:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    1802:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1806:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    180a:	f3bf 8f6f 	isb	sy
}
    180e:	bd38      	pop	{r3, r4, r5, pc}
			switchStrings = 1;
    1810:	2101      	movs	r1, #1
    1812:	4c1d      	ldr	r4, [pc, #116]	; (1888 <HAL_SAI_TxHalfCpltCallback+0x128>)
			diskBusy = 0;
    1814:	481d      	ldr	r0, [pc, #116]	; (188c <HAL_SAI_TxHalfCpltCallback+0x12c>)
			switchStrings = 1;
    1816:	6021      	str	r1, [r4, #0]
			diskBusy = 0;
    1818:	2400      	movs	r4, #0
    181a:	7004      	strb	r4, [r0, #0]
			resetStringInputs = 1;
    181c:	4816      	ldr	r0, [pc, #88]	; (1878 <HAL_SAI_TxHalfCpltCallback+0x118>)
    181e:	7001      	strb	r1, [r0, #0]
    1820:	e7c9      	b.n	17b6 <HAL_SAI_TxHalfCpltCallback+0x56>
			presetReady = 1;
    1822:	2001      	movs	r0, #1
			audioFrameFunction = audioFrameAdditive;
    1824:	4d1a      	ldr	r5, [pc, #104]	; (1890 <HAL_SAI_TxHalfCpltCallback+0x130>)
			audioFrameFunction = audioFrameVocal;
    1826:	6025      	str	r5, [r4, #0]
			currentActivePreset = voice;
    1828:	b2c9      	uxtb	r1, r1
    182a:	4c1a      	ldr	r4, [pc, #104]	; (1894 <HAL_SAI_TxHalfCpltCallback+0x134>)
    182c:	7021      	strb	r1, [r4, #0]
			diskBusy = 0;
    182e:	2400      	movs	r4, #0
    1830:	4916      	ldr	r1, [pc, #88]	; (188c <HAL_SAI_TxHalfCpltCallback+0x12c>)
    1832:	700c      	strb	r4, [r1, #0]
			presetReady = 1;
    1834:	4c0f      	ldr	r4, [pc, #60]	; (1874 <HAL_SAI_TxHalfCpltCallback+0x114>)
			resetStringInputs = 1;
    1836:	4910      	ldr	r1, [pc, #64]	; (1878 <HAL_SAI_TxHalfCpltCallback+0x118>)
			presetReady = 1;
    1838:	6020      	str	r0, [r4, #0]
			resetStringInputs = 1;
    183a:	7008      	strb	r0, [r1, #0]
    183c:	e7bb      	b.n	17b6 <HAL_SAI_TxHalfCpltCallback+0x56>
			switchStrings = 2;
    183e:	4912      	ldr	r1, [pc, #72]	; (1888 <HAL_SAI_TxHalfCpltCallback+0x128>)
    1840:	2402      	movs	r4, #2
			diskBusy = 0;
    1842:	4812      	ldr	r0, [pc, #72]	; (188c <HAL_SAI_TxHalfCpltCallback+0x12c>)
			switchStrings = 2;
    1844:	600c      	str	r4, [r1, #0]
			diskBusy = 0;
    1846:	2400      	movs	r4, #0
			resetStringInputs = 1;
    1848:	490b      	ldr	r1, [pc, #44]	; (1878 <HAL_SAI_TxHalfCpltCallback+0x118>)
			diskBusy = 0;
    184a:	7004      	strb	r4, [r0, #0]
			resetStringInputs = 1;
    184c:	2001      	movs	r0, #1
    184e:	7008      	strb	r0, [r1, #0]
    1850:	e7b1      	b.n	17b6 <HAL_SAI_TxHalfCpltCallback+0x56>
			currentActivePreset = voice;
    1852:	6819      	ldr	r1, [r3, #0]
			presetReady = 1;
    1854:	2001      	movs	r0, #1
			audioFrameFunction = audioFrameVocal;
    1856:	4d10      	ldr	r5, [pc, #64]	; (1898 <HAL_SAI_TxHalfCpltCallback+0x138>)
    1858:	e7e5      	b.n	1826 <HAL_SAI_TxHalfCpltCallback+0xc6>
    185a:	bf00      	nop
    185c:	20000da0 	.word	0x20000da0
    1860:	20013e18 	.word	0x20013e18
    1864:	200004b8 	.word	0x200004b8
    1868:	00008b61 	.word	0x00008b61
    186c:	20019b90 	.word	0x20019b90
    1870:	20019b8e 	.word	0x20019b8e
    1874:	20004f1c 	.word	0x20004f1c
    1878:	20005340 	.word	0x20005340
    187c:	20004de0 	.word	0x20004de0
    1880:	30000000 	.word	0x30000000
    1884:	e000ed00 	.word	0xe000ed00
    1888:	20013e0c 	.word	0x20013e0c
    188c:	20013f10 	.word	0x20013f10
    1890:	00000e41 	.word	0x00000e41
    1894:	20000728 	.word	0x20000728
    1898:	00009081 	.word	0x00009081
    189c:	f3af 8000 	nop.w

000018a0 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    18a0:	4770      	bx	lr
    18a2:	bf00      	nop
	...

000018c0 <scaleDefault>:
}
    18c0:	4770      	bx	lr
    18c2:	bf00      	nop
    18c4:	f3af 8000 	nop.w
    18c8:	f3af 8000 	nop.w
    18cc:	f3af 8000 	nop.w
    18d0:	f3af 8000 	nop.w
    18d4:	f3af 8000 	nop.w
    18d8:	f3af 8000 	nop.w
    18dc:	f3af 8000 	nop.w

000018e0 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    18e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    18e4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    18e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    18ec:	eeb0 0a67 	vmov.f32	s0, s15
    18f0:	4770      	bx	lr
    18f2:	bf00      	nop
    18f4:	f3af 8000 	nop.w
    18f8:	f3af 8000 	nop.w
    18fc:	f3af 8000 	nop.w

00001900 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    1900:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1914 <scaleOscFine+0x14>
    1904:	eddf 7a04 	vldr	s15, [pc, #16]	; 1918 <scaleOscFine+0x18>
}
    1908:	eee0 7a07 	vfma.f32	s15, s0, s14
    190c:	eeb0 0a67 	vmov.f32	s0, s15
    1910:	4770      	bx	lr
    1912:	bf00      	nop
    1914:	43480000 	.word	0x43480000
    1918:	c2c80000 	.word	0xc2c80000
    191c:	f3af 8000 	nop.w

00001920 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    1920:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1934 <scaleOscFreq+0x14>
    1924:	eddf 7a04 	vldr	s15, [pc, #16]	; 1938 <scaleOscFreq+0x18>
}
    1928:	eee0 7a07 	vfma.f32	s15, s0, s14
    192c:	eeb0 0a67 	vmov.f32	s0, s15
    1930:	4770      	bx	lr
    1932:	bf00      	nop
    1934:	457a0000 	.word	0x457a0000
    1938:	c4fa0000 	.word	0xc4fa0000
    193c:	f3af 8000 	nop.w

00001940 <scaleFilterCutoff>:
	return (input * 127.0f);
    1940:	eddf 7a02 	vldr	s15, [pc, #8]	; 194c <scaleFilterCutoff+0xc>
}
    1944:	ee20 0a27 	vmul.f32	s0, s0, s15
    1948:	4770      	bx	lr
    194a:	bf00      	nop
    194c:	42fe0000 	.word	0x42fe0000
    1950:	f3af 8000 	nop.w
    1954:	f3af 8000 	nop.w
    1958:	f3af 8000 	nop.w
    195c:	f3af 8000 	nop.w

00001960 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    1960:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1974 <scaleFinalLowpass+0x14>
    1964:	eddf 7a04 	vldr	s15, [pc, #16]	; 1978 <scaleFinalLowpass+0x18>
}
    1968:	eee0 7a07 	vfma.f32	s15, s0, s14
    196c:	eeb0 0a67 	vmov.f32	s0, s15
    1970:	4770      	bx	lr
    1972:	bf00      	nop
    1974:	428c0000 	.word	0x428c0000
    1978:	42680000 	.word	0x42680000
    197c:	f3af 8000 	nop.w

00001980 <blankFunction>:
}
    1980:	4770      	bx	lr
    1982:	bf00      	nop
    1984:	f3af 8000 	nop.w
    1988:	f3af 8000 	nop.w
    198c:	f3af 8000 	nop.w
    1990:	f3af 8000 	nop.w
    1994:	f3af 8000 	nop.w
    1998:	f3af 8000 	nop.w
    199c:	f3af 8000 	nop.w

000019a0 <scaleTranspose>:
{
    19a0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    19a4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 19c4 <scaleTranspose+0x24>
    19a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    19ac:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    19ae:	f007 fdb7 	bl	9520 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    19b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 19c8 <scaleTranspose+0x28>
    19b6:	eddf 7a05 	vldr	s15, [pc, #20]	; 19cc <scaleTranspose+0x2c>
}
    19ba:	eee0 7a07 	vfma.f32	s15, s0, s14
    19be:	eeb0 0a67 	vmov.f32	s0, s15
    19c2:	bd08      	pop	{r3, pc}
    19c4:	00000000 	.word	0x00000000
    19c8:	42c00000 	.word	0x42c00000
    19cc:	c2400000 	.word	0xc2400000
    19d0:	f3af 8000 	nop.w
    19d4:	f3af 8000 	nop.w
    19d8:	f3af 8000 	nop.w
    19dc:	f3af 8000 	nop.w

000019e0 <scalePitchBend>:
{
    19e0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    19e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 19fc <scalePitchBend+0x1c>
    19e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    19ec:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    19ee:	f007 fd97 	bl	9520 <__LEAF_clip_veneer>
	return (input * 48.0f);
    19f2:	eddf 7a03 	vldr	s15, [pc, #12]	; 1a00 <scalePitchBend+0x20>
}
    19f6:	ee20 0a27 	vmul.f32	s0, s0, s15
    19fa:	bd08      	pop	{r3, pc}
    19fc:	00000000 	.word	0x00000000
    1a00:	42400000 	.word	0x42400000
    1a04:	f3af 8000 	nop.w
    1a08:	f3af 8000 	nop.w
    1a0c:	f3af 8000 	nop.w
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <scaleFilterResonance>:
{
    1a20:	b510      	push	{r4, lr}
    1a22:	ed2d 8b02 	vpush	{d8}
    1a26:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1a2a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 1a98 <scaleFilterResonance+0x78>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1a2e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 1a9c <scaleFilterResonance+0x7c>
	input *= 2047.0f;
    1a32:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1a36:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1a3a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1a3e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1a42:	1c63      	adds	r3, r4, #1
    1a44:	ee00 3a90 	vmov	s1, r3
    1a48:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1a4c:	f007 fd68 	bl	9520 <__LEAF_clip_veneer>
    1a50:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1a54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1a58:	4b11      	ldr	r3, [pc, #68]	; (1aa0 <scaleFilterResonance+0x80>)
	float inputFloat = (float)inputInt - input;
    1a5a:	ee78 0ac8 	vsub.f32	s1, s17, s16
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1a5e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 1aa4 <scaleFilterResonance+0x84>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1a62:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1a66:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1a6a:	ee38 8a27 	vadd.f32	s16, s16, s15
    1a6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1a72:	edd4 7a00 	vldr	s15, [r4]
    1a76:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    1a7a:	ed93 7a00 	vldr	s14, [r3]
    1a7e:	ee38 8a68 	vsub.f32	s16, s16, s17
    1a82:	ee60 0a87 	vmul.f32	s1, s1, s14
    1a86:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    1a8a:	ecbd 8b02 	vpop	{d8}
    1a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1a92:	f007 bd45 	b.w	9520 <__LEAF_clip_veneer>
    1a96:	bf00      	nop
    1a98:	44ffe000 	.word	0x44ffe000
    1a9c:	00000000 	.word	0x00000000
    1aa0:	20019fac 	.word	0x20019fac
    1aa4:	3dcccccd 	.word	0x3dcccccd
    1aa8:	f3af 8000 	nop.w
    1aac:	f3af 8000 	nop.w
    1ab0:	f3af 8000 	nop.w
    1ab4:	f3af 8000 	nop.w
    1ab8:	f3af 8000 	nop.w
    1abc:	f3af 8000 	nop.w

00001ac0 <scaleEnvTimes>:
{
    1ac0:	b510      	push	{r4, lr}
    1ac2:	ed2d 8b02 	vpush	{d8}
    1ac6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1aca:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1b28 <scaleEnvTimes+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ace:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1b2c <scaleEnvTimes+0x6c>
	input *= 2047.0f;
    1ad2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1ad6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1ada:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1ade:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ae2:	1c63      	adds	r3, r4, #1
    1ae4:	ee00 3a90 	vmov	s1, r3
    1ae8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1aec:	f007 fd18 	bl	9520 <__LEAF_clip_veneer>
    1af0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1af8:	4b0d      	ldr	r3, [pc, #52]	; (1b30 <scaleEnvTimes+0x70>)
	float inputFloat = (float)inputInt - input;
    1afa:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1afe:	ee10 2a10 	vmov	r2, s0
    1b02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b06:	ee38 8a07 	vadd.f32	s16, s16, s14
    1b0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1b0e:	ed94 7a00 	vldr	s14, [r4]
    1b12:	edd3 6a00 	vldr	s13, [r3]
    1b16:	ee38 8a68 	vsub.f32	s16, s16, s17
    1b1a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1b1e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1b22:	ecbd 8b02 	vpop	{d8}
    1b26:	bd10      	pop	{r4, pc}
    1b28:	44ffe000 	.word	0x44ffe000
    1b2c:	00000000 	.word	0x00000000
    1b30:	20013f68 	.word	0x20013f68
    1b34:	f3af 8000 	nop.w
    1b38:	f3af 8000 	nop.w
    1b3c:	f3af 8000 	nop.w

00001b40 <scaleLFORates>:
{
    1b40:	b510      	push	{r4, lr}
    1b42:	ed2d 8b02 	vpush	{d8}
    1b46:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1b4a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1ba8 <scaleLFORates+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b4e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1bac <scaleLFORates+0x6c>
	input *= 2047.0f;
    1b52:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1b56:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1b5a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1b5e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b62:	1c63      	adds	r3, r4, #1
    1b64:	ee00 3a90 	vmov	s1, r3
    1b68:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1b6c:	f007 fcd8 	bl	9520 <__LEAF_clip_veneer>
    1b70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1b78:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <scaleLFORates+0x70>)
	float inputFloat = (float)inputInt - input;
    1b7a:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1b7e:	ee10 2a10 	vmov	r2, s0
    1b82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b86:	ee38 8a07 	vadd.f32	s16, s16, s14
    1b8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1b8e:	ed94 7a00 	vldr	s14, [r4]
    1b92:	edd3 6a00 	vldr	s13, [r3]
    1b96:	ee38 8a68 	vsub.f32	s16, s16, s17
    1b9a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1b9e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1ba2:	ecbd 8b02 	vpop	{d8}
    1ba6:	bd10      	pop	{r4, pc}
    1ba8:	44ffe000 	.word	0x44ffe000
    1bac:	00000000 	.word	0x00000000
    1bb0:	20016094 	.word	0x20016094
    1bb4:	f3af 8000 	nop.w
    1bb8:	f3af 8000 	nop.w
    1bbc:	f3af 8000 	nop.w

00001bc0 <randomNumber>:
float __ATTR_ITCMRAM randomNumber(void) {
    1bc0:	b500      	push	{lr}
    1bc2:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
    1bc4:	4807      	ldr	r0, [pc, #28]	; (1be4 <randomNumber+0x24>)
    1bc6:	a901      	add	r1, sp, #4
    1bc8:	f007 fd62 	bl	9690 <__HAL_RNG_GenerateRandomNumber_veneer>
	float num = (float)rand * INV_TWO_TO_32;
    1bcc:	eddd 7a01 	vldr	s15, [sp, #4]
    1bd0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1be8 <randomNumber+0x28>
    1bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
    1bd8:	ee27 0a80 	vmul.f32	s0, s15, s0
    1bdc:	b003      	add	sp, #12
    1bde:	f85d fb04 	ldr.w	pc, [sp], #4
    1be2:	bf00      	nop
    1be4:	2001c04c 	.word	0x2001c04c
    1be8:	2f80000d 	.word	0x2f80000d
    1bec:	f3af 8000 	nop.w
    1bf0:	f3af 8000 	nop.w
    1bf4:	f3af 8000 	nop.w
    1bf8:	f3af 8000 	nop.w
    1bfc:	f3af 8000 	nop.w

00001c00 <scaleTwo>:
}
    1c00:	ee30 0a00 	vadd.f32	s0, s0, s0
    1c04:	4770      	bx	lr
    1c06:	bf00      	nop
    1c08:	f3af 8000 	nop.w
    1c0c:	f3af 8000 	nop.w
    1c10:	f3af 8000 	nop.w
    1c14:	f3af 8000 	nop.w
    1c18:	f3af 8000 	nop.w
    1c1c:	f3af 8000 	nop.w

00001c20 <parsePreset>:
{
    1c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c24:	ed2d 8b02 	vpush	{d8}
    1c28:	b08f      	sub	sp, #60	; 0x3c
    1c2a:	e9cd 0101 	strd	r0, r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1c2e:	b672      	cpsid	i
	 presetReady = 0;
    1c30:	2500      	movs	r5, #0
    1c32:	4bf2      	ldr	r3, [pc, #968]	; (1ffc <parsePreset+0x3dc>)
	if (buffer[bufferIndex] == 17)
    1c34:	f8df a3dc 	ldr.w	sl, [pc, #988]	; 2014 <parsePreset+0x3f4>
		 audioOutBuffer[i] = 0;
    1c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1c3c:	4629      	mov	r1, r5
    1c3e:	48f0      	ldr	r0, [pc, #960]	; (2000 <parsePreset+0x3e0>)
	 presetReady = 0;
    1c40:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
    1c42:	f007 fbdd 	bl	9400 <__memset_veneer>
	if (buffer[bufferIndex] == 17)
    1c46:	f89a 4000 	ldrb.w	r4, [sl]
	audioMasterLevel = 0.0f;
    1c4a:	2300      	movs	r3, #0
    1c4c:	4aed      	ldr	r2, [pc, #948]	; (2004 <parsePreset+0x3e4>)
	if (buffer[bufferIndex] == 17)
    1c4e:	2c11      	cmp	r4, #17
	audioMasterLevel = 0.0f;
    1c50:	6013      	str	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    1c52:	f000 8449 	beq.w	24e8 <parsePreset+0x8c8>
	uint16_t bufferIndex = 0;
    1c56:	462b      	mov	r3, r5
	uint16_t presetVersionNumber = 0;
    1c58:	9506      	str	r5, [sp, #24]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c5a:	9a02      	ldr	r2, [sp, #8]
    1c5c:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c60:	1c5a      	adds	r2, r3, #1
    1c62:	f81a 9002 	ldrb.w	r9, [sl, r2]
    1c66:	1c9a      	adds	r2, r3, #2
    1c68:	f81a 8002 	ldrb.w	r8, [sl, r2]
    1c6c:	1cda      	adds	r2, r3, #3
    1c6e:	f81a e002 	ldrb.w	lr, [sl, r2]
    1c72:	1d1a      	adds	r2, r3, #4
    1c74:	f81a 1002 	ldrb.w	r1, [sl, r2]
    1c78:	1d5a      	adds	r2, r3, #5
    1c7a:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1c7e:	1d9a      	adds	r2, r3, #6
    1c80:	9103      	str	r1, [sp, #12]
    1c82:	f81a c002 	ldrb.w	ip, [sl, r2]
    1c86:	1dda      	adds	r2, r3, #7
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c88:	49df      	ldr	r1, [pc, #892]	; (2008 <parsePreset+0x3e8>)
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c8a:	f81a b002 	ldrb.w	fp, [sl, r2]
    1c8e:	f103 0208 	add.w	r2, r3, #8
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c92:	460e      	mov	r6, r1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1c94:	9504      	str	r5, [sp, #16]
    1c96:	f81a 7002 	ldrb.w	r7, [sl, r2]
    1c9a:	f103 0209 	add.w	r2, r3, #9
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1c9e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1ca2:	f81a 2002 	ldrb.w	r2, [sl, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1ca6:	0040      	lsls	r0, r0, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1ca8:	9205      	str	r2, [sp, #20]
    1caa:	f103 020a 	add.w	r2, r3, #10
    1cae:	f81a 5002 	ldrb.w	r5, [sl, r2]
		presetName[i] = buffer[bufferIndex];
    1cb2:	4ad6      	ldr	r2, [pc, #856]	; (200c <parsePreset+0x3ec>)
    1cb4:	7014      	strb	r4, [r2, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cb6:	5434      	strb	r4, [r6, r0]
		presetName[i] = buffer[bufferIndex];
    1cb8:	9c03      	ldr	r4, [sp, #12]
    1cba:	f882 9001 	strb.w	r9, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cbe:	f881 9001 	strb.w	r9, [r1, #1]
		presetName[i] = buffer[bufferIndex];
    1cc2:	f882 8002 	strb.w	r8, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cc6:	f881 8002 	strb.w	r8, [r1, #2]
		presetName[i] = buffer[bufferIndex];
    1cca:	f882 e003 	strb.w	lr, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cce:	f881 e003 	strb.w	lr, [r1, #3]
		presetName[i] = buffer[bufferIndex];
    1cd2:	7114      	strb	r4, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cd4:	710c      	strb	r4, [r1, #4]
		presetName[i] = buffer[bufferIndex];
    1cd6:	9c04      	ldr	r4, [sp, #16]
    1cd8:	7154      	strb	r4, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cda:	714c      	strb	r4, [r1, #5]
		presetName[i] = buffer[bufferIndex];
    1cdc:	f882 c006 	strb.w	ip, [r2, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1ce0:	f881 c006 	strb.w	ip, [r1, #6]
		presetName[i] = buffer[bufferIndex];
    1ce4:	f882 b007 	strb.w	fp, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1ce8:	f881 b007 	strb.w	fp, [r1, #7]
		presetName[i] = buffer[bufferIndex];
    1cec:	7217      	strb	r7, [r2, #8]
    1cee:	9805      	ldr	r0, [sp, #20]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cf0:	720f      	strb	r7, [r1, #8]
		presetName[i] = buffer[bufferIndex];
    1cf2:	7250      	strb	r0, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cf4:	7248      	strb	r0, [r1, #9]
		presetName[i] = buffer[bufferIndex];
    1cf6:	7295      	strb	r5, [r2, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cf8:	728d      	strb	r5, [r1, #10]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1cfa:	f103 050b 	add.w	r5, r3, #11
    1cfe:	9802      	ldr	r0, [sp, #8]
    1d00:	f81a 5005 	ldrb.w	r5, [sl, r5]
    1d04:	4cc2      	ldr	r4, [pc, #776]	; (2010 <parsePreset+0x3f0>)
    1d06:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
    1d0a:	72d5      	strb	r5, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d0c:	72cd      	strb	r5, [r1, #11]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d0e:	f103 050c 	add.w	r5, r3, #12
    1d12:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    1d16:	7315      	strb	r5, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d18:	730d      	strb	r5, [r1, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d1a:	f103 050d 	add.w	r5, r3, #13
    1d1e:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    1d22:	7355      	strb	r5, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d24:	f103 020e 	add.w	r2, r3, #14
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d28:	734d      	strb	r5, [r1, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d2a:	f81a 2002 	ldrb.w	r2, [sl, r2]
    1d2e:	4611      	mov	r1, r2
    1d30:	f103 020f 	add.w	r2, r3, #15
    1d34:	f81a 9002 	ldrb.w	r9, [sl, r2]
    1d38:	f103 0210 	add.w	r2, r3, #16
    1d3c:	f81a 8002 	ldrb.w	r8, [sl, r2]
    1d40:	f103 0211 	add.w	r2, r3, #17
    1d44:	f81a b002 	ldrb.w	fp, [sl, r2]
    1d48:	f103 0212 	add.w	r2, r3, #18
    1d4c:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1d50:	f103 0213 	add.w	r2, r3, #19
    1d54:	f81a 6002 	ldrb.w	r6, [sl, r2]
    1d58:	f103 0214 	add.w	r2, r3, #20
    1d5c:	9505      	str	r5, [sp, #20]
    1d5e:	f81a e002 	ldrb.w	lr, [sl, r2]
    1d62:	f103 0215 	add.w	r2, r3, #21
    1d66:	9604      	str	r6, [sp, #16]
    1d68:	f81a c002 	ldrb.w	ip, [sl, r2]
    1d6c:	f103 0216 	add.w	r2, r3, #22
    1d70:	f81a 7002 	ldrb.w	r7, [sl, r2]
    1d74:	f103 0217 	add.w	r2, r3, #23
    1d78:	f81a 6002 	ldrb.w	r6, [sl, r2]
    1d7c:	f103 0218 	add.w	r2, r3, #24
    1d80:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1d84:	f103 0219 	add.w	r2, r3, #25
    1d88:	f81a 2002 	ldrb.w	r2, [sl, r2]
    1d8c:	9203      	str	r2, [sp, #12]
    1d8e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    1d92:	00c0      	lsls	r0, r0, #3
    1d94:	5421      	strb	r1, [r4, r0]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    1d96:	f103 007e 	add.w	r0, r3, #126	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d9a:	f882 9001 	strb.w	r9, [r2, #1]
    1d9e:	9905      	ldr	r1, [sp, #20]
    1da0:	f882 8002 	strb.w	r8, [r2, #2]
    1da4:	f882 b003 	strb.w	fp, [r2, #3]
    1da8:	7111      	strb	r1, [r2, #4]
    1daa:	9904      	ldr	r1, [sp, #16]
    1dac:	7151      	strb	r1, [r2, #5]
    1dae:	9903      	ldr	r1, [sp, #12]
    1db0:	f882 e006 	strb.w	lr, [r2, #6]
    1db4:	f882 c007 	strb.w	ip, [r2, #7]
    1db8:	7217      	strb	r7, [r2, #8]
    1dba:	7296      	strb	r6, [r2, #10]
    1dbc:	72d5      	strb	r5, [r2, #11]
    1dbe:	7311      	strb	r1, [r2, #12]
    1dc0:	f103 011a 	add.w	r1, r3, #26
    1dc4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1dc8:	7351      	strb	r1, [r2, #13]
    1dca:	f103 011b 	add.w	r1, r3, #27
    1dce:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1dd2:	7391      	strb	r1, [r2, #14]
    1dd4:	f103 011c 	add.w	r1, r3, #28
    1dd8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ddc:	73d1      	strb	r1, [r2, #15]
    1dde:	f103 011d 	add.w	r1, r3, #29
    1de2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1de6:	7411      	strb	r1, [r2, #16]
    1de8:	f103 011e 	add.w	r1, r3, #30
    1dec:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1df0:	7451      	strb	r1, [r2, #17]
    1df2:	f103 011f 	add.w	r1, r3, #31
    1df6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1dfa:	7491      	strb	r1, [r2, #18]
    1dfc:	f103 0120 	add.w	r1, r3, #32
    1e00:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e04:	7511      	strb	r1, [r2, #20]
    1e06:	f103 0121 	add.w	r1, r3, #33	; 0x21
    1e0a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e0e:	7551      	strb	r1, [r2, #21]
    1e10:	f103 0122 	add.w	r1, r3, #34	; 0x22
    1e14:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e18:	7591      	strb	r1, [r2, #22]
    1e1a:	f103 0123 	add.w	r1, r3, #35	; 0x23
    1e1e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e22:	75d1      	strb	r1, [r2, #23]
    1e24:	f103 0124 	add.w	r1, r3, #36	; 0x24
    1e28:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e2c:	7611      	strb	r1, [r2, #24]
    1e2e:	f103 0125 	add.w	r1, r3, #37	; 0x25
    1e32:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e36:	7651      	strb	r1, [r2, #25]
    1e38:	f103 0126 	add.w	r1, r3, #38	; 0x26
    1e3c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e40:	7691      	strb	r1, [r2, #26]
    1e42:	f103 0127 	add.w	r1, r3, #39	; 0x27
    1e46:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e4a:	76d1      	strb	r1, [r2, #27]
    1e4c:	f103 0128 	add.w	r1, r3, #40	; 0x28
    1e50:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e54:	7711      	strb	r1, [r2, #28]
    1e56:	f103 0129 	add.w	r1, r3, #41	; 0x29
    1e5a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e5e:	7791      	strb	r1, [r2, #30]
    1e60:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    1e64:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e68:	77d1      	strb	r1, [r2, #31]
    1e6a:	f103 012b 	add.w	r1, r3, #43	; 0x2b
    1e6e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e72:	f882 1020 	strb.w	r1, [r2, #32]
    1e76:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    1e7a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e7e:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
    1e82:	f103 012d 	add.w	r1, r3, #45	; 0x2d
    1e86:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e8a:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1e8e:	f103 012e 	add.w	r1, r3, #46	; 0x2e
    1e92:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e96:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    1e9a:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    1e9e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ea2:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    1ea6:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1eaa:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1eae:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    1eb2:	f103 0131 	add.w	r1, r3, #49	; 0x31
    1eb6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1eba:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    1ebe:	f103 0132 	add.w	r1, r3, #50	; 0x32
    1ec2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ec6:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    1eca:	f103 0133 	add.w	r1, r3, #51	; 0x33
    1ece:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ed2:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    1ed6:	f103 0134 	add.w	r1, r3, #52	; 0x34
    1eda:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ede:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    1ee2:	f103 0135 	add.w	r1, r3, #53	; 0x35
    1ee6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1eea:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    1eee:	f103 0136 	add.w	r1, r3, #54	; 0x36
    1ef2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ef6:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    1efa:	f103 0137 	add.w	r1, r3, #55	; 0x37
    1efe:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f02:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    1f06:	f103 0138 	add.w	r1, r3, #56	; 0x38
    1f0a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f0e:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
    1f12:	f103 0139 	add.w	r1, r3, #57	; 0x39
    1f16:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f1a:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
    1f1e:	f103 013a 	add.w	r1, r3, #58	; 0x3a
    1f22:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f26:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    1f2a:	f103 013b 	add.w	r1, r3, #59	; 0x3b
    1f2e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f32:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
    1f36:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    1f3a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f3e:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    1f42:	f103 013d 	add.w	r1, r3, #61	; 0x3d
    1f46:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f4a:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
    1f4e:	f103 013e 	add.w	r1, r3, #62	; 0x3e
    1f52:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f56:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
    1f5a:	f103 013f 	add.w	r1, r3, #63	; 0x3f
    1f5e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f62:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
    1f66:	f103 0140 	add.w	r1, r3, #64	; 0x40
    1f6a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f6e:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
    1f72:	f103 0141 	add.w	r1, r3, #65	; 0x41
    1f76:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f7a:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
    1f7e:	f103 0142 	add.w	r1, r3, #66	; 0x42
    1f82:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f86:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    1f8a:	f103 0143 	add.w	r1, r3, #67	; 0x43
    1f8e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f92:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
    1f96:	f103 0144 	add.w	r1, r3, #68	; 0x44
    1f9a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f9e:	f8df a074 	ldr.w	sl, [pc, #116]	; 2014 <parsePreset+0x3f4>
    1fa2:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
    1fa6:	f103 0145 	add.w	r1, r3, #69	; 0x45
    1faa:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fae:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    1fb2:	f103 0146 	add.w	r1, r3, #70	; 0x46
    1fb6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fba:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    1fbe:	f103 0147 	add.w	r1, r3, #71	; 0x47
    1fc2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fc6:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    1fca:	f103 0148 	add.w	r1, r3, #72	; 0x48
    1fce:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fd2:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    1fd6:	f103 0149 	add.w	r1, r3, #73	; 0x49
    1fda:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fde:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
    1fe2:	f103 014a 	add.w	r1, r3, #74	; 0x4a
    1fe6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fea:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
    1fee:	f103 014b 	add.w	r1, r3, #75	; 0x4b
    1ff2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ff6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    1ffa:	e00d      	b.n	2018 <parsePreset+0x3f8>
    1ffc:	20004f1c 	.word	0x20004f1c
    2000:	30000000 	.word	0x30000000
    2004:	20000724 	.word	0x20000724
    2008:	30042000 	.word	0x30042000
    200c:	20019b80 	.word	0x20019b80
    2010:	30043380 	.word	0x30043380
    2014:	30042380 	.word	0x30042380
    2018:	f103 014c 	add.w	r1, r3, #76	; 0x4c
    201c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2020:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    2024:	f103 014d 	add.w	r1, r3, #77	; 0x4d
    2028:	f81a 1001 	ldrb.w	r1, [sl, r1]
    202c:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
    2030:	f103 014e 	add.w	r1, r3, #78	; 0x4e
    2034:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2038:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
    203c:	f103 014f 	add.w	r1, r3, #79	; 0x4f
    2040:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2044:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
    2048:	f103 0150 	add.w	r1, r3, #80	; 0x50
    204c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2050:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
    2054:	f103 0151 	add.w	r1, r3, #81	; 0x51
    2058:	f81a 1001 	ldrb.w	r1, [sl, r1]
    205c:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
    2060:	f103 0152 	add.w	r1, r3, #82	; 0x52
    2064:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2068:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
    206c:	f103 0153 	add.w	r1, r3, #83	; 0x53
    2070:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2074:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
    2078:	f103 0154 	add.w	r1, r3, #84	; 0x54
    207c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2080:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
    2084:	f103 0155 	add.w	r1, r3, #85	; 0x55
    2088:	f81a 1001 	ldrb.w	r1, [sl, r1]
    208c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2090:	f103 0156 	add.w	r1, r3, #86	; 0x56
    2094:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2098:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    209c:	f103 0157 	add.w	r1, r3, #87	; 0x57
    20a0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20a4:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    20a8:	f103 0158 	add.w	r1, r3, #88	; 0x58
    20ac:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20b0:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
    20b4:	f103 0159 	add.w	r1, r3, #89	; 0x59
    20b8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20bc:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
    20c0:	f103 015a 	add.w	r1, r3, #90	; 0x5a
    20c4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20c8:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
    20cc:	f103 015b 	add.w	r1, r3, #91	; 0x5b
    20d0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20d4:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
    20d8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    20dc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20e0:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
    20e4:	f103 015d 	add.w	r1, r3, #93	; 0x5d
    20e8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20ec:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    20f0:	f103 015e 	add.w	r1, r3, #94	; 0x5e
    20f4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20f8:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    20fc:	f103 015f 	add.w	r1, r3, #95	; 0x5f
    2100:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2104:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
    2108:	f103 0160 	add.w	r1, r3, #96	; 0x60
    210c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2110:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    2114:	f103 0161 	add.w	r1, r3, #97	; 0x61
    2118:	f81a 1001 	ldrb.w	r1, [sl, r1]
    211c:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    2120:	f103 0162 	add.w	r1, r3, #98	; 0x62
    2124:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2128:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    212c:	f103 0163 	add.w	r1, r3, #99	; 0x63
    2130:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2134:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    2138:	f103 0164 	add.w	r1, r3, #100	; 0x64
    213c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2140:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    2144:	f103 0165 	add.w	r1, r3, #101	; 0x65
    2148:	f81a 1001 	ldrb.w	r1, [sl, r1]
    214c:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    2150:	f103 0166 	add.w	r1, r3, #102	; 0x66
    2154:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2158:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    215c:	f103 0167 	add.w	r1, r3, #103	; 0x67
    2160:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2164:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    2168:	f103 0168 	add.w	r1, r3, #104	; 0x68
    216c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2170:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    2174:	f103 0169 	add.w	r1, r3, #105	; 0x69
    2178:	f81a 1001 	ldrb.w	r1, [sl, r1]
    217c:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    2180:	f103 016a 	add.w	r1, r3, #106	; 0x6a
    2184:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2188:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    218c:	f103 016b 	add.w	r1, r3, #107	; 0x6b
    2190:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2194:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
    2198:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    219c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21a0:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
    21a4:	f103 016d 	add.w	r1, r3, #109	; 0x6d
    21a8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21ac:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    21b0:	f103 016e 	add.w	r1, r3, #110	; 0x6e
    21b4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21b8:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
    21bc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    21c0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21c4:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
    21c8:	f103 0170 	add.w	r1, r3, #112	; 0x70
    21cc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21d0:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
    21d4:	f103 0171 	add.w	r1, r3, #113	; 0x71
    21d8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21dc:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    21e0:	f103 0172 	add.w	r1, r3, #114	; 0x72
    21e4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21e8:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
    21ec:	f103 0173 	add.w	r1, r3, #115	; 0x73
    21f0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21f4:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
    21f8:	f103 0174 	add.w	r1, r3, #116	; 0x74
    21fc:	f81a 1001 	ldrb.w	r1, [sl, r1]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2200:	f81a 4000 	ldrb.w	r4, [sl, r0]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2204:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    2208:	f103 0175 	add.w	r1, r3, #117	; 0x75
    220c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2210:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    2214:	f103 0176 	add.w	r1, r3, #118	; 0x76
    2218:	f81a 1001 	ldrb.w	r1, [sl, r1]
    221c:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
    2220:	f103 0177 	add.w	r1, r3, #119	; 0x77
    2224:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2228:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
    222c:	f103 0178 	add.w	r1, r3, #120	; 0x78
    2230:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2234:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    2238:	f103 0179 	add.w	r1, r3, #121	; 0x79
    223c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2240:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    2244:	f103 017a 	add.w	r1, r3, #122	; 0x7a
    2248:	f81a 1001 	ldrb.w	r1, [sl, r1]
    224c:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2250:	eb0a 0100 	add.w	r1, sl, r0
    2254:	7849      	ldrb	r1, [r1, #1]
    2256:	eb01 2104 	add.w	r1, r1, r4, lsl #8
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    225a:	f103 047b 	add.w	r4, r3, #123	; 0x7b
    225e:	f81a 4004 	ldrb.w	r4, [sl, r4]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2262:	b289      	uxth	r1, r1
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2264:	f882 4075 	strb.w	r4, [r2, #117]	; 0x75
    2268:	f103 047c 	add.w	r4, r3, #124	; 0x7c
    226c:	f81a 4004 	ldrb.w	r4, [sl, r4]
    2270:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
    2274:	f103 047d 	add.w	r4, r3, #125	; 0x7d
    2278:	f81a 4004 	ldrb.w	r4, [sl, r4]
    227c:	f882 4077 	strb.w	r4, [r2, #119]	; 0x77
	if (paramCount > size)
    2280:	9a01      	ldr	r2, [sp, #4]
    2282:	4291      	cmp	r1, r2
    2284:	dc0c      	bgt.n	22a0 <parsePreset+0x680>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2286:	eb00 0241 	add.w	r2, r0, r1, lsl #1
	if (paramEndCheck != 0xefef)
    228a:	f64e 75ef 	movw	r5, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    228e:	004c      	lsls	r4, r1, #1
    2290:	4452      	add	r2, sl
    2292:	7896      	ldrb	r6, [r2, #2]
    2294:	78d0      	ldrb	r0, [r2, #3]
    2296:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	if (paramEndCheck != 0xefef)
    229a:	b280      	uxth	r0, r0
    229c:	42a8      	cmp	r0, r5
    229e:	d00c      	beq.n	22ba <parsePreset+0x69a>
		audioMasterLevel = 1.0f;
    22a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    22a4:	4bb9      	ldr	r3, [pc, #740]	; (258c <parsePreset+0x96c>)
    22a6:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    22a8:	48b9      	ldr	r0, [pc, #740]	; (2590 <parsePreset+0x970>)
    22aa:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    22ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    22ae:	b662      	cpsie	i
}
    22b0:	b00f      	add	sp, #60	; 0x3c
    22b2:	ecbd 8b02 	vpop	{d8}
    22b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    22ba:	7910      	ldrb	r0, [r2, #4]
    22bc:	7952      	ldrb	r2, [r2, #5]
    22be:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    22c2:	b290      	uxth	r0, r2
	if (presetVersionNumber == 0)
    22c4:	9a06      	ldr	r2, [sp, #24]
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    22c6:	9007      	str	r0, [sp, #28]
	if (presetVersionNumber == 0)
    22c8:	2a00      	cmp	r2, #0
    22ca:	f000 8117 	beq.w	24fc <parsePreset+0x8dc>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    22ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    22d2:	f103 0284 	add.w	r2, r3, #132	; 0x84
    22d6:	4408      	add	r0, r1
    22d8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    22dc:	b292      	uxth	r2, r2
	if (mappingEndLocation > size)
    22de:	9801      	ldr	r0, [sp, #4]
    22e0:	4282      	cmp	r2, r0
    22e2:	dcdd      	bgt.n	22a0 <parsePreset+0x680>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    22e4:	eb0a 0502 	add.w	r5, sl, r2
    22e8:	f81a 0002 	ldrb.w	r0, [sl, r2]
    22ec:	786a      	ldrb	r2, [r5, #1]
    22ee:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    22f2:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    22f6:	b292      	uxth	r2, r2
    22f8:	4282      	cmp	r2, r0
    22fa:	d1d1      	bne.n	22a0 <parsePreset+0x680>
	bufferIndex = bufferIndex + 2;
    22fc:	f103 0780 	add.w	r7, r3, #128	; 0x80
    2300:	463d      	mov	r5, r7
	for (int i = 0; i < paramCount; i++)
    2302:	2900      	cmp	r1, #0
    2304:	f000 86e1 	beq.w	30ca <_Min_Heap_Size+0xca>
    2308:	4427      	add	r7, r4
    230a:	48a2      	ldr	r0, [pc, #648]	; (2594 <parsePreset+0x974>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    230c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 2598 <parsePreset+0x978>
    2310:	b2bf      	uxth	r7, r7
	for (int i = 0; i < paramCount; i++)
    2312:	4681      	mov	r9, r0
    2314:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2316:	eb0a 0205 	add.w	r2, sl, r5
    231a:	f81a 6005 	ldrb.w	r6, [sl, r5]
		bufferIndex += 2;
    231e:	3502      	adds	r5, #2
	for (int i = 0; i < paramCount; i++)
    2320:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2322:	7852      	ldrb	r2, [r2, #1]
		bufferIndex += 2;
    2324:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2326:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	for (int i = 0; i < paramCount; i++)
    232a:	42af      	cmp	r7, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    232c:	ee07 2a90 	vmov	s15, r2
    2330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2334:	ee67 7a87 	vmul.f32	s15, s15, s14
    2338:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    233c:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    2340:	d1e9      	bne.n	2316 <parsePreset+0x6f6>
    2342:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
    2346:	4a93      	ldr	r2, [pc, #588]	; (2594 <parsePreset+0x974>)
    2348:	4e94      	ldr	r6, [pc, #592]	; (259c <parsePreset+0x97c>)
    234a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		params[i].setParam = &blankFunction;
    234e:	6156      	str	r6, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    2350:	321c      	adds	r2, #28
    2352:	4294      	cmp	r4, r2
    2354:	d1fb      	bne.n	234e <parsePreset+0x72e>
    2356:	4a92      	ldr	r2, [pc, #584]	; (25a0 <parsePreset+0x980>)
		params[i].scaleFunc = &scaleDefault;
    2358:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    235a:	301c      	adds	r0, #28
    235c:	42a0      	cmp	r0, r4
    235e:	d1fb      	bne.n	2358 <parsePreset+0x738>
		bufferIndex += 2;
    2360:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    2364:	3380      	adds	r3, #128	; 0x80
    2366:	b29d      	uxth	r5, r3
	for (int i = paramCount; i < NUM_PARAMS; i++)
    2368:	299c      	cmp	r1, #156	; 0x9c
    236a:	f000 86ab 	beq.w	30c4 <_Min_Heap_Size+0xc4>
    236e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    2372:	4c8c      	ldr	r4, [pc, #560]	; (25a4 <parsePreset+0x984>)
    2374:	4e89      	ldr	r6, [pc, #548]	; (259c <parsePreset+0x97c>)
    2376:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    237a:	4a89      	ldr	r2, [pc, #548]	; (25a0 <parsePreset+0x980>)
			params[i].zeroToOneVal[v] = 0.0f;
    237c:	2100      	movs	r1, #0
    237e:	6019      	str	r1, [r3, #0]
    2380:	6059      	str	r1, [r3, #4]
		params[i].setParam = &blankFunction;
    2382:	e9c3 2604 	strd	r2, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    2386:	331c      	adds	r3, #28
    2388:	429c      	cmp	r4, r3
    238a:	d1f8      	bne.n	237e <parsePreset+0x75e>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    238c:	4a86      	ldr	r2, [pc, #536]	; (25a8 <parsePreset+0x988>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    238e:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2392:	4b86      	ldr	r3, [pc, #536]	; (25ac <parsePreset+0x98c>)
	for (int i = 0; i < NUM_EFFECT; i++)
    2394:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    2396:	f8c9 22e8 	str.w	r2, [r9, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    239a:	f8c9 2454 	str.w	r2, [r9, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    239e:	f8c9 25c0 	str.w	r2, [r9, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    23a2:	4a83      	ldr	r2, [pc, #524]	; (25b0 <parsePreset+0x990>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    23a4:	f8c9 3be0 	str.w	r3, [r9, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    23a8:	f8c9 2304 	str.w	r2, [r9, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    23ac:	f8c9 2470 	str.w	r2, [r9, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    23b0:	f8c9 25dc 	str.w	r2, [r9, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    23b4:	4a7f      	ldr	r2, [pc, #508]	; (25b4 <parsePreset+0x994>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    23b6:	f8c9 3bfc 	str.w	r3, [r9, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    23ba:	f8c9 3c34 	str.w	r3, [r9, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    23be:	f8c9 3c88 	str.w	r3, [r9, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    23c2:	f8c9 3ca4 	str.w	r3, [r9, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    23c6:	f8c9 3cdc 	str.w	r3, [r9, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    23ca:	f8c9 3d30 	str.w	r3, [r9, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    23ce:	f8c9 3d4c 	str.w	r3, [r9, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    23d2:	f8c9 3d84 	str.w	r3, [r9, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    23d6:	f8c9 3dd8 	str.w	r3, [r9, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    23da:	f8c9 3df4 	str.w	r3, [r9, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    23de:	f8c9 3e2c 	str.w	r3, [r9, #3628]	; 0xe2c
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    23e2:	f8c9 2aac 	str.w	r2, [r9, #2732]	; 0xaac
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    23e6:	4b74      	ldr	r3, [pc, #464]	; (25b8 <parsePreset+0x998>)
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    23e8:	f8c9 2b54 	str.w	r2, [r9, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    23ec:	4a73      	ldr	r2, [pc, #460]	; (25bc <parsePreset+0x99c>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    23ee:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 25e4 <parsePreset+0x9c4>
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    23f2:	4e73      	ldr	r6, [pc, #460]	; (25c0 <parsePreset+0x9a0>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    23f4:	f8c9 32cc 	str.w	r3, [r9, #716]	; 0x2cc
    23f8:	f6ab 181c 	subw	r8, fp, #2332	; 0x91c
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    23fc:	f8c9 3358 	str.w	r3, [r9, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    2400:	f8c9 3438 	str.w	r3, [r9, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    2404:	f8c9 34c4 	str.w	r3, [r9, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    2408:	f8c9 35a4 	str.w	r3, [r9, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    240c:	f8c9 3630 	str.w	r3, [r9, #1584]	; 0x630
	params[Transpose].scaleFunc = &scaleTranspose;
    2410:	f8c9 21d0 	str.w	r2, [r9, #464]	; 0x1d0
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2414:	4b6b      	ldr	r3, [pc, #428]	; (25c4 <parsePreset+0x9a4>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2416:	4a6c      	ldr	r2, [pc, #432]	; (25c8 <parsePreset+0x9a8>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2418:	f8c9 3e80 	str.w	r3, [r9, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    241c:	f8c9 3f0c 	str.w	r3, [r9, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    2420:	f8c9 6ae4 	str.w	r6, [r9, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    2424:	f8c9 6b8c 	str.w	r6, [r9, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2428:	f8c9 21ec 	str.w	r2, [r9, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    242c:	f8c9 3f98 	str.w	r3, [r9, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2430:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    2434:	4b65      	ldr	r3, [pc, #404]	; (25cc <parsePreset+0x9ac>)
    2436:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    243a:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    243e:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2440:	ee67 7a87 	vmul.f32	s15, s15, s14
    2444:	fef8 7a67 	vrinta.f32	s15, s15
    2448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    244c:	edcd 7a01 	vstr	s15, [sp, #4]
    2450:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    2454:	280d      	cmp	r0, #13
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    2456:	bf88      	it	hi
    2458:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    245c:	f006 ffdc 	bl	9418 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2460:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    2464:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    2466:	ee67 7a87 	vmul.f32	s15, s15, s14
    246a:	fef8 7a67 	vrinta.f32	s15, s15
    246e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2472:	edcd 7a01 	vstr	s15, [sp, #4]
    2476:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    247a:	280d      	cmp	r0, #13
    247c:	d946      	bls.n	250c <parsePreset+0x8ec>
	for (int i = 0; i < NUM_EFFECT; i++)
    247e:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    2480:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    2484:	f006 ffc8 	bl	9418 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2488:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    248c:	2f04      	cmp	r7, #4
    248e:	d1d4      	bne.n	243a <parsePreset+0x81a>
    2490:	4f40      	ldr	r7, [pc, #256]	; (2594 <parsePreset+0x974>)
    2492:	46b9      	mov	r9, r7
    2494:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2496:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2498:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    249a:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    249e:	4798      	blx	r3
    24a0:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    24a4:	42a6      	cmp	r6, r4
    24a6:	d1f6      	bne.n	2496 <parsePreset+0x876>
    24a8:	4e3a      	ldr	r6, [pc, #232]	; (2594 <parsePreset+0x974>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    24aa:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    24ac:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    24ae:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    24b2:	4798      	blx	r3
    24b4:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    24b8:	42a6      	cmp	r6, r4
    24ba:	d1f6      	bne.n	24aa <parsePreset+0x88a>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    24bc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    24c0:	edd9 7af7 	vldr	s15, [r9, #988]	; 0x3dc
    24c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    24c8:	fef8 7a67 	vrinta.f32	s15, s15
    24cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    24d0:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    24d4:	2b05      	cmp	r3, #5
    24d6:	d832      	bhi.n	253e <parsePreset+0x91e>
    24d8:	e8df f013 	tbh	[pc, r3, lsl #1]
    24dc:	002e05ef 	.word	0x002e05ef
    24e0:	05e505ea 	.word	0x05e505ea
    24e4:	05db05e0 	.word	0x05db05e0
		if (buffer[bufferIndex + 1] == 18)
    24e8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    24ec:	2b12      	cmp	r3, #18
    24ee:	d016      	beq.n	251e <parsePreset+0x8fe>
		presetName[i] = buffer[bufferIndex];
    24f0:	f89a 4004 	ldrb.w	r4, [sl, #4]
		bufferIndex = 4;
    24f4:	2304      	movs	r3, #4
	uint16_t presetVersionNumber = 0;
    24f6:	9506      	str	r5, [sp, #24]
    24f8:	f7ff bbaf 	b.w	1c5a <parsePreset+0x3a>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    24fc:	f103 0284 	add.w	r2, r3, #132	; 0x84
    2500:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2504:	4422      	add	r2, r4
    2506:	4402      	add	r2, r0
    2508:	b292      	uxth	r2, r2
    250a:	e6e8      	b.n	22de <parsePreset+0x6be>
			setEffectsFunctions(effectType, i);
    250c:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    250e:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    2510:	f006 ff82 	bl	9418 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2514:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    2518:	2f04      	cmp	r7, #4
    251a:	d18e      	bne.n	243a <parsePreset+0x81a>
    251c:	e7b8      	b.n	2490 <parsePreset+0x870>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    251e:	f89a 2002 	ldrb.w	r2, [sl, #2]
    2522:	f89a 3003 	ldrb.w	r3, [sl, #3]
		presetName[i] = buffer[bufferIndex];
    2526:	f89a 4004 	ldrb.w	r4, [sl, #4]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    252a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    252e:	b29b      	uxth	r3, r3
    2530:	9306      	str	r3, [sp, #24]
		bufferIndex = 4;
    2532:	2304      	movs	r3, #4
    2534:	f7ff bb91 	b.w	1c5a <parsePreset+0x3a>
			  shapeTick[i] = &sineTriTick;
    2538:	4b25      	ldr	r3, [pc, #148]	; (25d0 <parsePreset+0x9b0>)
    253a:	4a26      	ldr	r2, [pc, #152]	; (25d4 <parsePreset+0x9b4>)
    253c:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    253e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2542:	ed99 7aaa 	vldr	s14, [r9, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2546:	4a24      	ldr	r2, [pc, #144]	; (25d8 <parsePreset+0x9b8>)
    2548:	4924      	ldr	r1, [pc, #144]	; (25dc <parsePreset+0x9bc>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    254a:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    254e:	edd2 7a00 	vldr	s15, [r2]
    2552:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    2556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    255a:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    255e:	bfd4      	ite	le
    2560:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    2562:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2564:	fef8 7a67 	vrinta.f32	s15, s15
    2568:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    256c:	7008      	strb	r0, [r1, #0]
			enabledCount++;
    256e:	4603      	mov	r3, r0
    2570:	491b      	ldr	r1, [pc, #108]	; (25e0 <parsePreset+0x9c0>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2572:	ee17 2a90 	vmov	r2, s15
    2576:	6008      	str	r0, [r1, #0]
	switch (oscshape)
    2578:	2a05      	cmp	r2, #5
    257a:	d838      	bhi.n	25ee <parsePreset+0x9ce>
    257c:	e8df f012 	tbh	[pc, r2, lsl #1]
    2580:	00340584 	.word	0x00340584
    2584:	057a057f 	.word	0x057a057f
    2588:	05700575 	.word	0x05700575
    258c:	20019b94 	.word	0x20019b94
    2590:	20000724 	.word	0x20000724
    2594:	20018a64 	.word	0x20018a64
    2598:	377ffff6 	.word	0x377ffff6
    259c:	00001981 	.word	0x00001981
    25a0:	000018c1 	.word	0x000018c1
    25a4:	20019b74 	.word	0x20019b74
    25a8:	00001901 	.word	0x00001901
    25ac:	00001ac1 	.word	0x00001ac1
    25b0:	00001921 	.word	0x00001921
    25b4:	00001941 	.word	0x00001941
    25b8:	000018e1 	.word	0x000018e1
    25bc:	000019a1 	.word	0x000019a1
    25c0:	00001a21 	.word	0x00001a21
    25c4:	00001b41 	.word	0x00001b41
    25c8:	000019e1 	.word	0x000019e1
    25cc:	00001961 	.word	0x00001961
    25d0:	2001cf04 	.word	0x2001cf04
    25d4:	00005f21 	.word	0x00005f21
    25d8:	20018fac 	.word	0x20018fac
    25dc:	2001cd60 	.word	0x2001cd60
    25e0:	20018a58 	.word	0x20018a58
    25e4:	20019a64 	.word	0x20019a64
			  shapeTick[i] = &sineTriTick;
    25e8:	4a15      	ldr	r2, [pc, #84]	; (2640 <parsePreset+0xa20>)
    25ea:	4816      	ldr	r0, [pc, #88]	; (2644 <parsePreset+0xa24>)
    25ec:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    25ee:	4a16      	ldr	r2, [pc, #88]	; (2648 <parsePreset+0xa28>)
    25f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    25f4:	ed92 7a00 	vldr	s14, [r2]
    25f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    25fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2600:	f340 8508 	ble.w	3014 <_Min_Heap_Size+0x14>
			enabledCount++;
    2604:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2606:	2201      	movs	r2, #1
			enabledCount++;
    2608:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    260a:	4610      	mov	r0, r2
    260c:	4c0f      	ldr	r4, [pc, #60]	; (264c <parsePreset+0xa2c>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    260e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2612:	6048      	str	r0, [r1, #4]
    2614:	7062      	strb	r2, [r4, #1]
    2616:	4a0e      	ldr	r2, [pc, #56]	; (2650 <parsePreset+0xa30>)
    2618:	edd2 7a00 	vldr	s15, [r2]
    261c:	ee67 7a87 	vmul.f32	s15, s15, s14
    2620:	fef8 7a67 	vrinta.f32	s15, s15
    2624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2628:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    262c:	2a05      	cmp	r2, #5
    262e:	d814      	bhi.n	265a <parsePreset+0xa3a>
    2630:	e8df f012 	tbh	[pc, r2, lsl #1]
    2634:	050c0511 	.word	0x050c0511
    2638:	05020507 	.word	0x05020507
    263c:	04fd0010 	.word	0x04fd0010
    2640:	2001cf04 	.word	0x2001cf04
    2644:	00005f21 	.word	0x00005f21
    2648:	20018e78 	.word	0x20018e78
    264c:	2001cd60 	.word	0x2001cd60
    2650:	20019118 	.word	0x20019118
			  shapeTick[i] = &sineTick;
    2654:	4a9a      	ldr	r2, [pc, #616]	; (28c0 <parsePreset+0xca0>)
    2656:	489b      	ldr	r0, [pc, #620]	; (28c4 <parsePreset+0xca4>)
    2658:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    265a:	4a9b      	ldr	r2, [pc, #620]	; (28c8 <parsePreset+0xca8>)
    265c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2660:	ed92 7a00 	vldr	s14, [r2]
    2664:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    266c:	f340 84ce 	ble.w	300c <_Min_Heap_Size+0xc>
			enabledCount++;
    2670:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2672:	2201      	movs	r2, #1
			enabledCount++;
    2674:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    2676:	4610      	mov	r0, r2
	if (params[Noise].realVal[0]  > 0.5f)
    2678:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    267c:	4e93      	ldr	r6, [pc, #588]	; (28cc <parsePreset+0xcac>)
	if (params[Noise].realVal[0]  > 0.5f)
    267e:	ed99 6a80 	vldr	s12, [r9, #512]	; 0x200
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2682:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    2686:	6088      	str	r0, [r1, #8]
	oscAmpMult = oscAmpMultArray[enabledCount];
    2688:	f206 4444 	addw	r4, r6, #1092	; 0x444
    268c:	4990      	ldr	r1, [pc, #576]	; (28d0 <parsePreset+0xcb0>)
	if (params[Noise].realVal[0]  > 0.5f)
    268e:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2692:	edd6 7a00 	vldr	s15, [r6]
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2696:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    269a:	708a      	strb	r2, [r1, #2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    269c:	4a8d      	ldr	r2, [pc, #564]	; (28d4 <parsePreset+0xcb4>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    269e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (params[Noise].realVal[0]  > 0.5f)
    26a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    26a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26aa:	4a8b      	ldr	r2, [pc, #556]	; (28d8 <parsePreset+0xcb8>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    26ac:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    26b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    26b4:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    26b6:	4633      	mov	r3, r6
	if (params[Noise].realVal[0]  > 0.5f)
    26b8:	bfcc      	ite	gt
    26ba:	2301      	movgt	r3, #1
    26bc:	2300      	movle	r3, #0
	oscAmpMult = oscAmpMultArray[enabledCount];
    26be:	6011      	str	r1, [r2, #0]
		setFilterTypes(filterType, i);
    26c0:	ee17 0a90 	vmov	r0, s15
	if (params[Noise].realVal[0]  > 0.5f)
    26c4:	4a85      	ldr	r2, [pc, #532]	; (28dc <parsePreset+0xcbc>)
		setFilterTypes(filterType, i);
    26c6:	2100      	movs	r1, #0
	if (params[Noise].realVal[0]  > 0.5f)
    26c8:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    26ca:	f007 f80d 	bl	96e8 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    26ce:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    26d2:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    26d4:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    26d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
    26da:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    26de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    26e2:	ee17 0a90 	vmov	r0, s15
    26e6:	f006 ffff 	bl	96e8 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    26ea:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    26ec:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    26ee:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    26f0:	348c      	adds	r4, #140	; 0x8c
    26f2:	edd3 7a00 	vldr	s15, [r3]
    26f6:	ee67 7a87 	vmul.f32	s15, s15, s14
    26fa:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    26fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2702:	ee17 0a90 	vmov	r0, s15
    2706:	f006 ff8b 	bl	9620 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    270a:	2e04      	cmp	r6, #4
    270c:	d1ed      	bne.n	26ea <parsePreset+0xaca>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    270e:	4874      	ldr	r0, [pc, #464]	; (28e0 <parsePreset+0xcc0>)
	for (int i = 0; i < NUM_PARAMS; i++)
    2710:	f04f 0800 	mov.w	r8, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2714:	4b73      	ldr	r3, [pc, #460]	; (28e4 <parsePreset+0xcc4>)
			params[i].objectNumber = 1;
    2716:	2601      	movs	r6, #1
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    2718:	f8c9 02d0 	str.w	r0, [r9, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    271c:	f8c9 043c 	str.w	r0, [r9, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    2720:	f8c9 05a8 	str.w	r0, [r9, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    2724:	4870      	ldr	r0, [pc, #448]	; (28e8 <parsePreset+0xcc8>)
	params[Effect1Mix].setParam = &fxMixSet;
    2726:	4971      	ldr	r1, [pc, #452]	; (28ec <parsePreset+0xccc>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    2728:	f8c9 035c 	str.w	r0, [r9, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    272c:	f8c9 04c8 	str.w	r0, [r9, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    2730:	f8c9 0634 	str.w	r0, [r9, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2734:	6818      	ldr	r0, [r3, #0]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    2736:	4c6e      	ldr	r4, [pc, #440]	; (28f0 <parsePreset+0xcd0>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2738:	f8c9 0714 	str.w	r0, [r9, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    273c:	6858      	ldr	r0, [r3, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    273e:	f8c9 17a0 	str.w	r1, [r9, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    2742:	f8c9 0730 	str.w	r0, [r9, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    2746:	6898      	ldr	r0, [r3, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    2748:	f8c9 47bc 	str.w	r4, [r9, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    274c:	f8c9 074c 	str.w	r0, [r9, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    2750:	68d8      	ldr	r0, [r3, #12]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2752:	4a68      	ldr	r2, [pc, #416]	; (28f4 <parsePreset+0xcd4>)
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    2754:	f8c9 0768 	str.w	r0, [r9, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    2758:	6918      	ldr	r0, [r3, #16]
    275a:	f8c9 0784 	str.w	r0, [r9, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    275e:	6958      	ldr	r0, [r3, #20]
    2760:	f8c9 07f4 	str.w	r0, [r9, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    2764:	6998      	ldr	r0, [r3, #24]
    2766:	f8c9 0810 	str.w	r0, [r9, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    276a:	69d8      	ldr	r0, [r3, #28]
    276c:	f8c9 082c 	str.w	r0, [r9, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    2770:	4861      	ldr	r0, [pc, #388]	; (28f8 <parsePreset+0xcd8>)
    2772:	f8c9 0228 	str.w	r0, [r9, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    2776:	4861      	ldr	r0, [pc, #388]	; (28fc <parsePreset+0xcdc>)
    2778:	f8c9 0260 	str.w	r0, [r9, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    277c:	4860      	ldr	r0, [pc, #384]	; (2900 <parsePreset+0xce0>)
    277e:	f8c9 0244 	str.w	r0, [r9, #580]	; 0x244
	params[Master].setParam = &setMaster;
    2782:	4860      	ldr	r0, [pc, #384]	; (2904 <parsePreset+0xce4>)
    2784:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    2788:	485f      	ldr	r0, [pc, #380]	; (2908 <parsePreset+0xce8>)
    278a:	f8c9 01d4 	str.w	r0, [r9, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    278e:	485f      	ldr	r0, [pc, #380]	; (290c <parsePreset+0xcec>)
    2790:	f8c9 01f0 	str.w	r0, [r9, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    2794:	485e      	ldr	r0, [pc, #376]	; (2910 <parsePreset+0xcf0>)
    2796:	f8cb 00d0 	str.w	r0, [fp, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    279a:	6a18      	ldr	r0, [r3, #32]
    279c:	f8c9 0848 	str.w	r0, [r9, #2120]	; 0x848
	params[Effect2Mix].setParam = &fxMixSet;
    27a0:	f8c9 1880 	str.w	r1, [r9, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    27a4:	f8c9 1960 	str.w	r1, [r9, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    27a8:	f8c9 1a40 	str.w	r1, [r9, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    27ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    27ae:	f8c9 489c 	str.w	r4, [r9, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    27b2:	f8c9 1864 	str.w	r1, [r9, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    27b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    27b8:	f8c9 497c 	str.w	r4, [r9, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    27bc:	f8c9 18d4 	str.w	r1, [r9, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    27c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    27c2:	f8c9 4a5c 	str.w	r4, [r9, #2652]	; 0xa5c
		params[i].objectNumber = 0;
    27c6:	4644      	mov	r4, r8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    27c8:	f8c9 18f0 	str.w	r1, [r9, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    27cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    27ce:	4851      	ldr	r0, [pc, #324]	; (2914 <parsePreset+0xcf4>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    27d0:	f8c9 190c 	str.w	r1, [r9, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    27d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    27d6:	f8c9 1928 	str.w	r1, [r9, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    27da:	6b99      	ldr	r1, [r3, #56]	; 0x38
    27dc:	f8c9 1944 	str.w	r1, [r9, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    27e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    27e2:	f8c9 19b4 	str.w	r1, [r9, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    27e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    27e8:	f8c9 19d0 	str.w	r1, [r9, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    27ec:	6c59      	ldr	r1, [r3, #68]	; 0x44
    27ee:	f8c9 19ec 	str.w	r1, [r9, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    27f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    27f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    27f6:	f8c9 1a08 	str.w	r1, [r9, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    27fa:	f8c9 3a24 	str.w	r3, [r9, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    27fe:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2800:	4945      	ldr	r1, [pc, #276]	; (2918 <parsePreset+0xcf8>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2802:	f8c9 3ae8 	str.w	r3, [r9, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    2806:	6853      	ldr	r3, [r2, #4]
    2808:	f8c9 3acc 	str.w	r3, [r9, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    280c:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    280e:	f8c9 1be4 	str.w	r1, [r9, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    2812:	f8c9 3b90 	str.w	r3, [r9, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    2816:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    2818:	f8c9 1c8c 	str.w	r1, [r9, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    281c:	f8c9 3b74 	str.w	r3, [r9, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    2820:	4b3e      	ldr	r3, [pc, #248]	; (291c <parsePreset+0xcfc>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    2822:	f8c9 1d34 	str.w	r1, [r9, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    2826:	f8c9 3c00 	str.w	r3, [r9, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    282a:	f8c9 3ca8 	str.w	r3, [r9, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    282e:	f8c9 3d50 	str.w	r3, [r9, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    2832:	f8c9 3df8 	str.w	r3, [r9, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2836:	4b3a      	ldr	r3, [pc, #232]	; (2920 <parsePreset+0xd00>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    2838:	f8c9 1ddc 	str.w	r1, [r9, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    283c:	f8c9 3c1c 	str.w	r3, [r9, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    2840:	f8c9 3cc4 	str.w	r3, [r9, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    2844:	f8c9 3d6c 	str.w	r3, [r9, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    2848:	f8c9 3e14 	str.w	r3, [r9, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    284c:	4b35      	ldr	r3, [pc, #212]	; (2924 <parsePreset+0xd04>)
    284e:	f8c9 3c38 	str.w	r3, [r9, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    2852:	f8c9 3ce0 	str.w	r3, [r9, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    2856:	f8c9 3d88 	str.w	r3, [r9, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    285a:	f8c9 3e30 	str.w	r3, [r9, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    285e:	4b32      	ldr	r3, [pc, #200]	; (2928 <parsePreset+0xd08>)
    2860:	f8c9 3c54 	str.w	r3, [r9, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    2864:	f8c9 3cfc 	str.w	r3, [r9, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    2868:	f8c9 3da4 	str.w	r3, [r9, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    286c:	f8c9 3e4c 	str.w	r3, [r9, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2870:	6803      	ldr	r3, [r0, #0]
    2872:	f8c9 3e84 	str.w	r3, [r9, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    2876:	68c3      	ldr	r3, [r0, #12]
    2878:	f8c9 3f10 	str.w	r3, [r9, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    287c:	6983      	ldr	r3, [r0, #24]
    287e:	f8c9 3f9c 	str.w	r3, [r9, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2882:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2884:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    2888:	6843      	ldr	r3, [r0, #4]
    288a:	f8c9 3ea0 	str.w	r3, [r9, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    288e:	6903      	ldr	r3, [r0, #16]
    2890:	f8c9 3f2c 	str.w	r3, [r9, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    2894:	69c3      	ldr	r3, [r0, #28]
    2896:	f8c9 3fb8 	str.w	r3, [r9, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    289a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    289c:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    28a0:	6883      	ldr	r3, [r0, #8]
    28a2:	f8c9 3ebc 	str.w	r3, [r9, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    28a6:	6943      	ldr	r3, [r0, #20]
    28a8:	f8c9 3f48 	str.w	r3, [r9, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    28ac:	6a03      	ldr	r3, [r0, #32]
    28ae:	f8c9 3fd4 	str.w	r3, [r9, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    28b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    28b4:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    28b8:	4b1c      	ldr	r3, [pc, #112]	; (292c <parsePreset+0xd0c>)
    28ba:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
    28be:	e03b      	b.n	2938 <parsePreset+0xd18>
    28c0:	2001cf04 	.word	0x2001cf04
    28c4:	00006021 	.word	0x00006021
    28c8:	20018fe4 	.word	0x20018fe4
    28cc:	200194ec 	.word	0x200194ec
    28d0:	2001cd60 	.word	0x2001cd60
    28d4:	2000073c 	.word	0x2000073c
    28d8:	20000738 	.word	0x20000738
    28dc:	2001cd0c 	.word	0x2001cd0c
    28e0:	00006541 	.word	0x00006541
    28e4:	20013f14 	.word	0x20013f14
    28e8:	000065a1 	.word	0x000065a1
    28ec:	00007621 	.word	0x00007621
    28f0:	00007641 	.word	0x00007641
    28f4:	20015f68 	.word	0x20015f68
    28f8:	00008361 	.word	0x00008361
    28fc:	00008401 	.word	0x00008401
    2900:	000083c1 	.word	0x000083c1
    2904:	00006b61 	.word	0x00006b61
    2908:	00006b81 	.word	0x00006b81
    290c:	00006ba1 	.word	0x00006ba1
    2910:	00006bc1 	.word	0x00006bc1
    2914:	20018094 	.word	0x20018094
    2918:	00006a81 	.word	0x00006a81
    291c:	00006aa1 	.word	0x00006aa1
    2920:	00006ac1 	.word	0x00006ac1
    2924:	00006ae1 	.word	0x00006ae1
    2928:	00006b01 	.word	0x00006b01
    292c:	00006b41 	.word	0x00006b41
    2930:	3c010204 	.word	0x3c010204
    2934:	42fe0000 	.word	0x42fe0000
		if ((i >= Osc1) && (i < Osc2))
    2938:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    293c:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    293e:	2b0c      	cmp	r3, #12
    2940:	f240 8278 	bls.w	2e34 <parsePreset+0x1214>
		else if ((i >= Osc2) && (i < Osc3))
    2944:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    2948:	2b72      	cmp	r3, #114	; 0x72
    294a:	f200 8273 	bhi.w	2e34 <parsePreset+0x1214>
    294e:	e8df f013 	tbh	[pc, r3, lsl #1]
    2952:	0073      	.short	0x0073
    2954:	00730073 	.word	0x00730073
    2958:	00730073 	.word	0x00730073
    295c:	00730073 	.word	0x00730073
    2960:	00730073 	.word	0x00730073
    2964:	00730073 	.word	0x00730073
    2968:	00730073 	.word	0x00730073
    296c:	026b026b 	.word	0x026b026b
    2970:	026b026b 	.word	0x026b026b
    2974:	026b026b 	.word	0x026b026b
    2978:	026b026b 	.word	0x026b026b
    297c:	026b026b 	.word	0x026b026b
    2980:	026b026b 	.word	0x026b026b
    2984:	0271026b 	.word	0x0271026b
    2988:	02710271 	.word	0x02710271
    298c:	02710271 	.word	0x02710271
    2990:	02710271 	.word	0x02710271
    2994:	00730271 	.word	0x00730271
    2998:	00730073 	.word	0x00730073
    299c:	00730073 	.word	0x00730073
    29a0:	00730073 	.word	0x00730073
    29a4:	026b0073 	.word	0x026b0073
    29a8:	026b026b 	.word	0x026b026b
    29ac:	026b026b 	.word	0x026b026b
    29b0:	026b026b 	.word	0x026b026b
    29b4:	026e026b 	.word	0x026e026b
    29b8:	026e026e 	.word	0x026e026e
    29bc:	026e026e 	.word	0x026e026e
    29c0:	026e026e 	.word	0x026e026e
    29c4:	0271026e 	.word	0x0271026e
    29c8:	02710271 	.word	0x02710271
    29cc:	02710271 	.word	0x02710271
    29d0:	00730271 	.word	0x00730271
    29d4:	00730073 	.word	0x00730073
    29d8:	00730073 	.word	0x00730073
    29dc:	00730073 	.word	0x00730073
    29e0:	02710271 	.word	0x02710271
    29e4:	02710271 	.word	0x02710271
    29e8:	02710271 	.word	0x02710271
    29ec:	00730073 	.word	0x00730073
    29f0:	00730073 	.word	0x00730073
    29f4:	00730073 	.word	0x00730073
    29f8:	026b026b 	.word	0x026b026b
    29fc:	026b026b 	.word	0x026b026b
    2a00:	026b026b 	.word	0x026b026b
    2a04:	026e026e 	.word	0x026e026e
    2a08:	026e026e 	.word	0x026e026e
    2a0c:	026e026e 	.word	0x026e026e
    2a10:	02710271 	.word	0x02710271
    2a14:	02710271 	.word	0x02710271
    2a18:	00730271 	.word	0x00730271
    2a1c:	00730073 	.word	0x00730073
    2a20:	00730073 	.word	0x00730073
    2a24:	026b026b 	.word	0x026b026b
    2a28:	026b026b 	.word	0x026b026b
    2a2c:	026e026b 	.word	0x026e026b
    2a30:	026e026e 	.word	0x026e026e
    2a34:	026e026e 	.word	0x026e026e
			params[i].objectNumber = 1;
    2a38:	2001      	movs	r0, #1
    2a3a:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2a3c:	ed97 0a02 	vldr	s0, [r7, #8]
    2a40:	2100      	movs	r1, #0
    2a42:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    2a44:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2a48:	4798      	blx	r3
    2a4a:	ed97 0a03 	vldr	s0, [r7, #12]
    2a4e:	697b      	ldr	r3, [r7, #20]
    2a50:	2101      	movs	r1, #1
    2a52:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    2a54:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2a56:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    2a58:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    2a5c:	f47f af6c 	bne.w	2938 <parsePreset+0xd18>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2a60:	edd9 7a09 	vldr	s15, [r9, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2a64:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2a68:	ed99 7a02 	vldr	s14, [r9, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2a6c:	ed9b 6a38 	vldr	s12, [fp, #224]	; 0xe0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2a70:	ee37 7a67 	vsub.f32	s14, s14, s15
    2a74:	ed1f 5a52 	vldr	s10, [pc, #-328]	; 2930 <parsePreset+0xd10>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2a78:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2a7c:	ed5f 5a53 	vldr	s11, [pc, #-332]	; 2934 <parsePreset+0xd14>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2a80:	4baa      	ldr	r3, [pc, #680]	; (2d2c <parsePreset+0x110c>)
    2a82:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2a8a:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2a8e:	bfcc      	ite	gt
    2a90:	2201      	movgt	r2, #1
    2a92:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2a94:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2a98:	4ba5      	ldr	r3, [pc, #660]	; (2d30 <parsePreset+0x1110>)
    2a9a:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2a9e:	4ba5      	ldr	r3, [pc, #660]	; (2d34 <parsePreset+0x1114>)
    2aa0:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    2aa2:	9b06      	ldr	r3, [sp, #24]
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	f000 82b9 	beq.w	301c <_Min_Heap_Size+0x1c>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    2aaa:	eddb 7a3f 	vldr	s15, [fp, #252]	; 0xfc
    2aae:	eef4 7ae6 	vcmpe.f32	s15, s13
    2ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ab6:	bfcc      	ite	gt
    2ab8:	2301      	movgt	r3, #1
    2aba:	2300      	movle	r3, #0
	bufferIndex += 2;
    2abc:	3504      	adds	r5, #4
		knobFrozen[i] = 0;
    2abe:	499e      	ldr	r1, [pc, #632]	; (2d38 <parsePreset+0x1118>)
    2ac0:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 2d68 <parsePreset+0x1148>
	bufferIndex += 2;
    2ac4:	b2aa      	uxth	r2, r5
    2ac6:	f50b 6018 	add.w	r0, fp, #2432	; 0x980
    2aca:	4614      	mov	r4, r2
	numMappings = 0;
    2acc:	2200      	movs	r2, #0
		knobFrozen[i] = 0;
    2ace:	700a      	strb	r2, [r1, #0]
    2ad0:	704a      	strb	r2, [r1, #1]
    2ad2:	708a      	strb	r2, [r1, #2]
    2ad4:	70ca      	strb	r2, [r1, #3]
    2ad6:	710a      	strb	r2, [r1, #4]
    2ad8:	714a      	strb	r2, [r1, #5]
    2ada:	718a      	strb	r2, [r1, #6]
    2adc:	71ca      	strb	r2, [r1, #7]
    2ade:	720a      	strb	r2, [r1, #8]
    2ae0:	724a      	strb	r2, [r1, #9]
    2ae2:	728a      	strb	r2, [r1, #10]
    2ae4:	72ca      	strb	r2, [r1, #11]
    2ae6:	4995      	ldr	r1, [pc, #596]	; (2d3c <parsePreset+0x111c>)
    2ae8:	700b      	strb	r3, [r1, #0]
		mappings[i].destNumber = 255;
    2aea:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
    2aec:	4b94      	ldr	r3, [pc, #592]	; (2d40 <parsePreset+0x1120>)
    2aee:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    2af0:	4b94      	ldr	r3, [pc, #592]	; (2d44 <parsePreset+0x1124>)
    2af2:	601a      	str	r2, [r3, #0]
		envOn[i] = 0;
    2af4:	4b94      	ldr	r3, [pc, #592]	; (2d48 <parsePreset+0x1128>)
    2af6:	601a      	str	r2, [r3, #0]
		knobFrozen[i] = 0;
    2af8:	465b      	mov	r3, fp
		mappings[i].destNumber = 255;
    2afa:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2afc:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    2afe:	f843 2c04 	str.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2b02:	4298      	cmp	r0, r3
    2b04:	d1f9      	bne.n	2afa <parsePreset+0xeda>
	for (int i = 0; i < mappingCount; i++)
    2b06:	9b07      	ldr	r3, [sp, #28]
    2b08:	2b00      	cmp	r3, #0
    2b0a:	f000 8251 	beq.w	2fb0 <parsePreset+0x1390>
    2b0e:	2300      	movs	r3, #0
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2b10:	f8cd a004 	str.w	sl, [sp, #4]
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2b14:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 2d4c <parsePreset+0x112c>
				foundOne = 1;
    2b18:	f04f 0801 	mov.w	r8, #1
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2b1c:	9e06      	ldr	r6, [sp, #24]
    2b1e:	46a2      	mov	sl, r4
	for (int i = 0; i < mappingCount; i++)
    2b20:	9303      	str	r3, [sp, #12]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2b22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		uint8_t destNumber = buffer[bufferIndex+1];
    2b26:	9b01      	ldr	r3, [sp, #4]
    2b28:	4453      	add	r3, sl
    2b2a:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    2b2c:	2e00      	cmp	r6, #0
    2b2e:	f000 8192 	beq.w	2e56 <parsePreset+0x1236>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    2b32:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    2b34:	2300      	movs	r3, #0
    2b36:	465a      	mov	r2, fp
    2b38:	461f      	mov	r7, r3
    2b3a:	461c      	mov	r4, r3
    2b3c:	e003      	b.n	2b46 <parsePreset+0xf26>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2b3e:	3301      	adds	r3, #1
    2b40:	324c      	adds	r2, #76	; 0x4c
    2b42:	2b20      	cmp	r3, #32
    2b44:	d00c      	beq.n	2b60 <parsePreset+0xf40>
			if (mappings[j].destNumber == destNumber)
    2b46:	7811      	ldrb	r1, [r2, #0]
    2b48:	4281      	cmp	r1, r0
    2b4a:	d1f8      	bne.n	2b3e <parsePreset+0xf1e>
				foundOne = 1;
    2b4c:	2701      	movs	r7, #1
    2b4e:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    2b50:	2e00      	cmp	r6, #0
    2b52:	d1f4      	bne.n	2b3e <parsePreset+0xf1e>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2b54:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    2b56:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2b5a:	324c      	adds	r2, #76	; 0x4c
    2b5c:	2b20      	cmp	r3, #32
    2b5e:	d1f2      	bne.n	2b46 <parsePreset+0xf26>
		if (foundOne == 0)
    2b60:	b99f      	cbnz	r7, 2b8a <parsePreset+0xf6a>
			whichMapping = numMappings;
    2b62:	4977      	ldr	r1, [pc, #476]	; (2d40 <parsePreset+0x1120>)
			mappings[whichMapping].dest = &params[destNumber];
    2b64:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2b68:	9c09      	ldr	r4, [sp, #36]	; 0x24
			if (presetVersionNumber == 0)
    2b6a:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    2b6c:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    2b6e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    2b72:	bf08      	it	eq
    2b74:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    2b76:	461c      	mov	r4, r3
			numMappings++;
    2b78:	3301      	adds	r3, #1
    2b7a:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    2b7c:	234c      	movs	r3, #76	; 0x4c
    2b7e:	fb03 f304 	mul.w	r3, r3, r4
    2b82:	f80b 0003 	strb.w	r0, [fp, r3]
    2b86:	445b      	add	r3, fp
			mappings[whichMapping].dest = &params[destNumber];
    2b88:	605a      	str	r2, [r3, #4]
		int source = buffer[bufferIndex];
    2b8a:	9b01      	ldr	r3, [sp, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2b8c:	1c6a      	adds	r2, r5, #1
    2b8e:	4870      	ldr	r0, [pc, #448]	; (2d50 <parsePreset+0x1130>)
		int source = buffer[bufferIndex];
    2b90:	f813 700a 	ldrb.w	r7, [r3, sl]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2b94:	234c      	movs	r3, #76	; 0x4c
    2b96:	fb03 f304 	mul.w	r3, r3, r4
    2b9a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2b9e:	2f03      	cmp	r7, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2ba0:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
    2ba4:	f100 0004 	add.w	r0, r0, #4
    2ba8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2bac:	445b      	add	r3, fp
    2bae:	4459      	add	r1, fp
    2bb0:	442b      	add	r3, r5
    2bb2:	60c8      	str	r0, [r1, #12]
    2bb4:	4866      	ldr	r0, [pc, #408]	; (2d50 <parsePreset+0x1130>)
    2bb6:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
    2bba:	f84b 1002 	str.w	r1, [fp, r2]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2bbe:	bfd4      	ite	le
    2bc0:	2200      	movle	r2, #0
    2bc2:	2201      	movgt	r2, #1
    2bc4:	f883 2020 	strb.w	r2, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2bc8:	b23a      	sxth	r2, r7
    2bca:	f1a7 0318 	sub.w	r3, r7, #24
    2bce:	920a      	str	r2, [sp, #40]	; 0x28
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2bd0:	00ea      	lsls	r2, r5, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2bd2:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2bd4:	9204      	str	r2, [sp, #16]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2bd6:	f200 8134 	bhi.w	2e42 <parsePreset+0x1222>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    2bda:	4b5a      	ldr	r3, [pc, #360]	; (2d44 <parsePreset+0x1124>)
    2bdc:	443b      	add	r3, r7
    2bde:	f803 8c18 	strb.w	r8, [r3, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    2be2:	2f02      	cmp	r7, #2
    2be4:	d802      	bhi.n	2bec <parsePreset+0xfcc>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    2be6:	4b5b      	ldr	r3, [pc, #364]	; (2d54 <parsePreset+0x1134>)
    2be8:	f803 8007 	strb.w	r8, [r3, r7]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    2bec:	2f03      	cmp	r7, #3
    2bee:	f000 8142 	beq.w	2e76 <parsePreset+0x1256>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2bf2:	3f04      	subs	r7, #4
    2bf4:	2f0b      	cmp	r7, #11
    2bf6:	f240 815a 	bls.w	2eae <parsePreset+0x128e>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2bfa:	b2fb      	uxtb	r3, r7
    2bfc:	4a56      	ldr	r2, [pc, #344]	; (2d58 <parsePreset+0x1138>)
    2bfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c02:	930b      	str	r3, [sp, #44]	; 0x2c
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2c04:	b2fb      	uxtb	r3, r7
    2c06:	9304      	str	r3, [sp, #16]
		int scalar = buffer[bufferIndex+2];
    2c08:	9b01      	ldr	r3, [sp, #4]
    2c0a:	4453      	add	r3, sl
    2c0c:	f893 9002 	ldrb.w	r9, [r3, #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2c10:	ea4f 0349 	mov.w	r3, r9, lsl #1
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c14:	f1a9 0018 	sub.w	r0, r9, #24
			if (scalar == 0xff)
    2c18:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2c1c:	fa0f f289 	sxth.w	r2, r9
    2c20:	9306      	str	r3, [sp, #24]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2c22:	f1a9 0314 	sub.w	r3, r9, #20
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c26:	9005      	str	r0, [sp, #20]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2c28:	9308      	str	r3, [sp, #32]
			if (scalar == 0xff)
    2c2a:	f000 8116 	beq.w	2e5a <parsePreset+0x123a>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2c2e:	4b48      	ldr	r3, [pc, #288]	; (2d50 <parsePreset+0x1130>)
    2c30:	1d29      	adds	r1, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c32:	2803      	cmp	r0, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2c34:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2c38:	f04f 034c 	mov.w	r3, #76	; 0x4c
    2c3c:	fb03 f304 	mul.w	r3, r3, r4
    2c40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2c44:	445b      	add	r3, fp
    2c46:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c48:	f200 811f 	bhi.w	2e8a <parsePreset+0x126a>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2c4c:	4b3d      	ldr	r3, [pc, #244]	; (2d44 <parsePreset+0x1124>)
    2c4e:	444b      	add	r3, r9
    2c50:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2c54:	f1b9 0f02 	cmp.w	r9, #2
    2c58:	d802      	bhi.n	2c60 <parsePreset+0x1040>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2c5a:	4b3e      	ldr	r3, [pc, #248]	; (2d54 <parsePreset+0x1134>)
    2c5c:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2c60:	f1b9 0f03 	cmp.w	r9, #3
    2c64:	d102      	bne.n	2c6c <parsePreset+0x104c>
					noiseOn = 1;
    2c66:	4b3d      	ldr	r3, [pc, #244]	; (2d5c <parsePreset+0x113c>)
    2c68:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2c6c:	2f0b      	cmp	r7, #11
    2c6e:	f240 814f 	bls.w	2f10 <parsePreset+0x12f0>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2c72:	224c      	movs	r2, #76	; 0x4c
    2c74:	00eb      	lsls	r3, r5, #3
    2c76:	4936      	ldr	r1, [pc, #216]	; (2d50 <parsePreset+0x1130>)
    2c78:	fb02 3304 	mla	r3, r2, r4, r3
    2c7c:	9a06      	ldr	r2, [sp, #24]
    2c7e:	3201      	adds	r2, #1
    2c80:	445b      	add	r3, fp
    2c82:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2c86:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c88:	9b05      	ldr	r3, [sp, #20]
    2c8a:	2b03      	cmp	r3, #3
    2c8c:	f200 8106 	bhi.w	2e9c <parsePreset+0x127c>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2c90:	4b2c      	ldr	r3, [pc, #176]	; (2d44 <parsePreset+0x1124>)
    2c92:	444b      	add	r3, r9
    2c94:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2c98:	f1b9 0f02 	cmp.w	r9, #2
    2c9c:	d802      	bhi.n	2ca4 <parsePreset+0x1084>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2c9e:	4b2d      	ldr	r3, [pc, #180]	; (2d54 <parsePreset+0x1134>)
    2ca0:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2ca4:	f1b9 0f03 	cmp.w	r9, #3
    2ca8:	d102      	bne.n	2cb0 <parsePreset+0x1090>
					noiseOn = 1;
    2caa:	4b2c      	ldr	r3, [pc, #176]	; (2d5c <parsePreset+0x113c>)
    2cac:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2cb0:	2f0b      	cmp	r7, #11
    2cb2:	f240 8158 	bls.w	2f66 <parsePreset+0x1346>
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2cb6:	9b01      	ldr	r3, [sp, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2cb8:	214c      	movs	r1, #76	; 0x4c
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2cba:	eb03 020a 	add.w	r2, r3, sl
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2cbe:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2cc2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    2cc6:	fb01 b404 	mla	r4, r1, r4, fp
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2cca:	78d1      	ldrb	r1, [r2, #3]
    2ccc:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2cce:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    2cd0:	4425      	add	r5, r4
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2cd2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2cd6:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		mappings[whichMapping].hookActive[whichHook] = 1;
    2cda:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2cde:	b212      	sxth	r2, r2
    2ce0:	ee07 2a90 	vmov	s15, r2
    2ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2ce8:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2cec:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    2cf0:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2cf4:	3301      	adds	r3, #1
    2cf6:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    2cfa:	2e00      	cmp	r6, #0
    2cfc:	f000 809c 	beq.w	2e38 <parsePreset+0x1218>
			bufferIndex += 6;
    2d00:	f10a 0306 	add.w	r3, sl, #6
    2d04:	fa1f fa83 	uxth.w	sl, r3
	for (int i = 0; i < mappingCount; i++)
    2d08:	9b03      	ldr	r3, [sp, #12]
    2d0a:	9a07      	ldr	r2, [sp, #28]
    2d0c:	3301      	adds	r3, #1
    2d0e:	4293      	cmp	r3, r2
    2d10:	9303      	str	r3, [sp, #12]
    2d12:	f47f af08 	bne.w	2b26 <parsePreset+0xf06>
	for (int i = 0; i < numMappings; i++)
    2d16:	4b0a      	ldr	r3, [pc, #40]	; (2d40 <parsePreset+0x1120>)
    2d18:	781a      	ldrb	r2, [r3, #0]
    2d1a:	2a00      	cmp	r2, #0
    2d1c:	f000 8148 	beq.w	2fb0 <parsePreset+0x1390>
    2d20:	4c0f      	ldr	r4, [pc, #60]	; (2d60 <parsePreset+0x1140>)
    2d22:	f04f 0800 	mov.w	r8, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    2d26:	4f0f      	ldr	r7, [pc, #60]	; (2d64 <parsePreset+0x1144>)
    2d28:	e028      	b.n	2d7c <parsePreset+0x115c>
    2d2a:	bf00      	nop
    2d2c:	20018a48 	.word	0x20018a48
    2d30:	20018a4c 	.word	0x20018a4c
    2d34:	20016091 	.word	0x20016091
    2d38:	20004dec 	.word	0x20004dec
    2d3c:	20019b74 	.word	0x20019b74
    2d40:	20018a54 	.word	0x20018a54
    2d44:	2001cac8 	.word	0x2001cac8
    2d48:	2001c944 	.word	0x2001c944
    2d4c:	37fffffc 	.word	0x37fffffc
    2d50:	2001cf80 	.word	0x2001cf80
    2d54:	2001cd60 	.word	0x2001cd60
    2d58:	20004e28 	.word	0x20004e28
    2d5c:	2001cd0c 	.word	0x2001cd0c
    2d60:	200180d0 	.word	0x200180d0
    2d64:	200004b1 	.word	0x200004b1
    2d68:	200180c8 	.word	0x200180c8
    2d6c:	00000000 	.word	0x00000000
	for (int i = 0; i < numMappings; i++)
    2d70:	f108 0801 	add.w	r8, r8, #1
    2d74:	344c      	adds	r4, #76	; 0x4c
    2d76:	4542      	cmp	r2, r8
    2d78:	f340 811a 	ble.w	2fb0 <parsePreset+0x1390>
		if (mappings[i].destNumber != 255)
    2d7c:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    2d80:	2bff      	cmp	r3, #255	; 0xff
    2d82:	d0f5      	beq.n	2d70 <parsePreset+0x1150>
			for (int v = 0; v < numStringsThisBoard; v++)
    2d84:	783b      	ldrb	r3, [r7, #0]
    2d86:	2b00      	cmp	r3, #0
    2d88:	d0f2      	beq.n	2d70 <parsePreset+0x1150>
    2d8a:	4626      	mov	r6, r4
    2d8c:	2500      	movs	r5, #0
					if (mappings[i].hookActive[j])
    2d8e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    2d92:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 2d6c <parsePreset+0x114c>
					if (mappings[i].hookActive[j])
    2d96:	b15b      	cbz	r3, 2db0 <parsePreset+0x1190>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2d98:	6832      	ldr	r2, [r6, #0]
    2d9a:	69f3      	ldr	r3, [r6, #28]
    2d9c:	edd2 7a00 	vldr	s15, [r2]
    2da0:	edd3 6a00 	vldr	s13, [r3]
    2da4:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    2da8:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2dac:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    2db0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    2db4:	b15b      	cbz	r3, 2dce <parsePreset+0x11ae>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2db6:	68b2      	ldr	r2, [r6, #8]
    2db8:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    2dba:	ed92 7a00 	vldr	s14, [r2]
    2dbe:	ed93 6a00 	vldr	s12, [r3]
    2dc2:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    2dc6:	ee27 7a06 	vmul.f32	s14, s14, s12
    2dca:	eee6 7a87 	vfma.f32	s15, s13, s14
					if (mappings[i].hookActive[j])
    2dce:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    2dd2:	b15b      	cbz	r3, 2dec <parsePreset+0x11cc>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2dd4:	6932      	ldr	r2, [r6, #16]
    2dd6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    2dd8:	ed92 7a00 	vldr	s14, [r2]
    2ddc:	ed93 6a00 	vldr	s12, [r3]
    2de0:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    2de4:	ee27 7a06 	vmul.f32	s14, s14, s12
    2de8:	eee6 7a87 	vfma.f32	s15, s13, s14
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2dec:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    2df0:	3604      	adds	r6, #4
    2df2:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2df6:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2df8:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2dfc:	ee37 0a80 	vadd.f32	s0, s15, s0
    2e00:	4798      	blx	r3
    2e02:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2e06:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2e0a:	4629      	mov	r1, r5
    2e0c:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    2e10:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    2e12:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2e14:	ed92 0a02 	vldr	s0, [r2, #8]
    2e18:	695a      	ldr	r2, [r3, #20]
    2e1a:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    2e1c:	783b      	ldrb	r3, [r7, #0]
    2e1e:	42ab      	cmp	r3, r5
    2e20:	dcb5      	bgt.n	2d8e <parsePreset+0x116e>
	for (int i = 0; i < numMappings; i++)
    2e22:	4bac      	ldr	r3, [pc, #688]	; (30d4 <_Min_Heap_Size+0xd4>)
    2e24:	781a      	ldrb	r2, [r3, #0]
    2e26:	e7a3      	b.n	2d70 <parsePreset+0x1150>
			params[i].objectNumber = 2;
    2e28:	2002      	movs	r0, #2
    2e2a:	7638      	strb	r0, [r7, #24]
    2e2c:	e606      	b.n	2a3c <parsePreset+0xe1c>
			params[i].objectNumber = 3;
    2e2e:	2003      	movs	r0, #3
    2e30:	7638      	strb	r0, [r7, #24]
    2e32:	e603      	b.n	2a3c <parsePreset+0xe1c>
		if ((i >= Osc1) && (i < Osc2))
    2e34:	2000      	movs	r0, #0
    2e36:	e601      	b.n	2a3c <parsePreset+0xe1c>
			bufferIndex += 5;
    2e38:	f10a 0305 	add.w	r3, sl, #5
    2e3c:	fa1f fa83 	uxth.w	sl, r3
    2e40:	e762      	b.n	2d08 <parsePreset+0x10e8>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2e42:	f1a7 0314 	sub.w	r3, r7, #20
    2e46:	2b03      	cmp	r3, #3
    2e48:	f63f aecb 	bhi.w	2be2 <parsePreset+0xfc2>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    2e4c:	4ba2      	ldr	r3, [pc, #648]	; (30d8 <_Min_Heap_Size+0xd8>)
    2e4e:	443b      	add	r3, r7
    2e50:	f803 8c14 	strb.w	r8, [r3, #-20]
    2e54:	e6c5      	b.n	2be2 <parsePreset+0xfc2>
		uint8_t whichHook = 0;
    2e56:	4635      	mov	r5, r6
    2e58:	e66c      	b.n	2b34 <parsePreset+0xf14>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    2e5a:	234c      	movs	r3, #76	; 0x4c
    2e5c:	1d29      	adds	r1, r5, #4
    2e5e:	00ea      	lsls	r2, r5, #3
    2e60:	fb03 f304 	mul.w	r3, r3, r4
    2e64:	441a      	add	r2, r3
    2e66:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2e6a:	499c      	ldr	r1, [pc, #624]	; (30dc <_Min_Heap_Size+0xdc>)
    2e6c:	445a      	add	r2, fp
    2e6e:	445b      	add	r3, fp
    2e70:	6291      	str	r1, [r2, #40]	; 0x28
    2e72:	6059      	str	r1, [r3, #4]
    2e74:	e71f      	b.n	2cb6 <parsePreset+0x1096>
			noiseOn = 1;
    2e76:	4b9a      	ldr	r3, [pc, #616]	; (30e0 <_Min_Heap_Size+0xe0>)
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2e78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			noiseOn = 1;
    2e7c:	f883 8000 	strb.w	r8, [r3]
    2e80:	4b98      	ldr	r3, [pc, #608]	; (30e4 <_Min_Heap_Size+0xe4>)
    2e82:	930b      	str	r3, [sp, #44]	; 0x2c
    2e84:	23ff      	movs	r3, #255	; 0xff
    2e86:	9304      	str	r3, [sp, #16]
    2e88:	e6be      	b.n	2c08 <parsePreset+0xfe8>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2e8a:	9b08      	ldr	r3, [sp, #32]
    2e8c:	2b03      	cmp	r3, #3
    2e8e:	f63f aee1 	bhi.w	2c54 <parsePreset+0x1034>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2e92:	4b91      	ldr	r3, [pc, #580]	; (30d8 <_Min_Heap_Size+0xd8>)
    2e94:	444b      	add	r3, r9
    2e96:	f803 8c14 	strb.w	r8, [r3, #-20]
    2e9a:	e6db      	b.n	2c54 <parsePreset+0x1034>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2e9c:	9b08      	ldr	r3, [sp, #32]
    2e9e:	2b03      	cmp	r3, #3
    2ea0:	f63f aefa 	bhi.w	2c98 <parsePreset+0x1078>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2ea4:	4b8c      	ldr	r3, [pc, #560]	; (30d8 <_Min_Heap_Size+0xd8>)
    2ea6:	444b      	add	r3, r9
    2ea8:	f803 8c14 	strb.w	r8, [r3, #-20]
    2eac:	e6f4      	b.n	2c98 <parsePreset+0x1078>
			for (int v = 0; v < numStringsThisBoard; v++)
    2eae:	4b8e      	ldr	r3, [pc, #568]	; (30e8 <_Min_Heap_Size+0xe8>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2eb0:	fa5f f987 	uxtb.w	r9, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    2eb4:	781a      	ldrb	r2, [r3, #0]
    2eb6:	2a00      	cmp	r2, #0
    2eb8:	f000 809a 	beq.w	2ff0 <parsePreset+0x13d0>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2ebc:	f109 0c03 	add.w	ip, r9, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2ec0:	498a      	ldr	r1, [pc, #552]	; (30ec <_Min_Heap_Size+0xec>)
    2ec2:	980a      	ldr	r0, [sp, #40]	; 0x28
    2ec4:	0092      	lsls	r2, r2, #2
    2ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ec8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2ecc:	f8cd 9010 	str.w	r9, [sp, #16]
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2ed0:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    2ed4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2ed8:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    2edc:	3108      	adds	r1, #8
    2ede:	e9cd 3c05 	strd	r3, ip, [sp, #20]
    2ee2:	f006 fbe5 	bl	96b0 <__memcpy_veneer>
    2ee6:	f8dd c018 	ldr.w	ip, [sp, #24]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2eea:	9a05      	ldr	r2, [sp, #20]
    2eec:	eba2 030c 	sub.w	r3, r2, ip
    2ef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2ef2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ef6:	ed93 0a02 	vldr	s0, [r3, #8]
    2efa:	4b7d      	ldr	r3, [pc, #500]	; (30f0 <_Min_Heap_Size+0xf0>)
    2efc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    2f00:	4618      	mov	r0, r3
    2f02:	930b      	str	r3, [sp, #44]	; 0x2c
    2f04:	f006 fc08 	bl	9718 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    2f08:	4b7a      	ldr	r3, [pc, #488]	; (30f4 <_Min_Heap_Size+0xf4>)
    2f0a:	f803 8009 	strb.w	r8, [r3, r9]
    2f0e:	e67b      	b.n	2c08 <parsePreset+0xfe8>
					for (int v = 0; v < numStringsThisBoard; v++)
    2f10:	4b75      	ldr	r3, [pc, #468]	; (30e8 <_Min_Heap_Size+0xe8>)
    2f12:	781a      	ldrb	r2, [r3, #0]
    2f14:	2a00      	cmp	r2, #0
    2f16:	f000 8083 	beq.w	3020 <_Min_Heap_Size+0x20>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f1a:	9b04      	ldr	r3, [sp, #16]
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2f1c:	0092      	lsls	r2, r2, #2
    2f1e:	4973      	ldr	r1, [pc, #460]	; (30ec <_Min_Heap_Size+0xec>)
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f20:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2f24:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f28:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2f2c:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    2f30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2f34:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    2f38:	3108      	adds	r1, #8
    2f3a:	e9cd 3c0c 	strd	r3, ip, [sp, #48]	; 0x30
    2f3e:	f006 fbb7 	bl	96b0 <__memcpy_veneer>
    2f42:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2f48:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2f4a:	eba2 030c 	sub.w	r3, r2, ip
    2f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f54:	ed93 0a02 	vldr	s0, [r3, #8]
    2f58:	f006 fbde 	bl	9718 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    2f5c:	4b65      	ldr	r3, [pc, #404]	; (30f4 <_Min_Heap_Size+0xf4>)
    2f5e:	9a04      	ldr	r2, [sp, #16]
    2f60:	f803 8002 	strb.w	r8, [r3, r2]
    2f64:	e685      	b.n	2c72 <parsePreset+0x1052>
					for (int v = 0; v < numStringsThisBoard; v++)
    2f66:	4b60      	ldr	r3, [pc, #384]	; (30e8 <_Min_Heap_Size+0xe8>)
    2f68:	781a      	ldrb	r2, [r3, #0]
    2f6a:	2a00      	cmp	r2, #0
    2f6c:	d048      	beq.n	3000 <_Min_Heap_Size>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2f6e:	4b5f      	ldr	r3, [pc, #380]	; (30ec <_Min_Heap_Size+0xec>)
    2f70:	0092      	lsls	r2, r2, #2
    2f72:	990a      	ldr	r1, [sp, #40]	; 0x28
    2f74:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f78:	9b04      	ldr	r3, [sp, #16]
    2f7a:	f103 0903 	add.w	r9, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f80:	ebc9 01c9 	rsb	r1, r9, r9, lsl #3
    2f84:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    2f88:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2f8c:	3108      	adds	r1, #8
    2f8e:	f006 fb8f 	bl	96b0 <__memcpy_veneer>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f94:	eba7 0309 	sub.w	r3, r7, r9
    2f98:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2f9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f9e:	ed93 0a02 	vldr	s0, [r3, #8]
    2fa2:	f006 fbb9 	bl	9718 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    2fa6:	4b53      	ldr	r3, [pc, #332]	; (30f4 <_Min_Heap_Size+0xf4>)
    2fa8:	9a04      	ldr	r2, [sp, #16]
    2faa:	f803 8002 	strb.w	r8, [r3, r2]
    2fae:	e682      	b.n	2cb6 <parsePreset+0x1096>
	presetWaitingToParse = 0;
    2fb0:	4b51      	ldr	r3, [pc, #324]	; (30f8 <_Min_Heap_Size+0xf8>)
    2fb2:	2400      	movs	r4, #0
	currentActivePreset = presetNumber;
    2fb4:	f89d 2008 	ldrb.w	r2, [sp, #8]
	overSampled = 1;
    2fb8:	2501      	movs	r5, #1
	presetWaitingToParse = 0;
    2fba:	601c      	str	r4, [r3, #0]
	currentActivePreset = presetNumber;
    2fbc:	4b4f      	ldr	r3, [pc, #316]	; (30fc <_Min_Heap_Size+0xfc>)
	changeOversampling(overSampled);
    2fbe:	4628      	mov	r0, r5
	currentActivePreset = presetNumber;
    2fc0:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    2fc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    2fc6:	4a4e      	ldr	r2, [pc, #312]	; (3100 <_Min_Heap_Size+0x100>)
    2fc8:	6013      	str	r3, [r2, #0]
	oscToTick = NUM_OSC;
    2fca:	2203      	movs	r2, #3
    2fcc:	4b4d      	ldr	r3, [pc, #308]	; (3104 <_Min_Heap_Size+0x104>)
    2fce:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    2fd0:	4b4d      	ldr	r3, [pc, #308]	; (3108 <_Min_Heap_Size+0x108>)
    2fd2:	601d      	str	r5, [r3, #0]
	changeOversampling(overSampled);
    2fd4:	f006 f980 	bl	92d8 <__changeOversampling_veneer>
    2fd8:	b662      	cpsie	i
	diskBusy = 0;
    2fda:	4a4c      	ldr	r2, [pc, #304]	; (310c <_Min_Heap_Size+0x10c>)
	receivingI2C = 0;
    2fdc:	4b4c      	ldr	r3, [pc, #304]	; (3110 <_Min_Heap_Size+0x110>)
	presetReady = 1;
    2fde:	494d      	ldr	r1, [pc, #308]	; (3114 <_Min_Heap_Size+0x114>)
	diskBusy = 0;
    2fe0:	7014      	strb	r4, [r2, #0]
	presetReady = 1;
    2fe2:	600d      	str	r5, [r1, #0]
	receivingI2C = 0;
    2fe4:	701c      	strb	r4, [r3, #0]
}
    2fe6:	b00f      	add	sp, #60	; 0x3c
    2fe8:	ecbd 8b02 	vpop	{d8}
    2fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2ff0:	f109 0c03 	add.w	ip, r9, #3
    2ff4:	f8cd 9010 	str.w	r9, [sp, #16]
    2ff8:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    2ffc:	9305      	str	r3, [sp, #20]
    2ffe:	e774      	b.n	2eea <parsePreset+0x12ca>
    3000:	9b04      	ldr	r3, [sp, #16]
    3002:	f103 0903 	add.w	r9, r3, #3
    3006:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    300a:	e7c2      	b.n	2f92 <parsePreset+0x1372>
			oscOn[i] = 0;
    300c:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    300e:	4610      	mov	r0, r2
    3010:	f7ff bb32 	b.w	2678 <parsePreset+0xa58>
			oscOn[i] = 0;
    3014:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    3016:	4610      	mov	r0, r2
    3018:	f7ff baf8 	b.w	260c <parsePreset+0x9ec>
		pedalControlsMaster = 1;
    301c:	2301      	movs	r3, #1
    301e:	e54d      	b.n	2abc <parsePreset+0xe9c>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3020:	9b04      	ldr	r3, [sp, #16]
    3022:	f103 0c03 	add.w	ip, r3, #3
    3026:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    302a:	920c      	str	r2, [sp, #48]	; 0x30
    302c:	e78b      	b.n	2f46 <parsePreset+0x1326>
			  shapeTick[i] = &triTick;
    302e:	4a3a      	ldr	r2, [pc, #232]	; (3118 <_Min_Heap_Size+0x118>)
    3030:	483a      	ldr	r0, [pc, #232]	; (311c <_Min_Heap_Size+0x11c>)
    3032:	6090      	str	r0, [r2, #8]
			  break;
    3034:	f7ff bb11 	b.w	265a <parsePreset+0xa3a>
			  shapeTick[i] = &pulseTick;
    3038:	4a37      	ldr	r2, [pc, #220]	; (3118 <_Min_Heap_Size+0x118>)
    303a:	4839      	ldr	r0, [pc, #228]	; (3120 <_Min_Heap_Size+0x120>)
    303c:	6090      	str	r0, [r2, #8]
			  break;
    303e:	f7ff bb0c 	b.w	265a <parsePreset+0xa3a>
			  shapeTick[i] = &sawTick;
    3042:	4a35      	ldr	r2, [pc, #212]	; (3118 <_Min_Heap_Size+0x118>)
    3044:	4837      	ldr	r0, [pc, #220]	; (3124 <_Min_Heap_Size+0x124>)
    3046:	6090      	str	r0, [r2, #8]
			  break;
    3048:	f7ff bb07 	b.w	265a <parsePreset+0xa3a>
			  shapeTick[i] = &sineTriTick;
    304c:	4a32      	ldr	r2, [pc, #200]	; (3118 <_Min_Heap_Size+0x118>)
    304e:	4836      	ldr	r0, [pc, #216]	; (3128 <_Min_Heap_Size+0x128>)
    3050:	6090      	str	r0, [r2, #8]
			  break;
    3052:	f7ff bb02 	b.w	265a <parsePreset+0xa3a>
			  shapeTick[i] = &sawSquareTick;
    3056:	4a30      	ldr	r2, [pc, #192]	; (3118 <_Min_Heap_Size+0x118>)
    3058:	4834      	ldr	r0, [pc, #208]	; (312c <_Min_Heap_Size+0x12c>)
    305a:	6090      	str	r0, [r2, #8]
			  break;
    305c:	f7ff bafd 	b.w	265a <parsePreset+0xa3a>
			  shapeTick[i] = &triTick;
    3060:	4a2d      	ldr	r2, [pc, #180]	; (3118 <_Min_Heap_Size+0x118>)
    3062:	482e      	ldr	r0, [pc, #184]	; (311c <_Min_Heap_Size+0x11c>)
    3064:	6050      	str	r0, [r2, #4]
			  break;
    3066:	f7ff bac2 	b.w	25ee <parsePreset+0x9ce>
			  shapeTick[i] = &sineTick;
    306a:	4a2b      	ldr	r2, [pc, #172]	; (3118 <_Min_Heap_Size+0x118>)
    306c:	4830      	ldr	r0, [pc, #192]	; (3130 <_Min_Heap_Size+0x130>)
    306e:	6050      	str	r0, [r2, #4]
			  break;
    3070:	f7ff babd 	b.w	25ee <parsePreset+0x9ce>
			  shapeTick[i] = &pulseTick;
    3074:	4a28      	ldr	r2, [pc, #160]	; (3118 <_Min_Heap_Size+0x118>)
    3076:	482a      	ldr	r0, [pc, #168]	; (3120 <_Min_Heap_Size+0x120>)
    3078:	6050      	str	r0, [r2, #4]
			  break;
    307a:	f7ff bab8 	b.w	25ee <parsePreset+0x9ce>
			  shapeTick[i] = &sawTick;
    307e:	4a26      	ldr	r2, [pc, #152]	; (3118 <_Min_Heap_Size+0x118>)
    3080:	4828      	ldr	r0, [pc, #160]	; (3124 <_Min_Heap_Size+0x124>)
    3082:	6050      	str	r0, [r2, #4]
			  break;
    3084:	f7ff bab3 	b.w	25ee <parsePreset+0x9ce>
			  shapeTick[i] = &sawSquareTick;
    3088:	4a23      	ldr	r2, [pc, #140]	; (3118 <_Min_Heap_Size+0x118>)
    308a:	4828      	ldr	r0, [pc, #160]	; (312c <_Min_Heap_Size+0x12c>)
    308c:	6050      	str	r0, [r2, #4]
			  break;
    308e:	f7ff baae 	b.w	25ee <parsePreset+0x9ce>
			  shapeTick[i] = &triTick;
    3092:	4b21      	ldr	r3, [pc, #132]	; (3118 <_Min_Heap_Size+0x118>)
    3094:	4a21      	ldr	r2, [pc, #132]	; (311c <_Min_Heap_Size+0x11c>)
    3096:	601a      	str	r2, [r3, #0]
			  break;
    3098:	f7ff ba51 	b.w	253e <parsePreset+0x91e>
			  shapeTick[i] = &sineTick;
    309c:	4b1e      	ldr	r3, [pc, #120]	; (3118 <_Min_Heap_Size+0x118>)
    309e:	4a24      	ldr	r2, [pc, #144]	; (3130 <_Min_Heap_Size+0x130>)
    30a0:	601a      	str	r2, [r3, #0]
			  break;
    30a2:	f7ff ba4c 	b.w	253e <parsePreset+0x91e>
			  shapeTick[i] = &pulseTick;
    30a6:	4b1c      	ldr	r3, [pc, #112]	; (3118 <_Min_Heap_Size+0x118>)
    30a8:	4a1d      	ldr	r2, [pc, #116]	; (3120 <_Min_Heap_Size+0x120>)
    30aa:	601a      	str	r2, [r3, #0]
			  break;
    30ac:	f7ff ba47 	b.w	253e <parsePreset+0x91e>
			  shapeTick[i] = &sawTick;
    30b0:	4b19      	ldr	r3, [pc, #100]	; (3118 <_Min_Heap_Size+0x118>)
    30b2:	4a1c      	ldr	r2, [pc, #112]	; (3124 <_Min_Heap_Size+0x124>)
    30b4:	601a      	str	r2, [r3, #0]
			  break;
    30b6:	f7ff ba42 	b.w	253e <parsePreset+0x91e>
			  shapeTick[i] = &sawSquareTick;
    30ba:	4b17      	ldr	r3, [pc, #92]	; (3118 <_Min_Heap_Size+0x118>)
    30bc:	4a1b      	ldr	r2, [pc, #108]	; (312c <_Min_Heap_Size+0x12c>)
    30be:	601a      	str	r2, [r3, #0]
			  break;
    30c0:	f7ff ba3d 	b.w	253e <parsePreset+0x91e>
    30c4:	4c1b      	ldr	r4, [pc, #108]	; (3134 <_Min_Heap_Size+0x134>)
    30c6:	f7ff b961 	b.w	238c <parsePreset+0x76c>
    30ca:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3138 <_Min_Heap_Size+0x138>
    30ce:	f7ff b94b 	b.w	2368 <parsePreset+0x748>
    30d2:	bf00      	nop
    30d4:	20018a54 	.word	0x20018a54
    30d8:	2001c944 	.word	0x2001c944
    30dc:	2000072c 	.word	0x2000072c
    30e0:	2001cd0c 	.word	0x2001cd0c
    30e4:	20005224 	.word	0x20005224
    30e8:	200004b1 	.word	0x200004b1
    30ec:	2001cf80 	.word	0x2001cf80
    30f0:	20004e28 	.word	0x20004e28
    30f4:	20004dec 	.word	0x20004dec
    30f8:	20019b94 	.word	0x20019b94
    30fc:	20000728 	.word	0x20000728
    3100:	20000724 	.word	0x20000724
    3104:	2000074c 	.word	0x2000074c
    3108:	20000750 	.word	0x20000750
    310c:	20013f10 	.word	0x20013f10
    3110:	20019fa8 	.word	0x20019fa8
    3114:	20004f1c 	.word	0x20004f1c
    3118:	2001cf04 	.word	0x2001cf04
    311c:	00006061 	.word	0x00006061
    3120:	00005fc1 	.word	0x00005fc1
    3124:	00005f81 	.word	0x00005f81
    3128:	00005f21 	.word	0x00005f21
    312c:	00005ec1 	.word	0x00005ec1
    3130:	00006021 	.word	0x00006021
    3134:	20019b74 	.word	0x20019b74
    3138:	20018a64 	.word	0x20018a64
    313c:	f3af 8000 	nop.w

00003140 <handleSPI>:
	if (foundBrainFirmware)
    3140:	4971      	ldr	r1, [pc, #452]	; (3308 <handleSPI+0x1c8>)
	interruptChecker = 1;
    3142:	4b72      	ldr	r3, [pc, #456]	; (330c <handleSPI+0x1cc>)
{
    3144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    3148:	2501      	movs	r5, #1
{
    314a:	4604      	mov	r4, r0
    314c:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    3150:	780a      	ldrb	r2, [r1, #0]
{
    3152:	b085      	sub	sp, #20
	interruptChecker = 1;
    3154:	701d      	strb	r5, [r3, #0]
	if (foundBrainFirmware)
    3156:	b34a      	cbz	r2, 31ac <handleSPI+0x6c>
		if (brainFirmwareEndSignal)
    3158:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 3324 <handleSPI+0x1e4>
    315c:	f8d9 0000 	ldr.w	r0, [r9]
    3160:	2800      	cmp	r0, #0
    3162:	d03f      	beq.n	31e4 <handleSPI+0xa4>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3164:	4b6a      	ldr	r3, [pc, #424]	; (3310 <handleSPI+0x1d0>)
    3166:	20f9      	movs	r0, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3168:	4a6a      	ldr	r2, [pc, #424]	; (3314 <handleSPI+0x1d4>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    316a:	4423      	add	r3, r4
			brainFirmwareSendInProgress = 0;
    316c:	4c6a      	ldr	r4, [pc, #424]	; (3318 <handleSPI+0x1d8>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    316e:	6812      	ldr	r2, [r2, #0]
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    3170:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    3174:	2000      	movs	r0, #0
			foundBrainFirmware = 0;
    3176:	7008      	strb	r0, [r1, #0]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    3178:	0c11      	lsrs	r1, r2, #16
			brainFirmwareSendInProgress = 0;
    317a:	6020      	str	r0, [r4, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    317c:	0e14      	lsrs	r4, r2, #24
			brainFirmwareEndSignal = 0;
    317e:	f8c9 0000 	str.w	r0, [r9]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3182:	0a10      	lsrs	r0, r2, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3184:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    3186:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    318a:	f04f 01fe 	mov.w	r1, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    318e:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3192:	bf18      	it	ne
    3194:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3196:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    319a:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    319e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    31a2:	b005      	add	sp, #20
    31a4:	ecbd 8b02 	vpop	{d8}
    31a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    31ac:	4d58      	ldr	r5, [pc, #352]	; (3310 <handleSPI+0x1d0>)
    31ae:	5c2b      	ldrb	r3, [r5, r0]
    31b0:	2b01      	cmp	r3, #1
    31b2:	f000 80bb 	beq.w	332c <handleSPI+0x1ec>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    31b6:	2b0c      	cmp	r3, #12
    31b8:	f200 826a 	bhi.w	3690 <handleSPI+0x550>
    31bc:	2b01      	cmp	r3, #1
    31be:	f240 8143 	bls.w	3448 <handleSPI+0x308>
    31c2:	3b02      	subs	r3, #2
    31c4:	2b0a      	cmp	r3, #10
    31c6:	f200 813f 	bhi.w	3448 <handleSPI+0x308>
    31ca:	e8df f013 	tbh	[pc, r3, lsl #1]
    31ce:	02bd      	.short	0x02bd
    31d0:	013d031b 	.word	0x013d031b
    31d4:	0421013d 	.word	0x0421013d
    31d8:	013d04a5 	.word	0x013d04a5
    31dc:	0531013d 	.word	0x0531013d
    31e0:	054702f0 	.word	0x054702f0
		else if (brainFirmwareSendInProgress)
    31e4:	4a4c      	ldr	r2, [pc, #304]	; (3318 <handleSPI+0x1d8>)
    31e6:	6813      	ldr	r3, [r2, #0]
    31e8:	2b00      	cmp	r3, #0
    31ea:	f000 8269 	beq.w	36c0 <handleSPI+0x580>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    31ee:	4d48      	ldr	r5, [pc, #288]	; (3310 <handleSPI+0x1d0>)
    31f0:	23fb      	movs	r3, #251	; 0xfb
    31f2:	f8df b134 	ldr.w	fp, [pc, #308]	; 3328 <handleSPI+0x1e8>
    31f6:	eb05 0a04 	add.w	sl, r5, r4
    31fa:	4f48      	ldr	r7, [pc, #288]	; (331c <handleSPI+0x1dc>)
    31fc:	f8db 2000 	ldr.w	r2, [fp]
    3200:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
			for (int i = 0; i < 30; i++)
    3204:	4b46      	ldr	r3, [pc, #280]	; (3320 <handleSPI+0x1e0>)
    3206:	8819      	ldrh	r1, [r3, #0]
    3208:	e032      	b.n	3270 <handleSPI+0x130>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    320a:	2e3a      	cmp	r6, #58	; 0x3a
    320c:	f000 8297 	beq.w	373e <handleSPI+0x5fe>
    3210:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    3214:	f04f 0100 	mov.w	r1, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3218:	bf08      	it	eq
    321a:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    321c:	18bb      	adds	r3, r7, r2
    321e:	789b      	ldrb	r3, [r3, #2]
    3220:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3222:	bf08      	it	eq
    3224:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3226:	18bb      	adds	r3, r7, r2
    3228:	78db      	ldrb	r3, [r3, #3]
    322a:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    322c:	bf08      	it	eq
    322e:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3230:	18bb      	adds	r3, r7, r2
    3232:	791b      	ldrb	r3, [r3, #4]
    3234:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3236:	bf08      	it	eq
    3238:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    323a:	18bb      	adds	r3, r7, r2
    323c:	795b      	ldrb	r3, [r3, #5]
    323e:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3240:	bf08      	it	eq
    3242:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3244:	18bb      	adds	r3, r7, r2
    3246:	799b      	ldrb	r3, [r3, #6]
    3248:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    324a:	bf08      	it	eq
    324c:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    324e:	18bb      	adds	r3, r7, r2
    3250:	79db      	ldrb	r3, [r3, #7]
    3252:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3254:	bf08      	it	eq
    3256:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3258:	18bb      	adds	r3, r7, r2
    325a:	7a1b      	ldrb	r3, [r3, #8]
    325c:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    325e:	bf08      	it	eq
    3260:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3262:	18bb      	adds	r3, r7, r2
    3264:	7a5b      	ldrb	r3, [r3, #9]
    3266:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3268:	bf08      	it	eq
    326a:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    326c:	281e      	cmp	r0, #30
    326e:	d03a      	beq.n	32e6 <handleSPI+0x1a6>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    3270:	5cbe      	ldrb	r6, [r7, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    3272:	f102 0c01 	add.w	ip, r2, #1
	if (('0' <= value) && (value <= '9'))
    3276:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    327a:	f817 e00c 	ldrb.w	lr, [r7, ip]
	if (('0' <= value) && (value <= '9'))
    327e:	b2db      	uxtb	r3, r3
    3280:	2b09      	cmp	r3, #9
    3282:	f240 8247 	bls.w	3714 <handleSPI+0x5d4>
	if (('a' <= value) && (value <= 'f'))
    3286:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    328a:	2b05      	cmp	r3, #5
    328c:	f240 8245 	bls.w	371a <handleSPI+0x5da>
	if (('A' <= value) && (value <= 'F'))
    3290:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    3294:	2b05      	cmp	r3, #5
    3296:	f240 824c 	bls.w	3732 <handleSPI+0x5f2>
    329a:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    329c:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
    32a0:	fa5f f888 	uxtb.w	r8, r8
    32a4:	f1b8 0f09 	cmp.w	r8, #9
    32a8:	f240 8231 	bls.w	370e <handleSPI+0x5ce>
	if (('a' <= value) && (value <= 'f'))
    32ac:	f1ae 0861 	sub.w	r8, lr, #97	; 0x61
    32b0:	f1b8 0f05 	cmp.w	r8, #5
    32b4:	f240 8237 	bls.w	3726 <handleSPI+0x5e6>
	if (('A' <= value) && (value <= 'F'))
    32b8:	f1ae 0841 	sub.w	r8, lr, #65	; 0x41
    32bc:	f1b8 0f05 	cmp.w	r8, #5
    32c0:	d804      	bhi.n	32cc <handleSPI+0x18c>
		return (uint8_t) (10 + value - 'A');
    32c2:	f1ae 0837 	sub.w	r8, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    32c6:	ea43 0308 	orr.w	r3, r3, r8
    32ca:	b2db      	uxtb	r3, r3
				if (positionInRowLine < 294)
    32cc:	f5b1 7f93 	cmp.w	r1, #294	; 0x126
    32d0:	d29b      	bcs.n	320a <handleSPI+0xca>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    32d2:	eb0a 0600 	add.w	r6, sl, r0
			for (int i = 0; i < 30; i++)
    32d6:	3001      	adds	r0, #1
				positionInRowLine++;
    32d8:	3101      	adds	r1, #1
					brainFirmwareBufferIndex += 2;
    32da:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    32dc:	281e      	cmp	r0, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    32de:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				positionInRowLine++;
    32e2:	b289      	uxth	r1, r1
			for (int i = 0; i < 30; i++)
    32e4:	d1c4      	bne.n	3270 <handleSPI+0x130>
    32e6:	4b0e      	ldr	r3, [pc, #56]	; (3320 <handleSPI+0x1e0>)
			SPI_LEVERS_TX[offset+31] = 254;
    32e8:	442c      	add	r4, r5
    32ea:	f8cb 2000 	str.w	r2, [fp]
    32ee:	8019      	strh	r1, [r3, #0]
    32f0:	23fe      	movs	r3, #254	; 0xfe
    32f2:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    32f6:	4b07      	ldr	r3, [pc, #28]	; (3314 <handleSPI+0x1d4>)
    32f8:	681b      	ldr	r3, [r3, #0]
    32fa:	4293      	cmp	r3, r2
    32fc:	f63f af51 	bhi.w	31a2 <handleSPI+0x62>
				brainFirmwareEndSignal = 1;
    3300:	2301      	movs	r3, #1
    3302:	f8c9 3000 	str.w	r3, [r9]
    3306:	e74c      	b.n	31a2 <handleSPI+0x62>
    3308:	20016090 	.word	0x20016090
    330c:	20016093 	.word	0x20016093
    3310:	30000800 	.word	0x30000800
    3314:	20013ecc 	.word	0x20013ecc
    3318:	20013ec8 	.word	0x20013ec8
    331c:	61e00000 	.word	0x61e00000
    3320:	20019b7c 	.word	0x20019b7c
    3324:	20013ec4 	.word	0x20013ec4
    3328:	20013ec0 	.word	0x20013ec0
			 for (int i = 0; i < numStringsThisBoard; i++)
    332c:	4bc6      	ldr	r3, [pc, #792]	; (3648 <handleSPI+0x508>)
    332e:	7818      	ldrb	r0, [r3, #0]
    3330:	2800      	cmp	r0, #0
    3332:	f000 8083 	beq.w	343c <handleSPI+0x2fc>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3336:	49c5      	ldr	r1, [pc, #788]	; (364c <handleSPI+0x50c>)
			 uint8_t currentByte = offset+1;
    3338:	1c63      	adds	r3, r4, #1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    333a:	ed9f 6ac5 	vldr	s12, [pc, #788]	; 3650 <handleSPI+0x510>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    333e:	680a      	ldr	r2, [r1, #0]
    3340:	b2db      	uxtb	r3, r3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3342:	eddf 6ac4 	vldr	s13, [pc, #784]	; 3654 <handleSPI+0x514>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3346:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    334a:	5cd2      	ldrb	r2, [r2, r3]
    334c:	0212      	lsls	r2, r2, #8
    334e:	ee07 2a90 	vmov	s15, r2
    3352:	680a      	ldr	r2, [r1, #0]
    3354:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    335c:	441a      	add	r2, r3
    335e:	7852      	ldrb	r2, [r2, #1]
    3360:	ee07 2a90 	vmov	s15, r2
    3364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3368:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    336c:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3370:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3378:	d507      	bpl.n	338a <handleSPI+0x24a>
    337a:	eeb5 7a40 	vcmp.f32	s14, #0.0
    337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3382:	dd02      	ble.n	338a <handleSPI+0x24a>
					stringMIDIPitches[i] = myPitch;
    3384:	4ab4      	ldr	r2, [pc, #720]	; (3658 <handleSPI+0x518>)
    3386:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    338a:	2801      	cmp	r0, #1
    338c:	d056      	beq.n	343c <handleSPI+0x2fc>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    338e:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3390:	ed9f 6aaf 	vldr	s12, [pc, #700]	; 3650 <handleSPI+0x510>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3394:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3396:	eddf 6aaf 	vldr	s13, [pc, #700]	; 3654 <handleSPI+0x514>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    339a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    339e:	5cd2      	ldrb	r2, [r2, r3]
    33a0:	0212      	lsls	r2, r2, #8
    33a2:	ee07 2a90 	vmov	s15, r2
    33a6:	680a      	ldr	r2, [r1, #0]
    33a8:	3201      	adds	r2, #1
    33aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    33ae:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    33b2:	441a      	add	r2, r3
    33b4:	7852      	ldrb	r2, [r2, #1]
    33b6:	ee07 2a90 	vmov	s15, r2
    33ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    33be:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    33c2:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    33c6:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    33ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33ce:	d507      	bpl.n	33e0 <handleSPI+0x2a0>
    33d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
    33d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33d8:	dd02      	ble.n	33e0 <handleSPI+0x2a0>
					stringMIDIPitches[i] = myPitch;
    33da:	4a9f      	ldr	r2, [pc, #636]	; (3658 <handleSPI+0x518>)
    33dc:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    33e0:	2802      	cmp	r0, #2
    33e2:	d02b      	beq.n	343c <handleSPI+0x2fc>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    33e4:	680a      	ldr	r2, [r1, #0]
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    33e6:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 3654 <handleSPI+0x514>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    33ea:	3202      	adds	r2, #2
    33ec:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    33f0:	5cd2      	ldrb	r2, [r2, r3]
    33f2:	0212      	lsls	r2, r2, #8
    33f4:	ee07 2a90 	vmov	s15, r2
    33f8:	680a      	ldr	r2, [r1, #0]
    33fa:	3202      	adds	r2, #2
    33fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3400:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3404:	441a      	add	r2, r3
    3406:	7852      	ldrb	r2, [r2, #1]
    3408:	ee06 2a90 	vmov	s13, r2
    340c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    3410:	ee77 7aa6 	vadd.f32	s15, s15, s13
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3414:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3418:	eeb5 7a40 	vcmp.f32	s14, #0.0
    341c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3420:	dd09      	ble.n	3436 <handleSPI+0x2f6>
    3422:	eddf 6a8b 	vldr	s13, [pc, #556]	; 3650 <handleSPI+0x510>
    3426:	eef4 7a66 	vcmp.f32	s15, s13
    342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    342e:	d502      	bpl.n	3436 <handleSPI+0x2f6>
					stringMIDIPitches[i] = myPitch;
    3430:	4a89      	ldr	r2, [pc, #548]	; (3658 <handleSPI+0x518>)
    3432:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3436:	2803      	cmp	r0, #3
    3438:	f040 841a 	bne.w	3c70 <handleSPI+0xb30>
			 whichBar = 0;
    343c:	4b87      	ldr	r3, [pc, #540]	; (365c <handleSPI+0x51c>)
    343e:	2200      	movs	r2, #0
			 updateStateFromSPIMessage(offset);
    3440:	4620      	mov	r0, r4
			 whichBar = 0;
    3442:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    3444:	f7fd ffdc 	bl	1400 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    3448:	4b85      	ldr	r3, [pc, #532]	; (3660 <handleSPI+0x520>)
    344a:	781b      	ldrb	r3, [r3, #0]
    344c:	2b00      	cmp	r3, #0
    344e:	f47f aea8 	bne.w	31a2 <handleSPI+0x62>
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3452:	4b84      	ldr	r3, [pc, #528]	; (3664 <handleSPI+0x524>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3454:	442c      	add	r4, r5
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3456:	4a84      	ldr	r2, [pc, #528]	; (3668 <handleSPI+0x528>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    3458:	20fd      	movs	r0, #253	; 0xfd
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    345a:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    345c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    3460:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3464:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3466:	4d81      	ldr	r5, [pc, #516]	; (366c <handleSPI+0x52c>)
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3468:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    346c:	0049      	lsls	r1, r1, #1
    346e:	5c50      	ldrb	r0, [r2, r1]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    3470:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    3472:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    3476:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    347a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    347e:	7849      	ldrb	r1, [r1, #1]
    3480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    3484:	7819      	ldrb	r1, [r3, #0]
    3486:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    348a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    348e:	7889      	ldrb	r1, [r1, #2]
    3490:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    3494:	7819      	ldrb	r1, [r3, #0]
    3496:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    349a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    349e:	78c9      	ldrb	r1, [r1, #3]
    34a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    34a4:	7819      	ldrb	r1, [r3, #0]
    34a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    34aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    34ae:	7909      	ldrb	r1, [r1, #4]
    34b0:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    34b4:	7819      	ldrb	r1, [r3, #0]
    34b6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    34ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    34be:	7949      	ldrb	r1, [r1, #5]
    34c0:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    34c4:	7819      	ldrb	r1, [r3, #0]
    34c6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    34ca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    34ce:	7989      	ldrb	r1, [r1, #6]
    34d0:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    34d4:	7819      	ldrb	r1, [r3, #0]
    34d6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    34da:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    34de:	79c9      	ldrb	r1, [r1, #7]
    34e0:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    34e4:	7819      	ldrb	r1, [r3, #0]
    34e6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    34ea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    34ee:	7a09      	ldrb	r1, [r1, #8]
    34f0:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    34f4:	7819      	ldrb	r1, [r3, #0]
    34f6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    34fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    34fe:	7a49      	ldrb	r1, [r1, #9]
    3500:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3504:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3506:	782e      	ldrb	r6, [r5, #0]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3508:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    350c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3510:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3514:	7a89      	ldrb	r1, [r1, #10]
    3516:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    351a:	7819      	ldrb	r1, [r3, #0]
    351c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3520:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3524:	7ac9      	ldrb	r1, [r1, #11]
    3526:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    352a:	7819      	ldrb	r1, [r3, #0]
    352c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3530:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3534:	7b09      	ldrb	r1, [r1, #12]
    3536:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    353a:	7819      	ldrb	r1, [r3, #0]
    353c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    3540:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3544:	eb06 0186 	add.w	r1, r6, r6, lsl #2
				whichMacroToSendName = (whichMacroToSendName + 1);
    3548:	3601      	adds	r6, #1
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    354a:	7b52      	ldrb	r2, [r2, #13]
				whichMacroToSendName = (whichMacroToSendName + 1);
    354c:	b2f6      	uxtb	r6, r6
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    354e:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    3552:	781a      	ldrb	r2, [r3, #0]
    3554:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    3558:	00d0      	lsls	r0, r2, #3
    355a:	4a45      	ldr	r2, [pc, #276]	; (3670 <handleSPI+0x530>)
    355c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    3560:	5c10      	ldrb	r0, [r2, r0]
    3562:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    3566:	7818      	ldrb	r0, [r3, #0]
    3568:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    356c:	00c0      	lsls	r0, r0, #3
    356e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    3572:	4410      	add	r0, r2
    3574:	7840      	ldrb	r0, [r0, #1]
    3576:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    357a:	7818      	ldrb	r0, [r3, #0]
    357c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3580:	00c0      	lsls	r0, r0, #3
    3582:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    3586:	4410      	add	r0, r2
    3588:	7880      	ldrb	r0, [r0, #2]
    358a:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    358e:	7818      	ldrb	r0, [r3, #0]
    3590:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3594:	00c0      	lsls	r0, r0, #3
    3596:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    359a:	4410      	add	r0, r2
    359c:	78c0      	ldrb	r0, [r0, #3]
    359e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    35a2:	7818      	ldrb	r0, [r3, #0]
    35a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    35a8:	00c0      	lsls	r0, r0, #3
    35aa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    35ae:	4410      	add	r0, r2
    35b0:	7900      	ldrb	r0, [r0, #4]
    35b2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    35b6:	7818      	ldrb	r0, [r3, #0]
    35b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    35bc:	00c0      	lsls	r0, r0, #3
    35be:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    35c2:	4410      	add	r0, r2
    35c4:	7940      	ldrb	r0, [r0, #5]
    35c6:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    35ca:	7818      	ldrb	r0, [r3, #0]
    35cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    35d0:	00c0      	lsls	r0, r0, #3
    35d2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    35d6:	4410      	add	r0, r2
    35d8:	7980      	ldrb	r0, [r0, #6]
    35da:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    35de:	7818      	ldrb	r0, [r3, #0]
    35e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    35e4:	00c0      	lsls	r0, r0, #3
    35e6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    35ea:	4410      	add	r0, r2
    35ec:	79c0      	ldrb	r0, [r0, #7]
    35ee:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    35f2:	7818      	ldrb	r0, [r3, #0]
    35f4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    35f8:	00c0      	lsls	r0, r0, #3
    35fa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    35fe:	4410      	add	r0, r2
    3600:	7a00      	ldrb	r0, [r0, #8]
    3602:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    3606:	7818      	ldrb	r0, [r3, #0]
    3608:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    360c:	00c0      	lsls	r0, r0, #3
    360e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    3612:	440a      	add	r2, r1
    3614:	7a52      	ldrb	r2, [r2, #9]
    3616:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+27] = 13;
    361a:	220d      	movs	r2, #13
    361c:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = 13;
    3620:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = 13;
    3624:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3628:	4a12      	ldr	r2, [pc, #72]	; (3674 <handleSPI+0x534>)
    362a:	8812      	ldrh	r2, [r2, #0]
    362c:	b292      	uxth	r2, r2
    362e:	3a00      	subs	r2, #0
    3630:	bf18      	it	ne
    3632:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 12)
    3634:	2e0b      	cmp	r6, #11
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3636:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    363a:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    363e:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				if (whichMacroToSendName >= 12)
    3642:	d95e      	bls.n	3702 <handleSPI+0x5c2>
    3644:	e018      	b.n	3678 <handleSPI+0x538>
    3646:	bf00      	nop
    3648:	200004b1 	.word	0x200004b1
    364c:	20004ddc 	.word	0x20004ddc
    3650:	478bff74 	.word	0x478bff74
    3654:	3b000080 	.word	0x3b000080
    3658:	20013dec 	.word	0x20013dec
    365c:	20013e28 	.word	0x20013e28
    3660:	20013ebd 	.word	0x20013ebd
    3664:	2001c049 	.word	0x2001c049
    3668:	30042000 	.word	0x30042000
    366c:	2001c048 	.word	0x2001c048
    3670:	30043380 	.word	0x30043380
    3674:	20005342 	.word	0x20005342
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3678:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    367a:	2100      	movs	r1, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    367c:	3201      	adds	r2, #1
					whichMacroToSendName = 0;
    367e:	7029      	strb	r1, [r5, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3680:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3684:	701a      	strb	r2, [r3, #0]
}
    3686:	b005      	add	sp, #20
    3688:	ecbd 8b02 	vpop	{d8}
    368c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3690:	2bfd      	cmp	r3, #253	; 0xfd
    3692:	f47f aed9 	bne.w	3448 <handleSPI+0x308>
			if(writingState == ReceivingPreset)
    3696:	4b4a      	ldr	r3, [pc, #296]	; (37c0 <handleSPI+0x680>)
    3698:	7819      	ldrb	r1, [r3, #0]
    369a:	2902      	cmp	r1, #2
    369c:	f47f aed4 	bne.w	3448 <handleSPI+0x308>
				 presetNumberToLoad = presetNumberToSave;
    36a0:	4848      	ldr	r0, [pc, #288]	; (37c4 <handleSPI+0x684>)
				 writingState = 0;
    36a2:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    36a4:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    36a6:	4a48      	ldr	r2, [pc, #288]	; (37c8 <handleSPI+0x688>)
				 presetNumberToLoad = presetNumberToSave;
    36a8:	4948      	ldr	r1, [pc, #288]	; (37cc <handleSPI+0x68c>)
    36aa:	b2db      	uxtb	r3, r3
    36ac:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    36ae:	8813      	ldrh	r3, [r2, #0]
    36b0:	4947      	ldr	r1, [pc, #284]	; (37d0 <handleSPI+0x690>)
    36b2:	b29b      	uxth	r3, r3
    36b4:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    36b6:	8813      	ldrh	r3, [r2, #0]
    36b8:	4a46      	ldr	r2, [pc, #280]	; (37d4 <handleSPI+0x694>)
    36ba:	b29b      	uxth	r3, r3
    36bc:	6013      	str	r3, [r2, #0]
    36be:	e6c3      	b.n	3448 <handleSPI+0x308>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    36c0:	4b45      	ldr	r3, [pc, #276]	; (37d8 <handleSPI+0x698>)
    36c2:	20fc      	movs	r0, #252	; 0xfc
    36c4:	4945      	ldr	r1, [pc, #276]	; (37dc <handleSPI+0x69c>)
    36c6:	f8df b138 	ldr.w	fp, [pc, #312]	; 3800 <handleSPI+0x6c0>
			brainFirmwareSendInProgress = 1;
    36ca:	6015      	str	r5, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    36cc:	190a      	adds	r2, r1, r4
    36ce:	1c5d      	adds	r5, r3, #1
    36d0:	f8db 1000 	ldr.w	r1, [fp]
    36d4:	f103 0464 	add.w	r4, r3, #100	; 0x64
    36d8:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    36dc:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    36de:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    36e2:	283a      	cmp	r0, #58	; 0x3a
    36e4:	d101      	bne.n	36ea <handleSPI+0x5aa>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    36e6:	3202      	adds	r2, #2
    36e8:	1b51      	subs	r1, r2, r5
			for (uint8_t i = 0; i<100; i++)
    36ea:	429c      	cmp	r4, r3
    36ec:	d1f6      	bne.n	36dc <handleSPI+0x59c>
			positionInRowLine = 0;
    36ee:	4b3c      	ldr	r3, [pc, #240]	; (37e0 <handleSPI+0x6a0>)
    36f0:	2200      	movs	r2, #0
    36f2:	f8cb 1000 	str.w	r1, [fp]
    36f6:	801a      	strh	r2, [r3, #0]
}
    36f8:	b005      	add	sp, #20
    36fa:	ecbd 8b02 	vpop	{d8}
    36fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				whichMacroToSendName = (whichMacroToSendName + 1);
    3702:	702e      	strb	r6, [r5, #0]
}
    3704:	b005      	add	sp, #20
    3706:	ecbd 8b02 	vpop	{d8}
    370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    370e:	ea48 0303 	orr.w	r3, r8, r3
    3712:	e5db      	b.n	32cc <handleSPI+0x18c>
    3714:	011b      	lsls	r3, r3, #4
    3716:	b2db      	uxtb	r3, r3
    3718:	e5c0      	b.n	329c <handleSPI+0x15c>
		return (uint8_t) (10 + value - 'a');
    371a:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    371e:	011b      	lsls	r3, r3, #4
    3720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'a');
    3724:	e5ba      	b.n	329c <handleSPI+0x15c>
    3726:	f1ae 0857 	sub.w	r8, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    372a:	ea43 0308 	orr.w	r3, r3, r8
    372e:	b2db      	uxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    3730:	e5cc      	b.n	32cc <handleSPI+0x18c>
		return (uint8_t) (10 + value - 'A');
    3732:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3736:	011b      	lsls	r3, r3, #4
    3738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
    373c:	e5ae      	b.n	329c <handleSPI+0x15c>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    373e:	18bb      	adds	r3, r7, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3740:	4662      	mov	r2, ip
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    3742:	f893 e002 	ldrb.w	lr, [r3, #2]
    3746:	e563      	b.n	3210 <handleSPI+0xd0>
			 if (writingState != ReceivingPreset)
    3748:	4a1d      	ldr	r2, [pc, #116]	; (37c0 <handleSPI+0x680>)
    374a:	7813      	ldrb	r3, [r2, #0]
    374c:	2b02      	cmp	r3, #2
    374e:	f000 82c2 	beq.w	3cd6 <handleSPI+0xb96>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    3752:	4b24      	ldr	r3, [pc, #144]	; (37e4 <handleSPI+0x6a4>)
    3754:	2102      	movs	r1, #2
    3756:	0758      	lsls	r0, r3, #29
    3758:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    375a:	f040 85ca 	bne.w	42f2 <handleSPI+0x11b2>
    375e:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    3762:	2000      	movs	r0, #0
    3764:	2100      	movs	r1, #0
    3766:	e8e3 0102 	strd	r0, r1, [r3], #8
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    376a:	429a      	cmp	r2, r3
    376c:	d1fb      	bne.n	3766 <handleSPI+0x626>
				 diskBusy = 1;
    376e:	4a1e      	ldr	r2, [pc, #120]	; (37e8 <handleSPI+0x6a8>)
    3770:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    3772:	4b1e      	ldr	r3, [pc, #120]	; (37ec <handleSPI+0x6ac>)
				 diskBusy = 1;
    3774:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    3776:	2200      	movs	r2, #0
				 bufferPos = 0;
    3778:	4913      	ldr	r1, [pc, #76]	; (37c8 <handleSPI+0x688>)
				 audioMasterLevel = 0.0f;
    377a:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    377c:	2300      	movs	r3, #0
    377e:	800b      	strh	r3, [r1, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    3780:	192b      	adds	r3, r5, r4
    3782:	4a10      	ldr	r2, [pc, #64]	; (37c4 <handleSPI+0x684>)
    3784:	4e1a      	ldr	r6, [pc, #104]	; (37f0 <handleSPI+0x6b0>)
    3786:	785b      	ldrb	r3, [r3, #1]
    3788:	4f1a      	ldr	r7, [pc, #104]	; (37f4 <handleSPI+0x6b4>)
    378a:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    378c:	1ca3      	adds	r3, r4, #2
    378e:	b2db      	uxtb	r3, r3
    3790:	1e5a      	subs	r2, r3, #1
    3792:	441e      	add	r6, r3
    3794:	442a      	add	r2, r5
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    3796:	880b      	ldrh	r3, [r1, #0]
    3798:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    379c:	b29b      	uxth	r3, r3
			 for (int i = 0; i < 28; i++)
    379e:	4296      	cmp	r6, r2
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    37a0:	54f8      	strb	r0, [r7, r3]
    37a2:	f103 0301 	add.w	r3, r3, #1
    37a6:	b29b      	uxth	r3, r3
    37a8:	800b      	strh	r3, [r1, #0]
			 for (int i = 0; i < 28; i++)
    37aa:	d1f4      	bne.n	3796 <handleSPI+0x656>
    37ac:	e64c      	b.n	3448 <handleSPI+0x308>
			if (boardNumber == 0)
    37ae:	4b12      	ldr	r3, [pc, #72]	; (37f8 <handleSPI+0x6b8>)
    37b0:	781b      	ldrb	r3, [r3, #0]
    37b2:	2b00      	cmp	r3, #0
    37b4:	f47f acf5 	bne.w	31a2 <handleSPI+0x62>
				brainFirmwareUpdateRequested = 1;
    37b8:	4b10      	ldr	r3, [pc, #64]	; (37fc <handleSPI+0x6bc>)
    37ba:	2201      	movs	r2, #1
    37bc:	601a      	str	r2, [r3, #0]
    37be:	e648      	b.n	3452 <handleSPI+0x312>
    37c0:	2001c04a 	.word	0x2001c04a
    37c4:	20019b8f 	.word	0x20019b8f
    37c8:	20013ed4 	.word	0x20013ed4
    37cc:	20019b8e 	.word	0x20019b8e
    37d0:	20019b94 	.word	0x20019b94
    37d4:	20019b98 	.word	0x20019b98
    37d8:	61dfffff 	.word	0x61dfffff
    37dc:	30000800 	.word	0x30000800
    37e0:	20019b7c 	.word	0x20019b7c
    37e4:	30000000 	.word	0x30000000
    37e8:	20013f10 	.word	0x20013f10
    37ec:	20000724 	.word	0x20000724
    37f0:	3000081b 	.word	0x3000081b
    37f4:	30042380 	.word	0x30042380
    37f8:	20013ebd 	.word	0x20013ebd
    37fc:	20013ed0 	.word	0x20013ed0
    3800:	20013ec0 	.word	0x20013ec0
			 uint8_t currentByte = offset+1;
    3804:	f100 0801 	add.w	r8, r0, #1
				if (knobFrozen[i])
    3808:	4fb9      	ldr	r7, [pc, #740]	; (3af0 <handleSPI+0x9b0>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    380a:	fa5f f888 	uxtb.w	r8, r8
				if (knobFrozen[i])
    380e:	783b      	ldrb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3810:	f815 9008 	ldrb.w	r9, [r5, r8]
				if (knobFrozen[i])
    3814:	2b00      	cmp	r3, #0
    3816:	f000 826e 	beq.w	3cf6 <handleSPI+0xbb6>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    381a:	4eb6      	ldr	r6, [pc, #728]	; (3af4 <handleSPI+0x9b4>)
    381c:	7833      	ldrb	r3, [r6, #0]
    381e:	1c9a      	adds	r2, r3, #2
    3820:	4591      	cmp	r9, r2
    3822:	dc02      	bgt.n	382a <handleSPI+0x6ea>
    3824:	3b02      	subs	r3, #2
    3826:	4599      	cmp	r9, r3
    3828:	da03      	bge.n	3832 <handleSPI+0x6f2>
						knobFrozen[i] = 0;
    382a:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    382c:	f886 9000 	strb.w	r9, [r6]
						knobFrozen[i] = 0;
    3830:	703b      	strb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3832:	eb05 0308 	add.w	r3, r5, r8
    3836:	f893 9001 	ldrb.w	r9, [r3, #1]
				if (knobFrozen[i])
    383a:	787b      	ldrb	r3, [r7, #1]
    383c:	2b00      	cmp	r3, #0
    383e:	f000 8277 	beq.w	3d30 <handleSPI+0xbf0>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3842:	7873      	ldrb	r3, [r6, #1]
    3844:	1c9a      	adds	r2, r3, #2
    3846:	454a      	cmp	r2, r9
    3848:	db02      	blt.n	3850 <handleSPI+0x710>
    384a:	3b02      	subs	r3, #2
    384c:	454b      	cmp	r3, r9
    384e:	dd03      	ble.n	3858 <handleSPI+0x718>
						knobFrozen[i] = 0;
    3850:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3852:	f886 9001 	strb.w	r9, [r6, #1]
						knobFrozen[i] = 0;
    3856:	707b      	strb	r3, [r7, #1]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3858:	eb05 0308 	add.w	r3, r5, r8
    385c:	f893 9002 	ldrb.w	r9, [r3, #2]
				if (knobFrozen[i])
    3860:	78bb      	ldrb	r3, [r7, #2]
    3862:	2b00      	cmp	r3, #0
    3864:	f000 8256 	beq.w	3d14 <handleSPI+0xbd4>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3868:	78b3      	ldrb	r3, [r6, #2]
    386a:	1c9a      	adds	r2, r3, #2
    386c:	454a      	cmp	r2, r9
    386e:	db02      	blt.n	3876 <handleSPI+0x736>
    3870:	3b02      	subs	r3, #2
    3872:	4599      	cmp	r9, r3
    3874:	da03      	bge.n	387e <handleSPI+0x73e>
						knobFrozen[i] = 0;
    3876:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3878:	f886 9002 	strb.w	r9, [r6, #2]
						knobFrozen[i] = 0;
    387c:	70bb      	strb	r3, [r7, #2]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    387e:	eb05 0308 	add.w	r3, r5, r8
    3882:	f893 9003 	ldrb.w	r9, [r3, #3]
				if (knobFrozen[i])
    3886:	78fb      	ldrb	r3, [r7, #3]
    3888:	2b00      	cmp	r3, #0
    388a:	f000 82c1 	beq.w	3e10 <handleSPI+0xcd0>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    388e:	78f3      	ldrb	r3, [r6, #3]
    3890:	1c9a      	adds	r2, r3, #2
    3892:	454a      	cmp	r2, r9
    3894:	db02      	blt.n	389c <handleSPI+0x75c>
    3896:	3b02      	subs	r3, #2
    3898:	454b      	cmp	r3, r9
    389a:	dd03      	ble.n	38a4 <handleSPI+0x764>
						knobFrozen[i] = 0;
    389c:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    389e:	f886 9003 	strb.w	r9, [r6, #3]
						knobFrozen[i] = 0;
    38a2:	70fb      	strb	r3, [r7, #3]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    38a4:	eb05 0308 	add.w	r3, r5, r8
    38a8:	f893 9004 	ldrb.w	r9, [r3, #4]
				if (knobFrozen[i])
    38ac:	793b      	ldrb	r3, [r7, #4]
    38ae:	2b00      	cmp	r3, #0
    38b0:	f000 82a0 	beq.w	3df4 <handleSPI+0xcb4>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    38b4:	7933      	ldrb	r3, [r6, #4]
    38b6:	1c9a      	adds	r2, r3, #2
    38b8:	4591      	cmp	r9, r2
    38ba:	dc02      	bgt.n	38c2 <handleSPI+0x782>
    38bc:	3b02      	subs	r3, #2
    38be:	4599      	cmp	r9, r3
    38c0:	da03      	bge.n	38ca <handleSPI+0x78a>
						knobFrozen[i] = 0;
    38c2:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    38c4:	f886 9004 	strb.w	r9, [r6, #4]
						knobFrozen[i] = 0;
    38c8:	713b      	strb	r3, [r7, #4]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    38ca:	eb05 0308 	add.w	r3, r5, r8
    38ce:	f893 9005 	ldrb.w	r9, [r3, #5]
				if (knobFrozen[i])
    38d2:	797b      	ldrb	r3, [r7, #5]
    38d4:	2b00      	cmp	r3, #0
    38d6:	f000 827f 	beq.w	3dd8 <handleSPI+0xc98>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    38da:	7973      	ldrb	r3, [r6, #5]
    38dc:	1c9a      	adds	r2, r3, #2
    38de:	4591      	cmp	r9, r2
    38e0:	dc02      	bgt.n	38e8 <handleSPI+0x7a8>
    38e2:	3b02      	subs	r3, #2
    38e4:	4599      	cmp	r9, r3
    38e6:	da03      	bge.n	38f0 <handleSPI+0x7b0>
						knobFrozen[i] = 0;
    38e8:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    38ea:	f886 9005 	strb.w	r9, [r6, #5]
						knobFrozen[i] = 0;
    38ee:	717b      	strb	r3, [r7, #5]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    38f0:	eb05 0308 	add.w	r3, r5, r8
    38f4:	f893 9006 	ldrb.w	r9, [r3, #6]
				if (knobFrozen[i])
    38f8:	79bb      	ldrb	r3, [r7, #6]
    38fa:	2b00      	cmp	r3, #0
    38fc:	f000 825e 	beq.w	3dbc <handleSPI+0xc7c>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3900:	79b3      	ldrb	r3, [r6, #6]
    3902:	1c9a      	adds	r2, r3, #2
    3904:	4591      	cmp	r9, r2
    3906:	dc02      	bgt.n	390e <handleSPI+0x7ce>
    3908:	3b02      	subs	r3, #2
    390a:	4599      	cmp	r9, r3
    390c:	da03      	bge.n	3916 <handleSPI+0x7d6>
						knobFrozen[i] = 0;
    390e:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3910:	f886 9006 	strb.w	r9, [r6, #6]
						knobFrozen[i] = 0;
    3914:	71bb      	strb	r3, [r7, #6]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3916:	eb05 0308 	add.w	r3, r5, r8
    391a:	f893 9007 	ldrb.w	r9, [r3, #7]
				if (knobFrozen[i])
    391e:	79fb      	ldrb	r3, [r7, #7]
    3920:	2b00      	cmp	r3, #0
    3922:	f000 823d 	beq.w	3da0 <handleSPI+0xc60>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3926:	79f3      	ldrb	r3, [r6, #7]
    3928:	1c9a      	adds	r2, r3, #2
    392a:	4591      	cmp	r9, r2
    392c:	dc02      	bgt.n	3934 <handleSPI+0x7f4>
    392e:	3b02      	subs	r3, #2
    3930:	4599      	cmp	r9, r3
    3932:	da03      	bge.n	393c <handleSPI+0x7fc>
						knobFrozen[i] = 0;
    3934:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3936:	f886 9007 	strb.w	r9, [r6, #7]
						knobFrozen[i] = 0;
    393a:	71fb      	strb	r3, [r7, #7]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    393c:	eb05 0308 	add.w	r3, r5, r8
    3940:	f893 9008 	ldrb.w	r9, [r3, #8]
				if (knobFrozen[i])
    3944:	7a3b      	ldrb	r3, [r7, #8]
    3946:	2b00      	cmp	r3, #0
    3948:	f000 821c 	beq.w	3d84 <handleSPI+0xc44>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    394c:	7a33      	ldrb	r3, [r6, #8]
    394e:	1c9a      	adds	r2, r3, #2
    3950:	4591      	cmp	r9, r2
    3952:	dc02      	bgt.n	395a <handleSPI+0x81a>
    3954:	3b02      	subs	r3, #2
    3956:	4599      	cmp	r9, r3
    3958:	da03      	bge.n	3962 <handleSPI+0x822>
						knobFrozen[i] = 0;
    395a:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    395c:	f886 9008 	strb.w	r9, [r6, #8]
						knobFrozen[i] = 0;
    3960:	723b      	strb	r3, [r7, #8]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3962:	eb05 0308 	add.w	r3, r5, r8
    3966:	f893 9009 	ldrb.w	r9, [r3, #9]
				if (knobFrozen[i])
    396a:	7a7b      	ldrb	r3, [r7, #9]
    396c:	2b00      	cmp	r3, #0
    396e:	f000 81fb 	beq.w	3d68 <handleSPI+0xc28>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3972:	7a73      	ldrb	r3, [r6, #9]
    3974:	1c9a      	adds	r2, r3, #2
    3976:	4591      	cmp	r9, r2
    3978:	dc02      	bgt.n	3980 <handleSPI+0x840>
    397a:	3b02      	subs	r3, #2
    397c:	4599      	cmp	r9, r3
    397e:	da03      	bge.n	3988 <handleSPI+0x848>
						knobFrozen[i] = 0;
    3980:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3982:	f886 9009 	strb.w	r9, [r6, #9]
						knobFrozen[i] = 0;
    3986:	727b      	strb	r3, [r7, #9]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3988:	eb05 0308 	add.w	r3, r5, r8
    398c:	f893 900a 	ldrb.w	r9, [r3, #10]
				if (knobFrozen[i])
    3990:	7abb      	ldrb	r3, [r7, #10]
    3992:	2b00      	cmp	r3, #0
    3994:	f000 81da 	beq.w	3d4c <handleSPI+0xc0c>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3998:	7ab3      	ldrb	r3, [r6, #10]
    399a:	1c9a      	adds	r2, r3, #2
    399c:	4591      	cmp	r9, r2
    399e:	dc02      	bgt.n	39a6 <handleSPI+0x866>
    39a0:	3b02      	subs	r3, #2
    39a2:	4599      	cmp	r9, r3
    39a4:	da03      	bge.n	39ae <handleSPI+0x86e>
						knobFrozen[i] = 0;
    39a6:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    39a8:	f886 900a 	strb.w	r9, [r6, #10]
						knobFrozen[i] = 0;
    39ac:	72bb      	strb	r3, [r7, #10]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    39ae:	44a8      	add	r8, r5
				if (knobFrozen[i])
    39b0:	7afb      	ldrb	r3, [r7, #11]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    39b2:	f898 800b 	ldrb.w	r8, [r8, #11]
				if (knobFrozen[i])
    39b6:	2b00      	cmp	r3, #0
    39b8:	f000 818f 	beq.w	3cda <handleSPI+0xb9a>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    39bc:	7af3      	ldrb	r3, [r6, #11]
    39be:	1c9a      	adds	r2, r3, #2
    39c0:	4590      	cmp	r8, r2
    39c2:	dc02      	bgt.n	39ca <handleSPI+0x88a>
    39c4:	3b02      	subs	r3, #2
    39c6:	4598      	cmp	r8, r3
    39c8:	da03      	bge.n	39d2 <handleSPI+0x892>
						knobFrozen[i] = 0;
    39ca:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    39cc:	f886 800b 	strb.w	r8, [r6, #11]
						knobFrozen[i] = 0;
    39d0:	72fb      	strb	r3, [r7, #11]
			currentByte += 12;
    39d2:	f104 070d 	add.w	r7, r4, #13
    39d6:	4e48      	ldr	r6, [pc, #288]	; (3af8 <handleSPI+0x9b8>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    39d8:	ed9f 8a48 	vldr	s16, [pc, #288]	; 3afc <handleSPI+0x9bc>
    39dc:	b2ff      	uxtb	r7, r7
    39de:	f106 0828 	add.w	r8, r6, #40	; 0x28
    39e2:	3f01      	subs	r7, #1
    39e4:	442f      	add	r7, r5
    39e6:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    39ea:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
    39ec:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    39ee:	ee00 3a10 	vmov	s0, r3
    39f2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    39f6:	ee20 0a08 	vmul.f32	s0, s0, s16
    39fa:	f005 fcc5 	bl	9388 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    39fe:	45b0      	cmp	r8, r6
    3a00:	d1f1      	bne.n	39e6 <handleSPI+0x8a6>
			whichBar = 1;
    3a02:	4b3f      	ldr	r3, [pc, #252]	; (3b00 <handleSPI+0x9c0>)
    3a04:	2201      	movs	r2, #1
			updateStateFromSPIMessage(offset);
    3a06:	4620      	mov	r0, r4
			whichBar = 1;
    3a08:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    3a0a:	f7fd fcf9 	bl	1400 <updateStateFromSPIMessage>
    3a0e:	e51b      	b.n	3448 <handleSPI+0x308>
			if (presetReady)
    3a10:	4b3c      	ldr	r3, [pc, #240]	; (3b04 <handleSPI+0x9c4>)
    3a12:	681b      	ldr	r3, [r3, #0]
    3a14:	2b00      	cmp	r3, #0
    3a16:	f43f ad17 	beq.w	3448 <handleSPI+0x308>
				uint8_t currentByte = offset+1;
    3a1a:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3a1c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 3b08 <handleSPI+0x9c8>
    3a20:	4f3a      	ldr	r7, [pc, #232]	; (3b0c <handleSPI+0x9cc>)
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3a22:	b2db      	uxtb	r3, r3
    3a24:	18ea      	adds	r2, r5, r3
    3a26:	5ceb      	ldrb	r3, [r5, r3]
    3a28:	7856      	ldrb	r6, [r2, #1]
    3a2a:	eb06 2603 	add.w	r6, r6, r3, lsl #8
				currentByte = currentByte + 2;
    3a2e:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3a30:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3a32:	b2b6      	uxth	r6, r6
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3a34:	18e9      	adds	r1, r5, r3
    3a36:	5cea      	ldrb	r2, [r5, r3]
    3a38:	f1a6 083f 	sub.w	r8, r6, #63	; 0x3f
    3a3c:	784b      	ldrb	r3, [r1, #1]
    3a3e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    3a42:	fa1f f288 	uxth.w	r2, r8
    3a46:	ee07 3a90 	vmov	s15, r3
    3a4a:	00f3      	lsls	r3, r6, #3
    3a4c:	2a18      	cmp	r2, #24
    3a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3a52:	9301      	str	r3, [sp, #4]
    3a54:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    3a58:	ee67 7a87 	vmul.f32	s15, s15, s14
    3a5c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3a60:	edc3 7a00 	vstr	s15, [r3]
    3a64:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    3a68:	d805      	bhi.n	3a76 <handleSPI+0x936>
    3a6a:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    3a6e:	40d3      	lsrs	r3, r2
    3a70:	07d9      	lsls	r1, r3, #31
    3a72:	f100 8260 	bmi.w	3f36 <handleSPI+0xdf6>
    3a76:	00f3      	lsls	r3, r6, #3
			 for (int i = 0; i < numStringsThisBoard; i++)
    3a78:	f04f 0b00 	mov.w	fp, #0
    3a7c:	46a1      	mov	r9, r4
    3a7e:	eba3 0806 	sub.w	r8, r3, r6
    3a82:	465c      	mov	r4, fp
    3a84:	eb07 0888 	add.w	r8, r7, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    3a88:	46c2      	mov	sl, r8
    3a8a:	ecb8 0a01 	vldmia	r8!, {s0}
    3a8e:	f8da 3010 	ldr.w	r3, [sl, #16]
    3a92:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    3a94:	4621      	mov	r1, r4
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    3a96:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    3a9a:	f8da 3014 	ldr.w	r3, [sl, #20]
    3a9e:	f89a 0018 	ldrb.w	r0, [sl, #24]
    3aa2:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3aa4:	2c00      	cmp	r4, #0
    3aa6:	f000 8114 	beq.w	3cd2 <handleSPI+0xb92>
    3aaa:	f1a6 0323 	sub.w	r3, r6, #35	; 0x23
    3aae:	464c      	mov	r4, r9
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    3ab0:	b299      	uxth	r1, r3
    3ab2:	291a      	cmp	r1, #26
    3ab4:	d804      	bhi.n	3ac0 <handleSPI+0x980>
    3ab6:	4a16      	ldr	r2, [pc, #88]	; (3b10 <handleSPI+0x9d0>)
    3ab8:	40ca      	lsrs	r2, r1
    3aba:	07d2      	lsls	r2, r2, #31
    3abc:	f100 8346 	bmi.w	414c <handleSPI+0x100c>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    3ac0:	f1a6 0218 	sub.w	r2, r6, #24
    3ac4:	b291      	uxth	r1, r2
    3ac6:	291a      	cmp	r1, #26
    3ac8:	f240 826c 	bls.w	3fa4 <handleSPI+0xe64>
				if ((whichParam == Noise))
    3acc:	2e12      	cmp	r6, #18
    3ace:	f040 83ab 	bne.w	4228 <handleSPI+0x10e8>
					if (params[whichParam].realVal[0]  > 0.5f)
    3ad2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3ad6:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
    3ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ae2:	f77f acb1 	ble.w	3448 <handleSPI+0x308>
						noiseOn = 1;
    3ae6:	4b0b      	ldr	r3, [pc, #44]	; (3b14 <handleSPI+0x9d4>)
    3ae8:	2201      	movs	r2, #1
    3aea:	701a      	strb	r2, [r3, #0]
    3aec:	e4ac      	b.n	3448 <handleSPI+0x308>
    3aee:	bf00      	nop
    3af0:	20004dec 	.word	0x20004dec
    3af4:	20019b9c 	.word	0x20019b9c
    3af8:	20004ef4 	.word	0x20004ef4
    3afc:	3b808081 	.word	0x3b808081
    3b00:	20013e28 	.word	0x20013e28
    3b04:	20004f1c 	.word	0x20004f1c
    3b08:	377ffff6 	.word	0x377ffff6
    3b0c:	20018a64 	.word	0x20018a64
    3b10:	04002001 	.word	0x04002001
    3b14:	2001cd0c 	.word	0x2001cd0c
			if (presetReady)
    3b18:	4bc4      	ldr	r3, [pc, #784]	; (3e2c <handleSPI+0xcec>)
    3b1a:	681b      	ldr	r3, [r3, #0]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	f43f ac93 	beq.w	3448 <handleSPI+0x308>
				uint8_t currentByte = offset+1;
    3b22:	1c43      	adds	r3, r0, #1
    3b24:	f8df 9378 	ldr.w	r9, [pc, #888]	; 3ea0 <handleSPI+0xd60>
				uint8_t foundOne = 0;
    3b28:	f04f 0e00 	mov.w	lr, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    3b2c:	f04f 0c20 	mov.w	ip, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3b30:	b2db      	uxtb	r3, r3
    3b32:	5ce9      	ldrb	r1, [r5, r3]
    3b34:	442b      	add	r3, r5
    3b36:	785e      	ldrb	r6, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3b38:	795f      	ldrb	r7, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3b3a:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3b3e:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    3b40:	f893 8002 	ldrb.w	r8, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3b44:	eb07 2701 	add.w	r7, r7, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    3b48:	f893 a003 	ldrb.w	sl, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3b4c:	b2b6      	uxth	r6, r6
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3b4e:	4649      	mov	r1, r9
    3b50:	b23f      	sxth	r7, r7
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3b52:	4673      	mov	r3, lr
					if (mappings[j].destNumber == destNumber)
    3b54:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3b56:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    3b58:	42b0      	cmp	r0, r6
    3b5a:	d102      	bne.n	3b62 <handleSPI+0xa22>
						whichMapping = j;
    3b5c:	b2da      	uxtb	r2, r3
						foundOne = 1;
    3b5e:	f04f 0e01 	mov.w	lr, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    3b62:	28ff      	cmp	r0, #255	; 0xff
    3b64:	d103      	bne.n	3b6e <handleSPI+0xa2e>
    3b66:	459c      	cmp	ip, r3
    3b68:	bfc8      	it	gt
    3b6a:	fa5f fc83 	uxtbgt.w	ip, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3b6e:	3301      	adds	r3, #1
    3b70:	2b20      	cmp	r3, #32
    3b72:	d1ef      	bne.n	3b54 <handleSPI+0xa14>
				if (foundOne == 0)
    3b74:	f1be 0f00 	cmp.w	lr, #0
    3b78:	d110      	bne.n	3b9c <handleSPI+0xa5c>
					numMappings++;
    3b7a:	49ad      	ldr	r1, [pc, #692]	; (3e30 <handleSPI+0xcf0>)
					mappings[whichMapping].destNumber = destNumber;
    3b7c:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    3b7e:	4662      	mov	r2, ip
					numMappings++;
    3b80:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    3b82:	fb03 f30c 	mul.w	r3, r3, ip
					numMappings++;
    3b86:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    3b88:	f809 6003 	strb.w	r6, [r9, r3]
					mappings[whichMapping].dest = &params[destNumber];
    3b8c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    3b90:	444b      	add	r3, r9
					numMappings++;
    3b92:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    3b94:	49a7      	ldr	r1, [pc, #668]	; (3e34 <handleSPI+0xcf4>)
    3b96:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    3b9a:	6059      	str	r1, [r3, #4]
				if (mappingChangeType == SourceID)
    3b9c:	f1ba 0f00 	cmp.w	sl, #0
    3ba0:	f040 8182 	bne.w	3ea8 <handleSPI+0xd68>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3ba4:	234c      	movs	r3, #76	; 0x4c
    3ba6:	2001      	movs	r0, #1
					if (source == 255)
    3ba8:	2fff      	cmp	r7, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3baa:	fb02 f303 	mul.w	r3, r2, r3
    3bae:	eb09 0b03 	add.w	fp, r9, r3
    3bb2:	eb0b 0608 	add.w	r6, fp, r8
    3bb6:	f886 0020 	strb.w	r0, [r6, #32]
					if (source == 255)
    3bba:	f000 83a4 	beq.w	4306 <handleSPI+0x11c6>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3bbe:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 3e9c <handleSPI+0xd5c>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3bc2:	f108 0104 	add.w	r1, r8, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3bc6:	f108 0e01 	add.w	lr, r8, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3bca:	2f03      	cmp	r7, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3bcc:	eb0c 0bc7 	add.w	fp, ip, r7, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3bd0:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 3ea4 <handleSPI+0xd64>
    3bd4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    3bd8:	f886 0048 	strb.w	r0, [r6, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3bdc:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
    3be0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3be4:	4449      	add	r1, r9
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3be6:	f849 b00e 	str.w	fp, [r9, lr]
    3bea:	f10b 0b04 	add.w	fp, fp, #4
    3bee:	444b      	add	r3, r9
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3bf0:	f8c1 c004 	str.w	ip, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3bf4:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3bf8:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3bfc:	f340 836d 	ble.w	42da <handleSPI+0x119a>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3c00:	f1a7 0318 	sub.w	r3, r7, #24
    3c04:	2b03      	cmp	r3, #3
    3c06:	f200 83e4 	bhi.w	43d2 <handleSPI+0x1292>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    3c0a:	4b8b      	ldr	r3, [pc, #556]	; (3e38 <handleSPI+0xcf8>)
    3c0c:	443b      	add	r3, r7
    3c0e:	f803 0c18 	strb.w	r0, [r3, #-24]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    3c12:	2f03      	cmp	r7, #3
    3c14:	d102      	bne.n	3c1c <handleSPI+0xadc>
							noiseOn = 1;
    3c16:	4b89      	ldr	r3, [pc, #548]	; (3e3c <handleSPI+0xcfc>)
    3c18:	2101      	movs	r1, #1
    3c1a:	7019      	strb	r1, [r3, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    3c1c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3c20:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3c24:	2200      	movs	r2, #0
    3c26:	4443      	add	r3, r8
    3c28:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3c2c:	63da      	str	r2, [r3, #60]	; 0x3c
    3c2e:	e40b      	b.n	3448 <handleSPI+0x308>
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3c30:	182b      	adds	r3, r5, r0
    3c32:	eddf 6a83 	vldr	s13, [pc, #524]	; 3e40 <handleSPI+0xd00>
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3c36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3c3a:	4a82      	ldr	r2, [pc, #520]	; (3e44 <handleSPI+0xd04>)
    3c3c:	785b      	ldrb	r3, [r3, #1]
    3c3e:	ee07 3a90 	vmov	s15, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3c42:	4b81      	ldr	r3, [pc, #516]	; (3e48 <handleSPI+0xd08>)
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3c48:	ee67 7aa6 	vmul.f32	s15, s15, s13
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3c4c:	ee27 7a87 	vmul.f32	s14, s15, s14
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3c50:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3c54:	ed83 7a00 	vstr	s14, [r3]
    3c58:	f7ff bbf6 	b.w	3448 <handleSPI+0x308>
			if (boardNumber == 0)
    3c5c:	4b7b      	ldr	r3, [pc, #492]	; (3e4c <handleSPI+0xd0c>)
    3c5e:	781b      	ldrb	r3, [r3, #0]
    3c60:	2b00      	cmp	r3, #0
    3c62:	f47f aa9e 	bne.w	31a2 <handleSPI+0x62>
				pluckFirmwareUpdateRequested = 1;
    3c66:	4b7a      	ldr	r3, [pc, #488]	; (3e50 <handleSPI+0xd10>)
    3c68:	2201      	movs	r2, #1
    3c6a:	601a      	str	r2, [r3, #0]
    3c6c:	f7ff bbf1 	b.w	3452 <handleSPI+0x312>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3c70:	ed9f 6a78 	vldr	s12, [pc, #480]	; 3e54 <handleSPI+0xd14>
			 for (int i = 0; i < numStringsThisBoard; i++)
    3c74:	2603      	movs	r6, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3c76:	eddf 6a78 	vldr	s13, [pc, #480]	; 3e58 <handleSPI+0xd18>
					stringMIDIPitches[i] = myPitch;
    3c7a:	4f78      	ldr	r7, [pc, #480]	; (3e5c <handleSPI+0xd1c>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3c7c:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    3c7e:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3c82:	4432      	add	r2, r6
    3c84:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3c88:	5cd2      	ldrb	r2, [r2, r3]
    3c8a:	0212      	lsls	r2, r2, #8
    3c8c:	ee07 2a90 	vmov	s15, r2
    3c90:	680a      	ldr	r2, [r1, #0]
    3c92:	4432      	add	r2, r6
    3c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3c98:	3601      	adds	r6, #1
    3c9a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3c9e:	441a      	add	r2, r3
    3ca0:	7852      	ldrb	r2, [r2, #1]
    3ca2:	ee07 2a10 	vmov	s14, r2
    3ca6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    3caa:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3cae:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3cb2:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cba:	dd06      	ble.n	3cca <handleSPI+0xb8a>
    3cbc:	eef4 7a66 	vcmp.f32	s15, s13
    3cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cc4:	d501      	bpl.n	3cca <handleSPI+0xb8a>
					stringMIDIPitches[i] = myPitch;
    3cc6:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3cca:	42b0      	cmp	r0, r6
    3ccc:	dcd6      	bgt.n	3c7c <handleSPI+0xb3c>
    3cce:	f7ff bbb5 	b.w	343c <handleSPI+0x2fc>
    3cd2:	2401      	movs	r4, #1
    3cd4:	e6d9      	b.n	3a8a <handleSPI+0x94a>
    3cd6:	4962      	ldr	r1, [pc, #392]	; (3e60 <handleSPI+0xd20>)
    3cd8:	e552      	b.n	3780 <handleSPI+0x640>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3cda:	ee07 8a90 	vmov	s15, r8
    3cde:	4861      	ldr	r0, [pc, #388]	; (3e64 <handleSPI+0xd24>)
    3ce0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3ce4:	eddf 7a60 	vldr	s15, [pc, #384]	; 3e68 <handleSPI+0xd28>
    3ce8:	ee20 0a27 	vmul.f32	s0, s0, s15
    3cec:	f005 fb4c 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3cf0:	f886 800b 	strb.w	r8, [r6, #11]
    3cf4:	e66d      	b.n	39d2 <handleSPI+0x892>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3cf6:	ee07 9a90 	vmov	s15, r9
					prevKnobByte[i] = newByte;
    3cfa:	4e5c      	ldr	r6, [pc, #368]	; (3e6c <handleSPI+0xd2c>)
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3cfc:	485c      	ldr	r0, [pc, #368]	; (3e70 <handleSPI+0xd30>)
    3cfe:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3d02:	eddf 7a59 	vldr	s15, [pc, #356]	; 3e68 <handleSPI+0xd28>
    3d06:	ee20 0a27 	vmul.f32	s0, s0, s15
    3d0a:	f005 fb3d 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3d0e:	f886 9000 	strb.w	r9, [r6]
    3d12:	e58e      	b.n	3832 <handleSPI+0x6f2>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3d14:	ee07 9a90 	vmov	s15, r9
    3d18:	4856      	ldr	r0, [pc, #344]	; (3e74 <handleSPI+0xd34>)
    3d1a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3d1e:	eddf 7a52 	vldr	s15, [pc, #328]	; 3e68 <handleSPI+0xd28>
    3d22:	ee20 0a27 	vmul.f32	s0, s0, s15
    3d26:	f005 fb2f 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3d2a:	f886 9002 	strb.w	r9, [r6, #2]
    3d2e:	e5a6      	b.n	387e <handleSPI+0x73e>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3d30:	ee07 9a90 	vmov	s15, r9
    3d34:	4850      	ldr	r0, [pc, #320]	; (3e78 <handleSPI+0xd38>)
    3d36:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3d3a:	eddf 7a4b 	vldr	s15, [pc, #300]	; 3e68 <handleSPI+0xd28>
    3d3e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3d42:	f005 fb21 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3d46:	f886 9001 	strb.w	r9, [r6, #1]
    3d4a:	e585      	b.n	3858 <handleSPI+0x718>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3d4c:	ee07 9a90 	vmov	s15, r9
    3d50:	484a      	ldr	r0, [pc, #296]	; (3e7c <handleSPI+0xd3c>)
    3d52:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3d56:	eddf 7a44 	vldr	s15, [pc, #272]	; 3e68 <handleSPI+0xd28>
    3d5a:	ee20 0a27 	vmul.f32	s0, s0, s15
    3d5e:	f005 fb13 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3d62:	f886 900a 	strb.w	r9, [r6, #10]
    3d66:	e622      	b.n	39ae <handleSPI+0x86e>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3d68:	ee07 9a90 	vmov	s15, r9
    3d6c:	4844      	ldr	r0, [pc, #272]	; (3e80 <handleSPI+0xd40>)
    3d6e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3d72:	eddf 7a3d 	vldr	s15, [pc, #244]	; 3e68 <handleSPI+0xd28>
    3d76:	ee20 0a27 	vmul.f32	s0, s0, s15
    3d7a:	f005 fb05 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3d7e:	f886 9009 	strb.w	r9, [r6, #9]
    3d82:	e601      	b.n	3988 <handleSPI+0x848>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3d84:	ee07 9a90 	vmov	s15, r9
    3d88:	483e      	ldr	r0, [pc, #248]	; (3e84 <handleSPI+0xd44>)
    3d8a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3d8e:	eddf 7a36 	vldr	s15, [pc, #216]	; 3e68 <handleSPI+0xd28>
    3d92:	ee20 0a27 	vmul.f32	s0, s0, s15
    3d96:	f005 faf7 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3d9a:	f886 9008 	strb.w	r9, [r6, #8]
    3d9e:	e5e0      	b.n	3962 <handleSPI+0x822>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3da0:	ee07 9a90 	vmov	s15, r9
    3da4:	4838      	ldr	r0, [pc, #224]	; (3e88 <handleSPI+0xd48>)
    3da6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3daa:	eddf 7a2f 	vldr	s15, [pc, #188]	; 3e68 <handleSPI+0xd28>
    3dae:	ee20 0a27 	vmul.f32	s0, s0, s15
    3db2:	f005 fae9 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3db6:	f886 9007 	strb.w	r9, [r6, #7]
    3dba:	e5bf      	b.n	393c <handleSPI+0x7fc>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3dbc:	ee07 9a90 	vmov	s15, r9
    3dc0:	4832      	ldr	r0, [pc, #200]	; (3e8c <handleSPI+0xd4c>)
    3dc2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3dc6:	eddf 7a28 	vldr	s15, [pc, #160]	; 3e68 <handleSPI+0xd28>
    3dca:	ee20 0a27 	vmul.f32	s0, s0, s15
    3dce:	f005 fadb 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3dd2:	f886 9006 	strb.w	r9, [r6, #6]
    3dd6:	e59e      	b.n	3916 <handleSPI+0x7d6>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3dd8:	ee07 9a90 	vmov	s15, r9
    3ddc:	482c      	ldr	r0, [pc, #176]	; (3e90 <handleSPI+0xd50>)
    3dde:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3de2:	eddf 7a21 	vldr	s15, [pc, #132]	; 3e68 <handleSPI+0xd28>
    3de6:	ee20 0a27 	vmul.f32	s0, s0, s15
    3dea:	f005 facd 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3dee:	f886 9005 	strb.w	r9, [r6, #5]
    3df2:	e57d      	b.n	38f0 <handleSPI+0x7b0>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3df4:	ee07 9a90 	vmov	s15, r9
    3df8:	4826      	ldr	r0, [pc, #152]	; (3e94 <handleSPI+0xd54>)
    3dfa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3dfe:	eddf 7a1a 	vldr	s15, [pc, #104]	; 3e68 <handleSPI+0xd28>
    3e02:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e06:	f005 fabf 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e0a:	f886 9004 	strb.w	r9, [r6, #4]
    3e0e:	e55c      	b.n	38ca <handleSPI+0x78a>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e10:	ee07 9a90 	vmov	s15, r9
    3e14:	4820      	ldr	r0, [pc, #128]	; (3e98 <handleSPI+0xd58>)
    3e16:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e1a:	eddf 7a13 	vldr	s15, [pc, #76]	; 3e68 <handleSPI+0xd28>
    3e1e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e22:	f005 fab1 	bl	9388 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e26:	f886 9003 	strb.w	r9, [r6, #3]
    3e2a:	e53b      	b.n	38a4 <handleSPI+0x764>
    3e2c:	20004f1c 	.word	0x20004f1c
    3e30:	20018a54 	.word	0x20018a54
    3e34:	20018a64 	.word	0x20018a64
    3e38:	2001cac8 	.word	0x2001cac8
    3e3c:	2001cd0c 	.word	0x2001cd0c
    3e40:	3c23d70a 	.word	0x3c23d70a
    3e44:	200004a8 	.word	0x200004a8
    3e48:	200004ac 	.word	0x200004ac
    3e4c:	20013ebd 	.word	0x20013ebd
    3e50:	20019b78 	.word	0x20019b78
    3e54:	3b000080 	.word	0x3b000080
    3e58:	478bff74 	.word	0x478bff74
    3e5c:	20013dec 	.word	0x20013dec
    3e60:	20013ed4 	.word	0x20013ed4
    3e64:	20004e54 	.word	0x20004e54
    3e68:	3b808081 	.word	0x3b808081
    3e6c:	20019b9c 	.word	0x20019b9c
    3e70:	20004e28 	.word	0x20004e28
    3e74:	20004e30 	.word	0x20004e30
    3e78:	20004e2c 	.word	0x20004e2c
    3e7c:	20004e50 	.word	0x20004e50
    3e80:	20004e4c 	.word	0x20004e4c
    3e84:	20004e48 	.word	0x20004e48
    3e88:	20004e44 	.word	0x20004e44
    3e8c:	20004e40 	.word	0x20004e40
    3e90:	20004e3c 	.word	0x20004e3c
    3e94:	20004e38 	.word	0x20004e38
    3e98:	20004e34 	.word	0x20004e34
    3e9c:	2001cf80 	.word	0x2001cf80
    3ea0:	200180c8 	.word	0x200180c8
    3ea4:	2000072c 	.word	0x2000072c
				else if (mappingChangeType == Amount)
    3ea8:	f1ba 0f01 	cmp.w	sl, #1
    3eac:	f000 824f 	beq.w	434e <handleSPI+0x120e>
				else if (mappingChangeType == ScalarID)
    3eb0:	f1ba 0f02 	cmp.w	sl, #2
    3eb4:	f47f aac8 	bne.w	3448 <handleSPI+0x308>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3eb8:	48c0      	ldr	r0, [pc, #768]	; (41bc <handleSPI+0x107c>)
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3eba:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    3ebc:	2fff      	cmp	r7, #255	; 0xff
    3ebe:	ea4f 0a47 	mov.w	sl, r7, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3ec2:	f1a7 0e18 	sub.w	lr, r7, #24
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3ec6:	f1a7 0c14 	sub.w	ip, r7, #20
    3eca:	7801      	ldrb	r1, [r0, #0]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3ecc:	fb02 f303 	mul.w	r3, r2, r3
    3ed0:	f108 0604 	add.w	r6, r8, #4
						if (scalar == 0xff)
    3ed4:	f000 824e 	beq.w	4374 <handleSPI+0x1234>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3ed8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    3edc:	4eb8      	ldr	r6, [pc, #736]	; (41c0 <handleSPI+0x1080>)
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3ede:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3ee2:	444b      	add	r3, r9
    3ee4:	eb06 0bc7 	add.w	fp, r6, r7, lsl #3
    3ee8:	f8c3 b004 	str.w	fp, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3eec:	f200 8257 	bhi.w	439e <handleSPI+0x125e>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3ef0:	4bb4      	ldr	r3, [pc, #720]	; (41c4 <handleSPI+0x1084>)
    3ef2:	f04f 0b01 	mov.w	fp, #1
    3ef6:	443b      	add	r3, r7
    3ef8:	f803 bc18 	strb.w	fp, [r3, #-24]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3efc:	234c      	movs	r3, #76	; 0x4c
								noiseOn = 1;
    3efe:	2f03      	cmp	r7, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3f00:	f10a 0a01 	add.w	sl, sl, #1
    3f04:	fb02 f303 	mul.w	r3, r2, r3
								noiseOn = 1;
    3f08:	bf08      	it	eq
    3f0a:	2101      	moveq	r1, #1
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3f0c:	eb06 068a 	add.w	r6, r6, sl, lsl #2
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3f10:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3f14:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    3f18:	444b      	add	r3, r9
    3f1a:	629e      	str	r6, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3f1c:	f200 8236 	bhi.w	438c <handleSPI+0x124c>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3f20:	4ba8      	ldr	r3, [pc, #672]	; (41c4 <handleSPI+0x1084>)
    3f22:	2201      	movs	r2, #1
    3f24:	443b      	add	r3, r7
    3f26:	f803 2c18 	strb.w	r2, [r3, #-24]
								noiseOn = 1;
    3f2a:	2f03      	cmp	r7, #3
    3f2c:	bf08      	it	eq
    3f2e:	2101      	moveq	r1, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3f30:	7001      	strb	r1, [r0, #0]
    3f32:	f7ff ba89 	b.w	3448 <handleSPI+0x308>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3f36:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
					param *FXAlias = &params[whichParam + 1];
    3f3a:	f106 0901 	add.w	r9, r6, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    3f3e:	ea4f 08e8 	mov.w	r8, r8, asr #3
					param *FXAlias = &params[whichParam + 1];
    3f42:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3f46:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    3f4a:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    3f4e:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3f52:	fef8 7a67 	vrinta.f32	s15, s15
    3f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3f5a:	edcd 7a02 	vstr	s15, [sp, #8]
    3f5e:	f89d 0008 	ldrb.w	r0, [sp, #8]
					if (effectType > FXLowpass)
    3f62:	280d      	cmp	r0, #13
    3f64:	d902      	bls.n	3f6c <handleSPI+0xe2c>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    3f66:	4a98      	ldr	r2, [pc, #608]	; (41c8 <handleSPI+0x1088>)
    3f68:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    3f6c:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    3f6e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    3f72:	f005 fa51 	bl	9418 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    3f76:	4a95      	ldr	r2, [pc, #596]	; (41cc <handleSPI+0x108c>)
    3f78:	ebab 0309 	sub.w	r3, fp, r9
    3f7c:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    3f80:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    3f84:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3f88:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    3f8a:	684b      	ldr	r3, [r1, #4]
    3f8c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    3f90:	688b      	ldr	r3, [r1, #8]
    3f92:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    3f96:	68cb      	ldr	r3, [r1, #12]
    3f98:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    3f9c:	690b      	ldr	r3, [r1, #16]
    3f9e:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
    3fa2:	e568      	b.n	3a76 <handleSPI+0x936>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    3fa4:	4b8a      	ldr	r3, [pc, #552]	; (41d0 <handleSPI+0x1090>)
    3fa6:	410b      	asrs	r3, r1
    3fa8:	f013 0301 	ands.w	r3, r3, #1
    3fac:	d123      	bne.n	3ff6 <handleSPI+0xeb6>
					if (params[whichParam].realVal[0]  > 0.5f)
    3fae:	9901      	ldr	r1, [sp, #4]
    3fb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3fb4:	1b89      	subs	r1, r1, r6
    3fb6:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    3fba:	ed91 7a02 	vldr	s14, [r1, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    3fbe:	4985      	ldr	r1, [pc, #532]	; (41d4 <handleSPI+0x1094>)
					if (params[whichParam].realVal[0]  > 0.5f)
    3fc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    3fc4:	fb81 0102 	smull	r0, r1, r1, r2
    3fc8:	17d2      	asrs	r2, r2, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    3fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    3fce:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    3fd2:	dd02      	ble.n	3fda <handleSPI+0xe9a>
						oscOn[whichOsc] = 1;
    3fd4:	2301      	movs	r3, #1
    3fd6:	4980      	ldr	r1, [pc, #512]	; (41d8 <handleSPI+0x1098>)
    3fd8:	548b      	strb	r3, [r1, r2]
    3fda:	4980      	ldr	r1, [pc, #512]	; (41dc <handleSPI+0x109c>)
    3fdc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
						enabledCount += oscsEnabled[j];
    3fe0:	e9d1 3200 	ldrd	r3, r2, [r1]
    3fe4:	4413      	add	r3, r2
					oscAmpMult = oscAmpMultArray[enabledCount];
    3fe6:	688a      	ldr	r2, [r1, #8]
    3fe8:	4413      	add	r3, r2
    3fea:	4a7d      	ldr	r2, [pc, #500]	; (41e0 <handleSPI+0x10a0>)
    3fec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ff0:	681a      	ldr	r2, [r3, #0]
    3ff2:	4b7c      	ldr	r3, [pc, #496]	; (41e4 <handleSPI+0x10a4>)
    3ff4:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    3ff6:	2e87      	cmp	r6, #135	; 0x87
    3ff8:	d005      	beq.n	4006 <handleSPI+0xec6>
    3ffa:	2e8c      	cmp	r6, #140	; 0x8c
    3ffc:	d003      	beq.n	4006 <handleSPI+0xec6>
    3ffe:	2e91      	cmp	r6, #145	; 0x91
    4000:	d001      	beq.n	4006 <handleSPI+0xec6>
    4002:	2e96      	cmp	r6, #150	; 0x96
    4004:	d16b      	bne.n	40de <handleSPI+0xf9e>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4006:	9b01      	ldr	r3, [sp, #4]
    4008:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    400c:	4a76      	ldr	r2, [pc, #472]	; (41e8 <handleSPI+0x10a8>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    400e:	f04f 0a00 	mov.w	sl, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4012:	1b9b      	subs	r3, r3, r6
    4014:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4018:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    401c:	f1a6 0387 	sub.w	r3, r6, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4020:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    4024:	fb82 1203 	smull	r1, r2, r2, r3
    4028:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    402a:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    402e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    4032:	ebc3 0862 	rsb	r8, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    4036:	ee17 0a90 	vmov	r0, s15
    403a:	4641      	mov	r1, r8
    403c:	f005 faf0 	bl	9620 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4040:	496a      	ldr	r1, [pc, #424]	; (41ec <handleSPI+0x10ac>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    4042:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    4046:	9503      	str	r5, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4048:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    404c:	f103 0984 	add.w	r9, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    4050:	f103 0285 	add.w	r2, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    4054:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4056:	eb01 0088 	add.w	r0, r1, r8, lsl #2
    405a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
    405e:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    4062:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    4066:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    406a:	eb07 0b82 	add.w	fp, r7, r2, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    406e:	eb07 0283 	add.w	r2, r7, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    4072:	ea4f 0389 	mov.w	r3, r9, lsl #2
    4076:	eb07 0989 	add.w	r9, r7, r9, lsl #2
    407a:	f103 0840 	add.w	r8, r3, #64	; 0x40
    407e:	f8c9 1014 	str.w	r1, [r9, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    4082:	6841      	ldr	r1, [r0, #4]
    4084:	44b8      	add	r8, r7
    4086:	f8cb 1014 	str.w	r1, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    408a:	6881      	ldr	r1, [r0, #8]
    408c:	4610      	mov	r0, r2
    408e:	6151      	str	r1, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4090:	f103 0108 	add.w	r1, r3, #8
    4094:	187a      	adds	r2, r7, r1
    4096:	f103 0124 	add.w	r1, r3, #36	; 0x24
    409a:	187b      	adds	r3, r7, r1
    409c:	4615      	mov	r5, r2
    409e:	e9cd 6401 	strd	r6, r4, [sp, #4]
    40a2:	461c      	mov	r4, r3
    40a4:	4606      	mov	r6, r0
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    40a6:	ecb5 0a01 	vldmia	r5!, {s0}
    40aa:	4651      	mov	r1, sl
    40ac:	f899 0018 	ldrb.w	r0, [r9, #24]
    40b0:	f8d9 3014 	ldr.w	r3, [r9, #20]
    40b4:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    40b6:	ecb4 0a01 	vldmia	r4!, {s0}
    40ba:	4651      	mov	r1, sl
    40bc:	f89b 0018 	ldrb.w	r0, [fp, #24]
    40c0:	f8db 3014 	ldr.w	r3, [fp, #20]
    40c4:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    40c6:	ecb8 0a01 	vldmia	r8!, {s0}
    40ca:	4651      	mov	r1, sl
    40cc:	6973      	ldr	r3, [r6, #20]
    40ce:	7e30      	ldrb	r0, [r6, #24]
    40d0:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    40d2:	f1ba 0f00 	cmp.w	sl, #0
    40d6:	d016      	beq.n	4106 <handleSPI+0xfc6>
    40d8:	9d03      	ldr	r5, [sp, #12]
    40da:	e9dd 6401 	ldrd	r6, r4, [sp, #4]
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    40de:	2e01      	cmp	r6, #1
    40e0:	d914      	bls.n	410c <handleSPI+0xfcc>
				if (whichParam == FXOrder)
    40e2:	2e9a      	cmp	r6, #154	; 0x9a
    40e4:	d128      	bne.n	4138 <handleSPI+0xff8>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    40e6:	4a42      	ldr	r2, [pc, #264]	; (41f0 <handleSPI+0x10b0>)
    40e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    40ec:	4b41      	ldr	r3, [pc, #260]	; (41f4 <handleSPI+0x10b4>)
    40ee:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    40f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    40f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40fa:	bfcc      	ite	gt
    40fc:	2201      	movgt	r2, #1
    40fe:	2200      	movle	r2, #0
    4100:	701a      	strb	r2, [r3, #0]
    4102:	f7ff b9a1 	b.w	3448 <handleSPI+0x308>
    4106:	f04f 0a01 	mov.w	sl, #1
    410a:	e7cc      	b.n	40a6 <handleSPI+0xf66>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    410c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    4110:	ed97 7a02 	vldr	s14, [r7, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4114:	eddf 6a38 	vldr	s13, [pc, #224]	; 41f8 <handleSPI+0x10b8>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4118:	ee37 7a67 	vsub.f32	s14, s14, s15
    411c:	ed9f 6a37 	vldr	s12, [pc, #220]	; 41fc <handleSPI+0x10bc>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4120:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4124:	4b36      	ldr	r3, [pc, #216]	; (4200 <handleSPI+0x10c0>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4126:	4a37      	ldr	r2, [pc, #220]	; (4204 <handleSPI+0x10c4>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4128:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    412c:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4130:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    4134:	f7ff b988 	b.w	3448 <handleSPI+0x308>
    4138:	2e9b      	cmp	r6, #155	; 0x9b
    413a:	f47f a985 	bne.w	3448 <handleSPI+0x308>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    413e:	4a2c      	ldr	r2, [pc, #176]	; (41f0 <handleSPI+0x10b0>)
    4140:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4144:	4b30      	ldr	r3, [pc, #192]	; (4208 <handleSPI+0x10c8>)
    4146:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    414a:	e7d2      	b.n	40f2 <handleSPI+0xfb2>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    414c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    4150:	edda 7a02 	vldr	s15, [sl, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    4154:	4a1f      	ldr	r2, [pc, #124]	; (41d4 <handleSPI+0x1094>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    4156:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    415a:	fb82 1203 	smull	r1, r2, r2, r3
    415e:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    4160:	fef8 7a67 	vrinta.f32	s15, s15
    4164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    4168:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    416c:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    4170:	2a05      	cmp	r2, #5
    4172:	f63f aca5 	bhi.w	3ac0 <handleSPI+0x980>
    4176:	e8df f002 	tbb	[pc, r2]
    417a:	171c      	.short	0x171c
    417c:	03080d12 	.word	0x03080d12
			  shapeTick[i] = &triTick;
    4180:	4a22      	ldr	r2, [pc, #136]	; (420c <handleSPI+0x10cc>)
    4182:	4923      	ldr	r1, [pc, #140]	; (4210 <handleSPI+0x10d0>)
    4184:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    4188:	e49a      	b.n	3ac0 <handleSPI+0x980>
			  shapeTick[i] = &sineTick;
    418a:	4a20      	ldr	r2, [pc, #128]	; (420c <handleSPI+0x10cc>)
    418c:	4921      	ldr	r1, [pc, #132]	; (4214 <handleSPI+0x10d4>)
    418e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    4192:	e495      	b.n	3ac0 <handleSPI+0x980>
			  shapeTick[i] = &pulseTick;
    4194:	4a1d      	ldr	r2, [pc, #116]	; (420c <handleSPI+0x10cc>)
    4196:	4920      	ldr	r1, [pc, #128]	; (4218 <handleSPI+0x10d8>)
    4198:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    419c:	e490      	b.n	3ac0 <handleSPI+0x980>
			  shapeTick[i] = &sawTick;
    419e:	4a1b      	ldr	r2, [pc, #108]	; (420c <handleSPI+0x10cc>)
    41a0:	491e      	ldr	r1, [pc, #120]	; (421c <handleSPI+0x10dc>)
    41a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    41a6:	e48b      	b.n	3ac0 <handleSPI+0x980>
			  shapeTick[i] = &sineTriTick;
    41a8:	4a18      	ldr	r2, [pc, #96]	; (420c <handleSPI+0x10cc>)
    41aa:	491d      	ldr	r1, [pc, #116]	; (4220 <handleSPI+0x10e0>)
    41ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    41b0:	e486      	b.n	3ac0 <handleSPI+0x980>
			  shapeTick[i] = &sawSquareTick;
    41b2:	4a16      	ldr	r2, [pc, #88]	; (420c <handleSPI+0x10cc>)
    41b4:	491b      	ldr	r1, [pc, #108]	; (4224 <handleSPI+0x10e4>)
    41b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    41ba:	e481      	b.n	3ac0 <handleSPI+0x980>
    41bc:	2001cd0c 	.word	0x2001cd0c
    41c0:	2001cf80 	.word	0x2001cf80
    41c4:	2001cac8 	.word	0x2001cac8
    41c8:	00001a21 	.word	0x00001a21
    41cc:	20013f14 	.word	0x20013f14
    41d0:	fbffdffe 	.word	0xfbffdffe
    41d4:	4ec4ec4f 	.word	0x4ec4ec4f
    41d8:	2001cd60 	.word	0x2001cd60
    41dc:	20018a58 	.word	0x20018a58
    41e0:	2000073c 	.word	0x2000073c
    41e4:	20000738 	.word	0x20000738
    41e8:	66666667 	.word	0x66666667
    41ec:	20018094 	.word	0x20018094
    41f0:	20019a64 	.word	0x20019a64
    41f4:	20016091 	.word	0x20016091
    41f8:	42fe0000 	.word	0x42fe0000
    41fc:	3c010204 	.word	0x3c010204
    4200:	20018a48 	.word	0x20018a48
    4204:	20018a4c 	.word	0x20018a4c
    4208:	20019b74 	.word	0x20019b74
    420c:	2001cf04 	.word	0x2001cf04
    4210:	00006061 	.word	0x00006061
    4214:	00006021 	.word	0x00006021
    4218:	00005fc1 	.word	0x00005fc1
    421c:	00005f81 	.word	0x00005f81
    4220:	00005f21 	.word	0x00005f21
    4224:	00005ec1 	.word	0x00005ec1
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    4228:	2e60      	cmp	r6, #96	; 0x60
    422a:	d002      	beq.n	4232 <handleSPI+0x10f2>
    422c:	2e66      	cmp	r6, #102	; 0x66
    422e:	f47f aee2 	bne.w	3ff6 <handleSPI+0xeb6>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    4232:	9b01      	ldr	r3, [sp, #4]
    4234:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    4238:	4968      	ldr	r1, [pc, #416]	; (43dc <handleSPI+0x129c>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    423a:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    423e:	1b9b      	subs	r3, r3, r6
    4240:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4244:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    4248:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    424c:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    4250:	fb81 2103 	smull	r2, r1, r1, r3
    4254:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    4258:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    425c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    4260:	ee17 0a90 	vmov	r0, s15
    4264:	f005 fa40 	bl	96e8 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    4268:	485d      	ldr	r0, [pc, #372]	; (43e0 <handleSPI+0x12a0>)
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    426a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    426e:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    4272:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    4276:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    4278:	f8dc 0004 	ldr.w	r0, [ip, #4]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    427c:	f103 0863 	add.w	r8, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    4280:	3362      	adds	r3, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    4282:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    4286:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    428a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    428e:	eb07 0888 	add.w	r8, r7, r8, lsl #2
    4292:	f10a 0b08 	add.w	fp, sl, #8
    4296:	f1aa 0a14 	sub.w	sl, sl, #20
    429a:	f8c8 1014 	str.w	r1, [r8, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    429e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
    42a2:	44bb      	add	fp, r7
    42a4:	009b      	lsls	r3, r3, #2
    42a6:	44ba      	add	sl, r7
    42a8:	6148      	str	r0, [r1, #20]
    42aa:	9302      	str	r3, [sp, #8]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    42ac:	ecbb 0a01 	vldmia	fp!, {s0}
    42b0:	4649      	mov	r1, r9
    42b2:	f898 0018 	ldrb.w	r0, [r8, #24]
    42b6:	f8d8 3014 	ldr.w	r3, [r8, #20]
    42ba:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    42bc:	9b02      	ldr	r3, [sp, #8]
    42be:	ecba 0a01 	vldmia	sl!, {s0}
    42c2:	4649      	mov	r1, r9
    42c4:	18fb      	adds	r3, r7, r3
    42c6:	695a      	ldr	r2, [r3, #20]
    42c8:	7e18      	ldrb	r0, [r3, #24]
    42ca:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    42cc:	f1b9 0f00 	cmp.w	r9, #0
    42d0:	f47f ae91 	bne.w	3ff6 <handleSPI+0xeb6>
    42d4:	f04f 0901 	mov.w	r9, #1
    42d8:	e7e8      	b.n	42ac <handleSPI+0x116c>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    42da:	f1a7 0314 	sub.w	r3, r7, #20
    42de:	f886 a020 	strb.w	sl, [r6, #32]
    42e2:	2b03      	cmp	r3, #3
    42e4:	d82d      	bhi.n	4342 <handleSPI+0x1202>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    42e6:	4b3f      	ldr	r3, [pc, #252]	; (43e4 <handleSPI+0x12a4>)
    42e8:	2101      	movs	r1, #1
    42ea:	443b      	add	r3, r7
    42ec:	f803 1c14 	strb.w	r1, [r3, #-20]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    42f0:	e48f      	b.n	3c12 <handleSPI+0xad2>
						audioOutBuffer[i] = 0;
    42f2:	2200      	movs	r2, #0
    42f4:	f503 6180 	add.w	r1, r3, #1024	; 0x400
						audioOutBuffer[i + 1] = 0;
    42f8:	e9c3 2200 	strd	r2, r2, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    42fc:	3308      	adds	r3, #8
    42fe:	4299      	cmp	r1, r3
    4300:	d1fa      	bne.n	42f8 <handleSPI+0x11b8>
    4302:	f7ff ba34 	b.w	376e <handleSPI+0x62e>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    4306:	f886 a048 	strb.w	sl, [r6, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    430a:	4656      	mov	r6, sl
							mappings[whichMapping].destNumber = 255;
    430c:	f809 7003 	strb.w	r7, [r9, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    4310:	f8db 3004 	ldr.w	r3, [fp, #4]
    4314:	eb03 0786 	add.w	r7, r3, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    4318:	691b      	ldr	r3, [r3, #16]
    431a:	ed97 0a00 	vldr	s0, [r7]
    431e:	4798      	blx	r3
    4320:	ed87 0a02 	vstr	s0, [r7, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    4324:	f8db 3004 	ldr.w	r3, [fp, #4]
    4328:	4631      	mov	r1, r6
    432a:	eb03 0786 	add.w	r7, r3, r6, lsl #2
    432e:	695a      	ldr	r2, [r3, #20]
    4330:	7e18      	ldrb	r0, [r3, #24]
    4332:	ed97 0a02 	vldr	s0, [r7, #8]
    4336:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4338:	2e00      	cmp	r6, #0
    433a:	f47f a885 	bne.w	3448 <handleSPI+0x308>
    433e:	2601      	movs	r6, #1
    4340:	e7e6      	b.n	4310 <handleSPI+0x11d0>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    4342:	2f02      	cmp	r7, #2
    4344:	f63f ac65 	bhi.w	3c12 <handleSPI+0xad2>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    4348:	4b27      	ldr	r3, [pc, #156]	; (43e8 <handleSPI+0x12a8>)
    434a:	55d8      	strb	r0, [r3, r7]
    434c:	e461      	b.n	3c12 <handleSPI+0xad2>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    434e:	ee07 7a90 	vmov	s15, r7
    4352:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    4356:	ed9f 7a25 	vldr	s14, [pc, #148]	; 43ec <handleSPI+0x12ac>
    435a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    435e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    4362:	4443      	add	r3, r8
    4364:	ee67 7a87 	vmul.f32	s15, s15, s14
    4368:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    436c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    4370:	f7ff b86a 	b.w	3448 <handleSPI+0x308>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    4374:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
    4378:	7001      	strb	r1, [r0, #0]
    437a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    437e:	4e1c      	ldr	r6, [pc, #112]	; (43f0 <handleSPI+0x12b0>)
    4380:	444a      	add	r2, r9
    4382:	444b      	add	r3, r9
    4384:	6296      	str	r6, [r2, #40]	; 0x28
    4386:	605e      	str	r6, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4388:	f7ff b85e 	b.w	3448 <handleSPI+0x308>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    438c:	f1bc 0f03 	cmp.w	ip, #3
    4390:	d811      	bhi.n	43b6 <handleSPI+0x1276>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    4392:	4b14      	ldr	r3, [pc, #80]	; (43e4 <handleSPI+0x12a4>)
    4394:	2201      	movs	r2, #1
    4396:	443b      	add	r3, r7
    4398:	f803 2c14 	strb.w	r2, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    439c:	e5c5      	b.n	3f2a <handleSPI+0xdea>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    439e:	f1bc 0f03 	cmp.w	ip, #3
    43a2:	d90f      	bls.n	43c4 <handleSPI+0x1284>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    43a4:	2f02      	cmp	r7, #2
    43a6:	f63f ada9 	bhi.w	3efc <handleSPI+0xdbc>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    43aa:	4b0f      	ldr	r3, [pc, #60]	; (43e8 <handleSPI+0x12a8>)
    43ac:	f04f 0b01 	mov.w	fp, #1
    43b0:	f803 b007 	strb.w	fp, [r3, r7]
    43b4:	e5a2      	b.n	3efc <handleSPI+0xdbc>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    43b6:	2f02      	cmp	r7, #2
    43b8:	f63f adb7 	bhi.w	3f2a <handleSPI+0xdea>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    43bc:	4b0a      	ldr	r3, [pc, #40]	; (43e8 <handleSPI+0x12a8>)
    43be:	2201      	movs	r2, #1
    43c0:	55da      	strb	r2, [r3, r7]
    43c2:	e5b2      	b.n	3f2a <handleSPI+0xdea>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    43c4:	4b07      	ldr	r3, [pc, #28]	; (43e4 <handleSPI+0x12a4>)
    43c6:	f04f 0b01 	mov.w	fp, #1
    43ca:	443b      	add	r3, r7
    43cc:	f803 bc14 	strb.w	fp, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    43d0:	e594      	b.n	3efc <handleSPI+0xdbc>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    43d2:	f1a7 0314 	sub.w	r3, r7, #20
    43d6:	2b03      	cmp	r3, #3
    43d8:	d985      	bls.n	42e6 <handleSPI+0x11a6>
    43da:	e41a      	b.n	3c12 <handleSPI+0xad2>
    43dc:	2aaaaaab 	.word	0x2aaaaaab
    43e0:	20015f68 	.word	0x20015f68
    43e4:	2001c944 	.word	0x2001c944
    43e8:	2001cd60 	.word	0x2001cd60
    43ec:	37fffffc 	.word	0x37fffffc
    43f0:	2000072c 	.word	0x2000072c
    43f4:	f3af 8000 	nop.w
    43f8:	f3af 8000 	nop.w
    43fc:	f3af 8000 	nop.w

00004400 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    4400:	4b02      	ldr	r3, [pc, #8]	; (440c <HAL_I2C_SlaveRxCpltCallback+0xc>)
    4402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4406:	601a      	str	r2, [r3, #0]
}
    4408:	4770      	bx	lr
    440a:	bf00      	nop
    440c:	20019b94 	.word	0x20019b94
    4410:	f3af 8000 	nop.w
    4414:	f3af 8000 	nop.w
    4418:	f3af 8000 	nop.w
    441c:	f3af 8000 	nop.w

00004420 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    4420:	4b01      	ldr	r3, [pc, #4]	; (4428 <HAL_I2C_MasterTxCpltCallback+0x8>)
    4422:	2200      	movs	r2, #0
    4424:	701a      	strb	r2, [r3, #0]
}
    4426:	4770      	bx	lr
    4428:	20016092 	.word	0x20016092
    442c:	f3af 8000 	nop.w
    4430:	f3af 8000 	nop.w
    4434:	f3af 8000 	nop.w
    4438:	f3af 8000 	nop.w
    443c:	f3af 8000 	nop.w

00004440 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    4440:	2100      	movs	r1, #0
	I2CErrors++;
    4442:	4a05      	ldr	r2, [pc, #20]	; (4458 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    4444:	4b05      	ldr	r3, [pc, #20]	; (445c <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    4446:	4806      	ldr	r0, [pc, #24]	; (4460 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    4448:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    444a:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    444c:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    444e:	3301      	adds	r3, #1
    4450:	b2db      	uxtb	r3, r3
    4452:	7013      	strb	r3, [r2, #0]
}
    4454:	4770      	bx	lr
    4456:	bf00      	nop
    4458:	20013ebc 	.word	0x20013ebc
    445c:	20016092 	.word	0x20016092
    4460:	20019fa8 	.word	0x20019fa8
    4464:	f3af 8000 	nop.w
    4468:	f3af 8000 	nop.w
    446c:	f3af 8000 	nop.w
    4470:	f3af 8000 	nop.w
    4474:	f3af 8000 	nop.w
    4478:	f3af 8000 	nop.w
    447c:	f3af 8000 	nop.w

00004480 <HAL_SPI_TxRxCpltCallback>:
{
    4480:	b570      	push	{r4, r5, r6, lr}
	if (hspi == &hspi5)
    4482:	4cb7      	ldr	r4, [pc, #732]	; (4760 <HAL_SPI_TxRxCpltCallback+0x2e0>)
	interrupted = 1;
    4484:	2201      	movs	r2, #1
    4486:	4bb7      	ldr	r3, [pc, #732]	; (4764 <HAL_SPI_TxRxCpltCallback+0x2e4>)
	if (hspi == &hspi5)
    4488:	4284      	cmp	r4, r0
	interrupted = 1;
    448a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    448c:	d04e      	beq.n	452c <HAL_SPI_TxRxCpltCallback+0xac>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    448e:	4bb6      	ldr	r3, [pc, #728]	; (4768 <HAL_SPI_TxRxCpltCallback+0x2e8>)
  __ASM volatile ("dsb 0xF":::"memory");
    4490:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4494:	4ab5      	ldr	r2, [pc, #724]	; (476c <HAL_SPI_TxRxCpltCallback+0x2ec>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4496:	f103 0120 	add.w	r1, r3, #32
    449a:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    449e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    44a2:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    44a6:	f8c2 425c 	str.w	r4, [r2, #604]	; 0x25c
    44aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    44ae:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    44b2:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    44b6:	2afe      	cmp	r2, #254	; 0xfe
    44b8:	d104      	bne.n	44c4 <HAL_SPI_TxRxCpltCallback+0x44>
    44ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    44be:	2bfd      	cmp	r3, #253	; 0xfd
    44c0:	f000 8145 	beq.w	474e <HAL_SPI_TxRxCpltCallback+0x2ce>
			HAL_SPI_Abort(&hspi1);
    44c4:	4daa      	ldr	r5, [pc, #680]	; (4770 <HAL_SPI_TxRxCpltCallback+0x2f0>)
    44c6:	4628      	mov	r0, r5
    44c8:	f004 ffb2 	bl	9430 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    44cc:	4ba9      	ldr	r3, [pc, #676]	; (4774 <HAL_SPI_TxRxCpltCallback+0x2f4>)
    44ce:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    44d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    44d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    44da:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    44de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    44e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    44e6:	f004 ffab 	bl	9440 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    44ea:	682e      	ldr	r6, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    44ec:	4a9e      	ldr	r2, [pc, #632]	; (4768 <HAL_SPI_TxRxCpltCallback+0x2e8>)
    44ee:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi1);
    44f0:	6831      	ldr	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    44f2:	4628      	mov	r0, r5
			__HAL_SPI_ENABLE(&hspi1);
    44f4:	f041 0101 	orr.w	r1, r1, #1
    44f8:	6031      	str	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    44fa:	18d1      	adds	r1, r2, r3
    44fc:	f004 ffb4 	bl	9468 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    4500:	4a9d      	ldr	r2, [pc, #628]	; (4778 <HAL_SPI_TxRxCpltCallback+0x2f8>)
    4502:	7813      	ldrb	r3, [r2, #0]
    4504:	3301      	adds	r3, #1
    4506:	b2db      	uxtb	r3, r3
    4508:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    450a:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    450e:	4a9b      	ldr	r2, [pc, #620]	; (477c <HAL_SPI_TxRxCpltCallback+0x2fc>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4510:	4b96      	ldr	r3, [pc, #600]	; (476c <HAL_SPI_TxRxCpltCallback+0x2ec>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4512:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4516:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
    451a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    451e:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    4522:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4526:	f3bf 8f6f 	isb	sy
}
    452a:	bd70      	pop	{r4, r5, r6, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    452c:	4b94      	ldr	r3, [pc, #592]	; (4780 <HAL_SPI_TxRxCpltCallback+0x300>)
    452e:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    4532:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4536:	4a8d      	ldr	r2, [pc, #564]	; (476c <HAL_SPI_TxRxCpltCallback+0x2ec>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4538:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    453c:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    4540:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4544:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4548:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    454c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4550:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    4554:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    4558:	2afe      	cmp	r2, #254	; 0xfe
    455a:	f040 80d4 	bne.w	4706 <HAL_SPI_TxRxCpltCallback+0x286>
    455e:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    4562:	2afd      	cmp	r2, #253	; 0xfd
    4564:	f040 80cf 	bne.w	4706 <HAL_SPI_TxRxCpltCallback+0x286>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4568:	4a86      	ldr	r2, [pc, #536]	; (4784 <HAL_SPI_TxRxCpltCallback+0x304>)
    456a:	7811      	ldrb	r1, [r2, #0]
    456c:	2900      	cmp	r1, #0
    456e:	f000 80f2 	beq.w	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4572:	4a85      	ldr	r2, [pc, #532]	; (4788 <HAL_SPI_TxRxCpltCallback+0x308>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4574:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4576:	6814      	ldr	r4, [r2, #0]
    4578:	6810      	ldr	r0, [r2, #0]
    457a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    457e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    4582:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
    4586:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    458a:	4880      	ldr	r0, [pc, #512]	; (478c <HAL_SPI_TxRxCpltCallback+0x30c>)
    458c:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4590:	b2a4      	uxth	r4, r4
    4592:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4594:	f000 80df 	beq.w	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4598:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    459a:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    459c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    45a0:	f894 5063 	ldrb.w	r5, [r4, #99]	; 0x63
    45a4:	6814      	ldr	r4, [r2, #0]
    45a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    45aa:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    45ae:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    45b2:	b2a4      	uxth	r4, r4
    45b4:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    45b6:	f000 80ce 	beq.w	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    45ba:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    45bc:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    45be:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    45c2:	f894 5065 	ldrb.w	r5, [r4, #101]	; 0x65
    45c6:	6814      	ldr	r4, [r2, #0]
    45c8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    45cc:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    45d0:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    45d4:	b2a4      	uxth	r4, r4
    45d6:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    45d8:	f000 80bd 	beq.w	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    45dc:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    45de:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    45e0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    45e4:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    45e8:	6814      	ldr	r4, [r2, #0]
    45ea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    45ee:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    45f2:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    45f6:	b2a4      	uxth	r4, r4
    45f8:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    45fa:	f000 80ac 	beq.w	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    45fe:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4600:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4602:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4606:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
    460a:	6814      	ldr	r4, [r2, #0]
    460c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4610:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    4614:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4618:	b2a4      	uxth	r4, r4
    461a:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    461c:	f000 809b 	beq.w	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4620:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4622:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4624:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4628:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
    462c:	6814      	ldr	r4, [r2, #0]
    462e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4632:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    4636:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    463a:	b2a4      	uxth	r4, r4
    463c:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    463e:	f000 808a 	beq.w	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4642:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4644:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4646:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    464a:	f894 506d 	ldrb.w	r5, [r4, #109]	; 0x6d
    464e:	6814      	ldr	r4, [r2, #0]
    4650:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4654:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    4658:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    465c:	b2a4      	uxth	r4, r4
    465e:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4660:	d079      	beq.n	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4662:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4664:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4666:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    466a:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
    466e:	6814      	ldr	r4, [r2, #0]
    4670:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4674:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    4678:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    467c:	b2a4      	uxth	r4, r4
    467e:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4680:	d069      	beq.n	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4682:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4684:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4686:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    468a:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
    468e:	6814      	ldr	r4, [r2, #0]
    4690:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4694:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    4698:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    469c:	b2a4      	uxth	r4, r4
    469e:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46a0:	d059      	beq.n	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46a2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46a4:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46a6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46aa:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    46ae:	6814      	ldr	r4, [r2, #0]
    46b0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46b4:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    46b8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    46bc:	b2a4      	uxth	r4, r4
    46be:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46c0:	d049      	beq.n	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46c2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46c4:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46ca:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
    46ce:	6814      	ldr	r4, [r2, #0]
    46d0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46d4:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    46d8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    46dc:	b2a4      	uxth	r4, r4
    46de:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46e0:	d039      	beq.n	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46e2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46e4:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46e6:	6815      	ldr	r5, [r2, #0]
    46e8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46ec:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    46f0:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    46f4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    46f8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    46fc:	b29b      	uxth	r3, r3
    46fe:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4700:	d029      	beq.n	4756 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4702:	6813      	ldr	r3, [r2, #0]
    4704:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4706:	4816      	ldr	r0, [pc, #88]	; (4760 <HAL_SPI_TxRxCpltCallback+0x2e0>)
    4708:	f004 fe92 	bl	9430 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    470c:	4b19      	ldr	r3, [pc, #100]	; (4774 <HAL_SPI_TxRxCpltCallback+0x2f4>)
    470e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4712:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4716:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    471a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    471e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4722:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4726:	f004 ff5b 	bl	95e0 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    472a:	6825      	ldr	r5, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    472c:	4a18      	ldr	r2, [pc, #96]	; (4790 <HAL_SPI_TxRxCpltCallback+0x310>)
    472e:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi5);
    4730:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4732:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    4736:	480a      	ldr	r0, [pc, #40]	; (4760 <HAL_SPI_TxRxCpltCallback+0x2e0>)
			__HAL_SPI_ENABLE(&hspi5);
    4738:	f044 0401 	orr.w	r4, r4, #1
    473c:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    473e:	f004 fe93 	bl	9468 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    4742:	4a0d      	ldr	r2, [pc, #52]	; (4778 <HAL_SPI_TxRxCpltCallback+0x2f8>)
    4744:	7813      	ldrb	r3, [r2, #0]
    4746:	3301      	adds	r3, #1
    4748:	b2db      	uxtb	r3, r3
    474a:	7013      	strb	r3, [r2, #0]
}
    474c:	bd70      	pop	{r4, r5, r6, pc}
			handleSPI(LEVER_BUFFER_SIZE);
    474e:	2020      	movs	r0, #32
    4750:	f7fe fcf6 	bl	3140 <handleSPI>
    4754:	e6d9      	b.n	450a <HAL_SPI_TxRxCpltCallback+0x8a>
			newPluck = 1;
    4756:	4b0f      	ldr	r3, [pc, #60]	; (4794 <HAL_SPI_TxRxCpltCallback+0x314>)
    4758:	2201      	movs	r2, #1
    475a:	601a      	str	r2, [r3, #0]
}
    475c:	bd70      	pop	{r4, r5, r6, pc}
    475e:	bf00      	nop
    4760:	2001c4f0 	.word	0x2001c4f0
    4764:	20004de8 	.word	0x20004de8
    4768:	30000800 	.word	0x30000800
    476c:	e000ed00 	.word	0xe000ed00
    4770:	2001c468 	.word	0x2001c468
    4774:	58024400 	.word	0x58024400
    4778:	20018a55 	.word	0x20018a55
    477c:	30000860 	.word	0x30000860
    4780:	38000000 	.word	0x38000000
    4784:	200004b1 	.word	0x200004b1
    4788:	20004ddc 	.word	0x20004ddc
    478c:	20013dd4 	.word	0x20013dd4
    4790:	38000040 	.word	0x38000040
    4794:	20004eb8 	.word	0x20004eb8
    4798:	f3af 8000 	nop.w
    479c:	f3af 8000 	nop.w

000047a0 <HAL_SPI_TxRxHalfCpltCallback>:
{
    47a0:	b570      	push	{r4, r5, r6, lr}
	if (hspi == &hspi5)
    47a2:	4cb6      	ldr	r4, [pc, #728]	; (4a7c <HAL_SPI_TxRxHalfCpltCallback+0x2dc>)
	interrupted = 1;
    47a4:	2201      	movs	r2, #1
    47a6:	4bb6      	ldr	r3, [pc, #728]	; (4a80 <HAL_SPI_TxRxHalfCpltCallback+0x2e0>)
	if (hspi == &hspi5)
    47a8:	4284      	cmp	r4, r0
	interrupted = 1;
    47aa:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    47ac:	d04c      	beq.n	4848 <HAL_SPI_TxRxHalfCpltCallback+0xa8>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    47ae:	4bb5      	ldr	r3, [pc, #724]	; (4a84 <HAL_SPI_TxRxHalfCpltCallback+0x2e4>)
  __ASM volatile ("dsb 0xF":::"memory");
    47b0:	f3bf 8f4f 	dsb	sy
    47b4:	4ab4      	ldr	r2, [pc, #720]	; (4a88 <HAL_SPI_TxRxHalfCpltCallback+0x2e8>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    47b6:	f103 0120 	add.w	r1, r3, #32
    47ba:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    47be:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    47c2:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    47c6:	f8c2 425c 	str.w	r4, [r2, #604]	; 0x25c
    47ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    47ce:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    47d2:	7f9a      	ldrb	r2, [r3, #30]
    47d4:	2afe      	cmp	r2, #254	; 0xfe
    47d6:	d103      	bne.n	47e0 <HAL_SPI_TxRxHalfCpltCallback+0x40>
    47d8:	7fdb      	ldrb	r3, [r3, #31]
    47da:	2bfd      	cmp	r3, #253	; 0xfd
    47dc:	f000 8145 	beq.w	4a6a <HAL_SPI_TxRxHalfCpltCallback+0x2ca>
			HAL_SPI_Abort(&hspi1);
    47e0:	4daa      	ldr	r5, [pc, #680]	; (4a8c <HAL_SPI_TxRxHalfCpltCallback+0x2ec>)
    47e2:	4628      	mov	r0, r5
    47e4:	f004 fe24 	bl	9430 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    47e8:	4ba9      	ldr	r3, [pc, #676]	; (4a90 <HAL_SPI_TxRxHalfCpltCallback+0x2f0>)
    47ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    47ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    47f2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    47f6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    47fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    47fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    4802:	f004 fe1d 	bl	9440 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    4806:	682e      	ldr	r6, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4808:	4a9e      	ldr	r2, [pc, #632]	; (4a84 <HAL_SPI_TxRxHalfCpltCallback+0x2e4>)
    480a:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi1);
    480c:	6831      	ldr	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    480e:	4628      	mov	r0, r5
			__HAL_SPI_ENABLE(&hspi1);
    4810:	f041 0101 	orr.w	r1, r1, #1
    4814:	6031      	str	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4816:	18d1      	adds	r1, r2, r3
    4818:	f004 fe26 	bl	9468 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    481c:	4a9d      	ldr	r2, [pc, #628]	; (4a94 <HAL_SPI_TxRxHalfCpltCallback+0x2f4>)
    481e:	7813      	ldrb	r3, [r2, #0]
    4820:	3301      	adds	r3, #1
    4822:	b2db      	uxtb	r3, r3
    4824:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    4826:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    482a:	4a9b      	ldr	r2, [pc, #620]	; (4a98 <HAL_SPI_TxRxHalfCpltCallback+0x2f8>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    482c:	4b96      	ldr	r3, [pc, #600]	; (4a88 <HAL_SPI_TxRxHalfCpltCallback+0x2e8>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    482e:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4832:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
    4836:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    483a:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    483e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4842:	f3bf 8f6f 	isb	sy
}
    4846:	bd70      	pop	{r4, r5, r6, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4848:	4b94      	ldr	r3, [pc, #592]	; (4a9c <HAL_SPI_TxRxHalfCpltCallback+0x2fc>)
    484a:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    484e:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4852:	4a8d      	ldr	r2, [pc, #564]	; (4a88 <HAL_SPI_TxRxHalfCpltCallback+0x2e8>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4854:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4858:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    485c:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4860:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4864:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    4868:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    486c:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    4870:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4874:	2afe      	cmp	r2, #254	; 0xfe
    4876:	f040 80d4 	bne.w	4a22 <HAL_SPI_TxRxHalfCpltCallback+0x282>
    487a:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
    487e:	2afd      	cmp	r2, #253	; 0xfd
    4880:	f040 80cf 	bne.w	4a22 <HAL_SPI_TxRxHalfCpltCallback+0x282>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4884:	4a86      	ldr	r2, [pc, #536]	; (4aa0 <HAL_SPI_TxRxHalfCpltCallback+0x300>)
    4886:	7811      	ldrb	r1, [r2, #0]
    4888:	2900      	cmp	r1, #0
    488a:	f000 80f2 	beq.w	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    488e:	4a85      	ldr	r2, [pc, #532]	; (4aa4 <HAL_SPI_TxRxHalfCpltCallback+0x304>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4890:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4892:	6814      	ldr	r4, [r2, #0]
    4894:	6810      	ldr	r0, [r2, #0]
    4896:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    489a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    489e:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
    48a2:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
    48a6:	4880      	ldr	r0, [pc, #512]	; (4aa8 <HAL_SPI_TxRxHalfCpltCallback+0x308>)
    48a8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    48ac:	b2a4      	uxth	r4, r4
    48ae:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    48b0:	f000 80df 	beq.w	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    48b4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    48b6:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    48b8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48bc:	f894 5043 	ldrb.w	r5, [r4, #67]	; 0x43
    48c0:	6814      	ldr	r4, [r2, #0]
    48c2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48c6:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
    48ca:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    48ce:	b2a4      	uxth	r4, r4
    48d0:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    48d2:	f000 80ce 	beq.w	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    48d6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    48d8:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    48da:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48de:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    48e2:	6814      	ldr	r4, [r2, #0]
    48e4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    48e8:	f894 4046 	ldrb.w	r4, [r4, #70]	; 0x46
    48ec:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    48f0:	b2a4      	uxth	r4, r4
    48f2:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    48f4:	f000 80bd 	beq.w	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    48f8:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    48fa:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    48fc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4900:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
    4904:	6814      	ldr	r4, [r2, #0]
    4906:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    490a:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
    490e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4912:	b2a4      	uxth	r4, r4
    4914:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4916:	f000 80ac 	beq.w	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    491a:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    491c:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    491e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4922:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
    4926:	6814      	ldr	r4, [r2, #0]
    4928:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    492c:	f894 404a 	ldrb.w	r4, [r4, #74]	; 0x4a
    4930:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4934:	b2a4      	uxth	r4, r4
    4936:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4938:	f000 809b 	beq.w	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    493c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    493e:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4940:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4944:	f894 504b 	ldrb.w	r5, [r4, #75]	; 0x4b
    4948:	6814      	ldr	r4, [r2, #0]
    494a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    494e:	f894 404c 	ldrb.w	r4, [r4, #76]	; 0x4c
    4952:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4956:	b2a4      	uxth	r4, r4
    4958:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    495a:	f000 808a 	beq.w	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    495e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4960:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4962:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4966:	f894 504d 	ldrb.w	r5, [r4, #77]	; 0x4d
    496a:	6814      	ldr	r4, [r2, #0]
    496c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4970:	f894 404e 	ldrb.w	r4, [r4, #78]	; 0x4e
    4974:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4978:	b2a4      	uxth	r4, r4
    497a:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    497c:	d079      	beq.n	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    497e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4980:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4982:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4986:	f894 504f 	ldrb.w	r5, [r4, #79]	; 0x4f
    498a:	6814      	ldr	r4, [r2, #0]
    498c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4990:	f894 4050 	ldrb.w	r4, [r4, #80]	; 0x50
    4994:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4998:	b2a4      	uxth	r4, r4
    499a:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    499c:	d069      	beq.n	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    499e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49a0:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49a2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49a6:	f894 5051 	ldrb.w	r5, [r4, #81]	; 0x51
    49aa:	6814      	ldr	r4, [r2, #0]
    49ac:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49b0:	f894 4052 	ldrb.w	r4, [r4, #82]	; 0x52
    49b4:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    49b8:	b2a4      	uxth	r4, r4
    49ba:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49bc:	d059      	beq.n	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49be:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49c0:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49c2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49c6:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
    49ca:	6814      	ldr	r4, [r2, #0]
    49cc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49d0:	f894 4054 	ldrb.w	r4, [r4, #84]	; 0x54
    49d4:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    49d8:	b2a4      	uxth	r4, r4
    49da:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49dc:	d049      	beq.n	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49de:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49e0:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49e2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49e6:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
    49ea:	6814      	ldr	r4, [r2, #0]
    49ec:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49f0:	f894 4056 	ldrb.w	r4, [r4, #86]	; 0x56
    49f4:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    49f8:	b2a4      	uxth	r4, r4
    49fa:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49fc:	d039      	beq.n	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49fe:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a00:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a02:	6815      	ldr	r5, [r2, #0]
    4a04:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a08:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4a0c:	f894 4057 	ldrb.w	r4, [r4, #87]	; 0x57
    4a10:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    4a14:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    4a18:	b29b      	uxth	r3, r3
    4a1a:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a1c:	d029      	beq.n	4a72 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a1e:	6813      	ldr	r3, [r2, #0]
    4a20:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4a22:	4816      	ldr	r0, [pc, #88]	; (4a7c <HAL_SPI_TxRxHalfCpltCallback+0x2dc>)
    4a24:	f004 fd04 	bl	9430 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4a28:	4b19      	ldr	r3, [pc, #100]	; (4a90 <HAL_SPI_TxRxHalfCpltCallback+0x2f0>)
    4a2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4a2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4a32:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    4a36:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4a3a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4a3e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4a42:	f004 fdcd 	bl	95e0 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    4a46:	6825      	ldr	r5, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4a48:	4a18      	ldr	r2, [pc, #96]	; (4aac <HAL_SPI_TxRxHalfCpltCallback+0x30c>)
    4a4a:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi5);
    4a4c:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4a4e:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    4a52:	480a      	ldr	r0, [pc, #40]	; (4a7c <HAL_SPI_TxRxHalfCpltCallback+0x2dc>)
			__HAL_SPI_ENABLE(&hspi5);
    4a54:	f044 0401 	orr.w	r4, r4, #1
    4a58:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4a5a:	f004 fd05 	bl	9468 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    4a5e:	4a0d      	ldr	r2, [pc, #52]	; (4a94 <HAL_SPI_TxRxHalfCpltCallback+0x2f4>)
    4a60:	7813      	ldrb	r3, [r2, #0]
    4a62:	3301      	adds	r3, #1
    4a64:	b2db      	uxtb	r3, r3
    4a66:	7013      	strb	r3, [r2, #0]
}
    4a68:	bd70      	pop	{r4, r5, r6, pc}
			handleSPI(0);
    4a6a:	2000      	movs	r0, #0
    4a6c:	f7fe fb68 	bl	3140 <handleSPI>
    4a70:	e6d9      	b.n	4826 <HAL_SPI_TxRxHalfCpltCallback+0x86>
			newPluck = 1;
    4a72:	4b0f      	ldr	r3, [pc, #60]	; (4ab0 <HAL_SPI_TxRxHalfCpltCallback+0x310>)
    4a74:	2201      	movs	r2, #1
    4a76:	601a      	str	r2, [r3, #0]
}
    4a78:	bd70      	pop	{r4, r5, r6, pc}
    4a7a:	bf00      	nop
    4a7c:	2001c4f0 	.word	0x2001c4f0
    4a80:	20004de8 	.word	0x20004de8
    4a84:	30000800 	.word	0x30000800
    4a88:	e000ed00 	.word	0xe000ed00
    4a8c:	2001c468 	.word	0x2001c468
    4a90:	58024400 	.word	0x58024400
    4a94:	20018a55 	.word	0x20018a55
    4a98:	30000860 	.word	0x30000860
    4a9c:	38000000 	.word	0x38000000
    4aa0:	200004b1 	.word	0x200004b1
    4aa4:	20004ddc 	.word	0x20004ddc
    4aa8:	20013dd4 	.word	0x20013dd4
    4aac:	38000040 	.word	0x38000040
    4ab0:	20004eb8 	.word	0x20004eb8
    4ab4:	f3af 8000 	nop.w
    4ab8:	f3af 8000 	nop.w
    4abc:	f3af 8000 	nop.w

00004ac0 <HAL_SPI_RxCpltCallback>:
{
    4ac0:	b538      	push	{r3, r4, r5, lr}
	if (hspi == &hspi5)
    4ac2:	4c90      	ldr	r4, [pc, #576]	; (4d04 <HAL_SPI_RxCpltCallback+0x244>)
	interrupted = 1;
    4ac4:	2201      	movs	r2, #1
    4ac6:	4b90      	ldr	r3, [pc, #576]	; (4d08 <HAL_SPI_RxCpltCallback+0x248>)
	if (hspi == &hspi5)
    4ac8:	4284      	cmp	r4, r0
	interrupted = 1;
    4aca:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    4acc:	d000      	beq.n	4ad0 <HAL_SPI_RxCpltCallback+0x10>
}
    4ace:	bd38      	pop	{r3, r4, r5, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4ad0:	4b8e      	ldr	r3, [pc, #568]	; (4d0c <HAL_SPI_RxCpltCallback+0x24c>)
    4ad2:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    4ad6:	f3bf 8f4f 	dsb	sy
    4ada:	4a8d      	ldr	r2, [pc, #564]	; (4d10 <HAL_SPI_RxCpltCallback+0x250>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4adc:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4ae0:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    4ae4:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4ae8:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4aec:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    4af0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4af4:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    4af8:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    4afc:	2afe      	cmp	r2, #254	; 0xfe
    4afe:	f040 80d4 	bne.w	4caa <HAL_SPI_RxCpltCallback+0x1ea>
    4b02:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    4b06:	2afd      	cmp	r2, #253	; 0xfd
    4b08:	f040 80cf 	bne.w	4caa <HAL_SPI_RxCpltCallback+0x1ea>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b0c:	4a81      	ldr	r2, [pc, #516]	; (4d14 <HAL_SPI_RxCpltCallback+0x254>)
    4b0e:	7811      	ldrb	r1, [r2, #0]
    4b10:	2900      	cmp	r1, #0
    4b12:	f000 80ec 	beq.w	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b16:	4a80      	ldr	r2, [pc, #512]	; (4d18 <HAL_SPI_RxCpltCallback+0x258>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b18:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b1a:	6814      	ldr	r4, [r2, #0]
    4b1c:	6810      	ldr	r0, [r2, #0]
    4b1e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b22:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    4b26:	f894 c061 	ldrb.w	ip, [r4, #97]	; 0x61
    4b2a:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    4b2e:	487b      	ldr	r0, [pc, #492]	; (4d1c <HAL_SPI_RxCpltCallback+0x25c>)
    4b30:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4b34:	b2a4      	uxth	r4, r4
    4b36:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b38:	f000 80d9 	beq.w	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b3c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b3e:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b40:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b44:	f894 c063 	ldrb.w	ip, [r4, #99]	; 0x63
    4b48:	6814      	ldr	r4, [r2, #0]
    4b4a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b4e:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    4b52:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4b56:	b2a4      	uxth	r4, r4
    4b58:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b5a:	f000 80c8 	beq.w	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b5e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b60:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b62:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b66:	f894 c065 	ldrb.w	ip, [r4, #101]	; 0x65
    4b6a:	6814      	ldr	r4, [r2, #0]
    4b6c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b70:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    4b74:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4b78:	b2a4      	uxth	r4, r4
    4b7a:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b7c:	f000 80b7 	beq.w	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b80:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b82:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b84:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b88:	f894 c067 	ldrb.w	ip, [r4, #103]	; 0x67
    4b8c:	6814      	ldr	r4, [r2, #0]
    4b8e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4b92:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    4b96:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4b9a:	b2a4      	uxth	r4, r4
    4b9c:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b9e:	f000 80a6 	beq.w	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4ba2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ba4:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4ba6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4baa:	f894 c069 	ldrb.w	ip, [r4, #105]	; 0x69
    4bae:	6814      	ldr	r4, [r2, #0]
    4bb0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4bb4:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    4bb8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4bbc:	b2a4      	uxth	r4, r4
    4bbe:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4bc0:	f000 8095 	beq.w	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4bc4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4bc6:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4bc8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4bcc:	f894 c06b 	ldrb.w	ip, [r4, #107]	; 0x6b
    4bd0:	6814      	ldr	r4, [r2, #0]
    4bd2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4bd6:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    4bda:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4bde:	b2a4      	uxth	r4, r4
    4be0:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4be2:	f000 8084 	beq.w	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4be6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4be8:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4bea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4bee:	f894 c06d 	ldrb.w	ip, [r4, #109]	; 0x6d
    4bf2:	6814      	ldr	r4, [r2, #0]
    4bf4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4bf8:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    4bfc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c00:	b2a4      	uxth	r4, r4
    4c02:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c04:	d073      	beq.n	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c06:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c08:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c0a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c0e:	f894 c06f 	ldrb.w	ip, [r4, #111]	; 0x6f
    4c12:	6814      	ldr	r4, [r2, #0]
    4c14:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c18:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    4c1c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c20:	b2a4      	uxth	r4, r4
    4c22:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c24:	d063      	beq.n	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c26:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c28:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c2a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c2e:	f894 c071 	ldrb.w	ip, [r4, #113]	; 0x71
    4c32:	6814      	ldr	r4, [r2, #0]
    4c34:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c38:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    4c3c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c40:	b2a4      	uxth	r4, r4
    4c42:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c44:	d053      	beq.n	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c46:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c48:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c4a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c4e:	f894 c073 	ldrb.w	ip, [r4, #115]	; 0x73
    4c52:	6814      	ldr	r4, [r2, #0]
    4c54:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c58:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    4c5c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c60:	b2a4      	uxth	r4, r4
    4c62:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c64:	d043      	beq.n	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c66:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c68:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c6a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c6e:	f894 c075 	ldrb.w	ip, [r4, #117]	; 0x75
    4c72:	6814      	ldr	r4, [r2, #0]
    4c74:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c78:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    4c7c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c80:	b2a4      	uxth	r4, r4
    4c82:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c84:	d033      	beq.n	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c86:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c88:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c8a:	6815      	ldr	r5, [r2, #0]
    4c8c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c90:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4c94:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    4c98:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4c9c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    4ca0:	b29b      	uxth	r3, r3
    4ca2:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ca4:	d023      	beq.n	4cee <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4ca6:	6813      	ldr	r3, [r2, #0]
    4ca8:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4caa:	4816      	ldr	r0, [pc, #88]	; (4d04 <HAL_SPI_RxCpltCallback+0x244>)
    4cac:	f004 fbc0 	bl	9430 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4cb0:	4b1b      	ldr	r3, [pc, #108]	; (4d20 <HAL_SPI_RxCpltCallback+0x260>)
    4cb2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4cb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4cba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    4cbe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4cc2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4cc6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4cca:	f004 fc89 	bl	95e0 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    4cce:	6824      	ldr	r4, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4cd0:	2240      	movs	r2, #64	; 0x40
    4cd2:	4914      	ldr	r1, [pc, #80]	; (4d24 <HAL_SPI_RxCpltCallback+0x264>)
			__HAL_SPI_ENABLE(&hspi5);
    4cd4:	6823      	ldr	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4cd6:	480b      	ldr	r0, [pc, #44]	; (4d04 <HAL_SPI_RxCpltCallback+0x244>)
			__HAL_SPI_ENABLE(&hspi5);
    4cd8:	f043 0301 	orr.w	r3, r3, #1
    4cdc:	6023      	str	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4cde:	f004 fb13 	bl	9308 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    4ce2:	4a11      	ldr	r2, [pc, #68]	; (4d28 <HAL_SPI_RxCpltCallback+0x268>)
    4ce4:	7813      	ldrb	r3, [r2, #0]
    4ce6:	3301      	adds	r3, #1
    4ce8:	b2db      	uxtb	r3, r3
    4cea:	7013      	strb	r3, [r2, #0]
}
    4cec:	bd38      	pop	{r3, r4, r5, pc}
			newPluck = 1;
    4cee:	4b0f      	ldr	r3, [pc, #60]	; (4d2c <HAL_SPI_RxCpltCallback+0x26c>)
    4cf0:	2401      	movs	r4, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4cf2:	2240      	movs	r2, #64	; 0x40
    4cf4:	490b      	ldr	r1, [pc, #44]	; (4d24 <HAL_SPI_RxCpltCallback+0x264>)
			newPluck = 1;
    4cf6:	601c      	str	r4, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4cf8:	4802      	ldr	r0, [pc, #8]	; (4d04 <HAL_SPI_RxCpltCallback+0x244>)
}
    4cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4cfe:	f004 bb03 	b.w	9308 <__HAL_SPI_Receive_DMA_veneer>
    4d02:	bf00      	nop
    4d04:	2001c4f0 	.word	0x2001c4f0
    4d08:	20004de8 	.word	0x20004de8
    4d0c:	38000000 	.word	0x38000000
    4d10:	e000ed00 	.word	0xe000ed00
    4d14:	200004b1 	.word	0x200004b1
    4d18:	20004ddc 	.word	0x20004ddc
    4d1c:	20013dd4 	.word	0x20013dd4
    4d20:	58024400 	.word	0x58024400
    4d24:	38000040 	.word	0x38000040
    4d28:	20018a55 	.word	0x20018a55
    4d2c:	20004eb8 	.word	0x20004eb8
    4d30:	f3af 8000 	nop.w
    4d34:	f3af 8000 	nop.w
    4d38:	f3af 8000 	nop.w
    4d3c:	f3af 8000 	nop.w

00004d40 <HAL_SPI_RxHalfCpltCallback>:
{
    4d40:	b538      	push	{r3, r4, r5, lr}
	if (hspi == &hspi5)
    4d42:	4c90      	ldr	r4, [pc, #576]	; (4f84 <HAL_SPI_RxHalfCpltCallback+0x244>)
	interrupted = 1;
    4d44:	2201      	movs	r2, #1
    4d46:	4b90      	ldr	r3, [pc, #576]	; (4f88 <HAL_SPI_RxHalfCpltCallback+0x248>)
	if (hspi == &hspi5)
    4d48:	4284      	cmp	r4, r0
	interrupted = 1;
    4d4a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    4d4c:	d000      	beq.n	4d50 <HAL_SPI_RxHalfCpltCallback+0x10>
}
    4d4e:	bd38      	pop	{r3, r4, r5, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4d50:	4b8e      	ldr	r3, [pc, #568]	; (4f8c <HAL_SPI_RxHalfCpltCallback+0x24c>)
    4d52:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    4d56:	f3bf 8f4f 	dsb	sy
    4d5a:	4a8d      	ldr	r2, [pc, #564]	; (4f90 <HAL_SPI_RxHalfCpltCallback+0x250>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4d5c:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4d60:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    4d64:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4d68:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4d6c:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    4d70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4d74:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    4d78:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4d7c:	2afe      	cmp	r2, #254	; 0xfe
    4d7e:	f040 80d4 	bne.w	4f2a <HAL_SPI_RxHalfCpltCallback+0x1ea>
    4d82:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
    4d86:	2afd      	cmp	r2, #253	; 0xfd
    4d88:	f040 80cf 	bne.w	4f2a <HAL_SPI_RxHalfCpltCallback+0x1ea>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d8c:	4a81      	ldr	r2, [pc, #516]	; (4f94 <HAL_SPI_RxHalfCpltCallback+0x254>)
    4d8e:	7811      	ldrb	r1, [r2, #0]
    4d90:	2900      	cmp	r1, #0
    4d92:	f000 80ec 	beq.w	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d96:	4a80      	ldr	r2, [pc, #512]	; (4f98 <HAL_SPI_RxHalfCpltCallback+0x258>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d98:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4d9a:	6814      	ldr	r4, [r2, #0]
    4d9c:	6810      	ldr	r0, [r2, #0]
    4d9e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4da2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    4da6:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
    4daa:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
    4dae:	487b      	ldr	r0, [pc, #492]	; (4f9c <HAL_SPI_RxHalfCpltCallback+0x25c>)
    4db0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4db4:	b2a4      	uxth	r4, r4
    4db6:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4db8:	f000 80d9 	beq.w	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4dbc:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4dbe:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4dc0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4dc4:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
    4dc8:	6814      	ldr	r4, [r2, #0]
    4dca:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4dce:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
    4dd2:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4dd6:	b2a4      	uxth	r4, r4
    4dd8:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4dda:	f000 80c8 	beq.w	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4dde:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4de0:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4de2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4de6:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
    4dea:	6814      	ldr	r4, [r2, #0]
    4dec:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4df0:	f894 4046 	ldrb.w	r4, [r4, #70]	; 0x46
    4df4:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4df8:	b2a4      	uxth	r4, r4
    4dfa:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4dfc:	f000 80b7 	beq.w	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e00:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e02:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e04:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e08:	f894 c047 	ldrb.w	ip, [r4, #71]	; 0x47
    4e0c:	6814      	ldr	r4, [r2, #0]
    4e0e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e12:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
    4e16:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4e1a:	b2a4      	uxth	r4, r4
    4e1c:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e1e:	f000 80a6 	beq.w	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e22:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e24:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e26:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e2a:	f894 c049 	ldrb.w	ip, [r4, #73]	; 0x49
    4e2e:	6814      	ldr	r4, [r2, #0]
    4e30:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e34:	f894 404a 	ldrb.w	r4, [r4, #74]	; 0x4a
    4e38:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4e3c:	b2a4      	uxth	r4, r4
    4e3e:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e40:	f000 8095 	beq.w	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e44:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e46:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e48:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e4c:	f894 c04b 	ldrb.w	ip, [r4, #75]	; 0x4b
    4e50:	6814      	ldr	r4, [r2, #0]
    4e52:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e56:	f894 404c 	ldrb.w	r4, [r4, #76]	; 0x4c
    4e5a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4e5e:	b2a4      	uxth	r4, r4
    4e60:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e62:	f000 8084 	beq.w	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e66:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e68:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e6a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e6e:	f894 c04d 	ldrb.w	ip, [r4, #77]	; 0x4d
    4e72:	6814      	ldr	r4, [r2, #0]
    4e74:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e78:	f894 404e 	ldrb.w	r4, [r4, #78]	; 0x4e
    4e7c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4e80:	b2a4      	uxth	r4, r4
    4e82:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e84:	d073      	beq.n	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e86:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e88:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e8a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e8e:	f894 c04f 	ldrb.w	ip, [r4, #79]	; 0x4f
    4e92:	6814      	ldr	r4, [r2, #0]
    4e94:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e98:	f894 4050 	ldrb.w	r4, [r4, #80]	; 0x50
    4e9c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4ea0:	b2a4      	uxth	r4, r4
    4ea2:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ea4:	d063      	beq.n	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ea6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ea8:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4eaa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4eae:	f894 c051 	ldrb.w	ip, [r4, #81]	; 0x51
    4eb2:	6814      	ldr	r4, [r2, #0]
    4eb4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4eb8:	f894 4052 	ldrb.w	r4, [r4, #82]	; 0x52
    4ebc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4ec0:	b2a4      	uxth	r4, r4
    4ec2:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ec4:	d053      	beq.n	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ec6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ec8:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4eca:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ece:	f894 c053 	ldrb.w	ip, [r4, #83]	; 0x53
    4ed2:	6814      	ldr	r4, [r2, #0]
    4ed4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ed8:	f894 4054 	ldrb.w	r4, [r4, #84]	; 0x54
    4edc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4ee0:	b2a4      	uxth	r4, r4
    4ee2:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ee4:	d043      	beq.n	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ee6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ee8:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4eea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4eee:	f894 c055 	ldrb.w	ip, [r4, #85]	; 0x55
    4ef2:	6814      	ldr	r4, [r2, #0]
    4ef4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ef8:	f894 4056 	ldrb.w	r4, [r4, #86]	; 0x56
    4efc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4f00:	b2a4      	uxth	r4, r4
    4f02:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f04:	d033      	beq.n	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f06:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f08:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f0a:	6815      	ldr	r5, [r2, #0]
    4f0c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f10:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4f14:	f894 4057 	ldrb.w	r4, [r4, #87]	; 0x57
    4f18:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    4f1c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    4f20:	b29b      	uxth	r3, r3
    4f22:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f24:	d023      	beq.n	4f6e <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f26:	6813      	ldr	r3, [r2, #0]
    4f28:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4f2a:	4816      	ldr	r0, [pc, #88]	; (4f84 <HAL_SPI_RxHalfCpltCallback+0x244>)
    4f2c:	f004 fa80 	bl	9430 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4f30:	4b1b      	ldr	r3, [pc, #108]	; (4fa0 <HAL_SPI_RxHalfCpltCallback+0x260>)
    4f32:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4f36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4f3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    4f3e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4f42:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4f46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4f4a:	f004 fb49 	bl	95e0 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    4f4e:	6824      	ldr	r4, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4f50:	2240      	movs	r2, #64	; 0x40
    4f52:	4914      	ldr	r1, [pc, #80]	; (4fa4 <HAL_SPI_RxHalfCpltCallback+0x264>)
			__HAL_SPI_ENABLE(&hspi5);
    4f54:	6823      	ldr	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4f56:	480b      	ldr	r0, [pc, #44]	; (4f84 <HAL_SPI_RxHalfCpltCallback+0x244>)
			__HAL_SPI_ENABLE(&hspi5);
    4f58:	f043 0301 	orr.w	r3, r3, #1
    4f5c:	6023      	str	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4f5e:	f004 f9d3 	bl	9308 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    4f62:	4a11      	ldr	r2, [pc, #68]	; (4fa8 <HAL_SPI_RxHalfCpltCallback+0x268>)
    4f64:	7813      	ldrb	r3, [r2, #0]
    4f66:	3301      	adds	r3, #1
    4f68:	b2db      	uxtb	r3, r3
    4f6a:	7013      	strb	r3, [r2, #0]
}
    4f6c:	bd38      	pop	{r3, r4, r5, pc}
			newPluck = 1;
    4f6e:	4b0f      	ldr	r3, [pc, #60]	; (4fac <HAL_SPI_RxHalfCpltCallback+0x26c>)
    4f70:	2401      	movs	r4, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4f72:	2240      	movs	r2, #64	; 0x40
    4f74:	490b      	ldr	r1, [pc, #44]	; (4fa4 <HAL_SPI_RxHalfCpltCallback+0x264>)
			newPluck = 1;
    4f76:	601c      	str	r4, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4f78:	4802      	ldr	r0, [pc, #8]	; (4f84 <HAL_SPI_RxHalfCpltCallback+0x244>)
}
    4f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4f7e:	f004 b9c3 	b.w	9308 <__HAL_SPI_Receive_DMA_veneer>
    4f82:	bf00      	nop
    4f84:	2001c4f0 	.word	0x2001c4f0
    4f88:	20004de8 	.word	0x20004de8
    4f8c:	38000000 	.word	0x38000000
    4f90:	e000ed00 	.word	0xe000ed00
    4f94:	200004b1 	.word	0x200004b1
    4f98:	20004ddc 	.word	0x20004ddc
    4f9c:	20013dd4 	.word	0x20013dd4
    4fa0:	58024400 	.word	0x58024400
    4fa4:	38000040 	.word	0x38000040
    4fa8:	20018a55 	.word	0x20018a55
    4fac:	20004eb8 	.word	0x20004eb8
	...

00004fc0 <audioInitString1>:
	return out * 4.366812227074236f; //output scaling to bring +/-0.229 to +/-1.0
}


void __ATTR_ITCMRAM audioInitString1()
{
    4fc0:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4fc2:	4e21      	ldr	r6, [pc, #132]	; (5048 <audioInitString1+0x88>)
    4fc4:	7833      	ldrb	r3, [r6, #0]
{
    4fc6:	ed2d 8b06 	vpush	{d8-d10}
	for (int v = 0; v < numStringsThisBoard; v++)
    4fca:	b3bb      	cbz	r3, 503c <audioInitString1+0x7c>
    4fcc:	4c1f      	ldr	r4, [pc, #124]	; (504c <audioInitString1+0x8c>)
    4fce:	2500      	movs	r5, #0
	{

		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    4fd0:	eddf aa1f 	vldr	s21, [pc, #124]	; 5050 <audioInitString1+0x90>
    4fd4:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 5054 <audioInitString1+0x94>
    4fd8:	ed9f aa1f 	vldr	s20, [pc, #124]	; 5058 <audioInitString1+0x98>
    4fdc:	eddf 9a1f 	vldr	s19, [pc, #124]	; 505c <audioInitString1+0x9c>
    4fe0:	ed9f 9a1f 	vldr	s18, [pc, #124]	; 5060 <audioInitString1+0xa0>
													 0.99999f, 0.0f, 0.01f,
												 0.01f, 0, &mediumPool);
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    4fe4:	eddf 8a1f 	vldr	s17, [pc, #124]	; 5064 <audioInitString1+0xa4>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    4fe8:	4b1f      	ldr	r3, [pc, #124]	; (5068 <audioInitString1+0xa8>)
    4fea:	eef0 2a6a 	vmov.f32	s5, s21
    4fee:	eef0 1a48 	vmov.f32	s3, s16
    4ff2:	2200      	movs	r2, #0
    4ff4:	eeb0 1a4a 	vmov.f32	s2, s20
    4ff8:	ed9f 2a15 	vldr	s4, [pc, #84]	; 5050 <audioInitString1+0x90>
    4ffc:	eef0 0a69 	vmov.f32	s1, s19
    5000:	2104      	movs	r1, #4
    5002:	4620      	mov	r0, r4
    5004:	eeb0 0a49 	vmov.f32	s0, s18
    5008:	f004 fb5e 	bl	96c8 <__tSimpleLivingString3_initToPool_veneer>
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    500c:	4620      	mov	r0, r4
    500e:	eeb0 0a68 	vmov.f32	s0, s17
	for (int v = 0; v < numStringsThisBoard; v++)
    5012:	3501      	adds	r5, #1
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    5014:	f004 fac0 	bl	9598 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    5018:	4620      	mov	r0, r4
    501a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 506c <audioInitString1+0xac>
    501e:	f004 f9a7 	bl	9370 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    5022:	4620      	mov	r0, r4
    5024:	eeb0 0a48 	vmov.f32	s0, s16
    5028:	f004 f98a 	bl	9340 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    502c:	4620      	mov	r0, r4
    502e:	2101      	movs	r1, #1
	for (int v = 0; v < numStringsThisBoard; v++)
    5030:	3404      	adds	r4, #4
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    5032:	f004 fb35 	bl	96a0 <__tSimpleLivingString3_setLevMode_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    5036:	7833      	ldrb	r3, [r6, #0]
    5038:	42ab      	cmp	r3, r5
    503a:	dcd5      	bgt.n	4fe8 <audioInitString1+0x28>

	}

	whichStringModelLoaded = String1Loaded;
    503c:	4b0c      	ldr	r3, [pc, #48]	; (5070 <audioInitString1+0xb0>)
    503e:	2200      	movs	r2, #0
    5040:	701a      	strb	r2, [r3, #0]
}
    5042:	ecbd 8b06 	vpop	{d8-d10}
    5046:	bd70      	pop	{r4, r5, r6, pc}
    5048:	200004b1 	.word	0x200004b1
    504c:	2001c578 	.word	0x2001c578
    5050:	3c23d70a 	.word	0x3c23d70a
    5054:	00000000 	.word	0x00000000
    5058:	3f7fff58 	.word	0x3f7fff58
    505c:	4684d000 	.word	0x4684d000
    5060:	435c0000 	.word	0x435c0000
    5064:	3d40c0f0 	.word	0x3d40c0f0
    5068:	20004eb0 	.word	0x20004eb0
    506c:	3cf753bf 	.word	0x3cf753bf
    5070:	20013e29 	.word	0x20013e29
    5074:	f3af 8000 	nop.w
    5078:	f3af 8000 	nop.w
    507c:	f3af 8000 	nop.w

00005080 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    5080:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5082:	4e07      	ldr	r6, [pc, #28]	; (50a0 <audioFreeString1+0x20>)
    5084:	7833      	ldrb	r3, [r6, #0]
    5086:	b14b      	cbz	r3, 509c <audioFreeString1+0x1c>
    5088:	4d06      	ldr	r5, [pc, #24]	; (50a4 <audioFreeString1+0x24>)
    508a:	2400      	movs	r4, #0
	{
		tSimpleLivingString3_free(&livStr[v]);
    508c:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    508e:	3401      	adds	r4, #1
		tSimpleLivingString3_free(&livStr[v]);
    5090:	f004 fa6e 	bl	9570 <__tSimpleLivingString3_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    5094:	7833      	ldrb	r3, [r6, #0]
    5096:	3504      	adds	r5, #4
    5098:	42a3      	cmp	r3, r4
    509a:	dcf7      	bgt.n	508c <audioFreeString1+0xc>
	}
}
    509c:	bd70      	pop	{r4, r5, r6, pc}
    509e:	bf00      	nop
    50a0:	200004b1 	.word	0x200004b1
    50a4:	2001c578 	.word	0x2001c578
    50a8:	f3af 8000 	nop.w
    50ac:	f3af 8000 	nop.w
    50b0:	f3af 8000 	nop.w
    50b4:	f3af 8000 	nop.w
    50b8:	f3af 8000 	nop.w
    50bc:	f3af 8000 	nop.w

000050c0 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    50c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    50c4:	4b9a      	ldr	r3, [pc, #616]	; (5330 <audioTickString1+0x270>)
    50c6:	4c9b      	ldr	r4, [pc, #620]	; (5334 <audioTickString1+0x274>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    50c8:	489b      	ldr	r0, [pc, #620]	; (5338 <audioTickString1+0x278>)
    50ca:	4e9c      	ldr	r6, [pc, #624]	; (533c <audioTickString1+0x27c>)
    50cc:	4625      	mov	r5, r4
    50ce:	f104 0830 	add.w	r8, r4, #48	; 0x30
{
    50d2:	ed2d 8b0a 	vpush	{d8-d12}
    50d6:	b085      	sub	sp, #20
	float note[numStringsThisBoard];
    50d8:	781b      	ldrb	r3, [r3, #0]
{
    50da:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    50dc:	009b      	lsls	r3, r3, #2
    50de:	3307      	adds	r3, #7
    50e0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    50e4:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    50e8:	f004 fa52 	bl	9590 <__tExpSmooth_tick_veneer>
    50ec:	eeb0 8a40 	vmov.f32	s16, s0
	float note[numStringsThisBoard];
    50f0:	46e9      	mov	r9, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    50f2:	4630      	mov	r0, r6
	for (int i = 0; i < 12; i++)
    50f4:	3604      	adds	r6, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    50f6:	f004 fa4b 	bl	9590 <__tExpSmooth_tick_veneer>
    50fa:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < 12; i++)
    50fe:	4545      	cmp	r5, r8
    5100:	d1f7      	bne.n	50f2 <audioTickString1+0x32>
	}
	pluckPos = knobScaled[9];

	for (int i = 0; i < numStringsThisBoard; i++)
    5102:	4b8b      	ldr	r3, [pc, #556]	; (5330 <audioTickString1+0x270>)
	pluckPos = knobScaled[9];
    5104:	4a8e      	ldr	r2, [pc, #568]	; (5340 <audioTickString1+0x280>)
    5106:	6a61      	ldr	r1, [r4, #36]	; 0x24
	for (int i = 0; i < numStringsThisBoard; i++)
    5108:	781b      	ldrb	r3, [r3, #0]
	float temp = 0.0f;
    510a:	eddf ba8e 	vldr	s23, [pc, #568]	; 5344 <audioTickString1+0x284>
	pluckPos = knobScaled[9];
    510e:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    5110:	2b00      	cmp	r3, #0
    5112:	f000 80d2 	beq.w	52ba <audioTickString1+0x1fa>
    5116:	4a8c      	ldr	r2, [pc, #560]	; (5348 <audioTickString1+0x288>)
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
    5118:	eef0 8a6b 	vmov.f32	s17, s23
    511c:	4b8b      	ldr	r3, [pc, #556]	; (534c <audioTickString1+0x28c>)
    511e:	60fa      	str	r2, [r7, #12]
	for (int i = 0; i < numStringsThisBoard; i++)
    5120:	2200      	movs	r2, #0
    5122:	60bb      	str	r3, [r7, #8]
    5124:	464b      	mov	r3, r9
    5126:	4d8a      	ldr	r5, [pc, #552]	; (5350 <audioTickString1+0x290>)
		{
			decay = (knobScaled[10] * 800.0f) + 10.0f;
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
		tSimpleLivingString3_setDecay(&livStr[i], decay);
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    5128:	4692      	mov	sl, r2
    512a:	f8df 827c 	ldr.w	r8, [pc, #636]	; 53a8 <audioTickString1+0x2e8>
    512e:	eddf aa89 	vldr	s21, [pc, #548]	; 5354 <audioTickString1+0x294>
		float decay = 0.1f;
    5132:	ed9f aa89 	vldr	s20, [pc, #548]	; 5358 <audioTickString1+0x298>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    5136:	ed9f ba89 	vldr	s22, [pc, #548]	; 535c <audioTickString1+0x29c>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    513a:	eddf 9a89 	vldr	s19, [pc, #548]	; 5360 <audioTickString1+0x2a0>
    513e:	4e89      	ldr	r6, [pc, #548]	; (5364 <audioTickString1+0x2a4>)
    5140:	f8df 9268 	ldr.w	r9, [pc, #616]	; 53ac <audioTickString1+0x2ec>
    5144:	f8df b268 	ldr.w	fp, [pc, #616]	; 53b0 <audioTickString1+0x2f0>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    5148:	ed9f 9a87 	vldr	s18, [pc, #540]	; 5368 <audioTickString1+0x2a8>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    514c:	4a87      	ldr	r2, [pc, #540]	; (536c <audioTickString1+0x2ac>)
			note[i] = 0.0f;
    514e:	eeb0 ca68 	vmov.f32	s24, s17
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    5152:	eb02 018a 	add.w	r1, r2, sl, lsl #2
    5156:	68ba      	ldr	r2, [r7, #8]
    5158:	edd1 7a00 	vldr	s15, [r1]
    515c:	ecb2 7a01 	vldmia	r2!, {s14}
    5160:	ee77 7a87 	vadd.f32	s15, s15, s14
    5164:	60ba      	str	r2, [r7, #8]
		if (note[i] < 0.0f)
    5166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    516a:	ece3 7a01 	vstmia	r3!, {s15}
		if (note[i] < 0.0f)
    516e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5172:	f100 80d9 	bmi.w	5328 <audioTickString1+0x268>
    5176:	ed43 7a01 	vstr	s15, [r3, #-4]
		if (note[i] > 127.0f)
    517a:	fe87 caea 	vminnm.f32	s24, s15, s21
		if (lsDecay[i])
    517e:	68fa      	ldr	r2, [r7, #12]
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    5180:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
		float decay = 0.1f;
    5184:	eef0 ca4a 	vmov.f32	s25, s20
    5188:	ed03 ca01 	vstr	s24, [r3, #-4]
		if (lsDecay[i])
    518c:	f812 1b01 	ldrb.w	r1, [r2], #1
    5190:	60fa      	str	r2, [r7, #12]
    5192:	b129      	cbz	r1, 51a0 <audioTickString1+0xe0>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    5194:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    5198:	eee7 7a0b 	vfma.f32	s15, s14, s22
    519c:	eef0 ca67 	vmov.f32	s25, s15
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    51a0:	4628      	mov	r0, r5
    51a2:	ed94 0a08 	vldr	s0, [r4, #32]
    51a6:	603b      	str	r3, [r7, #0]
    51a8:	f004 f956 	bl	9458 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    51ac:	4628      	mov	r0, r5
    51ae:	eeb0 0a6c 	vmov.f32	s0, s25
    51b2:	f004 f955 	bl	9460 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    51b6:	4628      	mov	r0, r5
    51b8:	eeb0 0a49 	vmov.f32	s0, s18
	for (int i = 0; i < numStringsThisBoard; i++)
    51bc:	f10a 0a01 	add.w	sl, sl, #1
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    51c0:	f004 f9b2 	bl	9528 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    51c4:	ed94 0a00 	vldr	s0, [r4]
    51c8:	4628      	mov	r0, r5
    51ca:	ee20 0a29 	vmul.f32	s0, s0, s19
    51ce:	f004 f8b7 	bl	9340 <__tSimpleLivingString3_setLevStrength_veneer>

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    51d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 5370 <audioTickString1+0x2b0>
    51d6:	edd4 7a05 	vldr	s15, [r4, #20]
		livStr[i]->rippleDelay = knobScaled[11];
		tExpSmooth_setDest(&pitchSmoother[0][i], mtof(note[i]));
    51da:	eeb0 0a4c 	vmov.f32	s0, s24
		livStr[i]->rippleDelay = knobScaled[11];
    51de:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    51e2:	ee67 7a87 	vmul.f32	s15, s15, s14
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    51e6:	607d      	str	r5, [r7, #4]
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    51e8:	f855 0b04 	ldr.w	r0, [r5], #4
		livStr[i]->rippleDelay = knobScaled[11];
    51ec:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    51f0:	edc0 7a19 	vstr	s15, [r0, #100]	; 0x64
		tExpSmooth_setDest(&pitchSmoother[0][i], mtof(note[i]));
    51f4:	f004 fa30 	bl	9658 <__mtof_veneer>
    51f8:	4640      	mov	r0, r8
    51fa:	f004 f8c5 	bl	9388 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmoother[0][i]);
    51fe:	4640      	mov	r0, r8
    5200:	f004 f9c6 	bl	9590 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    5204:	6879      	ldr	r1, [r7, #4]
	for (int i = 0; i < numStringsThisBoard; i++)
    5206:	f108 0804 	add.w	r8, r8, #4
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    520a:	4608      	mov	r0, r1
    520c:	f004 f95c 	bl	94c8 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    5210:	4b58      	ldr	r3, [pc, #352]	; (5374 <audioTickString1+0x2b4>)
    5212:	ed9b 0a00 	vldr	s0, [fp]
		//if (barDelta > 0.2f)
		{
			//barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    5216:	4630      	mov	r0, r6
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    5218:	edd3 7a00 	vldr	s15, [r3]
    521c:	ee30 0a67 	vsub.f32	s0, s0, s15
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    5220:	eeb0 0ac0 	vabs.f32	s0, s0
    5224:	f004 f8b0 	bl	9388 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    5228:	4630      	mov	r0, r6
    522a:	f004 f9b1 	bl	9590 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    522e:	4648      	mov	r0, r9
    5230:	f004 f81e 	bl	9270 <__tEnvelopeFollower_tick_veneer>
		prevBarInMIDI[0] = barInMIDI[0];
    5234:	4b4f      	ldr	r3, [pc, #316]	; (5374 <audioTickString1+0x2b4>)
    5236:	f8db 0000 	ldr.w	r0, [fp]
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    523a:	eeb0 ca40 	vmov.f32	s24, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    523e:	3604      	adds	r6, #4
    5240:	f109 0904 	add.w	r9, r9, #4
		prevBarInMIDI[0] = barInMIDI[0];
    5244:	6018      	str	r0, [r3, #0]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    5246:	484c      	ldr	r0, [pc, #304]	; (5378 <audioTickString1+0x2b8>)
    5248:	f004 f80e 	bl	9268 <__tNoise_tick_veneer>
    524c:	484b      	ldr	r0, [pc, #300]	; (537c <audioTickString1+0x2bc>)
    524e:	f004 f897 	bl	9380 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    5252:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    5256:	edd4 7a01 	vldr	s15, [r4, #4]

		temp += pickupNonLinearity(tSimpleLivingString3_tick(&livStr[i], slideNoise));
    525a:	6879      	ldr	r1, [r7, #4]
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    525c:	ee67 7a87 	vmul.f32	s15, s15, s14
		temp += pickupNonLinearity(tSimpleLivingString3_tick(&livStr[i], slideNoise));
    5260:	4608      	mov	r0, r1
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    5262:	ee67 7a8c 	vmul.f32	s15, s15, s24
		temp += pickupNonLinearity(tSimpleLivingString3_tick(&livStr[i], slideNoise));
    5266:	ee27 0a80 	vmul.f32	s0, s15, s0
    526a:	f004 f8a1 	bl	93b0 <__tSimpleLivingString3_tick_veneer>
	x = x * 2.0f; //initial scaling to match mm of displacement
    526e:	ee30 7a00 	vadd.f32	s14, s0, s0
	float out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
    5272:	eddf 7a43 	vldr	s15, [pc, #268]	; 5380 <audioTickString1+0x2c0>
    5276:	eddf 3a43 	vldr	s7, [pc, #268]	; 5384 <audioTickString1+0x2c4>
    527a:	ee67 5a07 	vmul.f32	s11, s14, s14
    527e:	eddf 4a42 	vldr	s9, [pc, #264]	; 5388 <audioTickString1+0x2c8>
    5282:	ed9f 4a42 	vldr	s8, [pc, #264]	; 538c <audioTickString1+0x2cc>
    5286:	ed9f 6a42 	vldr	s12, [pc, #264]	; 5390 <audioTickString1+0x2d0>
    528a:	ee67 6a25 	vmul.f32	s13, s14, s11
	for (int i = 0; i < numStringsThisBoard; i++)
    528e:	4b28      	ldr	r3, [pc, #160]	; (5330 <audioTickString1+0x270>)
		temp += pickupNonLinearity(tSimpleLivingString3_tick(&livStr[i], slideNoise));
    5290:	ed9f 5a40 	vldr	s10, [pc, #256]	; 5394 <audioTickString1+0x2d4>
	for (int i = 0; i < numStringsThisBoard; i++)
    5294:	7819      	ldrb	r1, [r3, #0]
	float out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
    5296:	ee66 7aa7 	vmul.f32	s15, s13, s15
	for (int i = 0; i < numStringsThisBoard; i++)
    529a:	683b      	ldr	r3, [r7, #0]
	float out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
    529c:	ee67 6a26 	vmul.f32	s13, s14, s13
	for (int i = 0; i < numStringsThisBoard; i++)
    52a0:	4551      	cmp	r1, sl
    52a2:	eee5 7aa3 	vfma.f32	s15, s11, s7
    52a6:	eea6 6a84 	vfma.f32	s12, s13, s8
    52aa:	eee6 7aa4 	vfma.f32	s15, s13, s9
	float out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
    52ae:	eee6 7a07 	vfma.f32	s15, s12, s14
		temp += pickupNonLinearity(tSimpleLivingString3_tick(&livStr[i], slideNoise));
    52b2:	eee7 ba85 	vfma.f32	s23, s15, s10
	for (int i = 0; i < numStringsThisBoard; i++)
    52b6:	f73f af49 	bgt.w	514c <audioTickString1+0x8c>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    52ba:	ed9f 0a37 	vldr	s0, [pc, #220]	; 5398 <audioTickString1+0x2d8>
    52be:	eddf 7a37 	vldr	s15, [pc, #220]	; 539c <audioTickString1+0x2dc>
    52c2:	eef0 0a40 	vmov.f32	s1, s0
    52c6:	ed9f 1a23 	vldr	s2, [pc, #140]	; 5354 <audioTickString1+0x294>
    52ca:	eee8 0a27 	vfma.f32	s1, s16, s15
    52ce:	f004 f927 	bl	9520 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    52d2:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp = input;
	temp *= outVol * masterVolFromBrain;
    52d6:	4932      	ldr	r1, [pc, #200]	; (53a0 <audioTickString1+0x2e0>)
	float omAlpha = 1.0f - alpha;
    52d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    52dc:	4a31      	ldr	r2, [pc, #196]	; (53a4 <audioTickString1+0x2e4>)

	return temp;
}
    52de:	3714      	adds	r7, #20
	int volIdxInt = (int) volIdx;
    52e0:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    52e4:	edd1 6a00 	vldr	s13, [r1]
    52e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    52ec:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    52ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    52f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    52f6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    52fa:	ee30 0a47 	vsub.f32	s0, s0, s14
    52fe:	ee6b baa6 	vmul.f32	s23, s23, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5302:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    5306:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    530a:	ed93 7a00 	vldr	s14, [r3]
    530e:	edd2 6a00 	vldr	s13, [r2]
    5312:	ee20 0a26 	vmul.f32	s0, s0, s13
    5316:	eea7 0a27 	vfma.f32	s0, s14, s15
	temp *= outVol * masterVolFromBrain;
    531a:	ee2b 0a80 	vmul.f32	s0, s23, s0
}
    531e:	46bd      	mov	sp, r7
    5320:	ecbd 8b0a 	vpop	{d8-d12}
    5324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5328:	ed43 8a01 	vstr	s17, [r3, #-4]
		if (note[i] > 127.0f)
    532c:	e727      	b.n	517e <audioTickString1+0xbe>
    532e:	bf00      	nop
    5330:	200004b1 	.word	0x200004b1
    5334:	20004df8 	.word	0x20004df8
    5338:	20013e24 	.word	0x20013e24
    533c:	20004e28 	.word	0x20004e28
    5340:	200004b4 	.word	0x200004b4
    5344:	00000000 	.word	0x00000000
    5348:	20004eac 	.word	0x20004eac
    534c:	20013df4 	.word	0x20013df4
    5350:	2001c578 	.word	0x2001c578
    5354:	42fe0000 	.word	0x42fe0000
    5358:	3dcccccd 	.word	0x3dcccccd
    535c:	44480000 	.word	0x44480000
    5360:	3d108950 	.word	0x3d108950
    5364:	20000db4 	.word	0x20000db4
    5368:	46768933 	.word	0x46768933
    536c:	20013dec 	.word	0x20013dec
    5370:	bcf5c28f 	.word	0xbcf5c28f
    5374:	20004f20 	.word	0x20004f20
    5378:	20004eb4 	.word	0x20004eb4
    537c:	20004ec0 	.word	0x20004ec0
    5380:	3b0a47ed 	.word	0x3b0a47ed
    5384:	3bdd2f1b 	.word	0x3bdd2f1b
    5388:	39f9096c 	.word	0x39f9096c
    538c:	3a59d777 	.word	0x3a59d777
    5390:	3d99999a 	.word	0x3d99999a
    5394:	408bbced 	.word	0x408bbced
    5398:	423c0000 	.word	0x423c0000
    539c:	42a00000 	.word	0x42a00000
    53a0:	200004a8 	.word	0x200004a8
    53a4:	2000051c 	.word	0x2000051c
    53a8:	2001ce3c 	.word	0x2001ce3c
    53ac:	20000dac 	.word	0x20000dac
    53b0:	20000da4 	.word	0x20000da4
    53b4:	f3af 8000 	nop.w
    53b8:	f3af 8000 	nop.w
    53bc:	f3af 8000 	nop.w

000053c0 <audioFrameString1>:
{
    53c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    53c4:	4a5b      	ldr	r2, [pc, #364]	; (5534 <audioFrameString1+0x174>)
{
    53c6:	4607      	mov	r7, r0
	if (resetStringInputs)
    53c8:	4b5b      	ldr	r3, [pc, #364]	; (5538 <audioFrameString1+0x178>)
{
    53ca:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    53ce:	6856      	ldr	r6, [r2, #4]
	if (resetStringInputs)
    53d0:	781a      	ldrb	r2, [r3, #0]
    53d2:	b16a      	cbz	r2, 53f0 <audioFrameString1+0x30>
		for (int i = 0; i < numStringsThisBoard; i++)
    53d4:	4a59      	ldr	r2, [pc, #356]	; (553c <audioFrameString1+0x17c>)
    53d6:	7811      	ldrb	r1, [r2, #0]
    53d8:	b141      	cbz	r1, 53ec <audioFrameString1+0x2c>
			lsDecay[i] = 0;
    53da:	2200      	movs	r2, #0
    53dc:	4858      	ldr	r0, [pc, #352]	; (5540 <audioFrameString1+0x180>)
			previousStringInputs[i] = 0;
    53de:	4d59      	ldr	r5, [pc, #356]	; (5544 <audioFrameString1+0x184>)
		for (int i = 0; i < numStringsThisBoard; i++)
    53e0:	2901      	cmp	r1, #1
			lsDecay[i] = 0;
    53e2:	7002      	strb	r2, [r0, #0]
			previousStringInputs[i] = 0;
    53e4:	802a      	strh	r2, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    53e6:	d001      	beq.n	53ec <audioFrameString1+0x2c>
			lsDecay[i] = 0;
    53e8:	7042      	strb	r2, [r0, #1]
			previousStringInputs[i] = 0;
    53ea:	806a      	strh	r2, [r5, #2]
		resetStringInputs = 0;
    53ec:	2200      	movs	r2, #0
    53ee:	701a      	strb	r2, [r3, #0]
	if (newPluck)
    53f0:	4a55      	ldr	r2, [pc, #340]	; (5548 <audioFrameString1+0x188>)
    53f2:	6813      	ldr	r3, [r2, #0]
    53f4:	b38b      	cbz	r3, 545a <audioFrameString1+0x9a>
		for (int i = 0; i < numStringsThisBoard; i++)
    53f6:	f8df a144 	ldr.w	sl, [pc, #324]	; 553c <audioFrameString1+0x17c>
    53fa:	f89a 1000 	ldrb.w	r1, [sl]
    53fe:	b351      	cbz	r1, 5456 <audioFrameString1+0x96>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    5400:	ed9f 9a52 	vldr	s18, [pc, #328]	; 554c <audioFrameString1+0x18c>
		for (int i = 0; i < numStringsThisBoard; i++)
    5404:	2400      	movs	r4, #0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5406:	eddf 8a52 	vldr	s17, [pc, #328]	; 5550 <audioFrameString1+0x190>
    540a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 5540 <audioFrameString1+0x180>
    540e:	4d4d      	ldr	r5, [pc, #308]	; (5544 <audioFrameString1+0x184>)
    5410:	f8df 9170 	ldr.w	r9, [pc, #368]	; 5584 <audioFrameString1+0x1c4>
				stringOctave[i] = octave;
    5414:	f8df b170 	ldr.w	fp, [pc, #368]	; 5588 <audioFrameString1+0x1c8>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    5418:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    541c:	b29b      	uxth	r3, r3
    541e:	b923      	cbnz	r3, 542a <audioFrameString1+0x6a>
    5420:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    5424:	b29b      	uxth	r3, r3
    5426:	2b00      	cmp	r3, #0
    5428:	d14b      	bne.n	54c2 <audioFrameString1+0x102>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    542a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    542e:	b29b      	uxth	r3, r3
    5430:	b13b      	cbz	r3, 5442 <audioFrameString1+0x82>
    5432:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    5436:	b29b      	uxth	r3, r3
    5438:	b91b      	cbnz	r3, 5442 <audioFrameString1+0x82>
		for (int i = 0; i < numStringsThisBoard; i++)
    543a:	f89a 1000 	ldrb.w	r1, [sl]
				lsDecay[i] = 0;
    543e:	f888 3000 	strb.w	r3, [r8]
			previousStringInputs[i] = stringInputs[i];
    5442:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5446:	f108 0801 	add.w	r8, r8, #1
			previousStringInputs[i] = stringInputs[i];
    544a:	b29b      	uxth	r3, r3
    544c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5450:	3401      	adds	r4, #1
    5452:	42a1      	cmp	r1, r4
    5454:	dce0      	bgt.n	5418 <audioFrameString1+0x58>
		newPluck = 0;
    5456:	2300      	movs	r3, #0
    5458:	6013      	str	r3, [r2, #0]
    545a:	4c3e      	ldr	r4, [pc, #248]	; (5554 <audioFrameString1+0x194>)
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    545c:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 5558 <audioFrameString1+0x198>
    5460:	f504 7500 	add.w	r5, r4, #512	; 0x200
    5464:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    5468:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    546c:	f7ff fe28 	bl	50c0 <audioTickString1>
    5470:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5474:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    5476:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    547a:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    547c:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    5480:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5484:	d1f2      	bne.n	546c <audioFrameString1+0xac>
	if (switchStrings)
    5486:	4c35      	ldr	r4, [pc, #212]	; (555c <audioFrameString1+0x19c>)
    5488:	6823      	ldr	r3, [r4, #0]
    548a:	b9b3      	cbnz	r3, 54ba <audioFrameString1+0xfa>
	switchStrings = 0;
    548c:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    548e:	4b29      	ldr	r3, [pc, #164]	; (5534 <audioFrameString1+0x174>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5490:	4833      	ldr	r0, [pc, #204]	; (5560 <audioFrameString1+0x1a0>)
	switchStrings = 0;
    5492:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5494:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5496:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    549a:	1b9b      	subs	r3, r3, r6
    549c:	4931      	ldr	r1, [pc, #196]	; (5564 <audioFrameString1+0x1a4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    549e:	4a32      	ldr	r2, [pc, #200]	; (5568 <audioFrameString1+0x1a8>)
    54a0:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    54a4:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    54a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    54aa:	ee67 7a87 	vmul.f32	s15, s15, s14
    54ae:	edc2 7a00 	vstr	s15, [r2]
}
    54b2:	ecbd 8b04 	vpop	{d8-d9}
    54b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switchStringModel(switchStrings);
    54ba:	6820      	ldr	r0, [r4, #0]
    54bc:	f7fc f840 	bl	1540 <switchStringModel>
    54c0:	e7e4      	b.n	548c <audioFrameString1+0xcc>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    54c2:	492a      	ldr	r1, [pc, #168]	; (556c <audioFrameString1+0x1ac>)
    54c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    54c8:	4b29      	ldr	r3, [pc, #164]	; (5570 <audioFrameString1+0x1b0>)
    54ca:	eeb0 0a49 	vmov.f32	s0, s18
    54ce:	7808      	ldrb	r0, [r1, #0]
    54d0:	ed93 7a02 	vldr	s14, [r3, #8]
    54d4:	4b27      	ldr	r3, [pc, #156]	; (5574 <audioFrameString1+0x1b4>)
    54d6:	ee71 7a47 	vsub.f32	s15, s2, s14
    54da:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    54de:	edd3 6a00 	vldr	s13, [r3]
    54e2:	4b25      	ldr	r3, [pc, #148]	; (5578 <audioFrameString1+0x1b8>)
    54e4:	eee6 7a87 	vfma.f32	s15, s13, s14
    54e8:	edd3 0a00 	vldr	s1, [r3]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    54ec:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    54f0:	b29b      	uxth	r3, r3
    54f2:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    54f6:	4b21      	ldr	r3, [pc, #132]	; (557c <audioFrameString1+0x1bc>)
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    54f8:	ee60 0aa7 	vmul.f32	s1, s1, s15
				stringOctave[i] = octave;
    54fc:	6818      	ldr	r0, [r3, #0]
    54fe:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5502:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    5506:	6018      	str	r0, [r3, #0]
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    5508:	f004 f80a 	bl	9520 <__LEAF_clip_veneer>
    550c:	481c      	ldr	r0, [pc, #112]	; (5580 <audioFrameString1+0x1c0>)
    550e:	00a3      	lsls	r3, r4, #2
    5510:	eef0 0a40 	vmov.f32	s1, s0
    5514:	ee28 0a28 	vmul.f32	s0, s16, s17
    5518:	4418      	add	r0, r3
    551a:	f003 ffe1 	bl	94e0 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    551e:	4913      	ldr	r1, [pc, #76]	; (556c <audioFrameString1+0x1ac>)
			{
    5520:	4a09      	ldr	r2, [pc, #36]	; (5548 <audioFrameString1+0x188>)
				currentRandom++;
    5522:	780b      	ldrb	r3, [r1, #0]
    5524:	3301      	adds	r3, #1
    5526:	700b      	strb	r3, [r1, #0]
				lsDecay[i] = 1;
    5528:	2301      	movs	r3, #1
		for (int i = 0; i < numStringsThisBoard; i++)
    552a:	f89a 1000 	ldrb.w	r1, [sl]
				lsDecay[i] = 1;
    552e:	f888 3000 	strb.w	r3, [r8]
			{
    5532:	e786      	b.n	5442 <audioFrameString1+0x82>
    5534:	e0001000 	.word	0xe0001000
    5538:	20005340 	.word	0x20005340
    553c:	200004b1 	.word	0x200004b1
    5540:	20004eac 	.word	0x20004eac
    5544:	20004f28 	.word	0x20004f28
    5548:	20004eb8 	.word	0x20004eb8
    554c:	00000000 	.word	0x00000000
    5550:	37800080 	.word	0x37800080
    5554:	30000000 	.word	0x30000000
    5558:	4b000000 	.word	0x4b000000
    555c:	20013e0c 	.word	0x20013e0c
    5560:	200004a4 	.word	0x200004a4
    5564:	20013e10 	.word	0x20013e10
    5568:	20004de4 	.word	0x20004de4
    556c:	20013ed6 	.word	0x20013ed6
    5570:	20004df8 	.word	0x20004df8
    5574:	20004f40 	.word	0x20004f40
    5578:	200004b4 	.word	0x200004b4
    557c:	20004ec4 	.word	0x20004ec4
    5580:	2001c578 	.word	0x2001c578
    5584:	20013dd4 	.word	0x20013dd4
    5588:	20013df4 	.word	0x20013df4
	...

000055a0 <audioInitString2>:

tTString strings[NUM_STRINGS_PER_BOARD];
tExpSmooth string2PitchSmoother[NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM audioInitString2()
{
    55a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    55a2:	4f20      	ldr	r7, [pc, #128]	; (5624 <audioInitString2+0x84>)
    55a4:	783b      	ldrb	r3, [r7, #0]
{
    55a6:	ed2d 8b06 	vpush	{d8-d10}
	for (int v = 0; v < numStringsThisBoard; v++)
    55aa:	b3a3      	cbz	r3, 5616 <audioInitString2+0x76>
    55ac:	4c1e      	ldr	r4, [pc, #120]	; (5628 <audioInitString2+0x88>)
    55ae:	2500      	movs	r5, #0
    55b0:	4e1e      	ldr	r6, [pc, #120]	; (562c <audioInitString2+0x8c>)
	{
		 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
		 tTString_setHarmonicity(&strings[v], 0.00001f, 100.0f);
    55b2:	eddf aa1f 	vldr	s21, [pc, #124]	; 5630 <audioInitString2+0x90>
    55b6:	ed9f aa1f 	vldr	s20, [pc, #124]	; 5634 <audioInitString2+0x94>
		//tSimpleLivingString5_setBrightness(&strings[v], .99f);
		//tSimpleLivingString5_setPluckPosition(&strings[v], .5f);
		//tSimpleLivingString5_setPrepPosition(&strings[v], .4f);
		//tSimpleLivingString5_setPrepIndex(&strings[v], 0.0f);
		//tSimpleLivingString5_setPickupPoint(&strings[v], 1.0f);
		 tExpSmooth_init(&string2PitchSmoother[v], 220.0f, 0.0001f, &leaf);
    55ba:	eddf 9a1f 	vldr	s19, [pc, #124]	; 5638 <audioInitString2+0x98>
    55be:	ed9f 9a1f 	vldr	s18, [pc, #124]	; 563c <audioInitString2+0x9c>
		 tTString_setTensionSpeed(&strings[v],0.7f);
    55c2:	eddf 8a1f 	vldr	s17, [pc, #124]	; 5640 <audioInitString2+0xa0>
		 tTString_setTensionGain(&strings[v],0.99f);
    55c6:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 5644 <audioInitString2+0xa4>
		 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    55ca:	4a1f      	ldr	r2, [pc, #124]	; (5648 <audioInitString2+0xa8>)
    55cc:	2101      	movs	r1, #1
    55ce:	4620      	mov	r0, r4
    55d0:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    55d4:	f003 ffd4 	bl	9580 <__tTString_initToPool_veneer>
		 tTString_setHarmonicity(&strings[v], 0.00001f, 100.0f);
    55d8:	4620      	mov	r0, r4
    55da:	eef0 0a6a 	vmov.f32	s1, s21
	for (int v = 0; v < numStringsThisBoard; v++)
    55de:	3501      	adds	r5, #1
		 tTString_setHarmonicity(&strings[v], 0.00001f, 100.0f);
    55e0:	eeb0 0a4a 	vmov.f32	s0, s20
    55e4:	f003 fff4 	bl	95d0 <__tTString_setHarmonicity_veneer>
		 tExpSmooth_init(&string2PitchSmoother[v], 220.0f, 0.0001f, &leaf);
    55e8:	eef0 0a69 	vmov.f32	s1, s19
    55ec:	4917      	ldr	r1, [pc, #92]	; (564c <audioInitString2+0xac>)
    55ee:	4630      	mov	r0, r6
    55f0:	eeb0 0a49 	vmov.f32	s0, s18
	for (int v = 0; v < numStringsThisBoard; v++)
    55f4:	3604      	adds	r6, #4
		 tExpSmooth_init(&string2PitchSmoother[v], 220.0f, 0.0001f, &leaf);
    55f6:	f004 f893 	bl	9720 <__tExpSmooth_init_veneer>
		 tTString_setTensionSpeed(&strings[v],0.7f);
    55fa:	4620      	mov	r0, r4
    55fc:	eeb0 0a68 	vmov.f32	s0, s17
    5600:	f004 f82e 	bl	9660 <__tTString_setTensionSpeed_veneer>
		 tTString_setTensionGain(&strings[v],0.99f);
    5604:	4620      	mov	r0, r4
    5606:	eeb0 0a48 	vmov.f32	s0, s16
	for (int v = 0; v < numStringsThisBoard; v++)
    560a:	3404      	adds	r4, #4
		 tTString_setTensionGain(&strings[v],0.99f);
    560c:	f003 ff64 	bl	94d8 <__tTString_setTensionGain_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    5610:	783b      	ldrb	r3, [r7, #0]
    5612:	42ab      	cmp	r3, r5
    5614:	dcd9      	bgt.n	55ca <audioInitString2+0x2a>
	}
	whichStringModelLoaded = String2Loaded;
    5616:	4b0e      	ldr	r3, [pc, #56]	; (5650 <audioInitString2+0xb0>)
    5618:	2201      	movs	r2, #1
    561a:	701a      	strb	r2, [r3, #0]
}
    561c:	ecbd 8b06 	vpop	{d8-d10}
    5620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5622:	bf00      	nop
    5624:	200004b1 	.word	0x200004b1
    5628:	2001c588 	.word	0x2001c588
    562c:	2001c580 	.word	0x2001c580
    5630:	42c80000 	.word	0x42c80000
    5634:	3727c5ac 	.word	0x3727c5ac
    5638:	38d1b717 	.word	0x38d1b717
    563c:	435c0000 	.word	0x435c0000
    5640:	3f333333 	.word	0x3f333333
    5644:	3f7d70a4 	.word	0x3f7d70a4
    5648:	20004eb0 	.word	0x20004eb0
    564c:	20004e5c 	.word	0x20004e5c
    5650:	20013e29 	.word	0x20013e29
    5654:	f3af 8000 	nop.w
    5658:	f3af 8000 	nop.w
    565c:	f3af 8000 	nop.w

00005660 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    5660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5662:	4f09      	ldr	r7, [pc, #36]	; (5688 <audioFreeString2+0x28>)
    5664:	783b      	ldrb	r3, [r7, #0]
    5666:	b173      	cbz	r3, 5686 <audioFreeString2+0x26>
    5668:	4e08      	ldr	r6, [pc, #32]	; (568c <audioFreeString2+0x2c>)
    566a:	2400      	movs	r4, #0
    566c:	4d08      	ldr	r5, [pc, #32]	; (5690 <audioFreeString2+0x30>)
	{
		tExpSmooth_free(&string2PitchSmoother[v]);
    566e:	4630      	mov	r0, r6
	for (int v = 0; v < numStringsThisBoard; v++)
    5670:	3401      	adds	r4, #1
		tExpSmooth_free(&string2PitchSmoother[v]);
    5672:	f003 fe11 	bl	9298 <__tExpSmooth_free_veneer>
		tTString_free(&strings[v]);
    5676:	4628      	mov	r0, r5
    5678:	f003 ffce 	bl	9618 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    567c:	783b      	ldrb	r3, [r7, #0]
    567e:	3604      	adds	r6, #4
    5680:	3504      	adds	r5, #4
    5682:	42a3      	cmp	r3, r4
    5684:	dcf3      	bgt.n	566e <audioFreeString2+0xe>
	}
}
    5686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5688:	200004b1 	.word	0x200004b1
    568c:	2001c580 	.word	0x2001c580
    5690:	2001c588 	.word	0x2001c588
    5694:	f3af 8000 	nop.w
    5698:	f3af 8000 	nop.w
    569c:	f3af 8000 	nop.w

000056a0 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    56a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    56a4:	48d2      	ldr	r0, [pc, #840]	; (59f0 <audioTickString2+0x350>)
    56a6:	4ed3      	ldr	r6, [pc, #844]	; (59f4 <audioTickString2+0x354>)
    56a8:	4dd3      	ldr	r5, [pc, #844]	; (59f8 <audioTickString2+0x358>)
    56aa:	4634      	mov	r4, r6
    56ac:	f106 0730 	add.w	r7, r6, #48	; 0x30
{
    56b0:	ed2d 8b0c 	vpush	{d8-d13}
    56b4:	b083      	sub	sp, #12
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    56b6:	f003 ff6b 	bl	9590 <__tExpSmooth_tick_veneer>
    56ba:	eeb0 aa40 	vmov.f32	s20, s0

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    56be:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    56c0:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    56c2:	f003 ff65 	bl	9590 <__tExpSmooth_tick_veneer>
    56c6:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    56ca:	42a7      	cmp	r7, r4
    56cc:	d1f7      	bne.n	56be <audioTickString2+0x1e>
	}
	if (newPluck)
    56ce:	f8df b37c 	ldr.w	fp, [pc, #892]	; 5a4c <audioTickString2+0x3ac>
			{
				for (int i = 0; i < numStringsThisBoard; i++)
    56d2:	f8df 937c 	ldr.w	r9, [pc, #892]	; 5a50 <audioTickString2+0x3b0>
	if (newPluck)
    56d6:	f8db 3000 	ldr.w	r3, [fp]
				for (int i = 0; i < numStringsThisBoard; i++)
    56da:	f899 1000 	ldrb.w	r1, [r9]
	if (newPluck)
    56de:	b3a3      	cbz	r3, 574a <audioTickString2+0xaa>
				for (int i = 0; i < numStringsThisBoard; i++)
    56e0:	2900      	cmp	r1, #0
    56e2:	f000 813f 	beq.w	5964 <audioTickString2+0x2c4>
    56e6:	4fc5      	ldr	r7, [pc, #788]	; (59fc <audioTickString2+0x35c>)
    56e8:	2400      	movs	r4, #0
				{
					if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
					{
						float amplitz = stringInputs[i] * 0.000015259021897f;
    56ea:	ed9f 9ac5 	vldr	s18, [pc, #788]	; 5a00 <audioTickString2+0x360>
						}
						if (isnan(theNote[i]))
						{
							theNote[i] = 64.0f;
						}
						float finalFreq = mtofTableLookup(theNote[i]);
    56ee:	eddf 8ac5 	vldr	s17, [pc, #788]	; 5a04 <audioTickString2+0x364>
    56f2:	ed9f 8ac5 	vldr	s16, [pc, #788]	; 5a08 <audioTickString2+0x368>
    56f6:	f8df a35c 	ldr.w	sl, [pc, #860]	; 5a54 <audioTickString2+0x3b4>
    56fa:	f8df 835c 	ldr.w	r8, [pc, #860]	; 5a58 <audioTickString2+0x3b8>
    56fe:	4dc3      	ldr	r5, [pc, #780]	; (5a0c <audioTickString2+0x36c>)
    5700:	4ac3      	ldr	r2, [pc, #780]	; (5a10 <audioTickString2+0x370>)
					if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    5702:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5706:	b29b      	uxth	r3, r3
    5708:	b92b      	cbnz	r3, 5716 <audioTickString2+0x76>
    570a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    570e:	b29b      	uxth	r3, r3
    5710:	2b00      	cmp	r3, #0
    5712:	f040 812d 	bne.w	5970 <audioTickString2+0x2d0>

						//tSimpleLivingString5_setTargetLev(&strings[i], knobScaled[1]);
						tTString_pluck(&strings[i],  knobScaled[2], amplitz);
						//tSimpleLivingString5_setDecay(&strings[i], knobScaled[3] * .2f + 0.9f);
					}
					else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    5716:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    571a:	b29b      	uxth	r3, r3
    571c:	b12b      	cbz	r3, 572a <audioTickString2+0x8a>
    571e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    5722:	b29b      	uxth	r3, r3
    5724:	2b00      	cmp	r3, #0
    5726:	f000 8158 	beq.w	59da <audioTickString2+0x33a>
						//tSimpleLivingString5_setDecay(&strings[i], 0.2f);

						tTString_mute(&strings[i]);
						tADSRT_off(&fenvelopes[i]);
					}
					previousStringInputs[i] = stringInputs[i];
    572a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				for (int i = 0; i < numStringsThisBoard; i++)
    572e:	3704      	adds	r7, #4
    5730:	f10a 0a04 	add.w	sl, sl, #4
    5734:	f108 0804 	add.w	r8, r8, #4
					previousStringInputs[i] = stringInputs[i];
    5738:	b29b      	uxth	r3, r3
    573a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
				for (int i = 0; i < numStringsThisBoard; i++)
    573e:	3401      	adds	r4, #1
    5740:	42a1      	cmp	r1, r4
    5742:	dcde      	bgt.n	5702 <audioTickString2+0x62>
				}
				newPluck = 0;
    5744:	2300      	movs	r3, #0
    5746:	f8cb 3000 	str.w	r3, [fp]
			}
	for (int i = 0; i < numStringsThisBoard; i++)
    574a:	eddf 9aaf 	vldr	s19, [pc, #700]	; 5a08 <audioTickString2+0x368>
    574e:	2900      	cmp	r1, #0
    5750:	f000 8141 	beq.w	59d6 <audioTickString2+0x336>
    5754:	4baf      	ldr	r3, [pc, #700]	; (5a14 <audioTickString2+0x374>)
    5756:	eef0 aa69 	vmov.f32	s21, s19
    575a:	4faf      	ldr	r7, [pc, #700]	; (5a18 <audioTickString2+0x378>)
    575c:	2400      	movs	r4, #0
    575e:	f8df b29c 	ldr.w	fp, [pc, #668]	; 59fc <audioTickString2+0x35c>
    5762:	9300      	str	r3, [sp, #0]
    5764:	463b      	mov	r3, r7
    5766:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 5a58 <audioTickString2+0x3b8>
    576a:	465f      	mov	r7, fp
    576c:	4dab      	ldr	r5, [pc, #684]	; (5a1c <audioTickString2+0x37c>)
    576e:	469b      	mov	fp, r3
    5770:	ed9f baa4 	vldr	s22, [pc, #656]	; 5a04 <audioTickString2+0x364>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);

		if (thisFrameCount == 0)
		{
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5774:	ed9f daaa 	vldr	s26, [pc, #680]	; 5a20 <audioTickString2+0x380>
    5778:	eddf caaa 	vldr	s25, [pc, #680]	; 5a24 <audioTickString2+0x384>
    577c:	ed9f caaa 	vldr	s24, [pc, #680]	; 5a28 <audioTickString2+0x388>
			if (knobScaled[1] > 0.05f)
    5780:	eddf baaa 	vldr	s23, [pc, #680]	; 5a2c <audioTickString2+0x38c>
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5784:	9b00      	ldr	r3, [sp, #0]
    5786:	46aa      	mov	sl, r5
    5788:	ecf8 7a01 	vldmia	r8!, {s15}
    578c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5790:	ed93 8a00 	vldr	s16, [r3]
    5794:	ee38 8a27 	vadd.f32	s16, s16, s15
    5798:	fe88 8a4b 	vminnm.f32	s16, s16, s22
    579c:	fe88 8a2a 	vmaxnm.f32	s16, s16, s21
		float finalFreq = mtofTableLookup(theNote[i]);
    57a0:	eeb0 0a48 	vmov.f32	s0, s16
    57a4:	f003 ff08 	bl	95b8 <__mtofTableLookup_veneer>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    57a8:	edd5 7a00 	vldr	s15, [r5]
		float finalFreq = mtofTableLookup(theNote[i]);
    57ac:	eef0 8a40 	vmov.f32	s17, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    57b0:	ee38 0a67 	vsub.f32	s0, s16, s15
    57b4:	f003 ff00 	bl	95b8 <__mtofTableLookup_veneer>
		if (thisFrameCount == 0)
    57b8:	f8db 1000 	ldr.w	r1, [fp]
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    57bc:	eeb0 9a40 	vmov.f32	s18, s0
		if (thisFrameCount == 0)
    57c0:	2900      	cmp	r1, #0
    57c2:	f000 808e 	beq.w	58e2 <audioTickString2+0x242>
			}

		}
		//tTString_setTensionGain(&strings[i],knobScaled[4]);

		tTString_setDecay(&strings[i],knobScaled[0]);
    57c6:	4638      	mov	r0, r7
    57c8:	ed96 0a00 	vldr	s0, [r6]
    57cc:	f003 fecc 	bl	9568 <__tTString_setDecay_veneer>
		//tSimpleLivingString5_setFreq(&strings[i], finalFreq);
		tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[8]);
    57d0:	4638      	mov	r0, r7
    57d2:	ed96 0a08 	vldr	s0, [r6, #32]
	for (int i = 0; i < numStringsThisBoard; i++)
    57d6:	3401      	adds	r4, #1
		tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[8]);
    57d8:	f003 fda2 	bl	9320 <__tTString_setPhantomHarmonicsGain_veneer>
		tTString_setPickupPos(&strings[i],knobScaled[9]);
    57dc:	4638      	mov	r0, r7
    57de:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    57e2:	3504      	adds	r5, #4
    57e4:	f003 ffb8 	bl	9758 <__tTString_setPickupPos_veneer>

		tTString_setPickupModFreq(&strings[i],(knobScaled[10]));
    57e8:	4638      	mov	r0, r7
    57ea:	ed96 0a0a 	vldr	s0, [r6, #40]	; 0x28
    57ee:	f003 fe43 	bl	9478 <__tTString_setPickupModFreq_veneer>

		tTString_setPickupModAmp(&strings[i],knobScaled[11]);
    57f2:	4638      	mov	r0, r7
    57f4:	ed96 0a0b 	vldr	s0, [r6, #44]	; 0x2c
    57f8:	f003 fdf6 	bl	93e8 <__tTString_setPickupModAmp_veneer>



		tTString_setFreq(&strings[i], finalFreq);
    57fc:	4638      	mov	r0, r7
    57fe:	eeb0 0a68 	vmov.f32	s0, s17
    5802:	f003 ff59 	bl	96b8 <__tTString_setFreq_veneer>

	//	uint32_t wavelength = 50*(uint32_t)powf(2.0f,(uint32_t)(knobScaled[5] * 5.0f));
	//	tTString_setWavelength(&strings[i], wavelength);
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    5806:	4638      	mov	r0, r7
    5808:	ed9a 0a00 	vldr	s0, [sl]
    580c:	f003 fe20 	bl	9450 <__tTString_setBarPosition_veneer>
		//tTString_setBarDrive(&strings[i],knobScaled[4]);
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    5810:	4638      	mov	r0, r7
    5812:	eeb0 0a49 	vmov.f32	s0, s18
    5816:	f003 ff1b 	bl	9650 <__tTString_setOpenStringFrequency_veneer>
		tTString_setFilter(&strings[i], knobScaled[3]);
    581a:	4638      	mov	r0, r7
    581c:	ed96 0a03 	vldr	s0, [r6, #12]
    5820:	f003 fd96 	bl	9350 <__tTString_setFilter_veneer>
		tTString_setRippleDepth(&strings[i],knobScaled[7]);
    5824:	4638      	mov	r0, r7
    5826:	ed96 0a07 	vldr	s0, [r6, #28]
    582a:	f003 fdfd 	bl	9428 <__tTString_setRippleDepth_veneer>
		tTString_setFeedbackStrength(&strings[i],knobScaled[4]);
    582e:	4638      	mov	r0, r7
    5830:	ed96 0a04 	vldr	s0, [r6, #16]
    5834:	f003 fed8 	bl	95e8 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[5]);
    5838:	4638      	mov	r0, r7
    583a:	ed96 0a05 	vldr	s0, [r6, #20]
    583e:	f003 fd4f 	bl	92e0 <__tTString_setFeedbackReactionSpeed_veneer>
		//temp += (tSimpleLivingString5_tick(&strings[i], slideNoise));//(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
		temp += tTString_tick(&strings[i]);
    5842:	4638      	mov	r0, r7
    5844:	f003 fe2c 	bl	94a0 <__tTString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    5848:	f899 3000 	ldrb.w	r3, [r9]
		temp += tTString_tick(&strings[i]);
    584c:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    5850:	3704      	adds	r7, #4
    5852:	42a3      	cmp	r3, r4
    5854:	dc96      	bgt.n	5784 <audioTickString2+0xe4>
    5856:	465f      	mov	r7, fp
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    5858:	683b      	ldr	r3, [r7, #0]
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    585a:	eddf 0a75 	vldr	s1, [pc, #468]	; 5a30 <audioTickString2+0x390>
	thisFrameCount = (thisFrameCount + 1) & 63;
    585e:	3301      	adds	r3, #1
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    5860:	ed9f 1a68 	vldr	s2, [pc, #416]	; 5a04 <audioTickString2+0x364>
    5864:	ee6a 0a20 	vmul.f32	s1, s20, s1
    5868:	ed9f 0a67 	vldr	s0, [pc, #412]	; 5a08 <audioTickString2+0x368>
	thisFrameCount = (thisFrameCount + 1) & 63;
    586c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5870:	603b      	str	r3, [r7, #0]
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    5872:	f003 fe55 	bl	9520 <__LEAF_clip_veneer>
    5876:	eef0 7a40 	vmov.f32	s15, s0
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    587a:	4b6e      	ldr	r3, [pc, #440]	; (5a34 <audioTickString2+0x394>)

	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    587c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 5a38 <audioTickString2+0x398>
	float omAlpha = 1.0f - alpha;
    5880:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5884:	edd3 0a00 	vldr	s1, [r3]
    5888:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
    588c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    5890:	4a6a      	ldr	r2, [pc, #424]	; (5a3c <audioTickString2+0x39c>)
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5892:	ee60 0aa6 	vmul.f32	s1, s1, s13
	int volIdxInt = (int) volIdx;
    5896:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
    589a:	ee31 7a67 	vsub.f32	s14, s2, s15
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    589e:	ee60 0aa9 	vmul.f32	s1, s1, s19
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    58a2:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
    58a4:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    58a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
    58ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    58b0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    58b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
    58b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    58bc:	ed92 6a00 	vldr	s12, [r2]
	float omAlpha = 1.0f - alpha;
    58c0:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    58c4:	edd3 6a00 	vldr	s13, [r3]
    58c8:	ee67 7a86 	vmul.f32	s15, s15, s12
    58cc:	eee6 7a87 	vfma.f32	s15, s13, s14
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    58d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    58d4:	b003      	add	sp, #12
    58d6:	ecbd 8b0c 	vpop	{d8-d13}
    58da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    58de:	f003 be1f 	b.w	9520 <__LEAF_clip_veneer>
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    58e2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    58e6:	edd6 6a06 	vldr	s13, [r6, #24]
    58ea:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    58ee:	9101      	str	r1, [sp, #4]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    58f0:	eeb0 1a4c 	vmov.f32	s2, s24
    58f4:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    58f8:	eee6 7a87 	vfma.f32	s15, s13, s14
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    58fc:	eeb0 0a48 	vmov.f32	s0, s16
    5900:	eeb0 2a4d 	vmov.f32	s4, s26
    5904:	eef0 1a6c 	vmov.f32	s3, s25
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    5908:	eeb0 8a67 	vmov.f32	s16, s15
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    590c:	f003 fd88 	bl	9420 <__LEAF_map_veneer>
			if (knobScaled[1] > 0.05f)
    5910:	edd6 0a01 	vldr	s1, [r6, #4]
				tTString_setInharmonic(&strings[i], 0);
    5914:	9901      	ldr	r1, [sp, #4]
			if (knobScaled[1] > 0.05f)
    5916:	eef4 0aeb 	vcmpe.f32	s1, s23
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[1], 0.01f);
    591a:	ed9f 1a49 	vldr	s2, [pc, #292]	; 5a40 <audioTickString2+0x3a0>
    591e:	ee60 0a80 	vmul.f32	s1, s1, s0
    5922:	ed9f 0a48 	vldr	s0, [pc, #288]	; 5a44 <audioTickString2+0x3a4>
			if (knobScaled[1] > 0.05f)
    5926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    592a:	dd10      	ble.n	594e <audioTickString2+0x2ae>
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[1], 0.01f);
    592c:	f003 fdf8 	bl	9520 <__LEAF_clip_veneer>
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    5930:	eef0 0a68 	vmov.f32	s1, s17
    5934:	4638      	mov	r0, r7
    5936:	f003 fe4b 	bl	95d0 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    593a:	4638      	mov	r0, r7
    593c:	2101      	movs	r1, #1
    593e:	f003 fcf3 	bl	9328 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    5942:	eeb0 0a48 	vmov.f32	s0, s16
    5946:	4638      	mov	r0, r7
    5948:	f003 fc96 	bl	9278 <__tTString_setHarmonic_veneer>
    594c:	e73b      	b.n	57c6 <audioTickString2+0x126>
				tTString_setInharmonic(&strings[i], 0);
    594e:	4638      	mov	r0, r7
    5950:	f003 fcea 	bl	9328 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    5954:	eebc 0ac8 	vcvt.u32.f32	s0, s16
    5958:	4638      	mov	r0, r7
    595a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    595e:	f003 fc8b 	bl	9278 <__tTString_setHarmonic_veneer>
    5962:	e730      	b.n	57c6 <audioTickString2+0x126>
				newPluck = 0;
    5964:	eddf 9a28 	vldr	s19, [pc, #160]	; 5a08 <audioTickString2+0x368>
    5968:	4f2b      	ldr	r7, [pc, #172]	; (5a18 <audioTickString2+0x378>)
    596a:	f8cb 1000 	str.w	r1, [fp]
	for (int i = 0; i < numStringsThisBoard; i++)
    596e:	e773      	b.n	5858 <audioTickString2+0x1b8>
						float amplitz = stringInputs[i] * 0.000015259021897f;
    5970:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
						tADSRT_on(&fenvelopes[i], amplitz);
    5974:	4650      	mov	r0, sl
						float amplitz = stringInputs[i] * 0.000015259021897f;
    5976:	b29b      	uxth	r3, r3
    5978:	ee07 3a90 	vmov	s15, r3
						stringOctave[i] = octave;
    597c:	4b32      	ldr	r3, [pc, #200]	; (5a48 <audioTickString2+0x3a8>)
						float amplitz = stringInputs[i] * 0.000015259021897f;
    597e:	eef8 0ae7 	vcvt.f32.s32	s1, s15
						stringOctave[i] = octave;
    5982:	681b      	ldr	r3, [r3, #0]
    5984:	f8c8 3000 	str.w	r3, [r8]
						float amplitz = stringInputs[i] * 0.000015259021897f;
    5988:	ee60 0a89 	vmul.f32	s1, s1, s18
						theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    598c:	4b21      	ldr	r3, [pc, #132]	; (5a14 <audioTickString2+0x374>)
    598e:	9300      	str	r3, [sp, #0]
						tADSRT_on(&fenvelopes[i], amplitz);
    5990:	eeb0 0a60 	vmov.f32	s0, s1
    5994:	edcd 0a01 	vstr	s1, [sp, #4]
    5998:	f003 fcfa 	bl	9390 <__tADSRT_on_veneer>
						theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    599c:	9b00      	ldr	r3, [sp, #0]
    599e:	edd8 7a00 	vldr	s15, [r8]
    59a2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    59a6:	ed93 0a00 	vldr	s0, [r3]
    59aa:	ee30 0a27 	vadd.f32	s0, s0, s15
						float finalFreq = mtofTableLookup(theNote[i]);
    59ae:	fe80 0a68 	vminnm.f32	s0, s0, s17
    59b2:	fe80 0a08 	vmaxnm.f32	s0, s0, s16
    59b6:	f003 fdff 	bl	95b8 <__mtofTableLookup_veneer>
						tTString_setFreq(&strings[i], finalFreq);
    59ba:	4638      	mov	r0, r7
    59bc:	f003 fe7c 	bl	96b8 <__tTString_setFreq_veneer>
						tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    59c0:	eddd 0a01 	vldr	s1, [sp, #4]
    59c4:	ed96 0a02 	vldr	s0, [r6, #8]
    59c8:	4638      	mov	r0, r7
    59ca:	f003 fdbd 	bl	9548 <__tTString_pluck_veneer>
				for (int i = 0; i < numStringsThisBoard; i++)
    59ce:	f899 1000 	ldrb.w	r1, [r9]
					{
    59d2:	4a0f      	ldr	r2, [pc, #60]	; (5a10 <audioTickString2+0x370>)
    59d4:	e6a9      	b.n	572a <audioTickString2+0x8a>
    59d6:	4f10      	ldr	r7, [pc, #64]	; (5a18 <audioTickString2+0x378>)
    59d8:	e73e      	b.n	5858 <audioTickString2+0x1b8>
						tTString_mute(&strings[i]);
    59da:	4638      	mov	r0, r7
    59dc:	f003 fdb0 	bl	9540 <__tTString_mute_veneer>
						tADSRT_off(&fenvelopes[i]);
    59e0:	4650      	mov	r0, sl
    59e2:	f003 fdc9 	bl	9578 <__tADSRT_off_veneer>
				for (int i = 0; i < numStringsThisBoard; i++)
    59e6:	f899 1000 	ldrb.w	r1, [r9]
    59ea:	4a09      	ldr	r2, [pc, #36]	; (5a10 <audioTickString2+0x370>)
    59ec:	e69d      	b.n	572a <audioTickString2+0x8a>
    59ee:	bf00      	nop
    59f0:	20013e24 	.word	0x20013e24
    59f4:	20004df8 	.word	0x20004df8
    59f8:	20004e28 	.word	0x20004e28
    59fc:	2001c588 	.word	0x2001c588
    5a00:	37800080 	.word	0x37800080
    5a04:	42fe0000 	.word	0x42fe0000
    5a08:	00000000 	.word	0x00000000
    5a0c:	20004f28 	.word	0x20004f28
    5a10:	20013dd4 	.word	0x20013dd4
    5a14:	20013dec 	.word	0x20013dec
    5a18:	2001c590 	.word	0x2001c590
    5a1c:	20000da4 	.word	0x20000da4
    5a20:	3727c5ac 	.word	0x3727c5ac
    5a24:	38d1b717 	.word	0x38d1b717
    5a28:	42980000 	.word	0x42980000
    5a2c:	3d4ccccd 	.word	0x3d4ccccd
    5a30:	42a00000 	.word	0x42a00000
    5a34:	200004a8 	.word	0x200004a8
    5a38:	3f7ae148 	.word	0x3f7ae148
    5a3c:	2000051c 	.word	0x2000051c
    5a40:	3c23d70a 	.word	0x3c23d70a
    5a44:	322bcc77 	.word	0x322bcc77
    5a48:	20004ec4 	.word	0x20004ec4
    5a4c:	20004eb8 	.word	0x20004eb8
    5a50:	200004b1 	.word	0x200004b1
    5a54:	20004dd4 	.word	0x20004dd4
    5a58:	20013df4 	.word	0x20013df4
    5a5c:	f3af 8000 	nop.w

00005a60 <audioFrameString2>:
{
    5a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t tempCountFrame = DWT->CYCCNT;
    5a64:	4b29      	ldr	r3, [pc, #164]	; (5b0c <audioFrameString2+0xac>)
{
    5a66:	4680      	mov	r8, r0
		if (resetStringInputs)
    5a68:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 5b30 <audioFrameString2+0xd0>
{
    5a6c:	ed2d 8b02 	vpush	{d8}
		uint32_t tempCountFrame = DWT->CYCCNT;
    5a70:	685e      	ldr	r6, [r3, #4]
		if (resetStringInputs)
    5a72:	f89b 3000 	ldrb.w	r3, [fp]
    5a76:	b1a3      	cbz	r3, 5aa2 <audioFrameString2+0x42>
			for (int i = 0; i < numStringsThisBoard; i++)
    5a78:	4f25      	ldr	r7, [pc, #148]	; (5b10 <audioFrameString2+0xb0>)
    5a7a:	783b      	ldrb	r3, [r7, #0]
    5a7c:	b173      	cbz	r3, 5a9c <audioFrameString2+0x3c>
    5a7e:	2400      	movs	r4, #0
    5a80:	4d24      	ldr	r5, [pc, #144]	; (5b14 <audioFrameString2+0xb4>)
    5a82:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 5b34 <audioFrameString2+0xd4>
				previousStringInputs[i] = 0;
    5a86:	46a1      	mov	r9, r4
				tADSRT_off(&fenvelopes[i]);
    5a88:	4628      	mov	r0, r5
			for (int i = 0; i < numStringsThisBoard; i++)
    5a8a:	3504      	adds	r5, #4
				tADSRT_off(&fenvelopes[i]);
    5a8c:	f003 fd74 	bl	9578 <__tADSRT_off_veneer>
			for (int i = 0; i < numStringsThisBoard; i++)
    5a90:	783b      	ldrb	r3, [r7, #0]
				previousStringInputs[i] = 0;
    5a92:	f82a 9014 	strh.w	r9, [sl, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    5a96:	3401      	adds	r4, #1
    5a98:	42a3      	cmp	r3, r4
    5a9a:	dcf5      	bgt.n	5a88 <audioFrameString2+0x28>
			resetStringInputs = 0;
    5a9c:	2300      	movs	r3, #0
    5a9e:	f88b 3000 	strb.w	r3, [fp]
    5aa2:	4c1d      	ldr	r4, [pc, #116]	; (5b18 <audioFrameString2+0xb8>)
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5aa4:	ed9f 8a1d 	vldr	s16, [pc, #116]	; 5b1c <audioFrameString2+0xbc>
    5aa8:	f504 7500 	add.w	r5, r4, #512	; 0x200
    5aac:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    5ab0:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    5ab4:	f7ff fdf4 	bl	56a0 <audioTickString2>
    5ab8:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5abc:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5abe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5ac2:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5ac4:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    5ac8:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5acc:	d1f2      	bne.n	5ab4 <audioFrameString2+0x54>
		if (switchStrings)
    5ace:	4c14      	ldr	r4, [pc, #80]	; (5b20 <audioFrameString2+0xc0>)
    5ad0:	6823      	ldr	r3, [r4, #0]
    5ad2:	b9b3      	cbnz	r3, 5b02 <audioFrameString2+0xa2>
		switchStrings = 0;
    5ad4:	2200      	movs	r2, #0
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5ad6:	4b0d      	ldr	r3, [pc, #52]	; (5b0c <audioFrameString2+0xac>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5ad8:	4812      	ldr	r0, [pc, #72]	; (5b24 <audioFrameString2+0xc4>)
		switchStrings = 0;
    5ada:	6022      	str	r2, [r4, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5adc:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5ade:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5ae2:	1b9b      	subs	r3, r3, r6
    5ae4:	4910      	ldr	r1, [pc, #64]	; (5b28 <audioFrameString2+0xc8>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5ae6:	4a11      	ldr	r2, [pc, #68]	; (5b2c <audioFrameString2+0xcc>)
    5ae8:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5aec:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5af2:	ee67 7a87 	vmul.f32	s15, s15, s14
    5af6:	edc2 7a00 	vstr	s15, [r2]
}
    5afa:	ecbd 8b02 	vpop	{d8}
    5afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switchStringModel(switchStrings);
    5b02:	6820      	ldr	r0, [r4, #0]
    5b04:	f7fb fd1c 	bl	1540 <switchStringModel>
    5b08:	e7e4      	b.n	5ad4 <audioFrameString2+0x74>
    5b0a:	bf00      	nop
    5b0c:	e0001000 	.word	0xe0001000
    5b10:	200004b1 	.word	0x200004b1
    5b14:	20004dd4 	.word	0x20004dd4
    5b18:	30000000 	.word	0x30000000
    5b1c:	4b000000 	.word	0x4b000000
    5b20:	20013e0c 	.word	0x20013e0c
    5b24:	200004a4 	.word	0x200004a4
    5b28:	20013e10 	.word	0x20013e10
    5b2c:	20004de4 	.word	0x20004de4
    5b30:	20005340 	.word	0x20005340
    5b34:	20004f28 	.word	0x20004f28
	...

00005b40 <oscillator_tick>:
{
    5b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		oscOuts[0][i][string] = 0.0f;
    5b44:	0082      	lsls	r2, r0, #2
    5b46:	4cd1      	ldr	r4, [pc, #836]	; (5e8c <oscillator_tick+0x34c>)
    5b48:	1c85      	adds	r5, r0, #2
    5b4a:	f04f 0b00 	mov.w	fp, #0
		oscOuts[1][i][string] = 0.0f;
    5b4e:	f100 0108 	add.w	r1, r0, #8
		oscOuts[0][i][string] = 0.0f;
    5b52:	1d07      	adds	r7, r0, #4
    5b54:	eb04 0a80 	add.w	sl, r4, r0, lsl #2
		oscOuts[1][i][string] = 0.0f;
    5b58:	1d86      	adds	r6, r0, #6
{
    5b5a:	4603      	mov	r3, r0
		oscOuts[1][i][string] = 0.0f;
    5b5c:	300a      	adds	r0, #10
	for (int osc = 0; osc < oscToTick; osc++)
    5b5e:	f8df 9350 	ldr.w	r9, [pc, #848]	; 5eb0 <oscillator_tick+0x370>
		oscOuts[1][i][string] = 0.0f;
    5b62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
{
    5b66:	ed2d 8b04 	vpush	{d8-d9}
    5b6a:	b089      	sub	sp, #36	; 0x24
		oscOuts[0][i][string] = 0.0f;
    5b6c:	f8ca b000 	str.w	fp, [sl]
		oscOuts[1][i][string] = 0.0f;
    5b70:	f8c6 b000 	str.w	fp, [r6]
		oscOuts[0][i][string] = 0.0f;
    5b74:	9200      	str	r2, [sp, #0]
    5b76:	eb04 0285 	add.w	r2, r4, r5, lsl #2
		oscOuts[1][i][string] = 0.0f;
    5b7a:	9101      	str	r1, [sp, #4]
		oscOuts[0][i][string] = 0.0f;
    5b7c:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    5b80:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    5b84:	9002      	str	r0, [sp, #8]
    5b86:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[0][i][string] = 0.0f;
    5b8a:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    5b8e:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    5b92:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    5b96:	f8c2 b000 	str.w	fp, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    5b9a:	f899 2000 	ldrb.w	r2, [r9]
    5b9e:	b19a      	cbz	r2, 5bc8 <oscillator_tick+0x88>
		if (oscOn[osc])
    5ba0:	f8df 8310 	ldr.w	r8, [pc, #784]	; 5eb4 <oscillator_tick+0x374>
    5ba4:	eeb0 8a40 	vmov.f32	s16, s0
    5ba8:	f898 0000 	ldrb.w	r0, [r8]
    5bac:	b988      	cbnz	r0, 5bd2 <oscillator_tick+0x92>
	for (int osc = 0; osc < oscToTick; osc++)
    5bae:	2a01      	cmp	r2, #1
    5bb0:	d90a      	bls.n	5bc8 <oscillator_tick+0x88>
		if (oscOn[osc])
    5bb2:	f898 1001 	ldrb.w	r1, [r8, #1]
    5bb6:	2900      	cmp	r1, #0
    5bb8:	d16e      	bne.n	5c98 <oscillator_tick+0x158>
	for (int osc = 0; osc < oscToTick; osc++)
    5bba:	2a02      	cmp	r2, #2
    5bbc:	d904      	bls.n	5bc8 <oscillator_tick+0x88>
		if (oscOn[osc])
    5bbe:	f898 2002 	ldrb.w	r2, [r8, #2]
    5bc2:	2a00      	cmp	r2, #0
    5bc4:	f040 80e6 	bne.w	5d94 <oscillator_tick+0x254>
}
    5bc8:	b009      	add	sp, #36	; 0x24
    5bca:	ecbd 8b04 	vpop	{d8-d9}
    5bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float freqOffset= oscParams[OscFreq].realVal[string];
    5bd2:	00a9      	lsls	r1, r5, #2
    5bd4:	4aae      	ldr	r2, [pc, #696]	; (5e90 <oscillator_tick+0x350>)
    5bd6:	9305      	str	r3, [sp, #20]
    5bd8:	440a      	add	r2, r1
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5bda:	9b00      	ldr	r3, [sp, #0]
    5bdc:	48ad      	ldr	r0, [pc, #692]	; (5e94 <oscillator_tick+0x354>)
			float freqToSmooth = (note + (fine*0.01f));
    5bde:	ed92 7ab6 	vldr	s14, [r2, #728]	; 0x2d8
    5be2:	eddf 7aad 	vldr	s15, [pc, #692]	; 5e98 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5be6:	4418      	add	r0, r3
			float shape = oscParams[OscShape].realVal[string];
    5be8:	edd2 0ac4 	vldr	s1, [r2, #784]	; 0x310
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5bec:	eea7 0a27 	vfma.f32	s0, s14, s15
			float filterSend = oscParams[OscFilterSend].realVal[string];
    5bf0:	edd2 8afc 	vldr	s17, [r2, #1008]	; 0x3f0
			float freqOffset= oscParams[OscFreq].realVal[string];
    5bf4:	edd2 9abd 	vldr	s19, [r2, #756]	; 0x2f4
			float amp = oscParams[OscAmp].realVal[string];
    5bf8:	ed92 9acb 	vldr	s18, [r2, #812]	; 0x32c
			float shape = oscParams[OscShape].realVal[string];
    5bfc:	edcd 0a04 	vstr	s1, [sp, #16]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5c00:	9003      	str	r0, [sp, #12]
    5c02:	f003 fbc1 	bl	9388 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    5c06:	9803      	ldr	r0, [sp, #12]
    5c08:	f003 fcc2 	bl	9590 <__tExpSmooth_tick_veneer>
    5c0c:	9b00      	ldr	r3, [sp, #0]
    5c0e:	4aa3      	ldr	r2, [pc, #652]	; (5e9c <oscillator_tick+0x35c>)
    5c10:	441a      	add	r2, r3
    5c12:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5c16:	ee30 0a27 	vadd.f32	s0, s0, s15
    5c1a:	f003 fccd 	bl	95b8 <__mtofTableLookup_veneer>
    5c1e:	9b00      	ldr	r3, [sp, #0]
    5c20:	4a9f      	ldr	r2, [pc, #636]	; (5ea0 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5c22:	a807      	add	r0, sp, #28
    5c24:	499f      	ldr	r1, [pc, #636]	; (5ea4 <oscillator_tick+0x364>)
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5c26:	441a      	add	r2, r3
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5c28:	9b05      	ldr	r3, [sp, #20]
			float sample = 0.0f;
    5c2a:	f8cd b01c 	str.w	fp, [sp, #28]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5c2e:	edd2 7a00 	vldr	s15, [r2]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5c32:	2200      	movs	r2, #0
    5c34:	f8d1 b000 	ldr.w	fp, [r1]
    5c38:	eee0 9a27 	vfma.f32	s19, s0, s15
    5c3c:	4611      	mov	r1, r2
    5c3e:	eddd 0a04 	vldr	s1, [sp, #16]
    5c42:	9303      	str	r3, [sp, #12]
    5c44:	eeb0 0a69 	vmov.f32	s0, s19
    5c48:	47d8      	blx	fp
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c4a:	4a91      	ldr	r2, [pc, #580]	; (5e90 <oscillator_tick+0x350>)
    5c4c:	9b03      	ldr	r3, [sp, #12]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= amp;
    5c52:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			sourceValues[osc][string] = sample;
    5c5a:	9900      	ldr	r1, [sp, #0]
			sample *= amp;
    5c5c:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c60:	ed92 6aaa 	vldr	s12, [r2, #680]	; 0x2a8
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c64:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5c68:	4a8f      	ldr	r2, [pc, #572]	; (5ea8 <oscillator_tick+0x368>)
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c6a:	ee68 8a86 	vmul.f32	s17, s17, s12
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5c6e:	edd2 6a00 	vldr	s13, [r2]
			sourceValues[osc][string] = sample;
    5c72:	4a8e      	ldr	r2, [pc, #568]	; (5eac <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5c74:	ee67 6a26 	vmul.f32	s13, s14, s13
			sourceValues[osc][string] = sample;
    5c78:	440a      	add	r2, r1
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			sourceValues[osc][string] = sample;
    5c7e:	ed82 7a00 	vstr	s14, [r2]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c82:	ee68 8aa6 	vmul.f32	s17, s17, s13
	for (int osc = 0; osc < oscToTick; osc++)
    5c86:	f899 2000 	ldrb.w	r2, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c8a:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c8e:	edca 8a00 	vstr	s17, [sl]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c92:	edc6 7a00 	vstr	s15, [r6]
    5c96:	e78a      	b.n	5bae <oscillator_tick+0x6e>
			float freqOffset= oscParams[OscFreq].realVal[string];
    5c98:	4e7d      	ldr	r6, [pc, #500]	; (5e90 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5c9a:	eeb0 0a48 	vmov.f32	s0, s16
    5c9e:	487d      	ldr	r0, [pc, #500]	; (5e94 <oscillator_tick+0x354>)
			float freqOffset= oscParams[OscFreq].realVal[string];
    5ca0:	ea4f 0a85 	mov.w	sl, r5, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    5ca4:	f206 4244 	addw	r2, r6, #1092	; 0x444
			float freqToSmooth = (note + (fine*0.01f));
    5ca8:	eddf 7a7b 	vldr	s15, [pc, #492]	; 5e98 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5cac:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5cb0:	9304      	str	r3, [sp, #16]
			float fine = oscParams[OscFine].realVal[string];
    5cb2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5cb6:	9000      	str	r0, [sp, #0]
			float freqToSmooth = (note + (fine*0.01f));
    5cb8:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    5cbc:	f506 628c 	add.w	r2, r6, #1120	; 0x460
    5cc0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5cc4:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    5cc8:	edd2 9a00 	vldr	s19, [r2]
			float shape = oscParams[OscShape].realVal[string];
    5ccc:	f206 427c 	addw	r2, r6, #1148	; 0x47c
    5cd0:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    5cd4:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    5cd8:	f506 6293 	add.w	r2, r6, #1176	; 0x498
    5cdc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    5ce0:	edcd 0a03 	vstr	s1, [sp, #12]
			float amp = oscParams[OscAmp].realVal[string];
    5ce4:	ed92 9a00 	vldr	s18, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    5ce8:	f206 525c 	addw	r2, r6, #1372	; 0x55c
    5cec:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    5cf0:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5cf4:	f003 fb48 	bl	9388 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    5cf8:	9800      	ldr	r0, [sp, #0]
    5cfa:	f003 fc49 	bl	9590 <__tExpSmooth_tick_veneer>
    5cfe:	4a67      	ldr	r2, [pc, #412]	; (5e9c <oscillator_tick+0x35c>)
    5d00:	4452      	add	r2, sl
    5d02:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5d06:	ee30 0a27 	vadd.f32	s0, s0, s15
    5d0a:	f003 fc55 	bl	95b8 <__mtofTableLookup_veneer>
    5d0e:	4a64      	ldr	r2, [pc, #400]	; (5ea0 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5d10:	9b04      	ldr	r3, [sp, #16]
    5d12:	2101      	movs	r1, #1
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5d14:	4452      	add	r2, sl
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5d16:	a807      	add	r0, sp, #28
    5d18:	eddd 0a03 	vldr	s1, [sp, #12]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5d1c:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    5d20:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5d22:	9300      	str	r3, [sp, #0]
    5d24:	eee0 9a27 	vfma.f32	s19, s0, s15
			float sample = 0.0f;
    5d28:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5d2a:	4a5e      	ldr	r2, [pc, #376]	; (5ea4 <oscillator_tick+0x364>)
    5d2c:	f8d2 b004 	ldr.w	fp, [r2, #4]
    5d30:	2200      	movs	r2, #0
    5d32:	eeb0 0a69 	vmov.f32	s0, s19
    5d36:	47d8      	blx	fp
			sample *= amp;
    5d38:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5d3c:	9b01      	ldr	r3, [sp, #4]
    5d3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5d42:	4859      	ldr	r0, [pc, #356]	; (5ea8 <oscillator_tick+0x368>)
			sample *= amp;
    5d44:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5d48:	eb04 0183 	add.w	r1, r4, r3, lsl #2
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d4c:	9b00      	ldr	r3, [sp, #0]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5d4e:	edd0 6a00 	vldr	s13, [r0]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5d52:	ee77 7ae8 	vsub.f32	s15, s15, s17
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d56:	f203 1005 	addw	r0, r3, #261	; 0x105
	for (int osc = 0; osc < oscToTick; osc++)
    5d5a:	f899 2000 	ldrb.w	r2, [r9]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5d5e:	ee67 6a26 	vmul.f32	s13, s14, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d62:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    5d66:	2a02      	cmp	r2, #2
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5d68:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d6c:	ed96 6a00 	vldr	s12, [r6]
    5d70:	ee68 8a86 	vmul.f32	s17, s17, s12
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5d74:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d78:	ee68 8aa6 	vmul.f32	s17, s17, s13
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5d7c:	edc1 7a00 	vstr	s15, [r1]
			sourceValues[osc][string] = sample;
    5d80:	494a      	ldr	r1, [pc, #296]	; (5eac <oscillator_tick+0x36c>)
    5d82:	4451      	add	r1, sl
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d84:	44a2      	add	sl, r4
			sourceValues[osc][string] = sample;
    5d86:	ed81 7a00 	vstr	s14, [r1]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5d8a:	edca 8a00 	vstr	s17, [sl]
	for (int osc = 0; osc < oscToTick; osc++)
    5d8e:	f63f af16 	bhi.w	5bbe <oscillator_tick+0x7e>
    5d92:	e719      	b.n	5bc8 <oscillator_tick+0x88>
			float freqOffset= oscParams[OscFreq].realVal[string];
    5d94:	4e3e      	ldr	r6, [pc, #248]	; (5e90 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5d96:	eeb0 0a48 	vmov.f32	s0, s16
    5d9a:	483e      	ldr	r0, [pc, #248]	; (5e94 <oscillator_tick+0x354>)
			float fine = oscParams[OscFine].realVal[string];
    5d9c:	f506 62b6 	add.w	r2, r6, #1456	; 0x5b0
			float freqToSmooth = (note + (fine*0.01f));
    5da0:	eddf 7a3d 	vldr	s15, [pc, #244]	; 5e98 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5da4:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    5da8:	9303      	str	r3, [sp, #12]
			float fine = oscParams[OscFine].realVal[string];
    5daa:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5dae:	9000      	str	r0, [sp, #0]
    5db0:	00bf      	lsls	r7, r7, #2
			float freqToSmooth = (note + (fine*0.01f));
    5db2:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    5db6:	f206 52cc 	addw	r2, r6, #1484	; 0x5cc
    5dba:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5dbe:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    5dc2:	ed92 9a00 	vldr	s18, [r2]
			float shape = oscParams[OscShape].realVal[string];
    5dc6:	f506 62bd 	add.w	r2, r6, #1512	; 0x5e8
    5dca:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    5dce:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    5dd2:	f206 6204 	addw	r2, r6, #1540	; 0x604
    5dd6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    5dda:	edcd 0a01 	vstr	s1, [sp, #4]
			float amp = oscParams[OscAmp].realVal[string];
    5dde:	ed92 8a00 	vldr	s16, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    5de2:	f506 62d9 	add.w	r2, r6, #1736	; 0x6c8
    5de6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    5dea:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5dee:	f003 facb 	bl	9388 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    5df2:	9800      	ldr	r0, [sp, #0]
    5df4:	f003 fbcc 	bl	9590 <__tExpSmooth_tick_veneer>
    5df8:	4a28      	ldr	r2, [pc, #160]	; (5e9c <oscillator_tick+0x35c>)
    5dfa:	443a      	add	r2, r7
    5dfc:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5e00:	ee30 0a27 	vadd.f32	s0, s0, s15
    5e04:	f003 fbd8 	bl	95b8 <__mtofTableLookup_veneer>
    5e08:	4a25      	ldr	r2, [pc, #148]	; (5ea0 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5e0a:	9b03      	ldr	r3, [sp, #12]
    5e0c:	a807      	add	r0, sp, #28
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5e0e:	443a      	add	r2, r7
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5e10:	eddd 0a01 	vldr	s1, [sp, #4]
    5e14:	2102      	movs	r1, #2
    5e16:	9300      	str	r3, [sp, #0]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5e18:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    5e1c:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5e1e:	eea0 9a27 	vfma.f32	s18, s0, s15
			float sample = 0.0f;
    5e22:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5e24:	4a1f      	ldr	r2, [pc, #124]	; (5ea4 <oscillator_tick+0x364>)
    5e26:	6895      	ldr	r5, [r2, #8]
    5e28:	2200      	movs	r2, #0
    5e2a:	eeb0 0a49 	vmov.f32	s0, s18
    5e2e:	47a8      	blx	r5
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e30:	9b00      	ldr	r3, [sp, #0]
			sample *= amp;
    5e32:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e3a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5e3e:	491a      	ldr	r1, [pc, #104]	; (5ea8 <oscillator_tick+0x368>)
			sample *= amp;
    5e40:	ee28 7a07 	vmul.f32	s14, s16, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e44:	9802      	ldr	r0, [sp, #8]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e46:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			sourceValues[osc][string] = sample;
    5e4a:	4b18      	ldr	r3, [pc, #96]	; (5eac <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5e4c:	ed91 6a00 	vldr	s12, [r1]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e50:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sourceValues[osc][string] = sample;
    5e54:	443b      	add	r3, r7
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e56:	edd6 6a00 	vldr	s13, [r6]
    5e5a:	19e2      	adds	r2, r4, r7
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e5c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			sourceValues[osc][string] = sample;
    5e60:	ed83 7a00 	vstr	s14, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5e64:	ee27 7a06 	vmul.f32	s14, s14, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e68:	ee66 8aa8 	vmul.f32	s17, s13, s17
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e70:	ee68 8a87 	vmul.f32	s17, s17, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e74:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5e78:	edc2 8a00 	vstr	s17, [r2]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5e7c:	edc4 7a00 	vstr	s15, [r4]
}
    5e80:	b009      	add	sp, #36	; 0x24
    5e82:	ecbd 8b04 	vpop	{d8-d9}
    5e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e8a:	bf00      	nop
    5e8c:	2001cd64 	.word	0x2001cd64
    5e90:	20018a64 	.word	0x20018a64
    5e94:	2001ce3c 	.word	0x2001ce3c
    5e98:	3c23d70a 	.word	0x3c23d70a
    5e9c:	2001ccac 	.word	0x2001ccac
    5ea0:	2001c9c0 	.word	0x2001c9c0
    5ea4:	2001cf04 	.word	0x2001cf04
    5ea8:	20000738 	.word	0x20000738
    5eac:	2001cf80 	.word	0x2001cf80
    5eb0:	2000074c 	.word	0x2000074c
    5eb4:	2001cd60 	.word	0x2001cd60
    5eb8:	f3af 8000 	nop.w
    5ebc:	f3af 8000 	nop.w

00005ec0 <sawSquareTick>:
{
    5ec0:	b538      	push	{r3, r4, r5, lr}
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5ec2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5ec6:	4c0e      	ldr	r4, [pc, #56]	; (5f00 <sawSquareTick+0x40>)
{
    5ec8:	4605      	mov	r5, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5eca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    5ece:	ed2d 8b02 	vpush	{d8}
    5ed2:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5ed6:	4620      	mov	r0, r4
    5ed8:	f003 fbaa 	bl	9630 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    5edc:	4620      	mov	r0, r4
    5ede:	eeb0 0a48 	vmov.f32	s0, s16
    5ee2:	f003 fb6d 	bl	95c0 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    5ee6:	4620      	mov	r0, r4
    5ee8:	f003 fb82 	bl	95f0 <__tPBSawSquare_tick_veneer>
    5eec:	edd5 7a00 	vldr	s15, [r5]
    5ef0:	ee37 0a80 	vadd.f32	s0, s15, s0
    5ef4:	ed85 0a00 	vstr	s0, [r5]
}
    5ef8:	ecbd 8b02 	vpop	{d8}
    5efc:	bd38      	pop	{r3, r4, r5, pc}
    5efe:	bf00      	nop
    5f00:	2001ceac 	.word	0x2001ceac
    5f04:	f3af 8000 	nop.w
    5f08:	f3af 8000 	nop.w
    5f0c:	f3af 8000 	nop.w
    5f10:	f3af 8000 	nop.w
    5f14:	f3af 8000 	nop.w
    5f18:	f3af 8000 	nop.w
    5f1c:	f3af 8000 	nop.w

00005f20 <sineTriTick>:
{
    5f20:	b538      	push	{r3, r4, r5, lr}
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5f22:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5f26:	4c0e      	ldr	r4, [pc, #56]	; (5f60 <sineTriTick+0x40>)
{
    5f28:	4605      	mov	r5, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5f2a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    5f2e:	ed2d 8b02 	vpush	{d8}
    5f32:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5f36:	4620      	mov	r0, r4
    5f38:	f003 faa6 	bl	9488 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    5f3c:	4620      	mov	r0, r4
    5f3e:	eeb0 0a48 	vmov.f32	s0, s16
    5f42:	f003 f9b9 	bl	92b8 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    5f46:	4620      	mov	r0, r4
    5f48:	f003 fa62 	bl	9410 <__tPBSineTriangle_tick_veneer>
    5f4c:	edd5 7a00 	vldr	s15, [r5]
    5f50:	ee37 0a80 	vadd.f32	s0, s15, s0
    5f54:	ed85 0a00 	vstr	s0, [r5]
}
    5f58:	ecbd 8b02 	vpop	{d8}
    5f5c:	bd38      	pop	{r3, r4, r5, pc}
    5f5e:	bf00      	nop
    5f60:	2001cf68 	.word	0x2001cf68
    5f64:	f3af 8000 	nop.w
    5f68:	f3af 8000 	nop.w
    5f6c:	f3af 8000 	nop.w
    5f70:	f3af 8000 	nop.w
    5f74:	f3af 8000 	nop.w
    5f78:	f3af 8000 	nop.w
    5f7c:	f3af 8000 	nop.w

00005f80 <sawTick>:
	tPBSaw_setFreq(&saw[v][string], freq);
    5f80:	4a0a      	ldr	r2, [pc, #40]	; (5fac <sawTick+0x2c>)
    5f82:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    5f86:	b510      	push	{r4, lr}
    5f88:	4604      	mov	r4, r0
    5f8a:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    5f8c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    5f90:	9001      	str	r0, [sp, #4]
    5f92:	f003 f9e5 	bl	9360 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    5f96:	9801      	ldr	r0, [sp, #4]
    5f98:	f003 face 	bl	9538 <__tPBSaw_tick_veneer>
    5f9c:	edd4 7a00 	vldr	s15, [r4]
    5fa0:	ee37 0a80 	vadd.f32	s0, s15, s0
    5fa4:	ed84 0a00 	vstr	s0, [r4]
}
    5fa8:	b002      	add	sp, #8
    5faa:	bd10      	pop	{r4, pc}
    5fac:	2001ce94 	.word	0x2001ce94
    5fb0:	f3af 8000 	nop.w
    5fb4:	f3af 8000 	nop.w
    5fb8:	f3af 8000 	nop.w
    5fbc:	f3af 8000 	nop.w

00005fc0 <pulseTick>:
{
    5fc0:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_setFreq(&pulse[v][string], freq);
    5fc2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5fc6:	4c0e      	ldr	r4, [pc, #56]	; (6000 <pulseTick+0x40>)
{
    5fc8:	4605      	mov	r5, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    5fca:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    5fce:	ed2d 8b02 	vpush	{d8}
    5fd2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    5fd6:	4620      	mov	r0, r4
    5fd8:	f003 fa6a 	bl	94b0 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    5fdc:	4620      	mov	r0, r4
    5fde:	eeb0 0a48 	vmov.f32	s0, s16
    5fe2:	f003 f989 	bl	92f8 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    5fe6:	4620      	mov	r0, r4
    5fe8:	f003 fb26 	bl	9638 <__tPBPulse_tick_veneer>
    5fec:	edd5 7a00 	vldr	s15, [r5]
    5ff0:	ee37 0a80 	vadd.f32	s0, s15, s0
    5ff4:	ed85 0a00 	vstr	s0, [r5]
}
    5ff8:	ecbd 8b02 	vpop	{d8}
    5ffc:	bd38      	pop	{r3, r4, r5, pc}
    5ffe:	bf00      	nop
    6000:	2001ce78 	.word	0x2001ce78
    6004:	f3af 8000 	nop.w
    6008:	f3af 8000 	nop.w
    600c:	f3af 8000 	nop.w
    6010:	f3af 8000 	nop.w
    6014:	f3af 8000 	nop.w
    6018:	f3af 8000 	nop.w
    601c:	f3af 8000 	nop.w

00006020 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
    6020:	4a0a      	ldr	r2, [pc, #40]	; (604c <sineTick+0x2c>)
    6022:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    6026:	b510      	push	{r4, lr}
    6028:	4604      	mov	r4, r0
    602a:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    602c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    6030:	9001      	str	r0, [sp, #4]
    6032:	f003 f9c9 	bl	93c8 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    6036:	9801      	ldr	r0, [sp, #4]
    6038:	f003 fa6a 	bl	9510 <__tCycle_tick_veneer>
    603c:	edd4 7a00 	vldr	s15, [r4]
    6040:	ee37 0a80 	vadd.f32	s0, s15, s0
    6044:	ed84 0a00 	vstr	s0, [r4]
}
    6048:	b002      	add	sp, #8
    604a:	bd10      	pop	{r4, pc}
    604c:	2001cf50 	.word	0x2001cf50
    6050:	f3af 8000 	nop.w
    6054:	f3af 8000 	nop.w
    6058:	f3af 8000 	nop.w
    605c:	f3af 8000 	nop.w

00006060 <triTick>:
{
    6060:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_setFreq(&tri[v][string], freq);
    6062:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    6066:	4c0e      	ldr	r4, [pc, #56]	; (60a0 <triTick+0x40>)
{
    6068:	4605      	mov	r5, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    606a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    606e:	ed2d 8b02 	vpush	{d8}
    6072:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    6076:	4620      	mov	r0, r4
    6078:	f003 f9be 	bl	93f8 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    607c:	4620      	mov	r0, r4
    607e:	eeb0 0a48 	vmov.f32	s0, s16
    6082:	f003 f991 	bl	93a8 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    6086:	4620      	mov	r0, r4
    6088:	f003 fa16 	bl	94b8 <__tPBTriangle_tick_veneer>
    608c:	edd5 7a00 	vldr	s15, [r5]
    6090:	ee37 0a80 	vadd.f32	s0, s15, s0
    6094:	ed85 0a00 	vstr	s0, [r5]
}
    6098:	ecbd 8b02 	vpop	{d8}
    609c:	bd38      	pop	{r3, r4, r5, pc}
    609e:	bf00      	nop
    60a0:	2001d100 	.word	0x2001d100
    60a4:	f3af 8000 	nop.w
    60a8:	f3af 8000 	nop.w
    60ac:	f3af 8000 	nop.w
    60b0:	f3af 8000 	nop.w
    60b4:	f3af 8000 	nop.w
    60b8:	f3af 8000 	nop.w
    60bc:	f3af 8000 	nop.w

000060c0 <userTick>:
}
    60c0:	4770      	bx	lr
    60c2:	bf00      	nop
    60c4:	f3af 8000 	nop.w
    60c8:	f3af 8000 	nop.w
    60cc:	f3af 8000 	nop.w
    60d0:	f3af 8000 	nop.w
    60d4:	f3af 8000 	nop.w
    60d8:	f3af 8000 	nop.w
    60dc:	f3af 8000 	nop.w

000060e0 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal[string];
    60e0:	4b50      	ldr	r3, [pc, #320]	; (6224 <filter_tick+0x144>)
    60e2:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
    60e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    60ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
{
    60ee:	b570      	push	{r4, r5, r6, lr}
    60f0:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal[string];
    60f4:	ed92 7a00 	vldr	s14, [r2]
{
    60f8:	460c      	mov	r4, r1
    60fa:	4605      	mov	r5, r0
		if (!enabledFilt[f]) continue;
    60fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6104:	d910      	bls.n	6128 <filter_tick+0x48>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    6106:	1c8a      	adds	r2, r1, #2
    6108:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
    610c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6110:	ed91 6a00 	vldr	s12, [r1]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    6114:	f603 219c 	addw	r1, r3, #2716	; 0xa9c
    6118:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    611c:	edd2 7a00 	vldr	s15, [r2]
    6120:	eee0 7a06 	vfma.f32	s15, s0, s12
    6124:	eef0 6a67 	vmov.f32	s13, s15
		float enabled = filtParams[FilterEnabled].realVal[string];
    6128:	f204 22c5 	addw	r2, r4, #709	; 0x2c5
		if (!enabledFilt[f]) continue;
    612c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    6130:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6134:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    6138:	eeb4 9ae7 	vcmpe.f32	s18, s15
    613c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6140:	d953      	bls.n	61ea <filter_tick+0x10a>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    6142:	1ca1      	adds	r1, r4, #2
    6144:	4a38      	ldr	r2, [pc, #224]	; (6228 <filter_tick+0x148>)
	if (enabledFilt[0])
    6146:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    614a:	f204 20ef 	addw	r0, r4, #751	; 0x2ef
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    614e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    6152:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6156:	edd1 5a00 	vldr	s11, [r1]
	if (enabledFilt[0])
    615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    615e:	ed11 6a15 	vldr	s12, [r1, #-84]	; 0xffffffac
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    6162:	ed93 8a00 	vldr	s16, [r3]
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6166:	eea0 6a25 	vfma.f32	s12, s0, s11
    616a:	eef0 8a46 	vmov.f32	s17, s12
	if (enabledFilt[0])
    616e:	dd1f      	ble.n	61b0 <filter_tick+0xd0>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    6170:	4e2e      	ldr	r6, [pc, #184]	; (622c <filter_tick+0x14c>)
    6172:	eeb0 0a66 	vmov.f32	s0, s13
    6176:	4622      	mov	r2, r4
    6178:	2100      	movs	r1, #0
    617a:	6833      	ldr	r3, [r6, #0]
    617c:	4628      	mov	r0, r5
    617e:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	if (enabledFilt[1])
    6184:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	samples[1] += sendToFilter2;
    6188:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    618c:	edd5 7a00 	vldr	s15, [r5]
    6190:	ee37 7a48 	vsub.f32	s14, s14, s16
	if (enabledFilt[1])
    6194:	eeb4 9ae6 	vcmpe.f32	s18, s13
	samples[1] += sendToFilter2;
    6198:	eea7 0a87 	vfma.f32	s0, s15, s14
	if (enabledFilt[1])
    619c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    61a0:	ed85 0a01 	vstr	s0, [r5, #4]
	if (enabledFilt[1])
    61a4:	dc11      	bgt.n	61ca <filter_tick+0xea>
	return samples[1] + (samples[0] * sp);
    61a6:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    61aa:	ecbd 8b04 	vpop	{d8-d9}
    61ae:	bd70      	pop	{r4, r5, r6, pc}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    61b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    61b4:	edd5 7a01 	vldr	s15, [r5, #4]
    61b8:	edd5 6a00 	vldr	s13, [r5]
    61bc:	4e1b      	ldr	r6, [pc, #108]	; (622c <filter_tick+0x14c>)
	float sendToFilter2 = samples[0] * (1.0f - sp);
    61be:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    61c2:	eee6 7a87 	vfma.f32	s15, s13, s14
    61c6:	edc5 7a01 	vstr	s15, [r5, #4]
		filterTick[1](&samples[1], 1, cutoff[1], string);
    61ca:	eeb0 0a68 	vmov.f32	s0, s17
    61ce:	6873      	ldr	r3, [r6, #4]
    61d0:	4622      	mov	r2, r4
    61d2:	2101      	movs	r1, #1
    61d4:	1d28      	adds	r0, r5, #4
    61d6:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    61d8:	ed95 0a01 	vldr	s0, [r5, #4]
    61dc:	edd5 7a00 	vldr	s15, [r5]
    61e0:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    61e4:	ecbd 8b04 	vpop	{d8-d9}
    61e8:	bd70      	pop	{r4, r5, r6, pc}
	if (enabledFilt[0])
    61ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    61ee:	f204 22ef 	addw	r2, r4, #751	; 0x2ef
    61f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    61f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    61fa:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    61fe:	dcb7      	bgt.n	6170 <filter_tick+0x90>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    6204:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6208:	edd5 7a00 	vldr	s15, [r5]
    620c:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    6210:	eea7 0a27 	vfma.f32	s0, s14, s15
    6214:	ed85 0a01 	vstr	s0, [r5, #4]
	return samples[1] + (samples[0] * sp);
    6218:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    621c:	ecbd 8b04 	vpop	{d8-d9}
    6220:	bd70      	pop	{r4, r5, r6, pc}
    6222:	bf00      	nop
    6224:	20018a64 	.word	0x20018a64
    6228:	200195fc 	.word	0x200195fc
    622c:	2001c9a8 	.word	0x2001c9a8
    6230:	f3af 8000 	nop.w
    6234:	f3af 8000 	nop.w
    6238:	f3af 8000 	nop.w
    623c:	f3af 8000 	nop.w

00006240 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    6240:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6244:	4b0d      	ldr	r3, [pc, #52]	; (627c <lowpassTick+0x3c>)
{
    6246:	b530      	push	{r4, r5, lr}
    6248:	4605      	mov	r5, r0
    624a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    624c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6250:	0094      	lsls	r4, r2, #2
    6252:	9001      	str	r0, [sp, #4]
    6254:	f003 f96c 	bl	9530 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    6258:	ed95 0a00 	vldr	s0, [r5]
    625c:	9801      	ldr	r0, [sp, #4]
    625e:	f003 f8bf 	bl	93e0 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    6262:	4b07      	ldr	r3, [pc, #28]	; (6280 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    6264:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6268:	4423      	add	r3, r4
    626a:	edd3 7a00 	vldr	s15, [r3]
    626e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6272:	edc5 7a00 	vstr	s15, [r5]
}
    6276:	b003      	add	sp, #12
    6278:	bd30      	pop	{r4, r5, pc}
    627a:	bf00      	nop
    627c:	2001cb9c 	.word	0x2001cb9c
    6280:	2001c998 	.word	0x2001c998
    6284:	f3af 8000 	nop.w
    6288:	f3af 8000 	nop.w
    628c:	f3af 8000 	nop.w
    6290:	f3af 8000 	nop.w
    6294:	f3af 8000 	nop.w
    6298:	f3af 8000 	nop.w
    629c:	f3af 8000 	nop.w

000062a0 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    62a0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    62a4:	4b0d      	ldr	r3, [pc, #52]	; (62dc <highpassTick+0x3c>)
{
    62a6:	b530      	push	{r4, r5, lr}
    62a8:	4605      	mov	r5, r0
    62aa:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    62ac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    62b0:	0094      	lsls	r4, r2, #2
    62b2:	9001      	str	r0, [sp, #4]
    62b4:	f003 f93c 	bl	9530 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    62b8:	ed95 0a00 	vldr	s0, [r5]
    62bc:	9801      	ldr	r0, [sp, #4]
    62be:	f003 f88f 	bl	93e0 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    62c2:	4b07      	ldr	r3, [pc, #28]	; (62e0 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
    62c4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    62c8:	4423      	add	r3, r4
    62ca:	edd3 7a00 	vldr	s15, [r3]
    62ce:	ee67 7a80 	vmul.f32	s15, s15, s0
    62d2:	edc5 7a00 	vstr	s15, [r5]
}
    62d6:	b003      	add	sp, #12
    62d8:	bd30      	pop	{r4, r5, pc}
    62da:	bf00      	nop
    62dc:	2001ca18 	.word	0x2001ca18
    62e0:	2001c998 	.word	0x2001c998
    62e4:	f3af 8000 	nop.w
    62e8:	f3af 8000 	nop.w
    62ec:	f3af 8000 	nop.w
    62f0:	f3af 8000 	nop.w
    62f4:	f3af 8000 	nop.w
    62f8:	f3af 8000 	nop.w
    62fc:	f3af 8000 	nop.w

00006300 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    6300:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6304:	4b0d      	ldr	r3, [pc, #52]	; (633c <bandpassTick+0x3c>)
{
    6306:	b530      	push	{r4, r5, lr}
    6308:	4605      	mov	r5, r0
    630a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    630c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6310:	0094      	lsls	r4, r2, #2
    6312:	9001      	str	r0, [sp, #4]
    6314:	f003 f90c 	bl	9530 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    6318:	ed95 0a00 	vldr	s0, [r5]
    631c:	9801      	ldr	r0, [sp, #4]
    631e:	f003 f85f 	bl	93e0 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    6322:	4b07      	ldr	r3, [pc, #28]	; (6340 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    6324:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6328:	4423      	add	r3, r4
    632a:	edd3 7a00 	vldr	s15, [r3]
    632e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6332:	edc5 7a00 	vstr	s15, [r5]
}
    6336:	b003      	add	sp, #12
    6338:	bd30      	pop	{r4, r5, pc}
    633a:	bf00      	nop
    633c:	2001c70c 	.word	0x2001c70c
    6340:	2001c998 	.word	0x2001c998
    6344:	f3af 8000 	nop.w
    6348:	f3af 8000 	nop.w
    634c:	f3af 8000 	nop.w
    6350:	f3af 8000 	nop.w
    6354:	f3af 8000 	nop.w
    6358:	f3af 8000 	nop.w
    635c:	f3af 8000 	nop.w

00006360 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    6360:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6364:	4b0d      	ldr	r3, [pc, #52]	; (639c <diodeLowpassTick+0x3c>)
{
    6366:	b530      	push	{r4, r5, lr}
    6368:	4605      	mov	r5, r0
    636a:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    636c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6370:	0094      	lsls	r4, r2, #2
    6372:	9001      	str	r0, [sp, #4]
    6374:	f002 ff84 	bl	9280 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    6378:	ed95 0a00 	vldr	s0, [r5]
    637c:	9801      	ldr	r0, [sp, #4]
    637e:	f003 f9af 	bl	96e0 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    6382:	4b07      	ldr	r3, [pc, #28]	; (63a0 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    6384:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6388:	4423      	add	r3, r4
    638a:	edd3 7a00 	vldr	s15, [r3]
    638e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6392:	edc5 7a00 	vstr	s15, [r5]
}
    6396:	b003      	add	sp, #12
    6398:	bd30      	pop	{r4, r5, pc}
    639a:	bf00      	nop
    639c:	2001c924 	.word	0x2001c924
    63a0:	2001c998 	.word	0x2001c998
    63a4:	f3af 8000 	nop.w
    63a8:	f3af 8000 	nop.w
    63ac:	f3af 8000 	nop.w
    63b0:	f3af 8000 	nop.w
    63b4:	f3af 8000 	nop.w
    63b8:	f3af 8000 	nop.w
    63bc:	f3af 8000 	nop.w

000063c0 <VZpeakTick>:
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    63c0:	4b09      	ldr	r3, [pc, #36]	; (63e8 <VZpeakTick+0x28>)
    63c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    63c6:	b510      	push	{r4, lr}
    63c8:	4604      	mov	r4, r0
    63ca:	b082      	sub	sp, #8
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    63cc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    63d0:	9001      	str	r0, [sp, #4]
    63d2:	f002 ffe1 	bl	9398 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    63d6:	9801      	ldr	r0, [sp, #4]
    63d8:	ed94 0a00 	vldr	s0, [r4]
    63dc:	f002 ff9c 	bl	9318 <__tVZFilterBell_tick_veneer>
    63e0:	ed84 0a00 	vstr	s0, [r4]
}
    63e4:	b002      	add	sp, #8
    63e6:	bd10      	pop	{r4, pc}
    63e8:	2001c6f4 	.word	0x2001c6f4
    63ec:	f3af 8000 	nop.w
    63f0:	f3af 8000 	nop.w
    63f4:	f3af 8000 	nop.w
    63f8:	f3af 8000 	nop.w
    63fc:	f3af 8000 	nop.w

00006400 <VZlowshelfTick>:
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    6400:	4b09      	ldr	r3, [pc, #36]	; (6428 <VZlowshelfTick+0x28>)
    6402:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6406:	b510      	push	{r4, lr}
    6408:	4604      	mov	r4, r0
    640a:	b082      	sub	sp, #8
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    640c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6410:	9001      	str	r0, [sp, #4]
    6412:	f003 f8e1 	bl	95d8 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    6416:	9801      	ldr	r0, [sp, #4]
    6418:	ed94 0a00 	vldr	s0, [r4]
    641c:	f003 f864 	bl	94e8 <__tVZFilterLS_tick_veneer>
    6420:	ed84 0a00 	vstr	s0, [r4]
}
    6424:	b002      	add	sp, #8
    6426:	bd10      	pop	{r4, pc}
    6428:	2001c6e4 	.word	0x2001c6e4
    642c:	f3af 8000 	nop.w
    6430:	f3af 8000 	nop.w
    6434:	f3af 8000 	nop.w
    6438:	f3af 8000 	nop.w
    643c:	f3af 8000 	nop.w

00006440 <VZhighshelfTick>:
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    6440:	4b09      	ldr	r3, [pc, #36]	; (6468 <VZhighshelfTick+0x28>)
    6442:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6446:	b510      	push	{r4, lr}
    6448:	4604      	mov	r4, r0
    644a:	b082      	sub	sp, #8
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    644c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6450:	9001      	str	r0, [sp, #4]
    6452:	f003 f81d 	bl	9490 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    6456:	9801      	ldr	r0, [sp, #4]
    6458:	ed94 0a00 	vldr	s0, [r4]
    645c:	f003 f8d8 	bl	9610 <__tVZFilterHS_tick_veneer>
    6460:	ed84 0a00 	vstr	s0, [r4]
}
    6464:	b002      	add	sp, #8
    6466:	bd10      	pop	{r4, pc}
    6468:	2001c6d4 	.word	0x2001c6d4
    646c:	f3af 8000 	nop.w
    6470:	f3af 8000 	nop.w
    6474:	f3af 8000 	nop.w
    6478:	f3af 8000 	nop.w
    647c:	f3af 8000 	nop.w

00006480 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    6480:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6484:	4b0d      	ldr	r3, [pc, #52]	; (64bc <VZbandrejectTick+0x3c>)
{
    6486:	b530      	push	{r4, r5, lr}
    6488:	4605      	mov	r5, r0
    648a:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    648c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6490:	0094      	lsls	r4, r2, #2
    6492:	9001      	str	r0, [sp, #4]
    6494:	f002 ff84 	bl	93a0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    6498:	ed95 0a00 	vldr	s0, [r5]
    649c:	9801      	ldr	r0, [sp, #4]
    649e:	f002 ff6f 	bl	9380 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    64a2:	4b07      	ldr	r3, [pc, #28]	; (64c0 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    64a4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    64a8:	4423      	add	r3, r4
    64aa:	edd3 7a00 	vldr	s15, [r3]
    64ae:	ee67 7a80 	vmul.f32	s15, s15, s0
    64b2:	edc5 7a00 	vstr	s15, [r5]
}
    64b6:	b003      	add	sp, #12
    64b8:	bd30      	pop	{r4, r5, pc}
    64ba:	bf00      	nop
    64bc:	2001c6c4 	.word	0x2001c6c4
    64c0:	2001c998 	.word	0x2001c998
    64c4:	f3af 8000 	nop.w
    64c8:	f3af 8000 	nop.w
    64cc:	f3af 8000 	nop.w
    64d0:	f3af 8000 	nop.w
    64d4:	f3af 8000 	nop.w
    64d8:	f3af 8000 	nop.w
    64dc:	f3af 8000 	nop.w

000064e0 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    64e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    64e4:	4b0d      	ldr	r3, [pc, #52]	; (651c <LadderLowpassTick+0x3c>)
{
    64e6:	b530      	push	{r4, r5, lr}
    64e8:	4605      	mov	r5, r0
    64ea:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    64ec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    64f0:	0094      	lsls	r4, r2, #2
    64f2:	9001      	str	r0, [sp, #4]
    64f4:	f002 ff0c 	bl	9310 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    64f8:	ed95 0a00 	vldr	s0, [r5]
    64fc:	9801      	ldr	r0, [sp, #4]
    64fe:	f003 f8c3 	bl	9688 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    6502:	4b07      	ldr	r3, [pc, #28]	; (6520 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    6504:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6508:	4423      	add	r3, r4
    650a:	edd3 7a00 	vldr	s15, [r3]
    650e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6512:	edc5 7a00 	vstr	s15, [r5]
}
    6516:	b003      	add	sp, #12
    6518:	bd30      	pop	{r4, r5, pc}
    651a:	bf00      	nop
    651c:	2001c6b4 	.word	0x2001c6b4
    6520:	2001c998 	.word	0x2001c998
    6524:	f3af 8000 	nop.w
    6528:	f3af 8000 	nop.w
    652c:	f3af 8000 	nop.w
    6530:	f3af 8000 	nop.w
    6534:	f3af 8000 	nop.w
    6538:	f3af 8000 	nop.w
    653c:	f3af 8000 	nop.w

00006540 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    6540:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    6544:	4b0f      	ldr	r3, [pc, #60]	; (6584 <setFreqMultPitch+0x44>)
    6546:	0042      	lsls	r2, r0, #1
	pitch *= 24.0f;
    6548:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    654c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    6550:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6554:	3020      	adds	r0, #32
	pitch *= 24.0f;
    6556:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    655a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    655e:	4408      	add	r0, r1
    6560:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6564:	ed93 7a02 	vldr	s14, [r3, #8]
    6568:	eeb4 7ae7 	vcmpe.f32	s14, s15
    656c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6570:	dd01      	ble.n	6576 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    6572:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    6576:	4b04      	ldr	r3, [pc, #16]	; (6588 <setFreqMultPitch+0x48>)
    6578:	440a      	add	r2, r1
    657a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    657e:	ed83 0a00 	vstr	s0, [r3]
}
    6582:	4770      	bx	lr
    6584:	20018a64 	.word	0x20018a64
    6588:	2001ccac 	.word	0x2001ccac
    658c:	f3af 8000 	nop.w
    6590:	f3af 8000 	nop.w
    6594:	f3af 8000 	nop.w
    6598:	f3af 8000 	nop.w
    659c:	f3af 8000 	nop.w

000065a0 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    65a0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    65a4:	4b17      	ldr	r3, [pc, #92]	; (6604 <setFreqMultHarm+0x64>)
    65a6:	0042      	lsls	r2, r0, #1
	harm *= 15.0f;
    65a8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    65ac:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    65b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    65b4:	3020      	adds	r0, #32
	harm *= 15.0f;
    65b6:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    65ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    65be:	4408      	add	r0, r1
    65c0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    65c4:	ed93 7a02 	vldr	s14, [r3, #8]
    65c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    65cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    65d0:	dd01      	ble.n	65d6 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    65d2:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    65d6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
    65da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    65de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    65e2:	db08      	blt.n	65f6 <setFreqMultHarm+0x56>
		freqMult[osc][string] = (harm + 1);
    65e4:	ee30 0a27 	vadd.f32	s0, s0, s15
    65e8:	4b07      	ldr	r3, [pc, #28]	; (6608 <setFreqMultHarm+0x68>)
    65ea:	440a      	add	r2, r1
    65ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    65f0:	ed83 0a00 	vstr	s0, [r3]
}
    65f4:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    65f6:	ee30 0a67 	vsub.f32	s0, s0, s15
    65fa:	eeb0 7ac0 	vabs.f32	s14, s0
    65fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
    6602:	e7f1      	b.n	65e8 <setFreqMultHarm+0x48>
    6604:	20018a64 	.word	0x20018a64
    6608:	2001c9c0 	.word	0x2001c9c0
    660c:	f3af 8000 	nop.w
    6610:	f3af 8000 	nop.w
    6614:	f3af 8000 	nop.w
    6618:	f3af 8000 	nop.w
    661c:	f3af 8000 	nop.w

00006620 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    6620:	4b03      	ldr	r3, [pc, #12]	; (6630 <lowpassSetQ+0x10>)
    6622:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6626:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    662a:	f003 b835 	b.w	9698 <__tSVF_setQ_veneer>
    662e:	bf00      	nop
    6630:	2001cb9c 	.word	0x2001cb9c
    6634:	f3af 8000 	nop.w
    6638:	f3af 8000 	nop.w
    663c:	f3af 8000 	nop.w

00006640 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    6640:	4b03      	ldr	r3, [pc, #12]	; (6650 <highpassSetQ+0x10>)
    6642:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6646:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    664a:	f003 b825 	b.w	9698 <__tSVF_setQ_veneer>
    664e:	bf00      	nop
    6650:	2001ca18 	.word	0x2001ca18
    6654:	f3af 8000 	nop.w
    6658:	f3af 8000 	nop.w
    665c:	f3af 8000 	nop.w

00006660 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    6660:	4b03      	ldr	r3, [pc, #12]	; (6670 <bandpassSetQ+0x10>)
    6662:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6666:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    666a:	f003 b815 	b.w	9698 <__tSVF_setQ_veneer>
    666e:	bf00      	nop
    6670:	2001c70c 	.word	0x2001c70c
    6674:	f3af 8000 	nop.w
    6678:	f3af 8000 	nop.w
    667c:	f3af 8000 	nop.w

00006680 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    6680:	4b03      	ldr	r3, [pc, #12]	; (6690 <diodeLowpassSetQ+0x10>)
    6682:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6686:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    668a:	f002 bf45 	b.w	9518 <__tDiodeFilter_setQ_veneer>
    668e:	bf00      	nop
    6690:	2001c924 	.word	0x2001c924
    6694:	f3af 8000 	nop.w
    6698:	f3af 8000 	nop.w
    669c:	f3af 8000 	nop.w

000066a0 <VZpeakSetQ>:
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    66a0:	4b03      	ldr	r3, [pc, #12]	; (66b0 <VZpeakSetQ+0x10>)
    66a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    66a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    66aa:	f002 be21 	b.w	92f0 <__tVZFilterBell_setBandwidth_veneer>
    66ae:	bf00      	nop
    66b0:	2001c6f4 	.word	0x2001c6f4
    66b4:	f3af 8000 	nop.w
    66b8:	f3af 8000 	nop.w
    66bc:	f3af 8000 	nop.w

000066c0 <VZlowshelfSetQ>:
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    66c0:	4b03      	ldr	r3, [pc, #12]	; (66d0 <VZlowshelfSetQ+0x10>)
    66c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    66c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    66ca:	f002 bdf9 	b.w	92c0 <__tVZFilterLS_setResonance_veneer>
    66ce:	bf00      	nop
    66d0:	2001c6e4 	.word	0x2001c6e4
    66d4:	f3af 8000 	nop.w
    66d8:	f3af 8000 	nop.w
    66dc:	f3af 8000 	nop.w

000066e0 <VZhighshelfSetQ>:
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    66e0:	4b03      	ldr	r3, [pc, #12]	; (66f0 <VZhighshelfSetQ+0x10>)
    66e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    66e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    66ea:	f002 bdd9 	b.w	92a0 <__tVZFilterHS_setResonance_veneer>
    66ee:	bf00      	nop
    66f0:	2001c6d4 	.word	0x2001c6d4
    66f4:	f3af 8000 	nop.w
    66f8:	f3af 8000 	nop.w
    66fc:	f3af 8000 	nop.w

00006700 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    6700:	4b03      	ldr	r3, [pc, #12]	; (6710 <VZbandrejectSetQ+0x10>)
    6702:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6706:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    670a:	f002 be15 	b.w	9338 <__tVZFilter_setResonance_veneer>
    670e:	bf00      	nop
    6710:	2001c6c4 	.word	0x2001c6c4
    6714:	f3af 8000 	nop.w
    6718:	f3af 8000 	nop.w
    671c:	f3af 8000 	nop.w

00006720 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    6720:	4b03      	ldr	r3, [pc, #12]	; (6730 <LadderLowpassSetQ+0x10>)
    6722:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6726:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    672a:	f002 bdd1 	b.w	92d0 <__tLadderFilter_setQ_veneer>
    672e:	bf00      	nop
    6730:	2001c6b4 	.word	0x2001c6b4
    6734:	f3af 8000 	nop.w
    6738:	f3af 8000 	nop.w
    673c:	f3af 8000 	nop.w

00006740 <lowpassSetGain>:
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6740:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6744:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    6748:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    674a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    674e:	4605      	mov	r5, r0
    6750:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6752:	eeb0 0a67 	vmov.f32	s0, s15
    6756:	f002 fecb 	bl	94f0 <__dbToATableLookup_veneer>
    675a:	4b04      	ldr	r3, [pc, #16]	; (676c <lowpassSetGain+0x2c>)
    675c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6760:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6764:	ed83 0a00 	vstr	s0, [r3]
}
    6768:	bd38      	pop	{r3, r4, r5, pc}
    676a:	bf00      	nop
    676c:	2001c998 	.word	0x2001c998
    6770:	f3af 8000 	nop.w
    6774:	f3af 8000 	nop.w
    6778:	f3af 8000 	nop.w
    677c:	f3af 8000 	nop.w

00006780 <highpassSetGain>:
    6780:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6784:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6788:	b538      	push	{r3, r4, r5, lr}
    678a:	eee0 7a07 	vfma.f32	s15, s0, s14
    678e:	4605      	mov	r5, r0
    6790:	460c      	mov	r4, r1
    6792:	eeb0 0a67 	vmov.f32	s0, s15
    6796:	f002 feab 	bl	94f0 <__dbToATableLookup_veneer>
    679a:	4b04      	ldr	r3, [pc, #16]	; (67ac <highpassSetGain+0x2c>)
    679c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    67a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    67a4:	ed83 0a00 	vstr	s0, [r3]
    67a8:	bd38      	pop	{r3, r4, r5, pc}
    67aa:	bf00      	nop
    67ac:	2001c998 	.word	0x2001c998
    67b0:	f3af 8000 	nop.w
    67b4:	f3af 8000 	nop.w
    67b8:	f3af 8000 	nop.w
    67bc:	f3af 8000 	nop.w

000067c0 <bandpassSetGain>:
    67c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    67c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    67c8:	b538      	push	{r3, r4, r5, lr}
    67ca:	eee0 7a07 	vfma.f32	s15, s0, s14
    67ce:	4605      	mov	r5, r0
    67d0:	460c      	mov	r4, r1
    67d2:	eeb0 0a67 	vmov.f32	s0, s15
    67d6:	f002 fe8b 	bl	94f0 <__dbToATableLookup_veneer>
    67da:	4b04      	ldr	r3, [pc, #16]	; (67ec <bandpassSetGain+0x2c>)
    67dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    67e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    67e4:	ed83 0a00 	vstr	s0, [r3]
    67e8:	bd38      	pop	{r3, r4, r5, pc}
    67ea:	bf00      	nop
    67ec:	2001c998 	.word	0x2001c998
    67f0:	f3af 8000 	nop.w
    67f4:	f3af 8000 	nop.w
    67f8:	f3af 8000 	nop.w
    67fc:	f3af 8000 	nop.w

00006800 <diodeLowpassSetGain>:
    6800:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6804:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6808:	b538      	push	{r3, r4, r5, lr}
    680a:	eee0 7a07 	vfma.f32	s15, s0, s14
    680e:	4605      	mov	r5, r0
    6810:	460c      	mov	r4, r1
    6812:	eeb0 0a67 	vmov.f32	s0, s15
    6816:	f002 fe6b 	bl	94f0 <__dbToATableLookup_veneer>
    681a:	4b04      	ldr	r3, [pc, #16]	; (682c <diodeLowpassSetGain+0x2c>)
    681c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6820:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6824:	ed83 0a00 	vstr	s0, [r3]
    6828:	bd38      	pop	{r3, r4, r5, pc}
    682a:	bf00      	nop
    682c:	2001c998 	.word	0x2001c998
    6830:	f3af 8000 	nop.w
    6834:	f3af 8000 	nop.w
    6838:	f3af 8000 	nop.w
    683c:	f3af 8000 	nop.w

00006840 <VZpeakSetGain>:
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6840:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    6844:	ed9f 7a09 	vldr	s14, [pc, #36]	; 686c <VZpeakSetGain+0x2c>
{
    6848:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    684a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    684e:	4605      	mov	r5, r0
    6850:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6852:	eeb0 0a67 	vmov.f32	s0, s15
    6856:	f002 fe4b 	bl	94f0 <__dbToATableLookup_veneer>
    685a:	4b05      	ldr	r3, [pc, #20]	; (6870 <VZpeakSetGain+0x30>)
    685c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6860:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6868:	f002 be4e 	b.w	9508 <__tVZFilterBell_setGain_veneer>
    686c:	42480000 	.word	0x42480000
    6870:	2001c6f4 	.word	0x2001c6f4
    6874:	f3af 8000 	nop.w
    6878:	f3af 8000 	nop.w
    687c:	f3af 8000 	nop.w

00006880 <VZlowshelfSetGain>:
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6880:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    6884:	ed9f 7a09 	vldr	s14, [pc, #36]	; 68ac <VZlowshelfSetGain+0x2c>
{
    6888:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    688a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    688e:	4605      	mov	r5, r0
    6890:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6892:	eeb0 0a67 	vmov.f32	s0, s15
    6896:	f002 fe2b 	bl	94f0 <__dbToATableLookup_veneer>
    689a:	4b05      	ldr	r3, [pc, #20]	; (68b0 <VZlowshelfSetGain+0x30>)
    689c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    68a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    68a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    68a8:	f002 bd2a 	b.w	9300 <__tVZFilterLS_setGain_veneer>
    68ac:	42480000 	.word	0x42480000
    68b0:	2001c6e4 	.word	0x2001c6e4
    68b4:	f3af 8000 	nop.w
    68b8:	f3af 8000 	nop.w
    68bc:	f3af 8000 	nop.w

000068c0 <VZhighshelfSetGain>:
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    68c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    68c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 68ec <VZhighshelfSetGain+0x2c>
{
    68c8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    68ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    68ce:	4605      	mov	r5, r0
    68d0:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    68d2:	eeb0 0a67 	vmov.f32	s0, s15
    68d6:	f002 fe0b 	bl	94f0 <__dbToATableLookup_veneer>
    68da:	4b05      	ldr	r3, [pc, #20]	; (68f0 <VZhighshelfSetGain+0x30>)
    68dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    68e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    68e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    68e8:	f002 bcfe 	b.w	92e8 <__tVZFilterHS_setGain_veneer>
    68ec:	42480000 	.word	0x42480000
    68f0:	2001c6d4 	.word	0x2001c6d4
    68f4:	f3af 8000 	nop.w
    68f8:	f3af 8000 	nop.w
    68fc:	f3af 8000 	nop.w

00006900 <VZbandrejectSetGain>:
    6900:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6904:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6908:	b538      	push	{r3, r4, r5, lr}
    690a:	eee0 7a07 	vfma.f32	s15, s0, s14
    690e:	4605      	mov	r5, r0
    6910:	460c      	mov	r4, r1
    6912:	eeb0 0a67 	vmov.f32	s0, s15
    6916:	f002 fdeb 	bl	94f0 <__dbToATableLookup_veneer>
    691a:	4b04      	ldr	r3, [pc, #16]	; (692c <VZbandrejectSetGain+0x2c>)
    691c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6920:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6924:	ed83 0a00 	vstr	s0, [r3]
    6928:	bd38      	pop	{r3, r4, r5, pc}
    692a:	bf00      	nop
    692c:	2001c998 	.word	0x2001c998
    6930:	f3af 8000 	nop.w
    6934:	f3af 8000 	nop.w
    6938:	f3af 8000 	nop.w
    693c:	f3af 8000 	nop.w

00006940 <LadderLowpassSetGain>:
    6940:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6944:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6948:	b538      	push	{r3, r4, r5, lr}
    694a:	eee0 7a07 	vfma.f32	s15, s0, s14
    694e:	4605      	mov	r5, r0
    6950:	460c      	mov	r4, r1
    6952:	eeb0 0a67 	vmov.f32	s0, s15
    6956:	f002 fdcb 	bl	94f0 <__dbToATableLookup_veneer>
    695a:	4b04      	ldr	r3, [pc, #16]	; (696c <LadderLowpassSetGain+0x2c>)
    695c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6960:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6964:	ed83 0a00 	vstr	s0, [r3]
    6968:	bd38      	pop	{r3, r4, r5, pc}
    696a:	bf00      	nop
    696c:	2001c998 	.word	0x2001c998
    6970:	f3af 8000 	nop.w
    6974:	f3af 8000 	nop.w
    6978:	f3af 8000 	nop.w
    697c:	f3af 8000 	nop.w

00006980 <envelope_tick>:
{
    6980:	b538      	push	{r3, r4, r5, lr}
		if (envOn[v])
    6982:	4d1d      	ldr	r5, [pc, #116]	; (69f8 <envelope_tick+0x78>)
{
    6984:	4604      	mov	r4, r0
		if (envOn[v])
    6986:	782b      	ldrb	r3, [r5, #0]
    6988:	bb53      	cbnz	r3, 69e0 <envelope_tick+0x60>
    698a:	786b      	ldrb	r3, [r5, #1]
    698c:	b9e3      	cbnz	r3, 69c8 <envelope_tick+0x48>
    698e:	78ab      	ldrb	r3, [r5, #2]
    6990:	b973      	cbnz	r3, 69b0 <envelope_tick+0x30>
    6992:	78eb      	ldrb	r3, [r5, #3]
    6994:	b903      	cbnz	r3, 6998 <envelope_tick+0x18>
}
    6996:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    6998:	4b18      	ldr	r3, [pc, #96]	; (69fc <envelope_tick+0x7c>)
    699a:	1da0      	adds	r0, r4, #6
    699c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    69a0:	f002 fd0e 	bl	93c0 <__tADSRT_tickNoInterp_veneer>
    69a4:	4b16      	ldr	r3, [pc, #88]	; (6a00 <envelope_tick+0x80>)
    69a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    69aa:	ed83 0a2e 	vstr	s0, [r3, #184]	; 0xb8
}
    69ae:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    69b0:	4b12      	ldr	r3, [pc, #72]	; (69fc <envelope_tick+0x7c>)
    69b2:	1d20      	adds	r0, r4, #4
    69b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    69b8:	f002 fd02 	bl	93c0 <__tADSRT_tickNoInterp_veneer>
    69bc:	4b10      	ldr	r3, [pc, #64]	; (6a00 <envelope_tick+0x80>)
    69be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    69c2:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    69c6:	e7e4      	b.n	6992 <envelope_tick+0x12>
    69c8:	4b0c      	ldr	r3, [pc, #48]	; (69fc <envelope_tick+0x7c>)
    69ca:	1ca0      	adds	r0, r4, #2
    69cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    69d0:	f002 fcf6 	bl	93c0 <__tADSRT_tickNoInterp_veneer>
    69d4:	4b0a      	ldr	r3, [pc, #40]	; (6a00 <envelope_tick+0x80>)
    69d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    69da:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    69de:	e7d6      	b.n	698e <envelope_tick+0xe>
    69e0:	4806      	ldr	r0, [pc, #24]	; (69fc <envelope_tick+0x7c>)
    69e2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    69e6:	f002 fceb 	bl	93c0 <__tADSRT_tickNoInterp_veneer>
    69ea:	4b05      	ldr	r3, [pc, #20]	; (6a00 <envelope_tick+0x80>)
    69ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    69f0:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    69f4:	e7c9      	b.n	698a <envelope_tick+0xa>
    69f6:	bf00      	nop
    69f8:	2001c944 	.word	0x2001c944
    69fc:	2001c948 	.word	0x2001c948
    6a00:	2001cf80 	.word	0x2001cf80
    6a04:	f3af 8000 	nop.w
    6a08:	f3af 8000 	nop.w
    6a0c:	f3af 8000 	nop.w
    6a10:	f3af 8000 	nop.w
    6a14:	f3af 8000 	nop.w
    6a18:	f3af 8000 	nop.w
    6a1c:	f3af 8000 	nop.w

00006a20 <lfo_tick>:
{
    6a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a24:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6a74 <lfo_tick+0x54>
    6a28:	b082      	sub	sp, #8
    6a2a:	4d10      	ldr	r5, [pc, #64]	; (6a6c <lfo_tick+0x4c>)
    6a2c:	4607      	mov	r7, r0
    6a2e:	4e10      	ldr	r6, [pc, #64]	; (6a70 <lfo_tick+0x50>)
    6a30:	f108 0904 	add.w	r9, r8, #4
    6a34:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    6a38:	4644      	mov	r4, r8
			float sample = 0.0f;
    6a3a:	f04f 0a00 	mov.w	sl, #0
    6a3e:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    6a42:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    6a46:	463a      	mov	r2, r7
    6a48:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    6a4a:	b133      	cbz	r3, 6a5a <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    6a4c:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    6a4e:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    6a52:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    6a54:	9b01      	ldr	r3, [sp, #4]
    6a56:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    6a5a:	454c      	cmp	r4, r9
    6a5c:	f106 0604 	add.w	r6, r6, #4
    6a60:	f105 0508 	add.w	r5, r5, #8
    6a64:	d1eb      	bne.n	6a3e <lfo_tick+0x1e>
}
    6a66:	b002      	add	sp, #8
    6a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a6c:	2001cf80 	.word	0x2001cf80
    6a70:	2001cb2c 	.word	0x2001cb2c
    6a74:	2001cac8 	.word	0x2001cac8
    6a78:	f3af 8000 	nop.w
    6a7c:	f3af 8000 	nop.w

00006a80 <setEnvelopeAttack>:
	a = a + 0.001f;
    6a80:	eddf 7a05 	vldr	s15, [pc, #20]	; 6a98 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    6a84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a88:	4b04      	ldr	r3, [pc, #16]	; (6a9c <setEnvelopeAttack+0x1c>)
    6a8a:	ee30 0a27 	vadd.f32	s0, s0, s15
    6a8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a92:	f002 bdb9 	b.w	9608 <__tADSRT_setAttack_veneer>
    6a96:	bf00      	nop
    6a98:	3a83126f 	.word	0x3a83126f
    6a9c:	2001c948 	.word	0x2001c948

00006aa0 <setEnvelopeDecay>:
	d = d + 0.001f;
    6aa0:	eddf 7a05 	vldr	s15, [pc, #20]	; 6ab8 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    6aa4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6aa8:	4b04      	ldr	r3, [pc, #16]	; (6abc <setEnvelopeDecay+0x1c>)
    6aaa:	ee30 0a27 	vadd.f32	s0, s0, s15
    6aae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6ab2:	f002 bda5 	b.w	9600 <__tADSRT_setDecay_veneer>
    6ab6:	bf00      	nop
    6ab8:	3a83126f 	.word	0x3a83126f
    6abc:	2001c948 	.word	0x2001c948

00006ac0 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    6ac0:	4b03      	ldr	r3, [pc, #12]	; (6ad0 <setEnvelopeSustain+0x10>)
    6ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6aca:	f002 bc81 	b.w	93d0 <__tADSRT_setSustain_veneer>
    6ace:	bf00      	nop
    6ad0:	2001c948 	.word	0x2001c948
    6ad4:	f3af 8000 	nop.w
    6ad8:	f3af 8000 	nop.w
    6adc:	f3af 8000 	nop.w

00006ae0 <setEnvelopeRelease>:
	r = r + 0.001f;
    6ae0:	eddf 7a05 	vldr	s15, [pc, #20]	; 6af8 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    6ae4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ae8:	4b04      	ldr	r3, [pc, #16]	; (6afc <setEnvelopeRelease+0x1c>)
    6aea:	ee30 0a27 	vadd.f32	s0, s0, s15
    6aee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6af2:	f002 bde5 	b.w	96c0 <__tADSRT_setRelease_veneer>
    6af6:	bf00      	nop
    6af8:	3a83126f 	.word	0x3a83126f
    6afc:	2001c948 	.word	0x2001c948

00006b00 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    6b00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6b04:	eddf 6a08 	vldr	s13, [pc, #32]	; 6b28 <setEnvelopeLeak+0x28>
    6b08:	ed9f 7a08 	vldr	s14, [pc, #32]	; 6b2c <setEnvelopeLeak+0x2c>
    6b0c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6b10:	4b07      	ldr	r3, [pc, #28]	; (6b30 <setEnvelopeLeak+0x30>)
    6b12:	ee77 7ac0 	vsub.f32	s15, s15, s0
    6b16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b1a:	eea7 7aa6 	vfma.f32	s14, s15, s13
    6b1e:	eeb0 0a47 	vmov.f32	s0, s14
    6b22:	f002 bcb9 	b.w	9498 <__tADSRT_setLeakFactor_veneer>
    6b26:	bf00      	nop
    6b28:	3851b717 	.word	0x3851b717
    6b2c:	3f7ffcb9 	.word	0x3f7ffcb9
    6b30:	2001c948 	.word	0x2001c948
    6b34:	f3af 8000 	nop.w
    6b38:	f3af 8000 	nop.w
    6b3c:	f3af 8000 	nop.w

00006b40 <setAmp>:
	amplitude[string] = amp;
    6b40:	4b02      	ldr	r3, [pc, #8]	; (6b4c <setAmp+0xc>)
    6b42:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6b46:	ed81 0a00 	vstr	s0, [r1]
}
    6b4a:	4770      	bx	lr
    6b4c:	2001c704 	.word	0x2001c704
    6b50:	f3af 8000 	nop.w
    6b54:	f3af 8000 	nop.w
    6b58:	f3af 8000 	nop.w
    6b5c:	f3af 8000 	nop.w

00006b60 <setMaster>:
	finalMaster[string] = amp;
    6b60:	4b02      	ldr	r3, [pc, #8]	; (6b6c <setMaster+0xc>)
    6b62:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6b66:	ed81 0a00 	vstr	s0, [r1]
}
    6b6a:	4770      	bx	lr
    6b6c:	2001c9b8 	.word	0x2001c9b8
    6b70:	f3af 8000 	nop.w
    6b74:	f3af 8000 	nop.w
    6b78:	f3af 8000 	nop.w
    6b7c:	f3af 8000 	nop.w

00006b80 <setTranspose>:
	transpose = in;
    6b80:	4b01      	ldr	r3, [pc, #4]	; (6b88 <setTranspose+0x8>)
    6b82:	ed83 0a00 	vstr	s0, [r3]
}
    6b86:	4770      	bx	lr
    6b88:	2001d0fc 	.word	0x2001d0fc
    6b8c:	f3af 8000 	nop.w
    6b90:	f3af 8000 	nop.w
    6b94:	f3af 8000 	nop.w
    6b98:	f3af 8000 	nop.w
    6b9c:	f3af 8000 	nop.w

00006ba0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    6ba0:	eddf 7a03 	vldr	s15, [pc, #12]	; 6bb0 <setPitchBendRange+0x10>
    6ba4:	4b03      	ldr	r3, [pc, #12]	; (6bb4 <setPitchBendRange+0x14>)
    6ba6:	ee20 0a27 	vmul.f32	s0, s0, s15
    6baa:	ed83 0a00 	vstr	s0, [r3]
}
    6bae:	4770      	bx	lr
    6bb0:	39000200 	.word	0x39000200
    6bb4:	20000730 	.word	0x20000730
    6bb8:	f3af 8000 	nop.w
    6bbc:	f3af 8000 	nop.w

00006bc0 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], in);
    6bc0:	4802      	ldr	r0, [pc, #8]	; (6bcc <setFinalLowpass+0xc>)
    6bc2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bc6:	f002 bcb3 	b.w	9530 <__tSVF_setFreqFast_veneer>
    6bca:	bf00      	nop
    6bcc:	2001c9b0 	.word	0x2001c9b0
    6bd0:	f3af 8000 	nop.w
    6bd4:	f3af 8000 	nop.w
    6bd8:	f3af 8000 	nop.w
    6bdc:	f3af 8000 	nop.w

00006be0 <tickMappings>:
{
    6be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < numMappings; i++)
    6be4:	f8df 915c 	ldr.w	r9, [pc, #348]	; 6d44 <tickMappings+0x164>
	interruptChecker = 0;
    6be8:	f04f 0b00 	mov.w	fp, #0
    6bec:	4b51      	ldr	r3, [pc, #324]	; (6d34 <tickMappings+0x154>)
	for (int i = 0; i < numMappings; i++)
    6bee:	f899 2000 	ldrb.w	r2, [r9]
{
    6bf2:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    6bf6:	f883 b000 	strb.w	fp, [r3]
	for (int i = 0; i < numMappings; i++)
    6bfa:	2a00      	cmp	r2, #0
    6bfc:	f000 8087 	beq.w	6d0e <tickMappings+0x12e>
    6c00:	4c4d      	ldr	r4, [pc, #308]	; (6d38 <tickMappings+0x158>)
			for (int v = 0; v < numStringsThisBoard; v++)
    6c02:	f8df 8144 	ldr.w	r8, [pc, #324]	; 6d48 <tickMappings+0x168>
    6c06:	e004      	b.n	6c12 <tickMappings+0x32>
	for (int i = 0; i < numMappings; i++)
    6c08:	f10b 0b01 	add.w	fp, fp, #1
    6c0c:	344c      	adds	r4, #76	; 0x4c
    6c0e:	455a      	cmp	r2, fp
    6c10:	dd7d      	ble.n	6d0e <tickMappings+0x12e>
		if (mappings[i].destNumber != 255)
    6c12:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    6c16:	2bff      	cmp	r3, #255	; 0xff
    6c18:	d0f6      	beq.n	6c08 <tickMappings+0x28>
			for (int v = 0; v < numStringsThisBoard; v++)
    6c1a:	f898 3000 	ldrb.w	r3, [r8]
    6c1e:	2b00      	cmp	r3, #0
    6c20:	d0f2      	beq.n	6c08 <tickMappings+0x28>
    6c22:	4b46      	ldr	r3, [pc, #280]	; (6d3c <tickMappings+0x15c>)
    6c24:	4626      	mov	r6, r4
    6c26:	2500      	movs	r5, #0
    6c28:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
					if (mappings[i].hookActive[j])
    6c2c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    6c30:	2b00      	cmp	r3, #0
    6c32:	d070      	beq.n	6d16 <tickMappings+0x136>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c34:	6832      	ldr	r2, [r6, #0]
    6c36:	69f3      	ldr	r3, [r6, #28]
    6c38:	ed92 8a00 	vldr	s16, [r2]
    6c3c:	ed93 7a00 	vldr	s14, [r3]
    6c40:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    6c44:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    6c48:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c4a:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    6c4e:	2900      	cmp	r1, #0
    6c50:	d069      	beq.n	6d26 <tickMappings+0x146>
							smoothedValue += sum;
    6c52:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    6c56:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 6d40 <tickMappings+0x160>
					if (mappings[i].hookActive[j])
    6c5a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    6c5e:	b183      	cbz	r3, 6c82 <tickMappings+0xa2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c60:	68b2      	ldr	r2, [r6, #8]
    6c62:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6c64:	ed92 7a00 	vldr	s14, [r2]
    6c68:	ed93 6a00 	vldr	s12, [r3]
    6c6c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    6c70:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    6c74:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c76:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    6c7a:	2900      	cmp	r1, #0
    6c7c:	d156      	bne.n	6d2c <tickMappings+0x14c>
							unsmoothedValue += sum;
    6c7e:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    6c82:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    6c86:	b183      	cbz	r3, 6caa <tickMappings+0xca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c88:	6932      	ldr	r2, [r6, #16]
    6c8a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    6c8c:	ed92 7a00 	vldr	s14, [r2]
    6c90:	ed93 6a00 	vldr	s12, [r3]
    6c94:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    6c98:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    6c9c:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6c9e:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    6ca2:	2900      	cmp	r1, #0
    6ca4:	d13c      	bne.n	6d20 <tickMappings+0x140>
							unsmoothedValue += sum;
    6ca6:	ee38 8a07 	vadd.f32	s16, s16, s14
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    6caa:	f854 3c04 	ldr.w	r3, [r4, #-4]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    6cae:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    6cb0:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    6cb2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6cb6:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    6cba:	ee37 0a80 	vadd.f32	s0, s15, s0
    6cbe:	f002 fb63 	bl	9388 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    6cc2:	4638      	mov	r0, r7
    6cc4:	f002 fc64 	bl	9590 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    6cc8:	f854 ac04 	ldr.w	sl, [r4, #-4]
    6ccc:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    6cd0:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    6cd2:	f8da 3010 	ldr.w	r3, [sl, #16]
    6cd6:	4798      	blx	r3
    6cd8:	1cab      	adds	r3, r5, #2
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    6cda:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    6cdc:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    6cde:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    6ce2:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    6ce6:	f854 0c04 	ldr.w	r0, [r4, #-4]
    6cea:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    6cee:	6942      	ldr	r2, [r0, #20]
    6cf0:	7e00      	ldrb	r0, [r0, #24]
    6cf2:	ed93 0a00 	vldr	s0, [r3]
    6cf6:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    6cf8:	f898 3000 	ldrb.w	r3, [r8]
    6cfc:	42ab      	cmp	r3, r5
    6cfe:	dc95      	bgt.n	6c2c <tickMappings+0x4c>
	for (int i = 0; i < numMappings; i++)
    6d00:	f899 2000 	ldrb.w	r2, [r9]
    6d04:	f10b 0b01 	add.w	fp, fp, #1
    6d08:	344c      	adds	r4, #76	; 0x4c
    6d0a:	455a      	cmp	r2, fp
    6d0c:	dc81      	bgt.n	6c12 <tickMappings+0x32>
}
    6d0e:	ecbd 8b02 	vpop	{d8}
    6d12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    6d16:	eddf 7a0a 	vldr	s15, [pc, #40]	; 6d40 <tickMappings+0x160>
				float unsmoothedValue = 0.0f;
    6d1a:	eeb0 8a67 	vmov.f32	s16, s15
    6d1e:	e79c      	b.n	6c5a <tickMappings+0x7a>
							smoothedValue += sum;
    6d20:	ee77 7a87 	vadd.f32	s15, s15, s14
    6d24:	e7c1      	b.n	6caa <tickMappings+0xca>
				float smoothedValue = 0.0f;
    6d26:	eddf 7a06 	vldr	s15, [pc, #24]	; 6d40 <tickMappings+0x160>
    6d2a:	e796      	b.n	6c5a <tickMappings+0x7a>
							smoothedValue += sum;
    6d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
    6d30:	e7a7      	b.n	6c82 <tickMappings+0xa2>
    6d32:	bf00      	nop
    6d34:	20016093 	.word	0x20016093
    6d38:	200180d0 	.word	0x200180d0
    6d3c:	2001cbac 	.word	0x2001cbac
    6d40:	00000000 	.word	0x00000000
    6d44:	20018a54 	.word	0x20018a54
    6d48:	200004b1 	.word	0x200004b1
    6d4c:	f3af 8000 	nop.w
    6d50:	f3af 8000 	nop.w
    6d54:	f3af 8000 	nop.w
    6d58:	f3af 8000 	nop.w
    6d5c:	f3af 8000 	nop.w

00006d60 <lfoSawSquareTick>:
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    6d60:	4b05      	ldr	r3, [pc, #20]	; (6d78 <lfoSawSquareTick+0x18>)
    6d62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6d66:	b510      	push	{r4, lr}
    6d68:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    6d6a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6d6e:	f002 fc1f 	bl	95b0 <__tSawSquareLFO_tick_veneer>
    6d72:	ed84 0a00 	vstr	s0, [r4]
}
    6d76:	bd10      	pop	{r4, pc}
    6d78:	2001cb0c 	.word	0x2001cb0c
    6d7c:	f3af 8000 	nop.w

00006d80 <lfoSineTriTick>:
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    6d80:	4b05      	ldr	r3, [pc, #20]	; (6d98 <lfoSineTriTick+0x18>)
    6d82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6d86:	b510      	push	{r4, lr}
    6d88:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    6d8a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6d8e:	f002 fbfb 	bl	9588 <__tSineTriLFO_tick_veneer>
    6d92:	ed84 0a00 	vstr	s0, [r4]
}
    6d96:	bd10      	pop	{r4, pc}
    6d98:	2001cb5c 	.word	0x2001cb5c
    6d9c:	f3af 8000 	nop.w

00006da0 <lfoSineTick>:
    *sample = tCycle_tick(&lfoSine[v][string]);
    6da0:	4b05      	ldr	r3, [pc, #20]	; (6db8 <lfoSineTick+0x18>)
    6da2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6da6:	b510      	push	{r4, lr}
    6da8:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    6daa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6dae:	f002 fbaf 	bl	9510 <__tCycle_tick_veneer>
    6db2:	ed84 0a00 	vstr	s0, [r4]
}
    6db6:	bd10      	pop	{r4, pc}
    6db8:	2001cb3c 	.word	0x2001cb3c
    6dbc:	f3af 8000 	nop.w

00006dc0 <lfoTriTick>:
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    6dc0:	4b05      	ldr	r3, [pc, #20]	; (6dd8 <lfoTriTick+0x18>)
    6dc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6dc6:	b510      	push	{r4, lr}
    6dc8:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    6dca:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6dce:	f002 fc97 	bl	9700 <__tTriLFO_tick_veneer>
    6dd2:	ed84 0a00 	vstr	s0, [r4]
}
    6dd6:	bd10      	pop	{r4, pc}
    6dd8:	2001cb7c 	.word	0x2001cb7c
    6ddc:	f3af 8000 	nop.w

00006de0 <lfoSawTick>:
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    6de0:	4b08      	ldr	r3, [pc, #32]	; (6e04 <lfoSawTick+0x24>)
    6de2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6de6:	b510      	push	{r4, lr}
    6de8:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    6dea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6dee:	f002 fc5b 	bl	96a8 <__tIntPhasor_tick_veneer>
    6df2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    6df6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    6dfa:	eee0 7a07 	vfma.f32	s15, s0, s14
    6dfe:	edc4 7a00 	vstr	s15, [r4]
}
    6e02:	bd10      	pop	{r4, pc}
    6e04:	2001caec 	.word	0x2001caec
    6e08:	f3af 8000 	nop.w
    6e0c:	f3af 8000 	nop.w
    6e10:	f3af 8000 	nop.w
    6e14:	f3af 8000 	nop.w
    6e18:	f3af 8000 	nop.w
    6e1c:	f3af 8000 	nop.w

00006e20 <lfoPulseTick>:
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    6e20:	4b05      	ldr	r3, [pc, #20]	; (6e38 <lfoPulseTick+0x18>)
    6e22:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6e26:	b510      	push	{r4, lr}
    6e28:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    6e2a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6e2e:	f002 fa9b 	bl	9368 <__tSquareLFO_tick_veneer>
    6e32:	ed84 0a00 	vstr	s0, [r4]
}
    6e36:	bd10      	pop	{r4, pc}
    6e38:	2001cacc 	.word	0x2001cacc
    6e3c:	f3af 8000 	nop.w

00006e40 <lfoSawSquareSetRate>:
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    6e40:	4b03      	ldr	r3, [pc, #12]	; (6e50 <lfoSawSquareSetRate+0x10>)
    6e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e4a:	f002 bc6d 	b.w	9728 <__tSawSquareLFO_setFreq_veneer>
    6e4e:	bf00      	nop
    6e50:	2001cb0c 	.word	0x2001cb0c
    6e54:	f3af 8000 	nop.w
    6e58:	f3af 8000 	nop.w
    6e5c:	f3af 8000 	nop.w

00006e60 <lfoSineTriSetRate>:
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    6e60:	4b03      	ldr	r3, [pc, #12]	; (6e70 <lfoSineTriSetRate+0x10>)
    6e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e6a:	f002 bc09 	b.w	9680 <__tSineTriLFO_setFreq_veneer>
    6e6e:	bf00      	nop
    6e70:	2001cb5c 	.word	0x2001cb5c
    6e74:	f3af 8000 	nop.w
    6e78:	f3af 8000 	nop.w
    6e7c:	f3af 8000 	nop.w

00006e80 <lfoSineSetRate>:
	tCycle_setFreq(&lfoSine[v][string], r);
    6e80:	4b03      	ldr	r3, [pc, #12]	; (6e90 <lfoSineSetRate+0x10>)
    6e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e8a:	f002 ba9d 	b.w	93c8 <__tCycle_setFreq_veneer>
    6e8e:	bf00      	nop
    6e90:	2001cb3c 	.word	0x2001cb3c
    6e94:	f3af 8000 	nop.w
    6e98:	f3af 8000 	nop.w
    6e9c:	f3af 8000 	nop.w

00006ea0 <lfoTriSetRate>:
	tTriLFO_setFreq(&lfoTri[v][string], r);
    6ea0:	4b03      	ldr	r3, [pc, #12]	; (6eb0 <lfoTriSetRate+0x10>)
    6ea2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6eaa:	f002 ba55 	b.w	9358 <__tTriLFO_setFreq_veneer>
    6eae:	bf00      	nop
    6eb0:	2001cb7c 	.word	0x2001cb7c
    6eb4:	f3af 8000 	nop.w
    6eb8:	f3af 8000 	nop.w
    6ebc:	f3af 8000 	nop.w

00006ec0 <lfoSawSetRate>:
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    6ec0:	4b03      	ldr	r3, [pc, #12]	; (6ed0 <lfoSawSetRate+0x10>)
    6ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6eca:	f002 bc11 	b.w	96f0 <__tIntPhasor_setFreq_veneer>
    6ece:	bf00      	nop
    6ed0:	2001caec 	.word	0x2001caec
    6ed4:	f3af 8000 	nop.w
    6ed8:	f3af 8000 	nop.w
    6edc:	f3af 8000 	nop.w

00006ee0 <lfoPulseSetRate>:
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    6ee0:	4b03      	ldr	r3, [pc, #12]	; (6ef0 <lfoPulseSetRate+0x10>)
    6ee2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6eea:	f002 bc31 	b.w	9750 <__tSquareLFO_setFreq_veneer>
    6eee:	bf00      	nop
    6ef0:	2001cacc 	.word	0x2001cacc
    6ef4:	f3af 8000 	nop.w
    6ef8:	f3af 8000 	nop.w
    6efc:	f3af 8000 	nop.w

00006f00 <lfoSawSquareSetPhase>:
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    6f00:	4b03      	ldr	r3, [pc, #12]	; (6f10 <lfoSawSquareSetPhase+0x10>)
    6f02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f0a:	f002 bb8d 	b.w	9628 <__tSawSquareLFO_setPhase_veneer>
    6f0e:	bf00      	nop
    6f10:	2001cb0c 	.word	0x2001cb0c
    6f14:	f3af 8000 	nop.w
    6f18:	f3af 8000 	nop.w
    6f1c:	f3af 8000 	nop.w

00006f20 <lfoSineTriSetPhase>:
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    6f20:	4b03      	ldr	r3, [pc, #12]	; (6f30 <lfoSineTriSetPhase+0x10>)
    6f22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f2a:	f002 bbd1 	b.w	96d0 <__tSineTriLFO_setPhase_veneer>
    6f2e:	bf00      	nop
    6f30:	2001cb5c 	.word	0x2001cb5c
    6f34:	f3af 8000 	nop.w
    6f38:	f3af 8000 	nop.w
    6f3c:	f3af 8000 	nop.w

00006f40 <lfoSineSetPhase>:
	tCycle_setPhase(&lfoSine[v][string],p);
    6f40:	4b03      	ldr	r3, [pc, #12]	; (6f50 <lfoSineSetPhase+0x10>)
    6f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f4a:	f002 ba99 	b.w	9480 <__tCycle_setPhase_veneer>
    6f4e:	bf00      	nop
    6f50:	2001cb3c 	.word	0x2001cb3c
    6f54:	f3af 8000 	nop.w
    6f58:	f3af 8000 	nop.w
    6f5c:	f3af 8000 	nop.w

00006f60 <lfoTriSetPhase>:
	tTriLFO_setPhase(&lfoTri[v][string],p);
    6f60:	4b03      	ldr	r3, [pc, #12]	; (6f70 <lfoTriSetPhase+0x10>)
    6f62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f6a:	f002 baa9 	b.w	94c0 <__tTriLFO_setPhase_veneer>
    6f6e:	bf00      	nop
    6f70:	2001cb7c 	.word	0x2001cb7c
    6f74:	f3af 8000 	nop.w
    6f78:	f3af 8000 	nop.w
    6f7c:	f3af 8000 	nop.w

00006f80 <lfoSawSetPhase>:
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    6f80:	4b03      	ldr	r3, [pc, #12]	; (6f90 <lfoSawSetPhase+0x10>)
    6f82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f8a:	f002 bb35 	b.w	95f8 <__tIntPhasor_setPhase_veneer>
    6f8e:	bf00      	nop
    6f90:	2001caec 	.word	0x2001caec
    6f94:	f3af 8000 	nop.w
    6f98:	f3af 8000 	nop.w
    6f9c:	f3af 8000 	nop.w

00006fa0 <lfoPulseSetPhase>:
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    6fa0:	4b03      	ldr	r3, [pc, #12]	; (6fb0 <lfoPulseSetPhase+0x10>)
    6fa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6fa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6faa:	f002 bb61 	b.w	9670 <__tSquareLFO_setPhase_veneer>
    6fae:	bf00      	nop
    6fb0:	2001cacc 	.word	0x2001cacc
    6fb4:	f3af 8000 	nop.w
    6fb8:	f3af 8000 	nop.w
    6fbc:	f3af 8000 	nop.w

00006fc0 <lfoSawSquareSetShape>:
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    6fc0:	4b03      	ldr	r3, [pc, #12]	; (6fd0 <lfoSawSquareSetShape+0x10>)
    6fc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6fc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6fca:	f002 bafd 	b.w	95c8 <__tSawSquareLFO_setShape_veneer>
    6fce:	bf00      	nop
    6fd0:	2001cb0c 	.word	0x2001cb0c
    6fd4:	f3af 8000 	nop.w
    6fd8:	f3af 8000 	nop.w
    6fdc:	f3af 8000 	nop.w

00006fe0 <lfoSineTriSetShape>:
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    6fe0:	4b03      	ldr	r3, [pc, #12]	; (6ff0 <lfoSineTriSetShape+0x10>)
    6fe2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6fe6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6fea:	f002 b9c5 	b.w	9378 <__tSineTriLFO_setShape_veneer>
    6fee:	bf00      	nop
    6ff0:	2001cb5c 	.word	0x2001cb5c
    6ff4:	f3af 8000 	nop.w
    6ff8:	f3af 8000 	nop.w
    6ffc:	f3af 8000 	nop.w

00007000 <lfoSineSetShape>:
}
    7000:	4770      	bx	lr
    7002:	bf00      	nop
    7004:	f3af 8000 	nop.w
    7008:	f3af 8000 	nop.w
    700c:	f3af 8000 	nop.w
    7010:	f3af 8000 	nop.w
    7014:	f3af 8000 	nop.w
    7018:	f3af 8000 	nop.w
    701c:	f3af 8000 	nop.w

00007020 <lfoTriSetShape>:
    7020:	4770      	bx	lr
    7022:	bf00      	nop
    7024:	f3af 8000 	nop.w
    7028:	f3af 8000 	nop.w
    702c:	f3af 8000 	nop.w
    7030:	f3af 8000 	nop.w
    7034:	f3af 8000 	nop.w
    7038:	f3af 8000 	nop.w
    703c:	f3af 8000 	nop.w

00007040 <lfoSawSetShape>:
    7040:	4770      	bx	lr
    7042:	bf00      	nop
    7044:	f3af 8000 	nop.w
    7048:	f3af 8000 	nop.w
    704c:	f3af 8000 	nop.w
    7050:	f3af 8000 	nop.w
    7054:	f3af 8000 	nop.w
    7058:	f3af 8000 	nop.w
    705c:	f3af 8000 	nop.w

00007060 <lfoPulseSetShape>:
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    7060:	4b03      	ldr	r3, [pc, #12]	; (7070 <lfoPulseSetShape+0x10>)
    7062:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7066:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    706a:	f002 b961 	b.w	9330 <__tSquareLFO_setPulseWidth_veneer>
    706e:	bf00      	nop
    7070:	2001cacc 	.word	0x2001cacc
    7074:	f3af 8000 	nop.w
    7078:	f3af 8000 	nop.w
    707c:	f3af 8000 	nop.w

00007080 <clipperGainSet>:
	param1[v][string] = dbToATableLookup(value * 24.0f);
    7080:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    7084:	b538      	push	{r3, r4, r5, lr}
    7086:	4605      	mov	r5, r0
    7088:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    708a:	ee20 0a27 	vmul.f32	s0, s0, s15
    708e:	f002 fa2f 	bl	94f0 <__dbToATableLookup_veneer>
    7092:	4b04      	ldr	r3, [pc, #16]	; (70a4 <clipperGainSet+0x24>)
    7094:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7098:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    709c:	ed83 0a00 	vstr	s0, [r3]
}
    70a0:	bd38      	pop	{r3, r4, r5, pc}
    70a2:	bf00      	nop
    70a4:	2001cd9c 	.word	0x2001cd9c
    70a8:	f3af 8000 	nop.w
    70ac:	f3af 8000 	nop.w
    70b0:	f3af 8000 	nop.w
    70b4:	f3af 8000 	nop.w
    70b8:	f3af 8000 	nop.w
    70bc:	f3af 8000 	nop.w

000070c0 <wavefolderParam1>:
	param1[v][string] = dbToATableLookup(value * 12.0f);
    70c0:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    70c4:	b538      	push	{r3, r4, r5, lr}
    70c6:	4605      	mov	r5, r0
    70c8:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    70ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    70ce:	f002 fa0f 	bl	94f0 <__dbToATableLookup_veneer>
    70d2:	4b04      	ldr	r3, [pc, #16]	; (70e4 <wavefolderParam1+0x24>)
    70d4:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    70d8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    70dc:	ed83 0a00 	vstr	s0, [r3]
}
    70e0:	bd38      	pop	{r3, r4, r5, pc}
    70e2:	bf00      	nop
    70e4:	2001cd9c 	.word	0x2001cd9c
    70e8:	f3af 8000 	nop.w
    70ec:	f3af 8000 	nop.w
    70f0:	f3af 8000 	nop.w
    70f4:	f3af 8000 	nop.w
    70f8:	f3af 8000 	nop.w
    70fc:	f3af 8000 	nop.w

00007100 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    7100:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7104:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7108:	4b07      	ldr	r3, [pc, #28]	; (7128 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    710a:	4a08      	ldr	r2, [pc, #32]	; (712c <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    710c:	ee70 6a27 	vadd.f32	s13, s0, s15
    7110:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    7114:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    7118:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    711c:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    7120:	ed83 7a00 	vstr	s14, [r3]
}
    7124:	4770      	bx	lr
    7126:	bf00      	nop
    7128:	2001caa8 	.word	0x2001caa8
    712c:	2001cddc 	.word	0x2001cddc
    7130:	f3af 8000 	nop.w
    7134:	f3af 8000 	nop.w
    7138:	f3af 8000 	nop.w
    713c:	f3af 8000 	nop.w

00007140 <tiltParam1>:
{
    7140:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    7142:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    7146:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    714a:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    714e:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    7152:	0084      	lsls	r4, r0, #2
{
    7154:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    7158:	eee0 7a68 	vfms.f32	s15, s0, s17
    715c:	eeb0 0a67 	vmov.f32	s0, s15
    7160:	f002 f9c6 	bl	94f0 <__dbToATableLookup_veneer>
    7164:	4808      	ldr	r0, [pc, #32]	; (7188 <tiltParam1+0x48>)
    7166:	4420      	add	r0, r4
    7168:	f002 f8ca 	bl	9300 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    716c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    7170:	eea8 0a28 	vfma.f32	s0, s16, s17
    7174:	f002 f9bc 	bl	94f0 <__dbToATableLookup_veneer>
    7178:	4804      	ldr	r0, [pc, #16]	; (718c <tiltParam1+0x4c>)
}
    717a:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    717e:	4420      	add	r0, r4
}
    7180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    7184:	f002 b8b0 	b.w	92e8 <__tVZFilterHS_setGain_veneer>
    7188:	2001cf10 	.word	0x2001cf10
    718c:	2001cf30 	.word	0x2001cf30
    7190:	f3af 8000 	nop.w
    7194:	f3af 8000 	nop.w
    7198:	f3af 8000 	nop.w
    719c:	f3af 8000 	nop.w

000071a0 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    71a0:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    71a4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 71d8 <tiltParam2+0x38>
    71a8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 71dc <tiltParam2+0x3c>
    71ac:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 71e0 <tiltParam2+0x40>
    71b0:	eee0 0a07 	vfma.f32	s1, s0, s14
    71b4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 71e4 <tiltParam2+0x44>
{
    71b8:	b538      	push	{r3, r4, r5, lr}
    71ba:	4605      	mov	r5, r0
    71bc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    71be:	ee60 0aa7 	vmul.f32	s1, s1, s15
    71c2:	f002 f9ad 	bl	9520 <__LEAF_clip_veneer>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    71c6:	4b08      	ldr	r3, [pc, #32]	; (71e8 <tiltParam2+0x48>)
    71c8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    71cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    71d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setFreq(&bell1[v][string], value);
    71d4:	f002 b8e0 	b.w	9398 <__tVZFilterBell_setFreq_veneer>
    71d8:	429a0000 	.word	0x429a0000
    71dc:	420fb824 	.word	0x420fb824
    71e0:	457ff000 	.word	0x457ff000
    71e4:	00000000 	.word	0x00000000
    71e8:	2001c73c 	.word	0x2001c73c
    71ec:	f3af 8000 	nop.w
    71f0:	f3af 8000 	nop.w
    71f4:	f3af 8000 	nop.w
    71f8:	f3af 8000 	nop.w
    71fc:	f3af 8000 	nop.w

00007200 <tiltParam3>:
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    7200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7204:	4b06      	ldr	r3, [pc, #24]	; (7220 <tiltParam3+0x20>)
    7206:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    720a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    720e:	ee30 0a07 	vadd.f32	s0, s0, s14
    7212:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7216:	ee20 0a27 	vmul.f32	s0, s0, s15
    721a:	f002 b869 	b.w	92f0 <__tVZFilterBell_setBandwidth_veneer>
    721e:	bf00      	nop
    7220:	2001c73c 	.word	0x2001c73c
    7224:	f3af 8000 	nop.w
    7228:	f3af 8000 	nop.w
    722c:	f3af 8000 	nop.w
    7230:	f3af 8000 	nop.w
    7234:	f3af 8000 	nop.w
    7238:	f3af 8000 	nop.w
    723c:	f3af 8000 	nop.w

00007240 <tiltParam4>:
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    7240:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    7244:	ed9f 7a09 	vldr	s14, [pc, #36]	; 726c <tiltParam4+0x2c>
{
    7248:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    724a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    724e:	4605      	mov	r5, r0
    7250:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    7252:	eeb0 0a67 	vmov.f32	s0, s15
    7256:	f002 f94b 	bl	94f0 <__dbToATableLookup_veneer>
    725a:	4b05      	ldr	r3, [pc, #20]	; (7270 <tiltParam4+0x30>)
    725c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7260:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    7268:	f002 b94e 	b.w	9508 <__tVZFilterBell_setGain_veneer>
    726c:	42080000 	.word	0x42080000
    7270:	2001c73c 	.word	0x2001c73c
    7274:	f3af 8000 	nop.w
    7278:	f3af 8000 	nop.w
    727c:	f3af 8000 	nop.w

00007280 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    7280:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    7284:	4b04      	ldr	r3, [pc, #16]	; (7298 <compressorParam1+0x18>)
    7286:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    728a:	ee20 0a27 	vmul.f32	s0, s0, s15
    728e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7292:	ed83 0a03 	vstr	s0, [r3, #12]
}
    7296:	4770      	bx	lr
    7298:	2001c75c 	.word	0x2001c75c
    729c:	f3af 8000 	nop.w

000072a0 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    72a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    72a4:	4b0a      	ldr	r3, [pc, #40]	; (72d0 <compressorParam2+0x30>)
    72a6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    72aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    72ae:	eeb0 7a67 	vmov.f32	s14, s15
    72b2:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    72b6:	eea0 7a26 	vfma.f32	s14, s0, s13
    72ba:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    72be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    72c2:	edd3 6a04 	vldr	s13, [r3, #16]
    72c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    72ca:	ed83 7a07 	vstr	s14, [r3, #28]
}
    72ce:	4770      	bx	lr
    72d0:	2001c75c 	.word	0x2001c75c
    72d4:	f3af 8000 	nop.w
    72d8:	f3af 8000 	nop.w
    72dc:	f3af 8000 	nop.w

000072e0 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    72e0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    72e4:	4b04      	ldr	r3, [pc, #16]	; (72f8 <compressorParam3+0x18>)
    72e6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    72ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    72ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    72f2:	ed83 0a06 	vstr	s0, [r3, #24]
}
    72f6:	4770      	bx	lr
    72f8:	2001c75c 	.word	0x2001c75c
    72fc:	f3af 8000 	nop.w

00007300 <compressorParam4>:
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7300:	4b0b      	ldr	r3, [pc, #44]	; (7330 <compressorParam4+0x30>)
    7302:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    7306:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 7334 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    730a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    730e:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7310:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    7314:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7318:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    731c:	ee20 0a07 	vmul.f32	s0, s0, s14
    7320:	ee87 0a80 	vdiv.f32	s0, s15, s0
    7324:	f002 f8e8 	bl	94f8 <__fasterexpf_veneer>
    7328:	ed84 0a01 	vstr	s0, [r4, #4]
}
    732c:	bd10      	pop	{r4, pc}
    732e:	bf00      	nop
    7330:	2001c75c 	.word	0x2001c75c
    7334:	3a83126f 	.word	0x3a83126f
    7338:	f3af 8000 	nop.w
    733c:	f3af 8000 	nop.w

00007340 <compressorParam5>:
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7340:	4b0b      	ldr	r3, [pc, #44]	; (7370 <compressorParam5+0x30>)
    7342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    7346:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 7374 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    734a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    734e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7350:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    7354:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7358:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    735c:	ee20 0a07 	vmul.f32	s0, s0, s14
    7360:	ee87 0a80 	vdiv.f32	s0, s15, s0
    7364:	f002 f8c8 	bl	94f8 <__fasterexpf_veneer>
    7368:	ed84 0a02 	vstr	s0, [r4, #8]
}
    736c:	bd10      	pop	{r4, pc}
    736e:	bf00      	nop
    7370:	2001c75c 	.word	0x2001c75c
    7374:	3a83126f 	.word	0x3a83126f
    7378:	f3af 8000 	nop.w
    737c:	f3af 8000 	nop.w

00007380 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    7380:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    7384:	4b05      	ldr	r3, [pc, #20]	; (739c <offsetParam2+0x1c>)
    7386:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    738a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    738e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7392:	eee0 7a07 	vfma.f32	s15, s0, s14
    7396:	edc3 7a00 	vstr	s15, [r3]
}
    739a:	4770      	bx	lr
    739c:	2001cdbc 	.word	0x2001cdbc

000073a0 <param2Linear>:
	param2[v][string] = value;
    73a0:	4b03      	ldr	r3, [pc, #12]	; (73b0 <param2Linear+0x10>)
    73a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    73a6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    73aa:	ed83 0a00 	vstr	s0, [r3]
}
    73ae:	4770      	bx	lr
    73b0:	2001cdbc 	.word	0x2001cdbc
    73b4:	f3af 8000 	nop.w
    73b8:	f3af 8000 	nop.w
    73bc:	f3af 8000 	nop.w

000073c0 <param3Linear>:
	param3[v][string] = value;
    73c0:	4b03      	ldr	r3, [pc, #12]	; (73d0 <param3Linear+0x10>)
    73c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    73c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    73ca:	ed83 0a00 	vstr	s0, [r3]
}
    73ce:	4770      	bx	lr
    73d0:	2001cddc 	.word	0x2001cddc
    73d4:	f3af 8000 	nop.w
    73d8:	f3af 8000 	nop.w
    73dc:	f3af 8000 	nop.w

000073e0 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    73e0:	eddf 6a10 	vldr	s13, [pc, #64]	; 7424 <param3Soft+0x44>
    73e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    73e8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 7428 <param3Soft+0x48>
    73ec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    73f0:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 742c <param3Soft+0x4c>
    73f4:	eee0 7a26 	vfma.f32	s15, s0, s13
    73f8:	4a0d      	ldr	r2, [pc, #52]	; (7430 <param3Soft+0x50>)
    73fa:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    73fe:	4b0d      	ldr	r3, [pc, #52]	; (7434 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    7400:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    7404:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7408:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    740c:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    7410:	eee5 6a86 	vfma.f32	s13, s11, s12
    7414:	ee67 7aa6 	vmul.f32	s15, s15, s13
    7418:	eec7 6a27 	vdiv.f32	s13, s14, s15
    741c:	edc3 6a00 	vstr	s13, [r3]
}
    7420:	4770      	bx	lr
    7422:	bf00      	nop
    7424:	3f7d70a4 	.word	0x3f7d70a4
    7428:	3c23d70a 	.word	0x3c23d70a
    742c:	3eaaaaaa 	.word	0x3eaaaaaa
    7430:	2001cddc 	.word	0x2001cddc
    7434:	2001cee4 	.word	0x2001cee4
    7438:	f3af 8000 	nop.w
    743c:	f3af 8000 	nop.w

00007440 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    7440:	eddf 6a17 	vldr	s13, [pc, #92]	; 74a0 <param3Hard+0x60>
    7444:	eddf 7a17 	vldr	s15, [pc, #92]	; 74a4 <param3Hard+0x64>
    7448:	ed9f 7a17 	vldr	s14, [pc, #92]	; 74a8 <param3Hard+0x68>
    744c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    7450:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    7452:	4b16      	ldr	r3, [pc, #88]	; (74ac <param3Hard+0x6c>)
    7454:	0045      	lsls	r5, r0, #1
    7456:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    745a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    745c:	ee27 0a87 	vmul.f32	s0, s15, s14
    7460:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7464:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    7468:	f002 f832 	bl	94d0 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    746c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    7470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7474:	d00a      	beq.n	748c <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    7476:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    747a:	4b0d      	ldr	r3, [pc, #52]	; (74b0 <param3Hard+0x70>)
    747c:	4425      	add	r5, r4
    747e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    7482:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7486:	edc3 7a00 	vstr	s15, [r3]
}
    748a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    748c:	4b08      	ldr	r3, [pc, #32]	; (74b0 <param3Hard+0x70>)
    748e:	4425      	add	r5, r4
    7490:	eddf 7a08 	vldr	s15, [pc, #32]	; 74b4 <param3Hard+0x74>
    7494:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7498:	edc3 7a00 	vstr	s15, [r3]
}
    749c:	bd38      	pop	{r3, r4, r5, pc}
    749e:	bf00      	nop
    74a0:	3f7d70a4 	.word	0x3f7d70a4
    74a4:	3c23d70a 	.word	0x3c23d70a
    74a8:	3fc90fdb 	.word	0x3fc90fdb
    74ac:	2001cddc 	.word	0x2001cddc
    74b0:	2001cec4 	.word	0x2001cec4
    74b4:	4479ffff 	.word	0x4479ffff
    74b8:	f3af 8000 	nop.w
    74bc:	f3af 8000 	nop.w

000074c0 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    74c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 7520 <param3Poly+0x60>
    74c4:	eddf 7a17 	vldr	s15, [pc, #92]	; 7524 <param3Poly+0x64>
    74c8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 7528 <param3Poly+0x68>
    74cc:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    74d0:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    74d2:	4b16      	ldr	r3, [pc, #88]	; (752c <param3Poly+0x6c>)
    74d4:	0045      	lsls	r5, r0, #1
    74d6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    74da:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    74dc:	ee27 0a87 	vmul.f32	s0, s15, s14
    74e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    74e4:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    74e8:	f002 f832 	bl	9550 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    74ec:	eeb5 0a40 	vcmp.f32	s0, #0.0
    74f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    74f4:	d00a      	beq.n	750c <param3Poly+0x4c>
    polyDivider[v][string] = 1.0f/tempDiv;
    74f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    74fa:	4b0d      	ldr	r3, [pc, #52]	; (7530 <param3Poly+0x70>)
    74fc:	4425      	add	r5, r4
    74fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
    7502:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7506:	edc3 7a00 	vstr	s15, [r3]
}
    750a:	bd38      	pop	{r3, r4, r5, pc}
    polyDivider[v][string] = 1.0f/tempDiv;
    750c:	4b08      	ldr	r3, [pc, #32]	; (7530 <param3Poly+0x70>)
    750e:	4425      	add	r5, r4
    7510:	eddf 7a08 	vldr	s15, [pc, #32]	; 7534 <param3Poly+0x74>
    7514:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7518:	edc3 7a00 	vstr	s15, [r3]
}
    751c:	bd38      	pop	{r3, r4, r5, pc}
    751e:	bf00      	nop
    7520:	3f7d70a4 	.word	0x3f7d70a4
    7524:	3c23d70a 	.word	0x3c23d70a
    7528:	3fc90fdb 	.word	0x3fc90fdb
    752c:	2001cddc 	.word	0x2001cddc
    7530:	2001ce54 	.word	0x2001ce54
    7534:	4479ffff 	.word	0x4479ffff
    7538:	f3af 8000 	nop.w
    753c:	f3af 8000 	nop.w

00007540 <param4Linear>:
	param4[v][string] = value;
    7540:	4b03      	ldr	r3, [pc, #12]	; (7550 <param4Linear+0x10>)
    7542:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7546:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    754a:	ed83 0a00 	vstr	s0, [r3]
}
    754e:	4770      	bx	lr
    7550:	2001cdfc 	.word	0x2001cdfc
    7554:	f3af 8000 	nop.w
    7558:	f3af 8000 	nop.w
    755c:	f3af 8000 	nop.w

00007560 <param5Linear>:
	param5[v][string] = value;
    7560:	4b03      	ldr	r3, [pc, #12]	; (7570 <param5Linear+0x10>)
    7562:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7566:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    756a:	ed83 0a00 	vstr	s0, [r3]
}
    756e:	4770      	bx	lr
    7570:	2001ce1c 	.word	0x2001ce1c
    7574:	f3af 8000 	nop.w
    7578:	f3af 8000 	nop.w
    757c:	f3af 8000 	nop.w

00007580 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    7580:	4b03      	ldr	r3, [pc, #12]	; (7590 <param2BC+0x10>)
    7582:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7586:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    758a:	f002 b85d 	b.w	9648 <__tCrusher_setQuality_veneer>
    758e:	bf00      	nop
    7590:	2001c71c 	.word	0x2001c71c
    7594:	f3af 8000 	nop.w
    7598:	f3af 8000 	nop.w
    759c:	f3af 8000 	nop.w

000075a0 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    75a0:	4a07      	ldr	r2, [pc, #28]	; (75c0 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    75a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    75a6:	eddf 7a07 	vldr	s15, [pc, #28]	; 75c4 <param3BC+0x24>
    75aa:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    75ae:	4b06      	ldr	r3, [pc, #24]	; (75c8 <param3BC+0x28>)
    75b0:	eee7 7a00 	vfma.f32	s15, s14, s0
    75b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    75b8:	eeb0 0a67 	vmov.f32	s0, s15
    75bc:	f002 b8bc 	b.w	9738 <__tCrusher_setSamplingRatio_veneer>
    75c0:	20000734 	.word	0x20000734
    75c4:	3c23d70a 	.word	0x3c23d70a
    75c8:	2001c71c 	.word	0x2001c71c
    75cc:	f3af 8000 	nop.w
    75d0:	f3af 8000 	nop.w
    75d4:	f3af 8000 	nop.w
    75d8:	f3af 8000 	nop.w
    75dc:	f3af 8000 	nop.w

000075e0 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    75e0:	4b03      	ldr	r3, [pc, #12]	; (75f0 <param4BC+0x10>)
    75e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    75e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    75ea:	f002 b885 	b.w	96f8 <__tCrusher_setRound_veneer>
    75ee:	bf00      	nop
    75f0:	2001c71c 	.word	0x2001c71c
    75f4:	f3af 8000 	nop.w
    75f8:	f3af 8000 	nop.w
    75fc:	f3af 8000 	nop.w

00007600 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    7600:	4b03      	ldr	r3, [pc, #12]	; (7610 <param5BC+0x10>)
    7602:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7606:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    760a:	f001 bfc9 	b.w	95a0 <__tCrusher_setOperation_veneer>
    760e:	bf00      	nop
    7610:	2001c71c 	.word	0x2001c71c
    7614:	f3af 8000 	nop.w
    7618:	f3af 8000 	nop.w
    761c:	f3af 8000 	nop.w

00007620 <fxMixSet>:
	fxMix[v][string] = value;
    7620:	4b03      	ldr	r3, [pc, #12]	; (7630 <fxMixSet+0x10>)
    7622:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7626:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    762a:	ed83 0a00 	vstr	s0, [r3]
}
    762e:	4770      	bx	lr
    7630:	2001c9d8 	.word	0x2001c9d8
    7634:	f3af 8000 	nop.w
    7638:	f3af 8000 	nop.w
    763c:	f3af 8000 	nop.w

00007640 <fxPostGainSet>:
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    7640:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    7644:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    7648:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    764a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    764e:	4605      	mov	r5, r0
    7650:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    7652:	eeb0 0a67 	vmov.f32	s0, s15
    7656:	f001 ff4b 	bl	94f0 <__dbToATableLookup_veneer>
    765a:	4b04      	ldr	r3, [pc, #16]	; (766c <fxPostGainSet+0x2c>)
    765c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7660:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7664:	ed83 0a00 	vstr	s0, [r3]
}
    7668:	bd38      	pop	{r3, r4, r5, pc}
    766a:	bf00      	nop
    766c:	2001c9f8 	.word	0x2001c9f8
    7670:	f3af 8000 	nop.w
    7674:	f3af 8000 	nop.w
    7678:	f3af 8000 	nop.w
    767c:	f3af 8000 	nop.w

00007680 <wavefolderTick>:
{
    7680:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7682:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float fbSample = wfState[v][string];
    7686:	4d36      	ldr	r5, [pc, #216]	; (7760 <wavefolderTick+0xe0>)
    7688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    768c:	4b35      	ldr	r3, [pc, #212]	; (7764 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    768e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    7692:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7696:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    769a:	4a33      	ldr	r2, [pc, #204]	; (7768 <wavefolderTick+0xe8>)
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    769c:	eddf 3a33 	vldr	s7, [pc, #204]	; 776c <wavefolderTick+0xec>
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    76a0:	0084      	lsls	r4, r0, #2
    76a2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    76a6:	ed9f 3a32 	vldr	s6, [pc, #200]	; 7770 <wavefolderTick+0xf0>
{
    76aa:	ed2d 8b02 	vpush	{d8}
    76ae:	ed95 6a00 	vldr	s12, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    76b2:	edd3 7a00 	vldr	s15, [r3]
    76b6:	fe86 6a66 	vminnm.f32	s12, s12, s13
    76ba:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    76be:	ee26 7a06 	vmul.f32	s14, s12, s12
    float curFB = param3[v][string];
    76c2:	4b2c      	ldr	r3, [pc, #176]	; (7774 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    76c4:	ee30 0a27 	vadd.f32	s0, s0, s15
    76c8:	edd2 5a00 	vldr	s11, [r2]
    float curFB = param3[v][string];
    76cc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    76d0:	4a29      	ldr	r2, [pc, #164]	; (7778 <wavefolderTick+0xf8>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    76d2:	ee67 7a23 	vmul.f32	s15, s14, s7
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    76d6:	ee20 7a25 	vmul.f32	s14, s0, s11
    float fb = curFB * fbSample;
    76da:	ed93 4a00 	vldr	s8, [r3]
    float curFF = param4[v][string];
    76de:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    76e2:	4b26      	ldr	r3, [pc, #152]	; (777c <wavefolderTick+0xfc>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    76e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    76e8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 7780 <wavefolderTick+0x100>
    76ec:	fec7 5a66 	vminnm.f32	s11, s14, s13
    float fb = curFB * fbSample;
    76f0:	ee24 4a03 	vmul.f32	s8, s8, s6
    76f4:	fec5 5aa4 	vmaxnm.f32	s11, s11, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    76f8:	ee65 4aa5 	vmul.f32	s9, s11, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    76fc:	ee67 7a86 	vmul.f32	s15, s15, s12
    float curFF = param4[v][string];
    7700:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7704:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7708:	ee27 0a00 	vmul.f32	s0, s14, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    770c:	ee76 2ac5 	vsub.f32	s5, s13, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    7710:	ee24 6aa3 	vmul.f32	s12, s9, s7
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7714:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    7718:	ee67 7a84 	vmul.f32	s15, s15, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    771c:	ee25 5a03 	vmul.f32	s10, s10, s6
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    7720:	ee76 6ac6 	vsub.f32	s13, s13, s12
    7724:	eee2 7a87 	vfma.f32	s15, s5, s14
    7728:	ee66 6aa5 	vmul.f32	s13, s13, s11
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    772c:	eee6 7a85 	vfma.f32	s15, s13, s10
    7730:	eeb0 8a67 	vmov.f32	s16, s15
    7734:	f001 fecc 	bl	94d0 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    7738:	4b12      	ldr	r3, [pc, #72]	; (7784 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    773a:	4813      	ldr	r0, [pc, #76]	; (7788 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    773c:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    7740:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7742:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    7744:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7748:	eee8 7ac0 	vfms.f32	s15, s17, s0
    774c:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7750:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    7754:	ecbd 8b02 	vpop	{d8}
    7758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    775c:	f001 bd98 	b.w	9290 <__tHighpass_tick_veneer>
    7760:	2001d11c 	.word	0x2001d11c
    7764:	2001cdbc 	.word	0x2001cdbc
    7768:	2001cd9c 	.word	0x2001cd9c
    776c:	3eaaaaaa 	.word	0x3eaaaaaa
    7770:	3fbffff8 	.word	0x3fbffff8
    7774:	2001cddc 	.word	0x2001cddc
    7778:	2001cdfc 	.word	0x2001cdfc
    777c:	2001ce1c 	.word	0x2001ce1c
    7780:	40c90fdb 	.word	0x40c90fdb
    7784:	2001caa8 	.word	0x2001caa8
    7788:	2001c77c 	.word	0x2001c77c
    778c:	f3af 8000 	nop.w
    7790:	f3af 8000 	nop.w
    7794:	f3af 8000 	nop.w
    7798:	f3af 8000 	nop.w
    779c:	f3af 8000 	nop.w

000077a0 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    77a0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    77a4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 77bc <chorusParam1+0x1c>
    77a8:	4b05      	ldr	r3, [pc, #20]	; (77c0 <chorusParam1+0x20>)
    77aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    77ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    77b2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    77b6:	edc3 7a00 	vstr	s15, [r3]
}
    77ba:	4770      	bx	lr
    77bc:	45b4a000 	.word	0x45b4a000
    77c0:	2001cd9c 	.word	0x2001cd9c
    77c4:	f3af 8000 	nop.w
    77c8:	f3af 8000 	nop.w
    77cc:	f3af 8000 	nop.w
    77d0:	f3af 8000 	nop.w
    77d4:	f3af 8000 	nop.w
    77d8:	f3af 8000 	nop.w
    77dc:	f3af 8000 	nop.w

000077e0 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    77e0:	eddf 7a05 	vldr	s15, [pc, #20]	; 77f8 <chorusParam2+0x18>
    77e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    77e8:	4b04      	ldr	r3, [pc, #16]	; (77fc <chorusParam2+0x1c>)
    77ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    77ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    77f2:	ed83 0a00 	vstr	s0, [r3]
}
    77f6:	4770      	bx	lr
    77f8:	3dcccccd 	.word	0x3dcccccd
    77fc:	2001cdbc 	.word	0x2001cdbc

00007800 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    7800:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7820 <chorusParam3+0x20>
    7804:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7808:	eddf 7a06 	vldr	s15, [pc, #24]	; 7824 <chorusParam3+0x24>
    780c:	4b06      	ldr	r3, [pc, #24]	; (7828 <chorusParam3+0x28>)
    780e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7812:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7816:	eeb0 0a67 	vmov.f32	s0, s15
    781a:	f001 bdd5 	b.w	93c8 <__tCycle_setFreq_veneer>
    781e:	bf00      	nop
    7820:	3ecccccd 	.word	0x3ecccccd
    7824:	3c23d70a 	.word	0x3c23d70a
    7828:	2001ccc4 	.word	0x2001ccc4
    782c:	f3af 8000 	nop.w
    7830:	f3af 8000 	nop.w
    7834:	f3af 8000 	nop.w
    7838:	f3af 8000 	nop.w
    783c:	f3af 8000 	nop.w

00007840 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    7840:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7860 <chorusParam4+0x20>
    7844:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7848:	eddf 7a06 	vldr	s15, [pc, #24]	; 7864 <chorusParam4+0x24>
    784c:	4b06      	ldr	r3, [pc, #24]	; (7868 <chorusParam4+0x28>)
    784e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7852:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7856:	eeb0 0a67 	vmov.f32	s0, s15
    785a:	f001 bdb5 	b.w	93c8 <__tCycle_setFreq_veneer>
    785e:	bf00      	nop
    7860:	3ee38e37 	.word	0x3ee38e37
    7864:	3c343958 	.word	0x3c343958
    7868:	2001cce4 	.word	0x2001cce4
    786c:	f3af 8000 	nop.w
    7870:	f3af 8000 	nop.w
    7874:	f3af 8000 	nop.w
    7878:	f3af 8000 	nop.w
    787c:	f3af 8000 	nop.w

00007880 <delayParam1>:
    tTapeDelay_setDelay(&tapeDelay[v][string], value * 30000.0f + 1.0f);
    7880:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7884:	ed9f 7a06 	vldr	s14, [pc, #24]	; 78a0 <delayParam1+0x20>
    7888:	4b06      	ldr	r3, [pc, #24]	; (78a4 <delayParam1+0x24>)
    788a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    788e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7892:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7896:	eeb0 0a67 	vmov.f32	s0, s15
    789a:	f001 bf1d 	b.w	96d8 <__tTapeDelay_setDelay_veneer>
    789e:	bf00      	nop
    78a0:	46ea6000 	.word	0x46ea6000
    78a4:	2001d0b0 	.word	0x2001d0b0
    78a8:	f3af 8000 	nop.w
    78ac:	f3af 8000 	nop.w
    78b0:	f3af 8000 	nop.w
    78b4:	f3af 8000 	nop.w
    78b8:	f3af 8000 	nop.w
    78bc:	f3af 8000 	nop.w

000078c0 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    78c0:	ed9f 1a09 	vldr	s2, [pc, #36]	; 78e8 <delayParam2+0x28>
{
    78c4:	b538      	push	{r3, r4, r5, lr}
    78c6:	4605      	mov	r5, r0
    78c8:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    78ca:	ee60 0a01 	vmul.f32	s1, s0, s2
    78ce:	ed9f 0a07 	vldr	s0, [pc, #28]	; 78ec <delayParam2+0x2c>
    78d2:	f001 fe25 	bl	9520 <__LEAF_clip_veneer>
    78d6:	4b06      	ldr	r3, [pc, #24]	; (78f0 <delayParam2+0x30>)
    78d8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    78dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    78e0:	ed83 0a00 	vstr	s0, [r3]
}
    78e4:	bd38      	pop	{r3, r4, r5, pc}
    78e6:	bf00      	nop
    78e8:	3f8ccccd 	.word	0x3f8ccccd
    78ec:	00000000 	.word	0x00000000
    78f0:	2001cdbc 	.word	0x2001cdbc
    78f4:	f3af 8000 	nop.w
    78f8:	f3af 8000 	nop.w
    78fc:	f3af 8000 	nop.w

00007900 <delayParam3>:
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    7900:	eddf 7a05 	vldr	s15, [pc, #20]	; 7918 <delayParam3+0x18>
    7904:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7908:	4b04      	ldr	r3, [pc, #16]	; (791c <delayParam3+0x1c>)
    790a:	ee20 0a27 	vmul.f32	s0, s0, s15
    790e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7912:	f001 be0d 	b.w	9530 <__tSVF_setFreqFast_veneer>
    7916:	bf00      	nop
    7918:	42fe0000 	.word	0x42fe0000
    791c:	2001c694 	.word	0x2001c694

00007920 <delayParam4>:
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    7920:	eddf 7a05 	vldr	s15, [pc, #20]	; 7938 <delayParam4+0x18>
    7924:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7928:	4b04      	ldr	r3, [pc, #16]	; (793c <delayParam4+0x1c>)
    792a:	ee20 0a27 	vmul.f32	s0, s0, s15
    792e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7932:	f001 bdfd 	b.w	9530 <__tSVF_setFreqFast_veneer>
    7936:	bf00      	nop
    7938:	42fe0000 	.word	0x42fe0000
    793c:	2001c674 	.word	0x2001c674

00007940 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    7940:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    7944:	4b05      	ldr	r3, [pc, #20]	; (795c <delayParam5+0x1c>)
    7946:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    794a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    794e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7952:	eee0 7a07 	vfma.f32	s15, s0, s14
    7956:	edc3 7a00 	vstr	s15, [r3]
}
    795a:	4770      	bx	lr
    795c:	2001ce1c 	.word	0x2001ce1c

00007960 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    7960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7962:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7966:	4f2b      	ldr	r7, [pc, #172]	; (7a14 <chorusTick+0xb4>)
    7968:	4d2b      	ldr	r5, [pc, #172]	; (7a18 <chorusTick+0xb8>)
    796a:	482c      	ldr	r0, [pc, #176]	; (7a1c <chorusTick+0xbc>)
    796c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    7970:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    7974:	4e2a      	ldr	r6, [pc, #168]	; (7a20 <chorusTick+0xc0>)
    7976:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    797a:	008c      	lsls	r4, r1, #2
    797c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
    7980:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7984:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    7988:	edd5 9a00 	vldr	s19, [r5]
{
    798c:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7990:	ed97 9a00 	vldr	s18, [r7]
    7994:	f001 fdbc 	bl	9510 <__tCycle_tick_veneer>
    7998:	ed9f 7a22 	vldr	s14, [pc, #136]	; 7a24 <chorusTick+0xc4>
    799c:	eef0 7a48 	vmov.f32	s15, s16
    79a0:	4630      	mov	r0, r6
    79a2:	ee29 9a07 	vmul.f32	s18, s18, s14
    79a6:	eee9 7a80 	vfma.f32	s15, s19, s0
    79aa:	ee29 0a27 	vmul.f32	s0, s18, s15
    79ae:	f001 fd13 	bl	93d8 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    79b2:	481d      	ldr	r0, [pc, #116]	; (7a28 <chorusTick+0xc8>)
    79b4:	edd5 9a00 	vldr	s19, [r5]
    79b8:	4420      	add	r0, r4
    79ba:	ed97 9a00 	vldr	s18, [r7]
    79be:	f001 fda7 	bl	9510 <__tCycle_tick_veneer>
    79c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    79c6:	eea9 8ac0 	vfms.f32	s16, s19, s0
    79ca:	4d18      	ldr	r5, [pc, #96]	; (7a2c <chorusTick+0xcc>)
    79cc:	ee29 0a27 	vmul.f32	s0, s18, s15
    79d0:	4425      	add	r5, r4
    79d2:	4628      	mov	r0, r5
    79d4:	ee20 0a08 	vmul.f32	s0, s0, s16
    79d8:	f001 fcfe 	bl	93d8 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    79dc:	eeb0 0a68 	vmov.f32	s0, s17
    79e0:	4630      	mov	r0, r6
    79e2:	f001 fe2d 	bl	9640 <__tLinearDelay_tick_veneer>
    79e6:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    79ea:	4628      	mov	r0, r5
    79ec:	eeb0 0a68 	vmov.f32	s0, s17
    79f0:	f001 fe26 	bl	9640 <__tLinearDelay_tick_veneer>
    79f4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    79f8:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    79fc:	480c      	ldr	r0, [pc, #48]	; (7a30 <chorusTick+0xd0>)
    79fe:	4420      	add	r0, r4
    7a00:	eea8 0ae7 	vfms.f32	s0, s17, s15
    7a04:	f001 fc44 	bl	9290 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    7a08:	eeb1 0a40 	vneg.f32	s0, s0
    7a0c:	ecbd 8b04 	vpop	{d8-d9}
    7a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a12:	bf00      	nop
    7a14:	2001cd9c 	.word	0x2001cd9c
    7a18:	2001cdbc 	.word	0x2001cdbc
    7a1c:	2001ccc4 	.word	0x2001ccc4
    7a20:	2001c8c4 	.word	0x2001c8c4
    7a24:	3f34fdf4 	.word	0x3f34fdf4
    7a28:	2001cce4 	.word	0x2001cce4
    7a2c:	2001c8e4 	.word	0x2001c8e4
    7a30:	2001c77c 	.word	0x2001c77c
    7a34:	f3af 8000 	nop.w
    7a38:	f3af 8000 	nop.w
    7a3c:	f3af 8000 	nop.w

00007a40 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7a40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7a44:	4a0e      	ldr	r2, [pc, #56]	; (7a80 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    7a46:	4b0f      	ldr	r3, [pc, #60]	; (7a84 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7a48:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    7a4c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    7a50:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7a52:	edd2 7a00 	vldr	s15, [r2]
    7a56:	008c      	lsls	r4, r1, #2
    7a58:	ee30 0a27 	vadd.f32	s0, s0, s15
    7a5c:	edd3 7a00 	vldr	s15, [r3]
    7a60:	4b09      	ldr	r3, [pc, #36]	; (7a88 <shaperTick+0x48>)
    7a62:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7a66:	ee20 0a27 	vmul.f32	s0, s0, s15
    7a6a:	edd3 0a00 	vldr	s1, [r3]
    7a6e:	f001 fce3 	bl	9438 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7a72:	4806      	ldr	r0, [pc, #24]	; (7a8c <shaperTick+0x4c>)
    7a74:	4420      	add	r0, r4
    return temp;
}
    7a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7a7a:	f001 bc09 	b.w	9290 <__tHighpass_tick_veneer>
    7a7e:	bf00      	nop
    7a80:	2001cdbc 	.word	0x2001cdbc
    7a84:	2001cd9c 	.word	0x2001cd9c
    7a88:	2001cddc 	.word	0x2001cddc
    7a8c:	2001c77c 	.word	0x2001c77c
    7a90:	f3af 8000 	nop.w
    7a94:	f3af 8000 	nop.w
    7a98:	f3af 8000 	nop.w
    7a9c:	f3af 8000 	nop.w

00007aa0 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    7aa0:	4770      	bx	lr
    7aa2:	bf00      	nop
    7aa4:	f3af 8000 	nop.w
    7aa8:	f3af 8000 	nop.w
    7aac:	f3af 8000 	nop.w
    7ab0:	f3af 8000 	nop.w
    7ab4:	f3af 8000 	nop.w
    7ab8:	f3af 8000 	nop.w
    7abc:	f3af 8000 	nop.w

00007ac0 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    7ac0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7ac4:	4b08      	ldr	r3, [pc, #32]	; (7ae8 <tiltFilterTick+0x28>)
{
    7ac6:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    7ac8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7acc:	008c      	lsls	r4, r1, #2
    7ace:	f001 fd0b 	bl	94e8 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    7ad2:	4806      	ldr	r0, [pc, #24]	; (7aec <tiltFilterTick+0x2c>)
    7ad4:	4420      	add	r0, r4
    7ad6:	f001 fd9b 	bl	9610 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    7ada:	4805      	ldr	r0, [pc, #20]	; (7af0 <tiltFilterTick+0x30>)
    7adc:	4420      	add	r0, r4
    return sample;
}
    7ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    7ae2:	f001 bc19 	b.w	9318 <__tVZFilterBell_tick_veneer>
    7ae6:	bf00      	nop
    7ae8:	2001cf10 	.word	0x2001cf10
    7aec:	2001cf30 	.word	0x2001cf30
    7af0:	2001c73c 	.word	0x2001c73c
    7af4:	f3af 8000 	nop.w
    7af8:	f3af 8000 	nop.w
    7afc:	f3af 8000 	nop.w

00007b00 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    7b00:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    7b04:	4a0d      	ldr	r2, [pc, #52]	; (7b3c <tanhTick+0x3c>)
    7b06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    7b0a:	4b0d      	ldr	r3, [pc, #52]	; (7b40 <tanhTick+0x40>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    7b0c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float gain = param1[v][string];
    7b10:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    7b14:	b510      	push	{r4, lr}
    7b16:	edd2 6a00 	vldr	s13, [r2]
    float gain = param1[v][string];
    7b1a:	008c      	lsls	r4, r1, #2
    7b1c:	edd3 7a00 	vldr	s15, [r3]
    float temp = tanhf(sample + (param2[v][string]*gain));
    7b20:	eea6 0a87 	vfma.f32	s0, s13, s14
    7b24:	ee27 0a80 	vmul.f32	s0, s15, s0
    7b28:	f001 fe02 	bl	9730 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7b2c:	4805      	ldr	r0, [pc, #20]	; (7b44 <tanhTick+0x44>)
    7b2e:	4420      	add	r0, r4
    7b30:	f001 fbae 	bl	9290 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    7b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    7b38:	f001 bdfa 	b.w	9730 <__tanhf_veneer>
    7b3c:	2001cdbc 	.word	0x2001cdbc
    7b40:	2001cd9c 	.word	0x2001cd9c
    7b44:	2001c77c 	.word	0x2001c77c
    7b48:	f3af 8000 	nop.w
    7b4c:	f3af 8000 	nop.w
    7b50:	f3af 8000 	nop.w
    7b54:	f3af 8000 	nop.w
    7b58:	f3af 8000 	nop.w
    7b5c:	f3af 8000 	nop.w

00007b60 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    7b60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7b64:	4a10      	ldr	r2, [pc, #64]	; (7ba8 <softClipTick+0x48>)
    sample = sample + param2[v][string];
    7b66:	4b11      	ldr	r3, [pc, #68]	; (7bac <softClipTick+0x4c>)
    7b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    7b6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    7b70:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    7b74:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7b78:	eddf 6a0d 	vldr	s13, [pc, #52]	; 7bb0 <softClipTick+0x50>
    7b7c:	edd2 5a00 	vldr	s11, [r2]
    7b80:	edd3 7a00 	vldr	s15, [r3]
    {
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7b84:	480b      	ldr	r0, [pc, #44]	; (7bb4 <softClipTick+0x54>)
    sample = sample + param2[v][string];
    7b86:	eee5 7a80 	vfma.f32	s15, s11, s0
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7b8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7b8e:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    7b92:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    7b96:	ee27 6ae7 	vnmul.f32	s12, s15, s15
    7b9a:	eea6 7a26 	vfma.f32	s14, s12, s13
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7b9e:	ee27 0a27 	vmul.f32	s0, s14, s15
    7ba2:	f001 bb75 	b.w	9290 <__tHighpass_tick_veneer>
    7ba6:	bf00      	nop
    7ba8:	2001cd9c 	.word	0x2001cd9c
    7bac:	2001cdbc 	.word	0x2001cdbc
    7bb0:	3eaaaaaa 	.word	0x3eaaaaaa
    7bb4:	2001c77c 	.word	0x2001c77c
    7bb8:	f3af 8000 	nop.w
    7bbc:	f3af 8000 	nop.w

00007bc0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    7bc0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7bc4:	4a1a      	ldr	r2, [pc, #104]	; (7c30 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    7bc6:	4b1b      	ldr	r3, [pc, #108]	; (7c34 <hardClipTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    7bc8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    7bcc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    7bd0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    7bd4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    7bd8:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    7bda:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    7bde:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    7be0:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    7be4:	4e14      	ldr	r6, [pc, #80]	; (7c38 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    7be6:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    7bea:	4d14      	ldr	r5, [pc, #80]	; (7c3c <hardClipTick+0x7c>)
    7bec:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    7bf0:	4425      	add	r5, r4
    7bf2:	ed96 7a00 	vldr	s14, [r6]
    7bf6:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    7bfa:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    7bfe:	ee27 0a87 	vmul.f32	s0, s15, s14
    7c02:	f001 fc65 	bl	94d0 <__arm_sin_f32_veneer>
    7c06:	ed96 7a00 	vldr	s14, [r6]
    7c0a:	edd5 7a00 	vldr	s15, [r5]
    7c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
    7c12:	ee27 0a80 	vmul.f32	s0, s15, s0
    7c16:	f001 fc5b 	bl	94d0 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    7c1a:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7c1e:	4808      	ldr	r0, [pc, #32]	; (7c40 <hardClipTick+0x80>)
    7c20:	ee20 0a27 	vmul.f32	s0, s0, s15
    7c24:	4420      	add	r0, r4
    return sample;
}
    7c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7c2a:	f001 bb31 	b.w	9290 <__tHighpass_tick_veneer>
    7c2e:	bf00      	nop
    7c30:	2001cd9c 	.word	0x2001cd9c
    7c34:	2001cdbc 	.word	0x2001cdbc
    7c38:	2001cddc 	.word	0x2001cddc
    7c3c:	2001cec4 	.word	0x2001cec4
    7c40:	2001c77c 	.word	0x2001c77c
    7c44:	f3af 8000 	nop.w
    7c48:	f3af 8000 	nop.w
    7c4c:	f3af 8000 	nop.w
    7c50:	f3af 8000 	nop.w
    7c54:	f3af 8000 	nop.w
    7c58:	f3af 8000 	nop.w
    7c5c:	f3af 8000 	nop.w

00007c60 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    7c60:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7c64:	4a1a      	ldr	r2, [pc, #104]	; (7cd0 <polynomialShaperTick+0x70>)
    sample = sample + param2[v][string];
    7c66:	4b1b      	ldr	r3, [pc, #108]	; (7cd4 <polynomialShaperTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7c68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    7c6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7c70:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    7c74:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    7c78:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    7c7a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    7c7e:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    7c80:	edd3 7a00 	vldr	s15, [r3]
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7c84:	4e14      	ldr	r6, [pc, #80]	; (7cd8 <polynomialShaperTick+0x78>)
    sample = sample + param2[v][string];
    7c86:	eee5 7a80 	vfma.f32	s15, s11, s0
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7c8a:	4d14      	ldr	r5, [pc, #80]	; (7cdc <polynomialShaperTick+0x7c>)
    7c8c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    7c90:	4425      	add	r5, r4
    7c92:	ed96 7a00 	vldr	s14, [r6]
    7c96:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    7c9a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    7c9e:	ee27 0a87 	vmul.f32	s0, s15, s14
    7ca2:	f001 fc55 	bl	9550 <__fastSine_veneer>
    7ca6:	ed96 7a00 	vldr	s14, [r6]
    7caa:	edd5 7a00 	vldr	s15, [r5]
    7cae:	ee67 7a87 	vmul.f32	s15, s15, s14
    7cb2:	ee27 0a80 	vmul.f32	s0, s15, s0
    7cb6:	f001 fc4b 	bl	9550 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    7cba:	edd5 7a00 	vldr	s15, [r5]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7cbe:	4808      	ldr	r0, [pc, #32]	; (7ce0 <polynomialShaperTick+0x80>)
    7cc0:	ee20 0a27 	vmul.f32	s0, s0, s15
    7cc4:	4420      	add	r0, r4
    return sample;
}
    7cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7cca:	f001 bae1 	b.w	9290 <__tHighpass_tick_veneer>
    7cce:	bf00      	nop
    7cd0:	2001cd9c 	.word	0x2001cd9c
    7cd4:	2001cdbc 	.word	0x2001cdbc
    7cd8:	2001cddc 	.word	0x2001cddc
    7cdc:	2001ce54 	.word	0x2001ce54
    7ce0:	2001c77c 	.word	0x2001c77c
    7ce4:	f3af 8000 	nop.w
    7ce8:	f3af 8000 	nop.w
    7cec:	f3af 8000 	nop.w
    7cf0:	f3af 8000 	nop.w
    7cf4:	f3af 8000 	nop.w
    7cf8:	f3af 8000 	nop.w
    7cfc:	f3af 8000 	nop.w

00007d00 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    7d00:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7d04:	4b17      	ldr	r3, [pc, #92]	; (7d64 <satTick+0x64>)
    sample = sample * param1[v][string];
    7d06:	4a18      	ldr	r2, [pc, #96]	; (7d68 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7d08:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    7d0c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7d10:	4816      	ldr	r0, [pc, #88]	; (7d6c <satTick+0x6c>)
    sample = sample * param1[v][string];
    7d12:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7d16:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    7d1a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7d1c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    7d20:	008c      	lsls	r4, r1, #2
    7d22:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7d26:	eeb0 6a47 	vmov.f32	s12, s14
    7d2a:	ee27 7a87 	vmul.f32	s14, s15, s14
    7d2e:	eea7 6a80 	vfma.f32	s12, s15, s0
    7d32:	eea7 7a80 	vfma.f32	s14, s15, s0
    7d36:	eeb0 6ac6 	vabs.f32	s12, s12
    7d3a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7d3e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7d42:	ee36 6b05 	vadd.f64	d6, d6, d5
    7d46:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7d4a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    7d4e:	f001 fa9f 	bl	9290 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    7d52:	4807      	ldr	r0, [pc, #28]	; (7d70 <satTick+0x70>)
    7d54:	4420      	add	r0, r4
    7d56:	f001 fa9b 	bl	9290 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    return temp;
}
    7d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    7d5e:	f001 baa7 	b.w	92b0 <__LEAF_tanh_veneer>
    7d62:	bf00      	nop
    7d64:	2001cdbc 	.word	0x2001cdbc
    7d68:	2001cd9c 	.word	0x2001cd9c
    7d6c:	2001c77c 	.word	0x2001c77c
    7d70:	2001c79c 	.word	0x2001c79c
    7d74:	f3af 8000 	nop.w
    7d78:	f3af 8000 	nop.w
    7d7c:	f3af 8000 	nop.w

00007d80 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    7d80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7d84:	4b05      	ldr	r3, [pc, #20]	; (7d9c <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    7d86:	4806      	ldr	r0, [pc, #24]	; (7da0 <bcTick+0x20>)
    sample = sample * param1[v][string];
    7d88:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    7d8c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    7d90:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    7d94:	ee20 0a27 	vmul.f32	s0, s0, s15
    7d98:	f001 bbde 	b.w	9558 <__tCrusher_tick_veneer>
    7d9c:	2001cd9c 	.word	0x2001cd9c
    7da0:	2001c71c 	.word	0x2001c71c
    7da4:	f3af 8000 	nop.w
    7da8:	f3af 8000 	nop.w
    7dac:	f3af 8000 	nop.w
    7db0:	f3af 8000 	nop.w
    7db4:	f3af 8000 	nop.w
    7db8:	f3af 8000 	nop.w
    7dbc:	f3af 8000 	nop.w

00007dc0 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    7dc0:	4b03      	ldr	r3, [pc, #12]	; (7dd0 <compressorTick+0x10>)
    7dc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7dc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7dca:	f001 bbed 	b.w	95a8 <__tCompressor_tick_veneer>
    7dce:	bf00      	nop
    7dd0:	2001c75c 	.word	0x2001c75c
    7dd4:	f3af 8000 	nop.w
    7dd8:	f3af 8000 	nop.w
    7ddc:	f3af 8000 	nop.w

00007de0 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    7de0:	4b03      	ldr	r3, [pc, #12]	; (7df0 <FXlowpassTick+0x10>)
    7de2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7de6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7dea:	f001 baf9 	b.w	93e0 <__tSVF_tick_veneer>
    7dee:	bf00      	nop
    7df0:	2001c694 	.word	0x2001c694
    7df4:	f3af 8000 	nop.w
    7df8:	f3af 8000 	nop.w
    7dfc:	f3af 8000 	nop.w

00007e00 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    7e00:	4b03      	ldr	r3, [pc, #12]	; (7e10 <FXhighpassTick+0x10>)
    7e02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e0a:	f001 bae9 	b.w	93e0 <__tSVF_tick_veneer>
    7e0e:	bf00      	nop
    7e10:	2001c674 	.word	0x2001c674
    7e14:	f3af 8000 	nop.w
    7e18:	f3af 8000 	nop.w
    7e1c:	f3af 8000 	nop.w

00007e20 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    7e20:	4b03      	ldr	r3, [pc, #12]	; (7e30 <FXbandpassTick+0x10>)
    7e22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e2a:	f001 bad9 	b.w	93e0 <__tSVF_tick_veneer>
    7e2e:	bf00      	nop
    7e30:	2001c634 	.word	0x2001c634
    7e34:	f3af 8000 	nop.w
    7e38:	f3af 8000 	nop.w
    7e3c:	f3af 8000 	nop.w

00007e40 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    7e40:	4b03      	ldr	r3, [pc, #12]	; (7e50 <FXdiodeLowpassTick+0x10>)
    7e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e4a:	f001 bab5 	b.w	93b8 <__tDiodeFilter_tick_veneer>
    7e4e:	bf00      	nop
    7e50:	2001c654 	.word	0x2001c654
    7e54:	f3af 8000 	nop.w
    7e58:	f3af 8000 	nop.w
    7e5c:	f3af 8000 	nop.w

00007e60 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    7e60:	4b03      	ldr	r3, [pc, #12]	; (7e70 <FXVZpeakTick+0x10>)
    7e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e6a:	f001 ba55 	b.w	9318 <__tVZFilterBell_tick_veneer>
    7e6e:	bf00      	nop
    7e70:	2001c614 	.word	0x2001c614
    7e74:	f3af 8000 	nop.w
    7e78:	f3af 8000 	nop.w
    7e7c:	f3af 8000 	nop.w

00007e80 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    7e80:	4b03      	ldr	r3, [pc, #12]	; (7e90 <FXVZlowshelfTick+0x10>)
    7e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e8a:	f001 bb2d 	b.w	94e8 <__tVZFilterLS_tick_veneer>
    7e8e:	bf00      	nop
    7e90:	2001c5f4 	.word	0x2001c5f4
    7e94:	f3af 8000 	nop.w
    7e98:	f3af 8000 	nop.w
    7e9c:	f3af 8000 	nop.w

00007ea0 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    7ea0:	4b03      	ldr	r3, [pc, #12]	; (7eb0 <FXVZhighshelfTick+0x10>)
    7ea2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7ea6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7eaa:	f001 bbb1 	b.w	9610 <__tVZFilterHS_tick_veneer>
    7eae:	bf00      	nop
    7eb0:	2001c5d4 	.word	0x2001c5d4
    7eb4:	f3af 8000 	nop.w
    7eb8:	f3af 8000 	nop.w
    7ebc:	f3af 8000 	nop.w

00007ec0 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    7ec0:	4b03      	ldr	r3, [pc, #12]	; (7ed0 <FXVZbandrejectTick+0x10>)
    7ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7eca:	f001 ba59 	b.w	9380 <__tVZFilter_tickEfficient_veneer>
    7ece:	bf00      	nop
    7ed0:	2001c5b4 	.word	0x2001c5b4
    7ed4:	f3af 8000 	nop.w
    7ed8:	f3af 8000 	nop.w
    7edc:	f3af 8000 	nop.w

00007ee0 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    7ee0:	4b03      	ldr	r3, [pc, #12]	; (7ef0 <FXLadderLowpassTick+0x10>)
    7ee2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7ee6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7eea:	f001 bbcd 	b.w	9688 <__tLadderFilter_tick_veneer>
    7eee:	bf00      	nop
    7ef0:	2001c594 	.word	0x2001c594
    7ef4:	f3af 8000 	nop.w
    7ef8:	f3af 8000 	nop.w
    7efc:	f3af 8000 	nop.w

00007f00 <FXLowpassParam1>:
}
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7f00:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7f20 <FXLowpassParam1+0x20>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    7f04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7f08:	eddf 7a06 	vldr	s15, [pc, #24]	; 7f24 <FXLowpassParam1+0x24>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    7f0c:	4b06      	ldr	r3, [pc, #24]	; (7f28 <FXLowpassParam1+0x28>)
    7f0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7f12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7f16:	eeb0 0a67 	vmov.f32	s0, s15
    7f1a:	f001 bb09 	b.w	9530 <__tSVF_setFreqFast_veneer>
    7f1e:	bf00      	nop
    7f20:	429a0000 	.word	0x429a0000
    7f24:	42280000 	.word	0x42280000
    7f28:	2001c694 	.word	0x2001c694
    7f2c:	f3af 8000 	nop.w
    7f30:	f3af 8000 	nop.w
    7f34:	f3af 8000 	nop.w
    7f38:	f3af 8000 	nop.w
    7f3c:	f3af 8000 	nop.w

00007f40 <FXHighpassParam1>:
}
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7f40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7f60 <FXHighpassParam1+0x20>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    7f44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7f48:	eddf 7a06 	vldr	s15, [pc, #24]	; 7f64 <FXHighpassParam1+0x24>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    7f4c:	4b06      	ldr	r3, [pc, #24]	; (7f68 <FXHighpassParam1+0x28>)
    7f4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7f52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7f56:	eeb0 0a67 	vmov.f32	s0, s15
    7f5a:	f001 bae9 	b.w	9530 <__tSVF_setFreqFast_veneer>
    7f5e:	bf00      	nop
    7f60:	429a0000 	.word	0x429a0000
    7f64:	42280000 	.word	0x42280000
    7f68:	2001c674 	.word	0x2001c674
    7f6c:	f3af 8000 	nop.w
    7f70:	f3af 8000 	nop.w
    7f74:	f3af 8000 	nop.w
    7f78:	f3af 8000 	nop.w
    7f7c:	f3af 8000 	nop.w

00007f80 <FXBandpassParam1>:
}

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7f80:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7fa0 <FXBandpassParam1+0x20>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    7f84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7f88:	eddf 7a06 	vldr	s15, [pc, #24]	; 7fa4 <FXBandpassParam1+0x24>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    7f8c:	4b06      	ldr	r3, [pc, #24]	; (7fa8 <FXBandpassParam1+0x28>)
    7f8e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7f92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7f96:	eeb0 0a67 	vmov.f32	s0, s15
    7f9a:	f001 bac9 	b.w	9530 <__tSVF_setFreqFast_veneer>
    7f9e:	bf00      	nop
    7fa0:	429a0000 	.word	0x429a0000
    7fa4:	42280000 	.word	0x42280000
    7fa8:	2001c634 	.word	0x2001c634
    7fac:	f3af 8000 	nop.w
    7fb0:	f3af 8000 	nop.w
    7fb4:	f3af 8000 	nop.w
    7fb8:	f3af 8000 	nop.w
    7fbc:	f3af 8000 	nop.w

00007fc0 <FXDiodeParam1>:
}

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7fc0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7fe0 <FXDiodeParam1+0x20>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    7fc4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7fc8:	eddf 7a06 	vldr	s15, [pc, #24]	; 7fe4 <FXDiodeParam1+0x24>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    7fcc:	4b06      	ldr	r3, [pc, #24]	; (7fe8 <FXDiodeParam1+0x28>)
    7fce:	eee0 7a07 	vfma.f32	s15, s0, s14
    7fd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7fd6:	eeb0 0a67 	vmov.f32	s0, s15
    7fda:	f001 b951 	b.w	9280 <__tDiodeFilter_setFreqFast_veneer>
    7fde:	bf00      	nop
    7fe0:	429a0000 	.word	0x429a0000
    7fe4:	42280000 	.word	0x42280000
    7fe8:	2001c654 	.word	0x2001c654
    7fec:	f3af 8000 	nop.w
    7ff0:	f3af 8000 	nop.w
    7ff4:	f3af 8000 	nop.w
    7ff8:	f3af 8000 	nop.w
    7ffc:	f3af 8000 	nop.w

00008000 <FXPeakParam1>:
}
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8000:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8020 <FXPeakParam1+0x20>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    8004:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8008:	eddf 7a06 	vldr	s15, [pc, #24]	; 8024 <FXPeakParam1+0x24>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    800c:	4b06      	ldr	r3, [pc, #24]	; (8028 <FXPeakParam1+0x28>)
    800e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8012:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8016:	eeb0 0a67 	vmov.f32	s0, s15
    801a:	f001 b9bd 	b.w	9398 <__tVZFilterBell_setFreq_veneer>
    801e:	bf00      	nop
    8020:	429a0000 	.word	0x429a0000
    8024:	42280000 	.word	0x42280000
    8028:	2001c614 	.word	0x2001c614
    802c:	f3af 8000 	nop.w
    8030:	f3af 8000 	nop.w
    8034:	f3af 8000 	nop.w
    8038:	f3af 8000 	nop.w
    803c:	f3af 8000 	nop.w

00008040 <FXLowShelfParam1>:
}
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8040:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8060 <FXLowShelfParam1+0x20>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    8044:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8048:	eddf 7a06 	vldr	s15, [pc, #24]	; 8064 <FXLowShelfParam1+0x24>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    804c:	4b06      	ldr	r3, [pc, #24]	; (8068 <FXLowShelfParam1+0x28>)
    804e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8052:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8056:	eeb0 0a67 	vmov.f32	s0, s15
    805a:	f001 babd 	b.w	95d8 <__tVZFilterLS_setFreqFast_veneer>
    805e:	bf00      	nop
    8060:	429a0000 	.word	0x429a0000
    8064:	42280000 	.word	0x42280000
    8068:	2001c5f4 	.word	0x2001c5f4
    806c:	f3af 8000 	nop.w
    8070:	f3af 8000 	nop.w
    8074:	f3af 8000 	nop.w
    8078:	f3af 8000 	nop.w
    807c:	f3af 8000 	nop.w

00008080 <FXHighShelfParam1>:
}
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8080:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80a0 <FXHighShelfParam1+0x20>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    8084:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8088:	eddf 7a06 	vldr	s15, [pc, #24]	; 80a4 <FXHighShelfParam1+0x24>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    808c:	4b06      	ldr	r3, [pc, #24]	; (80a8 <FXHighShelfParam1+0x28>)
    808e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8092:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8096:	eeb0 0a67 	vmov.f32	s0, s15
    809a:	f001 b9f9 	b.w	9490 <__tVZFilterHS_setFreqFast_veneer>
    809e:	bf00      	nop
    80a0:	429a0000 	.word	0x429a0000
    80a4:	42280000 	.word	0x42280000
    80a8:	2001c5d4 	.word	0x2001c5d4
    80ac:	f3af 8000 	nop.w
    80b0:	f3af 8000 	nop.w
    80b4:	f3af 8000 	nop.w
    80b8:	f3af 8000 	nop.w
    80bc:	f3af 8000 	nop.w

000080c0 <FXNotchParam1>:
}
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    80c0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80e0 <FXNotchParam1+0x20>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    80c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    80c8:	eddf 7a06 	vldr	s15, [pc, #24]	; 80e4 <FXNotchParam1+0x24>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    80cc:	4b06      	ldr	r3, [pc, #24]	; (80e8 <FXNotchParam1+0x28>)
    80ce:	eee0 7a07 	vfma.f32	s15, s0, s14
    80d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    80d6:	eeb0 0a67 	vmov.f32	s0, s15
    80da:	f001 b961 	b.w	93a0 <__tVZFilter_setFreqFast_veneer>
    80de:	bf00      	nop
    80e0:	429a0000 	.word	0x429a0000
    80e4:	42280000 	.word	0x42280000
    80e8:	2001c5b4 	.word	0x2001c5b4
    80ec:	f3af 8000 	nop.w
    80f0:	f3af 8000 	nop.w
    80f4:	f3af 8000 	nop.w
    80f8:	f3af 8000 	nop.w
    80fc:	f3af 8000 	nop.w

00008100 <FXLadderParam1>:
}
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8100:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8120 <FXLadderParam1+0x20>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    8104:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8108:	eddf 7a06 	vldr	s15, [pc, #24]	; 8124 <FXLadderParam1+0x24>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    810c:	4b06      	ldr	r3, [pc, #24]	; (8128 <FXLadderParam1+0x28>)
    810e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8112:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8116:	eeb0 0a67 	vmov.f32	s0, s15
    811a:	f001 b8f9 	b.w	9310 <__tLadderFilter_setFreqFast_veneer>
    811e:	bf00      	nop
    8120:	429a0000 	.word	0x429a0000
    8124:	42280000 	.word	0x42280000
    8128:	2001c594 	.word	0x2001c594
    812c:	f3af 8000 	nop.w
    8130:	f3af 8000 	nop.w
    8134:	f3af 8000 	nop.w
    8138:	f3af 8000 	nop.w
    813c:	f3af 8000 	nop.w

00008140 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8140:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8144:	ed9f 7a09 	vldr	s14, [pc, #36]	; 816c <FXPeakParam2+0x2c>
{
    8148:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    814a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    814e:	4605      	mov	r5, r0
    8150:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8152:	eeb0 0a67 	vmov.f32	s0, s15
    8156:	f001 f9cb 	bl	94f0 <__dbToATableLookup_veneer>
    815a:	4b05      	ldr	r3, [pc, #20]	; (8170 <FXPeakParam2+0x30>)
    815c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8160:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8168:	f001 b9ce 	b.w	9508 <__tVZFilterBell_setGain_veneer>
    816c:	42480000 	.word	0x42480000
    8170:	2001c614 	.word	0x2001c614
    8174:	f3af 8000 	nop.w
    8178:	f3af 8000 	nop.w
    817c:	f3af 8000 	nop.w

00008180 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8180:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8184:	ed9f 7a09 	vldr	s14, [pc, #36]	; 81ac <FXLowShelfParam2+0x2c>
{
    8188:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    818a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    818e:	4605      	mov	r5, r0
    8190:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8192:	eeb0 0a67 	vmov.f32	s0, s15
    8196:	f001 f9ab 	bl	94f0 <__dbToATableLookup_veneer>
    819a:	4b05      	ldr	r3, [pc, #20]	; (81b0 <FXLowShelfParam2+0x30>)
    819c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    81a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    81a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    81a8:	f001 b8aa 	b.w	9300 <__tVZFilterLS_setGain_veneer>
    81ac:	42480000 	.word	0x42480000
    81b0:	2001c5f4 	.word	0x2001c5f4
    81b4:	f3af 8000 	nop.w
    81b8:	f3af 8000 	nop.w
    81bc:	f3af 8000 	nop.w

000081c0 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    81c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    81c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 81ec <FXHighShelfParam2+0x2c>
{
    81c8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    81ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    81ce:	4605      	mov	r5, r0
    81d0:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    81d2:	eeb0 0a67 	vmov.f32	s0, s15
    81d6:	f001 f98b 	bl	94f0 <__dbToATableLookup_veneer>
    81da:	4b05      	ldr	r3, [pc, #20]	; (81f0 <FXHighShelfParam2+0x30>)
    81dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    81e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    81e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    81e8:	f001 b87e 	b.w	92e8 <__tVZFilterHS_setGain_veneer>
    81ec:	42480000 	.word	0x42480000
    81f0:	2001c5d4 	.word	0x2001c5d4
    81f4:	f3af 8000 	nop.w
    81f8:	f3af 8000 	nop.w
    81fc:	f3af 8000 	nop.w

00008200 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8200:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8204:	ed9f 7a09 	vldr	s14, [pc, #36]	; 822c <FXNotchParam2+0x2c>
{
    8208:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    820a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    820e:	4605      	mov	r5, r0
    8210:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8212:	eeb0 0a67 	vmov.f32	s0, s15
    8216:	f001 f96b 	bl	94f0 <__dbToATableLookup_veneer>
    821a:	4b05      	ldr	r3, [pc, #20]	; (8230 <FXNotchParam2+0x30>)
    821c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8220:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
    8224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8228:	f001 ba8a 	b.w	9740 <__tVZFilter_setGain_veneer>
    822c:	42480000 	.word	0x42480000
    8230:	2001c5b4 	.word	0x2001c5b4
    8234:	f3af 8000 	nop.w
    8238:	f3af 8000 	nop.w
    823c:	f3af 8000 	nop.w

00008240 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    8240:	4b03      	ldr	r3, [pc, #12]	; (8250 <FXLowpassParam3+0x10>)
    8242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    824a:	f001 ba25 	b.w	9698 <__tSVF_setQ_veneer>
    824e:	bf00      	nop
    8250:	2001c694 	.word	0x2001c694
    8254:	f3af 8000 	nop.w
    8258:	f3af 8000 	nop.w
    825c:	f3af 8000 	nop.w

00008260 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    8260:	4b03      	ldr	r3, [pc, #12]	; (8270 <FXHighpassParam3+0x10>)
    8262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    826a:	f001 ba15 	b.w	9698 <__tSVF_setQ_veneer>
    826e:	bf00      	nop
    8270:	2001c674 	.word	0x2001c674
    8274:	f3af 8000 	nop.w
    8278:	f3af 8000 	nop.w
    827c:	f3af 8000 	nop.w

00008280 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    8280:	4b03      	ldr	r3, [pc, #12]	; (8290 <FXBandpassParam3+0x10>)
    8282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    828a:	f001 ba05 	b.w	9698 <__tSVF_setQ_veneer>
    828e:	bf00      	nop
    8290:	2001c634 	.word	0x2001c634
    8294:	f3af 8000 	nop.w
    8298:	f3af 8000 	nop.w
    829c:	f3af 8000 	nop.w

000082a0 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    82a0:	4b03      	ldr	r3, [pc, #12]	; (82b0 <FXDiodeParam3+0x10>)
    82a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    82a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    82aa:	f001 b935 	b.w	9518 <__tDiodeFilter_setQ_veneer>
    82ae:	bf00      	nop
    82b0:	2001c654 	.word	0x2001c654
    82b4:	f3af 8000 	nop.w
    82b8:	f3af 8000 	nop.w
    82bc:	f3af 8000 	nop.w

000082c0 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    82c0:	4b03      	ldr	r3, [pc, #12]	; (82d0 <FXPeakParam3+0x10>)
    82c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    82c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    82ca:	f001 b811 	b.w	92f0 <__tVZFilterBell_setBandwidth_veneer>
    82ce:	bf00      	nop
    82d0:	2001c614 	.word	0x2001c614
    82d4:	f3af 8000 	nop.w
    82d8:	f3af 8000 	nop.w
    82dc:	f3af 8000 	nop.w

000082e0 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    82e0:	4b03      	ldr	r3, [pc, #12]	; (82f0 <FXLowShelfParam3+0x10>)
    82e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    82e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    82ea:	f000 bfe9 	b.w	92c0 <__tVZFilterLS_setResonance_veneer>
    82ee:	bf00      	nop
    82f0:	2001c5f4 	.word	0x2001c5f4
    82f4:	f3af 8000 	nop.w
    82f8:	f3af 8000 	nop.w
    82fc:	f3af 8000 	nop.w

00008300 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    8300:	4b03      	ldr	r3, [pc, #12]	; (8310 <FXHighShelfParam3+0x10>)
    8302:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    830a:	f000 bfc9 	b.w	92a0 <__tVZFilterHS_setResonance_veneer>
    830e:	bf00      	nop
    8310:	2001c5d4 	.word	0x2001c5d4
    8314:	f3af 8000 	nop.w
    8318:	f3af 8000 	nop.w
    831c:	f3af 8000 	nop.w

00008320 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    8320:	4b03      	ldr	r3, [pc, #12]	; (8330 <FXNotchParam3+0x10>)
    8322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    832a:	f001 b805 	b.w	9338 <__tVZFilter_setResonance_veneer>
    832e:	bf00      	nop
    8330:	2001c5b4 	.word	0x2001c5b4
    8334:	f3af 8000 	nop.w
    8338:	f3af 8000 	nop.w
    833c:	f3af 8000 	nop.w

00008340 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    8340:	4b03      	ldr	r3, [pc, #12]	; (8350 <FXLadderParam3+0x10>)
    8342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    834a:	f000 bfc1 	b.w	92d0 <__tLadderFilter_setQ_veneer>
    834e:	bf00      	nop
    8350:	2001c594 	.word	0x2001c594
    8354:	f3af 8000 	nop.w
    8358:	f3af 8000 	nop.w
    835c:	f3af 8000 	nop.w

00008360 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    8360:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    8362:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    8366:	008c      	lsls	r4, r1, #2
{
    8368:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    836c:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    8370:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    8374:	eee0 7a68 	vfms.f32	s15, s0, s17
    8378:	eeb0 0a67 	vmov.f32	s0, s15
    837c:	f001 f8b8 	bl	94f0 <__dbToATableLookup_veneer>
    8380:	4808      	ldr	r0, [pc, #32]	; (83a4 <noiseSetTilt+0x44>)
    8382:	4420      	add	r0, r4
    8384:	f000 ffbc 	bl	9300 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    8388:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    838c:	eea8 0a28 	vfma.f32	s0, s16, s17
    8390:	f001 f8ae 	bl	94f0 <__dbToATableLookup_veneer>
    8394:	4804      	ldr	r0, [pc, #16]	; (83a8 <noiseSetTilt+0x48>)
}
    8396:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    839a:	4420      	add	r0, r4
}
    839c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    83a0:	f000 bfa2 	b.w	92e8 <__tVZFilterHS_setGain_veneer>
    83a4:	2001cd20 	.word	0x2001cd20
    83a8:	2001cd28 	.word	0x2001cd28
    83ac:	f3af 8000 	nop.w
    83b0:	f3af 8000 	nop.w
    83b4:	f3af 8000 	nop.w
    83b8:	f3af 8000 	nop.w
    83bc:	f3af 8000 	nop.w

000083c0 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    83c0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    83c4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 83e8 <noiseSetGain+0x28>
{
    83c8:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    83ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    83ce:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    83d0:	eeb0 0a67 	vmov.f32	s0, s15
    83d4:	f001 f88c 	bl	94f0 <__dbToATableLookup_veneer>
    83d8:	4804      	ldr	r0, [pc, #16]	; (83ec <noiseSetGain+0x2c>)
    83da:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    83de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    83e2:	f001 b891 	b.w	9508 <__tVZFilterBell_setGain_veneer>
    83e6:	bf00      	nop
    83e8:	42080000 	.word	0x42080000
    83ec:	2001cd04 	.word	0x2001cd04
    83f0:	f3af 8000 	nop.w
    83f4:	f3af 8000 	nop.w
    83f8:	f3af 8000 	nop.w
    83fc:	f3af 8000 	nop.w

00008400 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8400:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8428 <noiseSetFreq+0x28>
    8404:	eddf 7a09 	vldr	s15, [pc, #36]	; 842c <noiseSetFreq+0x2c>
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    8408:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    840c:	b510      	push	{r4, lr}
    840e:	460c      	mov	r4, r1
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    8410:	eeb0 0a67 	vmov.f32	s0, s15
    8414:	f000 ff48 	bl	92a8 <__faster_mtof_veneer>
    8418:	4805      	ldr	r0, [pc, #20]	; (8430 <noiseSetFreq+0x30>)
    841a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    841e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    8422:	f000 bfb9 	b.w	9398 <__tVZFilterBell_setFreq_veneer>
    8426:	bf00      	nop
    8428:	429a0000 	.word	0x429a0000
    842c:	42280000 	.word	0x42280000
    8430:	2001cd04 	.word	0x2001cd04
    8434:	f3af 8000 	nop.w
    8438:	f3af 8000 	nop.w
    843c:	f3af 8000 	nop.w

00008440 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    8440:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    8442:	4b25      	ldr	r3, [pc, #148]	; (84d8 <noise_tick+0x98>)
{
    8444:	4604      	mov	r4, r0
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    8446:	4d25      	ldr	r5, [pc, #148]	; (84dc <noise_tick+0x9c>)
	float enabled = params[Noise].realVal[string];
    8448:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = random_values[randomValPointer++];
    844c:	4924      	ldr	r1, [pc, #144]	; (84e0 <noise_tick+0xa0>)
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    844e:	4825      	ldr	r0, [pc, #148]	; (84e4 <noise_tick+0xa4>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    8450:	4613      	mov	r3, r2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    8452:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    8456:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    845a:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    845e:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = random_values[randomValPointer++];
    8462:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    8464:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = random_values[randomValPointer++];
    8468:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    846c:	3201      	adds	r2, #1
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    846e:	ed91 0a00 	vldr	s0, [r1]
	float sample = random_values[randomValPointer++];
    8472:	702a      	strb	r2, [r5, #0]
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    8474:	f001 f838 	bl	94e8 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    8478:	00a5      	lsls	r5, r4, #2
    847a:	481b      	ldr	r0, [pc, #108]	; (84e8 <noise_tick+0xa8>)
    847c:	4428      	add	r0, r5
    847e:	f001 f8c7 	bl	9610 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    8482:	481a      	ldr	r0, [pc, #104]	; (84ec <noise_tick+0xac>)
    8484:	4428      	add	r0, r5
    8486:	f000 ff47 	bl	9318 <__tVZFilterBell_tick_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    848a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    848e:	ed9f 6a18 	vldr	s12, [pc, #96]	; 84f0 <noise_tick+0xb0>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    8492:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    8496:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    849a:	4b16      	ldr	r3, [pc, #88]	; (84f4 <noise_tick+0xb4>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    849c:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    84a0:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    84a4:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    84a8:	4a13      	ldr	r2, [pc, #76]	; (84f8 <noise_tick+0xb8>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    84aa:	441d      	add	r5, r3
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    84ac:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    84b0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    84b4:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    84b8:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    84bc:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    84c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    84c4:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    84c8:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    84cc:	edc2 7a06 	vstr	s15, [r2, #24]
}
    84d0:	ecbd 8b04 	vpop	{d8-d9}
    84d4:	bd38      	pop	{r3, r4, r5, pc}
    84d6:	bf00      	nop
    84d8:	20018a64 	.word	0x20018a64
    84dc:	2001ce90 	.word	0x2001ce90
    84e0:	20019ba8 	.word	0x20019ba8
    84e4:	2001cd20 	.word	0x2001cd20
    84e8:	2001cd28 	.word	0x2001cd28
    84ec:	2001cd04 	.word	0x2001cd04
    84f0:	00000000 	.word	0x00000000
    84f4:	2001cd10 	.word	0x2001cd10
    84f8:	2001cf80 	.word	0x2001cf80
    84fc:	f3af 8000 	nop.w

00008500 <audioTickSynth>:
{
    8500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountTick = DWT->CYCCNT;
    8504:	4cbe      	ldr	r4, [pc, #760]	; (8800 <audioTickSynth+0x300>)
    8506:	4dbf      	ldr	r5, [pc, #764]	; (8804 <audioTickSynth+0x304>)
    8508:	f8df a37c 	ldr.w	sl, [pc, #892]	; 8888 <audioTickSynth+0x388>
    850c:	f8df b37c 	ldr.w	fp, [pc, #892]	; 888c <audioTickSynth+0x38c>
    8510:	f10a 0830 	add.w	r8, sl, #48	; 0x30
    8514:	f8df 9378 	ldr.w	r9, [pc, #888]	; 8890 <audioTickSynth+0x390>
{
    8518:	ed2d 8b06 	vpush	{d8-d10}
    851c:	b091      	sub	sp, #68	; 0x44
    851e:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    8520:	6863      	ldr	r3, [r4, #4]
    8522:	60bb      	str	r3, [r7, #8]
	uint32_t tempCountMap = DWT->CYCCNT;
    8524:	6866      	ldr	r6, [r4, #4]
	tickMappings();
    8526:	f7fe fb5b 	bl	6be0 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    852a:	6863      	ldr	r3, [r4, #4]
    852c:	4ab6      	ldr	r2, [pc, #728]	; (8808 <audioTickSynth+0x308>)
    852e:	1b9b      	subs	r3, r3, r6
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8530:	48b6      	ldr	r0, [pc, #728]	; (880c <audioTickSynth+0x30c>)
    8532:	462e      	mov	r6, r5
	timeMap = DWT->CYCCNT - tempCountMap;
    8534:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    8536:	6863      	ldr	r3, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8538:	462c      	mov	r4, r5
	uint32_t tempSmoothing = DWT->CYCCNT;
    853a:	62fb      	str	r3, [r7, #44]	; 0x2c
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    853c:	f001 f828 	bl	9590 <__tExpSmooth_tick_veneer>
    8540:	eef0 8a40 	vmov.f32	s17, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    8544:	4658      	mov	r0, fp
    8546:	f001 f823 	bl	9590 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    854a:	f899 3000 	ldrb.w	r3, [r9]
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    854e:	ecaa 0a01 	vstmia	sl!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    8552:	b12b      	cbz	r3, 8560 <audioTickSynth+0x60>
    8554:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    8556:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
    855a:	d001      	beq.n	8560 <audioTickSynth+0x60>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    855c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
    8560:	45c2      	cmp	sl, r8
    8562:	f10b 0b04 	add.w	fp, fp, #4
    8566:	f104 0408 	add.w	r4, r4, #8
    856a:	d1eb      	bne.n	8544 <audioTickSynth+0x44>
    856c:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8894 <audioTickSynth+0x394>
    8570:	f8df a324 	ldr.w	sl, [pc, #804]	; 8898 <audioTickSynth+0x398>
    8574:	f108 0428 	add.w	r4, r8, #40	; 0x28
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    8578:	4650      	mov	r0, sl
    857a:	f001 f809 	bl	9590 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    857e:	f899 3000 	ldrb.w	r3, [r9]
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    8582:	eca8 0a01 	vstmia	r8!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    8586:	b12b      	cbz	r3, 8594 <audioTickSynth+0x94>
    8588:	2b01      	cmp	r3, #1
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    858a:	ed85 0a38 	vstr	s0, [r5, #224]	; 0xe0
		for (int v = 0; v < numStringsThisBoard; v++)
    858e:	d001      	beq.n	8594 <audioTickSynth+0x94>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    8590:	ed85 0a39 	vstr	s0, [r5, #228]	; 0xe4
	for (int i = 0; i < 10; i++)
    8594:	45a0      	cmp	r8, r4
    8596:	f10a 0a04 	add.w	sl, sl, #4
    859a:	f105 0508 	add.w	r5, r5, #8
    859e:	d1eb      	bne.n	8578 <audioTickSynth+0x78>
	for (int v = 0; v < numStringsThisBoard; v++)
    85a0:	2b00      	cmp	r3, #0
    85a2:	f000 828d 	beq.w	8ac0 <audioTickSynth+0x5c0>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    85a6:	4a9a      	ldr	r2, [pc, #616]	; (8810 <audioTickSynth+0x310>)
	for (int v = 0; v < numStringsThisBoard; v++)
    85a8:	2b01      	cmp	r3, #1
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    85aa:	6812      	ldr	r2, [r2, #0]
    85ac:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
	for (int v = 0; v < numStringsThisBoard; v++)
    85b0:	d001      	beq.n	85b6 <audioTickSynth+0xb6>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    85b2:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	float note[numStringsThisBoard];
    85b6:	009b      	lsls	r3, r3, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    85b8:	f8df b244 	ldr.w	fp, [pc, #580]	; 8800 <audioTickSynth+0x300>
    85bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
	float note[numStringsThisBoard];
    85be:	3307      	adds	r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    85c0:	f8db 2004 	ldr.w	r2, [fp, #4]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    85c4:	ed9f 9a93 	vldr	s18, [pc, #588]	; 8814 <audioTickSynth+0x314>
	float note[numStringsThisBoard];
    85c8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    85cc:	1a52      	subs	r2, r2, r1
		float sample = 0.0f;
    85ce:	eef0 9a49 	vmov.f32	s19, s18
    85d2:	ed9f aa91 	vldr	s20, [pc, #580]	; 8818 <audioTickSynth+0x318>
	float note[numStringsThisBoard];
    85d6:	ebad 0d03 	sub.w	sp, sp, r3
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    85da:	4b90      	ldr	r3, [pc, #576]	; (881c <audioTickSynth+0x31c>)
    85dc:	601a      	str	r2, [r3, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    85de:	4b90      	ldr	r3, [pc, #576]	; (8820 <audioTickSynth+0x320>)
    85e0:	4a90      	ldr	r2, [pc, #576]	; (8824 <audioTickSynth+0x324>)
    85e2:	62bb      	str	r3, [r7, #40]	; 0x28
    85e4:	f8db 3004 	ldr.w	r3, [fp, #4]
    85e8:	623a      	str	r2, [r7, #32]
    85ea:	4a8f      	ldr	r2, [pc, #572]	; (8828 <audioTickSynth+0x328>)
    85ec:	607b      	str	r3, [r7, #4]
    85ee:	2300      	movs	r3, #0
    85f0:	61ba      	str	r2, [r7, #24]
    85f2:	4a8e      	ldr	r2, [pc, #568]	; (882c <audioTickSynth+0x32c>)
    85f4:	469a      	mov	sl, r3
    85f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    85f8:	627a      	str	r2, [r7, #36]	; 0x24
    85fa:	4a8d      	ldr	r2, [pc, #564]	; (8830 <audioTickSynth+0x330>)
    85fc:	f8c7 d014 	str.w	sp, [r7, #20]
    8600:	61fa      	str	r2, [r7, #28]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8602:	4b8c      	ldr	r3, [pc, #560]	; (8834 <audioTickSynth+0x334>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8606:	edd3 7a00 	vldr	s15, [r3]
    860a:	4b8b      	ldr	r3, [pc, #556]	; (8838 <audioTickSynth+0x338>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    860c:	4a8b      	ldr	r2, [pc, #556]	; (883c <audioTickSynth+0x33c>)
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    860e:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8612:	4b8b      	ldr	r3, [pc, #556]	; (8840 <audioTickSynth+0x340>)
    8614:	440a      	add	r2, r1
		float sample = 0.0f;
    8616:	edc7 9a0d 	vstr	s19, [r7, #52]	; 0x34
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    861a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    861e:	edd2 6a00 	vldr	s13, [r2]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    8622:	f8db 2004 	ldr.w	r2, [fp, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8626:	ed93 8a00 	vldr	s16, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    862a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    862c:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8630:	697b      	ldr	r3, [r7, #20]
    8632:	460d      	mov	r5, r1
    8634:	ee78 7a67 	vsub.f32	s15, s16, s15
    8638:	fe88 8a4a 	vminnm.f32	s16, s16, s20
    863c:	fe88 8a29 	vmaxnm.f32	s16, s16, s19
    8640:	eca3 8a01 	vstmia	r3!, {s16}
    8644:	617b      	str	r3, [r7, #20]
    8646:	ee67 7a87 	vmul.f32	s15, s15, s14
    864a:	edc1 7a00 	vstr	s15, [r1]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    864e:	f8db 3004 	ldr.w	r3, [fp, #4]
    8652:	1a9b      	subs	r3, r3, r2
    8654:	4a7b      	ldr	r2, [pc, #492]	; (8844 <audioTickSynth+0x344>)
    8656:	6013      	str	r3, [r2, #0]
    8658:	1d0a      	adds	r2, r1, #4
		if (envOn[v])
    865a:	4b7b      	ldr	r3, [pc, #492]	; (8848 <audioTickSynth+0x348>)
    865c:	62ba      	str	r2, [r7, #40]	; 0x28
    865e:	781b      	ldrb	r3, [r3, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    8660:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (envOn[v])
    8664:	2b00      	cmp	r3, #0
    8666:	f040 8206 	bne.w	8a76 <audioTickSynth+0x576>
    866a:	4b77      	ldr	r3, [pc, #476]	; (8848 <audioTickSynth+0x348>)
    866c:	785b      	ldrb	r3, [r3, #1]
    866e:	2b00      	cmp	r3, #0
    8670:	f040 81f8 	bne.w	8a64 <audioTickSynth+0x564>
    8674:	4b74      	ldr	r3, [pc, #464]	; (8848 <audioTickSynth+0x348>)
    8676:	789b      	ldrb	r3, [r3, #2]
    8678:	2b00      	cmp	r3, #0
    867a:	f040 81ea 	bne.w	8a52 <audioTickSynth+0x552>
    867e:	4b72      	ldr	r3, [pc, #456]	; (8848 <audioTickSynth+0x348>)
    8680:	78db      	ldrb	r3, [r3, #3]
    8682:	2b00      	cmp	r3, #0
    8684:	f040 81dc 	bne.w	8a40 <audioTickSynth+0x540>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    8688:	f8db 3004 	ldr.w	r3, [fp, #4]
    868c:	3d88      	subs	r5, #136	; 0x88
    868e:	4a6f      	ldr	r2, [pc, #444]	; (884c <audioTickSynth+0x34c>)
    8690:	1b1b      	subs	r3, r3, r4
    8692:	f8df 8208 	ldr.w	r8, [pc, #520]	; 889c <audioTickSynth+0x39c>
		uint32_t tempCountLFO = DWT->CYCCNT;
    8696:	4c6e      	ldr	r4, [pc, #440]	; (8850 <audioTickSynth+0x350>)
		timeEnv = DWT->CYCCNT - tempCountEnv;
    8698:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    869a:	f8db 6004 	ldr.w	r6, [fp, #4]
			float sample = 0.0f;
    869e:	4b6c      	ldr	r3, [pc, #432]	; (8850 <audioTickSynth+0x350>)
			lfoShapeTick[i](&sample,i, string);
    86a0:	4652      	mov	r2, sl
    86a2:	f107 0038 	add.w	r0, r7, #56	; 0x38
    86a6:	1ae1      	subs	r1, r4, r3
		if (lfoOn[i])
    86a8:	f814 3b01 	ldrb.w	r3, [r4], #1
    86ac:	b13b      	cbz	r3, 86be <audioTickSynth+0x1be>
			lfoShapeTick[i](&sample,i, string);
    86ae:	f8d8 3000 	ldr.w	r3, [r8]
			float sample = 0.0f;
    86b2:	edc7 9a0e 	vstr	s19, [r7, #56]	; 0x38
			lfoShapeTick[i](&sample,i, string);
    86b6:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    86b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    86ba:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    86be:	4b65      	ldr	r3, [pc, #404]	; (8854 <audioTickSynth+0x354>)
    86c0:	f108 0804 	add.w	r8, r8, #4
    86c4:	3508      	adds	r5, #8
    86c6:	429c      	cmp	r4, r3
    86c8:	d1e9      	bne.n	869e <audioTickSynth+0x19e>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    86ca:	f8db 3004 	ldr.w	r3, [fp, #4]
		oscillator_tick(note[v], v);
    86ce:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    86d2:	4a61      	ldr	r2, [pc, #388]	; (8858 <audioTickSynth+0x358>)
		oscillator_tick(note[v], v);
    86d4:	4650      	mov	r0, sl
		timeLFO = DWT->CYCCNT - tempCountLFO;
    86d6:	1b9b      	subs	r3, r3, r6
    86d8:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    86da:	f8db 4004 	ldr.w	r4, [fp, #4]
		oscillator_tick(note[v], v);
    86de:	f7fd fa2f 	bl	5b40 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    86e2:	f8db 3004 	ldr.w	r3, [fp, #4]
    86e6:	4a5d      	ldr	r2, [pc, #372]	; (885c <audioTickSynth+0x35c>)
    86e8:	1b1b      	subs	r3, r3, r4
    86ea:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    86ec:	4b5c      	ldr	r3, [pc, #368]	; (8860 <audioTickSynth+0x360>)
		uint32_t tempCountNoise = DWT->CYCCNT;
    86ee:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (noiseOn)
    86f2:	781b      	ldrb	r3, [r3, #0]
    86f4:	2b00      	cmp	r3, #0
    86f6:	f040 819f 	bne.w	8a38 <audioTickSynth+0x538>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    86fa:	f8db 3004 	ldr.w	r3, [fp, #4]
    86fe:	4a59      	ldr	r2, [pc, #356]	; (8864 <audioTickSynth+0x364>)
    8700:	1b1b      	subs	r3, r3, r4
    8702:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    8704:	4b58      	ldr	r3, [pc, #352]	; (8868 <audioTickSynth+0x368>)
    8706:	781b      	ldrb	r3, [r3, #0]
    8708:	2b00      	cmp	r3, #0
    870a:	f000 81c9 	beq.w	8aa0 <audioTickSynth+0x5a0>
			filterSamps[0] += oscOuts[0][i][v];
    870e:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
    8710:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    8712:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    8716:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    871a:	d011      	beq.n	8740 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    871c:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    8720:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    8722:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    8726:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    872a:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    872e:	d007      	beq.n	8740 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    8730:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    8734:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    8738:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    873c:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    8740:	69bb      	ldr	r3, [r7, #24]
		sample = filter_tick(&filterSamps[0], note[v], v);
    8742:	eeb0 0a48 	vmov.f32	s0, s16
    8746:	4651      	mov	r1, sl
    8748:	f107 0038 	add.w	r0, r7, #56	; 0x38
		filterSamps[0] += noiseOuts[0][v];
    874c:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    8750:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    8754:	ee76 6a86 	vadd.f32	s13, s13, s12
    8758:	61bb      	str	r3, [r7, #24]
		filterSamps[1] += noiseOuts[1][v];
    875a:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    875e:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
		filterSamps[1] += noiseOuts[1][v];
    8762:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		uint32_t tempCountFilt = DWT->CYCCNT;
    8766:	f8db 4004 	ldr.w	r4, [fp, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    876a:	f7fd fcb9 	bl	60e0 <filter_tick>
    876e:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    8772:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    8776:	f8db 3004 	ldr.w	r3, [fp, #4]
    877a:	4a3c      	ldr	r2, [pc, #240]	; (886c <audioTickSynth+0x36c>)
    877c:	1b1b      	subs	r3, r3, r4
    877e:	6013      	str	r3, [r2, #0]
		if (fxPre)
    8780:	4b3b      	ldr	r3, [pc, #236]	; (8870 <audioTickSynth+0x370>)
    8782:	781b      	ldrb	r3, [r3, #0]
    8784:	b133      	cbz	r3, 8794 <audioTickSynth+0x294>
			sample *= amplitude[v];
    8786:	6a3b      	ldr	r3, [r7, #32]
    8788:	edd3 7a00 	vldr	s15, [r3]
    878c:	ee20 8a27 	vmul.f32	s16, s0, s15
    8790:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
		if (overSampled)
    8794:	4b37      	ldr	r3, [pc, #220]	; (8874 <audioTickSynth+0x374>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8796:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
		if (overSampled)
    879a:	681c      	ldr	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    879c:	f8db 3004 	ldr.w	r3, [fp, #4]
    87a0:	613b      	str	r3, [r7, #16]
		if (overSampled)
    87a2:	2c00      	cmp	r4, #0
    87a4:	f040 80fe 	bne.w	89a4 <audioTickSynth+0x4a4>
    87a8:	4a33      	ldr	r2, [pc, #204]	; (8878 <audioTickSynth+0x378>)
    87aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87ac:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 88a0 <audioTickSynth+0x3a0>
    87b0:	18d6      	adds	r6, r2, r3
    87b2:	4a32      	ldr	r2, [pc, #200]	; (887c <audioTickSynth+0x37c>)
    87b4:	18d5      	adds	r5, r2, r3
				if (effectsActive[i])
    87b6:	f818 3b01 	ldrb.w	r3, [r8], #1
					sample = effectTick[i](sample, i, v); //run the effect
    87ba:	eeb0 0a48 	vmov.f32	s0, s16
    87be:	4620      	mov	r0, r4
    87c0:	4651      	mov	r1, sl
				if (effectsActive[i])
    87c2:	b18b      	cbz	r3, 87e8 <audioTickSynth+0x2e8>
					sample = effectTick[i](sample, i, v); //run the effect
    87c4:	4b2e      	ldr	r3, [pc, #184]	; (8880 <audioTickSynth+0x380>)
    87c6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    87ca:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    87cc:	edd6 7a00 	vldr	s15, [r6]
					sample *= fxPostGain[i][v];
    87d0:	ed95 7a00 	vldr	s14, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    87d4:	ee7a 6ae7 	vsub.f32	s13, s21, s15
    87d8:	ee60 7a27 	vmul.f32	s15, s0, s15
    87dc:	eee6 7a88 	vfma.f32	s15, s13, s16
					sample *= fxPostGain[i][v];
    87e0:	ee27 8a87 	vmul.f32	s16, s15, s14
    87e4:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
			for (int i = 0; i < NUM_EFFECT; i++)
    87e8:	3401      	adds	r4, #1
    87ea:	3608      	adds	r6, #8
    87ec:	3508      	adds	r5, #8
    87ee:	2c04      	cmp	r4, #4
    87f0:	d1e1      	bne.n	87b6 <audioTickSynth+0x2b6>
		timeOS = DWT->CYCCNT - tempCountOS;
    87f2:	f8db 3004 	ldr.w	r3, [fp, #4]
    87f6:	693a      	ldr	r2, [r7, #16]
    87f8:	1a9b      	subs	r3, r3, r2
    87fa:	4a22      	ldr	r2, [pc, #136]	; (8884 <audioTickSynth+0x384>)
    87fc:	6013      	str	r3, [r2, #0]
    87fe:	e051      	b.n	88a4 <audioTickSynth+0x3a4>
    8800:	e0001000 	.word	0xe0001000
    8804:	2001cf80 	.word	0x2001cf80
    8808:	2001d0e0 	.word	0x2001d0e0
    880c:	20013e24 	.word	0x20013e24
    8810:	20013e1c 	.word	0x20013e1c
    8814:	00000000 	.word	0x00000000
    8818:	42fe0000 	.word	0x42fe0000
    881c:	2001d0f4 	.word	0x2001d0f4
    8820:	2001d008 	.word	0x2001d008
    8824:	2001c704 	.word	0x2001c704
    8828:	2001cd10 	.word	0x2001cd10
    882c:	2001c948 	.word	0x2001c948
    8830:	2001cd64 	.word	0x2001cd64
    8834:	20018a4c 	.word	0x20018a4c
    8838:	20018a48 	.word	0x20018a48
    883c:	20013df4 	.word	0x20013df4
    8840:	20013dec 	.word	0x20013dec
    8844:	2001d0d8 	.word	0x2001d0d8
    8848:	2001c944 	.word	0x2001c944
    884c:	2001d0d0 	.word	0x2001d0d0
    8850:	2001cac8 	.word	0x2001cac8
    8854:	2001cacc 	.word	0x2001cacc
    8858:	2001d0dc 	.word	0x2001d0dc
    885c:	2001d0ec 	.word	0x2001d0ec
    8860:	2001cd0c 	.word	0x2001cd0c
    8864:	2001d0e4 	.word	0x2001d0e4
    8868:	2000074c 	.word	0x2000074c
    886c:	2001d0d4 	.word	0x2001d0d4
    8870:	20016091 	.word	0x20016091
    8874:	20000750 	.word	0x20000750
    8878:	2001c9d8 	.word	0x2001c9d8
    887c:	2001c9f8 	.word	0x2001c9f8
    8880:	2001c934 	.word	0x2001c934
    8884:	2001d0e8 	.word	0x2001d0e8
    8888:	20004df8 	.word	0x20004df8
    888c:	20004e28 	.word	0x20004e28
    8890:	200004b1 	.word	0x200004b1
    8894:	20004ecc 	.word	0x20004ecc
    8898:	20004ef4 	.word	0x20004ef4
    889c:	2001cb2c 	.word	0x2001cb2c
    88a0:	20013f64 	.word	0x20013f64
		if (!fxPre)
    88a4:	4b8c      	ldr	r3, [pc, #560]	; (8ad8 <audioTickSynth+0x5d8>)
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	b933      	cbnz	r3, 88b8 <audioTickSynth+0x3b8>
			sample *= amplitude[v];
    88aa:	6a3b      	ldr	r3, [r7, #32]
    88ac:	edd3 7a00 	vldr	s15, [r3]
    88b0:	ee28 8a27 	vmul.f32	s16, s16, s15
    88b4:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
	for (int v = 0; v < numStringsThisBoard; v++)
    88b8:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    88ba:	eeb0 0a48 	vmov.f32	s0, s16
    88be:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    88c0:	f10a 0a01 	add.w	sl, sl, #1
    88c4:	3304      	adds	r3, #4
    88c6:	623b      	str	r3, [r7, #32]
    88c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    88ca:	3304      	adds	r3, #4
    88cc:	627b      	str	r3, [r7, #36]	; 0x24
    88ce:	69fb      	ldr	r3, [r7, #28]
    88d0:	3304      	adds	r3, #4
    88d2:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    88d4:	4b81      	ldr	r3, [pc, #516]	; (8adc <audioTickSynth+0x5dc>)
    88d6:	1918      	adds	r0, r3, r4
    88d8:	f000 fd82 	bl	93e0 <__tSVF_tick_veneer>
		masterSample += sample;// * finalMaster[v];
    88dc:	4b80      	ldr	r3, [pc, #512]	; (8ae0 <audioTickSynth+0x5e0>)
    88de:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    88e2:	1d23      	adds	r3, r4, #4
    88e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample;// * finalMaster[v];
    88e6:	eea0 9a27 	vfma.f32	s18, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    88ea:	f899 3000 	ldrb.w	r3, [r9]
    88ee:	4553      	cmp	r3, sl
    88f0:	f73f ae87 	bgt.w	8602 <audioTickSynth+0x102>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    88f4:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8ae4 <audioTickSynth+0x5e4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    88f8:	4b7b      	ldr	r3, [pc, #492]	; (8ae8 <audioTickSynth+0x5e8>)
    88fa:	6879      	ldr	r1, [r7, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    88fc:	eef0 0a40 	vmov.f32	s1, s0
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    8900:	685b      	ldr	r3, [r3, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8902:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8aec <audioTickSynth+0x5ec>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    8906:	1a5b      	subs	r3, r3, r1
    8908:	4a79      	ldr	r2, [pc, #484]	; (8af0 <audioTickSynth+0x5f0>)
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    890a:	eee8 0aa7 	vfma.f32	s1, s17, s15
    890e:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8af4 <audioTickSynth+0x5f4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    8912:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8914:	f000 fe04 	bl	9520 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    8918:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (pedalControlsMaster)
    891c:	4a76      	ldr	r2, [pc, #472]	; (8af8 <audioTickSynth+0x5f8>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    891e:	4b77      	ldr	r3, [pc, #476]	; (8afc <audioTickSynth+0x5fc>)
	if (pedalControlsMaster)
    8920:	7810      	ldrb	r0, [r2, #0]
	int volIdxInt = (int) volIdx;
    8922:	ee17 2a90 	vmov	r2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8926:	1c51      	adds	r1, r2, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8928:	eb03 0482 	add.w	r4, r3, r2, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    892c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8930:	ed94 6a00 	vldr	s12, [r4]
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8934:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8938:	edd3 6a00 	vldr	s13, [r3]
	if (pedalControlsMaster)
    893c:	b178      	cbz	r0, 895e <audioTickSynth+0x45e>
	float omAlpha = 1.0f - alpha;
    893e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float alpha = volIdx-volIdxInt;
    8942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float omAlpha = 1.0f - alpha;
    8946:	ee37 7a40 	vsub.f32	s14, s14, s0
	float alpha = volIdx-volIdxInt;
    894a:	ee30 0a67 	vsub.f32	s0, s0, s15
	float omAlpha = 1.0f - alpha;
    894e:	ee77 7a27 	vadd.f32	s15, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8952:	ee67 7a86 	vmul.f32	s15, s15, s12
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8956:	eee6 7a80 	vfma.f32	s15, s13, s0
		masterSample *= outVol;
    895a:	ee29 9a27 	vmul.f32	s18, s18, s15
	if (masterSample  > .999999f)
    895e:	eddf 7a68 	vldr	s15, [pc, #416]	; 8b00 <audioTickSynth+0x600>
    8962:	eeb4 9ae7 	vcmpe.f32	s18, s15
    8966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    896a:	f340 808b 	ble.w	8a84 <audioTickSynth+0x584>
		masterSample  = .999999f;
    896e:	eeb0 9a67 	vmov.f32	s18, s15
		sampleClippedCountdown = 65535;
    8972:	4b64      	ldr	r3, [pc, #400]	; (8b04 <audioTickSynth+0x604>)
    8974:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8978:	801a      	strh	r2, [r3, #0]
	return masterSample * audioMasterLevel * 0.98f;
    897a:	4963      	ldr	r1, [pc, #396]	; (8b08 <audioTickSynth+0x608>)
	timeTick = DWT->CYCCNT - tempCountTick;
    897c:	4b5a      	ldr	r3, [pc, #360]	; (8ae8 <audioTickSynth+0x5e8>)
	return masterSample * audioMasterLevel * 0.98f;
    897e:	eddf 7a63 	vldr	s15, [pc, #396]	; 8b0c <audioTickSynth+0x60c>
	timeTick = DWT->CYCCNT - tempCountTick;
    8982:	685b      	ldr	r3, [r3, #4]
	return masterSample * audioMasterLevel * 0.98f;
    8984:	ed91 0a00 	vldr	s0, [r1]
	timeTick = DWT->CYCCNT - tempCountTick;
    8988:	68b9      	ldr	r1, [r7, #8]
}
    898a:	3744      	adds	r7, #68	; 0x44
	return masterSample * audioMasterLevel * 0.98f;
    898c:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    8990:	4a5f      	ldr	r2, [pc, #380]	; (8b10 <audioTickSynth+0x610>)
    8992:	1a5b      	subs	r3, r3, r1
	return masterSample * audioMasterLevel * 0.98f;
    8994:	ee20 0a09 	vmul.f32	s0, s0, s18
	timeTick = DWT->CYCCNT - tempCountTick;
    8998:	6013      	str	r3, [r2, #0]
}
    899a:	46bd      	mov	sp, r7
    899c:	ecbd 8b06 	vpop	{d8-d10}
    89a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    89a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    89a6:	f107 0134 	add.w	r1, r7, #52	; 0x34
    89aa:	485a      	ldr	r0, [pc, #360]	; (8b14 <audioTickSynth+0x614>)
			for (int i = 0; i < 4; i++)
    89ac:	2400      	movs	r4, #0
    89ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    89b2:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8b40 <audioTickSynth+0x640>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    89b6:	4410      	add	r0, r2
    89b8:	603a      	str	r2, [r7, #0]
    89ba:	4a57      	ldr	r2, [pc, #348]	; (8b18 <audioTickSynth+0x618>)
    89bc:	18d6      	adds	r6, r2, r3
    89be:	4a57      	ldr	r2, [pc, #348]	; (8b1c <audioTickSynth+0x61c>)
    89c0:	18d5      	adds	r5, r2, r3
    89c2:	2301      	movs	r3, #1
    89c4:	4a56      	ldr	r2, [pc, #344]	; (8b20 <audioTickSynth+0x620>)
    89c6:	f000 fd1f 	bl	9408 <__arm_fir_interpolate_f32_veneer>
    89ca:	4651      	mov	r1, sl
    89cc:	46b2      	mov	sl, r6
    89ce:	462e      	mov	r6, r5
				if (effectsActive[i])
    89d0:	f818 3b01 	ldrb.w	r3, [r8], #1
    89d4:	b993      	cbnz	r3, 89fc <audioTickSynth+0x4fc>
			for (int i = 0; i < 4; i++)
    89d6:	3401      	adds	r4, #1
    89d8:	f10a 0a08 	add.w	sl, sl, #8
    89dc:	3608      	adds	r6, #8
    89de:	2c04      	cmp	r4, #4
    89e0:	d1f6      	bne.n	89d0 <audioTickSynth+0x4d0>
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    89e2:	683b      	ldr	r3, [r7, #0]
    89e4:	468a      	mov	sl, r1
    89e6:	484f      	ldr	r0, [pc, #316]	; (8b24 <audioTickSynth+0x624>)
    89e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
    89ec:	494c      	ldr	r1, [pc, #304]	; (8b20 <audioTickSynth+0x620>)
    89ee:	4418      	add	r0, r3
    89f0:	2302      	movs	r3, #2
    89f2:	f000 fd85 	bl	9500 <__arm_fir_decimate_f32_veneer>
			sample *= amplitude[v];
    89f6:	ed97 8a0d 	vldr	s16, [r7, #52]	; 0x34
    89fa:	e6fa      	b.n	87f2 <audioTickSynth+0x2f2>
    89fc:	4d48      	ldr	r5, [pc, #288]	; (8b20 <audioTickSynth+0x620>)
						float dry = oversamplerArray[j]; //store the dry value to mix later
    89fe:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    8a02:	4620      	mov	r0, r4
    8a04:	4b48      	ldr	r3, [pc, #288]	; (8b28 <audioTickSynth+0x628>)
    8a06:	eeb0 0a48 	vmov.f32	s0, s16
    8a0a:	60f9      	str	r1, [r7, #12]
    8a0c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8a10:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8a12:	edda 7a00 	vldr	s15, [sl]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    8a16:	ed96 7a00 	vldr	s14, [r6]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8a1a:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    8a1e:	4b43      	ldr	r3, [pc, #268]	; (8b2c <audioTickSynth+0x62c>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8a20:	ee7a 7ae7 	vsub.f32	s15, s21, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    8a24:	68f9      	ldr	r1, [r7, #12]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8a26:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    8a2a:	ee67 7a00 	vmul.f32	s15, s14, s0
    8a2e:	ece5 7a01 	vstmia	r5!, {s15}
					for (int j = 0; j < OVERSAMPLE; j++)
    8a32:	42ab      	cmp	r3, r5
    8a34:	d1e3      	bne.n	89fe <audioTickSynth+0x4fe>
    8a36:	e7ce      	b.n	89d6 <audioTickSynth+0x4d6>
			noise_tick(v);
    8a38:	4650      	mov	r0, sl
    8a3a:	f7ff fd01 	bl	8440 <noise_tick>
    8a3e:	e65c      	b.n	86fa <audioTickSynth+0x1fa>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    8a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a42:	f103 0018 	add.w	r0, r3, #24
    8a46:	f000 fcbb 	bl	93c0 <__tADSRT_tickNoInterp_veneer>
    8a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8a4c:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    8a50:	e61a      	b.n	8688 <audioTickSynth+0x188>
    8a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a54:	f103 0010 	add.w	r0, r3, #16
    8a58:	f000 fcb2 	bl	93c0 <__tADSRT_tickNoInterp_veneer>
    8a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8a5e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    8a62:	e60c      	b.n	867e <audioTickSynth+0x17e>
    8a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8a66:	f103 0008 	add.w	r0, r3, #8
    8a6a:	f000 fca9 	bl	93c0 <__tADSRT_tickNoInterp_veneer>
    8a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8a70:	ed83 0a07 	vstr	s0, [r3, #28]
    8a74:	e5fe      	b.n	8674 <audioTickSynth+0x174>
    8a76:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8a78:	f000 fca2 	bl	93c0 <__tADSRT_tickNoInterp_veneer>
    8a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8a7e:	ed83 0a05 	vstr	s0, [r3, #20]
    8a82:	e5f2      	b.n	866a <audioTickSynth+0x16a>
	else if (masterSample < -.999999f)
    8a84:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8b30 <audioTickSynth+0x630>
    8a88:	eeb4 9ae7 	vcmpe.f32	s18, s15
    8a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8a90:	d50b      	bpl.n	8aaa <audioTickSynth+0x5aa>
		sampleClippedCountdown = 65535;
    8a92:	4b1c      	ldr	r3, [pc, #112]	; (8b04 <audioTickSynth+0x604>)
    8a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
		masterSample = -.9999999f;
    8a98:	ed9f 9a26 	vldr	s18, [pc, #152]	; 8b34 <audioTickSynth+0x634>
		sampleClippedCountdown = 65535;
    8a9c:	801a      	strh	r2, [r3, #0]
    8a9e:	e76c      	b.n	897a <audioTickSynth+0x47a>
		for (int i = 0; i < oscToTick; i++)
    8aa0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8b38 <audioTickSynth+0x638>
    8aa4:	eeb0 6a67 	vmov.f32	s12, s15
    8aa8:	e64a      	b.n	8740 <audioTickSynth+0x240>
		if (sampleClippedCountdown > 0)
    8aaa:	4a16      	ldr	r2, [pc, #88]	; (8b04 <audioTickSynth+0x604>)
    8aac:	8813      	ldrh	r3, [r2, #0]
    8aae:	b29b      	uxth	r3, r3
    8ab0:	2b00      	cmp	r3, #0
    8ab2:	f43f af62 	beq.w	897a <audioTickSynth+0x47a>
			sampleClippedCountdown--;
    8ab6:	8813      	ldrh	r3, [r2, #0]
    8ab8:	3b01      	subs	r3, #1
    8aba:	b29b      	uxth	r3, r3
    8abc:	8013      	strh	r3, [r2, #0]
    8abe:	e75c      	b.n	897a <audioTickSynth+0x47a>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8ac0:	4a09      	ldr	r2, [pc, #36]	; (8ae8 <audioTickSynth+0x5e8>)
    8ac2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8ac4:	6853      	ldr	r3, [r2, #4]
    8ac6:	491d      	ldr	r1, [pc, #116]	; (8b3c <audioTickSynth+0x63c>)
    8ac8:	1a1b      	subs	r3, r3, r0
	float masterSample = 0.0f;
    8aca:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 8b38 <audioTickSynth+0x638>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8ace:	600b      	str	r3, [r1, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    8ad0:	6853      	ldr	r3, [r2, #4]
    8ad2:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    8ad4:	e70e      	b.n	88f4 <audioTickSynth+0x3f4>
    8ad6:	bf00      	nop
    8ad8:	20016091 	.word	0x20016091
    8adc:	2001c9b0 	.word	0x2001c9b0
    8ae0:	200004ac 	.word	0x200004ac
    8ae4:	423c0000 	.word	0x423c0000
    8ae8:	e0001000 	.word	0xe0001000
    8aec:	42a00000 	.word	0x42a00000
    8af0:	2001d0f0 	.word	0x2001d0f0
    8af4:	42fe0000 	.word	0x42fe0000
    8af8:	20019b74 	.word	0x20019b74
    8afc:	2000051c 	.word	0x2000051c
    8b00:	3f7fffef 	.word	0x3f7fffef
    8b04:	20005342 	.word	0x20005342
    8b08:	20000724 	.word	0x20000724
    8b0c:	3f7ae148 	.word	0x3f7ae148
    8b10:	2001d0f8 	.word	0x2001d0f8
    8b14:	2001cd48 	.word	0x2001cd48
    8b18:	2001c9d8 	.word	0x2001c9d8
    8b1c:	2001c9f8 	.word	0x2001c9f8
    8b20:	2001cd94 	.word	0x2001cd94
    8b24:	2001cd30 	.word	0x2001cd30
    8b28:	2001c934 	.word	0x2001c934
    8b2c:	2001cd9c 	.word	0x2001cd9c
    8b30:	bf7fffef 	.word	0xbf7fffef
    8b34:	bf7ffffe 	.word	0xbf7ffffe
    8b38:	00000000 	.word	0x00000000
    8b3c:	2001d0f4 	.word	0x2001d0f4
    8b40:	20013f64 	.word	0x20013f64
    8b44:	f3af 8000 	nop.w
    8b48:	f3af 8000 	nop.w
    8b4c:	f3af 8000 	nop.w
    8b50:	f3af 8000 	nop.w
    8b54:	f3af 8000 	nop.w
    8b58:	f3af 8000 	nop.w
    8b5c:	f3af 8000 	nop.w

00008b60 <audioFrameSynth>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    8b60:	4ba4      	ldr	r3, [pc, #656]	; (8df4 <audioFrameSynth+0x294>)
{
    8b62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
    8b66:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8e58 <audioFrameSynth+0x2f8>
{
    8b6a:	4607      	mov	r7, r0
    8b6c:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    8b70:	685b      	ldr	r3, [r3, #4]
{
    8b72:	b085      	sub	sp, #20
	uint32_t tempCountFrame = DWT->CYCCNT;
    8b74:	9300      	str	r3, [sp, #0]
	if (resetStringInputs)
    8b76:	f89a 3000 	ldrb.w	r3, [sl]
    8b7a:	b1db      	cbz	r3, 8bb4 <audioFrameSynth+0x54>
		for (int i = 0; i < numStringsThisBoard; i++)
    8b7c:	4e9e      	ldr	r6, [pc, #632]	; (8df8 <audioFrameSynth+0x298>)
    8b7e:	7833      	ldrb	r3, [r6, #0]
    8b80:	b1ab      	cbz	r3, 8bae <audioFrameSynth+0x4e>
    8b82:	2500      	movs	r5, #0
    8b84:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8e5c <audioFrameSynth+0x2fc>
    8b88:	4c9c      	ldr	r4, [pc, #624]	; (8dfc <audioFrameSynth+0x29c>)
				previousStringInputs[i] = 0;
    8b8a:	46a9      	mov	r9, r5
    8b8c:	f1a8 0b20 	sub.w	fp, r8, #32
				tADSRT_clear(&envs[v][i]);
    8b90:	4658      	mov	r0, fp
			for (int v = 0; v < NUM_ENV; v++)
    8b92:	f10b 0b08 	add.w	fp, fp, #8
				tADSRT_clear(&envs[v][i]);
    8b96:	f000 fdbb 	bl	9710 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    8b9a:	f824 9015 	strh.w	r9, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    8b9e:	45c3      	cmp	fp, r8
    8ba0:	d1f6      	bne.n	8b90 <audioFrameSynth+0x30>
		for (int i = 0; i < numStringsThisBoard; i++)
    8ba2:	3501      	adds	r5, #1
    8ba4:	7833      	ldrb	r3, [r6, #0]
    8ba6:	f108 0804 	add.w	r8, r8, #4
    8baa:	42ab      	cmp	r3, r5
    8bac:	dcee      	bgt.n	8b8c <audioFrameSynth+0x2c>
		resetStringInputs = 0;
    8bae:	2300      	movs	r3, #0
    8bb0:	f88a 3000 	strb.w	r3, [sl]
	if (newPluck)
    8bb4:	4b92      	ldr	r3, [pc, #584]	; (8e00 <audioFrameSynth+0x2a0>)
    8bb6:	681b      	ldr	r3, [r3, #0]
    8bb8:	2b00      	cmp	r3, #0
    8bba:	d037      	beq.n	8c2c <audioFrameSynth+0xcc>
		for (int i = 0; i < numStringsThisBoard; i++)
    8bbc:	4e8e      	ldr	r6, [pc, #568]	; (8df8 <audioFrameSynth+0x298>)
    8bbe:	7833      	ldrb	r3, [r6, #0]
    8bc0:	b38b      	cbz	r3, 8c26 <audioFrameSynth+0xc6>
    8bc2:	4a90      	ldr	r2, [pc, #576]	; (8e04 <audioFrameSynth+0x2a4>)
    8bc4:	2500      	movs	r5, #0
    8bc6:	9601      	str	r6, [sp, #4]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8bc8:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8e08 <audioFrameSynth+0x2a8>
    8bcc:	4616      	mov	r6, r2
    8bce:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8e60 <audioFrameSynth+0x300>
    8bd2:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8e64 <audioFrameSynth+0x304>
    8bd6:	f8df b290 	ldr.w	fp, [pc, #656]	; 8e68 <audioFrameSynth+0x308>
    8bda:	4c88      	ldr	r4, [pc, #544]	; (8dfc <audioFrameSynth+0x29c>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    8bdc:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    8be0:	b292      	uxth	r2, r2
    8be2:	b92a      	cbnz	r2, 8bf0 <audioFrameSynth+0x90>
    8be4:	4a89      	ldr	r2, [pc, #548]	; (8e0c <audioFrameSynth+0x2ac>)
    8be6:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    8bea:	b292      	uxth	r2, r2
    8bec:	2a00      	cmp	r2, #0
    8bee:	d171      	bne.n	8cd4 <audioFrameSynth+0x174>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    8bf0:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    8bf4:	b292      	uxth	r2, r2
    8bf6:	b132      	cbz	r2, 8c06 <audioFrameSynth+0xa6>
    8bf8:	4a84      	ldr	r2, [pc, #528]	; (8e0c <audioFrameSynth+0x2ac>)
    8bfa:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    8bfe:	b292      	uxth	r2, r2
    8c00:	2a00      	cmp	r2, #0
    8c02:	f000 80d4 	beq.w	8dae <audioFrameSynth+0x24e>
			previousStringInputs[i] = stringInputs[i];
    8c06:	4a81      	ldr	r2, [pc, #516]	; (8e0c <audioFrameSynth+0x2ac>)
		for (int i = 0; i < numStringsThisBoard; i++)
    8c08:	f109 0904 	add.w	r9, r9, #4
    8c0c:	f108 0804 	add.w	r8, r8, #4
    8c10:	f10b 0b04 	add.w	fp, fp, #4
			previousStringInputs[i] = stringInputs[i];
    8c14:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8c18:	3604      	adds	r6, #4
			previousStringInputs[i] = stringInputs[i];
    8c1a:	b292      	uxth	r2, r2
    8c1c:	f824 2015 	strh.w	r2, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8c20:	3501      	adds	r5, #1
    8c22:	42ab      	cmp	r3, r5
    8c24:	dcda      	bgt.n	8bdc <audioFrameSynth+0x7c>
		newPluck = 0;
    8c26:	2300      	movs	r3, #0
    8c28:	4a75      	ldr	r2, [pc, #468]	; (8e00 <audioFrameSynth+0x2a0>)
    8c2a:	6013      	str	r3, [r2, #0]
    8c2c:	4c78      	ldr	r4, [pc, #480]	; (8e10 <audioFrameSynth+0x2b0>)
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    8c2e:	ed9f 8a79 	vldr	s16, [pc, #484]	; 8e14 <audioFrameSynth+0x2b4>
    8c32:	f504 7500 	add.w	r5, r4, #512	; 0x200
    8c36:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    8c3a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    8c3e:	f7ff fc5f 	bl	8500 <audioTickSynth>
    8c42:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8c46:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    8c48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8c4c:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    8c4e:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    8c52:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8c56:	d1f2      	bne.n	8c3e <audioFrameSynth+0xde>
	if (switchStrings)
    8c58:	4c6f      	ldr	r4, [pc, #444]	; (8e18 <audioFrameSynth+0x2b8>)
    8c5a:	6823      	ldr	r3, [r4, #0]
    8c5c:	bb73      	cbnz	r3, 8cbc <audioFrameSynth+0x15c>
	switchStrings = 0;
    8c5e:	2000      	movs	r0, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8c60:	4b64      	ldr	r3, [pc, #400]	; (8df4 <audioFrameSynth+0x294>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8c62:	4a6e      	ldr	r2, [pc, #440]	; (8e1c <audioFrameSynth+0x2bc>)
	switchStrings = 0;
    8c64:	6020      	str	r0, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8c66:	9c00      	ldr	r4, [sp, #0]
    8c68:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8c6a:	edd2 6a00 	vldr	s13, [r2]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8c6e:	1b1b      	subs	r3, r3, r4
	if (frameLoadPercentage > .99f)
    8c70:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8e20 <audioFrameSynth+0x2c0>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8c74:	496b      	ldr	r1, [pc, #428]	; (8e24 <audioFrameSynth+0x2c4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8c76:	ee07 3a90 	vmov	s15, r3
    8c7a:	4a6b      	ldr	r2, [pc, #428]	; (8e28 <audioFrameSynth+0x2c8>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8c7c:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8c82:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    8c86:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8c8a:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    8c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8c92:	dd0e      	ble.n	8cb2 <audioFrameSynth+0x152>
		frameLoadOverCount++;
    8c94:	4a65      	ldr	r2, [pc, #404]	; (8e2c <audioFrameSynth+0x2cc>)
    8c96:	6813      	ldr	r3, [r2, #0]
    8c98:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    8c9a:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    8c9c:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    8c9e:	d908      	bls.n	8cb2 <audioFrameSynth+0x152>
			if (overSampled == 1)
    8ca0:	4b63      	ldr	r3, [pc, #396]	; (8e30 <audioFrameSynth+0x2d0>)
    8ca2:	681a      	ldr	r2, [r3, #0]
    8ca4:	2a01      	cmp	r2, #1
    8ca6:	d00d      	beq.n	8cc4 <audioFrameSynth+0x164>
			else if (oscToTick > 0)
    8ca8:	4a62      	ldr	r2, [pc, #392]	; (8e34 <audioFrameSynth+0x2d4>)
    8caa:	7813      	ldrb	r3, [r2, #0]
    8cac:	b10b      	cbz	r3, 8cb2 <audioFrameSynth+0x152>
				oscToTick--;
    8cae:	3b01      	subs	r3, #1
    8cb0:	7013      	strb	r3, [r2, #0]
}
    8cb2:	b005      	add	sp, #20
    8cb4:	ecbd 8b04 	vpop	{d8-d9}
    8cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switchStringModel(switchStrings);
    8cbc:	6820      	ldr	r0, [r4, #0]
    8cbe:	f7f8 fc3f 	bl	1540 <switchStringModel>
    8cc2:	e7cc      	b.n	8c5e <audioFrameSynth+0xfe>
				overSampled = 0;
    8cc4:	6018      	str	r0, [r3, #0]
}
    8cc6:	b005      	add	sp, #20
    8cc8:	ecbd 8b04 	vpop	{d8-d9}
    8ccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				changeOversampling(overSampled);
    8cd0:	f000 bb02 	b.w	92d8 <__changeOversampling_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8cd4:	4b4d      	ldr	r3, [pc, #308]	; (8e0c <audioFrameSynth+0x2ac>)
    8cd6:	f5ab 7213 	sub.w	r2, fp, #588	; 0x24c
    8cda:	f8df a178 	ldr.w	sl, [pc, #376]	; 8e54 <audioFrameSynth+0x2f4>
						if (useVelocity == 0) envVel = 1.f;
    8cde:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8ce2:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    8ce6:	f10a 0104 	add.w	r1, sl, #4
						voiceSounding = 1;
    8cea:	9502      	str	r5, [sp, #8]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8cec:	b29b      	uxth	r3, r3
						voiceSounding = 1;
    8cee:	4655      	mov	r5, sl
    8cf0:	9403      	str	r4, [sp, #12]
    8cf2:	46c2      	mov	sl, r8
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8cf4:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    8cf8:	4b4f      	ldr	r3, [pc, #316]	; (8e38 <audioFrameSynth+0x2d8>)
						voiceSounding = 1;
    8cfa:	4614      	mov	r4, r2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8cfc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    8d00:	681b      	ldr	r3, [r3, #0]
    8d02:	6033      	str	r3, [r6, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8d04:	ee28 8a28 	vmul.f32	s16, s16, s17
					if (envOn[v])
    8d08:	f815 3b01 	ldrb.w	r3, [r5], #1
						tADSRT_on(&envs[v][i], envVel);
    8d0c:	4650      	mov	r0, sl
					if (envOn[v])
    8d0e:	b16b      	cbz	r3, 8d2c <audioFrameSynth+0x1cc>
						if (useVelocity == 0) envVel = 1.f;
    8d10:	edd4 7a00 	vldr	s15, [r4]
    8d14:	eef5 7a40 	vcmp.f32	s15, #0.0
    8d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    8d1c:	fe09 0a08 	vseleq.f32	s0, s18, s16
    8d20:	f000 fb36 	bl	9390 <__tADSRT_on_veneer>
						voiceSounding = 1;
    8d24:	2001      	movs	r0, #1
    8d26:	4b45      	ldr	r3, [pc, #276]	; (8e3c <audioFrameSynth+0x2dc>)
    8d28:	4945      	ldr	r1, [pc, #276]	; (8e40 <audioFrameSynth+0x2e0>)
    8d2a:	7018      	strb	r0, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    8d2c:	42a9      	cmp	r1, r5
    8d2e:	f10a 0a08 	add.w	sl, sl, #8
    8d32:	f104 04a8 	add.w	r4, r4, #168	; 0xa8
    8d36:	d1e7      	bne.n	8d08 <audioFrameSynth+0x1a8>
						if (noteOnSync > 0.5f)
    8d38:	9d02      	ldr	r5, [sp, #8]
    8d3a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    8d3e:	f8df a104 	ldr.w	sl, [pc, #260]	; 8e44 <audioFrameSynth+0x2e4>
    8d42:	465c      	mov	r4, fp
    8d44:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
    8d48:	009b      	lsls	r3, r3, #2
    8d4a:	330c      	adds	r3, #12
    8d4c:	9302      	str	r3, [sp, #8]
						if (noteOnSync > 0.5f)
    8d4e:	4b3d      	ldr	r3, [pc, #244]	; (8e44 <audioFrameSynth+0x2e4>)
    8d50:	ebaa 0003 	sub.w	r0, sl, r3
					if (lfoOn[v])
    8d54:	f81a 3b01 	ldrb.w	r3, [sl], #1
    8d58:	b163      	cbz	r3, 8d74 <audioFrameSynth+0x214>
						if (noteOnSync > 0.5f)
    8d5a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    8d5e:	eef4 7ac9 	vcmpe.f32	s15, s18
    8d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8d66:	dd05      	ble.n	8d74 <audioFrameSynth+0x214>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    8d68:	9b02      	ldr	r3, [sp, #8]
    8d6a:	4629      	mov	r1, r5
    8d6c:	ed94 0a00 	vldr	s0, [r4]
    8d70:	58e3      	ldr	r3, [r4, r3]
    8d72:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
    8d74:	4b34      	ldr	r3, [pc, #208]	; (8e48 <audioFrameSynth+0x2e8>)
    8d76:	348c      	adds	r4, #140	; 0x8c
    8d78:	4553      	cmp	r3, sl
    8d7a:	d1e8      	bne.n	8d4e <audioFrameSynth+0x1ee>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    8d7c:	4833      	ldr	r0, [pc, #204]	; (8e4c <audioFrameSynth+0x2ec>)
    8d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    8d82:	4933      	ldr	r1, [pc, #204]	; (8e50 <audioFrameSynth+0x2f0>)
    8d84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    8d88:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    8d8a:	9b01      	ldr	r3, [sp, #4]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    8d8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    8d90:	3201      	adds	r2, #1
    8d92:	9c03      	ldr	r4, [sp, #12]
    8d94:	edd1 7a00 	vldr	s15, [r1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8d98:	781b      	ldrb	r3, [r3, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    8d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    8d9e:	ed89 8a00 	vstr	s16, [r9]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    8da2:	7002      	strb	r2, [r0, #0]
    8da4:	ee67 7a87 	vmul.f32	s15, s15, s14
    8da8:	edc9 7a02 	vstr	s15, [r9, #8]
			{
    8dac:	e72b      	b.n	8c06 <audioFrameSynth+0xa6>
					if (envOn[v])
    8dae:	4b29      	ldr	r3, [pc, #164]	; (8e54 <audioFrameSynth+0x2f4>)
    8db0:	781b      	ldrb	r3, [r3, #0]
    8db2:	b95b      	cbnz	r3, 8dcc <audioFrameSynth+0x26c>
    8db4:	4b27      	ldr	r3, [pc, #156]	; (8e54 <audioFrameSynth+0x2f4>)
    8db6:	785b      	ldrb	r3, [r3, #1]
    8db8:	b9b3      	cbnz	r3, 8de8 <audioFrameSynth+0x288>
    8dba:	4b26      	ldr	r3, [pc, #152]	; (8e54 <audioFrameSynth+0x2f4>)
    8dbc:	789b      	ldrb	r3, [r3, #2]
    8dbe:	b973      	cbnz	r3, 8dde <audioFrameSynth+0x27e>
    8dc0:	4b24      	ldr	r3, [pc, #144]	; (8e54 <audioFrameSynth+0x2f4>)
    8dc2:	78db      	ldrb	r3, [r3, #3]
    8dc4:	b933      	cbnz	r3, 8dd4 <audioFrameSynth+0x274>
		for (int i = 0; i < numStringsThisBoard; i++)
    8dc6:	9b01      	ldr	r3, [sp, #4]
    8dc8:	781b      	ldrb	r3, [r3, #0]
    8dca:	e71c      	b.n	8c06 <audioFrameSynth+0xa6>
						tADSRT_off(&envs[v][i]);
    8dcc:	4640      	mov	r0, r8
    8dce:	f000 fbd3 	bl	9578 <__tADSRT_off_veneer>
    8dd2:	e7ef      	b.n	8db4 <audioFrameSynth+0x254>
    8dd4:	f108 0018 	add.w	r0, r8, #24
    8dd8:	f000 fbce 	bl	9578 <__tADSRT_off_veneer>
    8ddc:	e7f3      	b.n	8dc6 <audioFrameSynth+0x266>
    8dde:	f108 0010 	add.w	r0, r8, #16
    8de2:	f000 fbc9 	bl	9578 <__tADSRT_off_veneer>
    8de6:	e7eb      	b.n	8dc0 <audioFrameSynth+0x260>
    8de8:	f108 0008 	add.w	r0, r8, #8
    8dec:	f000 fbc4 	bl	9578 <__tADSRT_off_veneer>
    8df0:	e7e3      	b.n	8dba <audioFrameSynth+0x25a>
    8df2:	bf00      	nop
    8df4:	e0001000 	.word	0xe0001000
    8df8:	200004b1 	.word	0x200004b1
    8dfc:	20004f28 	.word	0x20004f28
    8e00:	20004eb8 	.word	0x20004eb8
    8e04:	20013df4 	.word	0x20013df4
    8e08:	37800080 	.word	0x37800080
    8e0c:	20013dd4 	.word	0x20013dd4
    8e10:	30000000 	.word	0x30000000
    8e14:	4b000000 	.word	0x4b000000
    8e18:	20013e0c 	.word	0x20013e0c
    8e1c:	200004a4 	.word	0x200004a4
    8e20:	3f7d70a4 	.word	0x3f7d70a4
    8e24:	20013e10 	.word	0x20013e10
    8e28:	20004de4 	.word	0x20004de4
    8e2c:	20004de0 	.word	0x20004de0
    8e30:	20000750 	.word	0x20000750
    8e34:	2000074c 	.word	0x2000074c
    8e38:	20004ec4 	.word	0x20004ec4
    8e3c:	2001d118 	.word	0x2001d118
    8e40:	2001c948 	.word	0x2001c948
    8e44:	2001cac8 	.word	0x2001cac8
    8e48:	2001cacc 	.word	0x2001cacc
    8e4c:	2001ce90 	.word	0x2001ce90
    8e50:	20019ba8 	.word	0x20019ba8
    8e54:	2001c944 	.word	0x2001c944
    8e58:	20005340 	.word	0x20005340
    8e5c:	2001c968 	.word	0x2001c968
    8e60:	2001d010 	.word	0x2001d010
    8e64:	2001c948 	.word	0x2001c948
    8e68:	20019914 	.word	0x20019914
	...

00008e80 <audioInitVocal>:

tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength = 22;

void __ATTR_ITCMRAM audioInitVocal()
{
    8e80:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    8e82:	4c07      	ldr	r4, [pc, #28]	; (8ea0 <audioInitVocal+0x20>)
    8e84:	2241      	movs	r2, #65	; 0x41
    8e86:	4b07      	ldr	r3, [pc, #28]	; (8ea4 <audioInitVocal+0x24>)
    8e88:	2116      	movs	r1, #22
    8e8a:	4620      	mov	r0, r4
    8e8c:	f000 fb0c 	bl	94a8 <__tVoc_init_veneer>
    8e90:	1d20      	adds	r0, r4, #4
    8e92:	4b04      	ldr	r3, [pc, #16]	; (8ea4 <audioInitVocal+0x24>)
    8e94:	2241      	movs	r2, #65	; 0x41
    8e96:	2116      	movs	r1, #22
	}
}
    8e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tVoc_init(&vocal[v], 22, 65, &leaf);
    8e9c:	f000 bb04 	b.w	94a8 <__tVoc_init_veneer>
    8ea0:	2001d13c 	.word	0x2001d13c
    8ea4:	20004e5c 	.word	0x20004e5c
    8ea8:	f3af 8000 	nop.w
    8eac:	f3af 8000 	nop.w
    8eb0:	f3af 8000 	nop.w
    8eb4:	f3af 8000 	nop.w
    8eb8:	f3af 8000 	nop.w
    8ebc:	f3af 8000 	nop.w

00008ec0 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    8ec0:	4770      	bx	lr
    8ec2:	bf00      	nop
    8ec4:	f3af 8000 	nop.w
    8ec8:	f3af 8000 	nop.w
    8ecc:	f3af 8000 	nop.w
    8ed0:	f3af 8000 	nop.w
    8ed4:	f3af 8000 	nop.w
    8ed8:	f3af 8000 	nop.w
    8edc:	f3af 8000 	nop.w

00008ee0 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    8ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ee4:	4f52      	ldr	r7, [pc, #328]	; (9030 <audioTickVocal+0x150>)
    8ee6:	4d53      	ldr	r5, [pc, #332]	; (9034 <audioTickVocal+0x154>)
    8ee8:	463c      	mov	r4, r7
    8eea:	f107 0630 	add.w	r6, r7, #48	; 0x30
    8eee:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    8ef2:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    8ef4:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    8ef6:	f000 fb4b 	bl	9590 <__tExpSmooth_tick_veneer>
    8efa:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    8efe:	42b4      	cmp	r4, r6
    8f00:	d1f7      	bne.n	8ef2 <audioTickVocal+0x12>
	}

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8f02:	484d      	ldr	r0, [pc, #308]	; (9038 <audioTickVocal+0x158>)
    8f04:	f000 fb44 	bl	9590 <__tExpSmooth_tick_veneer>

	int newTractLength = knobScaled[0] * 64 + 1;
    8f08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8f0c:	edd7 6a00 	vldr	s13, [r7]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8f10:	eeb0 9a40 	vmov.f32	s18, s0
	int newTractLength = knobScaled[0] * 64 + 1;
    8f14:	ed9f 7a49 	vldr	s14, [pc, #292]	; 903c <audioTickVocal+0x15c>
	if (newTractLength != prevTractLength)
    8f18:	4d49      	ldr	r5, [pc, #292]	; (9040 <audioTickVocal+0x160>)
	int newTractLength = knobScaled[0] * 64 + 1;
    8f1a:	eee6 7a87 	vfma.f32	s15, s13, s14
	if (newTractLength != prevTractLength)
    8f1e:	682b      	ldr	r3, [r5, #0]
	int newTractLength = knobScaled[0] * 64 + 1;
    8f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8f24:	ee17 4a90 	vmov	r4, s15
	if (newTractLength != prevTractLength)
    8f28:	42a3      	cmp	r3, r4
    8f2a:	d004      	beq.n	8f36 <audioTickVocal+0x56>
	{
		tVoc_set_tractLength(&vocal[0], newTractLength);
    8f2c:	ee17 1a90 	vmov	r1, s15
    8f30:	4844      	ldr	r0, [pc, #272]	; (9044 <audioTickVocal+0x164>)
    8f32:	f000 fa9d 	bl	9470 <__tVoc_set_tractLength_veneer>
	}

	tVoc_setDoubleComputeFlag(&vocal[0], knobScaled[1] > 0.5f);
    8f36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8f3a:	ed97 7a01 	vldr	s14, [r7, #4]

	prevTractLength = newTractLength;
	for (int i = 0; i < numStringsThisBoard; i++)
    8f3e:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9064 <audioTickVocal+0x184>
	tVoc_setDoubleComputeFlag(&vocal[0], knobScaled[1] > 0.5f);
    8f42:	4840      	ldr	r0, [pc, #256]	; (9044 <audioTickVocal+0x164>)
    8f44:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f4c:	bfcc      	ite	gt
    8f4e:	2101      	movgt	r1, #1
    8f50:	2100      	movle	r1, #0
    8f52:	f000 fb91 	bl	9678 <__tVoc_setDoubleComputeFlag_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    8f56:	f899 3000 	ldrb.w	r3, [r9]
	prevTractLength = newTractLength;
    8f5a:	602c      	str	r4, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    8f5c:	2b00      	cmp	r3, #0
    8f5e:	d064      	beq.n	902a <audioTickVocal+0x14a>
    8f60:	4d38      	ldr	r5, [pc, #224]	; (9044 <audioTickVocal+0x164>)
    8f62:	2400      	movs	r4, #0
    8f64:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9068 <audioTickVocal+0x188>
    8f68:	4f37      	ldr	r7, [pc, #220]	; (9048 <audioTickVocal+0x168>)
	float tempSamp = 0.0f;
    8f6a:	eddf 8a38 	vldr	s17, [pc, #224]	; 904c <audioTickVocal+0x16c>
    8f6e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 906c <audioTickVocal+0x18c>
    8f72:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9070 <audioTickVocal+0x190>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8f76:	4628      	mov	r0, r5
    8f78:	00a6      	lsls	r6, r4, #2
    8f7a:	f000 f985 	bl	9288 <__tVoc_tick_veneer>
    8f7e:	eeb0 8a40 	vmov.f32	s16, s0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f82:	4456      	add	r6, sl
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8f84:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
    8f88:	f000 fa1a 	bl	93c0 <__tADSRT_tickNoInterp_veneer>
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f8c:	ecf8 7a01 	vldmia	r8!, {s15}
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8f90:	eee8 8a00 	vfma.f32	s17, s16, s0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f94:	ed96 0a00 	vldr	s0, [r6]
	for (int i = 0; i < numStringsThisBoard; i++)
    8f98:	3401      	adds	r4, #1
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f9a:	ee30 0a27 	vadd.f32	s0, s0, s15
    8f9e:	f000 fb5b 	bl	9658 <__mtof_veneer>
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    8fa2:	4628      	mov	r0, r5
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8fa4:	eca7 0a01 	vstmia	r7!, {s0}
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    8fa8:	f000 fbae 	bl	9708 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    8fac:	4628      	mov	r0, r5
    8fae:	eeb0 0a49 	vmov.f32	s0, s18
	for (int i = 0; i < numStringsThisBoard; i++)
    8fb2:	3504      	adds	r5, #4
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    8fb4:	f000 fa48 	bl	9448 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    8fb8:	f899 3000 	ldrb.w	r3, [r9]
    8fbc:	42a3      	cmp	r3, r4
    8fbe:	dcda      	bgt.n	8f76 <audioTickVocal+0x96>
		//Lfloat tongue = 12.0f + (16.0f * knobScaled[0]);
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8fc0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 9050 <audioTickVocal+0x170>
    8fc4:	eddf 7a23 	vldr	s15, [pc, #140]	; 9054 <audioTickVocal+0x174>
    8fc8:	eef0 0a40 	vmov.f32	s1, s0
    8fcc:	ed9f 1a22 	vldr	s2, [pc, #136]	; 9058 <audioTickVocal+0x178>
    8fd0:	eee9 0a27 	vfma.f32	s1, s18, s15
    8fd4:	f000 faa4 	bl	9520 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    8fd8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
    8fdc:	491f      	ldr	r1, [pc, #124]	; (905c <audioTickVocal+0x17c>)
	float omAlpha = 1.0f - alpha;
    8fde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8fe2:	4a1f      	ldr	r2, [pc, #124]	; (9060 <audioTickVocal+0x180>)
	int volIdxInt = (int) volIdx;
    8fe4:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    8fe8:	edd1 6a00 	vldr	s13, [r1]
    8fec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8ff0:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8ff2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    8ff6:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8ffa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    8ffe:	ee30 0a47 	vsub.f32	s0, s0, s14
    9002:	ee68 8aa6 	vmul.f32	s17, s17, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    9006:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    900a:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    900e:	ed93 7a00 	vldr	s14, [r3]
    9012:	edd2 6a00 	vldr	s13, [r2]
    9016:	ee20 0a26 	vmul.f32	s0, s0, s13
    901a:	eea7 0a27 	vfma.f32	s0, s14, s15
	return tempSamp;
}
    901e:	ee28 0a80 	vmul.f32	s0, s17, s0
    9022:	ecbd 8b04 	vpop	{d8-d9}
    9026:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	float tempSamp = 0.0f;
    902a:	eddf 8a08 	vldr	s17, [pc, #32]	; 904c <audioTickVocal+0x16c>
    902e:	e7c7      	b.n	8fc0 <audioTickVocal+0xe0>
    9030:	20004df8 	.word	0x20004df8
    9034:	20004e28 	.word	0x20004e28
    9038:	20013e24 	.word	0x20013e24
    903c:	42800000 	.word	0x42800000
    9040:	2000075c 	.word	0x2000075c
    9044:	2001d13c 	.word	0x2001d13c
    9048:	20013da4 	.word	0x20013da4
    904c:	00000000 	.word	0x00000000
    9050:	423c0000 	.word	0x423c0000
    9054:	42a00000 	.word	0x42a00000
    9058:	42fe0000 	.word	0x42fe0000
    905c:	200004a8 	.word	0x200004a8
    9060:	2000051c 	.word	0x2000051c
    9064:	200004b1 	.word	0x200004b1
    9068:	20013df4 	.word	0x20013df4
    906c:	20004dd4 	.word	0x20004dd4
    9070:	20013dec 	.word	0x20013dec
    9074:	f3af 8000 	nop.w
    9078:	f3af 8000 	nop.w
    907c:	f3af 8000 	nop.w

00009080 <audioFrameVocal>:
{
    9080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    9084:	4b63      	ldr	r3, [pc, #396]	; (9214 <audioFrameVocal+0x194>)
{
    9086:	4680      	mov	r8, r0
	if (newPluck)
    9088:	4f63      	ldr	r7, [pc, #396]	; (9218 <audioFrameVocal+0x198>)
		for (int i = 0; i < numStringsThisBoard; i++)
    908a:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 925c <audioFrameVocal+0x1dc>
{
    908e:	ed2d 8b02 	vpush	{d8}
	uint32_t tempCountFrame = DWT->CYCCNT;
    9092:	685e      	ldr	r6, [r3, #4]
{
    9094:	b083      	sub	sp, #12
	if (newPluck)
    9096:	683b      	ldr	r3, [r7, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    9098:	f899 1000 	ldrb.w	r1, [r9]
	if (newPluck)
    909c:	2b00      	cmp	r3, #0
    909e:	d033      	beq.n	9108 <audioFrameVocal+0x88>
		for (int i = 0; i < numStringsThisBoard; i++)
    90a0:	2900      	cmp	r1, #0
    90a2:	f000 8088 	beq.w	91b6 <audioFrameVocal+0x136>
    90a6:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 9260 <audioFrameVocal+0x1e0>
    90aa:	2400      	movs	r4, #0
    90ac:	4b5b      	ldr	r3, [pc, #364]	; (921c <audioFrameVocal+0x19c>)
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    90ae:	9601      	str	r6, [sp, #4]
    90b0:	465e      	mov	r6, fp
				float amplitz = stringInputs[i] * 0.000015259021897f;
    90b2:	eddf 8a5b 	vldr	s17, [pc, #364]	; 9220 <audioFrameVocal+0x1a0>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    90b6:	469b      	mov	fp, r3
    90b8:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 9264 <audioFrameVocal+0x1e4>
    90bc:	4d59      	ldr	r5, [pc, #356]	; (9224 <audioFrameVocal+0x1a4>)
    90be:	4a5a      	ldr	r2, [pc, #360]	; (9228 <audioFrameVocal+0x1a8>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    90c0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    90c4:	b29b      	uxth	r3, r3
    90c6:	b923      	cbnz	r3, 90d2 <audioFrameVocal+0x52>
    90c8:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    90cc:	b29b      	uxth	r3, r3
    90ce:	2b00      	cmp	r3, #0
    90d0:	d173      	bne.n	91ba <audioFrameVocal+0x13a>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    90d2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    90d6:	b29b      	uxth	r3, r3
    90d8:	b12b      	cbz	r3, 90e6 <audioFrameVocal+0x66>
    90da:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    90de:	b29b      	uxth	r3, r3
    90e0:	2b00      	cmp	r3, #0
    90e2:	f000 808f 	beq.w	9204 <audioFrameVocal+0x184>
			previousStringInputs[i] = stringInputs[i];
    90e6:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    90ea:	f10b 0b04 	add.w	fp, fp, #4
    90ee:	f10a 0a04 	add.w	sl, sl, #4
    90f2:	3604      	adds	r6, #4
			previousStringInputs[i] = stringInputs[i];
    90f4:	fa1f fc8c 	uxth.w	ip, ip
    90f8:	f825 c014 	strh.w	ip, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    90fc:	3401      	adds	r4, #1
    90fe:	42a1      	cmp	r1, r4
    9100:	dcde      	bgt.n	90c0 <audioFrameVocal+0x40>
		newPluck = 0;
    9102:	2300      	movs	r3, #0
    9104:	9e01      	ldr	r6, [sp, #4]
    9106:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    9108:	b301      	cbz	r1, 914c <audioFrameVocal+0xcc>
    910a:	4d48      	ldr	r5, [pc, #288]	; (922c <audioFrameVocal+0x1ac>)
    910c:	2700      	movs	r7, #0
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    910e:	eddf 8a48 	vldr	s17, [pc, #288]	; 9230 <audioFrameVocal+0x1b0>
    9112:	ed9f 8a48 	vldr	s16, [pc, #288]	; 9234 <audioFrameVocal+0x1b4>
    9116:	4c48      	ldr	r4, [pc, #288]	; (9238 <audioFrameVocal+0x1b8>)
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    9118:	4628      	mov	r0, r5
    911a:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    911e:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
	for (int i = 0; i < numStringsThisBoard; i++)
    9122:	3701      	adds	r7, #1
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    9124:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    9128:	ed94 0a08 	vldr	s0, [r4, #32]
    912c:	f000 f960 	bl	93f0 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    9130:	eeb0 0a48 	vmov.f32	s0, s16
    9134:	edd4 7a07 	vldr	s15, [r4, #28]
    9138:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    913a:	3504      	adds	r5, #4
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    913c:	eea7 0aa8 	vfma.f32	s0, s15, s17
    9140:	f000 fa0e 	bl	9560 <__tVoc_set_velum_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    9144:	f899 3000 	ldrb.w	r3, [r9]
    9148:	42bb      	cmp	r3, r7
    914a:	dce5      	bgt.n	9118 <audioFrameVocal+0x98>
    914c:	4c3b      	ldr	r4, [pc, #236]	; (923c <audioFrameVocal+0x1bc>)
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    914e:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 9240 <audioFrameVocal+0x1c0>
    9152:	f504 7500 	add.w	r5, r4, #512	; 0x200
    9156:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    915a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    915e:	f7ff febf 	bl	8ee0 <audioTickVocal>
    9162:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9166:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    9168:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    916c:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    916e:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    9172:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9176:	d1f2      	bne.n	915e <audioFrameVocal+0xde>
	if (switchStrings)
    9178:	4c32      	ldr	r4, [pc, #200]	; (9244 <audioFrameVocal+0x1c4>)
    917a:	6823      	ldr	r3, [r4, #0]
    917c:	b9bb      	cbnz	r3, 91ae <audioFrameVocal+0x12e>
	switchStrings = 0;
    917e:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9180:	4b24      	ldr	r3, [pc, #144]	; (9214 <audioFrameVocal+0x194>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9182:	4831      	ldr	r0, [pc, #196]	; (9248 <audioFrameVocal+0x1c8>)
	switchStrings = 0;
    9184:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9186:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9188:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    918c:	1b9b      	subs	r3, r3, r6
    918e:	492f      	ldr	r1, [pc, #188]	; (924c <audioFrameVocal+0x1cc>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9190:	4a2f      	ldr	r2, [pc, #188]	; (9250 <audioFrameVocal+0x1d0>)
    9192:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9196:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9198:	eef8 7a67 	vcvt.f32.u32	s15, s15
    919c:	ee67 7a87 	vmul.f32	s15, s15, s14
    91a0:	edc2 7a00 	vstr	s15, [r2]
}
    91a4:	b003      	add	sp, #12
    91a6:	ecbd 8b02 	vpop	{d8}
    91aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switchStringModel(switchStrings);
    91ae:	6820      	ldr	r0, [r4, #0]
    91b0:	f7f8 f9c6 	bl	1540 <switchStringModel>
    91b4:	e7e3      	b.n	917e <audioFrameVocal+0xfe>
		newPluck = 0;
    91b6:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    91b8:	e7c8      	b.n	914c <audioFrameVocal+0xcc>
				stringOctave[i] = octave;
    91ba:	4b26      	ldr	r3, [pc, #152]	; (9254 <audioFrameVocal+0x1d4>)
    91bc:	edd3 7a00 	vldr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91c0:	4b25      	ldr	r3, [pc, #148]	; (9258 <audioFrameVocal+0x1d8>)
				stringOctave[i] = octave;
    91c2:	edcb 7a00 	vstr	s15, [fp]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91c6:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    91ca:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91ce:	ed91 0a00 	vldr	s0, [r1]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    91d2:	b29b      	uxth	r3, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91d4:	ee37 0a80 	vadd.f32	s0, s15, s0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    91d8:	ee08 3a10 	vmov	s16, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91dc:	f000 fa3c 	bl	9658 <__mtof_veneer>
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    91e0:	4630      	mov	r0, r6
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    91e2:	ed8a 0a00 	vstr	s0, [sl]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    91e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    91ea:	f000 f8f1 	bl	93d0 <__tADSRT_setSustain_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    91ee:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tADSRT_on(&fenvelopes[i], amplitz);
    91f2:	4630      	mov	r0, r6
    91f4:	ee20 0a28 	vmul.f32	s0, s0, s17
    91f8:	f000 f8ca 	bl	9390 <__tADSRT_on_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    91fc:	f899 1000 	ldrb.w	r1, [r9]
			{
    9200:	4a09      	ldr	r2, [pc, #36]	; (9228 <audioFrameVocal+0x1a8>)
    9202:	e770      	b.n	90e6 <audioFrameVocal+0x66>
				tADSRT_off(&fenvelopes[i]);
    9204:	4630      	mov	r0, r6
    9206:	f000 f9b7 	bl	9578 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    920a:	f899 1000 	ldrb.w	r1, [r9]
    920e:	4a06      	ldr	r2, [pc, #24]	; (9228 <audioFrameVocal+0x1a8>)
    9210:	e769      	b.n	90e6 <audioFrameVocal+0x66>
    9212:	bf00      	nop
    9214:	e0001000 	.word	0xe0001000
    9218:	20004eb8 	.word	0x20004eb8
    921c:	20013df4 	.word	0x20013df4
    9220:	37800080 	.word	0x37800080
    9224:	20004f28 	.word	0x20004f28
    9228:	20013dd4 	.word	0x20013dd4
    922c:	2001d13c 	.word	0x2001d13c
    9230:	3ecccccd 	.word	0x3ecccccd
    9234:	3c23d70a 	.word	0x3c23d70a
    9238:	20004df8 	.word	0x20004df8
    923c:	30000000 	.word	0x30000000
    9240:	4b000000 	.word	0x4b000000
    9244:	20013e0c 	.word	0x20013e0c
    9248:	200004a4 	.word	0x200004a4
    924c:	20013e10 	.word	0x20013e10
    9250:	20004de4 	.word	0x20004de4
    9254:	20004ec4 	.word	0x20004ec4
    9258:	20013dec 	.word	0x20013dec
    925c:	200004b1 	.word	0x200004b1
    9260:	20004dd4 	.word	0x20004dd4
    9264:	20013da4 	.word	0x20013da4

00009268 <__tNoise_tick_veneer>:
    9268:	f85f f000 	ldr.w	pc, [pc]	; 926c <__tNoise_tick_veneer+0x4>
    926c:	08014919 	.word	0x08014919

00009270 <__tEnvelopeFollower_tick_veneer>:
    9270:	f85f f000 	ldr.w	pc, [pc]	; 9274 <__tEnvelopeFollower_tick_veneer+0x4>
    9274:	0800f89d 	.word	0x0800f89d

00009278 <__tTString_setHarmonic_veneer>:
    9278:	f85f f000 	ldr.w	pc, [pc]	; 927c <__tTString_setHarmonic_veneer+0x4>
    927c:	080167f1 	.word	0x080167f1

00009280 <__tDiodeFilter_setFreqFast_veneer>:
    9280:	f85f f000 	ldr.w	pc, [pc]	; 9284 <__tDiodeFilter_setFreqFast_veneer+0x4>
    9284:	08013189 	.word	0x08013189

00009288 <__tVoc_tick_veneer>:
    9288:	f85f f000 	ldr.w	pc, [pc]	; 928c <__tVoc_tick_veneer+0x4>
    928c:	08017c0d 	.word	0x08017c0d

00009290 <__tHighpass_tick_veneer>:
    9290:	f85f f000 	ldr.w	pc, [pc]	; 9294 <__tHighpass_tick_veneer+0x4>
    9294:	080115f5 	.word	0x080115f5

00009298 <__tExpSmooth_free_veneer>:
    9298:	f85f f000 	ldr.w	pc, [pc]	; 929c <__tExpSmooth_free_veneer+0x4>
    929c:	08010b39 	.word	0x08010b39

000092a0 <__tVZFilterHS_setResonance_veneer>:
    92a0:	f85f f000 	ldr.w	pc, [pc]	; 92a4 <__tVZFilterHS_setResonance_veneer+0x4>
    92a4:	080123c5 	.word	0x080123c5

000092a8 <__faster_mtof_veneer>:
    92a8:	f85f f000 	ldr.w	pc, [pc]	; 92ac <__faster_mtof_veneer+0x4>
    92ac:	08013d61 	.word	0x08013d61

000092b0 <__LEAF_tanh_veneer>:
    92b0:	f85f f000 	ldr.w	pc, [pc]	; 92b4 <__LEAF_tanh_veneer+0x4>
    92b4:	080138b5 	.word	0x080138b5

000092b8 <__tPBSineTriangle_setShape_veneer>:
    92b8:	f85f f000 	ldr.w	pc, [pc]	; 92bc <__tPBSineTriangle_setShape_veneer+0x4>
    92bc:	080145fd 	.word	0x080145fd

000092c0 <__tVZFilterLS_setResonance_veneer>:
    92c0:	f85f f000 	ldr.w	pc, [pc]	; 92c4 <__tVZFilterLS_setResonance_veneer+0x4>
    92c4:	080120e1 	.word	0x080120e1

000092c8 <__tVZFilter_setFreq_veneer>:
    92c8:	f85f f000 	ldr.w	pc, [pc]	; 92cc <__tVZFilter_setFreq_veneer+0x4>
    92cc:	08011a79 	.word	0x08011a79

000092d0 <__tLadderFilter_setQ_veneer>:
    92d0:	f85f f000 	ldr.w	pc, [pc]	; 92d4 <__tLadderFilter_setQ_veneer+0x4>
    92d4:	080135b1 	.word	0x080135b1

000092d8 <__changeOversampling_veneer>:
    92d8:	f85f f000 	ldr.w	pc, [pc]	; 92dc <__changeOversampling_veneer+0x4>
    92dc:	08003991 	.word	0x08003991

000092e0 <__tTString_setFeedbackReactionSpeed_veneer>:
    92e0:	f85f f000 	ldr.w	pc, [pc]	; 92e4 <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    92e4:	0801684d 	.word	0x0801684d

000092e8 <__tVZFilterHS_setGain_veneer>:
    92e8:	f85f f000 	ldr.w	pc, [pc]	; 92ec <__tVZFilterHS_setGain_veneer+0x4>
    92ec:	08012369 	.word	0x08012369

000092f0 <__tVZFilterBell_setBandwidth_veneer>:
    92f0:	f85f f000 	ldr.w	pc, [pc]	; 92f4 <__tVZFilterBell_setBandwidth_veneer+0x4>
    92f4:	0801260d 	.word	0x0801260d

000092f8 <__tPBPulse_setWidth_veneer>:
    92f8:	f85f f000 	ldr.w	pc, [pc]	; 92fc <__tPBPulse_setWidth_veneer+0x4>
    92fc:	080146ed 	.word	0x080146ed

00009300 <__tVZFilterLS_setGain_veneer>:
    9300:	f85f f000 	ldr.w	pc, [pc]	; 9304 <__tVZFilterLS_setGain_veneer+0x4>
    9304:	08012081 	.word	0x08012081

00009308 <__HAL_SPI_Receive_DMA_veneer>:
    9308:	f85f f000 	ldr.w	pc, [pc]	; 930c <__HAL_SPI_Receive_DMA_veneer+0x4>
    930c:	0800a821 	.word	0x0800a821

00009310 <__tLadderFilter_setFreqFast_veneer>:
    9310:	f85f f000 	ldr.w	pc, [pc]	; 9314 <__tLadderFilter_setFreqFast_veneer+0x4>
    9314:	0801354d 	.word	0x0801354d

00009318 <__tVZFilterBell_tick_veneer>:
    9318:	f85f f000 	ldr.w	pc, [pc]	; 931c <__tVZFilterBell_tick_veneer+0x4>
    931c:	080125b5 	.word	0x080125b5

00009320 <__tTString_setPhantomHarmonicsGain_veneer>:
    9320:	f85f f000 	ldr.w	pc, [pc]	; 9324 <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    9324:	08016735 	.word	0x08016735

00009328 <__tTString_setInharmonic_veneer>:
    9328:	f85f f000 	ldr.w	pc, [pc]	; 932c <__tTString_setInharmonic_veneer+0x4>
    932c:	08016bad 	.word	0x08016bad

00009330 <__tSquareLFO_setPulseWidth_veneer>:
    9330:	f85f f000 	ldr.w	pc, [pc]	; 9334 <__tSquareLFO_setPulseWidth_veneer+0x4>
    9334:	08014c09 	.word	0x08014c09

00009338 <__tVZFilter_setResonance_veneer>:
    9338:	f85f f000 	ldr.w	pc, [pc]	; 933c <__tVZFilter_setResonance_veneer+0x4>
    933c:	08011db5 	.word	0x08011db5

00009340 <__tSimpleLivingString3_setLevStrength_veneer>:
    9340:	f85f f000 	ldr.w	pc, [pc]	; 9344 <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    9344:	08015445 	.word	0x08015445

00009348 <__tADSRT_init_veneer>:
    9348:	f85f f000 	ldr.w	pc, [pc]	; 934c <__tADSRT_init_veneer+0x4>
    934c:	08010461 	.word	0x08010461

00009350 <__tTString_setFilter_veneer>:
    9350:	f85f f000 	ldr.w	pc, [pc]	; 9354 <__tTString_setFilter_veneer+0x4>
    9354:	08016689 	.word	0x08016689

00009358 <__tTriLFO_setFreq_veneer>:
    9358:	f85f f000 	ldr.w	pc, [pc]	; 935c <__tTriLFO_setFreq_veneer+0x4>
    935c:	08014eb5 	.word	0x08014eb5

00009360 <__tPBSaw_setFreq_veneer>:
    9360:	f85f f000 	ldr.w	pc, [pc]	; 9364 <__tPBSaw_setFreq_veneer+0x4>
    9364:	080147b9 	.word	0x080147b9

00009368 <__tSquareLFO_tick_veneer>:
    9368:	f85f f000 	ldr.w	pc, [pc]	; 936c <__tSquareLFO_tick_veneer+0x4>
    936c:	08014b91 	.word	0x08014b91

00009370 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    9370:	f85f f000 	ldr.w	pc, [pc]	; 9374 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    9374:	0801543d 	.word	0x0801543d

00009378 <__tSineTriLFO_setShape_veneer>:
    9378:	f85f f000 	ldr.w	pc, [pc]	; 937c <__tSineTriLFO_setShape_veneer+0x4>
    937c:	08015075 	.word	0x08015075

00009380 <__tVZFilter_tickEfficient_veneer>:
    9380:	f85f f000 	ldr.w	pc, [pc]	; 9384 <__tVZFilter_tickEfficient_veneer+0x4>
    9384:	08011639 	.word	0x08011639

00009388 <__tExpSmooth_setDest_veneer>:
    9388:	f85f f000 	ldr.w	pc, [pc]	; 938c <__tExpSmooth_setDest_veneer+0x4>
    938c:	08010b8d 	.word	0x08010b8d

00009390 <__tADSRT_on_veneer>:
    9390:	f85f f000 	ldr.w	pc, [pc]	; 9394 <__tADSRT_on_veneer+0x4>
    9394:	080105e1 	.word	0x080105e1

00009398 <__tVZFilterBell_setFreq_veneer>:
    9398:	f85f f000 	ldr.w	pc, [pc]	; 939c <__tVZFilterBell_setFreq_veneer+0x4>
    939c:	08012699 	.word	0x08012699

000093a0 <__tVZFilter_setFreqFast_veneer>:
    93a0:	f85f f000 	ldr.w	pc, [pc]	; 93a4 <__tVZFilter_setFreqFast_veneer+0x4>
    93a4:	08011aa9 	.word	0x08011aa9

000093a8 <__tPBTriangle_setSkew_veneer>:
    93a8:	f85f f000 	ldr.w	pc, [pc]	; 93ac <__tPBTriangle_setSkew_veneer+0x4>
    93ac:	080143d5 	.word	0x080143d5

000093b0 <__tSimpleLivingString3_tick_veneer>:
    93b0:	f85f f000 	ldr.w	pc, [pc]	; 93b4 <__tSimpleLivingString3_tick_veneer+0x4>
    93b4:	080155b9 	.word	0x080155b9

000093b8 <__tDiodeFilter_tick_veneer>:
    93b8:	f85f f000 	ldr.w	pc, [pc]	; 93bc <__tDiodeFilter_tick_veneer+0x4>
    93bc:	080129c9 	.word	0x080129c9

000093c0 <__tADSRT_tickNoInterp_veneer>:
    93c0:	f85f f000 	ldr.w	pc, [pc]	; 93c4 <__tADSRT_tickNoInterp_veneer+0x4>
    93c4:	080108e5 	.word	0x080108e5

000093c8 <__tCycle_setFreq_veneer>:
    93c8:	f85f f000 	ldr.w	pc, [pc]	; 93cc <__tCycle_setFreq_veneer+0x4>
    93cc:	080141f9 	.word	0x080141f9

000093d0 <__tADSRT_setSustain_veneer>:
    93d0:	f85f f000 	ldr.w	pc, [pc]	; 93d4 <__tADSRT_setSustain_veneer+0x4>
    93d4:	08010579 	.word	0x08010579

000093d8 <__tLinearDelay_setDelay_veneer>:
    93d8:	f85f f000 	ldr.w	pc, [pc]	; 93dc <__tLinearDelay_setDelay_veneer+0x4>
    93dc:	0800fb5d 	.word	0x0800fb5d

000093e0 <__tSVF_tick_veneer>:
    93e0:	f85f f000 	ldr.w	pc, [pc]	; 93e4 <__tSVF_tick_veneer+0x4>
    93e4:	080113a5 	.word	0x080113a5

000093e8 <__tTString_setPickupModAmp_veneer>:
    93e8:	f85f f000 	ldr.w	pc, [pc]	; 93ec <__tTString_setPickupModAmp_veneer+0x4>
    93ec:	08016645 	.word	0x08016645

000093f0 <__tVoc_set_tongue_shape_and_touch_veneer>:
    93f0:	f85f f000 	ldr.w	pc, [pc]	; 93f4 <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    93f4:	08017f61 	.word	0x08017f61

000093f8 <__tPBTriangle_setFreq_veneer>:
    93f8:	f85f f000 	ldr.w	pc, [pc]	; 93fc <__tPBTriangle_setFreq_veneer+0x4>
    93fc:	080143c1 	.word	0x080143c1

00009400 <__memset_veneer>:
    9400:	f85f f000 	ldr.w	pc, [pc]	; 9404 <__memset_veneer+0x4>
    9404:	08018a6d 	.word	0x08018a6d

00009408 <__arm_fir_interpolate_f32_veneer>:
    9408:	f85f f000 	ldr.w	pc, [pc]	; 940c <__arm_fir_interpolate_f32_veneer+0x4>
    940c:	080180a5 	.word	0x080180a5

00009410 <__tPBSineTriangle_tick_veneer>:
    9410:	f85f f000 	ldr.w	pc, [pc]	; 9414 <__tPBSineTriangle_tick_veneer+0x4>
    9414:	08014479 	.word	0x08014479

00009418 <__setEffectsFunctions_veneer>:
    9418:	f85f f000 	ldr.w	pc, [pc]	; 941c <__setEffectsFunctions_veneer+0x4>
    941c:	08001949 	.word	0x08001949

00009420 <__LEAF_map_veneer>:
    9420:	f85f f000 	ldr.w	pc, [pc]	; 9424 <__LEAF_map_veneer+0x4>
    9424:	08013605 	.word	0x08013605

00009428 <__tTString_setRippleDepth_veneer>:
    9428:	f85f f000 	ldr.w	pc, [pc]	; 942c <__tTString_setRippleDepth_veneer+0x4>
    942c:	0801676d 	.word	0x0801676d

00009430 <__HAL_SPI_Abort_veneer>:
    9430:	f85f f000 	ldr.w	pc, [pc]	; 9434 <__HAL_SPI_Abort_veneer+0x4>
    9434:	0800ac1d 	.word	0x0800ac1d

00009438 <__LEAF_shaper_veneer>:
    9438:	f85f f000 	ldr.w	pc, [pc]	; 943c <__LEAF_shaper_veneer+0x4>
    943c:	080137e1 	.word	0x080137e1

00009440 <__MX_SPI1_Init_veneer>:
    9440:	f85f f000 	ldr.w	pc, [pc]	; 9444 <__MX_SPI1_Init_veneer+0x4>
    9444:	08002ed9 	.word	0x08002ed9

00009448 <__tVoc_set_tenseness_veneer>:
    9448:	f85f f000 	ldr.w	pc, [pc]	; 944c <__tVoc_set_tenseness_veneer+0x4>
    944c:	08017cc5 	.word	0x08017cc5

00009450 <__tTString_setBarPosition_veneer>:
    9450:	f85f f000 	ldr.w	pc, [pc]	; 9454 <__tTString_setBarPosition_veneer+0x4>
    9454:	080166f9 	.word	0x080166f9

00009458 <__tSimpleLivingString3_setPickupPoint_veneer>:
    9458:	f85f f000 	ldr.w	pc, [pc]	; 945c <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    945c:	0801576d 	.word	0x0801576d

00009460 <__tSimpleLivingString3_setDecay_veneer>:
    9460:	f85f f000 	ldr.w	pc, [pc]	; 9464 <__tSimpleLivingString3_setDecay_veneer+0x4>
    9464:	080153e9 	.word	0x080153e9

00009468 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    9468:	f85f f000 	ldr.w	pc, [pc]	; 946c <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    946c:	0800a9e1 	.word	0x0800a9e1

00009470 <__tVoc_set_tractLength_veneer>:
    9470:	f85f f000 	ldr.w	pc, [pc]	; 9474 <__tVoc_set_tractLength_veneer+0x4>
    9474:	08017cbd 	.word	0x08017cbd

00009478 <__tTString_setPickupModFreq_veneer>:
    9478:	f85f f000 	ldr.w	pc, [pc]	; 947c <__tTString_setPickupModFreq_veneer+0x4>
    947c:	0801664d 	.word	0x0801664d

00009480 <__tCycle_setPhase_veneer>:
    9480:	f85f f000 	ldr.w	pc, [pc]	; 9484 <__tCycle_setPhase_veneer+0x4>
    9484:	08014211 	.word	0x08014211

00009488 <__tPBSineTriangle_setFreq_veneer>:
    9488:	f85f f000 	ldr.w	pc, [pc]	; 948c <__tPBSineTriangle_setFreq_veneer+0x4>
    948c:	080145d1 	.word	0x080145d1

00009490 <__tVZFilterHS_setFreqFast_veneer>:
    9490:	f85f f000 	ldr.w	pc, [pc]	; 9494 <__tVZFilterHS_setFreqFast_veneer+0x4>
    9494:	080122dd 	.word	0x080122dd

00009498 <__tADSRT_setLeakFactor_veneer>:
    9498:	f85f f000 	ldr.w	pc, [pc]	; 949c <__tADSRT_setLeakFactor_veneer+0x4>
    949c:	080105bd 	.word	0x080105bd

000094a0 <__tTString_tick_veneer>:
    94a0:	f85f f000 	ldr.w	pc, [pc]	; 94a4 <__tTString_tick_veneer+0x4>
    94a4:	08015da1 	.word	0x08015da1

000094a8 <__tVoc_init_veneer>:
    94a8:	f85f f000 	ldr.w	pc, [pc]	; 94ac <__tVoc_init_veneer+0x4>
    94ac:	08017b9d 	.word	0x08017b9d

000094b0 <__tPBPulse_setFreq_veneer>:
    94b0:	f85f f000 	ldr.w	pc, [pc]	; 94b4 <__tPBPulse_setFreq_veneer+0x4>
    94b4:	080146d5 	.word	0x080146d5

000094b8 <__tPBTriangle_tick_veneer>:
    94b8:	f85f f000 	ldr.w	pc, [pc]	; 94bc <__tPBTriangle_tick_veneer+0x4>
    94bc:	08014295 	.word	0x08014295

000094c0 <__tTriLFO_setPhase_veneer>:
    94c0:	f85f f000 	ldr.w	pc, [pc]	; 94c4 <__tTriLFO_setPhase_veneer+0x4>
    94c4:	08014ecd 	.word	0x08014ecd

000094c8 <__tSimpleLivingString3_setFreq_veneer>:
    94c8:	f85f f000 	ldr.w	pc, [pc]	; 94cc <__tSimpleLivingString3_setFreq_veneer+0x4>
    94cc:	08015341 	.word	0x08015341

000094d0 <__arm_sin_f32_veneer>:
    94d0:	f85f f000 	ldr.w	pc, [pc]	; 94d4 <__arm_sin_f32_veneer+0x4>
    94d4:	08018895 	.word	0x08018895

000094d8 <__tTString_setTensionGain_veneer>:
    94d8:	f85f f000 	ldr.w	pc, [pc]	; 94dc <__tTString_setTensionGain_veneer+0x4>
    94dc:	080166f1 	.word	0x080166f1

000094e0 <__tSimpleLivingString3_pluck_veneer>:
    94e0:	f85f f000 	ldr.w	pc, [pc]	; 94e4 <__tSimpleLivingString3_pluck_veneer+0x4>
    94e4:	08015461 	.word	0x08015461

000094e8 <__tVZFilterLS_tick_veneer>:
    94e8:	f85f f000 	ldr.w	pc, [pc]	; 94ec <__tVZFilterLS_tick_veneer+0x4>
    94ec:	08011fa1 	.word	0x08011fa1

000094f0 <__dbToATableLookup_veneer>:
    94f0:	f85f f000 	ldr.w	pc, [pc]	; 94f4 <__dbToATableLookup_veneer+0x4>
    94f4:	08000661 	.word	0x08000661

000094f8 <__fasterexpf_veneer>:
    94f8:	f85f f000 	ldr.w	pc, [pc]	; 94fc <__fasterexpf_veneer+0x4>
    94fc:	080136ad 	.word	0x080136ad

00009500 <__arm_fir_decimate_f32_veneer>:
    9500:	f85f f000 	ldr.w	pc, [pc]	; 9504 <__arm_fir_decimate_f32_veneer+0x4>
    9504:	08018525 	.word	0x08018525

00009508 <__tVZFilterBell_setGain_veneer>:
    9508:	f85f f000 	ldr.w	pc, [pc]	; 950c <__tVZFilterBell_setGain_veneer+0x4>
    950c:	08012865 	.word	0x08012865

00009510 <__tCycle_tick_veneer>:
    9510:	f85f f000 	ldr.w	pc, [pc]	; 9514 <__tCycle_tick_veneer+0x4>
    9514:	080141ad 	.word	0x080141ad

00009518 <__tDiodeFilter_setQ_veneer>:
    9518:	f85f f000 	ldr.w	pc, [pc]	; 951c <__tDiodeFilter_setQ_veneer+0x4>
    951c:	080131e5 	.word	0x080131e5

00009520 <__LEAF_clip_veneer>:
    9520:	f85f f000 	ldr.w	pc, [pc]	; 9524 <__LEAF_clip_veneer+0x4>
    9524:	080138a5 	.word	0x080138a5

00009528 <__tSimpleLivingString3_setDampFreq_veneer>:
    9528:	f85f f000 	ldr.w	pc, [pc]	; 952c <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    952c:	080153e1 	.word	0x080153e1

00009530 <__tSVF_setFreqFast_veneer>:
    9530:	f85f f000 	ldr.w	pc, [pc]	; 9534 <__tSVF_setFreqFast_veneer+0x4>
    9534:	08011481 	.word	0x08011481

00009538 <__tPBSaw_tick_veneer>:
    9538:	f85f f000 	ldr.w	pc, [pc]	; 953c <__tPBSaw_tick_veneer+0x4>
    953c:	08014769 	.word	0x08014769

00009540 <__tTString_mute_veneer>:
    9540:	f85f f000 	ldr.w	pc, [pc]	; 9544 <__tTString_mute_veneer+0x4>
    9544:	0801665d 	.word	0x0801665d

00009548 <__tTString_pluck_veneer>:
    9548:	f85f f000 	ldr.w	pc, [pc]	; 954c <__tTString_pluck_veneer+0x4>
    954c:	08016889 	.word	0x08016889

00009550 <__fastSine_veneer>:
    9550:	f85f f000 	ldr.w	pc, [pc]	; 9554 <__fastSine_veneer+0x4>
    9554:	08013989 	.word	0x08013989

00009558 <__tCrusher_tick_veneer>:
    9558:	f85f f000 	ldr.w	pc, [pc]	; 955c <__tCrusher_tick_veneer+0x4>
    955c:	08010089 	.word	0x08010089

00009560 <__tVoc_set_velum_veneer>:
    9560:	f85f f000 	ldr.w	pc, [pc]	; 9564 <__tVoc_set_velum_veneer+0x4>
    9564:	08017cd1 	.word	0x08017cd1

00009568 <__tTString_setDecay_veneer>:
    9568:	f85f f000 	ldr.w	pc, [pc]	; 956c <__tTString_setDecay_veneer+0x4>
    956c:	080165cd 	.word	0x080165cd

00009570 <__tSimpleLivingString3_free_veneer>:
    9570:	f85f f000 	ldr.w	pc, [pc]	; 9574 <__tSimpleLivingString3_free_veneer+0x4>
    9574:	08015301 	.word	0x08015301

00009578 <__tADSRT_off_veneer>:
    9578:	f85f f000 	ldr.w	pc, [pc]	; 957c <__tADSRT_off_veneer+0x4>
    957c:	08010605 	.word	0x08010605

00009580 <__tTString_initToPool_veneer>:
    9580:	f85f f000 	ldr.w	pc, [pc]	; 9584 <__tTString_initToPool_veneer+0x4>
    9584:	08015775 	.word	0x08015775

00009588 <__tSineTriLFO_tick_veneer>:
    9588:	f85f f000 	ldr.w	pc, [pc]	; 958c <__tSineTriLFO_tick_veneer+0x4>
    958c:	08014f79 	.word	0x08014f79

00009590 <__tExpSmooth_tick_veneer>:
    9590:	f85f f000 	ldr.w	pc, [pc]	; 9594 <__tExpSmooth_tick_veneer+0x4>
    9594:	08010ba9 	.word	0x08010ba9

00009598 <__tSimpleLivingString3_setTargetLev_veneer>:
    9598:	f85f f000 	ldr.w	pc, [pc]	; 959c <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    959c:	08015435 	.word	0x08015435

000095a0 <__tCrusher_setOperation_veneer>:
    95a0:	f85f f000 	ldr.w	pc, [pc]	; 95a4 <__tCrusher_setOperation_veneer+0x4>
    95a4:	08010109 	.word	0x08010109

000095a8 <__tCompressor_tick_veneer>:
    95a8:	f85f f000 	ldr.w	pc, [pc]	; 95ac <__tCompressor_tick_veneer+0x4>
    95ac:	08010221 	.word	0x08010221

000095b0 <__tSawSquareLFO_tick_veneer>:
    95b0:	f85f f000 	ldr.w	pc, [pc]	; 95b4 <__tSawSquareLFO_tick_veneer+0x4>
    95b4:	08014cf5 	.word	0x08014cf5

000095b8 <__mtofTableLookup_veneer>:
    95b8:	f85f f000 	ldr.w	pc, [pc]	; 95bc <__mtofTableLookup_veneer+0x4>
    95bc:	080006dd 	.word	0x080006dd

000095c0 <__tPBSawSquare_setShape_veneer>:
    95c0:	f85f f000 	ldr.w	pc, [pc]	; 95c4 <__tPBSawSquare_setShape_veneer+0x4>
    95c4:	080148bd 	.word	0x080148bd

000095c8 <__tSawSquareLFO_setShape_veneer>:
    95c8:	f85f f000 	ldr.w	pc, [pc]	; 95cc <__tSawSquareLFO_setShape_veneer+0x4>
    95cc:	08014e25 	.word	0x08014e25

000095d0 <__tTString_setHarmonicity_veneer>:
    95d0:	f85f f000 	ldr.w	pc, [pc]	; 95d4 <__tTString_setHarmonicity_veneer+0x4>
    95d4:	08016b55 	.word	0x08016b55

000095d8 <__tVZFilterLS_setFreqFast_veneer>:
    95d8:	f85f f000 	ldr.w	pc, [pc]	; 95dc <__tVZFilterLS_setFreqFast_veneer+0x4>
    95dc:	08011ff5 	.word	0x08011ff5

000095e0 <__MX_SPI5_Init_veneer>:
    95e0:	f85f f000 	ldr.w	pc, [pc]	; 95e4 <__MX_SPI5_Init_veneer+0x4>
    95e4:	08002f31 	.word	0x08002f31

000095e8 <__tTString_setFeedbackStrength_veneer>:
    95e8:	f85f f000 	ldr.w	pc, [pc]	; 95ec <__tTString_setFeedbackStrength_veneer+0x4>
    95ec:	08016805 	.word	0x08016805

000095f0 <__tPBSawSquare_tick_veneer>:
    95f0:	f85f f000 	ldr.w	pc, [pc]	; 95f4 <__tPBSawSquare_tick_veneer+0x4>
    95f4:	08014809 	.word	0x08014809

000095f8 <__tIntPhasor_setPhase_veneer>:
    95f8:	f85f f000 	ldr.w	pc, [pc]	; 95fc <__tIntPhasor_setPhase_veneer+0x4>
    95fc:	08014a25 	.word	0x08014a25

00009600 <__tADSRT_setDecay_veneer>:
    9600:	f85f f000 	ldr.w	pc, [pc]	; 9604 <__tADSRT_setDecay_veneer+0x4>
    9604:	08010551 	.word	0x08010551

00009608 <__tADSRT_setAttack_veneer>:
    9608:	f85f f000 	ldr.w	pc, [pc]	; 960c <__tADSRT_setAttack_veneer+0x4>
    960c:	08010529 	.word	0x08010529

00009610 <__tVZFilterHS_tick_veneer>:
    9610:	f85f f000 	ldr.w	pc, [pc]	; 9614 <__tVZFilterHS_tick_veneer+0x4>
    9614:	08012289 	.word	0x08012289

00009618 <__tTString_free_veneer>:
    9618:	f85f f000 	ldr.w	pc, [pc]	; 961c <__tTString_free_veneer+0x4>
    961c:	08015d11 	.word	0x08015d11

00009620 <__setLFOShapes_veneer>:
    9620:	f85f f000 	ldr.w	pc, [pc]	; 9624 <__setLFOShapes_veneer+0x4>
    9624:	08001fad 	.word	0x08001fad

00009628 <__tSawSquareLFO_setPhase_veneer>:
    9628:	f85f f000 	ldr.w	pc, [pc]	; 962c <__tSawSquareLFO_setPhase_veneer+0x4>
    962c:	08014dc1 	.word	0x08014dc1

00009630 <__tPBSawSquare_setFreq_veneer>:
    9630:	f85f f000 	ldr.w	pc, [pc]	; 9634 <__tPBSawSquare_setFreq_veneer+0x4>
    9634:	080148a5 	.word	0x080148a5

00009638 <__tPBPulse_tick_veneer>:
    9638:	f85f f000 	ldr.w	pc, [pc]	; 963c <__tPBPulse_tick_veneer+0x4>
    963c:	08014655 	.word	0x08014655

00009640 <__tLinearDelay_tick_veneer>:
    9640:	f85f f000 	ldr.w	pc, [pc]	; 9644 <__tLinearDelay_tick_veneer+0x4>
    9644:	0800fa65 	.word	0x0800fa65

00009648 <__tCrusher_setQuality_veneer>:
    9648:	f85f f000 	ldr.w	pc, [pc]	; 964c <__tCrusher_setQuality_veneer+0x4>
    964c:	0801011d 	.word	0x0801011d

00009650 <__tTString_setOpenStringFrequency_veneer>:
    9650:	f85f f000 	ldr.w	pc, [pc]	; 9654 <__tTString_setOpenStringFrequency_veneer+0x4>
    9654:	0801671d 	.word	0x0801671d

00009658 <__mtof_veneer>:
    9658:	f85f f000 	ldr.w	pc, [pc]	; 965c <__mtof_veneer+0x4>
    965c:	08013d0d 	.word	0x08013d0d

00009660 <__tTString_setTensionSpeed_veneer>:
    9660:	f85f f000 	ldr.w	pc, [pc]	; 9664 <__tTString_setTensionSpeed_veneer+0x4>
    9664:	0801673d 	.word	0x0801673d

00009668 <__tCycle_init_veneer>:
    9668:	f85f f000 	ldr.w	pc, [pc]	; 966c <__tCycle_init_veneer+0x4>
    966c:	08014135 	.word	0x08014135

00009670 <__tSquareLFO_setPhase_veneer>:
    9670:	f85f f000 	ldr.w	pc, [pc]	; 9674 <__tSquareLFO_setPhase_veneer+0x4>
    9674:	08014c49 	.word	0x08014c49

00009678 <__tVoc_setDoubleComputeFlag_veneer>:
    9678:	f85f f000 	ldr.w	pc, [pc]	; 967c <__tVoc_setDoubleComputeFlag_veneer+0x4>
    967c:	08017ca9 	.word	0x08017ca9

00009680 <__tSineTriLFO_setFreq_veneer>:
    9680:	f85f f000 	ldr.w	pc, [pc]	; 9684 <__tSineTriLFO_setFreq_veneer+0x4>
    9684:	08015015 	.word	0x08015015

00009688 <__tLadderFilter_tick_veneer>:
    9688:	f85f f000 	ldr.w	pc, [pc]	; 968c <__tLadderFilter_tick_veneer+0x4>
    968c:	080132fd 	.word	0x080132fd

00009690 <__HAL_RNG_GenerateRandomNumber_veneer>:
    9690:	f85f f000 	ldr.w	pc, [pc]	; 9694 <__HAL_RNG_GenerateRandomNumber_veneer+0x4>
    9694:	08008d35 	.word	0x08008d35

00009698 <__tSVF_setQ_veneer>:
    9698:	f85f f000 	ldr.w	pc, [pc]	; 969c <__tSVF_setQ_veneer+0x4>
    969c:	08011505 	.word	0x08011505

000096a0 <__tSimpleLivingString3_setLevMode_veneer>:
    96a0:	f85f f000 	ldr.w	pc, [pc]	; 96a4 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    96a4:	0801544d 	.word	0x0801544d

000096a8 <__tIntPhasor_tick_veneer>:
    96a8:	f85f f000 	ldr.w	pc, [pc]	; 96ac <__tIntPhasor_tick_veneer+0x4>
    96ac:	080149ed 	.word	0x080149ed

000096b0 <__memcpy_veneer>:
    96b0:	f85f f000 	ldr.w	pc, [pc]	; 96b4 <__memcpy_veneer+0x4>
    96b4:	08018ac5 	.word	0x08018ac5

000096b8 <__tTString_setFreq_veneer>:
    96b8:	f85f f000 	ldr.w	pc, [pc]	; 96bc <__tTString_setFreq_veneer+0x4>
    96bc:	08016559 	.word	0x08016559

000096c0 <__tADSRT_setRelease_veneer>:
    96c0:	f85f f000 	ldr.w	pc, [pc]	; 96c4 <__tADSRT_setRelease_veneer+0x4>
    96c4:	08010595 	.word	0x08010595

000096c8 <__tSimpleLivingString3_initToPool_veneer>:
    96c8:	f85f f000 	ldr.w	pc, [pc]	; 96cc <__tSimpleLivingString3_initToPool_veneer+0x4>
    96cc:	08015081 	.word	0x08015081

000096d0 <__tSineTriLFO_setPhase_veneer>:
    96d0:	f85f f000 	ldr.w	pc, [pc]	; 96d4 <__tSineTriLFO_setPhase_veneer+0x4>
    96d4:	08015045 	.word	0x08015045

000096d8 <__tTapeDelay_setDelay_veneer>:
    96d8:	f85f f000 	ldr.w	pc, [pc]	; 96dc <__tTapeDelay_setDelay_veneer+0x4>
    96dc:	08010005 	.word	0x08010005

000096e0 <__tDiodeFilter_tickEfficient_veneer>:
    96e0:	f85f f000 	ldr.w	pc, [pc]	; 96e4 <__tDiodeFilter_tickEfficient_veneer+0x4>
    96e4:	08012da9 	.word	0x08012da9

000096e8 <__setFilterTypes_veneer>:
    96e8:	f85f f000 	ldr.w	pc, [pc]	; 96ec <__setFilterTypes_veneer+0x4>
    96ec:	08001e15 	.word	0x08001e15

000096f0 <__tIntPhasor_setFreq_veneer>:
    96f0:	f85f f000 	ldr.w	pc, [pc]	; 96f4 <__tIntPhasor_setFreq_veneer+0x4>
    96f4:	08014a0d 	.word	0x08014a0d

000096f8 <__tCrusher_setRound_veneer>:
    96f8:	f85f f000 	ldr.w	pc, [pc]	; 96fc <__tCrusher_setRound_veneer+0x4>
    96fc:	08010169 	.word	0x08010169

00009700 <__tTriLFO_tick_veneer>:
    9700:	f85f f000 	ldr.w	pc, [pc]	; 9704 <__tTriLFO_tick_veneer+0x4>
    9704:	08014e81 	.word	0x08014e81

00009708 <__tVoc_setFreq_veneer>:
    9708:	f85f f000 	ldr.w	pc, [pc]	; 970c <__tVoc_setFreq_veneer+0x4>
    970c:	08017cb1 	.word	0x08017cb1

00009710 <__tADSRT_clear_veneer>:
    9710:	f85f f000 	ldr.w	pc, [pc]	; 9714 <__tADSRT_clear_veneer+0x4>
    9714:	08010615 	.word	0x08010615

00009718 <__tExpSmooth_setValAndDest_veneer>:
    9718:	f85f f000 	ldr.w	pc, [pc]	; 971c <__tExpSmooth_setValAndDest_veneer+0x4>
    971c:	08010b9d 	.word	0x08010b9d

00009720 <__tExpSmooth_init_veneer>:
    9720:	f85f f000 	ldr.w	pc, [pc]	; 9724 <__tExpSmooth_init_veneer+0x4>
    9724:	08010a89 	.word	0x08010a89

00009728 <__tSawSquareLFO_setFreq_veneer>:
    9728:	f85f f000 	ldr.w	pc, [pc]	; 972c <__tSawSquareLFO_setFreq_veneer+0x4>
    972c:	08014d79 	.word	0x08014d79

00009730 <__tanhf_veneer>:
    9730:	f85f f000 	ldr.w	pc, [pc]	; 9734 <__tanhf_veneer+0x4>
    9734:	08019785 	.word	0x08019785

00009738 <__tCrusher_setSamplingRatio_veneer>:
    9738:	f85f f000 	ldr.w	pc, [pc]	; 973c <__tCrusher_setSamplingRatio_veneer+0x4>
    973c:	08010171 	.word	0x08010171

00009740 <__tVZFilter_setGain_veneer>:
    9740:	f85f f000 	ldr.w	pc, [pc]	; 9744 <__tVZFilter_setGain_veneer+0x4>
    9744:	08011d7d 	.word	0x08011d7d

00009748 <__tADSRT_tick_veneer>:
    9748:	f85f f000 	ldr.w	pc, [pc]	; 974c <__tADSRT_tick_veneer+0x4>
    974c:	08010621 	.word	0x08010621

00009750 <__tSquareLFO_setFreq_veneer>:
    9750:	f85f f000 	ldr.w	pc, [pc]	; 9754 <__tSquareLFO_setFreq_veneer+0x4>
    9754:	08014bd9 	.word	0x08014bd9

00009758 <__tTString_setPickupPos_veneer>:
    9758:	f85f f000 	ldr.w	pc, [pc]	; 975c <__tTString_setPickupPos_veneer+0x4>
    975c:	0801663d 	.word	0x0801663d
