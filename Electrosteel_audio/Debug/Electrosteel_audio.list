
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ec38  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018ee0  0801eed0  0801eed0  0002eed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08037db0  08037db0  0005037c  2**0
                  CONTENTS
  4 .ARM          00000000  08037db0  08037db0  0005037c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08037db0  08037db0  0005037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08037db0  08037db0  00047db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08037db4  08037db4  00047db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000037c  20000000  08037db8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019bcc  20000380  08038134  00050380  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20019f4c  08038134  00059f4c  2**0
                  ALLOC
 11 .RAM_D1       0007efc0  24000000  24000000  00060000  2**5
                  ALLOC
 12 .RAM_D2       000011e0  30000000  30000000  00060000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00060000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0005037c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00083cd7  00000000  00000000  000503aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000098fc  00000000  00000000  000d4081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00078a84  00000000  00000000  000dd97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000038c8  00000000  00000000  00156408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000eec0  00000000  00000000  00159cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00059c5e  00000000  00000000  00168b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0001190d  00000000  00000000  001c27ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000c5  00000000  00000000  001d40fb  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c894  00000000  00000000  001d41c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000380 	.word	0x20000380
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801eeb8 	.word	0x0801eeb8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000384 	.word	0x20000384
 80002d4:	0801eeb8 	.word	0x0801eeb8

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000664:	4cd5      	ldr	r4, [pc, #852]	; (80009bc <audioInit+0x35c>)
{
 8000666:	460d      	mov	r5, r1
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000668:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 80009c0 <audioInit+0x360>
 800066c:	f24e 2290 	movw	r2, #58000	; 0xe290
 8000670:	4620      	mov	r0, r4
 8000672:	49d4      	ldr	r1, [pc, #848]	; (80009c4 <audioInit+0x364>)
 8000674:	4bd4      	ldr	r3, [pc, #848]	; (80009c8 <audioInit+0x368>)
{
 8000676:	ed2d 8b0a 	vpush	{d8-d12}
 800067a:	b085      	sub	sp, #20

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc

	//a table that maps bar mapping values (frequency ratios from 1 to 8) to midinote offsets caused by the bar (for the filter computation, which stays in midi world)
    float increment = 1.0f / (float)(MAPPING_TABLE_SIZE - 1);
    float x = 0.0f;
 800067c:	ed9f 8ad3 	vldr	s16, [pc, #844]	; 80009cc <audioInit+0x36c>
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000680:	f01c f89a 	bl	801c7b8 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000684:	4623      	mov	r3, r4
 8000686:	4ad2      	ldr	r2, [pc, #840]	; (80009d0 <audioInit+0x370>)
{
 8000688:	ee0c 5a90 	vmov	s25, r5
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 800068c:	49d1      	ldr	r1, [pc, #836]	; (80009d4 <audioInit+0x374>)
 800068e:	48d2      	ldr	r0, [pc, #840]	; (80009d8 <audioInit+0x378>)
 8000690:	f016 fac6 	bl	8016c20 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8000694:	4623      	mov	r3, r4
 8000696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800069a:	49d0      	ldr	r1, [pc, #832]	; (80009dc <audioInit+0x37c>)
 800069c:	48d0      	ldr	r0, [pc, #832]	; (80009e0 <audioInit+0x380>)
 800069e:	f016 fabf 	bl	8016c20 <tMempool_init>
	leaf.clearOnAllocation = 1;
 80006a2:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 80006a4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80006a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ac:	eef0 0a48 	vmov.f32	s1, s16
 80006b0:	eddf 1acc 	vldr	s3, [pc, #816]	; 80009e4 <audioInit+0x384>
 80006b4:	ed9f 0acc 	vldr	s0, [pc, #816]	; 80009e8 <audioInit+0x388>
 80006b8:	48cc      	ldr	r0, [pc, #816]	; (80009ec <audioInit+0x38c>)
	leaf.clearOnAllocation = 1;
 80006ba:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 80006bc:	f016 f836 	bl	801672c <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 80006c0:	4bcb      	ldr	r3, [pc, #812]	; (80009f0 <audioInit+0x390>)
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 80006c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 80006c6:	4acb      	ldr	r2, [pc, #812]	; (80009f4 <audioInit+0x394>)
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 80006c8:	eddf 0acb 	vldr	s1, [pc, #812]	; 80009f8 <audioInit+0x398>
 80006cc:	ed9f 0acb 	vldr	s0, [pc, #812]	; 80009fc <audioInit+0x39c>
 80006d0:	48cb      	ldr	r0, [pc, #812]	; (8000a00 <audioInit+0x3a0>)
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 80006d2:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 80006d4:	f016 f88e 	bl	80167f4 <LEAF_generate_mtof>
    float scalar = 7.0f;
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
    {
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 80006d8:	eddf 9aca 	vldr	s19, [pc, #808]	; 8000a04 <audioInit+0x3a4>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 80006dc:	4bca      	ldr	r3, [pc, #808]	; (8000a08 <audioInit+0x3a8>)
 80006de:	4acb      	ldr	r2, [pc, #812]	; (8000a0c <audioInit+0x3ac>)
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 80006e0:	ed9f 9acb 	vldr	s18, [pc, #812]	; 8000a10 <audioInit+0x3b0>
        x += increment;
 80006e4:	eddf 8acb 	vldr	s17, [pc, #812]	; 8000a14 <audioInit+0x3b4>
 80006e8:	4ccb      	ldr	r4, [pc, #812]	; (8000a18 <audioInit+0x3b8>)
 80006ea:	4dcc      	ldr	r5, [pc, #816]	; (8000a1c <audioInit+0x3bc>)
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 80006ec:	601a      	str	r2, [r3, #0]
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 80006ee:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 80006f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80006f6:	eea8 0a27 	vfma.f32	s0, s16, s15
        x += increment;
 80006fa:	ee38 8a28 	vadd.f32	s16, s16, s17
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 80006fe:	ee20 0a29 	vmul.f32	s0, s0, s19
 8000702:	f016 f945 	bl	8016990 <ftom>
 8000706:	ee30 0a49 	vsub.f32	s0, s0, s18
 800070a:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
 800070e:	42ac      	cmp	r4, r5
 8000710:	d1ed      	bne.n	80006ee <audioInit+0x8e>
    }


	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000712:	2102      	movs	r1, #2
 8000714:	48c2      	ldr	r0, [pc, #776]	; (8000a20 <audioInit+0x3c0>)
 8000716:	f009 fc21 	bl	8009f5c <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 800071a:	2120      	movs	r1, #32
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800071c:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 800071e:	48c1      	ldr	r0, [pc, #772]	; (8000a24 <audioInit+0x3c4>)
 8000720:	f009 fc1c 	bl	8009f5c <HAL_GPIO_ReadPin>
 8000724:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000726:	2101      	movs	r1, #1
 8000728:	48bf      	ldr	r0, [pc, #764]	; (8000a28 <audioInit+0x3c8>)
 800072a:	f009 fc17 	bl	8009f5c <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));


	if (numStrings == 6)
 800072e:	4bbf      	ldr	r3, [pc, #764]	; (8000a2c <audioInit+0x3cc>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000730:	00a4      	lsls	r4, r4, #2
 8000732:	49bf      	ldr	r1, [pc, #764]	; (8000a30 <audioInit+0x3d0>)
	if (numStrings == 6)
 8000734:	781a      	ldrb	r2, [r3, #0]
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000736:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	if (numStrings == 6)
 800073a:	2a06      	cmp	r2, #6
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 800073c:	4418      	add	r0, r3
 800073e:	b2c3      	uxtb	r3, r0
 8000740:	700b      	strb	r3, [r1, #0]
	if (numStrings == 6)
 8000742:	f000 8374 	beq.w	8000e2e <audioInit+0x7ce>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
 8000746:	2a0a      	cmp	r2, #10
 8000748:	f000 8365 	beq.w	8000e16 <audioInit+0x7b6>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	48b9      	ldr	r0, [pc, #740]	; (8000a34 <audioInit+0x3d4>)
		numStringsThisBoard = 2;
 8000750:	4ab9      	ldr	r2, [pc, #740]	; (8000a38 <audioInit+0x3d8>)
 8000752:	2102      	movs	r1, #2
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000754:	6003      	str	r3, [r0, #0]
		numStringsThisBoard = 2;
 8000756:	7011      	strb	r1, [r2, #0]
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{

		tSlide_init(&freqSlider[i], 2, 2, &leaf);
 8000758:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800075c:	4997      	ldr	r1, [pc, #604]	; (80009bc <audioInit+0x35c>)
 800075e:	48b7      	ldr	r0, [pc, #732]	; (8000a3c <audioInit+0x3dc>)
 8000760:	4cb7      	ldr	r4, [pc, #732]	; (8000a40 <audioInit+0x3e0>)
 8000762:	eeb0 0a60 	vmov.f32	s0, s1


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000766:	4d95      	ldr	r5, [pc, #596]	; (80009bc <audioInit+0x35c>)
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
 8000768:	f014 f9f4 	bl	8014b54 <tSlide_init>
 800076c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000770:	4992      	ldr	r1, [pc, #584]	; (80009bc <audioInit+0x35c>)
 8000772:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8000776:	48b3      	ldr	r0, [pc, #716]	; (8000a44 <audioInit+0x3e4>)
 8000778:	eeb0 0a60 	vmov.f32	s0, s1
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 800077c:	eddf 8ab2 	vldr	s17, [pc, #712]	; 8000a48 <audioInit+0x3e8>
 8000780:	ed9f 8a92 	vldr	s16, [pc, #584]	; 80009cc <audioInit+0x36c>
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
 8000784:	f014 f9e6 	bl	8014b54 <tSlide_init>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000788:	498c      	ldr	r1, [pc, #560]	; (80009bc <audioInit+0x35c>)
 800078a:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8000a48 <audioInit+0x3e8>
 800078e:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 80009cc <audioInit+0x36c>
 8000792:	48ae      	ldr	r0, [pc, #696]	; (8000a4c <audioInit+0x3ec>)
 8000794:	f014 f972 	bl	8014a7c <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000798:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
 800079a:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 800079c:	eef0 0a68 	vmov.f32	s1, s17
 80007a0:	4629      	mov	r1, r5
 80007a2:	eeb0 0a48 	vmov.f32	s0, s16
 80007a6:	f014 f969 	bl	8014a7c <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 80007aa:	42b4      	cmp	r4, r6
 80007ac:	d1f4      	bne.n	8000798 <audioInit+0x138>
 80007ae:	4ca8      	ldr	r4, [pc, #672]	; (8000a50 <audioInit+0x3f0>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 80007b0:	4e82      	ldr	r6, [pc, #520]	; (80009bc <audioInit+0x35c>)
 80007b2:	eddf 8aa5 	vldr	s17, [pc, #660]	; 8000a48 <audioInit+0x3e8>
 80007b6:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80007ba:	ed9f 8a84 	vldr	s16, [pc, #528]	; 80009cc <audioInit+0x36c>
 80007be:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
 80007c0:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 80007c2:	eef0 0a68 	vmov.f32	s1, s17
 80007c6:	4631      	mov	r1, r6
 80007c8:	eeb0 0a48 	vmov.f32	s0, s16
 80007cc:	f014 f956 	bl	8014a7c <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 80007d0:	42ac      	cmp	r4, r5
 80007d2:	d1f4      	bne.n	80007be <audioInit+0x15e>
 80007d4:	2600      	movs	r6, #0
 80007d6:	4b9f      	ldr	r3, [pc, #636]	; (8000a54 <audioInit+0x3f4>)
 80007d8:	f8df b318 	ldr.w	fp, [pc, #792]	; 8000af4 <audioInit+0x494>

		for(int i = 0; i < NUM_OSC; i++)
		{


			tMBSaw_init(&saw[i][v],  &leaf);
 80007dc:	4c77      	ldr	r4, [pc, #476]	; (80009bc <audioInit+0x35c>)

			tMBSawPulse_init(&sawPaired[i][v], &leaf);

			tMBSineTri_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 80007de:	eddf ba9e 	vldr	s23, [pc, #632]	; 8000a58 <audioInit+0x3f8>


		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
 80007e2:	ed9f ca9e 	vldr	s24, [pc, #632]	; 8000a5c <audioInit+0x3fc>
 80007e6:	eddf 8a79 	vldr	s17, [pc, #484]	; 80009cc <audioInit+0x36c>
					                                 0.99999f, 0.0f, 0.01f,
					                                 0.01f, 0, &mediumPool);

		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &mediumPool);
 80007ea:	ed9f 9a9d 	vldr	s18, [pc, #628]	; 8000a60 <audioInit+0x400>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 80007ee:	eddf aa9d 	vldr	s21, [pc, #628]	; 8000a64 <audioInit+0x404>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80007f2:	e9cd 3600 	strd	r3, r6, [sp]
    float x = 0.0f;
 80007f6:	2500      	movs	r5, #0
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 80007f8:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 8000a68 <audioInit+0x408>
			tMBSaw_init(&saw[i][v],  &leaf);
 80007fc:	4b9b      	ldr	r3, [pc, #620]	; (8000a6c <audioInit+0x40c>)
 80007fe:	4621      	mov	r1, r4
 8000800:	1998      	adds	r0, r3, r6
 8000802:	4428      	add	r0, r5
 8000804:	f019 fa6e 	bl	8019ce4 <tMBSaw_init>
			tMBPulse_init(&pulse[i][v], &leaf);
 8000808:	4b99      	ldr	r3, [pc, #612]	; (8000a70 <audioInit+0x410>)
 800080a:	4621      	mov	r1, r4
 800080c:	1998      	adds	r0, r3, r6
 800080e:	4428      	add	r0, r5
 8000810:	f016 fb46 	bl	8016ea0 <tMBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 8000814:	4b97      	ldr	r3, [pc, #604]	; (8000a74 <audioInit+0x414>)
 8000816:	4621      	mov	r1, r4
 8000818:	1998      	adds	r0, r3, r6
 800081a:	4428      	add	r0, r5
 800081c:	f016 fa80 	bl	8016d20 <tCycle_init>
			tMBTriangle_init(&tri[i][v],  &leaf);
 8000820:	4b95      	ldr	r3, [pc, #596]	; (8000a78 <audioInit+0x418>)
 8000822:	4621      	mov	r1, r4
 8000824:	1998      	adds	r0, r3, r6
 8000826:	4428      	add	r0, r5
 8000828:	f017 f926 	bl	8017a78 <tMBTriangle_init>
			tMBSawPulse_init(&sawPaired[i][v], &leaf);
 800082c:	4b93      	ldr	r3, [pc, #588]	; (8000a7c <audioInit+0x41c>)
 800082e:	4621      	mov	r1, r4
 8000830:	1998      	adds	r0, r3, r6
 8000832:	4428      	add	r0, r5
 8000834:	f019 fd14 	bl	801a260 <tMBSawPulse_init>
			tMBSineTri_init(&sinePaired[i][v],&leaf);
 8000838:	4b91      	ldr	r3, [pc, #580]	; (8000a80 <audioInit+0x420>)
 800083a:	4621      	mov	r1, r4
 800083c:	1998      	adds	r0, r3, r6
 800083e:	4428      	add	r0, r5
 8000840:	f018 f990 	bl	8018b64 <tMBSineTri_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 8000844:	4b8f      	ldr	r3, [pc, #572]	; (8000a84 <audioInit+0x424>)
 8000846:	eef0 0a48 	vmov.f32	s1, s16
 800084a:	4621      	mov	r1, r4
 800084c:	1998      	adds	r0, r3, r6
 800084e:	eeb0 0a6b 	vmov.f32	s0, s23
 8000852:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
 8000854:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 8000856:	f014 f911 	bl	8014a7c <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
 800085a:	2d18      	cmp	r5, #24
 800085c:	d1ce      	bne.n	80007fc <audioInit+0x19c>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
 800085e:	488a      	ldr	r0, [pc, #552]	; (8000a88 <audioInit+0x428>)
 8000860:	eef0 2a4c 	vmov.f32	s5, s24
 8000864:	eef0 1a68 	vmov.f32	s3, s17
 8000868:	ed9f 2a7c 	vldr	s4, [pc, #496]	; 8000a5c <audioInit+0x3fc>
 800086c:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8000a8c <audioInit+0x42c>
 8000870:	2200      	movs	r2, #0
 8000872:	eddf 0a87 	vldr	s1, [pc, #540]	; 8000a90 <audioInit+0x430>
 8000876:	2104      	movs	r1, #4
 8000878:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8000a04 <audioInit+0x3a4>
 800087c:	4430      	add	r0, r6
 800087e:	4b56      	ldr	r3, [pc, #344]	; (80009d8 <audioInit+0x378>)
		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8000880:	4635      	mov	r5, r6
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
 8000882:	f01a ffe9 	bl	801b858 <tSimpleLivingString3_initToPool>
		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &mediumPool);
 8000886:	4b83      	ldr	r3, [pc, #524]	; (8000a94 <audioInit+0x434>)
 8000888:	ed9f 3a83 	vldr	s6, [pc, #524]	; 8000a98 <audioInit+0x438>
 800088c:	eef0 4a49 	vmov.f32	s9, s18
 8000890:	1998      	adds	r0, r3, r6
 8000892:	eef0 3a68 	vmov.f32	s7, s17
 8000896:	eef0 2a43 	vmov.f32	s5, s6
 800089a:	ed9f 4a71 	vldr	s8, [pc, #452]	; 8000a60 <audioInit+0x400>
 800089e:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 80009cc <audioInit+0x36c>
 80008a2:	2101      	movs	r1, #1
 80008a4:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8000a9c <audioInit+0x43c>
 80008a8:	f106 0710 	add.w	r7, r6, #16
 80008ac:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8000aa0 <audioInit+0x440>
 80008b0:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8000aa4 <audioInit+0x444>
 80008b4:	4a48      	ldr	r2, [pc, #288]	; (80009d8 <audioInit+0x378>)
 80008b6:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8000aa8 <audioInit+0x448>
 80008ba:	9002      	str	r0, [sp, #8]
 80008bc:	f01b fb12 	bl	801bee4 <tLivingString2_initToPool>
		tLivingString2_setBrightness(&strings[v], .99f);
 80008c0:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8000aac <audioInit+0x44c>
 80008c4:	9802      	ldr	r0, [sp, #8]
 80008c6:	f01b fcbb 	bl	801c240 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[v], .5f);
 80008ca:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80008ce:	9802      	ldr	r0, [sp, #8]
 80008d0:	f01b fc72 	bl	801c1b8 <tLivingString2_setPickPos>
		tLivingString2_setPrepPos(&strings[v], .4f);
 80008d4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8000ab0 <audioInit+0x450>
 80008d8:	9802      	ldr	r0, [sp, #8]
 80008da:	f01b fc7f 	bl	801c1dc <tLivingString2_setPrepPos>
		tLivingString2_setPrepIndex(&strings[v], 0.0f);
 80008de:	eeb0 0a68 	vmov.f32	s0, s17
 80008e2:	9802      	ldr	r0, [sp, #8]
 80008e4:	f01b fc9e 	bl	801c224 <tLivingString2_setPrepIndex>
		tLivingString2_setPickupPos(&strings[v], 1.0f);
 80008e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008ec:	9802      	ldr	r0, [sp, #8]
 80008ee:	f01b fc87 	bl	801c200 <tLivingString2_setPickupPos>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80008f2:	4a70      	ldr	r2, [pc, #448]	; (8000ab4 <audioInit+0x454>)
 80008f4:	eeb0 1a68 	vmov.f32	s2, s17
 80008f8:	4623      	mov	r3, r4
 80008fa:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8000ab8 <audioInit+0x458>
 80008fe:	1990      	adds	r0, r2, r6
 8000900:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8000abc <audioInit+0x45c>
 8000904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000908:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80009cc <audioInit+0x36c>
 800090c:	4937      	ldr	r1, [pc, #220]	; (80009ec <audioInit+0x38c>)
 800090e:	f013 fdb7 	bl	8014480 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000912:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000916:	4622      	mov	r2, r4
 8000918:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8000ac0 <audioInit+0x460>
 800091c:	2103      	movs	r1, #3
 800091e:	4869      	ldr	r0, [pc, #420]	; (8000ac4 <audioInit+0x464>)
 8000920:	f014 fdd4 	bl	80154cc <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000924:	4622      	mov	r2, r4
 8000926:	2101      	movs	r1, #1
 8000928:	4867      	ldr	r0, [pc, #412]	; (8000ac8 <audioInit+0x468>)
 800092a:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8000a9c <audioInit+0x43c>
 800092e:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8000acc <audioInit+0x46c>
 8000932:	f014 fdcb 	bl	80154cc <tVZFilter_init>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8000936:	4622      	mov	r2, r4
 8000938:	2100      	movs	r1, #0
 800093a:	4865      	ldr	r0, [pc, #404]	; (8000ad0 <audioInit+0x470>)
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800093c:	eddf 9a65 	vldr	s19, [pc, #404]	; 8000ad4 <audioInit+0x474>
 8000940:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8000ad8 <audioInit+0x478>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8000944:	f016 fa4c 	bl	8016de0 <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8000948:	4b64      	ldr	r3, [pc, #400]	; (8000adc <audioInit+0x47c>)
 800094a:	eef0 0a69 	vmov.f32	s1, s19
 800094e:	eeb0 0a48 	vmov.f32	s0, s16
 8000952:	2101      	movs	r1, #1
 8000954:	1958      	adds	r0, r3, r5
 8000956:	4622      	mov	r2, r4
 8000958:	f014 fa4e 	bl	8014df8 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 800095c:	4b60      	ldr	r3, [pc, #384]	; (8000ae0 <audioInit+0x480>)
 800095e:	eef0 0a69 	vmov.f32	s1, s19
 8000962:	4622      	mov	r2, r4
 8000964:	1958      	adds	r0, r3, r5
 8000966:	eeb0 0a48 	vmov.f32	s0, s16
 800096a:	2100      	movs	r1, #0
 800096c:	f014 fa44 	bl	8014df8 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8000970:	4b5c      	ldr	r3, [pc, #368]	; (8000ae4 <audioInit+0x484>)
 8000972:	4622      	mov	r2, r4
 8000974:	eef0 0a69 	vmov.f32	s1, s19
 8000978:	1958      	adds	r0, r3, r5
 800097a:	eeb0 0a48 	vmov.f32	s0, s16
 800097e:	2102      	movs	r1, #2
 8000980:	f014 fa3a 	bl	8014df8 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 8000984:	4b58      	ldr	r3, [pc, #352]	; (8000ae8 <audioInit+0x488>)
 8000986:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800098a:	4621      	mov	r1, r4
 800098c:	1958      	adds	r0, r3, r5
 800098e:	eeb0 0a48 	vmov.f32	s0, s16
 8000992:	f015 f88f 	bl	8015ab4 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 8000996:	4b55      	ldr	r3, [pc, #340]	; (8000aec <audioInit+0x48c>)
 8000998:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800099c:	4622      	mov	r2, r4
 800099e:	1958      	adds	r0, r3, r5
 80009a0:	eeb0 0a48 	vmov.f32	s0, s16
 80009a4:	2105      	movs	r1, #5
 80009a6:	f014 fd91 	bl	80154cc <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 80009aa:	4b51      	ldr	r3, [pc, #324]	; (8000af0 <audioInit+0x490>)
 80009ac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80009b0:	4622      	mov	r2, r4
 80009b2:	1958      	adds	r0, r3, r5
 80009b4:	eeb0 0a48 	vmov.f32	s0, s16
 80009b8:	2106      	movs	r1, #6
 80009ba:	e09d      	b.n	8000af8 <audioInit+0x498>
 80009bc:	200047a8 	.word	0x200047a8
 80009c0:	473b8000 	.word	0x473b8000
 80009c4:	20004ce0 	.word	0x20004ce0
 80009c8:	08005211 	.word	0x08005211
 80009cc:	00000000 	.word	0x00000000
 80009d0:	00053020 	.word	0x00053020
 80009d4:	24028020 	.word	0x24028020
 80009d8:	200049e8 	.word	0x200049e8
 80009dc:	60000000 	.word	0x60000000
 80009e0:	200047a4 	.word	0x200047a4
 80009e4:	ba51b717 	.word	0xba51b717
 80009e8:	3a83126f 	.word	0x3a83126f
 80009ec:	200005d0 	.word	0x200005d0
 80009f0:	200045d0 	.word	0x200045d0
 80009f4:	457ff000 	.word	0x457ff000
 80009f8:	4323d666 	.word	0x4323d666
 80009fc:	c323d666 	.word	0xc323d666
 8000a00:	24008020 	.word	0x24008020
 8000a04:	435c0000 	.word	0x435c0000
 8000a08:	2000004c 	.word	0x2000004c
 8000a0c:	449256db 	.word	0x449256db
 8000a10:	42640000 	.word	0x42640000
 8000a14:	38ffe802 	.word	0x38ffe802
 8000a18:	24000000 	.word	0x24000000
 8000a1c:	24008010 	.word	0x24008010
 8000a20:	58020400 	.word	0x58020400
 8000a24:	58020800 	.word	0x58020800
 8000a28:	58020000 	.word	0x58020000
 8000a2c:	20000051 	.word	0x20000051
 8000a30:	200131e0 	.word	0x200131e0
 8000a34:	2000465c 	.word	0x2000465c
 8000a38:	20000052 	.word	0x20000052
 8000a3c:	2000467c 	.word	0x2000467c
 8000a40:	20004774 	.word	0x20004774
 8000a44:	20004680 	.word	0x20004680
 8000a48:	3a03126f 	.word	0x3a03126f
 8000a4c:	2001312c 	.word	0x2001312c
 8000a50:	20004b58 	.word	0x20004b58
 8000a54:	2000461c 	.word	0x2000461c
 8000a58:	42800000 	.word	0x42800000
 8000a5c:	3c23d70a 	.word	0x3c23d70a
 8000a60:	3d4ccccd 	.word	0x3d4ccccd
 8000a64:	447a0000 	.word	0x447a0000
 8000a68:	3ca3d70a 	.word	0x3ca3d70a
 8000a6c:	20004bf4 	.word	0x20004bf4
 8000a70:	20004bd8 	.word	0x20004bd8
 8000a74:	20004cb0 	.word	0x20004cb0
 8000a78:	20013104 	.word	0x20013104
 8000a7c:	20004c0c 	.word	0x20004c0c
 8000a80:	20004cc8 	.word	0x20004cc8
 8000a84:	20004b80 	.word	0x20004b80
 8000a88:	200048cc 	.word	0x200048cc
 8000a8c:	3f7fff58 	.word	0x3f7fff58
 8000a90:	4684d000 	.word	0x4684d000
 8000a94:	200130d0 	.word	0x200130d0
 8000a98:	3f7ff972 	.word	0x3f7ff972
 8000a9c:	3f666666 	.word	0x3f666666
 8000aa0:	3e99999a 	.word	0x3e99999a
 8000aa4:	3f19999a 	.word	0x3f19999a
 8000aa8:	42c80000 	.word	0x42c80000
 8000aac:	3f7d70a4 	.word	0x3f7d70a4
 8000ab0:	3ecccccd 	.word	0x3ecccccd
 8000ab4:	2000461c 	.word	0x2000461c
 8000ab8:	43480000 	.word	0x43480000
 8000abc:	42480000 	.word	0x42480000
 8000ac0:	44bb8000 	.word	0x44bb8000
 8000ac4:	20004a48 	.word	0x20004a48
 8000ac8:	20004a4c 	.word	0x20004a4c
 8000acc:	44480000 	.word	0x44480000
 8000ad0:	20004a2c 	.word	0x20004a2c
 8000ad4:	3f333333 	.word	0x3f333333
 8000ad8:	44fa0000 	.word	0x44fa0000
 8000adc:	200048d4 	.word	0x200048d4
 8000ae0:	200046c4 	.word	0x200046c4
 8000ae4:	20000514 	.word	0x20000514
 8000ae8:	200045d4 	.word	0x200045d4
 8000aec:	200004fc 	.word	0x200004fc
 8000af0:	200004ec 	.word	0x200004ec
 8000af4:	200049e8 	.word	0x200049e8
 8000af8:	f014 fce8 	bl	80154cc <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 8000afc:	4bda      	ldr	r3, [pc, #872]	; (8000e68 <audioInit+0x808>)
 8000afe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000b02:	4622      	mov	r2, r4
 8000b04:	1958      	adds	r0, r3, r5
 8000b06:	eeb0 0a48 	vmov.f32	s0, s16
 8000b0a:	2107      	movs	r1, #7
 8000b0c:	f014 fcde 	bl	80154cc <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8000b10:	4bd6      	ldr	r3, [pc, #856]	; (8000e6c <audioInit+0x80c>)
 8000b12:	4622      	mov	r2, r4
 8000b14:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000b18:	1958      	adds	r0, r3, r5
 8000b1a:	eeb0 0a48 	vmov.f32	s0, s16
 8000b1e:	2104      	movs	r1, #4
 8000b20:	f014 fcd4 	bl	80154cc <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000b24:	4bd2      	ldr	r3, [pc, #840]	; (8000e70 <audioInit+0x810>)
 8000b26:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	1958      	adds	r0, r3, r5
 8000b2e:	eeb0 0a48 	vmov.f32	s0, s16
 8000b32:	f015 fb53 	bl	80161dc <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8000b36:	4bcf      	ldr	r3, [pc, #828]	; (8000e74 <audioInit+0x814>)
 8000b38:	eef0 0a4c 	vmov.f32	s1, s24
 8000b3c:	4621      	mov	r1, r4
 8000b3e:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 8000b40:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8000b42:	eeb0 0a6b 	vmov.f32	s0, s23
 8000b46:	f013 ff99 	bl	8014a7c <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 8000b4a:	42bd      	cmp	r5, r7
 8000b4c:	f47f aefc 	bne.w	8000948 <audioInit+0x2e8>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 8000b50:	4bc9      	ldr	r3, [pc, #804]	; (8000e78 <audioInit+0x818>)
 8000b52:	2500      	movs	r5, #0
 8000b54:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8000b58:	4bc8      	ldr	r3, [pc, #800]	; (8000e7c <audioInit+0x81c>)
 8000b5a:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 8000b5c:	eb08 0005 	add.w	r0, r8, r5
 8000b60:	4621      	mov	r1, r4
 8000b62:	f01a fb1f 	bl	801b1a4 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8000b66:	1978      	adds	r0, r7, r5
 8000b68:	4621      	mov	r1, r4
 8000b6a:	f01a fb61 	bl	801b230 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 8000b6e:	4bc4      	ldr	r3, [pc, #784]	; (8000e80 <audioInit+0x820>)
 8000b70:	4621      	mov	r1, r4
 8000b72:	1998      	adds	r0, r3, r6
 8000b74:	4428      	add	r0, r5
 8000b76:	f016 f8d3 	bl	8016d20 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 8000b7a:	4bc2      	ldr	r3, [pc, #776]	; (8000e84 <audioInit+0x824>)
 8000b7c:	4621      	mov	r1, r4
 8000b7e:	1998      	adds	r0, r3, r6
 8000b80:	4428      	add	r0, r5
 8000b82:	f01a fd41 	bl	801b608 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 8000b86:	4bc0      	ldr	r3, [pc, #768]	; (8000e88 <audioInit+0x828>)
 8000b88:	4621      	mov	r1, r4
 8000b8a:	1998      	adds	r0, r3, r6
 8000b8c:	4428      	add	r0, r5
 8000b8e:	f01a fd97 	bl	801b6c0 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8000b92:	4bbe      	ldr	r3, [pc, #760]	; (8000e8c <audioInit+0x82c>)
 8000b94:	4621      	mov	r1, r4
 8000b96:	1998      	adds	r0, r3, r6
 8000b98:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 8000b9a:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8000b9c:	f01a fc72 	bl	801b484 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 8000ba0:	2d20      	cmp	r5, #32
 8000ba2:	d1db      	bne.n	8000b5c <audioInit+0x4fc>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
 8000ba4:	4bba      	ldr	r3, [pc, #744]	; (8000e90 <audioInit+0x830>)
 8000ba6:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8000baa:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8000e94 <audioInit+0x834>
 8000bae:	2106      	movs	r1, #6
 8000bb0:	1998      	adds	r0, r3, r6
 8000bb2:	4622      	mov	r2, r4
 8000bb4:	f014 fc8a 	bl	80154cc <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8000bb8:	4bb7      	ldr	r3, [pc, #732]	; (8000e98 <audioInit+0x838>)
 8000bba:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	1998      	adds	r0, r3, r6
 8000bc2:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8000e9c <audioInit+0x83c>
 8000bc6:	2107      	movs	r1, #7
		//LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000bc8:	eddf 9ab5 	vldr	s19, [pc, #724]	; 8000ea0 <audioInit+0x840>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8000bcc:	f014 fc7e 	bl	80154cc <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000bd0:	4bb4      	ldr	r3, [pc, #720]	; (8000ea4 <audioInit+0x844>)
 8000bd2:	9f00      	ldr	r7, [sp, #0]
 8000bd4:	eeb0 0a6a 	vmov.f32	s0, s21
 8000bd8:	4622      	mov	r2, r4
 8000bda:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8000ea8 <audioInit+0x848>
 8000bde:	2105      	movs	r1, #5
 8000be0:	1998      	adds	r0, r3, r6
 8000be2:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8000be6:	ed9f 8ab1 	vldr	s16, [pc, #708]	; 8000eac <audioInit+0x84c>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000bea:	f014 fc6f 	bl	80154cc <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000bee:	4628      	mov	r0, r5
 8000bf0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8000bf4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8000bf8:	4623      	mov	r3, r4
 8000bfa:	eef0 0a6a 	vmov.f32	s1, s21
 8000bfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c02:	eeb0 0a69 	vmov.f32	s0, s19
 8000c06:	49aa      	ldr	r1, [pc, #680]	; (8000eb0 <audioInit+0x850>)
 8000c08:	f013 fc3a 	bl	8014480 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8000c0c:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 8000c0e:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8000c10:	eeb0 0a48 	vmov.f32	s0, s16
 8000c14:	f013 fcea 	bl	80145ec <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 8000c18:	42af      	cmp	r7, r5
 8000c1a:	d1e8      	bne.n	8000bee <audioInit+0x58e>
 8000c1c:	4ba5      	ldr	r3, [pc, #660]	; (8000eb4 <audioInit+0x854>)
 8000c1e:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 8000c20:	ed9f baa5 	vldr	s22, [pc, #660]	; 8000eb8 <audioInit+0x858>
 8000c24:	eb03 0806 	add.w	r8, r3, r6
 8000c28:	4ba4      	ldr	r3, [pc, #656]	; (8000ebc <audioInit+0x85c>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000c2a:	ed9f aaa5 	vldr	s20, [pc, #660]	; 8000ec0 <audioInit+0x860>
 8000c2e:	199f      	adds	r7, r3, r6
 8000c30:	f106 0320 	add.w	r3, r6, #32
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8000c34:	eddf 9aa3 	vldr	s19, [pc, #652]	; 8000ec4 <audioInit+0x864>
 8000c38:	ed9f 8aa3 	vldr	s16, [pc, #652]	; 8000ec8 <audioInit+0x868>
 8000c3c:	e9cd b602 	strd	fp, r6, [sp, #8]
 8000c40:	469b      	mov	fp, r3
			tCrusher_init(&bc[i][v],&leaf);
 8000c42:	4640      	mov	r0, r8
 8000c44:	4621      	mov	r1, r4
 8000c46:	f013 fa8d 	bl	8014164 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 8000c4a:	4638      	mov	r0, r7
 8000c4c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000c50:	4621      	mov	r1, r4
 8000c52:	f014 f9cb 	bl	8014fec <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 8000c56:	4b9d      	ldr	r3, [pc, #628]	; (8000ecc <audioInit+0x86c>)
 8000c58:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000c5c:	4621      	mov	r1, r4
 8000c5e:	195e      	adds	r6, r3, r5
 8000c60:	4b9b      	ldr	r3, [pc, #620]	; (8000ed0 <audioInit+0x870>)
		for (int i = 0; i < NUM_EFFECT; i++)
 8000c62:	f108 0808 	add.w	r8, r8, #8
 8000c66:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 8000c68:	1958      	adds	r0, r3, r5
 8000c6a:	f014 f9bf 	bl	8014fec <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 8000c6e:	4b99      	ldr	r3, [pc, #612]	; (8000ed4 <audioInit+0x874>)
 8000c70:	eef0 0a4b 	vmov.f32	s1, s22
 8000c74:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8000e94 <audioInit+0x834>
 8000c78:	eb03 0a05 	add.w	sl, r3, r5
 8000c7c:	4b96      	ldr	r3, [pc, #600]	; (8000ed8 <audioInit+0x878>)
 8000c7e:	4622      	mov	r2, r4
 8000c80:	2106      	movs	r1, #6
 8000c82:	eb03 0905 	add.w	r9, r3, r5
 8000c86:	4630      	mov	r0, r6
 8000c88:	f014 fc20 	bl	80154cc <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
 8000c8c:	4650      	mov	r0, sl
 8000c8e:	eef0 0a4b 	vmov.f32	s1, s22
 8000c92:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8000e9c <audioInit+0x83c>
 8000c96:	4622      	mov	r2, r4
 8000c98:	2107      	movs	r1, #7
 8000c9a:	f014 fc17 	bl	80154cc <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
 8000c9e:	eddf 0a82 	vldr	s1, [pc, #520]	; 8000ea8 <audioInit+0x848>
 8000ca2:	4622      	mov	r2, r4
 8000ca4:	2105      	movs	r1, #5
 8000ca6:	4648      	mov	r0, r9
 8000ca8:	eeb0 0a6a 	vmov.f32	s0, s21
 8000cac:	f014 fc0e 	bl	80154cc <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000cb0:	eeb0 0a4a 	vmov.f32	s0, s20
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	f014 fdbb 	bl	8015830 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000cba:	4650      	mov	r0, sl
 8000cbc:	eeb0 0a4a 	vmov.f32	s0, s20
 8000cc0:	f014 fdb6 	bl	8015830 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000cc4:	eeb0 0a4a 	vmov.f32	s0, s20
 8000cc8:	4648      	mov	r0, r9
 8000cca:	f014 fdb1 	bl	8015830 <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 8000cce:	4b83      	ldr	r3, [pc, #524]	; (8000edc <audioInit+0x87c>)
 8000cd0:	4621      	mov	r1, r4
 8000cd2:	eb03 0a05 	add.w	sl, r3, r5
 8000cd6:	4b82      	ldr	r3, [pc, #520]	; (8000ee0 <audioInit+0x880>)
 8000cd8:	1958      	adds	r0, r3, r5
 8000cda:	f013 facb 	bl	8014274 <tCompressor_init>
			tCycle_init(&mod1[i][v], &leaf);
 8000cde:	4b81      	ldr	r3, [pc, #516]	; (8000ee4 <audioInit+0x884>)
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	4650      	mov	r0, sl
 8000ce4:	eb03 0905 	add.w	r9, r3, r5
 8000ce8:	f016 f81a 	bl	8016d20 <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
 8000cec:	4621      	mov	r1, r4
 8000cee:	4648      	mov	r0, r9
 8000cf0:	f016 f816 	bl	8016d20 <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 8000cf4:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8000ee8 <audioInit+0x888>
 8000cf8:	4650      	mov	r0, sl
 8000cfa:	f016 f853 	bl	8016da4 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 8000cfe:	4648      	mov	r0, r9
 8000d00:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8000eec <audioInit+0x88c>
 8000d04:	f016 f84e 	bl	8016da4 <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8000d08:	4b79      	ldr	r3, [pc, #484]	; (8000ef0 <audioInit+0x890>)
 8000d0a:	eef0 0a69 	vmov.f32	s1, s19
 8000d0e:	4622      	mov	r2, r4
 8000d10:	1958      	adds	r0, r3, r5
 8000d12:	eeb0 0a48 	vmov.f32	s0, s16
 8000d16:	2101      	movs	r1, #1
 8000d18:	f014 f86e 	bl	8014df8 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8000d1c:	4b75      	ldr	r3, [pc, #468]	; (8000ef4 <audioInit+0x894>)
 8000d1e:	eef0 0a69 	vmov.f32	s1, s19
 8000d22:	4622      	mov	r2, r4
 8000d24:	1958      	adds	r0, r3, r5
 8000d26:	eeb0 0a48 	vmov.f32	s0, s16
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f014 f864 	bl	8014df8 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8000d30:	4b71      	ldr	r3, [pc, #452]	; (8000ef8 <audioInit+0x898>)
 8000d32:	4622      	mov	r2, r4
 8000d34:	eef0 0a69 	vmov.f32	s1, s19
 8000d38:	1958      	adds	r0, r3, r5
 8000d3a:	eeb0 0a48 	vmov.f32	s0, s16
 8000d3e:	2102      	movs	r1, #2
 8000d40:	f014 f85a 	bl	8014df8 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 8000d44:	4b6d      	ldr	r3, [pc, #436]	; (8000efc <audioInit+0x89c>)
 8000d46:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d4a:	4621      	mov	r1, r4
 8000d4c:	1958      	adds	r0, r3, r5
 8000d4e:	eeb0 0a48 	vmov.f32	s0, s16
 8000d52:	f014 feaf 	bl	8015ab4 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 8000d56:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <audioInit+0x8a0>)
 8000d58:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	1958      	adds	r0, r3, r5
 8000d60:	eeb0 0a48 	vmov.f32	s0, s16
 8000d64:	2105      	movs	r1, #5
 8000d66:	f014 fbb1 	bl	80154cc <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 8000d6a:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <audioInit+0x8a4>)
 8000d6c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d70:	4622      	mov	r2, r4
 8000d72:	1958      	adds	r0, r3, r5
 8000d74:	eeb0 0a48 	vmov.f32	s0, s16
 8000d78:	2106      	movs	r1, #6
 8000d7a:	f014 fba7 	bl	80154cc <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 8000d7e:	4b62      	ldr	r3, [pc, #392]	; (8000f08 <audioInit+0x8a8>)
 8000d80:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d84:	4622      	mov	r2, r4
 8000d86:	1958      	adds	r0, r3, r5
 8000d88:	eeb0 0a48 	vmov.f32	s0, s16
 8000d8c:	2107      	movs	r1, #7
 8000d8e:	f014 fb9d 	bl	80154cc <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8000d92:	4b5e      	ldr	r3, [pc, #376]	; (8000f0c <audioInit+0x8ac>)
 8000d94:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d98:	4622      	mov	r2, r4
 8000d9a:	1958      	adds	r0, r3, r5
 8000d9c:	eeb0 0a48 	vmov.f32	s0, s16
 8000da0:	2104      	movs	r1, #4
 8000da2:	f014 fb93 	bl	80154cc <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000da6:	4b5a      	ldr	r3, [pc, #360]	; (8000f10 <audioInit+0x8b0>)
 8000da8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000dac:	4621      	mov	r1, r4
 8000dae:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
 8000db0:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000db2:	eeb0 0a48 	vmov.f32	s0, s16
 8000db6:	f015 fa11 	bl	80161dc <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
 8000dba:	45ab      	cmp	fp, r5
 8000dbc:	f47f af41 	bne.w	8000c42 <audioInit+0x5e2>
 8000dc0:	e9dd b602 	ldrd	fp, r6, [sp, #8]
 8000dc4:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
 8000dc8:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8000dca:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
 8000dcc:	eef0 0a49 	vmov.f32	s1, s18
 8000dd0:	4621      	mov	r1, r4
 8000dd2:	eeb0 0a68 	vmov.f32	s0, s17
 8000dd6:	f013 fe51 	bl	8014a7c <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8000dda:	455d      	cmp	r5, fp
 8000ddc:	d1f4      	bne.n	8000dc8 <audioInit+0x768>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000dde:	9b00      	ldr	r3, [sp, #0]
		}

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 8000de0:	2102      	movs	r1, #2
 8000de2:	2200      	movs	r2, #0
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000de4:	f10b 0b04 	add.w	fp, fp, #4
 8000de8:	3304      	adds	r3, #4
 8000dea:	9300      	str	r3, [sp, #0]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 8000dec:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <audioInit+0x8b4>)
 8000dee:	1998      	adds	r0, r3, r6
 8000df0:	4623      	mov	r3, r4
 8000df2:	f013 f8b9 	bl	8013f68 <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8000df6:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <audioInit+0x8b8>)
 8000df8:	4622      	mov	r2, r4
 8000dfa:	eddf 0a48 	vldr	s1, [pc, #288]	; 8000f1c <audioInit+0x8bc>
 8000dfe:	1998      	adds	r0, r3, r6
 8000e00:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000f20 <audioInit+0x8c0>
 8000e04:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000e06:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8000e08:	f013 fff6 	bl	8014df8 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000e0c:	9b01      	ldr	r3, [sp, #4]
 8000e0e:	b9a3      	cbnz	r3, 8000e3a <audioInit+0x7da>
 8000e10:	2301      	movs	r3, #1
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	e4ef      	b.n	80007f6 <audioInit+0x196>
		if (boardNumber == 0)
 8000e16:	b153      	cbz	r3, 8000e2e <audioInit+0x7ce>
		else if (boardNumber == 1)
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	f000 808b 	beq.w	8000f34 <audioInit+0x8d4>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <audioInit+0x8c4>)
			numStringsThisBoard = 2;
 8000e22:	4941      	ldr	r1, [pc, #260]	; (8000f28 <audioInit+0x8c8>)
 8000e24:	2002      	movs	r0, #2
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 8000e26:	005b      	lsls	r3, r3, #1
			numStringsThisBoard = 2;
 8000e28:	7008      	strb	r0, [r1, #0]
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 8000e2a:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
 8000e2c:	e494      	b.n	8000758 <audioInit+0xf8>
			firstString = 0;
 8000e2e:	483d      	ldr	r0, [pc, #244]	; (8000f24 <audioInit+0x8c4>)
			numStringsThisBoard = 1;
 8000e30:	2101      	movs	r1, #1
 8000e32:	4a3d      	ldr	r2, [pc, #244]	; (8000f28 <audioInit+0x8c8>)
			firstString = 0;
 8000e34:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
 8000e36:	7011      	strb	r1, [r2, #0]
 8000e38:	e48e      	b.n	8000758 <audioInit+0xf8>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	483b      	ldr	r0, [pc, #236]	; (8000f2c <audioInit+0x8cc>)
 8000e40:	f01b fd80 	bl	801c944 <memset>
	}

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000e44:	2220      	movs	r2, #32
 8000e46:	4939      	ldr	r1, [pc, #228]	; (8000f2c <audioInit+0x8cc>)
 8000e48:	ee1c 0a90 	vmov	r0, s25
 8000e4c:	f00c fb28 	bl	800d4a0 <HAL_SAI_Transmit_DMA>
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <audioInit+0x8d0>)
 8000e52:	4602      	mov	r2, r0
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready



	HAL_Delay(1);
 8000e54:	9801      	ldr	r0, [sp, #4]
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000e56:	701a      	strb	r2, [r3, #0]

}
 8000e58:	b005      	add	sp, #20
 8000e5a:	ecbd 8b0a 	vpop	{d8-d12}
 8000e5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
 8000e62:	f007 baa9 	b.w	80083b8 <HAL_Delay>
 8000e66:	bf00      	nop
 8000e68:	200004dc 	.word	0x200004dc
 8000e6c:	200004cc 	.word	0x200004cc
 8000e70:	200004bc 	.word	0x200004bc
 8000e74:	20004624 	.word	0x20004624
 8000e78:	2000481c 	.word	0x2000481c
 8000e7c:	200047fc 	.word	0x200047fc
 8000e80:	2000486c 	.word	0x2000486c
 8000e84:	200048ac 	.word	0x200048ac
 8000e88:	2000488c 	.word	0x2000488c
 8000e8c:	2000483c 	.word	0x2000483c
 8000e90:	20004a60 	.word	0x20004a60
 8000e94:	42a00000 	.word	0x42a00000
 8000e98:	20004a68 	.word	0x20004a68
 8000e9c:	463b8000 	.word	0x463b8000
 8000ea0:	3dcccccd 	.word	0x3dcccccd
 8000ea4:	20004a40 	.word	0x20004a40
 8000ea8:	3ff33333 	.word	0x3ff33333
 8000eac:	3f7fffac 	.word	0x3f7fffac
 8000eb0:	200005d0 	.word	0x200005d0
 8000eb4:	2000052c 	.word	0x2000052c
 8000eb8:	42000000 	.word	0x42000000
 8000ebc:	20000590 	.word	0x20000590
 8000ec0:	47bb8000 	.word	0x47bb8000
 8000ec4:	3f333333 	.word	0x3f333333
 8000ec8:	44fa0000 	.word	0x44fa0000
 8000ecc:	20004c70 	.word	0x20004c70
 8000ed0:	200005b0 	.word	0x200005b0
 8000ed4:	20004c90 	.word	0x20004c90
 8000ed8:	2000054c 	.word	0x2000054c
 8000edc:	200049ec 	.word	0x200049ec
 8000ee0:	20000570 	.word	0x20000570
 8000ee4:	20004a0c 	.word	0x20004a0c
 8000ee8:	3e4ccccd 	.word	0x3e4ccccd
 8000eec:	3e638e39 	.word	0x3e638e39
 8000ef0:	2000049c 	.word	0x2000049c
 8000ef4:	2000047c 	.word	0x2000047c
 8000ef8:	2000043c 	.word	0x2000043c
 8000efc:	2000045c 	.word	0x2000045c
 8000f00:	2000041c 	.word	0x2000041c
 8000f04:	200003fc 	.word	0x200003fc
 8000f08:	200003dc 	.word	0x200003dc
 8000f0c:	200003bc 	.word	0x200003bc
 8000f10:	2000039c 	.word	0x2000039c
 8000f14:	20004a74 	.word	0x20004a74
 8000f18:	2000464c 	.word	0x2000464c
 8000f1c:	3e99999a 	.word	0x3e99999a
 8000f20:	46947000 	.word	0x46947000
 8000f24:	2000465c 	.word	0x2000465c
 8000f28:	20000052 	.word	0x20000052
 8000f2c:	30000000 	.word	0x30000000
 8000f30:	200130fc 	.word	0x200130fc
			firstString = 1;
 8000f34:	4902      	ldr	r1, [pc, #8]	; (8000f40 <audioInit+0x8e0>)
			numStringsThisBoard = 1;
 8000f36:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <audioInit+0x8e4>)
			firstString = 1;
 8000f38:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
 8000f3a:	7013      	strb	r3, [r2, #0]
 8000f3c:	e40c      	b.n	8000758 <audioInit+0xf8>
 8000f3e:	bf00      	nop
 8000f40:	2000465c 	.word	0x2000465c
 8000f44:	20000052 	.word	0x20000052

08000f48 <updateStateFromSPIMessage>:
const int syncMap[3] = {2, 0, 1};
float pluckPos = 0.5f;

void updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS[24 + offset];
 8000f48:	4a27      	ldr	r2, [pc, #156]	; (8000fe8 <updateStateFromSPIMessage+0xa0>)

	neck = (modeBit >> 6) & 1;
	dualSlider = (modeBit >> 5) & 1;

	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS[25 + offset];
 8000f4a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 800101c <updateStateFromSPIMessage+0xd4>
	int modeBit = SPI_LEVERS[24 + offset];
 8000f4e:	1811      	adds	r1, r2, r0
{
 8000f50:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS[24 + offset];
 8000f52:	7e0b      	ldrb	r3, [r1, #24]
	voice = SPI_LEVERS[25 + offset];
 8000f54:	7e49      	ldrb	r1, [r1, #25]
	neck = (modeBit >> 6) & 1;
 8000f56:	4f25      	ldr	r7, [pc, #148]	; (8000fec <updateStateFromSPIMessage+0xa4>)
	voice = SPI_LEVERS[25 + offset];
 8000f58:	f8cc 1000 	str.w	r1, [ip]
	neck = (modeBit >> 6) & 1;
 8000f5c:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	dualSlider = (modeBit >> 5) & 1;
 8000f60:	4e23      	ldr	r6, [pc, #140]	; (8000ff0 <updateStateFromSPIMessage+0xa8>)
	neck = (modeBit >> 6) & 1;
 8000f62:	f8c7 c000 	str.w	ip, [r7]
	dualSlider = (modeBit >> 5) & 1;
 8000f66:	f3c3 1740 	ubfx	r7, r3, #5, #1
	edit = (modeBit >> 4) & 1;
 8000f6a:	4d22      	ldr	r5, [pc, #136]	; (8000ff4 <updateStateFromSPIMessage+0xac>)

	if (voice != prevVoice)
 8000f6c:	4c22      	ldr	r4, [pc, #136]	; (8000ff8 <updateStateFromSPIMessage+0xb0>)
	dualSlider = (modeBit >> 5) & 1;
 8000f6e:	6037      	str	r7, [r6, #0]
	edit = (modeBit >> 4) & 1;
 8000f70:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8000f74:	602e      	str	r6, [r5, #0]
	if (voice != prevVoice)
 8000f76:	6825      	ldr	r5, [r4, #0]
 8000f78:	42a9      	cmp	r1, r5
 8000f7a:	d005      	beq.n	8000f88 <updateStateFromSPIMessage+0x40>
	{
		if ((voice == 63) || (voice == 62) || (voice == 61))
 8000f7c:	f1a1 053d 	sub.w	r5, r1, #61	; 0x3d
 8000f80:	2d02      	cmp	r5, #2
 8000f82:	d82a      	bhi.n	8000fda <updateStateFromSPIMessage+0x92>
		{
			currentActivePreset = voice;
 8000f84:	4d1d      	ldr	r5, [pc, #116]	; (8000ffc <updateStateFromSPIMessage+0xb4>)
 8000f86:	7029      	strb	r1, [r5, #0]

	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
	//octaveIndex = (modeBit & 15);
	//octave = powf(2.0f,((int32_t) (modeBit & 3) - 1 ));

	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000f88:	4410      	add	r0, r2
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000f92:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001000 <updateStateFromSPIMessage+0xb8>
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000f96:	f890 c01a 	ldrb.w	ip, [r0, #26]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000f9a:	3b05      	subs	r3, #5
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000f9c:	7ec2      	ldrb	r2, [r0, #27]
 8000f9e:	4819      	ldr	r0, [pc, #100]	; (8001004 <updateStateFromSPIMessage+0xbc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000fa0:	ee07 3a90 	vmov	s15, r3
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000fa4:	eb02 220c 	add.w	r2, r2, ip, lsl #8
	prevVoice = voice;
 8000fa8:	6021      	str	r1, [r4, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fae:	4c16      	ldr	r4, [pc, #88]	; (8001008 <updateStateFromSPIMessage+0xc0>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000fb0:	b292      	uxth	r2, r2
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000fb2:	4916      	ldr	r1, [pc, #88]	; (800100c <updateStateFromSPIMessage+0xc4>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000fb4:	8002      	strh	r2, [r0, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000fb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000fba:	8803      	ldrh	r3, [r0, #0]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8000fbc:	4814      	ldr	r0, [pc, #80]	; (8001010 <updateStateFromSPIMessage+0xc8>)
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000fbe:	b29b      	uxth	r3, r3
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000fc0:	edc4 7a00 	vstr	s15, [r4]
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000fc4:	ee00 3a10 	vmov	s0, r3
 8000fc8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000fcc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000fd0:	ed81 0a00 	vstr	s0, [r1]
}
 8000fd4:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8000fd6:	f013 bda9 	b.w	8014b2c <tExpSmooth_setDest>
			presetWaitingToLoad = 1;
 8000fda:	4d0e      	ldr	r5, [pc, #56]	; (8001014 <updateStateFromSPIMessage+0xcc>)
 8000fdc:	2601      	movs	r6, #1
 8000fde:	602e      	str	r6, [r5, #0]
			presetNumberToLoad = voice;
 8000fe0:	4d0d      	ldr	r5, [pc, #52]	; (8001018 <updateStateFromSPIMessage+0xd0>)
 8000fe2:	7029      	strb	r1, [r5, #0]
 8000fe4:	e7d0      	b.n	8000f88 <updateStateFromSPIMessage+0x40>
 8000fe6:	bf00      	nop
 8000fe8:	30000100 	.word	0x30000100
 8000fec:	20004a30 	.word	0x20004a30
 8000ff0:	200045e4 	.word	0x200045e4
 8000ff4:	200045e8 	.word	0x200045e8
 8000ff8:	20004ba4 	.word	0x20004ba4
 8000ffc:	200131e4 	.word	0x200131e4
 8001000:	39800801 	.word	0x39800801
 8001004:	20013128 	.word	0x20013128
 8001008:	20004a70 	.word	0x20004a70
 800100c:	20013124 	.word	0x20013124
 8001010:	2001312c 	.word	0x2001312c
 8001014:	20016e68 	.word	0x20016e68
 8001018:	20000280 	.word	0x20000280
 800101c:	2001311c 	.word	0x2001311c

08001020 <oscillator_tick>:
uint32_t timeApprox = 0;
uint32_t timeTrue = 0;
volatile float MIDIerror = 0.0f;

void __ATTR_ITCMRAM oscillator_tick(float note, int string)
{
 8001020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //if (loadingTables || !enabled) return;
	interruptChecker = 0;
 8001024:	496f      	ldr	r1, [pc, #444]	; (80011e4 <oscillator_tick+0x1c4>)
 8001026:	2500      	movs	r5, #0
	uint32_t tempCount1 = DWT->CYCCNT;
	for (int i = 0; i < NUM_OSC; i++)
	{
		oscOuts[0][i][string] = 0.0f;
 8001028:	4a6f      	ldr	r2, [pc, #444]	; (80011e8 <oscillator_tick+0x1c8>)
{
 800102a:	ed2d 8b0c 	vpush	{d8-d13}
	interruptChecker = 0;
 800102e:	700d      	strb	r5, [r1, #0]
{
 8001030:	b089      	sub	sp, #36	; 0x24
	uint32_t tempCount1 = DWT->CYCCNT;
 8001032:	496e      	ldr	r1, [pc, #440]	; (80011ec <oscillator_tick+0x1cc>)
		oscOuts[0][i][string] = 0.0f;
 8001034:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001038:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 80011f0 <oscillator_tick+0x1d0>
	uint32_t tempCount1 = DWT->CYCCNT;
 800103c:	684b      	ldr	r3, [r1, #4]
		oscOuts[0][i][string] = 0.0f;
 800103e:	ed86 9a00 	vstr	s18, [r6]
	uint32_t tempCount1 = DWT->CYCCNT;
 8001042:	9305      	str	r3, [sp, #20]
		oscOuts[1][i][string] = 0.0f;
	}
	//for (int osc = 0; osc < 1; osc++)
	for (int osc = 0; osc < oscToTick; osc++)
 8001044:	4b6b      	ldr	r3, [pc, #428]	; (80011f4 <oscillator_tick+0x1d4>)
		oscOuts[1][i][string] = 0.0f;
 8001046:	ed86 9a06 	vstr	s18, [r6, #24]
	for (int osc = 0; osc < oscToTick; osc++)
 800104a:	781a      	ldrb	r2, [r3, #0]
		oscOuts[0][i][string] = 0.0f;
 800104c:	ed86 9a02 	vstr	s18, [r6, #8]
		oscOuts[1][i][string] = 0.0f;
 8001050:	ed86 9a08 	vstr	s18, [r6, #32]
		oscOuts[0][i][string] = 0.0f;
 8001054:	ed86 9a04 	vstr	s18, [r6, #16]
		oscOuts[1][i][string] = 0.0f;
 8001058:	ed86 9a0a 	vstr	s18, [r6, #40]	; 0x28
	for (int osc = 0; osc < oscToTick; osc++)
 800105c:	2a00      	cmp	r2, #0
 800105e:	f000 80b6 	beq.w	80011ce <oscillator_tick+0x1ae>
 8001062:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8001066:	4a64      	ldr	r2, [pc, #400]	; (80011f8 <oscillator_tick+0x1d8>)
 8001068:	4c64      	ldr	r4, [pc, #400]	; (80011fc <oscillator_tick+0x1dc>)
 800106a:	eef0 9a40 	vmov.f32	s19, s0
 800106e:	eb02 0b0a 	add.w	fp, r2, sl
 8001072:	4a63      	ldr	r2, [pc, #396]	; (8001200 <oscillator_tick+0x1e0>)
 8001074:	4f63      	ldr	r7, [pc, #396]	; (8001204 <oscillator_tick+0x1e4>)
 8001076:	4681      	mov	r9, r0
 8001078:	eb02 030a 	add.w	r3, r2, sl
		float freqOffset= oscParams[OscFreq].realVal[string];
		float shape = oscParams[OscShape].realVal[string];
		float amp = oscParams[OscAmp].realVal[string];
		float filterSend = oscParams[OscFilterSend].realVal[string];
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
		float freqToSmooth = (note + (fine*0.01f));
 800107c:	ed9f ca62 	vldr	s24, [pc, #392]	; 8001208 <oscillator_tick+0x1e8>
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);

		uint32_t tempCountappr = DWT->CYCCNT;
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8001080:	eddf ba62 	vldr	s23, [pc, #392]	; 800120c <oscillator_tick+0x1ec>
 8001084:	4454      	add	r4, sl
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	4457      	add	r7, sl
 800108a:	4b61      	ldr	r3, [pc, #388]	; (8001210 <oscillator_tick+0x1f0>)
 800108c:	ed9f ba61 	vldr	s22, [pc, #388]	; 8001214 <oscillator_tick+0x1f4>
 8001090:	eddf aa61 	vldr	s21, [pc, #388]	; 8001218 <oscillator_tick+0x1f8>
 8001094:	ed9f aa61 	vldr	s20, [pc, #388]	; 800121c <oscillator_tick+0x1fc>
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	f8cd a010 	str.w	sl, [sp, #16]
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 800109e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010a2:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80010a6:	eeb0 0a69 	vmov.f32	s0, s19
		float freqToSmooth = (note + (fine*0.01f));
 80010aa:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80010ae:	4638      	mov	r0, r7
		uint32_t tempCountappr = DWT->CYCCNT;
 80010b0:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80011ec <oscillator_tick+0x1cc>
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 80010b4:	eef4 6ac7 	vcmpe.f32	s13, s14
		float filterSend = oscParams[OscFilterSend].realVal[string];
 80010b8:	edd4 8afe 	vldr	s17, [r4, #1016]	; 0x3f8
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80010bc:	eea7 0a8c 	vfma.f32	s0, s15, s24
		float freqOffset= oscParams[OscFreq].realVal[string];
 80010c0:	ed94 dabf 	vldr	s26, [r4, #764]	; 0x2fc
		float amp = oscParams[OscAmp].realVal[string];
 80010c4:	edd4 cacd 	vldr	s25, [r4, #820]	; 0x334
		int tempIndexI = (int)tempIndexF;
		tempIndexF = tempIndexF -tempIndexI;

		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 80010c8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float shape = oscParams[OscShape].realVal[string];
 80010d0:	edd4 dac6 	vldr	s27, [r4, #792]	; 0x318
	for (int osc = 0; osc < oscToTick; osc++)
 80010d4:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
 80010d8:	f106 0608 	add.w	r6, r6, #8
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 80010dc:	bfcc      	ite	gt
 80010de:	2201      	movgt	r2, #1
 80010e0:	2200      	movle	r2, #0
 80010e2:	9203      	str	r2, [sp, #12]
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80010e4:	f013 fd22 	bl	8014b2c <tExpSmooth_setDest>
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 80010e8:	4638      	mov	r0, r7
		uint32_t tempCountappr = DWT->CYCCNT;
 80010ea:	f8d8 a004 	ldr.w	sl, [r8, #4]
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 80010ee:	f013 fd21 	bl	8014b34 <tExpSmooth_tick>
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 80010f2:	eeb0 1a6a 	vmov.f32	s2, s21
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 80010f6:	eef0 0a40 	vmov.f32	s1, s0
	for (int osc = 0; osc < oscToTick; osc++)
 80010fa:	3708      	adds	r7, #8
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 80010fc:	eeb0 0a4a 	vmov.f32	s0, s20
 8001100:	f015 fadc 	bl	80166bc <LEAF_clip>
 8001104:	eef0 7a4b 	vmov.f32	s15, s22
		timeApprox = DWT->CYCCNT - tempCountappr;

		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001108:	465b      	mov	r3, fp
		timeApprox = DWT->CYCCNT - tempCountappr;
 800110a:	4a45      	ldr	r2, [pc, #276]	; (8001220 <oscillator_tick+0x200>)
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800110c:	4845      	ldr	r0, [pc, #276]	; (8001224 <oscillator_tick+0x204>)

		float sample = 0.0f;


		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 800110e:	eef0 0a6d 	vmov.f32	s1, s27
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8001112:	eee0 7a2b 	vfma.f32	s15, s0, s23
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001116:	edd3 5a00 	vldr	s11, [r3]
		timeApprox = DWT->CYCCNT - tempCountappr;
 800111a:	f8d8 3004 	ldr.w	r3, [r8, #4]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 800111e:	eeb0 0a4d 	vmov.f32	s0, s26
		float sample = 0.0f;
 8001122:	ed8d 9a07 	vstr	s18, [sp, #28]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001126:	f10b 0b08 	add.w	fp, fp, #8
		timeApprox = DWT->CYCCNT - tempCountappr;
 800112a:	eba3 030a 	sub.w	r3, r3, sl
 800112e:	6013      	str	r3, [r2, #0]
		int tempIndexI = (int)tempIndexF;
 8001130:	eebd 7ae7 	vcvt.s32.f32	s14, s15
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8001134:	9a03      	ldr	r2, [sp, #12]
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001136:	ee78 6a67 	vsub.f32	s13, s16, s15
		sourceValues[osc][string] = sample;

		//sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)

		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 800113a:	ee38 8a68 	vsub.f32	s16, s16, s17
		int tempIndexI = (int)tempIndexF;
 800113e:	ee17 3a10 	vmov	r3, s14
		tempIndexF = tempIndexF -tempIndexI;
 8001142:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8001146:	1c59      	adds	r1, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8001148:	f3c3 030e 	ubfx	r3, r3, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
 800114c:	ee77 7ac6 	vsub.f32	s15, s15, s12
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8001150:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8001154:	f3c1 010e 	ubfx	r1, r1, #0, #15
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001158:	ee76 6a86 	vadd.f32	s13, s13, s12
 800115c:	ed93 7a00 	vldr	s14, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8001160:	eb00 0381 	add.w	r3, r0, r1, lsl #2
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001164:	9904      	ldr	r1, [sp, #16]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8001166:	a807      	add	r0, sp, #28
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001168:	ed93 6a00 	vldr	s12, [r3]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 800116c:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <oscillator_tick+0x208>)
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800116e:	ee67 7a86 	vmul.f32	s15, s15, s12
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001172:	440b      	add	r3, r1
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8001174:	4629      	mov	r1, r5
	for (int osc = 0; osc < oscToTick; osc++)
 8001176:	3501      	adds	r5, #1
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001178:	eee6 7a87 	vfma.f32	s15, s13, s14
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 800117c:	ed93 7a00 	vldr	s14, [r3]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8001180:	9b02      	ldr	r3, [sp, #8]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001182:	ee27 7a25 	vmul.f32	s14, s14, s11
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8001186:	f853 8b04 	ldr.w	r8, [r3], #4
 800118a:	9302      	str	r3, [sp, #8]
 800118c:	464b      	mov	r3, r9
 800118e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001192:	47c0      	blx	r8
		sample *= amp;
 8001194:	eddd 7a07 	vldr	s15, [sp, #28]
		sourceValues[osc][string] = sample;
 8001198:	9b01      	ldr	r3, [sp, #4]
		sample *= amp;
 800119a:	ee6c 7aa7 	vmul.f32	s15, s25, s15
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 800119e:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
		sourceValues[osc][string] = sample;
 80011a2:	461a      	mov	r2, r3
 80011a4:	3308      	adds	r3, #8
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80011a6:	ee67 8a28 	vmul.f32	s17, s14, s17
		sourceValues[osc][string] = sample;
 80011aa:	9301      	str	r3, [sp, #4]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 80011ac:	ee27 7a87 	vmul.f32	s14, s15, s14
	for (int osc = 0; osc < oscToTick; osc++)
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <oscillator_tick+0x1d4>)
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80011b2:	ee68 8aa7 	vmul.f32	s17, s17, s15
		sourceValues[osc][string] = sample;
 80011b6:	edc2 7a00 	vstr	s15, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
 80011ba:	781b      	ldrb	r3, [r3, #0]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 80011bc:	ee28 8a07 	vmul.f32	s16, s16, s14
	for (int osc = 0; osc < oscToTick; osc++)
 80011c0:	42ab      	cmp	r3, r5
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80011c2:	ed46 8a02 	vstr	s17, [r6, #-8]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 80011c6:	ed86 8a04 	vstr	s16, [r6, #16]
	for (int osc = 0; osc < oscToTick; osc++)
 80011ca:	f73f af68 	bgt.w	800109e <oscillator_tick+0x7e>
	}

	timeOsc = DWT->CYCCNT - tempCount1;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <oscillator_tick+0x1cc>)
 80011d0:	9905      	ldr	r1, [sp, #20]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a15      	ldr	r2, [pc, #84]	; (800122c <oscillator_tick+0x20c>)
 80011d6:	1a5b      	subs	r3, r3, r1
 80011d8:	6013      	str	r3, [r2, #0]
}
 80011da:	b009      	add	sp, #36	; 0x24
 80011dc:	ecbd 8b0c 	vpop	{d8-d13}
 80011e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011e4:	2001539d 	.word	0x2001539d
 80011e8:	20004a7c 	.word	0x20004a7c
 80011ec:	e0001000 	.word	0xe0001000
 80011f0:	00000000 	.word	0x00000000
 80011f4:	20000068 	.word	0x20000068
 80011f8:	20004664 	.word	0x20004664
 80011fc:	20015d64 	.word	0x20015d64
 8001200:	20012f70 	.word	0x20012f70
 8001204:	20004b80 	.word	0x20004b80
 8001208:	3c23d70a 	.word	0x3c23d70a
 800120c:	42c80000 	.word	0x42c80000
 8001210:	20004c64 	.word	0x20004c64
 8001214:	46800000 	.word	0x46800000
 8001218:	43480000 	.word	0x43480000
 800121c:	c3480000 	.word	0xc3480000
 8001220:	200130d8 	.word	0x200130d8
 8001224:	24008020 	.word	0x24008020
 8001228:	200046f8 	.word	0x200046f8
 800122c:	200130f0 	.word	0x200130f0

08001230 <sawSquareTick>:


void __ATTR_ITCMRAM  sawSquareTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001234:	4605      	mov	r5, r0
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8001236:	4c1a      	ldr	r4, [pc, #104]	; (80012a0 <sawSquareTick+0x70>)
 8001238:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 800123c:	4617      	mov	r7, r2
 800123e:	4688      	mov	r8, r1
 8001240:	461e      	mov	r6, r3
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8001242:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8001246:	ed2d 8b02 	vpush	{d8}
 800124a:	eeb0 8a60 	vmov.f32	s16, s1
 800124e:	b082      	sub	sp, #8
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8001250:	9001      	str	r0, [sp, #4]
 8001252:	f019 ff41 	bl	801b0d8 <tMBSawPulse_setFreq>
    tMBSawPulse_setShape(&sawPaired[v][string], shape);
 8001256:	9801      	ldr	r0, [sp, #4]
 8001258:	eeb0 0a48 	vmov.f32	s0, s16
 800125c:	f019 ff9e 	bl	801b19c <tMBSawPulse_setShape>
    if (sync)
 8001260:	9801      	ldr	r0, [sp, #4]
 8001262:	b977      	cbnz	r7, 8001282 <sawSquareTick+0x52>
    {
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);

    }
    *sample += tMBSawPulse_tick(&sawPaired[v][string]) * 2.f;
 8001264:	f019 f846 	bl	801a2f4 <tMBSawPulse_tick>
 8001268:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800126c:	edd5 7a00 	vldr	s15, [r5]
 8001270:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001274:	edc5 7a00 	vstr	s15, [r5]
}
 8001278:	b002      	add	sp, #8
 800127a:	ecbd 8b02 	vpop	{d8}
 800127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <sawSquareTick+0x74>)
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <sawSquareTick+0x78>)
 8001286:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 800128a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 800128e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8001292:	ed96 0a00 	vldr	s0, [r6]
 8001296:	f019 ff51 	bl	801b13c <tMBSawPulse_sync>
 800129a:	9801      	ldr	r0, [sp, #4]
 800129c:	e7e2      	b.n	8001264 <sawSquareTick+0x34>
 800129e:	bf00      	nop
 80012a0:	20004c0c 	.word	0x20004c0c
 80012a4:	0801eed0 	.word	0x0801eed0
 80012a8:	20012f70 	.word	0x20012f70

080012ac <sineTriTick>:

void __ATTR_ITCMRAM  sineTriTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 80012ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b0:	4605      	mov	r5, r0
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 80012b2:	4c1a      	ldr	r4, [pc, #104]	; (800131c <sineTriTick+0x70>)
 80012b4:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 80012b8:	4617      	mov	r7, r2
 80012ba:	4688      	mov	r8, r1
 80012bc:	461e      	mov	r6, r3
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 80012be:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 80012c2:	ed2d 8b02 	vpush	{d8}
 80012c6:	eeb0 8a60 	vmov.f32	s16, s1
 80012ca:	b082      	sub	sp, #8
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 80012cc:	9001      	str	r0, [sp, #4]
 80012ce:	f018 fcc5 	bl	8019c5c <tMBSineTri_setFreq>
    tMBSineTri_setShape(&sinePaired[v][string],shape);
 80012d2:	9801      	ldr	r0, [sp, #4]
 80012d4:	eeb0 0a48 	vmov.f32	s0, s16
 80012d8:	f018 fd00 	bl	8019cdc <tMBSineTri_setShape>
    if (sync)
 80012dc:	9801      	ldr	r0, [sp, #4]
 80012de:	b977      	cbnz	r7, 80012fe <sineTriTick+0x52>
    {
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
    }
    *sample += tMBSineTri_tick(&sinePaired[v][string]) * 2.0f;
 80012e0:	f017 fc8c 	bl	8018bfc <tMBSineTri_tick>
 80012e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80012e8:	edd5 7a00 	vldr	s15, [r5]
 80012ec:	eee0 7a07 	vfma.f32	s15, s0, s14
 80012f0:	edc5 7a00 	vstr	s15, [r5]
}
 80012f4:	b002      	add	sp, #8
 80012f6:	ecbd 8b02 	vpop	{d8}
 80012fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 80012fe:	4a08      	ldr	r2, [pc, #32]	; (8001320 <sineTriTick+0x74>)
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <sineTriTick+0x78>)
 8001302:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001306:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 800130a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800130e:	ed96 0a00 	vldr	s0, [r6]
 8001312:	f018 fcb3 	bl	8019c7c <tMBSineTri_sync>
 8001316:	9801      	ldr	r0, [sp, #4]
 8001318:	e7e2      	b.n	80012e0 <sineTriTick+0x34>
 800131a:	bf00      	nop
 800131c:	20004cc8 	.word	0x20004cc8
 8001320:	0801eed0 	.word	0x0801eed0
 8001324:	20012f70 	.word	0x20012f70

08001328 <sawTick>:

void __ATTR_ITCMRAM  sawTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tMBSaw_setFreq(&saw[v][string], freq);
 800132c:	4c14      	ldr	r4, [pc, #80]	; (8001380 <sawTick+0x58>)
{
 800132e:	4605      	mov	r5, r0
    tMBSaw_setFreq(&saw[v][string], freq);
 8001330:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8001334:	b082      	sub	sp, #8
 8001336:	4617      	mov	r7, r2
 8001338:	4688      	mov	r8, r1
    tMBSaw_setFreq(&saw[v][string], freq);
 800133a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 800133e:	461e      	mov	r6, r3
    tMBSaw_setFreq(&saw[v][string], freq);
 8001340:	9001      	str	r0, [sp, #4]
 8001342:	f018 ff4d 	bl	801a1e0 <tMBSaw_setFreq>
    if (sync)
 8001346:	9801      	ldr	r0, [sp, #4]
 8001348:	b967      	cbnz	r7, 8001364 <sawTick+0x3c>
	{
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBSaw_tick(&saw[v][string]) * 2.f;;
 800134a:	f018 fd0b 	bl	8019d64 <tMBSaw_tick>
 800134e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001352:	edd5 7a00 	vldr	s15, [r5]
 8001356:	eee0 7a07 	vfma.f32	s15, s0, s14
 800135a:	edc5 7a00 	vstr	s15, [r5]
}
 800135e:	b002      	add	sp, #8
 8001360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <sawTick+0x5c>)
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <sawTick+0x60>)
 8001368:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 800136c:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001370:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8001374:	ed96 0a00 	vldr	s0, [r6]
 8001378:	f018 ff42 	bl	801a200 <tMBSaw_sync>
 800137c:	9801      	ldr	r0, [sp, #4]
 800137e:	e7e4      	b.n	800134a <sawTick+0x22>
 8001380:	20004bf4 	.word	0x20004bf4
 8001384:	0801eed0 	.word	0x0801eed0
 8001388:	20012f70 	.word	0x20012f70

0800138c <pulseTick>:

void __ATTR_ITCMRAM  pulseTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 800138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001390:	4605      	mov	r5, r0
    tMBPulse_setFreq(&pulse[v][string], freq);
 8001392:	4c1a      	ldr	r4, [pc, #104]	; (80013fc <pulseTick+0x70>)
 8001394:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8001398:	4617      	mov	r7, r2
 800139a:	4688      	mov	r8, r1
 800139c:	461e      	mov	r6, r3
    tMBPulse_setFreq(&pulse[v][string], freq);
 800139e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 80013a2:	ed2d 8b02 	vpush	{d8}
 80013a6:	eeb0 8a60 	vmov.f32	s16, s1
 80013aa:	b082      	sub	sp, #8
    tMBPulse_setFreq(&pulse[v][string], freq);
 80013ac:	9001      	str	r0, [sp, #4]
 80013ae:	f016 fb15 	bl	80179dc <tMBPulse_setFreq>
    tMBPulse_setWidth(&pulse[v][string], shape);
 80013b2:	9801      	ldr	r0, [sp, #4]
 80013b4:	eeb0 0a48 	vmov.f32	s0, s16
 80013b8:	f016 fb20 	bl	80179fc <tMBPulse_setWidth>
    if (sync)
 80013bc:	9801      	ldr	r0, [sp, #4]
 80013be:	b977      	cbnz	r7, 80013de <pulseTick+0x52>
	{
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBPulse_tick(&pulse[v][string]) * 2.f;;
 80013c0:	f015 fdb4 	bl	8016f2c <tMBPulse_tick>
 80013c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013c8:	edd5 7a00 	vldr	s15, [r5]
 80013cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80013d0:	edc5 7a00 	vstr	s15, [r5]
}
 80013d4:	b002      	add	sp, #8
 80013d6:	ecbd 8b02 	vpop	{d8}
 80013da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <pulseTick+0x74>)
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <pulseTick+0x78>)
 80013e2:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 80013e6:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 80013ea:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80013ee:	ed96 0a00 	vldr	s0, [r6]
 80013f2:	f016 fb11 	bl	8017a18 <tMBPulse_sync>
 80013f6:	9801      	ldr	r0, [sp, #4]
 80013f8:	e7e2      	b.n	80013c0 <pulseTick+0x34>
 80013fa:	bf00      	nop
 80013fc:	20004bd8 	.word	0x20004bd8
 8001400:	0801eed0 	.word	0x0801eed0
 8001404:	20012f70 	.word	0x20012f70

08001408 <sineTick>:

void __ATTR_ITCMRAM  sineTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    tCycle_setFreq(&sine[v][string], freq);
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <sineTick+0x2c>)
 800140a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
 800140e:	b510      	push	{r4, lr}
 8001410:	4604      	mov	r4, r0
 8001412:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
 8001414:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8001418:	9001      	str	r0, [sp, #4]
 800141a:	f015 fcc3 	bl	8016da4 <tCycle_setFreq>
    *sample += tCycle_tick(&sine[v][string]);
 800141e:	9801      	ldr	r0, [sp, #4]
 8001420:	f015 fc9a 	bl	8016d58 <tCycle_tick>
 8001424:	edd4 7a00 	vldr	s15, [r4]
 8001428:	ee37 0a80 	vadd.f32	s0, s15, s0
 800142c:	ed84 0a00 	vstr	s0, [r4]
}
 8001430:	b002      	add	sp, #8
 8001432:	bd10      	pop	{r4, pc}
 8001434:	20004cb0 	.word	0x20004cb0

08001438 <triTick>:

void __ATTR_ITCMRAM  triTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800143c:	4605      	mov	r5, r0
    tMBTriangle_setFreq(&tri[v][string], freq);
 800143e:	4c1a      	ldr	r4, [pc, #104]	; (80014a8 <triTick+0x70>)
 8001440:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8001444:	4617      	mov	r7, r2
 8001446:	4688      	mov	r8, r1
 8001448:	461e      	mov	r6, r3
    tMBTriangle_setFreq(&tri[v][string], freq);
 800144a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 800144e:	ed2d 8b02 	vpush	{d8}
 8001452:	eeb0 8a60 	vmov.f32	s16, s1
 8001456:	b082      	sub	sp, #8
    tMBTriangle_setFreq(&tri[v][string], freq);
 8001458:	9001      	str	r0, [sp, #4]
 800145a:	f017 fb31 	bl	8018ac0 <tMBTriangle_setFreq>
    tMBTriangle_setWidth(&tri[v][string], shape);
 800145e:	9801      	ldr	r0, [sp, #4]
 8001460:	eeb0 0a48 	vmov.f32	s0, s16
 8001464:	f017 fb3c 	bl	8018ae0 <tMBTriangle_setWidth>
    if (sync)
 8001468:	9801      	ldr	r0, [sp, #4]
 800146a:	b977      	cbnz	r7, 800148a <triTick+0x52>
	{
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBTriangle_tick(&tri[v][string]) * 2.0f;;
 800146c:	f016 fb4a 	bl	8017b04 <tMBTriangle_tick>
 8001470:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001474:	edd5 7a00 	vldr	s15, [r5]
 8001478:	eee0 7a07 	vfma.f32	s15, s0, s14
 800147c:	edc5 7a00 	vstr	s15, [r5]
}
 8001480:	b002      	add	sp, #8
 8001482:	ecbd 8b02 	vpop	{d8}
 8001486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <triTick+0x74>)
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <triTick+0x78>)
 800148e:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001492:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001496:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800149a:	ed96 0a00 	vldr	s0, [r6]
 800149e:	f017 fb31 	bl	8018b04 <tMBTriangle_sync>
 80014a2:	9801      	ldr	r0, [sp, #4]
 80014a4:	e7e2      	b.n	800146c <triTick+0x34>
 80014a6:	bf00      	nop
 80014a8:	20013104 	.word	0x20013104
 80014ac:	0801eed0 	.word	0x0801eed0
 80014b0:	20012f70 	.word	0x20012f70

080014b4 <userTick>:
void __ATTR_ITCMRAM  userTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    //tWaveOscS_setFreq(&wave[v], freq);
    //tWaveOscS_setIndex(&wave[v], shape);
    //*sample += tWaveOscS_tick(&wave[v]);
}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <filter_tick>:

uint32_t timeFilt = 0;

float __ATTR_ITCMRAM filter_tick(float* samples, float note, int string)
{
	interruptChecker = 0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	4a72      	ldr	r2, [pc, #456]	; (8001684 <filter_tick+0x1cc>)
{
 80014bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tempCount1 = DWT->CYCCNT;
	float cutoff[2];
	uint8_t enabledFilt[2] = {0,0};
	for (int f = 0; f < filterToTick; f++)
 80014c0:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80016b0 <filter_tick+0x1f8>
{
 80014c4:	4604      	mov	r4, r0
 80014c6:	460d      	mov	r5, r1
 80014c8:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 80014cc:	7013      	strb	r3, [r2, #0]
{
 80014ce:	b086      	sub	sp, #24
	uint32_t tempCount1 = DWT->CYCCNT;
 80014d0:	4a6d      	ldr	r2, [pc, #436]	; (8001688 <filter_tick+0x1d0>)
 80014d2:	6857      	ldr	r7, [r2, #4]
	uint8_t enabledFilt[2] = {0,0};
 80014d4:	f8ad 300c 	strh.w	r3, [sp, #12]
	for (int f = 0; f < filterToTick; f++)
 80014d8:	f898 3000 	ldrb.w	r3, [r8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80bc 	beq.w	800165a <filter_tick+0x1a2>
	{
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
		float enabled = filtParams[FilterEnabled].realVal[string];
 80014e2:	4e6a      	ldr	r6, [pc, #424]	; (800168c <filter_tick+0x1d4>)
 80014e4:	f201 229b 	addw	r2, r1, #667	; 0x29b
		enabledFilt[f] = (enabled > 0.5f);
		if (!enabledFilt[f]) continue;
 80014e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 80014ec:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80014f0:	eeb0 8a40 	vmov.f32	s16, s0
 80014f4:	edd2 8a00 	vldr	s17, [r2]
		if (!enabledFilt[f]) continue;
 80014f8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	d87b      	bhi.n	80015fa <filter_tick+0x142>
	for (int f = 0; f < filterToTick; f++)
 8001502:	2b01      	cmp	r3, #1
 8001504:	d93b      	bls.n	800157e <filter_tick+0xc6>
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001506:	f205 23c5 	addw	r3, r5, #709	; 0x2c5
		enabledFilt[f] = (enabled > 0.5f);
 800150a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 800150e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001512:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
 8001516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	bfcc      	ite	gt
 8001520:	2301      	movgt	r3, #1
 8001522:	2300      	movle	r3, #0
 8001524:	f88d 300d 	strb.w	r3, [sp, #13]
		if (!enabledFilt[f]) continue;
 8001528:	d929      	bls.n	800157e <filter_tick+0xc6>

		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 800152a:	4b59      	ldr	r3, [pc, #356]	; (8001690 <filter_tick+0x1d8>)
			note = 0.0f; //is this necessary?
		}

		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);

		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 800152c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001530:	eddf 0a58 	vldr	s1, [pc, #352]	; 8001694 <filter_tick+0x1dc>
 8001534:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001538:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8001698 <filter_tick+0x1e0>
 800153c:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800169c <filter_tick+0x1e4>
 8001540:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001544:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8001548:	4b55      	ldr	r3, [pc, #340]	; (80016a0 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 800154a:	ee77 7ae6 	vsub.f32	s15, s15, s13
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 800154e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001552:	edd3 6a00 	vldr	s13, [r3]
 8001556:	ee38 8a26 	vadd.f32	s16, s16, s13
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 800155a:	eee8 7a07 	vfma.f32	s15, s16, s14
 800155e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8001562:	f015 f8ab 	bl	80166bc <LEAF_clip>
		//smoothing may not be necessary
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 8001566:	1cab      	adds	r3, r5, #2
 8001568:	484e      	ldr	r0, [pc, #312]	; (80016a4 <filter_tick+0x1ec>)
 800156a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800156e:	9001      	str	r0, [sp, #4]
 8001570:	f013 fadc 	bl	8014b2c <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001574:	9801      	ldr	r0, [sp, #4]
 8001576:	f013 fadd 	bl	8014b34 <tExpSmooth_tick>
 800157a:	ed8d 0a05 	vstr	s0, [sp, #20]
	}

	float  sp = params[FilterSeriesParallelMix].realVal[string];

	if (enabledFilt[0])
 800157e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001582:	f205 23ef 	addw	r3, r5, #751	; 0x2ef
		filterTick[0](&samples[0], 0, cutoff[0], string);
	}
	float sendToFilter2 = samples[0] * (1.0f - sp);
	samples[1] += sendToFilter2;
	//compute what gets sent to the second filter
	if (enabledFilt[1])
 8001586:	f89d 800d 	ldrb.w	r8, [sp, #13]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 800158a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
 800158e:	eef4 8ae7 	vcmpe.f32	s17, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001592:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
 8001596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159a:	dd07      	ble.n	80015ac <filter_tick+0xf4>
		filterTick[0](&samples[0], 0, cutoff[0], string);
 800159c:	4b42      	ldr	r3, [pc, #264]	; (80016a8 <filter_tick+0x1f0>)
 800159e:	462a      	mov	r2, r5
 80015a0:	ed9d 0a04 	vldr	s0, [sp, #16]
 80015a4:	2100      	movs	r1, #0
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4620      	mov	r0, r4
 80015aa:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
 80015ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 80015b0:	ed94 0a01 	vldr	s0, [r4, #4]
 80015b4:	ed94 7a00 	vldr	s14, [r4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 80015b8:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 80015bc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80015c0:	ed84 0a01 	vstr	s0, [r4, #4]
	if (enabledFilt[1])
 80015c4:	f1b8 0f00 	cmp.w	r8, #0
 80015c8:	d009      	beq.n	80015de <filter_tick+0x126>
	{
		filterTick[1](&samples[1], 1, cutoff[1], string);
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <filter_tick+0x1f0>)
 80015cc:	462a      	mov	r2, r5
 80015ce:	ed9d 0a05 	vldr	s0, [sp, #20]
 80015d2:	2101      	movs	r1, #1
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	1d20      	adds	r0, r4, #4
 80015d8:	4798      	blx	r3
	}

	timeFilt = DWT->CYCCNT - tempCount1;
	return samples[1] + (samples[0] * sp);
 80015da:	ed94 0a01 	vldr	s0, [r4, #4]
	timeFilt = DWT->CYCCNT - tempCount1;
 80015de:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <filter_tick+0x1d0>)
 80015e0:	4a32      	ldr	r2, [pc, #200]	; (80016ac <filter_tick+0x1f4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	1bdb      	subs	r3, r3, r7
 80015e6:	6013      	str	r3, [r2, #0]
	return samples[1] + (samples[0] * sp);
 80015e8:	edd4 7a00 	vldr	s15, [r4]
}
 80015ec:	eea7 0a88 	vfma.f32	s0, s15, s16
 80015f0:	b006      	add	sp, #24
 80015f2:	ecbd 8b02 	vpop	{d8}
 80015f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 80015fa:	f606 2364 	addw	r3, r6, #2660	; 0xa64
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 80015fe:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001602:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001694 <filter_tick+0x1dc>
 8001606:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800160a:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8001698 <filter_tick+0x1e0>
 800160e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800169c <filter_tick+0x1e4>
 8001612:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8001616:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 800161a:	4b21      	ldr	r3, [pc, #132]	; (80016a0 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 800161c:	ee77 7ac7 	vsub.f32	s15, s15, s14
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8001620:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001624:	ed93 7a00 	vldr	s14, [r3]
 8001628:	ee38 7a07 	vadd.f32	s14, s16, s14
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 800162c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8001630:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8001634:	f015 f842 	bl	80166bc <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 8001638:	481a      	ldr	r0, [pc, #104]	; (80016a4 <filter_tick+0x1ec>)
 800163a:	00ab      	lsls	r3, r5, #2
 800163c:	4418      	add	r0, r3
 800163e:	9001      	str	r0, [sp, #4]
 8001640:	f013 fa74 	bl	8014b2c <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001644:	9801      	ldr	r0, [sp, #4]
 8001646:	f013 fa75 	bl	8014b34 <tExpSmooth_tick>
	for (int f = 0; f < filterToTick; f++)
 800164a:	f898 3000 	ldrb.w	r3, [r8]
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 800164e:	ed8d 0a04 	vstr	s0, [sp, #16]
	for (int f = 0; f < filterToTick; f++)
 8001652:	2b01      	cmp	r3, #1
 8001654:	f63f af57 	bhi.w	8001506 <filter_tick+0x4e>
 8001658:	e791      	b.n	800157e <filter_tick+0xc6>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <filter_tick+0x1d4>)
 800165c:	f201 25ef 	addw	r5, r1, #751	; 0x2ef
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001660:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 8001664:	ed90 0a01 	vldr	s0, [r0, #4]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001668:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	samples[1] += sendToFilter2;
 800166c:	ed90 7a00 	vldr	s14, [r0]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001670:	ed93 8a00 	vldr	s16, [r3]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001674:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 8001678:	eea7 0a87 	vfma.f32	s0, s15, s14
 800167c:	ed80 0a01 	vstr	s0, [r0, #4]
	if (enabledFilt[1])
 8001680:	e7ad      	b.n	80015de <filter_tick+0x126>
 8001682:	bf00      	nop
 8001684:	2001539d 	.word	0x2001539d
 8001688:	e0001000 	.word	0xe0001000
 800168c:	20015d64 	.word	0x20015d64
 8001690:	20016870 	.word	0x20016870
 8001694:	420fb824 	.word	0x420fb824
 8001698:	457ff000 	.word	0x457ff000
 800169c:	00000000 	.word	0x00000000
 80016a0:	20000524 	.word	0x20000524
 80016a4:	20004624 	.word	0x20004624
 80016a8:	20004644 	.word	0x20004644
 80016ac:	200130e0 	.word	0x200130e0
 80016b0:	20000004 	.word	0x20000004

080016b4 <lowpassTick>:


void __ATTR_ITCMRAM  lowpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 80016b4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <lowpassTick+0x3c>)
{
 80016ba:	b530      	push	{r4, r5, lr}
 80016bc:	4605      	mov	r5, r0
 80016be:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 80016c0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80016c4:	0094      	lsls	r4, r2, #2
 80016c6:	9001      	str	r0, [sp, #4]
 80016c8:	f013 fc3c 	bl	8014f44 <tSVF_setFreqFast>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 80016cc:	ed95 0a00 	vldr	s0, [r5]
 80016d0:	9801      	ldr	r0, [sp, #4]
 80016d2:	f013 fc01 	bl	8014ed8 <tSVF_tick>
    *sample *= filterGain[v][string];
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 80016d8:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80016dc:	4422      	add	r2, r4
 80016de:	edd2 7a00 	vldr	s15, [r2]
 80016e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80016e6:	ed85 0a00 	vstr	s0, [r5]
}
 80016ea:	b003      	add	sp, #12
 80016ec:	bd30      	pop	{r4, r5, pc}
 80016ee:	bf00      	nop
 80016f0:	200048d4 	.word	0x200048d4
 80016f4:	20004634 	.word	0x20004634

080016f8 <highpassTick>:

void __ATTR_ITCMRAM  highpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 80016f8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <highpassTick+0x3c>)
{
 80016fe:	b530      	push	{r4, r5, lr}
 8001700:	4605      	mov	r5, r0
 8001702:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 8001704:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001708:	0094      	lsls	r4, r2, #2
 800170a:	9001      	str	r0, [sp, #4]
 800170c:	f013 fc1a 	bl	8014f44 <tSVF_setFreqFast>
	*sample = tSVF_tick(&highpass[v][string], *sample);
 8001710:	ed95 0a00 	vldr	s0, [r5]
 8001714:	9801      	ldr	r0, [sp, #4]
 8001716:	f013 fbdf 	bl	8014ed8 <tSVF_tick>
    *sample *= filterGain[v][string];
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
 800171c:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001720:	4422      	add	r2, r4
 8001722:	edd2 7a00 	vldr	s15, [r2]
 8001726:	ee27 0a80 	vmul.f32	s0, s15, s0
 800172a:	ed85 0a00 	vstr	s0, [r5]
}
 800172e:	b003      	add	sp, #12
 8001730:	bd30      	pop	{r4, r5, pc}
 8001732:	bf00      	nop
 8001734:	200046c4 	.word	0x200046c4
 8001738:	20004634 	.word	0x20004634

0800173c <bandpassTick>:

void __ATTR_ITCMRAM  bandpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 800173c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <bandpassTick+0x3c>)
{
 8001742:	b530      	push	{r4, r5, lr}
 8001744:	4605      	mov	r5, r0
 8001746:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 8001748:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800174c:	0094      	lsls	r4, r2, #2
 800174e:	9001      	str	r0, [sp, #4]
 8001750:	f013 fbf8 	bl	8014f44 <tSVF_setFreqFast>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 8001754:	ed95 0a00 	vldr	s0, [r5]
 8001758:	9801      	ldr	r0, [sp, #4]
 800175a:	f013 fbbd 	bl	8014ed8 <tSVF_tick>
    *sample *= filterGain[v][string];
 800175e:	4a07      	ldr	r2, [pc, #28]	; (800177c <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 8001760:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001764:	4422      	add	r2, r4
 8001766:	edd2 7a00 	vldr	s15, [r2]
 800176a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800176e:	ed85 0a00 	vstr	s0, [r5]
}
 8001772:	b003      	add	sp, #12
 8001774:	bd30      	pop	{r4, r5, pc}
 8001776:	bf00      	nop
 8001778:	20000514 	.word	0x20000514
 800177c:	20004634 	.word	0x20004634

08001780 <diodeLowpassTick>:

void __ATTR_ITCMRAM  diodeLowpassTick(float* sample, int v, float cutoff, int string)
{
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 8001780:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <diodeLowpassTick+0x3c>)
{
 8001786:	b530      	push	{r4, r5, lr}
 8001788:	4605      	mov	r5, r0
 800178a:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 800178c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001790:	0094      	lsls	r4, r2, #2
 8001792:	9001      	str	r0, [sp, #4]
 8001794:	f014 fcee 	bl	8016174 <tDiodeFilter_setFreqFast>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 8001798:	ed95 0a00 	vldr	s0, [r5]
 800179c:	9801      	ldr	r0, [sp, #4]
 800179e:	f014 fb67 	bl	8015e70 <tDiodeFilter_tickEfficient>
    *sample *= filterGain[v][string];
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 80017a4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80017a8:	4422      	add	r2, r4
 80017aa:	edd2 7a00 	vldr	s15, [r2]
 80017ae:	ee27 0a80 	vmul.f32	s0, s15, s0
 80017b2:	ed85 0a00 	vstr	s0, [r5]
}
 80017b6:	b003      	add	sp, #12
 80017b8:	bd30      	pop	{r4, r5, pc}
 80017ba:	bf00      	nop
 80017bc:	200045d4 	.word	0x200045d4
 80017c0:	20004634 	.word	0x20004634

080017c4 <VZpeakTick>:

void __ATTR_ITCMRAM  VZpeakTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <VZpeakTick+0x28>)
 80017c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 80017ca:	b510      	push	{r4, lr}
 80017cc:	4604      	mov	r4, r0
 80017ce:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 80017d0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80017d4:	9001      	str	r0, [sp, #4]
 80017d6:	f013 fe95 	bl	8015504 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
 80017da:	9801      	ldr	r0, [sp, #4]
 80017dc:	ed94 0a00 	vldr	s0, [r4]
 80017e0:	f013 fc72 	bl	80150c8 <tVZFilter_tickEfficient>
 80017e4:	ed84 0a00 	vstr	s0, [r4]
}
 80017e8:	b002      	add	sp, #8
 80017ea:	bd10      	pop	{r4, pc}
 80017ec:	200004fc 	.word	0x200004fc

080017f0 <VZlowshelfTick>:

void __ATTR_ITCMRAM  VZlowshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <VZlowshelfTick+0x28>)
 80017f2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 80017f6:	b510      	push	{r4, lr}
 80017f8:	4604      	mov	r4, r0
 80017fa:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 80017fc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001800:	9001      	str	r0, [sp, #4]
 8001802:	f013 fe7f 	bl	8015504 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
 8001806:	9801      	ldr	r0, [sp, #4]
 8001808:	ed94 0a00 	vldr	s0, [r4]
 800180c:	f013 fc5c 	bl	80150c8 <tVZFilter_tickEfficient>
 8001810:	ed84 0a00 	vstr	s0, [r4]
}
 8001814:	b002      	add	sp, #8
 8001816:	bd10      	pop	{r4, pc}
 8001818:	200004ec 	.word	0x200004ec

0800181c <VZhighshelfTick>:
void __ATTR_ITCMRAM  VZhighshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <VZhighshelfTick+0x28>)
 800181e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001822:	b510      	push	{r4, lr}
 8001824:	4604      	mov	r4, r0
 8001826:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 8001828:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800182c:	9001      	str	r0, [sp, #4]
 800182e:	f013 fe69 	bl	8015504 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
 8001832:	9801      	ldr	r0, [sp, #4]
 8001834:	ed94 0a00 	vldr	s0, [r4]
 8001838:	f013 fc46 	bl	80150c8 <tVZFilter_tickEfficient>
 800183c:	ed84 0a00 	vstr	s0, [r4]
}
 8001840:	b002      	add	sp, #8
 8001842:	bd10      	pop	{r4, pc}
 8001844:	200004dc 	.word	0x200004dc

08001848 <VZbandrejectTick>:
void __ATTR_ITCMRAM  VZbandrejectTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 8001848:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800184c:	4b0d      	ldr	r3, [pc, #52]	; (8001884 <VZbandrejectTick+0x3c>)
{
 800184e:	b530      	push	{r4, r5, lr}
 8001850:	4605      	mov	r5, r0
 8001852:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 8001854:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001858:	0094      	lsls	r4, r2, #2
 800185a:	9001      	str	r0, [sp, #4]
 800185c:	f013 fe52 	bl	8015504 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 8001860:	ed95 0a00 	vldr	s0, [r5]
 8001864:	9801      	ldr	r0, [sp, #4]
 8001866:	f013 fc2f 	bl	80150c8 <tVZFilter_tickEfficient>
    *sample *= filterGain[v][string];
 800186a:	4a07      	ldr	r2, [pc, #28]	; (8001888 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 800186c:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001870:	4422      	add	r2, r4
 8001872:	edd2 7a00 	vldr	s15, [r2]
 8001876:	ee27 0a80 	vmul.f32	s0, s15, s0
 800187a:	ed85 0a00 	vstr	s0, [r5]
}
 800187e:	b003      	add	sp, #12
 8001880:	bd30      	pop	{r4, r5, pc}
 8001882:	bf00      	nop
 8001884:	200004cc 	.word	0x200004cc
 8001888:	20004634 	.word	0x20004634

0800188c <LadderLowpassTick>:

void __ATTR_ITCMRAM  LadderLowpassTick(float* sample, int v, float cutoff, int string)
{
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 800188c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <LadderLowpassTick+0x3c>)
{
 8001892:	b530      	push	{r4, r5, lr}
 8001894:	4605      	mov	r5, r0
 8001896:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 8001898:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800189c:	0094      	lsls	r4, r2, #2
 800189e:	9001      	str	r0, [sp, #4]
 80018a0:	f014 fe06 	bl	80164b0 <tLadderFilter_setFreqFast>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 80018a4:	ed95 0a00 	vldr	s0, [r5]
 80018a8:	9801      	ldr	r0, [sp, #4]
 80018aa:	f014 fcdb 	bl	8016264 <tLadderFilter_tick>
    *sample *= filterGain[v][string];
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 80018b0:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80018b4:	4422      	add	r2, r4
 80018b6:	edd2 7a00 	vldr	s15, [r2]
 80018ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80018be:	ed85 0a00 	vstr	s0, [r5]
}
 80018c2:	b003      	add	sp, #12
 80018c4:	bd30      	pop	{r4, r5, pc}
 80018c6:	bf00      	nop
 80018c8:	200004bc 	.word	0x200004bc
 80018cc:	20004634 	.word	0x20004634

080018d0 <setFreqMultPitch>:



void __ATTR_ITCMRAM setFreqMultPitch(float pitch, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 80018d0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80018d4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 80018d8:	eef0 0a40 	vmov.f32	s1, s0
 80018dc:	b538      	push	{r3, r4, r5, lr}
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 80018de:	0045      	lsls	r5, r0, #1
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <setFreqMultPitch+0x4c>)
 80018e2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
{
 80018e6:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 80018e8:	3020      	adds	r0, #32
 80018ea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80018ee:	4408      	add	r0, r1
 80018f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80018f4:	ed90 7a02 	vldr	s14, [r0, #8]
 80018f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001900:	dd01      	ble.n	8001906 <setFreqMultPitch+0x36>
	{
		pitch = roundf(pitch);
 8001902:	fef8 0a40 	vrinta.f32	s1, s0
	}

	freqMult[osc][string] = powf(1.059463094359295f, pitch);
 8001906:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001920 <setFreqMultPitch+0x50>
 800190a:	442c      	add	r4, r5
 800190c:	f01b fc94 	bl	801d238 <powf>
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <setFreqMultPitch+0x54>)
 8001912:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001916:	ed84 0a00 	vstr	s0, [r4]

}
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	20015d64 	.word	0x20015d64
 8001920:	3f879c7d 	.word	0x3f879c7d
 8001924:	20004664 	.word	0x20004664

08001928 <setFreqMultHarm>:

void __ATTR_ITCMRAM setFreqMultHarm(float harm, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001928:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800192c:	4b15      	ldr	r3, [pc, #84]	; (8001984 <setFreqMultHarm+0x5c>)
 800192e:	0042      	lsls	r2, r0, #1
 8001930:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001934:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8001938:	3020      	adds	r0, #32
 800193a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800193e:	4408      	add	r0, r1
 8001940:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001944:	ed90 7a02 	vldr	s14, [r0, #8]
 8001948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800194c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001950:	dd01      	ble.n	8001956 <setFreqMultHarm+0x2e>
	{
		harm = roundf(harm);
 8001952:	feb8 0a40 	vrinta.f32	s0, s0
	}

	if (harm >= 0)
 8001956:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		freqMult[osc][string] = (harm + 1);
 800195a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	db08      	blt.n	8001976 <setFreqMultHarm+0x4e>
		freqMult[osc][string] = (harm + 1);
 8001964:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <setFreqMultHarm+0x60>)
 800196a:	4411      	add	r1, r2
 800196c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001970:	ed81 0a00 	vstr	s0, [r1]
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
	}

}
 8001974:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
 8001976:	ee30 0a67 	vsub.f32	s0, s0, s15
 800197a:	eeb0 7ac0 	vabs.f32	s14, s0
 800197e:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8001982:	e7f1      	b.n	8001968 <setFreqMultHarm+0x40>
 8001984:	20015d64 	.word	0x20015d64
 8001988:	20004664 	.word	0x20004664

0800198c <lowpassSetQ>:



void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&lowpass[v][string], q);
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <lowpassSetQ+0x10>)
 800198e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001992:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001996:	f013 bb0b 	b.w	8014fb0 <tSVF_setQ>
 800199a:	bf00      	nop
 800199c:	200048d4 	.word	0x200048d4

080019a0 <highpassSetQ>:
}

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&highpass[v][string], q);
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <highpassSetQ+0x10>)
 80019a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019aa:	f013 bb01 	b.w	8014fb0 <tSVF_setQ>
 80019ae:	bf00      	nop
 80019b0:	200046c4 	.word	0x200046c4

080019b4 <bandpassSetQ>:
}

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&bandpass[v][string], q);
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <bandpassSetQ+0x10>)
 80019b6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019be:	f013 baf7 	b.w	8014fb0 <tSVF_setQ>
 80019c2:	bf00      	nop
 80019c4:	20000514 	.word	0x20000514

080019c8 <diodeLowpassSetQ>:
}

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <diodeLowpassSetQ+0x10>)
 80019ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019d2:	f014 bbef 	b.w	80161b4 <tDiodeFilter_setQ>
 80019d6:	bf00      	nop
 80019d8:	200045d4 	.word	0x200045d4

080019dc <VZpeakSetQ>:
}

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <VZpeakSetQ+0x10>)
 80019de:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019e6:	f013 bf07 	b.w	80157f8 <tVZFilter_setResonance>
 80019ea:	bf00      	nop
 80019ec:	200004fc 	.word	0x200004fc

080019f0 <VZlowshelfSetQ>:
}

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <VZlowshelfSetQ+0x10>)
 80019f2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80019f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019fa:	f013 befd 	b.w	80157f8 <tVZFilter_setResonance>
 80019fe:	bf00      	nop
 8001a00:	200004ec 	.word	0x200004ec

08001a04 <VZhighshelfSetQ>:
}

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <VZhighshelfSetQ+0x10>)
 8001a06:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a0e:	f013 bef3 	b.w	80157f8 <tVZFilter_setResonance>
 8001a12:	bf00      	nop
 8001a14:	200004dc 	.word	0x200004dc

08001a18 <VZbandrejectSetQ>:
}

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <VZbandrejectSetQ+0x10>)
 8001a1a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a22:	f013 bee9 	b.w	80157f8 <tVZFilter_setResonance>
 8001a26:	bf00      	nop
 8001a28:	200004cc 	.word	0x200004cc

08001a2c <LadderLowpassSetQ>:
}

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <LadderLowpassSetQ+0x10>)
 8001a2e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001a32:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a36:	f014 bd5f 	b.w	80164f8 <tLadderFilter_setQ>
 8001a3a:	bf00      	nop
 8001a3c:	200004bc 	.word	0x200004bc

08001a40 <lowpassSetGain>:
}

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8001a40:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001a44:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 8001a48:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8001a4a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001a4e:	4605      	mov	r5, r0
 8001a50:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8001a52:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	f014 ffe7 	bl	8016a2c <fasterdbtoa>
 8001a5e:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <lowpassSetGain+0x2c>)
 8001a60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001a64:	ed84 0a00 	vstr	s0, [r4]
}
 8001a68:	bd38      	pop	{r3, r4, r5, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20004634 	.word	0x20004634

08001a70 <highpassSetGain>:
 8001a70:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001a74:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8001a78:	b538      	push	{r3, r4, r5, lr}
 8001a7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001a7e:	4605      	mov	r5, r0
 8001a80:	460c      	mov	r4, r1
 8001a82:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001a86:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8a:	f014 ffcf 	bl	8016a2c <fasterdbtoa>
 8001a8e:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <highpassSetGain+0x2c>)
 8001a90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001a94:	ed84 0a00 	vstr	s0, [r4]
 8001a98:	bd38      	pop	{r3, r4, r5, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20004634 	.word	0x20004634

08001aa0 <bandpassSetGain>:
 8001aa0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001aa4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8001aa8:	b538      	push	{r3, r4, r5, lr}
 8001aaa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001aae:	4605      	mov	r5, r0
 8001ab0:	460c      	mov	r4, r1
 8001ab2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aba:	f014 ffb7 	bl	8016a2c <fasterdbtoa>
 8001abe:	4b03      	ldr	r3, [pc, #12]	; (8001acc <bandpassSetGain+0x2c>)
 8001ac0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001ac4:	ed84 0a00 	vstr	s0, [r4]
 8001ac8:	bd38      	pop	{r3, r4, r5, pc}
 8001aca:	bf00      	nop
 8001acc:	20004634 	.word	0x20004634

08001ad0 <diodeLowpassSetGain>:
 8001ad0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001ad4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8001ad8:	b538      	push	{r3, r4, r5, lr}
 8001ada:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001ade:	4605      	mov	r5, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	f014 ff9f 	bl	8016a2c <fasterdbtoa>
 8001aee:	4b03      	ldr	r3, [pc, #12]	; (8001afc <diodeLowpassSetGain+0x2c>)
 8001af0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001af4:	ed84 0a00 	vstr	s0, [r4]
 8001af8:	bd38      	pop	{r3, r4, r5, pc}
 8001afa:	bf00      	nop
 8001afc:	20004634 	.word	0x20004634

08001b00 <VZpeakSetGain>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001b00:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8001b04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001b2c <VZpeakSetGain+0x2c>
{
 8001b08:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001b0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001b0e:	4605      	mov	r5, r0
 8001b10:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001b12:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001b16:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1a:	f014 ff87 	bl	8016a2c <fasterdbtoa>
 8001b1e:	4804      	ldr	r0, [pc, #16]	; (8001b30 <VZpeakSetGain+0x30>)
 8001b20:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001b28:	f013 be4a 	b.w	80157c0 <tVZFilter_setGain>
 8001b2c:	42480000 	.word	0x42480000
 8001b30:	200004fc 	.word	0x200004fc

08001b34 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001b34:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8001b38:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001b60 <VZlowshelfSetGain+0x2c>
{
 8001b3c:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001b3e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001b42:	4605      	mov	r5, r0
 8001b44:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001b46:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4e:	f014 ff6d 	bl	8016a2c <fasterdbtoa>
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <VZlowshelfSetGain+0x30>)
 8001b54:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001b5c:	f013 be30 	b.w	80157c0 <tVZFilter_setGain>
 8001b60:	42480000 	.word	0x42480000
 8001b64:	200004ec 	.word	0x200004ec

08001b68 <VZhighshelfSetGain>:
 8001b68:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8001b6c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001b94 <VZhighshelfSetGain+0x2c>
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001b76:	4605      	mov	r5, r0
 8001b78:	460c      	mov	r4, r1
 8001b7a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b82:	f014 ff53 	bl	8016a2c <fasterdbtoa>
 8001b86:	4804      	ldr	r0, [pc, #16]	; (8001b98 <VZhighshelfSetGain+0x30>)
 8001b88:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8001b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b90:	f013 be16 	b.w	80157c0 <tVZFilter_setGain>
 8001b94:	42480000 	.word	0x42480000
 8001b98:	200004ec 	.word	0x200004ec

08001b9c <VZbandrejectSetGain>:
 8001b9c:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001ba0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001baa:	4605      	mov	r5, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb6:	f014 ff39 	bl	8016a2c <fasterdbtoa>
 8001bba:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <VZbandrejectSetGain+0x2c>)
 8001bbc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001bc0:	ed84 0a00 	vstr	s0, [r4]
 8001bc4:	bd38      	pop	{r3, r4, r5, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20004634 	.word	0x20004634

08001bcc <LadderLowpassSetGain>:
 8001bcc:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001bd0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8001bd4:	b538      	push	{r3, r4, r5, lr}
 8001bd6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001bda:	4605      	mov	r5, r0
 8001bdc:	460c      	mov	r4, r1
 8001bde:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001be2:	eeb0 0a67 	vmov.f32	s0, s15
 8001be6:	f014 ff21 	bl	8016a2c <fasterdbtoa>
 8001bea:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <LadderLowpassSetGain+0x2c>)
 8001bec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001bf0:	ed84 0a00 	vstr	s0, [r4]
 8001bf4:	bd38      	pop	{r3, r4, r5, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20004634 	.word	0x20004634

08001bfc <setEnvelopeAttack>:
}


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
	a = a + 0.01f;
 8001bfc:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001c14 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
 8001c00:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <setEnvelopeAttack+0x1c>)
 8001c06:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001c0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001c0e:	f012 bc9b 	b.w	8014548 <tADSRT_setAttack>
 8001c12:	bf00      	nop
 8001c14:	3c23d70a 	.word	0x3c23d70a
 8001c18:	200045fc 	.word	0x200045fc

08001c1c <setEnvelopeDecay>:
}

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
	d = d + 0.01f;
 8001c1c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001c34 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
 8001c20:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <setEnvelopeDecay+0x1c>)
 8001c26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001c2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001c2e:	f012 bc9f 	b.w	8014570 <tADSRT_setDecay>
 8001c32:	bf00      	nop
 8001c34:	3c23d70a 	.word	0x3c23d70a
 8001c38:	200045fc 	.word	0x200045fc

08001c3c <setEnvelopeSustain>:
}

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
	tADSRT_setSustain(&envs[v][string], s);
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <setEnvelopeSustain+0x10>)
 8001c3e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001c42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001c46:	f012 bca7 	b.w	8014598 <tADSRT_setSustain>
 8001c4a:	bf00      	nop
 8001c4c:	200045fc 	.word	0x200045fc

08001c50 <setEnvelopeRelease>:
}

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
	r = r + 0.01f;
 8001c50:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001c68 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
 8001c54:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <setEnvelopeRelease+0x1c>)
 8001c5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001c5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001c62:	f012 bcaf 	b.w	80145c4 <tADSRT_setRelease>
 8001c66:	bf00      	nop
 8001c68:	3c23d70a 	.word	0x3c23d70a
 8001c6c:	200045fc 	.word	0x200045fc

08001c70 <setEnvelopeLeak>:
}

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
 8001c70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c74:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001c98 <setEnvelopeLeak+0x28>
 8001c78:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001c9c <setEnvelopeLeak+0x2c>
 8001c7c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <setEnvelopeLeak+0x30>)
 8001c82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8001c86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001c8a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8001c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c92:	f012 bcab 	b.w	80145ec <tADSRT_setLeakFactor>
 8001c96:	bf00      	nop
 8001c98:	3851b717 	.word	0x3851b717
 8001c9c:	3f7ffcb9 	.word	0x3f7ffcb9
 8001ca0:	200045fc 	.word	0x200045fc

08001ca4 <setAmp>:
}

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <setAmp+0xc>)
 8001ca6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001caa:	ed81 0a00 	vstr	s0, [r1]
}
 8001cae:	4770      	bx	lr
 8001cb0:	2000050c 	.word	0x2000050c

08001cb4 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <setMaster+0xc>)
 8001cb6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001cba:	ed81 0a00 	vstr	s0, [r1]
}
 8001cbe:	4770      	bx	lr
 8001cc0:	20004654 	.word	0x20004654

08001cc4 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
 8001cc4:	4b01      	ldr	r3, [pc, #4]	; (8001ccc <setTranspose+0x8>)
 8001cc6:	ed83 0a00 	vstr	s0, [r3]
}
 8001cca:	4770      	bx	lr
 8001ccc:	20013100 	.word	0x20013100

08001cd0 <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
 8001cd0:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001ce0 <setPitchBendRange+0x10>
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <setPitchBendRange+0x14>)
 8001cd6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001cda:	ed83 0a00 	vstr	s0, [r3]
}
 8001cde:	4770      	bx	lr
 8001ce0:	39000200 	.word	0x39000200
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001ce8:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001cec:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001d1c <setFinalLowpass+0x34>
{
 8001cf0:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001cf4:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8001d20 <setFinalLowpass+0x38>
 8001cf8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001d24 <setFinalLowpass+0x3c>
 8001cfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
 8001d00:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001d02:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
 8001d06:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001d08:	f014 fcd8 	bl	80166bc <LEAF_clip>
 8001d0c:	4806      	ldr	r0, [pc, #24]	; (8001d28 <setFinalLowpass+0x40>)
 8001d0e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001d16:	f013 b915 	b.w	8014f44 <tSVF_setFreqFast>
 8001d1a:	bf00      	nop
 8001d1c:	420fb824 	.word	0x420fb824
 8001d20:	457ff000 	.word	0x457ff000
 8001d24:	00000000 	.word	0x00000000
 8001d28:	2000464c 	.word	0x2000464c

08001d2c <tickMappings>:

uint32_t timeMap = 0;
void __ATTR_ITCMRAM tickMappings(void)
{
 8001d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
 8001d30:	4956      	ldr	r1, [pc, #344]	; (8001e8c <tickMappings+0x160>)
 8001d32:	2700      	movs	r7, #0
	uint32_t tempCount1 = DWT->CYCCNT;
 8001d34:	4a56      	ldr	r2, [pc, #344]	; (8001e90 <tickMappings+0x164>)
	for (int i = 0; i < numMappings; i++)
 8001d36:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <tickMappings+0x168>)
{
 8001d38:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 8001d3c:	700f      	strb	r7, [r1, #0]
{
 8001d3e:	b083      	sub	sp, #12
	uint32_t tempCount1 = DWT->CYCCNT;
 8001d40:	6852      	ldr	r2, [r2, #4]
	for (int i = 0; i < numMappings; i++)
 8001d42:	781b      	ldrb	r3, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8001d44:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < numMappings; i++)
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8086 	beq.w	8001e58 <tickMappings+0x12c>
	{
		for (int v = 0; v < numStringsThisBoard; v++)
 8001d4c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001ea4 <tickMappings+0x178>
 8001d50:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8001ea8 <tickMappings+0x17c>
 8001d54:	f898 2000 	ldrb.w	r2, [r8]
 8001d58:	4c4f      	ldr	r4, [pc, #316]	; (8001e98 <tickMappings+0x16c>)
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d07c      	beq.n	8001e58 <tickMappings+0x12c>
 8001d5e:	46a3      	mov	fp, r4
 8001d60:	464e      	mov	r6, r9
 8001d62:	2500      	movs	r5, #0
		{

			float unsmoothedValue = 0.0f;
			float smoothedValue = 0.0f;
			for (int j = 0; j < mappings[i].numHooks; j++)
 8001d64:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	f000 8086 	beq.w	8001e7a <tickMappings+0x14e>
			{
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001d6e:	f8db 101c 	ldr.w	r1, [fp, #28]
 8001d72:	f8db 2000 	ldr.w	r2, [fp]
 8001d76:	edd1 7a00 	vldr	s15, [r1]
 8001d7a:	ed92 7a00 	vldr	s14, [r2]
 8001d7e:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8001d82:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (mappings[i].sourceSmoothed[j])
 8001d86:	7e23      	ldrb	r3, [r4, #24]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001d88:	ee67 7a80 	vmul.f32	s15, s15, s0
				if (mappings[i].sourceSmoothed[j])
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d16e      	bne.n	8001e6e <tickMappings+0x142>
				{
					smoothedValue += sum;
				}
				else
				{
					unsmoothedValue += sum;
 8001d90:	eeb0 8a67 	vmov.f32	s16, s15
			float smoothedValue = 0.0f;
 8001d94:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001e9c <tickMappings+0x170>
			for (int j = 0; j < mappings[i].numHooks; j++)
 8001d98:	2801      	cmp	r0, #1
 8001d9a:	d027      	beq.n	8001dec <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001d9c:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 8001da0:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001da4:	ed91 7a00 	vldr	s14, [r1]
 8001da8:	ed92 6a00 	vldr	s12, [r2]
 8001dac:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8001db0:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 8001db4:	7e63      	ldrb	r3, [r4, #25]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001db6:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d15a      	bne.n	8001e74 <tickMappings+0x148>
					unsmoothedValue += sum;
 8001dbe:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 8001dc2:	2802      	cmp	r0, #2
 8001dc4:	d012      	beq.n	8001dec <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001dc6:	f8db 1010 	ldr.w	r1, [fp, #16]
 8001dca:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8001dce:	ed91 7a00 	vldr	s14, [r1]
 8001dd2:	ed92 6a00 	vldr	s12, [r2]
 8001dd6:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 8001dda:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 8001dde:	7ea0      	ldrb	r0, [r4, #26]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001de0:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d04d      	beq.n	8001e84 <tickMappings+0x158>
					smoothedValue += sum;
 8001de8:	ee77 7a87 	vadd.f32	s15, s15, s14
				}
			}
			//sources are now summed - let's add the initial value
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 8001dec:	f854 2c04 	ldr.w	r2, [r4, #-4]

			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 8001df0:	4630      	mov	r0, r6
		for (int v = 0; v < numStringsThisBoard; v++)
 8001df2:	f10b 0b04 	add.w	fp, fp, #4
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 8001df6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001dfa:	ed92 0a00 	vldr	s0, [r2]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 8001dfe:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001e02:	f012 fe93 	bl	8014b2c <tExpSmooth_setDest>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
 8001e06:	4630      	mov	r0, r6
 8001e08:	f012 fe94 	bl	8014b34 <tExpSmooth_tick>
			float finalVal = unsmoothedValue + smoothedValue;

			//now scale the value with the correct scaling function
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 8001e0c:	f854 ac04 	ldr.w	sl, [r4, #-4]
 8001e10:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int v = 0; v < numStringsThisBoard; v++)
 8001e14:	3604      	adds	r6, #4
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 8001e16:	f8da 2010 	ldr.w	r2, [sl, #16]
 8001e1a:	4790      	blx	r2
 8001e1c:	1caa      	adds	r2, r5, #2
 8001e1e:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
 8001e22:	ed81 0a00 	vstr	s0, [r1]

			//and pop that value where it belongs by setting the actual parameter
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 8001e26:	4629      	mov	r1, r5
 8001e28:	f854 0c04 	ldr.w	r0, [r4, #-4]
		for (int v = 0; v < numStringsThisBoard; v++)
 8001e2c:	3501      	adds	r5, #1
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 8001e2e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8001e32:	6942      	ldr	r2, [r0, #20]
 8001e34:	7e00      	ldrb	r0, [r0, #24]
 8001e36:	ed9c 0a00 	vldr	s0, [ip]
 8001e3a:	4790      	blx	r2
		for (int v = 0; v < numStringsThisBoard; v++)
 8001e3c:	f898 2000 	ldrb.w	r2, [r8]
 8001e40:	42aa      	cmp	r2, r5
 8001e42:	dc8f      	bgt.n	8001d64 <tickMappings+0x38>
	for (int i = 0; i < numMappings; i++)
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <tickMappings+0x168>)
 8001e46:	3701      	adds	r7, #1
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	429f      	cmp	r7, r3
 8001e4c:	da04      	bge.n	8001e58 <tickMappings+0x12c>
 8001e4e:	f109 0908 	add.w	r9, r9, #8
 8001e52:	344c      	adds	r4, #76	; 0x4c
		for (int v = 0; v < numStringsThisBoard; v++)
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d182      	bne.n	8001d5e <tickMappings+0x32>
		}
	}
	timeMap = DWT->CYCCNT - tempCount1;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <tickMappings+0x164>)
 8001e5a:	9901      	ldr	r1, [sp, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <tickMappings+0x174>)
 8001e60:	1a5b      	subs	r3, r3, r1
 8001e62:	6013      	str	r3, [r2, #0]

}
 8001e64:	b003      	add	sp, #12
 8001e66:	ecbd 8b02 	vpop	{d8}
 8001e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float unsmoothedValue = 0.0f;
 8001e6e:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 8001e9c <tickMappings+0x170>
 8001e72:	e791      	b.n	8001d98 <tickMappings+0x6c>
					smoothedValue += sum;
 8001e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e78:	e7a3      	b.n	8001dc2 <tickMappings+0x96>
			float smoothedValue = 0.0f;
 8001e7a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001e9c <tickMappings+0x170>
			float unsmoothedValue = 0.0f;
 8001e7e:	eeb0 8a67 	vmov.f32	s16, s15
 8001e82:	e7b3      	b.n	8001dec <tickMappings+0xc0>
					unsmoothedValue += sum;
 8001e84:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 8001e88:	e7b0      	b.n	8001dec <tickMappings+0xc0>
 8001e8a:	bf00      	nop
 8001e8c:	2001539d 	.word	0x2001539d
 8001e90:	e0001000 	.word	0xe0001000
 8001e94:	20015d60 	.word	0x20015d60
 8001e98:	200153dc 	.word	0x200153dc
 8001e9c:	00000000 	.word	0x00000000
 8001ea0:	200130ec 	.word	0x200130ec
 8001ea4:	20000052 	.word	0x20000052
 8001ea8:	200048e8 	.word	0x200048e8

08001eac <audioTickString>:




float  audioTickString(void)
{
 8001eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
 8001eb0:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80020c4 <audioTickString+0x218>
 8001eb4:	4d74      	ldr	r5, [pc, #464]	; (8002088 <audioTickString+0x1dc>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8001eb6:	4875      	ldr	r0, [pc, #468]	; (800208c <audioTickString+0x1e0>)
 8001eb8:	f8df 820c 	ldr.w	r8, [pc, #524]	; 80020c8 <audioTickString+0x21c>
 8001ebc:	462c      	mov	r4, r5
 8001ebe:	f105 0a30 	add.w	sl, r5, #48	; 0x30
{
 8001ec2:	ed2d 8b0c 	vpush	{d8-d13}
 8001ec6:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
 8001ec8:	f899 3000 	ldrb.w	r3, [r9]
{
 8001ecc:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	3307      	adds	r3, #7
 8001ed2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001ed6:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8001eda:	f012 fe2b 	bl	8014b34 <tExpSmooth_tick>
 8001ede:	eeb0 ba40 	vmov.f32	s22, s0
	float note[numStringsThisBoard];
 8001ee2:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8001ee4:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
 8001ee6:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8001eea:	f012 fe23 	bl	8014b34 <tExpSmooth_tick>
 8001eee:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
 8001ef2:	4554      	cmp	r4, sl
 8001ef4:	d1f6      	bne.n	8001ee4 <audioTickString+0x38>
	}
	pluckPos = knobScaled[9];
 8001ef6:	4a66      	ldr	r2, [pc, #408]	; (8002090 <audioTickString+0x1e4>)
 8001ef8:	6a69      	ldr	r1, [r5, #36]	; 0x24

	for (int i = 0; i < numStringsThisBoard; i++)
 8001efa:	f899 3000 	ldrb.w	r3, [r9]
	float temp = 0.0f;
 8001efe:	eddf 9a65 	vldr	s19, [pc, #404]	; 8002094 <audioTickString+0x1e8>
	pluckPos = knobScaled[9];
 8001f02:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8088 	beq.w	800201a <audioTickString+0x16e>
 8001f0a:	4b63      	ldr	r3, [pc, #396]	; (8002098 <audioTickString+0x1ec>)
		float finalFreq = mtof(note[i]) * invMapping[i] ;
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
		float decay = 0.1f;
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 0.5f;
 8001f0c:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
		if (note[i] < 0.0f)
 8001f10:	eef0 aa69 	vmov.f32	s21, s19
 8001f14:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 80020cc <audioTickString+0x220>
 8001f18:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
 8001f1a:	f04f 0800 	mov.w	r8, #0
 8001f1e:	4b5f      	ldr	r3, [pc, #380]	; (800209c <audioTickString+0x1f0>)
 8001f20:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80020d0 <audioTickString+0x224>
 8001f24:	4c5e      	ldr	r4, [pc, #376]	; (80020a0 <audioTickString+0x1f4>)
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 8001f26:	eddf ca5f 	vldr	s25, [pc, #380]	; 80020a4 <audioTickString+0x1f8>
 8001f2a:	ed9f ca5f 	vldr	s24, [pc, #380]	; 80020a8 <audioTickString+0x1fc>
		float decay = 0.1f;
 8001f2e:	ed9f 9a5f 	vldr	s18, [pc, #380]	; 80020ac <audioTickString+0x200>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
 8001f32:	ed9f da5f 	vldr	s26, [pc, #380]	; 80020b0 <audioTickString+0x204>
 8001f36:	607b      	str	r3, [r7, #4]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 8001f38:	ecfb 7a01 	vldmia	fp!, {s15}
 8001f3c:	ecba 0a01 	vldmia	sl!, {s0}
 8001f40:	ee37 0a80 	vadd.f32	s0, s15, s0
		if (note[i] < 0.0f)
 8001f44:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4c:	f100 8097 	bmi.w	800207e <audioTickString+0x1d2>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 8001f50:	ed86 0a00 	vstr	s0, [r6]
		float finalFreq = mtof(note[i]) * invMapping[i] ;
 8001f54:	f014 fcd2 	bl	80168fc <mtof>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	eeb0 8a40 	vmov.f32	s16, s0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 8001f5e:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
 8001f62:	eeb0 0a4c 	vmov.f32	s0, s24
		float finalFreq = mtof(note[i]) * invMapping[i] ;
 8001f66:	ecf3 7a01 	vldmia	r3!, {s15}
		float decay = 0.1f;
 8001f6a:	eeb0 aa49 	vmov.f32	s20, s18
		float finalFreq = mtof(note[i]) * invMapping[i] ;
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	ee28 8a27 	vmul.f32	s16, s16, s15
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 8001f74:	eea7 0a2c 	vfma.f32	s0, s14, s25
 8001f78:	f014 fcea 	bl	8016950 <faster_mtof>
		if (lsDecay[i])
 8001f7c:	687a      	ldr	r2, [r7, #4]
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 8001f7e:	eef0 8a40 	vmov.f32	s17, s0
		if (lsDecay[i])
 8001f82:	f812 3b01 	ldrb.w	r3, [r2], #1
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	b12b      	cbz	r3, 8001f96 <audioTickString+0xea>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
 8001f8a:	eeb0 aa6b 	vmov.f32	s20, s23
 8001f8e:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 8001f92:	eea7 aa8d 	vfma.f32	s20, s15, s26
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
 8001f96:	4620      	mov	r0, r4
 8001f98:	ed95 0a08 	vldr	s0, [r5, #32]
 8001f9c:	f019 ff9e 	bl	801bedc <tSimpleLivingString3_setPickupPoint>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	eeb0 0a4a 	vmov.f32	s0, s20
	for (int i = 0; i < numStringsThisBoard; i++)
 8001fa6:	f108 0801 	add.w	r8, r8, #1
		tSimpleLivingString3_setDecay(&livStr[i], decay);
 8001faa:	f019 fdf1 	bl	801bb90 <tSimpleLivingString3_setDecay>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
 8001fae:	4620      	mov	r0, r4
 8001fb0:	eeb0 0a68 	vmov.f32	s0, s17
	for (int i = 0; i < numStringsThisBoard; i++)
 8001fb4:	3604      	adds	r6, #4
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
 8001fb6:	f019 fde7 	bl	801bb88 <tSimpleLivingString3_setDampFreq>


		tSimpleLivingString3_setTargetLev(&livStr[i], knobScaled[0]);
 8001fba:	4620      	mov	r0, r4
 8001fbc:	ed95 0a00 	vldr	s0, [r5]
 8001fc0:	f019 fe0c 	bl	801bbdc <tSimpleLivingString3_setTargetLev>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[i], knobScaled[1] * 0.1f);
 8001fc4:	ed95 0a01 	vldr	s0, [r5, #4]
 8001fc8:	4620      	mov	r0, r4
 8001fca:	ee20 0a09 	vmul.f32	s0, s0, s18
 8001fce:	f019 fe09 	bl	801bbe4 <tSimpleLivingString3_setLevSmoothFactor>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[2] * 0.1f);
 8001fd2:	ed95 0a02 	vldr	s0, [r5, #8]
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	ee20 0a09 	vmul.f32	s0, s0, s18
 8001fdc:	f019 fe06 	bl	801bbec <tSimpleLivingString3_setLevStrength>
		tSimpleLivingString3_setLevMode(&livStr[i], knobScaled[3] > 0.5f);
 8001fe0:	edd5 7a03 	vldr	s15, [r5, #12]
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	eef4 7aeb 	vcmpe.f32	s15, s23
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	bfcc      	ite	gt
 8001ff0:	2101      	movgt	r1, #1
 8001ff2:	2100      	movle	r1, #0
 8001ff4:	f019 fdfe 	bl	801bbf4 <tSimpleLivingString3_setLevMode>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	eeb0 0a48 	vmov.f32	s0, s16
 8001ffe:	f019 fd73 	bl	801bae8 <tSimpleLivingString3_setFreq>
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
 8002002:	4620      	mov	r0, r4
 8002004:	eeb0 0a6a 	vmov.f32	s0, s21
	for (int i = 0; i < numStringsThisBoard; i++)
 8002008:	3404      	adds	r4, #4
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
 800200a:	f019 fea5 	bl	801bd58 <tSimpleLivingString3_tick>
	for (int i = 0; i < numStringsThisBoard; i++)
 800200e:	f899 3000 	ldrb.w	r3, [r9]
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
 8002012:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
 8002016:	4543      	cmp	r3, r8
 8002018:	dc8e      	bgt.n	8001f38 <audioTickString+0x8c>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 800201a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80020b4 <audioTickString+0x208>
 800201e:	eddf 7a26 	vldr	s15, [pc, #152]	; 80020b8 <audioTickString+0x20c>
 8002022:	eef0 0a40 	vmov.f32	s1, s0
 8002026:	ed9f 1a25 	vldr	s2, [pc, #148]	; 80020bc <audioTickString+0x210>
 800202a:	eeeb 0a27 	vfma.f32	s1, s22, s15
 800202e:	f014 fb45 	bl	80166bc <LEAF_clip>
	int volIdxInt = (int) volIdx;
 8002032:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8002036:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <audioTickString+0x214>)
	float omAlpha = 1.0f - alpha;
 8002038:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return temp;
}
 800203c:	370c      	adds	r7, #12
	int volIdxInt = (int) volIdx;
 800203e:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
 8002042:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float omAlpha = 1.0f - alpha;
 8002046:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 800204a:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 800204c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
 8002050:	ee30 0a47 	vsub.f32	s0, s0, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8002054:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
 8002058:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 800205c:	ed93 7a00 	vldr	s14, [r3]
 8002060:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002064:	edd2 6a00 	vldr	s13, [r2]
 8002068:	ee20 0a26 	vmul.f32	s0, s0, s13
 800206c:	eea7 0a27 	vfma.f32	s0, s14, s15
}
 8002070:	ee20 0a29 	vmul.f32	s0, s0, s19
 8002074:	46bd      	mov	sp, r7
 8002076:	ecbd 8b0c 	vpop	{d8-d13}
 800207a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[i] = 0.0f;
 800207e:	eeb0 0a6a 	vmov.f32	s0, s21
 8002082:	edc6 aa00 	vstr	s21, [r6]
 8002086:	e765      	b.n	8001f54 <audioTickString+0xa8>
 8002088:	20004700 	.word	0x20004700
 800208c:	2001312c 	.word	0x2001312c
 8002090:	2000006c 	.word	0x2000006c
 8002094:	00000000 	.word	0x00000000
 8002098:	200046f8 	.word	0x200046f8
 800209c:	200048e4 	.word	0x200048e4
 80020a0:	200048cc 	.word	0x200048cc
 80020a4:	430c0000 	.word	0x430c0000
 80020a8:	42700000 	.word	0x42700000
 80020ac:	3dcccccd 	.word	0x3dcccccd
 80020b0:	44480000 	.word	0x44480000
 80020b4:	423c0000 	.word	0x423c0000
 80020b8:	42a00000 	.word	0x42a00000
 80020bc:	42fe0000 	.word	0x42fe0000
 80020c0:	20000070 	.word	0x20000070
 80020c4:	20000052 	.word	0x20000052
 80020c8:	20004774 	.word	0x20004774
 80020cc:	20013080 	.word	0x20013080
 80020d0:	200130b8 	.word	0x200130b8

080020d4 <audioTickString2>:



float  audioTickString2(void)
{
 80020d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
 80020d8:	4ba8      	ldr	r3, [pc, #672]	; (800237c <audioTickString2+0x2a8>)
 80020da:	4da9      	ldr	r5, [pc, #676]	; (8002380 <audioTickString2+0x2ac>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80020dc:	48a9      	ldr	r0, [pc, #676]	; (8002384 <audioTickString2+0x2b0>)
 80020de:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 80023d8 <audioTickString2+0x304>
 80020e2:	462c      	mov	r4, r5
 80020e4:	f105 0930 	add.w	r9, r5, #48	; 0x30
{
 80020e8:	ed2d 8b08 	vpush	{d8-d11}
 80020ec:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
 80020ee:	781b      	ldrb	r3, [r3, #0]
{
 80020f0:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	3307      	adds	r3, #7
 80020f6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80020fa:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80020fe:	f012 fd19 	bl	8014b34 <tExpSmooth_tick>
 8002102:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
 8002106:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002108:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
 800210a:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 800210e:	f012 fd11 	bl	8014b34 <tExpSmooth_tick>
 8002112:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
 8002116:	454c      	cmp	r4, r9
 8002118:	d1f6      	bne.n	8002108 <audioTickString2+0x34>
	}

	for (int i = 0; i < numStringsThisBoard; i++)
 800211a:	4b98      	ldr	r3, [pc, #608]	; (800237c <audioTickString2+0x2a8>)
	float temp = 0.0f;
 800211c:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8002388 <audioTickString2+0x2b4>
	for (int i = 0; i < numStringsThisBoard; i++)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80e8 	beq.w	80022f8 <audioTickString2+0x224>
 8002128:	4b98      	ldr	r3, [pc, #608]	; (800238c <audioTickString2+0x2b8>)
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
 800212a:	eeb0 aa68 	vmov.f32	s20, s17
 800212e:	617e      	str	r6, [r7, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
 8002130:	2600      	movs	r6, #0
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	4b96      	ldr	r3, [pc, #600]	; (8002390 <audioTickString2+0x2bc>)
 8002136:	4c97      	ldr	r4, [pc, #604]	; (8002394 <audioTickString2+0x2c0>)
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b97      	ldr	r3, [pc, #604]	; (8002398 <audioTickString2+0x2c4>)

		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope

		tLivingString2_setPickupPos(&strings[i],0.9999f);

		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
 800213c:	eddf 9a97 	vldr	s19, [pc, #604]	; 800239c <audioTickString2+0x2c8>
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	f8df 8298 	ldr.w	r8, [pc, #664]	; 80023dc <audioTickString2+0x308>
 8002146:	4b96      	ldr	r3, [pc, #600]	; (80023a0 <audioTickString2+0x2cc>)
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 8002148:	f8df b294 	ldr.w	fp, [pc, #660]	; 80023e0 <audioTickString2+0x30c>
 800214c:	f8df a294 	ldr.w	sl, [pc, #660]	; 80023e4 <audioTickString2+0x310>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 8002150:	f8df 9294 	ldr.w	r9, [pc, #660]	; 80023e8 <audioTickString2+0x314>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
 8002154:	eddf aa93 	vldr	s21, [pc, #588]	; 80023a4 <audioTickString2+0x2d0>
 8002158:	613b      	str	r3, [r7, #16]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 800215a:	68bb      	ldr	r3, [r7, #8]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 800215c:	4658      	mov	r0, fp

			//tLivingString2_setTargetLev(&strings[i], 0.0f);
			//tLivingString2_setLevMode(&strings[i], 0);
		}

		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
 800215e:	eddf ba92 	vldr	s23, [pc, #584]	; 80023a8 <audioTickString2+0x2d4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 8002162:	ecf3 7a01 	vldmia	r3!, {s15}
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	ecb3 7a01 	vldmia	r3!, {s14}
 800216e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002172:	60fb      	str	r3, [r7, #12]
			note[i] = 0.0f;
 8002174:	697b      	ldr	r3, [r7, #20]
		if (note[i] < 0.0f)
 8002176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 800217e:	bf54      	ite	pl
 8002180:	edc3 7a00 	vstrpl	s15, [r3]
			note[i] = 0.0f;
 8002184:	ed83 aa00 	vstrmi	s20, [r3]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 8002188:	f014 fe3a 	bl	8016e00 <tNoise_tick>
 800218c:	4650      	mov	r0, sl
 800218e:	f012 ff9b 	bl	80150c8 <tVZFilter_tickEfficient>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 8002192:	4658      	mov	r0, fp
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 8002194:	eeb0 8a40 	vmov.f32	s16, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 8002198:	f014 fe32 	bl	8016e00 <tNoise_tick>
 800219c:	4648      	mov	r0, r9
 800219e:	f012 ff93 	bl	80150c8 <tVZFilter_tickEfficient>
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 80021a2:	4640      	mov	r0, r8
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 80021a4:	ee38 8a00 	vadd.f32	s16, s16, s0
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 80021a8:	f012 fa4c 	bl	8014644 <tADSRT_tick>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
 80021ac:	4620      	mov	r0, r4
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 80021ae:	eeb0 ba40 	vmov.f32	s22, s0
		tLivingString2_setPickupPos(&strings[i],0.9999f);
 80021b2:	eeb0 0a6a 	vmov.f32	s0, s21
 80021b6:	f01a f823 	bl	801c200 <tLivingString2_setPickupPos>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
 80021ba:	ed95 0a05 	vldr	s0, [r5, #20]
 80021be:	ee20 0a29 	vmul.f32	s0, s0, s19
 80021c2:	f014 fbc5 	bl	8016950 <faster_mtof>
 80021c6:	4650      	mov	r0, sl
 80021c8:	f013 f984 	bl	80154d4 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[6] * 128.0f));
 80021cc:	ed95 0a06 	vldr	s0, [r5, #24]
 80021d0:	ee20 0a29 	vmul.f32	s0, s0, s19
 80021d4:	f014 fbbc 	bl	8016950 <faster_mtof>
 80021d8:	4648      	mov	r0, r9
 80021da:	f013 f97b 	bl	80154d4 <tVZFilter_setFreq>
		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
 80021de:	ed95 0a07 	vldr	s0, [r5, #28]
 80021e2:	4620      	mov	r0, r4
 80021e4:	ee20 0a2b 	vmul.f32	s0, s0, s23
 80021e8:	f01a f898 	bl	801c31c <tLivingString2_setLevSmoothFactor>

		tLivingString2_setLevStrength(&strings[i], knobScaled[8] * 0.1f);
 80021ec:	ed95 0a08 	vldr	s0, [r5, #32]
 80021f0:	4620      	mov	r0, r4
 80021f2:	ee20 0a2b 	vmul.f32	s0, s0, s23
 80021f6:	f01a f8a5 	bl	801c344 <tLivingString2_setLevStrength>

		tLivingString2_setBrightness(&strings[i], knobScaled[9]);
 80021fa:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
 80021fe:	4620      	mov	r0, r4
 8002200:	f01a f81e 	bl	801c240 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[i], knobScaled[2]);
 8002204:	ed95 0a02 	vldr	s0, [r5, #8]
 8002208:	4620      	mov	r0, r4
 800220a:	f019 ffd5 	bl	801c1b8 <tLivingString2_setPickPos>

		tLivingString2_setPrepPos(&strings[i], (knobScaled[11] * 0.8f) + 0.1f);
 800220e:	eeb0 0a6b 	vmov.f32	s0, s23
 8002212:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
 8002216:	4620      	mov	r0, r4
 8002218:	eddf 7a64 	vldr	s15, [pc, #400]	; 80023ac <audioTickString2+0x2d8>
 800221c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002220:	f019 ffdc 	bl	801c1dc <tLivingString2_setPrepPos>


		float tempMIDI = note[i];
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	ed9f 1a62 	vldr	s2, [pc, #392]	; 80023b0 <audioTickString2+0x2dc>
 800222a:	ecf3 0a01 	vldmia	r3!, {s1}
 800222e:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80023b4 <audioTickString2+0x2e0>
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	f014 fa42 	bl	80166bc <LEAF_clip>
 8002238:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80023b8 <audioTickString2+0x2e4>
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
		float finalFreq = freqToSmooth * invMapping[i] ;

		tLivingString2_setFreq(&strings[i], finalFreq);
 800223c:	4620      	mov	r0, r4
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 800223e:	eddf 7a5f 	vldr	s15, [pc, #380]	; 80023bc <audioTickString2+0x2e8>
		float finalFreq = freqToSmooth * invMapping[i] ;
 8002242:	687b      	ldr	r3, [r7, #4]
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8002244:	eee0 7a07 	vfma.f32	s15, s0, s14
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8002248:	495d      	ldr	r1, [pc, #372]	; (80023c0 <audioTickString2+0x2ec>)
		float finalFreq = freqToSmooth * invMapping[i] ;
 800224a:	ecb3 0a01 	vldmia	r3!, {s0}
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800224e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		float finalFreq = freqToSmooth * invMapping[i] ;
 8002252:	607b      	str	r3, [r7, #4]
		int tempIndexI = (int)tempIndexF;
 8002254:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8002258:	ee37 7a67 	vsub.f32	s14, s14, s15
		int tempIndexI = (int)tempIndexF;
 800225c:	ee16 3a90 	vmov	r3, s13
		tempIndexF = tempIndexF -tempIndexI;
 8002260:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8002264:	1c5a      	adds	r2, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8002266:	f3c3 030e 	ubfx	r3, r3, #0, #15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800226a:	ee37 7a26 	vadd.f32	s14, s14, s13
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800226e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8002272:	f3c2 020e 	ubfx	r2, r2, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
 8002276:	ee77 7ae6 	vsub.f32	s15, s15, s13
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800227a:	edd3 6a00 	vldr	s13, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 800227e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8002282:	ed93 6a00 	vldr	s12, [r3]
 8002286:	ee67 7a86 	vmul.f32	s15, s15, s12
 800228a:	eee7 7a26 	vfma.f32	s15, s14, s13
		tLivingString2_setFreq(&strings[i], finalFreq);
 800228e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002292:	f019 ff73 	bl	801c17c <tLivingString2_setFreq>


		if (knobScaled[4] > 0.5f)
 8002296:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800229a:	ed95 7a04 	vldr	s14, [r5, #16]
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
		}
		else
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
 800229e:	4620      	mov	r0, r4
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
 80022a0:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
		if (knobScaled[4] > 0.5f)
 80022a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
 80022ac:	bfc8      	it	gt
 80022ae:	ee2b 0a00 	vmulgt.f32	s0, s22, s0
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
 80022b2:	f019 ffb7 	bl	801c224 <tLivingString2_setPrepIndex>
			tempSamp += (tSawtooth_tick(&Ssaws[i][j]) * 0.5f);//filtNoise * theEnv) * env);
		}
		*/
		//tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp * env);
		//tLivingString2_udpateDelays(&strings[i]);
		float tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
 80022b6:	ee28 0a0b 	vmul.f32	s0, s16, s22
 80022ba:	4620      	mov	r0, r4
 80022bc:	f01a f864 	bl	801c388 <tLivingString2_tick>
		prevSamp[i] = 0.0f;
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	eca3 aa01 	vstmia	r3!, {s20}
 80022c6:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < NUM_STRINGS_PER_BOARD; j++)
		{
			if (j != i) //put sympathetic resonance in all strings but yourself
 80022c8:	2e00      	cmp	r6, #0
 80022ca:	d14f      	bne.n	800236c <audioTickString2+0x298>
			{
				prevSamp[j]+=tempSamp * volumeSmoothed;
 80022cc:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <audioTickString2+0x2cc>)
 80022ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80022d2:	eee9 7a00 	vfma.f32	s15, s18, s0
 80022d6:	edc3 7a01 	vstr	s15, [r3, #4]
	for (int i = 0; i < numStringsThisBoard; i++)
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <audioTickString2+0x2a8>)
 80022dc:	3601      	adds	r6, #1
			}
		}


		temp += tempSamp;
 80022de:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int i = 0; i < numStringsThisBoard; i++)
 80022e2:	3404      	adds	r4, #4
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	f108 0804 	add.w	r8, r8, #4
 80022ea:	42b3      	cmp	r3, r6
 80022ec:	f73f af35 	bgt.w	800215a <audioTickString2+0x86>
 80022f0:	eddf 7a34 	vldr	s15, [pc, #208]	; 80023c4 <audioTickString2+0x2f0>
 80022f4:	ee68 8aa7 	vmul.f32	s17, s17, s15
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 80022f8:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80023c8 <audioTickString2+0x2f4>
 80022fc:	eddf 7a33 	vldr	s15, [pc, #204]	; 80023cc <audioTickString2+0x2f8>
 8002300:	eef0 0a40 	vmov.f32	s1, s0
 8002304:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80023d0 <audioTickString2+0x2fc>
 8002308:	eee9 0a27 	vfma.f32	s1, s18, s15
 800230c:	f014 f9d6 	bl	80166bc <LEAF_clip>
 8002310:	eef0 7a40 	vmov.f32	s15, s0
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
 8002314:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8002318:	4a2e      	ldr	r2, [pc, #184]	; (80023d4 <audioTickString2+0x300>)
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
 800231a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
 800231e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002322:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
 8002326:	ee31 7a67 	vsub.f32	s14, s2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 800232a:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
 800232c:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8002330:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
 8002334:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8002338:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 800233c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
 8002340:	ee77 0ae6 	vsub.f32	s1, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8002344:	edd2 7a00 	vldr	s15, [r2]
	float omAlpha = 1.0f - alpha;
 8002348:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 800234c:	edd3 6a00 	vldr	s13, [r3]
 8002350:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8002354:	eee6 0a87 	vfma.f32	s1, s13, s14
	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
 8002358:	ee60 0aa8 	vmul.f32	s1, s1, s17
 800235c:	f014 f9ae 	bl	80166bc <LEAF_clip>
}
 8002360:	371c      	adds	r7, #28
 8002362:	46bd      	mov	sp, r7
 8002364:	ecbd 8b08 	vpop	{d8-d11}
 8002368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				prevSamp[j]+=tempSamp * volumeSmoothed;
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <audioTickString2+0x2cc>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	eee9 7a00 	vfma.f32	s15, s18, s0
 8002376:	edc3 7a00 	vstr	s15, [r3]
			if (j != i) //put sympathetic resonance in all strings but yourself
 800237a:	e7ae      	b.n	80022da <audioTickString2+0x206>
 800237c:	20000052 	.word	0x20000052
 8002380:	20004700 	.word	0x20004700
 8002384:	2001312c 	.word	0x2001312c
 8002388:	00000000 	.word	0x00000000
 800238c:	20013080 	.word	0x20013080
 8002390:	200130b8 	.word	0x200130b8
 8002394:	200130d0 	.word	0x200130d0
 8002398:	200046f8 	.word	0x200046f8
 800239c:	43000000 	.word	0x43000000
 80023a0:	20004b9c 	.word	0x20004b9c
 80023a4:	3f7ff972 	.word	0x3f7ff972
 80023a8:	3dcccccd 	.word	0x3dcccccd
 80023ac:	3f4ccccd 	.word	0x3f4ccccd
 80023b0:	43480000 	.word	0x43480000
 80023b4:	c3480000 	.word	0xc3480000
 80023b8:	42c80000 	.word	0x42c80000
 80023bc:	46800000 	.word	0x46800000
 80023c0:	24008020 	.word	0x24008020
 80023c4:	3f666666 	.word	0x3f666666
 80023c8:	423c0000 	.word	0x423c0000
 80023cc:	42a00000 	.word	0x42a00000
 80023d0:	42fe0000 	.word	0x42fe0000
 80023d4:	20000070 	.word	0x20000070
 80023d8:	20004774 	.word	0x20004774
 80023dc:	2000461c 	.word	0x2000461c
 80023e0:	20004a2c 	.word	0x20004a2c
 80023e4:	20004a48 	.word	0x20004a48
 80023e8:	20004a4c 	.word	0x20004a4c

080023ec <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <lfoSawSquareTick+0x18>)
 80023ee:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 80023f2:	b510      	push	{r4, lr}
 80023f4:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 80023f6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80023fa:	f019 f869 	bl	801b4d0 <tSawSquareLFO_tick>
 80023fe:	ed84 0a00 	vstr	s0, [r4]
}
 8002402:	bd10      	pop	{r4, pc}
 8002404:	2000483c 	.word	0x2000483c

08002408 <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <lfoSineTriTick+0x18>)
 800240a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800240e:	b510      	push	{r4, lr}
 8002410:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 8002412:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002416:	f019 f99d 	bl	801b754 <tSineTriLFO_tick>
 800241a:	ed84 0a00 	vstr	s0, [r4]
}
 800241e:	bd10      	pop	{r4, pc}
 8002420:	2000488c 	.word	0x2000488c

08002424 <lfoSineTick>:

void lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <lfoSineTick+0x18>)
 8002426:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800242a:	b510      	push	{r4, lr}
 800242c:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
 800242e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002432:	f014 fc91 	bl	8016d58 <tCycle_tick>
 8002436:	ed84 0a00 	vstr	s0, [r4]
}
 800243a:	bd10      	pop	{r4, pc}
 800243c:	2000486c 	.word	0x2000486c

08002440 <lfoTriTick>:

void lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <lfoTriTick+0x18>)
 8002442:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002446:	b510      	push	{r4, lr}
 8002448:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 800244a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800244e:	f019 f905 	bl	801b65c <tTriLFO_tick>
 8002452:	ed84 0a00 	vstr	s0, [r4]
}
 8002456:	bd10      	pop	{r4, pc}
 8002458:	200048ac 	.word	0x200048ac

0800245c <lfoSawTick>:
void lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <lfoSawTick+0x24>)
 800245e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002462:	b510      	push	{r4, lr}
 8002464:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8002466:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800246a:	f018 feb3 	bl	801b1d4 <tIntPhasor_tick>
 800246e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002472:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002476:	eee0 7a07 	vfma.f32	s15, s0, s14
 800247a:	edc4 7a00 	vstr	s15, [r4]
}
 800247e:	bd10      	pop	{r4, pc}
 8002480:	2000481c 	.word	0x2000481c

08002484 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <lfoPulseTick+0x18>)
 8002486:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800248a:	b510      	push	{r4, lr}
 800248c:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 800248e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002492:	f018 ff6d 	bl	801b370 <tSquareLFO_tick>
 8002496:	ed84 0a00 	vstr	s0, [r4]
}
 800249a:	bd10      	pop	{r4, pc}
 800249c:	200047fc 	.word	0x200047fc

080024a0 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <lfoSawSquareSetRate+0x10>)
 80024a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024aa:	f019 b853 	b.w	801b554 <tSawSquareLFO_setFreq>
 80024ae:	bf00      	nop
 80024b0:	2000483c 	.word	0x2000483c

080024b4 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <lfoSineTriSetRate+0x10>)
 80024b6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024be:	f019 b995 	b.w	801b7ec <tSineTriLFO_setFreq>
 80024c2:	bf00      	nop
 80024c4:	2000488c 	.word	0x2000488c

080024c8 <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <lfoSineSetRate+0x10>)
 80024ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024d2:	f014 bc67 	b.w	8016da4 <tCycle_setFreq>
 80024d6:	bf00      	nop
 80024d8:	2000486c 	.word	0x2000486c

080024dc <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <lfoTriSetRate+0x10>)
 80024de:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024e6:	f019 b8d3 	b.w	801b690 <tTriLFO_setFreq>
 80024ea:	bf00      	nop
 80024ec:	200048ac 	.word	0x200048ac

080024f0 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <lfoSawSetRate+0x10>)
 80024f2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80024f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80024fa:	f018 be7b 	b.w	801b1f4 <tIntPhasor_setFreq>
 80024fe:	bf00      	nop
 8002500:	2000481c 	.word	0x2000481c

08002504 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <lfoPulseSetRate+0x10>)
 8002506:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800250a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800250e:	f018 bf53 	b.w	801b3b8 <tSquareLFO_setFreq>
 8002512:	bf00      	nop
 8002514:	200047fc 	.word	0x200047fc

08002518 <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <lfoSawSquareSetPhase+0x10>)
 800251a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800251e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002522:	f019 b83b 	b.w	801b59c <tSawSquareLFO_setPhase>
 8002526:	bf00      	nop
 8002528:	2000483c 	.word	0x2000483c

0800252c <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <lfoSineTriSetPhase+0x10>)
 800252e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002532:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002536:	f019 b971 	b.w	801b81c <tSineTriLFO_setPhase>
 800253a:	bf00      	nop
 800253c:	2000488c 	.word	0x2000488c

08002540 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <lfoSineSetPhase+0x10>)
 8002542:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002546:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800254a:	f014 bc37 	b.w	8016dbc <tCycle_setPhase>
 800254e:	bf00      	nop
 8002550:	2000486c 	.word	0x2000486c

08002554 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <lfoTriSetPhase+0x10>)
 8002556:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800255a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800255e:	f019 b8a3 	b.w	801b6a8 <tTriLFO_setPhase>
 8002562:	bf00      	nop
 8002564:	200048ac 	.word	0x200048ac

08002568 <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <lfoSawSetPhase+0x10>)
 800256a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800256e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002572:	f018 be4b 	b.w	801b20c <tIntPhasor_setPhase>
 8002576:	bf00      	nop
 8002578:	2000481c 	.word	0x2000481c

0800257c <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <lfoPulseSetPhase+0x10>)
 800257e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002582:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002586:	f018 bf4f 	b.w	801b428 <tSquareLFO_setPhase>
 800258a:	bf00      	nop
 800258c:	200047fc 	.word	0x200047fc

08002590 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <lfoSawSquareSetShape+0x10>)
 8002592:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002596:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800259a:	f019 b831 	b.w	801b600 <tSawSquareLFO_setShape>
 800259e:	bf00      	nop
 80025a0:	2000483c 	.word	0x2000483c

080025a4 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <lfoSineTriSetShape+0x10>)
 80025a6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80025aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80025ae:	f019 b94d 	b.w	801b84c <tSineTriLFO_setShape>
 80025b2:	bf00      	nop
 80025b4:	2000488c 	.word	0x2000488c

080025b8 <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v, int string)
{
	//none
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop

080025bc <lfoTriSetShape>:
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop

080025c0 <lfoSawSetShape>:
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop

080025c4 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <lfoPulseSetShape+0x10>)
 80025c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80025ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80025ce:	f018 bf0b 	b.w	801b3e8 <tSquareLFO_setPulseWidth>
 80025d2:	bf00      	nop
 80025d4:	200047fc 	.word	0x200047fc

080025d8 <clipperGainSet>:
float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 24.0f);
 80025d8:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	4605      	mov	r5, r0
 80025e0:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
 80025e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80025e6:	f014 fa21 	bl	8016a2c <fasterdbtoa>
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <clipperGainSet+0x24>)
 80025ec:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80025f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80025f4:	ed84 0a00 	vstr	s0, [r4]
}
 80025f8:	bd38      	pop	{r3, r4, r5, pc}
 80025fa:	bf00      	nop
 80025fc:	20004ab8 	.word	0x20004ab8

08002600 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8002600:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
 8002604:	b538      	push	{r3, r4, r5, lr}
 8002606:	4605      	mov	r5, r0
 8002608:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
 800260a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800260e:	f014 fa0d 	bl	8016a2c <fasterdbtoa>
 8002612:	4b04      	ldr	r3, [pc, #16]	; (8002624 <wavefolderParam1+0x24>)
 8002614:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002618:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800261c:	ed84 0a00 	vstr	s0, [r4]
}
 8002620:	bd38      	pop	{r3, r4, r5, pc}
 8002622:	bf00      	nop
 8002624:	20004ab8 	.word	0x20004ab8

08002628 <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002628:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800262c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <wavefolderParam3+0x28>)
	param3[v][string] = value;
 8002632:	4808      	ldr	r0, [pc, #32]	; (8002654 <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002634:	ee70 6a27 	vadd.f32	s13, s0, s15
 8002638:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
 800263c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002640:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
 8002644:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002648:	ed83 7a00 	vstr	s14, [r3]
}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	200046d8 	.word	0x200046d8
 8002654:	20004af8 	.word	0x20004af8

08002658 <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
 8002658:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 800265a:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 800265e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8002662:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002666:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
 800266a:	0084      	lsls	r4, r0, #2
{
 800266c:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002670:	eee0 7a68 	vfms.f32	s15, s0, s17
 8002674:	eeb0 0a67 	vmov.f32	s0, s15
 8002678:	f014 f9d8 	bl	8016a2c <fasterdbtoa>
 800267c:	4808      	ldr	r0, [pc, #32]	; (80026a0 <tiltParam1+0x48>)
 800267e:	4420      	add	r0, r4
 8002680:	f013 f89e 	bl	80157c0 <tVZFilter_setGain>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8002684:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8002688:	eea8 0a28 	vfma.f32	s0, s16, s17
 800268c:	f014 f9ce 	bl	8016a2c <fasterdbtoa>
 8002690:	4804      	ldr	r0, [pc, #16]	; (80026a4 <tiltParam1+0x4c>)
}
 8002692:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8002696:	4420      	add	r0, r4
}
 8002698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 800269c:	f013 b890 	b.w	80157c0 <tVZFilter_setGain>
 80026a0:	20004c70 	.word	0x20004c70
 80026a4:	20004c90 	.word	0x20004c90

080026a8 <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026a8:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80026ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80026e0 <tiltParam2+0x38>
 80026b0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80026e4 <tiltParam2+0x3c>
 80026b4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80026e8 <tiltParam2+0x40>
 80026b8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80026bc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80026ec <tiltParam2+0x44>
{
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	4605      	mov	r5, r0
 80026c4:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026c6:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
 80026ca:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026ce:	f013 fff5 	bl	80166bc <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
 80026d2:	4807      	ldr	r0, [pc, #28]	; (80026f0 <tiltParam2+0x48>)
 80026d4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80026d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
 80026dc:	f012 bf12 	b.w	8015504 <tVZFilter_setFreqFast>
 80026e0:	429a0000 	.word	0x429a0000
 80026e4:	420fb824 	.word	0x420fb824
 80026e8:	457ff000 	.word	0x457ff000
 80026ec:	00000000 	.word	0x00000000
 80026f0:	2000054c 	.word	0x2000054c

080026f4 <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
 80026f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <tiltParam3+0x20>)
 80026fa:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 80026fe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002702:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002706:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800270a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800270e:	f013 b873 	b.w	80157f8 <tVZFilter_setResonance>
 8002712:	bf00      	nop
 8002714:	2000054c 	.word	0x2000054c

08002718 <tiltParam4>:
}
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002718:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 800271c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002744 <tiltParam4+0x2c>
{
 8002720:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002722:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8002726:	4605      	mov	r5, r0
 8002728:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 800272a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800272e:	eeb0 0a67 	vmov.f32	s0, s15
 8002732:	f014 f973 	bl	8016a1c <fastdbtoa>
 8002736:	4804      	ldr	r0, [pc, #16]	; (8002748 <tiltParam4+0x30>)
 8002738:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800273c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002740:	f013 b83e 	b.w	80157c0 <tVZFilter_setGain>
 8002744:	42080000 	.word	0x42080000
 8002748:	2000054c 	.word	0x2000054c

0800274c <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
 800274c:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <compressorParam1+0x18>)
 8002752:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002756:	ee20 0a27 	vmul.f32	s0, s0, s15
 800275a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800275e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8002762:	4770      	bx	lr
 8002764:	20000570 	.word	0x20000570

08002768 <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
 8002768:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <compressorParam2+0x30>)
 800276e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002772:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002776:	eeb0 7a67 	vmov.f32	s14, s15
 800277a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800277e:	eea0 7a26 	vfma.f32	s14, s0, s13
 8002782:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
 8002786:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800278a:	edd3 6a04 	vldr	s13, [r3, #16]
 800278e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002792:	ed83 7a07 	vstr	s14, [r3, #28]
}
 8002796:	4770      	bx	lr
 8002798:	20000570 	.word	0x20000570

0800279c <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
 800279c:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <compressorParam3+0x18>)
 80027a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80027a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80027aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80027ae:	ed83 0a06 	vstr	s0, [r3, #24]
}
 80027b2:	4770      	bx	lr
 80027b4:	20000570 	.word	0x20000570

080027b8 <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
	value = (value +  0.001f);
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <compressorParam4+0x30>)
 80027ba:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
 80027be:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80027ec <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 80027c2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 80027c6:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 80027c8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
 80027cc:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 80027d0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80027d4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80027d8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80027dc:	f013 feda 	bl	8016594 <fasterexpf>
 80027e0:	ed84 0a01 	vstr	s0, [r4, #4]
}
 80027e4:	bd10      	pop	{r4, pc}
 80027e6:	bf00      	nop
 80027e8:	20000570 	.word	0x20000570
 80027ec:	3a83126f 	.word	0x3a83126f

080027f0 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
	value = (value + 0.001f);
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <compressorParam5+0x30>)
 80027f2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
 80027f6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002824 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 80027fa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 80027fe:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002800:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
 8002804:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002808:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 800280c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002810:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002814:	f013 febe 	bl	8016594 <fasterexpf>
 8002818:	ed84 0a02 	vstr	s0, [r4, #8]
}
 800281c:	bd10      	pop	{r4, pc}
 800281e:	bf00      	nop
 8002820:	20000570 	.word	0x20000570
 8002824:	3a83126f 	.word	0x3a83126f

08002828 <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
 8002828:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <offsetParam2+0x1c>)
 800282e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002832:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002836:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800283a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800283e:	edc3 7a00 	vstr	s15, [r3]
}
 8002842:	4770      	bx	lr
 8002844:	20004ad8 	.word	0x20004ad8

08002848 <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <param2Linear+0x10>)
 800284a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800284e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002852:	ed83 0a00 	vstr	s0, [r3]
}
 8002856:	4770      	bx	lr
 8002858:	20004ad8 	.word	0x20004ad8

0800285c <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <param3Linear+0x10>)
 800285e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002862:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002866:	ed83 0a00 	vstr	s0, [r3]
}
 800286a:	4770      	bx	lr
 800286c:	20004af8 	.word	0x20004af8

08002870 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
 8002870:	eddf 6a10 	vldr	s13, [pc, #64]	; 80028b4 <param3Soft+0x44>
 8002874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002878:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80028b8 <param3Soft+0x48>
 800287c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002880:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 80028bc <param3Soft+0x4c>
 8002884:	eee0 7a26 	vfma.f32	s15, s0, s13
 8002888:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <param3Soft+0x50>)
 800288a:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
 8002890:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8002894:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002898:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
 800289c:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 80028a0:	eee5 6a86 	vfma.f32	s13, s11, s12
 80028a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80028ac:	edc1 6a00 	vstr	s13, [r1]
}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	3f7d70a4 	.word	0x3f7d70a4
 80028b8:	3c23d70a 	.word	0x3c23d70a
 80028bc:	3eaaaaaa 	.word	0x3eaaaaaa
 80028c0:	20004af8 	.word	0x20004af8
 80028c4:	20004c44 	.word	0x20004c44

080028c8 <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 80028c8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002928 <param3Hard+0x60>
 80028cc:	eddf 7a17 	vldr	s15, [pc, #92]	; 800292c <param3Hard+0x64>
 80028d0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002930 <param3Hard+0x68>
 80028d4:	eee0 7a26 	vfma.f32	s15, s0, s13
{
 80028d8:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <param3Hard+0x6c>)
 80028dc:	0045      	lsls	r5, r0, #1
 80028de:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 80028e2:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 80028e4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80028e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80028ec:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
 80028f0:	f019 ff96 	bl	801c820 <arm_sin_f32>
	if (tempDiv == 0.0f)
 80028f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	d00a      	beq.n	8002914 <param3Hard+0x4c>
	{
		tempDiv = 0.001f;
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 80028fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <param3Hard+0x70>)
 8002904:	442c      	add	r4, r5
 8002906:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800290a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800290e:	edc4 7a00 	vstr	s15, [r4]
}
 8002912:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <param3Hard+0x70>)
 8002916:	442c      	add	r4, r5
 8002918:	eddf 7a08 	vldr	s15, [pc, #32]	; 800293c <param3Hard+0x74>
 800291c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002920:	edc4 7a00 	vstr	s15, [r4]
}
 8002924:	bd38      	pop	{r3, r4, r5, pc}
 8002926:	bf00      	nop
 8002928:	3f7d70a4 	.word	0x3f7d70a4
 800292c:	3c23d70a 	.word	0x3c23d70a
 8002930:	3fc90fdb 	.word	0x3fc90fdb
 8002934:	20004af8 	.word	0x20004af8
 8002938:	20004c24 	.word	0x20004c24
 800293c:	4479ffff 	.word	0x4479ffff

08002940 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <param4Linear+0x10>)
 8002942:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002946:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800294a:	ed83 0a00 	vstr	s0, [r3]
}
 800294e:	4770      	bx	lr
 8002950:	20004b18 	.word	0x20004b18

08002954 <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <param5Linear+0x10>)
 8002956:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800295a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800295e:	ed83 0a00 	vstr	s0, [r3]
}
 8002962:	4770      	bx	lr
 8002964:	20004b38 	.word	0x20004b38

08002968 <param3BC>:
{
	tCrusher_setQuality (&bc[v][string],value);
}
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
	value = (value * inv_oversample) + 0.01f;
 8002968:	4a07      	ldr	r2, [pc, #28]	; (8002988 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
 800296a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
 800296e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800298c <param3BC+0x24>
 8002972:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <param3BC+0x28>)
 8002978:	eee7 7a00 	vfma.f32	s15, s14, s0
 800297c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002980:	eeb0 0a67 	vmov.f32	s0, s15
 8002984:	f011 bc60 	b.w	8014248 <tCrusher_setSamplingRatio>
 8002988:	20000048 	.word	0x20000048
 800298c:	3c23d70a 	.word	0x3c23d70a
 8002990:	2000052c 	.word	0x2000052c

08002994 <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <fxMixSet+0x10>)
 8002996:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800299a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800299e:	ed83 0a00 	vstr	s0, [r3]
}
 80029a2:	4770      	bx	lr
 80029a4:	20004684 	.word	0x20004684

080029a8 <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 80029a8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80029ac:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 80029b0:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 80029b2:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80029b6:	4605      	mov	r5, r0
 80029b8:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 80029ba:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80029be:	eeb0 0a67 	vmov.f32	s0, s15
 80029c2:	f014 f833 	bl	8016a2c <fasterdbtoa>
 80029c6:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <fxPostGainSet+0x2c>)
 80029c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80029cc:	ed84 0a00 	vstr	s0, [r4]
}
 80029d0:	bd38      	pop	{r3, r4, r5, pc}
 80029d2:	bf00      	nop
 80029d4:	200046a4 	.word	0x200046a4

080029d8 <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
 80029d8:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80029da:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
 80029de:	4d36      	ldr	r5, [pc, #216]	; (8002ab8 <wavefolderTick+0xe0>)
 80029e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80029e4:	4b35      	ldr	r3, [pc, #212]	; (8002abc <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
 80029e6:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 80029ea:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80029ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80029f2:	4a33      	ldr	r2, [pc, #204]	; (8002ac0 <wavefolderTick+0xe8>)
 80029f4:	ed9f 4a33 	vldr	s8, [pc, #204]	; 8002ac4 <wavefolderTick+0xec>
 80029f8:	0084      	lsls	r4, r0, #2
 80029fa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    {
    	fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;
 80029fe:	eddf 3a32 	vldr	s7, [pc, #200]	; 8002ac8 <wavefolderTick+0xf0>
{
 8002a02:	ed2d 8b02 	vpush	{d8}
 8002a06:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8002a0a:	ed93 6a00 	vldr	s12, [r3]
 8002a0e:	fe88 8a66 	vminnm.f32	s16, s16, s13
 8002a12:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8002a16:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
 8002a1a:	4b2c      	ldr	r3, [pc, #176]	; (8002acc <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8002a1c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8002a20:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
 8002a24:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
 8002a28:	4a29      	ldr	r2, [pc, #164]	; (8002ad0 <wavefolderTick+0xf8>)
 8002a2a:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8002a2e:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
 8002a32:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
 8002a36:	eb02 0280 	add.w	r2, r2, r0, lsl #2

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <wavefolderTick+0xfc>)
 8002a3c:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8002a40:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002ad8 <wavefolderTick+0x100>
 8002a44:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
 8002a48:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8002a4c:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8002a50:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8002a54:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
 8002a58:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002a5c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002a60:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
 8002a64:	ee36 3ac5 	vsub.f32	s6, s13, s10
 8002a68:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002a6c:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
 8002a70:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002a74:	ee25 5a23 	vmul.f32	s10, s10, s7
 8002a78:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8002a7c:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8002a80:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002a84:	eee7 7a05 	vfma.f32	s15, s14, s10
 8002a88:	eeb0 8a67 	vmov.f32	s16, s15
 8002a8c:	f019 fec8 	bl	801c820 <arm_sin_f32>
    sample = wfState[v][string] * invCurFB[v][string];
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002a92:	4813      	ldr	r0, [pc, #76]	; (8002ae0 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002a94:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
 8002a98:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002a9a:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
 8002a9c:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8002aa0:	eee8 7ac0 	vfms.f32	s15, s17, s0
 8002aa4:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002aa8:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
 8002aac:	ecbd 8b02 	vpop	{d8}
 8002ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002ab4:	f012 bae6 	b.w	8015084 <tHighpass_tick>
 8002ab8:	20013130 	.word	0x20013130
 8002abc:	20004ad8 	.word	0x20004ad8
 8002ac0:	20004ab8 	.word	0x20004ab8
 8002ac4:	3eaaaaaa 	.word	0x3eaaaaaa
 8002ac8:	3fbffff8 	.word	0x3fbffff8
 8002acc:	20004af8 	.word	0x20004af8
 8002ad0:	20004b18 	.word	0x20004b18
 8002ad4:	20004b38 	.word	0x20004b38
 8002ad8:	40c90fdb 	.word	0x40c90fdb
 8002adc:	200046d8 	.word	0x200046d8
 8002ae0:	20000590 	.word	0x20000590

08002ae4 <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
 8002ae4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002ae8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b00 <chorusParam1+0x1c>
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <chorusParam1+0x20>)
 8002aee:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002af2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002af6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002afa:	edc3 7a00 	vstr	s15, [r3]
}
 8002afe:	4770      	bx	lr
 8002b00:	45b4a000 	.word	0x45b4a000
 8002b04:	20004ab8 	.word	0x20004ab8

08002b08 <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
 8002b08:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002b20 <chorusParam2+0x18>
 8002b0c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <chorusParam2+0x1c>)
 8002b12:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002b16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002b1a:	ed83 0a00 	vstr	s0, [r3]
}
 8002b1e:	4770      	bx	lr
 8002b20:	3dcccccd 	.word	0x3dcccccd
 8002b24:	20004ad8 	.word	0x20004ad8

08002b28 <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
 8002b28:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b48 <chorusParam3+0x20>
 8002b2c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002b30:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002b4c <chorusParam3+0x24>
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <chorusParam3+0x28>)
 8002b36:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002b3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b42:	f014 b92f 	b.w	8016da4 <tCycle_setFreq>
 8002b46:	bf00      	nop
 8002b48:	3ecccccd 	.word	0x3ecccccd
 8002b4c:	3c23d70a 	.word	0x3c23d70a
 8002b50:	200049ec 	.word	0x200049ec

08002b54 <chorusParam4>:
}

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
 8002b54:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b74 <chorusParam4+0x20>
 8002b58:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002b5c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8002b78 <chorusParam4+0x24>
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <chorusParam4+0x28>)
 8002b62:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002b66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8002b6e:	f014 b919 	b.w	8016da4 <tCycle_setFreq>
 8002b72:	bf00      	nop
 8002b74:	3ee38e37 	.word	0x3ee38e37
 8002b78:	3c343958 	.word	0x3c343958
 8002b7c:	20004a0c 	.word	0x20004a0c

08002b80 <chorusTick>:
    //float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    //temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    //temp = tHighpass_tick(&dcBlock1[v], temp);
	float temp = 0.0f;
    return -temp;
}
 8002b80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8002b88 <chorusTick+0x8>
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	80000000 	.word	0x80000000

08002b8c <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8002b8c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002b90:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <shaperTick+0x40>)
    sample = sample * param1[v][string];
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8002b94:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
 8002b98:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8002b9c:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8002b9e:	edd2 7a00 	vldr	s15, [r2]
 8002ba2:	008c      	lsls	r4, r1, #2
 8002ba4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <shaperTick+0x48>)
 8002bae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002bb2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002bb6:	edd1 0a00 	vldr	s1, [r1]
 8002bba:	f013 fd1b 	bl	80165f4 <LEAF_shaper>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002bbe:	4806      	ldr	r0, [pc, #24]	; (8002bd8 <shaperTick+0x4c>)
 8002bc0:	4420      	add	r0, r4
    return temp;
}
 8002bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002bc6:	f012 ba5d 	b.w	8015084 <tHighpass_tick>
 8002bca:	bf00      	nop
 8002bcc:	20004ad8 	.word	0x20004ad8
 8002bd0:	20004ab8 	.word	0x20004ab8
 8002bd4:	20004af8 	.word	0x20004af8
 8002bd8:	20000590 	.word	0x20000590

08002bdc <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 8002be0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <tiltFilterTick+0x28>)
{
 8002be6:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 8002be8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002bec:	008c      	lsls	r4, r1, #2
 8002bee:	f012 fa6b 	bl	80150c8 <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
 8002bf2:	4806      	ldr	r0, [pc, #24]	; (8002c0c <tiltFilterTick+0x2c>)
 8002bf4:	4420      	add	r0, r4
 8002bf6:	f012 fa67 	bl	80150c8 <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <tiltFilterTick+0x30>)
 8002bfc:	4420      	add	r0, r4
    return sample;
}
 8002bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 8002c02:	f012 ba61 	b.w	80150c8 <tVZFilter_tickEfficient>
 8002c06:	bf00      	nop
 8002c08:	20004c70 	.word	0x20004c70
 8002c0c:	20004c90 	.word	0x20004c90
 8002c10:	2000054c 	.word	0x2000054c

08002c14 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
 8002c14:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <tanhTick+0x48>)
 8002c1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
 8002c1e:	4810      	ldr	r0, [pc, #64]	; (8002c60 <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
 8002c20:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8002c24:	b510      	push	{r4, lr}
 8002c26:	edd3 6a00 	vldr	s13, [r3]
    float gain = param1[v][string];
 8002c2a:	008c      	lsls	r4, r1, #2
 8002c2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8002c30:	eea6 0a87 	vfma.f32	s0, s13, s14
 8002c34:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
 8002c38:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002c3c:	f01a fc88 	bl	801d550 <tanhf>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002c40:	4808      	ldr	r0, [pc, #32]	; (8002c64 <tanhTick+0x50>)
 8002c42:	4420      	add	r0, r4
 8002c44:	f012 fa1e 	bl	8015084 <tHighpass_tick>
    temp *= param4[v][string];
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <tanhTick+0x54>)
 8002c4a:	4423      	add	r3, r4
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
 8002c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
 8002c54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002c58:	f01a bc7a 	b.w	801d550 <tanhf>
 8002c5c:	20004ad8 	.word	0x20004ad8
 8002c60:	20004ab8 	.word	0x20004ab8
 8002c64:	20000590 	.word	0x20000590
 8002c68:	20004b18 	.word	0x20004b18

08002c6c <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 8002c6c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <softClipTick+0x6c>)
    float shape = param3[v][string];
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <softClipTick+0x70>)
    sample = sample + param2[v][string];
 8002c74:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002c78:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002c7c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002ce0 <softClipTick+0x74>
    float shape = param3[v][string];
 8002c80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002c84:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
        sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002c88:	4816      	ldr	r0, [pc, #88]	; (8002ce4 <softClipTick+0x78>)
{
 8002c8a:	b410      	push	{r4}
    sample = sample * param1[v][string];
 8002c8c:	4c16      	ldr	r4, [pc, #88]	; (8002ce8 <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002c8e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
 8002c92:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
 8002c96:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
 8002c9a:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <softClipTick+0x80>)
    sample = sample + param2[v][string];
 8002ca0:	ed94 5a00 	vldr	s10, [r4]
 8002ca4:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
 8002ca8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return sample;
}
 8002cac:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
 8002cb0:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
 8002cb4:	ed93 0a00 	vldr	s0, [r3]
 8002cb8:	fec7 7ae5 	vminnm.f32	s15, s15, s11
 8002cbc:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
 8002cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8002ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002cd0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002cd4:	f012 b9d6 	b.w	8015084 <tHighpass_tick>
 8002cd8:	20004ad8 	.word	0x20004ad8
 8002cdc:	20004af8 	.word	0x20004af8
 8002ce0:	3eaaaaaa 	.word	0x3eaaaaaa
 8002ce4:	20000590 	.word	0x20000590
 8002ce8:	20004ab8 	.word	0x20004ab8
 8002cec:	20004c44 	.word	0x20004c44

08002cf0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
 8002cf0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002cf4:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <hardClipTick+0x74>)
 8002cf8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
 8002cfc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 8002d00:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
 8002d04:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
 8002d08:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
 8002d0a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
 8002d0e:	0084      	lsls	r4, r0, #2
    sample = sample + param2[v][string];
 8002d10:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 8002d14:	4e14      	ldr	r6, [pc, #80]	; (8002d68 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
 8002d16:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 8002d1a:	4d14      	ldr	r5, [pc, #80]	; (8002d6c <hardClipTick+0x7c>)
 8002d1c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8002d20:	4425      	add	r5, r4
 8002d22:	ed96 7a00 	vldr	s14, [r6]
 8002d26:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 8002d2a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 8002d2e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002d32:	f019 fd75 	bl	801c820 <arm_sin_f32>
 8002d36:	ed96 7a00 	vldr	s14, [r6]
 8002d3a:	edd5 7a00 	vldr	s15, [r5]
 8002d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002d46:	f019 fd6b 	bl	801c820 <arm_sin_f32>
        sample = sample * shapeDividerH[v][string];
 8002d4a:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002d4e:	4808      	ldr	r0, [pc, #32]	; (8002d70 <hardClipTick+0x80>)
 8002d50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002d54:	4420      	add	r0, r4
    return sample;
}
 8002d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002d5a:	f012 b993 	b.w	8015084 <tHighpass_tick>
 8002d5e:	bf00      	nop
 8002d60:	20004ab8 	.word	0x20004ab8
 8002d64:	20004ad8 	.word	0x20004ad8
 8002d68:	20004af8 	.word	0x20004af8
 8002d6c:	20004c24 	.word	0x20004c24
 8002d70:	20000590 	.word	0x20000590

08002d74 <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
 8002d74:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002d78:	4b17      	ldr	r3, [pc, #92]	; (8002dd8 <satTick+0x64>)
    sample = sample * param1[v][string];
 8002d7a:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002d7c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002d80:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002d84:	4816      	ldr	r0, [pc, #88]	; (8002de0 <satTick+0x6c>)
    sample = sample * param1[v][string];
 8002d86:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002d8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
 8002d8e:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002d90:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
 8002d94:	008c      	lsls	r4, r1, #2
 8002d96:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002d9a:	eeb0 6a47 	vmov.f32	s12, s14
 8002d9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002da2:	eea7 6a80 	vfma.f32	s12, s15, s0
 8002da6:	eea7 7a80 	vfma.f32	s14, s15, s0
 8002daa:	eeb0 6ac6 	vabs.f32	s12, s12
 8002dae:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8002db2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8002db6:	ee36 6b05 	vadd.f64	d6, d6, d5
 8002dba:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002dbe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8002dc2:	f012 f95f 	bl	8015084 <tHighpass_tick>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
 8002dc6:	4807      	ldr	r0, [pc, #28]	; (8002de4 <satTick+0x70>)
 8002dc8:	4420      	add	r0, r4
 8002dca:	f012 f95b 	bl	8015084 <tHighpass_tick>
    temp = LEAF_tanh(temp);
    return temp;
}
 8002dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
 8002dd2:	f013 bc87 	b.w	80166e4 <LEAF_tanh>
 8002dd6:	bf00      	nop
 8002dd8:	20004ad8 	.word	0x20004ad8
 8002ddc:	20004ab8 	.word	0x20004ab8
 8002de0:	20000590 	.word	0x20000590
 8002de4:	200005b0 	.word	0x200005b0

08002de8 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 8002de8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
 8002dee:	4806      	ldr	r0, [pc, #24]	; (8002e08 <bcTick+0x20>)
    sample = sample * param1[v][string];
 8002df0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
 8002df4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
 8002df8:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
 8002dfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002e00:	f011 b9e2 	b.w	80141c8 <tCrusher_tick>
 8002e04:	20004ab8 	.word	0x20004ab8
 8002e08:	2000052c 	.word	0x2000052c

08002e0c <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
 8002e0c:	4b03      	ldr	r3, [pc, #12]	; (8002e1c <compressorTick+0x10>)
 8002e0e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e16:	f011 ba6f 	b.w	80142f8 <tCompressor_tick>
 8002e1a:	bf00      	nop
 8002e1c:	20000570 	.word	0x20000570

08002e20 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
 8002e20:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <FXlowpassTick+0x10>)
 8002e22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e2a:	f012 b855 	b.w	8014ed8 <tSVF_tick>
 8002e2e:	bf00      	nop
 8002e30:	2000049c 	.word	0x2000049c

08002e34 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <FXhighpassTick+0x10>)
 8002e36:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e3e:	f012 b84b 	b.w	8014ed8 <tSVF_tick>
 8002e42:	bf00      	nop
 8002e44:	2000047c 	.word	0x2000047c

08002e48 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <FXbandpassTick+0x10>)
 8002e4a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e52:	f012 b841 	b.w	8014ed8 <tSVF_tick>
 8002e56:	bf00      	nop
 8002e58:	2000043c 	.word	0x2000043c

08002e5c <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <FXdiodeLowpassTick+0x10>)
 8002e5e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e66:	f012 be81 	b.w	8015b6c <tDiodeFilter_tick>
 8002e6a:	bf00      	nop
 8002e6c:	2000045c 	.word	0x2000045c

08002e70 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <FXVZpeakTick+0x10>)
 8002e72:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e76:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e7a:	f012 b925 	b.w	80150c8 <tVZFilter_tickEfficient>
 8002e7e:	bf00      	nop
 8002e80:	2000041c 	.word	0x2000041c

08002e84 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
 8002e84:	4b03      	ldr	r3, [pc, #12]	; (8002e94 <FXVZlowshelfTick+0x10>)
 8002e86:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e8e:	f012 b91b 	b.w	80150c8 <tVZFilter_tickEfficient>
 8002e92:	bf00      	nop
 8002e94:	200003fc 	.word	0x200003fc

08002e98 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <FXVZhighshelfTick+0x10>)
 8002e9a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002ea2:	f012 b911 	b.w	80150c8 <tVZFilter_tickEfficient>
 8002ea6:	bf00      	nop
 8002ea8:	200003dc 	.word	0x200003dc

08002eac <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <FXVZbandrejectTick+0x10>)
 8002eae:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002eb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002eb6:	f012 b907 	b.w	80150c8 <tVZFilter_tickEfficient>
 8002eba:	bf00      	nop
 8002ebc:	200003bc 	.word	0x200003bc

08002ec0 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <FXLadderLowpassTick+0x10>)
 8002ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002ec6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002eca:	f013 b9cb 	b.w	8016264 <tLadderFilter_tick>
 8002ece:	bf00      	nop
 8002ed0:	2000039c 	.word	0x2000039c

08002ed4 <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002ed4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002ed8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002f0c <FXLowpassParam1+0x38>
 8002edc:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002f10 <FXLowpassParam1+0x3c>
 8002ee0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002f14 <FXLowpassParam1+0x40>
 8002ee4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002ee8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002f18 <FXLowpassParam1+0x44>
{
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4605      	mov	r5, r0
 8002ef0:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002ef2:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 8002ef6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002efa:	f013 fbdf 	bl	80166bc <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 8002efe:	4807      	ldr	r0, [pc, #28]	; (8002f1c <FXLowpassParam1+0x48>)
 8002f00:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 8002f08:	f012 b81c 	b.w	8014f44 <tSVF_setFreqFast>
 8002f0c:	429a0000 	.word	0x429a0000
 8002f10:	420fb824 	.word	0x420fb824
 8002f14:	457ff000 	.word	0x457ff000
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	2000049c 	.word	0x2000049c

08002f20 <FXHighpassParam1>:
void FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002f20:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002f24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002f58 <FXHighpassParam1+0x38>
 8002f28:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002f5c <FXHighpassParam1+0x3c>
 8002f2c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002f60 <FXHighpassParam1+0x40>
 8002f30:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002f34:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002f64 <FXHighpassParam1+0x44>
{
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002f3e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 8002f42:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002f46:	f013 fbb9 	bl	80166bc <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 8002f4a:	4807      	ldr	r0, [pc, #28]	; (8002f68 <FXHighpassParam1+0x48>)
 8002f4c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 8002f54:	f011 bff6 	b.w	8014f44 <tSVF_setFreqFast>
 8002f58:	429a0000 	.word	0x429a0000
 8002f5c:	420fb824 	.word	0x420fb824
 8002f60:	457ff000 	.word	0x457ff000
 8002f64:	00000000 	.word	0x00000000
 8002f68:	2000047c 	.word	0x2000047c

08002f6c <FXBandpassParam1>:

void FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002f6c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002f70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002fa4 <FXBandpassParam1+0x38>
 8002f74:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002fa8 <FXBandpassParam1+0x3c>
 8002f78:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002fac <FXBandpassParam1+0x40>
 8002f7c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002f80:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002fb0 <FXBandpassParam1+0x44>
{
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4605      	mov	r5, r0
 8002f88:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002f8a:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 8002f8e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002f92:	f013 fb93 	bl	80166bc <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 8002f96:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <FXBandpassParam1+0x48>)
 8002f98:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 8002fa0:	f011 bfd0 	b.w	8014f44 <tSVF_setFreqFast>
 8002fa4:	429a0000 	.word	0x429a0000
 8002fa8:	420fb824 	.word	0x420fb824
 8002fac:	457ff000 	.word	0x457ff000
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	2000043c 	.word	0x2000043c

08002fb8 <FXDiodeParam1>:

void FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002fb8:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002fbc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002ff0 <FXDiodeParam1+0x38>
 8002fc0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002ff4 <FXDiodeParam1+0x3c>
 8002fc4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002ff8 <FXDiodeParam1+0x40>
 8002fc8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002fcc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002ffc <FXDiodeParam1+0x44>
{
 8002fd0:	b538      	push	{r3, r4, r5, lr}
 8002fd2:	4605      	mov	r5, r0
 8002fd4:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002fd6:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 8002fda:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002fde:	f013 fb6d 	bl	80166bc <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 8002fe2:	4807      	ldr	r0, [pc, #28]	; (8003000 <FXDiodeParam1+0x48>)
 8002fe4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 8002fec:	f013 b8c2 	b.w	8016174 <tDiodeFilter_setFreqFast>
 8002ff0:	429a0000 	.word	0x429a0000
 8002ff4:	420fb824 	.word	0x420fb824
 8002ff8:	457ff000 	.word	0x457ff000
 8002ffc:	00000000 	.word	0x00000000
 8003000:	2000045c 	.word	0x2000045c

08003004 <FXPeakParam1>:
void FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003004:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003008:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800303c <FXPeakParam1+0x38>
 800300c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003040 <FXPeakParam1+0x3c>
 8003010:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003044 <FXPeakParam1+0x40>
 8003014:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003018:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003048 <FXPeakParam1+0x44>
{
 800301c:	b538      	push	{r3, r4, r5, lr}
 800301e:	4605      	mov	r5, r0
 8003020:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003022:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 8003026:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800302a:	f013 fb47 	bl	80166bc <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 800302e:	4807      	ldr	r0, [pc, #28]	; (800304c <FXPeakParam1+0x48>)
 8003030:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 8003038:	f012 ba64 	b.w	8015504 <tVZFilter_setFreqFast>
 800303c:	429a0000 	.word	0x429a0000
 8003040:	420fb824 	.word	0x420fb824
 8003044:	457ff000 	.word	0x457ff000
 8003048:	00000000 	.word	0x00000000
 800304c:	2000041c 	.word	0x2000041c

08003050 <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003050:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003054:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003088 <FXLowShelfParam1+0x38>
 8003058:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800308c <FXLowShelfParam1+0x3c>
 800305c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003090 <FXLowShelfParam1+0x40>
 8003060:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003064:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003094 <FXLowShelfParam1+0x44>
{
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4605      	mov	r5, r0
 800306c:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800306e:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 8003072:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003076:	f013 fb21 	bl	80166bc <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 800307a:	4807      	ldr	r0, [pc, #28]	; (8003098 <FXLowShelfParam1+0x48>)
 800307c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 8003084:	f012 ba3e 	b.w	8015504 <tVZFilter_setFreqFast>
 8003088:	429a0000 	.word	0x429a0000
 800308c:	420fb824 	.word	0x420fb824
 8003090:	457ff000 	.word	0x457ff000
 8003094:	00000000 	.word	0x00000000
 8003098:	200003fc 	.word	0x200003fc

0800309c <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800309c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80030a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80030d4 <FXHighShelfParam1+0x38>
 80030a4:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80030d8 <FXHighShelfParam1+0x3c>
 80030a8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80030dc <FXHighShelfParam1+0x40>
 80030ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 80030b0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80030e0 <FXHighShelfParam1+0x44>
{
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	4605      	mov	r5, r0
 80030b8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80030ba:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80030be:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80030c2:	f013 fafb 	bl	80166bc <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80030c6:	4807      	ldr	r0, [pc, #28]	; (80030e4 <FXHighShelfParam1+0x48>)
 80030c8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80030cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80030d0:	f012 ba18 	b.w	8015504 <tVZFilter_setFreqFast>
 80030d4:	429a0000 	.word	0x429a0000
 80030d8:	420fb824 	.word	0x420fb824
 80030dc:	457ff000 	.word	0x457ff000
 80030e0:	00000000 	.word	0x00000000
 80030e4:	200003dc 	.word	0x200003dc

080030e8 <FXNotchParam1>:
void FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80030e8:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80030ec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003120 <FXNotchParam1+0x38>
 80030f0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003124 <FXNotchParam1+0x3c>
 80030f4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003128 <FXNotchParam1+0x40>
 80030f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80030fc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800312c <FXNotchParam1+0x44>
{
 8003100:	b538      	push	{r3, r4, r5, lr}
 8003102:	4605      	mov	r5, r0
 8003104:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003106:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 800310a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800310e:	f013 fad5 	bl	80166bc <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 8003112:	4807      	ldr	r0, [pc, #28]	; (8003130 <FXNotchParam1+0x48>)
 8003114:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 800311c:	f012 b9f2 	b.w	8015504 <tVZFilter_setFreqFast>
 8003120:	429a0000 	.word	0x429a0000
 8003124:	420fb824 	.word	0x420fb824
 8003128:	457ff000 	.word	0x457ff000
 800312c:	00000000 	.word	0x00000000
 8003130:	200003bc 	.word	0x200003bc

08003134 <FXLadderParam1>:
void FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003134:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003138:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800316c <FXLadderParam1+0x38>
 800313c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003170 <FXLadderParam1+0x3c>
 8003140:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003174 <FXLadderParam1+0x40>
 8003144:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003148:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003178 <FXLadderParam1+0x44>
{
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	4605      	mov	r5, r0
 8003150:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003152:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8003156:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800315a:	f013 faaf 	bl	80166bc <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 800315e:	4807      	ldr	r0, [pc, #28]	; (800317c <FXLadderParam1+0x48>)
 8003160:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8003168:	f013 b9a2 	b.w	80164b0 <tLadderFilter_setFreqFast>
 800316c:	429a0000 	.word	0x429a0000
 8003170:	420fb824 	.word	0x420fb824
 8003174:	457ff000 	.word	0x457ff000
 8003178:	00000000 	.word	0x00000000
 800317c:	2000039c 	.word	0x2000039c

08003180 <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003180:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8003184:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80031ac <FXPeakParam2+0x2c>
{
 8003188:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800318a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800318e:	4605      	mov	r5, r0
 8003190:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003192:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003196:	eeb0 0a67 	vmov.f32	s0, s15
 800319a:	f013 fc47 	bl	8016a2c <fasterdbtoa>
 800319e:	4804      	ldr	r0, [pc, #16]	; (80031b0 <FXPeakParam2+0x30>)
 80031a0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80031a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80031a8:	f012 bb0a 	b.w	80157c0 <tVZFilter_setGain>
 80031ac:	42480000 	.word	0x42480000
 80031b0:	2000041c 	.word	0x2000041c

080031b4 <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80031b4:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80031b8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80031e0 <FXLowShelfParam2+0x2c>
{
 80031bc:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80031be:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80031c2:	4605      	mov	r5, r0
 80031c4:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80031c6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80031ca:	eeb0 0a67 	vmov.f32	s0, s15
 80031ce:	f013 fc2d 	bl	8016a2c <fasterdbtoa>
 80031d2:	4804      	ldr	r0, [pc, #16]	; (80031e4 <FXLowShelfParam2+0x30>)
 80031d4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80031d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80031dc:	f012 baf0 	b.w	80157c0 <tVZFilter_setGain>
 80031e0:	42480000 	.word	0x42480000
 80031e4:	200003fc 	.word	0x200003fc

080031e8 <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80031e8:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80031ec:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003214 <FXHighShelfParam2+0x2c>
{
 80031f0:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80031f2:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80031f6:	4605      	mov	r5, r0
 80031f8:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80031fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80031fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003202:	f013 fc13 	bl	8016a2c <fasterdbtoa>
 8003206:	4804      	ldr	r0, [pc, #16]	; (8003218 <FXHighShelfParam2+0x30>)
 8003208:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800320c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003210:	f012 bad6 	b.w	80157c0 <tVZFilter_setGain>
 8003214:	42480000 	.word	0x42480000
 8003218:	200003dc 	.word	0x200003dc

0800321c <FXNotchParam2>:

void FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800321c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8003220:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003248 <FXNotchParam2+0x2c>
{
 8003224:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003226:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800322a:	4605      	mov	r5, r0
 800322c:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800322e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003232:	eeb0 0a67 	vmov.f32	s0, s15
 8003236:	f013 fbf9 	bl	8016a2c <fasterdbtoa>
 800323a:	4804      	ldr	r0, [pc, #16]	; (800324c <FXNotchParam2+0x30>)
 800323c:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
 8003240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003244:	f012 babc 	b.w	80157c0 <tVZFilter_setGain>
 8003248:	42480000 	.word	0x42480000
 800324c:	200003bc 	.word	0x200003bc

08003250 <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <FXLowpassParam3+0x10>)
 8003252:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003256:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800325a:	f011 bea9 	b.w	8014fb0 <tSVF_setQ>
 800325e:	bf00      	nop
 8003260:	2000049c 	.word	0x2000049c

08003264 <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <FXHighpassParam3+0x10>)
 8003266:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800326a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800326e:	f011 be9f 	b.w	8014fb0 <tSVF_setQ>
 8003272:	bf00      	nop
 8003274:	2000047c 	.word	0x2000047c

08003278 <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <FXBandpassParam3+0x10>)
 800327a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800327e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003282:	f011 be95 	b.w	8014fb0 <tSVF_setQ>
 8003286:	bf00      	nop
 8003288:	2000043c 	.word	0x2000043c

0800328c <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <FXDiodeParam3+0x10>)
 800328e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003292:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003296:	f012 bf8d 	b.w	80161b4 <tDiodeFilter_setQ>
 800329a:	bf00      	nop
 800329c:	2000045c 	.word	0x2000045c

080032a0 <FXPeakParam3>:
}


void FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <FXPeakParam3+0x10>)
 80032a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80032a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80032aa:	f012 baa5 	b.w	80157f8 <tVZFilter_setResonance>
 80032ae:	bf00      	nop
 80032b0:	2000041c 	.word	0x2000041c

080032b4 <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <FXLowShelfParam3+0x10>)
 80032b6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80032ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80032be:	f012 ba9b 	b.w	80157f8 <tVZFilter_setResonance>
 80032c2:	bf00      	nop
 80032c4:	200003fc 	.word	0x200003fc

080032c8 <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <FXHighShelfParam3+0x10>)
 80032ca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80032ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80032d2:	f012 ba91 	b.w	80157f8 <tVZFilter_setResonance>
 80032d6:	bf00      	nop
 80032d8:	200003dc 	.word	0x200003dc

080032dc <FXNotchParam3>:
}


void FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <FXNotchParam3+0x10>)
 80032de:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80032e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80032e6:	f012 ba87 	b.w	80157f8 <tVZFilter_setResonance>
 80032ea:	bf00      	nop
 80032ec:	200003bc 	.word	0x200003bc

080032f0 <FXLadderParam3>:
}


void FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <FXLadderParam3+0x10>)
 80032f2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80032f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80032fa:	f013 b8fd 	b.w	80164f8 <tLadderFilter_setQ>
 80032fe:	bf00      	nop
 8003300:	2000039c 	.word	0x2000039c

08003304 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
 8003304:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8003306:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 800330a:	008c      	lsls	r4, r1, #2
{
 800330c:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8003310:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
 8003314:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8003318:	eee0 7a68 	vfms.f32	s15, s0, s17
 800331c:	eeb0 0a67 	vmov.f32	s0, s15
 8003320:	f013 fb7c 	bl	8016a1c <fastdbtoa>
 8003324:	4808      	ldr	r0, [pc, #32]	; (8003348 <noiseSetTilt+0x44>)
 8003326:	4420      	add	r0, r4
 8003328:	f012 fa4a 	bl	80157c0 <tVZFilter_setGain>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 800332c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8003330:	eea8 0a28 	vfma.f32	s0, s16, s17
 8003334:	f013 fb72 	bl	8016a1c <fastdbtoa>
 8003338:	4804      	ldr	r0, [pc, #16]	; (800334c <noiseSetTilt+0x48>)
}
 800333a:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 800333e:	4420      	add	r0, r4
}
 8003340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8003344:	f012 ba3c 	b.w	80157c0 <tVZFilter_setGain>
 8003348:	20004a60 	.word	0x20004a60
 800334c:	20004a68 	.word	0x20004a68

08003350 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003350:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8003354:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003378 <noiseSetGain+0x28>
{
 8003358:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 800335a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800335e:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	f013 fb5a 	bl	8016a1c <fastdbtoa>
 8003368:	4804      	ldr	r0, [pc, #16]	; (800337c <noiseSetGain+0x2c>)
 800336a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800336e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003372:	f012 ba25 	b.w	80157c0 <tVZFilter_setGain>
 8003376:	bf00      	nop
 8003378:	42080000 	.word	0x42080000
 800337c:	20004a40 	.word	0x20004a40

08003380 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003380:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003384:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80033b4 <noiseSetFreq+0x34>
 8003388:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80033b8 <noiseSetFreq+0x38>
 800338c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 80033bc <noiseSetFreq+0x3c>
 8003390:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003394:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80033c0 <noiseSetFreq+0x40>
{
 8003398:	b510      	push	{r4, lr}
 800339a:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800339c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80033a0:	f013 f98c 	bl	80166bc <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 80033a4:	4807      	ldr	r0, [pc, #28]	; (80033c4 <noiseSetFreq+0x44>)
 80033a6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80033aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 80033ae:	f012 b8a9 	b.w	8015504 <tVZFilter_setFreqFast>
 80033b2:	bf00      	nop
 80033b4:	429a0000 	.word	0x429a0000
 80033b8:	420fb824 	.word	0x420fb824
 80033bc:	457ff000 	.word	0x457ff000
 80033c0:	00000000 	.word	0x00000000
 80033c4:	20004a40 	.word	0x20004a40

080033c8 <noise_tick>:
uint32_t timeNoise = 0;
uint32_t timeRandom = 0;


void __ATTR_ITCMRAM noise_tick(int string)
{
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tempCount9 = DWT->CYCCNT;
	float enabled = params[Noise].realVal[string];
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
 80033ca:	4d27      	ldr	r5, [pc, #156]	; (8003468 <noise_tick+0xa0>)
{
 80033cc:	4604      	mov	r4, r0
	float sample = random_values[randomValPointer++];
 80033ce:	4927      	ldr	r1, [pc, #156]	; (800346c <noise_tick+0xa4>)
	float enabled = params[Noise].realVal[string];
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <noise_tick+0xa8>)
	uint32_t tempCount9 = DWT->CYCCNT;
 80033d2:	4f28      	ldr	r7, [pc, #160]	; (8003474 <noise_tick+0xac>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 80033d4:	4828      	ldr	r0, [pc, #160]	; (8003478 <noise_tick+0xb0>)
{
 80033d6:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
 80033da:	782a      	ldrb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 80033dc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	uint32_t tempCount9 = DWT->CYCCNT;
 80033e0:	687e      	ldr	r6, [r7, #4]
	float sample = random_values[randomValPointer++];
 80033e2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80033e6:	3201      	adds	r2, #1
 80033e8:	702a      	strb	r2, [r5, #0]
	float enabled = params[Noise].realVal[string];
 80033ea:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 80033ee:	ed91 0a00 	vldr	s0, [r1]
 80033f2:	00a5      	lsls	r5, r4, #2
	float enabled = params[Noise].realVal[string];
 80033f4:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
 80033f8:	ed92 8aa3 	vldr	s16, [r2, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
 80033fc:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8003400:	f011 fe62 	bl	80150c8 <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
 8003404:	481d      	ldr	r0, [pc, #116]	; (800347c <noise_tick+0xb4>)
 8003406:	4428      	add	r0, r5
 8003408:	f011 fe5e 	bl	80150c8 <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
 800340c:	481c      	ldr	r0, [pc, #112]	; (8003480 <noise_tick+0xb8>)
 800340e:	4428      	add	r0, r5
 8003410:	f011 fe5a 	bl	80150c8 <tVZFilter_tickEfficient>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
 8003414:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
 8003418:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8003484 <noise_tick+0xbc>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
 800341c:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
 8003420:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
 8003424:	4b18      	ldr	r3, [pc, #96]	; (8003488 <noise_tick+0xc0>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003426:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
 800342a:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
 800342e:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003432:	4816      	ldr	r0, [pc, #88]	; (800348c <noise_tick+0xc4>)
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
 8003434:	eb03 0384 	add.w	r3, r3, r4, lsl #2

	uint32_t tempCount10 = DWT->CYCCNT;
	timeRandom = tempCount10-tempCount9;
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <noise_tick+0xc8>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 800343a:	ee28 8a09 	vmul.f32	s16, s16, s18
	noiseOuts[0][string] = sample * filterSend *  enabled;
 800343e:	4405      	add	r5, r0
	float normSample = (sample + 1.f) * 0.5f;
 8003440:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003444:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003448:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
 800344c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003450:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003454:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
 8003458:	edc3 7a06 	vstr	s15, [r3, #24]
	uint32_t tempCount10 = DWT->CYCCNT;
 800345c:	687b      	ldr	r3, [r7, #4]
	timeRandom = tempCount10-tempCount9;
 800345e:	1b9b      	subs	r3, r3, r6
 8003460:	6013      	str	r3, [r2, #0]
}
 8003462:	ecbd 8b04 	vpop	{d8-d9}
 8003466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003468:	20004bf0 	.word	0x20004bf0
 800346c:	20016e74 	.word	0x20016e74
 8003470:	20015d64 	.word	0x20015d64
 8003474:	e0001000 	.word	0xe0001000
 8003478:	20004a60 	.word	0x20004a60
 800347c:	20004a68 	.word	0x20004a68
 8003480:	20004a40 	.word	0x20004a40
 8003484:	00000000 	.word	0x00000000
 8003488:	20012f70 	.word	0x20012f70
 800348c:	20004a50 	.word	0x20004a50
 8003490:	200130f4 	.word	0x200130f4

08003494 <audioTickL>:
{
 8003494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
 8003498:	2100      	movs	r1, #0
 800349a:	48c5      	ldr	r0, [pc, #788]	; (80037b0 <audioTickL+0x31c>)
	uint32_t tempCount5 = DWT->CYCCNT;
 800349c:	4ac5      	ldr	r2, [pc, #788]	; (80037b4 <audioTickL+0x320>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 800349e:	4bc6      	ldr	r3, [pc, #792]	; (80037b8 <audioTickL+0x324>)
 80034a0:	4dc6      	ldr	r5, [pc, #792]	; (80037bc <audioTickL+0x328>)
 80034a2:	4ec7      	ldr	r6, [pc, #796]	; (80037c0 <audioTickL+0x32c>)
 80034a4:	f105 0830 	add.w	r8, r5, #48	; 0x30
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80034a8:	4cc6      	ldr	r4, [pc, #792]	; (80037c4 <audioTickL+0x330>)
{
 80034aa:	ed2d 8b0a 	vpush	{d8-d12}
 80034ae:	b08d      	sub	sp, #52	; 0x34
	interrupted = 0;
 80034b0:	7001      	strb	r1, [r0, #0]
{
 80034b2:	af00      	add	r7, sp, #0
	uint32_t tempCount5 = DWT->CYCCNT;
 80034b4:	6852      	ldr	r2, [r2, #4]
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 80034b6:	edd3 9a38 	vldr	s19, [r3, #224]	; 0xe0
	uint32_t tempCount5 = DWT->CYCCNT;
 80034ba:	60ba      	str	r2, [r7, #8]
	tickMappings();
 80034bc:	f7fe fc36 	bl	8001d2c <tickMappings>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80034c0:	48c1      	ldr	r0, [pc, #772]	; (80037c8 <audioTickL+0x334>)
 80034c2:	f011 fb37 	bl	8014b34 <tExpSmooth_tick>
 80034c6:	eeb0 8a40 	vmov.f32	s16, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 80034ca:	4630      	mov	r0, r6
 80034cc:	f011 fb32 	bl	8014b34 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
 80034d0:	4bbe      	ldr	r3, [pc, #760]	; (80037cc <audioTickL+0x338>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 80034d2:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b12b      	cbz	r3, 80034e6 <audioTickL+0x52>
 80034da:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
 80034dc:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
 80034e0:	d001      	beq.n	80034e6 <audioTickL+0x52>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
 80034e2:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 80034e6:	4545      	cmp	r5, r8
 80034e8:	f106 0604 	add.w	r6, r6, #4
 80034ec:	f104 0408 	add.w	r4, r4, #8
 80034f0:	d1eb      	bne.n	80034ca <audioTickL+0x36>
	float note[numStringsThisBoard];
 80034f2:	009a      	lsls	r2, r3, #2
 80034f4:	3207      	adds	r2, #7
 80034f6:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
 80034fa:	ebad 0d02 	sub.w	sp, sp, r2
 80034fe:	466a      	mov	r2, sp
	for (int v = 0; v < numStringsThisBoard; v++)
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 823b 	beq.w	800397c <audioTickL+0x4e8>
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003506:	ed9f aab2 	vldr	s20, [pc, #712]	; 80037d0 <audioTickL+0x33c>
 800350a:	2300      	movs	r3, #0
 800350c:	eddf 7ab1 	vldr	s15, [pc, #708]	; 80037d4 <audioTickL+0x340>
 8003510:	eeb0 ba4a 	vmov.f32	s22, s20
 8003514:	617a      	str	r2, [r7, #20]
 8003516:	4ab0      	ldr	r2, [pc, #704]	; (80037d8 <audioTickL+0x344>)
	for (int v = 0; v < numStringsThisBoard; v++)
 8003518:	469a      	mov	sl, r3
	float masterSample = 0.0f;
 800351a:	eddf 8ab0 	vldr	s17, [pc, #704]	; 80037dc <audioTickL+0x348>
 800351e:	61ba      	str	r2, [r7, #24]
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003520:	eea8 ba27 	vfma.f32	s22, s16, s15
 8003524:	4aae      	ldr	r2, [pc, #696]	; (80037e0 <audioTickL+0x34c>)
		if (note[v] < 0.0f)
 8003526:	eeb0 9a68 	vmov.f32	s18, s17
 800352a:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8003838 <audioTickL+0x3a4>
 800352e:	623a      	str	r2, [r7, #32]
 8003530:	4aac      	ldr	r2, [pc, #688]	; (80037e4 <audioTickL+0x350>)
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003532:	eddf aaad 	vldr	s21, [pc, #692]	; 80037e8 <audioTickL+0x354>
 8003536:	613a      	str	r2, [r7, #16]
 8003538:	4aac      	ldr	r2, [pc, #688]	; (80037ec <audioTickL+0x358>)
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
 800353c:	61fa      	str	r2, [r7, #28]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	ecb3 8a01 	vldmia	r3!, {s16}
 8003546:	61bb      	str	r3, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003548:	4ba9      	ldr	r3, [pc, #676]	; (80037f0 <audioTickL+0x35c>)
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	4ba9      	ldr	r3, [pc, #676]	; (80037f4 <audioTickL+0x360>)
 8003550:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003554:	4ba8      	ldr	r3, [pc, #672]	; (80037f8 <audioTickL+0x364>)
 8003556:	4413      	add	r3, r2
 8003558:	edd3 6a00 	vldr	s13, [r3]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003562:	ee78 7a67 	vsub.f32	s15, s16, s15
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003566:	eca3 8a01 	vstmia	r3!, {s16}
		if (note[v] < 0.0f)
 800356a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 800356e:	617b      	str	r3, [r7, #20]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003570:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (note[v] < 0.0f)
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003578:	edcb 7a1a 	vstr	s15, [fp, #104]	; 0x68
		if (note[v] < 0.0f)
 800357c:	d503      	bpl.n	8003586 <audioTickL+0xf2>
			note[v] = 0.0f;
 800357e:	eeb0 8a49 	vmov.f32	s16, s18
 8003582:	ed03 9a01 	vstr	s18, [r3, #-4]
	interruptChecker = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	4a9c      	ldr	r2, [pc, #624]	; (80037fc <audioTickL+0x368>)
 800358a:	f1ab 0520 	sub.w	r5, fp, #32
 800358e:	7013      	strb	r3, [r2, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8003590:	4b88      	ldr	r3, [pc, #544]	; (80037b4 <audioTickL+0x320>)
 8003592:	462e      	mov	r6, r5
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	685c      	ldr	r4, [r3, #4]
	for (int v = 0; v < NUM_ENV; v++)
 8003598:	4b99      	ldr	r3, [pc, #612]	; (8003800 <audioTickL+0x36c>)
 800359a:	eb03 0802 	add.w	r8, r3, r2
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 800359e:	4640      	mov	r0, r8
	for (int v = 0; v < NUM_ENV; v++)
 80035a0:	3608      	adds	r6, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 80035a2:	f011 f9a5 	bl	80148f0 <tADSRT_tickNoInterp>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
 80035a6:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
 80035aa:	455e      	cmp	r6, fp
 80035ac:	f108 0808 	add.w	r8, r8, #8
 80035b0:	d1f5      	bne.n	800359e <audioTickL+0x10a>
	timeEnv = DWT->CYCCNT - tempCount1;
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <audioTickL+0x320>)
 80035b4:	4e93      	ldr	r6, [pc, #588]	; (8003804 <audioTickL+0x370>)
 80035b6:	6853      	ldr	r3, [r2, #4]
 80035b8:	1b1c      	subs	r4, r3, r4
 80035ba:	4b93      	ldr	r3, [pc, #588]	; (8003808 <audioTickL+0x374>)
 80035bc:	601c      	str	r4, [r3, #0]
	interruptChecker = 0;
 80035be:	2400      	movs	r4, #0
 80035c0:	4b8e      	ldr	r3, [pc, #568]	; (80037fc <audioTickL+0x368>)
 80035c2:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 80035c4:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
 80035c8:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
 80035cc:	4621      	mov	r1, r4
 80035ce:	4652      	mov	r2, sl
 80035d0:	f107 0028 	add.w	r0, r7, #40	; 0x28
		float sample = 0.0f;
 80035d4:	ed87 9a0a 	vstr	s18, [r7, #40]	; 0x28
		if (lfoOn[i])
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8165 	beq.w	80038a8 <audioTickL+0x414>
			lfoShapeTick[i](&sample,i, string);
 80035de:	4b8b      	ldr	r3, [pc, #556]	; (800380c <audioTickL+0x378>)
	for (int i = 0; i < NUM_LFOS; i++)
 80035e0:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
 80035e2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
 80035e6:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
 80035e8:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 80035ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
	for (int i = 0; i < NUM_LFOS; i++)
 80035ec:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 80035ee:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
 80035f2:	d1e9      	bne.n	80035c8 <audioTickL+0x134>
	timeLFO = DWT->CYCCNT - tempCount1;
 80035f4:	4b6f      	ldr	r3, [pc, #444]	; (80037b4 <audioTickL+0x320>)
		oscillator_tick(note[v], v);
 80035f6:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
 80035fa:	4a85      	ldr	r2, [pc, #532]	; (8003810 <audioTickL+0x37c>)
		oscillator_tick(note[v], v);
 80035fc:	4650      	mov	r0, sl
	timeLFO = DWT->CYCCNT - tempCount1;
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	eba3 0308 	sub.w	r3, r3, r8
 8003604:	6013      	str	r3, [r2, #0]
		oscillator_tick(note[v], v);
 8003606:	f7fd fd0b 	bl	8001020 <oscillator_tick>
		noise_tick(v);
 800360a:	4650      	mov	r0, sl
 800360c:	f7ff fedc 	bl	80033c8 <noise_tick>
		for (int i = 0; i < oscToTick; i++)
 8003610:	4b80      	ldr	r3, [pc, #512]	; (8003814 <audioTickL+0x380>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 81ac 	beq.w	8003972 <audioTickL+0x4de>
			filterSamps[0] += oscOuts[0][i][v];
 800361a:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
 800361c:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
 800361e:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
 8003622:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
 8003626:	d011      	beq.n	800364c <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
 8003628:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
 800362c:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
 800362e:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
 8003632:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8003636:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
 800363a:	d007      	beq.n	800364c <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
 800363c:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
 8003640:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
 8003644:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8003648:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
 800364c:	693b      	ldr	r3, [r7, #16]
		sample = filter_tick(&filterSamps[0], note[v], v);
 800364e:	eeb0 0a48 	vmov.f32	s0, s16
 8003652:	4651      	mov	r1, sl
 8003654:	f107 0028 	add.w	r0, r7, #40	; 0x28
		filterSamps[0] += noiseOuts[0][v];
 8003658:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
 800365c:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
 8003660:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003664:	613b      	str	r3, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
 8003666:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
 800366a:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
		filterSamps[1] += noiseOuts[1][v];
 800366e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		sample = filter_tick(&filterSamps[0], note[v], v);
 8003672:	f7fd ff21 	bl	80014b8 <filter_tick>
		if (fxPre)
 8003676:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		sample = filter_tick(&filterSamps[0], note[v], v);
 800367a:	eeb0 8a40 	vmov.f32	s16, s0
		if (fxPre)
 800367e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	dd04      	ble.n	8003692 <audioTickL+0x1fe>
			sample *= amplitude[v];
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
 8003692:	4b61      	ldr	r3, [pc, #388]	; (8003818 <audioTickL+0x384>)
 8003694:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCount1 = DWT->CYCCNT;
 8003696:	4b47      	ldr	r3, [pc, #284]	; (80037b4 <audioTickL+0x320>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	60fb      	str	r3, [r7, #12]
		if (overSampled)
 800369c:	2c00      	cmp	r4, #0
 800369e:	f040 810b 	bne.w	80038b8 <audioTickL+0x424>
			for (int i = 0; i < numEffectToTick; i++)
 80036a2:	4b5e      	ldr	r3, [pc, #376]	; (800381c <audioTickL+0x388>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b32b      	cbz	r3, 80036f4 <audioTickL+0x260>
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 80036a8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 80036ac:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800383c <audioTickL+0x3a8>
			for (int i = 0; i < numEffectToTick; i++)
 80036b0:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
 80036b4:	4e5a      	ldr	r6, [pc, #360]	; (8003820 <audioTickL+0x38c>)
 80036b6:	4d5b      	ldr	r5, [pc, #364]	; (8003824 <audioTickL+0x390>)
				sample = effectTick[i](sample, i, v); //run the effect
 80036b8:	eeb0 0a48 	vmov.f32	s0, s16
 80036bc:	4620      	mov	r0, r4
 80036be:	f859 3b04 	ldr.w	r3, [r9], #4
 80036c2:	4651      	mov	r1, sl
 80036c4:	4798      	blx	r3
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 80036c6:	eb06 0308 	add.w	r3, r6, r8
			for (int i = 0; i < numEffectToTick; i++)
 80036ca:	3401      	adds	r4, #1
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 80036cc:	ed93 7a00 	vldr	s14, [r3]
				sample *= fxPostGain[i][v];
 80036d0:	eb05 0308 	add.w	r3, r5, r8
			for (int i = 0; i < numEffectToTick; i++)
 80036d4:	f108 0808 	add.w	r8, r8, #8
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 80036d8:	ee67 7a00 	vmul.f32	s15, s14, s0
 80036dc:	ee3b 7ac7 	vsub.f32	s14, s23, s14
 80036e0:	eee7 7a08 	vfma.f32	s15, s14, s16
				sample *= fxPostGain[i][v];
 80036e4:	ed93 8a00 	vldr	s16, [r3]
			for (int i = 0; i < numEffectToTick; i++)
 80036e8:	4b4c      	ldr	r3, [pc, #304]	; (800381c <audioTickL+0x388>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	42a3      	cmp	r3, r4
				sample *= fxPostGain[i][v];
 80036ee:	ee27 8a88 	vmul.f32	s16, s15, s16
			for (int i = 0; i < numEffectToTick; i++)
 80036f2:	dce1      	bgt.n	80036b8 <audioTickL+0x224>
		if (!fxPre)
 80036f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		uint32_t tempCount2 = DWT->CYCCNT;
 80036f8:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <audioTickL+0x320>)
		oversampleCount = tempCount2-tempCount1;
 80036fa:	68fa      	ldr	r2, [r7, #12]
		uint32_t tempCount2 = DWT->CYCCNT;
 80036fc:	685b      	ldr	r3, [r3, #4]
		if (!fxPre)
 80036fe:	eef4 9ae7 	vcmpe.f32	s19, s15
		oversampleCount = tempCount2-tempCount1;
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	4a48      	ldr	r2, [pc, #288]	; (8003828 <audioTickL+0x394>)
		if (!fxPre)
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		oversampleCount = tempCount2-tempCount1;
 800370a:	6013      	str	r3, [r2, #0]
		if (!fxPre)
 800370c:	d804      	bhi.n	8003718 <audioTickL+0x284>
			sample *= amplitude[v];
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
 8003718:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
 800371a:	eeb0 0a48 	vmov.f32	s0, s16
 800371e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	for (int v = 0; v < numStringsThisBoard; v++)
 8003720:	f10a 0a01 	add.w	sl, sl, #1
 8003724:	3304      	adds	r3, #4
 8003726:	f10b 0b04 	add.w	fp, fp, #4
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3304      	adds	r3, #4
 8003730:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
 8003732:	4b3e      	ldr	r3, [pc, #248]	; (800382c <audioTickL+0x398>)
 8003734:	1918      	adds	r0, r3, r4
 8003736:	f011 fbcf 	bl	8014ed8 <tSVF_tick>
		masterSample += sample;
 800373a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 800373e:	eeb0 1a6a 	vmov.f32	s2, s21
 8003742:	eef0 0a4b 	vmov.f32	s1, s22
		masterSample += sample;
 8003746:	eee0 8a27 	vfma.f32	s17, s0, s15
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 800374a:	eeb0 0a4a 	vmov.f32	s0, s20
 800374e:	f012 ffb5 	bl	80166bc <LEAF_clip>
 8003752:	eef0 7a40 	vmov.f32	s15, s0
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8003756:	4936      	ldr	r1, [pc, #216]	; (8003830 <audioTickL+0x39c>)
		float omAlpha = 1.0f - alpha;
 8003758:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 800375c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		int volIdxInt = (int) volIdx;
 8003760:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float omAlpha = 1.0f - alpha;
 8003764:	ee31 7a67 	vsub.f32	s14, s2, s15
		int volIdxInt = (int) volIdx;
 8003768:	ee16 2a90 	vmov	r2, s13
		float alpha = volIdx-volIdxInt;
 800376c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
 8003770:	1c53      	adds	r3, r2, #1
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8003772:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		float alpha = volIdx-volIdxInt;
 8003776:	ee77 7ae6 	vsub.f32	s15, s15, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
 800377a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		float omAlpha = 1.0f - alpha;
 800377e:	ee37 7a26 	vadd.f32	s14, s14, s13
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8003782:	edd2 6a00 	vldr	s13, [r2]
 8003786:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800378a:	edd3 0a00 	vldr	s1, [r3]
		masterSample *= finalMaster[v] ;
 800378e:	4b29      	ldr	r3, [pc, #164]	; (8003834 <audioTickL+0x3a0>)
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8003790:	ee67 7aa0 	vmul.f32	s15, s15, s1
		masterSample *= finalMaster[v] ;
 8003794:	4423      	add	r3, r4
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8003796:	eee6 7a87 	vfma.f32	s15, s13, s14
		masterSample *= finalMaster[v] ;
 800379a:	edd3 0a00 	vldr	s1, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
 800379e:	1d23      	adds	r3, r4, #4
 80037a0:	ee68 0aa0 	vmul.f32	s1, s17, s1
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 80037a6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80037aa:	f012 ff87 	bl	80166bc <LEAF_clip>
 80037ae:	e047      	b.n	8003840 <audioTickL+0x3ac>
 80037b0:	200046d4 	.word	0x200046d4
 80037b4:	e0001000 	.word	0xe0001000
 80037b8:	20016d64 	.word	0x20016d64
 80037bc:	20004700 	.word	0x20004700
 80037c0:	20004774 	.word	0x20004774
 80037c4:	20012f70 	.word	0x20012f70
 80037c8:	2001312c 	.word	0x2001312c
 80037cc:	20000052 	.word	0x20000052
 80037d0:	423c0000 	.word	0x423c0000
 80037d4:	42a00000 	.word	0x42a00000
 80037d8:	20013080 	.word	0x20013080
 80037dc:	00000000 	.word	0x00000000
 80037e0:	2000050c 	.word	0x2000050c
 80037e4:	20004a50 	.word	0x20004a50
 80037e8:	42fe0000 	.word	0x42fe0000
 80037ec:	20004a7c 	.word	0x20004a7c
 80037f0:	20015d58 	.word	0x20015d58
 80037f4:	20015d54 	.word	0x20015d54
 80037f8:	200130b8 	.word	0x200130b8
 80037fc:	2001539d 	.word	0x2001539d
 8003800:	200045fc 	.word	0x200045fc
 8003804:	200047f8 	.word	0x200047f8
 8003808:	200130dc 	.word	0x200130dc
 800380c:	2000485c 	.word	0x2000485c
 8003810:	200130e8 	.word	0x200130e8
 8003814:	20000068 	.word	0x20000068
 8003818:	20000069 	.word	0x20000069
 800381c:	20000050 	.word	0x20000050
 8003820:	20004684 	.word	0x20004684
 8003824:	200046a4 	.word	0x200046a4
 8003828:	20004aac 	.word	0x20004aac
 800382c:	2000464c 	.word	0x2000464c
 8003830:	20000070 	.word	0x20000070
 8003834:	20004654 	.word	0x20004654
 8003838:	20012f90 	.word	0x20012f90
 800383c:	200045ec 	.word	0x200045ec
	for (int v = 0; v < numStringsThisBoard; v++)
 8003840:	4b51      	ldr	r3, [pc, #324]	; (8003988 <audioTickL+0x4f4>)
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8003842:	eef0 8a40 	vmov.f32	s17, s0
	for (int v = 0; v < numStringsThisBoard; v++)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	4553      	cmp	r3, sl
 800384a:	f73f ae78 	bgt.w	800353e <audioTickL+0xaa>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 800384e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003852:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003856:	eef0 0a68 	vmov.f32	s1, s17
 800385a:	f012 ff2f 	bl	80166bc <LEAF_clip>
	uint32_t tempCount6 = DWT->CYCCNT;
 800385e:	4b4b      	ldr	r3, [pc, #300]	; (800398c <audioTickL+0x4f8>)
	timeTick = tempCount6-tempCount5;
 8003860:	68b8      	ldr	r0, [r7, #8]
	if ((timeTick > 10000) && (!interrupted))
 8003862:	f242 7210 	movw	r2, #10000	; 0x2710
	uint32_t tempCount6 = DWT->CYCCNT;
 8003866:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
 8003868:	4949      	ldr	r1, [pc, #292]	; (8003990 <audioTickL+0x4fc>)
 800386a:	1a1b      	subs	r3, r3, r0
	if ((timeTick > 10000) && (!interrupted))
 800386c:	4293      	cmp	r3, r2
	timeTick = tempCount6-tempCount5;
 800386e:	600b      	str	r3, [r1, #0]
	if ((timeTick > 10000) && (!interrupted))
 8003870:	d90b      	bls.n	800388a <audioTickL+0x3f6>
 8003872:	4b48      	ldr	r3, [pc, #288]	; (8003994 <audioTickL+0x500>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b943      	cbnz	r3, 800388a <audioTickL+0x3f6>
		if (overSampled)
 8003878:	4a47      	ldr	r2, [pc, #284]	; (8003998 <audioTickL+0x504>)
 800387a:	7811      	ldrb	r1, [r2, #0]
 800387c:	b921      	cbnz	r1, 8003888 <audioTickL+0x3f4>
		else if (oscToTick > 1)
 800387e:	4a47      	ldr	r2, [pc, #284]	; (800399c <audioTickL+0x508>)
 8003880:	7813      	ldrb	r3, [r2, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d901      	bls.n	800388a <audioTickL+0x3f6>
			oscToTick--;
 8003886:	3b01      	subs	r3, #1
 8003888:	7013      	strb	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
 800388a:	4b45      	ldr	r3, [pc, #276]	; (80039a0 <audioTickL+0x50c>)
}
 800388c:	3734      	adds	r7, #52	; 0x34
	return masterSample * audioMasterLevel * 0.98f;
 800388e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80039a4 <audioTickL+0x510>
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800389a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800389e:	46bd      	mov	sp, r7
 80038a0:	ecbd 8b0a 	vpop	{d8-d12}
 80038a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < NUM_LFOS; i++)
 80038a8:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 80038aa:	ed85 9a30 	vstr	s18, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
 80038ae:	3508      	adds	r5, #8
 80038b0:	2c04      	cmp	r4, #4
 80038b2:	f47f ae89 	bne.w	80035c8 <audioTickL+0x134>
 80038b6:	e69d      	b.n	80035f4 <audioTickL+0x160>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
 80038b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ba:	eeb0 0a48 	vmov.f32	s0, s16
 80038be:	4b3a      	ldr	r3, [pc, #232]	; (80039a8 <audioTickL+0x514>)
 80038c0:	493a      	ldr	r1, [pc, #232]	; (80039ac <audioTickL+0x518>)
 80038c2:	4413      	add	r3, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	ee0c 3a10 	vmov	s24, r3
 80038ca:	f010 fba5 	bl	8014018 <tOversampler_upsample>
			for (int i = 0; i < numEffectToTick; i++)
 80038ce:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <audioTickL+0x51c>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d055      	beq.n	8003982 <audioTickL+0x4ee>
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 80038d8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 80038dc:	4e35      	ldr	r6, [pc, #212]	; (80039b4 <audioTickL+0x520>)
			for (int i = 0; i < numEffectToTick; i++)
 80038de:	f04f 0800 	mov.w	r8, #0
 80038e2:	4d35      	ldr	r5, [pc, #212]	; (80039b8 <audioTickL+0x524>)
 80038e4:	eb06 0903 	add.w	r9, r6, r3
 80038e8:	4e34      	ldr	r6, [pc, #208]	; (80039bc <audioTickL+0x528>)
 80038ea:	441d      	add	r5, r3
 80038ec:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <audioTickL+0x518>)
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	4c2e      	ldr	r4, [pc, #184]	; (80039ac <audioTickL+0x518>)
					float dry = oversamplerArray[j]; //store the dry value to mix later
 80038f2:	ed94 8a00 	vldr	s16, [r4]
					oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
 80038f6:	4651      	mov	r1, sl
 80038f8:	6833      	ldr	r3, [r6, #0]
 80038fa:	4640      	mov	r0, r8
 80038fc:	eeb0 0a48 	vmov.f32	s0, s16
 8003900:	4798      	blx	r3
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8003902:	ed99 7a00 	vldr	s14, [r9]
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8003906:	edd5 6a00 	vldr	s13, [r5]
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 800390a:	ee60 7a07 	vmul.f32	s15, s0, s14
				for (int j = 0; j < OVERSAMPLE; j++)
 800390e:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <audioTickL+0x52c>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8003910:	ee3b 7ac7 	vsub.f32	s14, s23, s14
 8003914:	eee7 7a08 	vfma.f32	s15, s14, s16
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8003918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800391c:	ece4 7a01 	vstmia	r4!, {s15}
				for (int j = 0; j < OVERSAMPLE; j++)
 8003920:	42a3      	cmp	r3, r4
 8003922:	d1e6      	bne.n	80038f2 <audioTickL+0x45e>
			for (int i = 0; i < numEffectToTick; i++)
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <audioTickL+0x51c>)
 8003926:	f108 0801 	add.w	r8, r8, #1
 800392a:	3604      	adds	r6, #4
 800392c:	f109 0908 	add.w	r9, r9, #8
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	3508      	adds	r5, #8
 8003934:	4543      	cmp	r3, r8
 8003936:	dcdb      	bgt.n	80038f0 <audioTickL+0x45c>
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8003938:	687c      	ldr	r4, [r7, #4]
 800393a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800393e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003942:	edd4 0a00 	vldr	s1, [r4]
 8003946:	f012 feb9 	bl	80166bc <LEAF_clip>
 800394a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800394e:	edd4 0a01 	vldr	s1, [r4, #4]
 8003952:	ed84 0a00 	vstr	s0, [r4]
 8003956:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800395a:	f012 feaf 	bl	80166bc <LEAF_clip>
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 800395e:	ee1c 0a10 	vmov	r0, s24
 8003962:	4912      	ldr	r1, [pc, #72]	; (80039ac <audioTickL+0x518>)
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8003964:	ed84 0a01 	vstr	s0, [r4, #4]
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8003968:	f010 fbbe 	bl	80140e8 <tOversampler_downsample>
 800396c:	eeb0 8a40 	vmov.f32	s16, s0
 8003970:	e6c0      	b.n	80036f4 <audioTickL+0x260>
		for (int i = 0; i < oscToTick; i++)
 8003972:	eddf 7a14 	vldr	s15, [pc, #80]	; 80039c4 <audioTickL+0x530>
 8003976:	eeb0 6a67 	vmov.f32	s12, s15
 800397a:	e667      	b.n	800364c <audioTickL+0x1b8>
	float masterSample = 0.0f;
 800397c:	eddf 8a11 	vldr	s17, [pc, #68]	; 80039c4 <audioTickL+0x530>
 8003980:	e765      	b.n	800384e <audioTickL+0x3ba>
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <audioTickL+0x518>)
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	e7d7      	b.n	8003938 <audioTickL+0x4a4>
 8003988:	20000052 	.word	0x20000052
 800398c:	e0001000 	.word	0xe0001000
 8003990:	200130f8 	.word	0x200130f8
 8003994:	200046d4 	.word	0x200046d4
 8003998:	20000069 	.word	0x20000069
 800399c:	20000068 	.word	0x20000068
 80039a0:	20000278 	.word	0x20000278
 80039a4:	3f7ae148 	.word	0x3f7ae148
 80039a8:	20004a74 	.word	0x20004a74
 80039ac:	20004ab0 	.word	0x20004ab0
 80039b0:	20000050 	.word	0x20000050
 80039b4:	20004684 	.word	0x20004684
 80039b8:	200046a4 	.word	0x200046a4
 80039bc:	200045ec 	.word	0x200045ec
 80039c0:	20004ab8 	.word	0x20004ab8
 80039c4:	00000000 	.word	0x00000000

080039c8 <audioFrame>:
{
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
 80039cc:	49b8      	ldr	r1, [pc, #736]	; (8003cb0 <audioFrame+0x2e8>)
	if (newBar)
 80039ce:	f8df a350 	ldr.w	sl, [pc, #848]	; 8003d20 <audioFrame+0x358>
{
 80039d2:	ed2d 8b06 	vpush	{d8-d10}
 80039d6:	b08b      	sub	sp, #44	; 0x2c
	if (newBar)
 80039d8:	f8da 2000 	ldr.w	r2, [sl]
{
 80039dc:	9004      	str	r0, [sp, #16]
	uint32_t tempCountFrame = DWT->CYCCNT;
 80039de:	684b      	ldr	r3, [r1, #4]
 80039e0:	9303      	str	r3, [sp, #12]
	if (newBar)
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	f000 8096 	beq.w	8003b14 <audioFrame+0x14c>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 80039e8:	4ab2      	ldr	r2, [pc, #712]	; (8003cb4 <audioFrame+0x2ec>)
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 80039ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80039ee:	49b2      	ldr	r1, [pc, #712]	; (8003cb8 <audioFrame+0x2f0>)
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 80039f0:	ed92 7a03 	vldr	s14, [r2, #12]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80039f4:	ed92 6a02 	vldr	s12, [r2, #8]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 80039f8:	edd2 6a01 	vldr	s13, [r2, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80039fc:	edd2 7a04 	vldr	s15, [r2, #16]
 8003a00:	ee77 2a46 	vsub.f32	s5, s14, s12
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8003a04:	edd2 5a00 	vldr	s11, [r2]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003a08:	ee36 3a66 	vsub.f32	s6, s12, s13
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8003a0c:	680a      	ldr	r2, [r1, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003a0e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8003a12:	ee36 4ae5 	vsub.f32	s8, s13, s11
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8003a16:	4282      	cmp	r2, r0
 8003a18:	d00c      	beq.n	8003a34 <audioFrame+0x6c>
 8003a1a:	ee07 2a90 	vmov	s15, r2
 8003a1e:	4aa7      	ldr	r2, [pc, #668]	; (8003cbc <audioFrame+0x2f4>)
 8003a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a24:	edd2 4a00 	vldr	s9, [r2]
 8003a28:	eef4 4ae7 	vcmpe.f32	s9, s15
 8003a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a30:	f140 8186 	bpl.w	8003d40 <audioFrame+0x378>
				stringMappedPositions[j] = 1.0f;
 8003a34:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8003d24 <audioFrame+0x35c>
 8003a38:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a3c:	f8cb 2000 	str.w	r2, [fp]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8003a40:	684a      	ldr	r2, [r1, #4]
 8003a42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a46:	428a      	cmp	r2, r1
 8003a48:	d00c      	beq.n	8003a64 <audioFrame+0x9c>
 8003a4a:	ee07 2a90 	vmov	s15, r2
 8003a4e:	4a9b      	ldr	r2, [pc, #620]	; (8003cbc <audioFrame+0x2f4>)
 8003a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a54:	edd2 4a01 	vldr	s9, [r2, #4]
 8003a58:	eef4 7ae4 	vcmpe.f32	s15, s9
 8003a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a60:	f340 8105 	ble.w	8003c6e <audioFrame+0x2a6>
				stringMappedPositions[j] = 1.0f;
 8003a64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a68:	f8cb 2004 	str.w	r2, [fp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003a6c:	4b94      	ldr	r3, [pc, #592]	; (8003cc0 <audioFrame+0x2f8>)
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	9302      	str	r3, [sp, #8]
 8003a72:	2a00      	cmp	r2, #0
 8003a74:	d04b      	beq.n	8003b0e <audioFrame+0x146>
 8003a76:	4f93      	ldr	r7, [pc, #588]	; (8003cc4 <audioFrame+0x2fc>)
 8003a78:	2400      	movs	r4, #0
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 8003a7a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 8003a7e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8003cc8 <audioFrame+0x300>
 8003a82:	463b      	mov	r3, r7
 8003a84:	4e91      	ldr	r6, [pc, #580]	; (8003ccc <audioFrame+0x304>)
 8003a86:	4627      	mov	r7, r4
 8003a88:	4d91      	ldr	r5, [pc, #580]	; (8003cd0 <audioFrame+0x308>)
 8003a8a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8003d28 <audioFrame+0x360>
 8003a8e:	461c      	mov	r4, r3
 8003a90:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8003d2c <audioFrame+0x364>
			if (dualSlider)
 8003a94:	f8d9 3000 	ldr.w	r3, [r9]
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 8003a98:	ed9b 0a00 	vldr	s0, [fp]
			if (dualSlider)
 8003a9c:	b1c3      	cbz	r3, 8003ad0 <audioFrame+0x108>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 8003a9e:	eeb4 0a48 	vcmp.f32	s0, s16
 8003aa2:	eddb 0a01 	vldr	s1, [fp, #4]
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	f040 80cf 	bne.w	8003c4c <audioFrame+0x284>
 8003aae:	eef4 0ac8 	vcmpe.f32	s1, s16
 8003ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab6:	f100 8160 	bmi.w	8003d7a <audioFrame+0x3b2>
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 8003aba:	4b86      	ldr	r3, [pc, #536]	; (8003cd4 <audioFrame+0x30c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	443b      	add	r3, r7
 8003ac0:	ee07 3a90 	vmov	s15, r3
 8003ac4:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8003ac8:	ee21 1a28 	vmul.f32	s2, s2, s17
 8003acc:	f012 ff02 	bl	80168d4 <LEAF_interpolation_linear>
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 8003ad0:	4620      	mov	r0, r4
		for (int i = 0; i < numStringsThisBoard; i++)
 8003ad2:	3701      	adds	r7, #1
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 8003ad4:	f011 f864 	bl	8014ba0 <tSlide_tick>
			invMapping[i] = (1.0f / myMappedPos);
 8003ad8:	ee88 7a00 	vdiv.f32	s14, s16, s0
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8003adc:	edd8 6a00 	vldr	s13, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003ae0:	3404      	adds	r4, #4
 8003ae2:	9b02      	ldr	r3, [sp, #8]
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 8003ae4:	497c      	ldr	r1, [pc, #496]	; (8003cd8 <audioFrame+0x310>)
		for (int i = 0; i < numStringsThisBoard; i++)
 8003ae6:	781a      	ldrb	r2, [r3, #0]
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8003ae8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		for (int i = 0; i < numStringsThisBoard; i++)
 8003aec:	42ba      	cmp	r2, r7
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8003aee:	ee37 6a48 	vsub.f32	s12, s14, s16
			invMapping[i] = (1.0f / myMappedPos);
 8003af2:	eca6 7a01 	vstmia	r6!, {s14}
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8003af6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003afe:	ee17 3a90 	vmov	r3, s15
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 8003b02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f845 3b04 	str.w	r3, [r5], #4
		for (int i = 0; i < numStringsThisBoard; i++)
 8003b0c:	dcc2      	bgt.n	8003a94 <audioFrame+0xcc>
		newBar = 0;
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8ca 2000 	str.w	r2, [sl]
	if (newPluck)
 8003b14:	f8df b218 	ldr.w	fp, [pc, #536]	; 8003d30 <audioFrame+0x368>
 8003b18:	f8db 3000 	ldr.w	r3, [fp]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d037      	beq.n	8003b90 <audioFrame+0x1c8>
		for (int i = 0; i < numStringsThisBoard; i++)
 8003b20:	4b67      	ldr	r3, [pc, #412]	; (8003cc0 <audioFrame+0x2f8>)
 8003b22:	9302      	str	r3, [sp, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	b383      	cbz	r3, 8003b8a <audioFrame+0x1c2>
 8003b28:	4a6c      	ldr	r2, [pc, #432]	; (8003cdc <audioFrame+0x314>)
 8003b2a:	2400      	movs	r4, #0
 8003b2c:	4e6c      	ldr	r6, [pc, #432]	; (8003ce0 <audioFrame+0x318>)
 8003b2e:	9201      	str	r2, [sp, #4]
					tLivingString2_setTargetLev(&strings[i], 0.0f);
 8003b30:	eddf 8a6c 	vldr	s17, [pc, #432]	; 8003ce4 <audioFrame+0x31c>
				if (currentActivePreset == 63)
 8003b34:	4637      	mov	r7, r6
 8003b36:	4a6c      	ldr	r2, [pc, #432]	; (8003ce8 <audioFrame+0x320>)
					tLivingString2_setDecay(&strings[i], 0.2f);
 8003b38:	ed9f aa6c 	vldr	s20, [pc, #432]	; 8003cec <audioFrame+0x324>
				float amplitz = stringInputs[i] * 0.000025f;
 8003b3c:	ed9f 9a6c 	vldr	s18, [pc, #432]	; 8003cf0 <audioFrame+0x328>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
 8003b40:	eddf aa6c 	vldr	s21, [pc, #432]	; 8003cf4 <audioFrame+0x32c>
 8003b44:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 8003d34 <audioFrame+0x36c>
 8003b48:	4d6b      	ldr	r5, [pc, #428]	; (8003cf8 <audioFrame+0x330>)
 8003b4a:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8003d38 <audioFrame+0x370>
 8003b4e:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8003d3c <audioFrame+0x374>
 8003b52:	9200      	str	r2, [sp, #0]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 8003b54:	f85a 2b04 	ldr.w	r2, [sl], #4
 8003b58:	2a00      	cmp	r2, #0
 8003b5a:	9205      	str	r2, [sp, #20]
 8003b5c:	682e      	ldr	r6, [r5, #0]
 8003b5e:	d152      	bne.n	8003c06 <audioFrame+0x23e>
 8003b60:	2e00      	cmp	r6, #0
 8003b62:	f040 8171 	bne.w	8003e48 <audioFrame+0x480>
		for (int i = 0; i < numStringsThisBoard; i++)
 8003b66:	9a01      	ldr	r2, [sp, #4]
 8003b68:	3401      	adds	r4, #1
 8003b6a:	3704      	adds	r7, #4
 8003b6c:	3504      	adds	r5, #4
 8003b6e:	3201      	adds	r2, #1
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	f108 0804 	add.w	r8, r8, #4
 8003b76:	f109 0904 	add.w	r9, r9, #4
 8003b7a:	9201      	str	r2, [sp, #4]
 8003b7c:	9a00      	ldr	r2, [sp, #0]
			previousStringInputs[i] = stringInputs[i];
 8003b7e:	f84a 6c04 	str.w	r6, [sl, #-4]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003b82:	f102 0204 	add.w	r2, r2, #4
 8003b86:	9200      	str	r2, [sp, #0]
 8003b88:	dce4      	bgt.n	8003b54 <audioFrame+0x18c>
		newPluck = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8cb 3000 	str.w	r3, [fp]
	if ((codecReady)&&(presetReady))
 8003b90:	4b5a      	ldr	r3, [pc, #360]	; (8003cfc <audioFrame+0x334>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b303      	cbz	r3, 8003bd8 <audioFrame+0x210>
 8003b96:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <audioFrame+0x338>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b1eb      	cbz	r3, 8003bd8 <audioFrame+0x210>
		if (currentActivePreset == 63)
 8003b9c:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <audioFrame+0x33c>)
 8003b9e:	4c5a      	ldr	r4, [pc, #360]	; (8003d08 <audioFrame+0x340>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 8003ba2:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8003d0c <audioFrame+0x344>
 8003ba6:	f104 0540 	add.w	r5, r4, #64	; 0x40
		if (currentActivePreset == 63)
 8003baa:	2b3f      	cmp	r3, #63	; 0x3f
 8003bac:	f000 80ea 	beq.w	8003d84 <audioFrame+0x3bc>
		else if (currentActivePreset == 62)
 8003bb0:	2b3e      	cmp	r3, #62	; 0x3e
 8003bb2:	9b04      	ldr	r3, [sp, #16]
 8003bb4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003bb8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8003bbc:	d06a      	beq.n	8003c94 <audioFrame+0x2cc>
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 8003bbe:	f7ff fc69 	bl	8003494 <audioTickL>
 8003bc2:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003bc6:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 8003bc8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003bcc:	42a5      	cmp	r5, r4
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 8003bce:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 8003bd2:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003bd6:	d1f2      	bne.n	8003bbe <audioFrame+0x1f6>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8003bd8:	484d      	ldr	r0, [pc, #308]	; (8003d10 <audioFrame+0x348>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
 8003bda:	4b35      	ldr	r3, [pc, #212]	; (8003cb0 <audioFrame+0x2e8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8003bdc:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	9803      	ldr	r0, [sp, #12]
 8003be4:	494b      	ldr	r1, [pc, #300]	; (8003d14 <audioFrame+0x34c>)
 8003be6:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8003be8:	4a4b      	ldr	r2, [pc, #300]	; (8003d18 <audioFrame+0x350>)
 8003bea:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
 8003bee:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8003bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bf8:	edc2 7a00 	vstr	s15, [r2]
}
 8003bfc:	b00b      	add	sp, #44	; 0x2c
 8003bfe:	ecbd 8b06 	vpop	{d8-d10}
 8003c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 8003c06:	ddae      	ble.n	8003b66 <audioFrame+0x19e>
 8003c08:	2e00      	cmp	r6, #0
 8003c0a:	d1ac      	bne.n	8003b66 <audioFrame+0x19e>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003c0c:	4632      	mov	r2, r6
 8003c0e:	2110      	movs	r1, #16
 8003c10:	4842      	ldr	r0, [pc, #264]	; (8003d1c <audioFrame+0x354>)
 8003c12:	f006 f9a9 	bl	8009f68 <HAL_GPIO_WritePin>
					tADSRT_off(&envs[v][i]);
 8003c16:	4640      	mov	r0, r8
 8003c18:	f010 fd0c 	bl	8014634 <tADSRT_off>
 8003c1c:	f108 0008 	add.w	r0, r8, #8
 8003c20:	f010 fd08 	bl	8014634 <tADSRT_off>
 8003c24:	f108 0010 	add.w	r0, r8, #16
 8003c28:	f010 fd04 	bl	8014634 <tADSRT_off>
 8003c2c:	f108 0018 	add.w	r0, r8, #24
 8003c30:	f010 fd00 	bl	8014634 <tADSRT_off>
				if (currentActivePreset == 63)
 8003c34:	4b33      	ldr	r3, [pc, #204]	; (8003d04 <audioFrame+0x33c>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b3f      	cmp	r3, #63	; 0x3f
 8003c3a:	f000 823c 	beq.w	80040b6 <audioFrame+0x6ee>
				else if (currentActivePreset == 62)
 8003c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8003c40:	f000 8225 	beq.w	800408e <audioFrame+0x6c6>
		for (int i = 0; i < numStringsThisBoard; i++)
 8003c44:	9b02      	ldr	r3, [sp, #8]
			previousStringInputs[i] = stringInputs[i];
 8003c46:	682e      	ldr	r6, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	e78c      	b.n	8003b66 <audioFrame+0x19e>
				else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
 8003c4c:	eef4 0a48 	vcmp.f32	s1, s16
 8003c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c54:	f47f af31 	bne.w	8003aba <audioFrame+0xf2>
 8003c58:	eeb4 0a48 	vcmp.f32	s0, s16
 8003c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c60:	f57f af2b 	bpl.w	8003aba <audioFrame+0xf2>
					stringMappedPositions[1] = stringMappedPositions[0];
 8003c64:	eef0 0a40 	vmov.f32	s1, s0
 8003c68:	ed8b 0a01 	vstr	s0, [fp, #4]
 8003c6c:	e725      	b.n	8003aba <audioFrame+0xf2>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 8003c6e:	edd2 3a03 	vldr	s7, [r2, #12]
 8003c72:	eef4 7ae3 	vcmpe.f32	s15, s7
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	f2c0 80be 	blt.w	8003dfa <audioFrame+0x432>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003c7e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003c82:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8003c86:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8003c8a:	eee7 5a04 	vfma.f32	s11, s14, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8003c8e:	edcb 5a01 	vstr	s11, [fp, #4]
 8003c92:	e6eb      	b.n	8003a6c <audioFrame+0xa4>
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
 8003c94:	f7fe fa1e 	bl	80020d4 <audioTickString2>
 8003c98:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003c9c:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
 8003c9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003ca2:	42a5      	cmp	r5, r4
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
 8003ca4:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 8003ca8:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003cac:	d1f2      	bne.n	8003c94 <audioFrame+0x2cc>
 8003cae:	e793      	b.n	8003bd8 <audioFrame+0x210>
 8003cb0:	e0001000 	.word	0xe0001000
 8003cb4:	20000034 	.word	0x20000034
 8003cb8:	200130c0 	.word	0x200130c0
 8003cbc:	2000000c 	.word	0x2000000c
 8003cc0:	20000052 	.word	0x20000052
 8003cc4:	2000467c 	.word	0x2000467c
 8003cc8:	3dcccccd 	.word	0x3dcccccd
 8003ccc:	200046f8 	.word	0x200046f8
 8003cd0:	20000524 	.word	0x20000524
 8003cd4:	2000465c 	.word	0x2000465c
 8003cd8:	24000000 	.word	0x24000000
 8003cdc:	200048e4 	.word	0x200048e4
 8003ce0:	200130d0 	.word	0x200130d0
 8003ce4:	00000000 	.word	0x00000000
 8003ce8:	20013000 	.word	0x20013000
 8003cec:	3e4ccccd 	.word	0x3e4ccccd
 8003cf0:	37d1b717 	.word	0x37d1b717
 8003cf4:	43fa0000 	.word	0x43fa0000
 8003cf8:	20013050 	.word	0x20013050
 8003cfc:	2000056c 	.word	0x2000056c
 8003d00:	20004b98 	.word	0x20004b98
 8003d04:	200131e4 	.word	0x200131e4
 8003d08:	30000000 	.word	0x30000000
 8003d0c:	4b000000 	.word	0x4b000000
 8003d10:	20000008 	.word	0x20000008
 8003d14:	200130e4 	.word	0x200130e4
 8003d18:	20004660 	.word	0x20004660
 8003d1c:	58020400 	.word	0x58020400
 8003d20:	20004a34 	.word	0x20004a34
 8003d24:	20013088 	.word	0x20013088
 8003d28:	200045e4 	.word	0x200045e4
 8003d2c:	2000004c 	.word	0x2000004c
 8003d30:	20004a3c 	.word	0x20004a3c
 8003d34:	20004ba8 	.word	0x20004ba8
 8003d38:	200045fc 	.word	0x200045fc
 8003d3c:	20016c14 	.word	0x20016c14
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 8003d40:	edd2 3a02 	vldr	s7, [r2, #8]
 8003d44:	eef4 3ae7 	vcmpe.f32	s7, s15
 8003d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4c:	d946      	bls.n	8003ddc <audioFrame+0x414>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 8003d4e:	ed92 2a04 	vldr	s4, [r2, #16]
 8003d52:	eeb4 2ae7 	vcmpe.f32	s4, s15
 8003d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5a:	d826      	bhi.n	8003daa <audioFrame+0x3e2>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003d5c:	ee77 7ae3 	vsub.f32	s15, s15, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8003d60:	f8df b3cc 	ldr.w	fp, [pc, #972]	; 8004130 <audioFrame+0x768>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003d64:	ee72 4a63 	vsub.f32	s9, s4, s7
 8003d68:	eec7 3aa4 	vdiv.f32	s7, s15, s9
 8003d6c:	eef0 7a66 	vmov.f32	s15, s13
 8003d70:	eee3 7a23 	vfma.f32	s15, s6, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8003d74:	edcb 7a00 	vstr	s15, [fp]
 8003d78:	e662      	b.n	8003a40 <audioFrame+0x78>
					stringMappedPositions[0] = stringMappedPositions[1];
 8003d7a:	eeb0 0a60 	vmov.f32	s0, s1
 8003d7e:	edcb 0a00 	vstr	s1, [fp]
 8003d82:	e69a      	b.n	8003aba <audioFrame+0xf2>
 8003d84:	9b04      	ldr	r3, [sp, #16]
 8003d86:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003d8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 8003d8e:	f7fe f88d 	bl	8001eac <audioTickString>
 8003d92:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003d96:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 8003d98:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003d9c:	42ac      	cmp	r4, r5
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 8003d9e:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 8003da2:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8003da6:	d1f2      	bne.n	8003d8e <audioFrame+0x3c6>
 8003da8:	e716      	b.n	8003bd8 <audioFrame+0x210>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
 8003daa:	edd2 4a06 	vldr	s9, [r2, #24]
 8003dae:	eef4 4ae7 	vcmpe.f32	s9, s15
 8003db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db6:	f240 8150 	bls.w	800405a <audioFrame+0x692>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003dba:	edd2 3a08 	vldr	s7, [r2, #32]
 8003dbe:	ee77 7ae4 	vsub.f32	s15, s15, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 8003dc2:	f8df b36c 	ldr.w	fp, [pc, #876]	; 8004130 <audioFrame+0x768>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003dc6:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8003dca:	eec7 3aa4 	vdiv.f32	s7, s15, s9
 8003dce:	eef0 7a47 	vmov.f32	s15, s14
 8003dd2:	eee5 7a23 	vfma.f32	s15, s10, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 8003dd6:	edcb 7a00 	vstr	s15, [fp]
 8003dda:	e631      	b.n	8003a40 <audioFrame+0x78>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003ddc:	ee77 7ae4 	vsub.f32	s15, s15, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8003de0:	f8df b34c 	ldr.w	fp, [pc, #844]	; 8004130 <audioFrame+0x768>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003de4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8003de8:	eec7 3aa4 	vdiv.f32	s7, s15, s9
 8003dec:	eef0 7a65 	vmov.f32	s15, s11
 8003df0:	eee4 7a23 	vfma.f32	s15, s8, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8003df4:	edcb 7a00 	vstr	s15, [fp]
 8003df8:	e622      	b.n	8003a40 <audioFrame+0x78>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 8003dfa:	edd2 5a05 	vldr	s11, [r2, #20]
 8003dfe:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e06:	db0a      	blt.n	8003e1e <audioFrame+0x456>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003e08:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8003e0c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8003e10:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8003e14:	eee3 6a07 	vfma.f32	s13, s6, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8003e18:	edcb 6a01 	vstr	s13, [fp, #4]
 8003e1c:	e626      	b.n	8003a6c <audioFrame+0xa4>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
 8003e1e:	edd2 6a07 	vldr	s13, [r2, #28]
 8003e22:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2a:	f280 8125 	bge.w	8004078 <audioFrame+0x6b0>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003e2e:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8003e32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003e36:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003e3a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8003e3e:	eea5 7a06 	vfma.f32	s14, s10, s12
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 8003e42:	ed8b 7a01 	vstr	s14, [fp, #4]
 8003e46:	e611      	b.n	8003a6c <audioFrame+0xa4>
				float amplitz = stringInputs[i] * 0.000025f;
 8003e48:	ee07 6a90 	vmov	s15, r6
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8003e4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e50:	eeb0 0a68 	vmov.f32	s0, s17
 8003e54:	f5a9 7613 	sub.w	r6, r9, #588	; 0x24c
				float amplitz = stringInputs[i] * 0.000025f;
 8003e58:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8003e5c:	ee60 0a89 	vmul.f32	s1, s1, s18
 8003e60:	f012 fc2c 	bl	80166bc <LEAF_clip>
				stringOctave[i] = octave;
 8003e64:	4ba6      	ldr	r3, [pc, #664]	; (8004100 <audioFrame+0x738>)
 8003e66:	4aa7      	ldr	r2, [pc, #668]	; (8004104 <audioFrame+0x73c>)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003e68:	2110      	movs	r1, #16
				stringOctave[i] = octave;
 8003e6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003e6e:	48a6      	ldr	r0, [pc, #664]	; (8004108 <audioFrame+0x740>)
				stringOctave[i] = octave;
 8003e70:	6812      	ldr	r2, [r2, #0]
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8003e72:	eeb0 8a40 	vmov.f32	s16, s0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003e76:	f8cd 801c 	str.w	r8, [sp, #28]
				stringOctave[i] = octave;
 8003e7a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003e7c:	00a3      	lsls	r3, r4, #2
 8003e7e:	2201      	movs	r2, #1
 8003e80:	9309      	str	r3, [sp, #36]	; 0x24
 8003e82:	f109 0354 	add.w	r3, r9, #84	; 0x54
 8003e86:	9306      	str	r3, [sp, #24]
 8003e88:	f006 f86e 	bl	8009f68 <HAL_GPIO_WritePin>
 8003e8c:	9b07      	ldr	r3, [sp, #28]
 8003e8e:	9408      	str	r4, [sp, #32]
 8003e90:	461c      	mov	r4, r3
					if (useVelocity == 0) envVel = 1.f;
 8003e92:	edd6 7a00 	vldr	s15, [r6]
				    tADSRT_on(&envs[v][i], envVel);
 8003e96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003e9a:	4620      	mov	r0, r4
				for (int v = 0; v < NUM_ENV; v++)
 8003e9c:	36a8      	adds	r6, #168	; 0xa8
					if (useVelocity == 0) envVel = 1.f;
 8003e9e:	eef5 7a40 	vcmp.f32	s15, #0.0
				for (int v = 0; v < NUM_ENV; v++)
 8003ea2:	3408      	adds	r4, #8
					if (useVelocity == 0) envVel = 1.f;
 8003ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				    tADSRT_on(&envs[v][i], envVel);
 8003ea8:	bf18      	it	ne
 8003eaa:	eeb0 0a48 	vmovne.f32	s0, s16
 8003eae:	f010 fbaf 	bl	8014610 <tADSRT_on>
				    voiceSounding = 1;
 8003eb2:	4b96      	ldr	r3, [pc, #600]	; (800410c <audioFrame+0x744>)
 8003eb4:	f04f 0201 	mov.w	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
 8003eba:	9b06      	ldr	r3, [sp, #24]
 8003ebc:	429e      	cmp	r6, r3
 8003ebe:	d1e8      	bne.n	8003e92 <audioFrame+0x4ca>
 8003ec0:	9c08      	ldr	r4, [sp, #32]
					if (noteOnSync > 0.5f)
 8003ec2:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_LFOS; v++)
 8003ec6:	f8cd a018 	str.w	sl, [sp, #24]
 8003eca:	2600      	movs	r6, #0
 8003ecc:	ebc4 7384 	rsb	r3, r4, r4, lsl #30
 8003ed0:	9507      	str	r5, [sp, #28]
 8003ed2:	46ca      	mov	sl, r9
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	f103 020c 	add.w	r2, r3, #12
 8003eda:	4615      	mov	r5, r2
					if (noteOnSync > 0.5f)
 8003edc:	edda 7a0e 	vldr	s15, [sl, #56]	; 0x38
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 8003ee0:	4630      	mov	r0, r6
 8003ee2:	4621      	mov	r1, r4
				for (int v = 0; v < NUM_LFOS; v++)
 8003ee4:	3601      	adds	r6, #1
					if (noteOnSync > 0.5f)
 8003ee6:	eef4 7ae9 	vcmpe.f32	s15, s19
 8003eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eee:	dd04      	ble.n	8003efa <audioFrame+0x532>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 8003ef0:	ed9a 0a00 	vldr	s0, [sl]
 8003ef4:	f85a 3005 	ldr.w	r3, [sl, r5]
 8003ef8:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
 8003efa:	2e04      	cmp	r6, #4
 8003efc:	f10a 0a8c 	add.w	sl, sl, #140	; 0x8c
 8003f00:	d1ec      	bne.n	8003edc <audioFrame+0x514>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8003f02:	4883      	ldr	r0, [pc, #524]	; (8004110 <audioFrame+0x748>)
 8003f04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
				if (currentActivePreset == 63)
 8003f08:	4b82      	ldr	r3, [pc, #520]	; (8004114 <audioFrame+0x74c>)
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8003f0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f0e:	4a82      	ldr	r2, [pc, #520]	; (8004118 <audioFrame+0x750>)
				if (currentActivePreset == 63)
 8003f10:	7819      	ldrb	r1, [r3, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8003f12:	7803      	ldrb	r3, [r0, #0]
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
 8003f14:	9e00      	ldr	r6, [sp, #0]
				if (currentActivePreset == 63)
 8003f16:	293f      	cmp	r1, #63	; 0x3f
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8003f18:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003f1c:	f103 0301 	add.w	r3, r3, #1
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
 8003f20:	ed86 8a00 	vstr	s16, [r6]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8003f24:	edd2 7a00 	vldr	s15, [r2]
 8003f28:	7003      	strb	r3, [r0, #0]
 8003f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f2e:	e9dd a506 	ldrd	sl, r5, [sp, #24]
 8003f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f36:	edc6 7a02 	vstr	s15, [r6, #8]
				if (currentActivePreset == 63)
 8003f3a:	f000 80c2 	beq.w	80040c2 <audioFrame+0x6fa>
				if (currentActivePreset == 62)
 8003f3e:	293e      	cmp	r1, #62	; 0x3e
 8003f40:	f47f ae80 	bne.w	8003c44 <audioFrame+0x27c>
					tADSRT_on(&fenvelopes[i], amplitz);
 8003f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f46:	eeb0 0a48 	vmov.f32	s0, s16
 8003f4a:	4874      	ldr	r0, [pc, #464]	; (800411c <audioFrame+0x754>)
					float pluckAmp = amplitz * 2.0f; //was 4
 8003f4c:	ee38 8a08 	vadd.f32	s16, s16, s16
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
 8003f50:	4e73      	ldr	r6, [pc, #460]	; (8004120 <audioFrame+0x758>)
					tADSRT_on(&fenvelopes[i], amplitz);
 8003f52:	4418      	add	r0, r3
 8003f54:	f010 fb5c 	bl	8014610 <tADSRT_on>
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
 8003f58:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003f5c:	ed96 7a00 	vldr	s14, [r6]
 8003f60:	4638      	mov	r0, r7
 8003f62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6a:	bfcc      	ite	gt
 8003f6c:	2101      	movgt	r1, #1
 8003f6e:	2100      	movle	r1, #0
 8003f70:	f018 f9fc 	bl	801c36c <tLivingString2_setLevMode>
					tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
 8003f74:	ed96 0a01 	vldr	s0, [r6, #4]
 8003f78:	4638      	mov	r0, r7
 8003f7a:	f018 f9bb 	bl	801c2f4 <tLivingString2_setTargetLev>
					int delayLength = (int)strings[i]->waveLengthInSamples;
 8003f7e:	683b      	ldr	r3, [r7, #0]
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8003f80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					int beforeLength = (delayLength * knobScaled[2]);
 8003f84:	ed96 7a02 	vldr	s14, [r6, #8]
					int delayLength = (int)strings[i]->waveLengthInSamples;
 8003f88:	edd3 6a02 	vldr	s13, [r3, #8]
 8003f8c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8003f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
					int delayLength = (int)strings[i]->waveLengthInSamples;
 8003f94:	ee16 1a90 	vmov	r1, s13
					int beforeLength = (delayLength * knobScaled[2]);
 8003f98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003f9c:	ee26 7a87 	vmul.f32	s14, s13, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8003fa0:	ee67 7aa6 	vmul.f32	s15, s15, s13
					int beforeLength = (delayLength * knobScaled[2]);
 8003fa4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8003fa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int beforeLength = (delayLength * knobScaled[2]);
 8003fac:	ee17 6a10 	vmov	r6, s14
					if (beforeLength > 0)
 8003fb0:	2e00      	cmp	r6, #0
 8003fb2:	f340 80a2 	ble.w	80040fa <audioFrame+0x732>
						beforePickIncrement = pluckAmp / beforeLength;
 8003fb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fba:	ee88 6a07 	vdiv.f32	s12, s16, s14
					if (afterLength > 0)
 8003fbe:	ee17 2a90 	vmov	r2, s15
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	dd03      	ble.n	8003fce <audioFrame+0x606>
						afterPickIncrement = pluckAmp / afterLength;
 8003fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fca:	ee88 8a27 	vdiv.f32	s16, s16, s15
					for (int j = 0; j < delayLength; j++)
 8003fce:	2900      	cmp	r1, #0
 8003fd0:	f340 8087 	ble.w	80040e2 <audioFrame+0x71a>
					float value = 0.0f;
 8003fd4:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004124 <audioFrame+0x75c>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 8003fd8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
					float value = 0.0f;
 8003fdc:	9a05      	ldr	r2, [sp, #20]
 8003fde:	e024      	b.n	800402a <audioFrame+0x662>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 8003fe0:	f8d3 c02c 	ldr.w	ip, [r3, #44]	; 0x2c
							value += beforePickIncrement;
 8003fe4:	ee77 7a86 	vadd.f32	s15, s15, s12
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 8003fe8:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8003fec:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8003ff0:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8003ff4:	4413      	add	r3, r2
 8003ff6:	4018      	ands	r0, r3
 8003ff8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003ffc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004000:	ed80 7a00 	vstr	s14, [r0]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f8d3 c038 	ldr.w	ip, [r3, #56]	; 0x38
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 800400a:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800400e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8004012:	4413      	add	r3, r2
					for (int j = 0; j < delayLength; j++)
 8004014:	3201      	adds	r2, #1
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004016:	4018      	ands	r0, r3
 8004018:	f8dc 3004 	ldr.w	r3, [ip, #4]
					for (int j = 0; j < delayLength; j++)
 800401c:	4291      	cmp	r1, r2
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 800401e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004022:	ed80 7a00 	vstr	s14, [r0]
					for (int j = 0; j < delayLength; j++)
 8004026:	d05c      	beq.n	80040e2 <audioFrame+0x71a>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 8004028:	683b      	ldr	r3, [r7, #0]
						if (j < beforeLength)
 800402a:	4296      	cmp	r6, r2
 800402c:	dcd8      	bgt.n	8003fe0 <audioFrame+0x618>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 800402e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
							value -= afterPickIncrement;
 8004032:	ee77 7ac8 	vsub.f32	s15, s15, s16
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 8004036:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800403a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800403e:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8004042:	4413      	add	r3, r2
 8004044:	4018      	ands	r0, r3
 8004046:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800404a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800404e:	ed80 7a00 	vstr	s14, [r0]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	f8d3 c034 	ldr.w	ip, [r3, #52]	; 0x34
 8004058:	e7d7      	b.n	800400a <audioFrame+0x642>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800405a:	ee77 7ac2 	vsub.f32	s15, s15, s4
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 800405e:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8004130 <audioFrame+0x768>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004062:	ee74 4ac2 	vsub.f32	s9, s9, s4
 8004066:	eec7 3aa4 	vdiv.f32	s7, s15, s9
 800406a:	eef0 7a46 	vmov.f32	s15, s12
 800406e:	eee2 7aa3 	vfma.f32	s15, s5, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8004072:	edcb 7a00 	vstr	s15, [fp]
 8004076:	e4e3      	b.n	8003a40 <audioFrame+0x78>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004078:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800407c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8004080:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004084:	eea2 6a87 	vfma.f32	s12, s5, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8004088:	ed8b 6a01 	vstr	s12, [fp, #4]
 800408c:	e4ee      	b.n	8003a6c <audioFrame+0xa4>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
 800408e:	eeb0 0a68 	vmov.f32	s0, s17
 8004092:	4638      	mov	r0, r7
 8004094:	f018 f92e 	bl	801c2f4 <tLivingString2_setTargetLev>
					tLivingString2_setLevMode(&strings[i], 0);
 8004098:	4631      	mov	r1, r6
 800409a:	4638      	mov	r0, r7
 800409c:	f018 f966 	bl	801c36c <tLivingString2_setLevMode>
					tLivingString2_setDecay(&strings[i], 0.2f);
 80040a0:	4638      	mov	r0, r7
 80040a2:	eeb0 0a4a 	vmov.f32	s0, s20
 80040a6:	f018 f90f 	bl	801c2c8 <tLivingString2_setDecay>
					tADSRT_off(&fenvelopes[i]);
 80040aa:	481c      	ldr	r0, [pc, #112]	; (800411c <audioFrame+0x754>)
 80040ac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80040b0:	f010 fac0 	bl	8014634 <tADSRT_off>
 80040b4:	e5c6      	b.n	8003c44 <audioFrame+0x27c>
					lsDecay[i] = 0;
 80040b6:	9b01      	ldr	r3, [sp, #4]
 80040b8:	701e      	strb	r6, [r3, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 80040ba:	9b02      	ldr	r3, [sp, #8]
			previousStringInputs[i] = stringInputs[i];
 80040bc:	682e      	ldr	r6, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	e551      	b.n	8003b66 <audioFrame+0x19e>
					tSimpleLivingString3_pluck(&livStr[i], amplitz, pluckPos);
 80040c2:	4b19      	ldr	r3, [pc, #100]	; (8004128 <audioFrame+0x760>)
 80040c4:	eeb0 0a48 	vmov.f32	s0, s16
 80040c8:	4818      	ldr	r0, [pc, #96]	; (800412c <audioFrame+0x764>)
 80040ca:	edd3 0a00 	vldr	s1, [r3]
 80040ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d0:	4418      	add	r0, r3
 80040d2:	f017 fd99 	bl	801bc08 <tSimpleLivingString3_pluck>
					lsDecay[i] = 1;
 80040d6:	2301      	movs	r3, #1
 80040d8:	9a01      	ldr	r2, [sp, #4]
 80040da:	7013      	strb	r3, [r2, #0]
				if (currentActivePreset == 62)
 80040dc:	4b0d      	ldr	r3, [pc, #52]	; (8004114 <audioFrame+0x74c>)
 80040de:	7819      	ldrb	r1, [r3, #0]
 80040e0:	e72d      	b.n	8003f3e <audioFrame+0x576>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
 80040e2:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <audioFrame+0x758>)
 80040e4:	4638      	mov	r0, r7
 80040e6:	ed93 0a03 	vldr	s0, [r3, #12]
 80040ea:	ee20 0a2a 	vmul.f32	s0, s0, s21
 80040ee:	f018 f8eb 	bl	801c2c8 <tLivingString2_setDecay>
		for (int i = 0; i < numStringsThisBoard; i++)
 80040f2:	9b02      	ldr	r3, [sp, #8]
			previousStringInputs[i] = stringInputs[i];
 80040f4:	682e      	ldr	r6, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	e535      	b.n	8003b66 <audioFrame+0x19e>
						beforePickIncrement = pluckAmp;
 80040fa:	eeb0 6a48 	vmov.f32	s12, s16
 80040fe:	e75e      	b.n	8003fbe <audioFrame+0x5f6>
 8004100:	200130b8 	.word	0x200130b8
 8004104:	20004a70 	.word	0x20004a70
 8004108:	58020400 	.word	0x58020400
 800410c:	20013120 	.word	0x20013120
 8004110:	20004bf0 	.word	0x20004bf0
 8004114:	200131e4 	.word	0x200131e4
 8004118:	20016e74 	.word	0x20016e74
 800411c:	2000461c 	.word	0x2000461c
 8004120:	20004700 	.word	0x20004700
 8004124:	00000000 	.word	0x00000000
 8004128:	2000006c 	.word	0x2000006c
 800412c:	200048cc 	.word	0x200048cc
 8004130:	20013088 	.word	0x20013088

08004134 <HAL_SPI_RxCpltCallback>:




void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004134:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;
	if (hspi == &hspi5)
 8004136:	4b86      	ldr	r3, [pc, #536]	; (8004350 <HAL_SPI_RxCpltCallback+0x21c>)
	interrupted = 1;
 8004138:	2101      	movs	r1, #1
 800413a:	4a86      	ldr	r2, [pc, #536]	; (8004354 <HAL_SPI_RxCpltCallback+0x220>)
{
 800413c:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 800413e:	4298      	cmp	r0, r3
	interrupted = 1;
 8004140:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 8004142:	d019      	beq.n	8004178 <HAL_SPI_RxCpltCallback+0x44>
			}
		}
		newPluck = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 8004144:	4b84      	ldr	r3, [pc, #528]	; (8004358 <HAL_SPI_RxCpltCallback+0x224>)
 8004146:	429c      	cmp	r4, r3
 8004148:	d00d      	beq.n	8004166 <HAL_SPI_RxCpltCallback+0x32>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 800414a:	4b84      	ldr	r3, [pc, #528]	; (800435c <HAL_SPI_RxCpltCallback+0x228>)
 800414c:	429c      	cmp	r4, r3
 800414e:	d000      	beq.n	8004152 <HAL_SPI_RxCpltCallback+0x1e>
			levers[1][i] = SPI_LEVERS[i];
		}
		*/
		newLevers = 1;
	}
}
 8004150:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8004152:	4b83      	ldr	r3, [pc, #524]	; (8004360 <HAL_SPI_RxCpltCallback+0x22c>)
 8004154:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8004158:	2afe      	cmp	r2, #254	; 0xfe
 800415a:	f000 80ef 	beq.w	800433c <HAL_SPI_RxCpltCallback+0x208>
		newLevers = 1;
 800415e:	4b81      	ldr	r3, [pc, #516]	; (8004364 <HAL_SPI_RxCpltCallback+0x230>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 8004166:	4b80      	ldr	r3, [pc, #512]	; (8004368 <HAL_SPI_RxCpltCallback+0x234>)
 8004168:	7b9a      	ldrb	r2, [r3, #14]
 800416a:	2afe      	cmp	r2, #254	; 0xfe
 800416c:	f000 80d6 	beq.w	800431c <HAL_SPI_RxCpltCallback+0x1e8>
		newBar = 1;
 8004170:	4b7e      	ldr	r3, [pc, #504]	; (800436c <HAL_SPI_RxCpltCallback+0x238>)
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	e7e8      	b.n	800414a <HAL_SPI_RxCpltCallback+0x16>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 8004178:	4b7d      	ldr	r3, [pc, #500]	; (8004370 <HAL_SPI_RxCpltCallback+0x23c>)
 800417a:	7e9a      	ldrb	r2, [r3, #26]
 800417c:	2afe      	cmp	r2, #254	; 0xfe
 800417e:	d008      	beq.n	8004192 <HAL_SPI_RxCpltCallback+0x5e>
		newPluck = 1;
 8004180:	4b7c      	ldr	r3, [pc, #496]	; (8004374 <HAL_SPI_RxCpltCallback+0x240>)
 8004182:	2001      	movs	r0, #1
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8004184:	2234      	movs	r2, #52	; 0x34
 8004186:	497a      	ldr	r1, [pc, #488]	; (8004370 <HAL_SPI_RxCpltCallback+0x23c>)
		newPluck = 1;
 8004188:	6018      	str	r0, [r3, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 800418a:	4871      	ldr	r0, [pc, #452]	; (8004350 <HAL_SPI_RxCpltCallback+0x21c>)
 800418c:	f00a fc3a 	bl	800ea04 <HAL_SPI_Receive_DMA>
 8004190:	e7d8      	b.n	8004144 <HAL_SPI_RxCpltCallback+0x10>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 8004192:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8004196:	2afd      	cmp	r2, #253	; 0xfd
 8004198:	d1f2      	bne.n	8004180 <HAL_SPI_RxCpltCallback+0x4c>
			for (int i = 0; i < numStringsThisBoard; i++)
 800419a:	4a77      	ldr	r2, [pc, #476]	; (8004378 <HAL_SPI_RxCpltCallback+0x244>)
 800419c:	7811      	ldrb	r1, [r2, #0]
 800419e:	2900      	cmp	r1, #0
 80041a0:	d0ee      	beq.n	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80041a2:	4a76      	ldr	r2, [pc, #472]	; (800437c <HAL_SPI_RxCpltCallback+0x248>)
			for (int i = 0; i < numStringsThisBoard; i++)
 80041a4:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80041a6:	6810      	ldr	r0, [r2, #0]
 80041a8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80041ac:	f890 c01b 	ldrb.w	ip, [r0, #27]
 80041b0:	6810      	ldr	r0, [r2, #0]
 80041b2:	f100 000e 	add.w	r0, r0, #14
 80041b6:	f813 5010 	ldrb.w	r5, [r3, r0, lsl #1]
 80041ba:	4871      	ldr	r0, [pc, #452]	; (8004380 <HAL_SPI_RxCpltCallback+0x24c>)
 80041bc:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80041c0:	6005      	str	r5, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80041c2:	d0dd      	beq.n	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80041c4:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80041c6:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80041c8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80041cc:	f895 e01d 	ldrb.w	lr, [r5, #29]
 80041d0:	6815      	ldr	r5, [r2, #0]
 80041d2:	f105 0c0f 	add.w	ip, r5, #15
 80041d6:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80041da:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80041de:	6045      	str	r5, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 80041e0:	d0ce      	beq.n	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80041e2:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80041e4:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80041e6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80041ea:	f895 e01f 	ldrb.w	lr, [r5, #31]
 80041ee:	6815      	ldr	r5, [r2, #0]
 80041f0:	f105 0c10 	add.w	ip, r5, #16
 80041f4:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80041f8:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80041fc:	6085      	str	r5, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 80041fe:	d0bf      	beq.n	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004200:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004202:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004204:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004208:	f895 e021 	ldrb.w	lr, [r5, #33]	; 0x21
 800420c:	6815      	ldr	r5, [r2, #0]
 800420e:	f105 0c11 	add.w	ip, r5, #17
 8004212:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004216:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800421a:	60c5      	str	r5, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 800421c:	d0b0      	beq.n	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800421e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004220:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004222:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004226:	f895 e023 	ldrb.w	lr, [r5, #35]	; 0x23
 800422a:	6815      	ldr	r5, [r2, #0]
 800422c:	f105 0c12 	add.w	ip, r5, #18
 8004230:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004234:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8004238:	6105      	str	r5, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 800423a:	d0a1      	beq.n	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800423c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800423e:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004240:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004244:	f895 e025 	ldrb.w	lr, [r5, #37]	; 0x25
 8004248:	6815      	ldr	r5, [r2, #0]
 800424a:	f105 0c13 	add.w	ip, r5, #19
 800424e:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004252:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8004256:	6145      	str	r5, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004258:	d092      	beq.n	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800425a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800425c:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800425e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004262:	f895 c027 	ldrb.w	ip, [r5, #39]	; 0x27
 8004266:	6815      	ldr	r5, [r2, #0]
 8004268:	f105 0514 	add.w	r5, r5, #20
 800426c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004270:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004274:	6185      	str	r5, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004276:	d083      	beq.n	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004278:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800427a:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800427c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004280:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 8004284:	6815      	ldr	r5, [r2, #0]
 8004286:	f105 0515 	add.w	r5, r5, #21
 800428a:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 800428e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004292:	61c5      	str	r5, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004294:	f43f af74 	beq.w	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004298:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800429a:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800429c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80042a0:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
 80042a4:	6815      	ldr	r5, [r2, #0]
 80042a6:	f105 0516 	add.w	r5, r5, #22
 80042aa:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80042ae:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80042b2:	6205      	str	r5, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 80042b4:	f43f af64 	beq.w	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80042b8:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80042ba:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80042bc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80042c0:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
 80042c4:	6815      	ldr	r5, [r2, #0]
 80042c6:	f105 0517 	add.w	r5, r5, #23
 80042ca:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80042ce:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80042d2:	6245      	str	r5, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 80042d4:	f43f af54 	beq.w	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80042d8:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80042da:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80042dc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80042e0:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
 80042e4:	6815      	ldr	r5, [r2, #0]
 80042e6:	f105 0518 	add.w	r5, r5, #24
 80042ea:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80042ee:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80042f2:	6285      	str	r5, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 80042f4:	f43f af44 	beq.w	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80042f8:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80042fa:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80042fc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004300:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
 8004304:	6815      	ldr	r5, [r2, #0]
 8004306:	f105 0519 	add.w	r5, r5, #25
 800430a:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 800430e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004312:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8004314:	f43f af34 	beq.w	8004180 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004318:	6813      	ldr	r3, [r2, #0]
 800431a:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 800431c:	7bda      	ldrb	r2, [r3, #15]
 800431e:	2afd      	cmp	r2, #253	; 0xfd
 8004320:	f47f af26 	bne.w	8004170 <HAL_SPI_RxCpltCallback+0x3c>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + 8] << 8) + ((uint16_t)SPI_RX[(j * 2) + 9] & 0xff);
 8004324:	7a98      	ldrb	r0, [r3, #10]
 8004326:	7a1d      	ldrb	r5, [r3, #8]
 8004328:	7a5a      	ldrb	r2, [r3, #9]
 800432a:	7ad9      	ldrb	r1, [r3, #11]
 800432c:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8004330:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8004334:	4813      	ldr	r0, [pc, #76]	; (8004384 <HAL_SPI_RxCpltCallback+0x250>)
 8004336:	e9c0 2100 	strd	r2, r1, [r0]
			for (int j = 0; j < 2; j++)
 800433a:	e719      	b.n	8004170 <HAL_SPI_RxCpltCallback+0x3c>
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 800433c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004340:	2bfd      	cmp	r3, #253	; 0xfd
 8004342:	f47f af0c 	bne.w	800415e <HAL_SPI_RxCpltCallback+0x2a>
			handleSPI(LEVER_BUFFER_SIZE);
 8004346:	2020      	movs	r0, #32
 8004348:	f001 fa40 	bl	80057cc <handleSPI>
			newLevers = 1;
 800434c:	e707      	b.n	800415e <HAL_SPI_RxCpltCallback+0x2a>
 800434e:	bf00      	nop
 8004350:	20019820 	.word	0x20019820
 8004354:	200046d4 	.word	0x200046d4
 8004358:	20019798 	.word	0x20019798
 800435c:	20019710 	.word	0x20019710
 8004360:	30000100 	.word	0x30000100
 8004364:	20004a38 	.word	0x20004a38
 8004368:	30000180 	.word	0x30000180
 800436c:	20004a34 	.word	0x20004a34
 8004370:	300001a0 	.word	0x300001a0
 8004374:	20004a3c 	.word	0x20004a3c
 8004378:	20000052 	.word	0x20000052
 800437c:	2000465c 	.word	0x2000465c
 8004380:	20013050 	.word	0x20013050
 8004384:	200130c0 	.word	0x200130c0

08004388 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004388:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;

	if (hspi == &hspi5)
 800438a:	4b80      	ldr	r3, [pc, #512]	; (800458c <HAL_SPI_RxHalfCpltCallback+0x204>)
	interrupted = 1;
 800438c:	2101      	movs	r1, #1
 800438e:	4a80      	ldr	r2, [pc, #512]	; (8004590 <HAL_SPI_RxHalfCpltCallback+0x208>)
	if (hspi == &hspi5)
 8004390:	4298      	cmp	r0, r3
	interrupted = 1;
 8004392:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 8004394:	d01d      	beq.n	80043d2 <HAL_SPI_RxHalfCpltCallback+0x4a>
			}
		}
		newPluck = 1;

	}
	if (hspi == &hspi2)
 8004396:	4b7f      	ldr	r3, [pc, #508]	; (8004594 <HAL_SPI_RxHalfCpltCallback+0x20c>)
 8004398:	4298      	cmp	r0, r3
 800439a:	d011      	beq.n	80043c0 <HAL_SPI_RxHalfCpltCallback+0x38>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 800439c:	4b7e      	ldr	r3, [pc, #504]	; (8004598 <HAL_SPI_RxHalfCpltCallback+0x210>)
 800439e:	4298      	cmp	r0, r3
 80043a0:	d000      	beq.n	80043a4 <HAL_SPI_RxHalfCpltCallback+0x1c>
		{
			handleSPI(0);
			newLevers = 1;
		}
	}
}
 80043a2:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 80043a4:	4b7d      	ldr	r3, [pc, #500]	; (800459c <HAL_SPI_RxHalfCpltCallback+0x214>)
 80043a6:	7f9a      	ldrb	r2, [r3, #30]
 80043a8:	2afe      	cmp	r2, #254	; 0xfe
 80043aa:	d1fa      	bne.n	80043a2 <HAL_SPI_RxHalfCpltCallback+0x1a>
 80043ac:	7fdb      	ldrb	r3, [r3, #31]
 80043ae:	2bfd      	cmp	r3, #253	; 0xfd
 80043b0:	d1f7      	bne.n	80043a2 <HAL_SPI_RxHalfCpltCallback+0x1a>
			handleSPI(0);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f001 fa0a 	bl	80057cc <handleSPI>
			newLevers = 1;
 80043b8:	4b79      	ldr	r3, [pc, #484]	; (80045a0 <HAL_SPI_RxHalfCpltCallback+0x218>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
}
 80043be:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 80043c0:	4b78      	ldr	r3, [pc, #480]	; (80045a4 <HAL_SPI_RxHalfCpltCallback+0x21c>)
 80043c2:	799a      	ldrb	r2, [r3, #6]
 80043c4:	2afe      	cmp	r2, #254	; 0xfe
 80043c6:	f000 80d0 	beq.w	800456a <HAL_SPI_RxHalfCpltCallback+0x1e2>
		newBar = 1;
 80043ca:	4b77      	ldr	r3, [pc, #476]	; (80045a8 <HAL_SPI_RxHalfCpltCallback+0x220>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e7e4      	b.n	800439c <HAL_SPI_RxHalfCpltCallback+0x14>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 80043d2:	4b76      	ldr	r3, [pc, #472]	; (80045ac <HAL_SPI_RxHalfCpltCallback+0x224>)
 80043d4:	781a      	ldrb	r2, [r3, #0]
 80043d6:	2afe      	cmp	r2, #254	; 0xfe
 80043d8:	d003      	beq.n	80043e2 <HAL_SPI_RxHalfCpltCallback+0x5a>
		newPluck = 1;
 80043da:	4b75      	ldr	r3, [pc, #468]	; (80045b0 <HAL_SPI_RxHalfCpltCallback+0x228>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e7d9      	b.n	8004396 <HAL_SPI_RxHalfCpltCallback+0xe>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 80043e2:	7e5a      	ldrb	r2, [r3, #25]
 80043e4:	2afd      	cmp	r2, #253	; 0xfd
 80043e6:	d1f8      	bne.n	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
			for (int i = 0; i < numStringsThisBoard; i++)
 80043e8:	4a72      	ldr	r2, [pc, #456]	; (80045b4 <HAL_SPI_RxHalfCpltCallback+0x22c>)
 80043ea:	7811      	ldrb	r1, [r2, #0]
 80043ec:	2900      	cmp	r1, #0
 80043ee:	d0f4      	beq.n	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80043f0:	4a71      	ldr	r2, [pc, #452]	; (80045b8 <HAL_SPI_RxHalfCpltCallback+0x230>)
			for (int i = 0; i < numStringsThisBoard; i++)
 80043f2:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80043f4:	6814      	ldr	r4, [r2, #0]
 80043f6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 80043fa:	f894 c001 	ldrb.w	ip, [r4, #1]
 80043fe:	6814      	ldr	r4, [r2, #0]
 8004400:	f104 0401 	add.w	r4, r4, #1
 8004404:	f813 5014 	ldrb.w	r5, [r3, r4, lsl #1]
 8004408:	4c6c      	ldr	r4, [pc, #432]	; (80045bc <HAL_SPI_RxHalfCpltCallback+0x234>)
 800440a:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 800440e:	6025      	str	r5, [r4, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004410:	d0e3      	beq.n	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004412:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004414:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004416:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800441a:	f895 e003 	ldrb.w	lr, [r5, #3]
 800441e:	6815      	ldr	r5, [r2, #0]
 8004420:	f105 0c02 	add.w	ip, r5, #2
 8004424:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004428:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800442c:	6065      	str	r5, [r4, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 800442e:	d0d4      	beq.n	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004430:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004432:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004434:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004438:	f895 e005 	ldrb.w	lr, [r5, #5]
 800443c:	6815      	ldr	r5, [r2, #0]
 800443e:	f105 0c03 	add.w	ip, r5, #3
 8004442:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004446:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800444a:	60a5      	str	r5, [r4, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 800444c:	d0c5      	beq.n	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800444e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004450:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004452:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004456:	f895 e007 	ldrb.w	lr, [r5, #7]
 800445a:	6815      	ldr	r5, [r2, #0]
 800445c:	f105 0c04 	add.w	ip, r5, #4
 8004460:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004464:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8004468:	60e5      	str	r5, [r4, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 800446a:	d0b6      	beq.n	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800446c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800446e:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004470:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004474:	f895 e009 	ldrb.w	lr, [r5, #9]
 8004478:	6815      	ldr	r5, [r2, #0]
 800447a:	f105 0c05 	add.w	ip, r5, #5
 800447e:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004482:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8004486:	6125      	str	r5, [r4, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004488:	d0a7      	beq.n	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800448a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800448c:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800448e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004492:	f895 e00b 	ldrb.w	lr, [r5, #11]
 8004496:	6815      	ldr	r5, [r2, #0]
 8004498:	f105 0c06 	add.w	ip, r5, #6
 800449c:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80044a0:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80044a4:	6165      	str	r5, [r4, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 80044a6:	d098      	beq.n	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80044a8:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80044aa:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80044ac:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80044b0:	f895 c00d 	ldrb.w	ip, [r5, #13]
 80044b4:	6815      	ldr	r5, [r2, #0]
 80044b6:	f105 0507 	add.w	r5, r5, #7
 80044ba:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80044be:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80044c2:	61a5      	str	r5, [r4, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 80044c4:	d089      	beq.n	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80044c6:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80044c8:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80044ca:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80044ce:	f895 c00f 	ldrb.w	ip, [r5, #15]
 80044d2:	6815      	ldr	r5, [r2, #0]
 80044d4:	f105 0508 	add.w	r5, r5, #8
 80044d8:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80044dc:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80044e0:	61e5      	str	r5, [r4, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 80044e2:	f43f af7a 	beq.w	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80044e6:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80044e8:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80044ea:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80044ee:	f895 c011 	ldrb.w	ip, [r5, #17]
 80044f2:	6815      	ldr	r5, [r2, #0]
 80044f4:	f105 0509 	add.w	r5, r5, #9
 80044f8:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80044fc:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004500:	6225      	str	r5, [r4, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004502:	f43f af6a 	beq.w	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004506:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004508:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800450a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800450e:	f895 c013 	ldrb.w	ip, [r5, #19]
 8004512:	6815      	ldr	r5, [r2, #0]
 8004514:	f105 050a 	add.w	r5, r5, #10
 8004518:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 800451c:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004520:	6265      	str	r5, [r4, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 8004522:	f43f af5a 	beq.w	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004526:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004528:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800452a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800452e:	f895 c015 	ldrb.w	ip, [r5, #21]
 8004532:	6815      	ldr	r5, [r2, #0]
 8004534:	f105 050b 	add.w	r5, r5, #11
 8004538:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 800453c:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004540:	62a5      	str	r5, [r4, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8004542:	f43f af4a 	beq.w	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004546:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004548:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800454a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800454e:	f895 c017 	ldrb.w	ip, [r5, #23]
 8004552:	6815      	ldr	r5, [r2, #0]
 8004554:	f105 050c 	add.w	r5, r5, #12
 8004558:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 800455c:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004560:	62e3      	str	r3, [r4, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8004562:	f43f af3a 	beq.w	80043da <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 800456a:	79da      	ldrb	r2, [r3, #7]
 800456c:	2afd      	cmp	r2, #253	; 0xfd
 800456e:	f47f af2c 	bne.w	80043ca <HAL_SPI_RxHalfCpltCallback+0x42>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2)] << 8) + ((uint16_t)SPI_RX[(j * 2) + 1] & 0xff);
 8004572:	789c      	ldrb	r4, [r3, #2]
 8004574:	781d      	ldrb	r5, [r3, #0]
 8004576:	785a      	ldrb	r2, [r3, #1]
 8004578:	78d9      	ldrb	r1, [r3, #3]
 800457a:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 800457e:	eb01 2104 	add.w	r1, r1, r4, lsl #8
 8004582:	4c0f      	ldr	r4, [pc, #60]	; (80045c0 <HAL_SPI_RxHalfCpltCallback+0x238>)
 8004584:	e9c4 2100 	strd	r2, r1, [r4]
			for (int j = 0; j < 2; j++)
 8004588:	e71f      	b.n	80043ca <HAL_SPI_RxHalfCpltCallback+0x42>
 800458a:	bf00      	nop
 800458c:	20019820 	.word	0x20019820
 8004590:	200046d4 	.word	0x200046d4
 8004594:	20019798 	.word	0x20019798
 8004598:	20019710 	.word	0x20019710
 800459c:	30000100 	.word	0x30000100
 80045a0:	20004a38 	.word	0x20004a38
 80045a4:	30000180 	.word	0x30000180
 80045a8:	20004a34 	.word	0x20004a34
 80045ac:	300001a0 	.word	0x300001a0
 80045b0:	20004a3c 	.word	0x20004a3c
 80045b4:	20000052 	.word	0x20000052
 80045b8:	2000465c 	.word	0x2000465c
 80045bc:	20013050 	.word	0x20013050
 80045c0:	200130c0 	.word	0x200130c0

080045c4 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80045c4:	b508      	push	{r3, lr}
	interrupted = 1;

	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_SPI_TxRxCpltCallback+0x2c>)
	interrupted = 1;
 80045c8:	2001      	movs	r0, #1
 80045ca:	490a      	ldr	r1, [pc, #40]	; (80045f4 <HAL_SPI_TxRxCpltCallback+0x30>)
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80045cc:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	interrupted = 1;
 80045d0:	7008      	strb	r0, [r1, #0]
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80045d2:	2afe      	cmp	r2, #254	; 0xfe
 80045d4:	d003      	beq.n	80045de <HAL_SPI_TxRxCpltCallback+0x1a>
	{
		handleSPI(LEVER_BUFFER_SIZE);
		newLevers = 1;
	}
	newLevers = 1;
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <HAL_SPI_TxRxCpltCallback+0x34>)
 80045d8:	2201      	movs	r2, #1
 80045da:	601a      	str	r2, [r3, #0]
}
 80045dc:	bd08      	pop	{r3, pc}
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80045de:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e2:	2bfd      	cmp	r3, #253	; 0xfd
 80045e4:	d1f7      	bne.n	80045d6 <HAL_SPI_TxRxCpltCallback+0x12>
		handleSPI(LEVER_BUFFER_SIZE);
 80045e6:	2020      	movs	r0, #32
 80045e8:	f001 f8f0 	bl	80057cc <handleSPI>
		newLevers = 1;
 80045ec:	e7f3      	b.n	80045d6 <HAL_SPI_TxRxCpltCallback+0x12>
 80045ee:	bf00      	nop
 80045f0:	30000100 	.word	0x30000100
 80045f4:	200046d4 	.word	0x200046d4
 80045f8:	20004a38 	.word	0x20004a38

080045fc <HAL_SPI_TxRxHalfCpltCallback>:
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
	interrupted = 1;
 80045fe:	4909      	ldr	r1, [pc, #36]	; (8004624 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
{
 8004600:	b510      	push	{r4, lr}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8004602:	7f9a      	ldrb	r2, [r3, #30]
	interrupted = 1;
 8004604:	2401      	movs	r4, #1
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8004606:	2afe      	cmp	r2, #254	; 0xfe
	interrupted = 1;
 8004608:	700c      	strb	r4, [r1, #0]
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 800460a:	d000      	beq.n	800460e <HAL_SPI_TxRxHalfCpltCallback+0x12>
	{
		handleSPI(0);
		newLevers = 1;
	}
}
 800460c:	bd10      	pop	{r4, pc}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 800460e:	7fdb      	ldrb	r3, [r3, #31]
 8004610:	2bfd      	cmp	r3, #253	; 0xfd
 8004612:	d1fb      	bne.n	800460c <HAL_SPI_TxRxHalfCpltCallback+0x10>
		handleSPI(0);
 8004614:	2000      	movs	r0, #0
 8004616:	f001 f8d9 	bl	80057cc <handleSPI>
		newLevers = 1;
 800461a:	4b03      	ldr	r3, [pc, #12]	; (8004628 <HAL_SPI_TxRxHalfCpltCallback+0x2c>)
 800461c:	601c      	str	r4, [r3, #0]
}
 800461e:	bd10      	pop	{r4, pc}
 8004620:	30000100 	.word	0x30000100
 8004624:	200046d4 	.word	0x200046d4
 8004628:	20004a38 	.word	0x20004a38

0800462c <HAL_SAI_TxCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <HAL_SAI_TxCpltCallback+0x10>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	b103      	cbz	r3, 8004634 <HAL_SAI_TxCpltCallback+0x8>
	audioFrame(HALF_BUFFER_SIZE);
}
 8004632:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
 8004634:	2010      	movs	r0, #16
 8004636:	f7ff b9c7 	b.w	80039c8 <audioFrame>
 800463a:	bf00      	nop
 800463c:	20013220 	.word	0x20013220

08004640 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 8004640:	4b02      	ldr	r3, [pc, #8]	; (800464c <HAL_SAI_TxHalfCpltCallback+0xc>)
 8004642:	7818      	ldrb	r0, [r3, #0]
 8004644:	b100      	cbz	r0, 8004648 <HAL_SAI_TxHalfCpltCallback+0x8>
	audioFrame(0);
}
 8004646:	4770      	bx	lr
	audioFrame(0);
 8004648:	f7ff b9be 	b.w	80039c8 <audioFrame>
 800464c:	20013220 	.word	0x20013220

08004650 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop

08004654 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8004654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8004658:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 800465a:	b082      	sub	sp, #8
 800465c:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800465e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004662:	483b      	ldr	r0, [pc, #236]	; (8004750 <AudioCodec_init+0xfc>)
 8004664:	f005 fc80 	bl	8009f68 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8004668:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800466a:	4c3a      	ldr	r4, [pc, #232]	; (8004754 <AudioCodec_init+0x100>)
	HAL_Delay(2);
 800466c:	f003 fea4 	bl	80083b8 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004670:	4f39      	ldr	r7, [pc, #228]	; (8004758 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 8004672:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004676:	4e39      	ldr	r6, [pc, #228]	; (800475c <AudioCodec_init+0x108>)
 8004678:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 800467a:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800467c:	2120      	movs	r1, #32
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	4628      	mov	r0, r5
 8004682:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8004764 <AudioCodec_init+0x110>
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	8833      	ldrh	r3, [r6, #0]
 800468a:	f005 fd97 	bl	800a1bc <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004692:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004696:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8004698:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800469c:	2120      	movs	r1, #32
 800469e:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 80046a0:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046a2:	8833      	ldrh	r3, [r6, #0]
 80046a4:	f005 fd8a 	bl	800a1bc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046ac:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046b0:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 80046b2:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046b4:	2120      	movs	r1, #32
 80046b6:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 80046b8:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046ba:	8833      	ldrh	r3, [r6, #0]
 80046bc:	f005 fd7e 	bl	800a1bc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046c4:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046c8:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 80046ca:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046ce:	2120      	movs	r1, #32
 80046d0:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 80046d2:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046d4:	8833      	ldrh	r3, [r6, #0]
 80046d6:	f005 fd71 	bl	800a1bc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046de:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046e2:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 80046e4:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046e8:	2120      	movs	r1, #32
 80046ea:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 80046ec:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046ee:	8833      	ldrh	r3, [r6, #0]
 80046f0:	f005 fd64 	bl	800a1bc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046f8:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80046fc:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 80046fe:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004702:	2120      	movs	r1, #32
 8004704:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 8004706:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004708:	8833      	ldrh	r3, [r6, #0]
 800470a:	f005 fd57 	bl	800a1bc <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004712:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004716:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8004718:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800471c:	2120      	movs	r1, #32
 800471e:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8004720:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004722:	8833      	ldrh	r3, [r6, #0]
 8004724:	f005 fd4a 	bl	800a1bc <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004728:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 800472a:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800472e:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004730:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8004734:	4628      	mov	r0, r5
 8004736:	9200      	str	r2, [sp, #0]
 8004738:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 800473a:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800473c:	2120      	movs	r1, #32
 800473e:	f005 fd3d 	bl	800a1bc <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <AudioCodec_init+0x10c>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]

}
 8004748:	b002      	add	sp, #8
 800474a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800474e:	bf00      	nop
 8004750:	58020800 	.word	0x58020800
 8004754:	20013150 	.word	0x20013150
 8004758:	20000270 	.word	0x20000270
 800475c:	20000274 	.word	0x20000274
 8004760:	2000056c 	.word	0x2000056c
 8004764:	20013152 	.word	0x20013152

08004768 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004768:	4b20      	ldr	r3, [pc, #128]	; (80047ec <MX_DMA_Init+0x84>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 800476a:	210b      	movs	r1, #11
 800476c:	2200      	movs	r2, #0
 800476e:	4608      	mov	r0, r1
{
 8004770:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004772:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8004776:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004778:	f044 0401 	orr.w	r4, r4, #1
 800477c:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8004780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	9301      	str	r3, [sp, #4]
 800478a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 800478c:	f003 fe48 	bl	8008420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004790:	200b      	movs	r0, #11
 8004792:	f003 fe83 	bl	800849c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	210a      	movs	r1, #10
 800479a:	200c      	movs	r0, #12
 800479c:	f003 fe40 	bl	8008420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80047a0:	200c      	movs	r0, #12
 80047a2:	f003 fe7b 	bl	800849c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 80047a6:	2200      	movs	r2, #0
 80047a8:	2109      	movs	r1, #9
 80047aa:	200d      	movs	r0, #13
 80047ac:	f003 fe38 	bl	8008420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80047b0:	200d      	movs	r0, #13
 80047b2:	f003 fe73 	bl	800849c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	2108      	movs	r1, #8
 80047ba:	200e      	movs	r0, #14
 80047bc:	f003 fe30 	bl	8008420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80047c0:	200e      	movs	r0, #14
 80047c2:	f003 fe6b 	bl	800849c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 80047c6:	2200      	movs	r2, #0
 80047c8:	2107      	movs	r1, #7
 80047ca:	200f      	movs	r0, #15
 80047cc:	f003 fe28 	bl	8008420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80047d0:	200f      	movs	r0, #15
 80047d2:	f003 fe63 	bl	800849c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80047d6:	2200      	movs	r2, #0
 80047d8:	2010      	movs	r0, #16
 80047da:	4611      	mov	r1, r2
 80047dc:	f003 fe20 	bl	8008420 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80047e0:	2010      	movs	r0, #16

}
 80047e2:	b002      	add	sp, #8
 80047e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80047e8:	f003 be58 	b.w	800849c <HAL_NVIC_EnableIRQ>
 80047ec:	58024400 	.word	0x58024400

080047f0 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80047f0:	481f      	ldr	r0, [pc, #124]	; (8004870 <MX_FMC_Init+0x80>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80047f2:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80047f4:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80047f6:	2108      	movs	r1, #8
{
 80047f8:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80047fa:	4c1e      	ldr	r4, [pc, #120]	; (8004874 <MX_FMC_Init+0x84>)
{
 80047fc:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80047fe:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004800:	2210      	movs	r2, #16
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8004802:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8004804:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8004808:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800480a:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800480e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8004810:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004812:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004816:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8004818:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800481a:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800481e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8004822:	2402      	movs	r4, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8004824:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8004828:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800482a:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 2;
 800482c:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
 800482e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8004868 <MX_FMC_Init+0x78>
 8004832:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004836:	2202      	movs	r2, #2
 8004838:	2302      	movs	r3, #2
 800483a:	ed8d 7b00 	vstr	d7, [sp]
 800483e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004842:	f009 ff4d 	bl	800e6e0 <HAL_SDRAM_Init>
 8004846:	b928      	cbnz	r0, 8004854 <MX_FMC_Init+0x64>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8004848:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800484c:	f003 fdcc 	bl	80083e8 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8004850:	b008      	add	sp, #32
 8004852:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004854:	f003 f89e 	bl	8007994 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8004858:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800485c:	f003 fdc4 	bl	80083e8 <HAL_SetFMCMemorySwappingConfig>
}
 8004860:	b008      	add	sp, #32
 8004862:	bd10      	pop	{r4, pc}
 8004864:	f3af 8000 	nop.w
 8004868:	00000002 	.word	0x00000002
 800486c:	00000006 	.word	0x00000006
 8004870:	20013158 	.word	0x20013158
 8004874:	52004140 	.word	0x52004140

08004878 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8004878:	4836      	ldr	r0, [pc, #216]	; (8004954 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800487a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800487c:	b5d0      	push	{r4, r6, r7, lr}
 800487e:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 8004880:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004882:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004886:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800488a:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 800488c:	b109      	cbz	r1, 8004892 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800488e:	b038      	add	sp, #224	; 0xe0
 8004890:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8004892:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004894:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8004896:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004898:	a80a      	add	r0, sp, #40	; 0x28
 800489a:	f018 f853 	bl	801c944 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800489e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048a2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048a4:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80048a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048aa:	f007 f907 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 80048ae:	2800      	cmp	r0, #0
 80048b0:	d14c      	bne.n	800494c <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 80048b2:	4b29      	ldr	r3, [pc, #164]	; (8004958 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80048b4:	f64f 003f 	movw	r0, #63551	; 0xf83f
 80048b8:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80048ba:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80048bc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80048c0:	2600      	movs	r6, #0
 80048c2:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80048c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048c8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80048cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80048d0:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 80048d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80048d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80048da:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80048dc:	a902      	add	r1, sp, #8
 80048de:	481f      	ldr	r0, [pc, #124]	; (800495c <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80048e0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80048e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80048e6:	f005 f9ef 	bl	8009cc8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80048ea:	2219      	movs	r2, #25
 80048ec:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ee:	a902      	add	r1, sp, #8
 80048f0:	481b      	ldr	r0, [pc, #108]	; (8004960 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80048f2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80048f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048fc:	f005 f9e4 	bl	8009cc8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8004900:	f248 1237 	movw	r2, #33079	; 0x8137
 8004904:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004906:	a902      	add	r1, sp, #8
 8004908:	4816      	ldr	r0, [pc, #88]	; (8004964 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800490a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 800490c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004910:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004914:	f005 f9d8 	bl	8009cc8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004918:	f64f 7283 	movw	r2, #65411	; 0xff83
 800491c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800491e:	a902      	add	r1, sp, #8
 8004920:	4811      	ldr	r0, [pc, #68]	; (8004968 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004922:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004924:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004928:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800492c:	f005 f9cc 	bl	8009cc8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004930:	f24c 7203 	movw	r2, #50947	; 0xc703
 8004934:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004936:	a902      	add	r1, sp, #8
 8004938:	480c      	ldr	r0, [pc, #48]	; (800496c <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800493a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800493c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004940:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004944:	f005 f9c0 	bl	8009cc8 <HAL_GPIO_Init>
}
 8004948:	b038      	add	sp, #224	; 0xe0
 800494a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800494c:	f003 f822 	bl	8007994 <Error_Handler>
 8004950:	e7af      	b.n	80048b2 <HAL_SDRAM_MspInit+0x3a>
 8004952:	bf00      	nop
 8004954:	20013154 	.word	0x20013154
 8004958:	58024400 	.word	0x58024400
 800495c:	58021400 	.word	0x58021400
 8004960:	58020800 	.word	0x58020800
 8004964:	58021800 	.word	0x58021800
 8004968:	58021000 	.word	0x58021000
 800496c:	58020c00 	.word	0x58020c00

08004970 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004974:	4b7e      	ldr	r3, [pc, #504]	; (8004b70 <MX_GPIO_Init+0x200>)
{
 8004976:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004978:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800497a:	4f7e      	ldr	r7, [pc, #504]	; (8004b74 <MX_GPIO_Init+0x204>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800497c:	4e7e      	ldr	r6, [pc, #504]	; (8004b78 <MX_GPIO_Init+0x208>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800497e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004982:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8004984:	4638      	mov	r0, r7

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004986:	4d7d      	ldr	r5, [pc, #500]	; (8004b7c <MX_GPIO_Init+0x20c>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004988:	f04f 0a01 	mov.w	sl, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800498c:	f04f 0800 	mov.w	r8, #0
 8004990:	f04f 0900 	mov.w	r9, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8004998:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800499c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80049a0:	f042 0210 	orr.w	r2, r2, #16
 80049a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80049a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80049ac:	f002 0210 	and.w	r2, r2, #16
 80049b0:	9200      	str	r2, [sp, #0]
 80049b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80049b8:	f042 0204 	orr.w	r2, r2, #4
 80049bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80049c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80049c4:	f002 0204 	and.w	r2, r2, #4
 80049c8:	9201      	str	r2, [sp, #4]
 80049ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80049d0:	f042 0220 	orr.w	r2, r2, #32
 80049d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80049d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80049dc:	f002 0220 	and.w	r2, r2, #32
 80049e0:	9202      	str	r2, [sp, #8]
 80049e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80049e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80049e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80049f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80049f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80049f8:	9203      	str	r2, [sp, #12]
 80049fa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004a08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004a0c:	f002 0201 	and.w	r2, r2, #1
 8004a10:	9204      	str	r2, [sp, #16]
 8004a12:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004a18:	f042 0202 	orr.w	r2, r2, #2
 8004a1c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004a20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004a24:	f002 0202 	and.w	r2, r2, #2
 8004a28:	9205      	str	r2, [sp, #20]
 8004a2a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004a2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004a30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a34:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004a38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004a3c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004a40:	9206      	str	r2, [sp, #24]
 8004a42:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004a48:	f042 0208 	orr.w	r2, r2, #8
 8004a4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8004a50:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	9307      	str	r3, [sp, #28]
 8004a5c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8004a5e:	f005 fa83 	bl	8009f68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8004a62:	4622      	mov	r2, r4
 8004a64:	4630      	mov	r0, r6
 8004a66:	2102      	movs	r1, #2
 8004a68:	f005 fa7e 	bl	8009f68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8004a6c:	4622      	mov	r2, r4
 8004a6e:	4628      	mov	r0, r5
 8004a70:	2110      	movs	r1, #16
 8004a72:	f005 fa79 	bl	8009f68 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8004a76:	f242 0220 	movw	r2, #8224	; 0x2020
 8004a7a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a7c:	a908      	add	r1, sp, #32
 8004a7e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a80:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8004a84:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a88:	f005 f91e 	bl	8009cc8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004a8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a90:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a92:	a908      	add	r1, sp, #32
 8004a94:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004a9a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a9e:	f005 f913 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8004aa2:	f248 02c6 	movw	r2, #32966	; 0x80c6
 8004aa6:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aac:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8004aae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ab2:	f005 f909 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004aba:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004abc:	a908      	add	r1, sp, #32
 8004abe:	4830      	ldr	r0, [pc, #192]	; (8004b80 <MX_GPIO_Init+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004ac2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ac6:	f005 f8ff 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004aca:	2201      	movs	r2, #1
 8004acc:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ace:	a908      	add	r1, sp, #32
 8004ad0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ad2:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ad6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ada:	f005 f8f5 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004ade:	2202      	movs	r2, #2
 8004ae0:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ae2:	a908      	add	r1, sp, #32
 8004ae4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004ae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004aea:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aee:	f005 f8eb 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8004af2:	f649 720c 	movw	r2, #40716	; 0x9f0c
 8004af6:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af8:	4630      	mov	r0, r6
 8004afa:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004afc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8004afe:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b02:	f005 f8e1 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8004b06:	f240 32e5 	movw	r2, #997	; 0x3e5
 8004b0a:	2303      	movs	r3, #3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b0c:	a908      	add	r1, sp, #32
 8004b0e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8004b12:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b16:	f005 f8d7 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b1e:	a908      	add	r1, sp, #32
 8004b20:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b22:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004b26:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b2a:	f005 f8cd 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8004b2e:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8004b32:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b34:	a908      	add	r1, sp, #32
 8004b36:	4813      	ldr	r0, [pc, #76]	; (8004b84 <MX_GPIO_Init+0x214>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b38:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8004b3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b3e:	f005 f8c3 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8004b42:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 8004b46:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b48:	a908      	add	r1, sp, #32
 8004b4a:	480f      	ldr	r0, [pc, #60]	; (8004b88 <MX_GPIO_Init+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8004b4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b52:	f005 f8b9 	bl	8009cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004b56:	2210      	movs	r2, #16
 8004b58:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b5a:	a908      	add	r1, sp, #32
 8004b5c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004b5e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8004b62:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b66:	f005 f8af 	bl	8009cc8 <HAL_GPIO_Init>

}
 8004b6a:	b00e      	add	sp, #56	; 0x38
 8004b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b70:	58024400 	.word	0x58024400
 8004b74:	58020800 	.word	0x58020800
 8004b78:	58020000 	.word	0x58020000
 8004b7c:	58020400 	.word	0x58020400
 8004b80:	58021400 	.word	0x58021400
 8004b84:	58020c00 	.word	0x58020c00
 8004b88:	58021800 	.word	0x58021800

08004b8c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004b8c:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004b8e:	4817      	ldr	r0, [pc, #92]	; (8004bec <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b90:	2300      	movs	r3, #0
 8004b92:	4917      	ldr	r1, [pc, #92]	; (8004bf0 <MX_I2C2_Init+0x64>)
 8004b94:	2401      	movs	r4, #1
 8004b96:	4a17      	ldr	r2, [pc, #92]	; (8004bf4 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004b98:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004b9a:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 8004b9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ba2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004ba6:	f005 faab 	bl	800a100 <HAL_I2C_Init>
 8004baa:	b950      	cbnz	r0, 8004bc2 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004bac:	2100      	movs	r1, #0
 8004bae:	480f      	ldr	r0, [pc, #60]	; (8004bec <MX_I2C2_Init+0x60>)
 8004bb0:	f006 f834 	bl	800ac1c <HAL_I2CEx_ConfigAnalogFilter>
 8004bb4:	b968      	cbnz	r0, 8004bd2 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	480c      	ldr	r0, [pc, #48]	; (8004bec <MX_I2C2_Init+0x60>)
 8004bba:	f006 f863 	bl	800ac84 <HAL_I2CEx_ConfigDigitalFilter>
 8004bbe:	b980      	cbnz	r0, 8004be2 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004bc0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004bc2:	f002 fee7 	bl	8007994 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <MX_I2C2_Init+0x60>)
 8004bca:	f006 f827 	bl	800ac1c <HAL_I2CEx_ConfigAnalogFilter>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	d0f1      	beq.n	8004bb6 <MX_I2C2_Init+0x2a>
    Error_Handler();
 8004bd2:	f002 fedf 	bl	8007994 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4804      	ldr	r0, [pc, #16]	; (8004bec <MX_I2C2_Init+0x60>)
 8004bda:	f006 f853 	bl	800ac84 <HAL_I2CEx_ConfigDigitalFilter>
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d0ee      	beq.n	8004bc0 <MX_I2C2_Init+0x34>
}
 8004be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004be6:	f002 bed5 	b.w	8007994 <Error_Handler>
 8004bea:	bf00      	nop
 8004bec:	2001318c 	.word	0x2001318c
 8004bf0:	40005800 	.word	0x40005800
 8004bf4:	00b03fdb 	.word	0x00b03fdb

08004bf8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004bf8:	b510      	push	{r4, lr}
 8004bfa:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bfc:	2100      	movs	r1, #0
{
 8004bfe:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c00:	22c0      	movs	r2, #192	; 0xc0
 8004c02:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	9106      	str	r1, [sp, #24]
 8004c06:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8004c0a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c0e:	f017 fe99 	bl	801c944 <memset>
  if(i2cHandle->Instance==I2C2)
 8004c12:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <HAL_I2C_MspInit+0xb8>)
 8004c14:	6822      	ldr	r2, [r4, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d001      	beq.n	8004c1e <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004c1a:	b038      	add	sp, #224	; 0xe0
 8004c1c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004c1e:	2208      	movs	r2, #8
 8004c20:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c22:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004c24:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c28:	f006 ff48 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d138      	bne.n	8004ca2 <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c30:	4c20      	ldr	r4, [pc, #128]	; (8004cb4 <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c32:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c34:	a902      	add	r1, sp, #8
 8004c36:	4820      	ldr	r0, [pc, #128]	; (8004cb8 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8004c44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c48:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c4a:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c50:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8004ca8 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c62:	f005 f831 	bl	8009cc8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c66:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8004c72:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c74:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8004c78:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8004c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8004c84:	f003 fbcc 	bl	8008420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004c88:	2021      	movs	r0, #33	; 0x21
 8004c8a:	f003 fc07 	bl	800849c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2101      	movs	r1, #1
 8004c92:	2022      	movs	r0, #34	; 0x22
 8004c94:	f003 fbc4 	bl	8008420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004c98:	2022      	movs	r0, #34	; 0x22
 8004c9a:	f003 fbff 	bl	800849c <HAL_NVIC_EnableIRQ>
}
 8004c9e:	b038      	add	sp, #224	; 0xe0
 8004ca0:	bd10      	pop	{r4, pc}
      Error_Handler();
 8004ca2:	f002 fe77 	bl	8007994 <Error_Handler>
 8004ca6:	e7c3      	b.n	8004c30 <HAL_I2C_MspInit+0x38>
 8004ca8:	00000c00 	.word	0x00000c00
 8004cac:	00000012 	.word	0x00000012
 8004cb0:	40005800 	.word	0x40005800
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	58020400 	.word	0x58020400

08004cbc <scaleOscPitch>:
}

float __ATTR_ITCMRAM scaleOscPitch(float input)
{
	//input = LEAF_clip(0.0f, input, 1.0f);
	return (input * 48.0f) - 24.0f;
 8004cbc:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8004cc0:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8004cd0 <scaleOscPitch+0x14>
}
 8004cc4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	42400000 	.word	0x42400000

08004cd4 <scaleOscFine>:

float __ATTR_ITCMRAM scaleOscFine(float input)
{
	//input = LEAF_clip(0.0f, input, 1.f);
	return (input * 200.0f) - 100.0f;
 8004cd4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004ce8 <scaleOscFine+0x14>
 8004cd8:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004cec <scaleOscFine+0x18>
}
 8004cdc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	43480000 	.word	0x43480000
 8004cec:	c2c80000 	.word	0xc2c80000

08004cf0 <scaleOscFreq>:

float __ATTR_ITCMRAM scaleOscFreq(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 4000.0f) - 2000.0f;
 8004cf0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004d04 <scaleOscFreq+0x14>
 8004cf4:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004d08 <scaleOscFreq+0x18>
}
 8004cf8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	457a0000 	.word	0x457a0000
 8004d08:	c4fa0000 	.word	0xc4fa0000

08004d0c <scaleFilterCutoff>:
}

float __ATTR_ITCMRAM scaleFilterCutoff(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 127.0f);
 8004d0c:	eddf 7a02 	vldr	s15, [pc, #8]	; 8004d18 <scaleFilterCutoff+0xc>
}
 8004d10:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	42fe0000 	.word	0x42fe0000

08004d1c <scaleFinalLowpass>:
}

float __ATTR_ITCMRAM scaleFinalLowpass(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return ((input * 70.0f) + 58.0f);
 8004d1c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004d30 <scaleFinalLowpass+0x14>
 8004d20:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004d34 <scaleFinalLowpass+0x18>
}
 8004d24:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004d28:	eeb0 0a67 	vmov.f32	s0, s15
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	428c0000 	.word	0x428c0000
 8004d34:	42680000 	.word	0x42680000

08004d38 <blankFunction>:


void blankFunction(float a, int b, int c)
{
	;
}
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop

08004d3c <checkForSDCardPreset>:
{
 8004d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint8_t status = SD_PRESENT;
 8004d40:	2301      	movs	r3, #1
{
 8004d42:	b08a      	sub	sp, #40	; 0x28
 8004d44:	4606      	mov	r6, r0
  __IO uint8_t status = SD_PRESENT;
 8004d46:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 8004d4a:	f00b fd41 	bl	80107d0 <BSP_PlatformIsDetected>
 8004d4e:	b110      	cbz	r0, 8004d56 <checkForSDCardPreset+0x1a>
    status = SD_NOT_PRESENT;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f88d 300b 	strb.w	r3, [sp, #11]
  return status;
 8004d56:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 8004d5a:	b95b      	cbnz	r3, 8004d74 <checkForSDCardPreset+0x38>
 8004d5c:	4c39      	ldr	r4, [pc, #228]	; (8004e44 <checkForSDCardPreset+0x108>)
 8004d5e:	4d3a      	ldr	r5, [pc, #232]	; (8004e48 <checkForSDCardPreset+0x10c>)
		loadFailed = 1;
 8004d60:	2301      	movs	r3, #1
 8004d62:	2000      	movs	r0, #0
 8004d64:	702b      	strb	r3, [r5, #0]
	presetWaitingToLoad = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	4a38      	ldr	r2, [pc, #224]	; (8004e4c <checkForSDCardPreset+0x110>)
 8004d6a:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8004d6c:	7023      	strb	r3, [r4, #0]
}
 8004d6e:	b00a      	add	sp, #40	; 0x28
 8004d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loadFailed = 0;
 8004d74:	2700      	movs	r7, #0
		diskBusy = 1;
 8004d76:	f04f 0801 	mov.w	r8, #1
 8004d7a:	4c32      	ldr	r4, [pc, #200]	; (8004e44 <checkForSDCardPreset+0x108>)
		loadFailed = 0;
 8004d7c:	4d32      	ldr	r5, [pc, #200]	; (8004e48 <checkForSDCardPreset+0x10c>)
		disk_initialize(0);
 8004d7e:	4638      	mov	r0, r7
		diskBusy = 1;
 8004d80:	f884 8000 	strb.w	r8, [r4]
		loadFailed = 0;
 8004d84:	702f      	strb	r7, [r5, #0]
		disk_initialize(0);
 8004d86:	f00b fdbd 	bl	8010904 <disk_initialize>
	    disk_status(0);
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f00b fdb0 	bl	80108f0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8004d90:	4642      	mov	r2, r8
 8004d92:	492f      	ldr	r1, [pc, #188]	; (8004e50 <checkForSDCardPreset+0x114>)
 8004d94:	482f      	ldr	r0, [pc, #188]	; (8004e54 <checkForSDCardPreset+0x118>)
 8004d96:	f00e f849 	bl	8012e2c <f_mount>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d1e0      	bne.n	8004d60 <checkForSDCardPreset+0x24>
			itoa(numberToLoad, charBuf, 10);
 8004d9e:	a904      	add	r1, sp, #16
 8004da0:	220a      	movs	r2, #10
 8004da2:	4630      	mov	r0, r6
 8004da4:	f017 fdbe 	bl	801c924 <itoa>
			int len = ((strlen(charBuf)));
 8004da8:	a804      	add	r0, sp, #16
 8004daa:	f7fb fa95 	bl	80002d8 <strlen>
			if (len == 1)
 8004dae:	4540      	cmp	r0, r8
			int len = ((strlen(charBuf)));
 8004db0:	4601      	mov	r1, r0
			if (len == 1)
 8004db2:	d02d      	beq.n	8004e10 <checkForSDCardPreset+0xd4>
				strcat(charBuf, ".ebp");
 8004db4:	ab04      	add	r3, sp, #16
 8004db6:	4e28      	ldr	r6, [pc, #160]	; (8004e58 <checkForSDCardPreset+0x11c>)
 8004db8:	f10d 0c10 	add.w	ip, sp, #16
				strcpy(finalString, charBuf);
 8004dbc:	1d42      	adds	r2, r0, #5
				strcat(charBuf, ".ebp");
 8004dbe:	181f      	adds	r7, r3, r0
 8004dc0:	6830      	ldr	r0, [r6, #0]
				strcpy(finalString, charBuf);
 8004dc2:	ab07      	add	r3, sp, #28
				strcat(charBuf, ".ebp");
 8004dc4:	f84c 0001 	str.w	r0, [ip, r1]
 8004dc8:	7931      	ldrb	r1, [r6, #4]
				strcpy(finalString, charBuf);
 8004dca:	4618      	mov	r0, r3
				strcat(charBuf, ".ebp");
 8004dcc:	7139      	strb	r1, [r7, #4]
				strcpy(finalString, charBuf);
 8004dce:	4661      	mov	r1, ip
 8004dd0:	f017 fdaa 	bl	801c928 <memcpy>
 8004dd4:	4603      	mov	r3, r0
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 8004dd6:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <checkForSDCardPreset+0x114>)
 8004dd8:	4920      	ldr	r1, [pc, #128]	; (8004e5c <checkForSDCardPreset+0x120>)
 8004dda:	4821      	ldr	r0, [pc, #132]	; (8004e60 <checkForSDCardPreset+0x124>)
 8004ddc:	f00e fd96 	bl	801390c <f_findfirst>
			if(res == FR_OK)
 8004de0:	2800      	cmp	r0, #0
 8004de2:	d1bd      	bne.n	8004d60 <checkForSDCardPreset+0x24>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8004de4:	4e1f      	ldr	r6, [pc, #124]	; (8004e64 <checkForSDCardPreset+0x128>)
 8004de6:	2211      	movs	r2, #17
 8004de8:	491f      	ldr	r1, [pc, #124]	; (8004e68 <checkForSDCardPreset+0x12c>)
 8004dea:	4630      	mov	r0, r6
 8004dec:	f00e f870 	bl	8012ed0 <f_open>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d1b5      	bne.n	8004d60 <checkForSDCardPreset+0x24>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8004df4:	ab03      	add	r3, sp, #12
 8004df6:	68f2      	ldr	r2, [r6, #12]
 8004df8:	491c      	ldr	r1, [pc, #112]	; (8004e6c <checkForSDCardPreset+0x130>)
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f00e f9e6 	bl	80131cc <f_read>
					presetWaitingToParse = bytesRead;
 8004e00:	9a03      	ldr	r2, [sp, #12]
 8004e02:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <checkForSDCardPreset+0x134>)
					f_close(&SDFile);
 8004e04:	4630      	mov	r0, r6
					presetWaitingToParse = bytesRead;
 8004e06:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 8004e08:	f00e fc74 	bl	80136f4 <f_close>
					found = 1;
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	e7aa      	b.n	8004d66 <checkForSDCardPreset+0x2a>
				finalString[1] = charBuf[0];
 8004e10:	f89d 2010 	ldrb.w	r2, [sp, #16]
				strcat(finalString, ".ebp");
 8004e14:	ab07      	add	r3, sp, #28
				finalString[2] = charBuf[1];
 8004e16:	f89d 1011 	ldrb.w	r1, [sp, #17]
				finalString[1] = charBuf[0];
 8004e1a:	f88d 201d 	strb.w	r2, [sp, #29]
				finalString[0] = '0';
 8004e1e:	2230      	movs	r2, #48	; 0x30
				strcat(finalString, ".ebp");
 8004e20:	4618      	mov	r0, r3
				finalString[2] = charBuf[1];
 8004e22:	f88d 101e 	strb.w	r1, [sp, #30]
				strcat(finalString, ".ebp");
 8004e26:	9301      	str	r3, [sp, #4]
				finalString[0] = '0';
 8004e28:	f88d 201c 	strb.w	r2, [sp, #28]
				strcat(finalString, ".ebp");
 8004e2c:	f7fb fa54 	bl	80002d8 <strlen>
 8004e30:	4909      	ldr	r1, [pc, #36]	; (8004e58 <checkForSDCardPreset+0x11c>)
 8004e32:	4602      	mov	r2, r0
 8004e34:	9b01      	ldr	r3, [sp, #4]
 8004e36:	181e      	adds	r6, r3, r0
 8004e38:	6808      	ldr	r0, [r1, #0]
 8004e3a:	5098      	str	r0, [r3, r2]
 8004e3c:	790a      	ldrb	r2, [r1, #4]
 8004e3e:	7132      	strb	r2, [r6, #4]
 8004e40:	e7c9      	b.n	8004dd6 <checkForSDCardPreset+0x9a>
 8004e42:	bf00      	nop
 8004e44:	20013220 	.word	0x20013220
 8004e48:	200153d0 	.word	0x200153d0
 8004e4c:	20016e68 	.word	0x20016e68
 8004e50:	20019d10 	.word	0x20019d10
 8004e54:	200198ac 	.word	0x200198ac
 8004e58:	0801eedc 	.word	0x0801eedc
 8004e5c:	20015284 	.word	0x20015284
 8004e60:	200131e8 	.word	0x200131e8
 8004e64:	20019ae0 	.word	0x20019ae0
 8004e68:	2001529a 	.word	0x2001529a
 8004e6c:	300001e0 	.word	0x300001e0
 8004e70:	20016e6c 	.word	0x20016e6c

08004e74 <scaleDefault>:
{
 8004e74:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8004e78:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8004e84 <scaleDefault+0x10>
 8004e7c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004e80:	f011 bc1c 	b.w	80166bc <LEAF_clip>
 8004e84:	00000000 	.word	0x00000000

08004e88 <scaleTranspose>:
{
 8004e88:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
 8004e8c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004eac <scaleTranspose+0x24>
 8004e90:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8004e94:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
 8004e96:	f011 fc11 	bl	80166bc <LEAF_clip>
	return (input * 96.0f) - 48.0f;
 8004e9a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004eb0 <scaleTranspose+0x28>
 8004e9e:	eddf 7a05 	vldr	s15, [pc, #20]	; 8004eb4 <scaleTranspose+0x2c>
}
 8004ea2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8004eaa:	bd08      	pop	{r3, pc}
 8004eac:	00000000 	.word	0x00000000
 8004eb0:	42c00000 	.word	0x42c00000
 8004eb4:	c2400000 	.word	0xc2400000

08004eb8 <scalePitchBend>:
{
 8004eb8:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8004ebc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004ed4 <scalePitchBend+0x1c>
 8004ec0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8004ec4:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
 8004ec6:	f011 fbf9 	bl	80166bc <LEAF_clip>
	return (input * 48.0f);
 8004eca:	eddf 7a03 	vldr	s15, [pc, #12]	; 8004ed8 <scalePitchBend+0x20>
}
 8004ece:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004ed2:	bd08      	pop	{r3, pc}
 8004ed4:	00000000 	.word	0x00000000
 8004ed8:	42400000 	.word	0x42400000

08004edc <scaleFilterResonance>:
{
 8004edc:	b510      	push	{r4, lr}
 8004ede:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
 8004ee2:	ed9f 9a21 	vldr	s18, [pc, #132]	; 8004f68 <scaleFilterResonance+0x8c>
{
 8004ee6:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
 8004eea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004eee:	eeb0 0a49 	vmov.f32	s0, s18
 8004ef2:	f011 fbe3 	bl	80166bc <LEAF_clip>
 8004ef6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 8004efa:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8004f6c <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004efe:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8004f70 <scaleFilterResonance+0x94>
	input *= 2047.0f;
 8004f02:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 8004f06:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004f0a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8004f0e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004f12:	1c63      	adds	r3, r4, #1
 8004f14:	ee00 3a90 	vmov	s1, r3
 8004f18:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004f1c:	f011 fbce 	bl	80166bc <LEAF_clip>
 8004f20:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 8004f24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004f28:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
 8004f2a:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004f2e:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 8004f32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004f36:	ee38 8a27 	vadd.f32	s16, s16, s15
 8004f3a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004f3e:	edd4 7a00 	vldr	s15, [r4]
 8004f42:	eeb0 0a49 	vmov.f32	s0, s18
 8004f46:	ed93 7a00 	vldr	s14, [r3]
 8004f4a:	ee38 8a68 	vsub.f32	s16, s16, s17
 8004f4e:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8004f52:	ee60 0a87 	vmul.f32	s1, s1, s14
 8004f56:	eee7 0a88 	vfma.f32	s1, s15, s16
}
 8004f5a:	ecbd 8b04 	vpop	{d8-d9}
 8004f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 8004f62:	f011 bbab 	b.w	80166bc <LEAF_clip>
 8004f66:	bf00      	nop
 8004f68:	3dcccccd 	.word	0x3dcccccd
 8004f6c:	44ffe000 	.word	0x44ffe000
 8004f70:	00000000 	.word	0x00000000
 8004f74:	20017274 	.word	0x20017274

08004f78 <scaleEnvTimes>:
{
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 8004f7e:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8004ff4 <scaleEnvTimes+0x7c>
{
 8004f82:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 8004f86:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004f8a:	eeb0 0a68 	vmov.f32	s0, s17
 8004f8e:	f011 fb95 	bl	80166bc <LEAF_clip>
 8004f92:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 8004f96:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8004ff8 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004f9a:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 8004f9e:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 8004fa2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004fa6:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8004faa:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004fae:	1c63      	adds	r3, r4, #1
 8004fb0:	ee00 3a90 	vmov	s1, r3
 8004fb4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004fb8:	f011 fb80 	bl	80166bc <LEAF_clip>
 8004fbc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 8004fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fc4:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
 8004fc6:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 8004fca:	ee10 2a10 	vmov	r2, s0
 8004fce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004fd2:	ee38 8a07 	vadd.f32	s16, s16, s14
 8004fd6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004fda:	ed94 7a00 	vldr	s14, [r4]
 8004fde:	ed93 0a00 	vldr	s0, [r3]
 8004fe2:	ee38 8a68 	vsub.f32	s16, s16, s17
 8004fe6:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 8004fea:	eea7 0a08 	vfma.f32	s0, s14, s16
 8004fee:	ecbd 8b02 	vpop	{d8}
 8004ff2:	bd10      	pop	{r4, pc}
 8004ff4:	00000000 	.word	0x00000000
 8004ff8:	44ffe000 	.word	0x44ffe000
 8004ffc:	20013274 	.word	0x20013274

08005000 <scaleLFORates>:
{
 8005000:	b510      	push	{r4, lr}
 8005002:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 8005006:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800507c <scaleLFORates+0x7c>
{
 800500a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 800500e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005012:	eeb0 0a68 	vmov.f32	s0, s17
 8005016:	f011 fb51 	bl	80166bc <LEAF_clip>
 800501a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 800501e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8005080 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005022:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 8005026:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 800502a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800502e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8005032:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005036:	1c63      	adds	r3, r4, #1
 8005038:	ee00 3a90 	vmov	s1, r3
 800503c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005040:	f011 fb3c 	bl	80166bc <LEAF_clip>
 8005044:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 8005048:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800504c:	4b0d      	ldr	r3, [pc, #52]	; (8005084 <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
 800504e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 8005052:	ee10 2a10 	vmov	r2, s0
 8005056:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800505a:	ee38 8a07 	vadd.f32	s16, s16, s14
 800505e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005062:	ed94 7a00 	vldr	s14, [r4]
 8005066:	ed93 0a00 	vldr	s0, [r3]
 800506a:	ee38 8a68 	vsub.f32	s16, s16, s17
 800506e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 8005072:	eea7 0a08 	vfma.f32	s0, s14, s16
 8005076:	ecbd 8b02 	vpop	{d8}
 800507a:	bd10      	pop	{r4, pc}
 800507c:	00000000 	.word	0x00000000
 8005080:	44ffe000 	.word	0x44ffe000
 8005084:	2407b3c0 	.word	0x2407b3c0

08005088 <SystemClock_Config>:
{
 8005088:	b500      	push	{lr}
 800508a:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800508c:	224c      	movs	r2, #76	; 0x4c
 800508e:	2100      	movs	r1, #0
 8005090:	a80c      	add	r0, sp, #48	; 0x30
 8005092:	f017 fc57 	bl	801c944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005096:	2220      	movs	r2, #32
 8005098:	2100      	movs	r1, #0
 800509a:	a804      	add	r0, sp, #16
 800509c:	f017 fc52 	bl	801c944 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80050a0:	2002      	movs	r0, #2
 80050a2:	f005 fe21 	bl	800ace8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050a6:	4b40      	ldr	r3, [pc, #256]	; (80051a8 <SystemClock_Config+0x120>)
 80050a8:	2100      	movs	r1, #0
 80050aa:	4a40      	ldr	r2, [pc, #256]	; (80051ac <SystemClock_Config+0x124>)
 80050ac:	9101      	str	r1, [sp, #4]
 80050ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050b0:	f021 0101 	bic.w	r1, r1, #1
 80050b4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	6993      	ldr	r3, [r2, #24]
 80050c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050c4:	6193      	str	r3, [r2, #24]
 80050c6:	6993      	ldr	r3, [r2, #24]
 80050c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80050d0:	6993      	ldr	r3, [r2, #24]
 80050d2:	0499      	lsls	r1, r3, #18
 80050d4:	d5fc      	bpl.n	80050d0 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d6:	4b36      	ldr	r3, [pc, #216]	; (80051b0 <SystemClock_Config+0x128>)
 80050d8:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80050dc:	f041 0102 	orr.w	r1, r1, #2
 80050e0:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80050e4:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80050f2:	9103      	str	r1, [sp, #12]
 80050f4:	6991      	ldr	r1, [r2, #24]
 80050f6:	4b2c      	ldr	r3, [pc, #176]	; (80051a8 <SystemClock_Config+0x120>)
 80050f8:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80050fc:	6191      	str	r1, [r2, #24]
 80050fe:	6992      	ldr	r2, [r2, #24]
 8005100:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8005104:	9203      	str	r2, [sp, #12]
 8005106:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005108:	4a28      	ldr	r2, [pc, #160]	; (80051ac <SystemClock_Config+0x124>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800510a:	f041 0101 	orr.w	r1, r1, #1
 800510e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	9303      	str	r3, [sp, #12]
 8005118:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800511a:	6993      	ldr	r3, [r2, #24]
 800511c:	049b      	lsls	r3, r3, #18
 800511e:	d5fc      	bpl.n	800511a <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005120:	4a23      	ldr	r2, [pc, #140]	; (80051b0 <SystemClock_Config+0x128>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005122:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005124:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005126:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005128:	f023 0303 	bic.w	r3, r3, #3
 800512c:	f043 0302 	orr.w	r3, r3, #2
 8005130:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005132:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005134:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 5;
 8005136:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005138:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800513a:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800513c:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800513e:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005140:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 192;
 8005142:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005144:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8005190 <SystemClock_Config+0x108>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005148:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800514c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005150:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005152:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005156:	e9cd 321c 	strd	r3, r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800515a:	f005 fe6d 	bl	800ae38 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800515e:	2200      	movs	r2, #0
 8005160:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005162:	2104      	movs	r1, #4
 8005164:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005166:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8005198 <SystemClock_Config+0x110>
 800516a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800516e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005172:	2340      	movs	r3, #64	; 0x40
 8005174:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005178:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80051a0 <SystemClock_Config+0x118>
 800517c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005180:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005184:	f006 f9ea 	bl	800b55c <HAL_RCC_ClockConfig>
}
 8005188:	b021      	add	sp, #132	; 0x84
 800518a:	f85d fb04 	ldr.w	pc, [sp], #4
 800518e:	bf00      	nop
 8005190:	00000021 	.word	0x00000021
 8005194:	00010000 	.word	0x00010000
 8005198:	0000003f 	.word	0x0000003f
 800519c:	00000003 	.word	0x00000003
 80051a0:	00000040 	.word	0x00000040
 80051a4:	00000040 	.word	0x00000040
 80051a8:	58000400 	.word	0x58000400
 80051ac:	58024800 	.word	0x58024800
 80051b0:	58024400 	.word	0x58024400
 80051b4:	00000000 	.word	0x00000000

080051b8 <PeriphCommonClock_Config>:
{
 80051b8:	b500      	push	{lr}
 80051ba:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80051bc:	22a4      	movs	r2, #164	; 0xa4
 80051be:	2100      	movs	r1, #0
 80051c0:	a807      	add	r0, sp, #28
 80051c2:	f017 fbbf 	bl	801c944 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80051c6:	2019      	movs	r0, #25
 80051c8:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80051cc:	2302      	movs	r3, #2
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80051ce:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80051d0:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80051d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 80051d6:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80051d8:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80051da:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8005200 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80051de:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80051e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051e6:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80051e8:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80051ec:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8005208 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80051f0:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80051f2:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051f6:	f006 fc61 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
}
 80051fa:	b031      	add	sp, #196	; 0xc4
 80051fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8005200:	00011100 	.word	0x00011100
 8005204:	00000000 	.word	0x00000000
 8005208:	00000007 	.word	0x00000007
 800520c:	00000002 	.word	0x00000002

08005210 <randomNumber>:
float randomNumber(void) {
 8005210:	b500      	push	{lr}
 8005212:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8005214:	4807      	ldr	r0, [pc, #28]	; (8005234 <randomNumber+0x24>)
 8005216:	a901      	add	r1, sp, #4
 8005218:	f007 fe78 	bl	800cf0c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800521c:	eddd 7a01 	vldr	s15, [sp, #4]
 8005220:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005238 <randomNumber+0x28>
 8005224:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8005228:	ee27 0a80 	vmul.f32	s0, s15, s0
 800522c:	b003      	add	sp, #12
 800522e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005232:	bf00      	nop
 8005234:	20019278 	.word	0x20019278
 8005238:	2f80000d 	.word	0x2f80000d

0800523c <BSP_SD_IsDetected>:
{
 800523c:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800523e:	2301      	movs	r3, #1
{
 8005240:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8005242:	f88d 3007 	strb.w	r3, [sp, #7]
  if (BSP_PlatformIsDetected() != 0x0)
 8005246:	f00b fac3 	bl	80107d0 <BSP_PlatformIsDetected>
 800524a:	b110      	cbz	r0, 8005252 <BSP_SD_IsDetected+0x16>
    status = SD_NOT_PRESENT;
 800524c:	2300      	movs	r3, #0
 800524e:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 8005252:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005256:	b003      	add	sp, #12
 8005258:	f85d fb04 	ldr.w	pc, [sp], #4

0800525c <getPresetNamesFromSDCard>:
{
 800525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 8005260:	2301      	movs	r3, #1
{
 8005262:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 8005264:	f88d 3003 	strb.w	r3, [sp, #3]
  if (BSP_PlatformIsDetected() != 0x0)
 8005268:	f00b fab2 	bl	80107d0 <BSP_PlatformIsDetected>
 800526c:	b110      	cbz	r0, 8005274 <getPresetNamesFromSDCard+0x18>
    status = SD_NOT_PRESENT;
 800526e:	2300      	movs	r3, #0
 8005270:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 8005274:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 8005278:	b93b      	cbnz	r3, 800528a <getPresetNamesFromSDCard+0x2e>
 800527a:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80052d8 <getPresetNamesFromSDCard+0x7c>
	diskBusy = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	f88a 3000 	strb.w	r3, [sl]
}
 8005284:	b009      	add	sp, #36	; 0x24
 8005286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
 800528a:	2400      	movs	r4, #0
 800528c:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <getPresetNamesFromSDCard+0x68>)
		diskBusy = 1;
 800528e:	2501      	movs	r5, #1
 8005290:	f8df a044 	ldr.w	sl, [pc, #68]	; 80052d8 <getPresetNamesFromSDCard+0x7c>
		disk_initialize(0);
 8005294:	4620      	mov	r0, r4
		loadFailed = 0;
 8005296:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 8005298:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
 800529c:	f00b fb32 	bl	8010904 <disk_initialize>
	    disk_status(0);
 80052a0:	4620      	mov	r0, r4
 80052a2:	f00b fb25 	bl	80108f0 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80052a6:	462a      	mov	r2, r5
 80052a8:	4907      	ldr	r1, [pc, #28]	; (80052c8 <getPresetNamesFromSDCard+0x6c>)
 80052aa:	4808      	ldr	r0, [pc, #32]	; (80052cc <getPresetNamesFromSDCard+0x70>)
 80052ac:	f00d fdbe 	bl	8012e2c <f_mount>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d1e4      	bne.n	800527e <getPresetNamesFromSDCard+0x22>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 80052b4:	4605      	mov	r5, r0
 80052b6:	4e06      	ldr	r6, [pc, #24]	; (80052d0 <getPresetNamesFromSDCard+0x74>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80052b8:	f8df 900c 	ldr.w	r9, [pc, #12]	; 80052c8 <getPresetNamesFromSDCard+0x6c>
 80052bc:	f8df 801c 	ldr.w	r8, [pc, #28]	; 80052dc <getPresetNamesFromSDCard+0x80>
 80052c0:	4f04      	ldr	r7, [pc, #16]	; (80052d4 <getPresetNamesFromSDCard+0x78>)
 80052c2:	e023      	b.n	800530c <getPresetNamesFromSDCard+0xb0>
 80052c4:	200153d0 	.word	0x200153d0
 80052c8:	20019d10 	.word	0x20019d10
 80052cc:	200198ac 	.word	0x200198ac
 80052d0:	0801eedc 	.word	0x0801eedc
 80052d4:	200131e8 	.word	0x200131e8
 80052d8:	20013220 	.word	0x20013220
 80052dc:	20015284 	.word	0x20015284
					strcat(charBuf, ".ebp");
 80052e0:	ab02      	add	r3, sp, #8
 80052e2:	6830      	ldr	r0, [r6, #0]
 80052e4:	ac02      	add	r4, sp, #8
 80052e6:	1899      	adds	r1, r3, r2
 80052e8:	7933      	ldrb	r3, [r6, #4]
 80052ea:	50a0      	str	r0, [r4, r2]
					strcpy(finalString, charBuf);
 80052ec:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 80052ee:	710b      	strb	r3, [r1, #4]
					strcpy(finalString, charBuf);
 80052f0:	a805      	add	r0, sp, #20
 80052f2:	4621      	mov	r1, r4
 80052f4:	f017 fb18 	bl	801c928 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80052f8:	ab05      	add	r3, sp, #20
 80052fa:	464a      	mov	r2, r9
 80052fc:	4641      	mov	r1, r8
 80052fe:	4638      	mov	r0, r7
 8005300:	f00e fb04 	bl	801390c <f_findfirst>
				if(res == FR_OK)
 8005304:	b358      	cbz	r0, 800535e <getPresetNamesFromSDCard+0x102>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8005306:	3501      	adds	r5, #1
 8005308:	2d40      	cmp	r5, #64	; 0x40
 800530a:	d0b8      	beq.n	800527e <getPresetNamesFromSDCard+0x22>
				itoa(i, charBuf, 10);
 800530c:	220a      	movs	r2, #10
 800530e:	a902      	add	r1, sp, #8
 8005310:	4628      	mov	r0, r5
 8005312:	f017 fb07 	bl	801c924 <itoa>
				int len = ((strlen(charBuf)));
 8005316:	a802      	add	r0, sp, #8
 8005318:	f7fa ffde 	bl	80002d8 <strlen>
				if (len == 1)
 800531c:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 800531e:	4602      	mov	r2, r0
				if (len == 1)
 8005320:	d1de      	bne.n	80052e0 <getPresetNamesFromSDCard+0x84>
					finalString[2] = charBuf[1];
 8005322:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
 8005326:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
 8005328:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, ".ebp");
 800532c:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 800532e:	f88d 1016 	strb.w	r1, [sp, #22]
					finalString[1] = charBuf[0];
 8005332:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
 8005336:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 800533a:	f7fa ffcd 	bl	80002d8 <strlen>
 800533e:	aa05      	add	r2, sp, #20
 8005340:	4603      	mov	r3, r0
 8005342:	a905      	add	r1, sp, #20
 8005344:	4402      	add	r2, r0
 8005346:	6830      	ldr	r0, [r6, #0]
 8005348:	50c8      	str	r0, [r1, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 800534a:	4641      	mov	r1, r8
					strcat(finalString, ".ebp");
 800534c:	7933      	ldrb	r3, [r6, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 800534e:	4638      	mov	r0, r7
					strcat(finalString, ".ebp");
 8005350:	7113      	strb	r3, [r2, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005352:	ab05      	add	r3, sp, #20
 8005354:	464a      	mov	r2, r9
 8005356:	f00e fad9 	bl	801390c <f_findfirst>
				if(res == FR_OK)
 800535a:	2800      	cmp	r0, #0
 800535c:	d1d3      	bne.n	8005306 <getPresetNamesFromSDCard+0xaa>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 800535e:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 8005734 <getPresetNamesFromSDCard+0x4d8>
 8005362:	2211      	movs	r2, #17
 8005364:	49ef      	ldr	r1, [pc, #956]	; (8005724 <getPresetNamesFromSDCard+0x4c8>)
 8005366:	4658      	mov	r0, fp
 8005368:	f00d fdb2 	bl	8012ed0 <f_open>
 800536c:	2800      	cmp	r0, #0
 800536e:	d1ca      	bne.n	8005306 <getPresetNamesFromSDCard+0xaa>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8005370:	4ced      	ldr	r4, [pc, #948]	; (8005728 <getPresetNamesFromSDCard+0x4cc>)
 8005372:	ab01      	add	r3, sp, #4
 8005374:	f8db 200c 	ldr.w	r2, [fp, #12]
 8005378:	4658      	mov	r0, fp
 800537a:	4621      	mov	r1, r4
 800537c:	f00d ff26 	bl	80131cc <f_read>
						f_close(&SDFile);
 8005380:	4658      	mov	r0, fp
 8005382:	f00e f9b7 	bl	80136f4 <f_close>
							presetNamesArray[i][j] = buffer[bufferIndex];
 8005386:	7823      	ldrb	r3, [r4, #0]
 8005388:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 800538c:	4ae7      	ldr	r2, [pc, #924]	; (800572c <getPresetNamesFromSDCard+0x4d0>)
 800538e:	f894 c001 	ldrb.w	ip, [r4, #1]
 8005392:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
 8005396:	eb02 0241 	add.w	r2, r2, r1, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 800539a:	48e5      	ldr	r0, [pc, #916]	; (8005730 <getPresetNamesFromSDCard+0x4d4>)
							presetNamesArray[i][j] = buffer[bufferIndex];
 800539c:	f882 c001 	strb.w	ip, [r2, #1]
 80053a0:	f894 c002 	ldrb.w	ip, [r4, #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 80053a4:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80053a8:	0109      	lsls	r1, r1, #4
							presetNamesArray[i][j] = buffer[bufferIndex];
 80053aa:	f882 c002 	strb.w	ip, [r2, #2]
 80053ae:	f894 c003 	ldrb.w	ip, [r4, #3]
 80053b2:	f882 c003 	strb.w	ip, [r2, #3]
 80053b6:	f894 c004 	ldrb.w	ip, [r4, #4]
 80053ba:	f882 c004 	strb.w	ip, [r2, #4]
 80053be:	f894 c005 	ldrb.w	ip, [r4, #5]
 80053c2:	f882 c005 	strb.w	ip, [r2, #5]
 80053c6:	f894 c006 	ldrb.w	ip, [r4, #6]
 80053ca:	f882 c006 	strb.w	ip, [r2, #6]
 80053ce:	f894 c007 	ldrb.w	ip, [r4, #7]
 80053d2:	f882 c007 	strb.w	ip, [r2, #7]
 80053d6:	f894 c008 	ldrb.w	ip, [r4, #8]
 80053da:	f882 c008 	strb.w	ip, [r2, #8]
 80053de:	f894 c009 	ldrb.w	ip, [r4, #9]
 80053e2:	f882 c009 	strb.w	ip, [r2, #9]
 80053e6:	f894 c00a 	ldrb.w	ip, [r4, #10]
 80053ea:	f882 c00a 	strb.w	ip, [r2, #10]
 80053ee:	f894 c00b 	ldrb.w	ip, [r4, #11]
 80053f2:	f882 c00b 	strb.w	ip, [r2, #11]
 80053f6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80053fa:	f882 c00c 	strb.w	ip, [r2, #12]
 80053fe:	f894 c00d 	ldrb.w	ip, [r4, #13]
 8005402:	f882 c00d 	strb.w	ip, [r2, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8005406:	7ba2      	ldrb	r2, [r4, #14]
 8005408:	5442      	strb	r2, [r0, r1]
 800540a:	7be2      	ldrb	r2, [r4, #15]
 800540c:	705a      	strb	r2, [r3, #1]
 800540e:	7c22      	ldrb	r2, [r4, #16]
 8005410:	709a      	strb	r2, [r3, #2]
 8005412:	7c62      	ldrb	r2, [r4, #17]
 8005414:	70da      	strb	r2, [r3, #3]
 8005416:	7ca2      	ldrb	r2, [r4, #18]
 8005418:	711a      	strb	r2, [r3, #4]
 800541a:	7ce2      	ldrb	r2, [r4, #19]
 800541c:	715a      	strb	r2, [r3, #5]
 800541e:	7d22      	ldrb	r2, [r4, #20]
 8005420:	719a      	strb	r2, [r3, #6]
 8005422:	7d62      	ldrb	r2, [r4, #21]
 8005424:	71da      	strb	r2, [r3, #7]
 8005426:	7da2      	ldrb	r2, [r4, #22]
 8005428:	721a      	strb	r2, [r3, #8]
 800542a:	7de2      	ldrb	r2, [r4, #23]
 800542c:	725a      	strb	r2, [r3, #9]
 800542e:	7e22      	ldrb	r2, [r4, #24]
 8005430:	729a      	strb	r2, [r3, #10]
 8005432:	7e62      	ldrb	r2, [r4, #25]
 8005434:	72da      	strb	r2, [r3, #11]
 8005436:	7ea2      	ldrb	r2, [r4, #26]
 8005438:	731a      	strb	r2, [r3, #12]
 800543a:	7ee2      	ldrb	r2, [r4, #27]
 800543c:	735a      	strb	r2, [r3, #13]
 800543e:	7f22      	ldrb	r2, [r4, #28]
 8005440:	739a      	strb	r2, [r3, #14]
 8005442:	7f62      	ldrb	r2, [r4, #29]
 8005444:	73da      	strb	r2, [r3, #15]
 8005446:	7fa2      	ldrb	r2, [r4, #30]
 8005448:	741a      	strb	r2, [r3, #16]
 800544a:	7fe2      	ldrb	r2, [r4, #31]
 800544c:	745a      	strb	r2, [r3, #17]
 800544e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8005452:	749a      	strb	r2, [r3, #18]
 8005454:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8005458:	74da      	strb	r2, [r3, #19]
 800545a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800545e:	751a      	strb	r2, [r3, #20]
 8005460:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8005464:	755a      	strb	r2, [r3, #21]
 8005466:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800546a:	759a      	strb	r2, [r3, #22]
 800546c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8005470:	75da      	strb	r2, [r3, #23]
 8005472:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8005476:	761a      	strb	r2, [r3, #24]
 8005478:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800547c:	765a      	strb	r2, [r3, #25]
 800547e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8005482:	769a      	strb	r2, [r3, #26]
 8005484:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8005488:	76da      	strb	r2, [r3, #27]
 800548a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800548e:	771a      	strb	r2, [r3, #28]
 8005490:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8005494:	775a      	strb	r2, [r3, #29]
 8005496:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800549a:	779a      	strb	r2, [r3, #30]
 800549c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80054a0:	77da      	strb	r2, [r3, #31]
 80054a2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80054a6:	f883 2020 	strb.w	r2, [r3, #32]
 80054aa:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 80054ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80054b2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80054b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80054ba:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80054be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80054c2:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80054c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80054ca:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 80054ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80054d2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80054d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80054da:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80054de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80054e2:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80054e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80054ea:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 80054ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80054f2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80054f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80054fa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80054fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8005502:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8005506:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800550a:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 800550e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005512:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8005516:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800551a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800551e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8005522:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800552a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 800552e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005532:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005536:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800553a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800553e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8005542:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8005546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800554a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800554e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005552:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005556:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800555a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800555e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8005562:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8005566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800556a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800556e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8005572:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8005576:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800557a:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
 800557e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8005582:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800558a:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005592:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8005596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559a:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 800559e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a2:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055aa:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b2:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ba:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 80055be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c2:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 80055c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ca:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 80055ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 80055d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055da:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 80055de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80055e2:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 80055e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80055ea:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
 80055ee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80055f2:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 80055f6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 80055fa:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80055fe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8005602:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
 8005606:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800560a:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 800560e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005612:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 8005616:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800561a:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 800561e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 8005622:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8005626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800562a:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 800562e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8005632:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 8005636:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 800563a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 800563e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005642:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8005646:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800564a:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 800564e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8005652:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 8005656:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 800565a:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 800565e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8005662:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 8005666:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800566a:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 800566e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8005672:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8005676:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 800567a:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 800567e:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8005682:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8005686:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800568a:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
 800568e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005692:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8005696:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800569a:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 800569e:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80056a2:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
 80056a6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80056aa:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 80056ae:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80056b2:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 80056b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80056ba:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 80056be:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80056c2:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
 80056c6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80056ca:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
 80056ce:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80056d2:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 80056d6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80056da:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 80056de:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80056e2:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80056e6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80056ea:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
 80056ee:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80056f2:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 80056f6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80056fa:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 80056fe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8005702:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 8005706:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800570a:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 800570e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8005712:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8005716:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 800571a:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800571e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
						for (int j = 0; j < 8; j++)
 8005722:	e5f0      	b.n	8005306 <getPresetNamesFromSDCard+0xaa>
 8005724:	2001529a 	.word	0x2001529a
 8005728:	300001e0 	.word	0x300001e0
 800572c:	2407b040 	.word	0x2407b040
 8005730:	2407d3c0 	.word	0x2407d3c0
 8005734:	20019ae0 	.word	0x20019ae0

08005738 <SDRAM_init>:
{
 8005738:	b5d0      	push	{r4, r6, r7, lr}
	        __IO uint32_t tmpmrd = 0;
 800573a:	2300      	movs	r3, #0
{
 800573c:	b086      	sub	sp, #24
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800573e:	4c22      	ldr	r4, [pc, #136]	; (80057c8 <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005740:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
 8005742:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005744:	2310      	movs	r3, #16
 8005746:	2601      	movs	r6, #1
 8005748:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800574a:	a902      	add	r1, sp, #8
 800574c:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800574e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8005752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005756:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800575a:	f008 ffeb 	bl	800e734 <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
 800575e:	2064      	movs	r0, #100	; 0x64
 8005760:	f002 fe2a 	bl	80083b8 <HAL_Delay>
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8005764:	a902      	add	r1, sp, #8
 8005766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800576a:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800576c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005770:	2602      	movs	r6, #2
 8005772:	2710      	movs	r7, #16
 8005774:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8005778:	f008 ffdc 	bl	800e734 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800577c:	2003      	movs	r0, #3
 800577e:	2110      	movs	r1, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8005780:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005788:	2004      	movs	r0, #4
 800578a:	2100      	movs	r1, #0
 800578c:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8005790:	a902      	add	r1, sp, #8
 8005792:	4620      	mov	r0, r4
 8005794:	f008 ffce 	bl	800e734 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8005798:	f240 2032 	movw	r0, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800579c:	2204      	movs	r2, #4
 800579e:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 80057a0:	9001      	str	r0, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
 80057a2:	2001      	movs	r0, #1
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80057a4:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80057a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
 80057aa:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80057ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 80057b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80057b4:	4620      	mov	r0, r4
 80057b6:	f008 ffbd 	bl	800e734 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
 80057ba:	f640 0106 	movw	r1, #2054	; 0x806
 80057be:	4620      	mov	r0, r4
 80057c0:	f008 ffd8 	bl	800e774 <HAL_SDRAM_ProgramRefreshRate>
}
 80057c4:	b006      	add	sp, #24
 80057c6:	bdd0      	pop	{r4, r6, r7, pc}
 80057c8:	20013158 	.word	0x20013158

080057cc <handleSPI>:
{
 80057cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	interruptChecker = 1;
 80057d0:	4bc7      	ldr	r3, [pc, #796]	; (8005af0 <handleSPI+0x324>)
 80057d2:	2201      	movs	r2, #1
	if (SPI_LEVERS[offset] == ReceivingPitches)
 80057d4:	4dc7      	ldr	r5, [pc, #796]	; (8005af4 <handleSPI+0x328>)
{
 80057d6:	4604      	mov	r4, r0
 80057d8:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 1;
 80057dc:	701a      	strb	r2, [r3, #0]
	if (SPI_LEVERS[offset] == ReceivingPitches)
 80057de:	5c2b      	ldrb	r3, [r5, r0]
 80057e0:	4293      	cmp	r3, r2
 80057e2:	f000 80c0 	beq.w	8005966 <handleSPI+0x19a>
	else if (SPI_LEVERS[offset] == ReceivingPreset)
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	f000 8097 	beq.w	800591a <handleSPI+0x14e>
	else if (SPI_LEVERS[offset] == ReceivingKnobs)
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	f000 81bc 	beq.w	8005b6a <handleSPI+0x39e>
	else if (SPI_LEVERS[offset] == ReceivingEnd)
 80057f2:	2bfd      	cmp	r3, #253	; 0xfd
 80057f4:	f000 81a2 	beq.w	8005b3c <handleSPI+0x370>
		if (boardNumber == 0)
 80057f8:	4bbf      	ldr	r3, [pc, #764]	; (8005af8 <handleSPI+0x32c>)
 80057fa:	781f      	ldrb	r7, [r3, #0]
 80057fc:	2f00      	cmp	r7, #0
 80057fe:	f040 8088 	bne.w	8005912 <handleSPI+0x146>
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 8005802:	4ebe      	ldr	r6, [pc, #760]	; (8005afc <handleSPI+0x330>)
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 8005804:	1928      	adds	r0, r5, r4
 8005806:	23fd      	movs	r3, #253	; 0xfd
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8005808:	4dbd      	ldr	r5, [pc, #756]	; (8005b00 <handleSPI+0x334>)
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 800580a:	7834      	ldrb	r4, [r6, #0]
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 800580c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8005810:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 8005814:	f8df c31c 	ldr.w	ip, [pc, #796]	; 8005b34 <handleSPI+0x368>
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8005818:	f8df e31c 	ldr.w	lr, [pc, #796]	; 8005b38 <handleSPI+0x36c>
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 800581c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 8005820:	f89c 1000 	ldrb.w	r1, [ip]
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8005824:	ea4f 1803 	mov.w	r8, r3, lsl #4
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 8005828:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	5ceb      	ldrb	r3, [r5, r3]
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8005830:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8005834:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8005838:	eb08 0545 	add.w	r5, r8, r5, lsl #1
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
 800583c:	7853      	ldrb	r3, [r2, #1]
 800583e:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 8005842:	7893      	ldrb	r3, [r2, #2]
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 8005844:	f892 8003 	ldrb.w	r8, [r2, #3]
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 8005848:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 800584c:	eb0e 0305 	add.w	r3, lr, r5
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 8005850:	f880 8045 	strb.w	r8, [r0, #69]	; 0x45
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
 8005854:	f892 8004 	ldrb.w	r8, [r2, #4]
 8005858:	f880 8046 	strb.w	r8, [r0, #70]	; 0x46
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
 800585c:	f892 8005 	ldrb.w	r8, [r2, #5]
 8005860:	f880 8047 	strb.w	r8, [r0, #71]	; 0x47
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
 8005864:	f892 8006 	ldrb.w	r8, [r2, #6]
 8005868:	f880 8048 	strb.w	r8, [r0, #72]	; 0x48
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
 800586c:	f892 8007 	ldrb.w	r8, [r2, #7]
 8005870:	f880 8049 	strb.w	r8, [r0, #73]	; 0x49
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
 8005874:	f892 8008 	ldrb.w	r8, [r2, #8]
 8005878:	f880 804a 	strb.w	r8, [r0, #74]	; 0x4a
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
 800587c:	f892 8009 	ldrb.w	r8, [r2, #9]
 8005880:	f880 804b 	strb.w	r8, [r0, #75]	; 0x4b
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
 8005884:	f892 800a 	ldrb.w	r8, [r2, #10]
 8005888:	f880 804c 	strb.w	r8, [r0, #76]	; 0x4c
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
 800588c:	f892 800b 	ldrb.w	r8, [r2, #11]
 8005890:	f880 804d 	strb.w	r8, [r0, #77]	; 0x4d
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 8005894:	f892 800c 	ldrb.w	r8, [r2, #12]
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 8005898:	7b52      	ldrb	r2, [r2, #13]
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 800589a:	f880 804e 	strb.w	r8, [r0, #78]	; 0x4e
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 800589e:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 80058a2:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
			whichMacroToSendName = (whichMacroToSendName + 1);
 80058a6:	3101      	adds	r1, #1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 80058a8:	f81e 2005 	ldrb.w	r2, [lr, r5]
			whichMacroToSendName = (whichMacroToSendName + 1);
 80058ac:	b2c9      	uxtb	r1, r1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 80058ae:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
 80058b2:	785a      	ldrb	r2, [r3, #1]
			if (whichMacroToSendName >= 8)
 80058b4:	2907      	cmp	r1, #7
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
 80058b6:	f880 2052 	strb.w	r2, [r0, #82]	; 0x52
			SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
 80058ba:	789a      	ldrb	r2, [r3, #2]
 80058bc:	f880 2053 	strb.w	r2, [r0, #83]	; 0x53
			SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
 80058c0:	78da      	ldrb	r2, [r3, #3]
 80058c2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
 80058c6:	791a      	ldrb	r2, [r3, #4]
 80058c8:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
			SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
 80058cc:	795a      	ldrb	r2, [r3, #5]
 80058ce:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
			SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
 80058d2:	799a      	ldrb	r2, [r3, #6]
 80058d4:	f880 2057 	strb.w	r2, [r0, #87]	; 0x57
			SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
 80058d8:	79da      	ldrb	r2, [r3, #7]
 80058da:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
			SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
 80058de:	7a1a      	ldrb	r2, [r3, #8]
 80058e0:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
			SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
 80058e4:	7a5a      	ldrb	r2, [r3, #9]
 80058e6:	f880 205a 	strb.w	r2, [r0, #90]	; 0x5a
			SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
 80058ea:	7a9a      	ldrb	r2, [r3, #10]
 80058ec:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
			SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
 80058f0:	7ada      	ldrb	r2, [r3, #11]
 80058f2:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
 80058f6:	7b1a      	ldrb	r2, [r3, #12]
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
 80058f8:	7b5b      	ldrb	r3, [r3, #13]
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
 80058fa:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
 80058fe:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
			SPI_LEVERS_TX[offset+31] = 254;
 8005902:	f04f 03fe 	mov.w	r3, #254	; 0xfe
 8005906:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
			if (whichMacroToSendName >= 8)
 800590a:	f200 80e7 	bhi.w	8005adc <handleSPI+0x310>
			whichMacroToSendName = (whichMacroToSendName + 1);
 800590e:	f88c 1000 	strb.w	r1, [ip]
}
 8005912:	ecbd 8b02 	vpop	{d8}
 8005916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		 if (writingState != ReceivingPreset)
 800591a:	497a      	ldr	r1, [pc, #488]	; (8005b04 <handleSPI+0x338>)
 800591c:	7808      	ldrb	r0, [r1, #0]
 800591e:	2802      	cmp	r0, #2
 8005920:	f000 8121 	beq.w	8005b66 <handleSPI+0x39a>
			 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
 8005924:	700b      	strb	r3, [r1, #0]
			 diskBusy = 1;
 8005926:	4978      	ldr	r1, [pc, #480]	; (8005b08 <handleSPI+0x33c>)
			 audioMasterLevel = 0.0f;
 8005928:	4b78      	ldr	r3, [pc, #480]	; (8005b0c <handleSPI+0x340>)
			 diskBusy = 1;
 800592a:	700a      	strb	r2, [r1, #0]
			 audioMasterLevel = 0.0f;
 800592c:	2200      	movs	r2, #0
			 bufferPos = 0;
 800592e:	4878      	ldr	r0, [pc, #480]	; (8005b10 <handleSPI+0x344>)
			 audioMasterLevel = 0.0f;
 8005930:	601a      	str	r2, [r3, #0]
			 bufferPos = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	8003      	strh	r3, [r0, #0]
		 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
 8005936:	1ca6      	adds	r6, r4, #2
		 presetNumberToSave = SPI_LEVERS[offset + 1];
 8005938:	192a      	adds	r2, r5, r4
 800593a:	4976      	ldr	r1, [pc, #472]	; (8005b14 <handleSPI+0x348>)
 800593c:	b2f3      	uxtb	r3, r6
 800593e:	7852      	ldrb	r2, [r2, #1]
 8005940:	4e75      	ldr	r6, [pc, #468]	; (8005b18 <handleSPI+0x34c>)
 8005942:	700a      	strb	r2, [r1, #0]
		 for (int i = 0; i < 28; i++)
 8005944:	1e59      	subs	r1, r3, #1
 8005946:	441e      	add	r6, r3
 8005948:	4f74      	ldr	r7, [pc, #464]	; (8005b1c <handleSPI+0x350>)
 800594a:	4429      	add	r1, r5
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 800594c:	8803      	ldrh	r3, [r0, #0]
 800594e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005952:	b29b      	uxth	r3, r3
		 for (int i = 0; i < 28; i++)
 8005954:	42b1      	cmp	r1, r6
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 8005956:	f103 0201 	add.w	r2, r3, #1
 800595a:	f807 c003 	strb.w	ip, [r7, r3]
 800595e:	b293      	uxth	r3, r2
 8005960:	8003      	strh	r3, [r0, #0]
		 for (int i = 0; i < 28; i++)
 8005962:	d1f3      	bne.n	800594c <handleSPI+0x180>
 8005964:	e748      	b.n	80057f8 <handleSPI+0x2c>
		 for (int i = 0; i < numStringsThisBoard; i++)
 8005966:	4b6e      	ldr	r3, [pc, #440]	; (8005b20 <handleSPI+0x354>)
 8005968:	7818      	ldrb	r0, [r3, #0]
 800596a:	2800      	cmp	r0, #0
 800596c:	f000 80b2 	beq.w	8005ad4 <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8005970:	496c      	ldr	r1, [pc, #432]	; (8005b24 <handleSPI+0x358>)
		 uint8_t currentByte = offset+1;
 8005972:	18a3      	adds	r3, r4, r2
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8005974:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 8005b28 <handleSPI+0x35c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8005978:	680a      	ldr	r2, [r1, #0]
 800597a:	b2db      	uxtb	r3, r3
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 800597c:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8005b2c <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8005980:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8005984:	5cd2      	ldrb	r2, [r2, r3]
 8005986:	0212      	lsls	r2, r2, #8
 8005988:	ee07 2a90 	vmov	s15, r2
 800598c:	680a      	ldr	r2, [r1, #0]
 800598e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8005992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005996:	441a      	add	r2, r3
 8005998:	7852      	ldrb	r2, [r2, #1]
 800599a:	ee07 2a90 	vmov	s15, r2
 800599e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059a2:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80059a6:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80059aa:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80059ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b2:	d507      	bpl.n	80059c4 <handleSPI+0x1f8>
 80059b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80059b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059bc:	dd02      	ble.n	80059c4 <handleSPI+0x1f8>
				stringMIDIPitches[i] = myPitch;
 80059be:	4a5c      	ldr	r2, [pc, #368]	; (8005b30 <handleSPI+0x364>)
 80059c0:	ed82 7a00 	vstr	s14, [r2]
		 for (int i = 0; i < numStringsThisBoard; i++)
 80059c4:	2801      	cmp	r0, #1
 80059c6:	f000 8085 	beq.w	8005ad4 <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80059ca:	680a      	ldr	r2, [r1, #0]
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80059cc:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8005b28 <handleSPI+0x35c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80059d0:	3201      	adds	r2, #1
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80059d2:	eddf 6a56 	vldr	s13, [pc, #344]	; 8005b2c <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80059d6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80059da:	5cd2      	ldrb	r2, [r2, r3]
 80059dc:	0212      	lsls	r2, r2, #8
 80059de:	ee07 2a90 	vmov	s15, r2
 80059e2:	680a      	ldr	r2, [r1, #0]
 80059e4:	3201      	adds	r2, #1
 80059e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059ea:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80059ee:	441a      	add	r2, r3
 80059f0:	7852      	ldrb	r2, [r2, #1]
 80059f2:	ee07 2a90 	vmov	s15, r2
 80059f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059fa:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80059fe:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8005a02:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8005a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0a:	d507      	bpl.n	8005a1c <handleSPI+0x250>
 8005a0c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a14:	dd02      	ble.n	8005a1c <handleSPI+0x250>
				stringMIDIPitches[i] = myPitch;
 8005a16:	4a46      	ldr	r2, [pc, #280]	; (8005b30 <handleSPI+0x364>)
 8005a18:	ed82 7a01 	vstr	s14, [r2, #4]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8005a1c:	2802      	cmp	r0, #2
 8005a1e:	d059      	beq.n	8005ad4 <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8005a20:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8005a22:	eddf 6a42 	vldr	s13, [pc, #264]	; 8005b2c <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8005a26:	3202      	adds	r2, #2
 8005a28:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8005a2c:	5cd2      	ldrb	r2, [r2, r3]
 8005a2e:	0212      	lsls	r2, r2, #8
 8005a30:	ee07 2a90 	vmov	s15, r2
 8005a34:	680a      	ldr	r2, [r1, #0]
 8005a36:	3202      	adds	r2, #2
 8005a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a3c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8005a40:	441a      	add	r2, r3
 8005a42:	7852      	ldrb	r2, [r2, #1]
 8005a44:	ee07 2a90 	vmov	s15, r2
 8005a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8005a50:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8005a54:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a5c:	dd09      	ble.n	8005a72 <handleSPI+0x2a6>
 8005a5e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005b28 <handleSPI+0x35c>
 8005a62:	eef4 7a66 	vcmp.f32	s15, s13
 8005a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6a:	d502      	bpl.n	8005a72 <handleSPI+0x2a6>
				stringMIDIPitches[i] = myPitch;
 8005a6c:	4a30      	ldr	r2, [pc, #192]	; (8005b30 <handleSPI+0x364>)
 8005a6e:	ed82 7a02 	vstr	s14, [r2, #8]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8005a72:	2803      	cmp	r0, #3
 8005a74:	d02e      	beq.n	8005ad4 <handleSPI+0x308>
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8005a76:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8005b2c <handleSPI+0x360>
		 for (int i = 0; i < numStringsThisBoard; i++)
 8005a7a:	2603      	movs	r6, #3
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8005a7c:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8005b28 <handleSPI+0x35c>
 8005a80:	4f2b      	ldr	r7, [pc, #172]	; (8005b30 <handleSPI+0x364>)
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8005a82:	680a      	ldr	r2, [r1, #0]
 8005a84:	4432      	add	r2, r6
 8005a86:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8005a8a:	5cd2      	ldrb	r2, [r2, r3]
 8005a8c:	0212      	lsls	r2, r2, #8
 8005a8e:	ee07 2a90 	vmov	s15, r2
 8005a92:	680a      	ldr	r2, [r1, #0]
 8005a94:	4432      	add	r2, r6
 8005a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8005aa0:	441a      	add	r2, r3
 8005aa2:	7852      	ldrb	r2, [r2, #1]
 8005aa4:	ee07 2a90 	vmov	s15, r2
 8005aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aac:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8005ab0:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8005ab4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005abc:	dd06      	ble.n	8005acc <handleSPI+0x300>
 8005abe:	eef4 7a46 	vcmp.f32	s15, s12
 8005ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				stringMIDIPitches[i] = myPitch;
 8005ac6:	bf48      	it	mi
 8005ac8:	ed87 7a03 	vstrmi	s14, [r7, #12]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8005acc:	42b0      	cmp	r0, r6
 8005ace:	f107 0704 	add.w	r7, r7, #4
 8005ad2:	dcd6      	bgt.n	8005a82 <handleSPI+0x2b6>
		 updateStateFromSPIMessage(offset);
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f7fb fa37 	bl	8000f48 <updateStateFromSPIMessage>
 8005ada:	e68d      	b.n	80057f8 <handleSPI+0x2c>
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 8005adc:	3401      	adds	r4, #1
				whichMacroToSendName = 0;
 8005ade:	f88c 7000 	strb.w	r7, [ip]
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 8005ae2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8005ae6:	7034      	strb	r4, [r6, #0]
}
 8005ae8:	ecbd 8b02 	vpop	{d8}
 8005aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af0:	2001539d 	.word	0x2001539d
 8005af4:	30000100 	.word	0x30000100
 8005af8:	200131e0 	.word	0x200131e0
 8005afc:	20019275 	.word	0x20019275
 8005b00:	2407b040 	.word	0x2407b040
 8005b04:	20019276 	.word	0x20019276
 8005b08:	20013220 	.word	0x20013220
 8005b0c:	20000278 	.word	0x20000278
 8005b10:	200131e2 	.word	0x200131e2
 8005b14:	20016e66 	.word	0x20016e66
 8005b18:	3000011b 	.word	0x3000011b
 8005b1c:	300001e0 	.word	0x300001e0
 8005b20:	20000052 	.word	0x20000052
 8005b24:	2000465c 	.word	0x2000465c
 8005b28:	478bff74 	.word	0x478bff74
 8005b2c:	3b000080 	.word	0x3b000080
 8005b30:	20013080 	.word	0x20013080
 8005b34:	20019274 	.word	0x20019274
 8005b38:	2407d3c0 	.word	0x2407d3c0
		if(writingState == ReceivingPreset)
 8005b3c:	4b24      	ldr	r3, [pc, #144]	; (8005bd0 <handleSPI+0x404>)
 8005b3e:	781a      	ldrb	r2, [r3, #0]
 8005b40:	2a02      	cmp	r2, #2
 8005b42:	f47f ae59 	bne.w	80057f8 <handleSPI+0x2c>
			 presetWaitingToParse = bufferPos;
 8005b46:	4923      	ldr	r1, [pc, #140]	; (8005bd4 <handleSPI+0x408>)
			 writingState = 0;
 8005b48:	2200      	movs	r2, #0
			 presetNumberToLoad = presetNumberToSave;
 8005b4a:	4823      	ldr	r0, [pc, #140]	; (8005bd8 <handleSPI+0x40c>)
			 writingState = 0;
 8005b4c:	701a      	strb	r2, [r3, #0]
			 presetNumberToLoad = presetNumberToSave;
 8005b4e:	7800      	ldrb	r0, [r0, #0]
			 presetWaitingToParse = bufferPos;
 8005b50:	880a      	ldrh	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 8005b52:	880b      	ldrh	r3, [r1, #0]
			 presetNumberToLoad = presetNumberToSave;
 8005b54:	4921      	ldr	r1, [pc, #132]	; (8005bdc <handleSPI+0x410>)
			 presetWaitingToParse = bufferPos;
 8005b56:	b292      	uxth	r2, r2
			 presetWaitingToWrite = bufferPos;
 8005b58:	b29b      	uxth	r3, r3
			 presetNumberToLoad = presetNumberToSave;
 8005b5a:	7008      	strb	r0, [r1, #0]
			 presetWaitingToParse = bufferPos;
 8005b5c:	4920      	ldr	r1, [pc, #128]	; (8005be0 <handleSPI+0x414>)
 8005b5e:	600a      	str	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 8005b60:	4a20      	ldr	r2, [pc, #128]	; (8005be4 <handleSPI+0x418>)
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	e648      	b.n	80057f8 <handleSPI+0x2c>
 8005b66:	481b      	ldr	r0, [pc, #108]	; (8005bd4 <handleSPI+0x408>)
 8005b68:	e6e5      	b.n	8005936 <handleSPI+0x16a>
		 uint8_t currentByte = offset+1;
 8005b6a:	1c47      	adds	r7, r0, #1
 8005b6c:	4e1e      	ldr	r6, [pc, #120]	; (8005be8 <handleSPI+0x41c>)
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8005b6e:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8005bec <handleSPI+0x420>
 8005b72:	fa55 f787 	uxtab	r7, r5, r7
 8005b76:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8005b7a:	f817 3b01 	ldrb.w	r3, [r7], #1
 8005b7e:	4630      	mov	r0, r6
			for (int i = 0; i < 12; i++)
 8005b80:	3604      	adds	r6, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8005b82:	ee00 3a10 	vmov	s0, r3
 8005b86:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8005b8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005b8e:	f00e ffcd 	bl	8014b2c <tExpSmooth_setDest>
			for (int i = 0; i < 12; i++)
 8005b92:	4546      	cmp	r6, r8
 8005b94:	d1f1      	bne.n	8005b7a <handleSPI+0x3ae>
			currentByte += 12;
 8005b96:	f104 070d 	add.w	r7, r4, #13
 8005b9a:	4e15      	ldr	r6, [pc, #84]	; (8005bf0 <handleSPI+0x424>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8005b9c:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8005bec <handleSPI+0x420>
 8005ba0:	b2ff      	uxtb	r7, r7
 8005ba2:	f106 0828 	add.w	r8, r6, #40	; 0x28
 8005ba6:	3f01      	subs	r7, #1
 8005ba8:	442f      	add	r7, r5
 8005baa:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8005bae:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
 8005bb0:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8005bb2:	ee00 3a10 	vmov	s0, r3
 8005bb6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8005bba:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005bbe:	f00e ffb5 	bl	8014b2c <tExpSmooth_setDest>
			for (int i = 0; i < 10; i++)
 8005bc2:	4546      	cmp	r6, r8
 8005bc4:	d1f1      	bne.n	8005baa <handleSPI+0x3de>
		 updateStateFromSPIMessage(offset);
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f7fb f9be 	bl	8000f48 <updateStateFromSPIMessage>
 8005bcc:	e614      	b.n	80057f8 <handleSPI+0x2c>
 8005bce:	bf00      	nop
 8005bd0:	20019276 	.word	0x20019276
 8005bd4:	200131e2 	.word	0x200131e2
 8005bd8:	20016e66 	.word	0x20016e66
 8005bdc:	20000280 	.word	0x20000280
 8005be0:	20016e6c 	.word	0x20016e6c
 8005be4:	20016e70 	.word	0x20016e70
 8005be8:	20004774 	.word	0x20004774
 8005bec:	3b808081 	.word	0x3b808081
 8005bf0:	20004b58 	.word	0x20004b58

08005bf4 <parsePreset>:


void __ATTR_ITCMRAM parsePreset(int size, int presetNumber)
{
 8005bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf8:	b087      	sub	sp, #28
 8005bfa:	460e      	mov	r6, r1
 8005bfc:	9000      	str	r0, [sp, #0]
 8005bfe:	9105      	str	r1, [sp, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005c00:	b672      	cpsid	i
	//turn off the volume while changing parameters
	 __disable_irq();
	 presetReady = 0;
 8005c02:	2500      	movs	r5, #0
 8005c04:	4beb      	ldr	r3, [pc, #940]	; (8005fb4 <parsePreset+0x3c0>)

	uint16_t bufferIndex = 0;
	//read first 14 items in buffer as the 14 character string that is the name of the preset
	for (int i = 0; i < 14; i++)
	{
		presetName[i] = buffer[bufferIndex];
 8005c06:	4cec      	ldr	r4, [pc, #944]	; (8005fb8 <parsePreset+0x3c4>)
		 audioOutBuffer[i] = 0;
 8005c08:	2280      	movs	r2, #128	; 0x80
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	48eb      	ldr	r0, [pc, #940]	; (8005fbc <parsePreset+0x3c8>)
	audioMasterLevel = 0.0f;
 8005c0e:	f04f 0b00 	mov.w	fp, #0
	 presetReady = 0;
 8005c12:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
 8005c14:	f016 fe96 	bl	801c944 <memset>
	audioMasterLevel = 0.0f;
 8005c18:	49e9      	ldr	r1, [pc, #932]	; (8005fc0 <parsePreset+0x3cc>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c1a:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
		presetName[i] = buffer[bufferIndex];
 8005c1e:	78e6      	ldrb	r6, [r4, #3]
 8005c20:	4be8      	ldr	r3, [pc, #928]	; (8005fc4 <parsePreset+0x3d0>)
	audioMasterLevel = 0.0f;
 8005c22:	f8c1 b000 	str.w	fp, [r1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c26:	ea4f 0b40 	mov.w	fp, r0, lsl #1
		presetName[i] = buffer[bufferIndex];
 8005c2a:	f894 c004 	ldrb.w	ip, [r4, #4]
 8005c2e:	f894 a000 	ldrb.w	sl, [r4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c32:	49e5      	ldr	r1, [pc, #916]	; (8005fc8 <parsePreset+0x3d4>)
 8005c34:	4ae4      	ldr	r2, [pc, #912]	; (8005fc8 <parsePreset+0x3d4>)
		presetName[i] = buffer[bufferIndex];
 8005c36:	9601      	str	r6, [sp, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c38:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005c3c:	f801 a00b 	strb.w	sl, [r1, fp]
		presetName[i] = buffer[bufferIndex];
 8005c40:	78a7      	ldrb	r7, [r4, #2]
 8005c42:	f894 8001 	ldrb.w	r8, [r4, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c46:	9901      	ldr	r1, [sp, #4]
		presetName[i] = buffer[bufferIndex];
 8005c48:	f8cd c008 	str.w	ip, [sp, #8]
 8005c4c:	f883 c004 	strb.w	ip, [r3, #4]
 8005c50:	f894 c005 	ldrb.w	ip, [r4, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c54:	f882 8001 	strb.w	r8, [r2, #1]
		presetName[i] = buffer[bufferIndex];
 8005c58:	f894 9007 	ldrb.w	r9, [r4, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c5c:	7097      	strb	r7, [r2, #2]
		presetName[i] = buffer[bufferIndex];
 8005c5e:	f894 e009 	ldrb.w	lr, [r4, #9]
 8005c62:	70de      	strb	r6, [r3, #3]
 8005c64:	f883 c005 	strb.w	ip, [r3, #5]
 8005c68:	7a26      	ldrb	r6, [r4, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c6a:	70d1      	strb	r1, [r2, #3]
		presetName[i] = buffer[bufferIndex];
 8005c6c:	f8cd c00c 	str.w	ip, [sp, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c70:	9902      	ldr	r1, [sp, #8]
		presetName[i] = buffer[bufferIndex];
 8005c72:	f894 c006 	ldrb.w	ip, [r4, #6]
 8005c76:	709f      	strb	r7, [r3, #2]
 8005c78:	f883 c006 	strb.w	ip, [r3, #6]
 8005c7c:	721e      	strb	r6, [r3, #8]
 8005c7e:	f883 a000 	strb.w	sl, [r3]
 8005c82:	f883 8001 	strb.w	r8, [r3, #1]
 8005c86:	f8cd c010 	str.w	ip, [sp, #16]
 8005c8a:	f883 9007 	strb.w	r9, [r3, #7]
 8005c8e:	f894 c00a 	ldrb.w	ip, [r4, #10]
 8005c92:	f883 e009 	strb.w	lr, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c96:	7111      	strb	r1, [r2, #4]
 8005c98:	9903      	ldr	r1, [sp, #12]
		presetName[i] = buffer[bufferIndex];
 8005c9a:	7ae7      	ldrb	r7, [r4, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005c9c:	7151      	strb	r1, [r2, #5]
 8005c9e:	9904      	ldr	r1, [sp, #16]
		presetName[i] = buffer[bufferIndex];
 8005ca0:	72df      	strb	r7, [r3, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005ca2:	7191      	strb	r1, [r2, #6]
 8005ca4:	f882 9007 	strb.w	r9, [r2, #7]
 8005ca8:	7216      	strb	r6, [r2, #8]
 8005caa:	f882 e009 	strb.w	lr, [r2, #9]
 8005cae:	f882 c00a 	strb.w	ip, [r2, #10]
 8005cb2:	72d7      	strb	r7, [r2, #11]
		presetName[i] = buffer[bufferIndex];
 8005cb4:	7b27      	ldrb	r7, [r4, #12]
	for (int j = 0; j < 8; j++)
	{
		for (int k = 0; k < 14; k++)
		{

			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005cb6:	49c5      	ldr	r1, [pc, #788]	; (8005fcc <parsePreset+0x3d8>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005cb8:	7317      	strb	r7, [r2, #12]
		presetName[i] = buffer[bufferIndex];
 8005cba:	731f      	strb	r7, [r3, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005cbc:	eb01 1600 	add.w	r6, r1, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
 8005cc0:	7b67      	ldrb	r7, [r4, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005cc2:	0100      	lsls	r0, r0, #4
		presetName[i] = buffer[bufferIndex];
 8005cc4:	f883 c00a 	strb.w	ip, [r3, #10]
 8005cc8:	735f      	strb	r7, [r3, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005cca:	7ba3      	ldrb	r3, [r4, #14]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005ccc:	7357      	strb	r7, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005cce:	540b      	strb	r3, [r1, r0]
 8005cd0:	7be3      	ldrb	r3, [r4, #15]
 8005cd2:	7073      	strb	r3, [r6, #1]
 8005cd4:	7c23      	ldrb	r3, [r4, #16]
 8005cd6:	70b3      	strb	r3, [r6, #2]
 8005cd8:	7c63      	ldrb	r3, [r4, #17]
 8005cda:	70f3      	strb	r3, [r6, #3]
 8005cdc:	7ca3      	ldrb	r3, [r4, #18]
 8005cde:	7133      	strb	r3, [r6, #4]
 8005ce0:	7ce3      	ldrb	r3, [r4, #19]
 8005ce2:	7173      	strb	r3, [r6, #5]
 8005ce4:	7d23      	ldrb	r3, [r4, #20]
 8005ce6:	71b3      	strb	r3, [r6, #6]
 8005ce8:	7d63      	ldrb	r3, [r4, #21]
 8005cea:	71f3      	strb	r3, [r6, #7]
 8005cec:	7da3      	ldrb	r3, [r4, #22]
 8005cee:	7233      	strb	r3, [r6, #8]
 8005cf0:	7de3      	ldrb	r3, [r4, #23]
 8005cf2:	7273      	strb	r3, [r6, #9]
 8005cf4:	7e23      	ldrb	r3, [r4, #24]
 8005cf6:	72b3      	strb	r3, [r6, #10]
 8005cf8:	7e63      	ldrb	r3, [r4, #25]
 8005cfa:	72f3      	strb	r3, [r6, #11]
 8005cfc:	7ea3      	ldrb	r3, [r4, #26]
 8005cfe:	7333      	strb	r3, [r6, #12]
 8005d00:	7ee3      	ldrb	r3, [r4, #27]
 8005d02:	7373      	strb	r3, [r6, #13]
 8005d04:	7f23      	ldrb	r3, [r4, #28]
 8005d06:	73b3      	strb	r3, [r6, #14]
 8005d08:	7f63      	ldrb	r3, [r4, #29]
 8005d0a:	73f3      	strb	r3, [r6, #15]
 8005d0c:	7fa3      	ldrb	r3, [r4, #30]
 8005d0e:	7433      	strb	r3, [r6, #16]
 8005d10:	7fe3      	ldrb	r3, [r4, #31]
 8005d12:	7473      	strb	r3, [r6, #17]
 8005d14:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005d18:	74b3      	strb	r3, [r6, #18]
 8005d1a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8005d1e:	74f3      	strb	r3, [r6, #19]
 8005d20:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005d24:	7533      	strb	r3, [r6, #20]
 8005d26:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005d2a:	7573      	strb	r3, [r6, #21]
 8005d2c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005d30:	75b3      	strb	r3, [r6, #22]
 8005d32:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8005d36:	75f3      	strb	r3, [r6, #23]
 8005d38:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8005d3c:	7633      	strb	r3, [r6, #24]
 8005d3e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8005d42:	7673      	strb	r3, [r6, #25]
 8005d44:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005d48:	76b3      	strb	r3, [r6, #26]
 8005d4a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8005d4e:	76f3      	strb	r3, [r6, #27]
 8005d50:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005d54:	7733      	strb	r3, [r6, #28]
 8005d56:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8005d5a:	7773      	strb	r3, [r6, #29]
 8005d5c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005d60:	77b3      	strb	r3, [r6, #30]
 8005d62:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8005d66:	77f3      	strb	r3, [r6, #31]
 8005d68:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8005d6c:	f886 3020 	strb.w	r3, [r6, #32]
 8005d70:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005d74:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
 8005d78:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005d7c:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
 8005d80:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8005d84:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
 8005d88:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005d8c:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 8005d90:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 8005d94:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
 8005d98:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005d9c:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
 8005da0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005da4:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
 8005da8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005dac:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8005db0:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8005db4:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 8005db8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005dbc:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
 8005dc0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8005dc4:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
 8005dc8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8005dcc:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 8005dd0:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8005dd4:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
 8005dd8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005ddc:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
 8005de0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005de4:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
 8005de8:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005dec:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 8005df0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8005df4:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
 8005df8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005dfc:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
 8005e00:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005e04:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
 8005e08:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005e0c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
 8005e10:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005e14:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
 8005e18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005e1c:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 8005e20:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005e24:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
 8005e28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005e2c:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
 8005e30:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8005e34:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
 8005e38:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8005e3c:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
 8005e40:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8005e44:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
 8005e48:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8005e4c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 8005e50:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8005e54:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
 8005e58:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005e5c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
 8005e60:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8005e64:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
 8005e68:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8005e6c:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
 8005e70:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8005e74:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
 8005e78:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005e7c:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
 8005e80:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005e84:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
 8005e88:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8005e8c:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
 8005e90:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8005e94:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
 8005e98:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8005e9c:	f886 3046 	strb.w	r3, [r6, #70]	; 0x46
 8005ea0:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8005ea4:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
 8005ea8:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8005eac:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
 8005eb0:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8005eb4:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
 8005eb8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005ebc:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
 8005ec0:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8005ec4:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
 8005ec8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8005ecc:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8005ed0:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 8005ed4:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
 8005ed8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8005edc:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8005ee0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005ee4:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
 8005ee8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8005eec:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005ef0:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8005ef4:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
 8005ef8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8005efc:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
 8005f00:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8005f04:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
 8005f08:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8005f0c:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
 8005f10:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
 8005f14:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
 8005f18:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8005f1c:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
 8005f20:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 8005f24:	f886 3057 	strb.w	r3, [r6, #87]	; 0x57
 8005f28:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8005f2c:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
 8005f30:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8005f34:	f886 3059 	strb.w	r3, [r6, #89]	; 0x59
 8005f38:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8005f3c:	f886 305a 	strb.w	r3, [r6, #90]	; 0x5a
 8005f40:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8005f44:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
 8005f48:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8005f4c:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
 8005f50:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8005f54:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8005f58:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8005f5c:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
 8005f60:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8005f64:	f886 305f 	strb.w	r3, [r6, #95]	; 0x5f
 8005f68:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 8005f6c:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
 8005f70:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
 8005f74:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
 8005f78:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8005f7c:	f886 3062 	strb.w	r3, [r6, #98]	; 0x62
 8005f80:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
 8005f84:	f886 3063 	strb.w	r3, [r6, #99]	; 0x63
 8005f88:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8005f8c:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
 8005f90:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
 8005f94:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
 8005f98:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005f9c:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
 8005fa0:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
		}
	}


	//read first element in buffer (after the 14 character name) as a count of how many parameters
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 8005fa4:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005fa8:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
 8005fac:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8005fb0:	e00e      	b.n	8005fd0 <parsePreset+0x3dc>
 8005fb2:	bf00      	nop
 8005fb4:	20004b98 	.word	0x20004b98
 8005fb8:	300001e0 	.word	0x300001e0
 8005fbc:	30000000 	.word	0x30000000
 8005fc0:	20000278 	.word	0x20000278
 8005fc4:	20016e58 	.word	0x20016e58
 8005fc8:	2407b040 	.word	0x2407b040
 8005fcc:	2407d3c0 	.word	0x2407d3c0
 8005fd0:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
 8005fd4:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8005fd8:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
 8005fdc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8005fe0:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
 8005fe4:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8005fe8:	f886 306b 	strb.w	r3, [r6, #107]	; 0x6b
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 8005fec:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 8005ff0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005ff4:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 8005ff8:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 8005ffc:	b29b      	uxth	r3, r3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005ffe:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 8006002:	f886 206d 	strb.w	r2, [r6, #109]	; 0x6d
 8006006:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 800600a:	f886 206e 	strb.w	r2, [r6, #110]	; 0x6e
 800600e:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 8006012:	f886 206f 	strb.w	r2, [r6, #111]	; 0x6f
	if (paramCount > size)
 8006016:	9a00      	ldr	r2, [sp, #0]
 8006018:	4293      	cmp	r3, r2
 800601a:	dc0d      	bgt.n	8006038 <parsePreset+0x444>
		return;
	}

	//check the validity of the transfer by verifying that the param array and mapping arrays both end with the required 0xefef values
	//should make this a real checksum
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
 800601c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	if (paramEndCheck != 0xefef)
 8006020:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
 8006024:	005f      	lsls	r7, r3, #1
 8006026:	f891 6080 	ldrb.w	r6, [r1, #128]	; 0x80
 800602a:	f891 2081 	ldrb.w	r2, [r1, #129]	; 0x81
 800602e:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	if (paramEndCheck != 0xefef)
 8006032:	b292      	uxth	r2, r2
 8006034:	4282      	cmp	r2, r0
 8006036:	d009      	beq.n	800604c <parsePreset+0x458>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
	{
		//error in transmission - give up and don't parse!
		audioMasterLevel = 1.0f;
		presetWaitingToParse = 0;
 8006038:	4ac4      	ldr	r2, [pc, #784]	; (800634c <parsePreset+0x758>)
		audioMasterLevel = 1.0f;
 800603a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
 800603e:	6015      	str	r5, [r2, #0]
		audioMasterLevel = 1.0f;
 8006040:	4ac3      	ldr	r2, [pc, #780]	; (8006350 <parsePreset+0x75c>)
 8006042:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006044:	b662      	cpsie	i
	overSampled = 1;
	numEffectToTick = totalEffects;
	filterToTick = totalFilters;
	__enable_irq();
	presetReady = 1;
}
 8006046:	b007      	add	sp, #28
 8006048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 800604c:	f891 0082 	ldrb.w	r0, [r1, #130]	; 0x82
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 8006050:	b2ba      	uxth	r2, r7
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 8006052:	f891 b083 	ldrb.w	fp, [r1, #131]	; 0x83
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 8006056:	f102 0184 	add.w	r1, r2, #132	; 0x84
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 800605a:	eb0b 2b00 	add.w	fp, fp, r0, lsl #8
 800605e:	fa1f fb8b 	uxth.w	fp, fp
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 8006062:	eb0b 008b 	add.w	r0, fp, fp, lsl #2
 8006066:	b280      	uxth	r0, r0
 8006068:	4401      	add	r1, r0
 800606a:	9002      	str	r0, [sp, #8]
	if (mappingEndLocation > size)
 800606c:	9800      	ldr	r0, [sp, #0]
 800606e:	b289      	uxth	r1, r1
 8006070:	4281      	cmp	r1, r0
 8006072:	dce1      	bgt.n	8006038 <parsePreset+0x444>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
 8006074:	1866      	adds	r6, r4, r1
 8006076:	5c60      	ldrb	r0, [r4, r1]
 8006078:	7871      	ldrb	r1, [r6, #1]
 800607a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
 800607e:	f64f 60fe 	movw	r0, #65278	; 0xfefe
 8006082:	b289      	uxth	r1, r1
 8006084:	4281      	cmp	r1, r0
 8006086:	d1d7      	bne.n	8006038 <parsePreset+0x444>
	for (int i = 0; i < paramCount; i++)
 8006088:	2b00      	cmp	r3, #0
 800608a:	f001 81a5 	beq.w	80073d8 <parsePreset+0x17e4>
 800608e:	48b1      	ldr	r0, [pc, #708]	; (8006354 <parsePreset+0x760>)
 8006090:	3280      	adds	r2, #128	; 0x80
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006092:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8006358 <parsePreset+0x764>
	bufferIndex = bufferIndex + 2;
 8006096:	2180      	movs	r1, #128	; 0x80
 8006098:	b297      	uxth	r7, r2
	for (int i = 0; i < paramCount; i++)
 800609a:	4606      	mov	r6, r0
 800609c:	4605      	mov	r5, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 800609e:	1c4a      	adds	r2, r1, #1
 80060a0:	f814 c001 	ldrb.w	ip, [r4, r1]
		bufferIndex += 2;
 80060a4:	3102      	adds	r1, #2
	for (int i = 0; i < paramCount; i++)
 80060a6:	351c      	adds	r5, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 80060a8:	b292      	uxth	r2, r2
		bufferIndex += 2;
 80060aa:	b289      	uxth	r1, r1
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 80060ac:	5ca2      	ldrb	r2, [r4, r2]
	for (int i = 0; i < paramCount; i++)
 80060ae:	42b9      	cmp	r1, r7
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 80060b0:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 80060b4:	ee07 2a90 	vmov	s15, r2
 80060b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060c0:	ed45 7a07 	vstr	s15, [r5, #-28]	; 0xffffffe4
 80060c4:	ed45 7a06 	vstr	s15, [r5, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
 80060c8:	d1e9      	bne.n	800609e <parsePreset+0x4aa>
 80060ca:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 80060ce:	4aa1      	ldr	r2, [pc, #644]	; (8006354 <parsePreset+0x760>)
 80060d0:	49a2      	ldr	r1, [pc, #648]	; (800635c <parsePreset+0x768>)
 80060d2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
		params[i].setParam = &blankFunction;
 80060d6:	6151      	str	r1, [r2, #20]
	for (int i = 0; i < paramCount; i++)
 80060d8:	321c      	adds	r2, #28
 80060da:	42aa      	cmp	r2, r5
 80060dc:	d1fb      	bne.n	80060d6 <parsePreset+0x4e2>
 80060de:	4aa0      	ldr	r2, [pc, #640]	; (8006360 <parsePreset+0x76c>)
		params[i].scaleFunc = &scaleDefault;
 80060e0:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
 80060e2:	301c      	adds	r0, #28
 80060e4:	42a8      	cmp	r0, r5
 80060e6:	d1fb      	bne.n	80060e0 <parsePreset+0x4ec>
	bufferIndex += 2;
 80060e8:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80060ec:	f108 0884 	add.w	r8, r8, #132	; 0x84
 80060f0:	fa1f f888 	uxth.w	r8, r8
	for (int i = paramCount; i < NUM_PARAMS; i++)
 80060f4:	2b9a      	cmp	r3, #154	; 0x9a
 80060f6:	f301 816c 	bgt.w	80073d2 <parsePreset+0x17de>
 80060fa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80060fe:	4d99      	ldr	r5, [pc, #612]	; (8006364 <parsePreset+0x770>)
 8006100:	4996      	ldr	r1, [pc, #600]	; (800635c <parsePreset+0x768>)
			params[i].zeroToOneVal[v] = 0.0f;
 8006102:	2000      	movs	r0, #0
 8006104:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006108:	4a95      	ldr	r2, [pc, #596]	; (8006360 <parsePreset+0x76c>)
 800610a:	6018      	str	r0, [r3, #0]
 800610c:	6058      	str	r0, [r3, #4]
		params[i].setParam = &blankFunction;
 800610e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
 8006112:	331c      	adds	r3, #28
 8006114:	42ab      	cmp	r3, r5
 8006116:	d1f8      	bne.n	800610a <parsePreset+0x516>
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8006118:	4b93      	ldr	r3, [pc, #588]	; (8006368 <parsePreset+0x774>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 800611a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
 800611e:	4993      	ldr	r1, [pc, #588]	; (800636c <parsePreset+0x778>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8006120:	f8c6 3be0 	str.w	r3, [r6, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
 8006124:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
 8006128:	f8c6 3c34 	str.w	r3, [r6, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
 800612c:	f8c6 3c88 	str.w	r3, [r6, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
 8006130:	f8c6 3ca4 	str.w	r3, [r6, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
 8006134:	f8c6 3cdc 	str.w	r3, [r6, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
 8006138:	f8c6 3d30 	str.w	r3, [r6, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
 800613c:	f8c6 3d4c 	str.w	r3, [r6, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
 8006140:	f8c6 3d84 	str.w	r3, [r6, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
 8006144:	f8c6 3dd8 	str.w	r3, [r6, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
 8006148:	f8c6 3df4 	str.w	r3, [r6, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
 800614c:	f8c6 3e2c 	str.w	r3, [r6, #3628]	; 0xe2c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8006150:	4b87      	ldr	r3, [pc, #540]	; (8006370 <parsePreset+0x77c>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8006152:	4a88      	ldr	r2, [pc, #544]	; (8006374 <parsePreset+0x780>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8006154:	f8c6 32cc 	str.w	r3, [r6, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
 8006158:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
 800615c:	f8c6 3438 	str.w	r3, [r6, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
 8006160:	f8c6 34c4 	str.w	r3, [r6, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
 8006164:	f8c6 35a4 	str.w	r3, [r6, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
 8006168:	f8c6 3630 	str.w	r3, [r6, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 800616c:	4b82      	ldr	r3, [pc, #520]	; (8006378 <parsePreset+0x784>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 800616e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80063ac <parsePreset+0x7b8>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 8006172:	f8c6 32e8 	str.w	r3, [r6, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
 8006176:	f8c6 3454 	str.w	r3, [r6, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
 800617a:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 800617e:	4b7f      	ldr	r3, [pc, #508]	; (800637c <parsePreset+0x788>)
	params[Transpose].scaleFunc = &scaleTranspose;
 8006180:	f8c6 11d0 	str.w	r1, [r6, #464]	; 0x1d0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8006184:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
 8006188:	f8c6 3470 	str.w	r3, [r6, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
 800618c:	f8c6 35dc 	str.w	r3, [r6, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8006190:	4b7b      	ldr	r3, [pc, #492]	; (8006380 <parsePreset+0x78c>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8006192:	497c      	ldr	r1, [pc, #496]	; (8006384 <parsePreset+0x790>)
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8006194:	f8c6 3aac 	str.w	r3, [r6, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
 8006198:	f8c6 3b54 	str.w	r3, [r6, #2900]	; 0xb54
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 800619c:	4b7a      	ldr	r3, [pc, #488]	; (8006388 <parsePreset+0x794>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 800619e:	f8c6 2e80 	str.w	r2, [r6, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
 80061a2:	f8c6 2f0c 	str.w	r2, [r6, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 80061a6:	f8c6 3ae4 	str.w	r3, [r6, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
 80061aa:	f8c6 3b8c 	str.w	r3, [r6, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 80061ae:	f8c6 11ec 	str.w	r1, [r6, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
 80061b2:	f8c6 2f98 	str.w	r2, [r6, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 80061b6:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80061ba:	f6aa 1214 	subw	r2, sl, #2324	; 0x914
 80061be:	edd2 7a00 	vldr	s15, [r2]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 80061c2:	4a72      	ldr	r2, [pc, #456]	; (800638c <parsePreset+0x798>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80061c4:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 80061c8:	f8ca 20cc 	str.w	r2, [sl, #204]	; 0xcc
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80061cc:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80061d0:	fef8 7a67 	vrinta.f32	s15, s15
 80061d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061d8:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 80061dc:	f89d 2000 	ldrb.w	r2, [sp]
 80061e0:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80061e2:	4a6b      	ldr	r2, [pc, #428]	; (8006390 <parsePreset+0x79c>)
 80061e4:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 80061e8:	bf88      	it	hi
 80061ea:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80061ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061f2:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80061f6:	fef8 7a67 	vrinta.f32	s15, s15
 80061fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061fe:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006202:	f89d 2000 	ldrb.w	r2, [sp]
 8006206:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006208:	4a62      	ldr	r2, [pc, #392]	; (8006394 <parsePreset+0x7a0>)
 800620a:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 800620e:	bf88      	it	hi
 8006210:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006218:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800621c:	fef8 7a67 	vrinta.f32	s15, s15
 8006220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006224:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006228:	f89d 2000 	ldrb.w	r2, [sp]
 800622c:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 800622e:	4a5a      	ldr	r2, [pc, #360]	; (8006398 <parsePreset+0x7a4>)
 8006230:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006234:	bf88      	it	hi
 8006236:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 800623a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800623e:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006242:	fef8 7a67 	vrinta.f32	s15, s15
 8006246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800624a:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 800624e:	f89d 2000 	ldrb.w	r2, [sp]
 8006252:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006254:	4a51      	ldr	r2, [pc, #324]	; (800639c <parsePreset+0x7a8>)
 8006256:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 800625a:	bf88      	it	hi
 800625c:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006264:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006268:	fef8 7a67 	vrinta.f32	s15, s15
 800626c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006270:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006274:	f89d 2000 	ldrb.w	r2, [sp]
 8006278:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 800627a:	4a49      	ldr	r2, [pc, #292]	; (80063a0 <parsePreset+0x7ac>)
 800627c:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006280:	bf88      	it	hi
 8006282:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800628a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800628e:	fef8 7a67 	vrinta.f32	s15, s15
 8006292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006296:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 800629a:	f89d 2000 	ldrb.w	r2, [sp]
 800629e:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80062a0:	4a40      	ldr	r2, [pc, #256]	; (80063a4 <parsePreset+0x7b0>)
 80062a2:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 80062a6:	bf88      	it	hi
 80062a8:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80062ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062b0:	fef8 7a67 	vrinta.f32	s15, s15
 80062b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062b8:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 80062bc:	f89d 2000 	ldrb.w	r2, [sp]
 80062c0:	2a0b      	cmp	r2, #11
 80062c2:	d901      	bls.n	80062c8 <parsePreset+0x6d4>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 80062c4:	f8c6 39e8 	str.w	r3, [r6, #2536]	; 0x9e8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80062c8:	4a37      	ldr	r2, [pc, #220]	; (80063a8 <parsePreset+0x7b4>)
 80062ca:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80062ce:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8006354 <parsePreset+0x760>
 80062d2:	edd2 7a00 	vldr	s15, [r2]
	for (int i = 0; i < paramCount; i++)
 80062d6:	464f      	mov	r7, r9
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80062d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062dc:	fef8 7a67 	vrinta.f32	s15, s15
 80062e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e4:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 80062e8:	f89d 2000 	ldrb.w	r2, [sp]
 80062ec:	2a0b      	cmp	r2, #11
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 80062ee:	bf88      	it	hi
 80062f0:	f8c6 39e8 	strhi.w	r3, [r6, #2536]	; 0x9e8
	for (int i = 0; i < paramCount; i++)
 80062f4:	464e      	mov	r6, r9
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 80062f6:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 80062f8:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 80062fa:	ed17 0a07 	vldr	s0, [r7, #-28]	; 0xffffffe4
 80062fe:	4798      	blx	r3
 8006300:	ed07 0a05 	vstr	s0, [r7, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
 8006304:	42af      	cmp	r7, r5
 8006306:	d1f6      	bne.n	80062f6 <parsePreset+0x702>
 8006308:	4f12      	ldr	r7, [pc, #72]	; (8006354 <parsePreset+0x760>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 800630a:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 800630c:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 800630e:	ed17 0a06 	vldr	s0, [r7, #-24]	; 0xffffffe8
 8006312:	4798      	blx	r3
 8006314:	ed07 0a04 	vstr	s0, [r7, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8006318:	42af      	cmp	r7, r5
 800631a:	d1f6      	bne.n	800630a <parsePreset+0x716>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 800631c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8006320:	edd6 7af7 	vldr	s15, [r6, #988]	; 0x3dc
 8006324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006328:	fef8 7a67 	vrinta.f32	s15, s15
 800632c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006330:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 8006334:	2b06      	cmp	r3, #6
 8006336:	d83e      	bhi.n	80063b6 <parsePreset+0x7c2>
 8006338:	e8df f013 	tbh	[pc, r3, lsl #1]
 800633c:	081d003a 	.word	0x081d003a
 8006340:	08130818 	.word	0x08130818
 8006344:	0809080e 	.word	0x0809080e
 8006348:	0804      	.short	0x0804
 800634a:	bf00      	nop
 800634c:	20016e6c 	.word	0x20016e6c
 8006350:	20000278 	.word	0x20000278
 8006354:	20015d64 	.word	0x20015d64
 8006358:	377ffff6 	.word	0x377ffff6
 800635c:	08004d39 	.word	0x08004d39
 8006360:	08004e75 	.word	0x08004e75
 8006364:	20016e58 	.word	0x20016e58
 8006368:	08004f79 	.word	0x08004f79
 800636c:	08004e89 	.word	0x08004e89
 8006370:	08004cbd 	.word	0x08004cbd
 8006374:	08005001 	.word	0x08005001
 8006378:	08004cd5 	.word	0x08004cd5
 800637c:	08004cf1 	.word	0x08004cf1
 8006380:	08004d0d 	.word	0x08004d0d
 8006384:	08004eb9 	.word	0x08004eb9
 8006388:	08004edd 	.word	0x08004edd
 800638c:	08004d1d 	.word	0x08004d1d
 8006390:	20016454 	.word	0x20016454
 8006394:	20016530 	.word	0x20016530
 8006398:	20016534 	.word	0x20016534
 800639c:	20016610 	.word	0x20016610
 80063a0:	20016614 	.word	0x20016614
 80063a4:	200166f0 	.word	0x200166f0
 80063a8:	200166f4 	.word	0x200166f4
 80063ac:	20016d64 	.word	0x20016d64
				  shapeTick[i] = &sawSquareTick;
 80063b0:	4b8e      	ldr	r3, [pc, #568]	; (80065ec <parsePreset+0x9f8>)
 80063b2:	4a8f      	ldr	r2, [pc, #572]	; (80065f0 <parsePreset+0x9fc>)
 80063b4:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 80063b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 80063ba:	4b8e      	ldr	r3, [pc, #568]	; (80065f4 <parsePreset+0xa00>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 80063bc:	edd6 6aaa 	vldr	s13, [r6, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 80063c0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 80063c4:	eef4 6ae7 	vcmpe.f32	s13, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 80063c8:	edd3 7a00 	vldr	s15, [r3]
 80063cc:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 80063d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 80063d4:	fef8 7a67 	vrinta.f32	s15, s15
 80063d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint8_t enabledCount = 0;
 80063dc:	bfcc      	ite	gt
 80063de:	2301      	movgt	r3, #1
 80063e0:	2300      	movle	r3, #0
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 80063e2:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
 80063e6:	2a06      	cmp	r2, #6
 80063e8:	d80b      	bhi.n	8006402 <parsePreset+0x80e>
 80063ea:	e8df f012 	tbh	[pc, r2, lsl #1]
 80063ee:	0007      	.short	0x0007
 80063f0:	07a107a6 	.word	0x07a107a6
 80063f4:	0797079c 	.word	0x0797079c
 80063f8:	078d0792 	.word	0x078d0792
				  shapeTick[i] = &sawSquareTick;
 80063fc:	4a7b      	ldr	r2, [pc, #492]	; (80065ec <parsePreset+0x9f8>)
 80063fe:	497c      	ldr	r1, [pc, #496]	; (80065f0 <parsePreset+0x9fc>)
 8006400:	6051      	str	r1, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006402:	4a7d      	ldr	r2, [pc, #500]	; (80065f8 <parsePreset+0xa04>)
 8006404:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006408:	ed92 7a00 	vldr	s14, [r2]
 800640c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	dd01      	ble.n	800641a <parsePreset+0x826>
			enabledCount++;
 8006416:	3301      	adds	r3, #1
 8006418:	b2db      	uxtb	r3, r3
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 800641a:	4a78      	ldr	r2, [pc, #480]	; (80065fc <parsePreset+0xa08>)
 800641c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8006420:	edd2 7a00 	vldr	s15, [r2]
 8006424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006428:	fef8 7a67 	vrinta.f32	s15, s15
 800642c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006430:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
 8006434:	2a06      	cmp	r2, #6
 8006436:	d80b      	bhi.n	8006450 <parsePreset+0x85c>
 8006438:	e8df f012 	tbh	[pc, r2, lsl #1]
 800643c:	07610007 	.word	0x07610007
 8006440:	0757075c 	.word	0x0757075c
 8006444:	074d0752 	.word	0x074d0752
 8006448:	0748      	.short	0x0748
				  shapeTick[i] = &sawSquareTick;
 800644a:	4a68      	ldr	r2, [pc, #416]	; (80065ec <parsePreset+0x9f8>)
 800644c:	4968      	ldr	r1, [pc, #416]	; (80065f0 <parsePreset+0x9fc>)
 800644e:	6091      	str	r1, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006450:	4a6b      	ldr	r2, [pc, #428]	; (8006600 <parsePreset+0xa0c>)
 8006452:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006456:	ed92 7a00 	vldr	s14, [r2]
 800645a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800645e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006462:	dd01      	ble.n	8006468 <parsePreset+0x874>
			enabledCount++;
 8006464:	3301      	adds	r3, #1
 8006466:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8006468:	4a66      	ldr	r2, [pc, #408]	; (8006604 <parsePreset+0xa10>)
 800646a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800646e:	edd2 7a00 	vldr	s15, [r2]
	oscAmpMult = oscAmpMultArray[enabledCount];
 8006472:	4a65      	ldr	r2, [pc, #404]	; (8006608 <parsePreset+0xa14>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8006474:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
 8006478:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800647c:	4a63      	ldr	r2, [pc, #396]	; (800660c <parsePreset+0xa18>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 800647e:	fef8 7a67 	vrinta.f32	s15, s15
 8006482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 8006486:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8006488:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 800648c:	6011      	str	r1, [r2, #0]
		switch (filterType)
 800648e:	4960      	ldr	r1, [pc, #384]	; (8006610 <parsePreset+0xa1c>)
 8006490:	2b08      	cmp	r3, #8
 8006492:	d811      	bhi.n	80064b8 <parsePreset+0x8c4>
 8006494:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006498:	07110009 	.word	0x07110009
 800649c:	06ff0708 	.word	0x06ff0708
 80064a0:	06ed06f6 	.word	0x06ed06f6
 80064a4:	06db06e4 	.word	0x06db06e4
 80064a8:	06d2      	.short	0x06d2
				  filterTick[i] = &lowpassTick;
 80064aa:	4b5a      	ldr	r3, [pc, #360]	; (8006614 <parsePreset+0xa20>)
 80064ac:	4a5a      	ldr	r2, [pc, #360]	; (8006618 <parsePreset+0xa24>)
 80064ae:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
 80064b0:	4b5a      	ldr	r3, [pc, #360]	; (800661c <parsePreset+0xa28>)
 80064b2:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
 80064b4:	4b5a      	ldr	r3, [pc, #360]	; (8006620 <parsePreset+0xa2c>)
 80064b6:	604b      	str	r3, [r1, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 80064b8:	4b5a      	ldr	r3, [pc, #360]	; (8006624 <parsePreset+0xa30>)
 80064ba:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80064be:	edd3 7a00 	vldr	s15, [r3]
 80064c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064c6:	fef8 7a67 	vrinta.f32	s15, s15
 80064ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ce:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d811      	bhi.n	80064fa <parsePreset+0x906>
 80064d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80064da:	0009      	.short	0x0009
 80064dc:	069f06a8 	.word	0x069f06a8
 80064e0:	068d0696 	.word	0x068d0696
 80064e4:	067b0684 	.word	0x067b0684
 80064e8:	06690672 	.word	0x06690672
				  filterTick[i] = &lowpassTick;
 80064ec:	4b49      	ldr	r3, [pc, #292]	; (8006614 <parsePreset+0xa20>)
 80064ee:	4a4a      	ldr	r2, [pc, #296]	; (8006618 <parsePreset+0xa24>)
 80064f0:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
 80064f2:	4b4a      	ldr	r3, [pc, #296]	; (800661c <parsePreset+0xa28>)
 80064f4:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
 80064f6:	4b4a      	ldr	r3, [pc, #296]	; (8006620 <parsePreset+0xa2c>)
 80064f8:	60cb      	str	r3, [r1, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 80064fa:	4b4b      	ldr	r3, [pc, #300]	; (8006628 <parsePreset+0xa34>)
 80064fc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006500:	edd3 7a00 	vldr	s15, [r3]
 8006504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006508:	fef8 7a67 	vrinta.f32	s15, s15
 800650c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006510:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8006514:	2b05      	cmp	r3, #5
 8006516:	f200 87dc 	bhi.w	80074d2 <parsePreset+0x18de>
 800651a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800651e:	063b      	.short	0x063b
 8006520:	05c9062f 	.word	0x05c9062f
 8006524:	05b105bd 	.word	0x05b105bd
 8006528:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
 800652a:	4b40      	ldr	r3, [pc, #256]	; (800662c <parsePreset+0xa38>)
 800652c:	4840      	ldr	r0, [pc, #256]	; (8006630 <parsePreset+0xa3c>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
 800652e:	4a41      	ldr	r2, [pc, #260]	; (8006634 <parsePreset+0xa40>)
				lfoShapeTick[i] = &lfoPulseTick;
 8006530:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8006532:	4b41      	ldr	r3, [pc, #260]	; (8006638 <parsePreset+0xa44>)
 8006534:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8006536:	4b41      	ldr	r3, [pc, #260]	; (800663c <parsePreset+0xa48>)
 8006538:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 800653a:	4b41      	ldr	r3, [pc, #260]	; (8006640 <parsePreset+0xa4c>)
 800653c:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 800653e:	4b41      	ldr	r3, [pc, #260]	; (8006644 <parsePreset+0xa50>)
 8006540:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006544:	edd3 7a00 	vldr	s15, [r3]
 8006548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800654c:	fef8 7a67 	vrinta.f32	s15, s15
 8006550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006554:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8006558:	2b05      	cmp	r3, #5
 800655a:	d810      	bhi.n	800657e <parsePreset+0x98a>
 800655c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006560:	057a0585 	.word	0x057a0585
 8006564:	0564056f 	.word	0x0564056f
 8006568:	0006054e 	.word	0x0006054e
				lfoShapeTick[i] = &lfoPulseTick;
 800656c:	4b2f      	ldr	r3, [pc, #188]	; (800662c <parsePreset+0xa38>)
 800656e:	4830      	ldr	r0, [pc, #192]	; (8006630 <parsePreset+0xa3c>)
 8006570:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8006572:	4b31      	ldr	r3, [pc, #196]	; (8006638 <parsePreset+0xa44>)
 8006574:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8006576:	4b31      	ldr	r3, [pc, #196]	; (800663c <parsePreset+0xa48>)
 8006578:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 800657a:	4b31      	ldr	r3, [pc, #196]	; (8006640 <parsePreset+0xa4c>)
 800657c:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 800657e:	4b32      	ldr	r3, [pc, #200]	; (8006648 <parsePreset+0xa54>)
 8006580:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006584:	edd3 7a00 	vldr	s15, [r3]
 8006588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800658c:	fef8 7a67 	vrinta.f32	s15, s15
 8006590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006594:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8006598:	2b05      	cmp	r3, #5
 800659a:	d810      	bhi.n	80065be <parsePreset+0x9ca>
 800659c:	e8df f013 	tbh	[pc, r3, lsl #1]
 80065a0:	05230539 	.word	0x05230539
 80065a4:	050d0518 	.word	0x050d0518
 80065a8:	000604ec 	.word	0x000604ec
				lfoShapeTick[i] = &lfoPulseTick;
 80065ac:	4b1f      	ldr	r3, [pc, #124]	; (800662c <parsePreset+0xa38>)
 80065ae:	4820      	ldr	r0, [pc, #128]	; (8006630 <parsePreset+0xa3c>)
 80065b0:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 80065b2:	4b21      	ldr	r3, [pc, #132]	; (8006638 <parsePreset+0xa44>)
 80065b4:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 80065b6:	4b21      	ldr	r3, [pc, #132]	; (800663c <parsePreset+0xa48>)
 80065b8:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 80065ba:	4b21      	ldr	r3, [pc, #132]	; (8006640 <parsePreset+0xa4c>)
 80065bc:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 80065be:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80065c2:	edda 7a1c 	vldr	s15, [sl, #112]	; 0x70
 80065c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065ca:	fef8 7a67 	vrinta.f32	s15, s15
 80065ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065d2:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	d841      	bhi.n	800665e <parsePreset+0xa6a>
 80065da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80065de:	04e3      	.short	0x04e3
 80065e0:	04c204d8 	.word	0x04c204d8
 80065e4:	04ac04b7 	.word	0x04ac04b7
 80065e8:	0037      	.short	0x0037
 80065ea:	bf00      	nop
 80065ec:	20004c64 	.word	0x20004c64
 80065f0:	08001231 	.word	0x08001231
 80065f4:	200162ac 	.word	0x200162ac
 80065f8:	20016178 	.word	0x20016178
 80065fc:	20016418 	.word	0x20016418
 8006600:	200162e4 	.word	0x200162e4
 8006604:	200167ec 	.word	0x200167ec
 8006608:	20000058 	.word	0x20000058
 800660c:	20000054 	.word	0x20000054
 8006610:	20015274 	.word	0x20015274
 8006614:	20004644 	.word	0x20004644
 8006618:	080016b5 	.word	0x080016b5
 800661c:	0800198d 	.word	0x0800198d
 8006620:	08001a41 	.word	0x08001a41
 8006624:	20016894 	.word	0x20016894
 8006628:	20016c30 	.word	0x20016c30
 800662c:	2000485c 	.word	0x2000485c
 8006630:	08002485 	.word	0x08002485
 8006634:	200153a0 	.word	0x200153a0
 8006638:	08002505 	.word	0x08002505
 800663c:	080025c5 	.word	0x080025c5
 8006640:	0800257d 	.word	0x0800257d
 8006644:	20016cbc 	.word	0x20016cbc
 8006648:	20016d48 	.word	0x20016d48
				lfoShapeTick[i] = &lfoPulseTick;
 800664c:	4b8e      	ldr	r3, [pc, #568]	; (8006888 <parsePreset+0xc94>)
 800664e:	488f      	ldr	r0, [pc, #572]	; (800688c <parsePreset+0xc98>)
 8006650:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8006652:	4b8f      	ldr	r3, [pc, #572]	; (8006890 <parsePreset+0xc9c>)
 8006654:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
 8006656:	4b8f      	ldr	r3, [pc, #572]	; (8006894 <parsePreset+0xca0>)
 8006658:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 800665a:	4b8f      	ldr	r3, [pc, #572]	; (8006898 <parsePreset+0xca4>)
 800665c:	62d3      	str	r3, [r2, #44]	; 0x2c
	uint8_t totalEffects = 4; //currently doesn't pay attention to skipped effects out of order
 800665e:	2304      	movs	r3, #4
 8006660:	4f8e      	ldr	r7, [pc, #568]	; (800689c <parsePreset+0xca8>)
 8006662:	4d8f      	ldr	r5, [pc, #572]	; (80068a0 <parsePreset+0xcac>)
 8006664:	9301      	str	r3, [sp, #4]
 8006666:	463b      	mov	r3, r7
 8006668:	f8df e290 	ldr.w	lr, [pc, #656]	; 80068fc <parsePreset+0xd08>
				  effectSetters[i].setParam2 = &blankFunction;;
 800666c:	488d      	ldr	r0, [pc, #564]	; (80068a4 <parsePreset+0xcb0>)
				  effectTick[i] = FXVZhighshelfTick;
 800666e:	9203      	str	r2, [sp, #12]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[0] * (NUM_EFFECT_TYPES-1));
 8006670:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006674:	edde 7a00 	vldr	s15, [lr]
 8006678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800667c:	fef8 7a67 	vrinta.f32	s15, s15
 8006680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006684:	edcd 7a00 	vstr	s15, [sp]
		switch (effectType)
 8006688:	f89d c000 	ldrb.w	ip, [sp]
 800668c:	f1bc 0f13 	cmp.w	ip, #19
 8006690:	d81e      	bhi.n	80066d0 <parsePreset+0xadc>
 8006692:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8006696:	043f      	.short	0x043f
 8006698:	04110428 	.word	0x04110428
 800669c:	0409040d 	.word	0x0409040d
 80066a0:	031203f3 	.word	0x031203f3
 80066a4:	02ed02fc 	.word	0x02ed02fc
 80066a8:	02bb02d4 	.word	0x02bb02d4
 80066ac:	029b02ab 	.word	0x029b02ab
 80066b0:	03d8028b 	.word	0x03d8028b
 80066b4:	033c03c5 	.word	0x033c03c5
 80066b8:	03e8032b 	.word	0x03e8032b
 80066bc:	0014      	.short	0x0014
				  effectTick[i] = &FXLadderLowpassTick;
 80066be:	4a7a      	ldr	r2, [pc, #488]	; (80068a8 <parsePreset+0xcb4>)
 80066c0:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
 80066c2:	4a7a      	ldr	r2, [pc, #488]	; (80068ac <parsePreset+0xcb8>)
				  effectSetters[i].setParam5 = &blankFunction;;
 80066c4:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
 80066c6:	e9c3 2000 	strd	r2, r0, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
 80066ca:	4a79      	ldr	r2, [pc, #484]	; (80068b0 <parsePreset+0xcbc>)
				  effectSetters[i].setParam4 = &blankFunction;;
 80066cc:	e9c3 2002 	strd	r2, r0, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
 80066d0:	3504      	adds	r5, #4
 80066d2:	4a78      	ldr	r2, [pc, #480]	; (80068b4 <parsePreset+0xcc0>)
 80066d4:	f10e 0ee0 	add.w	lr, lr, #224	; 0xe0
 80066d8:	3314      	adds	r3, #20
 80066da:	4295      	cmp	r5, r2
 80066dc:	d1c8      	bne.n	8006670 <parsePreset+0xa7c>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 80066de:	4876      	ldr	r0, [pc, #472]	; (80068b8 <parsePreset+0xcc4>)
	params[Effect1Mix].setParam = &fxMixSet;
 80066e0:	4b76      	ldr	r3, [pc, #472]	; (80068bc <parsePreset+0xcc8>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 80066e2:	f8c6 02d0 	str.w	r0, [r6, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
 80066e6:	f8c6 043c 	str.w	r0, [r6, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
 80066ea:	f8c6 05a8 	str.w	r0, [r6, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 80066ee:	4874      	ldr	r0, [pc, #464]	; (80068c0 <parsePreset+0xccc>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
 80066f0:	4d74      	ldr	r5, [pc, #464]	; (80068c4 <parsePreset+0xcd0>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 80066f2:	f8c6 035c 	str.w	r0, [r6, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
 80066f6:	f8c6 04c8 	str.w	r0, [r6, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
 80066fa:	f8c6 0634 	str.w	r0, [r6, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 80066fe:	6838      	ldr	r0, [r7, #0]
	params[Effect1Mix].setParam = &fxMixSet;
 8006700:	9a03      	ldr	r2, [sp, #12]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 8006702:	f8c6 0714 	str.w	r0, [r6, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 8006706:	6878      	ldr	r0, [r7, #4]
	params[Effect1Mix].setParam = &fxMixSet;
 8006708:	f8c6 37a0 	str.w	r3, [r6, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 800670c:	f8c6 0730 	str.w	r0, [r6, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 8006710:	68b8      	ldr	r0, [r7, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
 8006712:	f8c6 57bc 	str.w	r5, [r6, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 8006716:	f8c6 074c 	str.w	r0, [r6, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
 8006720:	6938      	ldr	r0, [r7, #16]
 8006722:	f8c6 0784 	str.w	r0, [r6, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
 8006726:	6978      	ldr	r0, [r7, #20]
 8006728:	f8c6 07f4 	str.w	r0, [r6, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
 800672c:	69b8      	ldr	r0, [r7, #24]
 800672e:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
 8006732:	69f8      	ldr	r0, [r7, #28]
 8006734:	f8c6 082c 	str.w	r0, [r6, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
 8006738:	4863      	ldr	r0, [pc, #396]	; (80068c8 <parsePreset+0xcd4>)
 800673a:	f8c6 0228 	str.w	r0, [r6, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
 800673e:	4863      	ldr	r0, [pc, #396]	; (80068cc <parsePreset+0xcd8>)
 8006740:	f8c6 0260 	str.w	r0, [r6, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
 8006744:	4862      	ldr	r0, [pc, #392]	; (80068d0 <parsePreset+0xcdc>)
 8006746:	f8c6 0244 	str.w	r0, [r6, #580]	; 0x244
	params[Master].setParam = &setMaster;
 800674a:	4862      	ldr	r0, [pc, #392]	; (80068d4 <parsePreset+0xce0>)
 800674c:	64f0      	str	r0, [r6, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
 800674e:	4862      	ldr	r0, [pc, #392]	; (80068d8 <parsePreset+0xce4>)
 8006750:	f8c6 01d4 	str.w	r0, [r6, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
 8006754:	4861      	ldr	r0, [pc, #388]	; (80068dc <parsePreset+0xce8>)
 8006756:	f8c6 01f0 	str.w	r0, [r6, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
 800675a:	4861      	ldr	r0, [pc, #388]	; (80068e0 <parsePreset+0xcec>)
 800675c:	f8ca 00d0 	str.w	r0, [sl, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8006760:	6a38      	ldr	r0, [r7, #32]
	params[Effect2Mix].setParam = &fxMixSet;
 8006762:	f8c6 3880 	str.w	r3, [r6, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
 8006766:	f8c6 3960 	str.w	r3, [r6, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
 800676a:	f8c6 3a40 	str.w	r3, [r6, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8006770:	f8c6 0848 	str.w	r0, [r6, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 8006774:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
	params[Effect2PostGain].setParam = &fxPostGainSet;
 800677a:	f8c6 589c 	str.w	r5, [r6, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 800677e:	f8c6 38d4 	str.w	r3, [r6, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	params[Effect3PostGain].setParam = &fxPostGainSet;
 8006784:	f8c6 597c 	str.w	r5, [r6, #2428]	; 0x97c
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 8006788:	f8c6 38f0 	str.w	r3, [r6, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	params[Effect4PostGain].setParam = &fxPostGainSet;
 800678e:	f8c6 5a5c 	str.w	r5, [r6, #2652]	; 0xa5c
	params[OutputAmp].setParam = &setAmp;
 8006792:	2501      	movs	r5, #1
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 8006794:	f8c6 390c 	str.w	r3, [r6, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 8006798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 800679a:	4852      	ldr	r0, [pc, #328]	; (80068e4 <parsePreset+0xcf0>)
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 800679c:	f8c6 3928 	str.w	r3, [r6, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	f8c6 3944 	str.w	r3, [r6, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
 80067a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a8:	f8c6 39b4 	str.w	r3, [r6, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
 80067ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ae:	f8c6 39d0 	str.w	r3, [r6, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
 80067b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b4:	f8c6 39ec 	str.w	r3, [r6, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
 80067b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ba:	f8c6 3a08 	str.w	r3, [r6, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 80067be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		params[i].objectNumber = 0;
 80067c0:	2700      	movs	r7, #0
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 80067c2:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
 80067c6:	680b      	ldr	r3, [r1, #0]
 80067c8:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 80067cc:	684b      	ldr	r3, [r1, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 80067ce:	f8c6 0be4 	str.w	r0, [r6, #3044]	; 0xbe4
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 80067d2:	f8c6 3acc 	str.w	r3, [r6, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 80067d6:	688b      	ldr	r3, [r1, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
 80067d8:	f8c6 0c8c 	str.w	r0, [r6, #3212]	; 0xc8c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 80067dc:	f8c6 3b90 	str.w	r3, [r6, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 80067e0:	68cb      	ldr	r3, [r1, #12]
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
 80067e2:	f8c6 0d34 	str.w	r0, [r6, #3380]	; 0xd34
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 80067e6:	f8c6 3b74 	str.w	r3, [r6, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 80067ea:	4b3f      	ldr	r3, [pc, #252]	; (80068e8 <parsePreset+0xcf4>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
 80067ec:	f8c6 0ddc 	str.w	r0, [r6, #3548]	; 0xddc
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 80067f0:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
 80067f4:	f8c6 3ca8 	str.w	r3, [r6, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
 80067f8:	f8c6 3d50 	str.w	r3, [r6, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
 80067fc:	f8c6 3df8 	str.w	r3, [r6, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
 8006800:	4b3a      	ldr	r3, [pc, #232]	; (80068ec <parsePreset+0xcf8>)
 8006802:	f8c6 3c1c 	str.w	r3, [r6, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
 8006806:	f8c6 3cc4 	str.w	r3, [r6, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
 800680a:	f8c6 3d6c 	str.w	r3, [r6, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
 800680e:	f8c6 3e14 	str.w	r3, [r6, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
 8006812:	4b37      	ldr	r3, [pc, #220]	; (80068f0 <parsePreset+0xcfc>)
 8006814:	f8c6 3c38 	str.w	r3, [r6, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
 8006818:	f8c6 3ce0 	str.w	r3, [r6, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
 800681c:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
 8006820:	f8c6 3e30 	str.w	r3, [r6, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
 8006824:	4b33      	ldr	r3, [pc, #204]	; (80068f4 <parsePreset+0xd00>)
 8006826:	f8c6 3c54 	str.w	r3, [r6, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
 800682a:	f8c6 3cfc 	str.w	r3, [r6, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
 800682e:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
 8006832:	f8c6 3e4c 	str.w	r3, [r6, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
 8006836:	6813      	ldr	r3, [r2, #0]
 8006838:	f8c6 3e84 	str.w	r3, [r6, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
 800683c:	68d3      	ldr	r3, [r2, #12]
 800683e:	f8c6 3f10 	str.w	r3, [r6, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
 8006842:	6993      	ldr	r3, [r2, #24]
 8006844:	f8c6 3f9c 	str.w	r3, [r6, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
 8006848:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800684a:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
 800684e:	6853      	ldr	r3, [r2, #4]
 8006850:	f8c6 3ea0 	str.w	r3, [r6, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
 8006854:	6913      	ldr	r3, [r2, #16]
 8006856:	f8c6 3f2c 	str.w	r3, [r6, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
 800685a:	69d3      	ldr	r3, [r2, #28]
 800685c:	f8c6 3fb8 	str.w	r3, [r6, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
 8006860:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006862:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
 8006866:	6893      	ldr	r3, [r2, #8]
 8006868:	f8c6 3ebc 	str.w	r3, [r6, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
 800686c:	6953      	ldr	r3, [r2, #20]
 800686e:	f8c6 3f48 	str.w	r3, [r6, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
 8006872:	6a13      	ldr	r3, [r2, #32]
 8006874:	f8c6 3fd4 	str.w	r3, [r6, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
 8006878:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800687a:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
 800687e:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <parsePreset+0xd04>)
 8006880:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 8006884:	46aa      	mov	sl, r5
 8006886:	e042      	b.n	800690e <parsePreset+0xd1a>
 8006888:	2000485c 	.word	0x2000485c
 800688c:	08002485 	.word	0x08002485
 8006890:	08002505 	.word	0x08002505
 8006894:	080025c5 	.word	0x080025c5
 8006898:	0800257d 	.word	0x0800257d
 800689c:	20013224 	.word	0x20013224
 80068a0:	200045ec 	.word	0x200045ec
 80068a4:	08004d39 	.word	0x08004d39
 80068a8:	08002ec1 	.word	0x08002ec1
 80068ac:	08003135 	.word	0x08003135
 80068b0:	080032f1 	.word	0x080032f1
 80068b4:	200045fc 	.word	0x200045fc
 80068b8:	080018d1 	.word	0x080018d1
 80068bc:	08002995 	.word	0x08002995
 80068c0:	08001929 	.word	0x08001929
 80068c4:	080029a9 	.word	0x080029a9
 80068c8:	08003305 	.word	0x08003305
 80068cc:	08003381 	.word	0x08003381
 80068d0:	08003351 	.word	0x08003351
 80068d4:	08001cb5 	.word	0x08001cb5
 80068d8:	08001cc5 	.word	0x08001cc5
 80068dc:	08001cd1 	.word	0x08001cd1
 80068e0:	08001ce9 	.word	0x08001ce9
 80068e4:	08001bfd 	.word	0x08001bfd
 80068e8:	08001c1d 	.word	0x08001c1d
 80068ec:	08001c3d 	.word	0x08001c3d
 80068f0:	08001c51 	.word	0x08001c51
 80068f4:	08001c71 	.word	0x08001c71
 80068f8:	08001ca5 	.word	0x08001ca5
 80068fc:	20016450 	.word	0x20016450
 8006900:	42fe0000 	.word	0x42fe0000
 8006904:	3c010204 	.word	0x3c010204
 8006908:	f109 091c 	add.w	r9, r9, #28
 800690c:	3501      	adds	r5, #1
		if ((i >= Osc1) && (i < Osc2))
 800690e:	f1a5 0319 	sub.w	r3, r5, #25
		params[i].objectNumber = 0;
 8006912:	f889 7018 	strb.w	r7, [r9, #24]
		if ((i >= Osc1) && (i < Osc2))
 8006916:	2b0c      	cmp	r3, #12
 8006918:	d94b      	bls.n	80069b2 <parsePreset+0xdbe>
		else if ((i >= Osc2) && (i < Osc3))
 800691a:	f1a5 0326 	sub.w	r3, r5, #38	; 0x26
 800691e:	2b0c      	cmp	r3, #12
 8006920:	f240 85d4 	bls.w	80074cc <parsePreset+0x18d8>
		else if ((i >= Osc3) && (i < Effect1FXType))
 8006924:	f1a5 0333 	sub.w	r3, r5, #51	; 0x33
 8006928:	2b0c      	cmp	r3, #12
 800692a:	f240 85cb 	bls.w	80074c4 <parsePreset+0x18d0>
		else if ((i >= Filter1) && (i < Filter2))
 800692e:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
 8006932:	2b05      	cmp	r3, #5
 8006934:	d93d      	bls.n	80069b2 <parsePreset+0xdbe>
		else if ((i >= Filter2) && (i < Envelope1Attack))
 8006936:	f1a5 0366 	sub.w	r3, r5, #102	; 0x66
 800693a:	2b06      	cmp	r3, #6
 800693c:	f240 85c6 	bls.w	80074cc <parsePreset+0x18d8>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
 8006940:	f1a5 036d 	sub.w	r3, r5, #109	; 0x6d
 8006944:	2b05      	cmp	r3, #5
 8006946:	d934      	bls.n	80069b2 <parsePreset+0xdbe>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
 8006948:	f1a5 0373 	sub.w	r3, r5, #115	; 0x73
 800694c:	2b05      	cmp	r3, #5
 800694e:	f240 85bd 	bls.w	80074cc <parsePreset+0x18d8>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
 8006952:	f1a5 0379 	sub.w	r3, r5, #121	; 0x79
 8006956:	2b05      	cmp	r3, #5
 8006958:	f240 85b4 	bls.w	80074c4 <parsePreset+0x18d0>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
 800695c:	f1a5 037f 	sub.w	r3, r5, #127	; 0x7f
 8006960:	2b05      	cmp	r3, #5
 8006962:	f240 8599 	bls.w	8007498 <parsePreset+0x18a4>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
 8006966:	f1a5 0385 	sub.w	r3, r5, #133	; 0x85
 800696a:	2b04      	cmp	r3, #4
 800696c:	d921      	bls.n	80069b2 <parsePreset+0xdbe>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
 800696e:	f1a5 038a 	sub.w	r3, r5, #138	; 0x8a
 8006972:	2b04      	cmp	r3, #4
 8006974:	f240 85aa 	bls.w	80074cc <parsePreset+0x18d8>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
 8006978:	f1a5 038f 	sub.w	r3, r5, #143	; 0x8f
 800697c:	2b04      	cmp	r3, #4
 800697e:	f240 85a1 	bls.w	80074c4 <parsePreset+0x18d0>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
 8006982:	f1a5 0394 	sub.w	r3, r5, #148	; 0x94
 8006986:	2b04      	cmp	r3, #4
 8006988:	f240 8586 	bls.w	8007498 <parsePreset+0x18a4>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
 800698c:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
 8006990:	2b07      	cmp	r3, #7
 8006992:	d90e      	bls.n	80069b2 <parsePreset+0xdbe>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
 8006994:	f1a5 0348 	sub.w	r3, r5, #72	; 0x48
 8006998:	2b07      	cmp	r3, #7
 800699a:	f240 8597 	bls.w	80074cc <parsePreset+0x18d8>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
 800699e:	f1a5 0350 	sub.w	r3, r5, #80	; 0x50
 80069a2:	2b07      	cmp	r3, #7
 80069a4:	f240 858e 	bls.w	80074c4 <parsePreset+0x18d0>
		else if ((i >= Effect4FXType) && (i < Filter1))
 80069a8:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
 80069ac:	2b07      	cmp	r3, #7
 80069ae:	f240 8573 	bls.w	8007498 <parsePreset+0x18a4>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 80069b2:	2100      	movs	r1, #0
 80069b4:	ed99 0a02 	vldr	s0, [r9, #8]
 80069b8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80069bc:	4608      	mov	r0, r1
 80069be:	4798      	blx	r3
 80069c0:	ed99 0a03 	vldr	s0, [r9, #12]
 80069c4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80069c8:	2101      	movs	r1, #1
 80069ca:	f899 0018 	ldrb.w	r0, [r9, #24]
 80069ce:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 80069d0:	2d9b      	cmp	r5, #155	; 0x9b
 80069d2:	d199      	bne.n	8006908 <parsePreset+0xd14>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 80069d4:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
	numMappings = 0;
 80069d8:	2200      	movs	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 80069da:	ed96 7a02 	vldr	s14, [r6, #8]
		mappings[i].destNumber = 255;
 80069de:	21ff      	movs	r1, #255	; 0xff
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
 80069e0:	ed5f 6a39 	vldr	s13, [pc, #-228]	; 8006900 <parsePreset+0xd0c>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 80069e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069e8:	ed1f 6a3a 	vldr	s12, [pc, #-232]	; 8006904 <parsePreset+0xd10>
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
 80069ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 80069f0:	4bd0      	ldr	r3, [pc, #832]	; (8006d34 <parsePreset+0x1140>)
 80069f2:	f8df e37c 	ldr.w	lr, [pc, #892]	; 8006d70 <parsePreset+0x117c>
 80069f6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80069fa:	f50e 6018 	add.w	r0, lr, #2432	; 0x980
 80069fe:	edc3 6a00 	vstr	s13, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
 8006a02:	4bcd      	ldr	r3, [pc, #820]	; (8006d38 <parsePreset+0x1144>)
 8006a04:	edc3 7a00 	vstr	s15, [r3]
	numMappings = 0;
 8006a08:	4bcc      	ldr	r3, [pc, #816]	; (8006d3c <parsePreset+0x1148>)
 8006a0a:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
 8006a0c:	4bcc      	ldr	r3, [pc, #816]	; (8006d40 <parsePreset+0x114c>)
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
 8006a12:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8006a14:	334c      	adds	r3, #76	; 0x4c
		mappings[i].numHooks = 0;
 8006a16:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8006a1a:	4283      	cmp	r3, r0
 8006a1c:	d1f9      	bne.n	8006a12 <parsePreset+0xe1e>
	for (int i = 0; i < mappingCount; i++)
 8006a1e:	f1bb 0f00 	cmp.w	fp, #0
 8006a22:	f000 8094 	beq.w	8006b4e <parsePreset+0xf5a>
 8006a26:	9b02      	ldr	r3, [sp, #8]
				foundOne = 1;
 8006a28:	f04f 0b01 	mov.w	fp, #1
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8006a2c:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8006d44 <parsePreset+0x1150>
			mappings[whichMapping].destNumber = destNumber;
 8006a30:	f04f 094c 	mov.w	r9, #76	; 0x4c
 8006a34:	4443      	add	r3, r8
 8006a36:	f8df a33c 	ldr.w	sl, [pc, #828]	; 8006d74 <parsePreset+0x1180>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8006a3a:	9602      	str	r6, [sp, #8]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < mappingCount; i++)
 8006a40:	2300      	movs	r3, #0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8006a42:	469c      	mov	ip, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 8006a44:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
 8006a46:	eb04 0208 	add.w	r2, r4, r8
		uint8_t foundOne = 0;
 8006a4a:	461d      	mov	r5, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 8006a4c:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
 8006a4e:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 8006a50:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
 8006a52:	461e      	mov	r6, r3
			if (mappings[j].destNumber == destNumber)
 8006a54:	7811      	ldrb	r1, [r2, #0]
 8006a56:	4281      	cmp	r1, r0
 8006a58:	d103      	bne.n	8006a62 <parsePreset+0xe6e>
				whichHook = mappings[j].numHooks;
 8006a5a:	f892 7048 	ldrb.w	r7, [r2, #72]	; 0x48
 8006a5e:	b2de      	uxtb	r6, r3
				foundOne = 1;
 8006a60:	2501      	movs	r5, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 8006a62:	3301      	adds	r3, #1
 8006a64:	324c      	adds	r2, #76	; 0x4c
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d1f4      	bne.n	8006a54 <parsePreset+0xe60>
		if (foundOne == 0)
 8006a6a:	2d00      	cmp	r5, #0
 8006a6c:	f000 8488 	beq.w	8007380 <parsePreset+0x178c>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8006a70:	463d      	mov	r5, r7
		int source = buffer[bufferIndex];
 8006a72:	f814 2008 	ldrb.w	r2, [r4, r8]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8006a76:	fb09 f306 	mul.w	r3, r9, r6
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8006a7a:	1c68      	adds	r0, r5, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8006a7c:	eb0e 0103 	add.w	r1, lr, r3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8006a80:	eb0a 07c2 	add.w	r7, sl, r2, lsl #3
 8006a84:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 8006a88:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8006a8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006a8e:	f107 0704 	add.w	r7, r7, #4
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8006a92:	4429      	add	r1, r5
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8006a94:	4473      	add	r3, lr
 8006a96:	60df      	str	r7, [r3, #12]
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 8006a98:	bfcc      	ite	gt
 8006a9a:	465b      	movgt	r3, fp
 8006a9c:	2300      	movle	r3, #0
 8006a9e:	f881 3020 	strb.w	r3, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8006aa2:	eb0a 03c2 	add.w	r3, sl, r2, lsl #3
 8006aa6:	00e9      	lsls	r1, r5, #3
 8006aa8:	f84e 3000 	str.w	r3, [lr, r0]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8006aac:	f1a2 0318 	sub.w	r3, r2, #24
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d803      	bhi.n	8006abc <parsePreset+0xec8>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
 8006ab4:	4ba2      	ldr	r3, [pc, #648]	; (8006d40 <parsePreset+0x114c>)
 8006ab6:	441a      	add	r2, r3
 8006ab8:	f802 bc18 	strb.w	fp, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
 8006abc:	eb04 0308 	add.w	r3, r4, r8
 8006ac0:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
 8006ac2:	2bff      	cmp	r3, #255	; 0xff
 8006ac4:	f000 846f 	beq.w	80073a6 <parsePreset+0x17b2>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8006ac8:	fb09 f006 	mul.w	r0, r9, r6
 8006acc:	1d2a      	adds	r2, r5, #4
 8006ace:	eb0a 07c3 	add.w	r7, sl, r3, lsl #3
 8006ad2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8006ad6:	4472      	add	r2, lr
 8006ad8:	6057      	str	r7, [r2, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8006ada:	f1a3 0218 	sub.w	r2, r3, #24
 8006ade:	2a03      	cmp	r2, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8006ae0:	eb01 0200 	add.w	r2, r1, r0
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8006ae4:	f200 846c 	bhi.w	80073c0 <parsePreset+0x17cc>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8006ae8:	2004      	movs	r0, #4
 8006aea:	2108      	movs	r1, #8
 8006aec:	4472      	add	r2, lr
 8006aee:	fb11 0103 	smlabb	r1, r1, r3, r0
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 8006af2:	4893      	ldr	r0, [pc, #588]	; (8006d40 <parsePreset+0x114c>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8006af4:	4451      	add	r1, sl
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 8006af6:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8006af8:	6291      	str	r1, [r2, #40]	; 0x28
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 8006afa:	f803 bc18 	strb.w	fp, [r3, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8006afe:	eb04 0308 	add.w	r3, r4, r8
		bufferIndex += 5;
 8006b02:	f108 0805 	add.w	r8, r8, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8006b06:	78da      	ldrb	r2, [r3, #3]
		bufferIndex += 5;
 8006b08:	fa1f f888 	uxth.w	r8, r8
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8006b0c:	791b      	ldrb	r3, [r3, #4]
 8006b0e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8006b12:	b21b      	sxth	r3, r3
 8006b14:	ee07 3a90 	vmov	s15, r3
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8006b18:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8006b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8006b20:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		mappings[whichMapping].numHooks++;
 8006b24:	fb09 e606 	mla	r6, r9, r6, lr
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8006b28:	441d      	add	r5, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8006b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8006b2e:	eb0e 0385 	add.w	r3, lr, r5, lsl #2
 8006b32:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
 8006b36:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	for (int i = 0; i < mappingCount; i++)
 8006b40:	9b00      	ldr	r3, [sp, #0]
 8006b42:	4598      	cmp	r8, r3
 8006b44:	f47f af7e 	bne.w	8006a44 <parsePreset+0xe50>
 8006b48:	4b7c      	ldr	r3, [pc, #496]	; (8006d3c <parsePreset+0x1148>)
 8006b4a:	f883 c000 	strb.w	ip, [r3]
	if (params[Filter1].zeroToOneVal[0])
 8006b4e:	4b7e      	ldr	r3, [pc, #504]	; (8006d48 <parsePreset+0x1154>)
	audioMasterLevel = 1.0f;
 8006b50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006b54:	497d      	ldr	r1, [pc, #500]	; (8006d4c <parsePreset+0x1158>)
	presetWaitingToParse = 0;
 8006b56:	2000      	movs	r0, #0
	if (params[Filter1].zeroToOneVal[0])
 8006b58:	ed93 7a00 	vldr	s14, [r3]
 8006b5c:	33a8      	adds	r3, #168	; 0xa8
	audioMasterLevel = 1.0f;
 8006b5e:	600a      	str	r2, [r1, #0]
	presetWaitingToParse = 0;
 8006b60:	497b      	ldr	r1, [pc, #492]	; (8006d50 <parsePreset+0x115c>)
	if (params[Filter1].zeroToOneVal[0])
 8006b62:	eeb5 7a40 	vcmp.f32	s14, #0.0
	if (params[Filter2].zeroToOneVal[0])
 8006b66:	edd3 7a00 	vldr	s15, [r3]
	presetWaitingToParse = 0;
 8006b6a:	6008      	str	r0, [r1, #0]
	currentActivePreset = presetNumber;
 8006b6c:	9805      	ldr	r0, [sp, #20]
	if (params[Filter1].zeroToOneVal[0])
 8006b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	currentActivePreset = presetNumber;
 8006b72:	4978      	ldr	r1, [pc, #480]	; (8006d54 <parsePreset+0x1160>)
	if (params[Filter2].zeroToOneVal[0])
 8006b74:	eef5 7a40 	vcmp.f32	s15, #0.0
	oscToTick = NUM_OSC;
 8006b78:	4a77      	ldr	r2, [pc, #476]	; (8006d58 <parsePreset+0x1164>)
	currentActivePreset = presetNumber;
 8006b7a:	7008      	strb	r0, [r1, #0]
	oscToTick = NUM_OSC;
 8006b7c:	f04f 0103 	mov.w	r1, #3
	uint8_t totalFilters = 0;
 8006b80:	bf14      	ite	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	2300      	moveq	r3, #0
	oscToTick = NUM_OSC;
 8006b86:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
 8006b88:	2201      	movs	r2, #1
 8006b8a:	4974      	ldr	r1, [pc, #464]	; (8006d5c <parsePreset+0x1168>)
	if (params[Filter2].zeroToOneVal[0])
 8006b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	numEffectToTick = totalEffects;
 8006b90:	9801      	ldr	r0, [sp, #4]
	overSampled = 1;
 8006b92:	700a      	strb	r2, [r1, #0]
	numEffectToTick = totalEffects;
 8006b94:	4972      	ldr	r1, [pc, #456]	; (8006d60 <parsePreset+0x116c>)
		totalFilters++;
 8006b96:	bf18      	it	ne
 8006b98:	3301      	addne	r3, #1
	numEffectToTick = totalEffects;
 8006b9a:	7008      	strb	r0, [r1, #0]
	filterToTick = totalFilters;
 8006b9c:	4971      	ldr	r1, [pc, #452]	; (8006d64 <parsePreset+0x1170>)
 8006b9e:	700b      	strb	r3, [r1, #0]
 8006ba0:	b662      	cpsie	i
	presetReady = 1;
 8006ba2:	4b71      	ldr	r3, [pc, #452]	; (8006d68 <parsePreset+0x1174>)
 8006ba4:	601a      	str	r2, [r3, #0]
}
 8006ba6:	b007      	add	sp, #28
 8006ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
 8006bac:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8006d78 <parsePreset+0x1184>
				  effectSetters[i].setParam2 = &blankFunction;
 8006bb0:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
 8006bb2:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
 8006bb6:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8006d7c <parsePreset+0x1188>
 8006bba:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 8006bbe:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8006d80 <parsePreset+0x118c>
				  effectSetters[i].setParam5 = &blankFunction;
 8006bc2:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 8006bc6:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8006bca:	e581      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &FXhighpassTick;
 8006bcc:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8006d84 <parsePreset+0x1190>
				  effectSetters[i].setParam2 = &blankFunction;
 8006bd0:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
 8006bd2:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
 8006bd6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8006d88 <parsePreset+0x1194>
 8006bda:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 8006bde:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8006d8c <parsePreset+0x1198>
				  effectSetters[i].setParam5 = &blankFunction;
 8006be2:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 8006be6:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8006bea:	e571      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &FXlowpassTick;
 8006bec:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006d90 <parsePreset+0x119c>
				  effectSetters[i].setParam2 = &blankFunction;
 8006bf0:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
 8006bf2:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
 8006bf6:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8006d94 <parsePreset+0x11a0>
 8006bfa:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 8006bfe:	f8df c198 	ldr.w	ip, [pc, #408]	; 8006d98 <parsePreset+0x11a4>
				  effectSetters[i].setParam5 = &blankFunction;;
 8006c02:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 8006c06:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8006c0a:	e561      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &wavefolderTick;
 8006c0c:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8006d9c <parsePreset+0x11a8>
 8006c10:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &wavefolderParam1;
 8006c14:	f8df c188 	ldr.w	ip, [pc, #392]	; 8006da0 <parsePreset+0x11ac>
 8006c18:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8006c1c:	f8df c184 	ldr.w	ip, [pc, #388]	; 8006da4 <parsePreset+0x11b0>
 8006c20:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
 8006c24:	f8df c180 	ldr.w	ip, [pc, #384]	; 8006da8 <parsePreset+0x11b4>
 8006c28:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8006c2c:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8006dac <parsePreset+0x11b8>
 8006c30:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 8006c34:	f8df c178 	ldr.w	ip, [pc, #376]	; 8006db0 <parsePreset+0x11bc>
 8006c38:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
 8006c3c:	e548      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &tiltFilterTick;
 8006c3e:	f8df c174 	ldr.w	ip, [pc, #372]	; 8006db4 <parsePreset+0x11c0>
 8006c42:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &tiltParam1;
 8006c46:	f8df c170 	ldr.w	ip, [pc, #368]	; 8006db8 <parsePreset+0x11c4>
 8006c4a:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &tiltParam2;
 8006c4e:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8006dbc <parsePreset+0x11c8>
 8006c52:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
 8006c56:	f8df c168 	ldr.w	ip, [pc, #360]	; 8006dc0 <parsePreset+0x11cc>
 8006c5a:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
 8006c5e:	f8df c164 	ldr.w	ip, [pc, #356]	; 8006dc4 <parsePreset+0x11d0>
 8006c62:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 8006c66:	f8df c148 	ldr.w	ip, [pc, #328]	; 8006db0 <parsePreset+0x11bc>
 8006c6a:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
 8006c6e:	e52f      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &bcTick;
 8006c70:	f8df c154 	ldr.w	ip, [pc, #340]	; 8006dc8 <parsePreset+0x11d4>
 8006c74:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8006c78:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006dcc <parsePreset+0x11d8>
 8006c7c:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &param2Linear;
 8006c80:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8006dd0 <parsePreset+0x11dc>
 8006c84:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
 8006c88:	f8df c148 	ldr.w	ip, [pc, #328]	; 8006dd4 <parsePreset+0x11e0>
 8006c8c:	e7cc      	b.n	8006c28 <parsePreset+0x1034>
				  effectTick[i] = &chorusTick;
 8006c8e:	f8df c148 	ldr.w	ip, [pc, #328]	; 8006dd8 <parsePreset+0x11e4>
				  effectSetters[i].setParam5 = &blankFunction;
 8006c92:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &chorusTick;
 8006c94:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &chorusParam1;
 8006c98:	f8df c140 	ldr.w	ip, [pc, #320]	; 8006ddc <parsePreset+0x11e8>
 8006c9c:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &chorusParam2;
 8006ca0:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8006de0 <parsePreset+0x11ec>
 8006ca4:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
 8006ca8:	f8df c138 	ldr.w	ip, [pc, #312]	; 8006de4 <parsePreset+0x11f0>
 8006cac:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
 8006cb0:	f8df c134 	ldr.w	ip, [pc, #308]	; 8006de8 <parsePreset+0x11f4>
 8006cb4:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8006cb8:	e50a      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &compressorTick;
 8006cba:	f8df c130 	ldr.w	ip, [pc, #304]	; 8006dec <parsePreset+0x11f8>
 8006cbe:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &compressorParam1;
 8006cc2:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8006df0 <parsePreset+0x11fc>
 8006cc6:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &compressorParam2;
 8006cca:	f8df c128 	ldr.w	ip, [pc, #296]	; 8006df4 <parsePreset+0x1200>
 8006cce:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
 8006cd2:	f8df c124 	ldr.w	ip, [pc, #292]	; 8006df8 <parsePreset+0x1204>
 8006cd6:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
 8006cda:	f8df c120 	ldr.w	ip, [pc, #288]	; 8006dfc <parsePreset+0x1208>
 8006cde:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
 8006ce2:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8006e00 <parsePreset+0x120c>
 8006ce6:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
 8006cea:	e4f1      	b.n	80066d0 <parsePreset+0xadc>
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8006cec:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006e04 <parsePreset+0x1210>
				  effectTick[i] = FXVZhighshelfTick;
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <parsePreset+0x1178>)
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8006cf2:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8006cf6:	f8df c110 	ldr.w	ip, [pc, #272]	; 8006e08 <parsePreset+0x1214>
				  effectTick[i] = FXVZhighshelfTick;
 8006cfa:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8006cfc:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8006d00:	f8df c108 	ldr.w	ip, [pc, #264]	; 8006e0c <parsePreset+0x1218>
				  effectSetters[i].setParam5 = &blankFunction;;
 8006d04:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8006d08:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8006d0c:	e4e0      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &FXVZlowshelfTick;
 8006d0e:	f8df c100 	ldr.w	ip, [pc, #256]	; 8006e10 <parsePreset+0x121c>
 8006d12:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8006d16:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8006e14 <parsePreset+0x1220>
 8006d1a:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8006d1e:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8006e18 <parsePreset+0x1224>
 8006d22:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8006d26:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8006e1c <parsePreset+0x1228>
				  effectSetters[i].setParam5 = &blankFunction;
 8006d2a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8006d2e:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8006d32:	e4cd      	b.n	80066d0 <parsePreset+0xadc>
 8006d34:	20015d54 	.word	0x20015d54
 8006d38:	20015d58 	.word	0x20015d58
 8006d3c:	20015d60 	.word	0x20015d60
 8006d40:	200047f8 	.word	0x200047f8
 8006d44:	37fffffc 	.word	0x37fffffc
 8006d48:	200167c8 	.word	0x200167c8
 8006d4c:	20000278 	.word	0x20000278
 8006d50:	20016e6c 	.word	0x20016e6c
 8006d54:	200131e4 	.word	0x200131e4
 8006d58:	20000068 	.word	0x20000068
 8006d5c:	20000069 	.word	0x20000069
 8006d60:	20000050 	.word	0x20000050
 8006d64:	20000004 	.word	0x20000004
 8006d68:	20004b98 	.word	0x20004b98
 8006d6c:	08002e99 	.word	0x08002e99
 8006d70:	200153d4 	.word	0x200153d4
 8006d74:	20012f70 	.word	0x20012f70
 8006d78:	08002e49 	.word	0x08002e49
 8006d7c:	08002f6d 	.word	0x08002f6d
 8006d80:	08003279 	.word	0x08003279
 8006d84:	08002e35 	.word	0x08002e35
 8006d88:	08002f21 	.word	0x08002f21
 8006d8c:	08003265 	.word	0x08003265
 8006d90:	08002e21 	.word	0x08002e21
 8006d94:	08002ed5 	.word	0x08002ed5
 8006d98:	08003251 	.word	0x08003251
 8006d9c:	080029d9 	.word	0x080029d9
 8006da0:	08002601 	.word	0x08002601
 8006da4:	08002829 	.word	0x08002829
 8006da8:	08002629 	.word	0x08002629
 8006dac:	08002941 	.word	0x08002941
 8006db0:	08002955 	.word	0x08002955
 8006db4:	08002be1 	.word	0x08002be1
 8006db8:	08002659 	.word	0x08002659
 8006dbc:	080026a9 	.word	0x080026a9
 8006dc0:	080026f5 	.word	0x080026f5
 8006dc4:	08002719 	.word	0x08002719
 8006dc8:	08002de9 	.word	0x08002de9
 8006dcc:	080025d9 	.word	0x080025d9
 8006dd0:	08002849 	.word	0x08002849
 8006dd4:	08002969 	.word	0x08002969
 8006dd8:	08002b81 	.word	0x08002b81
 8006ddc:	08002ae5 	.word	0x08002ae5
 8006de0:	08002b09 	.word	0x08002b09
 8006de4:	08002b29 	.word	0x08002b29
 8006de8:	08002b55 	.word	0x08002b55
 8006dec:	08002e0d 	.word	0x08002e0d
 8006df0:	0800274d 	.word	0x0800274d
 8006df4:	08002769 	.word	0x08002769
 8006df8:	0800279d 	.word	0x0800279d
 8006dfc:	080027b9 	.word	0x080027b9
 8006e00:	080027f1 	.word	0x080027f1
 8006e04:	0800309d 	.word	0x0800309d
 8006e08:	080031e9 	.word	0x080031e9
 8006e0c:	080032c9 	.word	0x080032c9
 8006e10:	08002e85 	.word	0x08002e85
 8006e14:	08003051 	.word	0x08003051
 8006e18:	080031b5 	.word	0x080031b5
 8006e1c:	080032b5 	.word	0x080032b5
				  effectTick[i] = &FXVZpeakTick;
 8006e20:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8007130 <parsePreset+0x153c>
 8006e24:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXPeakParam1;
 8006e28:	f8df c308 	ldr.w	ip, [pc, #776]	; 8007134 <parsePreset+0x1540>
 8006e2c:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXPeakParam2;
 8006e30:	f8df c304 	ldr.w	ip, [pc, #772]	; 8007138 <parsePreset+0x1544>
 8006e34:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 8006e38:	f8df c300 	ldr.w	ip, [pc, #768]	; 800713c <parsePreset+0x1548>
				  effectSetters[i].setParam5 = &blankFunction;
 8006e3c:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 8006e40:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8006e44:	e444      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &FXdiodeLowpassTick;
 8006e46:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 8007140 <parsePreset+0x154c>
				  effectSetters[i].setParam2 = &blankFunction;
 8006e4a:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
 8006e4c:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
 8006e50:	f8df c2f0 	ldr.w	ip, [pc, #752]	; 8007144 <parsePreset+0x1550>
 8006e54:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 8006e58:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8007148 <parsePreset+0x1554>
				  effectSetters[i].setParam5 = &blankFunction;
 8006e5c:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 8006e60:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8006e64:	e434      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = FXVZbandrejectTick;
 8006e66:	4a98      	ldr	r2, [pc, #608]	; (80070c8 <parsePreset+0x14d4>)
 8006e68:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 8006e6a:	4a98      	ldr	r2, [pc, #608]	; (80070cc <parsePreset+0x14d8>)
				  effectSetters[i].setParam5 = &blankFunction;;
 8006e6c:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 8006e6e:	601a      	str	r2, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
 8006e70:	4a97      	ldr	r2, [pc, #604]	; (80070d0 <parsePreset+0x14dc>)
 8006e72:	605a      	str	r2, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
 8006e74:	4a97      	ldr	r2, [pc, #604]	; (80070d4 <parsePreset+0x14e0>)
				  effectSetters[i].setParam4 = &blankFunction;;
 8006e76:	e9c3 2002 	strd	r2, r0, [r3, #8]
				  break;
 8006e7a:	e429      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &shaperTick;
 8006e7c:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 800714c <parsePreset+0x1558>
				  effectSetters[i].setParam5 = &blankFunction;
 8006e80:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &tanhTick;
 8006e82:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8006e86:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8007150 <parsePreset+0x155c>
 8006e8a:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8006e8e:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 8007154 <parsePreset+0x1560>
 8006e92:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
 8006e96:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 8007158 <parsePreset+0x1564>
 8006e9a:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8006e9e:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 800715c <parsePreset+0x1568>
 8006ea2:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8006ea6:	e413      	b.n	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &tanhTick;
 8006ea8:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8007160 <parsePreset+0x156c>
				  effectSetters[i].setParam5 = &blankFunction;
 8006eac:	6118      	str	r0, [r3, #16]
 8006eae:	e7e8      	b.n	8006e82 <parsePreset+0x128e>
				  effectTick[i] = &satTick;
 8006eb0:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 8007164 <parsePreset+0x1570>
				  effectSetters[i].setParam5 = &blankFunction;
 8006eb4:	6118      	str	r0, [r3, #16]
 8006eb6:	e7e4      	b.n	8006e82 <parsePreset+0x128e>
				  effectTick[i] = &hardClipTick;
 8006eb8:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 8007168 <parsePreset+0x1574>
				  effectSetters[i].setParam5 = &blankFunction;
 8006ebc:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &hardClipTick;
 8006ebe:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8006ec2:	f8df c28c 	ldr.w	ip, [pc, #652]	; 8007150 <parsePreset+0x155c>
 8006ec6:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8006eca:	f8df c288 	ldr.w	ip, [pc, #648]	; 8007154 <parsePreset+0x1560>
 8006ece:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
 8006ed2:	f8df c298 	ldr.w	ip, [pc, #664]	; 800716c <parsePreset+0x1578>
 8006ed6:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8006eda:	f8df c280 	ldr.w	ip, [pc, #640]	; 800715c <parsePreset+0x1568>
 8006ede:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8006ee2:	f7ff bbf5 	b.w	80066d0 <parsePreset+0xadc>
				  effectTick[i] = &softClipTick;
 8006ee6:	f8df c288 	ldr.w	ip, [pc, #648]	; 8007170 <parsePreset+0x157c>
				  effectSetters[i].setParam5 = &blankFunction;
 8006eea:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &softClipTick;
 8006eec:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8006ef0:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8007150 <parsePreset+0x155c>
 8006ef4:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8006ef8:	f8df c258 	ldr.w	ip, [pc, #600]	; 8007154 <parsePreset+0x1560>
 8006efc:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
 8006f00:	f8df c270 	ldr.w	ip, [pc, #624]	; 8007174 <parsePreset+0x1580>
 8006f04:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8006f08:	f8df c250 	ldr.w	ip, [pc, #592]	; 800715c <parsePreset+0x1568>
 8006f0c:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8006f10:	f7ff bbde 	b.w	80066d0 <parsePreset+0xadc>
				  totalEffects--;
 8006f14:	9a01      	ldr	r2, [sp, #4]
				  effectSetters[i].setParam3 = &blankFunction;
 8006f16:	6098      	str	r0, [r3, #8]
				  totalEffects--;
 8006f18:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8006f1c:	fa5f f28c 	uxtb.w	r2, ip
				  effectTick[i] = &blankTick;
 8006f20:	f8df c254 	ldr.w	ip, [pc, #596]	; 8007178 <parsePreset+0x1584>
				  effectSetters[i].setParam2 = &blankFunction;
 8006f24:	e9c3 0000 	strd	r0, r0, [r3]
				  totalEffects--;
 8006f28:	9201      	str	r2, [sp, #4]
				  effectTick[i] = &blankTick;
 8006f2a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam5 = &blankFunction;
 8006f2e:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  break;
 8006f32:	f7ff bbcd 	b.w	80066d0 <parsePreset+0xadc>
				lfoShapeTick[i] = &lfoSawTick;
 8006f36:	4b68      	ldr	r3, [pc, #416]	; (80070d8 <parsePreset+0x14e4>)
 8006f38:	4868      	ldr	r0, [pc, #416]	; (80070dc <parsePreset+0x14e8>)
 8006f3a:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8006f3c:	4b68      	ldr	r3, [pc, #416]	; (80070e0 <parsePreset+0x14ec>)
 8006f3e:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
 8006f40:	4b68      	ldr	r3, [pc, #416]	; (80070e4 <parsePreset+0x14f0>)
 8006f42:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8006f44:	4b68      	ldr	r3, [pc, #416]	; (80070e8 <parsePreset+0x14f4>)
 8006f46:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8006f48:	f7ff bb89 	b.w	800665e <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoTriTick;
 8006f4c:	4b62      	ldr	r3, [pc, #392]	; (80070d8 <parsePreset+0x14e4>)
 8006f4e:	4867      	ldr	r0, [pc, #412]	; (80070ec <parsePreset+0x14f8>)
 8006f50:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8006f52:	4b67      	ldr	r3, [pc, #412]	; (80070f0 <parsePreset+0x14fc>)
 8006f54:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
 8006f56:	4b67      	ldr	r3, [pc, #412]	; (80070f4 <parsePreset+0x1500>)
 8006f58:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8006f5a:	4b67      	ldr	r3, [pc, #412]	; (80070f8 <parsePreset+0x1504>)
 8006f5c:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8006f5e:	f7ff bb7e 	b.w	800665e <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSineTick;
 8006f62:	4b5d      	ldr	r3, [pc, #372]	; (80070d8 <parsePreset+0x14e4>)
 8006f64:	4865      	ldr	r0, [pc, #404]	; (80070fc <parsePreset+0x1508>)
 8006f66:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8006f68:	4b65      	ldr	r3, [pc, #404]	; (8007100 <parsePreset+0x150c>)
 8006f6a:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
 8006f6c:	4b65      	ldr	r3, [pc, #404]	; (8007104 <parsePreset+0x1510>)
 8006f6e:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8006f70:	4b65      	ldr	r3, [pc, #404]	; (8007108 <parsePreset+0x1514>)
 8006f72:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8006f74:	f7ff bb73 	b.w	800665e <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSawTick;
 8006f78:	4b57      	ldr	r3, [pc, #348]	; (80070d8 <parsePreset+0x14e4>)
 8006f7a:	4858      	ldr	r0, [pc, #352]	; (80070dc <parsePreset+0x14e8>)
 8006f7c:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8006f7e:	4b58      	ldr	r3, [pc, #352]	; (80070e0 <parsePreset+0x14ec>)
 8006f80:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8006f82:	4b58      	ldr	r3, [pc, #352]	; (80070e4 <parsePreset+0x14f0>)
 8006f84:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8006f86:	4b58      	ldr	r3, [pc, #352]	; (80070e8 <parsePreset+0x14f4>)
 8006f88:	6213      	str	r3, [r2, #32]
				break;
 8006f8a:	f7ff bb18 	b.w	80065be <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8006f8e:	4b52      	ldr	r3, [pc, #328]	; (80070d8 <parsePreset+0x14e4>)
 8006f90:	485e      	ldr	r0, [pc, #376]	; (800710c <parsePreset+0x1518>)
 8006f92:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8006f94:	4b5e      	ldr	r3, [pc, #376]	; (8007110 <parsePreset+0x151c>)
 8006f96:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8006f98:	4b5e      	ldr	r3, [pc, #376]	; (8007114 <parsePreset+0x1520>)
 8006f9a:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8006f9c:	4b5e      	ldr	r3, [pc, #376]	; (8007118 <parsePreset+0x1524>)
 8006f9e:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8006fa0:	f7ff bb5d 	b.w	800665e <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSineTriTick;
 8006fa4:	4b4c      	ldr	r3, [pc, #304]	; (80070d8 <parsePreset+0x14e4>)
 8006fa6:	485d      	ldr	r0, [pc, #372]	; (800711c <parsePreset+0x1528>)
 8006fa8:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8006faa:	4b5d      	ldr	r3, [pc, #372]	; (8007120 <parsePreset+0x152c>)
 8006fac:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8006fae:	4b5d      	ldr	r3, [pc, #372]	; (8007124 <parsePreset+0x1530>)
 8006fb0:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8006fb2:	4b5d      	ldr	r3, [pc, #372]	; (8007128 <parsePreset+0x1534>)
 8006fb4:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8006fb6:	f7ff bb52 	b.w	800665e <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoTriTick;
 8006fba:	4b47      	ldr	r3, [pc, #284]	; (80070d8 <parsePreset+0x14e4>)
 8006fbc:	484b      	ldr	r0, [pc, #300]	; (80070ec <parsePreset+0x14f8>)
 8006fbe:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8006fc0:	4b4b      	ldr	r3, [pc, #300]	; (80070f0 <parsePreset+0x14fc>)
 8006fc2:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8006fc4:	4b4b      	ldr	r3, [pc, #300]	; (80070f4 <parsePreset+0x1500>)
 8006fc6:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8006fc8:	4b4b      	ldr	r3, [pc, #300]	; (80070f8 <parsePreset+0x1504>)
 8006fca:	6213      	str	r3, [r2, #32]
				break;
 8006fcc:	f7ff baf7 	b.w	80065be <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSineTick;
 8006fd0:	4b41      	ldr	r3, [pc, #260]	; (80070d8 <parsePreset+0x14e4>)
 8006fd2:	484a      	ldr	r0, [pc, #296]	; (80070fc <parsePreset+0x1508>)
 8006fd4:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8006fd6:	4b4a      	ldr	r3, [pc, #296]	; (8007100 <parsePreset+0x150c>)
 8006fd8:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8006fda:	4b4a      	ldr	r3, [pc, #296]	; (8007104 <parsePreset+0x1510>)
 8006fdc:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8006fde:	4b4a      	ldr	r3, [pc, #296]	; (8007108 <parsePreset+0x1514>)
 8006fe0:	6213      	str	r3, [r2, #32]
				break;
 8006fe2:	f7ff baec 	b.w	80065be <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8006fe6:	4b3c      	ldr	r3, [pc, #240]	; (80070d8 <parsePreset+0x14e4>)
 8006fe8:	4848      	ldr	r0, [pc, #288]	; (800710c <parsePreset+0x1518>)
 8006fea:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8006fec:	4b48      	ldr	r3, [pc, #288]	; (8007110 <parsePreset+0x151c>)
 8006fee:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8006ff0:	4b48      	ldr	r3, [pc, #288]	; (8007114 <parsePreset+0x1520>)
 8006ff2:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8006ff4:	4b48      	ldr	r3, [pc, #288]	; (8007118 <parsePreset+0x1524>)
 8006ff6:	6213      	str	r3, [r2, #32]
				break;
 8006ff8:	f7ff bae1 	b.w	80065be <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawTick;
 8006ffc:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <parsePreset+0x14e4>)
 8006ffe:	4837      	ldr	r0, [pc, #220]	; (80070dc <parsePreset+0x14e8>)
 8007000:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8007002:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <parsePreset+0x14ec>)
 8007004:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8007006:	4b37      	ldr	r3, [pc, #220]	; (80070e4 <parsePreset+0x14f0>)
 8007008:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <parsePreset+0x14f4>)
 800700c:	6153      	str	r3, [r2, #20]
				break;
 800700e:	f7ff bab6 	b.w	800657e <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTriTick;
 8007012:	4b31      	ldr	r3, [pc, #196]	; (80070d8 <parsePreset+0x14e4>)
 8007014:	4841      	ldr	r0, [pc, #260]	; (800711c <parsePreset+0x1528>)
 8007016:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007018:	4b41      	ldr	r3, [pc, #260]	; (8007120 <parsePreset+0x152c>)
 800701a:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 800701c:	4b41      	ldr	r3, [pc, #260]	; (8007124 <parsePreset+0x1530>)
 800701e:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8007020:	4b41      	ldr	r3, [pc, #260]	; (8007128 <parsePreset+0x1534>)
 8007022:	6213      	str	r3, [r2, #32]
				break;
 8007024:	f7ff bacb 	b.w	80065be <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoTriTick;
 8007028:	4b2b      	ldr	r3, [pc, #172]	; (80070d8 <parsePreset+0x14e4>)
 800702a:	4830      	ldr	r0, [pc, #192]	; (80070ec <parsePreset+0x14f8>)
 800702c:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
 800702e:	4b30      	ldr	r3, [pc, #192]	; (80070f0 <parsePreset+0x14fc>)
 8007030:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8007032:	4b30      	ldr	r3, [pc, #192]	; (80070f4 <parsePreset+0x1500>)
 8007034:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8007036:	4b30      	ldr	r3, [pc, #192]	; (80070f8 <parsePreset+0x1504>)
 8007038:	6153      	str	r3, [r2, #20]
				break;
 800703a:	f7ff baa0 	b.w	800657e <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTick;
 800703e:	4b26      	ldr	r3, [pc, #152]	; (80070d8 <parsePreset+0x14e4>)
 8007040:	482e      	ldr	r0, [pc, #184]	; (80070fc <parsePreset+0x1508>)
 8007042:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8007044:	4b2e      	ldr	r3, [pc, #184]	; (8007100 <parsePreset+0x150c>)
 8007046:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8007048:	4b2e      	ldr	r3, [pc, #184]	; (8007104 <parsePreset+0x1510>)
 800704a:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 800704c:	4b2e      	ldr	r3, [pc, #184]	; (8007108 <parsePreset+0x1514>)
 800704e:	6153      	str	r3, [r2, #20]
				break;
 8007050:	f7ff ba95 	b.w	800657e <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007054:	4b20      	ldr	r3, [pc, #128]	; (80070d8 <parsePreset+0x14e4>)
 8007056:	482d      	ldr	r0, [pc, #180]	; (800710c <parsePreset+0x1518>)
 8007058:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 800705a:	4b2d      	ldr	r3, [pc, #180]	; (8007110 <parsePreset+0x151c>)
 800705c:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 800705e:	4b2d      	ldr	r3, [pc, #180]	; (8007114 <parsePreset+0x1520>)
 8007060:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8007062:	4b2d      	ldr	r3, [pc, #180]	; (8007118 <parsePreset+0x1524>)
 8007064:	6153      	str	r3, [r2, #20]
				break;
 8007066:	f7ff ba8a 	b.w	800657e <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTriTick;
 800706a:	4b1b      	ldr	r3, [pc, #108]	; (80070d8 <parsePreset+0x14e4>)
 800706c:	482b      	ldr	r0, [pc, #172]	; (800711c <parsePreset+0x1528>)
 800706e:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007070:	4b2b      	ldr	r3, [pc, #172]	; (8007120 <parsePreset+0x152c>)
 8007072:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8007074:	4b2b      	ldr	r3, [pc, #172]	; (8007124 <parsePreset+0x1530>)
 8007076:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8007078:	4b2b      	ldr	r3, [pc, #172]	; (8007128 <parsePreset+0x1534>)
 800707a:	6153      	str	r3, [r2, #20]
				break;
 800707c:	f7ff ba7f 	b.w	800657e <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSawTick;
 8007080:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <parsePreset+0x14e4>)
 8007082:	4816      	ldr	r0, [pc, #88]	; (80070dc <parsePreset+0x14e8>)
				lfoSetters[i].setRate = &lfoSawSetRate;
 8007084:	4a29      	ldr	r2, [pc, #164]	; (800712c <parsePreset+0x1538>)
				lfoShapeTick[i] = &lfoSawTick;
 8007086:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8007088:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <parsePreset+0x14ec>)
 800708a:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
 800708c:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <parsePreset+0x14f0>)
 800708e:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8007090:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <parsePreset+0x14f4>)
 8007092:	6093      	str	r3, [r2, #8]
				break;
 8007094:	f7ff ba53 	b.w	800653e <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoTriTick;
 8007098:	4b0f      	ldr	r3, [pc, #60]	; (80070d8 <parsePreset+0x14e4>)
 800709a:	4814      	ldr	r0, [pc, #80]	; (80070ec <parsePreset+0x14f8>)
				lfoSetters[i].setRate = &lfoTriSetRate;
 800709c:	4a23      	ldr	r2, [pc, #140]	; (800712c <parsePreset+0x1538>)
				lfoShapeTick[i] = &lfoTriTick;
 800709e:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
 80070a0:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <parsePreset+0x14fc>)
 80070a2:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
 80070a4:	4b13      	ldr	r3, [pc, #76]	; (80070f4 <parsePreset+0x1500>)
 80070a6:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 80070a8:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <parsePreset+0x1504>)
 80070aa:	6093      	str	r3, [r2, #8]
				break;
 80070ac:	f7ff ba47 	b.w	800653e <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoSineTick;
 80070b0:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <parsePreset+0x14e4>)
 80070b2:	4812      	ldr	r0, [pc, #72]	; (80070fc <parsePreset+0x1508>)
				lfoSetters[i].setRate = &lfoSineSetRate;
 80070b4:	4a1d      	ldr	r2, [pc, #116]	; (800712c <parsePreset+0x1538>)
				lfoShapeTick[i] = &lfoSineTick;
 80070b6:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
 80070b8:	4b11      	ldr	r3, [pc, #68]	; (8007100 <parsePreset+0x150c>)
 80070ba:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
 80070bc:	4b11      	ldr	r3, [pc, #68]	; (8007104 <parsePreset+0x1510>)
 80070be:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 80070c0:	4b11      	ldr	r3, [pc, #68]	; (8007108 <parsePreset+0x1514>)
 80070c2:	6093      	str	r3, [r2, #8]
				break;
 80070c4:	f7ff ba3b 	b.w	800653e <parsePreset+0x94a>
 80070c8:	08002ead 	.word	0x08002ead
 80070cc:	080030e9 	.word	0x080030e9
 80070d0:	0800321d 	.word	0x0800321d
 80070d4:	080032dd 	.word	0x080032dd
 80070d8:	2000485c 	.word	0x2000485c
 80070dc:	0800245d 	.word	0x0800245d
 80070e0:	080024f1 	.word	0x080024f1
 80070e4:	080025c1 	.word	0x080025c1
 80070e8:	08002569 	.word	0x08002569
 80070ec:	08002441 	.word	0x08002441
 80070f0:	080024dd 	.word	0x080024dd
 80070f4:	080025bd 	.word	0x080025bd
 80070f8:	08002555 	.word	0x08002555
 80070fc:	08002425 	.word	0x08002425
 8007100:	080024c9 	.word	0x080024c9
 8007104:	080025b9 	.word	0x080025b9
 8007108:	08002541 	.word	0x08002541
 800710c:	080023ed 	.word	0x080023ed
 8007110:	080024a1 	.word	0x080024a1
 8007114:	08002591 	.word	0x08002591
 8007118:	08002519 	.word	0x08002519
 800711c:	08002409 	.word	0x08002409
 8007120:	080024b5 	.word	0x080024b5
 8007124:	080025a5 	.word	0x080025a5
 8007128:	0800252d 	.word	0x0800252d
 800712c:	200153a0 	.word	0x200153a0
 8007130:	08002e71 	.word	0x08002e71
 8007134:	08003005 	.word	0x08003005
 8007138:	08003181 	.word	0x08003181
 800713c:	080032a1 	.word	0x080032a1
 8007140:	08002e5d 	.word	0x08002e5d
 8007144:	08002fb9 	.word	0x08002fb9
 8007148:	0800328d 	.word	0x0800328d
 800714c:	08002b8d 	.word	0x08002b8d
 8007150:	080025d9 	.word	0x080025d9
 8007154:	08002829 	.word	0x08002829
 8007158:	0800285d 	.word	0x0800285d
 800715c:	08002941 	.word	0x08002941
 8007160:	08002c15 	.word	0x08002c15
 8007164:	08002d75 	.word	0x08002d75
 8007168:	08002cf1 	.word	0x08002cf1
 800716c:	080028c9 	.word	0x080028c9
 8007170:	08002c6d 	.word	0x08002c6d
 8007174:	08002871 	.word	0x08002871
 8007178:	08002bdd 	.word	0x08002bdd
				lfoShapeTick[i] = &lfoSawSquareTick;
 800717c:	4b99      	ldr	r3, [pc, #612]	; (80073e4 <parsePreset+0x17f0>)
 800717e:	489a      	ldr	r0, [pc, #616]	; (80073e8 <parsePreset+0x17f4>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007180:	4a9a      	ldr	r2, [pc, #616]	; (80073ec <parsePreset+0x17f8>)
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007182:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007184:	4b9a      	ldr	r3, [pc, #616]	; (80073f0 <parsePreset+0x17fc>)
 8007186:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8007188:	4b9a      	ldr	r3, [pc, #616]	; (80073f4 <parsePreset+0x1800>)
 800718a:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 800718c:	4b9a      	ldr	r3, [pc, #616]	; (80073f8 <parsePreset+0x1804>)
 800718e:	6093      	str	r3, [r2, #8]
				break;
 8007190:	f7ff b9d5 	b.w	800653e <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoSineTriTick;
 8007194:	4b93      	ldr	r3, [pc, #588]	; (80073e4 <parsePreset+0x17f0>)
 8007196:	4899      	ldr	r0, [pc, #612]	; (80073fc <parsePreset+0x1808>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007198:	4a94      	ldr	r2, [pc, #592]	; (80073ec <parsePreset+0x17f8>)
				lfoShapeTick[i] = &lfoSineTriTick;
 800719a:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 800719c:	4b98      	ldr	r3, [pc, #608]	; (8007400 <parsePreset+0x180c>)
 800719e:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 80071a0:	4b98      	ldr	r3, [pc, #608]	; (8007404 <parsePreset+0x1810>)
 80071a2:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 80071a4:	4b98      	ldr	r3, [pc, #608]	; (8007408 <parsePreset+0x1814>)
 80071a6:	6093      	str	r3, [r2, #8]
				break;
 80071a8:	f7ff b9c9 	b.w	800653e <parsePreset+0x94a>
				  filterTick[i] = &LadderLowpassTick;
 80071ac:	4b97      	ldr	r3, [pc, #604]	; (800740c <parsePreset+0x1818>)
 80071ae:	4a98      	ldr	r2, [pc, #608]	; (8007410 <parsePreset+0x181c>)
 80071b0:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 80071b2:	4b98      	ldr	r3, [pc, #608]	; (8007414 <parsePreset+0x1820>)
 80071b4:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 80071b6:	4b98      	ldr	r3, [pc, #608]	; (8007418 <parsePreset+0x1824>)
 80071b8:	60cb      	str	r3, [r1, #12]
				  break;
 80071ba:	f7ff b99e 	b.w	80064fa <parsePreset+0x906>
				  filterTick[i] = &VZbandrejectTick;
 80071be:	4b93      	ldr	r3, [pc, #588]	; (800740c <parsePreset+0x1818>)
 80071c0:	4a96      	ldr	r2, [pc, #600]	; (800741c <parsePreset+0x1828>)
 80071c2:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 80071c4:	4b96      	ldr	r3, [pc, #600]	; (8007420 <parsePreset+0x182c>)
 80071c6:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 80071c8:	4b96      	ldr	r3, [pc, #600]	; (8007424 <parsePreset+0x1830>)
 80071ca:	60cb      	str	r3, [r1, #12]
				  break;
 80071cc:	f7ff b995 	b.w	80064fa <parsePreset+0x906>
				  filterTick[i] = &VZhighshelfTick;
 80071d0:	4b8e      	ldr	r3, [pc, #568]	; (800740c <parsePreset+0x1818>)
 80071d2:	4a95      	ldr	r2, [pc, #596]	; (8007428 <parsePreset+0x1834>)
 80071d4:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 80071d6:	4b95      	ldr	r3, [pc, #596]	; (800742c <parsePreset+0x1838>)
 80071d8:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 80071da:	4b95      	ldr	r3, [pc, #596]	; (8007430 <parsePreset+0x183c>)
 80071dc:	60cb      	str	r3, [r1, #12]
				  break;
 80071de:	f7ff b98c 	b.w	80064fa <parsePreset+0x906>
				  filterTick[i] = &VZlowshelfTick;
 80071e2:	4b8a      	ldr	r3, [pc, #552]	; (800740c <parsePreset+0x1818>)
 80071e4:	4a93      	ldr	r2, [pc, #588]	; (8007434 <parsePreset+0x1840>)
 80071e6:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 80071e8:	4b93      	ldr	r3, [pc, #588]	; (8007438 <parsePreset+0x1844>)
 80071ea:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 80071ec:	4b93      	ldr	r3, [pc, #588]	; (800743c <parsePreset+0x1848>)
 80071ee:	60cb      	str	r3, [r1, #12]
				  break;
 80071f0:	f7ff b983 	b.w	80064fa <parsePreset+0x906>
				  filterTick[i] = &VZpeakTick;
 80071f4:	4b85      	ldr	r3, [pc, #532]	; (800740c <parsePreset+0x1818>)
 80071f6:	4a92      	ldr	r2, [pc, #584]	; (8007440 <parsePreset+0x184c>)
 80071f8:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
 80071fa:	4b92      	ldr	r3, [pc, #584]	; (8007444 <parsePreset+0x1850>)
 80071fc:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
 80071fe:	4b92      	ldr	r3, [pc, #584]	; (8007448 <parsePreset+0x1854>)
 8007200:	60cb      	str	r3, [r1, #12]
				  break;
 8007202:	f7ff b97a 	b.w	80064fa <parsePreset+0x906>
				  filterTick[i] = &diodeLowpassTick;
 8007206:	4b81      	ldr	r3, [pc, #516]	; (800740c <parsePreset+0x1818>)
 8007208:	4a90      	ldr	r2, [pc, #576]	; (800744c <parsePreset+0x1858>)
 800720a:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 800720c:	4b90      	ldr	r3, [pc, #576]	; (8007450 <parsePreset+0x185c>)
 800720e:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8007210:	4b90      	ldr	r3, [pc, #576]	; (8007454 <parsePreset+0x1860>)
 8007212:	60cb      	str	r3, [r1, #12]
				  break;
 8007214:	f7ff b971 	b.w	80064fa <parsePreset+0x906>
				  filterTick[i] = &bandpassTick;
 8007218:	4b7c      	ldr	r3, [pc, #496]	; (800740c <parsePreset+0x1818>)
 800721a:	4a8f      	ldr	r2, [pc, #572]	; (8007458 <parsePreset+0x1864>)
 800721c:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
 800721e:	4b8f      	ldr	r3, [pc, #572]	; (800745c <parsePreset+0x1868>)
 8007220:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
 8007222:	4b8f      	ldr	r3, [pc, #572]	; (8007460 <parsePreset+0x186c>)
 8007224:	60cb      	str	r3, [r1, #12]
				  break;
 8007226:	f7ff b968 	b.w	80064fa <parsePreset+0x906>
				  filterTick[i] = &highpassTick;
 800722a:	4b78      	ldr	r3, [pc, #480]	; (800740c <parsePreset+0x1818>)
 800722c:	4a8d      	ldr	r2, [pc, #564]	; (8007464 <parsePreset+0x1870>)
 800722e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
 8007230:	4b8d      	ldr	r3, [pc, #564]	; (8007468 <parsePreset+0x1874>)
 8007232:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &highpassSetGain;
 8007234:	4b8d      	ldr	r3, [pc, #564]	; (800746c <parsePreset+0x1878>)
 8007236:	60cb      	str	r3, [r1, #12]
				  break;
 8007238:	f7ff b95f 	b.w	80064fa <parsePreset+0x906>
				  filterTick[i] = &LadderLowpassTick;
 800723c:	4b73      	ldr	r3, [pc, #460]	; (800740c <parsePreset+0x1818>)
 800723e:	4a74      	ldr	r2, [pc, #464]	; (8007410 <parsePreset+0x181c>)
 8007240:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8007242:	4b74      	ldr	r3, [pc, #464]	; (8007414 <parsePreset+0x1820>)
 8007244:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8007246:	4b74      	ldr	r3, [pc, #464]	; (8007418 <parsePreset+0x1824>)
 8007248:	604b      	str	r3, [r1, #4]
				  break;
 800724a:	f7ff b935 	b.w	80064b8 <parsePreset+0x8c4>
				  filterTick[i] = &VZbandrejectTick;
 800724e:	4b6f      	ldr	r3, [pc, #444]	; (800740c <parsePreset+0x1818>)
 8007250:	4a72      	ldr	r2, [pc, #456]	; (800741c <parsePreset+0x1828>)
 8007252:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8007254:	4b72      	ldr	r3, [pc, #456]	; (8007420 <parsePreset+0x182c>)
 8007256:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8007258:	4b72      	ldr	r3, [pc, #456]	; (8007424 <parsePreset+0x1830>)
 800725a:	604b      	str	r3, [r1, #4]
				  break;
 800725c:	f7ff b92c 	b.w	80064b8 <parsePreset+0x8c4>
				  filterTick[i] = &VZhighshelfTick;
 8007260:	4b6a      	ldr	r3, [pc, #424]	; (800740c <parsePreset+0x1818>)
 8007262:	4a71      	ldr	r2, [pc, #452]	; (8007428 <parsePreset+0x1834>)
 8007264:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8007266:	4b71      	ldr	r3, [pc, #452]	; (800742c <parsePreset+0x1838>)
 8007268:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 800726a:	4b71      	ldr	r3, [pc, #452]	; (8007430 <parsePreset+0x183c>)
 800726c:	604b      	str	r3, [r1, #4]
				  break;
 800726e:	f7ff b923 	b.w	80064b8 <parsePreset+0x8c4>
				  filterTick[i] = &VZlowshelfTick;
 8007272:	4b66      	ldr	r3, [pc, #408]	; (800740c <parsePreset+0x1818>)
 8007274:	4a6f      	ldr	r2, [pc, #444]	; (8007434 <parsePreset+0x1840>)
 8007276:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8007278:	4b6f      	ldr	r3, [pc, #444]	; (8007438 <parsePreset+0x1844>)
 800727a:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 800727c:	4b6f      	ldr	r3, [pc, #444]	; (800743c <parsePreset+0x1848>)
 800727e:	604b      	str	r3, [r1, #4]
				  break;
 8007280:	f7ff b91a 	b.w	80064b8 <parsePreset+0x8c4>
				  filterTick[i] = &VZpeakTick;
 8007284:	4b61      	ldr	r3, [pc, #388]	; (800740c <parsePreset+0x1818>)
 8007286:	4a6e      	ldr	r2, [pc, #440]	; (8007440 <parsePreset+0x184c>)
 8007288:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
 800728a:	4b6e      	ldr	r3, [pc, #440]	; (8007444 <parsePreset+0x1850>)
 800728c:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
 800728e:	4b6e      	ldr	r3, [pc, #440]	; (8007448 <parsePreset+0x1854>)
 8007290:	604b      	str	r3, [r1, #4]
				  break;
 8007292:	f7ff b911 	b.w	80064b8 <parsePreset+0x8c4>
				  filterTick[i] = &diodeLowpassTick;
 8007296:	4b5d      	ldr	r3, [pc, #372]	; (800740c <parsePreset+0x1818>)
 8007298:	4a6c      	ldr	r2, [pc, #432]	; (800744c <parsePreset+0x1858>)
 800729a:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 800729c:	4b6c      	ldr	r3, [pc, #432]	; (8007450 <parsePreset+0x185c>)
 800729e:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 80072a0:	4b6c      	ldr	r3, [pc, #432]	; (8007454 <parsePreset+0x1860>)
 80072a2:	604b      	str	r3, [r1, #4]
				  break;
 80072a4:	f7ff b908 	b.w	80064b8 <parsePreset+0x8c4>
				  filterTick[i] = &bandpassTick;
 80072a8:	4b58      	ldr	r3, [pc, #352]	; (800740c <parsePreset+0x1818>)
 80072aa:	4a6b      	ldr	r2, [pc, #428]	; (8007458 <parsePreset+0x1864>)
 80072ac:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
 80072ae:	4b6b      	ldr	r3, [pc, #428]	; (800745c <parsePreset+0x1868>)
 80072b0:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
 80072b2:	4b6b      	ldr	r3, [pc, #428]	; (8007460 <parsePreset+0x186c>)
 80072b4:	604b      	str	r3, [r1, #4]
				  break;
 80072b6:	f7ff b8ff 	b.w	80064b8 <parsePreset+0x8c4>
				  filterTick[i] = &highpassTick;
 80072ba:	4b54      	ldr	r3, [pc, #336]	; (800740c <parsePreset+0x1818>)
 80072bc:	4a69      	ldr	r2, [pc, #420]	; (8007464 <parsePreset+0x1870>)
 80072be:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
 80072c0:	4b69      	ldr	r3, [pc, #420]	; (8007468 <parsePreset+0x1874>)
 80072c2:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &highpassSetGain;
 80072c4:	4b69      	ldr	r3, [pc, #420]	; (800746c <parsePreset+0x1878>)
 80072c6:	604b      	str	r3, [r1, #4]
				  break;
 80072c8:	f7ff b8f6 	b.w	80064b8 <parsePreset+0x8c4>
				  shapeTick[i] = &userTick;
 80072cc:	4a68      	ldr	r2, [pc, #416]	; (8007470 <parsePreset+0x187c>)
 80072ce:	4969      	ldr	r1, [pc, #420]	; (8007474 <parsePreset+0x1880>)
 80072d0:	6091      	str	r1, [r2, #8]
				  break;
 80072d2:	f7ff b8bd 	b.w	8006450 <parsePreset+0x85c>
				  shapeTick[i] = &triTick;
 80072d6:	4a66      	ldr	r2, [pc, #408]	; (8007470 <parsePreset+0x187c>)
 80072d8:	4967      	ldr	r1, [pc, #412]	; (8007478 <parsePreset+0x1884>)
 80072da:	6091      	str	r1, [r2, #8]
				  break;
 80072dc:	f7ff b8b8 	b.w	8006450 <parsePreset+0x85c>
				  shapeTick[i] = &sineTick;
 80072e0:	4a63      	ldr	r2, [pc, #396]	; (8007470 <parsePreset+0x187c>)
 80072e2:	4966      	ldr	r1, [pc, #408]	; (800747c <parsePreset+0x1888>)
 80072e4:	6091      	str	r1, [r2, #8]
				  break;
 80072e6:	f7ff b8b3 	b.w	8006450 <parsePreset+0x85c>
				  shapeTick[i] = &pulseTick;
 80072ea:	4a61      	ldr	r2, [pc, #388]	; (8007470 <parsePreset+0x187c>)
 80072ec:	4964      	ldr	r1, [pc, #400]	; (8007480 <parsePreset+0x188c>)
 80072ee:	6091      	str	r1, [r2, #8]
				  break;
 80072f0:	f7ff b8ae 	b.w	8006450 <parsePreset+0x85c>
				  shapeTick[i] = &sawTick;
 80072f4:	4a5e      	ldr	r2, [pc, #376]	; (8007470 <parsePreset+0x187c>)
 80072f6:	4963      	ldr	r1, [pc, #396]	; (8007484 <parsePreset+0x1890>)
 80072f8:	6091      	str	r1, [r2, #8]
				  break;
 80072fa:	f7ff b8a9 	b.w	8006450 <parsePreset+0x85c>
				  shapeTick[i] = &sineTriTick;
 80072fe:	4a5c      	ldr	r2, [pc, #368]	; (8007470 <parsePreset+0x187c>)
 8007300:	4961      	ldr	r1, [pc, #388]	; (8007488 <parsePreset+0x1894>)
 8007302:	6091      	str	r1, [r2, #8]
				  break;
 8007304:	f7ff b8a4 	b.w	8006450 <parsePreset+0x85c>
				  shapeTick[i] = &userTick;
 8007308:	4a59      	ldr	r2, [pc, #356]	; (8007470 <parsePreset+0x187c>)
 800730a:	495a      	ldr	r1, [pc, #360]	; (8007474 <parsePreset+0x1880>)
 800730c:	6051      	str	r1, [r2, #4]
				  break;
 800730e:	f7ff b878 	b.w	8006402 <parsePreset+0x80e>
				  shapeTick[i] = &triTick;
 8007312:	4a57      	ldr	r2, [pc, #348]	; (8007470 <parsePreset+0x187c>)
 8007314:	4958      	ldr	r1, [pc, #352]	; (8007478 <parsePreset+0x1884>)
 8007316:	6051      	str	r1, [r2, #4]
				  break;
 8007318:	f7ff b873 	b.w	8006402 <parsePreset+0x80e>
				  shapeTick[i] = &sineTick;
 800731c:	4a54      	ldr	r2, [pc, #336]	; (8007470 <parsePreset+0x187c>)
 800731e:	4957      	ldr	r1, [pc, #348]	; (800747c <parsePreset+0x1888>)
 8007320:	6051      	str	r1, [r2, #4]
				  break;
 8007322:	f7ff b86e 	b.w	8006402 <parsePreset+0x80e>
				  shapeTick[i] = &pulseTick;
 8007326:	4a52      	ldr	r2, [pc, #328]	; (8007470 <parsePreset+0x187c>)
 8007328:	4955      	ldr	r1, [pc, #340]	; (8007480 <parsePreset+0x188c>)
 800732a:	6051      	str	r1, [r2, #4]
				  break;
 800732c:	f7ff b869 	b.w	8006402 <parsePreset+0x80e>
				  shapeTick[i] = &sawTick;
 8007330:	4a4f      	ldr	r2, [pc, #316]	; (8007470 <parsePreset+0x187c>)
 8007332:	4954      	ldr	r1, [pc, #336]	; (8007484 <parsePreset+0x1890>)
 8007334:	6051      	str	r1, [r2, #4]
				  break;
 8007336:	f7ff b864 	b.w	8006402 <parsePreset+0x80e>
				  shapeTick[i] = &sineTriTick;
 800733a:	4a4d      	ldr	r2, [pc, #308]	; (8007470 <parsePreset+0x187c>)
 800733c:	4952      	ldr	r1, [pc, #328]	; (8007488 <parsePreset+0x1894>)
 800733e:	6051      	str	r1, [r2, #4]
				  break;
 8007340:	f7ff b85f 	b.w	8006402 <parsePreset+0x80e>
				  shapeTick[i] = &userTick;
 8007344:	4b4a      	ldr	r3, [pc, #296]	; (8007470 <parsePreset+0x187c>)
 8007346:	4a4b      	ldr	r2, [pc, #300]	; (8007474 <parsePreset+0x1880>)
 8007348:	601a      	str	r2, [r3, #0]
				  break;
 800734a:	f7ff b834 	b.w	80063b6 <parsePreset+0x7c2>
				  shapeTick[i] = &triTick;
 800734e:	4b48      	ldr	r3, [pc, #288]	; (8007470 <parsePreset+0x187c>)
 8007350:	4a49      	ldr	r2, [pc, #292]	; (8007478 <parsePreset+0x1884>)
 8007352:	601a      	str	r2, [r3, #0]
				  break;
 8007354:	f7ff b82f 	b.w	80063b6 <parsePreset+0x7c2>
				  shapeTick[i] = &sineTick;
 8007358:	4b45      	ldr	r3, [pc, #276]	; (8007470 <parsePreset+0x187c>)
 800735a:	4a48      	ldr	r2, [pc, #288]	; (800747c <parsePreset+0x1888>)
 800735c:	601a      	str	r2, [r3, #0]
				  break;
 800735e:	f7ff b82a 	b.w	80063b6 <parsePreset+0x7c2>
				  shapeTick[i] = &pulseTick;
 8007362:	4b43      	ldr	r3, [pc, #268]	; (8007470 <parsePreset+0x187c>)
 8007364:	4a46      	ldr	r2, [pc, #280]	; (8007480 <parsePreset+0x188c>)
 8007366:	601a      	str	r2, [r3, #0]
				  break;
 8007368:	f7ff b825 	b.w	80063b6 <parsePreset+0x7c2>
				  shapeTick[i] = &sawTick;
 800736c:	4b40      	ldr	r3, [pc, #256]	; (8007470 <parsePreset+0x187c>)
 800736e:	4a45      	ldr	r2, [pc, #276]	; (8007484 <parsePreset+0x1890>)
 8007370:	601a      	str	r2, [r3, #0]
				  break;
 8007372:	f7ff b820 	b.w	80063b6 <parsePreset+0x7c2>
				  shapeTick[i] = &sineTriTick;
 8007376:	4b3e      	ldr	r3, [pc, #248]	; (8007470 <parsePreset+0x187c>)
 8007378:	4a43      	ldr	r2, [pc, #268]	; (8007488 <parsePreset+0x1894>)
 800737a:	601a      	str	r2, [r3, #0]
				  break;
 800737c:	f7ff b81b 	b.w	80063b6 <parsePreset+0x7c2>
			mappings[whichMapping].destNumber = destNumber;
 8007380:	fb09 f30c 	mul.w	r3, r9, ip
 8007384:	4666      	mov	r6, ip
 8007386:	eb0e 0203 	add.w	r2, lr, r3
 800738a:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
 800738e:	9b02      	ldr	r3, [sp, #8]
 8007390:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007394:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
 8007398:	f10c 0301 	add.w	r3, ip, #1
			mappings[whichMapping].dest = &params[destNumber];
 800739c:	6050      	str	r0, [r2, #4]
			numMappings++;
 800739e:	fa5f fc83 	uxtb.w	ip, r3
 80073a2:	f7ff bb66 	b.w	8006a72 <parsePreset+0xe7e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
 80073a6:	fb09 f306 	mul.w	r3, r9, r6
 80073aa:	18ca      	adds	r2, r1, r3
 80073ac:	4937      	ldr	r1, [pc, #220]	; (800748c <parsePreset+0x1898>)
 80073ae:	4472      	add	r2, lr
 80073b0:	6291      	str	r1, [r2, #40]	; 0x28
 80073b2:	1d2a      	adds	r2, r5, #4
 80073b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b8:	4473      	add	r3, lr
 80073ba:	6059      	str	r1, [r3, #4]
 80073bc:	f7ff bb9f 	b.w	8006afe <parsePreset+0xf0a>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80073c0:	2108      	movs	r1, #8
 80073c2:	2004      	movs	r0, #4
 80073c4:	4472      	add	r2, lr
 80073c6:	fb11 0303 	smlabb	r3, r1, r3, r0
 80073ca:	4453      	add	r3, sl
 80073cc:	6293      	str	r3, [r2, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 80073ce:	f7ff bb96 	b.w	8006afe <parsePreset+0xf0a>
 80073d2:	4d2f      	ldr	r5, [pc, #188]	; (8007490 <parsePreset+0x189c>)
 80073d4:	f7fe bea0 	b.w	8006118 <parsePreset+0x524>
	for (int i = 0; i < paramCount; i++)
 80073d8:	f04f 0884 	mov.w	r8, #132	; 0x84
 80073dc:	4e2d      	ldr	r6, [pc, #180]	; (8007494 <parsePreset+0x18a0>)
 80073de:	f7fe be89 	b.w	80060f4 <parsePreset+0x500>
 80073e2:	bf00      	nop
 80073e4:	2000485c 	.word	0x2000485c
 80073e8:	080023ed 	.word	0x080023ed
 80073ec:	200153a0 	.word	0x200153a0
 80073f0:	080024a1 	.word	0x080024a1
 80073f4:	08002591 	.word	0x08002591
 80073f8:	08002519 	.word	0x08002519
 80073fc:	08002409 	.word	0x08002409
 8007400:	080024b5 	.word	0x080024b5
 8007404:	080025a5 	.word	0x080025a5
 8007408:	0800252d 	.word	0x0800252d
 800740c:	20004644 	.word	0x20004644
 8007410:	0800188d 	.word	0x0800188d
 8007414:	08001a2d 	.word	0x08001a2d
 8007418:	08001bcd 	.word	0x08001bcd
 800741c:	08001849 	.word	0x08001849
 8007420:	08001a19 	.word	0x08001a19
 8007424:	08001b9d 	.word	0x08001b9d
 8007428:	0800181d 	.word	0x0800181d
 800742c:	08001a05 	.word	0x08001a05
 8007430:	08001b69 	.word	0x08001b69
 8007434:	080017f1 	.word	0x080017f1
 8007438:	080019f1 	.word	0x080019f1
 800743c:	08001b35 	.word	0x08001b35
 8007440:	080017c5 	.word	0x080017c5
 8007444:	080019dd 	.word	0x080019dd
 8007448:	08001b01 	.word	0x08001b01
 800744c:	08001781 	.word	0x08001781
 8007450:	080019c9 	.word	0x080019c9
 8007454:	08001ad1 	.word	0x08001ad1
 8007458:	0800173d 	.word	0x0800173d
 800745c:	080019b5 	.word	0x080019b5
 8007460:	08001aa1 	.word	0x08001aa1
 8007464:	080016f9 	.word	0x080016f9
 8007468:	080019a1 	.word	0x080019a1
 800746c:	08001a71 	.word	0x08001a71
 8007470:	20004c64 	.word	0x20004c64
 8007474:	080014b5 	.word	0x080014b5
 8007478:	08001439 	.word	0x08001439
 800747c:	08001409 	.word	0x08001409
 8007480:	0800138d 	.word	0x0800138d
 8007484:	08001329 	.word	0x08001329
 8007488:	080012ad 	.word	0x080012ad
 800748c:	2000027c 	.word	0x2000027c
 8007490:	20016e58 	.word	0x20016e58
 8007494:	20015d64 	.word	0x20015d64
			params[i].objectNumber = 3;
 8007498:	f04f 0303 	mov.w	r3, #3
 800749c:	f889 3018 	strb.w	r3, [r9, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 80074a0:	ed99 0a02 	vldr	s0, [r9, #8]
 80074a4:	2100      	movs	r1, #0
 80074a6:	f899 0018 	ldrb.w	r0, [r9, #24]
 80074aa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80074ae:	4798      	blx	r3
 80074b0:	ed99 0a03 	vldr	s0, [r9, #12]
 80074b4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80074b8:	2101      	movs	r1, #1
 80074ba:	f899 0018 	ldrb.w	r0, [r9, #24]
 80074be:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 80074c0:	f7ff ba22 	b.w	8006908 <parsePreset+0xd14>
			params[i].objectNumber = 2;
 80074c4:	2302      	movs	r3, #2
 80074c6:	f889 3018 	strb.w	r3, [r9, #24]
 80074ca:	e7e9      	b.n	80074a0 <parsePreset+0x18ac>
			params[i].objectNumber = 1;
 80074cc:	f889 a018 	strb.w	sl, [r9, #24]
 80074d0:	e7e6      	b.n	80074a0 <parsePreset+0x18ac>
 80074d2:	4a01      	ldr	r2, [pc, #4]	; (80074d8 <parsePreset+0x18e4>)
 80074d4:	f7ff b833 	b.w	800653e <parsePreset+0x94a>
 80074d8:	200153a0 	.word	0x200153a0

080074dc <main>:
{
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80074e0:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80074e2:	2501      	movs	r5, #1
{
 80074e4:	ed2d 8b02 	vpush	{d8}
 80074e8:	b08d      	sub	sp, #52	; 0x34
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80074ea:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80074ee:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_MPU_Disable();
 80074f2:	f000 fff7 	bl	80084e4 <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80074f6:	f248 721f 	movw	r2, #34591	; 0x871f
 80074fa:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80074fe:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8007500:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8007504:	930a      	str	r3, [sp, #40]	; 0x28
 8007506:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800750a:	f001 f809 	bl	8008520 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 800750e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8007512:	4bb9      	ldr	r3, [pc, #740]	; (80077f8 <main+0x31c>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007514:	a807      	add	r0, sp, #28
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8007516:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800751a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800751e:	f000 ffff 	bl	8008520 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8007522:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8007526:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007528:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0xc0000000;
 800752a:	9308      	str	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800752c:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800752e:	f88d 201d 	strb.w	r2, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8007532:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007536:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800753a:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800753e:	f000 ffef 	bl	8008520 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x60000000;
 8007542:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8007546:	2318      	movs	r3, #24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8007548:	2103      	movs	r1, #3
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800754a:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x60000000;
 800754c:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800754e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8007552:	f88d 101d 	strb.w	r1, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8007556:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800755a:	f000 ffe1 	bl	8008520 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800755e:	2004      	movs	r0, #4
 8007560:	f000 ffce 	bl	8008500 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007564:	4ba5      	ldr	r3, [pc, #660]	; (80077fc <main+0x320>)
 8007566:	695a      	ldr	r2, [r3, #20]
 8007568:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800756c:	d111      	bne.n	8007592 <main+0xb6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800756e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007572:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007576:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800757a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800757e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007588:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800758a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800758e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8007592:	489a      	ldr	r0, [pc, #616]	; (80077fc <main+0x320>)
 8007594:	6943      	ldr	r3, [r0, #20]
 8007596:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800759a:	d124      	bne.n	80075e6 <main+0x10a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800759c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80075a0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80075a4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80075a8:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80075ac:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80075b0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80075b4:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80075b6:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80075ba:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80075bc:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80075c0:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80075c2:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	d1f8      	bne.n	80075bc <main+0xe0>
    } while(sets-- != 0U);
 80075ca:	3c20      	subs	r4, #32
 80075cc:	f114 0f20 	cmn.w	r4, #32
 80075d0:	d1f1      	bne.n	80075b6 <main+0xda>
 80075d2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80075d6:	6943      	ldr	r3, [r0, #20]
 80075d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075dc:	6143      	str	r3, [r0, #20]
 80075de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80075e2:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80075e6:	f000 fea5 	bl	8008334 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 80075ea:	b662      	cpsie	i
  SystemClock_Config();
 80075ec:	f7fd fd4c 	bl	8005088 <SystemClock_Config>
  PeriphCommonClock_Config();
 80075f0:	f7fd fde2 	bl	80051b8 <PeriphCommonClock_Config>
  HAL_Delay(500);
 80075f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075f8:	f000 fede 	bl	80083b8 <HAL_Delay>
  MX_GPIO_Init();
 80075fc:	f7fd f9b8 	bl	8004970 <MX_GPIO_Init>
  MX_DMA_Init();
 8007600:	f7fd f8b2 	bl	8004768 <MX_DMA_Init>
  MX_FMC_Init();
 8007604:	f7fd f8f4 	bl	80047f0 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8007608:	f000 fb00 	bl	8007c0c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800760c:	f009 f878 	bl	8010700 <MX_FATFS_Init>
  MX_SAI1_Init();
 8007610:	f000 fa02 	bl	8007a18 <MX_SAI1_Init>
  MX_RNG_Init();
 8007614:	f000 f9c0 	bl	8007998 <MX_RNG_Init>
  MX_SPI2_Init();
 8007618:	f000 fb9a 	bl	8007d50 <MX_SPI2_Init>
  MX_I2C2_Init();
 800761c:	f7fd fab6 	bl	8004b8c <MX_I2C2_Init>
  MX_SPI1_Init();
 8007620:	f000 fb6a 	bl	8007cf8 <MX_SPI1_Init>
  MX_SPI5_Init();
 8007624:	f000 fbc0 	bl	8007da8 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8007628:	2200      	movs	r2, #0
 800762a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800762e:	4874      	ldr	r0, [pc, #464]	; (8007800 <main+0x324>)
 8007630:	f002 fc9a 	bl	8009f68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8007634:	2200      	movs	r2, #0
 8007636:	2102      	movs	r1, #2
 8007638:	4872      	ldr	r0, [pc, #456]	; (8007804 <main+0x328>)
 800763a:	f002 fc95 	bl	8009f68 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 800763e:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 8007642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 8007646:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800764a:	496c      	ldr	r1, [pc, #432]	; (80077fc <main+0x320>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 800764c:	4a6e      	ldr	r2, [pc, #440]	; (8007808 <main+0x32c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800764e:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8007652:	f8d2 0fb4 	ldr.w	r0, [r2, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800765a:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 800765e:	07c3      	lsls	r3, r0, #31
 8007660:	d502      	bpl.n	8007668 <main+0x18c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8007662:	4b6a      	ldr	r3, [pc, #424]	; (800780c <main+0x330>)
 8007664:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
	  buffer[i] = 0;
 8007668:	4b69      	ldr	r3, [pc, #420]	; (8007810 <main+0x334>)
  DWT->CYCCNT = 0;
 800766a:	2100      	movs	r1, #0
 800766c:	4a66      	ldr	r2, [pc, #408]	; (8007808 <main+0x32c>)
  DWT->CTRL = 0x40000001;
 800766e:	4869      	ldr	r0, [pc, #420]	; (8007814 <main+0x338>)
  DWT->CYCCNT = 0;
 8007670:	6051      	str	r1, [r2, #4]
  DWT->CTRL = 0x40000001;
 8007672:	6010      	str	r0, [r2, #0]
	  buffer[i] = 0;
 8007674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007678:	4618      	mov	r0, r3
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 800767a:	f8df a200 	ldr.w	sl, [pc, #512]	; 800787c <main+0x3a0>
	  buffer[i] = 0;
 800767e:	f015 f961 	bl	801c944 <memset>
  buffer[15] = NUM_PARAMS;
 8007682:	229b      	movs	r2, #155	; 0x9b
	  buffer[i] = 0;
 8007684:	4603      	mov	r3, r0
  buffer[NUM_PARAMS*2+19] = 1;
 8007686:	2101      	movs	r1, #1
  buffer[NUM_PARAMS*2+16] = 0xef;
 8007688:	f64e 70ef 	movw	r0, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800768c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15] = NUM_PARAMS;
 8007690:	73da      	strb	r2, [r3, #15]
  buffer[NUM_PARAMS*2+25] = 0xfe;
 8007692:	f64f 62fe 	movw	r2, #65278	; 0xfefe
  buffer[NUM_PARAMS*2+16] = 0xef;
 8007696:	f8a3 0146 	strh.w	r0, [r3, #326]	; 0x146
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800769a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19] = 1;
 800769e:	f883 1149 	strb.w	r1, [r3, #329]	; 0x149
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80076a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25] = 0xfe;
 80076a6:	f8a3 214f 	strh.w	r2, [r3, #335]	; 0x14f
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80076aa:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8007818 <main+0x33c>
 80076ae:	485b      	ldr	r0, [pc, #364]	; (800781c <main+0x340>)
 80076b0:	f00f f864 	bl	801677c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 80076b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80076b8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8007820 <main+0x344>
 80076bc:	eddf 0a59 	vldr	s1, [pc, #356]	; 8007824 <main+0x348>
 80076c0:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8007828 <main+0x34c>
 80076c4:	4859      	ldr	r0, [pc, #356]	; (800782c <main+0x350>)
 80076c6:	f00f f859 	bl	801677c <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 80076ca:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80076ce:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80076d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80076d6:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8007828 <main+0x34c>
 80076da:	4855      	ldr	r0, [pc, #340]	; (8007830 <main+0x354>)
 80076dc:	f00f f84e 	bl	801677c <LEAF_generate_table_skew_non_sym>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80076e0:	4c54      	ldr	r4, [pc, #336]	; (8007834 <main+0x358>)
  getPresetNamesFromSDCard();
 80076e2:	f7fd fdbb 	bl	800525c <getPresetNamesFromSDCard>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80076e6:	f89a 0000 	ldrb.w	r0, [sl]
 80076ea:	f7fd fb27 	bl	8004d3c <checkForSDCardPreset>
 80076ee:	b2c3      	uxtb	r3, r0
 80076f0:	7023      	strb	r3, [r4, #0]
	  if (foundOne)
 80076f2:	7823      	ldrb	r3, [r4, #0]
 80076f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 8132 	beq.w	8007962 <main+0x486>
  SDRAM_init();
 80076fe:	f7fe f81b 	bl	8005738 <SDRAM_init>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8007702:	494d      	ldr	r1, [pc, #308]	; (8007838 <main+0x35c>)
 8007704:	4a4d      	ldr	r2, [pc, #308]	; (800783c <main+0x360>)
 8007706:	484e      	ldr	r0, [pc, #312]	; (8007840 <main+0x364>)
 8007708:	f7f8 ffaa 	bl	8000660 <audioInit>
	AudioCodec_init(&hi2c2);
 800770c:	484c      	ldr	r0, [pc, #304]	; (8007840 <main+0x364>)
 800770e:	f7fc ffa1 	bl	8004654 <AudioCodec_init>
  	if (foundOne == 0)
 8007712:	7823      	ldrb	r3, [r4, #0]
 8007714:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8007718:	2b00      	cmp	r3, #0
 800771a:	f040 811b 	bne.w	8007954 <main+0x478>
	  parsePreset((NUM_PARAMS*2)+27+(8*14), 0); //default preset binary
 800771e:	f240 10c1 	movw	r0, #449	; 0x1c1
 8007722:	4d48      	ldr	r5, [pc, #288]	; (8007844 <main+0x368>)
 8007724:	f7fe fa66 	bl	8005bf4 <parsePreset>
    HAL_SPI_Receive_DMA(&hspi2, SPI_RX, BAR_BUFFER_SIZE_TIMES_TWO);
 8007728:	2210      	movs	r2, #16
 800772a:	4947      	ldr	r1, [pc, #284]	; (8007848 <main+0x36c>)
 800772c:	4847      	ldr	r0, [pc, #284]	; (800784c <main+0x370>)
 800772e:	f007 f969 	bl	800ea04 <HAL_SPI_Receive_DMA>
    HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8007732:	2234      	movs	r2, #52	; 0x34
 8007734:	4946      	ldr	r1, [pc, #280]	; (8007850 <main+0x374>)
 8007736:	4847      	ldr	r0, [pc, #284]	; (8007854 <main+0x378>)
 8007738:	f007 f964 	bl	800ea04 <HAL_SPI_Receive_DMA>
    if (boardNumber != 0)
 800773c:	4b46      	ldr	r3, [pc, #280]	; (8007858 <main+0x37c>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8100 	beq.w	8007946 <main+0x46a>
    	HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 8007746:	4945      	ldr	r1, [pc, #276]	; (800785c <main+0x380>)
 8007748:	2240      	movs	r2, #64	; 0x40
 800774a:	4845      	ldr	r0, [pc, #276]	; (8007860 <main+0x384>)
 800774c:	f007 f95a 	bl	800ea04 <HAL_SPI_Receive_DMA>
    	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007750:	2300      	movs	r3, #0
  	  	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007752:	2240      	movs	r2, #64	; 0x40
  	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007754:	a907      	add	r1, sp, #28
 8007756:	482b      	ldr	r0, [pc, #172]	; (8007804 <main+0x328>)
    	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007758:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800775c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  	  	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007760:	2301      	movs	r3, #1
 8007762:	9309      	str	r3, [sp, #36]	; 0x24
  	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007764:	f002 fab0 	bl	8009cc8 <HAL_GPIO_Init>
 8007768:	4f3e      	ldr	r7, [pc, #248]	; (8007864 <main+0x388>)
 800776a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007880 <main+0x3a4>
	  if (rand > TWO_TO_31)
 800776e:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8007868 <main+0x38c>
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8007772:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 800786c <main+0x390>
 8007776:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8007884 <main+0x3a8>
 800777a:	4c3d      	ldr	r4, [pc, #244]	; (8007870 <main+0x394>)
 800777c:	4e3d      	ldr	r6, [pc, #244]	; (8007874 <main+0x398>)
 800777e:	e02b      	b.n	80077d8 <main+0x2fc>
	  if (presetWaitingToParse > 0)
 8007780:	6829      	ldr	r1, [r5, #0]
 8007782:	bb99      	cbnz	r1, 80077ec <main+0x310>
	  else if (presetWaitingToWrite > 0)
 8007784:	f8d9 b000 	ldr.w	fp, [r9]
 8007788:	f1bb 0f00 	cmp.w	fp, #0
 800778c:	d17c      	bne.n	8007888 <main+0x3ac>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800778e:	a907      	add	r1, sp, #28
 8007790:	4839      	ldr	r0, [pc, #228]	; (8007878 <main+0x39c>)
 8007792:	f005 fbbb 	bl	800cf0c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 8007796:	eddd 7a07 	vldr	s15, [sp, #28]
 800779a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779e:	eef4 7ae8 	vcmpe.f32	s15, s17
 80077a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a6:	dd0c      	ble.n	80077c2 <main+0x2e6>
		  myTestInt++;
 80077a8:	f8d8 3000 	ldr.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80077ac:	2180      	movs	r1, #128	; 0x80
 80077ae:	4814      	ldr	r0, [pc, #80]	; (8007800 <main+0x324>)
		  myTestInt++;
 80077b0:	3301      	adds	r3, #1
 80077b2:	f8c8 3000 	str.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80077b6:	f002 fbdb 	bl	8009f70 <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 80077ba:	eddd 7a07 	vldr	s15, [sp, #28]
 80077be:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 80077c2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80077c6:	7823      	ldrb	r3, [r4, #0]
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077ce:	eea7 7a88 	vfma.f32	s14, s15, s16
 80077d2:	7022      	strb	r2, [r4, #0]
 80077d4:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0d0      	beq.n	8007780 <main+0x2a4>
		  checkForSDCardPreset(presetNumberToLoad);
 80077de:	f89a 0000 	ldrb.w	r0, [sl]
 80077e2:	f7fd faab 	bl	8004d3c <checkForSDCardPreset>
	  if (presetWaitingToParse > 0)
 80077e6:	6829      	ldr	r1, [r5, #0]
 80077e8:	2900      	cmp	r1, #0
 80077ea:	d0cb      	beq.n	8007784 <main+0x2a8>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 80077ec:	4608      	mov	r0, r1
 80077ee:	f89a 1000 	ldrb.w	r1, [sl]
 80077f2:	f7fe f9ff 	bl	8005bf4 <parsePreset>
 80077f6:	e7ca      	b.n	800778e <main+0x2b2>
 80077f8:	03010011 	.word	0x03010011
 80077fc:	e000ed00 	.word	0xe000ed00
 8007800:	58020800 	.word	0x58020800
 8007804:	58020000 	.word	0x58020000
 8007808:	e0001000 	.word	0xe0001000
 800780c:	c5acce55 	.word	0xc5acce55
 8007810:	300001e0 	.word	0x300001e0
 8007814:	40000001 	.word	0x40000001
 8007818:	3c23d70a 	.word	0x3c23d70a
 800781c:	20017274 	.word	0x20017274
 8007820:	457a0000 	.word	0x457a0000
 8007824:	469c4000 	.word	0x469c4000
 8007828:	00000000 	.word	0x00000000
 800782c:	20013274 	.word	0x20013274
 8007830:	2407b3c0 	.word	0x2407b3c0
 8007834:	2001539c 	.word	0x2001539c
 8007838:	20019380 	.word	0x20019380
 800783c:	20019418 	.word	0x20019418
 8007840:	2001318c 	.word	0x2001318c
 8007844:	20016e6c 	.word	0x20016e6c
 8007848:	30000180 	.word	0x30000180
 800784c:	20019798 	.word	0x20019798
 8007850:	300001a0 	.word	0x300001a0
 8007854:	20019820 	.word	0x20019820
 8007858:	200131e0 	.word	0x200131e0
 800785c:	30000100 	.word	0x30000100
 8007860:	20019710 	.word	0x20019710
 8007864:	20016e68 	.word	0x20016e68
 8007868:	4f000000 	.word	0x4f000000
 800786c:	3000000d 	.word	0x3000000d
 8007870:	200131e5 	.word	0x200131e5
 8007874:	20016e74 	.word	0x20016e74
 8007878:	20019278 	.word	0x20019278
 800787c:	20000280 	.word	0x20000280
 8007880:	20016e70 	.word	0x20016e70
 8007884:	20015d5c 	.word	0x20015d5c
  __ASM volatile ("cpsid i" : : : "memory");
 8007888:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 800788a:	2280      	movs	r2, #128	; 0x80
 800788c:	4837      	ldr	r0, [pc, #220]	; (800796c <main+0x490>)
 800788e:	9101      	str	r1, [sp, #4]
 8007890:	f015 f858 	bl	801c944 <memset>
  __IO uint8_t status = SD_PRESENT;
 8007894:	2301      	movs	r3, #1
 8007896:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 800789a:	f008 ff99 	bl	80107d0 <BSP_PlatformIsDetected>
 800789e:	b110      	cbz	r0, 80078a6 <main+0x3ca>
    status = SD_NOT_PRESENT;
 80078a0:	9901      	ldr	r1, [sp, #4]
 80078a2:	f88d 100b 	strb.w	r1, [sp, #11]
  return status;
 80078a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 80078aa:	b323      	cbz	r3, 80078f6 <main+0x41a>
				diskBusy = 1;
 80078ac:	2301      	movs	r3, #1
 80078ae:	4a30      	ldr	r2, [pc, #192]	; (8007970 <main+0x494>)
 80078b0:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 80078b2:	4b30      	ldr	r3, [pc, #192]	; (8007974 <main+0x498>)
 80078b4:	7818      	ldrb	r0, [r3, #0]
 80078b6:	2863      	cmp	r0, #99	; 0x63
 80078b8:	d901      	bls.n	80078be <main+0x3e2>
			        presetNumberToSave = 99;
 80078ba:	2063      	movs	r0, #99	; 0x63
 80078bc:	7018      	strb	r0, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
 80078be:	220a      	movs	r2, #10
 80078c0:	a904      	add	r1, sp, #16
 80078c2:	f015 f82f 	bl	801c924 <itoa>
				int len = ((strlen(charBuf)));
 80078c6:	a804      	add	r0, sp, #16
 80078c8:	f7f8 fd06 	bl	80002d8 <strlen>
				if (len == 1)
 80078cc:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 80078ce:	4602      	mov	r2, r0
				if (len == 1)
 80078d0:	d018      	beq.n	8007904 <main+0x428>
					strcat(charBuf, ".ebp");
 80078d2:	4929      	ldr	r1, [pc, #164]	; (8007978 <main+0x49c>)
 80078d4:	ab04      	add	r3, sp, #16
 80078d6:	6808      	ldr	r0, [r1, #0]
 80078d8:	7909      	ldrb	r1, [r1, #4]
 80078da:	5098      	str	r0, [r3, r2]
 80078dc:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 80078de:	a807      	add	r0, sp, #28
 80078e0:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 80078e2:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 80078e4:	a904      	add	r1, sp, #16
 80078e6:	f015 f81f 	bl	801c928 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 80078ea:	220a      	movs	r2, #10
 80078ec:	a907      	add	r1, sp, #28
 80078ee:	4823      	ldr	r0, [pc, #140]	; (800797c <main+0x4a0>)
 80078f0:	f00b faee 	bl	8012ed0 <f_open>
 80078f4:	b1e8      	cbz	r0, 8007932 <main+0x456>
	presetWaitingToWrite = 0;
 80078f6:	2300      	movs	r3, #0
	diskBusy = 0;
 80078f8:	4a1d      	ldr	r2, [pc, #116]	; (8007970 <main+0x494>)
	presetWaitingToWrite = 0;
 80078fa:	f8c9 3000 	str.w	r3, [r9]
	diskBusy = 0;
 80078fe:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007900:	b662      	cpsie	i
}
 8007902:	e744      	b.n	800778e <main+0x2b2>
					finalString[2] = charBuf[1];
 8007904:	f89d 3011 	ldrb.w	r3, [sp, #17]
					strcat(finalString, ".ebp");
 8007908:	a807      	add	r0, sp, #28
					finalString[2] = charBuf[1];
 800790a:	f88d 301e 	strb.w	r3, [sp, #30]
					finalString[1] = charBuf[0];
 800790e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8007912:	f88d 301d 	strb.w	r3, [sp, #29]
					finalString[0] = '0';
 8007916:	2330      	movs	r3, #48	; 0x30
 8007918:	f88d 301c 	strb.w	r3, [sp, #28]
					strcat(finalString, ".ebp");
 800791c:	f7f8 fcdc 	bl	80002d8 <strlen>
 8007920:	4a15      	ldr	r2, [pc, #84]	; (8007978 <main+0x49c>)
 8007922:	4603      	mov	r3, r0
 8007924:	a907      	add	r1, sp, #28
 8007926:	6810      	ldr	r0, [r2, #0]
 8007928:	7912      	ldrb	r2, [r2, #4]
 800792a:	50c8      	str	r0, [r1, r3]
 800792c:	440b      	add	r3, r1
 800792e:	711a      	strb	r2, [r3, #4]
 8007930:	e7db      	b.n	80078ea <main+0x40e>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 8007932:	465a      	mov	r2, fp
 8007934:	ab03      	add	r3, sp, #12
 8007936:	4912      	ldr	r1, [pc, #72]	; (8007980 <main+0x4a4>)
 8007938:	4810      	ldr	r0, [pc, #64]	; (800797c <main+0x4a0>)
 800793a:	f00b fd81 	bl	8013440 <f_write>
					f_close(&SDFile);
 800793e:	480f      	ldr	r0, [pc, #60]	; (800797c <main+0x4a0>)
 8007940:	f00b fed8 	bl	80136f4 <f_close>
 8007944:	e7d7      	b.n	80078f6 <main+0x41a>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 8007946:	4a0f      	ldr	r2, [pc, #60]	; (8007984 <main+0x4a8>)
 8007948:	2340      	movs	r3, #64	; 0x40
 800794a:	480f      	ldr	r0, [pc, #60]	; (8007988 <main+0x4ac>)
 800794c:	18d1      	adds	r1, r2, r3
 800794e:	f007 f939 	bl	800ebc4 <HAL_SPI_TransmitReceive_DMA>
 8007952:	e709      	b.n	8007768 <main+0x28c>
	  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8007954:	4d0d      	ldr	r5, [pc, #52]	; (800798c <main+0x4b0>)
 8007956:	f89a 1000 	ldrb.w	r1, [sl]
 800795a:	6828      	ldr	r0, [r5, #0]
 800795c:	f7fe f94a 	bl	8005bf4 <parsePreset>
 8007960:	e6e2      	b.n	8007728 <main+0x24c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8007962:	2110      	movs	r1, #16
 8007964:	480a      	ldr	r0, [pc, #40]	; (8007990 <main+0x4b4>)
 8007966:	f002 faff 	bl	8009f68 <HAL_GPIO_WritePin>
 800796a:	e6c8      	b.n	80076fe <main+0x222>
 800796c:	30000000 	.word	0x30000000
 8007970:	20013220 	.word	0x20013220
 8007974:	20016e66 	.word	0x20016e66
 8007978:	0801eedc 	.word	0x0801eedc
 800797c:	20019ae0 	.word	0x20019ae0
 8007980:	300001e0 	.word	0x300001e0
 8007984:	30000100 	.word	0x30000100
 8007988:	20019710 	.word	0x20019710
 800798c:	20016e6c 	.word	0x20016e6c
 8007990:	58020400 	.word	0x58020400

08007994 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop

08007998 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8007998:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800799a:	4806      	ldr	r0, [pc, #24]	; (80079b4 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800799c:	2300      	movs	r3, #0
 800799e:	4a06      	ldr	r2, [pc, #24]	; (80079b8 <MX_RNG_Init+0x20>)
 80079a0:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80079a4:	f005 fa70 	bl	800ce88 <HAL_RNG_Init>
 80079a8:	b900      	cbnz	r0, 80079ac <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80079aa:	bd08      	pop	{r3, pc}
 80079ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80079b0:	f7ff bff0 	b.w	8007994 <Error_Handler>
 80079b4:	20019278 	.word	0x20019278
 80079b8:	48021800 	.word	0x48021800

080079bc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80079bc:	b510      	push	{r4, lr}
 80079be:	b0b2      	sub	sp, #200	; 0xc8
 80079c0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80079c2:	22c0      	movs	r2, #192	; 0xc0
 80079c4:	2100      	movs	r1, #0
 80079c6:	a802      	add	r0, sp, #8
 80079c8:	f014 ffbc 	bl	801c944 <memset>
  if(rngHandle->Instance==RNG)
 80079cc:	4b10      	ldr	r3, [pc, #64]	; (8007a10 <HAL_RNG_MspInit+0x54>)
 80079ce:	6822      	ldr	r2, [r4, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d001      	beq.n	80079d8 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80079d4:	b032      	add	sp, #200	; 0xc8
 80079d6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80079d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80079dc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80079de:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80079e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80079e4:	f004 f86a 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 80079e8:	b970      	cbnz	r0, 8007a08 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <HAL_RNG_MspInit+0x58>)
 80079ec:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 80079f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80079f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80079fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	9b01      	ldr	r3, [sp, #4]
}
 8007a04:	b032      	add	sp, #200	; 0xc8
 8007a06:	bd10      	pop	{r4, pc}
      Error_Handler();
 8007a08:	f7ff ffc4 	bl	8007994 <Error_Handler>
 8007a0c:	e7ed      	b.n	80079ea <HAL_RNG_MspInit+0x2e>
 8007a0e:	bf00      	nop
 8007a10:	48021800 	.word	0x48021800
 8007a14:	58024400 	.word	0x58024400

08007a18 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8007a18:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8007a1a:	4818      	ldr	r0, [pc, #96]	; (8007a7c <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8007a1c:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8007a1e:	4c18      	ldr	r4, [pc, #96]	; (8007a80 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8007a20:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8007a22:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8007a24:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8007a26:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8007a28:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007a2a:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007a2c:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 8007a2e:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8007a32:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8007a36:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8007a3a:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8007a3c:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8007a40:	f005 fc74 	bl	800d32c <HAL_SAI_InitProtocol>
 8007a44:	b998      	cbnz	r0, 8007a6e <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8007a46:	480f      	ldr	r0, [pc, #60]	; (8007a84 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8007a48:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8007a4a:	4c0f      	ldr	r4, [pc, #60]	; (8007a88 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8007a4c:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007a4e:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8007a50:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 8007a52:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8007a54:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8007a56:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8007a58:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8007a5a:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8007a5c:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8007a5e:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8007a60:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8007a62:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8007a66:	f005 fc61 	bl	800d32c <HAL_SAI_InitProtocol>
 8007a6a:	b918      	cbnz	r0, 8007a74 <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8007a6c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007a6e:	f7ff ff91 	bl	8007994 <Error_Handler>
 8007a72:	e7e8      	b.n	8007a46 <MX_SAI1_Init+0x2e>
}
 8007a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8007a78:	f7ff bf8c 	b.w	8007994 <Error_Handler>
 8007a7c:	20019380 	.word	0x20019380
 8007a80:	40015804 	.word	0x40015804
 8007a84:	20019418 	.word	0x20019418
 8007a88:	40015824 	.word	0x40015824
 8007a8c:	00000000 	.word	0x00000000

08007a90 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8007a90:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8007a92:	4a55      	ldr	r2, [pc, #340]	; (8007be8 <HAL_SAI_MspInit+0x158>)
{
 8007a94:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 8007a96:	6803      	ldr	r3, [r0, #0]
{
 8007a98:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d004      	beq.n	8007aa8 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8007a9e:	4a53      	ldr	r2, [pc, #332]	; (8007bec <HAL_SAI_MspInit+0x15c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d03f      	beq.n	8007b24 <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8007aa4:	b009      	add	sp, #36	; 0x24
 8007aa6:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 8007aa8:	4b51      	ldr	r3, [pc, #324]	; (8007bf0 <HAL_SAI_MspInit+0x160>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	f000 8081 	beq.w	8007bb4 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 8007ab2:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007ab4:	2074      	movs	r0, #116	; 0x74
 8007ab6:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 8007ab8:	4d4e      	ldr	r5, [pc, #312]	; (8007bf4 <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 8007aba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007abc:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007abe:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8007be0 <HAL_SAI_MspInit+0x150>
 8007ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ac6:	a902      	add	r1, sp, #8
 8007ac8:	484b      	ldr	r0, [pc, #300]	; (8007bf8 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007aca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8007acc:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ad0:	f002 f8fa 	bl	8009cc8 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8007ad4:	4949      	ldr	r1, [pc, #292]	; (8007bfc <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8007ad6:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ad8:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8007ada:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8007adc:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8007ade:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8007ae0:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8007ae4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ae8:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007aea:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8007aee:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007af0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007af4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007af8:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007afa:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007afe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b06:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007b0a:	2304      	movs	r3, #4
 8007b0c:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8007b0e:	f000 fe1d 	bl	800874c <HAL_DMA_Init>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d15c      	bne.n	8007bd0 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 8007b16:	4a35      	ldr	r2, [pc, #212]	; (8007bec <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8007b18:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8007b1e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 8007b22:	d1bf      	bne.n	8007aa4 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 8007b24:	4b32      	ldr	r3, [pc, #200]	; (8007bf0 <HAL_SAI_MspInit+0x160>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	b3b2      	cbz	r2, 8007b98 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 8007b2a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b2c:	2008      	movs	r0, #8
 8007b2e:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 8007b30:	4d33      	ldr	r5, [pc, #204]	; (8007c00 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 8007b32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007b34:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b36:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8007be0 <HAL_SAI_MspInit+0x150>
 8007b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b3e:	a902      	add	r1, sp, #8
 8007b40:	482d      	ldr	r0, [pc, #180]	; (8007bf8 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8007b42:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007b44:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b48:	f002 f8be 	bl	8009cc8 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8007b4c:	492d      	ldr	r1, [pc, #180]	; (8007c04 <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8007b4e:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007b50:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8007b52:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007b54:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8007b56:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8007b5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007b5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007b62:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8007b66:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8007b6e:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8007b72:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8007b76:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007b7a:	2304      	movs	r3, #4
 8007b7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007b80:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8007b84:	f000 fde2 	bl	800874c <HAL_DMA_Init>
 8007b88:	bb28      	cbnz	r0, 8007bd6 <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8007b8a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8007b8e:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8007b90:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8007b94:	b009      	add	sp, #36	; 0x24
 8007b96:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 8007b98:	491b      	ldr	r1, [pc, #108]	; (8007c08 <HAL_SAI_MspInit+0x178>)
 8007b9a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8007b9e:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8007ba2:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8007ba6:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8007baa:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007bae:	9101      	str	r1, [sp, #4]
 8007bb0:	9901      	ldr	r1, [sp, #4]
 8007bb2:	e7ba      	b.n	8007b2a <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8007bb4:	4914      	ldr	r1, [pc, #80]	; (8007c08 <HAL_SAI_MspInit+0x178>)
 8007bb6:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8007bba:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8007bbe:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8007bc2:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8007bc6:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007bca:	9100      	str	r1, [sp, #0]
 8007bcc:	9900      	ldr	r1, [sp, #0]
 8007bce:	e770      	b.n	8007ab2 <HAL_SAI_MspInit+0x22>
      Error_Handler();
 8007bd0:	f7ff fee0 	bl	8007994 <Error_Handler>
 8007bd4:	e79f      	b.n	8007b16 <HAL_SAI_MspInit+0x86>
      Error_Handler();
 8007bd6:	f7ff fedd 	bl	8007994 <Error_Handler>
 8007bda:	e7d6      	b.n	8007b8a <HAL_SAI_MspInit+0xfa>
 8007bdc:	f3af 8000 	nop.w
 8007be0:	00000000 	.word	0x00000000
 8007be4:	00000003 	.word	0x00000003
 8007be8:	40015804 	.word	0x40015804
 8007bec:	40015824 	.word	0x40015824
 8007bf0:	2001928c 	.word	0x2001928c
 8007bf4:	20019290 	.word	0x20019290
 8007bf8:	58021000 	.word	0x58021000
 8007bfc:	40020028 	.word	0x40020028
 8007c00:	20019308 	.word	0x20019308
 8007c04:	40020040 	.word	0x40020040
 8007c08:	58024400 	.word	0x58024400

08007c0c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8007c0c:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8007c0e:	4b07      	ldr	r3, [pc, #28]	; (8007c2c <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8007c10:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 8007c12:	4c07      	ldr	r4, [pc, #28]	; (8007c30 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007c14:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 8007c18:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 8007c1a:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8007c1e:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 8007c22:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8007c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	200194b0 	.word	0x200194b0
 8007c30:	52007000 	.word	0x52007000

08007c34 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8007c34:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8007c36:	4b2b      	ldr	r3, [pc, #172]	; (8007ce4 <HAL_SD_MspInit+0xb0>)
{
 8007c38:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 8007c3a:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c3c:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 8007c3e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c40:	9408      	str	r4, [sp, #32]
 8007c42:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007c46:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 8007c4a:	d001      	beq.n	8007c50 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8007c4c:	b00b      	add	sp, #44	; 0x2c
 8007c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007c50:	4b25      	ldr	r3, [pc, #148]	; (8007ce8 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8007c52:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007c54:	2601      	movs	r6, #1
 8007c56:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007c58:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c5c:	4823      	ldr	r0, [pc, #140]	; (8007cec <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8007c5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007c62:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8007c66:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007c6a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8007c6e:	9201      	str	r2, [sp, #4]
 8007c70:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007c76:	f042 0204 	orr.w	r2, r2, #4
 8007c7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007c7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007c82:	f002 0204 	and.w	r2, r2, #4
 8007c86:	9202      	str	r2, [sp, #8]
 8007c88:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007c8e:	f042 0208 	orr.w	r2, r2, #8
 8007c92:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007c96:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8007c9e:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007ca6:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ca8:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007caa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007cac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cb0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cb4:	f002 f808 	bl	8009cc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007cbc:	a904      	add	r1, sp, #16
 8007cbe:	480c      	ldr	r0, [pc, #48]	; (8007cf0 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8007cc0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007cc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cc6:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007cca:	f001 fffd 	bl	8009cc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8007cce:	4622      	mov	r2, r4
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	2031      	movs	r0, #49	; 0x31
 8007cd4:	f000 fba4 	bl	8008420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8007cd8:	2031      	movs	r0, #49	; 0x31
 8007cda:	f000 fbdf 	bl	800849c <HAL_NVIC_EnableIRQ>
}
 8007cde:	b00b      	add	sp, #44	; 0x2c
 8007ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	52007000 	.word	0x52007000
 8007ce8:	58024400 	.word	0x58024400
 8007cec:	58020800 	.word	0x58020800
 8007cf0:	58020c00 	.word	0x58020c00
 8007cf4:	00000000 	.word	0x00000000

08007cf8 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007cf8:	4813      	ldr	r0, [pc, #76]	; (8007d48 <MX_SPI1_Init+0x50>)
 8007cfa:	4a14      	ldr	r2, [pc, #80]	; (8007d4c <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007cfc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007d40 <MX_SPI1_Init+0x48>
{
 8007d00:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8007d02:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8007d04:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d06:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8007d08:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d0a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d0c:	ed80 7b08 	vstr	d7, [r0, #32]
 8007d10:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007d14:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d18:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007d1c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007d20:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007d24:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007d28:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007d2c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007d30:	f006 fd9c 	bl	800e86c <HAL_SPI_Init>
 8007d34:	b900      	cbnz	r0, 8007d38 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007d36:	bd08      	pop	{r3, pc}
 8007d38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007d3c:	f7ff be2a 	b.w	8007994 <Error_Handler>
	...
 8007d48:	20019710 	.word	0x20019710
 8007d4c:	40013000 	.word	0x40013000

08007d50 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007d50:	4813      	ldr	r0, [pc, #76]	; (8007da0 <MX_SPI2_Init+0x50>)
 8007d52:	4a14      	ldr	r2, [pc, #80]	; (8007da4 <MX_SPI2_Init+0x54>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007d98 <MX_SPI2_Init+0x48>
{
 8007d58:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8007d5a:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 8007d5c:	6002      	str	r2, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d5e:	2207      	movs	r2, #7
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8007d60:	6183      	str	r3, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007d62:	60c2      	str	r2, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007d64:	ed80 7b08 	vstr	d7, [r0, #32]
 8007d68:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007d6c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007d70:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007d74:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007d78:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007d7c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007d80:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007d84:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007d88:	f006 fd70 	bl	800e86c <HAL_SPI_Init>
 8007d8c:	b900      	cbnz	r0, 8007d90 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007d8e:	bd08      	pop	{r3, pc}
 8007d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007d94:	f7ff bdfe 	b.w	8007994 <Error_Handler>
	...
 8007da0:	20019798 	.word	0x20019798
 8007da4:	40003800 	.word	0x40003800

08007da8 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8007da8:	4813      	ldr	r0, [pc, #76]	; (8007df8 <MX_SPI5_Init+0x50>)
 8007daa:	4a14      	ldr	r2, [pc, #80]	; (8007dfc <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007dac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007df0 <MX_SPI5_Init+0x48>
{
 8007db0:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8007db2:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 8007db4:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8007db6:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8007db8:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8007dba:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007dbc:	ed80 7b08 	vstr	d7, [r0, #32]
 8007dc0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8007dc4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007dc8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007dcc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007dd0:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007dd4:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007dd8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007ddc:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8007de0:	f006 fd44 	bl	800e86c <HAL_SPI_Init>
 8007de4:	b900      	cbnz	r0, 8007de8 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8007de6:	bd08      	pop	{r3, pc}
 8007de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007dec:	f7ff bdd2 	b.w	8007994 <Error_Handler>
	...
 8007df8:	20019820 	.word	0x20019820
 8007dfc:	40015000 	.word	0x40015000

08007e00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007e00:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e02:	2400      	movs	r4, #0
{
 8007e04:	b0bc      	sub	sp, #240	; 0xf0
 8007e06:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e08:	22c0      	movs	r2, #192	; 0xc0
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e0e:	940a      	str	r4, [sp, #40]	; 0x28
 8007e10:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8007e14:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007e18:	f014 fd94 	bl	801c944 <memset>
  if(spiHandle->Instance==SPI1)
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	4aa5      	ldr	r2, [pc, #660]	; (80080b4 <HAL_SPI_MspInit+0x2b4>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d008      	beq.n	8007e36 <HAL_SPI_MspInit+0x36>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8007e24:	4aa4      	ldr	r2, [pc, #656]	; (80080b8 <HAL_SPI_MspInit+0x2b8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d076      	beq.n	8007f18 <HAL_SPI_MspInit+0x118>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 8007e2a:	4aa4      	ldr	r2, [pc, #656]	; (80080bc <HAL_SPI_MspInit+0x2bc>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	f000 80d0 	beq.w	8007fd2 <HAL_SPI_MspInit+0x1d2>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8007e32:	b03c      	add	sp, #240	; 0xf0
 8007e34:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007e36:	4ba2      	ldr	r3, [pc, #648]	; (80080c0 <HAL_SPI_MspInit+0x2c0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e38:	a906      	add	r1, sp, #24
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8007e3a:	4ea2      	ldr	r6, [pc, #648]	; (80080c4 <HAL_SPI_MspInit+0x2c4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007e3c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007e40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e44:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007e48:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007e4c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007e50:	9200      	str	r2, [sp, #0]
 8007e52:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007e58:	f042 0201 	orr.w	r2, r2, #1
 8007e5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007e60:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007e6c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e6e:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e70:	4895      	ldr	r0, [pc, #596]	; (80080c8 <HAL_SPI_MspInit+0x2c8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007e72:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007e76:	2203      	movs	r2, #3
 8007e78:	2305      	movs	r3, #5
 8007e7a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e7e:	f001 ff23 	bl	8009cc8 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8007e82:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8007e84:	4a91      	ldr	r2, [pc, #580]	; (80080cc <HAL_SPI_MspInit+0x2cc>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8007e86:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8007e88:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8007e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8007e8e:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e94:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e96:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007e98:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007e9a:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8007e9c:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007ea0:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007ea2:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007ea6:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007ea8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007eac:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007eae:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007eb0:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8007eb2:	f000 fc4b 	bl	800874c <HAL_DMA_Init>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 80f0 	bne.w	800809c <HAL_SPI_MspInit+0x29c>
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8007ebc:	4c84      	ldr	r4, [pc, #528]	; (80080d0 <HAL_SPI_MspInit+0x2d0>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8007ebe:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8007ec0:	4984      	ldr	r1, [pc, #528]	; (80080d4 <HAL_SPI_MspInit+0x2d4>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ec2:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8007ec4:	6062      	str	r2, [r4, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8007eca:	6021      	str	r1, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007ecc:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007ece:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007ed0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007ed4:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007ed6:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007ed8:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007eda:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8007edc:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007ee0:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007ee2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007ee4:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007ee6:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007ee8:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007eea:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8007eec:	67ee      	str	r6, [r5, #124]	; 0x7c
 8007eee:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8007ef0:	61e1      	str	r1, [r4, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007ef2:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007ef6:	f000 fc29 	bl	800874c <HAL_DMA_Init>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f040 80cb 	bne.w	8008096 <HAL_SPI_MspInit+0x296>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8007f00:	2200      	movs	r2, #0
 8007f02:	2102      	movs	r1, #2
 8007f04:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8007f06:	67ac      	str	r4, [r5, #120]	; 0x78
 8007f08:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8007f0a:	f000 fa89 	bl	8008420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8007f0e:	2023      	movs	r0, #35	; 0x23
 8007f10:	f000 fac4 	bl	800849c <HAL_NVIC_EnableIRQ>
}
 8007f14:	b03c      	add	sp, #240	; 0xf0
 8007f16:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007f18:	4b69      	ldr	r3, [pc, #420]	; (80080c0 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f1a:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f1c:	486e      	ldr	r0, [pc, #440]	; (80080d8 <HAL_SPI_MspInit+0x2d8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007f1e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f26:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8007f2a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007f2e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007f32:	9202      	str	r2, [sp, #8]
 8007f34:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007f3a:	f042 0202 	orr.w	r2, r2, #2
 8007f3e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007f42:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007f50:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f52:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f54:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007f56:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f60:	f001 feb2 	bl	8009cc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007f64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f68:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f6a:	485b      	ldr	r0, [pc, #364]	; (80080d8 <HAL_SPI_MspInit+0x2d8>)
 8007f6c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007f6e:	960a      	str	r6, [sp, #40]	; 0x28
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8007f70:	4e5a      	ldr	r6, [pc, #360]	; (80080dc <HAL_SPI_MspInit+0x2dc>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8007f72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f76:	2200      	movs	r2, #0
 8007f78:	2302      	movs	r3, #2
 8007f7a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f7e:	f001 fea3 	bl	8009cc8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8007f82:	4a57      	ldr	r2, [pc, #348]	; (80080e0 <HAL_SPI_MspInit+0x2e0>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8007f84:	2327      	movs	r3, #39	; 0x27
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007f86:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8007f88:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007f90:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007f94:	6132      	str	r2, [r6, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007f96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007f9a:	61f3      	str	r3, [r6, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007f9c:	2304      	movs	r3, #4
 8007f9e:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007fa2:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007fa4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007fa8:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007fac:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007fb0:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007fb2:	f000 fbcb 	bl	800874c <HAL_DMA_Init>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d173      	bne.n	80080a2 <HAL_SPI_MspInit+0x2a2>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2103      	movs	r1, #3
 8007fbe:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8007fc0:	67ee      	str	r6, [r5, #124]	; 0x7c
 8007fc2:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8007fc4:	f000 fa2c 	bl	8008420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007fc8:	2024      	movs	r0, #36	; 0x24
 8007fca:	f000 fa67 	bl	800849c <HAL_NVIC_EnableIRQ>
}
 8007fce:	b03c      	add	sp, #240	; 0xf0
 8007fd0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8007fd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007fd6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007fd8:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8007fda:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007fde:	f003 fd6d 	bl	800babc <HAL_RCCEx_PeriphCLKConfig>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d163      	bne.n	80080ae <HAL_SPI_MspInit+0x2ae>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8007fe6:	4b36      	ldr	r3, [pc, #216]	; (80080c0 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8007fe8:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007fea:	483e      	ldr	r0, [pc, #248]	; (80080e4 <HAL_SPI_MspInit+0x2e4>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8007fec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007ff0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007ff4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007ff8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007ffc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008000:	9204      	str	r2, [sp, #16]
 8008002:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008004:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008008:	f042 0220 	orr.w	r2, r2, #32
 800800c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008010:	f44f 7230 	mov.w	r2, #704	; 0x2c0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008018:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008020:	2302      	movs	r3, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008022:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008024:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008026:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800802a:	2200      	movs	r2, #0
 800802c:	2302      	movs	r3, #2
 800802e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008032:	f001 fe49 	bl	8009cc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800803a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800803c:	a906      	add	r1, sp, #24
 800803e:	4829      	ldr	r0, [pc, #164]	; (80080e4 <HAL_SPI_MspInit+0x2e4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008040:	940a      	str	r4, [sp, #40]	; 0x28
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8008042:	4c29      	ldr	r4, [pc, #164]	; (80080e8 <HAL_SPI_MspInit+0x2e8>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008044:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008048:	2200      	movs	r2, #0
 800804a:	2300      	movs	r3, #0
 800804c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008050:	f001 fe3a 	bl	8009cc8 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8008054:	4925      	ldr	r1, [pc, #148]	; (80080ec <HAL_SPI_MspInit+0x2ec>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8008056:	2255      	movs	r2, #85	; 0x55
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008058:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800805a:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800805c:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 800805e:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008062:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008066:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800806a:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800806e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008072:	6121      	str	r1, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008074:	e9c4 3207 	strd	r3, r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8008078:	f000 fb68 	bl	800874c <HAL_DMA_Init>
 800807c:	b9a0      	cbnz	r0, 80080a8 <HAL_SPI_MspInit+0x2a8>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 800807e:	2200      	movs	r2, #0
 8008080:	2104      	movs	r1, #4
 8008082:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8008084:	67ec      	str	r4, [r5, #124]	; 0x7c
 8008086:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8008088:	f000 f9ca 	bl	8008420 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 800808c:	2055      	movs	r0, #85	; 0x55
 800808e:	f000 fa05 	bl	800849c <HAL_NVIC_EnableIRQ>
}
 8008092:	b03c      	add	sp, #240	; 0xf0
 8008094:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8008096:	f7ff fc7d 	bl	8007994 <Error_Handler>
 800809a:	e731      	b.n	8007f00 <HAL_SPI_MspInit+0x100>
      Error_Handler();
 800809c:	f7ff fc7a 	bl	8007994 <Error_Handler>
 80080a0:	e70c      	b.n	8007ebc <HAL_SPI_MspInit+0xbc>
      Error_Handler();
 80080a2:	f7ff fc77 	bl	8007994 <Error_Handler>
 80080a6:	e788      	b.n	8007fba <HAL_SPI_MspInit+0x1ba>
      Error_Handler();
 80080a8:	f7ff fc74 	bl	8007994 <Error_Handler>
 80080ac:	e7e7      	b.n	800807e <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80080ae:	f7ff fc71 	bl	8007994 <Error_Handler>
 80080b2:	e798      	b.n	8007fe6 <HAL_SPI_MspInit+0x1e6>
 80080b4:	40013000 	.word	0x40013000
 80080b8:	40003800 	.word	0x40003800
 80080bc:	40015000 	.word	0x40015000
 80080c0:	58024400 	.word	0x58024400
 80080c4:	2001952c 	.word	0x2001952c
 80080c8:	58020000 	.word	0x58020000
 80080cc:	40020070 	.word	0x40020070
 80080d0:	200195a4 	.word	0x200195a4
 80080d4:	40020088 	.word	0x40020088
 80080d8:	58020400 	.word	0x58020400
 80080dc:	2001961c 	.word	0x2001961c
 80080e0:	40020010 	.word	0x40020010
 80080e4:	58021400 	.word	0x58021400
 80080e8:	20019694 	.word	0x20019694
 80080ec:	40020058 	.word	0x40020058

080080f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <HAL_MspInit+0x20>)
{
 80080f2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080f4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80080f8:	f042 0202 	orr.w	r2, r2, #2
 80080fc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8008100:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800810c:	b002      	add	sp, #8
 800810e:	4770      	bx	lr
 8008110:	58024400 	.word	0x58024400

08008114 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008114:	e7fe      	b.n	8008114 <NMI_Handler>
 8008116:	bf00      	nop

08008118 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008118:	e7fe      	b.n	8008118 <HardFault_Handler>
 800811a:	bf00      	nop

0800811c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800811c:	e7fe      	b.n	800811c <MemManage_Handler>
 800811e:	bf00      	nop

08008120 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008120:	e7fe      	b.n	8008120 <BusFault_Handler>
 8008122:	bf00      	nop

08008124 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008124:	e7fe      	b.n	8008124 <UsageFault_Handler>
 8008126:	bf00      	nop

08008128 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop

0800812c <DebugMon_Handler>:
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop

08008130 <PendSV_Handler>:
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop

08008134 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008134:	f000 b92e 	b.w	8008394 <HAL_IncTick>

08008138 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <DMA1_Stream0_IRQHandler+0x8>)
 800813a:	f001 b95b 	b.w	80093f4 <HAL_DMA_IRQHandler>
 800813e:	bf00      	nop
 8008140:	2001961c 	.word	0x2001961c

08008144 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8008144:	4801      	ldr	r0, [pc, #4]	; (800814c <DMA1_Stream1_IRQHandler+0x8>)
 8008146:	f001 b955 	b.w	80093f4 <HAL_DMA_IRQHandler>
 800814a:	bf00      	nop
 800814c:	20019290 	.word	0x20019290

08008150 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008150:	4801      	ldr	r0, [pc, #4]	; (8008158 <DMA1_Stream2_IRQHandler+0x8>)
 8008152:	f001 b94f 	b.w	80093f4 <HAL_DMA_IRQHandler>
 8008156:	bf00      	nop
 8008158:	20019308 	.word	0x20019308

0800815c <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <DMA1_Stream3_IRQHandler+0x8>)
 800815e:	f001 b949 	b.w	80093f4 <HAL_DMA_IRQHandler>
 8008162:	bf00      	nop
 8008164:	20019694 	.word	0x20019694

08008168 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8008168:	4801      	ldr	r0, [pc, #4]	; (8008170 <DMA1_Stream4_IRQHandler+0x8>)
 800816a:	f001 b943 	b.w	80093f4 <HAL_DMA_IRQHandler>
 800816e:	bf00      	nop
 8008170:	2001952c 	.word	0x2001952c

08008174 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8008174:	4801      	ldr	r0, [pc, #4]	; (800817c <DMA1_Stream5_IRQHandler+0x8>)
 8008176:	f001 b93d 	b.w	80093f4 <HAL_DMA_IRQHandler>
 800817a:	bf00      	nop
 800817c:	200195a4 	.word	0x200195a4

08008180 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8008180:	4801      	ldr	r0, [pc, #4]	; (8008188 <I2C2_EV_IRQHandler+0x8>)
 8008182:	f002 b9e7 	b.w	800a554 <HAL_I2C_EV_IRQHandler>
 8008186:	bf00      	nop
 8008188:	2001318c 	.word	0x2001318c

0800818c <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800818c:	4801      	ldr	r0, [pc, #4]	; (8008194 <I2C2_ER_IRQHandler+0x8>)
 800818e:	f002 bd03 	b.w	800ab98 <HAL_I2C_ER_IRQHandler>
 8008192:	bf00      	nop
 8008194:	2001318c 	.word	0x2001318c

08008198 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008198:	4801      	ldr	r0, [pc, #4]	; (80081a0 <SPI1_IRQHandler+0x8>)
 800819a:	f006 beed 	b.w	800ef78 <HAL_SPI_IRQHandler>
 800819e:	bf00      	nop
 80081a0:	20019710 	.word	0x20019710

080081a4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <SPI2_IRQHandler+0x8>)
 80081a6:	f006 bee7 	b.w	800ef78 <HAL_SPI_IRQHandler>
 80081aa:	bf00      	nop
 80081ac:	20019798 	.word	0x20019798

080081b0 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80081b0:	4801      	ldr	r0, [pc, #4]	; (80081b8 <SDMMC1_IRQHandler+0x8>)
 80081b2:	f006 b94d 	b.w	800e450 <HAL_SD_IRQHandler>
 80081b6:	bf00      	nop
 80081b8:	200194b0 	.word	0x200194b0

080081bc <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80081bc:	4801      	ldr	r0, [pc, #4]	; (80081c4 <SPI5_IRQHandler+0x8>)
 80081be:	f006 bedb 	b.w	800ef78 <HAL_SPI_IRQHandler>
 80081c2:	bf00      	nop
 80081c4:	20019820 	.word	0x20019820

080081c8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80081c8:	4927      	ldr	r1, [pc, #156]	; (8008268 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80081ca:	4a28      	ldr	r2, [pc, #160]	; (800826c <SystemInit+0xa4>)
{
 80081cc:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80081ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80081d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80081da:	6813      	ldr	r3, [r2, #0]
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	2b06      	cmp	r3, #6
 80081e2:	d805      	bhi.n	80081f0 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80081e4:	6813      	ldr	r3, [r2, #0]
 80081e6:	f023 030f 	bic.w	r3, r3, #15
 80081ea:	f043 0307 	orr.w	r3, r3, #7
 80081ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80081f0:	4b1f      	ldr	r3, [pc, #124]	; (8008270 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80081f2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80081f4:	4a1f      	ldr	r2, [pc, #124]	; (8008274 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80081f6:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80081f8:	481c      	ldr	r0, [pc, #112]	; (800826c <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 80081fa:	f041 0101 	orr.w	r1, r1, #1
 80081fe:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8008200:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	400a      	ands	r2, r1
 8008206:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008208:	6803      	ldr	r3, [r0, #0]
 800820a:	071b      	lsls	r3, r3, #28
 800820c:	d505      	bpl.n	800821a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800820e:	6803      	ldr	r3, [r0, #0]
 8008210:	f023 030f 	bic.w	r3, r3, #15
 8008214:	f043 0307 	orr.w	r3, r3, #7
 8008218:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800821a:	4b15      	ldr	r3, [pc, #84]	; (8008270 <SystemInit+0xa8>)
 800821c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800821e:	4916      	ldr	r1, [pc, #88]	; (8008278 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8008220:	4c16      	ldr	r4, [pc, #88]	; (800827c <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8008222:	4817      	ldr	r0, [pc, #92]	; (8008280 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8008224:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8008226:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8008228:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800822a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800822c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800822e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008232:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008234:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008236:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008238:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800823a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800823c:	4c11      	ldr	r4, [pc, #68]	; (8008284 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800823e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008242:	4911      	ldr	r1, [pc, #68]	; (8008288 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8008244:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8008246:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	4019      	ands	r1, r3
 800824c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008250:	d203      	bcs.n	800825a <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008252:	4b0e      	ldr	r3, [pc, #56]	; (800828c <SystemInit+0xc4>)
 8008254:	2201      	movs	r2, #1
 8008256:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800825a:	4b0d      	ldr	r3, [pc, #52]	; (8008290 <SystemInit+0xc8>)
 800825c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008260:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	e000ed00 	.word	0xe000ed00
 800826c:	52002000 	.word	0x52002000
 8008270:	58024400 	.word	0x58024400
 8008274:	eaf6ed7f 	.word	0xeaf6ed7f
 8008278:	01010280 	.word	0x01010280
 800827c:	02020200 	.word	0x02020200
 8008280:	01ff0000 	.word	0x01ff0000
 8008284:	5c001000 	.word	0x5c001000
 8008288:	ffff0000 	.word	0xffff0000
 800828c:	51008000 	.word	0x51008000
 8008290:	52004000 	.word	0x52004000

08008294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack      /* set stack pointer */
 8008294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80082cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800829a:	e003      	b.n	80082a4 <LoopCopyDataInit>

0800829c <CopyDataInit>:


CopyDataInit:
  ldr  r3, =_sidata
 800829c:	4b0c      	ldr	r3, [pc, #48]	; (80082d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800829e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80082a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80082a2:	3104      	adds	r1, #4

080082a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80082a4:	480b      	ldr	r0, [pc, #44]	; (80082d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80082a6:	4b0c      	ldr	r3, [pc, #48]	; (80082d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80082a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80082aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80082ac:	d3f6      	bcc.n	800829c <CopyDataInit>
  ldr  r2, =_sbss
 80082ae:	4a0b      	ldr	r2, [pc, #44]	; (80082dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80082b0:	e002      	b.n	80082b8 <LoopFillZerobss>

080082b2 <FillZerobss>:



/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80082b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80082b4:	f842 3b04 	str.w	r3, [r2], #4

080082b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80082ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80082bc:	d3f9      	bcc.n	80082b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80082be:	f7ff ff83 	bl	80081c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80082c2:	f014 faf3 	bl	801c8ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80082c6:	f7ff f909 	bl	80074dc <main>
  bx  lr
 80082ca:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80082cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80082d0:	08037db8 	.word	0x08037db8
  ldr  r0, =_sdata
 80082d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80082d8:	2000037c 	.word	0x2000037c
  ldr  r2, =_sbss
 80082dc:	20000380 	.word	0x20000380
  ldr  r3, = _ebss
 80082e0:	20019f4c 	.word	0x20019f4c

080082e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80082e4:	e7fe      	b.n	80082e4 <ADC3_IRQHandler>
	...

080082e8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80082e8:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <HAL_InitTick+0x40>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	b90b      	cbnz	r3, 80082f2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80082ee:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80082f0:	4770      	bx	lr
{
 80082f2:	b510      	push	{r4, lr}
 80082f4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80082f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082fa:	4a0c      	ldr	r2, [pc, #48]	; (800832c <HAL_InitTick+0x44>)
 80082fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008300:	6810      	ldr	r0, [r2, #0]
 8008302:	fbb0 f0f3 	udiv	r0, r0, r3
 8008306:	f000 f8d7 	bl	80084b8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800830a:	2c0f      	cmp	r4, #15
 800830c:	d800      	bhi.n	8008310 <HAL_InitTick+0x28>
 800830e:	b108      	cbz	r0, 8008314 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8008310:	2001      	movs	r0, #1
}
 8008312:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008314:	2200      	movs	r2, #0
 8008316:	4621      	mov	r1, r4
 8008318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800831c:	f000 f880 	bl	8008420 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008320:	4b03      	ldr	r3, [pc, #12]	; (8008330 <HAL_InitTick+0x48>)
 8008322:	2000      	movs	r0, #0
 8008324:	601c      	str	r4, [r3, #0]
}
 8008326:	bd10      	pop	{r4, pc}
 8008328:	2000028c 	.word	0x2000028c
 800832c:	20000284 	.word	0x20000284
 8008330:	20000290 	.word	0x20000290

08008334 <HAL_Init>:
{
 8008334:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008336:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008338:	4c12      	ldr	r4, [pc, #72]	; (8008384 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800833a:	f000 f85f 	bl	80083fc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800833e:	f003 f86d 	bl	800b41c <HAL_RCC_GetSysClockFreq>
 8008342:	4b11      	ldr	r3, [pc, #68]	; (8008388 <HAL_Init+0x54>)
 8008344:	4911      	ldr	r1, [pc, #68]	; (800838c <HAL_Init+0x58>)
 8008346:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008348:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800834a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800834e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008352:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008354:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008356:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800835a:	490d      	ldr	r1, [pc, #52]	; (8008390 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800835c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008360:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008362:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008366:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008368:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800836a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800836c:	f7ff ffbc 	bl	80082e8 <HAL_InitTick>
 8008370:	b110      	cbz	r0, 8008378 <HAL_Init+0x44>
    return HAL_ERROR;
 8008372:	2401      	movs	r4, #1
}
 8008374:	4620      	mov	r0, r4
 8008376:	bd10      	pop	{r4, pc}
 8008378:	4604      	mov	r4, r0
  HAL_MspInit();
 800837a:	f7ff feb9 	bl	80080f0 <HAL_MspInit>
}
 800837e:	4620      	mov	r0, r4
 8008380:	bd10      	pop	{r4, pc}
 8008382:	bf00      	nop
 8008384:	20000288 	.word	0x20000288
 8008388:	58024400 	.word	0x58024400
 800838c:	0801eee4 	.word	0x0801eee4
 8008390:	20000284 	.word	0x20000284

08008394 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008394:	4a03      	ldr	r2, [pc, #12]	; (80083a4 <HAL_IncTick+0x10>)
 8008396:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <HAL_IncTick+0x14>)
 8008398:	6811      	ldr	r1, [r2, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	440b      	add	r3, r1
 800839e:	6013      	str	r3, [r2, #0]
}
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	200198a8 	.word	0x200198a8
 80083a8:	2000028c 	.word	0x2000028c

080083ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80083ac:	4b01      	ldr	r3, [pc, #4]	; (80083b4 <HAL_GetTick+0x8>)
 80083ae:	6818      	ldr	r0, [r3, #0]
}
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	200198a8 	.word	0x200198a8

080083b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80083bc:	f7ff fff6 	bl	80083ac <HAL_GetTick>
 80083c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80083c2:	1c63      	adds	r3, r4, #1
 80083c4:	d002      	beq.n	80083cc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80083c6:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <HAL_Delay+0x20>)
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80083cc:	f7ff ffee 	bl	80083ac <HAL_GetTick>
 80083d0:	1b43      	subs	r3, r0, r5
 80083d2:	42a3      	cmp	r3, r4
 80083d4:	d3fa      	bcc.n	80083cc <HAL_Delay+0x14>
  {
  }
}
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	2000028c 	.word	0x2000028c

080083dc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80083dc:	4b01      	ldr	r3, [pc, #4]	; (80083e4 <HAL_GetREVID+0x8>)
 80083de:	6818      	ldr	r0, [r3, #0]
}
 80083e0:	0c00      	lsrs	r0, r0, #16
 80083e2:	4770      	bx	lr
 80083e4:	5c001000 	.word	0x5c001000

080083e8 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80083e8:	4a03      	ldr	r2, [pc, #12]	; (80083f8 <HAL_SetFMCMemorySwappingConfig+0x10>)
 80083ea:	6813      	ldr	r3, [r2, #0]
 80083ec:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80083f0:	4318      	orrs	r0, r3
 80083f2:	6010      	str	r0, [r2, #0]
}
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	52004000 	.word	0x52004000

080083fc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083fc:	4906      	ldr	r1, [pc, #24]	; (8008418 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083fe:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008402:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8008404:	4b05      	ldr	r3, [pc, #20]	; (800841c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008406:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008408:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800840c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008410:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8008412:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008414:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008416:	4770      	bx	lr
 8008418:	e000ed00 	.word	0xe000ed00
 800841c:	05fa0000 	.word	0x05fa0000

08008420 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008420:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008422:	b500      	push	{lr}
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800842a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800842e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008432:	f1be 0f04 	cmp.w	lr, #4
 8008436:	bf28      	it	cs
 8008438:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800843c:	f1bc 0f06 	cmp.w	ip, #6
 8008440:	d91a      	bls.n	8008478 <HAL_NVIC_SetPriority+0x58>
 8008442:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008444:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008448:	fa0c fc03 	lsl.w	ip, ip, r3
 800844c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008450:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8008454:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008456:	fa0c fc0e 	lsl.w	ip, ip, lr
 800845a:	ea21 010c 	bic.w	r1, r1, ip
 800845e:	fa01 f103 	lsl.w	r1, r1, r3
 8008462:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8008466:	db0a      	blt.n	800847e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008468:	0109      	lsls	r1, r1, #4
 800846a:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <HAL_NVIC_SetPriority+0x74>)
 800846c:	b2c9      	uxtb	r1, r1
 800846e:	4403      	add	r3, r0
 8008470:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008474:	f85d fb04 	ldr.w	pc, [sp], #4
 8008478:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800847a:	4613      	mov	r3, r2
 800847c:	e7e8      	b.n	8008450 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800847e:	f000 000f 	and.w	r0, r0, #15
 8008482:	0109      	lsls	r1, r1, #4
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <HAL_NVIC_SetPriority+0x78>)
 8008486:	b2c9      	uxtb	r1, r1
 8008488:	4403      	add	r3, r0
 800848a:	7619      	strb	r1, [r3, #24]
 800848c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008490:	e000ed00 	.word	0xe000ed00
 8008494:	e000e100 	.word	0xe000e100
 8008498:	e000ecfc 	.word	0xe000ecfc

0800849c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800849c:	2800      	cmp	r0, #0
 800849e:	db07      	blt.n	80084b0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084a0:	2301      	movs	r3, #1
 80084a2:	f000 011f 	and.w	r1, r0, #31
 80084a6:	4a03      	ldr	r2, [pc, #12]	; (80084b4 <HAL_NVIC_EnableIRQ+0x18>)
 80084a8:	0940      	lsrs	r0, r0, #5
 80084aa:	408b      	lsls	r3, r1
 80084ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	e000e100 	.word	0xe000e100

080084b8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084b8:	1e43      	subs	r3, r0, #1
 80084ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084be:	d20c      	bcs.n	80084da <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084c4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084c6:	4906      	ldr	r1, [pc, #24]	; (80084e0 <HAL_SYSTICK_Config+0x28>)
 80084c8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084cc:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084ce:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084d0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084d4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084d6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80084da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	e000ed00 	.word	0xe000ed00

080084e4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80084e4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80084e8:	4b04      	ldr	r3, [pc, #16]	; (80084fc <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80084ea:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80084ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80084f2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 80084f4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	e000ed00 	.word	0xe000ed00

08008500 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <HAL_MPU_Enable+0x1c>)
 8008502:	f040 0001 	orr.w	r0, r0, #1
 8008506:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800850a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800850c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008510:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8008512:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008516:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800851a:	4770      	bx	lr
 800851c:	e000ed00 	.word	0xe000ed00

08008520 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008520:	7843      	ldrb	r3, [r0, #1]
 8008522:	4a16      	ldr	r2, [pc, #88]	; (800857c <HAL_MPU_ConfigRegion+0x5c>)
 8008524:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8008528:	7803      	ldrb	r3, [r0, #0]
 800852a:	b313      	cbz	r3, 8008572 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800852c:	6843      	ldr	r3, [r0, #4]
 800852e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008532:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008534:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008538:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800853a:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800853c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008540:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008544:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008546:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008548:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800854c:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008550:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008554:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8008556:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800855a:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800855e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008562:	7a01      	ldrb	r1, [r0, #8]
 8008564:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8008568:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800856c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8008570:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8008572:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8008576:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 800857a:	4770      	bx	lr
 800857c:	e000ed00 	.word	0xe000ed00

08008580 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008580:	4b34      	ldr	r3, [pc, #208]	; (8008654 <DMA_CalcBaseAndBitshift+0xd4>)
 8008582:	4935      	ldr	r1, [pc, #212]	; (8008658 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8008584:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008586:	4d35      	ldr	r5, [pc, #212]	; (800865c <DMA_CalcBaseAndBitshift+0xdc>)
 8008588:	6802      	ldr	r2, [r0, #0]
 800858a:	4c35      	ldr	r4, [pc, #212]	; (8008660 <DMA_CalcBaseAndBitshift+0xe0>)
 800858c:	42aa      	cmp	r2, r5
 800858e:	bf18      	it	ne
 8008590:	429a      	cmpne	r2, r3
 8008592:	bf0c      	ite	eq
 8008594:	2301      	moveq	r3, #1
 8008596:	2300      	movne	r3, #0
 8008598:	428a      	cmp	r2, r1
 800859a:	bf08      	it	eq
 800859c:	f043 0301 	orreq.w	r3, r3, #1
 80085a0:	3130      	adds	r1, #48	; 0x30
 80085a2:	42a2      	cmp	r2, r4
 80085a4:	bf08      	it	eq
 80085a6:	f043 0301 	orreq.w	r3, r3, #1
 80085aa:	3430      	adds	r4, #48	; 0x30
 80085ac:	428a      	cmp	r2, r1
 80085ae:	bf08      	it	eq
 80085b0:	f043 0301 	orreq.w	r3, r3, #1
 80085b4:	3130      	adds	r1, #48	; 0x30
 80085b6:	42a2      	cmp	r2, r4
 80085b8:	bf08      	it	eq
 80085ba:	f043 0301 	orreq.w	r3, r3, #1
 80085be:	3430      	adds	r4, #48	; 0x30
 80085c0:	428a      	cmp	r2, r1
 80085c2:	bf08      	it	eq
 80085c4:	f043 0301 	orreq.w	r3, r3, #1
 80085c8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80085cc:	42a2      	cmp	r2, r4
 80085ce:	bf08      	it	eq
 80085d0:	f043 0301 	orreq.w	r3, r3, #1
 80085d4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80085d8:	428a      	cmp	r2, r1
 80085da:	bf08      	it	eq
 80085dc:	f043 0301 	orreq.w	r3, r3, #1
 80085e0:	3130      	adds	r1, #48	; 0x30
 80085e2:	42a2      	cmp	r2, r4
 80085e4:	bf08      	it	eq
 80085e6:	f043 0301 	orreq.w	r3, r3, #1
 80085ea:	3430      	adds	r4, #48	; 0x30
 80085ec:	428a      	cmp	r2, r1
 80085ee:	bf08      	it	eq
 80085f0:	f043 0301 	orreq.w	r3, r3, #1
 80085f4:	3130      	adds	r1, #48	; 0x30
 80085f6:	42a2      	cmp	r2, r4
 80085f8:	bf08      	it	eq
 80085fa:	f043 0301 	orreq.w	r3, r3, #1
 80085fe:	3430      	adds	r4, #48	; 0x30
 8008600:	428a      	cmp	r2, r1
 8008602:	bf08      	it	eq
 8008604:	f043 0301 	orreq.w	r3, r3, #1
 8008608:	3130      	adds	r1, #48	; 0x30
 800860a:	42a2      	cmp	r2, r4
 800860c:	bf08      	it	eq
 800860e:	f043 0301 	orreq.w	r3, r3, #1
 8008612:	428a      	cmp	r2, r1
 8008614:	bf08      	it	eq
 8008616:	f043 0301 	orreq.w	r3, r3, #1
 800861a:	b913      	cbnz	r3, 8008622 <DMA_CalcBaseAndBitshift+0xa2>
 800861c:	4b11      	ldr	r3, [pc, #68]	; (8008664 <DMA_CalcBaseAndBitshift+0xe4>)
 800861e:	429a      	cmp	r2, r3
 8008620:	d113      	bne.n	800864a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008622:	b2d3      	uxtb	r3, r2
 8008624:	4910      	ldr	r1, [pc, #64]	; (8008668 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008626:	4c11      	ldr	r4, [pc, #68]	; (800866c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008628:	3b10      	subs	r3, #16
 800862a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800862e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008630:	4b0f      	ldr	r3, [pc, #60]	; (8008670 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008632:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008636:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800863a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800863c:	bf88      	it	hi
 800863e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008640:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008642:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8008644:	4618      	mov	r0, r3
 8008646:	bc30      	pop	{r4, r5}
 8008648:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800864a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800864e:	6583      	str	r3, [r0, #88]	; 0x58
 8008650:	e7f8      	b.n	8008644 <DMA_CalcBaseAndBitshift+0xc4>
 8008652:	bf00      	nop
 8008654:	40020010 	.word	0x40020010
 8008658:	40020040 	.word	0x40020040
 800865c:	40020028 	.word	0x40020028
 8008660:	40020058 	.word	0x40020058
 8008664:	400204b8 	.word	0x400204b8
 8008668:	aaaaaaab 	.word	0xaaaaaaab
 800866c:	0801eef4 	.word	0x0801eef4
 8008670:	fffffc00 	.word	0xfffffc00

08008674 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008674:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008676:	4a29      	ldr	r2, [pc, #164]	; (800871c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8008678:	4929      	ldr	r1, [pc, #164]	; (8008720 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800867a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800867c:	4d29      	ldr	r5, [pc, #164]	; (8008724 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800867e:	4c2a      	ldr	r4, [pc, #168]	; (8008728 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8008680:	42ab      	cmp	r3, r5
 8008682:	bf18      	it	ne
 8008684:	4293      	cmpne	r3, r2
 8008686:	bf0c      	ite	eq
 8008688:	2201      	moveq	r2, #1
 800868a:	2200      	movne	r2, #0
 800868c:	428b      	cmp	r3, r1
 800868e:	bf08      	it	eq
 8008690:	f042 0201 	orreq.w	r2, r2, #1
 8008694:	3128      	adds	r1, #40	; 0x28
 8008696:	42a3      	cmp	r3, r4
 8008698:	bf08      	it	eq
 800869a:	f042 0201 	orreq.w	r2, r2, #1
 800869e:	3428      	adds	r4, #40	; 0x28
 80086a0:	428b      	cmp	r3, r1
 80086a2:	bf08      	it	eq
 80086a4:	f042 0201 	orreq.w	r2, r2, #1
 80086a8:	3128      	adds	r1, #40	; 0x28
 80086aa:	42a3      	cmp	r3, r4
 80086ac:	bf08      	it	eq
 80086ae:	f042 0201 	orreq.w	r2, r2, #1
 80086b2:	428b      	cmp	r3, r1
 80086b4:	bf08      	it	eq
 80086b6:	f042 0201 	orreq.w	r2, r2, #1
 80086ba:	b912      	cbnz	r2, 80086c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80086bc:	4a1b      	ldr	r2, [pc, #108]	; (800872c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d113      	bne.n	80086ea <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	4c1a      	ldr	r4, [pc, #104]	; (8008730 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80086c6:	4a1b      	ldr	r2, [pc, #108]	; (8008734 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80086c8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80086ca:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80086cc:	4d1a      	ldr	r5, [pc, #104]	; (8008738 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80086ce:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80086d2:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80086d4:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80086d8:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80086dc:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80086de:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80086e2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80086e4:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80086e6:	bc30      	pop	{r4, r5}
 80086e8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80086ea:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80086ec:	4913      	ldr	r1, [pc, #76]	; (800873c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80086ee:	4c14      	ldr	r4, [pc, #80]	; (8008740 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80086f0:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80086f2:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80086f4:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80086f6:	fba4 2302 	umull	r2, r3, r4, r2
 80086fa:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80086fe:	d800      	bhi.n	8008702 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8008700:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008702:	4a10      	ldr	r2, [pc, #64]	; (8008744 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008704:	f003 051f 	and.w	r5, r3, #31
 8008708:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800870a:	4c0f      	ldr	r4, [pc, #60]	; (8008748 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800870c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800870e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008710:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008712:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008714:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008716:	6602      	str	r2, [r0, #96]	; 0x60
}
 8008718:	e7e5      	b.n	80086e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 800871a:	bf00      	nop
 800871c:	58025408 	.word	0x58025408
 8008720:	58025430 	.word	0x58025430
 8008724:	5802541c 	.word	0x5802541c
 8008728:	58025444 	.word	0x58025444
 800872c:	58025494 	.word	0x58025494
 8008730:	cccccccd 	.word	0xcccccccd
 8008734:	16009600 	.word	0x16009600
 8008738:	58025880 	.word	0x58025880
 800873c:	bffdfbf0 	.word	0xbffdfbf0
 8008740:	aaaaaaab 	.word	0xaaaaaaab
 8008744:	10008200 	.word	0x10008200
 8008748:	40020880 	.word	0x40020880

0800874c <HAL_DMA_Init>:
{
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008750:	f7ff fe2c 	bl	80083ac <HAL_GetTick>
  if(hdma == NULL)
 8008754:	2c00      	cmp	r4, #0
 8008756:	f000 816b 	beq.w	8008a30 <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	4605      	mov	r5, r0
 800875e:	4ba3      	ldr	r3, [pc, #652]	; (80089ec <HAL_DMA_Init+0x2a0>)
 8008760:	429a      	cmp	r2, r3
 8008762:	d048      	beq.n	80087f6 <HAL_DMA_Init+0xaa>
 8008764:	3318      	adds	r3, #24
 8008766:	429a      	cmp	r2, r3
 8008768:	d045      	beq.n	80087f6 <HAL_DMA_Init+0xaa>
 800876a:	3330      	adds	r3, #48	; 0x30
 800876c:	49a0      	ldr	r1, [pc, #640]	; (80089f0 <HAL_DMA_Init+0x2a4>)
 800876e:	428a      	cmp	r2, r1
 8008770:	bf18      	it	ne
 8008772:	429a      	cmpne	r2, r3
 8008774:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008778:	bf0c      	ite	eq
 800877a:	2301      	moveq	r3, #1
 800877c:	2300      	movne	r3, #0
 800877e:	428a      	cmp	r2, r1
 8008780:	bf08      	it	eq
 8008782:	f043 0301 	orreq.w	r3, r3, #1
 8008786:	3118      	adds	r1, #24
 8008788:	428a      	cmp	r2, r1
 800878a:	bf08      	it	eq
 800878c:	f043 0301 	orreq.w	r3, r3, #1
 8008790:	3118      	adds	r1, #24
 8008792:	428a      	cmp	r2, r1
 8008794:	bf08      	it	eq
 8008796:	f043 0301 	orreq.w	r3, r3, #1
 800879a:	3118      	adds	r1, #24
 800879c:	428a      	cmp	r2, r1
 800879e:	bf08      	it	eq
 80087a0:	f043 0301 	orreq.w	r3, r3, #1
 80087a4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80087a8:	428a      	cmp	r2, r1
 80087aa:	bf08      	it	eq
 80087ac:	f043 0301 	orreq.w	r3, r3, #1
 80087b0:	3118      	adds	r1, #24
 80087b2:	428a      	cmp	r2, r1
 80087b4:	bf08      	it	eq
 80087b6:	f043 0301 	orreq.w	r3, r3, #1
 80087ba:	3118      	adds	r1, #24
 80087bc:	428a      	cmp	r2, r1
 80087be:	bf08      	it	eq
 80087c0:	f043 0301 	orreq.w	r3, r3, #1
 80087c4:	3118      	adds	r1, #24
 80087c6:	428a      	cmp	r2, r1
 80087c8:	bf08      	it	eq
 80087ca:	f043 0301 	orreq.w	r3, r3, #1
 80087ce:	3118      	adds	r1, #24
 80087d0:	428a      	cmp	r2, r1
 80087d2:	bf08      	it	eq
 80087d4:	f043 0301 	orreq.w	r3, r3, #1
 80087d8:	3118      	adds	r1, #24
 80087da:	428a      	cmp	r2, r1
 80087dc:	bf08      	it	eq
 80087de:	f043 0301 	orreq.w	r3, r3, #1
 80087e2:	3118      	adds	r1, #24
 80087e4:	428a      	cmp	r2, r1
 80087e6:	bf08      	it	eq
 80087e8:	f043 0301 	orreq.w	r3, r3, #1
 80087ec:	b91b      	cbnz	r3, 80087f6 <HAL_DMA_Init+0xaa>
 80087ee:	4b81      	ldr	r3, [pc, #516]	; (80089f4 <HAL_DMA_Init+0x2a8>)
 80087f0:	429a      	cmp	r2, r3
 80087f2:	f040 8184 	bne.w	8008afe <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
 80087f6:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80087f8:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 80087fa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 80087fe:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8008802:	6813      	ldr	r3, [r2, #0]
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	e005      	b.n	8008818 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800880c:	f7ff fdce 	bl	80083ac <HAL_GetTick>
 8008810:	1b43      	subs	r3, r0, r5
 8008812:	2b05      	cmp	r3, #5
 8008814:	f200 80fe 	bhi.w	8008a14 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	07d0      	lsls	r0, r2, #31
 800881e:	d4f5      	bmi.n	800880c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8008820:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008824:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8008826:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008828:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800882a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800882c:	430a      	orrs	r2, r1
 800882e:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008830:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008832:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008836:	69a1      	ldr	r1, [r4, #24]
 8008838:	ea42 0201 	orr.w	r2, r2, r1
 800883c:	69e1      	ldr	r1, [r4, #28]
 800883e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8008842:	6a21      	ldr	r1, [r4, #32]
 8008844:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008848:	496b      	ldr	r1, [pc, #428]	; (80089f8 <HAL_DMA_Init+0x2ac>)
 800884a:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 800884e:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008852:	d103      	bne.n	800885c <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008854:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8008858:	4301      	orrs	r1, r0
 800885a:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800885c:	4867      	ldr	r0, [pc, #412]	; (80089fc <HAL_DMA_Init+0x2b0>)
 800885e:	4968      	ldr	r1, [pc, #416]	; (8008a00 <HAL_DMA_Init+0x2b4>)
 8008860:	6800      	ldr	r0, [r0, #0]
 8008862:	4001      	ands	r1, r0
 8008864:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008868:	d30a      	bcc.n	8008880 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800886a:	6861      	ldr	r1, [r4, #4]
 800886c:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8008870:	281f      	cmp	r0, #31
 8008872:	f240 80d6 	bls.w	8008a22 <HAL_DMA_Init+0x2d6>
 8008876:	394f      	subs	r1, #79	; 0x4f
 8008878:	2903      	cmp	r1, #3
 800887a:	d801      	bhi.n	8008880 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 800887c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008880:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008882:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8008884:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008886:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008888:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800888a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800888e:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008892:	d10e      	bne.n	80088b2 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008894:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8008898:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800889a:	b150      	cbz	r0, 80088b2 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800889c:	69a5      	ldr	r5, [r4, #24]
 800889e:	2d00      	cmp	r5, #0
 80088a0:	f040 8108 	bne.w	8008ab4 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
 80088a4:	2a01      	cmp	r2, #1
 80088a6:	f000 8125 	beq.w	8008af4 <HAL_DMA_Init+0x3a8>
 80088aa:	f032 0202 	bics.w	r2, r2, #2
 80088ae:	f000 8109 	beq.w	8008ac4 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80088b2:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088b4:	4620      	mov	r0, r4
 80088b6:	f7ff fe63 	bl	8008580 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80088ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80088bc:	233f      	movs	r3, #63	; 0x3f
 80088be:	f002 021f 	and.w	r2, r2, #31
 80088c2:	4093      	lsls	r3, r2
 80088c4:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	4b48      	ldr	r3, [pc, #288]	; (80089ec <HAL_DMA_Init+0x2a0>)
 80088ca:	484e      	ldr	r0, [pc, #312]	; (8008a04 <HAL_DMA_Init+0x2b8>)
 80088cc:	4948      	ldr	r1, [pc, #288]	; (80089f0 <HAL_DMA_Init+0x2a4>)
 80088ce:	4282      	cmp	r2, r0
 80088d0:	bf18      	it	ne
 80088d2:	429a      	cmpne	r2, r3
 80088d4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80088d8:	bf0c      	ite	eq
 80088da:	2301      	moveq	r3, #1
 80088dc:	2300      	movne	r3, #0
 80088de:	428a      	cmp	r2, r1
 80088e0:	bf08      	it	eq
 80088e2:	f043 0301 	orreq.w	r3, r3, #1
 80088e6:	3130      	adds	r1, #48	; 0x30
 80088e8:	4282      	cmp	r2, r0
 80088ea:	bf08      	it	eq
 80088ec:	f043 0301 	orreq.w	r3, r3, #1
 80088f0:	3030      	adds	r0, #48	; 0x30
 80088f2:	428a      	cmp	r2, r1
 80088f4:	bf08      	it	eq
 80088f6:	f043 0301 	orreq.w	r3, r3, #1
 80088fa:	3130      	adds	r1, #48	; 0x30
 80088fc:	4282      	cmp	r2, r0
 80088fe:	bf08      	it	eq
 8008900:	f043 0301 	orreq.w	r3, r3, #1
 8008904:	3030      	adds	r0, #48	; 0x30
 8008906:	428a      	cmp	r2, r1
 8008908:	bf08      	it	eq
 800890a:	f043 0301 	orreq.w	r3, r3, #1
 800890e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008912:	4282      	cmp	r2, r0
 8008914:	bf08      	it	eq
 8008916:	f043 0301 	orreq.w	r3, r3, #1
 800891a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800891e:	428a      	cmp	r2, r1
 8008920:	bf08      	it	eq
 8008922:	f043 0301 	orreq.w	r3, r3, #1
 8008926:	3130      	adds	r1, #48	; 0x30
 8008928:	4282      	cmp	r2, r0
 800892a:	bf08      	it	eq
 800892c:	f043 0301 	orreq.w	r3, r3, #1
 8008930:	3030      	adds	r0, #48	; 0x30
 8008932:	428a      	cmp	r2, r1
 8008934:	bf08      	it	eq
 8008936:	f043 0301 	orreq.w	r3, r3, #1
 800893a:	3130      	adds	r1, #48	; 0x30
 800893c:	4282      	cmp	r2, r0
 800893e:	bf08      	it	eq
 8008940:	f043 0301 	orreq.w	r3, r3, #1
 8008944:	3030      	adds	r0, #48	; 0x30
 8008946:	428a      	cmp	r2, r1
 8008948:	bf08      	it	eq
 800894a:	f043 0301 	orreq.w	r3, r3, #1
 800894e:	3130      	adds	r1, #48	; 0x30
 8008950:	4282      	cmp	r2, r0
 8008952:	bf08      	it	eq
 8008954:	f043 0301 	orreq.w	r3, r3, #1
 8008958:	3030      	adds	r0, #48	; 0x30
 800895a:	428a      	cmp	r2, r1
 800895c:	bf08      	it	eq
 800895e:	f043 0301 	orreq.w	r3, r3, #1
 8008962:	4929      	ldr	r1, [pc, #164]	; (8008a08 <HAL_DMA_Init+0x2bc>)
 8008964:	4282      	cmp	r2, r0
 8008966:	bf08      	it	eq
 8008968:	f043 0301 	orreq.w	r3, r3, #1
 800896c:	4827      	ldr	r0, [pc, #156]	; (8008a0c <HAL_DMA_Init+0x2c0>)
 800896e:	428a      	cmp	r2, r1
 8008970:	bf08      	it	eq
 8008972:	f043 0301 	orreq.w	r3, r3, #1
 8008976:	3128      	adds	r1, #40	; 0x28
 8008978:	4282      	cmp	r2, r0
 800897a:	bf08      	it	eq
 800897c:	f043 0301 	orreq.w	r3, r3, #1
 8008980:	3028      	adds	r0, #40	; 0x28
 8008982:	428a      	cmp	r2, r1
 8008984:	bf08      	it	eq
 8008986:	f043 0301 	orreq.w	r3, r3, #1
 800898a:	3128      	adds	r1, #40	; 0x28
 800898c:	4282      	cmp	r2, r0
 800898e:	bf08      	it	eq
 8008990:	f043 0301 	orreq.w	r3, r3, #1
 8008994:	3028      	adds	r0, #40	; 0x28
 8008996:	428a      	cmp	r2, r1
 8008998:	bf08      	it	eq
 800899a:	f043 0301 	orreq.w	r3, r3, #1
 800899e:	3128      	adds	r1, #40	; 0x28
 80089a0:	4282      	cmp	r2, r0
 80089a2:	bf08      	it	eq
 80089a4:	f043 0301 	orreq.w	r3, r3, #1
 80089a8:	428a      	cmp	r2, r1
 80089aa:	bf08      	it	eq
 80089ac:	f043 0301 	orreq.w	r3, r3, #1
 80089b0:	b913      	cbnz	r3, 80089b8 <HAL_DMA_Init+0x26c>
 80089b2:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <HAL_DMA_Init+0x2c4>)
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d113      	bne.n	80089e0 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80089b8:	4620      	mov	r0, r4
 80089ba:	f7ff fe5b 	bl	8008674 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80089be:	68a3      	ldr	r3, [r4, #8]
 80089c0:	2b80      	cmp	r3, #128	; 0x80
 80089c2:	d037      	beq.n	8008a34 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80089c4:	7922      	ldrb	r2, [r4, #4]
 80089c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80089c8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089ca:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 80089ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80089d0:	6861      	ldr	r1, [r4, #4]
 80089d2:	1e4b      	subs	r3, r1, #1
 80089d4:	2b07      	cmp	r3, #7
 80089d6:	d931      	bls.n	8008a3c <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
 80089d8:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80089da:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80089de:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089e0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80089e2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089e4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80089e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	40020010 	.word	0x40020010
 80089f0:	40020040 	.word	0x40020040
 80089f4:	400204b8 	.word	0x400204b8
 80089f8:	fe10803f 	.word	0xfe10803f
 80089fc:	5c001000 	.word	0x5c001000
 8008a00:	ffff0000 	.word	0xffff0000
 8008a04:	40020028 	.word	0x40020028
 8008a08:	58025408 	.word	0x58025408
 8008a0c:	5802541c 	.word	0x5802541c
 8008a10:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a14:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8008a16:	2303      	movs	r3, #3
        return HAL_ERROR;
 8008a18:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008a1a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8008a1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008a20:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008a22:	496a      	ldr	r1, [pc, #424]	; (8008bcc <HAL_DMA_Init+0x480>)
 8008a24:	fa21 f000 	lsr.w	r0, r1, r0
 8008a28:	07c1      	lsls	r1, r0, #31
 8008a2a:	f57f af29 	bpl.w	8008880 <HAL_DMA_Init+0x134>
 8008a2e:	e725      	b.n	800887c <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 8008a30:	2001      	movs	r0, #1
}
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008a34:	2300      	movs	r3, #0
 8008a36:	461a      	mov	r2, r3
 8008a38:	6063      	str	r3, [r4, #4]
 8008a3a:	e7c4      	b.n	80089c6 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008a3c:	6820      	ldr	r0, [r4, #0]
 8008a3e:	4a64      	ldr	r2, [pc, #400]	; (8008bd0 <HAL_DMA_Init+0x484>)
 8008a40:	4d64      	ldr	r5, [pc, #400]	; (8008bd4 <HAL_DMA_Init+0x488>)
 8008a42:	42a8      	cmp	r0, r5
 8008a44:	bf18      	it	ne
 8008a46:	4290      	cmpne	r0, r2
 8008a48:	f105 0514 	add.w	r5, r5, #20
 8008a4c:	bf0c      	ite	eq
 8008a4e:	2201      	moveq	r2, #1
 8008a50:	2200      	movne	r2, #0
 8008a52:	42a8      	cmp	r0, r5
 8008a54:	bf08      	it	eq
 8008a56:	f042 0201 	orreq.w	r2, r2, #1
 8008a5a:	3514      	adds	r5, #20
 8008a5c:	42a8      	cmp	r0, r5
 8008a5e:	bf08      	it	eq
 8008a60:	f042 0201 	orreq.w	r2, r2, #1
 8008a64:	3514      	adds	r5, #20
 8008a66:	42a8      	cmp	r0, r5
 8008a68:	bf08      	it	eq
 8008a6a:	f042 0201 	orreq.w	r2, r2, #1
 8008a6e:	3514      	adds	r5, #20
 8008a70:	42a8      	cmp	r0, r5
 8008a72:	bf08      	it	eq
 8008a74:	f042 0201 	orreq.w	r2, r2, #1
 8008a78:	3514      	adds	r5, #20
 8008a7a:	42a8      	cmp	r0, r5
 8008a7c:	bf08      	it	eq
 8008a7e:	f042 0201 	orreq.w	r2, r2, #1
 8008a82:	b93a      	cbnz	r2, 8008a94 <HAL_DMA_Init+0x348>
 8008a84:	4a54      	ldr	r2, [pc, #336]	; (8008bd8 <HAL_DMA_Init+0x48c>)
 8008a86:	4290      	cmp	r0, r2
 8008a88:	d004      	beq.n	8008a94 <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a8a:	4a54      	ldr	r2, [pc, #336]	; (8008bdc <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008a8c:	4854      	ldr	r0, [pc, #336]	; (8008be0 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a8e:	440a      	add	r2, r1
 8008a90:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008a92:	e003      	b.n	8008a9c <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a94:	4a53      	ldr	r2, [pc, #332]	; (8008be4 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008a96:	4854      	ldr	r0, [pc, #336]	; (8008be8 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008a98:	440a      	add	r2, r1
 8008a9a:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008aa8:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008aaa:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008aac:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8008ab0:	605a      	str	r2, [r3, #4]
 8008ab2:	e795      	b.n	80089e0 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ab4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8008ab8:	d00e      	beq.n	8008ad8 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
 8008aba:	2a02      	cmp	r2, #2
 8008abc:	d905      	bls.n	8008aca <HAL_DMA_Init+0x37e>
 8008abe:	2a03      	cmp	r2, #3
 8008ac0:	f47f aef7 	bne.w	80088b2 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ac4:	01c2      	lsls	r2, r0, #7
 8008ac6:	f57f aef4 	bpl.w	80088b2 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 8008aca:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008acc:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8008ace:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008ad0:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8008ad2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008ad6:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8008ad8:	2a03      	cmp	r2, #3
 8008ada:	f63f aeea 	bhi.w	80088b2 <HAL_DMA_Init+0x166>
 8008ade:	a501      	add	r5, pc, #4	; (adr r5, 8008ae4 <HAL_DMA_Init+0x398>)
 8008ae0:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8008ae4:	08008acb 	.word	0x08008acb
 8008ae8:	08008ac5 	.word	0x08008ac5
 8008aec:	08008acb 	.word	0x08008acb
 8008af0:	08008af5 	.word	0x08008af5
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008af4:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8008af8:	f47f aedb 	bne.w	80088b2 <HAL_DMA_Init+0x166>
 8008afc:	e7e5      	b.n	8008aca <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008afe:	4b34      	ldr	r3, [pc, #208]	; (8008bd0 <HAL_DMA_Init+0x484>)
 8008b00:	4834      	ldr	r0, [pc, #208]	; (8008bd4 <HAL_DMA_Init+0x488>)
 8008b02:	493a      	ldr	r1, [pc, #232]	; (8008bec <HAL_DMA_Init+0x4a0>)
 8008b04:	4282      	cmp	r2, r0
 8008b06:	bf18      	it	ne
 8008b08:	429a      	cmpne	r2, r3
 8008b0a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8008b0e:	bf0c      	ite	eq
 8008b10:	2301      	moveq	r3, #1
 8008b12:	2300      	movne	r3, #0
 8008b14:	428a      	cmp	r2, r1
 8008b16:	bf08      	it	eq
 8008b18:	f043 0301 	orreq.w	r3, r3, #1
 8008b1c:	3128      	adds	r1, #40	; 0x28
 8008b1e:	4282      	cmp	r2, r0
 8008b20:	bf08      	it	eq
 8008b22:	f043 0301 	orreq.w	r3, r3, #1
 8008b26:	3028      	adds	r0, #40	; 0x28
 8008b28:	428a      	cmp	r2, r1
 8008b2a:	bf08      	it	eq
 8008b2c:	f043 0301 	orreq.w	r3, r3, #1
 8008b30:	3128      	adds	r1, #40	; 0x28
 8008b32:	4282      	cmp	r2, r0
 8008b34:	bf08      	it	eq
 8008b36:	f043 0301 	orreq.w	r3, r3, #1
 8008b3a:	428a      	cmp	r2, r1
 8008b3c:	bf08      	it	eq
 8008b3e:	f043 0301 	orreq.w	r3, r3, #1
 8008b42:	b913      	cbnz	r3, 8008b4a <HAL_DMA_Init+0x3fe>
 8008b44:	4b24      	ldr	r3, [pc, #144]	; (8008bd8 <HAL_DMA_Init+0x48c>)
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d139      	bne.n	8008bbe <HAL_DMA_Init+0x472>
    __HAL_UNLOCK(hdma);
 8008b4a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b4c:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008b4e:	4928      	ldr	r1, [pc, #160]	; (8008bf0 <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b50:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8008b54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008b58:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008b5a:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008b5c:	68a3      	ldr	r3, [r4, #8]
 8008b5e:	2b40      	cmp	r3, #64	; 0x40
 8008b60:	d02b      	beq.n	8008bba <HAL_DMA_Init+0x46e>
 8008b62:	2b80      	cmp	r3, #128	; 0x80
 8008b64:	bf0c      	ite	eq
 8008b66:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8008b6a:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008b6c:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8008b70:	08db      	lsrs	r3, r3, #3
 8008b72:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008b76:	6965      	ldr	r5, [r4, #20]
 8008b78:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008b7c:	69a5      	ldr	r5, [r4, #24]
 8008b7e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008b82:	69e5      	ldr	r5, [r4, #28]
 8008b84:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008b88:	6a25      	ldr	r5, [r4, #32]
 8008b8a:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8008b8e:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008b90:	4918      	ldr	r1, [pc, #96]	; (8008bf4 <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008b92:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b94:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008b96:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008b98:	6822      	ldr	r2, [r4, #0]
 8008b9a:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <HAL_DMA_Init+0x4ac>)
 8008b9c:	4411      	add	r1, r2
 8008b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8008ba2:	091b      	lsrs	r3, r3, #4
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008ba8:	f7ff fcea 	bl	8008580 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008bac:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f002 021f 	and.w	r2, r2, #31
 8008bb4:	4093      	lsls	r3, r2
 8008bb6:	6043      	str	r3, [r0, #4]
 8008bb8:	e685      	b.n	80088c6 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008bba:	2010      	movs	r0, #16
 8008bbc:	e7d6      	b.n	8008b6c <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008bbe:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008bc0:	2303      	movs	r3, #3
    return HAL_ERROR;
 8008bc2:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008bc4:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008bc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	c3c0003f 	.word	0xc3c0003f
 8008bd0:	58025408 	.word	0x58025408
 8008bd4:	5802541c 	.word	0x5802541c
 8008bd8:	58025494 	.word	0x58025494
 8008bdc:	1000823f 	.word	0x1000823f
 8008be0:	40020940 	.word	0x40020940
 8008be4:	1600963f 	.word	0x1600963f
 8008be8:	58025940 	.word	0x58025940
 8008bec:	58025430 	.word	0x58025430
 8008bf0:	fffe000f 	.word	0xfffe000f
 8008bf4:	a7fdabf8 	.word	0xa7fdabf8
 8008bf8:	cccccccd 	.word	0xcccccccd

08008bfc <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f000 8270 	beq.w	80090e2 <HAL_DMA_Start_IT+0x4e6>
 8008c02:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8008c04:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8008c08:	2801      	cmp	r0, #1
 8008c0a:	f000 826c 	beq.w	80090e6 <HAL_DMA_Start_IT+0x4ea>
 8008c0e:	2001      	movs	r0, #1
{
 8008c10:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8008c12:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8008c16:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8008c1a:	4284      	cmp	r4, r0
 8008c1c:	d008      	beq.n	8008c30 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8008c22:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008c24:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8008c28:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8008c2c:	bc70      	pop	{r4, r5, r6}
 8008c2e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c30:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8008c32:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c36:	4ea2      	ldr	r6, [pc, #648]	; (8008ec0 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8008c38:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8008c42:	6820      	ldr	r0, [r4, #0]
 8008c44:	f020 0001 	bic.w	r0, r0, #1
 8008c48:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c4a:	489e      	ldr	r0, [pc, #632]	; (8008ec4 <HAL_DMA_Start_IT+0x2c8>)
 8008c4c:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c50:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008c54:	42b4      	cmp	r4, r6
 8008c56:	bf18      	it	ne
 8008c58:	4284      	cmpne	r4, r0
 8008c5a:	f106 0618 	add.w	r6, r6, #24
 8008c5e:	bf0c      	ite	eq
 8008c60:	2001      	moveq	r0, #1
 8008c62:	2000      	movne	r0, #0
 8008c64:	42b4      	cmp	r4, r6
 8008c66:	bf08      	it	eq
 8008c68:	f040 0001 	orreq.w	r0, r0, #1
 8008c6c:	3618      	adds	r6, #24
 8008c6e:	42b4      	cmp	r4, r6
 8008c70:	bf08      	it	eq
 8008c72:	f040 0001 	orreq.w	r0, r0, #1
 8008c76:	3618      	adds	r6, #24
 8008c78:	42b4      	cmp	r4, r6
 8008c7a:	bf08      	it	eq
 8008c7c:	f040 0001 	orreq.w	r0, r0, #1
 8008c80:	3618      	adds	r6, #24
 8008c82:	42b4      	cmp	r4, r6
 8008c84:	bf08      	it	eq
 8008c86:	f040 0001 	orreq.w	r0, r0, #1
 8008c8a:	3618      	adds	r6, #24
 8008c8c:	42b4      	cmp	r4, r6
 8008c8e:	bf08      	it	eq
 8008c90:	f040 0001 	orreq.w	r0, r0, #1
 8008c94:	3618      	adds	r6, #24
 8008c96:	42b4      	cmp	r4, r6
 8008c98:	bf08      	it	eq
 8008c9a:	f040 0001 	orreq.w	r0, r0, #1
 8008c9e:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8008ca2:	42b4      	cmp	r4, r6
 8008ca4:	bf08      	it	eq
 8008ca6:	f040 0001 	orreq.w	r0, r0, #1
 8008caa:	3618      	adds	r6, #24
 8008cac:	42b4      	cmp	r4, r6
 8008cae:	bf08      	it	eq
 8008cb0:	f040 0001 	orreq.w	r0, r0, #1
 8008cb4:	3618      	adds	r6, #24
 8008cb6:	42b4      	cmp	r4, r6
 8008cb8:	bf08      	it	eq
 8008cba:	f040 0001 	orreq.w	r0, r0, #1
 8008cbe:	3618      	adds	r6, #24
 8008cc0:	42b4      	cmp	r4, r6
 8008cc2:	bf08      	it	eq
 8008cc4:	f040 0001 	orreq.w	r0, r0, #1
 8008cc8:	3618      	adds	r6, #24
 8008cca:	42b4      	cmp	r4, r6
 8008ccc:	bf08      	it	eq
 8008cce:	f040 0001 	orreq.w	r0, r0, #1
 8008cd2:	3618      	adds	r6, #24
 8008cd4:	42b4      	cmp	r4, r6
 8008cd6:	bf08      	it	eq
 8008cd8:	f040 0001 	orreq.w	r0, r0, #1
 8008cdc:	3618      	adds	r6, #24
 8008cde:	42b4      	cmp	r4, r6
 8008ce0:	bf08      	it	eq
 8008ce2:	f040 0001 	orreq.w	r0, r0, #1
 8008ce6:	3618      	adds	r6, #24
 8008ce8:	42b4      	cmp	r4, r6
 8008cea:	bf08      	it	eq
 8008cec:	f040 0001 	orreq.w	r0, r0, #1
 8008cf0:	4e75      	ldr	r6, [pc, #468]	; (8008ec8 <HAL_DMA_Start_IT+0x2cc>)
 8008cf2:	42b4      	cmp	r4, r6
 8008cf4:	bf08      	it	eq
 8008cf6:	f040 0001 	orreq.w	r0, r0, #1
 8008cfa:	3614      	adds	r6, #20
 8008cfc:	42b4      	cmp	r4, r6
 8008cfe:	bf08      	it	eq
 8008d00:	f040 0001 	orreq.w	r0, r0, #1
 8008d04:	3614      	adds	r6, #20
 8008d06:	42b4      	cmp	r4, r6
 8008d08:	bf08      	it	eq
 8008d0a:	f040 0001 	orreq.w	r0, r0, #1
 8008d0e:	3614      	adds	r6, #20
 8008d10:	42b4      	cmp	r4, r6
 8008d12:	bf08      	it	eq
 8008d14:	f040 0001 	orreq.w	r0, r0, #1
 8008d18:	3614      	adds	r6, #20
 8008d1a:	42b4      	cmp	r4, r6
 8008d1c:	bf08      	it	eq
 8008d1e:	f040 0001 	orreq.w	r0, r0, #1
 8008d22:	3614      	adds	r6, #20
 8008d24:	42b4      	cmp	r4, r6
 8008d26:	bf08      	it	eq
 8008d28:	f040 0001 	orreq.w	r0, r0, #1
 8008d2c:	3614      	adds	r6, #20
 8008d2e:	42b4      	cmp	r4, r6
 8008d30:	bf08      	it	eq
 8008d32:	f040 0001 	orreq.w	r0, r0, #1
 8008d36:	b910      	cbnz	r0, 8008d3e <HAL_DMA_Start_IT+0x142>
 8008d38:	4864      	ldr	r0, [pc, #400]	; (8008ecc <HAL_DMA_Start_IT+0x2d0>)
 8008d3a:	4284      	cmp	r4, r0
 8008d3c:	d10a      	bne.n	8008d54 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d3e:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8008d42:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008d44:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8008d48:	b110      	cbz	r0, 8008d50 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d4a:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8008d4e:	6044      	str	r4, [r0, #4]
 8008d50:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008d54:	485b      	ldr	r0, [pc, #364]	; (8008ec4 <HAL_DMA_Start_IT+0x2c8>)
 8008d56:	4e5a      	ldr	r6, [pc, #360]	; (8008ec0 <HAL_DMA_Start_IT+0x2c4>)
 8008d58:	42b4      	cmp	r4, r6
 8008d5a:	bf18      	it	ne
 8008d5c:	4284      	cmpne	r4, r0
 8008d5e:	f106 0618 	add.w	r6, r6, #24
 8008d62:	bf0c      	ite	eq
 8008d64:	2001      	moveq	r0, #1
 8008d66:	2000      	movne	r0, #0
 8008d68:	42b4      	cmp	r4, r6
 8008d6a:	bf08      	it	eq
 8008d6c:	f040 0001 	orreq.w	r0, r0, #1
 8008d70:	3618      	adds	r6, #24
 8008d72:	42b4      	cmp	r4, r6
 8008d74:	bf08      	it	eq
 8008d76:	f040 0001 	orreq.w	r0, r0, #1
 8008d7a:	3618      	adds	r6, #24
 8008d7c:	42b4      	cmp	r4, r6
 8008d7e:	bf08      	it	eq
 8008d80:	f040 0001 	orreq.w	r0, r0, #1
 8008d84:	3618      	adds	r6, #24
 8008d86:	42b4      	cmp	r4, r6
 8008d88:	bf08      	it	eq
 8008d8a:	f040 0001 	orreq.w	r0, r0, #1
 8008d8e:	3618      	adds	r6, #24
 8008d90:	42b4      	cmp	r4, r6
 8008d92:	bf08      	it	eq
 8008d94:	f040 0001 	orreq.w	r0, r0, #1
 8008d98:	3618      	adds	r6, #24
 8008d9a:	42b4      	cmp	r4, r6
 8008d9c:	bf08      	it	eq
 8008d9e:	f040 0001 	orreq.w	r0, r0, #1
 8008da2:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8008da6:	42b4      	cmp	r4, r6
 8008da8:	bf08      	it	eq
 8008daa:	f040 0001 	orreq.w	r0, r0, #1
 8008dae:	3618      	adds	r6, #24
 8008db0:	42b4      	cmp	r4, r6
 8008db2:	bf08      	it	eq
 8008db4:	f040 0001 	orreq.w	r0, r0, #1
 8008db8:	3618      	adds	r6, #24
 8008dba:	42b4      	cmp	r4, r6
 8008dbc:	bf08      	it	eq
 8008dbe:	f040 0001 	orreq.w	r0, r0, #1
 8008dc2:	3618      	adds	r6, #24
 8008dc4:	42b4      	cmp	r4, r6
 8008dc6:	bf08      	it	eq
 8008dc8:	f040 0001 	orreq.w	r0, r0, #1
 8008dcc:	3618      	adds	r6, #24
 8008dce:	42b4      	cmp	r4, r6
 8008dd0:	bf08      	it	eq
 8008dd2:	f040 0001 	orreq.w	r0, r0, #1
 8008dd6:	3618      	adds	r6, #24
 8008dd8:	42b4      	cmp	r4, r6
 8008dda:	bf08      	it	eq
 8008ddc:	f040 0001 	orreq.w	r0, r0, #1
 8008de0:	3618      	adds	r6, #24
 8008de2:	42b4      	cmp	r4, r6
 8008de4:	bf08      	it	eq
 8008de6:	f040 0001 	orreq.w	r0, r0, #1
 8008dea:	b918      	cbnz	r0, 8008df4 <HAL_DMA_Start_IT+0x1f8>
 8008dec:	4838      	ldr	r0, [pc, #224]	; (8008ed0 <HAL_DMA_Start_IT+0x2d4>)
 8008dee:	4284      	cmp	r4, r0
 8008df0:	f040 817b 	bne.w	80090ea <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008df4:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8008df8:	f000 041f 	and.w	r4, r0, #31
 8008dfc:	203f      	movs	r0, #63	; 0x3f
 8008dfe:	40a0      	lsls	r0, r4
 8008e00:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008e02:	f8dc 4000 	ldr.w	r4, [ip]
 8008e06:	6820      	ldr	r0, [r4, #0]
 8008e08:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8008e0c:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008e0e:	f8dc 0000 	ldr.w	r0, [ip]
 8008e12:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e14:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8008e18:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008e1a:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e1e:	f000 815b 	beq.w	80090d8 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008e22:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008e24:	f8dc 3000 	ldr.w	r3, [ip]
 8008e28:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e2a:	f8dc 4000 	ldr.w	r4, [ip]
 8008e2e:	4b25      	ldr	r3, [pc, #148]	; (8008ec4 <HAL_DMA_Start_IT+0x2c8>)
 8008e30:	4923      	ldr	r1, [pc, #140]	; (8008ec0 <HAL_DMA_Start_IT+0x2c4>)
 8008e32:	4a28      	ldr	r2, [pc, #160]	; (8008ed4 <HAL_DMA_Start_IT+0x2d8>)
 8008e34:	428c      	cmp	r4, r1
 8008e36:	bf18      	it	ne
 8008e38:	429c      	cmpne	r4, r3
 8008e3a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008e3e:	bf0c      	ite	eq
 8008e40:	2301      	moveq	r3, #1
 8008e42:	2300      	movne	r3, #0
 8008e44:	4294      	cmp	r4, r2
 8008e46:	bf08      	it	eq
 8008e48:	f043 0301 	orreq.w	r3, r3, #1
 8008e4c:	3230      	adds	r2, #48	; 0x30
 8008e4e:	428c      	cmp	r4, r1
 8008e50:	bf08      	it	eq
 8008e52:	f043 0301 	orreq.w	r3, r3, #1
 8008e56:	3130      	adds	r1, #48	; 0x30
 8008e58:	4294      	cmp	r4, r2
 8008e5a:	bf08      	it	eq
 8008e5c:	f043 0301 	orreq.w	r3, r3, #1
 8008e60:	3230      	adds	r2, #48	; 0x30
 8008e62:	428c      	cmp	r4, r1
 8008e64:	bf08      	it	eq
 8008e66:	f043 0301 	orreq.w	r3, r3, #1
 8008e6a:	3130      	adds	r1, #48	; 0x30
 8008e6c:	4294      	cmp	r4, r2
 8008e6e:	bf08      	it	eq
 8008e70:	f043 0301 	orreq.w	r3, r3, #1
 8008e74:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8008e78:	428c      	cmp	r4, r1
 8008e7a:	bf08      	it	eq
 8008e7c:	f043 0301 	orreq.w	r3, r3, #1
 8008e80:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008e84:	4294      	cmp	r4, r2
 8008e86:	bf08      	it	eq
 8008e88:	f043 0301 	orreq.w	r3, r3, #1
 8008e8c:	3230      	adds	r2, #48	; 0x30
 8008e8e:	428c      	cmp	r4, r1
 8008e90:	bf08      	it	eq
 8008e92:	f043 0301 	orreq.w	r3, r3, #1
 8008e96:	3130      	adds	r1, #48	; 0x30
 8008e98:	4294      	cmp	r4, r2
 8008e9a:	bf08      	it	eq
 8008e9c:	f043 0301 	orreq.w	r3, r3, #1
 8008ea0:	3230      	adds	r2, #48	; 0x30
 8008ea2:	428c      	cmp	r4, r1
 8008ea4:	bf08      	it	eq
 8008ea6:	f043 0301 	orreq.w	r3, r3, #1
 8008eaa:	3130      	adds	r1, #48	; 0x30
 8008eac:	4294      	cmp	r4, r2
 8008eae:	bf08      	it	eq
 8008eb0:	f043 0301 	orreq.w	r3, r3, #1
 8008eb4:	3230      	adds	r2, #48	; 0x30
 8008eb6:	428c      	cmp	r4, r1
 8008eb8:	bf08      	it	eq
 8008eba:	f043 0301 	orreq.w	r3, r3, #1
 8008ebe:	e00b      	b.n	8008ed8 <HAL_DMA_Start_IT+0x2dc>
 8008ec0:	40020028 	.word	0x40020028
 8008ec4:	40020010 	.word	0x40020010
 8008ec8:	58025408 	.word	0x58025408
 8008ecc:	58025494 	.word	0x58025494
 8008ed0:	400204b8 	.word	0x400204b8
 8008ed4:	40020040 	.word	0x40020040
 8008ed8:	4294      	cmp	r4, r2
 8008eda:	bf08      	it	eq
 8008edc:	f043 0301 	orreq.w	r3, r3, #1
 8008ee0:	b91b      	cbnz	r3, 8008eea <HAL_DMA_Start_IT+0x2ee>
 8008ee2:	4b9b      	ldr	r3, [pc, #620]	; (8009150 <HAL_DMA_Start_IT+0x554>)
 8008ee4:	429c      	cmp	r4, r3
 8008ee6:	f040 8143 	bne.w	8009170 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	f023 031e 	bic.w	r3, r3, #30
 8008ef0:	f043 0316 	orr.w	r3, r3, #22
 8008ef4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008ef6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8008efa:	b12b      	cbz	r3, 8008f08 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008efc:	f8dc 2000 	ldr.w	r2, [ip]
 8008f00:	6813      	ldr	r3, [r2, #0]
 8008f02:	f043 0308 	orr.w	r3, r3, #8
 8008f06:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f08:	f8dc 4000 	ldr.w	r4, [ip]
 8008f0c:	4b91      	ldr	r3, [pc, #580]	; (8009154 <HAL_DMA_Start_IT+0x558>)
 8008f0e:	4992      	ldr	r1, [pc, #584]	; (8009158 <HAL_DMA_Start_IT+0x55c>)
 8008f10:	4a92      	ldr	r2, [pc, #584]	; (800915c <HAL_DMA_Start_IT+0x560>)
 8008f12:	428c      	cmp	r4, r1
 8008f14:	bf18      	it	ne
 8008f16:	429c      	cmpne	r4, r3
 8008f18:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008f1c:	bf0c      	ite	eq
 8008f1e:	2301      	moveq	r3, #1
 8008f20:	2300      	movne	r3, #0
 8008f22:	4294      	cmp	r4, r2
 8008f24:	bf08      	it	eq
 8008f26:	f043 0301 	orreq.w	r3, r3, #1
 8008f2a:	3230      	adds	r2, #48	; 0x30
 8008f2c:	428c      	cmp	r4, r1
 8008f2e:	bf08      	it	eq
 8008f30:	f043 0301 	orreq.w	r3, r3, #1
 8008f34:	3130      	adds	r1, #48	; 0x30
 8008f36:	4294      	cmp	r4, r2
 8008f38:	bf08      	it	eq
 8008f3a:	f043 0301 	orreq.w	r3, r3, #1
 8008f3e:	3230      	adds	r2, #48	; 0x30
 8008f40:	428c      	cmp	r4, r1
 8008f42:	bf08      	it	eq
 8008f44:	f043 0301 	orreq.w	r3, r3, #1
 8008f48:	3130      	adds	r1, #48	; 0x30
 8008f4a:	4294      	cmp	r4, r2
 8008f4c:	bf08      	it	eq
 8008f4e:	f043 0301 	orreq.w	r3, r3, #1
 8008f52:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8008f56:	428c      	cmp	r4, r1
 8008f58:	bf08      	it	eq
 8008f5a:	f043 0301 	orreq.w	r3, r3, #1
 8008f5e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008f62:	4294      	cmp	r4, r2
 8008f64:	bf08      	it	eq
 8008f66:	f043 0301 	orreq.w	r3, r3, #1
 8008f6a:	3230      	adds	r2, #48	; 0x30
 8008f6c:	428c      	cmp	r4, r1
 8008f6e:	bf08      	it	eq
 8008f70:	f043 0301 	orreq.w	r3, r3, #1
 8008f74:	3130      	adds	r1, #48	; 0x30
 8008f76:	4294      	cmp	r4, r2
 8008f78:	bf08      	it	eq
 8008f7a:	f043 0301 	orreq.w	r3, r3, #1
 8008f7e:	3230      	adds	r2, #48	; 0x30
 8008f80:	428c      	cmp	r4, r1
 8008f82:	bf08      	it	eq
 8008f84:	f043 0301 	orreq.w	r3, r3, #1
 8008f88:	3130      	adds	r1, #48	; 0x30
 8008f8a:	4294      	cmp	r4, r2
 8008f8c:	bf08      	it	eq
 8008f8e:	f043 0301 	orreq.w	r3, r3, #1
 8008f92:	3230      	adds	r2, #48	; 0x30
 8008f94:	428c      	cmp	r4, r1
 8008f96:	bf08      	it	eq
 8008f98:	f043 0301 	orreq.w	r3, r3, #1
 8008f9c:	3130      	adds	r1, #48	; 0x30
 8008f9e:	4294      	cmp	r4, r2
 8008fa0:	bf08      	it	eq
 8008fa2:	f043 0301 	orreq.w	r3, r3, #1
 8008fa6:	4a6e      	ldr	r2, [pc, #440]	; (8009160 <HAL_DMA_Start_IT+0x564>)
 8008fa8:	428c      	cmp	r4, r1
 8008faa:	bf08      	it	eq
 8008fac:	f043 0301 	orreq.w	r3, r3, #1
 8008fb0:	496c      	ldr	r1, [pc, #432]	; (8009164 <HAL_DMA_Start_IT+0x568>)
 8008fb2:	4294      	cmp	r4, r2
 8008fb4:	bf08      	it	eq
 8008fb6:	f043 0301 	orreq.w	r3, r3, #1
 8008fba:	3228      	adds	r2, #40	; 0x28
 8008fbc:	428c      	cmp	r4, r1
 8008fbe:	bf08      	it	eq
 8008fc0:	f043 0301 	orreq.w	r3, r3, #1
 8008fc4:	3128      	adds	r1, #40	; 0x28
 8008fc6:	4294      	cmp	r4, r2
 8008fc8:	bf08      	it	eq
 8008fca:	f043 0301 	orreq.w	r3, r3, #1
 8008fce:	3228      	adds	r2, #40	; 0x28
 8008fd0:	428c      	cmp	r4, r1
 8008fd2:	bf08      	it	eq
 8008fd4:	f043 0301 	orreq.w	r3, r3, #1
 8008fd8:	3128      	adds	r1, #40	; 0x28
 8008fda:	4294      	cmp	r4, r2
 8008fdc:	bf08      	it	eq
 8008fde:	f043 0301 	orreq.w	r3, r3, #1
 8008fe2:	3228      	adds	r2, #40	; 0x28
 8008fe4:	428c      	cmp	r4, r1
 8008fe6:	bf08      	it	eq
 8008fe8:	f043 0301 	orreq.w	r3, r3, #1
 8008fec:	4294      	cmp	r4, r2
 8008fee:	bf08      	it	eq
 8008ff0:	f043 0301 	orreq.w	r3, r3, #1
 8008ff4:	b913      	cbnz	r3, 8008ffc <HAL_DMA_Start_IT+0x400>
 8008ff6:	4b5c      	ldr	r3, [pc, #368]	; (8009168 <HAL_DMA_Start_IT+0x56c>)
 8008ff8:	429c      	cmp	r4, r3
 8008ffa:	d111      	bne.n	8009020 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008ffc:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	03d2      	lsls	r2, r2, #15
 8009004:	d503      	bpl.n	800900e <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800900c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800900e:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8009012:	b11b      	cbz	r3, 800901c <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8009020:	4b4c      	ldr	r3, [pc, #304]	; (8009154 <HAL_DMA_Start_IT+0x558>)
 8009022:	494d      	ldr	r1, [pc, #308]	; (8009158 <HAL_DMA_Start_IT+0x55c>)
 8009024:	4a4d      	ldr	r2, [pc, #308]	; (800915c <HAL_DMA_Start_IT+0x560>)
 8009026:	428c      	cmp	r4, r1
 8009028:	bf18      	it	ne
 800902a:	429c      	cmpne	r4, r3
 800902c:	484f      	ldr	r0, [pc, #316]	; (800916c <HAL_DMA_Start_IT+0x570>)
 800902e:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	4294      	cmp	r4, r2
 800903a:	bf08      	it	eq
 800903c:	f043 0301 	orreq.w	r3, r3, #1
 8009040:	3230      	adds	r2, #48	; 0x30
 8009042:	4284      	cmp	r4, r0
 8009044:	bf08      	it	eq
 8009046:	f043 0301 	orreq.w	r3, r3, #1
 800904a:	3060      	adds	r0, #96	; 0x60
 800904c:	4294      	cmp	r4, r2
 800904e:	bf08      	it	eq
 8009050:	f043 0301 	orreq.w	r3, r3, #1
 8009054:	3230      	adds	r2, #48	; 0x30
 8009056:	428c      	cmp	r4, r1
 8009058:	bf08      	it	eq
 800905a:	f043 0301 	orreq.w	r3, r3, #1
 800905e:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8009062:	4294      	cmp	r4, r2
 8009064:	bf08      	it	eq
 8009066:	f043 0301 	orreq.w	r3, r3, #1
 800906a:	f502 725c 	add.w	r2, r2, #880	; 0x370
 800906e:	4284      	cmp	r4, r0
 8009070:	bf08      	it	eq
 8009072:	f043 0301 	orreq.w	r3, r3, #1
 8009076:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 800907a:	4294      	cmp	r4, r2
 800907c:	bf08      	it	eq
 800907e:	f043 0301 	orreq.w	r3, r3, #1
 8009082:	3230      	adds	r2, #48	; 0x30
 8009084:	428c      	cmp	r4, r1
 8009086:	bf08      	it	eq
 8009088:	f043 0301 	orreq.w	r3, r3, #1
 800908c:	3160      	adds	r1, #96	; 0x60
 800908e:	4294      	cmp	r4, r2
 8009090:	bf08      	it	eq
 8009092:	f043 0301 	orreq.w	r3, r3, #1
 8009096:	3230      	adds	r2, #48	; 0x30
 8009098:	4284      	cmp	r4, r0
 800909a:	bf08      	it	eq
 800909c:	f043 0301 	orreq.w	r3, r3, #1
 80090a0:	4294      	cmp	r4, r2
 80090a2:	bf08      	it	eq
 80090a4:	f043 0301 	orreq.w	r3, r3, #1
 80090a8:	3230      	adds	r2, #48	; 0x30
 80090aa:	428c      	cmp	r4, r1
 80090ac:	bf08      	it	eq
 80090ae:	f043 0301 	orreq.w	r3, r3, #1
 80090b2:	4294      	cmp	r4, r2
 80090b4:	bf08      	it	eq
 80090b6:	f043 0301 	orreq.w	r3, r3, #1
 80090ba:	b933      	cbnz	r3, 80090ca <HAL_DMA_Start_IT+0x4ce>
 80090bc:	3060      	adds	r0, #96	; 0x60
 80090be:	1a20      	subs	r0, r4, r0
 80090c0:	fab0 f080 	clz	r0, r0
 80090c4:	0940      	lsrs	r0, r0, #5
 80090c6:	2800      	cmp	r0, #0
 80090c8:	d03d      	beq.n	8009146 <HAL_DMA_Start_IT+0x54a>
 80090ca:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090cc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80090ce:	f043 0301 	orr.w	r3, r3, #1
 80090d2:	6023      	str	r3, [r4, #0]
}
 80090d4:	bc70      	pop	{r4, r5, r6}
 80090d6:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80090d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80090da:	f8dc 3000 	ldr.w	r3, [ip]
 80090de:	60d9      	str	r1, [r3, #12]
 80090e0:	e6a3      	b.n	8008e2a <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 80090e2:	2001      	movs	r0, #1
 80090e4:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80090e6:	2002      	movs	r0, #2
}
 80090e8:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80090ea:	481d      	ldr	r0, [pc, #116]	; (8009160 <HAL_DMA_Start_IT+0x564>)
 80090ec:	4e1d      	ldr	r6, [pc, #116]	; (8009164 <HAL_DMA_Start_IT+0x568>)
 80090ee:	42b4      	cmp	r4, r6
 80090f0:	bf18      	it	ne
 80090f2:	4284      	cmpne	r4, r0
 80090f4:	f106 0614 	add.w	r6, r6, #20
 80090f8:	bf0c      	ite	eq
 80090fa:	2001      	moveq	r0, #1
 80090fc:	2000      	movne	r0, #0
 80090fe:	42b4      	cmp	r4, r6
 8009100:	bf08      	it	eq
 8009102:	f040 0001 	orreq.w	r0, r0, #1
 8009106:	3614      	adds	r6, #20
 8009108:	42b4      	cmp	r4, r6
 800910a:	bf08      	it	eq
 800910c:	f040 0001 	orreq.w	r0, r0, #1
 8009110:	3614      	adds	r6, #20
 8009112:	42b4      	cmp	r4, r6
 8009114:	bf08      	it	eq
 8009116:	f040 0001 	orreq.w	r0, r0, #1
 800911a:	3614      	adds	r6, #20
 800911c:	42b4      	cmp	r4, r6
 800911e:	bf08      	it	eq
 8009120:	f040 0001 	orreq.w	r0, r0, #1
 8009124:	3614      	adds	r6, #20
 8009126:	42b4      	cmp	r4, r6
 8009128:	bf08      	it	eq
 800912a:	f040 0001 	orreq.w	r0, r0, #1
 800912e:	b910      	cbnz	r0, 8009136 <HAL_DMA_Start_IT+0x53a>
 8009130:	480d      	ldr	r0, [pc, #52]	; (8009168 <HAL_DMA_Start_IT+0x56c>)
 8009132:	4284      	cmp	r4, r0
 8009134:	d11c      	bne.n	8009170 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009136:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800913a:	f000 041f 	and.w	r4, r0, #31
 800913e:	2001      	movs	r0, #1
 8009140:	40a0      	lsls	r0, r4
 8009142:	6068      	str	r0, [r5, #4]
 8009144:	e663      	b.n	8008e0e <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	f043 0301 	orr.w	r3, r3, #1
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	e56d      	b.n	8008c2c <HAL_DMA_Start_IT+0x30>
 8009150:	400204b8 	.word	0x400204b8
 8009154:	40020010 	.word	0x40020010
 8009158:	40020028 	.word	0x40020028
 800915c:	40020040 	.word	0x40020040
 8009160:	58025408 	.word	0x58025408
 8009164:	5802541c 	.word	0x5802541c
 8009168:	58025494 	.word	0x58025494
 800916c:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	f023 030e 	bic.w	r3, r3, #14
 8009176:	f043 030a 	orr.w	r3, r3, #10
 800917a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800917c:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8009180:	2b00      	cmp	r3, #0
 8009182:	f43f aec1 	beq.w	8008f08 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009186:	f8dc 2000 	ldr.w	r2, [ip]
 800918a:	6813      	ldr	r3, [r2, #0]
 800918c:	f043 0304 	orr.w	r3, r3, #4
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	e6b9      	b.n	8008f08 <HAL_DMA_Start_IT+0x30c>

08009194 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8009194:	2800      	cmp	r0, #0
 8009196:	d065      	beq.n	8009264 <HAL_DMA_Abort_IT+0xd0>
{
 8009198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800919c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80091a0:	4603      	mov	r3, r0
 80091a2:	2a02      	cmp	r2, #2
 80091a4:	d159      	bne.n	800925a <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091a6:	6801      	ldr	r1, [r0, #0]
 80091a8:	4883      	ldr	r0, [pc, #524]	; (80093b8 <HAL_DMA_Abort_IT+0x224>)
 80091aa:	4281      	cmp	r1, r0
 80091ac:	d04b      	beq.n	8009246 <HAL_DMA_Abort_IT+0xb2>
 80091ae:	4c83      	ldr	r4, [pc, #524]	; (80093bc <HAL_DMA_Abort_IT+0x228>)
 80091b0:	42a1      	cmp	r1, r4
 80091b2:	d048      	beq.n	8009246 <HAL_DMA_Abort_IT+0xb2>
 80091b4:	f8df a228 	ldr.w	sl, [pc, #552]	; 80093e0 <HAL_DMA_Abort_IT+0x24c>
 80091b8:	f8df b214 	ldr.w	fp, [pc, #532]	; 80093d0 <HAL_DMA_Abort_IT+0x23c>
 80091bc:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80093e4 <HAL_DMA_Abort_IT+0x250>
 80091c0:	4559      	cmp	r1, fp
 80091c2:	bf18      	it	ne
 80091c4:	4551      	cmpne	r1, sl
 80091c6:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80093e8 <HAL_DMA_Abort_IT+0x254>
 80091ca:	f8df e220 	ldr.w	lr, [pc, #544]	; 80093ec <HAL_DMA_Abort_IT+0x258>
 80091ce:	bf0c      	ite	eq
 80091d0:	2201      	moveq	r2, #1
 80091d2:	2200      	movne	r2, #0
 80091d4:	f8df c218 	ldr.w	ip, [pc, #536]	; 80093f0 <HAL_DMA_Abort_IT+0x25c>
 80091d8:	4549      	cmp	r1, r9
 80091da:	bf08      	it	eq
 80091dc:	f042 0201 	orreq.w	r2, r2, #1
 80091e0:	4d77      	ldr	r5, [pc, #476]	; (80093c0 <HAL_DMA_Abort_IT+0x22c>)
 80091e2:	4f78      	ldr	r7, [pc, #480]	; (80093c4 <HAL_DMA_Abort_IT+0x230>)
 80091e4:	4541      	cmp	r1, r8
 80091e6:	bf08      	it	eq
 80091e8:	f042 0201 	orreq.w	r2, r2, #1
 80091ec:	4e76      	ldr	r6, [pc, #472]	; (80093c8 <HAL_DMA_Abort_IT+0x234>)
 80091ee:	4571      	cmp	r1, lr
 80091f0:	bf08      	it	eq
 80091f2:	f042 0201 	orreq.w	r2, r2, #1
 80091f6:	4561      	cmp	r1, ip
 80091f8:	bf08      	it	eq
 80091fa:	f042 0201 	orreq.w	r2, r2, #1
 80091fe:	42a9      	cmp	r1, r5
 8009200:	bf08      	it	eq
 8009202:	f042 0201 	orreq.w	r2, r2, #1
 8009206:	3518      	adds	r5, #24
 8009208:	42a9      	cmp	r1, r5
 800920a:	bf08      	it	eq
 800920c:	f042 0201 	orreq.w	r2, r2, #1
 8009210:	3518      	adds	r5, #24
 8009212:	42a9      	cmp	r1, r5
 8009214:	bf08      	it	eq
 8009216:	f042 0201 	orreq.w	r2, r2, #1
 800921a:	3518      	adds	r5, #24
 800921c:	42a9      	cmp	r1, r5
 800921e:	bf08      	it	eq
 8009220:	f042 0201 	orreq.w	r2, r2, #1
 8009224:	3548      	adds	r5, #72	; 0x48
 8009226:	42b9      	cmp	r1, r7
 8009228:	bf08      	it	eq
 800922a:	f042 0201 	orreq.w	r2, r2, #1
 800922e:	42b1      	cmp	r1, r6
 8009230:	bf08      	it	eq
 8009232:	f042 0201 	orreq.w	r2, r2, #1
 8009236:	42a9      	cmp	r1, r5
 8009238:	bf08      	it	eq
 800923a:	f042 0201 	orreq.w	r2, r2, #1
 800923e:	b912      	cbnz	r2, 8009246 <HAL_DMA_Abort_IT+0xb2>
 8009240:	4a62      	ldr	r2, [pc, #392]	; (80093cc <HAL_DMA_Abort_IT+0x238>)
 8009242:	4291      	cmp	r1, r2
 8009244:	d110      	bne.n	8009268 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8009246:	2204      	movs	r2, #4
  return HAL_OK;
 8009248:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800924a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800924e:	680b      	ldr	r3, [r1, #0]
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	600b      	str	r3, [r1, #0]
}
 8009256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800925a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800925c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800925e:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8009264:	2001      	movs	r0, #1
}
 8009266:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009268:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800926a:	4c54      	ldr	r4, [pc, #336]	; (80093bc <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800926c:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009270:	4857      	ldr	r0, [pc, #348]	; (80093d0 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009272:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8009274:	6819      	ldr	r1, [r3, #0]
 8009276:	680a      	ldr	r2, [r1, #0]
 8009278:	f022 0201 	bic.w	r2, r2, #1
 800927c:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800927e:	4a4e      	ldr	r2, [pc, #312]	; (80093b8 <HAL_DMA_Abort_IT+0x224>)
 8009280:	6819      	ldr	r1, [r3, #0]
 8009282:	42a1      	cmp	r1, r4
 8009284:	bf18      	it	ne
 8009286:	4291      	cmpne	r1, r2
 8009288:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800928c:	bf0c      	ite	eq
 800928e:	2201      	moveq	r2, #1
 8009290:	2200      	movne	r2, #0
 8009292:	4281      	cmp	r1, r0
 8009294:	bf08      	it	eq
 8009296:	f042 0201 	orreq.w	r2, r2, #1
 800929a:	3030      	adds	r0, #48	; 0x30
 800929c:	42a1      	cmp	r1, r4
 800929e:	bf08      	it	eq
 80092a0:	f042 0201 	orreq.w	r2, r2, #1
 80092a4:	3430      	adds	r4, #48	; 0x30
 80092a6:	4281      	cmp	r1, r0
 80092a8:	bf08      	it	eq
 80092aa:	f042 0201 	orreq.w	r2, r2, #1
 80092ae:	3030      	adds	r0, #48	; 0x30
 80092b0:	42a1      	cmp	r1, r4
 80092b2:	bf08      	it	eq
 80092b4:	f042 0201 	orreq.w	r2, r2, #1
 80092b8:	3430      	adds	r4, #48	; 0x30
 80092ba:	4281      	cmp	r1, r0
 80092bc:	bf08      	it	eq
 80092be:	f042 0201 	orreq.w	r2, r2, #1
 80092c2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80092c6:	42a1      	cmp	r1, r4
 80092c8:	bf08      	it	eq
 80092ca:	f042 0201 	orreq.w	r2, r2, #1
 80092ce:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80092d2:	4281      	cmp	r1, r0
 80092d4:	bf08      	it	eq
 80092d6:	f042 0201 	orreq.w	r2, r2, #1
 80092da:	3030      	adds	r0, #48	; 0x30
 80092dc:	42a1      	cmp	r1, r4
 80092de:	bf08      	it	eq
 80092e0:	f042 0201 	orreq.w	r2, r2, #1
 80092e4:	3430      	adds	r4, #48	; 0x30
 80092e6:	4281      	cmp	r1, r0
 80092e8:	bf08      	it	eq
 80092ea:	f042 0201 	orreq.w	r2, r2, #1
 80092ee:	3030      	adds	r0, #48	; 0x30
 80092f0:	42a1      	cmp	r1, r4
 80092f2:	bf08      	it	eq
 80092f4:	f042 0201 	orreq.w	r2, r2, #1
 80092f8:	3430      	adds	r4, #48	; 0x30
 80092fa:	4281      	cmp	r1, r0
 80092fc:	bf08      	it	eq
 80092fe:	f042 0201 	orreq.w	r2, r2, #1
 8009302:	3030      	adds	r0, #48	; 0x30
 8009304:	42a1      	cmp	r1, r4
 8009306:	bf08      	it	eq
 8009308:	f042 0201 	orreq.w	r2, r2, #1
 800930c:	3430      	adds	r4, #48	; 0x30
 800930e:	4281      	cmp	r1, r0
 8009310:	bf08      	it	eq
 8009312:	f042 0201 	orreq.w	r2, r2, #1
 8009316:	482f      	ldr	r0, [pc, #188]	; (80093d4 <HAL_DMA_Abort_IT+0x240>)
 8009318:	42a1      	cmp	r1, r4
 800931a:	bf08      	it	eq
 800931c:	f042 0201 	orreq.w	r2, r2, #1
 8009320:	4c2d      	ldr	r4, [pc, #180]	; (80093d8 <HAL_DMA_Abort_IT+0x244>)
 8009322:	4281      	cmp	r1, r0
 8009324:	bf08      	it	eq
 8009326:	f042 0201 	orreq.w	r2, r2, #1
 800932a:	3028      	adds	r0, #40	; 0x28
 800932c:	42a1      	cmp	r1, r4
 800932e:	bf08      	it	eq
 8009330:	f042 0201 	orreq.w	r2, r2, #1
 8009334:	3428      	adds	r4, #40	; 0x28
 8009336:	4281      	cmp	r1, r0
 8009338:	bf08      	it	eq
 800933a:	f042 0201 	orreq.w	r2, r2, #1
 800933e:	3028      	adds	r0, #40	; 0x28
 8009340:	42a1      	cmp	r1, r4
 8009342:	bf08      	it	eq
 8009344:	f042 0201 	orreq.w	r2, r2, #1
 8009348:	3428      	adds	r4, #40	; 0x28
 800934a:	4281      	cmp	r1, r0
 800934c:	bf08      	it	eq
 800934e:	f042 0201 	orreq.w	r2, r2, #1
 8009352:	3028      	adds	r0, #40	; 0x28
 8009354:	42a1      	cmp	r1, r4
 8009356:	bf08      	it	eq
 8009358:	f042 0201 	orreq.w	r2, r2, #1
 800935c:	4281      	cmp	r1, r0
 800935e:	bf08      	it	eq
 8009360:	f042 0201 	orreq.w	r2, r2, #1
 8009364:	b912      	cbnz	r2, 800936c <HAL_DMA_Abort_IT+0x1d8>
 8009366:	4a1d      	ldr	r2, [pc, #116]	; (80093dc <HAL_DMA_Abort_IT+0x248>)
 8009368:	4291      	cmp	r1, r2
 800936a:	d117      	bne.n	800939c <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800936c:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800936e:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009370:	6801      	ldr	r1, [r0, #0]
 8009372:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009376:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009378:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800937c:	f001 011f 	and.w	r1, r1, #31
 8009380:	408a      	lsls	r2, r1
 8009382:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009384:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8009388:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800938a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800938c:	b132      	cbz	r2, 800939c <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800938e:	6811      	ldr	r1, [r2, #0]
 8009390:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009394:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009396:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 800939a:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 800939c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800939e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 80093a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 80093a2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80093a6:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80093aa:	b11a      	cbz	r2, 80093b4 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 80093ac:	4618      	mov	r0, r3
 80093ae:	4790      	blx	r2
  return HAL_OK;
 80093b0:	4620      	mov	r0, r4
 80093b2:	e755      	b.n	8009260 <HAL_DMA_Abort_IT+0xcc>
 80093b4:	4610      	mov	r0, r2
 80093b6:	e753      	b.n	8009260 <HAL_DMA_Abort_IT+0xcc>
 80093b8:	40020010 	.word	0x40020010
 80093bc:	40020028 	.word	0x40020028
 80093c0:	40020410 	.word	0x40020410
 80093c4:	40020470 	.word	0x40020470
 80093c8:	40020488 	.word	0x40020488
 80093cc:	400204b8 	.word	0x400204b8
 80093d0:	40020040 	.word	0x40020040
 80093d4:	58025408 	.word	0x58025408
 80093d8:	5802541c 	.word	0x5802541c
 80093dc:	58025494 	.word	0x58025494
 80093e0:	40020058 	.word	0x40020058
 80093e4:	40020070 	.word	0x40020070
 80093e8:	40020088 	.word	0x40020088
 80093ec:	400200a0 	.word	0x400200a0
 80093f0:	400200b8 	.word	0x400200b8

080093f4 <HAL_DMA_IRQHandler>:
{
 80093f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 80093f8:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80093fa:	4b9e      	ldr	r3, [pc, #632]	; (8009674 <HAL_DMA_IRQHandler+0x280>)
{
 80093fc:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093fe:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8009400:	681e      	ldr	r6, [r3, #0]
{
 8009402:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
 8009404:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009406:	6803      	ldr	r3, [r0, #0]
 8009408:	4a9b      	ldr	r2, [pc, #620]	; (8009678 <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
 800940a:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800940c:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 800940e:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8009410:	d048      	beq.n	80094a4 <HAL_DMA_IRQHandler+0xb0>
 8009412:	3218      	adds	r2, #24
 8009414:	4293      	cmp	r3, r2
 8009416:	d045      	beq.n	80094a4 <HAL_DMA_IRQHandler+0xb0>
 8009418:	3218      	adds	r2, #24
 800941a:	4f98      	ldr	r7, [pc, #608]	; (800967c <HAL_DMA_IRQHandler+0x288>)
 800941c:	42bb      	cmp	r3, r7
 800941e:	bf18      	it	ne
 8009420:	4293      	cmpne	r3, r2
 8009422:	f107 0718 	add.w	r7, r7, #24
 8009426:	bf0c      	ite	eq
 8009428:	2201      	moveq	r2, #1
 800942a:	2200      	movne	r2, #0
 800942c:	42bb      	cmp	r3, r7
 800942e:	bf08      	it	eq
 8009430:	f042 0201 	orreq.w	r2, r2, #1
 8009434:	3718      	adds	r7, #24
 8009436:	42bb      	cmp	r3, r7
 8009438:	bf08      	it	eq
 800943a:	f042 0201 	orreq.w	r2, r2, #1
 800943e:	3718      	adds	r7, #24
 8009440:	42bb      	cmp	r3, r7
 8009442:	bf08      	it	eq
 8009444:	f042 0201 	orreq.w	r2, r2, #1
 8009448:	3718      	adds	r7, #24
 800944a:	42bb      	cmp	r3, r7
 800944c:	bf08      	it	eq
 800944e:	f042 0201 	orreq.w	r2, r2, #1
 8009452:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8009456:	42bb      	cmp	r3, r7
 8009458:	bf08      	it	eq
 800945a:	f042 0201 	orreq.w	r2, r2, #1
 800945e:	3718      	adds	r7, #24
 8009460:	42bb      	cmp	r3, r7
 8009462:	bf08      	it	eq
 8009464:	f042 0201 	orreq.w	r2, r2, #1
 8009468:	3718      	adds	r7, #24
 800946a:	42bb      	cmp	r3, r7
 800946c:	bf08      	it	eq
 800946e:	f042 0201 	orreq.w	r2, r2, #1
 8009472:	3718      	adds	r7, #24
 8009474:	42bb      	cmp	r3, r7
 8009476:	bf08      	it	eq
 8009478:	f042 0201 	orreq.w	r2, r2, #1
 800947c:	3718      	adds	r7, #24
 800947e:	42bb      	cmp	r3, r7
 8009480:	bf08      	it	eq
 8009482:	f042 0201 	orreq.w	r2, r2, #1
 8009486:	3718      	adds	r7, #24
 8009488:	42bb      	cmp	r3, r7
 800948a:	bf08      	it	eq
 800948c:	f042 0201 	orreq.w	r2, r2, #1
 8009490:	3718      	adds	r7, #24
 8009492:	42bb      	cmp	r3, r7
 8009494:	bf08      	it	eq
 8009496:	f042 0201 	orreq.w	r2, r2, #1
 800949a:	b91a      	cbnz	r2, 80094a4 <HAL_DMA_IRQHandler+0xb0>
 800949c:	4a78      	ldr	r2, [pc, #480]	; (8009680 <HAL_DMA_IRQHandler+0x28c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	f040 82b3 	bne.w	8009a0a <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094a4:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
 80094a8:	2208      	movs	r2, #8
 80094aa:	f000 011f 	and.w	r1, r0, #31
 80094ae:	408a      	lsls	r2, r1
 80094b0:	4222      	tst	r2, r4
 80094b2:	f040 81a5 	bne.w	8009800 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094b6:	fa24 f201 	lsr.w	r2, r4, r1
 80094ba:	07d2      	lsls	r2, r2, #31
 80094bc:	d511      	bpl.n	80094e2 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80094be:	695a      	ldr	r2, [r3, #20]
 80094c0:	0612      	lsls	r2, r2, #24
 80094c2:	f140 8269 	bpl.w	8009998 <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80094c6:	2301      	movs	r3, #1
 80094c8:	fa03 f101 	lsl.w	r1, r3, r1
 80094cc:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80094ce:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094d2:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80094d6:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094da:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80094de:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094e2:	f04f 0c04 	mov.w	ip, #4
 80094e6:	fa0c fc01 	lsl.w	ip, ip, r1
 80094ea:	ea1c 0f04 	tst.w	ip, r4
 80094ee:	d062      	beq.n	80095b6 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80094f0:	f8d8 2000 	ldr.w	r2, [r8]
 80094f4:	4f60      	ldr	r7, [pc, #384]	; (8009678 <HAL_DMA_IRQHandler+0x284>)
 80094f6:	4b63      	ldr	r3, [pc, #396]	; (8009684 <HAL_DMA_IRQHandler+0x290>)
 80094f8:	429a      	cmp	r2, r3
 80094fa:	bf18      	it	ne
 80094fc:	42ba      	cmpne	r2, r7
 80094fe:	f103 0318 	add.w	r3, r3, #24
 8009502:	bf0c      	ite	eq
 8009504:	2701      	moveq	r7, #1
 8009506:	2700      	movne	r7, #0
 8009508:	429a      	cmp	r2, r3
 800950a:	bf08      	it	eq
 800950c:	f047 0701 	orreq.w	r7, r7, #1
 8009510:	3318      	adds	r3, #24
 8009512:	429a      	cmp	r2, r3
 8009514:	bf08      	it	eq
 8009516:	f047 0701 	orreq.w	r7, r7, #1
 800951a:	3318      	adds	r3, #24
 800951c:	429a      	cmp	r2, r3
 800951e:	bf08      	it	eq
 8009520:	f047 0701 	orreq.w	r7, r7, #1
 8009524:	3318      	adds	r3, #24
 8009526:	429a      	cmp	r2, r3
 8009528:	bf08      	it	eq
 800952a:	f047 0701 	orreq.w	r7, r7, #1
 800952e:	3318      	adds	r3, #24
 8009530:	429a      	cmp	r2, r3
 8009532:	bf08      	it	eq
 8009534:	f047 0701 	orreq.w	r7, r7, #1
 8009538:	3318      	adds	r3, #24
 800953a:	429a      	cmp	r2, r3
 800953c:	bf08      	it	eq
 800953e:	f047 0701 	orreq.w	r7, r7, #1
 8009542:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009546:	429a      	cmp	r2, r3
 8009548:	bf08      	it	eq
 800954a:	f047 0701 	orreq.w	r7, r7, #1
 800954e:	3318      	adds	r3, #24
 8009550:	429a      	cmp	r2, r3
 8009552:	bf08      	it	eq
 8009554:	f047 0701 	orreq.w	r7, r7, #1
 8009558:	3318      	adds	r3, #24
 800955a:	429a      	cmp	r2, r3
 800955c:	bf08      	it	eq
 800955e:	f047 0701 	orreq.w	r7, r7, #1
 8009562:	3318      	adds	r3, #24
 8009564:	429a      	cmp	r2, r3
 8009566:	bf08      	it	eq
 8009568:	f047 0701 	orreq.w	r7, r7, #1
 800956c:	3318      	adds	r3, #24
 800956e:	429a      	cmp	r2, r3
 8009570:	bf08      	it	eq
 8009572:	f047 0701 	orreq.w	r7, r7, #1
 8009576:	3318      	adds	r3, #24
 8009578:	429a      	cmp	r2, r3
 800957a:	bf08      	it	eq
 800957c:	f047 0701 	orreq.w	r7, r7, #1
 8009580:	3318      	adds	r3, #24
 8009582:	429a      	cmp	r2, r3
 8009584:	bf08      	it	eq
 8009586:	f047 0701 	orreq.w	r7, r7, #1
 800958a:	4613      	mov	r3, r2
 800958c:	b91f      	cbnz	r7, 8009596 <HAL_DMA_IRQHandler+0x1a2>
 800958e:	4f3c      	ldr	r7, [pc, #240]	; (8009680 <HAL_DMA_IRQHandler+0x28c>)
 8009590:	42ba      	cmp	r2, r7
 8009592:	f040 8277 	bne.w	8009a84 <HAL_DMA_IRQHandler+0x690>
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	0797      	lsls	r7, r2, #30
 800959a:	f140 8209 	bpl.w	80099b0 <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800959e:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80095a2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095a6:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80095aa:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095ae:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80095b2:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095b6:	f04f 0c10 	mov.w	ip, #16
 80095ba:	fa0c fc01 	lsl.w	ip, ip, r1
 80095be:	ea1c 0f04 	tst.w	ip, r4
 80095c2:	d079      	beq.n	80096b8 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80095c4:	f8d8 2000 	ldr.w	r2, [r8]
 80095c8:	4f2b      	ldr	r7, [pc, #172]	; (8009678 <HAL_DMA_IRQHandler+0x284>)
 80095ca:	4b2e      	ldr	r3, [pc, #184]	; (8009684 <HAL_DMA_IRQHandler+0x290>)
 80095cc:	429a      	cmp	r2, r3
 80095ce:	bf18      	it	ne
 80095d0:	42ba      	cmpne	r2, r7
 80095d2:	f103 0318 	add.w	r3, r3, #24
 80095d6:	bf0c      	ite	eq
 80095d8:	2701      	moveq	r7, #1
 80095da:	2700      	movne	r7, #0
 80095dc:	429a      	cmp	r2, r3
 80095de:	bf08      	it	eq
 80095e0:	f047 0701 	orreq.w	r7, r7, #1
 80095e4:	3318      	adds	r3, #24
 80095e6:	429a      	cmp	r2, r3
 80095e8:	bf08      	it	eq
 80095ea:	f047 0701 	orreq.w	r7, r7, #1
 80095ee:	3318      	adds	r3, #24
 80095f0:	429a      	cmp	r2, r3
 80095f2:	bf08      	it	eq
 80095f4:	f047 0701 	orreq.w	r7, r7, #1
 80095f8:	3318      	adds	r3, #24
 80095fa:	429a      	cmp	r2, r3
 80095fc:	bf08      	it	eq
 80095fe:	f047 0701 	orreq.w	r7, r7, #1
 8009602:	3318      	adds	r3, #24
 8009604:	429a      	cmp	r2, r3
 8009606:	bf08      	it	eq
 8009608:	f047 0701 	orreq.w	r7, r7, #1
 800960c:	3318      	adds	r3, #24
 800960e:	429a      	cmp	r2, r3
 8009610:	bf08      	it	eq
 8009612:	f047 0701 	orreq.w	r7, r7, #1
 8009616:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800961a:	429a      	cmp	r2, r3
 800961c:	bf08      	it	eq
 800961e:	f047 0701 	orreq.w	r7, r7, #1
 8009622:	3318      	adds	r3, #24
 8009624:	429a      	cmp	r2, r3
 8009626:	bf08      	it	eq
 8009628:	f047 0701 	orreq.w	r7, r7, #1
 800962c:	3318      	adds	r3, #24
 800962e:	429a      	cmp	r2, r3
 8009630:	bf08      	it	eq
 8009632:	f047 0701 	orreq.w	r7, r7, #1
 8009636:	3318      	adds	r3, #24
 8009638:	429a      	cmp	r2, r3
 800963a:	bf08      	it	eq
 800963c:	f047 0701 	orreq.w	r7, r7, #1
 8009640:	3318      	adds	r3, #24
 8009642:	429a      	cmp	r2, r3
 8009644:	bf08      	it	eq
 8009646:	f047 0701 	orreq.w	r7, r7, #1
 800964a:	3318      	adds	r3, #24
 800964c:	429a      	cmp	r2, r3
 800964e:	bf08      	it	eq
 8009650:	f047 0701 	orreq.w	r7, r7, #1
 8009654:	3318      	adds	r3, #24
 8009656:	429a      	cmp	r2, r3
 8009658:	bf08      	it	eq
 800965a:	f047 0701 	orreq.w	r7, r7, #1
 800965e:	4613      	mov	r3, r2
 8009660:	b91f      	cbnz	r7, 800966a <HAL_DMA_IRQHandler+0x276>
 8009662:	4f07      	ldr	r7, [pc, #28]	; (8009680 <HAL_DMA_IRQHandler+0x28c>)
 8009664:	42ba      	cmp	r2, r7
 8009666:	f040 814b 	bne.w	8009900 <HAL_DMA_IRQHandler+0x50c>
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	0710      	lsls	r0, r2, #28
 800966e:	f140 818c 	bpl.w	800998a <HAL_DMA_IRQHandler+0x596>
 8009672:	e009      	b.n	8009688 <HAL_DMA_IRQHandler+0x294>
 8009674:	20000284 	.word	0x20000284
 8009678:	40020010 	.word	0x40020010
 800967c:	40020058 	.word	0x40020058
 8009680:	400204b8 	.word	0x400204b8
 8009684:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009688:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800968c:	f8d8 3000 	ldr.w	r3, [r8]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	0352      	lsls	r2, r2, #13
 8009694:	f100 8195 	bmi.w	80099c2 <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	05d7      	lsls	r7, r2, #23
 800969c:	d403      	bmi.n	80096a6 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	f022 0208 	bic.w	r2, r2, #8
 80096a4:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80096a6:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 80096aa:	b10b      	cbz	r3, 80096b0 <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
 80096ac:	4640      	mov	r0, r8
 80096ae:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80096b0:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 80096b4:	f001 011f 	and.w	r1, r1, #31
 80096b8:	2320      	movs	r3, #32
 80096ba:	fa03 f101 	lsl.w	r1, r3, r1
 80096be:	4221      	tst	r1, r4
 80096c0:	d069      	beq.n	8009796 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80096c2:	f8d8 3000 	ldr.w	r3, [r8]
 80096c6:	4a97      	ldr	r2, [pc, #604]	; (8009924 <HAL_DMA_IRQHandler+0x530>)
 80096c8:	4c97      	ldr	r4, [pc, #604]	; (8009928 <HAL_DMA_IRQHandler+0x534>)
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	bf18      	it	ne
 80096ce:	4293      	cmpne	r3, r2
 80096d0:	f104 0418 	add.w	r4, r4, #24
 80096d4:	bf0c      	ite	eq
 80096d6:	2201      	moveq	r2, #1
 80096d8:	2200      	movne	r2, #0
 80096da:	42a3      	cmp	r3, r4
 80096dc:	bf08      	it	eq
 80096de:	f042 0201 	orreq.w	r2, r2, #1
 80096e2:	3418      	adds	r4, #24
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	bf08      	it	eq
 80096e8:	f042 0201 	orreq.w	r2, r2, #1
 80096ec:	3418      	adds	r4, #24
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	bf08      	it	eq
 80096f2:	f042 0201 	orreq.w	r2, r2, #1
 80096f6:	3418      	adds	r4, #24
 80096f8:	42a3      	cmp	r3, r4
 80096fa:	bf08      	it	eq
 80096fc:	f042 0201 	orreq.w	r2, r2, #1
 8009700:	3418      	adds	r4, #24
 8009702:	42a3      	cmp	r3, r4
 8009704:	bf08      	it	eq
 8009706:	f042 0201 	orreq.w	r2, r2, #1
 800970a:	3418      	adds	r4, #24
 800970c:	42a3      	cmp	r3, r4
 800970e:	bf08      	it	eq
 8009710:	f042 0201 	orreq.w	r2, r2, #1
 8009714:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8009718:	42a3      	cmp	r3, r4
 800971a:	bf08      	it	eq
 800971c:	f042 0201 	orreq.w	r2, r2, #1
 8009720:	3418      	adds	r4, #24
 8009722:	42a3      	cmp	r3, r4
 8009724:	bf08      	it	eq
 8009726:	f042 0201 	orreq.w	r2, r2, #1
 800972a:	3418      	adds	r4, #24
 800972c:	42a3      	cmp	r3, r4
 800972e:	bf08      	it	eq
 8009730:	f042 0201 	orreq.w	r2, r2, #1
 8009734:	3418      	adds	r4, #24
 8009736:	42a3      	cmp	r3, r4
 8009738:	bf08      	it	eq
 800973a:	f042 0201 	orreq.w	r2, r2, #1
 800973e:	3418      	adds	r4, #24
 8009740:	42a3      	cmp	r3, r4
 8009742:	bf08      	it	eq
 8009744:	f042 0201 	orreq.w	r2, r2, #1
 8009748:	3418      	adds	r4, #24
 800974a:	42a3      	cmp	r3, r4
 800974c:	bf08      	it	eq
 800974e:	f042 0201 	orreq.w	r2, r2, #1
 8009752:	3418      	adds	r4, #24
 8009754:	42a3      	cmp	r3, r4
 8009756:	bf08      	it	eq
 8009758:	f042 0201 	orreq.w	r2, r2, #1
 800975c:	b91a      	cbnz	r2, 8009766 <HAL_DMA_IRQHandler+0x372>
 800975e:	4a73      	ldr	r2, [pc, #460]	; (800992c <HAL_DMA_IRQHandler+0x538>)
 8009760:	4293      	cmp	r3, r2
 8009762:	f040 80da 	bne.w	800991a <HAL_DMA_IRQHandler+0x526>
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	06dc      	lsls	r4, r3, #27
 800976a:	d514      	bpl.n	8009796 <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800976c:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800976e:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 8009772:	2b04      	cmp	r3, #4
 8009774:	f000 80de 	beq.w	8009934 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009778:	f8d8 3000 	ldr.w	r3, [r8]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	0352      	lsls	r2, r2, #13
 8009780:	f140 8129 	bpl.w	80099d6 <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	031b      	lsls	r3, r3, #12
 8009788:	f140 8134 	bpl.w	80099f4 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
 800978c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8009790:	b10b      	cbz	r3, 8009796 <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
 8009792:	4640      	mov	r0, r8
 8009794:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009796:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 80f2 	beq.w	8009984 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80097a0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80097a4:	07df      	lsls	r7, r3, #31
 80097a6:	d521      	bpl.n	80097ec <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
 80097a8:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
 80097ac:	2104      	movs	r1, #4
 80097ae:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80097b2:	6813      	ldr	r3, [r2, #0]
 80097b4:	f023 0301 	bic.w	r3, r3, #1
 80097b8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80097ba:	4b5d      	ldr	r3, [pc, #372]	; (8009930 <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80097bc:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80097c0:	fba3 3606 	umull	r3, r6, r3, r6
 80097c4:	0ab6      	lsrs	r6, r6, #10
 80097c6:	e002      	b.n	80097ce <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80097c8:	6813      	ldr	r3, [r2, #0]
 80097ca:	07dd      	lsls	r5, r3, #31
 80097cc:	d504      	bpl.n	80097d8 <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
 80097ce:	9b01      	ldr	r3, [sp, #4]
 80097d0:	3301      	adds	r3, #1
 80097d2:	42b3      	cmp	r3, r6
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	d9f7      	bls.n	80097c8 <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80097d8:	6813      	ldr	r3, [r2, #0]
 80097da:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80097dc:	bf4c      	ite	mi
 80097de:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80097e0:	2301      	movpl	r3, #1
 80097e2:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80097e6:	2300      	movs	r3, #0
 80097e8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80097ec:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f000 80c7 	beq.w	8009984 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
 80097f6:	4640      	mov	r0, r8
}
 80097f8:	b002      	add	sp, #8
 80097fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80097fe:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	0752      	lsls	r2, r2, #29
 8009804:	d514      	bpl.n	8009830 <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	f022 0204 	bic.w	r2, r2, #4
 800980c:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800980e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8009812:	f003 021f 	and.w	r2, r3, #31
 8009816:	2308      	movs	r3, #8
 8009818:	4093      	lsls	r3, r2
 800981a:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800981c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009820:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009824:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009828:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800982c:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009830:	fa24 f301 	lsr.w	r3, r4, r1
 8009834:	07df      	lsls	r7, r3, #31
 8009836:	f57f ae54 	bpl.w	80094e2 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800983a:	f8d8 2000 	ldr.w	r2, [r8]
 800983e:	4f39      	ldr	r7, [pc, #228]	; (8009924 <HAL_DMA_IRQHandler+0x530>)
 8009840:	4b39      	ldr	r3, [pc, #228]	; (8009928 <HAL_DMA_IRQHandler+0x534>)
 8009842:	429a      	cmp	r2, r3
 8009844:	bf18      	it	ne
 8009846:	42ba      	cmpne	r2, r7
 8009848:	f103 0318 	add.w	r3, r3, #24
 800984c:	bf0c      	ite	eq
 800984e:	2701      	moveq	r7, #1
 8009850:	2700      	movne	r7, #0
 8009852:	429a      	cmp	r2, r3
 8009854:	bf08      	it	eq
 8009856:	f047 0701 	orreq.w	r7, r7, #1
 800985a:	3318      	adds	r3, #24
 800985c:	429a      	cmp	r2, r3
 800985e:	bf08      	it	eq
 8009860:	f047 0701 	orreq.w	r7, r7, #1
 8009864:	3318      	adds	r3, #24
 8009866:	429a      	cmp	r2, r3
 8009868:	bf08      	it	eq
 800986a:	f047 0701 	orreq.w	r7, r7, #1
 800986e:	3318      	adds	r3, #24
 8009870:	429a      	cmp	r2, r3
 8009872:	bf08      	it	eq
 8009874:	f047 0701 	orreq.w	r7, r7, #1
 8009878:	3318      	adds	r3, #24
 800987a:	429a      	cmp	r2, r3
 800987c:	bf08      	it	eq
 800987e:	f047 0701 	orreq.w	r7, r7, #1
 8009882:	3318      	adds	r3, #24
 8009884:	429a      	cmp	r2, r3
 8009886:	bf08      	it	eq
 8009888:	f047 0701 	orreq.w	r7, r7, #1
 800988c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009890:	429a      	cmp	r2, r3
 8009892:	bf08      	it	eq
 8009894:	f047 0701 	orreq.w	r7, r7, #1
 8009898:	3318      	adds	r3, #24
 800989a:	429a      	cmp	r2, r3
 800989c:	bf08      	it	eq
 800989e:	f047 0701 	orreq.w	r7, r7, #1
 80098a2:	3318      	adds	r3, #24
 80098a4:	429a      	cmp	r2, r3
 80098a6:	bf08      	it	eq
 80098a8:	f047 0701 	orreq.w	r7, r7, #1
 80098ac:	3318      	adds	r3, #24
 80098ae:	429a      	cmp	r2, r3
 80098b0:	bf08      	it	eq
 80098b2:	f047 0701 	orreq.w	r7, r7, #1
 80098b6:	3318      	adds	r3, #24
 80098b8:	429a      	cmp	r2, r3
 80098ba:	bf08      	it	eq
 80098bc:	f047 0701 	orreq.w	r7, r7, #1
 80098c0:	3318      	adds	r3, #24
 80098c2:	429a      	cmp	r2, r3
 80098c4:	bf08      	it	eq
 80098c6:	f047 0701 	orreq.w	r7, r7, #1
 80098ca:	3318      	adds	r3, #24
 80098cc:	429a      	cmp	r2, r3
 80098ce:	bf08      	it	eq
 80098d0:	f047 0701 	orreq.w	r7, r7, #1
 80098d4:	4613      	mov	r3, r2
 80098d6:	2f00      	cmp	r7, #0
 80098d8:	f47f adf1 	bne.w	80094be <HAL_DMA_IRQHandler+0xca>
 80098dc:	4f13      	ldr	r7, [pc, #76]	; (800992c <HAL_DMA_IRQHandler+0x538>)
 80098de:	42ba      	cmp	r2, r7
 80098e0:	f43f aded 	beq.w	80094be <HAL_DMA_IRQHandler+0xca>
 80098e4:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80098e6:	2304      	movs	r3, #4
 80098e8:	408b      	lsls	r3, r1
 80098ea:	4223      	tst	r3, r4
 80098ec:	f040 80ca 	bne.w	8009a84 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80098f0:	f04f 0c10 	mov.w	ip, #16
 80098f4:	fa0c fc01 	lsl.w	ip, ip, r1
 80098f8:	ea14 0f0c 	tst.w	r4, ip
 80098fc:	f43f aedc 	beq.w	80096b8 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009900:	6813      	ldr	r3, [r2, #0]
 8009902:	0759      	lsls	r1, r3, #29
 8009904:	f53f aec0 	bmi.w	8009688 <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009908:	f000 0e1f 	and.w	lr, r0, #31
 800990c:	2120      	movs	r1, #32
 800990e:	fa01 f10e 	lsl.w	r1, r1, lr
 8009912:	420c      	tst	r4, r1
 8009914:	f43f af3f 	beq.w	8009796 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009918:	4613      	mov	r3, r2
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	0798      	lsls	r0, r3, #30
 800991e:	f57f af3a 	bpl.w	8009796 <HAL_DMA_IRQHandler+0x3a2>
 8009922:	e723      	b.n	800976c <HAL_DMA_IRQHandler+0x378>
 8009924:	40020010 	.word	0x40020010
 8009928:	40020028 	.word	0x40020028
 800992c:	400204b8 	.word	0x400204b8
 8009930:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009934:	f8d8 2000 	ldr.w	r2, [r8]
 8009938:	6813      	ldr	r3, [r2, #0]
 800993a:	f023 0316 	bic.w	r3, r3, #22
 800993e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009940:	f8d8 2000 	ldr.w	r2, [r8]
 8009944:	6953      	ldr	r3, [r2, #20]
 8009946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800994a:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800994c:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8009950:	2b00      	cmp	r3, #0
 8009952:	d055      	beq.n	8009a00 <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009954:	f8d8 2000 	ldr.w	r2, [r8]
 8009958:	6813      	ldr	r3, [r2, #0]
 800995a:	f023 0308 	bic.w	r3, r3, #8
 800995e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009960:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
 8009964:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8009966:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009968:	f002 021f 	and.w	r2, r2, #31
 800996c:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 800996e:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009970:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8009972:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8009976:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800997a:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 800997e:	2b00      	cmp	r3, #0
 8009980:	f47f af39 	bne.w	80097f6 <HAL_DMA_IRQHandler+0x402>
}
 8009984:	b002      	add	sp, #8
 8009986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800998a:	2220      	movs	r2, #32
 800998c:	fa02 f101 	lsl.w	r1, r2, r1
 8009990:	420c      	tst	r4, r1
 8009992:	f47f aee8 	bne.w	8009766 <HAL_DMA_IRQHandler+0x372>
 8009996:	e6fe      	b.n	8009796 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009998:	f04f 0c04 	mov.w	ip, #4
 800999c:	fa0c fc01 	lsl.w	ip, ip, r1
 80099a0:	ea14 0f0c 	tst.w	r4, ip
 80099a4:	f43f ae07 	beq.w	80095b6 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	0797      	lsls	r7, r2, #30
 80099ac:	f53f adf7 	bmi.w	800959e <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80099b0:	f04f 0c10 	mov.w	ip, #16
 80099b4:	fa0c fc01 	lsl.w	ip, ip, r1
 80099b8:	ea14 0f0c 	tst.w	r4, ip
 80099bc:	f47f ae55 	bne.w	800966a <HAL_DMA_IRQHandler+0x276>
 80099c0:	e67a      	b.n	80096b8 <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	031b      	lsls	r3, r3, #12
 80099c6:	f57f ae6e 	bpl.w	80096a6 <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80099ca:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f47f ae6c 	bne.w	80096ac <HAL_DMA_IRQHandler+0x2b8>
 80099d4:	e66c      	b.n	80096b0 <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80099dc:	f47f aed6 	bne.w	800978c <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80099e0:	6819      	ldr	r1, [r3, #0]
 80099e2:	f021 0110 	bic.w	r1, r1, #16
 80099e6:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80099e8:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 80099ea:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80099ee:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 80099f2:	e6cb      	b.n	800978c <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
 80099f4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f47f aeca 	bne.w	8009792 <HAL_DMA_IRQHandler+0x39e>
 80099fe:	e6ca      	b.n	8009796 <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009a00:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1a5      	bne.n	8009954 <HAL_DMA_IRQHandler+0x560>
 8009a08:	e7aa      	b.n	8009960 <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009a0a:	4aa0      	ldr	r2, [pc, #640]	; (8009c8c <HAL_DMA_IRQHandler+0x898>)
 8009a0c:	4ca0      	ldr	r4, [pc, #640]	; (8009c90 <HAL_DMA_IRQHandler+0x89c>)
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	bf18      	it	ne
 8009a12:	4293      	cmpne	r3, r2
 8009a14:	f104 0414 	add.w	r4, r4, #20
 8009a18:	bf0c      	ite	eq
 8009a1a:	2201      	moveq	r2, #1
 8009a1c:	2200      	movne	r2, #0
 8009a1e:	42a3      	cmp	r3, r4
 8009a20:	bf08      	it	eq
 8009a22:	f042 0201 	orreq.w	r2, r2, #1
 8009a26:	3414      	adds	r4, #20
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	bf08      	it	eq
 8009a2c:	f042 0201 	orreq.w	r2, r2, #1
 8009a30:	3414      	adds	r4, #20
 8009a32:	42a3      	cmp	r3, r4
 8009a34:	bf08      	it	eq
 8009a36:	f042 0201 	orreq.w	r2, r2, #1
 8009a3a:	3414      	adds	r4, #20
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	bf08      	it	eq
 8009a40:	f042 0201 	orreq.w	r2, r2, #1
 8009a44:	3414      	adds	r4, #20
 8009a46:	42a3      	cmp	r3, r4
 8009a48:	bf08      	it	eq
 8009a4a:	f042 0201 	orreq.w	r2, r2, #1
 8009a4e:	b912      	cbnz	r2, 8009a56 <HAL_DMA_IRQHandler+0x662>
 8009a50:	4a90      	ldr	r2, [pc, #576]	; (8009c94 <HAL_DMA_IRQHandler+0x8a0>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d196      	bne.n	8009984 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009a56:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
 8009a5a:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009a5c:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009a5e:	f004 041f 	and.w	r4, r4, #31
 8009a62:	40a6      	lsls	r6, r4
 8009a64:	420e      	tst	r6, r1
 8009a66:	d019      	beq.n	8009a9c <HAL_DMA_IRQHandler+0x6a8>
 8009a68:	0750      	lsls	r0, r2, #29
 8009a6a:	d517      	bpl.n	8009a9c <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a6c:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009a6e:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009a70:	d549      	bpl.n	8009b06 <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009a72:	03d2      	lsls	r2, r2, #15
 8009a74:	f100 809f 	bmi.w	8009bb6 <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009a78:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f47f aeba 	bne.w	80097f6 <HAL_DMA_IRQHandler+0x402>
 8009a82:	e77f      	b.n	8009984 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009a84:	f000 011f 	and.w	r1, r0, #31
 8009a88:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009a8c:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009a8e:	fa0c fc01 	lsl.w	ip, ip, r1
 8009a92:	ea14 0f0c 	tst.w	r4, ip
 8009a96:	f47f af33 	bne.w	8009900 <HAL_DMA_IRQHandler+0x50c>
 8009a9a:	e60d      	b.n	80096b8 <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009a9c:	2602      	movs	r6, #2
 8009a9e:	40a6      	lsls	r6, r4
 8009aa0:	420e      	tst	r6, r1
 8009aa2:	d00e      	beq.n	8009ac2 <HAL_DMA_IRQHandler+0x6ce>
 8009aa4:	0797      	lsls	r7, r2, #30
 8009aa6:	d50c      	bpl.n	8009ac2 <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009aa8:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009aaa:	0415      	lsls	r5, r2, #16
 8009aac:	f140 8089 	bpl.w	8009bc2 <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009ab0:	03d4      	lsls	r4, r2, #15
 8009ab2:	f100 80e4 	bmi.w	8009c7e <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
 8009ab6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f47f ae9b 	bne.w	80097f6 <HAL_DMA_IRQHandler+0x402>
 8009ac0:	e760      	b.n	8009984 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009ac2:	2608      	movs	r6, #8
 8009ac4:	fa06 f404 	lsl.w	r4, r6, r4
 8009ac8:	420c      	tst	r4, r1
 8009aca:	f43f af5b 	beq.w	8009984 <HAL_DMA_IRQHandler+0x590>
 8009ace:	0711      	lsls	r1, r2, #28
 8009ad0:	f57f af58 	bpl.w	8009984 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ad4:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009ad6:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ad8:	f021 010e 	bic.w	r1, r1, #14
 8009adc:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8009ade:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009ae0:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8009ae4:	f003 031f 	and.w	r3, r3, #31
 8009ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aec:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 8009aee:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009af2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8009af6:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8009afa:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f47f ae79 	bne.w	80097f6 <HAL_DMA_IRQHandler+0x402>
 8009b04:	e73e      	b.n	8009984 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009b06:	0693      	lsls	r3, r2, #26
 8009b08:	d455      	bmi.n	8009bb6 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009b0a:	f8d8 2000 	ldr.w	r2, [r8]
 8009b0e:	4b62      	ldr	r3, [pc, #392]	; (8009c98 <HAL_DMA_IRQHandler+0x8a4>)
 8009b10:	4c62      	ldr	r4, [pc, #392]	; (8009c9c <HAL_DMA_IRQHandler+0x8a8>)
 8009b12:	4963      	ldr	r1, [pc, #396]	; (8009ca0 <HAL_DMA_IRQHandler+0x8ac>)
 8009b14:	42a2      	cmp	r2, r4
 8009b16:	bf18      	it	ne
 8009b18:	429a      	cmpne	r2, r3
 8009b1a:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8009b1e:	bf0c      	ite	eq
 8009b20:	2301      	moveq	r3, #1
 8009b22:	2300      	movne	r3, #0
 8009b24:	428a      	cmp	r2, r1
 8009b26:	bf08      	it	eq
 8009b28:	f043 0301 	orreq.w	r3, r3, #1
 8009b2c:	3130      	adds	r1, #48	; 0x30
 8009b2e:	42a2      	cmp	r2, r4
 8009b30:	bf08      	it	eq
 8009b32:	f043 0301 	orreq.w	r3, r3, #1
 8009b36:	3430      	adds	r4, #48	; 0x30
 8009b38:	428a      	cmp	r2, r1
 8009b3a:	bf08      	it	eq
 8009b3c:	f043 0301 	orreq.w	r3, r3, #1
 8009b40:	3130      	adds	r1, #48	; 0x30
 8009b42:	42a2      	cmp	r2, r4
 8009b44:	bf08      	it	eq
 8009b46:	f043 0301 	orreq.w	r3, r3, #1
 8009b4a:	3430      	adds	r4, #48	; 0x30
 8009b4c:	428a      	cmp	r2, r1
 8009b4e:	bf08      	it	eq
 8009b50:	f043 0301 	orreq.w	r3, r3, #1
 8009b54:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009b58:	42a2      	cmp	r2, r4
 8009b5a:	bf08      	it	eq
 8009b5c:	f043 0301 	orreq.w	r3, r3, #1
 8009b60:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8009b64:	428a      	cmp	r2, r1
 8009b66:	bf08      	it	eq
 8009b68:	f043 0301 	orreq.w	r3, r3, #1
 8009b6c:	3130      	adds	r1, #48	; 0x30
 8009b6e:	42a2      	cmp	r2, r4
 8009b70:	bf08      	it	eq
 8009b72:	f043 0301 	orreq.w	r3, r3, #1
 8009b76:	3430      	adds	r4, #48	; 0x30
 8009b78:	428a      	cmp	r2, r1
 8009b7a:	bf08      	it	eq
 8009b7c:	f043 0301 	orreq.w	r3, r3, #1
 8009b80:	3130      	adds	r1, #48	; 0x30
 8009b82:	42a2      	cmp	r2, r4
 8009b84:	bf08      	it	eq
 8009b86:	f043 0301 	orreq.w	r3, r3, #1
 8009b8a:	3430      	adds	r4, #48	; 0x30
 8009b8c:	428a      	cmp	r2, r1
 8009b8e:	bf08      	it	eq
 8009b90:	f043 0301 	orreq.w	r3, r3, #1
 8009b94:	3130      	adds	r1, #48	; 0x30
 8009b96:	42a2      	cmp	r2, r4
 8009b98:	bf08      	it	eq
 8009b9a:	f043 0301 	orreq.w	r3, r3, #1
 8009b9e:	428a      	cmp	r2, r1
 8009ba0:	bf08      	it	eq
 8009ba2:	f043 0301 	orreq.w	r3, r3, #1
 8009ba6:	b913      	cbnz	r3, 8009bae <HAL_DMA_IRQHandler+0x7ba>
 8009ba8:	4b3e      	ldr	r3, [pc, #248]	; (8009ca4 <HAL_DMA_IRQHandler+0x8b0>)
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d17c      	bne.n	8009ca8 <HAL_DMA_IRQHandler+0x8b4>
 8009bae:	6813      	ldr	r3, [r2, #0]
 8009bb0:	f023 0308 	bic.w	r3, r3, #8
 8009bb4:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8009bb6:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f47f ae1b 	bne.w	80097f6 <HAL_DMA_IRQHandler+0x402>
 8009bc0:	e6e0      	b.n	8009984 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009bc2:	0690      	lsls	r0, r2, #26
 8009bc4:	d45b      	bmi.n	8009c7e <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009bc6:	f8d8 2000 	ldr.w	r2, [r8]
 8009bca:	4b33      	ldr	r3, [pc, #204]	; (8009c98 <HAL_DMA_IRQHandler+0x8a4>)
 8009bcc:	4c33      	ldr	r4, [pc, #204]	; (8009c9c <HAL_DMA_IRQHandler+0x8a8>)
 8009bce:	4934      	ldr	r1, [pc, #208]	; (8009ca0 <HAL_DMA_IRQHandler+0x8ac>)
 8009bd0:	42a2      	cmp	r2, r4
 8009bd2:	bf18      	it	ne
 8009bd4:	429a      	cmpne	r2, r3
 8009bd6:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8009bda:	bf0c      	ite	eq
 8009bdc:	2301      	moveq	r3, #1
 8009bde:	2300      	movne	r3, #0
 8009be0:	428a      	cmp	r2, r1
 8009be2:	bf08      	it	eq
 8009be4:	f043 0301 	orreq.w	r3, r3, #1
 8009be8:	3130      	adds	r1, #48	; 0x30
 8009bea:	42a2      	cmp	r2, r4
 8009bec:	bf08      	it	eq
 8009bee:	f043 0301 	orreq.w	r3, r3, #1
 8009bf2:	3430      	adds	r4, #48	; 0x30
 8009bf4:	428a      	cmp	r2, r1
 8009bf6:	bf08      	it	eq
 8009bf8:	f043 0301 	orreq.w	r3, r3, #1
 8009bfc:	3130      	adds	r1, #48	; 0x30
 8009bfe:	42a2      	cmp	r2, r4
 8009c00:	bf08      	it	eq
 8009c02:	f043 0301 	orreq.w	r3, r3, #1
 8009c06:	3430      	adds	r4, #48	; 0x30
 8009c08:	428a      	cmp	r2, r1
 8009c0a:	bf08      	it	eq
 8009c0c:	f043 0301 	orreq.w	r3, r3, #1
 8009c10:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009c14:	42a2      	cmp	r2, r4
 8009c16:	bf08      	it	eq
 8009c18:	f043 0301 	orreq.w	r3, r3, #1
 8009c1c:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8009c20:	428a      	cmp	r2, r1
 8009c22:	bf08      	it	eq
 8009c24:	f043 0301 	orreq.w	r3, r3, #1
 8009c28:	3130      	adds	r1, #48	; 0x30
 8009c2a:	42a2      	cmp	r2, r4
 8009c2c:	bf08      	it	eq
 8009c2e:	f043 0301 	orreq.w	r3, r3, #1
 8009c32:	3430      	adds	r4, #48	; 0x30
 8009c34:	428a      	cmp	r2, r1
 8009c36:	bf08      	it	eq
 8009c38:	f043 0301 	orreq.w	r3, r3, #1
 8009c3c:	3130      	adds	r1, #48	; 0x30
 8009c3e:	42a2      	cmp	r2, r4
 8009c40:	bf08      	it	eq
 8009c42:	f043 0301 	orreq.w	r3, r3, #1
 8009c46:	3430      	adds	r4, #48	; 0x30
 8009c48:	428a      	cmp	r2, r1
 8009c4a:	bf08      	it	eq
 8009c4c:	f043 0301 	orreq.w	r3, r3, #1
 8009c50:	3130      	adds	r1, #48	; 0x30
 8009c52:	42a2      	cmp	r2, r4
 8009c54:	bf08      	it	eq
 8009c56:	f043 0301 	orreq.w	r3, r3, #1
 8009c5a:	428a      	cmp	r2, r1
 8009c5c:	bf08      	it	eq
 8009c5e:	f043 0301 	orreq.w	r3, r3, #1
 8009c62:	b913      	cbnz	r3, 8009c6a <HAL_DMA_IRQHandler+0x876>
 8009c64:	4b0f      	ldr	r3, [pc, #60]	; (8009ca4 <HAL_DMA_IRQHandler+0x8b0>)
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d123      	bne.n	8009cb2 <HAL_DMA_IRQHandler+0x8be>
 8009c6a:	6813      	ldr	r3, [r2, #0]
 8009c6c:	f023 0314 	bic.w	r3, r3, #20
 8009c70:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009c72:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8009c74:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8009c76:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8009c7a:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8009c7e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f47f adb7 	bne.w	80097f6 <HAL_DMA_IRQHandler+0x402>
 8009c88:	e67c      	b.n	8009984 <HAL_DMA_IRQHandler+0x590>
 8009c8a:	bf00      	nop
 8009c8c:	58025408 	.word	0x58025408
 8009c90:	5802541c 	.word	0x5802541c
 8009c94:	58025494 	.word	0x58025494
 8009c98:	40020010 	.word	0x40020010
 8009c9c:	40020028 	.word	0x40020028
 8009ca0:	40020040 	.word	0x40020040
 8009ca4:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ca8:	6813      	ldr	r3, [r2, #0]
 8009caa:	f023 0304 	bic.w	r3, r3, #4
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	e781      	b.n	8009bb6 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009cb2:	6813      	ldr	r3, [r2, #0]
 8009cb4:	f023 030a 	bic.w	r3, r3, #10
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	e7da      	b.n	8009c72 <HAL_DMA_IRQHandler+0x87e>

08009cbc <HAL_DMA_GetState>:
  return hdma->State;
 8009cbc:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop

08009cc4 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8009cc4:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009cc8:	680b      	ldr	r3, [r1, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 811a 	beq.w	8009f04 <HAL_GPIO_Init+0x23c>
 8009cd0:	f04f 0c00 	mov.w	ip, #0
{
 8009cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8009cd8:	4662      	mov	r2, ip
{
 8009cda:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cdc:	4d94      	ldr	r5, [pc, #592]	; (8009f30 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009cde:	4f95      	ldr	r7, [pc, #596]	; (8009f34 <HAL_GPIO_Init+0x26c>)
 8009ce0:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8009f4c <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009ce4:	f04f 0901 	mov.w	r9, #1
 8009ce8:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8009cec:	ea19 0e03 	ands.w	lr, r9, r3
 8009cf0:	f000 80c2 	beq.w	8009e78 <HAL_GPIO_Init+0x1b0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009cf4:	684b      	ldr	r3, [r1, #4]
 8009cf6:	f003 0303 	and.w	r3, r3, #3
 8009cfa:	1e5c      	subs	r4, r3, #1
 8009cfc:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009cfe:	f04f 0403 	mov.w	r4, #3
 8009d02:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d06:	f240 80c1 	bls.w	8009e8c <HAL_GPIO_Init+0x1c4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009d0a:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d0c:	2b03      	cmp	r3, #3
 8009d0e:	d026      	beq.n	8009d5e <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8009d10:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009d12:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d16:	688b      	ldr	r3, [r1, #8]
 8009d18:	fa03 f30c 	lsl.w	r3, r3, ip
 8009d1c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8009d20:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d22:	684b      	ldr	r3, [r1, #4]
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d118      	bne.n	8009d5e <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009d2c:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8009d30:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009d34:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8009d38:	230f      	movs	r3, #15
 8009d3a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8009d3e:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
 8009d42:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009d46:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009d4a:	690b      	ldr	r3, [r1, #16]
 8009d4c:	fa03 f30b 	lsl.w	r3, r3, fp
 8009d50:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8009d54:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009d58:	684b      	ldr	r3, [r1, #4]
 8009d5a:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8009d5e:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009d62:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009d66:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009d6a:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8009d6c:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009d6e:	684b      	ldr	r3, [r1, #4]
 8009d70:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8009d74:	d07f      	beq.n	8009e76 <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d76:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8009d7a:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009d7e:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009d82:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d84:	f043 0302 	orr.w	r3, r3, #2
 8009d88:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009d8c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d90:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8009d94:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009d98:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009da4:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8009da8:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009dac:	fa03 f309 	lsl.w	r3, r3, r9
 8009db0:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009db4:	d02b      	beq.n	8009e0e <HAL_GPIO_Init+0x146>
 8009db6:	4540      	cmp	r0, r8
 8009db8:	f000 8088 	beq.w	8009ecc <HAL_GPIO_Init+0x204>
 8009dbc:	4e5e      	ldr	r6, [pc, #376]	; (8009f38 <HAL_GPIO_Init+0x270>)
 8009dbe:	42b0      	cmp	r0, r6
 8009dc0:	f000 808b 	beq.w	8009eda <HAL_GPIO_Init+0x212>
 8009dc4:	4e5d      	ldr	r6, [pc, #372]	; (8009f3c <HAL_GPIO_Init+0x274>)
 8009dc6:	42b0      	cmp	r0, r6
 8009dc8:	d079      	beq.n	8009ebe <HAL_GPIO_Init+0x1f6>
 8009dca:	4e5d      	ldr	r6, [pc, #372]	; (8009f40 <HAL_GPIO_Init+0x278>)
 8009dcc:	42b0      	cmp	r0, r6
 8009dce:	f000 8092 	beq.w	8009ef6 <HAL_GPIO_Init+0x22e>
 8009dd2:	4e5c      	ldr	r6, [pc, #368]	; (8009f44 <HAL_GPIO_Init+0x27c>)
 8009dd4:	42b0      	cmp	r0, r6
 8009dd6:	f000 8096 	beq.w	8009f06 <HAL_GPIO_Init+0x23e>
 8009dda:	4e5b      	ldr	r6, [pc, #364]	; (8009f48 <HAL_GPIO_Init+0x280>)
 8009ddc:	42b0      	cmp	r0, r6
 8009dde:	f000 8083 	beq.w	8009ee8 <HAL_GPIO_Init+0x220>
 8009de2:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8009f50 <HAL_GPIO_Init+0x288>
 8009de6:	4550      	cmp	r0, sl
 8009de8:	f000 8094 	beq.w	8009f14 <HAL_GPIO_Init+0x24c>
 8009dec:	f8df a164 	ldr.w	sl, [pc, #356]	; 8009f54 <HAL_GPIO_Init+0x28c>
 8009df0:	4550      	cmp	r0, sl
 8009df2:	f000 8096 	beq.w	8009f22 <HAL_GPIO_Init+0x25a>
 8009df6:	f8df a160 	ldr.w	sl, [pc, #352]	; 8009f58 <HAL_GPIO_Init+0x290>
 8009dfa:	4550      	cmp	r0, sl
 8009dfc:	bf0c      	ite	eq
 8009dfe:	f04f 0a09 	moveq.w	sl, #9
 8009e02:	f04f 0a0a 	movne.w	sl, #10
 8009e06:	fa0a f909 	lsl.w	r9, sl, r9
 8009e0a:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009e0e:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009e14:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8009e16:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 8009e1a:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8009e1c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009e20:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8009e22:	bf54      	ite	pl
 8009e24:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8009e26:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 8009e2a:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009e2e:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8009e30:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8009e34:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009e38:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 8009e3a:	bf54      	ite	pl
 8009e3c:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8009e3e:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 8009e42:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009e46:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8009e48:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009e4c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009e50:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8009e52:	bf54      	ite	pl
 8009e54:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8009e56:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 8009e5a:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009e5e:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8009e60:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009e64:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8009e66:	bf54      	ite	pl
 8009e68:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 8009e6a:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009e6e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8009e72:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e76:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 8009e78:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e7a:	f10c 0c02 	add.w	ip, ip, #2
 8009e7e:	fa33 f402 	lsrs.w	r4, r3, r2
 8009e82:	f47f af2f 	bne.w	8009ce4 <HAL_GPIO_Init+0x1c>
  }
}
 8009e86:	b003      	add	sp, #12
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8009e8c:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009e8e:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009e92:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009e94:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009e96:	fa03 f30c 	lsl.w	r3, r3, ip
 8009e9a:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8009e9e:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ea0:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8009ea2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009ea6:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009eaa:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009eae:	4093      	lsls	r3, r2
 8009eb0:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 8009eb4:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009eb6:	684b      	ldr	r3, [r1, #4]
 8009eb8:	f003 0303 	and.w	r3, r3, #3
 8009ebc:	e726      	b.n	8009d0c <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009ebe:	f04f 0a03 	mov.w	sl, #3
 8009ec2:	fa0a f909 	lsl.w	r9, sl, r9
 8009ec6:	ea43 0309 	orr.w	r3, r3, r9
 8009eca:	e7a0      	b.n	8009e0e <HAL_GPIO_Init+0x146>
 8009ecc:	f04f 0a01 	mov.w	sl, #1
 8009ed0:	fa0a f909 	lsl.w	r9, sl, r9
 8009ed4:	ea43 0309 	orr.w	r3, r3, r9
 8009ed8:	e799      	b.n	8009e0e <HAL_GPIO_Init+0x146>
 8009eda:	f04f 0a02 	mov.w	sl, #2
 8009ede:	fa0a f909 	lsl.w	r9, sl, r9
 8009ee2:	ea43 0309 	orr.w	r3, r3, r9
 8009ee6:	e792      	b.n	8009e0e <HAL_GPIO_Init+0x146>
 8009ee8:	f04f 0a06 	mov.w	sl, #6
 8009eec:	fa0a f909 	lsl.w	r9, sl, r9
 8009ef0:	ea43 0309 	orr.w	r3, r3, r9
 8009ef4:	e78b      	b.n	8009e0e <HAL_GPIO_Init+0x146>
 8009ef6:	f04f 0a04 	mov.w	sl, #4
 8009efa:	fa0a f909 	lsl.w	r9, sl, r9
 8009efe:	ea43 0309 	orr.w	r3, r3, r9
 8009f02:	e784      	b.n	8009e0e <HAL_GPIO_Init+0x146>
 8009f04:	4770      	bx	lr
 8009f06:	f04f 0a05 	mov.w	sl, #5
 8009f0a:	fa0a f909 	lsl.w	r9, sl, r9
 8009f0e:	ea43 0309 	orr.w	r3, r3, r9
 8009f12:	e77c      	b.n	8009e0e <HAL_GPIO_Init+0x146>
 8009f14:	f04f 0a07 	mov.w	sl, #7
 8009f18:	fa0a f909 	lsl.w	r9, sl, r9
 8009f1c:	ea43 0309 	orr.w	r3, r3, r9
 8009f20:	e775      	b.n	8009e0e <HAL_GPIO_Init+0x146>
 8009f22:	f04f 0a08 	mov.w	sl, #8
 8009f26:	fa0a f909 	lsl.w	r9, sl, r9
 8009f2a:	ea43 0309 	orr.w	r3, r3, r9
 8009f2e:	e76e      	b.n	8009e0e <HAL_GPIO_Init+0x146>
 8009f30:	58024400 	.word	0x58024400
 8009f34:	58020000 	.word	0x58020000
 8009f38:	58020800 	.word	0x58020800
 8009f3c:	58020c00 	.word	0x58020c00
 8009f40:	58021000 	.word	0x58021000
 8009f44:	58021400 	.word	0x58021400
 8009f48:	58021800 	.word	0x58021800
 8009f4c:	58020400 	.word	0x58020400
 8009f50:	58021c00 	.word	0x58021c00
 8009f54:	58022000 	.word	0x58022000
 8009f58:	58022400 	.word	0x58022400

08009f5c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009f5c:	6903      	ldr	r3, [r0, #16]
 8009f5e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009f60:	bf14      	ite	ne
 8009f62:	2001      	movne	r0, #1
 8009f64:	2000      	moveq	r0, #0
 8009f66:	4770      	bx	lr

08009f68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009f68:	b902      	cbnz	r2, 8009f6c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009f6a:	0409      	lsls	r1, r1, #16
 8009f6c:	6181      	str	r1, [r0, #24]
  }
}
 8009f6e:	4770      	bx	lr

08009f70 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009f70:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009f72:	ea01 0203 	and.w	r2, r1, r3
 8009f76:	ea21 0103 	bic.w	r1, r1, r3
 8009f7a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f7e:	6181      	str	r1, [r0, #24]
}
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop

08009f84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f88:	6803      	ldr	r3, [r0, #0]
{
 8009f8a:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009f8c:	699a      	ldr	r2, [r3, #24]
 8009f8e:	0694      	lsls	r4, r2, #26
 8009f90:	d46d      	bmi.n	800a06e <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 8009f92:	4605      	mov	r5, r0
 8009f94:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f96:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8009f9a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009f9c:	f014 0410 	ands.w	r4, r4, #16
 8009fa0:	d068      	beq.n	800a074 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 8009fa2:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fa4:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 8009fa8:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009faa:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fac:	46b2      	mov	sl, r6
 8009fae:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009fb0:	699a      	ldr	r2, [r3, #24]
 8009fb2:	d161      	bne.n	800a078 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 8009fb4:	0690      	lsls	r0, r2, #26
 8009fb6:	f100 8085 	bmi.w	800a0c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 8009fba:	f1ba 0f00 	cmp.w	sl, #0
 8009fbe:	d105      	bne.n	8009fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 8009fc0:	699c      	ldr	r4, [r3, #24]
 8009fc2:	06a1      	lsls	r1, r4, #26
 8009fc4:	d5fc      	bpl.n	8009fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009fca:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 8009fcc:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 8009fd0:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8009fd2:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009fd4:	05d0      	lsls	r0, r2, #23
 8009fd6:	d535      	bpl.n	800a044 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009fd8:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009fdc:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8009fde:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009fe2:	61d9      	str	r1, [r3, #28]
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009fe4:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009fe6:	d505      	bpl.n	8009ff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8009fec:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009ff0:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ff2:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009ff4:	0597      	lsls	r7, r2, #22
 8009ff6:	d505      	bpl.n	800a004 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8009ffc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a000:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	699a      	ldr	r2, [r3, #24]
 800a006:	0790      	lsls	r0, r2, #30
 800a008:	d502      	bpl.n	800a010 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 800a00a:	2200      	movs	r2, #0
 800a00c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a00e:	682b      	ldr	r3, [r5, #0]
 800a010:	699a      	ldr	r2, [r3, #24]
 800a012:	07d1      	lsls	r1, r2, #31
 800a014:	d404      	bmi.n	800a020 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a016:	699a      	ldr	r2, [r3, #24]
 800a018:	f042 0201 	orr.w	r2, r2, #1
 800a01c:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a01e:	682b      	ldr	r3, [r5, #0]
 800a020:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a022:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800a024:	4835      	ldr	r0, [pc, #212]	; (800a0fc <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 800a026:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 800a028:	4002      	ands	r2, r0
      return HAL_ERROR;
 800a02a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800a02c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800a02e:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a030:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800a034:	431c      	orrs	r4, r3
 800a036:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a038:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a03c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 800a040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a044:	0550      	lsls	r0, r2, #21
 800a046:	d4cf      	bmi.n	8009fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a048:	0596      	lsls	r6, r2, #22
 800a04a:	d4d5      	bmi.n	8009ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 800a04c:	2900      	cmp	r1, #0
 800a04e:	d1d9      	bne.n	800a004 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a050:	f7fe f9ac 	bl	80083ac <HAL_GetTick>
 800a054:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a058:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a05a:	42b8      	cmp	r0, r7
 800a05c:	d800      	bhi.n	800a060 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 800a05e:	b91f      	cbnz	r7, 800a068 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a060:	699a      	ldr	r2, [r3, #24]
 800a062:	f012 0220 	ands.w	r2, r2, #32
 800a066:	d032      	beq.n	800a0ce <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a068:	699a      	ldr	r2, [r3, #24]
 800a06a:	0692      	lsls	r2, r2, #26
 800a06c:	d595      	bpl.n	8009f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800a06e:	2000      	movs	r0, #0
}
 800a070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800a074:	4621      	mov	r1, r4
 800a076:	e7ac      	b.n	8009fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a078:	0692      	lsls	r2, r2, #26
 800a07a:	d423      	bmi.n	800a0c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 800a07c:	f1ba 0f00 	cmp.w	sl, #0
 800a080:	d1a4      	bne.n	8009fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a082:	f7fe f993 	bl	80083ac <HAL_GetTick>
 800a086:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a088:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a08a:	4287      	cmp	r7, r0
 800a08c:	d301      	bcc.n	800a092 <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 800a08e:	2f00      	cmp	r7, #0
 800a090:	d18d      	bne.n	8009fae <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a092:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800a094:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a098:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800a09a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a09c:	0409      	lsls	r1, r1, #16
 800a09e:	d503      	bpl.n	800a0a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 800a0a0:	0441      	lsls	r1, r0, #17
 800a0a2:	d401      	bmi.n	800a0a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800a0a4:	2a20      	cmp	r2, #32
 800a0a6:	d11f      	bne.n	800a0e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	0690      	lsls	r0, r2, #26
 800a0ac:	f53f af7f 	bmi.w	8009fae <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a0b0:	f7fe f97c 	bl	80083ac <HAL_GetTick>
 800a0b4:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a0b6:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a0b8:	2819      	cmp	r0, #25
 800a0ba:	d9f5      	bls.n	800a0a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a0bc:	2620      	movs	r6, #32
              status = HAL_ERROR;
 800a0be:	f04f 0a01 	mov.w	sl, #1
 800a0c2:	e774      	b.n	8009fae <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 800a0c4:	f1ba 0f00 	cmp.w	sl, #0
 800a0c8:	f43f af7d 	beq.w	8009fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 800a0cc:	e77e      	b.n	8009fcc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a0d0:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a0d8:	430b      	orrs	r3, r1
 800a0da:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a0dc:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0e0:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800a0e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a0e8:	685a      	ldr	r2, [r3, #4]
 800a0ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0ee:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800a0f0:	f7fe f95c 	bl	80083ac <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0f4:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	e7d6      	b.n	800a0a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800a0fa:	bf00      	nop
 800a0fc:	fe00e800 	.word	0xfe00e800

0800a100 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800a100:	2800      	cmp	r0, #0
 800a102:	d056      	beq.n	800a1b2 <HAL_I2C_Init+0xb2>
{
 800a104:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a106:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a10a:	4604      	mov	r4, r0
 800a10c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a110:	2b00      	cmp	r3, #0
 800a112:	d049      	beq.n	800a1a8 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 800a114:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a116:	2324      	movs	r3, #36	; 0x24
 800a118:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800a11c:	6813      	ldr	r3, [r2, #0]
 800a11e:	f023 0301 	bic.w	r3, r3, #1
 800a122:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a124:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a128:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800a12c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a12e:	6822      	ldr	r2, [r4, #0]
 800a130:	6893      	ldr	r3, [r2, #8]
 800a132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a136:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a138:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a13a:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a13c:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a13e:	68a3      	ldr	r3, [r4, #8]
 800a140:	bf0c      	ite	eq
 800a142:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a146:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800a14a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a14c:	68e3      	ldr	r3, [r4, #12]
 800a14e:	2b02      	cmp	r3, #2
 800a150:	d103      	bne.n	800a15a <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a158:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a15a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800a15c:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a160:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <HAL_I2C_Init+0xb8>)
 800a162:	6851      	ldr	r1, [r2, #4]
 800a164:	430b      	orrs	r3, r1
 800a166:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a168:	6822      	ldr	r2, [r4, #0]
 800a16a:	68d3      	ldr	r3, [r2, #12]
 800a16c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a170:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a172:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a174:	6821      	ldr	r1, [r4, #0]
 800a176:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a17a:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a17c:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a17e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a182:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a184:	6821      	ldr	r1, [r4, #0]
 800a186:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800a18a:	4303      	orrs	r3, r0
  return HAL_OK;
 800a18c:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a18e:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a190:	6821      	ldr	r1, [r4, #0]
 800a192:	680b      	ldr	r3, [r1, #0]
 800a194:	f043 0301 	orr.w	r3, r3, #1
 800a198:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a19a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a19c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1a0:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1a2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800a1a6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800a1a8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800a1ac:	f7fa fd24 	bl	8004bf8 <HAL_I2C_MspInit>
 800a1b0:	e7b0      	b.n	800a114 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800a1b2:	2001      	movs	r0, #1
}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	02008000 	.word	0x02008000

0800a1bc <HAL_I2C_Master_Transmit>:
{
 800a1bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1c2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a1c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d12c      	bne.n	800a226 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 800a1cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a1d0:	4683      	mov	fp, r0
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d027      	beq.n	800a226 <HAL_I2C_Master_Transmit+0x6a>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	468a      	mov	sl, r1
 800a1da:	4616      	mov	r6, r2
 800a1dc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a1e0:	f7fe f8e4 	bl	80083ac <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1e4:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 800a1e8:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1ea:	699a      	ldr	r2, [r3, #24]
 800a1ec:	0417      	lsls	r7, r2, #16
 800a1ee:	d51d      	bpl.n	800a22c <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1f0:	f7fe f8dc 	bl	80083ac <HAL_GetTick>
 800a1f4:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a1f8:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1fc:	2819      	cmp	r0, #25
 800a1fe:	d9f4      	bls.n	800a1ea <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a200:	699a      	ldr	r2, [r3, #24]
 800a202:	0410      	lsls	r0, r2, #16
 800a204:	d5f1      	bpl.n	800a1ea <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a206:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a20a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a20c:	2200      	movs	r2, #0
      return HAL_ERROR;
 800a20e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a210:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800a212:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a216:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a21a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a21e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 800a222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800a226:	2002      	movs	r0, #2
}
 800a228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a22c:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a22e:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 800a230:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a234:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a238:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 800a23a:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a23e:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a242:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 800a246:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a24a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 800a24e:	b292      	uxth	r2, r2
 800a250:	2aff      	cmp	r2, #255	; 0xff
 800a252:	d87e      	bhi.n	800a352 <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800a254:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a258:	48ad      	ldr	r0, [pc, #692]	; (800a510 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 800a25a:	b292      	uxth	r2, r2
 800a25c:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a260:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800a262:	6859      	ldr	r1, [r3, #4]
 800a264:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a266:	f3ca 0109 	ubfx	r1, sl, #0, #10
 800a26a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a26e:	4301      	orrs	r1, r0
 800a270:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800a274:	49a7      	ldr	r1, [pc, #668]	; (800a514 <HAL_I2C_Master_Transmit+0x358>)
 800a276:	4311      	orrs	r1, r2
 800a278:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a27a:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 800a27e:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800a282:	b29b      	uxth	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 8107 	beq.w	800a498 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a28a:	f8db 3000 	ldr.w	r3, [fp]
 800a28e:	699c      	ldr	r4, [r3, #24]
 800a290:	f014 0402 	ands.w	r4, r4, #2
 800a294:	f040 80c5 	bne.w	800a422 <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 800a298:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a29a:	f012 0210 	ands.w	r2, r2, #16
 800a29e:	f000 808d 	beq.w	800a3bc <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2a2:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 800a2a4:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 800a2a6:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2a8:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a2aa:	f8db 3000 	ldr.w	r3, [fp]
 800a2ae:	1c69      	adds	r1, r5, #1
 800a2b0:	699a      	ldr	r2, [r3, #24]
 800a2b2:	f040 8085 	bne.w	800a3c0 <HAL_I2C_Master_Transmit+0x204>
 800a2b6:	0690      	lsls	r0, r2, #26
 800a2b8:	f100 8106 	bmi.w	800a4c8 <HAL_I2C_Master_Transmit+0x30c>
 800a2bc:	b937      	cbnz	r7, 800a2cc <HAL_I2C_Master_Transmit+0x110>
 800a2be:	699a      	ldr	r2, [r3, #24]
 800a2c0:	0691      	lsls	r1, r2, #26
 800a2c2:	d5fc      	bpl.n	800a2be <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2c4:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800a2c8:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 800a2cc:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 800a2d0:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800a2d2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a2d4:	05ce      	lsls	r6, r1, #23
 800a2d6:	d54b      	bpl.n	800a370 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a2d8:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a2dc:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800a2de:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a2e2:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a2e4:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a2e8:	d506      	bpl.n	800a2f8 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a2ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800a2ee:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a2f2:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a2f4:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a2f8:	0589      	lsls	r1, r1, #22
 800a2fa:	d506      	bpl.n	800a30a <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a2fc:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800a300:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a304:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a306:	f8db 3000 	ldr.w	r3, [fp]
 800a30a:	6999      	ldr	r1, [r3, #24]
 800a30c:	078e      	lsls	r6, r1, #30
 800a30e:	d503      	bpl.n	800a318 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 800a310:	2100      	movs	r1, #0
 800a312:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a314:	f8db 3000 	ldr.w	r3, [fp]
 800a318:	6999      	ldr	r1, [r3, #24]
 800a31a:	07cd      	lsls	r5, r1, #31
 800a31c:	d405      	bmi.n	800a32a <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a31e:	6999      	ldr	r1, [r3, #24]
 800a320:	f041 0101 	orr.w	r1, r1, #1
 800a324:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800a326:	f8db 3000 	ldr.w	r3, [fp]
 800a32a:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a32c:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 800a32e:	487a      	ldr	r0, [pc, #488]	; (800a518 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 800a330:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800a332:	4001      	ands	r1, r0
        return HAL_ERROR;
 800a334:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800a336:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800a338:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800a33c:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800a340:	431a      	orrs	r2, r3
 800a342:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a346:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a34a:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 800a34e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a352:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800a354:	496e      	ldr	r1, [pc, #440]	; (800a510 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a356:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a35e:	f3ca 0109 	ubfx	r1, sl, #0, #10
 800a362:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a366:	4311      	orrs	r1, r2
 800a368:	4a6c      	ldr	r2, [pc, #432]	; (800a51c <HAL_I2C_Master_Transmit+0x360>)
 800a36a:	430a      	orrs	r2, r1
 800a36c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a36e:	e784      	b.n	800a27a <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a370:	054c      	lsls	r4, r1, #21
 800a372:	d4ba      	bmi.n	800a2ea <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a374:	058f      	lsls	r7, r1, #22
 800a376:	d4c1      	bmi.n	800a2fc <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 800a378:	2800      	cmp	r0, #0
 800a37a:	d1c6      	bne.n	800a30a <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 800a37c:	1c6a      	adds	r2, r5, #1
 800a37e:	d086      	beq.n	800a28e <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a380:	f7fe f814 	bl	80083ac <HAL_GetTick>
 800a384:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a388:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a38c:	4285      	cmp	r5, r0
 800a38e:	d302      	bcc.n	800a396 <HAL_I2C_Master_Transmit+0x1da>
 800a390:	2d00      	cmp	r5, #0
 800a392:	f47f af7c 	bne.w	800a28e <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a396:	699a      	ldr	r2, [r3, #24]
 800a398:	f012 0202 	ands.w	r2, r2, #2
 800a39c:	f47f af77 	bne.w	800a28e <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3a0:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a3a4:	2120      	movs	r1, #32
        return HAL_ERROR;
 800a3a6:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800a3a8:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3ac:	430b      	orrs	r3, r1
 800a3ae:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a3b2:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3b6:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 800a3ba:	e735      	b.n	800a228 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 800a3bc:	4610      	mov	r0, r2
 800a3be:	e788      	b.n	800a2d2 <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a3c0:	0692      	lsls	r2, r2, #26
 800a3c2:	f100 8081 	bmi.w	800a4c8 <HAL_I2C_Master_Transmit+0x30c>
 800a3c6:	2f00      	cmp	r7, #0
 800a3c8:	d180      	bne.n	800a2cc <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a3ca:	f7fd ffef 	bl	80083ac <HAL_GetTick>
 800a3ce:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a3d0:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a3d4:	4285      	cmp	r5, r0
 800a3d6:	d302      	bcc.n	800a3de <HAL_I2C_Master_Transmit+0x222>
 800a3d8:	2d00      	cmp	r5, #0
 800a3da:	f47f af68 	bne.w	800a2ae <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a3de:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800a3e0:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a3e4:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800a3e6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a3e8:	0409      	lsls	r1, r1, #16
 800a3ea:	d50c      	bpl.n	800a406 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 800a3ec:	0441      	lsls	r1, r0, #17
 800a3ee:	d40a      	bmi.n	800a406 <HAL_I2C_Master_Transmit+0x24a>
 800a3f0:	2a20      	cmp	r2, #32
 800a3f2:	d008      	beq.n	800a406 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3fa:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800a3fc:	f7fd ffd6 	bl	80083ac <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a400:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 800a404:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	0690      	lsls	r0, r2, #26
 800a40a:	f53f af50 	bmi.w	800a2ae <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a40e:	f7fd ffcd 	bl	80083ac <HAL_GetTick>
 800a412:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a414:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a418:	2819      	cmp	r0, #25
 800a41a:	d9f4      	bls.n	800a406 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a41c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800a41e:	2701      	movs	r7, #1
 800a420:	e745      	b.n	800a2ae <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a422:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800a426:	7812      	ldrb	r2, [r2, #0]
 800a428:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a42a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 800a42e:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 800a432:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800a434:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 800a438:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800a43a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800a43c:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800a43e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800a440:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a444:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800a448:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a44c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800a44e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a452:	2a00      	cmp	r2, #0
 800a454:	f43f af13 	beq.w	800a27e <HAL_I2C_Master_Transmit+0xc2>
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f47f af10 	bne.w	800a27e <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a45e:	f8db 2000 	ldr.w	r2, [fp]
 800a462:	1c6c      	adds	r4, r5, #1
 800a464:	d134      	bne.n	800a4d0 <HAL_I2C_Master_Transmit+0x314>
 800a466:	6993      	ldr	r3, [r2, #24]
 800a468:	0618      	lsls	r0, r3, #24
 800a46a:	d5fc      	bpl.n	800a466 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a46c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800a470:	b29b      	uxth	r3, r3
 800a472:	2bff      	cmp	r3, #255	; 0xff
 800a474:	d958      	bls.n	800a528 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a476:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800a478:	4929      	ldr	r1, [pc, #164]	; (800a520 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a47a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a47e:	6853      	ldr	r3, [r2, #4]
 800a480:	400b      	ands	r3, r1
 800a482:	4928      	ldr	r1, [pc, #160]	; (800a524 <HAL_I2C_Master_Transmit+0x368>)
 800a484:	ea4a 0303 	orr.w	r3, sl, r3
 800a488:	4319      	orrs	r1, r3
 800a48a:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 800a48c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800a490:	b29b      	uxth	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	f47f aef9 	bne.w	800a28a <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a498:	4642      	mov	r2, r8
 800a49a:	4629      	mov	r1, r5
 800a49c:	4658      	mov	r0, fp
 800a49e:	f7ff fd71 	bl	8009f84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d151      	bne.n	800a54a <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4a6:	f8db 3000 	ldr.w	r3, [fp]
 800a4aa:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 800a4ac:	4c1a      	ldr	r4, [pc, #104]	; (800a518 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4ae:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a4b0:	f8db 1000 	ldr.w	r1, [fp]
 800a4b4:	684b      	ldr	r3, [r1, #4]
 800a4b6:	4023      	ands	r3, r4
 800a4b8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a4ba:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a4be:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a4c2:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 800a4c6:	e6af      	b.n	800a228 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 800a4c8:	2f00      	cmp	r7, #0
 800a4ca:	f43f aefb 	beq.w	800a2c4 <HAL_I2C_Master_Transmit+0x108>
 800a4ce:	e6fd      	b.n	800a2cc <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4d0:	6993      	ldr	r3, [r2, #24]
 800a4d2:	0619      	lsls	r1, r3, #24
 800a4d4:	d4ca      	bmi.n	800a46c <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d6:	f7fd ff69 	bl	80083ac <HAL_GetTick>
 800a4da:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a4de:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4e2:	4285      	cmp	r5, r0
 800a4e4:	d301      	bcc.n	800a4ea <HAL_I2C_Master_Transmit+0x32e>
 800a4e6:	2d00      	cmp	r5, #0
 800a4e8:	d1bb      	bne.n	800a462 <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a4ea:	6993      	ldr	r3, [r2, #24]
 800a4ec:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800a4f0:	d1b7      	bne.n	800a462 <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4f2:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a4f6:	2120      	movs	r1, #32
          return HAL_ERROR;
 800a4f8:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800a4fa:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4fe:	430a      	orrs	r2, r1
 800a500:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a504:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a508:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 800a50c:	e68c      	b.n	800a228 <HAL_I2C_Master_Transmit+0x6c>
 800a50e:	bf00      	nop
 800a510:	fc009800 	.word	0xfc009800
 800a514:	02002000 	.word	0x02002000
 800a518:	fe00e800 	.word	0xfe00e800
 800a51c:	01ff2000 	.word	0x01ff2000
 800a520:	fc009c00 	.word	0xfc009c00
 800a524:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 800a528:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800a52c:	4808      	ldr	r0, [pc, #32]	; (800a550 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 800a52e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a530:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800a532:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800a536:	6853      	ldr	r3, [r2, #4]
 800a538:	4003      	ands	r3, r0
 800a53a:	ea4a 0303 	orr.w	r3, sl, r3
 800a53e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800a542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a546:	6053      	str	r3, [r2, #4]
}
 800a548:	e699      	b.n	800a27e <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 800a54a:	2001      	movs	r0, #1
 800a54c:	e66c      	b.n	800a228 <HAL_I2C_Master_Transmit+0x6c>
 800a54e:	bf00      	nop
 800a550:	fc009c00 	.word	0xfc009c00

0800a554 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a554:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800a556:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a558:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a55a:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800a55c:	b103      	cbz	r3, 800a560 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800a55e:	4718      	bx	r3
}
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop

0800a564 <HAL_I2C_SlaveTxCpltCallback>:
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop

0800a568 <HAL_I2C_SlaveRxCpltCallback>:
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop

0800a56c <I2C_ITSlaveSeqCplt>:
{
 800a56c:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a56e:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a570:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a572:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a574:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a578:	0451      	lsls	r1, r2, #17
 800a57a:	d50c      	bpl.n	800a596 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a582:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a584:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a588:	2b29      	cmp	r3, #41	; 0x29
 800a58a:	d00e      	beq.n	800a5aa <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a58c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a590:	2b2a      	cmp	r3, #42	; 0x2a
 800a592:	d024      	beq.n	800a5de <I2C_ITSlaveSeqCplt+0x72>
}
 800a594:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a596:	0412      	lsls	r2, r2, #16
 800a598:	d5f4      	bpl.n	800a584 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5a0:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a5a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a5a6:	2b29      	cmp	r3, #41	; 0x29
 800a5a8:	d1f0      	bne.n	800a58c <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a5aa:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a5ac:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a5ae:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 800a5b0:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a5b4:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a5b8:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a5ba:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a5be:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a5c0:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800a5c4:	2a28      	cmp	r2, #40	; 0x28
 800a5c6:	bf0c      	ite	eq
 800a5c8:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 800a5cc:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800a5d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a5d8:	f7ff ffc4 	bl	800a564 <HAL_I2C_SlaveTxCpltCallback>
}
 800a5dc:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a5de:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a5e0:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a5e2:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 800a5e4:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a5e8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a5ec:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a5ee:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a5f2:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a5f4:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800a5f8:	2a28      	cmp	r2, #40	; 0x28
 800a5fa:	bf0c      	ite	eq
 800a5fc:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 800a600:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a604:	4013      	ands	r3, r2
 800a606:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800a608:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a60c:	f7ff ffac 	bl	800a568 <HAL_I2C_SlaveRxCpltCallback>
}
 800a610:	bd08      	pop	{r3, pc}
 800a612:	bf00      	nop

0800a614 <HAL_I2C_AddrCallback>:
}
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop

0800a618 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800a618:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800a61a:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800a61c:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a61e:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800a620:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a622:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a624:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a626:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 800a628:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a62c:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a630:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a632:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a636:	d10f      	bne.n	800a658 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a638:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a63c:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a640:	f013 0306 	ands.w	r3, r3, #6
 800a644:	d106      	bne.n	800a654 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 800a646:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800a648:	3501      	adds	r5, #1
 800a64a:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800a64c:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800a64e:	2d02      	cmp	r5, #2
 800a650:	d00c      	beq.n	800a66c <I2C_ITAddrCplt.part.0+0x54>
}
 800a652:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a654:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a658:	6823      	ldr	r3, [r4, #0]
 800a65a:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800a65e:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800a660:	2300      	movs	r3, #0
 800a662:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a666:	f7ff ffd5 	bl	800a614 <HAL_I2C_AddrCallback>
}
 800a66a:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a66c:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 800a66e:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a670:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 800a672:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a676:	f7ff ffcd 	bl	800a614 <HAL_I2C_AddrCallback>
}
 800a67a:	bd70      	pop	{r4, r5, r6, pc}

0800a67c <HAL_I2C_ListenCpltCallback>:
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop

0800a680 <HAL_I2C_ErrorCallback>:
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop

0800a684 <HAL_I2C_AbortCpltCallback>:
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop

0800a688 <I2C_DMAAbort>:
{
 800a688:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a68a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 800a68c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800a68e:	b10b      	cbz	r3, 800a694 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a690:	2200      	movs	r2, #0
 800a692:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 800a694:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a696:	b10b      	cbz	r3, 800a69c <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a698:	2200      	movs	r2, #0
 800a69a:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a69c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800a6a0:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800a6a2:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a6a6:	d005      	beq.n	800a6b4 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a6a8:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a6aa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a6ae:	f7ff ffe7 	bl	800a680 <HAL_I2C_ErrorCallback>
}
 800a6b2:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800a6b4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800a6b6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800a6ba:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a6be:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800a6c0:	f7ff ffe0 	bl	800a684 <HAL_I2C_AbortCpltCallback>
}
 800a6c4:	bd08      	pop	{r3, pc}
 800a6c6:	bf00      	nop

0800a6c8 <I2C_ITError>:
{
 800a6c8:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a6ca:	4a5d      	ldr	r2, [pc, #372]	; (800a840 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a6cc:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a6ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a6d2:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a6d4:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a6d8:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a6da:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800a6dc:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800a6de:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a6e0:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 800a6e2:	ea41 0102 	orr.w	r1, r1, r2
 800a6e6:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a6e8:	d874      	bhi.n	800a7d4 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6ea:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6ee:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6f2:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a6f6:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6f8:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a6fc:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a6fe:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a700:	bf14      	ite	ne
 800a702:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 800a706:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a70a:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a70c:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a710:	bf18      	it	ne
 800a712:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a716:	4013      	ands	r3, r2
 800a718:	6003      	str	r3, [r0, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a71a:	4b4a      	ldr	r3, [pc, #296]	; (800a844 <I2C_ITError+0x17c>)
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a71c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a720:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a722:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800a724:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a726:	b118      	cbz	r0, 800a730 <I2C_ITError+0x68>
 800a728:	2b11      	cmp	r3, #17
 800a72a:	d01e      	beq.n	800a76a <I2C_ITError+0xa2>
 800a72c:	2b21      	cmp	r3, #33	; 0x21
 800a72e:	d01c      	beq.n	800a76a <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a730:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a732:	b118      	cbz	r0, 800a73c <I2C_ITError+0x74>
 800a734:	2b12      	cmp	r3, #18
 800a736:	d030      	beq.n	800a79a <I2C_ITError+0xd2>
 800a738:	2b22      	cmp	r3, #34	; 0x22
 800a73a:	d02e      	beq.n	800a79a <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a73c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a740:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800a742:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a746:	d006      	beq.n	800a756 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 800a748:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800a74a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800a74c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a750:	f7ff ff96 	bl	800a680 <HAL_I2C_ErrorCallback>
}
 800a754:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800a756:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 800a758:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800a75a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800a75e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a762:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800a764:	f7ff ff8e 	bl	800a684 <HAL_I2C_AbortCpltCallback>
}
 800a768:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	0451      	lsls	r1, r2, #17
 800a770:	d460      	bmi.n	800a834 <I2C_ITError+0x16c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a772:	f7ff faa3 	bl	8009cbc <HAL_DMA_GetState>
 800a776:	2801      	cmp	r0, #1
 800a778:	d0e0      	beq.n	800a73c <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a77a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800a77c:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a77e:	4932      	ldr	r1, [pc, #200]	; (800a848 <I2C_ITError+0x180>)
 800a780:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800a782:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a786:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a788:	f7fe fd04 	bl	8009194 <HAL_DMA_Abort_IT>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d0e1      	beq.n	800a754 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a790:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 800a792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a796:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a798:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	0412      	lsls	r2, r2, #16
 800a7a0:	d504      	bpl.n	800a7ac <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7a8:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a7aa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a7ac:	f7ff fa86 	bl	8009cbc <HAL_DMA_GetState>
 800a7b0:	2801      	cmp	r0, #1
 800a7b2:	d0c3      	beq.n	800a73c <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a7b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 800a7b6:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a7b8:	4923      	ldr	r1, [pc, #140]	; (800a848 <I2C_ITError+0x180>)
 800a7ba:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800a7bc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a7c0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a7c2:	f7fe fce7 	bl	8009194 <HAL_DMA_Abort_IT>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0c4      	beq.n	800a754 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a7ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800a7cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a7d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a7d2:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a7d4:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a7d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a7da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a7de:	6813      	ldr	r3, [r2, #0]
 800a7e0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800a7e4:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a7e6:	6803      	ldr	r3, [r0, #0]
 800a7e8:	699a      	ldr	r2, [r3, #24]
 800a7ea:	0792      	lsls	r2, r2, #30
 800a7ec:	d501      	bpl.n	800a7f2 <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 800a7ee:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7f0:	6803      	ldr	r3, [r0, #0]
 800a7f2:	699a      	ldr	r2, [r3, #24]
 800a7f4:	07d6      	lsls	r6, r2, #31
 800a7f6:	d403      	bmi.n	800a800 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a7f8:	699a      	ldr	r2, [r3, #24]
 800a7fa:	f042 0201 	orr.w	r2, r2, #1
 800a7fe:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a800:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a804:	2b60      	cmp	r3, #96	; 0x60
 800a806:	d012      	beq.n	800a82e <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 800a808:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a80a:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 800a80c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a810:	699a      	ldr	r2, [r3, #24]
 800a812:	0695      	lsls	r5, r2, #26
 800a814:	d50b      	bpl.n	800a82e <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a816:	699a      	ldr	r2, [r3, #24]
 800a818:	06d0      	lsls	r0, r2, #27
 800a81a:	d506      	bpl.n	800a82a <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a81c:	2210      	movs	r2, #16
 800a81e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a820:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a822:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a824:	f042 0204 	orr.w	r2, r2, #4
 800a828:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a82a:	2220      	movs	r2, #32
 800a82c:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	6363      	str	r3, [r4, #52]	; 0x34
 800a832:	e776      	b.n	800a722 <I2C_ITError+0x5a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a83a:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a83c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a83e:	e798      	b.n	800a772 <I2C_ITError+0xaa>
 800a840:	ffff0000 	.word	0xffff0000
 800a844:	0800a9f5 	.word	0x0800a9f5
 800a848:	0800a689 	.word	0x0800a689

0800a84c <I2C_ITSlaveCplt>:
{
 800a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a84e:	6802      	ldr	r2, [r0, #0]
{
 800a850:	460d      	mov	r5, r1
 800a852:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a854:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a856:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a85a:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a85c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a860:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a862:	2b21      	cmp	r3, #33	; 0x21
 800a864:	d16f      	bne.n	800a946 <I2C_ITSlaveCplt+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a866:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a868:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a86c:	6802      	ldr	r2, [r0, #0]
 800a86e:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 800a872:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a874:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a876:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 800a878:	485c      	ldr	r0, [pc, #368]	; (800a9ec <I2C_ITSlaveCplt+0x1a0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a87a:	6853      	ldr	r3, [r2, #4]
 800a87c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a880:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800a882:	6822      	ldr	r2, [r4, #0]
 800a884:	6853      	ldr	r3, [r2, #4]
 800a886:	4003      	ands	r3, r0
 800a888:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	699a      	ldr	r2, [r3, #24]
 800a88e:	0797      	lsls	r7, r2, #30
 800a890:	d502      	bpl.n	800a898 <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 800a892:	2200      	movs	r2, #0
 800a894:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	699a      	ldr	r2, [r3, #24]
 800a89a:	07d6      	lsls	r6, r2, #31
 800a89c:	d403      	bmi.n	800a8a6 <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a89e:	699a      	ldr	r2, [r3, #24]
 800a8a0:	f042 0201 	orr.w	r2, r2, #1
 800a8a4:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a8a6:	0448      	lsls	r0, r1, #17
 800a8a8:	d558      	bpl.n	800a95c <I2C_ITSlaveCplt+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a8aa:	6822      	ldr	r2, [r4, #0]
 800a8ac:	6813      	ldr	r3, [r2, #0]
 800a8ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8b2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800a8b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a8b6:	b11b      	cbz	r3, 800a8c0 <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	6853      	ldr	r3, [r2, #4]
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a8c0:	076a      	lsls	r2, r5, #29
 800a8c2:	d50a      	bpl.n	800a8da <I2C_ITSlaveCplt+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8c4:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a8c6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a8ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a8ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800a8d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800a8d8:	bb72      	cbnz	r2, 800a938 <I2C_ITSlaveCplt+0xec>
  if (hi2c->XferCount != 0U)
 800a8da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	b11b      	cbz	r3, 800a8e8 <I2C_ITSlaveCplt+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a8e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a8e2:	f043 0304 	orr.w	r3, r3, #4
 800a8e6:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8e8:	2700      	movs	r7, #0
 800a8ea:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a8ee:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800a8f0:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a8f2:	2e00      	cmp	r6, #0
 800a8f4:	d13d      	bne.n	800a972 <I2C_ITSlaveCplt+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a8f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a8f8:	4d3d      	ldr	r5, [pc, #244]	; (800a9f0 <I2C_ITSlaveCplt+0x1a4>)
 800a8fa:	42ab      	cmp	r3, r5
 800a8fc:	d10e      	bne.n	800a91c <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a8fe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a902:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800a904:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a908:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 800a90a:	f04f 0320 	mov.w	r3, #32
 800a90e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a912:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a914:	d066      	beq.n	800a9e4 <I2C_ITSlaveCplt+0x198>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a916:	f7ff fe25 	bl	800a564 <HAL_I2C_SlaveTxCpltCallback>
}
 800a91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 800a91c:	4620      	mov	r0, r4
 800a91e:	f7ff fe25 	bl	800a56c <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800a922:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a924:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 800a926:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800a928:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a92c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800a930:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800a932:	f7ff fea3 	bl	800a67c <HAL_I2C_ListenCpltCallback>
}
 800a936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
 800a938:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a93a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800a93c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800a93e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a940:	b29b      	uxth	r3, r3
 800a942:	8563      	strh	r3, [r4, #42]	; 0x2a
 800a944:	e7c9      	b.n	800a8da <I2C_ITSlaveCplt+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a946:	2b22      	cmp	r3, #34	; 0x22
 800a948:	d195      	bne.n	800a876 <I2C_ITSlaveCplt+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a94a:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a94c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a950:	6802      	ldr	r2, [r0, #0]
 800a952:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 800a956:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a958:	6323      	str	r3, [r4, #48]	; 0x30
 800a95a:	e78c      	b.n	800a876 <I2C_ITSlaveCplt+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a95c:	0409      	lsls	r1, r1, #16
 800a95e:	d5af      	bpl.n	800a8c0 <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a960:	6822      	ldr	r2, [r4, #0]
 800a962:	6813      	ldr	r3, [r2, #0]
 800a964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a968:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800a96a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1a3      	bne.n	800a8b8 <I2C_ITSlaveCplt+0x6c>
 800a970:	e7a6      	b.n	800a8c0 <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a972:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a974:	4620      	mov	r0, r4
 800a976:	f7ff fea7 	bl	800a6c8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a97a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a97e:	2b28      	cmp	r3, #40	; 0x28
 800a980:	d1cb      	bne.n	800a91a <I2C_ITSlaveCplt+0xce>
  hi2c->State = HAL_I2C_STATE_READY;
 800a982:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a984:	4a1a      	ldr	r2, [pc, #104]	; (800a9f0 <I2C_ITSlaveCplt+0x1a4>)
  hi2c->XferISR = NULL;
 800a986:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a988:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a98a:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a98c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a990:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a992:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a996:	d512      	bpl.n	800a9be <I2C_ITSlaveCplt+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a998:	6822      	ldr	r2, [r4, #0]
 800a99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a99c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a99e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a9a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800a9a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800a9a8:	b14a      	cbz	r2, 800a9be <I2C_ITSlaveCplt+0x172>
      hi2c->XferCount--;
 800a9aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a9ac:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800a9ae:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800a9b0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a9b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a9b8:	f043 0304 	orr.w	r3, r3, #4
 800a9bc:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a9be:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9c0:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9c2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800a9c6:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800a9c8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800a9cc:	6813      	ldr	r3, [r2, #0]
 800a9ce:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800a9d2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800a9d8:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800a9da:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800a9de:	f7ff fe4d 	bl	800a67c <HAL_I2C_ListenCpltCallback>
}
 800a9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a9e4:	f7ff fdc0 	bl	800a568 <HAL_I2C_SlaveRxCpltCallback>
}
 800a9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	fe00e800 	.word	0xfe00e800
 800a9f0:	ffff0000 	.word	0xffff0000

0800a9f4 <I2C_Slave_ISR_IT>:
{
 800a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800a9f6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800a9fa:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d07f      	beq.n	800ab00 <I2C_Slave_ISR_IT+0x10c>
 800aa00:	4617      	mov	r7, r2
 800aa02:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aa04:	068a      	lsls	r2, r1, #26
 800aa06:	4604      	mov	r4, r0
 800aa08:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 800aa0a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aa0e:	d501      	bpl.n	800aa14 <I2C_Slave_ISR_IT+0x20>
 800aa10:	06bb      	lsls	r3, r7, #26
 800aa12:	d461      	bmi.n	800aad8 <I2C_Slave_ISR_IT+0xe4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aa14:	06ea      	lsls	r2, r5, #27
 800aa16:	d51b      	bpl.n	800aa50 <I2C_Slave_ISR_IT+0x5c>
 800aa18:	06fb      	lsls	r3, r7, #27
 800aa1a:	d519      	bpl.n	800aa50 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
 800aa1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d15e      	bne.n	800aae2 <I2C_Slave_ISR_IT+0xee>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800aa24:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800aa28:	2a28      	cmp	r2, #40	; 0x28
 800aa2a:	d102      	bne.n	800aa32 <I2C_Slave_ISR_IT+0x3e>
 800aa2c:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800aa30:	d07f      	beq.n	800ab32 <I2C_Slave_ISR_IT+0x13e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aa32:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa36:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aa38:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aa3e:	d102      	bne.n	800aa46 <I2C_Slave_ISR_IT+0x52>
 800aa40:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800aa44:	d162      	bne.n	800ab0c <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
 800aa46:	2300      	movs	r3, #0
  return HAL_OK;
 800aa48:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 800aa4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800aa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aa50:	076a      	lsls	r2, r5, #29
 800aa52:	d40d      	bmi.n	800aa70 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800aa54:	0728      	lsls	r0, r5, #28
 800aa56:	d529      	bpl.n	800aaac <I2C_Slave_ISR_IT+0xb8>
 800aa58:	0739      	lsls	r1, r7, #28
 800aa5a:	d527      	bpl.n	800aaac <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aa5c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800aa60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa64:	2b28      	cmp	r3, #40	; 0x28
 800aa66:	d060      	beq.n	800ab2a <I2C_Slave_ISR_IT+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	2208      	movs	r2, #8
 800aa6c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800aa6e:	e7ea      	b.n	800aa46 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800aa70:	077b      	lsls	r3, r7, #29
 800aa72:	d5ef      	bpl.n	800aa54 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
 800aa74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	b16b      	cbz	r3, 800aa96 <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aa7a:	6822      	ldr	r2, [r4, #0]
 800aa7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aa80:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800aa82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800aa84:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800aa86:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800aa88:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800aa8a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800aa8c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800aa8e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800aa90:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800aa92:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800aa94:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800aa96:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1d3      	bne.n	800aa46 <I2C_Slave_ISR_IT+0x52>
 800aa9e:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800aaa2:	d0d0      	beq.n	800aa46 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f7ff fd61 	bl	800a56c <I2C_ITSlaveSeqCplt>
 800aaaa:	e7cc      	b.n	800aa46 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aaac:	07aa      	lsls	r2, r5, #30
 800aaae:	d5ca      	bpl.n	800aa46 <I2C_Slave_ISR_IT+0x52>
 800aab0:	07bb      	lsls	r3, r7, #30
 800aab2:	d5c8      	bpl.n	800aa46 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800aab4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	b323      	cbz	r3, 800ab04 <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aaba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800aabc:	6823      	ldr	r3, [r4, #0]
 800aabe:	7812      	ldrb	r2, [r2, #0]
 800aac0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aac2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800aac4:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800aac6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800aac8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800aaca:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800aacc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800aace:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800aad0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800aad2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800aad4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800aad6:	e7b6      	b.n	800aa46 <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800aad8:	f7ff feb8 	bl	800a84c <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aadc:	06ea      	lsls	r2, r5, #27
 800aade:	d5b7      	bpl.n	800aa50 <I2C_Slave_ISR_IT+0x5c>
 800aae0:	e79a      	b.n	800aa18 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	2210      	movs	r2, #16
 800aae6:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800aaea:	f043 0304 	orr.w	r3, r3, #4
 800aaee:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800aaf0:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800aaf4:	d1a7      	bne.n	800aa46 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800aaf6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7ff fde5 	bl	800a6c8 <I2C_ITError>
 800aafe:	e7a2      	b.n	800aa46 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 800ab00:	2002      	movs	r0, #2
}
 800ab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800ab04:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800ab08:	d19d      	bne.n	800aa46 <I2C_Slave_ISR_IT+0x52>
 800ab0a:	e7cb      	b.n	800aaa4 <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	699a      	ldr	r2, [r3, #24]
 800ab10:	0790      	lsls	r0, r2, #30
 800ab12:	d502      	bpl.n	800ab1a <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
 800ab14:	2200      	movs	r2, #0
 800ab16:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab18:	6823      	ldr	r3, [r4, #0]
 800ab1a:	699a      	ldr	r2, [r3, #24]
 800ab1c:	07d1      	lsls	r1, r2, #31
 800ab1e:	d4c1      	bmi.n	800aaa4 <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	f042 0201 	orr.w	r2, r2, #1
 800ab26:	619a      	str	r2, [r3, #24]
 800ab28:	e7bc      	b.n	800aaa4 <I2C_Slave_ISR_IT+0xb0>
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f7ff fd74 	bl	800a618 <I2C_ITAddrCplt.part.0>
 800ab30:	e789      	b.n	800aa46 <I2C_Slave_ISR_IT+0x52>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab32:	4918      	ldr	r1, [pc, #96]	; (800ab94 <I2C_Slave_ISR_IT+0x1a0>)
  hi2c->State = HAL_I2C_STATE_READY;
 800ab34:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ab36:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 800ab38:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab3a:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab3c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ab3e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ab46:	d512      	bpl.n	800ab6e <I2C_Slave_ISR_IT+0x17a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab48:	6822      	ldr	r2, [r4, #0]
 800ab4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ab4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ab50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800ab52:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800ab54:	3301      	adds	r3, #1
 800ab56:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800ab58:	b14a      	cbz	r2, 800ab6e <I2C_Slave_ISR_IT+0x17a>
      hi2c->XferCount--;
 800ab5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800ab5c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800ab5e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800ab60:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ab66:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ab68:	f043 0304 	orr.w	r3, r3, #4
 800ab6c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ab6e:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab70:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ab72:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800ab76:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ab78:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ab7c:	6813      	ldr	r3, [r2, #0]
 800ab7e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800ab82:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800ab88:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800ab8a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800ab8e:	f7ff fd75 	bl	800a67c <HAL_I2C_ListenCpltCallback>
}
 800ab92:	e758      	b.n	800aa46 <I2C_Slave_ISR_IT+0x52>
 800ab94:	ffff0000 	.word	0xffff0000

0800ab98 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ab98:	6803      	ldr	r3, [r0, #0]
{
 800ab9a:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800aba0:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800aba2:	f412 7f80 	tst.w	r2, #256	; 0x100
 800aba6:	d032      	beq.n	800ac0e <HAL_I2C_ER_IRQHandler+0x76>
 800aba8:	f011 0f80 	tst.w	r1, #128	; 0x80
 800abac:	d021      	beq.n	800abf2 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800abae:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800abb0:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800abb4:	f041 0101 	orr.w	r1, r1, #1
 800abb8:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800abba:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800abbc:	0553      	lsls	r3, r2, #21
 800abbe:	d507      	bpl.n	800abd0 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abc0:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800abc2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800abc8:	f041 0108 	orr.w	r1, r1, #8
 800abcc:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abce:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800abd0:	0592      	lsls	r2, r2, #22
 800abd2:	d507      	bpl.n	800abe4 <HAL_I2C_ER_IRQHandler+0x4c>
 800abd4:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800abd6:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800abd8:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800abdc:	f043 0302 	orr.w	r3, r3, #2
 800abe0:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800abe2:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 800abe4:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800abe6:	f011 0f0b 	tst.w	r1, #11
 800abea:	d10c      	bne.n	800ac06 <HAL_I2C_ER_IRQHandler+0x6e>
}
 800abec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abf0:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800abf2:	0553      	lsls	r3, r2, #21
 800abf4:	d4f6      	bmi.n	800abe4 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800abf6:	0593      	lsls	r3, r2, #22
 800abf8:	d5f4      	bpl.n	800abe4 <HAL_I2C_ER_IRQHandler+0x4c>
 800abfa:	060a      	lsls	r2, r1, #24
 800abfc:	d4eb      	bmi.n	800abd6 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 800abfe:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ac00:	f011 0f0b 	tst.w	r1, #11
 800ac04:	d0f2      	beq.n	800abec <HAL_I2C_ER_IRQHandler+0x54>
}
 800ac06:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800ac0a:	f7ff bd5d 	b.w	800a6c8 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ac0e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800ac12:	d0f0      	beq.n	800abf6 <HAL_I2C_ER_IRQHandler+0x5e>
 800ac14:	0609      	lsls	r1, r1, #24
 800ac16:	d5e5      	bpl.n	800abe4 <HAL_I2C_ER_IRQHandler+0x4c>
 800ac18:	e7d3      	b.n	800abc2 <HAL_I2C_ER_IRQHandler+0x2a>
 800ac1a:	bf00      	nop

0800ac1c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac1c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800ac20:	2a20      	cmp	r2, #32
 800ac22:	d129      	bne.n	800ac78 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 800ac24:	4603      	mov	r3, r0
{
 800ac26:	b500      	push	{lr}
 800ac28:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac2c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800ac30:	2a01      	cmp	r2, #1
 800ac32:	d023      	beq.n	800ac7c <HAL_I2CEx_ConfigAnalogFilter+0x60>
 800ac34:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac36:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac38:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 800ac3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac40:	2224      	movs	r2, #36	; 0x24
 800ac42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800ac46:	6802      	ldr	r2, [r0, #0]
 800ac48:	f022 0201 	bic.w	r2, r2, #1
 800ac4c:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ac4e:	6818      	ldr	r0, [r3, #0]
 800ac50:	6802      	ldr	r2, [r0, #0]
 800ac52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac56:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800ac58:	6818      	ldr	r0, [r3, #0]
 800ac5a:	6802      	ldr	r2, [r0, #0]
 800ac5c:	4311      	orrs	r1, r2
 800ac5e:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800ac60:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	680a      	ldr	r2, [r1, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800ac6c:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ac70:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800ac74:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800ac78:	2002      	movs	r0, #2
}
 800ac7a:	4770      	bx	lr
    return HAL_BUSY;
 800ac7c:	2002      	movs	r0, #2
}
 800ac7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac82:	bf00      	nop

0800ac84 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac84:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800ac88:	2a20      	cmp	r2, #32
 800ac8a:	d127      	bne.n	800acdc <HAL_I2CEx_ConfigDigitalFilter+0x58>
 800ac8c:	4603      	mov	r3, r0
{
 800ac8e:	b500      	push	{lr}
 800ac90:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac94:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800ac98:	2a01      	cmp	r2, #1
 800ac9a:	d021      	beq.n	800ace0 <HAL_I2CEx_ConfigDigitalFilter+0x5c>
 800ac9c:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac9e:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aca0:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 800aca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800aca8:	2224      	movs	r2, #36	; 0x24
 800acaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800acae:	6802      	ldr	r2, [r0, #0]
 800acb0:	f022 0201 	bic.w	r2, r2, #1
 800acb4:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 800acb6:	6818      	ldr	r0, [r3, #0]
 800acb8:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800acba:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800acbe:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800acc2:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800acc4:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 800acc6:	6819      	ldr	r1, [r3, #0]
 800acc8:	680a      	ldr	r2, [r1, #0]
 800acca:	f042 0201 	orr.w	r2, r2, #1
 800acce:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800acd0:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800acd4:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800acd8:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800acdc:	2002      	movs	r0, #2
}
 800acde:	4770      	bx	lr
    return HAL_BUSY;
 800ace0:	2002      	movs	r0, #2
}
 800ace2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ace6:	bf00      	nop

0800ace8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ace8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800acea:	4c10      	ldr	r4, [pc, #64]	; (800ad2c <HAL_PWREx_ConfigSupply+0x44>)
 800acec:	68e3      	ldr	r3, [r4, #12]
 800acee:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800acf2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800acf4:	d105      	bne.n	800ad02 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800acf6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800acfa:	1a18      	subs	r0, r3, r0
 800acfc:	bf18      	it	ne
 800acfe:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ad02:	f023 0307 	bic.w	r3, r3, #7
 800ad06:	4318      	orrs	r0, r3
 800ad08:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800ad0a:	f7fd fb4f 	bl	80083ac <HAL_GetTick>
 800ad0e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ad10:	e005      	b.n	800ad1e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ad12:	f7fd fb4b 	bl	80083ac <HAL_GetTick>
 800ad16:	1b40      	subs	r0, r0, r5
 800ad18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ad1c:	d804      	bhi.n	800ad28 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ad1e:	6863      	ldr	r3, [r4, #4]
 800ad20:	049b      	lsls	r3, r3, #18
 800ad22:	d5f6      	bpl.n	800ad12 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800ad24:	2000      	movs	r0, #0
}
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800ad28:	2001      	movs	r0, #1
}
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	58024800 	.word	0x58024800

0800ad30 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad30:	4b3b      	ldr	r3, [pc, #236]	; (800ae20 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800ad32:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ad36:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ad38:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800ad3a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ad40:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800ad44:	d038      	beq.n	800adb8 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad46:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ad4a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad4e:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ad52:	fb05 f101 	mul.w	r1, r5, r1
 800ad56:	2a01      	cmp	r2, #1
 800ad58:	ee07 1a90 	vmov	s15, r1
 800ad5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800ad60:	d002      	beq.n	800ad68 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800ad62:	2a02      	cmp	r2, #2
 800ad64:	d04e      	beq.n	800ae04 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800ad66:	b34a      	cbz	r2, 800adbc <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad68:	ee07 0a90 	vmov	s15, r0
 800ad6c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800ae24 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800ad70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad76:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800ad7a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800ae28 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800ad7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad82:	ee06 3a90 	vmov	s13, r3
 800ad86:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ad8a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ad8e:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ad92:	eee7 6a25 	vfma.f32	s13, s14, s11
 800ad96:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ad9a:	4b21      	ldr	r3, [pc, #132]	; (800ae20 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800ad9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad9e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ada2:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ada4:	ee07 3a90 	vmov	s15, r3
 800ada8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800adac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adb4:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800adb8:	bc30      	pop	{r4, r5}
 800adba:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	0692      	lsls	r2, r2, #26
 800adc0:	d527      	bpl.n	800ae12 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adc2:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adc4:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adc8:	4a18      	ldr	r2, [pc, #96]	; (800ae2c <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800adce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800add0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800add4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800add8:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800ae28 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800addc:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ade0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ade2:	ee06 3a90 	vmov	s13, r3
 800ade6:	ee05 2a90 	vmov	s11, r2
 800adea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800adee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800adf2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800adf6:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800adfa:	eee7 6a05 	vfma.f32	s13, s14, s10
 800adfe:	ee66 6a26 	vmul.f32	s13, s12, s13
 800ae02:	e7ca      	b.n	800ad9a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae04:	ee07 0a90 	vmov	s15, r0
 800ae08:	eddf 6a09 	vldr	s13, [pc, #36]	; 800ae30 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800ae0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae10:	e7b0      	b.n	800ad74 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae12:	ee07 0a90 	vmov	s15, r0
 800ae16:	eddf 6a07 	vldr	s13, [pc, #28]	; 800ae34 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800ae1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae1e:	e7a9      	b.n	800ad74 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800ae20:	58024400 	.word	0x58024400
 800ae24:	4a742400 	.word	0x4a742400
 800ae28:	39000000 	.word	0x39000000
 800ae2c:	03d09000 	.word	0x03d09000
 800ae30:	4bbebc20 	.word	0x4bbebc20
 800ae34:	4c742400 	.word	0x4c742400

0800ae38 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	f000 81ef 	beq.w	800b21c <HAL_RCC_OscConfig+0x3e4>
{
 800ae3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae40:	6803      	ldr	r3, [r0, #0]
 800ae42:	4604      	mov	r4, r0
 800ae44:	07d9      	lsls	r1, r3, #31
 800ae46:	d52e      	bpl.n	800aea6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae48:	49a4      	ldr	r1, [pc, #656]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800ae4a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae4c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae4e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ae52:	2a10      	cmp	r2, #16
 800ae54:	f000 8107 	beq.w	800b066 <HAL_RCC_OscConfig+0x22e>
 800ae58:	2a18      	cmp	r2, #24
 800ae5a:	f000 80ff 	beq.w	800b05c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae5e:	6863      	ldr	r3, [r4, #4]
 800ae60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae64:	f000 812a 	beq.w	800b0bc <HAL_RCC_OscConfig+0x284>
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f040 8188 	bne.w	800b17e <HAL_RCC_OscConfig+0x346>
 800ae6e:	4b9b      	ldr	r3, [pc, #620]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ae7e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae80:	6863      	ldr	r3, [r4, #4]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 815c 	beq.w	800b140 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800ae88:	f7fd fa90 	bl	80083ac <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae8c:	4e93      	ldr	r6, [pc, #588]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800ae8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae90:	e005      	b.n	800ae9e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae92:	f7fd fa8b 	bl	80083ac <HAL_GetTick>
 800ae96:	1b40      	subs	r0, r0, r5
 800ae98:	2864      	cmp	r0, #100	; 0x64
 800ae9a:	f200 814f 	bhi.w	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae9e:	6833      	ldr	r3, [r6, #0]
 800aea0:	039b      	lsls	r3, r3, #14
 800aea2:	d5f6      	bpl.n	800ae92 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	079d      	lsls	r5, r3, #30
 800aea8:	f100 808a 	bmi.w	800afc0 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800aeac:	06d9      	lsls	r1, r3, #27
 800aeae:	d533      	bpl.n	800af18 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aeb0:	4a8a      	ldr	r2, [pc, #552]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800aeb2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aeb4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aeb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800aeba:	2b08      	cmp	r3, #8
 800aebc:	f000 80e3 	beq.w	800b086 <HAL_RCC_OscConfig+0x24e>
 800aec0:	2b18      	cmp	r3, #24
 800aec2:	f000 80db 	beq.w	800b07c <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aec6:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800aec8:	4d84      	ldr	r5, [pc, #528]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f000 8176 	beq.w	800b1bc <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aed8:	f7fd fa68 	bl	80083ac <HAL_GetTick>
 800aedc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aede:	e005      	b.n	800aeec <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aee0:	f7fd fa64 	bl	80083ac <HAL_GetTick>
 800aee4:	1b80      	subs	r0, r0, r6
 800aee6:	2802      	cmp	r0, #2
 800aee8:	f200 8128 	bhi.w	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	05db      	lsls	r3, r3, #23
 800aef0:	d5f6      	bpl.n	800aee0 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aef2:	f7fd fa73 	bl	80083dc <HAL_GetREVID>
 800aef6:	f241 0303 	movw	r3, #4099	; 0x1003
 800aefa:	4298      	cmp	r0, r3
 800aefc:	f200 8266 	bhi.w	800b3cc <HAL_RCC_OscConfig+0x594>
 800af00:	6a22      	ldr	r2, [r4, #32]
 800af02:	686b      	ldr	r3, [r5, #4]
 800af04:	2a20      	cmp	r2, #32
 800af06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800af0a:	bf0c      	ite	eq
 800af0c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800af10:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800af14:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	071d      	lsls	r5, r3, #28
 800af1a:	d516      	bpl.n	800af4a <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af1c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800af1e:	4d6f      	ldr	r5, [pc, #444]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 811b 	beq.w	800b15c <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 800af26:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800af28:	f043 0301 	orr.w	r3, r3, #1
 800af2c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800af2e:	f7fd fa3d 	bl	80083ac <HAL_GetTick>
 800af32:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af34:	e005      	b.n	800af42 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af36:	f7fd fa39 	bl	80083ac <HAL_GetTick>
 800af3a:	1b80      	subs	r0, r0, r6
 800af3c:	2802      	cmp	r0, #2
 800af3e:	f200 80fd 	bhi.w	800b13c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af42:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800af44:	0798      	lsls	r0, r3, #30
 800af46:	d5f6      	bpl.n	800af36 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	069a      	lsls	r2, r3, #26
 800af4c:	d516      	bpl.n	800af7c <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800af4e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800af50:	4d62      	ldr	r5, [pc, #392]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 8121 	beq.w	800b19a <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800af5e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800af60:	f7fd fa24 	bl	80083ac <HAL_GetTick>
 800af64:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af66:	e005      	b.n	800af74 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af68:	f7fd fa20 	bl	80083ac <HAL_GetTick>
 800af6c:	1b80      	subs	r0, r0, r6
 800af6e:	2802      	cmp	r0, #2
 800af70:	f200 80e4 	bhi.w	800b13c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800af74:	682b      	ldr	r3, [r5, #0]
 800af76:	049f      	lsls	r7, r3, #18
 800af78:	d5f6      	bpl.n	800af68 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	0759      	lsls	r1, r3, #29
 800af7e:	f100 80a3 	bmi.w	800b0c8 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af84:	b1d0      	cbz	r0, 800afbc <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800af86:	4d55      	ldr	r5, [pc, #340]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800af88:	692b      	ldr	r3, [r5, #16]
 800af8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af8e:	2b18      	cmp	r3, #24
 800af90:	f000 81b6 	beq.w	800b300 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 800af94:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af96:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800af98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af9c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af9e:	f000 8149 	beq.w	800b234 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 800afa2:	f7fd fa03 	bl	80083ac <HAL_GetTick>
 800afa6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afa8:	e005      	b.n	800afb6 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afaa:	f7fd f9ff 	bl	80083ac <HAL_GetTick>
 800afae:	1b00      	subs	r0, r0, r4
 800afb0:	2802      	cmp	r0, #2
 800afb2:	f200 80c3 	bhi.w	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	019b      	lsls	r3, r3, #6
 800afba:	d4f6      	bmi.n	800afaa <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800afbc:	2000      	movs	r0, #0
}
 800afbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afc0:	4a46      	ldr	r2, [pc, #280]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800afc2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800afc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800afc6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800afca:	d12d      	bne.n	800b028 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afcc:	4b43      	ldr	r3, [pc, #268]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800afce:	68e2      	ldr	r2, [r4, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	0759      	lsls	r1, r3, #29
 800afd4:	d501      	bpl.n	800afda <HAL_RCC_OscConfig+0x1a2>
 800afd6:	2a00      	cmp	r2, #0
 800afd8:	d04e      	beq.n	800b078 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800afda:	4d40      	ldr	r5, [pc, #256]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	f023 0319 	bic.w	r3, r3, #25
 800afe2:	4313      	orrs	r3, r2
 800afe4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800afe6:	f7fd f9e1 	bl	80083ac <HAL_GetTick>
 800afea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800afec:	e005      	b.n	800affa <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800afee:	f7fd f9dd 	bl	80083ac <HAL_GetTick>
 800aff2:	1b80      	subs	r0, r0, r6
 800aff4:	2802      	cmp	r0, #2
 800aff6:	f200 80a1 	bhi.w	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800affa:	682b      	ldr	r3, [r5, #0]
 800affc:	075b      	lsls	r3, r3, #29
 800affe:	d5f6      	bpl.n	800afee <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b000:	f7fd f9ec 	bl	80083dc <HAL_GetREVID>
 800b004:	f241 0303 	movw	r3, #4099	; 0x1003
 800b008:	4298      	cmp	r0, r3
 800b00a:	f200 80fe 	bhi.w	800b20a <HAL_RCC_OscConfig+0x3d2>
 800b00e:	6922      	ldr	r2, [r4, #16]
 800b010:	686b      	ldr	r3, [r5, #4]
 800b012:	2a40      	cmp	r2, #64	; 0x40
 800b014:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b018:	bf0c      	ite	eq
 800b01a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800b01e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800b022:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	e741      	b.n	800aeac <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b028:	2b18      	cmp	r3, #24
 800b02a:	f000 80ea 	beq.w	800b202 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b02e:	4d2b      	ldr	r5, [pc, #172]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b030:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b032:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b034:	2a00      	cmp	r2, #0
 800b036:	f000 80d3 	beq.w	800b1e0 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b03a:	f023 0319 	bic.w	r3, r3, #25
 800b03e:	4313      	orrs	r3, r2
 800b040:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b042:	f7fd f9b3 	bl	80083ac <HAL_GetTick>
 800b046:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b048:	e004      	b.n	800b054 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b04a:	f7fd f9af 	bl	80083ac <HAL_GetTick>
 800b04e:	1b80      	subs	r0, r0, r6
 800b050:	2802      	cmp	r0, #2
 800b052:	d873      	bhi.n	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	075f      	lsls	r7, r3, #29
 800b058:	d5f7      	bpl.n	800b04a <HAL_RCC_OscConfig+0x212>
 800b05a:	e7d1      	b.n	800b000 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b05c:	f001 0103 	and.w	r1, r1, #3
 800b060:	2902      	cmp	r1, #2
 800b062:	f47f aefc 	bne.w	800ae5e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b066:	4a1d      	ldr	r2, [pc, #116]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	0392      	lsls	r2, r2, #14
 800b06c:	f57f af1b 	bpl.w	800aea6 <HAL_RCC_OscConfig+0x6e>
 800b070:	6862      	ldr	r2, [r4, #4]
 800b072:	2a00      	cmp	r2, #0
 800b074:	f47f af17 	bne.w	800aea6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800b078:	2001      	movs	r0, #1
}
 800b07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b07c:	f002 0203 	and.w	r2, r2, #3
 800b080:	2a01      	cmp	r2, #1
 800b082:	f47f af20 	bne.w	800aec6 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b086:	4b15      	ldr	r3, [pc, #84]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	05da      	lsls	r2, r3, #23
 800b08c:	d502      	bpl.n	800b094 <HAL_RCC_OscConfig+0x25c>
 800b08e:	69e3      	ldr	r3, [r4, #28]
 800b090:	2b80      	cmp	r3, #128	; 0x80
 800b092:	d1f1      	bne.n	800b078 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b094:	f7fd f9a2 	bl	80083dc <HAL_GetREVID>
 800b098:	f241 0303 	movw	r3, #4099	; 0x1003
 800b09c:	4298      	cmp	r0, r3
 800b09e:	f200 80bf 	bhi.w	800b220 <HAL_RCC_OscConfig+0x3e8>
 800b0a2:	6a22      	ldr	r2, [r4, #32]
 800b0a4:	2a20      	cmp	r2, #32
 800b0a6:	f000 81ad 	beq.w	800b404 <HAL_RCC_OscConfig+0x5cc>
 800b0aa:	490c      	ldr	r1, [pc, #48]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800b0ac:	684b      	ldr	r3, [r1, #4]
 800b0ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b0b2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800b0b6:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0b8:	6823      	ldr	r3, [r4, #0]
 800b0ba:	e72d      	b.n	800af18 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b0bc:	4a07      	ldr	r2, [pc, #28]	; (800b0dc <HAL_RCC_OscConfig+0x2a4>)
 800b0be:	6813      	ldr	r3, [r2, #0]
 800b0c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	e6db      	b.n	800ae80 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 800b0c8:	4d05      	ldr	r5, [pc, #20]	; (800b0e0 <HAL_RCC_OscConfig+0x2a8>)
 800b0ca:	682b      	ldr	r3, [r5, #0]
 800b0cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0d0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800b0d2:	f7fd f96b 	bl	80083ac <HAL_GetTick>
 800b0d6:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0d8:	e009      	b.n	800b0ee <HAL_RCC_OscConfig+0x2b6>
 800b0da:	bf00      	nop
 800b0dc:	58024400 	.word	0x58024400
 800b0e0:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0e4:	f7fd f962 	bl	80083ac <HAL_GetTick>
 800b0e8:	1b80      	subs	r0, r0, r6
 800b0ea:	2864      	cmp	r0, #100	; 0x64
 800b0ec:	d826      	bhi.n	800b13c <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b0ee:	682b      	ldr	r3, [r5, #0]
 800b0f0:	05da      	lsls	r2, r3, #23
 800b0f2:	d5f7      	bpl.n	800b0e4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0f4:	68a3      	ldr	r3, [r4, #8]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	f000 8171 	beq.w	800b3de <HAL_RCC_OscConfig+0x5a6>
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f040 8174 	bne.w	800b3ea <HAL_RCC_OscConfig+0x5b2>
 800b102:	4baa      	ldr	r3, [pc, #680]	; (800b3ac <HAL_RCC_OscConfig+0x574>)
 800b104:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b106:	f022 0201 	bic.w	r2, r2, #1
 800b10a:	671a      	str	r2, [r3, #112]	; 0x70
 800b10c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b10e:	f022 0204 	bic.w	r2, r2, #4
 800b112:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b114:	68a3      	ldr	r3, [r4, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 8140 	beq.w	800b39c <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 800b11c:	f7fd f946 	bl	80083ac <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b120:	4ea2      	ldr	r6, [pc, #648]	; (800b3ac <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b122:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b126:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b128:	e004      	b.n	800b134 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b12a:	f7fd f93f 	bl	80083ac <HAL_GetTick>
 800b12e:	1b40      	subs	r0, r0, r5
 800b130:	42b8      	cmp	r0, r7
 800b132:	d803      	bhi.n	800b13c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b134:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b136:	079b      	lsls	r3, r3, #30
 800b138:	d5f7      	bpl.n	800b12a <HAL_RCC_OscConfig+0x2f2>
 800b13a:	e722      	b.n	800af82 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800b13c:	2003      	movs	r0, #3
}
 800b13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 800b140:	f7fd f934 	bl	80083ac <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b144:	4e99      	ldr	r6, [pc, #612]	; (800b3ac <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 800b146:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b148:	e004      	b.n	800b154 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b14a:	f7fd f92f 	bl	80083ac <HAL_GetTick>
 800b14e:	1b40      	subs	r0, r0, r5
 800b150:	2864      	cmp	r0, #100	; 0x64
 800b152:	d8f3      	bhi.n	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b154:	6833      	ldr	r3, [r6, #0]
 800b156:	039f      	lsls	r7, r3, #14
 800b158:	d4f7      	bmi.n	800b14a <HAL_RCC_OscConfig+0x312>
 800b15a:	e6a3      	b.n	800aea4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800b15c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b15e:	f023 0301 	bic.w	r3, r3, #1
 800b162:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800b164:	f7fd f922 	bl	80083ac <HAL_GetTick>
 800b168:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b16a:	e004      	b.n	800b176 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b16c:	f7fd f91e 	bl	80083ac <HAL_GetTick>
 800b170:	1b80      	subs	r0, r0, r6
 800b172:	2802      	cmp	r0, #2
 800b174:	d8e2      	bhi.n	800b13c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b176:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800b178:	0799      	lsls	r1, r3, #30
 800b17a:	d4f7      	bmi.n	800b16c <HAL_RCC_OscConfig+0x334>
 800b17c:	e6e4      	b.n	800af48 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b17e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b182:	4b8a      	ldr	r3, [pc, #552]	; (800b3ac <HAL_RCC_OscConfig+0x574>)
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	f47f ae74 	bne.w	800ae72 <HAL_RCC_OscConfig+0x3a>
 800b18a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	e672      	b.n	800ae80 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 800b19a:	682b      	ldr	r3, [r5, #0]
 800b19c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1a0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b1a2:	f7fd f903 	bl	80083ac <HAL_GetTick>
 800b1a6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b1a8:	e004      	b.n	800b1b4 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b1aa:	f7fd f8ff 	bl	80083ac <HAL_GetTick>
 800b1ae:	1b80      	subs	r0, r0, r6
 800b1b0:	2802      	cmp	r0, #2
 800b1b2:	d8c3      	bhi.n	800b13c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	0498      	lsls	r0, r3, #18
 800b1b8:	d4f7      	bmi.n	800b1aa <HAL_RCC_OscConfig+0x372>
 800b1ba:	e6de      	b.n	800af7a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b1c4:	f7fd f8f2 	bl	80083ac <HAL_GetTick>
 800b1c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b1ca:	e004      	b.n	800b1d6 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b1cc:	f7fd f8ee 	bl	80083ac <HAL_GetTick>
 800b1d0:	1b80      	subs	r0, r0, r6
 800b1d2:	2802      	cmp	r0, #2
 800b1d4:	d8b2      	bhi.n	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b1d6:	682b      	ldr	r3, [r5, #0]
 800b1d8:	05df      	lsls	r7, r3, #23
 800b1da:	d4f7      	bmi.n	800b1cc <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	e69b      	b.n	800af18 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800b1e0:	f023 0301 	bic.w	r3, r3, #1
 800b1e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b1e6:	f7fd f8e1 	bl	80083ac <HAL_GetTick>
 800b1ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b1ec:	e004      	b.n	800b1f8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1ee:	f7fd f8dd 	bl	80083ac <HAL_GetTick>
 800b1f2:	1b80      	subs	r0, r0, r6
 800b1f4:	2802      	cmp	r0, #2
 800b1f6:	d8a1      	bhi.n	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	0758      	lsls	r0, r3, #29
 800b1fc:	d4f7      	bmi.n	800b1ee <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	e654      	b.n	800aeac <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b202:	0790      	lsls	r0, r2, #30
 800b204:	f47f af13 	bne.w	800b02e <HAL_RCC_OscConfig+0x1f6>
 800b208:	e6e0      	b.n	800afcc <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b20a:	686b      	ldr	r3, [r5, #4]
 800b20c:	6922      	ldr	r2, [r4, #16]
 800b20e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b212:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b216:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b218:	6823      	ldr	r3, [r4, #0]
 800b21a:	e647      	b.n	800aeac <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800b21c:	2001      	movs	r0, #1
}
 800b21e:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b220:	4a62      	ldr	r2, [pc, #392]	; (800b3ac <HAL_RCC_OscConfig+0x574>)
 800b222:	6a21      	ldr	r1, [r4, #32]
 800b224:	68d3      	ldr	r3, [r2, #12]
 800b226:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b22a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b22e:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	e671      	b.n	800af18 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800b234:	f7fd f8ba 	bl	80083ac <HAL_GetTick>
 800b238:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b23a:	e005      	b.n	800b248 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b23c:	f7fd f8b6 	bl	80083ac <HAL_GetTick>
 800b240:	1b80      	subs	r0, r0, r6
 800b242:	2802      	cmp	r0, #2
 800b244:	f63f af7a 	bhi.w	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	0199      	lsls	r1, r3, #6
 800b24c:	d4f6      	bmi.n	800b23c <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b24e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b250:	4b57      	ldr	r3, [pc, #348]	; (800b3b0 <HAL_RCC_OscConfig+0x578>)
 800b252:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b254:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b256:	4957      	ldr	r1, [pc, #348]	; (800b3b4 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b258:	4e54      	ldr	r6, [pc, #336]	; (800b3ac <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b25a:	4313      	orrs	r3, r2
 800b25c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b25e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b262:	62ab      	str	r3, [r5, #40]	; 0x28
 800b264:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800b268:	3b01      	subs	r3, #1
 800b26a:	3a01      	subs	r2, #1
 800b26c:	025b      	lsls	r3, r3, #9
 800b26e:	0412      	lsls	r2, r2, #16
 800b270:	b29b      	uxth	r3, r3
 800b272:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b276:	4313      	orrs	r3, r2
 800b278:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b27a:	3a01      	subs	r2, #1
 800b27c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b280:	4313      	orrs	r3, r2
 800b282:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800b284:	3a01      	subs	r2, #1
 800b286:	0612      	lsls	r2, r2, #24
 800b288:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b28c:	4313      	orrs	r3, r2
 800b28e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800b290:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b292:	f023 0301 	bic.w	r3, r3, #1
 800b296:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b298:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800b29a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800b29c:	4011      	ands	r1, r2
 800b29e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800b2a2:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b2a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b2a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b2a8:	f023 030c 	bic.w	r3, r3, #12
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b2b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b2b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b2b4:	f023 0302 	bic.w	r3, r3, #2
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b2bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b2be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2c2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b2c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ca:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b2cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b2ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2d2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800b2d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b2d6:	f043 0301 	orr.w	r3, r3, #1
 800b2da:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800b2dc:	682b      	ldr	r3, [r5, #0]
 800b2de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b2e2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b2e4:	f7fd f862 	bl	80083ac <HAL_GetTick>
 800b2e8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b2ea:	e005      	b.n	800b2f8 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2ec:	f7fd f85e 	bl	80083ac <HAL_GetTick>
 800b2f0:	1b00      	subs	r0, r0, r4
 800b2f2:	2802      	cmp	r0, #2
 800b2f4:	f63f af22 	bhi.w	800b13c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b2f8:	6833      	ldr	r3, [r6, #0]
 800b2fa:	019a      	lsls	r2, r3, #6
 800b2fc:	d5f6      	bpl.n	800b2ec <HAL_RCC_OscConfig+0x4b4>
 800b2fe:	e65d      	b.n	800afbc <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b300:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b302:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b304:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b306:	f43f ae5a 	beq.w	800afbe <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b30a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b30e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b310:	428b      	cmp	r3, r1
 800b312:	f47f aeb1 	bne.w	800b078 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b316:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b31a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b31c:	429a      	cmp	r2, r3
 800b31e:	f47f aeab 	bne.w	800b078 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b322:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b324:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800b328:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b32a:	429a      	cmp	r2, r3
 800b32c:	f47f aea4 	bne.w	800b078 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b332:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800b336:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b338:	429a      	cmp	r2, r3
 800b33a:	f47f ae9d 	bne.w	800b078 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b33e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b340:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800b344:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b346:	429a      	cmp	r2, r3
 800b348:	f47f ae96 	bne.w	800b078 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b34c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b34e:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800b352:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b354:	429e      	cmp	r6, r3
 800b356:	f47f ae8f 	bne.w	800b078 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b35a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b35c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b35e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b362:	429a      	cmp	r2, r3
 800b364:	f43f ae2a 	beq.w	800afbc <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800b368:	4a10      	ldr	r2, [pc, #64]	; (800b3ac <HAL_RCC_OscConfig+0x574>)
 800b36a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b36c:	f023 0301 	bic.w	r3, r3, #1
 800b370:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800b372:	f7fd f81b 	bl	80083ac <HAL_GetTick>
 800b376:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b378:	f7fd f818 	bl	80083ac <HAL_GetTick>
 800b37c:	42a8      	cmp	r0, r5
 800b37e:	d0fb      	beq.n	800b378 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b380:	4a0a      	ldr	r2, [pc, #40]	; (800b3ac <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 800b382:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b384:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b386:	4b0b      	ldr	r3, [pc, #44]	; (800b3b4 <HAL_RCC_OscConfig+0x57c>)
 800b388:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800b38a:	4023      	ands	r3, r4
 800b38c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800b390:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800b392:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b394:	f043 0301 	orr.w	r3, r3, #1
 800b398:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 800b39c:	f7fd f806 	bl	80083ac <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b3a0:	4e02      	ldr	r6, [pc, #8]	; (800b3ac <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3a2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b3a6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b3a8:	e00c      	b.n	800b3c4 <HAL_RCC_OscConfig+0x58c>
 800b3aa:	bf00      	nop
 800b3ac:	58024400 	.word	0x58024400
 800b3b0:	fffffc0c 	.word	0xfffffc0c
 800b3b4:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3b8:	f7fc fff8 	bl	80083ac <HAL_GetTick>
 800b3bc:	1b40      	subs	r0, r0, r5
 800b3be:	42b8      	cmp	r0, r7
 800b3c0:	f63f aebc 	bhi.w	800b13c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b3c4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b3c6:	0798      	lsls	r0, r3, #30
 800b3c8:	d4f6      	bmi.n	800b3b8 <HAL_RCC_OscConfig+0x580>
 800b3ca:	e5da      	b.n	800af82 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b3cc:	68eb      	ldr	r3, [r5, #12]
 800b3ce:	6a22      	ldr	r2, [r4, #32]
 800b3d0:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800b3d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b3d8:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	e59c      	b.n	800af18 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3de:	4a0e      	ldr	r2, [pc, #56]	; (800b418 <HAL_RCC_OscConfig+0x5e0>)
 800b3e0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b3e2:	f043 0301 	orr.w	r3, r3, #1
 800b3e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b3e8:	e694      	b.n	800b114 <HAL_RCC_OscConfig+0x2dc>
 800b3ea:	2b05      	cmp	r3, #5
 800b3ec:	4b0a      	ldr	r3, [pc, #40]	; (800b418 <HAL_RCC_OscConfig+0x5e0>)
 800b3ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3f0:	f47f ae89 	bne.w	800b106 <HAL_RCC_OscConfig+0x2ce>
 800b3f4:	f042 0204 	orr.w	r2, r2, #4
 800b3f8:	671a      	str	r2, [r3, #112]	; 0x70
 800b3fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b3fc:	f042 0201 	orr.w	r2, r2, #1
 800b400:	671a      	str	r2, [r3, #112]	; 0x70
 800b402:	e687      	b.n	800b114 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b404:	4a04      	ldr	r2, [pc, #16]	; (800b418 <HAL_RCC_OscConfig+0x5e0>)
 800b406:	6853      	ldr	r3, [r2, #4]
 800b408:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b40c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b410:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b412:	6823      	ldr	r3, [r4, #0]
 800b414:	e580      	b.n	800af18 <HAL_RCC_OscConfig+0xe0>
 800b416:	bf00      	nop
 800b418:	58024400 	.word	0x58024400

0800b41c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b41c:	4a47      	ldr	r2, [pc, #284]	; (800b53c <HAL_RCC_GetSysClockFreq+0x120>)
 800b41e:	6913      	ldr	r3, [r2, #16]
 800b420:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b424:	2b10      	cmp	r3, #16
 800b426:	d004      	beq.n	800b432 <HAL_RCC_GetSysClockFreq+0x16>
 800b428:	2b18      	cmp	r3, #24
 800b42a:	d00d      	beq.n	800b448 <HAL_RCC_GetSysClockFreq+0x2c>
 800b42c:	b11b      	cbz	r3, 800b436 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800b42e:	4844      	ldr	r0, [pc, #272]	; (800b540 <HAL_RCC_GetSysClockFreq+0x124>)
 800b430:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b432:	4844      	ldr	r0, [pc, #272]	; (800b544 <HAL_RCC_GetSysClockFreq+0x128>)
 800b434:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b436:	6813      	ldr	r3, [r2, #0]
 800b438:	0699      	lsls	r1, r3, #26
 800b43a:	d54a      	bpl.n	800b4d2 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b43c:	6813      	ldr	r3, [r2, #0]
 800b43e:	4842      	ldr	r0, [pc, #264]	; (800b548 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b440:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b444:	40d8      	lsrs	r0, r3
 800b446:	4770      	bx	lr
{
 800b448:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b44a:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b44c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b44e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800b450:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b454:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b456:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800b45a:	d038      	beq.n	800b4ce <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b45c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b460:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b464:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b468:	fb05 f101 	mul.w	r1, r5, r1
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	ee07 1a90 	vmov	s15, r1
 800b472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800b476:	d002      	beq.n	800b47e <HAL_RCC_GetSysClockFreq+0x62>
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d02c      	beq.n	800b4d6 <HAL_RCC_GetSysClockFreq+0xba>
 800b47c:	b393      	cbz	r3, 800b4e4 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b47e:	ee07 0a90 	vmov	s15, r0
 800b482:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b54c <HAL_RCC_GetSysClockFreq+0x130>
 800b486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b48a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800b48c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b490:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800b550 <HAL_RCC_GetSysClockFreq+0x134>
 800b494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b498:	ee06 3a90 	vmov	s13, r3
 800b49c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b4a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b4a4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b4a8:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b4ac:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b4b0:	4b22      	ldr	r3, [pc, #136]	; (800b53c <HAL_RCC_GetSysClockFreq+0x120>)
 800b4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b4b8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b4ba:	ee07 3a90 	vmov	s15, r3
 800b4be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4ca:	ee17 0a90 	vmov	r0, s15
}
 800b4ce:	bc30      	pop	{r4, r5}
 800b4d0:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b4d2:	481d      	ldr	r0, [pc, #116]	; (800b548 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800b4d4:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4d6:	ee07 0a90 	vmov	s15, r0
 800b4da:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800b554 <HAL_RCC_GetSysClockFreq+0x138>
 800b4de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b4e2:	e7d2      	b.n	800b48a <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4e4:	6813      	ldr	r3, [r2, #0]
 800b4e6:	069b      	lsls	r3, r3, #26
 800b4e8:	d520      	bpl.n	800b52c <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4ea:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4ec:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f0:	4915      	ldr	r1, [pc, #84]	; (800b548 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b4f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4f8:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b500:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800b550 <HAL_RCC_GetSysClockFreq+0x134>
 800b504:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b508:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b50a:	ee06 3a90 	vmov	s13, r3
 800b50e:	ee05 1a90 	vmov	s11, r1
 800b512:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b516:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800b51a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b51e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800b522:	eee7 6a05 	vfma.f32	s13, s14, s10
 800b526:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b52a:	e7c1      	b.n	800b4b0 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b52c:	ee07 0a90 	vmov	s15, r0
 800b530:	eddf 6a09 	vldr	s13, [pc, #36]	; 800b558 <HAL_RCC_GetSysClockFreq+0x13c>
 800b534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b538:	e7a7      	b.n	800b48a <HAL_RCC_GetSysClockFreq+0x6e>
 800b53a:	bf00      	nop
 800b53c:	58024400 	.word	0x58024400
 800b540:	003d0900 	.word	0x003d0900
 800b544:	017d7840 	.word	0x017d7840
 800b548:	03d09000 	.word	0x03d09000
 800b54c:	4a742400 	.word	0x4a742400
 800b550:	39000000 	.word	0x39000000
 800b554:	4bbebc20 	.word	0x4bbebc20
 800b558:	4c742400 	.word	0x4c742400

0800b55c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800b55c:	2800      	cmp	r0, #0
 800b55e:	f000 811a 	beq.w	800b796 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b562:	4a92      	ldr	r2, [pc, #584]	; (800b7ac <HAL_RCC_ClockConfig+0x250>)
{
 800b564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b568:	6813      	ldr	r3, [r2, #0]
 800b56a:	4604      	mov	r4, r0
 800b56c:	460d      	mov	r5, r1
 800b56e:	f003 030f 	and.w	r3, r3, #15
 800b572:	428b      	cmp	r3, r1
 800b574:	d20c      	bcs.n	800b590 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b576:	6813      	ldr	r3, [r2, #0]
 800b578:	f023 030f 	bic.w	r3, r3, #15
 800b57c:	430b      	orrs	r3, r1
 800b57e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b580:	6813      	ldr	r3, [r2, #0]
 800b582:	f003 030f 	and.w	r3, r3, #15
 800b586:	428b      	cmp	r3, r1
 800b588:	d002      	beq.n	800b590 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800b58a:	2001      	movs	r0, #1
}
 800b58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	075f      	lsls	r7, r3, #29
 800b594:	d50c      	bpl.n	800b5b0 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b596:	4986      	ldr	r1, [pc, #536]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b598:	6920      	ldr	r0, [r4, #16]
 800b59a:	698a      	ldr	r2, [r1, #24]
 800b59c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b5a0:	4290      	cmp	r0, r2
 800b5a2:	d905      	bls.n	800b5b0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b5a4:	698b      	ldr	r3, [r1, #24]
 800b5a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5aa:	4303      	orrs	r3, r0
 800b5ac:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	071e      	lsls	r6, r3, #28
 800b5b2:	d50c      	bpl.n	800b5ce <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b5b4:	497e      	ldr	r1, [pc, #504]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b5b6:	6960      	ldr	r0, [r4, #20]
 800b5b8:	69ca      	ldr	r2, [r1, #28]
 800b5ba:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b5be:	4290      	cmp	r0, r2
 800b5c0:	d905      	bls.n	800b5ce <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b5c2:	69cb      	ldr	r3, [r1, #28]
 800b5c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c8:	4303      	orrs	r3, r0
 800b5ca:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5cc:	6823      	ldr	r3, [r4, #0]
 800b5ce:	06d8      	lsls	r0, r3, #27
 800b5d0:	d50c      	bpl.n	800b5ec <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b5d2:	4977      	ldr	r1, [pc, #476]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b5d4:	69a0      	ldr	r0, [r4, #24]
 800b5d6:	69ca      	ldr	r2, [r1, #28]
 800b5d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b5dc:	4290      	cmp	r0, r2
 800b5de:	d905      	bls.n	800b5ec <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b5e0:	69cb      	ldr	r3, [r1, #28]
 800b5e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b5e6:	4303      	orrs	r3, r0
 800b5e8:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b5ea:	6823      	ldr	r3, [r4, #0]
 800b5ec:	0699      	lsls	r1, r3, #26
 800b5ee:	d50c      	bpl.n	800b60a <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b5f0:	496f      	ldr	r1, [pc, #444]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b5f2:	69e0      	ldr	r0, [r4, #28]
 800b5f4:	6a0a      	ldr	r2, [r1, #32]
 800b5f6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b5fa:	4290      	cmp	r0, r2
 800b5fc:	d905      	bls.n	800b60a <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b5fe:	6a0b      	ldr	r3, [r1, #32]
 800b600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b604:	4303      	orrs	r3, r0
 800b606:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	079a      	lsls	r2, r3, #30
 800b60c:	f140 8083 	bpl.w	800b716 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b610:	4867      	ldr	r0, [pc, #412]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b612:	68e1      	ldr	r1, [r4, #12]
 800b614:	6982      	ldr	r2, [r0, #24]
 800b616:	f002 020f 	and.w	r2, r2, #15
 800b61a:	4291      	cmp	r1, r2
 800b61c:	f240 80a9 	bls.w	800b772 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b620:	6983      	ldr	r3, [r0, #24]
 800b622:	f023 030f 	bic.w	r3, r3, #15
 800b626:	4319      	orrs	r1, r3
 800b628:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b62a:	6823      	ldr	r3, [r4, #0]
 800b62c:	07df      	lsls	r7, r3, #31
 800b62e:	d474      	bmi.n	800b71a <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b630:	079f      	lsls	r7, r3, #30
 800b632:	d507      	bpl.n	800b644 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b634:	4a5e      	ldr	r2, [pc, #376]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b636:	68e1      	ldr	r1, [r4, #12]
 800b638:	6993      	ldr	r3, [r2, #24]
 800b63a:	f003 030f 	and.w	r3, r3, #15
 800b63e:	428b      	cmp	r3, r1
 800b640:	f200 80a0 	bhi.w	800b784 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b644:	4a59      	ldr	r2, [pc, #356]	; (800b7ac <HAL_RCC_ClockConfig+0x250>)
 800b646:	6813      	ldr	r3, [r2, #0]
 800b648:	f003 030f 	and.w	r3, r3, #15
 800b64c:	42ab      	cmp	r3, r5
 800b64e:	d909      	bls.n	800b664 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b650:	6813      	ldr	r3, [r2, #0]
 800b652:	f023 030f 	bic.w	r3, r3, #15
 800b656:	432b      	orrs	r3, r5
 800b658:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b65a:	6813      	ldr	r3, [r2, #0]
 800b65c:	f003 030f 	and.w	r3, r3, #15
 800b660:	42ab      	cmp	r3, r5
 800b662:	d192      	bne.n	800b58a <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	075e      	lsls	r6, r3, #29
 800b668:	d50c      	bpl.n	800b684 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b66a:	4951      	ldr	r1, [pc, #324]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b66c:	6920      	ldr	r0, [r4, #16]
 800b66e:	698a      	ldr	r2, [r1, #24]
 800b670:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b674:	4290      	cmp	r0, r2
 800b676:	d205      	bcs.n	800b684 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b678:	698b      	ldr	r3, [r1, #24]
 800b67a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b67e:	4303      	orrs	r3, r0
 800b680:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	071d      	lsls	r5, r3, #28
 800b686:	d50c      	bpl.n	800b6a2 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b688:	4949      	ldr	r1, [pc, #292]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b68a:	6960      	ldr	r0, [r4, #20]
 800b68c:	69ca      	ldr	r2, [r1, #28]
 800b68e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800b692:	4290      	cmp	r0, r2
 800b694:	d205      	bcs.n	800b6a2 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b696:	69cb      	ldr	r3, [r1, #28]
 800b698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b69c:	4303      	orrs	r3, r0
 800b69e:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	06d8      	lsls	r0, r3, #27
 800b6a4:	d50c      	bpl.n	800b6c0 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b6a6:	4942      	ldr	r1, [pc, #264]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b6a8:	69a0      	ldr	r0, [r4, #24]
 800b6aa:	69ca      	ldr	r2, [r1, #28]
 800b6ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800b6b0:	4290      	cmp	r0, r2
 800b6b2:	d205      	bcs.n	800b6c0 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b6b4:	69cb      	ldr	r3, [r1, #28]
 800b6b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800b6ba:	4303      	orrs	r3, r0
 800b6bc:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b6be:	6823      	ldr	r3, [r4, #0]
 800b6c0:	0699      	lsls	r1, r3, #26
 800b6c2:	d50b      	bpl.n	800b6dc <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b6c4:	4a3a      	ldr	r2, [pc, #232]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b6c6:	69e1      	ldr	r1, [r4, #28]
 800b6c8:	6a13      	ldr	r3, [r2, #32]
 800b6ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6ce:	4299      	cmp	r1, r3
 800b6d0:	d204      	bcs.n	800b6dc <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b6d2:	6a13      	ldr	r3, [r2, #32]
 800b6d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6d8:	430b      	orrs	r3, r1
 800b6da:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6dc:	f7ff fe9e 	bl	800b41c <HAL_RCC_GetSysClockFreq>
 800b6e0:	4a33      	ldr	r2, [pc, #204]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	4833      	ldr	r0, [pc, #204]	; (800b7b4 <HAL_RCC_ClockConfig+0x258>)
 800b6e6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6e8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6ea:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800b6ee:	4d32      	ldr	r5, [pc, #200]	; (800b7b8 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6f0:	f002 020f 	and.w	r2, r2, #15
 800b6f4:	4c31      	ldr	r4, [pc, #196]	; (800b7bc <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6f6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6f8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6fa:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800b6fe:	4830      	ldr	r0, [pc, #192]	; (800b7c0 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b700:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b704:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800b706:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800b708:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b70a:	40d3      	lsrs	r3, r2
 800b70c:	6023      	str	r3, [r4, #0]
}
 800b70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b712:	f7fc bde9 	b.w	80082e8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b716:	07db      	lsls	r3, r3, #31
 800b718:	d594      	bpl.n	800b644 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b71a:	4a25      	ldr	r2, [pc, #148]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b71c:	68a1      	ldr	r1, [r4, #8]
 800b71e:	6993      	ldr	r3, [r2, #24]
 800b720:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b724:	430b      	orrs	r3, r1
 800b726:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b728:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b72a:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b72c:	2902      	cmp	r1, #2
 800b72e:	d034      	beq.n	800b79a <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b730:	2903      	cmp	r1, #3
 800b732:	d02d      	beq.n	800b790 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b734:	2901      	cmp	r1, #1
 800b736:	d035      	beq.n	800b7a4 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b738:	075b      	lsls	r3, r3, #29
 800b73a:	f57f af26 	bpl.w	800b58a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b73e:	4e1c      	ldr	r6, [pc, #112]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b740:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b744:	6933      	ldr	r3, [r6, #16]
 800b746:	f023 0307 	bic.w	r3, r3, #7
 800b74a:	430b      	orrs	r3, r1
 800b74c:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800b74e:	f7fc fe2d 	bl	80083ac <HAL_GetTick>
 800b752:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b754:	e004      	b.n	800b760 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b756:	f7fc fe29 	bl	80083ac <HAL_GetTick>
 800b75a:	1bc0      	subs	r0, r0, r7
 800b75c:	4540      	cmp	r0, r8
 800b75e:	d81f      	bhi.n	800b7a0 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b760:	6933      	ldr	r3, [r6, #16]
 800b762:	6862      	ldr	r2, [r4, #4]
 800b764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b768:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b76c:	d1f3      	bne.n	800b756 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b76e:	6823      	ldr	r3, [r4, #0]
 800b770:	e75e      	b.n	800b630 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b772:	07da      	lsls	r2, r3, #31
 800b774:	d4d1      	bmi.n	800b71a <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b776:	4a0e      	ldr	r2, [pc, #56]	; (800b7b0 <HAL_RCC_ClockConfig+0x254>)
 800b778:	6993      	ldr	r3, [r2, #24]
 800b77a:	f003 030f 	and.w	r3, r3, #15
 800b77e:	428b      	cmp	r3, r1
 800b780:	f67f af60 	bls.w	800b644 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b784:	6993      	ldr	r3, [r2, #24]
 800b786:	f023 030f 	bic.w	r3, r3, #15
 800b78a:	4319      	orrs	r1, r3
 800b78c:	6191      	str	r1, [r2, #24]
 800b78e:	e759      	b.n	800b644 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b790:	0198      	lsls	r0, r3, #6
 800b792:	d4d4      	bmi.n	800b73e <HAL_RCC_ClockConfig+0x1e2>
 800b794:	e6f9      	b.n	800b58a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800b796:	2001      	movs	r0, #1
}
 800b798:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b79a:	039e      	lsls	r6, r3, #14
 800b79c:	d4cf      	bmi.n	800b73e <HAL_RCC_ClockConfig+0x1e2>
 800b79e:	e6f4      	b.n	800b58a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800b7a0:	2003      	movs	r0, #3
 800b7a2:	e6f3      	b.n	800b58c <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b7a4:	05da      	lsls	r2, r3, #23
 800b7a6:	d4ca      	bmi.n	800b73e <HAL_RCC_ClockConfig+0x1e2>
 800b7a8:	e6ef      	b.n	800b58a <HAL_RCC_ClockConfig+0x2e>
 800b7aa:	bf00      	nop
 800b7ac:	52002000 	.word	0x52002000
 800b7b0:	58024400 	.word	0x58024400
 800b7b4:	0801eee4 	.word	0x0801eee4
 800b7b8:	20000284 	.word	0x20000284
 800b7bc:	20000288 	.word	0x20000288
 800b7c0:	20000290 	.word	0x20000290

0800b7c4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7c4:	4a18      	ldr	r2, [pc, #96]	; (800b828 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7c6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b7c8:	6913      	ldr	r3, [r2, #16]
 800b7ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7ce:	2b10      	cmp	r3, #16
 800b7d0:	d01a      	beq.n	800b808 <HAL_RCC_GetHCLKFreq+0x44>
 800b7d2:	2b18      	cmp	r3, #24
 800b7d4:	d023      	beq.n	800b81e <HAL_RCC_GetHCLKFreq+0x5a>
 800b7d6:	b1cb      	cbz	r3, 800b80c <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800b7d8:	4814      	ldr	r0, [pc, #80]	; (800b82c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7da:	4b13      	ldr	r3, [pc, #76]	; (800b828 <HAL_RCC_GetHCLKFreq+0x64>)
 800b7dc:	4914      	ldr	r1, [pc, #80]	; (800b830 <HAL_RCC_GetHCLKFreq+0x6c>)
 800b7de:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7e0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7e2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7e6:	4c13      	ldr	r4, [pc, #76]	; (800b834 <HAL_RCC_GetHCLKFreq+0x70>)
 800b7e8:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b7ec:	4d12      	ldr	r5, [pc, #72]	; (800b838 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7ee:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7f0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7f2:	f002 021f 	and.w	r2, r2, #31
 800b7f6:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7fa:	f003 001f 	and.w	r0, r3, #31
 800b7fe:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800b802:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b804:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b806:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b808:	480c      	ldr	r0, [pc, #48]	; (800b83c <HAL_RCC_GetHCLKFreq+0x78>)
 800b80a:	e7e6      	b.n	800b7da <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b80c:	6813      	ldr	r3, [r2, #0]
 800b80e:	069b      	lsls	r3, r3, #26
 800b810:	d508      	bpl.n	800b824 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b812:	6812      	ldr	r2, [r2, #0]
 800b814:	480a      	ldr	r0, [pc, #40]	; (800b840 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b816:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800b81a:	40d0      	lsrs	r0, r2
 800b81c:	e7dd      	b.n	800b7da <HAL_RCC_GetHCLKFreq+0x16>
 800b81e:	f7ff fa87 	bl	800ad30 <HAL_RCC_GetSysClockFreq.part.0>
 800b822:	e7da      	b.n	800b7da <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b824:	4806      	ldr	r0, [pc, #24]	; (800b840 <HAL_RCC_GetHCLKFreq+0x7c>)
 800b826:	e7d8      	b.n	800b7da <HAL_RCC_GetHCLKFreq+0x16>
 800b828:	58024400 	.word	0x58024400
 800b82c:	003d0900 	.word	0x003d0900
 800b830:	0801eee4 	.word	0x0801eee4
 800b834:	20000288 	.word	0x20000288
 800b838:	20000284 	.word	0x20000284
 800b83c:	017d7840 	.word	0x017d7840
 800b840:	03d09000 	.word	0x03d09000

0800b844 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b844:	4a1c      	ldr	r2, [pc, #112]	; (800b8b8 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b846:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b848:	6913      	ldr	r3, [r2, #16]
 800b84a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b84e:	2b10      	cmp	r3, #16
 800b850:	d021      	beq.n	800b896 <HAL_RCC_GetPCLK1Freq+0x52>
 800b852:	2b18      	cmp	r3, #24
 800b854:	d02b      	beq.n	800b8ae <HAL_RCC_GetPCLK1Freq+0x6a>
 800b856:	b303      	cbz	r3, 800b89a <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800b858:	4818      	ldr	r0, [pc, #96]	; (800b8bc <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b85a:	4a17      	ldr	r2, [pc, #92]	; (800b8b8 <HAL_RCC_GetPCLK1Freq+0x74>)
 800b85c:	4918      	ldr	r1, [pc, #96]	; (800b8c0 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800b85e:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800b860:	4d18      	ldr	r5, [pc, #96]	; (800b8c4 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b862:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b866:	4c18      	ldr	r4, [pc, #96]	; (800b8c8 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b868:	5ccb      	ldrb	r3, [r1, r3]
 800b86a:	f003 031f 	and.w	r3, r3, #31
 800b86e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b872:	6990      	ldr	r0, [r2, #24]
 800b874:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800b878:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b87a:	5c08      	ldrb	r0, [r1, r0]
 800b87c:	f000 001f 	and.w	r0, r0, #31
 800b880:	40c3      	lsrs	r3, r0
 800b882:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b884:	69d2      	ldr	r2, [r2, #28]
 800b886:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800b88a:	5c88      	ldrb	r0, [r1, r2]
 800b88c:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b890:	fa23 f000 	lsr.w	r0, r3, r0
 800b894:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b896:	480d      	ldr	r0, [pc, #52]	; (800b8cc <HAL_RCC_GetPCLK1Freq+0x88>)
 800b898:	e7df      	b.n	800b85a <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b89a:	6813      	ldr	r3, [r2, #0]
 800b89c:	069b      	lsls	r3, r3, #26
 800b89e:	d509      	bpl.n	800b8b4 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8a0:	6810      	ldr	r0, [r2, #0]
 800b8a2:	4b0b      	ldr	r3, [pc, #44]	; (800b8d0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800b8a4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800b8a8:	fa23 f000 	lsr.w	r0, r3, r0
 800b8ac:	e7d5      	b.n	800b85a <HAL_RCC_GetPCLK1Freq+0x16>
 800b8ae:	f7ff fa3f 	bl	800ad30 <HAL_RCC_GetSysClockFreq.part.0>
 800b8b2:	e7d2      	b.n	800b85a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b8b4:	4806      	ldr	r0, [pc, #24]	; (800b8d0 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800b8b6:	e7d0      	b.n	800b85a <HAL_RCC_GetPCLK1Freq+0x16>
 800b8b8:	58024400 	.word	0x58024400
 800b8bc:	003d0900 	.word	0x003d0900
 800b8c0:	0801eee4 	.word	0x0801eee4
 800b8c4:	20000284 	.word	0x20000284
 800b8c8:	20000288 	.word	0x20000288
 800b8cc:	017d7840 	.word	0x017d7840
 800b8d0:	03d09000 	.word	0x03d09000

0800b8d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8d6:	4c3a      	ldr	r4, [pc, #232]	; (800b9c0 <RCCEx_PLL2_Config+0xec>)
 800b8d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8da:	f003 0303 	and.w	r3, r3, #3
 800b8de:	2b03      	cmp	r3, #3
 800b8e0:	d067      	beq.n	800b9b2 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	460f      	mov	r7, r1
 800b8e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b8ec:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8ee:	f7fc fd5d 	bl	80083ac <HAL_GetTick>
 800b8f2:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b8f4:	e004      	b.n	800b900 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8f6:	f7fc fd59 	bl	80083ac <HAL_GetTick>
 800b8fa:	1b43      	subs	r3, r0, r5
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d856      	bhi.n	800b9ae <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b900:	6823      	ldr	r3, [r4, #0]
 800b902:	011a      	lsls	r2, r3, #4
 800b904:	d4f7      	bmi.n	800b8f6 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b906:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b908:	6832      	ldr	r2, [r6, #0]
 800b90a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b90e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b912:	62a3      	str	r3, [r4, #40]	; 0x28
 800b914:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800b918:	3b01      	subs	r3, #1
 800b91a:	3a01      	subs	r2, #1
 800b91c:	025b      	lsls	r3, r3, #9
 800b91e:	0412      	lsls	r2, r2, #16
 800b920:	b29b      	uxth	r3, r3
 800b922:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800b926:	4313      	orrs	r3, r2
 800b928:	6872      	ldr	r2, [r6, #4]
 800b92a:	3a01      	subs	r2, #1
 800b92c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b930:	4313      	orrs	r3, r2
 800b932:	6932      	ldr	r2, [r6, #16]
 800b934:	3a01      	subs	r2, #1
 800b936:	0612      	lsls	r2, r2, #24
 800b938:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800b93c:	4313      	orrs	r3, r2
 800b93e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b940:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b942:	6972      	ldr	r2, [r6, #20]
 800b944:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b948:	4313      	orrs	r3, r2
 800b94a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b94c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b94e:	69b3      	ldr	r3, [r6, #24]
 800b950:	f022 0220 	bic.w	r2, r2, #32
 800b954:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b956:	4b1b      	ldr	r3, [pc, #108]	; (800b9c4 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b958:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b95a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b95c:	f022 0210 	bic.w	r2, r2, #16
 800b960:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b962:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b964:	69f2      	ldr	r2, [r6, #28]
 800b966:	400b      	ands	r3, r1
 800b968:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b96c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b96e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b970:	f043 0310 	orr.w	r3, r3, #16
 800b974:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b978:	b1ef      	cbz	r7, 800b9b6 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b97a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b97c:	bf0c      	ite	eq
 800b97e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b982:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800b986:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b988:	4c0d      	ldr	r4, [pc, #52]	; (800b9c0 <RCCEx_PLL2_Config+0xec>)
 800b98a:	6823      	ldr	r3, [r4, #0]
 800b98c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b990:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b992:	f7fc fd0b 	bl	80083ac <HAL_GetTick>
 800b996:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b998:	e004      	b.n	800b9a4 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b99a:	f7fc fd07 	bl	80083ac <HAL_GetTick>
 800b99e:	1b40      	subs	r0, r0, r5
 800b9a0:	2802      	cmp	r0, #2
 800b9a2:	d804      	bhi.n	800b9ae <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	011b      	lsls	r3, r3, #4
 800b9a8:	d5f7      	bpl.n	800b99a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800b9aa:	2000      	movs	r0, #0
}
 800b9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800b9ae:	2003      	movs	r0, #3
}
 800b9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800b9b2:	2001      	movs	r0, #1
}
 800b9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b9b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9bc:	e7e4      	b.n	800b988 <RCCEx_PLL2_Config+0xb4>
 800b9be:	bf00      	nop
 800b9c0:	58024400 	.word	0x58024400
 800b9c4:	ffff0007 	.word	0xffff0007

0800b9c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b9ca:	4c3a      	ldr	r4, [pc, #232]	; (800bab4 <RCCEx_PLL3_Config+0xec>)
 800b9cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b9ce:	f003 0303 	and.w	r3, r3, #3
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d067      	beq.n	800baa6 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	4606      	mov	r6, r0
 800b9da:	460f      	mov	r7, r1
 800b9dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9e0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9e2:	f7fc fce3 	bl	80083ac <HAL_GetTick>
 800b9e6:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9e8:	e004      	b.n	800b9f4 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b9ea:	f7fc fcdf 	bl	80083ac <HAL_GetTick>
 800b9ee:	1b43      	subs	r3, r0, r5
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d856      	bhi.n	800baa2 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	009a      	lsls	r2, r3, #2
 800b9f8:	d4f7      	bmi.n	800b9ea <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b9fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b9fc:	6832      	ldr	r2, [r6, #0]
 800b9fe:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800ba02:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ba06:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba08:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	3a01      	subs	r2, #1
 800ba10:	025b      	lsls	r3, r3, #9
 800ba12:	0412      	lsls	r2, r2, #16
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	6872      	ldr	r2, [r6, #4]
 800ba1e:	3a01      	subs	r2, #1
 800ba20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba24:	4313      	orrs	r3, r2
 800ba26:	6932      	ldr	r2, [r6, #16]
 800ba28:	3a01      	subs	r2, #1
 800ba2a:	0612      	lsls	r2, r2, #24
 800ba2c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ba30:	4313      	orrs	r3, r2
 800ba32:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ba34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ba36:	6972      	ldr	r2, [r6, #20]
 800ba38:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ba40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ba42:	69b3      	ldr	r3, [r6, #24]
 800ba44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ba48:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ba4a:	4b1b      	ldr	r3, [pc, #108]	; (800bab8 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ba4c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ba4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ba50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ba54:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ba56:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ba58:	69f2      	ldr	r2, [r6, #28]
 800ba5a:	400b      	ands	r3, r1
 800ba5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ba60:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ba62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ba64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba68:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ba6c:	b1ef      	cbz	r7, 800baaa <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba6e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba70:	bf0c      	ite	eq
 800ba72:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba76:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800ba7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba7c:	4c0d      	ldr	r4, [pc, #52]	; (800bab4 <RCCEx_PLL3_Config+0xec>)
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba84:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba86:	f7fc fc91 	bl	80083ac <HAL_GetTick>
 800ba8a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba8c:	e004      	b.n	800ba98 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba8e:	f7fc fc8d 	bl	80083ac <HAL_GetTick>
 800ba92:	1b40      	subs	r0, r0, r5
 800ba94:	2802      	cmp	r0, #2
 800ba96:	d804      	bhi.n	800baa2 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	d5f7      	bpl.n	800ba8e <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800ba9e:	2000      	movs	r0, #0
}
 800baa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800baa2:	2003      	movs	r0, #3
}
 800baa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800baa6:	2001      	movs	r0, #1
}
 800baa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800baaa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800baae:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bab0:	e7e4      	b.n	800ba7c <RCCEx_PLL3_Config+0xb4>
 800bab2:	bf00      	nop
 800bab4:	58024400 	.word	0x58024400
 800bab8:	ffff0007 	.word	0xffff0007

0800babc <HAL_RCCEx_PeriphCLKConfig>:
{
 800babc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bac0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800bac4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bac6:	011d      	lsls	r5, r3, #4
 800bac8:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800bacc:	d521      	bpl.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bace:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800bad0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bad4:	f000 8572 	beq.w	800c5bc <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800bad8:	d80e      	bhi.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800bada:	2900      	cmp	r1, #0
 800badc:	f000 85cd 	beq.w	800c67a <HAL_RCCEx_PeriphCLKConfig+0xbbe>
 800bae0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bae4:	f040 85c6 	bne.w	800c674 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bae8:	2102      	movs	r1, #2
 800baea:	3008      	adds	r0, #8
 800baec:	f7ff fef2 	bl	800b8d4 <RCCEx_PLL2_Config>
 800baf0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800baf2:	b966      	cbnz	r6, 800bb0e <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800baf4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800baf6:	e003      	b.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800baf8:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800bafc:	f040 85ba 	bne.w	800c674 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bb00:	4aa3      	ldr	r2, [pc, #652]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bb02:	2600      	movs	r6, #0
 800bb04:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800bb06:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800bb0a:	4319      	orrs	r1, r3
 800bb0c:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb0e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bb12:	05d8      	lsls	r0, r3, #23
 800bb14:	d50a      	bpl.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bb16:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bb18:	2904      	cmp	r1, #4
 800bb1a:	d806      	bhi.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800bb1c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bb20:	055f0558 	.word	0x055f0558
 800bb24:	030e0576 	.word	0x030e0576
 800bb28:	030e      	.short	0x030e
 800bb2a:	2601      	movs	r6, #1
 800bb2c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bb2e:	0599      	lsls	r1, r3, #22
 800bb30:	d517      	bpl.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800bb32:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bb34:	2980      	cmp	r1, #128	; 0x80
 800bb36:	f000 8570 	beq.w	800c61a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
 800bb3a:	f200 80e1 	bhi.w	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800bb3e:	2900      	cmp	r1, #0
 800bb40:	f000 8442 	beq.w	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800bb44:	2940      	cmp	r1, #64	; 0x40
 800bb46:	f040 80e2 	bne.w	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	f104 0008 	add.w	r0, r4, #8
 800bb50:	f7ff fec0 	bl	800b8d4 <RCCEx_PLL2_Config>
 800bb54:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800bb56:	2d00      	cmp	r5, #0
 800bb58:	f000 83f4 	beq.w	800c344 <HAL_RCCEx_PeriphCLKConfig+0x888>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bb5c:	462e      	mov	r6, r5
 800bb5e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bb62:	055f      	lsls	r7, r3, #21
 800bb64:	d51a      	bpl.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bb66:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800bb6a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800bb6e:	f000 851d 	beq.w	800c5ac <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800bb72:	f200 80cf 	bhi.w	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800bb76:	2900      	cmp	r1, #0
 800bb78:	f000 842d 	beq.w	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800bb7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bb80:	f040 80d0 	bne.w	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb84:	2100      	movs	r1, #0
 800bb86:	f104 0008 	add.w	r0, r4, #8
 800bb8a:	f7ff fea3 	bl	800b8d4 <RCCEx_PLL2_Config>
 800bb8e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800bb90:	2d00      	cmp	r5, #0
 800bb92:	f000 83f6 	beq.w	800c382 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bb96:	462e      	mov	r6, r5
 800bb98:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bb9c:	0518      	lsls	r0, r3, #20
 800bb9e:	d51a      	bpl.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bba0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800bba4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800bba8:	f000 8528 	beq.w	800c5fc <HAL_RCCEx_PeriphCLKConfig+0xb40>
 800bbac:	f200 80bd 	bhi.w	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800bbb0:	2900      	cmp	r1, #0
 800bbb2:	f000 8403 	beq.w	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x900>
 800bbb6:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800bbba:	f040 80be 	bne.w	800bd3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	f104 0008 	add.w	r0, r4, #8
 800bbc4:	f7ff fe86 	bl	800b8d4 <RCCEx_PLL2_Config>
 800bbc8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800bbca:	2d00      	cmp	r5, #0
 800bbcc:	f000 83af 	beq.w	800c32e <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bbd0:	462e      	mov	r6, r5
 800bbd2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bbd6:	0199      	lsls	r1, r3, #6
 800bbd8:	d51a      	bpl.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 800bbda:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bbdc:	2920      	cmp	r1, #32
 800bbde:	f000 84b0 	beq.w	800c542 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800bbe2:	f200 80ad 	bhi.w	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800bbe6:	b139      	cbz	r1, 800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bbe8:	2910      	cmp	r1, #16
 800bbea:	f040 80ac 	bne.w	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbee:	4a68      	ldr	r2, [pc, #416]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bbf0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bbf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbf6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800bbf8:	2d00      	cmp	r5, #0
 800bbfa:	f040 8414 	bne.w	800c426 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bbfe:	4a64      	ldr	r2, [pc, #400]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc00:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bc02:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800bc04:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800bc08:	430b      	orrs	r3, r1
 800bc0a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bc0c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bc10:	04df      	lsls	r7, r3, #19
 800bc12:	d519      	bpl.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bc14:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800bc16:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bc1a:	f000 84e7 	beq.w	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
 800bc1e:	f200 8095 	bhi.w	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x290>
 800bc22:	2900      	cmp	r1, #0
 800bc24:	f000 83c4 	beq.w	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800bc28:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800bc2c:	f040 8096 	bne.w	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc30:	2100      	movs	r1, #0
 800bc32:	f104 0008 	add.w	r0, r4, #8
 800bc36:	f7ff fe4d 	bl	800b8d4 <RCCEx_PLL2_Config>
 800bc3a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800bc3c:	2d00      	cmp	r5, #0
 800bc3e:	f000 838b 	beq.w	800c358 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bc42:	462e      	mov	r6, r5
 800bc44:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bc48:	0498      	lsls	r0, r3, #18
 800bc4a:	d51d      	bpl.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bc4c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bc4e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800bc52:	f000 8462 	beq.w	800c51a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800bc56:	f200 8084 	bhi.w	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bc5a:	b149      	cbz	r1, 800bc70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800bc5c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bc60:	f040 8088 	bne.w	800bd74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc64:	2101      	movs	r1, #1
 800bc66:	f104 0008 	add.w	r0, r4, #8
 800bc6a:	f7ff fe33 	bl	800b8d4 <RCCEx_PLL2_Config>
 800bc6e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800bc70:	2d00      	cmp	r5, #0
 800bc72:	f040 83e7 	bne.w	800c444 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bc76:	4a46      	ldr	r2, [pc, #280]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bc78:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bc7a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800bc7c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800bc80:	430b      	orrs	r3, r1
 800bc82:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bc84:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bc88:	0459      	lsls	r1, r3, #17
 800bc8a:	d51d      	bpl.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bc8c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800bc90:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800bc94:	f000 844b 	beq.w	800c52e <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800bc98:	d86f      	bhi.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800bc9a:	b141      	cbz	r1, 800bcae <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800bc9c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bca0:	d173      	bne.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bca2:	2101      	movs	r1, #1
 800bca4:	f104 0008 	add.w	r0, r4, #8
 800bca8:	f7ff fe14 	bl	800b8d4 <RCCEx_PLL2_Config>
 800bcac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800bcae:	2d00      	cmp	r5, #0
 800bcb0:	f040 83d0 	bne.w	800c454 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bcb4:	4a36      	ldr	r2, [pc, #216]	; (800bd90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bcb6:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800bcba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800bcbc:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800bcc0:	430b      	orrs	r3, r1
 800bcc2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bcc4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bcc8:	041f      	lsls	r7, r3, #16
 800bcca:	d50d      	bpl.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 800bccc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800bcce:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800bcd2:	f000 8419 	beq.w	800c508 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800bcd6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800bcda:	f000 8237 	beq.w	800c14c <HAL_RCCEx_PeriphCLKConfig+0x690>
 800bcde:	2900      	cmp	r1, #0
 800bce0:	f000 823a 	beq.w	800c158 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800bce4:	2601      	movs	r6, #1
 800bce6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bce8:	01d8      	lsls	r0, r3, #7
 800bcea:	d55f      	bpl.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->FmcClockSelection)
 800bcec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bcee:	2903      	cmp	r1, #3
 800bcf0:	f200 84ee 	bhi.w	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 800bcf4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bcf8:	04390054 	.word	0x04390054
 800bcfc:	0054004e 	.word	0x0054004e
    switch (PeriphClkInit->Sai23ClockSelection)
 800bd00:	29c0      	cmp	r1, #192	; 0xc0
 800bd02:	f43f af28 	beq.w	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800bd06:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bd0a:	f43f af24 	beq.w	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800bd0e:	2601      	movs	r6, #1
 800bd10:	4635      	mov	r5, r6
 800bd12:	e726      	b.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bd14:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800bd18:	f43f af3a 	beq.w	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bd1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800bd20:	f43f af36 	beq.w	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bd24:	2601      	movs	r6, #1
 800bd26:	4635      	mov	r5, r6
 800bd28:	e738      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bd2a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800bd2e:	f43f af4c 	beq.w	800bbca <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800bd32:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800bd36:	f43f af48 	beq.w	800bbca <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800bd3a:	2601      	movs	r6, #1
 800bd3c:	4635      	mov	r5, r6
 800bd3e:	e74a      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 800bd40:	2930      	cmp	r1, #48	; 0x30
 800bd42:	f43f af59 	beq.w	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bd46:	2601      	movs	r6, #1
 800bd48:	4635      	mov	r5, r6
 800bd4a:	e761      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bd4c:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800bd50:	f43f af74 	beq.w	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800bd54:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bd58:	f43f af70 	beq.w	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800bd5c:	2601      	movs	r6, #1
 800bd5e:	4635      	mov	r5, r6
 800bd60:	e772      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bd62:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800bd66:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800bd6a:	d081      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800bd6c:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800bd70:	f43f af7e 	beq.w	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800bd74:	2601      	movs	r6, #1
 800bd76:	4635      	mov	r5, r6
 800bd78:	e786      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bd7a:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800bd7e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800bd82:	d094      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800bd84:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800bd88:	d091      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800bd8a:	2601      	movs	r6, #1
 800bd8c:	4635      	mov	r5, r6
 800bd8e:	e79b      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800bd90:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd94:	2102      	movs	r1, #2
 800bd96:	f104 0008 	add.w	r0, r4, #8
 800bd9a:	f7ff fd9b 	bl	800b8d4 <RCCEx_PLL2_Config>
 800bd9e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800bda0:	2d00      	cmp	r5, #0
 800bda2:	f000 8345 	beq.w	800c430 <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bda6:	462e      	mov	r6, r5
 800bda8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bdac:	0259      	lsls	r1, r3, #9
 800bdae:	f100 826c 	bmi.w	800c28a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bdb2:	07d8      	lsls	r0, r3, #31
 800bdb4:	d52f      	bpl.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch (PeriphClkInit->Usart16ClockSelection)
 800bdb6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800bdb8:	2928      	cmp	r1, #40	; 0x28
 800bdba:	d82a      	bhi.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800bdbc:	e8df f011 	tbh	[pc, r1, lsl #1]
 800bdc0:	0029020a 	.word	0x0029020a
 800bdc4:	00290029 	.word	0x00290029
 800bdc8:	00290029 	.word	0x00290029
 800bdcc:	00290029 	.word	0x00290029
 800bdd0:	0029044a 	.word	0x0029044a
 800bdd4:	00290029 	.word	0x00290029
 800bdd8:	00290029 	.word	0x00290029
 800bddc:	00290029 	.word	0x00290029
 800bde0:	00290204 	.word	0x00290204
 800bde4:	00290029 	.word	0x00290029
 800bde8:	00290029 	.word	0x00290029
 800bdec:	00290029 	.word	0x00290029
 800bdf0:	0029020a 	.word	0x0029020a
 800bdf4:	00290029 	.word	0x00290029
 800bdf8:	00290029 	.word	0x00290029
 800bdfc:	00290029 	.word	0x00290029
 800be00:	0029020a 	.word	0x0029020a
 800be04:	00290029 	.word	0x00290029
 800be08:	00290029 	.word	0x00290029
 800be0c:	00290029 	.word	0x00290029
 800be10:	020a      	.short	0x020a
 800be12:	2601      	movs	r6, #1
 800be14:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be16:	0799      	lsls	r1, r3, #30
 800be18:	d517      	bpl.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800be1a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800be1c:	2905      	cmp	r1, #5
 800be1e:	f200 845f 	bhi.w	800c6e0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800be22:	e8df f011 	tbh	[pc, r1, lsl #1]
 800be26:	000c      	.short	0x000c
 800be28:	0006040c 	.word	0x0006040c
 800be2c:	000c000c 	.word	0x000c000c
 800be30:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be32:	2101      	movs	r1, #1
 800be34:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800be38:	f7ff fdc6 	bl	800b9c8 <RCCEx_PLL3_Config>
 800be3c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800be3e:	2d00      	cmp	r5, #0
 800be40:	f000 82d8 	beq.w	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800be44:	462e      	mov	r6, r5
 800be46:	e9d4 3200 	ldrd	r3, r2, [r4]
 800be4a:	075f      	lsls	r7, r3, #29
 800be4c:	d518      	bpl.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800be4e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800be52:	2905      	cmp	r1, #5
 800be54:	f200 8440 	bhi.w	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 800be58:	e8df f011 	tbh	[pc, r1, lsl #1]
 800be5c:	03e7000c 	.word	0x03e7000c
 800be60:	000c0006 	.word	0x000c0006
 800be64:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be68:	2101      	movs	r1, #1
 800be6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800be6e:	f7ff fdab 	bl	800b9c8 <RCCEx_PLL3_Config>
 800be72:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800be74:	2d00      	cmp	r5, #0
 800be76:	f000 82c7 	beq.w	800c408 <HAL_RCCEx_PeriphCLKConfig+0x94c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800be7a:	462e      	mov	r6, r5
 800be7c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800be80:	0698      	lsls	r0, r3, #26
 800be82:	d51f      	bpl.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800be84:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800be88:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800be8c:	f000 8363 	beq.w	800c556 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 800be90:	f200 811c 	bhi.w	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x610>
 800be94:	b149      	cbz	r1, 800beaa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800be96:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800be9a:	f040 8121 	bne.w	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be9e:	2100      	movs	r1, #0
 800bea0:	f104 0008 	add.w	r0, r4, #8
 800bea4:	f7ff fd16 	bl	800b8d4 <RCCEx_PLL2_Config>
 800bea8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800beaa:	2d00      	cmp	r5, #0
 800beac:	f040 82b7 	bne.w	800c41e <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800beb0:	4ab0      	ldr	r2, [pc, #704]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800beb2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800beb6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800beb8:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800bebc:	430b      	orrs	r3, r1
 800bebe:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bec0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bec4:	0659      	lsls	r1, r3, #25
 800bec6:	d51f      	bpl.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bec8:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800becc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800bed0:	f000 8306 	beq.w	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
 800bed4:	f200 8107 	bhi.w	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800bed8:	b149      	cbz	r1, 800beee <HAL_RCCEx_PeriphCLKConfig+0x432>
 800beda:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bede:	f040 810c 	bne.w	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bee2:	2100      	movs	r1, #0
 800bee4:	f104 0008 	add.w	r0, r4, #8
 800bee8:	f7ff fcf4 	bl	800b8d4 <RCCEx_PLL2_Config>
 800beec:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800beee:	2d00      	cmp	r5, #0
 800bef0:	f040 82b4 	bne.w	800c45c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bef4:	4a9f      	ldr	r2, [pc, #636]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800bef6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800befa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800befc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800bf00:	430b      	orrs	r3, r1
 800bf02:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf04:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bf08:	061f      	lsls	r7, r3, #24
 800bf0a:	d51f      	bpl.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bf0c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800bf10:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800bf14:	f000 82ee 	beq.w	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800bf18:	f200 80f2 	bhi.w	800c100 <HAL_RCCEx_PeriphCLKConfig+0x644>
 800bf1c:	b149      	cbz	r1, 800bf32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800bf1e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bf22:	f040 80f7 	bne.w	800c114 <HAL_RCCEx_PeriphCLKConfig+0x658>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf26:	2100      	movs	r1, #0
 800bf28:	f104 0008 	add.w	r0, r4, #8
 800bf2c:	f7ff fcd2 	bl	800b8d4 <RCCEx_PLL2_Config>
 800bf30:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800bf32:	2d00      	cmp	r5, #0
 800bf34:	f040 828a 	bne.w	800c44c <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bf38:	4a8e      	ldr	r2, [pc, #568]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800bf3a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800bf3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800bf40:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800bf44:	430b      	orrs	r3, r1
 800bf46:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bf48:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bf4c:	0718      	lsls	r0, r3, #28
 800bf4e:	d50d      	bpl.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bf50:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800bf54:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800bf58:	f000 8310 	beq.w	800c57c <HAL_RCCEx_PeriphCLKConfig+0xac0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bf5c:	4985      	ldr	r1, [pc, #532]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800bf5e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800bf60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bf64:	4313      	orrs	r3, r2
 800bf66:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf68:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bf6c:	06d9      	lsls	r1, r3, #27
 800bf6e:	d50d      	bpl.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bf70:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800bf74:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800bf78:	f000 830c 	beq.w	800c594 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf7c:	497d      	ldr	r1, [pc, #500]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800bf7e:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800bf80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf84:	4313      	orrs	r3, r2
 800bf86:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf88:	e9d4 3200 	ldrd	r3, r2, [r4]
 800bf8c:	031f      	lsls	r7, r3, #12
 800bf8e:	d50e      	bpl.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->AdcClockSelection)
 800bf90:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800bf94:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bf98:	f000 8102 	beq.w	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800bf9c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800bfa0:	f000 8104 	beq.w	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800bfa4:	2900      	cmp	r1, #0
 800bfa6:	f000 8290 	beq.w	800c4ca <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800bfaa:	2601      	movs	r6, #1
 800bfac:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bfae:	0358      	lsls	r0, r3, #13
 800bfb0:	d50f      	bpl.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (PeriphClkInit->UsbClockSelection)
 800bfb2:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800bfb6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800bfba:	f000 80dd 	beq.w	800c178 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800bfbe:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800bfc2:	f000 80df 	beq.w	800c184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800bfc6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800bfca:	f000 8275 	beq.w	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 800bfce:	2601      	movs	r6, #1
 800bfd0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bfd2:	03d9      	lsls	r1, r3, #15
 800bfd4:	d509      	bpl.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->SdmmcClockSelection)
 800bfd6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bfd8:	2900      	cmp	r1, #0
 800bfda:	f000 8258 	beq.w	800c48e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800bfde:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800bfe2:	f000 81d9 	beq.w	800c398 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800bfe6:	2601      	movs	r6, #1
 800bfe8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bfea:	009f      	lsls	r7, r3, #2
 800bfec:	f100 80ff 	bmi.w	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x732>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bff0:	0398      	lsls	r0, r3, #14
 800bff2:	d50e      	bpl.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
 800bff4:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800bff8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800bffc:	f000 823e 	beq.w	800c47c <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800c000:	f240 808b 	bls.w	800c11a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 800c004:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800c008:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c00c:	f000 8088 	beq.w	800c120 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c010:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c012:	02d9      	lsls	r1, r3, #11
 800c014:	d508      	bpl.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c016:	4a57      	ldr	r2, [pc, #348]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800c018:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c01a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c01c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c020:	430b      	orrs	r3, r1
 800c022:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c024:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c028:	00df      	lsls	r7, r3, #3
 800c02a:	d509      	bpl.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c02c:	4a51      	ldr	r2, [pc, #324]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800c02e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800c032:	6913      	ldr	r3, [r2, #16]
 800c034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c038:	430b      	orrs	r3, r1
 800c03a:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c03c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c040:	029d      	lsls	r5, r3, #10
 800c042:	d508      	bpl.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c044:	4a4b      	ldr	r2, [pc, #300]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800c046:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800c048:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c04a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c04e:	430b      	orrs	r3, r1
 800c050:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c052:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c056:	0058      	lsls	r0, r3, #1
 800c058:	d50b      	bpl.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c05a:	4b46      	ldr	r3, [pc, #280]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800c05c:	691a      	ldr	r2, [r3, #16]
 800c05e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c062:	611a      	str	r2, [r3, #16]
 800c064:	691a      	ldr	r2, [r3, #16]
 800c066:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 800c06a:	430a      	orrs	r2, r1
 800c06c:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c06e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	da08      	bge.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c076:	4a3f      	ldr	r2, [pc, #252]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800c078:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c07a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c07c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c080:	430b      	orrs	r3, r1
 800c082:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c084:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c088:	0219      	lsls	r1, r3, #8
 800c08a:	d508      	bpl.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c08c:	4a39      	ldr	r2, [pc, #228]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800c08e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800c092:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c094:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800c098:	430b      	orrs	r3, r1
 800c09a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c09c:	6862      	ldr	r2, [r4, #4]
 800c09e:	07d3      	lsls	r3, r2, #31
 800c0a0:	f100 80b1 	bmi.w	800c206 <HAL_RCCEx_PeriphCLKConfig+0x74a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c0a4:	0797      	lsls	r7, r2, #30
 800c0a6:	f100 80bb 	bmi.w	800c220 <HAL_RCCEx_PeriphCLKConfig+0x764>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c0aa:	0755      	lsls	r5, r2, #29
 800c0ac:	f100 80c5 	bmi.w	800c23a <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c0b0:	0710      	lsls	r0, r2, #28
 800c0b2:	f100 80cf 	bmi.w	800c254 <HAL_RCCEx_PeriphCLKConfig+0x798>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c0b6:	06d1      	lsls	r1, r2, #27
 800c0b8:	f100 80d9 	bmi.w	800c26e <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c0bc:	0692      	lsls	r2, r2, #26
 800c0be:	f100 812a 	bmi.w	800c316 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    return HAL_OK;
 800c0c2:	1e30      	subs	r0, r6, #0
 800c0c4:	bf18      	it	ne
 800c0c6:	2001      	movne	r0, #1
}
 800c0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c0cc:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800c0d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c0d4:	f43f aee9 	beq.w	800beaa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800c0d8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800c0dc:	f43f aee5 	beq.w	800beaa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800c0e0:	2601      	movs	r6, #1
 800c0e2:	4635      	mov	r5, r6
 800c0e4:	e6ee      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c0e6:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800c0ea:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800c0ee:	f43f aefe 	beq.w	800beee <HAL_RCCEx_PeriphCLKConfig+0x432>
 800c0f2:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800c0f6:	f43f aefa 	beq.w	800beee <HAL_RCCEx_PeriphCLKConfig+0x432>
 800c0fa:	2601      	movs	r6, #1
 800c0fc:	4635      	mov	r5, r6
 800c0fe:	e703      	b.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c100:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800c104:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800c108:	f43f af13 	beq.w	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c10c:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800c110:	f43f af0f 	beq.w	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c114:	2601      	movs	r6, #1
 800c116:	4635      	mov	r5, r6
 800c118:	e718      	b.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->RngClockSelection)
 800c11a:	2900      	cmp	r1, #0
 800c11c:	f47f af78 	bne.w	800c010 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
 800c120:	2d00      	cmp	r5, #0
 800c122:	f040 81c5 	bne.w	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c126:	4a13      	ldr	r2, [pc, #76]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800c128:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c12c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c12e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c132:	430b      	orrs	r3, r1
 800c134:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c136:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c13a:	e76a      	b.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c13c:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800c13e:	2d00      	cmp	r5, #0
 800c140:	f000 8114 	beq.w	800c36c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c144:	462e      	mov	r6, r5
 800c146:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c14a:	e4f0      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c14c:	2101      	movs	r1, #1
 800c14e:	f104 0008 	add.w	r0, r4, #8
 800c152:	f7ff fbbf 	bl	800b8d4 <RCCEx_PLL2_Config>
 800c156:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c158:	2d00      	cmp	r5, #0
 800c15a:	f040 8147 	bne.w	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c15e:	4a05      	ldr	r2, [pc, #20]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800c160:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800c162:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c164:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800c168:	430b      	orrs	r3, r1
 800c16a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c16c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c170:	e5ba      	b.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800c172:	bf00      	nop
 800c174:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c178:	2101      	movs	r1, #1
 800c17a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c17e:	f7ff fc23 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c182:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c184:	2d00      	cmp	r5, #0
 800c186:	f040 8171 	bne.w	800c46c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c18a:	4aba      	ldr	r2, [pc, #744]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c18c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800c190:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c192:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c196:	430b      	orrs	r3, r1
 800c198:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c19a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c19e:	e718      	b.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1a0:	2102      	movs	r1, #2
 800c1a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c1a6:	f7ff fc0f 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c1aa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c1ac:	2d00      	cmp	r5, #0
 800c1ae:	f040 8159 	bne.w	800c464 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c1b2:	4ab0      	ldr	r2, [pc, #704]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c1b4:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800c1b8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c1ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c1be:	430b      	orrs	r3, r1
 800c1c0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c1c2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c1c6:	e6f2      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1c8:	2101      	movs	r1, #1
 800c1ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c1ce:	f7ff fbfb 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c1d2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c1d4:	2d00      	cmp	r5, #0
 800c1d6:	f040 8105 	bne.w	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c1da:	4aa6      	ldr	r2, [pc, #664]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c1dc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c1de:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c1e0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800c1e4:	430b      	orrs	r3, r1
 800c1e6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c1e8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c1ec:	e613      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c1ee:	2102      	movs	r1, #2
 800c1f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c1f4:	f7ff fbe8 	bl	800b9c8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c1f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	f43f aef7 	beq.w	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = HAL_ERROR;
 800c202:	2601      	movs	r6, #1
 800c204:	e6f4      	b.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c206:	2100      	movs	r1, #0
 800c208:	f104 0008 	add.w	r0, r4, #8
 800c20c:	f7ff fb62 	bl	800b8d4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c210:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c212:	2800      	cmp	r0, #0
 800c214:	f43f af46 	beq.w	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c218:	0797      	lsls	r7, r2, #30
 800c21a:	4606      	mov	r6, r0
 800c21c:	f57f af45 	bpl.w	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c220:	2101      	movs	r1, #1
 800c222:	f104 0008 	add.w	r0, r4, #8
 800c226:	f7ff fb55 	bl	800b8d4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c22a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f43f af3c 	beq.w	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c232:	0755      	lsls	r5, r2, #29
 800c234:	4606      	mov	r6, r0
 800c236:	f57f af3b 	bpl.w	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c23a:	2102      	movs	r1, #2
 800c23c:	f104 0008 	add.w	r0, r4, #8
 800c240:	f7ff fb48 	bl	800b8d4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c244:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c246:	2800      	cmp	r0, #0
 800c248:	f43f af32 	beq.w	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c24c:	4606      	mov	r6, r0
 800c24e:	0710      	lsls	r0, r2, #28
 800c250:	f57f af31 	bpl.w	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c254:	2100      	movs	r1, #0
 800c256:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c25a:	f7ff fbb5 	bl	800b9c8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c25e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800c260:	2800      	cmp	r0, #0
 800c262:	f43f af28 	beq.w	800c0b6 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c266:	06d1      	lsls	r1, r2, #27
 800c268:	4606      	mov	r6, r0
 800c26a:	f57f af27 	bpl.w	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c26e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800c272:	2101      	movs	r1, #1
 800c274:	4628      	mov	r0, r5
 800c276:	f7ff fba7 	bl	800b9c8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c27a:	2800      	cmp	r0, #0
 800c27c:	f000 812e 	beq.w	800c4dc <HAL_RCCEx_PeriphCLKConfig+0xa20>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c280:	6863      	ldr	r3, [r4, #4]
 800c282:	069b      	lsls	r3, r3, #26
 800c284:	d550      	bpl.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800c286:	4606      	mov	r6, r0
 800c288:	e047      	b.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c28a:	4f7b      	ldr	r7, [pc, #492]	; (800c478 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c292:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800c294:	f7fc f88a 	bl	80083ac <HAL_GetTick>
 800c298:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c29a:	e006      	b.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c29c:	f7fc f886 	bl	80083ac <HAL_GetTick>
 800c2a0:	eba0 0008 	sub.w	r0, r0, r8
 800c2a4:	2864      	cmp	r0, #100	; 0x64
 800c2a6:	f200 81df 	bhi.w	800c668 <HAL_RCCEx_PeriphCLKConfig+0xbac>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	05da      	lsls	r2, r3, #23
 800c2ae:	d5f5      	bpl.n	800c29c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
 800c2b0:	2d00      	cmp	r5, #0
 800c2b2:	f040 8208 	bne.w	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c2b6:	4b6f      	ldr	r3, [pc, #444]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c2b8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800c2bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c2be:	4051      	eors	r1, r2
 800c2c0:	f411 7f40 	tst.w	r1, #768	; 0x300
 800c2c4:	d00d      	beq.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x826>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c2c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800c2c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c2ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c2ce:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800c2d2:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c2d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c2d6:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800c2da:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800c2dc:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c2de:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800c2e2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800c2e6:	f000 81d0 	beq.w	800c68a <HAL_RCCEx_PeriphCLKConfig+0xbce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c2ea:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800c2ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c2f2:	f000 81de 	beq.w	800c6b2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800c2f6:	4a5f      	ldr	r2, [pc, #380]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c2f8:	6913      	ldr	r3, [r2, #16]
 800c2fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c2fe:	6113      	str	r3, [r2, #16]
 800c300:	4a5c      	ldr	r2, [pc, #368]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c302:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800c306:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800c308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c30c:	430b      	orrs	r3, r1
 800c30e:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c310:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c314:	e54d      	b.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c316:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c31a:	2102      	movs	r1, #2
 800c31c:	4628      	mov	r0, r5
 800c31e:	f7ff fb53 	bl	800b9c8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c322:	2800      	cmp	r0, #0
 800c324:	f43f aecd 	beq.w	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x606>
  return HAL_ERROR;
 800c328:	2001      	movs	r0, #1
}
 800c32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c32e:	4a51      	ldr	r2, [pc, #324]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c330:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800c334:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c336:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800c33a:	430b      	orrs	r3, r1
 800c33c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c33e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c342:	e448      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c344:	4a4b      	ldr	r2, [pc, #300]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c346:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c348:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c34a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800c34e:	430b      	orrs	r3, r1
 800c350:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c352:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c356:	e404      	b.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c358:	4a46      	ldr	r2, [pc, #280]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c35a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800c35c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c35e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c362:	430b      	orrs	r3, r1
 800c364:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c366:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c36a:	e46d      	b.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c36c:	4a41      	ldr	r2, [pc, #260]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c36e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c370:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c372:	f023 0307 	bic.w	r3, r3, #7
 800c376:	430b      	orrs	r3, r1
 800c378:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c37a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c37e:	f7ff bbd6 	b.w	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c382:	4a3c      	ldr	r2, [pc, #240]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c384:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800c388:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c38a:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800c38e:	430b      	orrs	r3, r1
 800c390:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c392:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c396:	e401      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c398:	2102      	movs	r1, #2
 800c39a:	f104 0008 	add.w	r0, r4, #8
 800c39e:	f7ff fa99 	bl	800b8d4 <RCCEx_PLL2_Config>
 800c3a2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c3a4:	2d00      	cmp	r5, #0
 800c3a6:	d079      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c3a8:	462e      	mov	r6, r5
 800c3aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c3ae:	e61c      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3b0:	4a30      	ldr	r2, [pc, #192]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c3b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c3b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800c3ba:	e43f      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3bc:	4a2d      	ldr	r2, [pc, #180]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c3be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c3c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3c4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800c3c6:	e400      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3c8:	4a2a      	ldr	r2, [pc, #168]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c3ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c3cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3d0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800c3d2:	f7ff bbc0 	b.w	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3d6:	4a27      	ldr	r2, [pc, #156]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c3d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c3da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3de:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800c3e0:	f7ff bbd6 	b.w	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c3e4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c3e8:	462e      	mov	r6, r5
 800c3ea:	e514      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c3ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c3f0:	462e      	mov	r6, r5
 800c3f2:	e479      	b.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c3f4:	4a1f      	ldr	r2, [pc, #124]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c3f6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c3f8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c3fa:	f023 0307 	bic.w	r3, r3, #7
 800c3fe:	430b      	orrs	r3, r1
 800c400:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c402:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c406:	e520      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c408:	4a1a      	ldr	r2, [pc, #104]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c40a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c40e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c410:	f023 0307 	bic.w	r3, r3, #7
 800c414:	430b      	orrs	r3, r1
 800c416:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c418:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c41c:	e530      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c41e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c422:	462e      	mov	r6, r5
 800c424:	e54e      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c426:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c42a:	462e      	mov	r6, r5
 800c42c:	f7ff bbf0 	b.w	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c430:	4a10      	ldr	r2, [pc, #64]	; (800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800c432:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c434:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c436:	f023 0303 	bic.w	r3, r3, #3
 800c43a:	430b      	orrs	r3, r1
 800c43c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c43e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c442:	e4b3      	b.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c444:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c448:	462e      	mov	r6, r5
 800c44a:	e41d      	b.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c44c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c450:	462e      	mov	r6, r5
 800c452:	e57b      	b.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c454:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c458:	462e      	mov	r6, r5
 800c45a:	e435      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c45c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c460:	462e      	mov	r6, r5
 800c462:	e551      	b.n	800bf08 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c464:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c468:	462e      	mov	r6, r5
 800c46a:	e5a0      	b.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c46c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c470:	462e      	mov	r6, r5
 800c472:	e5ae      	b.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800c474:	58024400 	.word	0x58024400
 800c478:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c47c:	4a9a      	ldr	r2, [pc, #616]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800c47e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c484:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800c486:	2d00      	cmp	r5, #0
 800c488:	f43f ae4d 	beq.w	800c126 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800c48c:	e010      	b.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c48e:	4a96      	ldr	r2, [pc, #600]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800c490:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c496:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800c498:	2d00      	cmp	r5, #0
 800c49a:	d185      	bne.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c49c:	4a92      	ldr	r2, [pc, #584]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800c49e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c4a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c4a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4a6:	430b      	orrs	r3, r1
 800c4a8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c4aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c4ae:	e59c      	b.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x52e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c4b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c4b4:	462e      	mov	r6, r5
 800c4b6:	e5ac      	b.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4b8:	4a8b      	ldr	r2, [pc, #556]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800c4ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c4bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800c4c2:	2d00      	cmp	r5, #0
 800c4c4:	f43f ae61 	beq.w	800c18a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 800c4c8:	e7d0      	b.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4ca:	f104 0008 	add.w	r0, r4, #8
 800c4ce:	f7ff fa01 	bl	800b8d4 <RCCEx_PLL2_Config>
 800c4d2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c4d4:	2d00      	cmp	r5, #0
 800c4d6:	f43f ae6c 	beq.w	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800c4da:	e7c3      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c4dc:	6862      	ldr	r2, [r4, #4]
 800c4de:	e5ed      	b.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x600>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4e0:	2102      	movs	r1, #2
 800c4e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c4e6:	f7ff fa6f 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c4ea:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c4ec:	2d00      	cmp	r5, #0
 800c4ee:	f43f ad01 	beq.w	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800c4f2:	e7b3      	b.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4f4:	2102      	movs	r1, #2
 800c4f6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c4fa:	f7ff fa65 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c4fe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c500:	2d00      	cmp	r5, #0
 800c502:	f43f ad19 	beq.w	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c506:	e7a1      	b.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x990>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c508:	4a77      	ldr	r2, [pc, #476]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800c50a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c50c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c510:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800c512:	2d00      	cmp	r5, #0
 800c514:	f43f ae23 	beq.w	800c15e <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 800c518:	e768      	b.n	800c3ec <HAL_RCCEx_PeriphCLKConfig+0x930>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c51a:	2101      	movs	r1, #1
 800c51c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c520:	f7ff fa52 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c524:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c526:	2d00      	cmp	r5, #0
 800c528:	f43f aba5 	beq.w	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800c52c:	e78a      	b.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x988>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c52e:	2101      	movs	r1, #1
 800c530:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c534:	f7ff fa48 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c538:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c53a:	2d00      	cmp	r5, #0
 800c53c:	f43f abba 	beq.w	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c540:	e788      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x998>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c542:	2102      	movs	r1, #2
 800c544:	f104 0008 	add.w	r0, r4, #8
 800c548:	f7ff f9c4 	bl	800b8d4 <RCCEx_PLL2_Config>
 800c54c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c54e:	2d00      	cmp	r5, #0
 800c550:	f43f ab55 	beq.w	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x142>
 800c554:	e767      	b.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c556:	2102      	movs	r1, #2
 800c558:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c55c:	f7ff fa34 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c560:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c562:	2d00      	cmp	r5, #0
 800c564:	f43f aca4 	beq.w	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800c568:	e759      	b.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x962>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c56a:	4a5f      	ldr	r2, [pc, #380]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800c56c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c56e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c572:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800c574:	2d00      	cmp	r5, #0
 800c576:	f43f af5b 	beq.w	800c430 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800c57a:	e414      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c57c:	2102      	movs	r1, #2
 800c57e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c582:	f7ff fa21 	bl	800b9c8 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c586:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c58a:	2800      	cmp	r0, #0
 800c58c:	f43f ace6 	beq.w	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        status = HAL_ERROR;
 800c590:	2601      	movs	r6, #1
 800c592:	e4e3      	b.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c594:	2102      	movs	r1, #2
 800c596:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c59a:	f7ff fa15 	bl	800b9c8 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c59e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	f43f acea 	beq.w	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        status = HAL_ERROR;
 800c5a8:	2601      	movs	r6, #1
 800c5aa:	e4e7      	b.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c5b2:	f7ff fa09 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c5b6:	4605      	mov	r5, r0
        break;
 800c5b8:	f7ff baea 	b.w	800bb90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5bc:	2102      	movs	r1, #2
 800c5be:	3028      	adds	r0, #40	; 0x28
 800c5c0:	f7ff fa02 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c5c4:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c5c6:	2e00      	cmp	r6, #0
 800c5c8:	f43f aa94 	beq.w	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x38>
 800c5cc:	f7ff ba9f 	b.w	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5d0:	4a45      	ldr	r2, [pc, #276]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
        break;
 800c5d2:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c5d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5da:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800c5dc:	e5af      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5de:	2100      	movs	r1, #0
 800c5e0:	f104 0008 	add.w	r0, r4, #8
 800c5e4:	f7ff f976 	bl	800b8d4 <RCCEx_PLL2_Config>
 800c5e8:	4605      	mov	r5, r0
        break;
 800c5ea:	e5a8      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c5f2:	f7ff f9e9 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c5f6:	4605      	mov	r5, r0
        break;
 800c5f8:	f7ff bb20 	b.w	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c602:	f7ff f9e1 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c606:	4605      	mov	r5, r0
        break;
 800c608:	f7ff badf 	b.w	800bbca <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c60c:	2100      	movs	r1, #0
 800c60e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c612:	f7ff f9d9 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c616:	4605      	mov	r5, r0
        break;
 800c618:	e591      	b.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c61a:	2100      	movs	r1, #0
 800c61c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800c620:	f7ff f9d2 	bl	800b9c8 <RCCEx_PLL3_Config>
 800c624:	4605      	mov	r5, r0
        break;
 800c626:	f7ff ba96 	b.w	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c62a:	2101      	movs	r1, #1
 800c62c:	f104 0008 	add.w	r0, r4, #8
 800c630:	f7ff f950 	bl	800b8d4 <RCCEx_PLL2_Config>
 800c634:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c636:	2d00      	cmp	r5, #0
 800c638:	f43f aee6 	beq.w	800c408 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800c63c:	e41d      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x3be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c63e:	2101      	movs	r1, #1
 800c640:	f104 0008 	add.w	r0, r4, #8
 800c644:	f7ff f946 	bl	800b8d4 <RCCEx_PLL2_Config>
 800c648:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c64a:	2d00      	cmp	r5, #0
 800c64c:	f43f aed2 	beq.w	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c650:	f7ff bbf8 	b.w	800be44 <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c654:	2101      	movs	r1, #1
 800c656:	f104 0008 	add.w	r0, r4, #8
 800c65a:	f7ff f93b 	bl	800b8d4 <RCCEx_PLL2_Config>
 800c65e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c660:	2d00      	cmp	r5, #0
 800c662:	f43f adba 	beq.w	800c1da <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800c666:	e6bd      	b.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x928>
            ret = HAL_TIMEOUT;
 800c668:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c66a:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800c66e:	4635      	mov	r5, r6
 800c670:	f7ff bb9f 	b.w	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c674:	2601      	movs	r6, #1
 800c676:	f7ff ba4c 	b.w	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c67a:	4a1b      	ldr	r2, [pc, #108]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800c67c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c67e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c682:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c684:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800c686:	f7ff ba3b 	b.w	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 800c68a:	f7fb fe8f 	bl	80083ac <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c68e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
        tickstart = HAL_GetTick();
 800c692:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c694:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c698:	e004      	b.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c69a:	f7fb fe87 	bl	80083ac <HAL_GetTick>
 800c69e:	1bc0      	subs	r0, r0, r7
 800c6a0:	4548      	cmp	r0, r9
 800c6a2:	d8e1      	bhi.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c6a4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c6a8:	079b      	lsls	r3, r3, #30
 800c6aa:	d5f6      	bpl.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c6ac:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800c6b0:	e61b      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800c6b2:	490d      	ldr	r1, [pc, #52]	; (800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800c6b4:	4b0d      	ldr	r3, [pc, #52]	; (800c6ec <HAL_RCCEx_PeriphCLKConfig+0xc30>)
 800c6b6:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 800c6ba:	690a      	ldr	r2, [r1, #16]
 800c6bc:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	610b      	str	r3, [r1, #16]
 800c6c4:	e61c      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c6c6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c6ca:	462e      	mov	r6, r5
 800c6cc:	f7ff bb71 	b.w	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->FmcClockSelection)
 800c6d0:	2601      	movs	r6, #1
 800c6d2:	4635      	mov	r5, r6
 800c6d4:	f7ff bb6a 	b.w	800bdac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c6d8:	2601      	movs	r6, #1
 800c6da:	4635      	mov	r5, r6
 800c6dc:	f7ff bbd0 	b.w	800be80 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c6e0:	2601      	movs	r6, #1
 800c6e2:	4635      	mov	r5, r6
 800c6e4:	f7ff bbb1 	b.w	800be4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800c6e8:	58024400 	.word	0x58024400
 800c6ec:	00ffffcf 	.word	0x00ffffcf

0800c6f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6f0:	4b4f      	ldr	r3, [pc, #316]	; (800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800c6f2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c6f4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c6f6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c6f8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800c6fa:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c6fe:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c702:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800c704:	d05c      	beq.n	800c7c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c706:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c70a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c70e:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c712:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c716:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c718:	ee07 4a90 	vmov	s15, r4
 800c71c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c720:	d003      	beq.n	800c72a <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800c722:	2902      	cmp	r1, #2
 800c724:	d075      	beq.n	800c812 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800c726:	2900      	cmp	r1, #0
 800c728:	d04f      	beq.n	800c7ca <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c72a:	ee07 2a90 	vmov	s15, r2
 800c72e:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c834 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800c732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c738:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c73c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c838 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c744:	ee06 3a90 	vmov	s13, r3
 800c748:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c74c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c750:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c754:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c758:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c75c:	4a34      	ldr	r2, [pc, #208]	; (800c830 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800c75e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c762:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c764:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c768:	ee07 3a10 	vmov	s14, r3
 800c76c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c770:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c772:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c77a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c77e:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c782:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c784:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c788:	ee07 3a10 	vmov	s14, r3
 800c78c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c790:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c79c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c7a0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800c7a2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c7a6:	ee07 3a90 	vmov	s15, r3
 800c7aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7ae:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7b6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c7ba:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800c7be:	4770      	bx	lr
 800c7c0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c7c2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c7c6:	6082      	str	r2, [r0, #8]
}
 800c7c8:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7ca:	6819      	ldr	r1, [r3, #0]
 800c7cc:	0689      	lsls	r1, r1, #26
 800c7ce:	d527      	bpl.n	800c820 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7d0:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7d2:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7d6:	4919      	ldr	r1, [pc, #100]	; (800c83c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7de:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c7e6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c838 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c7ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7ee:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7f0:	ee06 3a90 	vmov	s13, r3
 800c7f4:	ee05 1a90 	vmov	s11, r1
 800c7f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c7fc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c800:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c804:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800c808:	eee7 6a05 	vfma.f32	s13, s14, s10
 800c80c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c810:	e7a4      	b.n	800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c812:	ee07 2a90 	vmov	s15, r2
 800c816:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800c840 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800c81a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c81e:	e78a      	b.n	800c736 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c820:	ee07 2a90 	vmov	s15, r2
 800c824:	eddf 6a07 	vldr	s13, [pc, #28]	; 800c844 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800c828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c82c:	e783      	b.n	800c736 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800c82e:	bf00      	nop
 800c830:	58024400 	.word	0x58024400
 800c834:	4a742400 	.word	0x4a742400
 800c838:	39000000 	.word	0x39000000
 800c83c:	03d09000 	.word	0x03d09000
 800c840:	4bbebc20 	.word	0x4bbebc20
 800c844:	4c742400 	.word	0x4c742400

0800c848 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c848:	4b4f      	ldr	r3, [pc, #316]	; (800c988 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800c84a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c84c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c84e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c850:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800c852:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c856:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c85a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800c85c:	d05c      	beq.n	800c918 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c85e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c862:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c866:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c86a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c86e:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c870:	ee07 4a90 	vmov	s15, r4
 800c874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c878:	d003      	beq.n	800c882 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800c87a:	2902      	cmp	r1, #2
 800c87c:	d075      	beq.n	800c96a <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800c87e:	2900      	cmp	r1, #0
 800c880:	d04f      	beq.n	800c922 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c882:	ee07 2a90 	vmov	s15, r2
 800c886:	eddf 6a41 	vldr	s13, [pc, #260]	; 800c98c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800c88a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c890:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c894:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800c990 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c89c:	ee06 3a90 	vmov	s13, r3
 800c8a0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c8a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c8a8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c8ac:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c8b0:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c8b4:	4a34      	ldr	r2, [pc, #208]	; (800c988 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800c8b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c8ba:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c8bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c8c0:	ee07 3a10 	vmov	s14, r3
 800c8c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800c8c8:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c8ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c8ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8d6:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c8da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c8dc:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c8e0:	ee07 3a10 	vmov	s14, r3
 800c8e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8e8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c8ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c8f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c8f4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c8f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800c8fa:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c8fe:	ee07 3a90 	vmov	s15, r3
 800c902:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c906:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c90a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c90e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800c912:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800c916:	4770      	bx	lr
 800c918:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c91a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c91e:	6082      	str	r2, [r0, #8]
}
 800c920:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c922:	6819      	ldr	r1, [r3, #0]
 800c924:	0689      	lsls	r1, r1, #26
 800c926:	d527      	bpl.n	800c978 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c928:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c92a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c92e:	4919      	ldr	r1, [pc, #100]	; (800c994 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c930:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c936:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c93a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c93e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800c990 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c942:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c946:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c948:	ee06 3a90 	vmov	s13, r3
 800c94c:	ee05 1a90 	vmov	s11, r1
 800c950:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c954:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c958:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c95c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800c960:	eee7 6a05 	vfma.f32	s13, s14, s10
 800c964:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c968:	e7a4      	b.n	800c8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c96a:	ee07 2a90 	vmov	s15, r2
 800c96e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800c998 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800c972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c976:	e78a      	b.n	800c88e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c978:	ee07 2a90 	vmov	s15, r2
 800c97c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800c99c <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800c980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c984:	e783      	b.n	800c88e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800c986:	bf00      	nop
 800c988:	58024400 	.word	0x58024400
 800c98c:	4a742400 	.word	0x4a742400
 800c990:	39000000 	.word	0x39000000
 800c994:	03d09000 	.word	0x03d09000
 800c998:	4bbebc20 	.word	0x4bbebc20
 800c99c:	4c742400 	.word	0x4c742400

0800c9a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9a0:	4b4f      	ldr	r3, [pc, #316]	; (800cae0 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800c9a2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c9a6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c9a8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800c9aa:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c9ae:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9b2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800c9b4:	d05c      	beq.n	800ca70 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9b6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c9ba:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9be:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9c2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800c9c6:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9c8:	ee07 4a90 	vmov	s15, r4
 800c9cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800c9d0:	d07e      	beq.n	800cad0 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800c9d2:	2902      	cmp	r1, #2
 800c9d4:	d075      	beq.n	800cac2 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800c9d6:	2900      	cmp	r1, #0
 800c9d8:	d04f      	beq.n	800ca7a <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9da:	ee07 2a90 	vmov	s15, r2
 800c9de:	eddf 6a41 	vldr	s13, [pc, #260]	; 800cae4 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800c9e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c9ec:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cae8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800c9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9f4:	ee06 3a90 	vmov	s13, r3
 800c9f8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c9fc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ca00:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ca04:	eee7 6a25 	vfma.f32	s13, s14, s11
 800ca08:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ca0c:	4a34      	ldr	r2, [pc, #208]	; (800cae0 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800ca0e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ca12:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ca14:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ca18:	ee07 3a10 	vmov	s14, r3
 800ca1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800ca20:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ca22:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ca26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca2e:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ca32:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ca34:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800ca38:	ee07 3a10 	vmov	s14, r3
 800ca3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ca40:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ca44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca4c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ca50:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800ca52:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca5e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ca62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca66:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800ca6a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800ca6e:	4770      	bx	lr
 800ca70:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ca72:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ca76:	6082      	str	r2, [r0, #8]
}
 800ca78:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca7a:	6819      	ldr	r1, [r3, #0]
 800ca7c:	0689      	lsls	r1, r1, #26
 800ca7e:	d5ac      	bpl.n	800c9da <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca80:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca82:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca86:	4919      	ldr	r1, [pc, #100]	; (800caec <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ca8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca8e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca96:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800cae8 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800ca9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca9e:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800caa0:	ee06 3a90 	vmov	s13, r3
 800caa4:	ee05 1a90 	vmov	s11, r1
 800caa8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800caac:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800cab0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800cab4:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800cab8:	eee7 6a05 	vfma.f32	s13, s14, s10
 800cabc:	ee66 6a26 	vmul.f32	s13, s12, s13
 800cac0:	e7a4      	b.n	800ca0c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cac2:	ee07 2a90 	vmov	s15, r2
 800cac6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800caf0 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800caca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cace:	e78a      	b.n	800c9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cad0:	ee07 2a90 	vmov	s15, r2
 800cad4:	eddf 6a07 	vldr	s13, [pc, #28]	; 800caf4 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800cad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cadc:	e783      	b.n	800c9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800cade:	bf00      	nop
 800cae0:	58024400 	.word	0x58024400
 800cae4:	4c742400 	.word	0x4c742400
 800cae8:	39000000 	.word	0x39000000
 800caec:	03d09000 	.word	0x03d09000
 800caf0:	4bbebc20 	.word	0x4bbebc20
 800caf4:	4a742400 	.word	0x4a742400

0800caf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800caf8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800cafc:	430b      	orrs	r3, r1
{
 800cafe:	b500      	push	{lr}
 800cb00:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cb02:	f000 8084 	beq.w	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800cb06:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800cb0a:	430b      	orrs	r3, r1
 800cb0c:	d039      	beq.n	800cb82 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cb0e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800cb12:	430b      	orrs	r3, r1
 800cb14:	f000 80e6 	beq.w	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cb18:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800cb1c:	430b      	orrs	r3, r1
 800cb1e:	f000 8089 	beq.w	800cc34 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cb22:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800cb26:	430b      	orrs	r3, r1
 800cb28:	d061      	beq.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb2a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800cb2e:	430b      	orrs	r3, r1
 800cb30:	f000 8112 	beq.w	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cb34:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800cb38:	430b      	orrs	r3, r1
 800cb3a:	f000 80a3 	beq.w	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cb3e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800cb42:	430b      	orrs	r3, r1
 800cb44:	f000 80fa 	beq.w	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cb48:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800cb4c:	430b      	orrs	r3, r1
 800cb4e:	f000 8143 	beq.w	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cb52:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800cb56:	ea50 0301 	orrs.w	r3, r0, r1
 800cb5a:	d137      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cb5c:	4a99      	ldr	r2, [pc, #612]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cb5e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cb60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800cb64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb68:	f000 8083 	beq.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cb6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb70:	f000 8156 	beq.w	800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800cb74:	bb53      	cbnz	r3, 800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb76:	6810      	ldr	r0, [r2, #0]
 800cb78:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800cb7c:	d044      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 800cb7e:	4892      	ldr	r0, [pc, #584]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800cb80:	e042      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800cb82:	4a90      	ldr	r2, [pc, #576]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cb84:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cb86:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800cb8a:	2b80      	cmp	r3, #128	; 0x80
 800cb8c:	f000 80a5 	beq.w	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cb90:	d920      	bls.n	800cbd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800cb92:	2bc0      	cmp	r3, #192	; 0xc0
 800cb94:	d037      	beq.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cb96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb9a:	d117      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb9c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb9e:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cba4:	0749      	lsls	r1, r1, #29
 800cba6:	d502      	bpl.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 80c1 	beq.w	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbae:	4a85      	ldr	r2, [pc, #532]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cbb0:	6812      	ldr	r2, [r2, #0]
 800cbb2:	05d0      	lsls	r0, r2, #23
 800cbb4:	d503      	bpl.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800cbb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbba:	f000 8101 	beq.w	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbbe:	4a81      	ldr	r2, [pc, #516]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cbc0:	6812      	ldr	r2, [r2, #0]
 800cbc2:	0391      	lsls	r1, r2, #14
 800cbc4:	d502      	bpl.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cbc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbca:	d0d8      	beq.n	800cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800cbcc:	2000      	movs	r0, #0
}
 800cbce:	b005      	add	sp, #20
 800cbd0:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d04c      	beq.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800cbd8:	2b40      	cmp	r3, #64	; 0x40
 800cbda:	d1f7      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbdc:	6810      	ldr	r0, [r2, #0]
 800cbde:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cbe2:	d011      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbe4:	a801      	add	r0, sp, #4
 800cbe6:	f7ff fd83 	bl	800c6f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbea:	9801      	ldr	r0, [sp, #4]
 800cbec:	e00c      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cbee:	4a75      	ldr	r2, [pc, #468]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cbf0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cbf2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800cbf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbfa:	d06e      	beq.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cbfc:	d937      	bls.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800cbfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cc02:	f040 8087 	bne.w	800cd14 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc06:	4871      	ldr	r0, [pc, #452]	; (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800cc08:	b005      	add	sp, #20
 800cc0a:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cc0e:	4b6d      	ldr	r3, [pc, #436]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc12:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800cc16:	2b04      	cmp	r3, #4
 800cc18:	d8d8      	bhi.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cc1a:	a201      	add	r2, pc, #4	; (adr r2, 800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800cc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc20:	0800ccc3 	.word	0x0800ccc3
 800cc24:	0800cc9f 	.word	0x0800cc9f
 800cc28:	0800ccaf 	.word	0x0800ccaf
 800cc2c:	0800cc07 	.word	0x0800cc07
 800cc30:	0800ccab 	.word	0x0800ccab
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cc34:	4a63      	ldr	r2, [pc, #396]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc36:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cc38:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800cc3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc40:	d04b      	beq.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800cc42:	d944      	bls.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800cc44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc48:	d0dd      	beq.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cc4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc4e:	d1bd      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc50:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc52:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc58:	0752      	lsls	r2, r2, #29
 800cc5a:	d5a8      	bpl.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d1a6      	bne.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc60:	4b58      	ldr	r3, [pc, #352]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc62:	485b      	ldr	r0, [pc, #364]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cc6a:	40d8      	lsrs	r0, r3
 800cc6c:	e7cc      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d154      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc72:	6810      	ldr	r0, [r2, #0]
 800cc74:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800cc78:	d0c6      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc7a:	a801      	add	r0, sp, #4
 800cc7c:	f7ff fe90 	bl	800c9a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc80:	9802      	ldr	r0, [sp, #8]
 800cc82:	e7c1      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc84:	4a4f      	ldr	r2, [pc, #316]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cc86:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cc88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800cc8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc90:	f000 80d0 	beq.w	800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800cc94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc98:	d0da      	beq.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d196      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc9e:	4b49      	ldr	r3, [pc, #292]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cca0:	6818      	ldr	r0, [r3, #0]
 800cca2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cca6:	d0af      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cca8:	e79c      	b.n	800cbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccaa:	4a46      	ldr	r2, [pc, #280]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ccac:	e776      	b.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccae:	4b45      	ldr	r3, [pc, #276]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ccb0:	6818      	ldr	r0, [r3, #0]
 800ccb2:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ccb6:	d0a7      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccb8:	a801      	add	r0, sp, #4
 800ccba:	f7ff fdc5 	bl	800c848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccbe:	9801      	ldr	r0, [sp, #4]
 800ccc0:	e7a2      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccc2:	4b40      	ldr	r3, [pc, #256]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800ccc4:	6818      	ldr	r0, [r3, #0]
 800ccc6:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800ccca:	d09d      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cccc:	e7d5      	b.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0cf      	beq.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800ccd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ccd6:	d081      	beq.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800ccd8:	e778      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccda:	6810      	ldr	r0, [r2, #0]
 800ccdc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cce0:	d092      	beq.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cce2:	e7e9      	b.n	800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cce4:	4a37      	ldr	r2, [pc, #220]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cce6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cce8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800ccec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccf0:	d0f3      	beq.n	800ccda <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800ccf2:	d806      	bhi.n	800cd02 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d0bc      	beq.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800ccf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ccfc:	f43f af6e 	beq.w	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800cd00:	e764      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cd02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cd06:	f43f af7e 	beq.w	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800cd0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cd0e:	f43f af45 	beq.w	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800cd12:	e75b      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800cd14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd18:	d09a      	beq.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800cd1a:	e757      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800cd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd20:	f43f af5c 	beq.w	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800cd24:	e752      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd26:	6810      	ldr	r0, [r2, #0]
 800cd28:	f010 0004 	ands.w	r0, r0, #4
 800cd2c:	f43f af6c 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd30:	6813      	ldr	r3, [r2, #0]
 800cd32:	4827      	ldr	r0, [pc, #156]	; (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800cd34:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800cd38:	40d8      	lsrs	r0, r3
 800cd3a:	e765      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd3c:	4b21      	ldr	r3, [pc, #132]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800cd40:	03d2      	lsls	r2, r2, #15
 800cd42:	d5bf      	bpl.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd44:	6818      	ldr	r0, [r3, #0]
 800cd46:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800cd4a:	f43f af5d 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd4e:	a801      	add	r0, sp, #4
 800cd50:	f7ff fcce 	bl	800c6f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cd54:	9803      	ldr	r0, [sp, #12]
 800cd56:	e757      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cd58:	4a1a      	ldr	r2, [pc, #104]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd5a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cd5c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800cd60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cd64:	d0df      	beq.n	800cd26 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800cd66:	d810      	bhi.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800cd68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd6c:	d058      	beq.n	800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800cd6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd72:	d118      	bne.n	800cda6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd74:	4b13      	ldr	r3, [pc, #76]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd76:	6818      	ldr	r0, [r3, #0]
 800cd78:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800cd7c:	f43f af44 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd80:	a801      	add	r0, sp, #4
 800cd82:	f7ff fd61 	bl	800c848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd86:	9802      	ldr	r0, [sp, #8]
 800cd88:	e73e      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800cd8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cd8e:	d012      	beq.n	800cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800cd90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd94:	f47f af1a 	bne.w	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cd98:	4b0a      	ldr	r3, [pc, #40]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800cd9a:	6818      	ldr	r0, [r3, #0]
 800cd9c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800cda0:	f43f af32 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cda4:	e6eb      	b.n	800cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f47f af10 	bne.w	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 800cdac:	b005      	add	sp, #20
 800cdae:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800cdb2:	f7fe bd47 	b.w	800b844 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cdb6:	6810      	ldr	r0, [r2, #0]
 800cdb8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800cdbc:	f43f af24 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 800cdc0:	4804      	ldr	r0, [pc, #16]	; (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800cdc2:	e721      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800cdc4:	58024400 	.word	0x58024400
 800cdc8:	017d7840 	.word	0x017d7840
 800cdcc:	00bb8000 	.word	0x00bb8000
 800cdd0:	03d09000 	.word	0x03d09000
 800cdd4:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cdd8:	4b28      	ldr	r3, [pc, #160]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800cdda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cddc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800cde0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cde4:	d037      	beq.n	800ce56 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800cde6:	d814      	bhi.n	800ce12 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800cde8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdec:	d03f      	beq.n	800ce6e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800cdee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdf2:	d0bf      	beq.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f47f aee9 	bne.w	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cdfa:	f7fe fce3 	bl	800b7c4 <HAL_RCC_GetHCLKFreq>
 800cdfe:	4b1f      	ldr	r3, [pc, #124]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800ce00:	4a1f      	ldr	r2, [pc, #124]	; (800ce80 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800ce02:	6a1b      	ldr	r3, [r3, #32]
 800ce04:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ce08:	5cd3      	ldrb	r3, [r2, r3]
 800ce0a:	f003 031f 	and.w	r3, r3, #31
 800ce0e:	40d8      	lsrs	r0, r3
        break;
 800ce10:	e6fa      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800ce12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce16:	d017      	beq.n	800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800ce18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce1c:	d0bc      	beq.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800ce1e:	e6d5      	b.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce20:	6810      	ldr	r0, [r2, #0]
 800ce22:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ce26:	f43f aeef 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce2a:	a801      	add	r0, sp, #4
 800ce2c:	f7ff fc60 	bl	800c6f0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce30:	9802      	ldr	r0, [sp, #8]
 800ce32:	e6e9      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce34:	6810      	ldr	r0, [r2, #0]
 800ce36:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800ce3a:	f43f aee5 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce3e:	a801      	add	r0, sp, #4
 800ce40:	f7ff fd02 	bl	800c848 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ce44:	9803      	ldr	r0, [sp, #12]
 800ce46:	e6df      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ce48:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800ce4a:	6818      	ldr	r0, [r3, #0]
 800ce4c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800ce50:	f43f aeda 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ce54:	e7b4      	b.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce56:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800ce58:	6818      	ldr	r0, [r3, #0]
 800ce5a:	f010 0004 	ands.w	r0, r0, #4
 800ce5e:	f43f aed3 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4807      	ldr	r0, [pc, #28]	; (800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800ce66:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ce6a:	40d8      	lsrs	r0, r3
 800ce6c:	e6cc      	b.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce6e:	4b03      	ldr	r3, [pc, #12]	; (800ce7c <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800ce70:	6818      	ldr	r0, [r3, #0]
 800ce72:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800ce76:	f43f aec7 	beq.w	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800ce7a:	e7d6      	b.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800ce7c:	58024400 	.word	0x58024400
 800ce80:	0801eee4 	.word	0x0801eee4
 800ce84:	03d09000 	.word	0x03d09000

0800ce88 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d03c      	beq.n	800cf06 <HAL_RNG_Init+0x7e>
{
 800ce8c:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ce8e:	7a43      	ldrb	r3, [r0, #9]
 800ce90:	4604      	mov	r4, r0
 800ce92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d031      	beq.n	800cefe <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ce9a:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800ce9c:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ce9e:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800cea0:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800cea2:	6813      	ldr	r3, [r2, #0]
 800cea4:	f023 0320 	bic.w	r3, r3, #32
 800cea8:	430b      	orrs	r3, r1
 800ceaa:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ceac:	6822      	ldr	r2, [r4, #0]
 800ceae:	6813      	ldr	r3, [r2, #0]
 800ceb0:	f043 0304 	orr.w	r3, r3, #4
 800ceb4:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800ceb6:	6823      	ldr	r3, [r4, #0]
 800ceb8:	685b      	ldr	r3, [r3, #4]
 800ceba:	0658      	lsls	r0, r3, #25
 800cebc:	d503      	bpl.n	800cec6 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800cebe:	2304      	movs	r3, #4
    return HAL_ERROR;
 800cec0:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800cec2:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800cec4:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800cec6:	f7fb fa71 	bl	80083ac <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800ceca:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800cecc:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	0759      	lsls	r1, r3, #29
 800ced2:	d50e      	bpl.n	800cef2 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ced4:	f7fb fa6a 	bl	80083ac <HAL_GetTick>
 800ced8:	1b43      	subs	r3, r0, r5
 800ceda:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800cedc:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800cede:	d9f6      	bls.n	800cece <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800cee0:	685a      	ldr	r2, [r3, #4]
 800cee2:	0752      	lsls	r2, r2, #29
 800cee4:	d5f3      	bpl.n	800cece <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 800cee6:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800cee8:	2302      	movs	r3, #2
        return HAL_ERROR;
 800ceea:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800ceec:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ceee:	60e3      	str	r3, [r4, #12]
}
 800cef0:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800cef2:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 800cef4:	2201      	movs	r2, #1
  return HAL_OK;
 800cef6:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800cef8:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800cefa:	60e3      	str	r3, [r4, #12]
}
 800cefc:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800cefe:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800cf00:	f7fa fd5c 	bl	80079bc <HAL_RNG_MspInit>
 800cf04:	e7c9      	b.n	800ce9a <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 800cf06:	2001      	movs	r0, #1
}
 800cf08:	4770      	bx	lr
 800cf0a:	bf00      	nop

0800cf0c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800cf0e:	7a03      	ldrb	r3, [r0, #8]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d027      	beq.n	800cf64 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800cf14:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 800cf16:	2201      	movs	r2, #1
 800cf18:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 800cf1e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800cf20:	d006      	beq.n	800cf30 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800cf22:	2304      	movs	r3, #4
    status = HAL_ERROR;
 800cf24:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800cf26:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800cf28:	2300      	movs	r3, #0
 800cf2a:	7223      	strb	r3, [r4, #8]

  return status;
}
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800cf30:	2302      	movs	r3, #2
 800cf32:	460d      	mov	r5, r1
 800cf34:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 800cf36:	f7fb fa39 	bl	80083ac <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800cf3a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800cf3c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800cf3e:	685a      	ldr	r2, [r3, #4]
 800cf40:	07d2      	lsls	r2, r2, #31
 800cf42:	d412      	bmi.n	800cf6a <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800cf44:	f7fb fa32 	bl	80083ac <HAL_GetTick>
 800cf48:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800cf4a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800cf4c:	2802      	cmp	r0, #2
 800cf4e:	d9f6      	bls.n	800cf3e <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800cf50:	685a      	ldr	r2, [r3, #4]
 800cf52:	f012 0201 	ands.w	r2, r2, #1
 800cf56:	d1f2      	bne.n	800cf3e <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 800cf58:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800cf5a:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 800cf5c:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 800cf5e:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800cf60:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 800cf62:	e7e3      	b.n	800cf2c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 800cf64:	2602      	movs	r6, #2
}
 800cf66:	4630      	mov	r0, r6
 800cf68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 800cf6a:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800cf6c:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800cf6e:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800cf70:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800cf72:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800cf74:	7262      	strb	r2, [r4, #9]
 800cf76:	e7d7      	b.n	800cf28 <HAL_RNG_GenerateRandomNumber+0x1c>

0800cf78 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800cf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cf7a:	4ba6      	ldr	r3, [pc, #664]	; (800d214 <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800cf7c:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800cf7e:	6802      	ldr	r2, [r0, #0]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d01c      	beq.n	800cfbe <HAL_SAI_Init.part.0+0x46>
 800cf84:	3320      	adds	r3, #32
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d019      	beq.n	800cfbe <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800cf8a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d04d      	beq.n	800d02e <HAL_SAI_Init.part.0+0xb6>
 800cf92:	3320      	adds	r3, #32
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d04a      	beq.n	800d02e <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800cf98:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	f000 8134 	beq.w	800d20a <HAL_SAI_Init.part.0+0x292>
 800cfa2:	3320      	adds	r3, #32
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	f000 8130 	beq.w	800d20a <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800cfaa:	4b9b      	ldr	r3, [pc, #620]	; (800d218 <HAL_SAI_Init.part.0+0x2a0>)
 800cfac:	429a      	cmp	r2, r3
 800cfae:	f000 812e 	beq.w	800d20e <HAL_SAI_Init.part.0+0x296>
 800cfb2:	3320      	adds	r3, #32
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	f000 812a 	beq.w	800d20e <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800cfba:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 800cfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 800cfbe:	4e97      	ldr	r6, [pc, #604]	; (800d21c <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800cfc0:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800cfc4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d037      	beq.n	800d03c <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800cfcc:	4b94      	ldr	r3, [pc, #592]	; (800d220 <HAL_SAI_Init.part.0+0x2a8>)
 800cfce:	4995      	ldr	r1, [pc, #596]	; (800d224 <HAL_SAI_Init.part.0+0x2ac>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800cfd6:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800cfd8:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800cfda:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800cfde:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800cfe0:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d031      	beq.n	800d04a <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800cfe6:	6822      	ldr	r2, [r4, #0]
    count--;
 800cfe8:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800cfea:	6815      	ldr	r5, [r2, #0]
 800cfec:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 800cff0:	d1f7      	bne.n	800cfe2 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 800cff2:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800cff4:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800cff6:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800cff8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800cffc:	f000 8156 	beq.w	800d2ac <HAL_SAI_Init.part.0+0x334>
 800d000:	4293      	cmp	r3, r2
 800d002:	bf19      	ittee	ne
 800d004:	4610      	movne	r0, r2
 800d006:	2103      	movne	r1, #3
 800d008:	2123      	moveq	r1, #35	; 0x23
 800d00a:	2022      	moveq	r0, #34	; 0x22
 800d00c:	bf15      	itete	ne
 800d00e:	2701      	movne	r7, #1
 800d010:	2721      	moveq	r7, #33	; 0x21
 800d012:	2200      	movne	r2, #0
 800d014:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 800d016:	68a3      	ldr	r3, [r4, #8]
 800d018:	3b01      	subs	r3, #1
 800d01a:	2b04      	cmp	r3, #4
 800d01c:	f200 8181 	bhi.w	800d322 <HAL_SAI_Init.part.0+0x3aa>
 800d020:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d024:	001c00e8 	.word	0x001c00e8
 800d028:	001b00ef 	.word	0x001b00ef
 800d02c:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
 800d02e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
 800d032:	4e7d      	ldr	r6, [pc, #500]	; (800d228 <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800d034:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1c7      	bne.n	800cfcc <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 800d03c:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 800d03e:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800d042:	f7fa fd25 	bl	8007a90 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 800d046:	6822      	ldr	r2, [r4, #0]
 800d048:	e7c0      	b.n	800cfcc <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d04a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800d04e:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d054:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800d058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800d05a:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d05c:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 800d060:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d062:	6a23      	ldr	r3, [r4, #32]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d04a      	beq.n	800d0fe <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d068:	6823      	ldr	r3, [r4, #0]
 800d06a:	4a6a      	ldr	r2, [pc, #424]	; (800d214 <HAL_SAI_Init.part.0+0x29c>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	f000 8131 	beq.w	800d2d4 <HAL_SAI_Init.part.0+0x35c>
 800d072:	486e      	ldr	r0, [pc, #440]	; (800d22c <HAL_SAI_Init.part.0+0x2b4>)
 800d074:	1a18      	subs	r0, r3, r0
 800d076:	fab0 f080 	clz	r0, r0
 800d07a:	0940      	lsrs	r0, r0, #5
 800d07c:	2800      	cmp	r0, #0
 800d07e:	f040 8129 	bne.w	800d2d4 <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d082:	4a6b      	ldr	r2, [pc, #428]	; (800d230 <HAL_SAI_Init.part.0+0x2b8>)
 800d084:	4293      	cmp	r3, r2
 800d086:	f000 8133 	beq.w	800d2f0 <HAL_SAI_Init.part.0+0x378>
 800d08a:	3220      	adds	r2, #32
 800d08c:	4293      	cmp	r3, r2
 800d08e:	f000 812f 	beq.w	800d2f0 <HAL_SAI_Init.part.0+0x378>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800d092:	4a68      	ldr	r2, [pc, #416]	; (800d234 <HAL_SAI_Init.part.0+0x2bc>)
 800d094:	4293      	cmp	r3, r2
 800d096:	f000 8124 	beq.w	800d2e2 <HAL_SAI_Init.part.0+0x36a>
 800d09a:	3220      	adds	r2, #32
 800d09c:	4293      	cmp	r3, r2
 800d09e:	f000 8120 	beq.w	800d2e2 <HAL_SAI_Init.part.0+0x36a>
    if (hsai->Instance == SAI4_Block_A)
 800d0a2:	4a5d      	ldr	r2, [pc, #372]	; (800d218 <HAL_SAI_Init.part.0+0x2a0>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	f000 8133 	beq.w	800d310 <HAL_SAI_Init.part.0+0x398>
    if (hsai->Instance == SAI4_Block_B)
 800d0aa:	4a63      	ldr	r2, [pc, #396]	; (800d238 <HAL_SAI_Init.part.0+0x2c0>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	f000 8129 	beq.w	800d304 <HAL_SAI_Init.part.0+0x38c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800d0b2:	69a3      	ldr	r3, [r4, #24]
 800d0b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800d0b8:	f000 80fd 	beq.w	800d2b6 <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d0bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d0be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d0c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d0c4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d0c8:	ea4f 0340 	mov.w	r3, r0, lsl #1
 800d0cc:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800d0ce:	bf0c      	ite	eq
 800d0d0:	2202      	moveq	r2, #2
 800d0d2:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800d0d4:	fb00 f202 	mul.w	r2, r0, r2
 800d0d8:	0212      	lsls	r2, r2, #8
 800d0da:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800d0de:	4a57      	ldr	r2, [pc, #348]	; (800d23c <HAL_SAI_Init.part.0+0x2c4>)
 800d0e0:	fba2 0203 	umull	r0, r2, r2, r3
 800d0e4:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800d0e6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800d0ea:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800d0ee:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800d0f0:	bf08      	it	eq
 800d0f2:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d0f4:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 800d0f6:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d0f8:	d101      	bne.n	800d0fe <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d0fa:	0852      	lsrs	r2, r2, #1
 800d0fc:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d0fe:	6863      	ldr	r3, [r4, #4]
 800d100:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d104:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d106:	f040 80cc 	bne.w	800d2a2 <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	bf14      	ite	ne
 800d10e:	f44f 7500 	movne.w	r5, #512	; 0x200
 800d112:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d114:	f7fb f962 	bl	80083dc <HAL_GetREVID>
 800d118:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d11c:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d11e:	f0c0 80ac 	bcc.w	800d27a <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d122:	6811      	ldr	r1, [r2, #0]
 800d124:	4b46      	ldr	r3, [pc, #280]	; (800d240 <HAL_SAI_Init.part.0+0x2c8>)
 800d126:	400b      	ands	r3, r1
 800d128:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d12a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d12c:	e9d4 1300 	ldrd	r1, r3, [r4]
 800d130:	431a      	orrs	r2, r3
 800d132:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d134:	431a      	orrs	r2, r3
 800d136:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d138:	431a      	orrs	r2, r3
 800d13a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d13c:	431a      	orrs	r2, r3
 800d13e:	6963      	ldr	r3, [r4, #20]
 800d140:	431a      	orrs	r2, r3
 800d142:	69a3      	ldr	r3, [r4, #24]
 800d144:	431a      	orrs	r2, r3
 800d146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d148:	431a      	orrs	r2, r3
 800d14a:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d14c:	431a      	orrs	r2, r3
 800d14e:	680b      	ldr	r3, [r1, #0]
 800d150:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800d152:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d154:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d158:	4b3a      	ldr	r3, [pc, #232]	; (800d244 <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d15a:	433a      	orrs	r2, r7
 800d15c:	432a      	orrs	r2, r5
 800d15e:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d160:	6822      	ldr	r2, [r4, #0]
 800d162:	6851      	ldr	r1, [r2, #4]
 800d164:	400b      	ands	r3, r1
 800d166:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d168:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d16a:	69e3      	ldr	r3, [r4, #28]
 800d16c:	6822      	ldr	r2, [r4, #0]
 800d16e:	430b      	orrs	r3, r1
 800d170:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d172:	430b      	orrs	r3, r1
 800d174:	6851      	ldr	r1, [r2, #4]
 800d176:	430b      	orrs	r3, r1
 800d178:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d17a:	6822      	ldr	r2, [r4, #0]
 800d17c:	4b32      	ldr	r3, [pc, #200]	; (800d248 <HAL_SAI_Init.part.0+0x2d0>)
 800d17e:	6891      	ldr	r1, [r2, #8]
 800d180:	400b      	ands	r3, r1
 800d182:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d184:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800d186:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d188:	6821      	ldr	r1, [r4, #0]
 800d18a:	4313      	orrs	r3, r2
 800d18c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800d18e:	6888      	ldr	r0, [r1, #8]
 800d190:	4313      	orrs	r3, r2
 800d192:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800d194:	4303      	orrs	r3, r0
 800d196:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d198:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d19c:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800d19e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800d1a0:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800d1a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d1a6:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800d1a8:	6822      	ldr	r2, [r4, #0]
 800d1aa:	68d3      	ldr	r3, [r2, #12]
 800d1ac:	4003      	ands	r3, r0
 800d1ae:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d1b0:	6821      	ldr	r1, [r4, #0]
 800d1b2:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 800d1b6:	68ca      	ldr	r2, [r1, #12]
 800d1b8:	4303      	orrs	r3, r0
 800d1ba:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d1bc:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d1be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800d1c2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800d1c4:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d1c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800d1ca:	4a12      	ldr	r2, [pc, #72]	; (800d214 <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800d1cc:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d03f      	beq.n	800d254 <HAL_SAI_Init.part.0+0x2dc>
 800d1d4:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800d1d8:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d039      	beq.n	800d254 <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d1e0:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800d1e2:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d1e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 800d1e8:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 800d1ea:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800d1ee:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800d1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800d1f4:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800d1f8:	e732      	b.n	800d060 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800d1fa:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d1fc:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800d200:	e72e      	b.n	800d060 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d202:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d204:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800d208:	e72a      	b.n	800d060 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 800d20a:	4e10      	ldr	r6, [pc, #64]	; (800d24c <HAL_SAI_Init.part.0+0x2d4>)
 800d20c:	e6d8      	b.n	800cfc0 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 800d20e:	4e10      	ldr	r6, [pc, #64]	; (800d250 <HAL_SAI_Init.part.0+0x2d8>)
 800d210:	e6d6      	b.n	800cfc0 <HAL_SAI_Init.part.0+0x48>
 800d212:	bf00      	nop
 800d214:	40015804 	.word	0x40015804
 800d218:	58005404 	.word	0x58005404
 800d21c:	40015800 	.word	0x40015800
 800d220:	20000284 	.word	0x20000284
 800d224:	95cbec1b 	.word	0x95cbec1b
 800d228:	40015c00 	.word	0x40015c00
 800d22c:	40015824 	.word	0x40015824
 800d230:	40015c04 	.word	0x40015c04
 800d234:	40016004 	.word	0x40016004
 800d238:	58005424 	.word	0x58005424
 800d23c:	cccccccd 	.word	0xcccccccd
 800d240:	f005c010 	.word	0xf005c010
 800d244:	ffff1ff0 	.word	0xffff1ff0
 800d248:	fff88000 	.word	0xfff88000
 800d24c:	40016000 	.word	0x40016000
 800d250:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800d254:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800d256:	f023 0301 	bic.w	r3, r3, #1
 800d25a:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800d25c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d260:	2b01      	cmp	r3, #1
 800d262:	d1bd      	bne.n	800d1e0 <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d264:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800d268:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800d26a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800d26e:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800d270:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800d272:	f043 0301 	orr.w	r3, r3, #1
 800d276:	6473      	str	r3, [r6, #68]	; 0x44
 800d278:	e7b2      	b.n	800d1e0 <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d27a:	6811      	ldr	r1, [r2, #0]
 800d27c:	4b2a      	ldr	r3, [pc, #168]	; (800d328 <HAL_SAI_Init.part.0+0x3b0>)
 800d27e:	400b      	ands	r3, r1
 800d280:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d282:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d284:	e9d4 1300 	ldrd	r1, r3, [r4]
 800d288:	431a      	orrs	r2, r3
 800d28a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d28c:	431a      	orrs	r2, r3
 800d28e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d290:	431a      	orrs	r2, r3
 800d292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d294:	431a      	orrs	r2, r3
 800d296:	6963      	ldr	r3, [r4, #20]
 800d298:	431a      	orrs	r2, r3
 800d29a:	69a3      	ldr	r3, [r4, #24]
 800d29c:	431a      	orrs	r2, r3
 800d29e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d2a0:	e754      	b.n	800d14c <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	bf08      	it	eq
 800d2a6:	f44f 7500 	moveq.w	r5, #512	; 0x200
 800d2aa:	e733      	b.n	800d114 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
 800d2ac:	2113      	movs	r1, #19
 800d2ae:	2012      	movs	r0, #18
 800d2b0:	2711      	movs	r7, #17
 800d2b2:	2210      	movs	r2, #16
 800d2b4:	e6af      	b.n	800d016 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d2b6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d2b8:	2904      	cmp	r1, #4
 800d2ba:	d030      	beq.n	800d31e <HAL_SAI_Init.part.0+0x3a6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800d2bc:	2908      	cmp	r1, #8
 800d2be:	d01e      	beq.n	800d2fe <HAL_SAI_Init.part.0+0x386>
        tmpframelength = hsai->FrameInit.FrameLength;
 800d2c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800d2c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d2c6:	0043      	lsls	r3, r0, #1
 800d2c8:	6a20      	ldr	r0, [r4, #32]
 800d2ca:	fb00 f202 	mul.w	r2, r0, r2
 800d2ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2d2:	e704      	b.n	800d0de <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d2d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d2d8:	2100      	movs	r1, #0
 800d2da:	f7ff fc0d 	bl	800caf8 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	e6cf      	b.n	800d082 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800d2e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	f7ff fc06 	bl	800caf8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	e6d8      	b.n	800d0a2 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d2f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d2f4:	2100      	movs	r1, #0
 800d2f6:	f7ff fbff 	bl	800caf8 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800d2fa:	6823      	ldr	r3, [r4, #0]
 800d2fc:	e6c9      	b.n	800d092 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800d2fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d302:	e7de      	b.n	800d2c2 <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800d304:	2100      	movs	r1, #0
 800d306:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d30a:	f7ff fbf5 	bl	800caf8 <HAL_RCCEx_GetPeriphCLKFreq>
 800d30e:	e6d0      	b.n	800d0b2 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800d310:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800d314:	2100      	movs	r1, #0
 800d316:	f7ff fbef 	bl	800caf8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 800d31a:	6823      	ldr	r3, [r4, #0]
 800d31c:	e6c5      	b.n	800d0aa <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800d31e:	2240      	movs	r2, #64	; 0x40
 800d320:	e7cf      	b.n	800d2c2 <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
 800d322:	2700      	movs	r7, #0
 800d324:	e69c      	b.n	800d060 <HAL_SAI_Init.part.0+0xe8>
 800d326:	bf00      	nop
 800d328:	f805c010 	.word	0xf805c010

0800d32c <HAL_SAI_InitProtocol>:
  switch (protocol)
 800d32c:	2902      	cmp	r1, #2
{
 800d32e:	b538      	push	{r3, r4, r5, lr}
 800d330:	4604      	mov	r4, r0
  switch (protocol)
 800d332:	d935      	bls.n	800d3a0 <HAL_SAI_InitProtocol+0x74>
 800d334:	1ec8      	subs	r0, r1, #3
 800d336:	2801      	cmp	r0, #1
 800d338:	d830      	bhi.n	800d39c <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d33a:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800d33c:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d33e:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d340:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800d342:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 800d344:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d346:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d34a:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d34c:	6860      	ldr	r0, [r4, #4]
 800d34e:	f030 0002 	bics.w	r0, r0, #2
 800d352:	bf0c      	ite	eq
 800d354:	2501      	moveq	r5, #1
 800d356:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 800d358:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800d35a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800d35e:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 800d360:	bf0c      	ite	eq
 800d362:	2001      	moveq	r0, #1
 800d364:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800d366:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800d368:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800d36c:	65a0      	str	r0, [r4, #88]	; 0x58
 800d36e:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 800d370:	2a03      	cmp	r2, #3
 800d372:	d813      	bhi.n	800d39c <HAL_SAI_InitProtocol+0x70>
 800d374:	e8df f002 	tbb	[pc, r2]
 800d378:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800d37c:	6823      	ldr	r3, [r4, #0]
 800d37e:	4a47      	ldr	r2, [pc, #284]	; (800d49c <HAL_SAI_InitProtocol+0x170>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d005      	beq.n	800d390 <HAL_SAI_InitProtocol+0x64>
 800d384:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800d388:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d105      	bne.n	800d39c <HAL_SAI_InitProtocol+0x70>
 800d390:	6863      	ldr	r3, [r4, #4]
 800d392:	2b01      	cmp	r3, #1
 800d394:	d102      	bne.n	800d39c <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800d396:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d037      	beq.n	800d40c <HAL_SAI_InitProtocol+0xe0>
}
 800d39c:	2001      	movs	r0, #1
 800d39e:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d3a0:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800d3a2:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800d3a4:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800d3a6:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 800d3a8:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d3aa:	6860      	ldr	r0, [r4, #4]
 800d3ac:	f030 0002 	bics.w	r0, r0, #2
 800d3b0:	bf14      	ite	ne
 800d3b2:	2001      	movne	r0, #1
 800d3b4:	2000      	moveq	r0, #0
 800d3b6:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800d3b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d3bc:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800d3be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d3c2:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800d3c4:	f013 0001 	ands.w	r0, r3, #1
 800d3c8:	d1e8      	bne.n	800d39c <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 800d3ca:	b949      	cbnz	r1, 800d3e0 <HAL_SAI_InitProtocol+0xb4>
 800d3cc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800d3d0:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 800d3d4:	2a03      	cmp	r2, #3
 800d3d6:	d8e1      	bhi.n	800d39c <HAL_SAI_InitProtocol+0x70>
 800d3d8:	e8df f002 	tbb	[pc, r2]
 800d3dc:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800d3e0:	6660      	str	r0, [r4, #100]	; 0x64
 800d3e2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800d3e6:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 800d3e8:	2a03      	cmp	r2, #3
 800d3ea:	d8d7      	bhi.n	800d39c <HAL_SAI_InitProtocol+0x70>
 800d3ec:	e8df f002 	tbb	[pc, r2]
 800d3f0:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d3f4:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800d3f6:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d3f8:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d3fa:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800d3fc:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d3fe:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800d400:	f7fa ffec 	bl	80083dc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800d404:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d408:	2b01      	cmp	r3, #1
 800d40a:	d0b7      	beq.n	800d37c <HAL_SAI_InitProtocol+0x50>
 800d40c:	4620      	mov	r0, r4
}
 800d40e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d412:	f7ff bdb1 	b.w	800cf78 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d416:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d418:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d41a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d41c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d41e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800d420:	e7ee      	b.n	800d400 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d422:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d424:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d426:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d428:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800d42a:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d42c:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800d42e:	e7e7      	b.n	800d400 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d430:	21e0      	movs	r1, #224	; 0xe0
 800d432:	e7f7      	b.n	800d424 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d434:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d436:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d438:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d43a:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800d43c:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d43e:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d440:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d442:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d446:	e7db      	b.n	800d400 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d448:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d44a:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d44c:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d44e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d450:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800d454:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d456:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d45a:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d45c:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d45e:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d460:	d1ce      	bne.n	800d400 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 800d462:	2308      	movs	r3, #8
 800d464:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800d466:	e7cb      	b.n	800d400 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d468:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d46a:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d46c:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800d46e:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d472:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d474:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800d478:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800d47a:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d47e:	d1bf      	bne.n	800d400 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 800d480:	2310      	movs	r3, #16
 800d482:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800d484:	e7bc      	b.n	800d400 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800d486:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d488:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d48a:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800d48c:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800d48e:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800d490:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800d492:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800d494:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800d498:	e7b2      	b.n	800d400 <HAL_SAI_InitProtocol+0xd4>
 800d49a:	bf00      	nop
 800d49c:	40015804 	.word	0x40015804

0800d4a0 <HAL_SAI_Transmit_DMA>:
{
 800d4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a4:	460f      	mov	r7, r1
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800d4aa:	f7fa ff7f 	bl	80083ac <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800d4ae:	2f00      	cmp	r7, #0
 800d4b0:	d06b      	beq.n	800d58a <HAL_SAI_Transmit_DMA+0xea>
 800d4b2:	fab5 f885 	clz	r8, r5
 800d4b6:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800d4ba:	2d00      	cmp	r5, #0
 800d4bc:	d065      	beq.n	800d58a <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
 800d4be:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	fa5f f983 	uxtb.w	r9, r3
 800d4c8:	d15a      	bne.n	800d580 <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
 800d4ca:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d056      	beq.n	800d580 <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
 800d4d2:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d4d4:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d4d8:	4a3c      	ldr	r2, [pc, #240]	; (800d5cc <HAL_SAI_Transmit_DMA+0x12c>)
 800d4da:	4606      	mov	r6, r0
    hsai->XferSize = Size;
 800d4dc:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
 800d4e0:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
 800d4e2:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 800d4e6:	f365 431f 	bfi	r3, r5, #16, #16
 800d4ea:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800d4ec:	2312      	movs	r3, #18
 800d4ee:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800d4f2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d4f6:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800d4f8:	4a35      	ldr	r2, [pc, #212]	; (800d5d0 <HAL_SAI_Transmit_DMA+0x130>)
 800d4fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d4fe:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800d500:	4a34      	ldr	r2, [pc, #208]	; (800d5d4 <HAL_SAI_Transmit_DMA+0x134>)
 800d502:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d506:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800d508:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800d50c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800d510:	6822      	ldr	r2, [r4, #0]
 800d512:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800d516:	321c      	adds	r2, #28
 800d518:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800d51a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800d51e:	f7fb fb6d 	bl	8008bfc <HAL_DMA_Start_IT>
 800d522:	2800      	cmp	r0, #0
 800d524:	d13f      	bne.n	800d5a6 <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d526:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d528:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d52a:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d52c:	d032      	beq.n	800d594 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d52e:	2205      	movs	r2, #5
 800d530:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d532:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800d534:	2b01      	cmp	r3, #1
 800d536:	bf98      	it	ls
 800d538:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d53a:	6821      	ldr	r1, [r4, #0]
 800d53c:	690b      	ldr	r3, [r1, #16]
 800d53e:	4313      	orrs	r3, r2
 800d540:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800d542:	6822      	ldr	r2, [r4, #0]
 800d544:	6813      	ldr	r3, [r2, #0]
 800d546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d54a:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d54c:	e005      	b.n	800d55a <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800d54e:	f7fa ff2d 	bl	80083ac <HAL_GetTick>
 800d552:	1b83      	subs	r3, r0, r6
 800d554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d558:	d82a      	bhi.n	800d5b0 <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800d55a:	6822      	ldr	r2, [r4, #0]
 800d55c:	6955      	ldr	r5, [r2, #20]
 800d55e:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 800d562:	d0f4      	beq.n	800d54e <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800d564:	6813      	ldr	r3, [r2, #0]
 800d566:	03db      	lsls	r3, r3, #15
 800d568:	d403      	bmi.n	800d572 <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 800d56a:	6813      	ldr	r3, [r2, #0]
 800d56c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d570:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800d572:	2300      	movs	r3, #0
    return HAL_OK;
 800d574:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
 800d576:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800d57a:	4648      	mov	r0, r9
 800d57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800d580:	f04f 0902 	mov.w	r9, #2
}
 800d584:	4648      	mov	r0, r9
 800d586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 800d58a:	f04f 0901 	mov.w	r9, #1
}
 800d58e:	4648      	mov	r0, r9
 800d590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d594:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d598:	2a01      	cmp	r2, #1
 800d59a:	bf0b      	itete	eq
 800d59c:	2215      	moveq	r2, #21
 800d59e:	2205      	movne	r2, #5
 800d5a0:	2171      	moveq	r1, #113	; 0x71
 800d5a2:	2161      	movne	r1, #97	; 0x61
 800d5a4:	e7c5      	b.n	800d532 <HAL_SAI_Transmit_DMA+0x92>
}
 800d5a6:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
 800d5a8:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
 800d5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d5b0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800d5b4:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
 800d5b8:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 800d5c0:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d5c2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800d5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ca:	bf00      	nop
 800d5cc:	0800d63d 	.word	0x0800d63d
 800d5d0:	0800d5d9 	.word	0x0800d5d9
 800d5d4:	0800d649 	.word	0x0800d649

0800d5d8 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800d5d8:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d5da:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5e2:	d01b      	beq.n	800d61c <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d5e4:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800d5ec:	6813      	ldr	r3, [r2, #0]
 800d5ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d5f2:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d5f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d5f6:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d5f8:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d5fa:	d012      	beq.n	800d622 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d5fc:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 800d600:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d604:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d606:	3b02      	subs	r3, #2
 800d608:	2b01      	cmp	r3, #1
 800d60a:	bf98      	it	ls
 800d60c:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d60e:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800d610:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800d614:	4013      	ands	r3, r2
 800d616:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800d618:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800d61c:	f7f7 f806 	bl	800462c <HAL_SAI_TxCpltCallback>
#endif
}
 800d620:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800d622:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800d626:	2a01      	cmp	r2, #1
 800d628:	bf0b      	itete	eq
 800d62a:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 800d62e:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 800d632:	f06f 0215 	mvneq.w	r2, #21
 800d636:	f06f 0205 	mvnne.w	r2, #5
 800d63a:	e7e3      	b.n	800d604 <SAI_DMATxCplt+0x2c>

0800d63c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d63c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800d63e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800d640:	f7f6 fffe 	bl	8004640 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800d644:	bd08      	pop	{r3, pc}
 800d646:	bf00      	nop

0800d648 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d648:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d64a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d64c:	f7fc fb3a 	bl	8009cc4 <HAL_DMA_GetError>
 800d650:	2802      	cmp	r0, #2
 800d652:	d025      	beq.n	800d6a0 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d654:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d658:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d65a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d65e:	4b14      	ldr	r3, [pc, #80]	; (800d6b0 <SAI_DMAError+0x68>)
 800d660:	4814      	ldr	r0, [pc, #80]	; (800d6b4 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800d662:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800d666:	680a      	ldr	r2, [r1, #0]
 800d668:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800d66c:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d66e:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 800d670:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d672:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 800d676:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d678:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800d67a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800d67e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800d680:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 800d682:	b173      	cbz	r3, 800d6a2 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d684:	6822      	ldr	r2, [r4, #0]
    count--;
 800d686:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800d688:	6812      	ldr	r2, [r2, #0]
 800d68a:	03d2      	lsls	r2, r2, #15
 800d68c:	d4f9      	bmi.n	800d682 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800d68e:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800d690:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800d692:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 800d694:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800d698:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800d69c:	f7f6 ffd8 	bl	8004650 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800d6a0:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d6a2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800d6a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6aa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 800d6ae:	e7ee      	b.n	800d68e <SAI_DMAError+0x46>
 800d6b0:	20000284 	.word	0x20000284
 800d6b4:	95cbec1b 	.word	0x95cbec1b

0800d6b8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6bc:	4605      	mov	r5, r0
 800d6be:	b086      	sub	sp, #24
 800d6c0:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d6c2:	f7fa fe73 	bl	80083ac <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d6c6:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800d6c8:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d6ca:	6828      	ldr	r0, [r5, #0]
 800d6cc:	f001 fe6c 	bl	800f3a8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	b118      	cbz	r0, 800d6dc <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800d6d4:	4620      	mov	r0, r4
 800d6d6:	b006      	add	sp, #24
 800d6d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d6dc:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800d6de:	6828      	ldr	r0, [r5, #0]
 800d6e0:	0409      	lsls	r1, r1, #16
 800d6e2:	f002 fbbb 	bl	800fe5c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d1f3      	bne.n	800d6d4 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6f0:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6f2:	4669      	mov	r1, sp
 800d6f4:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6f6:	e9cd 2300 	strd	r2, r3, [sp]
 800d6fa:	2230      	movs	r2, #48	; 0x30
 800d6fc:	2302      	movs	r3, #2
 800d6fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d702:	2200      	movs	r2, #0
 800d704:	2301      	movs	r3, #1
 800d706:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d70a:	f001 fe37 	bl	800f37c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d70e:	6828      	ldr	r0, [r5, #0]
 800d710:	f002 fd2a 	bl	8010168 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d714:	4604      	mov	r4, r0
 800d716:	2800      	cmp	r0, #0
 800d718:	d1dc      	bne.n	800d6d4 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d71a:	4682      	mov	sl, r0
 800d71c:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d71e:	f240 582a 	movw	r8, #1322	; 0x52a
 800d722:	e004      	b.n	800d72e <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d724:	f7fa fe42 	bl	80083ac <HAL_GetTick>
 800d728:	1b83      	subs	r3, r0, r6
 800d72a:	3301      	adds	r3, #1
 800d72c:	d024      	beq.n	800d778 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d72e:	6828      	ldr	r0, [r5, #0]
 800d730:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d732:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d736:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d738:	d10c      	bne.n	800d754 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d73a:	0319      	lsls	r1, r3, #12
 800d73c:	d4f2      	bmi.n	800d724 <SD_FindSCR+0x6c>
 800d73e:	2c00      	cmp	r4, #0
 800d740:	d1f0      	bne.n	800d724 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d742:	f001 fe01 	bl	800f348 <SDMMC_ReadFIFO>
 800d746:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d748:	6828      	ldr	r0, [r5, #0]
      index++;
 800d74a:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d74c:	f001 fdfc 	bl	800f348 <SDMMC_ReadFIFO>
 800d750:	4682      	mov	sl, r0
      index++;
 800d752:	e7e7      	b.n	800d724 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d754:	071a      	lsls	r2, r3, #28
 800d756:	d416      	bmi.n	800d786 <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d758:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d75a:	079b      	lsls	r3, r3, #30
 800d75c:	d40f      	bmi.n	800d77e <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d75e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d760:	f014 0420 	ands.w	r4, r4, #32
 800d764:	d113      	bne.n	800d78e <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d766:	fa9a f28a 	rev.w	r2, sl
 800d76a:	fa99 f389 	rev.w	r3, r9
 800d76e:	490a      	ldr	r1, [pc, #40]	; (800d798 <SD_FindSCR+0xe0>)
 800d770:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d772:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800d776:	e7ad      	b.n	800d6d4 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800d778:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d77c:	e7aa      	b.n	800d6d4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d77e:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d780:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d782:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d784:	e7a6      	b.n	800d6d4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d786:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d788:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d78a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d78c:	e7a2      	b.n	800d6d4 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d78e:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 800d790:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d792:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800d794:	e79e      	b.n	800d6d4 <SD_FindSCR+0x1c>
 800d796:	bf00      	nop
 800d798:	18000f3a 	.word	0x18000f3a

0800d79c <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 800d79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7a0:	4604      	mov	r4, r0
 800d7a2:	b096      	sub	sp, #88	; 0x58
 800d7a4:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800d7a6:	f7fa fe01 	bl	80083ac <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d7aa:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800d7ac:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d7ae:	6820      	ldr	r0, [r4, #0]
 800d7b0:	f001 fde0 	bl	800f374 <SDMMC_GetResponse>
 800d7b4:	0182      	lsls	r2, r0, #6
 800d7b6:	d45c      	bmi.n	800d872 <HAL_SD_GetCardStatus.part.0+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d7b8:	2140      	movs	r1, #64	; 0x40
 800d7ba:	6820      	ldr	r0, [r4, #0]
 800d7bc:	f001 fdf4 	bl	800f3a8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	b1e8      	cbz	r0, 800d800 <HAL_SD_GetCardStatus.part.0+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d7c4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d7c6:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7c8:	6820      	ldr	r0, [r4, #0]
 800d7ca:	4956      	ldr	r1, [pc, #344]	; (800d924 <HAL_SD_GetCardStatus.part.0+0x188>)
    hsd->State = HAL_SD_STATE_READY;
 800d7cc:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7ce:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800d7d0:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800d7d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800d7d4:	4303      	orrs	r3, r0
 800d7d6:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d7d8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d7dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7e0:	6820      	ldr	r0, [r4, #0]
 800d7e2:	f001 fde1 	bl	800f3a8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7e6:	b138      	cbz	r0, 800d7f8 <HAL_SD_GetCardStatus.part.0+0x5c>
    hsd->State = HAL_SD_STATE_READY;
 800d7e8:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7ea:	6822      	ldr	r2, [r4, #0]
 800d7ec:	494d      	ldr	r1, [pc, #308]	; (800d924 <HAL_SD_GetCardStatus.part.0+0x188>)
    status = HAL_ERROR;
 800d7ee:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7f0:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d7f2:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d7f4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	b016      	add	sp, #88	; 0x58
 800d7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d800:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d802:	6820      	ldr	r0, [r4, #0]
 800d804:	0409      	lsls	r1, r1, #16
 800d806:	f002 fb29 	bl	800fe5c <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d80a:	4603      	mov	r3, r0
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d1d9      	bne.n	800d7c4 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d814:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d816:	4669      	mov	r1, sp
 800d818:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d81a:	e9cd 2300 	strd	r2, r3, [sp]
 800d81e:	2260      	movs	r2, #96	; 0x60
 800d820:	2302      	movs	r3, #2
 800d822:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d826:	2301      	movs	r3, #1
 800d828:	2200      	movs	r2, #0
 800d82a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d82e:	f001 fda5 	bl	800f37c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d832:	6820      	ldr	r0, [r4, #0]
 800d834:	f002 febc 	bl	80105b0 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d838:	4603      	mov	r3, r0
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d1c2      	bne.n	800d7c4 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
 800d83e:	ae06      	add	r6, sp, #24
 800d840:	e004      	b.n	800d84c <HAL_SD_GetCardStatus.part.0+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d842:	f7fa fdb3 	bl	80083ac <HAL_GetTick>
 800d846:	1bc0      	subs	r0, r0, r7
 800d848:	3001      	adds	r0, #1
 800d84a:	d016      	beq.n	800d87a <HAL_SD_GetCardStatus.part.0+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d84c:	6820      	ldr	r0, [r4, #0]
 800d84e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d850:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d854:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d856:	d113      	bne.n	800d880 <HAL_SD_GetCardStatus.part.0+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d858:	041b      	lsls	r3, r3, #16
 800d85a:	d5f2      	bpl.n	800d842 <HAL_SD_GetCardStatus.part.0+0xa6>
 800d85c:	f106 0820 	add.w	r8, r6, #32
 800d860:	e000      	b.n	800d864 <HAL_SD_GetCardStatus.part.0+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d862:	6820      	ldr	r0, [r4, #0]
 800d864:	f001 fd70 	bl	800f348 <SDMMC_ReadFIFO>
 800d868:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800d86c:	4546      	cmp	r6, r8
 800d86e:	d1f8      	bne.n	800d862 <HAL_SD_GetCardStatus.part.0+0xc6>
 800d870:	e7e7      	b.n	800d842 <HAL_SD_GetCardStatus.part.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d872:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d878:	e7a7      	b.n	800d7ca <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 800d87a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d87e:	e7a3      	b.n	800d7c8 <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d880:	0719      	lsls	r1, r3, #28
 800d882:	d448      	bmi.n	800d916 <HAL_SD_GetCardStatus.part.0+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d884:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d886:	079a      	lsls	r2, r3, #30
 800d888:	d447      	bmi.n	800d91a <HAL_SD_GetCardStatus.part.0+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d88a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d88c:	069b      	lsls	r3, r3, #26
 800d88e:	d50a      	bpl.n	800d8a6 <HAL_SD_GetCardStatus.part.0+0x10a>
 800d890:	e045      	b.n	800d91e <HAL_SD_GetCardStatus.part.0+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d892:	f001 fd59 	bl	800f348 <SDMMC_ReadFIFO>
 800d896:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d89a:	f7fa fd87 	bl	80083ac <HAL_GetTick>
 800d89e:	1bc0      	subs	r0, r0, r7
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	d0ea      	beq.n	800d87a <HAL_SD_GetCardStatus.part.0+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d8a4:	6820      	ldr	r0, [r4, #0]
 800d8a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d8a8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800d8ac:	d1f1      	bne.n	800d892 <HAL_SD_GetCardStatus.part.0+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8ae:	4a1e      	ldr	r2, [pc, #120]	; (800d928 <HAL_SD_GetCardStatus.part.0+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
 800d8b0:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d8b2:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d8b4:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d8b6:	f3c3 1281 	ubfx	r2, r3, #6, #2
 800d8ba:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d8bc:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800d8c0:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d8c2:	0a1a      	lsrs	r2, r3, #8
 800d8c4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800d8c8:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800d8cc:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 800d8d0:	b292      	uxth	r2, r2
 800d8d2:	ba09      	rev	r1, r1
 800d8d4:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d8d6:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d8d8:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d8da:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d8dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d8e0:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d8e4:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d8e6:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d8ea:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d8ec:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d8ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d8f4:	b2d0      	uxtb	r0, r2
 800d8f6:	4303      	orrs	r3, r0
 800d8f8:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d8fa:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800d8fe:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d900:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800d904:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d906:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d90a:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d90e:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d910:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d912:	74a9      	strb	r1, [r5, #18]
 800d914:	e762      	b.n	800d7dc <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d916:	2308      	movs	r3, #8
 800d918:	e757      	b.n	800d7ca <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d91a:	2302      	movs	r3, #2
 800d91c:	e755      	b.n	800d7ca <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 800d91e:	2320      	movs	r3, #32
 800d920:	e753      	b.n	800d7ca <HAL_SD_GetCardStatus.part.0+0x2e>
 800d922:	bf00      	nop
 800d924:	1fe00fff 	.word	0x1fe00fff
 800d928:	18000f3a 	.word	0x18000f3a

0800d92c <HAL_SD_ReadBlocks>:
{
 800d92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d930:	460d      	mov	r5, r1
 800d932:	b087      	sub	sp, #28
 800d934:	4604      	mov	r4, r0
 800d936:	4692      	mov	sl, r2
 800d938:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800d93a:	f7fa fd37 	bl	80083ac <HAL_GetTick>
  if (NULL == pData)
 800d93e:	2d00      	cmp	r5, #0
 800d940:	f000 8093 	beq.w	800da6a <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
 800d944:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d948:	2b01      	cmp	r3, #1
 800d94a:	fa5f f983 	uxtb.w	r9, r3
 800d94e:	d17b      	bne.n	800da48 <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d950:	eb0a 0307 	add.w	r3, sl, r7
 800d954:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d956:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d958:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d95a:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d95c:	f200 808f 	bhi.w	800da7e <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
 800d960:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d962:	f04f 0b02 	mov.w	fp, #2
 800d966:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 800d968:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d970:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d972:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d974:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d976:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d978:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d97c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800d984:	bf18      	it	ne
 800d986:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d98a:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d98c:	027b      	lsls	r3, r7, #9
 800d98e:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d990:	2390      	movs	r3, #144	; 0x90
 800d992:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d996:	f001 fcf1 	bl	800f37c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d99a:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800d99c:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d99e:	68d3      	ldr	r3, [r2, #12]
 800d9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9a4:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800d9a6:	d959      	bls.n	800da5c <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d9a8:	4651      	mov	r1, sl
 800d9aa:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d9ac:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d9b0:	f001 fe46 	bl	800f640 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	d16a      	bne.n	800da8e <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
 800d9b8:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d9bc:	e005      	b.n	800d9ca <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800d9be:	f7fa fcf5 	bl	80083ac <HAL_GetTick>
 800d9c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9c4:	1b80      	subs	r0, r0, r6
 800d9c6:	4298      	cmp	r0, r3
 800d9c8:	d22c      	bcs.n	800da24 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d9ca:	6820      	ldr	r0, [r4, #0]
 800d9cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d9ce:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800d9d2:	d168      	bne.n	800daa6 <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800d9d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d9d6:	041a      	lsls	r2, r3, #16
 800d9d8:	d5f1      	bpl.n	800d9be <HAL_SD_ReadBlocks+0x92>
 800d9da:	f1bb 0f1f 	cmp.w	fp, #31
 800d9de:	d9ee      	bls.n	800d9be <HAL_SD_ReadBlocks+0x92>
 800d9e0:	f105 0804 	add.w	r8, r5, #4
 800d9e4:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 800d9e8:	e000      	b.n	800d9ec <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800d9ea:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
 800d9ec:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 800d9f0:	f001 fcaa 	bl	800f348 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d9f4:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d9f8:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
 800d9fa:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d9fc:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 800da00:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800da04:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800da08:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800da0c:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
 800da10:	d1eb      	bne.n	800d9ea <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800da12:	f7fa fccb 	bl	80083ac <HAL_GetTick>
 800da16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da18:	1b80      	subs	r0, r0, r6
          tempbuff++;
 800da1a:	3520      	adds	r5, #32
        dataremaining -= 32U;
 800da1c:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800da20:	4298      	cmp	r0, r3
 800da22:	d3d2      	bcc.n	800d9ca <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da24:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800da26:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da2a:	4842      	ldr	r0, [pc, #264]	; (800db34 <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
 800da2c:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 800da2e:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da30:	6398      	str	r0, [r3, #56]	; 0x38
}
 800da32:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800da34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da3a:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800da3c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800da40:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800da42:	b007      	add	sp, #28
 800da44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800da48:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800da4a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800da4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da52:	6363      	str	r3, [r4, #52]	; 0x34
}
 800da54:	4648      	mov	r0, r9
 800da56:	b007      	add	sp, #28
 800da58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800da5c:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800da5e:	4651      	mov	r1, sl
 800da60:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800da62:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800da64:	f001 fd46 	bl	800f4f4 <SDMMC_CmdReadSingleBlock>
 800da68:	e7a4      	b.n	800d9b4 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800da6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800da6c:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800da70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800da74:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800da76:	6363      	str	r3, [r4, #52]	; 0x34
}
 800da78:	b007      	add	sp, #28
 800da7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800da7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800da80:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800da82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800da86:	6363      	str	r3, [r4, #52]	; 0x34
}
 800da88:	b007      	add	sp, #28
 800da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	4a28      	ldr	r2, [pc, #160]	; (800db34 <HAL_SD_ReadBlocks+0x208>)
 800da92:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800da94:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800da96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da98:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800da9a:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800da9c:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800da9e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800daa2:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800daa4:	e7d6      	b.n	800da54 <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800daa6:	68c3      	ldr	r3, [r0, #12]
 800daa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daac:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800daae:	6820      	ldr	r0, [r4, #0]
 800dab0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dab2:	05db      	lsls	r3, r3, #23
 800dab4:	d509      	bpl.n	800daca <HAL_SD_ReadBlocks+0x19e>
 800dab6:	2f01      	cmp	r7, #1
 800dab8:	d907      	bls.n	800daca <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800daba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dabc:	2b03      	cmp	r3, #3
 800dabe:	d004      	beq.n	800daca <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dac0:	f001 ffb0 	bl	800fa24 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d1e2      	bne.n	800da8e <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dac8:	6820      	ldr	r0, [r4, #0]
 800daca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dacc:	f013 0308 	ands.w	r3, r3, #8
 800dad0:	d112      	bne.n	800daf8 <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dad2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dad4:	f012 0202 	ands.w	r2, r2, #2
 800dad8:	d11a      	bne.n	800db10 <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dada:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dadc:	f013 0320 	ands.w	r3, r3, #32
 800dae0:	d021      	beq.n	800db26 <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dae2:	4b14      	ldr	r3, [pc, #80]	; (800db34 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800dae4:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dae6:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800daea:	f043 0320 	orr.w	r3, r3, #32
 800daee:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800daf0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800daf4:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800daf6:	e7ad      	b.n	800da54 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800daf8:	4b0e      	ldr	r3, [pc, #56]	; (800db34 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800dafa:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dafc:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dafe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db00:	f043 0308 	orr.w	r3, r3, #8
 800db04:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db06:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800db08:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db0c:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800db0e:	e7a1      	b.n	800da54 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db10:	4a08      	ldr	r2, [pc, #32]	; (800db34 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800db12:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db14:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800db16:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800db18:	f042 0202 	orr.w	r2, r2, #2
 800db1c:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800db1e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db22:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800db24:	e796      	b.n	800da54 <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db26:	4904      	ldr	r1, [pc, #16]	; (800db38 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
 800db28:	2201      	movs	r2, #1
    return HAL_OK;
 800db2a:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db2c:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db2e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800db32:	e78f      	b.n	800da54 <HAL_SD_ReadBlocks+0x128>
 800db34:	1fe00fff 	.word	0x1fe00fff
 800db38:	18000f3a 	.word	0x18000f3a

0800db3c <HAL_SD_WriteBlocks>:
{
 800db3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db40:	460d      	mov	r5, r1
 800db42:	b089      	sub	sp, #36	; 0x24
 800db44:	4604      	mov	r4, r0
 800db46:	4692      	mov	sl, r2
 800db48:	461f      	mov	r7, r3
 800db4a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800db4e:	f7fa fc2d 	bl	80083ac <HAL_GetTick>
  if (NULL == pData)
 800db52:	2d00      	cmp	r5, #0
 800db54:	d07c      	beq.n	800dc50 <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
 800db56:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	fa5f f983 	uxtb.w	r9, r3
 800db60:	d166      	bne.n	800dc30 <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800db62:	eb0a 0307 	add.w	r3, sl, r7
 800db66:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800db68:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800db6a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800db6c:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800db6e:	d879      	bhi.n	800dc64 <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
 800db70:	2303      	movs	r3, #3
 800db72:	4606      	mov	r6, r0
 800db74:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800db7c:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800db7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800db80:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800db82:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800db84:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800db88:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800db8c:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800db92:	bf18      	it	ne
 800db94:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db98:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800db9a:	027b      	lsls	r3, r7, #9
 800db9c:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800db9e:	2390      	movs	r3, #144	; 0x90
 800dba0:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dba2:	f001 fbeb 	bl	800f37c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800dba6:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800dba8:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dbaa:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800dbac:	68d3      	ldr	r3, [r2, #12]
 800dbae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbb2:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800dbb4:	d946      	bls.n	800dc44 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800dbb6:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dbb8:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800dbba:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dbbc:	f001 fe8c 	bl	800f8d8 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	d157      	bne.n	800dc74 <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
 800dbc4:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800dbc8:	e004      	b.n	800dbd4 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800dbca:	f7fa fbef 	bl	80083ac <HAL_GetTick>
 800dbce:	1b80      	subs	r0, r0, r6
 800dbd0:	4540      	cmp	r0, r8
 800dbd2:	d21d      	bcs.n	800dc10 <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800dbd4:	6820      	ldr	r0, [r4, #0]
 800dbd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dbd8:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800dbdc:	d156      	bne.n	800dc8c <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800dbde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dbe0:	045a      	lsls	r2, r3, #17
 800dbe2:	d5f2      	bpl.n	800dbca <HAL_SD_WriteBlocks+0x8e>
 800dbe4:	f1bb 0f1f 	cmp.w	fp, #31
 800dbe8:	d9ef      	bls.n	800dbca <HAL_SD_WriteBlocks+0x8e>
 800dbea:	f105 0a20 	add.w	sl, r5, #32
 800dbee:	e000      	b.n	800dbf2 <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dbf0:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800dbf2:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dbf6:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800dbf8:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dbfa:	f001 fba9 	bl	800f350 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800dbfe:	4555      	cmp	r5, sl
 800dc00:	d1f6      	bne.n	800dbf0 <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800dc02:	f7fa fbd3 	bl	80083ac <HAL_GetTick>
 800dc06:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
 800dc08:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800dc0c:	4540      	cmp	r0, r8
 800dc0e:	d3e1      	bcc.n	800dbd4 <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc10:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
 800dc12:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc16:	4841      	ldr	r0, [pc, #260]	; (800dd1c <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
 800dc18:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 800dc1a:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc1c:	6388      	str	r0, [r1, #56]	; 0x38
}
 800dc1e:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
 800dc20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc22:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800dc24:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800dc28:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800dc2a:	b009      	add	sp, #36	; 0x24
 800dc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800dc30:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800dc32:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800dc36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc3a:	6363      	str	r3, [r4, #52]	; 0x34
}
 800dc3c:	4648      	mov	r0, r9
 800dc3e:	b009      	add	sp, #36	; 0x24
 800dc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800dc44:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dc46:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800dc48:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dc4a:	f001 fd9f 	bl	800f78c <SDMMC_CmdWriteSingleBlock>
 800dc4e:	e7b7      	b.n	800dbc0 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dc50:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800dc52:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dc56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800dc5a:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dc5c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800dc5e:	b009      	add	sp, #36	; 0x24
 800dc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dc64:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800dc66:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dc68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dc6c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800dc6e:	b009      	add	sp, #36	; 0x24
 800dc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	4a29      	ldr	r2, [pc, #164]	; (800dd1c <HAL_SD_WriteBlocks+0x1e0>)
 800dc78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800dc7a:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800dc7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc7e:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800dc80:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800dc82:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800dc84:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800dc88:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800dc8a:	e7d7      	b.n	800dc3c <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dc8c:	68c3      	ldr	r3, [r0, #12]
 800dc8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc92:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800dc94:	6820      	ldr	r0, [r4, #0]
 800dc96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dc98:	05db      	lsls	r3, r3, #23
 800dc9a:	d509      	bpl.n	800dcb0 <HAL_SD_WriteBlocks+0x174>
 800dc9c:	2f01      	cmp	r7, #1
 800dc9e:	d907      	bls.n	800dcb0 <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800dca0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dca2:	2b03      	cmp	r3, #3
 800dca4:	d004      	beq.n	800dcb0 <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dca6:	f001 febd 	bl	800fa24 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d1e2      	bne.n	800dc74 <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dcae:	6820      	ldr	r0, [r4, #0]
 800dcb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dcb2:	f013 0308 	ands.w	r3, r3, #8
 800dcb6:	d112      	bne.n	800dcde <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dcb8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dcba:	f012 0202 	ands.w	r2, r2, #2
 800dcbe:	d11a      	bne.n	800dcf6 <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800dcc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dcc2:	f013 0310 	ands.w	r3, r3, #16
 800dcc6:	d021      	beq.n	800dd0c <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcc8:	4b14      	ldr	r3, [pc, #80]	; (800dd1c <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800dcca:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dccc:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dcce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcd0:	f043 0310 	orr.w	r3, r3, #16
 800dcd4:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dcd6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dcda:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800dcdc:	e7ae      	b.n	800dc3c <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcde:	4b0f      	ldr	r3, [pc, #60]	; (800dd1c <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800dce0:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dce2:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dce4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dce6:	f043 0308 	orr.w	r3, r3, #8
 800dcea:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dcec:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800dcee:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dcf2:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800dcf4:	e7a2      	b.n	800dc3c <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcf6:	4a09      	ldr	r2, [pc, #36]	; (800dd1c <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800dcf8:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcfa:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dcfc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800dcfe:	f042 0202 	orr.w	r2, r2, #2
 800dd02:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dd04:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dd08:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800dd0a:	e797      	b.n	800dc3c <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd0c:	4904      	ldr	r1, [pc, #16]	; (800dd20 <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
 800dd0e:	2201      	movs	r2, #1
    return HAL_OK;
 800dd10:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd12:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd14:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800dd18:	e790      	b.n	800dc3c <HAL_SD_WriteBlocks+0x100>
 800dd1a:	bf00      	nop
 800dd1c:	1fe00fff 	.word	0x1fe00fff
 800dd20:	18000f3a 	.word	0x18000f3a

0800dd24 <HAL_SD_ErrorCallback>:
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop

0800dd28 <HAL_SD_GetCardCSD>:
{
 800dd28:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dd2a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd2c:	f04f 0c00 	mov.w	ip, #0
{
 800dd30:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dd32:	0f92      	lsrs	r2, r2, #30
 800dd34:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dd36:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800dd38:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800dd3c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dd3e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 800dd42:	f002 0203 	and.w	r2, r2, #3
 800dd46:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dd48:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 800dd4c:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dd4e:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 800dd52:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dd54:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800dd58:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dd5a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800dd5c:	0d12      	lsrs	r2, r2, #20
 800dd5e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dd60:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800dd64:	f002 020f 	and.w	r2, r2, #15
 800dd68:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dd6a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800dd6c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800dd70:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dd72:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800dd74:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800dd78:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dd7a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800dd7c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800dd80:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dd82:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800dd84:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800dd88:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd8a:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800dd8e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800dd90:	2a00      	cmp	r2, #0
 800dd92:	f040 808a 	bne.w	800deaa <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dd96:	f640 72fc 	movw	r2, #4092	; 0xffc
 800dd9a:	e9d0 4018 	ldrd	r4, r0, [r0, #96]	; 0x60
 800dd9e:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 800dda2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800dda6:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dda8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ddaa:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800ddae:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ddb0:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800ddb4:	f002 0207 	and.w	r2, r2, #7
 800ddb8:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ddba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ddbc:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800ddc0:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ddc2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ddc4:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800ddc8:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ddca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ddcc:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800ddd0:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ddd2:	690a      	ldr	r2, [r1, #16]
 800ddd4:	3201      	adds	r2, #1
 800ddd6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ddd8:	7e08      	ldrb	r0, [r1, #24]
 800ddda:	f000 0007 	and.w	r0, r0, #7
 800ddde:	3002      	adds	r0, #2
 800dde0:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dde2:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dde4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dde6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ddea:	f00c 0c0f 	and.w	ip, ip, #15
 800ddee:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ddf2:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ddf6:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = 512U;
 800ddf8:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ddfc:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
 800de00:	e9c3 2014 	strd	r2, r0, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800de04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  pCSD->Reserved3 = 0;
 800de06:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 800de08:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800de0c:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800de10:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800de12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800de14:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800de18:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800de1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800de1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800de20:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800de22:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de24:	0fd2      	lsrs	r2, r2, #31
 800de26:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800de28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de2a:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800de2e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800de30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de32:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800de36:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800de38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de3a:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800de3e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800de40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de42:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800de46:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800de4a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800de4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800de52:	ea02 020c 	and.w	r2, r2, ip
 800de56:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800de5a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de5c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800de60:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800de64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de66:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800de6a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800de6e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de70:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800de74:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800de78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de7a:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800de7e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800de82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de84:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800de88:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800de8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800de8e:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800de92:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800de96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de98:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800de9c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800dea0:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 800dea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dea8:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800deaa:	2a01      	cmp	r2, #1
 800deac:	d112      	bne.n	800ded4 <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800deae:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800deb0:	f8b0 c066 	ldrh.w	ip, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 800deb4:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800deb8:	0412      	lsls	r2, r2, #16
 800deba:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800debe:	ea42 020c 	orr.w	r2, r2, ip
 800dec2:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dec4:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800dec6:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dec8:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800deca:	6558      	str	r0, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800decc:	0292      	lsls	r2, r2, #10
 800dece:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ded0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ded2:	e797      	b.n	800de04 <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ded4:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 800ded6:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ded8:	4805      	ldr	r0, [pc, #20]	; (800def0 <HAL_SD_GetCardCSD+0x1c8>)
 800deda:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 800dedc:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dee0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800dee4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dee6:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 800deea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deee:	4770      	bx	lr
 800def0:	1fe00fff 	.word	0x1fe00fff

0800def4 <HAL_SD_InitCard>:
{
 800def4:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800def6:	2200      	movs	r2, #0
{
 800def8:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800defa:	2300      	movs	r3, #0
{
 800defc:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800defe:	2100      	movs	r1, #0
 800df00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800df04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df08:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800df0c:	f7fe fdf4 	bl	800caf8 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800df10:	b940      	cbnz	r0, 800df24 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 800df12:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800df14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800df18:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800df1c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800df1e:	4630      	mov	r0, r6
 800df20:	b015      	add	sp, #84	; 0x54
 800df22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800df24:	0a06      	lsrs	r6, r0, #8
 800df26:	4b8f      	ldr	r3, [pc, #572]	; (800e164 <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800df28:	aa07      	add	r2, sp, #28
 800df2a:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800df2c:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800df30:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800df32:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800df34:	9608      	str	r6, [sp, #32]
 800df36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800df3a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800df3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df40:	6820      	ldr	r0, [r4, #0]
 800df42:	f001 f9e5 	bl	800f310 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800df46:	6820      	ldr	r0, [r4, #0]
 800df48:	f001 fa08 	bl	800f35c <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800df4c:	4b86      	ldr	r3, [pc, #536]	; (800e168 <HAL_SD_InitCard+0x274>)
 800df4e:	429d      	cmp	r5, r3
 800df50:	d902      	bls.n	800df58 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800df52:	0076      	lsls	r6, r6, #1
 800df54:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800df58:	4884      	ldr	r0, [pc, #528]	; (800e16c <HAL_SD_InitCard+0x278>)
 800df5a:	fbb0 f0f5 	udiv	r0, r0, r5
 800df5e:	3001      	adds	r0, #1
 800df60:	f7fa fa2a 	bl	80083b8 <HAL_Delay>
  __IO uint32_t count = 0U;
 800df64:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800df66:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800df68:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800df6a:	f001 ff0b 	bl	800fd84 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800df6e:	4605      	mov	r5, r0
 800df70:	b140      	cbz	r0, 800df84 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800df72:	2601      	movs	r6, #1
 800df74:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 800df78:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800df7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df7c:	431d      	orrs	r5, r3
 800df7e:	6365      	str	r5, [r4, #52]	; 0x34
}
 800df80:	b015      	add	sp, #84	; 0x54
 800df82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800df84:	6820      	ldr	r0, [r4, #0]
 800df86:	f001 ff29 	bl	800fddc <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800df8a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800df8e:	d06c      	beq.n	800e06a <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800df90:	2301      	movs	r3, #1
 800df92:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df94:	2100      	movs	r1, #0
 800df96:	6820      	ldr	r0, [r4, #0]
 800df98:	f001 ff60 	bl	800fe5c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800df9c:	bb08      	cbnz	r0, 800dfe2 <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800df9e:	9b03      	ldr	r3, [sp, #12]
 800dfa0:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800dfa4:	42b3      	cmp	r3, r6
 800dfa6:	f200 80d6 	bhi.w	800e156 <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800dfaa:	4f71      	ldr	r7, [pc, #452]	; (800e170 <HAL_SD_InitCard+0x27c>)
 800dfac:	e00b      	b.n	800dfc6 <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dfae:	6820      	ldr	r0, [r4, #0]
 800dfb0:	f001 f9e0 	bl	800f374 <SDMMC_GetResponse>
    count++;
 800dfb4:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dfb6:	2800      	cmp	r0, #0
    count++;
 800dfb8:	f103 0301 	add.w	r3, r3, #1
 800dfbc:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dfbe:	9b03      	ldr	r3, [sp, #12]
 800dfc0:	db12      	blt.n	800dfe8 <HAL_SD_InitCard+0xf4>
 800dfc2:	42b3      	cmp	r3, r6
 800dfc4:	d810      	bhi.n	800dfe8 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dfc6:	2100      	movs	r1, #0
 800dfc8:	6820      	ldr	r0, [r4, #0]
 800dfca:	f001 ff47 	bl	800fe5c <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800dfce:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfd0:	4605      	mov	r5, r0
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d1cd      	bne.n	800df72 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800dfd6:	6820      	ldr	r0, [r4, #0]
 800dfd8:	f001 ffe6 	bl	800ffa8 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800dfdc:	4601      	mov	r1, r0
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d0e5      	beq.n	800dfae <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfe2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800dfe6:	e7c4      	b.n	800df72 <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800dfe8:	9a03      	ldr	r2, [sp, #12]
 800dfea:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800dfee:	429a      	cmp	r2, r3
 800dff0:	f200 80ab 	bhi.w	800e14a <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800dff4:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 800dff8:	d043      	beq.n	800e082 <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dffa:	2301      	movs	r3, #1
 800dffc:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 800dffe:	2300      	movs	r3, #0
 800e000:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800e004:	f7fa f9d2 	bl	80083ac <HAL_GetTick>
 800e008:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e00a:	6820      	ldr	r0, [r4, #0]
 800e00c:	f001 f9ae 	bl	800f36c <SDMMC_GetPowerState>
 800e010:	2800      	cmp	r0, #0
 800e012:	d038      	beq.n	800e086 <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e014:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e016:	2b03      	cmp	r3, #3
 800e018:	d140      	bne.n	800e09c <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e01a:	2104      	movs	r1, #4
 800e01c:	6820      	ldr	r0, [r4, #0]
 800e01e:	f001 f9a9 	bl	800f374 <SDMMC_GetResponse>
 800e022:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e024:	a909      	add	r1, sp, #36	; 0x24
 800e026:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e028:	0d1b      	lsrs	r3, r3, #20
 800e02a:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e02c:	f7ff fe7c 	bl	800dd28 <HAL_SD_GetCardCSD>
 800e030:	4606      	mov	r6, r0
 800e032:	2800      	cmp	r0, #0
 800e034:	f040 808c 	bne.w	800e150 <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e038:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e03a:	6820      	ldr	r0, [r4, #0]
 800e03c:	0409      	lsls	r1, r1, #16
 800e03e:	f001 fdfb 	bl	800fc38 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e042:	bb10      	cbnz	r0, 800e08a <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e044:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e048:	6820      	ldr	r0, [r4, #0]
 800e04a:	f001 f9ad 	bl	800f3a8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e04e:	2800      	cmp	r0, #0
 800e050:	f43f af65 	beq.w	800df1e <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e054:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800e056:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e058:	4946      	ldr	r1, [pc, #280]	; (800e174 <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
 800e05a:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e05c:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e05e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e060:	4310      	orrs	r0, r2
 800e062:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e064:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 800e068:	e759      	b.n	800df1e <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e06a:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e06c:	6820      	ldr	r0, [r4, #0]
 800e06e:	f001 fe89 	bl	800fd84 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e072:	4605      	mov	r5, r0
 800e074:	2800      	cmp	r0, #0
 800e076:	f47f af7c 	bne.w	800df72 <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e07a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d18e      	bne.n	800df9e <HAL_SD_InitCard+0xaa>
 800e080:	e788      	b.n	800df94 <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
 800e082:	63a0      	str	r0, [r4, #56]	; 0x38
 800e084:	e7bb      	b.n	800dffe <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e086:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800e08a:	2601      	movs	r6, #1
 800e08c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e092:	4318      	orrs	r0, r3
 800e094:	6360      	str	r0, [r4, #52]	; 0x34
}
 800e096:	4630      	mov	r0, r6
 800e098:	b015      	add	sp, #84	; 0x54
 800e09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e09c:	6820      	ldr	r0, [r4, #0]
 800e09e:	f002 f90b 	bl	80102b8 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	d1f1      	bne.n	800e08a <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	6820      	ldr	r0, [r4, #0]
 800e0aa:	f001 f963 	bl	800f374 <SDMMC_GetResponse>
 800e0ae:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0b0:	2104      	movs	r1, #4
 800e0b2:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0b4:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0b6:	f001 f95d 	bl	800f374 <SDMMC_GetResponse>
 800e0ba:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0bc:	2108      	movs	r1, #8
 800e0be:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0c0:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0c2:	f001 f957 	bl	800f374 <SDMMC_GetResponse>
 800e0c6:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e0c8:	210c      	movs	r1, #12
 800e0ca:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0cc:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e0ce:	f001 f951 	bl	800f374 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e0d4:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0d6:	2b03      	cmp	r3, #3
 800e0d8:	d09f      	beq.n	800e01a <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e0da:	f241 3687 	movw	r6, #4999	; 0x1387
 800e0de:	e009      	b.n	800e0f4 <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e0e0:	6820      	ldr	r0, [r4, #0]
 800e0e2:	f002 f967 	bl	80103b4 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d1cf      	bne.n	800e08a <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e0ea:	f7fa f95f 	bl	80083ac <HAL_GetTick>
 800e0ee:	1b43      	subs	r3, r0, r5
 800e0f0:	42b3      	cmp	r3, r6
 800e0f2:	d827      	bhi.n	800e144 <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
 800e0f4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e0f8:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d0ef      	beq.n	800e0e0 <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e100:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e102:	2a03      	cmp	r2, #3
 800e104:	d089      	beq.n	800e01a <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e106:	0419      	lsls	r1, r3, #16
 800e108:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800e10a:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e10c:	f002 f912 	bl	8010334 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e110:	2800      	cmp	r0, #0
 800e112:	d1ba      	bne.n	800e08a <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e114:	4601      	mov	r1, r0
 800e116:	6820      	ldr	r0, [r4, #0]
 800e118:	f001 f92c 	bl	800f374 <SDMMC_GetResponse>
 800e11c:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e11e:	2104      	movs	r1, #4
 800e120:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e122:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e124:	f001 f926 	bl	800f374 <SDMMC_GetResponse>
 800e128:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e12a:	2108      	movs	r1, #8
 800e12c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e12e:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e130:	f001 f920 	bl	800f374 <SDMMC_GetResponse>
 800e134:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e136:	210c      	movs	r1, #12
 800e138:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e13a:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e13c:	f001 f91a 	bl	800f374 <SDMMC_GetResponse>
 800e140:	66a0      	str	r0, [r4, #104]	; 0x68
 800e142:	e76a      	b.n	800e01a <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
 800e144:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800e148:	e79f      	b.n	800e08a <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e14a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800e14e:	e710      	b.n	800df72 <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e150:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800e154:	e799      	b.n	800e08a <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e156:	9b03      	ldr	r3, [sp, #12]
 800e158:	42b3      	cmp	r3, r6
 800e15a:	d8f6      	bhi.n	800e14a <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
 800e15c:	2300      	movs	r3, #0
 800e15e:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e160:	e74d      	b.n	800dffe <HAL_SD_InitCard+0x10a>
 800e162:	bf00      	nop
 800e164:	014f8b59 	.word	0x014f8b59
 800e168:	000c34ff 	.word	0x000c34ff
 800e16c:	00012110 	.word	0x00012110
 800e170:	c1100000 	.word	0xc1100000
 800e174:	1fe00fff 	.word	0x1fe00fff

0800e178 <HAL_SD_GetCardInfo>:
{
 800e178:	4603      	mov	r3, r0
}
 800e17a:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e17c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e17e:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e182:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e186:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e18a:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e18c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e18e:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e192:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e196:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e19a:	61cb      	str	r3, [r1, #28]
}
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop

0800e1a0 <HAL_SD_ConfigWideBusOperation>:
{
 800e1a0:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800e1a2:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e1a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800e1a6:	b089      	sub	sp, #36	; 0x24
 800e1a8:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e1aa:	4293      	cmp	r3, r2
{
 800e1ac:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800e1ae:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e1b2:	d033      	beq.n	800e21c <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e1b4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800e1b8:	d030      	beq.n	800e21c <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e1ba:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800e1be:	f000 8084 	beq.w	800e2ca <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e1c2:	2900      	cmp	r1, #0
 800e1c4:	d062      	beq.n	800e28c <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e1c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e1c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e1cc:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e1ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1d0:	bb5b      	cbnz	r3, 800e22a <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e1d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e1d6:	2100      	movs	r1, #0
 800e1d8:	f7fe fc8e 	bl	800caf8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d03b      	beq.n	800e258 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e1e0:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e1e2:	4b55      	ldr	r3, [pc, #340]	; (800e338 <HAL_SD_ConfigWideBusOperation+0x198>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e1e4:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800e1e6:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e1e8:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e1ea:	fba3 5300 	umull	r5, r3, r3, r0
 800e1ee:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e1f0:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e1f2:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e1f6:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e1f8:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e1fc:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e1fe:	d238      	bcs.n	800e272 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e200:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e202:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e206:	d034      	beq.n	800e272 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e208:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800e20c:	d07f      	beq.n	800e30e <HAL_SD_ConfigWideBusOperation+0x16e>
        if (hsd->Init.ClockDiv == 0U)
 800e20e:	bb4a      	cbnz	r2, 800e264 <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e210:	4b4a      	ldr	r3, [pc, #296]	; (800e33c <HAL_SD_ConfigWideBusOperation+0x19c>)
 800e212:	4298      	cmp	r0, r3
 800e214:	f240 8085 	bls.w	800e322 <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e218:	9506      	str	r5, [sp, #24]
 800e21a:	e02b      	b.n	800e274 <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e21c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e21e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e222:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e224:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e226:	2b00      	cmp	r3, #0
 800e228:	d0d3      	beq.n	800e1d2 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e22a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800e22c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e22e:	4a44      	ldr	r2, [pc, #272]	; (800e340 <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800e230:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e232:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e236:	6820      	ldr	r0, [r4, #0]
 800e238:	f001 f8b6 	bl	800f3a8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e23c:	b130      	cbz	r0, 800e24c <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e23e:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800e240:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e242:	4a3f      	ldr	r2, [pc, #252]	; (800e340 <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800e244:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e248:	4318      	orrs	r0, r3
 800e24a:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800e24c:	2301      	movs	r3, #1
}
 800e24e:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800e250:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800e254:	b009      	add	sp, #36	; 0x24
 800e256:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e258:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800e25a:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e25c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e260:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800e262:	e7e6      	b.n	800e232 <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e264:	0053      	lsls	r3, r2, #1
 800e266:	fbb0 f0f3 	udiv	r0, r0, r3
 800e26a:	4b34      	ldr	r3, [pc, #208]	; (800e33c <HAL_SD_ConfigWideBusOperation+0x19c>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e26c:	4298      	cmp	r0, r3
 800e26e:	bf88      	it	hi
 800e270:	462a      	movhi	r2, r5
 800e272:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800e274:	aa05      	add	r2, sp, #20
 800e276:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800e278:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800e27a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e27e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e282:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e284:	6820      	ldr	r0, [r4, #0]
 800e286:	f001 f843 	bl	800f310 <SDMMC_Init>
 800e28a:	e7d2      	b.n	800e232 <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
 800e28c:	2200      	movs	r2, #0
 800e28e:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e290:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800e292:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e296:	f001 f86d 	bl	800f374 <SDMMC_GetResponse>
 800e29a:	0182      	lsls	r2, r0, #6
 800e29c:	d434      	bmi.n	800e308 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800e29e:	a902      	add	r1, sp, #8
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	f7ff fa09 	bl	800d6b8 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2a6:	b960      	cbnz	r0, 800e2c2 <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e2a8:	9b03      	ldr	r3, [sp, #12]
 800e2aa:	03db      	lsls	r3, r3, #15
 800e2ac:	d536      	bpl.n	800e31c <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e2b0:	6820      	ldr	r0, [r4, #0]
 800e2b2:	0409      	lsls	r1, r1, #16
 800e2b4:	f001 fdd2 	bl	800fe5c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2b8:	b918      	cbnz	r0, 800e2c2 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e2ba:	4601      	mov	r1, r0
 800e2bc:	6820      	ldr	r0, [r4, #0]
 800e2be:	f001 fead 	bl	801001c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800e2c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2c4:	4318      	orrs	r0, r3
 800e2c6:	6360      	str	r0, [r4, #52]	; 0x34
 800e2c8:	e7ac      	b.n	800e224 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800e2d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2d6:	f001 f84d 	bl	800f374 <SDMMC_GetResponse>
 800e2da:	0180      	lsls	r0, r0, #6
 800e2dc:	d414      	bmi.n	800e308 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800e2de:	a902      	add	r1, sp, #8
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	f7ff f9e9 	bl	800d6b8 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	d1eb      	bne.n	800e2c2 <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e2ea:	9b03      	ldr	r3, [sp, #12]
 800e2ec:	0359      	lsls	r1, r3, #13
 800e2ee:	d515      	bpl.n	800e31c <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2f0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e2f2:	6820      	ldr	r0, [r4, #0]
 800e2f4:	0409      	lsls	r1, r1, #16
 800e2f6:	f001 fdb1 	bl	800fe5c <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d1e1      	bne.n	800e2c2 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e2fe:	2102      	movs	r1, #2
 800e300:	6820      	ldr	r0, [r4, #0]
 800e302:	f001 fe8b 	bl	801001c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e306:	e7dc      	b.n	800e2c2 <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e308:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e30c:	e7d9      	b.n	800e2c2 <HAL_SD_ConfigWideBusOperation+0x122>
        if (hsd->Init.ClockDiv == 0U)
 800e30e:	b95a      	cbnz	r2, 800e328 <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e310:	4a0c      	ldr	r2, [pc, #48]	; (800e344 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800e312:	4290      	cmp	r0, r2
 800e314:	d905      	bls.n	800e322 <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e316:	0e5b      	lsrs	r3, r3, #25
 800e318:	9306      	str	r3, [sp, #24]
 800e31a:	e7ab      	b.n	800e274 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e31c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800e320:	e7cf      	b.n	800e2c2 <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e322:	2300      	movs	r3, #0
 800e324:	9306      	str	r3, [sp, #24]
 800e326:	e7a5      	b.n	800e274 <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e328:	0051      	lsls	r1, r2, #1
 800e32a:	fbb0 f0f1 	udiv	r0, r0, r1
 800e32e:	4905      	ldr	r1, [pc, #20]	; (800e344 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800e330:	4288      	cmp	r0, r1
 800e332:	d99e      	bls.n	800e272 <HAL_SD_ConfigWideBusOperation+0xd2>
 800e334:	e7ef      	b.n	800e316 <HAL_SD_ConfigWideBusOperation+0x176>
 800e336:	bf00      	nop
 800e338:	55e63b89 	.word	0x55e63b89
 800e33c:	017d7840 	.word	0x017d7840
 800e340:	1fe00fff 	.word	0x1fe00fff
 800e344:	02faf080 	.word	0x02faf080

0800e348 <HAL_SD_Init>:
{
 800e348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e34a:	b087      	sub	sp, #28
  if (hsd == NULL)
 800e34c:	2800      	cmp	r0, #0
 800e34e:	d044      	beq.n	800e3da <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
 800e350:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e354:	4604      	mov	r4, r0
 800e356:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d041      	beq.n	800e3e2 <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e35e:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e360:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800e362:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800e366:	f7ff fdc5 	bl	800def4 <HAL_SD_InitCard>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d135      	bne.n	800e3da <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800e36e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e372:	2b03      	cmp	r3, #3
 800e374:	d031      	beq.n	800e3da <HAL_SD_Init+0x92>
 800e376:	a901      	add	r1, sp, #4
 800e378:	4620      	mov	r0, r4
 800e37a:	f7ff fa0f 	bl	800d79c <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800e37e:	bb60      	cbnz	r0, 800e3da <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e380:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800e382:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e386:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e388:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800e38c:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800e38e:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e390:	d02b      	beq.n	800e3ea <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800e392:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800e394:	68e1      	ldr	r1, [r4, #12]
 800e396:	4620      	mov	r0, r4
 800e398:	f7ff ff02 	bl	800e1a0 <HAL_SD_ConfigWideBusOperation>
 800e39c:	4606      	mov	r6, r0
 800e39e:	b9e0      	cbnz	r0, 800e3da <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
 800e3a0:	f7fa f804 	bl	80083ac <HAL_GetTick>
 800e3a4:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e3a6:	e00c      	b.n	800e3c2 <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	4629      	mov	r1, r5
 800e3ac:	f000 ffe2 	bl	800f374 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e3b0:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800e3b4:	2804      	cmp	r0, #4
 800e3b6:	d020      	beq.n	800e3fa <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3b8:	f7f9 fff8 	bl	80083ac <HAL_GetTick>
 800e3bc:	1bc3      	subs	r3, r0, r7
 800e3be:	3301      	adds	r3, #1
 800e3c0:	d021      	beq.n	800e406 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e3c4:	6820      	ldr	r0, [r4, #0]
 800e3c6:	0409      	lsls	r1, r1, #16
 800e3c8:	f002 f84c 	bl	8010464 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d0ea      	beq.n	800e3a8 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
 800e3d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3d4:	4303      	orrs	r3, r0
 800e3d6:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800e3d8:	e7ee      	b.n	800e3b8 <HAL_SD_Init+0x70>
    return HAL_ERROR;
 800e3da:	2601      	movs	r6, #1
}
 800e3dc:	4630      	mov	r0, r6
 800e3de:	b007      	add	sp, #28
 800e3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800e3e2:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800e3e4:	f7f9 fc26 	bl	8007c34 <HAL_SD_MspInit>
 800e3e8:	e7b9      	b.n	800e35e <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800e3ea:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e3ec:	bf14      	ite	ne
 800e3ee:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800e3f2:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800e3f6:	65a3      	str	r3, [r4, #88]	; 0x58
 800e3f8:	e7cc      	b.n	800e394 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800e3fa:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e3fc:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e3fe:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800e400:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800e404:	e7ea      	b.n	800e3dc <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e406:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800e40a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800e40c:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800e40e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e410:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800e414:	e7e2      	b.n	800e3dc <HAL_SD_Init+0x94>
 800e416:	bf00      	nop

0800e418 <HAL_SD_GetCardState>:
{
 800e418:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e41a:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800e41c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e41e:	6800      	ldr	r0, [r0, #0]
 800e420:	0409      	lsls	r1, r1, #16
 800e422:	f002 f81f 	bl	8010464 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e426:	4601      	mov	r1, r0
 800e428:	b120      	cbz	r0, 800e434 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800e42a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e42c:	2000      	movs	r0, #0
 800e42e:	4319      	orrs	r1, r3
 800e430:	6361      	str	r1, [r4, #52]	; 0x34
}
 800e432:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e434:	6820      	ldr	r0, [r4, #0]
 800e436:	f000 ff9d 	bl	800f374 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e43a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800e43e:	bd10      	pop	{r4, pc}

0800e440 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop

0800e444 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop

0800e448 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop

0800e44c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop

0800e450 <HAL_SD_IRQHandler>:
{
 800e450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e452:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e454:	6800      	ldr	r0, [r0, #0]
{
 800e456:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800e458:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e45a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e45c:	041b      	lsls	r3, r3, #16
 800e45e:	d502      	bpl.n	800e466 <HAL_SD_IRQHandler+0x16>
 800e460:	072f      	lsls	r7, r5, #28
 800e462:	f100 80b7 	bmi.w	800e5d4 <HAL_SD_IRQHandler+0x184>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e466:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e468:	05de      	lsls	r6, r3, #23
 800e46a:	d529      	bpl.n	800e4c0 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e46c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e470:	4b99      	ldr	r3, [pc, #612]	; (800e6d8 <HAL_SD_IRQHandler+0x288>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e472:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e474:	6822      	ldr	r2, [r4, #0]
 800e476:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800e478:	400b      	ands	r3, r1
 800e47a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e47c:	6822      	ldr	r2, [r4, #0]
 800e47e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800e480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e484:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e486:	6822      	ldr	r2, [r4, #0]
 800e488:	68d3      	ldr	r3, [r2, #12]
 800e48a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e48e:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800e490:	f015 0308 	ands.w	r3, r5, #8
 800e494:	d076      	beq.n	800e584 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e496:	f015 0f22 	tst.w	r5, #34	; 0x22
 800e49a:	f040 80e9 	bne.w	800e670 <HAL_SD_IRQHandler+0x220>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e49e:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800e4a0:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4a2:	498e      	ldr	r1, [pc, #568]	; (800e6dc <HAL_SD_IRQHandler+0x28c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e4a4:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4a6:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800e4a8:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800e4ac:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e4b0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e4b2:	f000 80b0 	beq.w	800e616 <HAL_SD_IRQHandler+0x1c6>
        HAL_SD_RxCpltCallback(hsd);
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	f002 f96e 	bl	8010798 <HAL_SD_RxCpltCallback>
}
 800e4bc:	b003      	add	sp, #12
 800e4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e4c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e4c2:	045b      	lsls	r3, r3, #17
 800e4c4:	d502      	bpl.n	800e4cc <HAL_SD_IRQHandler+0x7c>
 800e4c6:	072f      	lsls	r7, r5, #28
 800e4c8:	f100 80aa 	bmi.w	800e620 <HAL_SD_IRQHandler+0x1d0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e4cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e4ce:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e4d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e4d4:	d06e      	beq.n	800e5b4 <HAL_SD_IRQHandler+0x164>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e4d6:	079e      	lsls	r6, r3, #30
 800e4d8:	d503      	bpl.n	800e4e2 <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e4da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4dc:	f043 0302 	orr.w	r3, r3, #2
 800e4e0:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e4e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e4e4:	0719      	lsls	r1, r3, #28
 800e4e6:	d503      	bpl.n	800e4f0 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e4e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4ea:	f043 0308 	orr.w	r3, r3, #8
 800e4ee:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e4f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e4f2:	069a      	lsls	r2, r3, #26
 800e4f4:	d503      	bpl.n	800e4fe <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e4f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4f8:	f043 0320 	orr.w	r3, r3, #32
 800e4fc:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e4fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e500:	06db      	lsls	r3, r3, #27
 800e502:	d503      	bpl.n	800e50c <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e504:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e506:	f043 0310 	orr.w	r3, r3, #16
 800e50a:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e50c:	4b73      	ldr	r3, [pc, #460]	; (800e6dc <HAL_SD_IRQHandler+0x28c>)
 800e50e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e510:	6822      	ldr	r2, [r4, #0]
 800e512:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800e514:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800e518:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e51a:	6822      	ldr	r2, [r4, #0]
 800e51c:	68d3      	ldr	r3, [r2, #12]
 800e51e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e522:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e524:	6822      	ldr	r2, [r4, #0]
 800e526:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800e528:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e52c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e52e:	6822      	ldr	r2, [r4, #0]
 800e530:	68d3      	ldr	r3, [r2, #12]
 800e532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e536:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e538:	6820      	ldr	r0, [r4, #0]
 800e53a:	f001 fa73 	bl	800fa24 <SDMMC_CmdStopTransfer>
 800e53e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e540:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e542:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e546:	4318      	orrs	r0, r3
 800e548:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e54a:	68d3      	ldr	r3, [r2, #12]
 800e54c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e550:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e552:	6823      	ldr	r3, [r4, #0]
 800e554:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e556:	f015 0308 	ands.w	r3, r5, #8
 800e55a:	f040 8097 	bne.w	800e68c <HAL_SD_IRQHandler+0x23c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e55e:	062f      	lsls	r7, r5, #24
 800e560:	d5ac      	bpl.n	800e4bc <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e562:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e564:	2a00      	cmp	r2, #0
 800e566:	d0a9      	beq.n	800e4bc <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e568:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800e56a:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800e56c:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e56e:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800e570:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e574:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e576:	6822      	ldr	r2, [r4, #0]
 800e578:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e57a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e57e:	f7ff fbd1 	bl	800dd24 <HAL_SD_ErrorCallback>
 800e582:	e79b      	b.n	800e4bc <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e584:	0629      	lsls	r1, r5, #24
 800e586:	d599      	bpl.n	800e4bc <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800e588:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e58a:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800e58e:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e590:	6822      	ldr	r2, [r4, #0]
 800e592:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e594:	6822      	ldr	r2, [r4, #0]
 800e596:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e598:	f040 8086 	bne.w	800e6a8 <HAL_SD_IRQHandler+0x258>
      hsd->State = HAL_SD_STATE_READY;
 800e59c:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800e59e:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e5a0:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800e5a4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e5a8:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e5aa:	f040 808b 	bne.w	800e6c4 <HAL_SD_IRQHandler+0x274>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e5ae:	07aa      	lsls	r2, r5, #30
 800e5b0:	d084      	beq.n	800e4bc <HAL_SD_IRQHandler+0x6c>
 800e5b2:	e780      	b.n	800e4b6 <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e5b4:	00de      	lsls	r6, r3, #3
 800e5b6:	d581      	bpl.n	800e4bc <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e5b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5bc:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e5be:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e5c0:	6823      	ldr	r3, [r4, #0]
 800e5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5c4:	0759      	lsls	r1, r3, #29
 800e5c6:	d46a      	bmi.n	800e69e <HAL_SD_IRQHandler+0x24e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e5c8:	06aa      	lsls	r2, r5, #26
 800e5ca:	f140 8082 	bpl.w	800e6d2 <HAL_SD_IRQHandler+0x282>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e5ce:	f7ff ff3d 	bl	800e44c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800e5d2:	e773      	b.n	800e4bc <HAL_SD_IRQHandler+0x6c>
  if (hsd->RxXferSize >= 32U)
 800e5d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e5d6:	2b1f      	cmp	r3, #31
 800e5d8:	f67f af70 	bls.w	800e4bc <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800e5dc:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800e5de:	1d3d      	adds	r5, r7, #4
 800e5e0:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e5e4:	e000      	b.n	800e5e8 <HAL_SD_IRQHandler+0x198>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e5e6:	6820      	ldr	r0, [r4, #0]
    for (count = 0U; count < 8U; count++)
 800e5e8:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e5ea:	f000 fead 	bl	800f348 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e5ee:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e5f0:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)(data & 0xFFU);
 800e5f2:	f805 0c08 	strb.w	r0, [r5, #-8]
    for (count = 0U; count < 8U; count++)
 800e5f6:	42b5      	cmp	r5, r6
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e5f8:	ea4f 6010 	mov.w	r0, r0, lsr #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e5fc:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e600:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e604:	f805 0c05 	strb.w	r0, [r5, #-5]
    for (count = 0U; count < 8U; count++)
 800e608:	d1ed      	bne.n	800e5e6 <HAL_SD_IRQHandler+0x196>
    hsd->RxXferSize -= 32U;
 800e60a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp++;
 800e60c:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 800e60e:	3b20      	subs	r3, #32
 800e610:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
 800e614:	e752      	b.n	800e4bc <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800e616:	4620      	mov	r0, r4
 800e618:	f002 f8b8 	bl	801078c <HAL_SD_TxCpltCallback>
}
 800e61c:	b003      	add	sp, #12
 800e61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800e620:	6a23      	ldr	r3, [r4, #32]
 800e622:	2b1f      	cmp	r3, #31
 800e624:	f67f af4a 	bls.w	800e4bc <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800e628:	69e6      	ldr	r6, [r4, #28]
 800e62a:	1d37      	adds	r7, r6, #4
 800e62c:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800e630:	e000      	b.n	800e634 <HAL_SD_IRQHandler+0x1e4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e632:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800e634:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800e638:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e63a:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800e63c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800e63e:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800e642:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e646:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800e648:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800e64c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e650:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800e652:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800e656:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e65a:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e65c:	f000 fe78 	bl	800f350 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e660:	42bd      	cmp	r5, r7
 800e662:	d1e6      	bne.n	800e632 <HAL_SD_IRQHandler+0x1e2>
    hsd->TxXferSize -= 32U;
 800e664:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800e666:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800e668:	3b20      	subs	r3, #32
 800e66a:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800e66e:	e725      	b.n	800e4bc <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e670:	6820      	ldr	r0, [r4, #0]
 800e672:	f001 f9d7 	bl	800fa24 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800e676:	4603      	mov	r3, r0
 800e678:	2800      	cmp	r0, #0
 800e67a:	f43f af10 	beq.w	800e49e <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800e67e:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e680:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800e682:	4313      	orrs	r3, r2
 800e684:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e686:	f7ff fb4d 	bl	800dd24 <HAL_SD_ErrorCallback>
 800e68a:	e708      	b.n	800e49e <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800e68c:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800e68e:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800e690:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800e692:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e696:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e698:	f7ff fb44 	bl	800dd24 <HAL_SD_ErrorCallback>
 800e69c:	e70e      	b.n	800e4bc <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e69e:	06ab      	lsls	r3, r5, #26
 800e6a0:	d514      	bpl.n	800e6cc <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e6a2:	f7ff fed1 	bl	800e448 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800e6a6:	e709      	b.n	800e4bc <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e6a8:	6820      	ldr	r0, [r4, #0]
 800e6aa:	f001 f9bb 	bl	800fa24 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	f43f af73 	beq.w	800e59c <HAL_SD_IRQHandler+0x14c>
          hsd->ErrorCode |= errorstate;
 800e6b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e6b8:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e6be:	f7ff fb31 	bl	800dd24 <HAL_SD_ErrorCallback>
 800e6c2:	e76b      	b.n	800e59c <HAL_SD_IRQHandler+0x14c>
        HAL_SD_TxCpltCallback(hsd);
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f002 f861 	bl	801078c <HAL_SD_TxCpltCallback>
 800e6ca:	e770      	b.n	800e5ae <HAL_SD_IRQHandler+0x15e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e6cc:	f7ff feb8 	bl	800e440 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e6d0:	e6f4      	b.n	800e4bc <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e6d2:	f7ff feb7 	bl	800e444 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800e6d6:	e6f1      	b.n	800e4bc <HAL_SD_IRQHandler+0x6c>
 800e6d8:	ffff3ec5 	.word	0xffff3ec5
 800e6dc:	18000f3a 	.word	0x18000f3a

0800e6e0 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e6e0:	b318      	cbz	r0, 800e72a <HAL_SDRAM_Init+0x4a>
{
 800e6e2:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e6e4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e6f0:	b1b3      	cbz	r3, 800e720 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e6f2:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e6fa:	f851 0b04 	ldr.w	r0, [r1], #4
 800e6fe:	f000 fd55 	bl	800f1ac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e702:	6862      	ldr	r2, [r4, #4]
 800e704:	4629      	mov	r1, r5
 800e706:	6820      	ldr	r0, [r4, #0]
 800e708:	f000 fd8e 	bl	800f228 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800e70c:	4a08      	ldr	r2, [pc, #32]	; (800e730 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e70e:	2101      	movs	r1, #1

  return HAL_OK;
 800e710:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800e712:	6813      	ldr	r3, [r2, #0]
 800e714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e718:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e71a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800e71e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800e720:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800e724:	f7f6 f8a8 	bl	8004878 <HAL_SDRAM_MspInit>
 800e728:	e7e3      	b.n	800e6f2 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800e72a:	2001      	movs	r0, #1
}
 800e72c:	4770      	bx	lr
 800e72e:	bf00      	nop
 800e730:	52004000 	.word	0x52004000

0800e734 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800e734:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e736:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800e73a:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800e73c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e73e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800e740:	d004      	beq.n	800e74c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800e742:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800e746:	2e01      	cmp	r6, #1
 800e748:	d001      	beq.n	800e74e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800e74a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800e74c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e74e:	2302      	movs	r3, #2
 800e750:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e752:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e754:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e758:	f000 fdb4 	bl	800f2c4 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e75c:	682b      	ldr	r3, [r5, #0]
 800e75e:	2b02      	cmp	r3, #2
 800e760:	d003      	beq.n	800e76a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800e762:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800e764:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800e768:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e76a:	2305      	movs	r3, #5
  return HAL_OK;
 800e76c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e76e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800e772:	bd70      	pop	{r4, r5, r6, pc}

0800e774 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e774:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e776:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800e77a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e77c:	2b02      	cmp	r3, #2
 800e77e:	b2d8      	uxtb	r0, r3
 800e780:	d005      	beq.n	800e78e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e782:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e786:	2b01      	cmp	r3, #1
 800e788:	b2dd      	uxtb	r5, r3
 800e78a:	d001      	beq.n	800e790 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800e78c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800e78e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e790:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e792:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e794:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e798:	f000 fdac 	bl	800f2f4 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800e79c:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e79e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800e7a2:	bd38      	pop	{r3, r4, r5, pc}

0800e7a4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800e7a4:	6802      	ldr	r2, [r0, #0]
{
 800e7a6:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800e7a8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e7aa:	6991      	ldr	r1, [r2, #24]
 800e7ac:	f041 0108 	orr.w	r1, r1, #8
 800e7b0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e7b2:	6801      	ldr	r1, [r0, #0]
 800e7b4:	698a      	ldr	r2, [r1, #24]
 800e7b6:	f042 0210 	orr.w	r2, r2, #16
 800e7ba:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e7bc:	6801      	ldr	r1, [r0, #0]
 800e7be:	680a      	ldr	r2, [r1, #0]
 800e7c0:	f022 0201 	bic.w	r2, r2, #1
 800e7c4:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e7c6:	6801      	ldr	r1, [r0, #0]
 800e7c8:	4a27      	ldr	r2, [pc, #156]	; (800e868 <SPI_CloseTransfer+0xc4>)
 800e7ca:	690c      	ldr	r4, [r1, #16]
 800e7cc:	4022      	ands	r2, r4
 800e7ce:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e7d0:	6801      	ldr	r1, [r0, #0]
 800e7d2:	688a      	ldr	r2, [r1, #8]
 800e7d4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e7d8:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e7da:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800e7de:	2a04      	cmp	r2, #4
 800e7e0:	d001      	beq.n	800e7e6 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e7e2:	069c      	lsls	r4, r3, #26
 800e7e4:	d433      	bmi.n	800e84e <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e7e6:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800e7ea:	2a03      	cmp	r2, #3
 800e7ec:	d001      	beq.n	800e7f2 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e7ee:	0659      	lsls	r1, r3, #25
 800e7f0:	d421      	bmi.n	800e836 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e7f2:	059a      	lsls	r2, r3, #22
 800e7f4:	d50a      	bpl.n	800e80c <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e7f6:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e7fa:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e7fc:	f042 0201 	orr.w	r2, r2, #1
 800e800:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e804:	698a      	ldr	r2, [r1, #24]
 800e806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e80a:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e80c:	05db      	lsls	r3, r3, #23
 800e80e:	d50a      	bpl.n	800e826 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e810:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e814:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e816:	f043 0308 	orr.w	r3, r3, #8
 800e81a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e81e:	6993      	ldr	r3, [r2, #24]
 800e820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e824:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e826:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800e828:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800e82c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e830:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800e834:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e836:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e83a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e83c:	f042 0204 	orr.w	r2, r2, #4
 800e840:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e844:	698a      	ldr	r2, [r1, #24]
 800e846:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e84a:	618a      	str	r2, [r1, #24]
 800e84c:	e7d1      	b.n	800e7f2 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e84e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e852:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e858:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e85c:	698a      	ldr	r2, [r1, #24]
 800e85e:	f042 0220 	orr.w	r2, r2, #32
 800e862:	618a      	str	r2, [r1, #24]
 800e864:	e7bf      	b.n	800e7e6 <SPI_CloseTransfer+0x42>
 800e866:	bf00      	nop
 800e868:	fffffc90 	.word	0xfffffc90

0800e86c <HAL_SPI_Init>:
  if (hspi == NULL)
 800e86c:	2800      	cmp	r0, #0
 800e86e:	f000 80be 	beq.w	800e9ee <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e872:	4a62      	ldr	r2, [pc, #392]	; (800e9fc <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e874:	2100      	movs	r1, #0
{
 800e876:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e878:	6803      	ldr	r3, [r0, #0]
 800e87a:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e87c:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e87e:	4293      	cmp	r3, r2
 800e880:	d015      	beq.n	800e8ae <HAL_SPI_Init+0x42>
 800e882:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800e886:	4293      	cmp	r3, r2
 800e888:	d011      	beq.n	800e8ae <HAL_SPI_Init+0x42>
 800e88a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e88e:	4293      	cmp	r3, r2
 800e890:	68c2      	ldr	r2, [r0, #12]
 800e892:	f000 80a5 	beq.w	800e9e0 <HAL_SPI_Init+0x174>
 800e896:	2a0f      	cmp	r2, #15
 800e898:	d807      	bhi.n	800e8aa <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e89a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e89c:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e89e:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800e8a0:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800e8a2:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e8a6:	2a08      	cmp	r2, #8
 800e8a8:	d914      	bls.n	800e8d4 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800e8aa:	2001      	movs	r0, #1
}
 800e8ac:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800e8ae:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e8b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800e8b2:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e8b4:	4d51      	ldr	r5, [pc, #324]	; (800e9fc <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e8b6:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
 800e8b8:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e8ba:	4951      	ldr	r1, [pc, #324]	; (800ea00 <HAL_SPI_Init+0x194>)
 800e8bc:	428b      	cmp	r3, r1
 800e8be:	bf18      	it	ne
 800e8c0:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
 800e8c2:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e8c6:	d003      	beq.n	800e8d0 <HAL_SPI_Init+0x64>
 800e8c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e8cc:	428b      	cmp	r3, r1
 800e8ce:	d101      	bne.n	800e8d4 <HAL_SPI_Init+0x68>
 800e8d0:	2a10      	cmp	r2, #16
 800e8d2:	d8ea      	bhi.n	800e8aa <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800e8d4:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800e8d8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800e8dc:	2a00      	cmp	r2, #0
 800e8de:	d078      	beq.n	800e9d2 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800e8e0:	2202      	movs	r2, #2
 800e8e2:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	f022 0201 	bic.w	r2, r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e8ee:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8f0:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e8f2:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8f4:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800e8f8:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e8fa:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8fe:	d058      	beq.n	800e9b2 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e900:	0258      	lsls	r0, r3, #9
 800e902:	d502      	bpl.n	800e90a <HAL_SPI_Init+0x9e>
 800e904:	68e3      	ldr	r3, [r4, #12]
 800e906:	2b06      	cmp	r3, #6
 800e908:	d84c      	bhi.n	800e9a4 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e90a:	6813      	ldr	r3, [r2, #0]
 800e90c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e910:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e912:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800e914:	69e3      	ldr	r3, [r4, #28]
 800e916:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e918:	432b      	orrs	r3, r5
 800e91a:	6822      	ldr	r2, [r4, #0]
 800e91c:	4303      	orrs	r3, r0
 800e91e:	68e0      	ldr	r0, [r4, #12]
 800e920:	4303      	orrs	r3, r0
 800e922:	430b      	orrs	r3, r1
 800e924:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e926:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e928:	69a0      	ldr	r0, [r4, #24]
 800e92a:	6822      	ldr	r2, [r4, #0]
 800e92c:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800e930:	432b      	orrs	r3, r5
 800e932:	430b      	orrs	r3, r1
 800e934:	6921      	ldr	r1, [r4, #16]
 800e936:	4303      	orrs	r3, r0
 800e938:	6960      	ldr	r0, [r4, #20]
 800e93a:	430b      	orrs	r3, r1
 800e93c:	6a21      	ldr	r1, [r4, #32]
 800e93e:	4303      	orrs	r3, r0
 800e940:	6860      	ldr	r0, [r4, #4]
 800e942:	430b      	orrs	r3, r1
 800e944:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e946:	4303      	orrs	r3, r0
 800e948:	68a0      	ldr	r0, [r4, #8]
 800e94a:	430b      	orrs	r3, r1
 800e94c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e94e:	4303      	orrs	r3, r0
 800e950:	430b      	orrs	r3, r1
 800e952:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e954:	430b      	orrs	r3, r1
 800e956:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e958:	6863      	ldr	r3, [r4, #4]
 800e95a:	b96b      	cbnz	r3, 800e978 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e95c:	6822      	ldr	r2, [r4, #0]
 800e95e:	6893      	ldr	r3, [r2, #8]
 800e960:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800e964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e968:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e96a:	6822      	ldr	r2, [r4, #0]
 800e96c:	6893      	ldr	r3, [r2, #8]
 800e96e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800e972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e976:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e978:	6822      	ldr	r2, [r4, #0]
 800e97a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800e97c:	f023 0301 	bic.w	r3, r3, #1
 800e980:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e982:	6863      	ldr	r3, [r4, #4]
 800e984:	025b      	lsls	r3, r3, #9
 800e986:	d506      	bpl.n	800e996 <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e988:	6822      	ldr	r2, [r4, #0]
 800e98a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e98c:	68d3      	ldr	r3, [r2, #12]
 800e98e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e992:	430b      	orrs	r3, r1
 800e994:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e996:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800e998:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e99a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e99e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e9a4:	6813      	ldr	r3, [r2, #0]
 800e9a6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e9a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9ac:	4303      	orrs	r3, r0
 800e9ae:	6013      	str	r3, [r2, #0]
 800e9b0:	e7af      	b.n	800e912 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9b6:	d01c      	beq.n	800e9f2 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d1a1      	bne.n	800e900 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9c2:	d1a2      	bne.n	800e90a <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e9c4:	6813      	ldr	r3, [r2, #0]
 800e9c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e9ca:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e9cc:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e9d0:	e796      	b.n	800e900 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800e9d2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800e9d4:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800e9d8:	f7f9 fa12 	bl	8007e00 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	e77f      	b.n	800e8e0 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e9e0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800e9e2:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e9e4:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800e9e6:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800e9e8:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9ec:	e770      	b.n	800e8d0 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800e9ee:	2001      	movs	r0, #1
}
 800e9f0:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d0e5      	beq.n	800e9c4 <HAL_SPI_Init+0x158>
 800e9f8:	e784      	b.n	800e904 <HAL_SPI_Init+0x98>
 800e9fa:	bf00      	nop
 800e9fc:	40013000 	.word	0x40013000
 800ea00:	40003800 	.word	0x40003800

0800ea04 <HAL_SPI_Receive_DMA>:
{
 800ea04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800ea06:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	f000 80a9 	beq.w	800eb62 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ea10:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ea14:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800ea16:	2201      	movs	r2, #1
 800ea18:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800ea1a:	b2de      	uxtb	r6, r3
 800ea1c:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800ea1e:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800ea22:	f040 8093 	bne.w	800eb4c <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800ea26:	2900      	cmp	r1, #0
 800ea28:	f000 808b 	beq.w	800eb42 <HAL_SPI_Receive_DMA+0x13e>
 800ea2c:	fab5 f385 	clz	r3, r5
 800ea30:	095b      	lsrs	r3, r3, #5
 800ea32:	2d00      	cmp	r5, #0
 800ea34:	f000 8085 	beq.w	800eb42 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea38:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ea3a:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ea3c:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea3e:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800ea42:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ea46:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800ea4a:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea4c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ea50:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800ea54:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ea58:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800ea5c:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea60:	d07a      	beq.n	800eb58 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800ea62:	68d3      	ldr	r3, [r2, #12]
 800ea64:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ea68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ea6c:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ea6e:	68e3      	ldr	r3, [r4, #12]
 800ea70:	2b0f      	cmp	r3, #15
 800ea72:	d861      	bhi.n	800eb38 <HAL_SPI_Receive_DMA+0x134>
 800ea74:	2b07      	cmp	r3, #7
 800ea76:	f200 8092 	bhi.w	800eb9e <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ea7a:	6822      	ldr	r2, [r4, #0]
 800ea7c:	6893      	ldr	r3, [r2, #8]
 800ea7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ea82:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ea84:	68e3      	ldr	r3, [r4, #12]
 800ea86:	2b07      	cmp	r3, #7
 800ea88:	d86e      	bhi.n	800eb68 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ea8a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ea8c:	699a      	ldr	r2, [r3, #24]
 800ea8e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ea92:	d107      	bne.n	800eaa4 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ea94:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ea98:	b292      	uxth	r2, r2
 800ea9a:	3201      	adds	r2, #1
 800ea9c:	0852      	lsrs	r2, r2, #1
 800ea9e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800eaa2:	699a      	ldr	r2, [r3, #24]
 800eaa4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800eaa8:	d106      	bne.n	800eab8 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800eaaa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800eaae:	b292      	uxth	r2, r2
 800eab0:	3203      	adds	r2, #3
 800eab2:	0892      	lsrs	r2, r2, #2
 800eab4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800eab8:	4a3e      	ldr	r2, [pc, #248]	; (800ebb4 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800eaba:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800eabc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800eabe:	4a3e      	ldr	r2, [pc, #248]	; (800ebb8 <HAL_SPI_Receive_DMA+0x1b4>)
 800eac0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800eac2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800eac4:	4a3d      	ldr	r2, [pc, #244]	; (800ebbc <HAL_SPI_Receive_DMA+0x1b8>)
 800eac6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800eac8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800eaca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800eacc:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800eace:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ead2:	6821      	ldr	r1, [r4, #0]
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ead8:	3130      	adds	r1, #48	; 0x30
 800eada:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800eadc:	f7fa f88e 	bl	8008bfc <HAL_DMA_Start_IT>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d150      	bne.n	800eb86 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800eae4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800eae6:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800eae8:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800eaea:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800eaec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800eaf0:	4b33      	ldr	r3, [pc, #204]	; (800ebc0 <HAL_SPI_Receive_DMA+0x1bc>)
 800eaf2:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eaf6:	bf18      	it	ne
 800eaf8:	432b      	orrne	r3, r5
 800eafa:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800eafc:	6822      	ldr	r2, [r4, #0]
 800eafe:	6893      	ldr	r3, [r2, #8]
 800eb00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eb04:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800eb06:	6822      	ldr	r2, [r4, #0]
 800eb08:	6913      	ldr	r3, [r2, #16]
 800eb0a:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800eb0e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800eb10:	6822      	ldr	r2, [r4, #0]
 800eb12:	6813      	ldr	r3, [r2, #0]
 800eb14:	f043 0301 	orr.w	r3, r3, #1
 800eb18:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb1a:	6863      	ldr	r3, [r4, #4]
 800eb1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb20:	d104      	bne.n	800eb2c <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eb22:	6822      	ldr	r2, [r4, #0]
 800eb24:	6813      	ldr	r3, [r2, #0]
 800eb26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb2a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800eb2c:	2300      	movs	r3, #0
  return errorcode;
 800eb2e:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800eb30:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800eb34:	4630      	mov	r0, r6
 800eb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800eb38:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800eb3a:	699b      	ldr	r3, [r3, #24]
 800eb3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb40:	d09b      	beq.n	800ea7a <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800eb42:	2300      	movs	r3, #0
 800eb44:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800eb48:	4630      	mov	r0, r6
 800eb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800eb4c:	2300      	movs	r3, #0
    return errorcode;
 800eb4e:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800eb50:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800eb54:	4630      	mov	r0, r6
 800eb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800eb58:	6813      	ldr	r3, [r2, #0]
 800eb5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb5e:	6013      	str	r3, [r2, #0]
 800eb60:	e785      	b.n	800ea6e <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800eb62:	2602      	movs	r6, #2
}
 800eb64:	4630      	mov	r0, r6
 800eb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800eb68:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800eb6a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800eb6c:	d8a4      	bhi.n	800eab8 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800eb6e:	699a      	ldr	r2, [r3, #24]
 800eb70:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800eb74:	d1a0      	bne.n	800eab8 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800eb76:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800eb7a:	b292      	uxth	r2, r2
 800eb7c:	3201      	adds	r2, #1
 800eb7e:	0852      	lsrs	r2, r2, #1
 800eb80:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800eb84:	e798      	b.n	800eab8 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800eb86:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800eb8a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800eb8c:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800eb90:	f043 0310 	orr.w	r3, r3, #16
 800eb94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800eb98:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800eb9c:	e7d4      	b.n	800eb48 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800eb9e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800eba0:	699b      	ldr	r3, [r3, #24]
 800eba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eba6:	f43f af68 	beq.w	800ea7a <HAL_SPI_Receive_DMA+0x76>
 800ebaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ebae:	d1c8      	bne.n	800eb42 <HAL_SPI_Receive_DMA+0x13e>
 800ebb0:	e763      	b.n	800ea7a <HAL_SPI_Receive_DMA+0x76>
 800ebb2:	bf00      	nop
 800ebb4:	0800ee55 	.word	0x0800ee55
 800ebb8:	0800ee05 	.word	0x0800ee05
 800ebbc:	0800ee71 	.word	0x0800ee71
 800ebc0:	ffff0000 	.word	0xffff0000

0800ebc4 <HAL_SPI_TransmitReceive_DMA>:
{
 800ebc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebc8:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800ebca:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	f000 809a 	beq.w	800ed08 <HAL_SPI_TransmitReceive_DMA+0x144>
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800ebdc:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	b2de      	uxtb	r6, r3
 800ebe4:	d158      	bne.n	800ec98 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800ebe6:	2d00      	cmp	r5, #0
 800ebe8:	bf18      	it	ne
 800ebea:	2a00      	cmpne	r2, #0
 800ebec:	d04e      	beq.n	800ec8c <HAL_SPI_TransmitReceive_DMA+0xc8>
 800ebee:	fab1 f381 	clz	r3, r1
 800ebf2:	095b      	lsrs	r3, r3, #5
 800ebf4:	2900      	cmp	r1, #0
 800ebf6:	d049      	beq.n	800ec8c <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800ebf8:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ebfa:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ebfc:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 800ebfe:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800ec00:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 800ec04:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec08:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 800ec0c:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 800ec10:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 800ec14:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ec18:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 800ec1c:	68d3      	ldr	r3, [r2, #12]
 800ec1e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ec22:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ec24:	6802      	ldr	r2, [r0, #0]
 800ec26:	6893      	ldr	r3, [r2, #8]
 800ec28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ec2c:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ec2e:	68c3      	ldr	r3, [r0, #12]
 800ec30:	2b0f      	cmp	r3, #15
 800ec32:	d938      	bls.n	800eca6 <HAL_SPI_TransmitReceive_DMA+0xe2>
 800ec34:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800ec36:	699a      	ldr	r2, [r3, #24]
 800ec38:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ec3c:	d126      	bne.n	800ec8c <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ec3e:	4a6c      	ldr	r2, [pc, #432]	; (800edf0 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800ec40:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ec44:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800edfc <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ec48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ec4a:	4a6a      	ldr	r2, [pc, #424]	; (800edf4 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800ec4c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ec4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ec50:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ec52:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800ec56:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ec58:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800ec5c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ec60:	6821      	ldr	r1, [r4, #0]
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec66:	3130      	adds	r1, #48	; 0x30
 800ec68:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ec6a:	f7f9 ffc7 	bl	8008bfc <HAL_DMA_Start_IT>
 800ec6e:	4607      	mov	r7, r0
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d04d      	beq.n	800ed10 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ec74:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ec78:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800ec7a:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ec7e:	f043 0310 	orr.w	r3, r3, #16
 800ec82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ec86:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800ec8a:	e002      	b.n	800ec92 <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800ec92:	4630      	mov	r0, r6
 800ec94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 800ec98:	2300      	movs	r3, #0
    return errorcode;
 800ec9a:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800ec9c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800eca0:	4630      	mov	r0, r6
 800eca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800eca6:	2b07      	cmp	r3, #7
 800eca8:	d87f      	bhi.n	800edaa <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ecaa:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800ecac:	6993      	ldr	r3, [r2, #24]
 800ecae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ecb2:	d107      	bne.n	800ecc4 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800ecb4:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	3301      	adds	r3, #1
 800ecbc:	085b      	lsrs	r3, r3, #1
 800ecbe:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ecc2:	6993      	ldr	r3, [r2, #24]
 800ecc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecc8:	d106      	bne.n	800ecd8 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800ecca:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	3303      	adds	r3, #3
 800ecd2:	089b      	lsrs	r3, r3, #2
 800ecd4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ecd8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ecda:	699a      	ldr	r2, [r3, #24]
 800ecdc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ece0:	d107      	bne.n	800ecf2 <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800ece2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ece6:	b292      	uxth	r2, r2
 800ece8:	3201      	adds	r2, #1
 800ecea:	0852      	lsrs	r2, r2, #1
 800ecec:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ecf0:	699a      	ldr	r2, [r3, #24]
 800ecf2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ecf6:	d1a2      	bne.n	800ec3e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ecf8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ecfc:	b292      	uxth	r2, r2
 800ecfe:	3203      	adds	r2, #3
 800ed00:	0892      	lsrs	r2, r2, #2
 800ed02:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ed06:	e79a      	b.n	800ec3e <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 800ed08:	2602      	movs	r6, #2
}
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ed10:	6822      	ldr	r2, [r4, #0]
 800ed12:	6893      	ldr	r3, [r2, #8]
 800ed14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ed18:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ed1a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ed1c:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ed1e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ed20:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ed22:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ed24:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800ed26:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ed28:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 800ed2c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800ed30:	6822      	ldr	r2, [r4, #0]
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ed36:	3220      	adds	r2, #32
 800ed38:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ed3a:	f7f9 ff5f 	bl	8008bfc <HAL_DMA_Start_IT>
 800ed3e:	bb40      	cbnz	r0, 800ed92 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ed40:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ed42:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ed44:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ed46:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ed48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800ed4c:	4b2a      	ldr	r3, [pc, #168]	; (800edf8 <HAL_SPI_TransmitReceive_DMA+0x234>)
 800ed4e:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ed52:	bf18      	it	ne
 800ed54:	432b      	orrne	r3, r5
 800ed56:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800ed58:	6822      	ldr	r2, [r4, #0]
 800ed5a:	6893      	ldr	r3, [r2, #8]
 800ed5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed60:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800ed62:	6822      	ldr	r2, [r4, #0]
 800ed64:	6913      	ldr	r3, [r2, #16]
 800ed66:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800ed6a:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800ed6c:	6822      	ldr	r2, [r4, #0]
 800ed6e:	6813      	ldr	r3, [r2, #0]
 800ed70:	f043 0301 	orr.w	r3, r3, #1
 800ed74:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ed76:	6863      	ldr	r3, [r4, #4]
 800ed78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ed7c:	d104      	bne.n	800ed88 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ed7e:	6822      	ldr	r2, [r4, #0]
 800ed80:	6813      	ldr	r3, [r2, #0]
 800ed82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ed86:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800ed88:	2300      	movs	r3, #0
  return errorcode;
 800ed8a:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800ed8c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800ed90:	e77f      	b.n	800ec92 <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ed92:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ed96:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800ed98:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ed9c:	f043 0310 	orr.w	r3, r3, #16
 800eda0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800eda4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800eda8:	e773      	b.n	800ec92 <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800edaa:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800edac:	699a      	ldr	r2, [r3, #24]
 800edae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800edb2:	d003      	beq.n	800edbc <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800edb4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800edb8:	f47f af68 	bne.w	800ec8c <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800edbc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800edbe:	6989      	ldr	r1, [r1, #24]
 800edc0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800edc4:	d107      	bne.n	800edd6 <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800edc6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800edca:	b292      	uxth	r2, r2
 800edcc:	3201      	adds	r2, #1
 800edce:	0852      	lsrs	r2, r2, #1
 800edd0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800edd4:	699a      	ldr	r2, [r3, #24]
 800edd6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800edda:	f47f af30 	bne.w	800ec3e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800edde:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ede2:	b292      	uxth	r2, r2
 800ede4:	3201      	adds	r2, #1
 800ede6:	0852      	lsrs	r2, r2, #1
 800ede8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800edec:	e727      	b.n	800ec3e <HAL_SPI_TransmitReceive_DMA+0x7a>
 800edee:	bf00      	nop
 800edf0:	0800ee61 	.word	0x0800ee61
 800edf4:	0800ee2d 	.word	0x0800ee2d
 800edf8:	ffff0000 	.word	0xffff0000
 800edfc:	0800ee71 	.word	0x0800ee71

0800ee00 <HAL_SPI_TxCpltCallback>:
 800ee00:	4770      	bx	lr
 800ee02:	bf00      	nop

0800ee04 <SPI_DMAReceiveCplt>:
{
 800ee04:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee06:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ee08:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ee0c:	2b07      	cmp	r3, #7
 800ee0e:	d009      	beq.n	800ee24 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ee10:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800ee12:	69db      	ldr	r3, [r3, #28]
 800ee14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee18:	d005      	beq.n	800ee26 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ee1a:	6802      	ldr	r2, [r0, #0]
 800ee1c:	6913      	ldr	r3, [r2, #16]
 800ee1e:	f043 0308 	orr.w	r3, r3, #8
 800ee22:	6113      	str	r3, [r2, #16]
}
 800ee24:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800ee26:	f7f5 f985 	bl	8004134 <HAL_SPI_RxCpltCallback>
}
 800ee2a:	bd08      	pop	{r3, pc}

0800ee2c <SPI_DMATransmitReceiveCplt>:
{
 800ee2c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee2e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ee30:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ee34:	2b07      	cmp	r3, #7
 800ee36:	d009      	beq.n	800ee4c <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ee38:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ee3a:	69db      	ldr	r3, [r3, #28]
 800ee3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee40:	d005      	beq.n	800ee4e <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ee42:	6802      	ldr	r2, [r0, #0]
 800ee44:	6913      	ldr	r3, [r2, #16]
 800ee46:	f043 0308 	orr.w	r3, r3, #8
 800ee4a:	6113      	str	r3, [r2, #16]
}
 800ee4c:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800ee4e:	f7f5 fbb9 	bl	80045c4 <HAL_SPI_TxRxCpltCallback>
}
 800ee52:	bd08      	pop	{r3, pc}

0800ee54 <SPI_DMAHalfReceiveCplt>:
{
 800ee54:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ee56:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ee58:	f7f5 fa96 	bl	8004388 <HAL_SPI_RxHalfCpltCallback>
}
 800ee5c:	bd08      	pop	{r3, pc}
 800ee5e:	bf00      	nop

0800ee60 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800ee60:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ee62:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800ee64:	f7f5 fbca 	bl	80045fc <HAL_SPI_TxRxHalfCpltCallback>
}
 800ee68:	bd08      	pop	{r3, pc}
 800ee6a:	bf00      	nop

0800ee6c <HAL_SPI_ErrorCallback>:
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop

0800ee70 <SPI_DMAError>:
{
 800ee70:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee72:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ee74:	f7fa ff26 	bl	8009cc4 <HAL_DMA_GetError>
 800ee78:	2802      	cmp	r0, #2
 800ee7a:	d100      	bne.n	800ee7e <SPI_DMAError+0xe>
}
 800ee7c:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800ee7e:	6822      	ldr	r2, [r4, #0]
 800ee80:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ee82:	6991      	ldr	r1, [r2, #24]
 800ee84:	f041 0108 	orr.w	r1, r1, #8
 800ee88:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ee8a:	6821      	ldr	r1, [r4, #0]
 800ee8c:	698a      	ldr	r2, [r1, #24]
 800ee8e:	f042 0210 	orr.w	r2, r2, #16
 800ee92:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800ee94:	6821      	ldr	r1, [r4, #0]
 800ee96:	680a      	ldr	r2, [r1, #0]
 800ee98:	f022 0201 	bic.w	r2, r2, #1
 800ee9c:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ee9e:	6821      	ldr	r1, [r4, #0]
 800eea0:	4a2c      	ldr	r2, [pc, #176]	; (800ef54 <SPI_DMAError+0xe4>)
 800eea2:	6908      	ldr	r0, [r1, #16]
 800eea4:	4002      	ands	r2, r0
 800eea6:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800eea8:	6821      	ldr	r1, [r4, #0]
 800eeaa:	688a      	ldr	r2, [r1, #8]
 800eeac:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800eeb0:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eeb2:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800eeb6:	2a04      	cmp	r2, #4
 800eeb8:	d001      	beq.n	800eebe <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800eeba:	0698      	lsls	r0, r3, #26
 800eebc:	d43d      	bmi.n	800ef3a <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800eebe:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800eec2:	2a03      	cmp	r2, #3
 800eec4:	d001      	beq.n	800eeca <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800eec6:	0659      	lsls	r1, r3, #25
 800eec8:	d42b      	bmi.n	800ef22 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800eeca:	059a      	lsls	r2, r3, #22
 800eecc:	d50a      	bpl.n	800eee4 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eece:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eed2:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eed4:	f042 0201 	orr.w	r2, r2, #1
 800eed8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800eedc:	698a      	ldr	r2, [r1, #24]
 800eede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eee2:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800eee4:	05db      	lsls	r3, r3, #23
 800eee6:	d50a      	bpl.n	800eefe <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eee8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eeec:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800eeee:	f043 0308 	orr.w	r3, r3, #8
 800eef2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800eef6:	6993      	ldr	r3, [r2, #24]
 800eef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eefc:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800eefe:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800ef00:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800ef02:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800ef04:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ef08:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ef0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ef10:	f043 0310 	orr.w	r3, r3, #16
 800ef14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ef18:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800ef1c:	f7ff ffa6 	bl	800ee6c <HAL_SPI_ErrorCallback>
}
 800ef20:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ef22:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef26:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ef28:	f042 0204 	orr.w	r2, r2, #4
 800ef2c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef30:	698a      	ldr	r2, [r1, #24]
 800ef32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ef36:	618a      	str	r2, [r1, #24]
 800ef38:	e7c7      	b.n	800eeca <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ef3a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ef3e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ef40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ef44:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ef48:	698a      	ldr	r2, [r1, #24]
 800ef4a:	f042 0220 	orr.w	r2, r2, #32
 800ef4e:	618a      	str	r2, [r1, #24]
 800ef50:	e7b5      	b.n	800eebe <SPI_DMAError+0x4e>
 800ef52:	bf00      	nop
 800ef54:	fffffc90 	.word	0xfffffc90

0800ef58 <SPI_DMAAbortOnError>:
{
 800ef58:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800ef5a:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef5c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ef64:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800ef68:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800ef6c:	f7ff ff7e 	bl	800ee6c <HAL_SPI_ErrorCallback>
}
 800ef70:	bd08      	pop	{r3, pc}
 800ef72:	bf00      	nop

0800ef74 <HAL_SPI_SuspendCallback>:
 800ef74:	4770      	bx	lr
 800ef76:	bf00      	nop

0800ef78 <HAL_SPI_IRQHandler>:
{
 800ef78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800ef7c:	6802      	ldr	r2, [r0, #0]
{
 800ef7e:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800ef80:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800ef82:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ef84:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800ef86:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800ef8a:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ef8e:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800ef90:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ef92:	d502      	bpl.n	800ef9a <HAL_SPI_IRQHandler+0x22>
 800ef94:	0709      	lsls	r1, r1, #28
 800ef96:	f100 80e2 	bmi.w	800f15e <HAL_SPI_IRQHandler+0x1e6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ef9a:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800ef9e:	2b04      	cmp	r3, #4
 800efa0:	d045      	beq.n	800f02e <HAL_SPI_IRQHandler+0xb6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800efa2:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d04b      	beq.n	800f042 <HAL_SPI_IRQHandler+0xca>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800efaa:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800efae:	2b02      	cmp	r3, #2
 800efb0:	f000 80ec 	beq.w	800f18c <HAL_SPI_IRQHandler+0x214>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800efb4:	072b      	lsls	r3, r5, #28
 800efb6:	d564      	bpl.n	800f082 <HAL_SPI_IRQHandler+0x10a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800efb8:	6993      	ldr	r3, [r2, #24]
 800efba:	f043 0308 	orr.w	r3, r3, #8
 800efbe:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800efc0:	6821      	ldr	r1, [r4, #0]
 800efc2:	698b      	ldr	r3, [r1, #24]
 800efc4:	f043 0310 	orr.w	r3, r3, #16
 800efc8:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800efca:	6821      	ldr	r1, [r4, #0]
 800efcc:	698b      	ldr	r3, [r1, #24]
 800efce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800efd2:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800efd4:	6821      	ldr	r1, [r4, #0]
 800efd6:	690b      	ldr	r3, [r1, #16]
 800efd8:	f023 0308 	bic.w	r3, r3, #8
 800efdc:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800efde:	6823      	ldr	r3, [r4, #0]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800efe6:	d136      	bne.n	800f056 <HAL_SPI_IRQHandler+0xde>
      while (hspi->RxXferCount != 0UL)
 800efe8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800efec:	b29b      	uxth	r3, r3
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d031      	beq.n	800f056 <HAL_SPI_IRQHandler+0xde>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800eff2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800eff4:	e00f      	b.n	800f016 <HAL_SPI_IRQHandler+0x9e>
 800eff6:	6823      	ldr	r3, [r4, #0]
 800eff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800effa:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800effc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800effe:	3104      	adds	r1, #4
 800f000:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800f002:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800f006:	3b01      	subs	r3, #1
 800f008:	b29b      	uxth	r3, r3
 800f00a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800f00e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800f012:	b29b      	uxth	r3, r3
 800f014:	b1fb      	cbz	r3, 800f056 <HAL_SPI_IRQHandler+0xde>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f016:	68e3      	ldr	r3, [r4, #12]
 800f018:	2b0f      	cmp	r3, #15
 800f01a:	d8ec      	bhi.n	800eff6 <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f01c:	2b07      	cmp	r3, #7
 800f01e:	f240 80ad 	bls.w	800f17c <HAL_SPI_IRQHandler+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f022:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800f024:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f026:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f028:	3102      	adds	r1, #2
 800f02a:	6661      	str	r1, [r4, #100]	; 0x64
 800f02c:	e7e9      	b.n	800f002 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800f02e:	4620      	mov	r0, r4
 800f030:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f032:	4798      	blx	r3
    hspi->RxISR(hspi);
 800f034:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f036:	4620      	mov	r0, r4
 800f038:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800f03a:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d102      	bne.n	800f048 <HAL_SPI_IRQHandler+0xd0>
    hspi->RxISR(hspi);
 800f042:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800f044:	4620      	mov	r0, r4
 800f046:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800f048:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800f04c:	2d02      	cmp	r5, #2
 800f04e:	f000 809d 	beq.w	800f18c <HAL_SPI_IRQHandler+0x214>
}
 800f052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800f056:	4620      	mov	r0, r4
 800f058:	f7ff fba4 	bl	800e7a4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800f05c:	2301      	movs	r3, #1
 800f05e:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f062:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f066:	2b00      	cmp	r3, #0
 800f068:	f040 8085 	bne.w	800f176 <HAL_SPI_IRQHandler+0x1fe>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800f06c:	2e05      	cmp	r6, #5
 800f06e:	f000 8092 	beq.w	800f196 <HAL_SPI_IRQHandler+0x21e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800f072:	2e04      	cmp	r6, #4
 800f074:	f000 8092 	beq.w	800f19c <HAL_SPI_IRQHandler+0x224>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800f078:	2e03      	cmp	r6, #3
 800f07a:	d1ea      	bne.n	800f052 <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_TxCpltCallback(hspi);
 800f07c:	f7ff fec0 	bl	800ee00 <HAL_SPI_TxCpltCallback>
 800f080:	e7e7      	b.n	800f052 <HAL_SPI_IRQHandler+0xda>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800f082:	f415 7f58 	tst.w	r5, #864	; 0x360
 800f086:	d0e4      	beq.n	800f052 <HAL_SPI_IRQHandler+0xda>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800f088:	0668      	lsls	r0, r5, #25
 800f08a:	d509      	bpl.n	800f0a0 <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f08c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f090:	f043 0304 	orr.w	r3, r3, #4
 800f094:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f098:	6993      	ldr	r3, [r2, #24]
 800f09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f09e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800f0a0:	05a9      	lsls	r1, r5, #22
 800f0a2:	d50a      	bpl.n	800f0ba <HAL_SPI_IRQHandler+0x142>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f0a4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f0a8:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f0aa:	f043 0301 	orr.w	r3, r3, #1
 800f0ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f0b2:	6993      	ldr	r3, [r2, #24]
 800f0b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f0b8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800f0ba:	05ea      	lsls	r2, r5, #23
 800f0bc:	d50a      	bpl.n	800f0d4 <HAL_SPI_IRQHandler+0x15c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f0be:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f0c2:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f0c4:	f043 0308 	orr.w	r3, r3, #8
 800f0c8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f0cc:	6993      	ldr	r3, [r2, #24]
 800f0ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0d2:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800f0d4:	06ab      	lsls	r3, r5, #26
 800f0d6:	d50a      	bpl.n	800f0ee <HAL_SPI_IRQHandler+0x176>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f0d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f0dc:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f0e6:	6993      	ldr	r3, [r2, #24]
 800f0e8:	f043 0320 	orr.w	r3, r3, #32
 800f0ec:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f0ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d0ad      	beq.n	800f052 <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE(hspi);
 800f0f6:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f0f8:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800f0fc:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f0fe:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800f102:	f023 0301 	bic.w	r3, r3, #1
 800f106:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800f108:	6822      	ldr	r2, [r4, #0]
 800f10a:	4b26      	ldr	r3, [pc, #152]	; (800f1a4 <HAL_SPI_IRQHandler+0x22c>)
 800f10c:	6911      	ldr	r1, [r2, #16]
 800f10e:	ea03 0301 	and.w	r3, r3, r1
 800f112:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f114:	d12b      	bne.n	800f16e <HAL_SPI_IRQHandler+0x1f6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f116:	6822      	ldr	r2, [r4, #0]
 800f118:	6893      	ldr	r3, [r2, #8]
 800f11a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f11e:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800f120:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f122:	b15b      	cbz	r3, 800f13c <HAL_SPI_IRQHandler+0x1c4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f124:	4a20      	ldr	r2, [pc, #128]	; (800f1a8 <HAL_SPI_IRQHandler+0x230>)
 800f126:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f128:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f12a:	f7fa f833 	bl	8009194 <HAL_DMA_Abort_IT>
 800f12e:	b128      	cbz	r0, 800f13c <HAL_SPI_IRQHandler+0x1c4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f130:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f138:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800f13c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d087      	beq.n	800f052 <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f142:	4a19      	ldr	r2, [pc, #100]	; (800f1a8 <HAL_SPI_IRQHandler+0x230>)
 800f144:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f146:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f148:	f7fa f824 	bl	8009194 <HAL_DMA_Abort_IT>
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d080      	beq.n	800f052 <HAL_SPI_IRQHandler+0xda>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f150:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800f154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f158:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800f15c:	e779      	b.n	800f052 <HAL_SPI_IRQHandler+0xda>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800f15e:	6993      	ldr	r3, [r2, #24]
 800f160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f164:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800f166:	f7ff ff05 	bl	800ef74 <HAL_SPI_SuspendCallback>
}
 800f16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800f16e:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800f170:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800f172:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800f176:	f7ff fe79 	bl	800ee6c <HAL_SPI_ErrorCallback>
 800f17a:	e76a      	b.n	800f052 <HAL_SPI_IRQHandler+0xda>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f17c:	6823      	ldr	r3, [r4, #0]
 800f17e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f182:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f184:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f186:	3101      	adds	r1, #1
 800f188:	6661      	str	r1, [r4, #100]	; 0x64
 800f18a:	e73a      	b.n	800f002 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800f18c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800f18e:	4620      	mov	r0, r4
}
 800f190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800f194:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800f196:	f7f5 fa15 	bl	80045c4 <HAL_SPI_TxRxCpltCallback>
 800f19a:	e75a      	b.n	800f052 <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_RxCpltCallback(hspi);
 800f19c:	f7f4 ffca 	bl	8004134 <HAL_SPI_RxCpltCallback>
 800f1a0:	e757      	b.n	800f052 <HAL_SPI_IRQHandler+0xda>
 800f1a2:	bf00      	nop
 800f1a4:	fffffc94 	.word	0xfffffc94
 800f1a8:	0800ef59 	.word	0x0800ef59

0800f1ac <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f1ac:	680b      	ldr	r3, [r1, #0]
{
 800f1ae:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f1b0:	b9d3      	cbnz	r3, 800f1e8 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f1b2:	6804      	ldr	r4, [r0, #0]
 800f1b4:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800f1b8:	684a      	ldr	r2, [r1, #4]
 800f1ba:	4023      	ands	r3, r4
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800f1c2:	4323      	orrs	r3, r4
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800f1ca:	4323      	orrs	r3, r4
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800f1d2:	4323      	orrs	r3, r4
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800f1da:	4323      	orrs	r3, r4
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800f1e0:	2000      	movs	r0, #0
 800f1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1e6:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f1e8:	6802      	ldr	r2, [r0, #0]
 800f1ea:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800f1ee:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800f1f2:	4322      	orrs	r2, r4
 800f1f4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800f1f6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	; (800f224 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f1fa:	4322      	orrs	r2, r4
 800f1fc:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f1fe:	6842      	ldr	r2, [r0, #4]
 800f200:	4013      	ands	r3, r2
 800f202:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800f206:	4323      	orrs	r3, r4
 800f208:	4313      	orrs	r3, r2
 800f20a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800f20e:	4323      	orrs	r3, r4
 800f210:	4313      	orrs	r3, r2
 800f212:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800f216:	4323      	orrs	r3, r4
 800f218:	4313      	orrs	r3, r2
 800f21a:	6043      	str	r3, [r0, #4]
}
 800f21c:	2000      	movs	r0, #0
 800f21e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f222:	4770      	bx	lr
 800f224:	ffff8000 	.word	0xffff8000

0800f228 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f228:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f22a:	bb02      	cbnz	r2, 800f26e <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f22c:	6883      	ldr	r3, [r0, #8]
 800f22e:	e9d1 2400 	ldrd	r2, r4, [r1]
 800f232:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f236:	3c01      	subs	r4, #1
 800f238:	3a01      	subs	r2, #1
 800f23a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800f23e:	4313      	orrs	r3, r2
 800f240:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800f244:	3a01      	subs	r2, #1
 800f246:	3c01      	subs	r4, #1
 800f248:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f24c:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
 800f250:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
 800f254:	6989      	ldr	r1, [r1, #24]
 800f256:	3b01      	subs	r3, #1
 800f258:	3c01      	subs	r4, #1
 800f25a:	3901      	subs	r1, #1
 800f25c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800f260:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800f264:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f268:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800f26a:	2000      	movs	r0, #0
 800f26c:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f26e:	6885      	ldr	r5, [r0, #8]
 800f270:	68ca      	ldr	r2, [r1, #12]
 800f272:	4b13      	ldr	r3, [pc, #76]	; (800f2c0 <FMC_SDRAM_Timing_Init+0x98>)
 800f274:	1e54      	subs	r4, r2, #1
 800f276:	694a      	ldr	r2, [r1, #20]
 800f278:	402b      	ands	r3, r5
 800f27a:	3a01      	subs	r2, #1
 800f27c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800f280:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800f284:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f286:	68c3      	ldr	r3, [r0, #12]
 800f288:	e9d1 4200 	ldrd	r4, r2, [r1]
 800f28c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f290:	3a01      	subs	r2, #1
 800f292:	3c01      	subs	r4, #1
 800f294:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800f298:	ea43 0204 	orr.w	r2, r3, r4
 800f29c:	688c      	ldr	r4, [r1, #8]
 800f29e:	690b      	ldr	r3, [r1, #16]
 800f2a0:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800f2a4:	6989      	ldr	r1, [r1, #24]
 800f2a6:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800f2aa:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
 800f2ae:	3901      	subs	r1, #1
 800f2b0:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800f2b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800f2b8:	60c3      	str	r3, [r0, #12]
}
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	bd30      	pop	{r4, r5, pc}
 800f2be:	bf00      	nop
 800f2c0:	ff0f0fff 	.word	0xff0f0fff

0800f2c4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f2c4:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f2c6:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800f2ca:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f2cc:	6900      	ldr	r0, [r0, #16]
 800f2ce:	4323      	orrs	r3, r4
 800f2d0:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800f2d4:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800f2d8:	4c05      	ldr	r4, [pc, #20]	; (800f2f0 <FMC_SDRAM_SendCommand+0x2c>)
 800f2da:	3901      	subs	r1, #1
 800f2dc:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800f2de:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f2e0:	4323      	orrs	r3, r4
 800f2e2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800f2e6:	6113      	str	r3, [r2, #16]
}
 800f2e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	ffc00000 	.word	0xffc00000

0800f2f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f2f4:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f2f6:	4b05      	ldr	r3, [pc, #20]	; (800f30c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800f2f8:	2000      	movs	r0, #0
{
 800f2fa:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f2fc:	6954      	ldr	r4, [r2, #20]
 800f2fe:	4023      	ands	r3, r4
 800f300:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800f304:	6151      	str	r1, [r2, #20]
}
 800f306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f30a:	4770      	bx	lr
 800f30c:	ffffc001 	.word	0xffffc001

0800f310 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f310:	b084      	sub	sp, #16
 800f312:	b410      	push	{r4}
 800f314:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800f318:	4614      	mov	r4, r2
{
 800f31a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800f31e:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800f320:	9904      	ldr	r1, [sp, #16]
{
 800f322:	4602      	mov	r2, r0
             Init.BusWide             | \
 800f324:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800f326:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f328:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800f32a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800f32c:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800f32e:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800f330:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800f332:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f334:	4903      	ldr	r1, [pc, #12]	; (800f344 <SDMMC_Init+0x34>)
 800f336:	4021      	ands	r1, r4
 800f338:	430b      	orrs	r3, r1
 800f33a:	6053      	str	r3, [r2, #4]
}
 800f33c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f340:	b004      	add	sp, #16
 800f342:	4770      	bx	lr
 800f344:	ffc02c00 	.word	0xffc02c00

0800f348 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f348:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop

0800f350 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800f350:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800f352:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800f354:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800f356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800f35a:	4770      	bx	lr

0800f35c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f35c:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800f35e:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	f042 0203 	orr.w	r2, r2, #3
 800f366:	601a      	str	r2, [r3, #0]
}
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop

0800f36c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f36c:	6800      	ldr	r0, [r0, #0]
}
 800f36e:	f000 0003 	and.w	r0, r0, #3
 800f372:	4770      	bx	lr

0800f374 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f374:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800f376:	5840      	ldr	r0, [r0, r1]
}
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop

0800f37c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800f37c:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f37e:	680b      	ldr	r3, [r1, #0]
{
 800f380:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f382:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f384:	684b      	ldr	r3, [r1, #4]
 800f386:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800f388:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f38a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f38c:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800f390:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800f392:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f394:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800f398:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800f39a:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800f39c:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f39e:	430b      	orrs	r3, r1
 800f3a0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800f3a2:	bc30      	pop	{r4, r5}
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop

0800f3a8 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f3a8:	4a4c      	ldr	r2, [pc, #304]	; (800f4dc <SDMMC_CmdBlockLength+0x134>)
 800f3aa:	4b4d      	ldr	r3, [pc, #308]	; (800f4e0 <SDMMC_CmdBlockLength+0x138>)
{
 800f3ac:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f3ae:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f3b0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f3b2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f3b6:	68c1      	ldr	r1, [r0, #12]
 800f3b8:	4c4a      	ldr	r4, [pc, #296]	; (800f4e4 <SDMMC_CmdBlockLength+0x13c>)
 800f3ba:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f3be:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f3c0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f3c2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f3c6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f3c8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f3cc:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800f3ce:	b14a      	cbz	r2, 800f3e4 <SDMMC_CmdBlockLength+0x3c>
 800f3d0:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f3d2:	4945      	ldr	r1, [pc, #276]	; (800f4e8 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
 800f3d4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f3d6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f3d8:	420a      	tst	r2, r1
 800f3da:	d001      	beq.n	800f3e0 <SDMMC_CmdBlockLength+0x38>
 800f3dc:	0492      	lsls	r2, r2, #18
 800f3de:	d507      	bpl.n	800f3f0 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
 800f3e0:	1c5c      	adds	r4, r3, #1
 800f3e2:	d1f7      	bne.n	800f3d4 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800f3e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3ee:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f3f2:	075c      	lsls	r4, r3, #29
 800f3f4:	d43d      	bmi.n	800f472 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f3f8:	f013 0301 	ands.w	r3, r3, #1
 800f3fc:	d134      	bne.n	800f468 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f3fe:	4b3b      	ldr	r3, [pc, #236]	; (800f4ec <SDMMC_CmdBlockLength+0x144>)
 800f400:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f402:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f404:	b2db      	uxtb	r3, r3
 800f406:	2b10      	cmp	r3, #16
 800f408:	d131      	bne.n	800f46e <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
 800f40a:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f40c:	4b38      	ldr	r3, [pc, #224]	; (800f4f0 <SDMMC_CmdBlockLength+0x148>)
 800f40e:	4013      	ands	r3, r2
 800f410:	2b00      	cmp	r3, #0
 800f412:	d0e9      	beq.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f414:	2a00      	cmp	r2, #0
 800f416:	db30      	blt.n	800f47a <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f418:	0051      	lsls	r1, r2, #1
 800f41a:	d431      	bmi.n	800f480 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f41c:	0094      	lsls	r4, r2, #2
 800f41e:	d431      	bmi.n	800f484 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f420:	00d0      	lsls	r0, r2, #3
 800f422:	d431      	bmi.n	800f488 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f424:	0111      	lsls	r1, r2, #4
 800f426:	d432      	bmi.n	800f48e <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f428:	0154      	lsls	r4, r2, #5
 800f42a:	d433      	bmi.n	800f494 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f42c:	01d0      	lsls	r0, r2, #7
 800f42e:	d434      	bmi.n	800f49a <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f430:	0211      	lsls	r1, r2, #8
 800f432:	d435      	bmi.n	800f4a0 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f434:	0254      	lsls	r4, r2, #9
 800f436:	d436      	bmi.n	800f4a6 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f438:	0290      	lsls	r0, r2, #10
 800f43a:	d440      	bmi.n	800f4be <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f43c:	02d1      	lsls	r1, r2, #11
 800f43e:	d43b      	bmi.n	800f4b8 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f440:	0354      	lsls	r4, r2, #13
 800f442:	d436      	bmi.n	800f4b2 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f444:	0390      	lsls	r0, r2, #14
 800f446:	d431      	bmi.n	800f4ac <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f448:	03d1      	lsls	r1, r2, #15
 800f44a:	d444      	bmi.n	800f4d6 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f44c:	0414      	lsls	r4, r2, #16
 800f44e:	d43f      	bmi.n	800f4d0 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f450:	0450      	lsls	r0, r2, #17
 800f452:	d43a      	bmi.n	800f4ca <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f454:	0491      	lsls	r1, r2, #18
 800f456:	d435      	bmi.n	800f4c4 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f458:	f012 0f08 	tst.w	r2, #8
 800f45c:	bf14      	ite	ne
 800f45e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f462:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f466:	e7bf      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f468:	2201      	movs	r2, #1
 800f46a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f46c:	e7bc      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f46e:	2301      	movs	r3, #1
 800f470:	e7ba      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f472:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f474:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f476:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f478:	e7b6      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f47a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f47e:	e7b3      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f480:	2340      	movs	r3, #64	; 0x40
 800f482:	e7b1      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f484:	2380      	movs	r3, #128	; 0x80
 800f486:	e7af      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f48c:	e7ac      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f48e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f492:	e7a9      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f498:	e7a6      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f49a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f49e:	e7a3      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f4a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4a4:	e7a0      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f4a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4aa:	e79d      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f4ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f4b0:	e79a      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f4b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f4b6:	e797      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 800f4b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4bc:	e794      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f4be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f4c2:	e791      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800f4c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f4c8:	e78e      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f4ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f4ce:	e78b      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f4d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f4d4:	e788      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f4d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f4da:	e785      	b.n	800f3e8 <SDMMC_CmdBlockLength+0x40>
 800f4dc:	20000284 	.word	0x20000284
 800f4e0:	10624dd3 	.word	0x10624dd3
 800f4e4:	fffee0c0 	.word	0xfffee0c0
 800f4e8:	00200045 	.word	0x00200045
 800f4ec:	002000c5 	.word	0x002000c5
 800f4f0:	fdffe008 	.word	0xfdffe008

0800f4f4 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f4f4:	4a4c      	ldr	r2, [pc, #304]	; (800f628 <SDMMC_CmdReadSingleBlock+0x134>)
 800f4f6:	4b4d      	ldr	r3, [pc, #308]	; (800f62c <SDMMC_CmdReadSingleBlock+0x138>)
{
 800f4f8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f4fa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f4fc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f4fe:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f502:	68c1      	ldr	r1, [r0, #12]
 800f504:	4c4a      	ldr	r4, [pc, #296]	; (800f630 <SDMMC_CmdReadSingleBlock+0x13c>)
 800f506:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f50a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f50c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f50e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f512:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f514:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f518:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f51a:	b14a      	cbz	r2, 800f530 <SDMMC_CmdReadSingleBlock+0x3c>
 800f51c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f51e:	4945      	ldr	r1, [pc, #276]	; (800f634 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800f520:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f522:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f524:	420a      	tst	r2, r1
 800f526:	d001      	beq.n	800f52c <SDMMC_CmdReadSingleBlock+0x38>
 800f528:	0492      	lsls	r2, r2, #18
 800f52a:	d507      	bpl.n	800f53c <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 800f52c:	1c5c      	adds	r4, r3, #1
 800f52e:	d1f7      	bne.n	800f520 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800f530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f534:	4618      	mov	r0, r3
 800f536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f53a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f53c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f53e:	075c      	lsls	r4, r3, #29
 800f540:	d43d      	bmi.n	800f5be <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f542:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f544:	f013 0301 	ands.w	r3, r3, #1
 800f548:	d134      	bne.n	800f5b4 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f54a:	4b3b      	ldr	r3, [pc, #236]	; (800f638 <SDMMC_CmdReadSingleBlock+0x144>)
 800f54c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f54e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f550:	b2db      	uxtb	r3, r3
 800f552:	2b11      	cmp	r3, #17
 800f554:	d131      	bne.n	800f5ba <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800f556:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f558:	4b38      	ldr	r3, [pc, #224]	; (800f63c <SDMMC_CmdReadSingleBlock+0x148>)
 800f55a:	4013      	ands	r3, r2
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d0e9      	beq.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f560:	2a00      	cmp	r2, #0
 800f562:	db30      	blt.n	800f5c6 <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f564:	0051      	lsls	r1, r2, #1
 800f566:	d431      	bmi.n	800f5cc <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f568:	0094      	lsls	r4, r2, #2
 800f56a:	d431      	bmi.n	800f5d0 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f56c:	00d0      	lsls	r0, r2, #3
 800f56e:	d431      	bmi.n	800f5d4 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f570:	0111      	lsls	r1, r2, #4
 800f572:	d432      	bmi.n	800f5da <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f574:	0154      	lsls	r4, r2, #5
 800f576:	d433      	bmi.n	800f5e0 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f578:	01d0      	lsls	r0, r2, #7
 800f57a:	d434      	bmi.n	800f5e6 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f57c:	0211      	lsls	r1, r2, #8
 800f57e:	d435      	bmi.n	800f5ec <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f580:	0254      	lsls	r4, r2, #9
 800f582:	d436      	bmi.n	800f5f2 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f584:	0290      	lsls	r0, r2, #10
 800f586:	d440      	bmi.n	800f60a <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f588:	02d1      	lsls	r1, r2, #11
 800f58a:	d43b      	bmi.n	800f604 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f58c:	0354      	lsls	r4, r2, #13
 800f58e:	d436      	bmi.n	800f5fe <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f590:	0390      	lsls	r0, r2, #14
 800f592:	d431      	bmi.n	800f5f8 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f594:	03d1      	lsls	r1, r2, #15
 800f596:	d444      	bmi.n	800f622 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f598:	0414      	lsls	r4, r2, #16
 800f59a:	d43f      	bmi.n	800f61c <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f59c:	0450      	lsls	r0, r2, #17
 800f59e:	d43a      	bmi.n	800f616 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f5a0:	0491      	lsls	r1, r2, #18
 800f5a2:	d435      	bmi.n	800f610 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f5a4:	f012 0f08 	tst.w	r2, #8
 800f5a8:	bf14      	ite	ne
 800f5aa:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f5ae:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f5b2:	e7bf      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5b8:	e7bc      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	e7ba      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f5be:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f5c0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f5c2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f5c4:	e7b6      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f5c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f5ca:	e7b3      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f5cc:	2340      	movs	r3, #64	; 0x40
 800f5ce:	e7b1      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f5d0:	2380      	movs	r3, #128	; 0x80
 800f5d2:	e7af      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f5d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f5d8:	e7ac      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f5da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5de:	e7a9      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f5e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5e4:	e7a6      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f5e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f5ea:	e7a3      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f5ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5f0:	e7a0      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f5f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f5f6:	e79d      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f5f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f5fc:	e79a      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f5fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f602:	e797      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800f604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f608:	e794      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f60a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f60e:	e791      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800f610:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f614:	e78e      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f616:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f61a:	e78b      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f61c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f620:	e788      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f622:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f626:	e785      	b.n	800f534 <SDMMC_CmdReadSingleBlock+0x40>
 800f628:	20000284 	.word	0x20000284
 800f62c:	10624dd3 	.word	0x10624dd3
 800f630:	fffee0c0 	.word	0xfffee0c0
 800f634:	00200045 	.word	0x00200045
 800f638:	002000c5 	.word	0x002000c5
 800f63c:	fdffe008 	.word	0xfdffe008

0800f640 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f640:	4a4c      	ldr	r2, [pc, #304]	; (800f774 <SDMMC_CmdReadMultiBlock+0x134>)
 800f642:	4b4d      	ldr	r3, [pc, #308]	; (800f778 <SDMMC_CmdReadMultiBlock+0x138>)
{
 800f644:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f646:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f648:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f64a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f64e:	68c1      	ldr	r1, [r0, #12]
 800f650:	4c4a      	ldr	r4, [pc, #296]	; (800f77c <SDMMC_CmdReadMultiBlock+0x13c>)
 800f652:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f656:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f658:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f65a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f65e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f660:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f664:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f666:	b14a      	cbz	r2, 800f67c <SDMMC_CmdReadMultiBlock+0x3c>
 800f668:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f66a:	4945      	ldr	r1, [pc, #276]	; (800f780 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800f66c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f66e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f670:	420a      	tst	r2, r1
 800f672:	d001      	beq.n	800f678 <SDMMC_CmdReadMultiBlock+0x38>
 800f674:	0492      	lsls	r2, r2, #18
 800f676:	d507      	bpl.n	800f688 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 800f678:	1c5c      	adds	r4, r3, #1
 800f67a:	d1f7      	bne.n	800f66c <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800f67c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f680:	4618      	mov	r0, r3
 800f682:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f686:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f688:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f68a:	075c      	lsls	r4, r3, #29
 800f68c:	d43d      	bmi.n	800f70a <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f68e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f690:	f013 0301 	ands.w	r3, r3, #1
 800f694:	d134      	bne.n	800f700 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f696:	4b3b      	ldr	r3, [pc, #236]	; (800f784 <SDMMC_CmdReadMultiBlock+0x144>)
 800f698:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f69a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f69c:	b2db      	uxtb	r3, r3
 800f69e:	2b12      	cmp	r3, #18
 800f6a0:	d131      	bne.n	800f706 <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800f6a2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f6a4:	4b38      	ldr	r3, [pc, #224]	; (800f788 <SDMMC_CmdReadMultiBlock+0x148>)
 800f6a6:	4013      	ands	r3, r2
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d0e9      	beq.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f6ac:	2a00      	cmp	r2, #0
 800f6ae:	db30      	blt.n	800f712 <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f6b0:	0051      	lsls	r1, r2, #1
 800f6b2:	d431      	bmi.n	800f718 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f6b4:	0094      	lsls	r4, r2, #2
 800f6b6:	d431      	bmi.n	800f71c <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f6b8:	00d0      	lsls	r0, r2, #3
 800f6ba:	d431      	bmi.n	800f720 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f6bc:	0111      	lsls	r1, r2, #4
 800f6be:	d432      	bmi.n	800f726 <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f6c0:	0154      	lsls	r4, r2, #5
 800f6c2:	d433      	bmi.n	800f72c <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f6c4:	01d0      	lsls	r0, r2, #7
 800f6c6:	d434      	bmi.n	800f732 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f6c8:	0211      	lsls	r1, r2, #8
 800f6ca:	d435      	bmi.n	800f738 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f6cc:	0254      	lsls	r4, r2, #9
 800f6ce:	d436      	bmi.n	800f73e <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f6d0:	0290      	lsls	r0, r2, #10
 800f6d2:	d440      	bmi.n	800f756 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f6d4:	02d1      	lsls	r1, r2, #11
 800f6d6:	d43b      	bmi.n	800f750 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f6d8:	0354      	lsls	r4, r2, #13
 800f6da:	d436      	bmi.n	800f74a <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f6dc:	0390      	lsls	r0, r2, #14
 800f6de:	d431      	bmi.n	800f744 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f6e0:	03d1      	lsls	r1, r2, #15
 800f6e2:	d444      	bmi.n	800f76e <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f6e4:	0414      	lsls	r4, r2, #16
 800f6e6:	d43f      	bmi.n	800f768 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f6e8:	0450      	lsls	r0, r2, #17
 800f6ea:	d43a      	bmi.n	800f762 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f6ec:	0491      	lsls	r1, r2, #18
 800f6ee:	d435      	bmi.n	800f75c <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f6f0:	f012 0f08 	tst.w	r2, #8
 800f6f4:	bf14      	ite	ne
 800f6f6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f6fa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f6fe:	e7bf      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f700:	2201      	movs	r2, #1
 800f702:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f704:	e7bc      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f706:	2301      	movs	r3, #1
 800f708:	e7ba      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f70a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f70c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f70e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f710:	e7b6      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f716:	e7b3      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f718:	2340      	movs	r3, #64	; 0x40
 800f71a:	e7b1      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f71c:	2380      	movs	r3, #128	; 0x80
 800f71e:	e7af      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f720:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f724:	e7ac      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f72a:	e7a9      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f72c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f730:	e7a6      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f732:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f736:	e7a3      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f73c:	e7a0      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f73e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f742:	e79d      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f748:	e79a      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f74a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f74e:	e797      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800f750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f754:	e794      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f756:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f75a:	e791      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800f75c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f760:	e78e      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f762:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f766:	e78b      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f768:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f76c:	e788      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f76e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f772:	e785      	b.n	800f680 <SDMMC_CmdReadMultiBlock+0x40>
 800f774:	20000284 	.word	0x20000284
 800f778:	10624dd3 	.word	0x10624dd3
 800f77c:	fffee0c0 	.word	0xfffee0c0
 800f780:	00200045 	.word	0x00200045
 800f784:	002000c5 	.word	0x002000c5
 800f788:	fdffe008 	.word	0xfdffe008

0800f78c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f78c:	4a4c      	ldr	r2, [pc, #304]	; (800f8c0 <SDMMC_CmdWriteSingleBlock+0x134>)
 800f78e:	4b4d      	ldr	r3, [pc, #308]	; (800f8c4 <SDMMC_CmdWriteSingleBlock+0x138>)
{
 800f790:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f792:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f794:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f796:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f79a:	68c1      	ldr	r1, [r0, #12]
 800f79c:	4c4a      	ldr	r4, [pc, #296]	; (800f8c8 <SDMMC_CmdWriteSingleBlock+0x13c>)
 800f79e:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f7a2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f7a4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f7a6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f7aa:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f7ac:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f7b0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f7b2:	b14a      	cbz	r2, 800f7c8 <SDMMC_CmdWriteSingleBlock+0x3c>
 800f7b4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f7b6:	4945      	ldr	r1, [pc, #276]	; (800f8cc <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800f7b8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f7ba:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f7bc:	420a      	tst	r2, r1
 800f7be:	d001      	beq.n	800f7c4 <SDMMC_CmdWriteSingleBlock+0x38>
 800f7c0:	0492      	lsls	r2, r2, #18
 800f7c2:	d507      	bpl.n	800f7d4 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
 800f7c4:	1c5c      	adds	r4, r3, #1
 800f7c6:	d1f7      	bne.n	800f7b8 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800f7c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7d2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f7d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f7d6:	075c      	lsls	r4, r3, #29
 800f7d8:	d43d      	bmi.n	800f856 <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f7da:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f7dc:	f013 0301 	ands.w	r3, r3, #1
 800f7e0:	d134      	bne.n	800f84c <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f7e2:	4b3b      	ldr	r3, [pc, #236]	; (800f8d0 <SDMMC_CmdWriteSingleBlock+0x144>)
 800f7e4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f7e6:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	2b18      	cmp	r3, #24
 800f7ec:	d131      	bne.n	800f852 <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800f7ee:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f7f0:	4b38      	ldr	r3, [pc, #224]	; (800f8d4 <SDMMC_CmdWriteSingleBlock+0x148>)
 800f7f2:	4013      	ands	r3, r2
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d0e9      	beq.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f7f8:	2a00      	cmp	r2, #0
 800f7fa:	db30      	blt.n	800f85e <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f7fc:	0051      	lsls	r1, r2, #1
 800f7fe:	d431      	bmi.n	800f864 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f800:	0094      	lsls	r4, r2, #2
 800f802:	d431      	bmi.n	800f868 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f804:	00d0      	lsls	r0, r2, #3
 800f806:	d431      	bmi.n	800f86c <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f808:	0111      	lsls	r1, r2, #4
 800f80a:	d432      	bmi.n	800f872 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f80c:	0154      	lsls	r4, r2, #5
 800f80e:	d433      	bmi.n	800f878 <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f810:	01d0      	lsls	r0, r2, #7
 800f812:	d434      	bmi.n	800f87e <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f814:	0211      	lsls	r1, r2, #8
 800f816:	d435      	bmi.n	800f884 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f818:	0254      	lsls	r4, r2, #9
 800f81a:	d436      	bmi.n	800f88a <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f81c:	0290      	lsls	r0, r2, #10
 800f81e:	d440      	bmi.n	800f8a2 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f820:	02d1      	lsls	r1, r2, #11
 800f822:	d43b      	bmi.n	800f89c <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f824:	0354      	lsls	r4, r2, #13
 800f826:	d436      	bmi.n	800f896 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f828:	0390      	lsls	r0, r2, #14
 800f82a:	d431      	bmi.n	800f890 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f82c:	03d1      	lsls	r1, r2, #15
 800f82e:	d444      	bmi.n	800f8ba <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f830:	0414      	lsls	r4, r2, #16
 800f832:	d43f      	bmi.n	800f8b4 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f834:	0450      	lsls	r0, r2, #17
 800f836:	d43a      	bmi.n	800f8ae <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f838:	0491      	lsls	r1, r2, #18
 800f83a:	d435      	bmi.n	800f8a8 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f83c:	f012 0f08 	tst.w	r2, #8
 800f840:	bf14      	ite	ne
 800f842:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f846:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f84a:	e7bf      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f84c:	2201      	movs	r2, #1
 800f84e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f850:	e7bc      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f852:	2301      	movs	r3, #1
 800f854:	e7ba      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f856:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f858:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f85a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f85c:	e7b6      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f85e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f862:	e7b3      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f864:	2340      	movs	r3, #64	; 0x40
 800f866:	e7b1      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f868:	2380      	movs	r3, #128	; 0x80
 800f86a:	e7af      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f86c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f870:	e7ac      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f872:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f876:	e7a9      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f87c:	e7a6      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f87e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f882:	e7a3      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f888:	e7a0      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f88a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f88e:	e79d      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f890:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f894:	e79a      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f896:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f89a:	e797      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800f89c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8a0:	e794      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f8a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f8a6:	e791      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800f8a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f8ac:	e78e      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f8ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f8b2:	e78b      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f8b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f8b8:	e788      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f8ba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f8be:	e785      	b.n	800f7cc <SDMMC_CmdWriteSingleBlock+0x40>
 800f8c0:	20000284 	.word	0x20000284
 800f8c4:	10624dd3 	.word	0x10624dd3
 800f8c8:	fffee0c0 	.word	0xfffee0c0
 800f8cc:	00200045 	.word	0x00200045
 800f8d0:	002000c5 	.word	0x002000c5
 800f8d4:	fdffe008 	.word	0xfdffe008

0800f8d8 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f8d8:	4a4c      	ldr	r2, [pc, #304]	; (800fa0c <SDMMC_CmdWriteMultiBlock+0x134>)
 800f8da:	4b4d      	ldr	r3, [pc, #308]	; (800fa10 <SDMMC_CmdWriteMultiBlock+0x138>)
{
 800f8dc:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f8de:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f8e0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f8e2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f8e6:	68c1      	ldr	r1, [r0, #12]
 800f8e8:	4c4a      	ldr	r4, [pc, #296]	; (800fa14 <SDMMC_CmdWriteMultiBlock+0x13c>)
 800f8ea:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f8ee:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f8f0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f8f2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f8f6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f8f8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f8fc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f8fe:	b14a      	cbz	r2, 800f914 <SDMMC_CmdWriteMultiBlock+0x3c>
 800f900:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f902:	4945      	ldr	r1, [pc, #276]	; (800fa18 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800f904:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f906:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f908:	420a      	tst	r2, r1
 800f90a:	d001      	beq.n	800f910 <SDMMC_CmdWriteMultiBlock+0x38>
 800f90c:	0492      	lsls	r2, r2, #18
 800f90e:	d507      	bpl.n	800f920 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 800f910:	1c5c      	adds	r4, r3, #1
 800f912:	d1f7      	bne.n	800f904 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800f914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f918:	4618      	mov	r0, r3
 800f91a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f91e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f920:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f922:	075c      	lsls	r4, r3, #29
 800f924:	d43d      	bmi.n	800f9a2 <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f926:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f928:	f013 0301 	ands.w	r3, r3, #1
 800f92c:	d134      	bne.n	800f998 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f92e:	4b3b      	ldr	r3, [pc, #236]	; (800fa1c <SDMMC_CmdWriteMultiBlock+0x144>)
 800f930:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f932:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b19      	cmp	r3, #25
 800f938:	d131      	bne.n	800f99e <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800f93a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f93c:	4b38      	ldr	r3, [pc, #224]	; (800fa20 <SDMMC_CmdWriteMultiBlock+0x148>)
 800f93e:	4013      	ands	r3, r2
 800f940:	2b00      	cmp	r3, #0
 800f942:	d0e9      	beq.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f944:	2a00      	cmp	r2, #0
 800f946:	db30      	blt.n	800f9aa <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f948:	0051      	lsls	r1, r2, #1
 800f94a:	d431      	bmi.n	800f9b0 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f94c:	0094      	lsls	r4, r2, #2
 800f94e:	d431      	bmi.n	800f9b4 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f950:	00d0      	lsls	r0, r2, #3
 800f952:	d431      	bmi.n	800f9b8 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f954:	0111      	lsls	r1, r2, #4
 800f956:	d432      	bmi.n	800f9be <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f958:	0154      	lsls	r4, r2, #5
 800f95a:	d433      	bmi.n	800f9c4 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f95c:	01d0      	lsls	r0, r2, #7
 800f95e:	d434      	bmi.n	800f9ca <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f960:	0211      	lsls	r1, r2, #8
 800f962:	d435      	bmi.n	800f9d0 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f964:	0254      	lsls	r4, r2, #9
 800f966:	d436      	bmi.n	800f9d6 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f968:	0290      	lsls	r0, r2, #10
 800f96a:	d440      	bmi.n	800f9ee <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f96c:	02d1      	lsls	r1, r2, #11
 800f96e:	d43b      	bmi.n	800f9e8 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f970:	0354      	lsls	r4, r2, #13
 800f972:	d436      	bmi.n	800f9e2 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f974:	0390      	lsls	r0, r2, #14
 800f976:	d431      	bmi.n	800f9dc <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f978:	03d1      	lsls	r1, r2, #15
 800f97a:	d444      	bmi.n	800fa06 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f97c:	0414      	lsls	r4, r2, #16
 800f97e:	d43f      	bmi.n	800fa00 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f980:	0450      	lsls	r0, r2, #17
 800f982:	d43a      	bmi.n	800f9fa <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f984:	0491      	lsls	r1, r2, #18
 800f986:	d435      	bmi.n	800f9f4 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f988:	f012 0f08 	tst.w	r2, #8
 800f98c:	bf14      	ite	ne
 800f98e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f992:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f996:	e7bf      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f998:	2201      	movs	r2, #1
 800f99a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f99c:	e7bc      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	e7ba      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f9a2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f9a4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f9a6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f9a8:	e7b6      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f9aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f9ae:	e7b3      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f9b0:	2340      	movs	r3, #64	; 0x40
 800f9b2:	e7b1      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f9b4:	2380      	movs	r3, #128	; 0x80
 800f9b6:	e7af      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f9b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f9bc:	e7ac      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f9be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9c2:	e7a9      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f9c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9c8:	e7a6      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f9ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9ce:	e7a3      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f9d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9d4:	e7a0      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f9d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f9da:	e79d      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f9dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f9e0:	e79a      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f9e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f9e6:	e797      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800f9e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9ec:	e794      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f9ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f9f2:	e791      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800f9f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f9f8:	e78e      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f9fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f9fe:	e78b      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fa00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fa04:	e788      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fa06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fa0a:	e785      	b.n	800f918 <SDMMC_CmdWriteMultiBlock+0x40>
 800fa0c:	20000284 	.word	0x20000284
 800fa10:	10624dd3 	.word	0x10624dd3
 800fa14:	fffee0c0 	.word	0xfffee0c0
 800fa18:	00200045 	.word	0x00200045
 800fa1c:	002000c5 	.word	0x002000c5
 800fa20:	fdffe008 	.word	0xfdffe008

0800fa24 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fa24:	4b7d      	ldr	r3, [pc, #500]	; (800fc1c <SDMMC_CmdStopTransfer+0x1f8>)
 800fa26:	497e      	ldr	r1, [pc, #504]	; (800fc20 <SDMMC_CmdStopTransfer+0x1fc>)
{
 800fa28:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fa2a:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800fa2c:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fa2e:	4b7d      	ldr	r3, [pc, #500]	; (800fc24 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fa30:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fa34:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fa36:	4d7c      	ldr	r5, [pc, #496]	; (800fc28 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fa38:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fa3c:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800fa3e:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fa40:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fa42:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800fa46:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800fa4a:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fa4c:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 800fa50:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fa52:	68c4      	ldr	r4, [r0, #12]
 800fa54:	4023      	ands	r3, r4
 800fa56:	4319      	orrs	r1, r3
 800fa58:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 800fa5a:	b14a      	cbz	r2, 800fa70 <SDMMC_CmdStopTransfer+0x4c>
 800fa5c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800fa5e:	4973      	ldr	r1, [pc, #460]	; (800fc2c <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 800fa60:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800fa62:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fa64:	420a      	tst	r2, r1
 800fa66:	d001      	beq.n	800fa6c <SDMMC_CmdStopTransfer+0x48>
 800fa68:	0492      	lsls	r2, r2, #18
 800fa6a:	d50a      	bpl.n	800fa82 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800fa6c:	1c5c      	adds	r4, r3, #1
 800fa6e:	d1f7      	bne.n	800fa60 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fa70:	68c2      	ldr	r2, [r0, #12]
 800fa72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fa7a:	60c2      	str	r2, [r0, #12]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	bc30      	pop	{r4, r5}
 800fa80:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fa82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fa84:	075b      	lsls	r3, r3, #29
 800fa86:	d454      	bmi.n	800fb32 <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fa88:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fa8a:	f013 0301 	ands.w	r3, r3, #1
 800fa8e:	d13c      	bne.n	800fb0a <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fa90:	4a67      	ldr	r2, [pc, #412]	; (800fc30 <SDMMC_CmdStopTransfer+0x20c>)
 800fa92:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800fa94:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fa96:	b2d2      	uxtb	r2, r2
 800fa98:	2a0c      	cmp	r2, #12
 800fa9a:	d144      	bne.n	800fb26 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 800fa9c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fa9e:	4965      	ldr	r1, [pc, #404]	; (800fc34 <SDMMC_CmdStopTransfer+0x210>)
 800faa0:	4011      	ands	r1, r2
 800faa2:	2900      	cmp	r1, #0
 800faa4:	d038      	beq.n	800fb18 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800faa6:	2a00      	cmp	r2, #0
 800faa8:	db36      	blt.n	800fb18 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800faaa:	0055      	lsls	r5, r2, #1
 800faac:	d448      	bmi.n	800fb40 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800faae:	0094      	lsls	r4, r2, #2
 800fab0:	d44c      	bmi.n	800fb4c <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fab2:	00d1      	lsls	r1, r2, #3
 800fab4:	d450      	bmi.n	800fb58 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fab6:	0113      	lsls	r3, r2, #4
 800fab8:	d455      	bmi.n	800fb66 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800faba:	0155      	lsls	r5, r2, #5
 800fabc:	d45a      	bmi.n	800fb74 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fabe:	01d4      	lsls	r4, r2, #7
 800fac0:	d466      	bmi.n	800fb90 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fac2:	0211      	lsls	r1, r2, #8
 800fac4:	d45d      	bmi.n	800fb82 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fac6:	0253      	lsls	r3, r2, #9
 800fac8:	d470      	bmi.n	800fbac <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800faca:	0295      	lsls	r5, r2, #10
 800facc:	d467      	bmi.n	800fb9e <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800face:	02d4      	lsls	r4, r2, #11
 800fad0:	f100 8081 	bmi.w	800fbd6 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fad4:	0351      	lsls	r1, r2, #13
 800fad6:	d477      	bmi.n	800fbc8 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fad8:	0393      	lsls	r3, r2, #14
 800fada:	d46e      	bmi.n	800fbba <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fadc:	03d5      	lsls	r5, r2, #15
 800fade:	f100 8096 	bmi.w	800fc0e <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fae2:	0414      	lsls	r4, r2, #16
 800fae4:	f100 8085 	bmi.w	800fbf2 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fae8:	0451      	lsls	r1, r2, #17
 800faea:	d47b      	bmi.n	800fbe4 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800faec:	0493      	lsls	r3, r2, #18
 800faee:	f100 8087 	bmi.w	800fc00 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800faf2:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800faf6:	68c2      	ldr	r2, [r0, #12]
 800faf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fafc:	bf14      	ite	ne
 800fafe:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fb02:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb06:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb08:	e7b8      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb0e:	68c2      	ldr	r2, [r0, #12]
 800fb10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb14:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb16:	e7b1      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb18:	68c2      	ldr	r2, [r0, #12]
 800fb1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb1e:	60c2      	str	r2, [r0, #12]
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	bc30      	pop	{r4, r5}
 800fb24:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb26:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb28:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb2e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb30:	e7a4      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fb32:	2304      	movs	r3, #4
 800fb34:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb36:	68c2      	ldr	r2, [r0, #12]
 800fb38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb3c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb3e:	e79d      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb40:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fb42:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb48:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb4a:	e797      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb4c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fb4e:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb54:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb56:	e791      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb58:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fb5a:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb62:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb64:	e78a      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb66:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fb68:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb70:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb72:	e783      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb74:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fb76:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb7e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb80:	e77c      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb82:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fb84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb8c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb8e:	e775      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb90:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fb92:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb9a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fb9c:	e76e      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fb9e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fba8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fbaa:	e767      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbac:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fbae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fbb6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fbb8:	e760      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbba:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fbbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fbc4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fbc6:	e759      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbc8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fbca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fbd2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fbd4:	e752      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbd6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 800fbd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fbe0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fbe2:	e74b      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbe4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fbe6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fbee:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fbf0:	e744      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbf2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fbf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fbf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fbfc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fbfe:	e73d      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fc00:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800fc02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fc06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fc0a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fc0c:	e736      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fc0e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fc10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800fc14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fc18:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800fc1a:	e72f      	b.n	800fa7c <SDMMC_CmdStopTransfer+0x58>
 800fc1c:	20000284 	.word	0x20000284
 800fc20:	10624dd3 	.word	0x10624dd3
 800fc24:	fffee0c0 	.word	0xfffee0c0
 800fc28:	05f5e100 	.word	0x05f5e100
 800fc2c:	00200045 	.word	0x00200045
 800fc30:	002000c5 	.word	0x002000c5
 800fc34:	fdffe008 	.word	0xfdffe008

0800fc38 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc38:	4a4c      	ldr	r2, [pc, #304]	; (800fd6c <SDMMC_CmdSelDesel+0x134>)
 800fc3a:	4b4d      	ldr	r3, [pc, #308]	; (800fd70 <SDMMC_CmdSelDesel+0x138>)
{
 800fc3c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc3e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800fc40:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc42:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc46:	68c1      	ldr	r1, [r0, #12]
 800fc48:	4c4a      	ldr	r4, [pc, #296]	; (800fd74 <SDMMC_CmdSelDesel+0x13c>)
 800fc4a:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc4e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc50:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc52:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc56:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fc58:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fc5c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800fc5e:	b14a      	cbz	r2, 800fc74 <SDMMC_CmdSelDesel+0x3c>
 800fc60:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800fc62:	4945      	ldr	r1, [pc, #276]	; (800fd78 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 800fc64:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800fc66:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fc68:	420a      	tst	r2, r1
 800fc6a:	d001      	beq.n	800fc70 <SDMMC_CmdSelDesel+0x38>
 800fc6c:	0492      	lsls	r2, r2, #18
 800fc6e:	d507      	bpl.n	800fc80 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
 800fc70:	1c5c      	adds	r4, r3, #1
 800fc72:	d1f7      	bne.n	800fc64 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800fc74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc7e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fc80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fc82:	075c      	lsls	r4, r3, #29
 800fc84:	d43d      	bmi.n	800fd02 <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fc86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fc88:	f013 0301 	ands.w	r3, r3, #1
 800fc8c:	d134      	bne.n	800fcf8 <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fc8e:	4b3b      	ldr	r3, [pc, #236]	; (800fd7c <SDMMC_CmdSelDesel+0x144>)
 800fc90:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800fc92:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fc94:	b2db      	uxtb	r3, r3
 800fc96:	2b07      	cmp	r3, #7
 800fc98:	d131      	bne.n	800fcfe <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
 800fc9a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fc9c:	4b38      	ldr	r3, [pc, #224]	; (800fd80 <SDMMC_CmdSelDesel+0x148>)
 800fc9e:	4013      	ands	r3, r2
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d0e9      	beq.n	800fc78 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fca4:	2a00      	cmp	r2, #0
 800fca6:	db30      	blt.n	800fd0a <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fca8:	0051      	lsls	r1, r2, #1
 800fcaa:	d431      	bmi.n	800fd10 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fcac:	0094      	lsls	r4, r2, #2
 800fcae:	d431      	bmi.n	800fd14 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fcb0:	00d0      	lsls	r0, r2, #3
 800fcb2:	d431      	bmi.n	800fd18 <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fcb4:	0111      	lsls	r1, r2, #4
 800fcb6:	d432      	bmi.n	800fd1e <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fcb8:	0154      	lsls	r4, r2, #5
 800fcba:	d433      	bmi.n	800fd24 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fcbc:	01d0      	lsls	r0, r2, #7
 800fcbe:	d434      	bmi.n	800fd2a <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fcc0:	0211      	lsls	r1, r2, #8
 800fcc2:	d435      	bmi.n	800fd30 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fcc4:	0254      	lsls	r4, r2, #9
 800fcc6:	d436      	bmi.n	800fd36 <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fcc8:	0290      	lsls	r0, r2, #10
 800fcca:	d440      	bmi.n	800fd4e <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fccc:	02d1      	lsls	r1, r2, #11
 800fcce:	d43b      	bmi.n	800fd48 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fcd0:	0354      	lsls	r4, r2, #13
 800fcd2:	d436      	bmi.n	800fd42 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fcd4:	0390      	lsls	r0, r2, #14
 800fcd6:	d431      	bmi.n	800fd3c <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fcd8:	03d1      	lsls	r1, r2, #15
 800fcda:	d444      	bmi.n	800fd66 <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fcdc:	0414      	lsls	r4, r2, #16
 800fcde:	d43f      	bmi.n	800fd60 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fce0:	0450      	lsls	r0, r2, #17
 800fce2:	d43a      	bmi.n	800fd5a <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fce4:	0491      	lsls	r1, r2, #18
 800fce6:	d435      	bmi.n	800fd54 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fce8:	f012 0f08 	tst.w	r2, #8
 800fcec:	bf14      	ite	ne
 800fcee:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800fcf2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800fcf6:	e7bf      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcfc:	e7bc      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	e7ba      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd02:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd04:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fd06:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd08:	e7b6      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fd0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fd0e:	e7b3      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fd10:	2340      	movs	r3, #64	; 0x40
 800fd12:	e7b1      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fd14:	2380      	movs	r3, #128	; 0x80
 800fd16:	e7af      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fd18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd1c:	e7ac      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fd1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd22:	e7a9      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fd24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd28:	e7a6      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fd2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fd2e:	e7a3      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fd30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd34:	e7a0      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fd36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fd3a:	e79d      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fd3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fd40:	e79a      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fd42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fd46:	e797      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 800fd48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd4c:	e794      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fd4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd52:	e791      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800fd54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fd58:	e78e      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fd5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fd5e:	e78b      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fd60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fd64:	e788      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fd66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fd6a:	e785      	b.n	800fc78 <SDMMC_CmdSelDesel+0x40>
 800fd6c:	20000284 	.word	0x20000284
 800fd70:	10624dd3 	.word	0x10624dd3
 800fd74:	fffee0c0 	.word	0xfffee0c0
 800fd78:	00200045 	.word	0x00200045
 800fd7c:	002000c5 	.word	0x002000c5
 800fd80:	fdffe008 	.word	0xfdffe008

0800fd84 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fd84:	4b11      	ldr	r3, [pc, #68]	; (800fdcc <SDMMC_CmdGoIdleState+0x48>)
{
 800fd86:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fd88:	4a11      	ldr	r2, [pc, #68]	; (800fdd0 <SDMMC_CmdGoIdleState+0x4c>)
{
 800fd8a:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fd8c:	4c11      	ldr	r4, [pc, #68]	; (800fdd4 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800fd8e:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fd90:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800fd92:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fd94:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fd98:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fd9a:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fd9e:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fda0:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fda2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fda6:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fdaa:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fdac:	e002      	b.n	800fdb4 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800fdae:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800fdb0:	0612      	lsls	r2, r2, #24
 800fdb2:	d405      	bmi.n	800fdc0 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800fdb4:	3b01      	subs	r3, #1
 800fdb6:	d2fa      	bcs.n	800fdae <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800fdb8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800fdbc:	bc30      	pop	{r4, r5}
 800fdbe:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fdc0:	4b05      	ldr	r3, [pc, #20]	; (800fdd8 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800fdc2:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fdc4:	638b      	str	r3, [r1, #56]	; 0x38
}
 800fdc6:	bc30      	pop	{r4, r5}
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop
 800fdcc:	20000284 	.word	0x20000284
 800fdd0:	fffee0c0 	.word	0xfffee0c0
 800fdd4:	10624dd3 	.word	0x10624dd3
 800fdd8:	002000c5 	.word	0x002000c5

0800fddc <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fddc:	4a1c      	ldr	r2, [pc, #112]	; (800fe50 <SDMMC_CmdOperCond+0x74>)
{
 800fdde:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800fde0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fde4:	481b      	ldr	r0, [pc, #108]	; (800fe54 <SDMMC_CmdOperCond+0x78>)
{
 800fde6:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fde8:	4c1b      	ldr	r4, [pc, #108]	; (800fe58 <SDMMC_CmdOperCond+0x7c>)
 800fdea:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800fdec:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fdee:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fdf2:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fdf6:	68cc      	ldr	r4, [r1, #12]
 800fdf8:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fdfa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fdfc:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800fdfe:	f241 3088 	movw	r0, #5000	; 0x1388
 800fe02:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fe06:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800fe08:	b14a      	cbz	r2, 800fe1e <SDMMC_CmdOperCond+0x42>
 800fe0a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800fe0c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800fe0e:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fe10:	f012 0f45 	tst.w	r2, #69	; 0x45
 800fe14:	d001      	beq.n	800fe1a <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fe16:	0490      	lsls	r0, r2, #18
 800fe18:	d506      	bpl.n	800fe28 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800fe1a:	1c5c      	adds	r4, r3, #1
 800fe1c:	d1f6      	bne.n	800fe0c <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800fe1e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800fe22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe26:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fe28:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800fe2a:	075a      	lsls	r2, r3, #29
 800fe2c:	d40c      	bmi.n	800fe48 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fe2e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800fe30:	f010 0001 	ands.w	r0, r0, #1
 800fe34:	d105      	bne.n	800fe42 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fe36:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800fe38:	065b      	lsls	r3, r3, #25
 800fe3a:	d5f2      	bpl.n	800fe22 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fe3c:	2340      	movs	r3, #64	; 0x40
 800fe3e:	638b      	str	r3, [r1, #56]	; 0x38
 800fe40:	e7ef      	b.n	800fe22 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fe42:	2301      	movs	r3, #1
 800fe44:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe46:	e7ec      	b.n	800fe22 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe48:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe4a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fe4c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe4e:	e7e8      	b.n	800fe22 <SDMMC_CmdOperCond+0x46>
 800fe50:	20000284 	.word	0x20000284
 800fe54:	fffee0c0 	.word	0xfffee0c0
 800fe58:	10624dd3 	.word	0x10624dd3

0800fe5c <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fe5c:	4a4c      	ldr	r2, [pc, #304]	; (800ff90 <SDMMC_CmdAppCommand+0x134>)
 800fe5e:	4b4d      	ldr	r3, [pc, #308]	; (800ff94 <SDMMC_CmdAppCommand+0x138>)
{
 800fe60:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fe62:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800fe64:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fe66:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fe6a:	68c1      	ldr	r1, [r0, #12]
 800fe6c:	4c4a      	ldr	r4, [pc, #296]	; (800ff98 <SDMMC_CmdAppCommand+0x13c>)
 800fe6e:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fe72:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fe74:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fe76:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fe7a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800fe7c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800fe80:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800fe82:	b14a      	cbz	r2, 800fe98 <SDMMC_CmdAppCommand+0x3c>
 800fe84:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800fe86:	4945      	ldr	r1, [pc, #276]	; (800ff9c <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
 800fe88:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800fe8a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fe8c:	420a      	tst	r2, r1
 800fe8e:	d001      	beq.n	800fe94 <SDMMC_CmdAppCommand+0x38>
 800fe90:	0492      	lsls	r2, r2, #18
 800fe92:	d507      	bpl.n	800fea4 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 800fe94:	1c5c      	adds	r4, r3, #1
 800fe96:	d1f7      	bne.n	800fe88 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800fe98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fea2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fea4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fea6:	075c      	lsls	r4, r3, #29
 800fea8:	d43d      	bmi.n	800ff26 <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800feaa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800feac:	f013 0301 	ands.w	r3, r3, #1
 800feb0:	d134      	bne.n	800ff1c <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800feb2:	4b3b      	ldr	r3, [pc, #236]	; (800ffa0 <SDMMC_CmdAppCommand+0x144>)
 800feb4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800feb6:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	2b37      	cmp	r3, #55	; 0x37
 800febc:	d131      	bne.n	800ff22 <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
 800febe:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fec0:	4b38      	ldr	r3, [pc, #224]	; (800ffa4 <SDMMC_CmdAppCommand+0x148>)
 800fec2:	4013      	ands	r3, r2
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d0e9      	beq.n	800fe9c <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fec8:	2a00      	cmp	r2, #0
 800feca:	db30      	blt.n	800ff2e <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fecc:	0051      	lsls	r1, r2, #1
 800fece:	d431      	bmi.n	800ff34 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fed0:	0094      	lsls	r4, r2, #2
 800fed2:	d431      	bmi.n	800ff38 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fed4:	00d0      	lsls	r0, r2, #3
 800fed6:	d431      	bmi.n	800ff3c <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fed8:	0111      	lsls	r1, r2, #4
 800feda:	d432      	bmi.n	800ff42 <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fedc:	0154      	lsls	r4, r2, #5
 800fede:	d433      	bmi.n	800ff48 <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fee0:	01d0      	lsls	r0, r2, #7
 800fee2:	d434      	bmi.n	800ff4e <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fee4:	0211      	lsls	r1, r2, #8
 800fee6:	d435      	bmi.n	800ff54 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fee8:	0254      	lsls	r4, r2, #9
 800feea:	d436      	bmi.n	800ff5a <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800feec:	0290      	lsls	r0, r2, #10
 800feee:	d440      	bmi.n	800ff72 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fef0:	02d1      	lsls	r1, r2, #11
 800fef2:	d43b      	bmi.n	800ff6c <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fef4:	0354      	lsls	r4, r2, #13
 800fef6:	d436      	bmi.n	800ff66 <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fef8:	0390      	lsls	r0, r2, #14
 800fefa:	d431      	bmi.n	800ff60 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fefc:	03d1      	lsls	r1, r2, #15
 800fefe:	d444      	bmi.n	800ff8a <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ff00:	0414      	lsls	r4, r2, #16
 800ff02:	d43f      	bmi.n	800ff84 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ff04:	0450      	lsls	r0, r2, #17
 800ff06:	d43a      	bmi.n	800ff7e <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ff08:	0491      	lsls	r1, r2, #18
 800ff0a:	d435      	bmi.n	800ff78 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ff0c:	f012 0f08 	tst.w	r2, #8
 800ff10:	bf14      	ite	ne
 800ff12:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800ff16:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800ff1a:	e7bf      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ff1c:	2201      	movs	r2, #1
 800ff1e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff20:	e7bc      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ff22:	2301      	movs	r3, #1
 800ff24:	e7ba      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff26:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff28:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff2a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff2c:	e7b6      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ff2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ff32:	e7b3      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ff34:	2340      	movs	r3, #64	; 0x40
 800ff36:	e7b1      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ff38:	2380      	movs	r3, #128	; 0x80
 800ff3a:	e7af      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ff3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ff40:	e7ac      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ff42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff46:	e7a9      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ff48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff4c:	e7a6      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ff4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ff52:	e7a3      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ff54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff58:	e7a0      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ff5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ff5e:	e79d      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ff60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ff64:	e79a      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ff66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ff6a:	e797      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 800ff6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff70:	e794      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ff72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ff76:	e791      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800ff78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ff7c:	e78e      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ff7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ff82:	e78b      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ff84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ff88:	e788      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ff8a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ff8e:	e785      	b.n	800fe9c <SDMMC_CmdAppCommand+0x40>
 800ff90:	20000284 	.word	0x20000284
 800ff94:	10624dd3 	.word	0x10624dd3
 800ff98:	fffee0c0 	.word	0xfffee0c0
 800ff9c:	00200045 	.word	0x00200045
 800ffa0:	002000c5 	.word	0x002000c5
 800ffa4:	fdffe008 	.word	0xfdffe008

0800ffa8 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ffa8:	4a18      	ldr	r2, [pc, #96]	; (801000c <SDMMC_CmdAppOperCommand+0x64>)
 800ffaa:	4b19      	ldr	r3, [pc, #100]	; (8010010 <SDMMC_CmdAppOperCommand+0x68>)
{
 800ffac:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ffae:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ffb0:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ffb2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ffb6:	68c1      	ldr	r1, [r0, #12]
 800ffb8:	4c16      	ldr	r4, [pc, #88]	; (8010014 <SDMMC_CmdAppOperCommand+0x6c>)
 800ffba:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ffbe:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ffc0:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ffc2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ffc6:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ffc8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ffcc:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800ffce:	b14a      	cbz	r2, 800ffe4 <SDMMC_CmdAppOperCommand+0x3c>
 800ffd0:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800ffd2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800ffd4:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ffd6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800ffda:	d001      	beq.n	800ffe0 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ffdc:	0492      	lsls	r2, r2, #18
 800ffde:	d507      	bpl.n	800fff0 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
 800ffe0:	1c59      	adds	r1, r3, #1
 800ffe2:	d1f6      	bne.n	800ffd2 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800ffe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffee:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fff0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fff2:	f013 0304 	ands.w	r3, r3, #4
 800fff6:	d105      	bne.n	8010004 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fff8:	4a07      	ldr	r2, [pc, #28]	; (8010018 <SDMMC_CmdAppOperCommand+0x70>)
 800fffa:	6382      	str	r2, [r0, #56]	; 0x38
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010002:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010004:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010006:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010008:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801000a:	e7ed      	b.n	800ffe8 <SDMMC_CmdAppOperCommand+0x40>
 801000c:	20000284 	.word	0x20000284
 8010010:	10624dd3 	.word	0x10624dd3
 8010014:	fffee0c0 	.word	0xfffee0c0
 8010018:	002000c5 	.word	0x002000c5

0801001c <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801001c:	4a4c      	ldr	r2, [pc, #304]	; (8010150 <SDMMC_CmdBusWidth+0x134>)
 801001e:	4b4d      	ldr	r3, [pc, #308]	; (8010154 <SDMMC_CmdBusWidth+0x138>)
{
 8010020:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010022:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010024:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010026:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801002a:	68c1      	ldr	r1, [r0, #12]
 801002c:	4c4a      	ldr	r4, [pc, #296]	; (8010158 <SDMMC_CmdBusWidth+0x13c>)
 801002e:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010032:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010034:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010036:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801003a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801003c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010040:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8010042:	b14a      	cbz	r2, 8010058 <SDMMC_CmdBusWidth+0x3c>
 8010044:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010046:	4945      	ldr	r1, [pc, #276]	; (801015c <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
 8010048:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801004a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801004c:	420a      	tst	r2, r1
 801004e:	d001      	beq.n	8010054 <SDMMC_CmdBusWidth+0x38>
 8010050:	0492      	lsls	r2, r2, #18
 8010052:	d507      	bpl.n	8010064 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 8010054:	1c5c      	adds	r4, r3, #1
 8010056:	d1f7      	bne.n	8010048 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8010058:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801005c:	4618      	mov	r0, r3
 801005e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010062:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010064:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010066:	075c      	lsls	r4, r3, #29
 8010068:	d43d      	bmi.n	80100e6 <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801006a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801006c:	f013 0301 	ands.w	r3, r3, #1
 8010070:	d134      	bne.n	80100dc <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010072:	4b3b      	ldr	r3, [pc, #236]	; (8010160 <SDMMC_CmdBusWidth+0x144>)
 8010074:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010076:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010078:	b2db      	uxtb	r3, r3
 801007a:	2b06      	cmp	r3, #6
 801007c:	d131      	bne.n	80100e2 <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
 801007e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010080:	4b38      	ldr	r3, [pc, #224]	; (8010164 <SDMMC_CmdBusWidth+0x148>)
 8010082:	4013      	ands	r3, r2
 8010084:	2b00      	cmp	r3, #0
 8010086:	d0e9      	beq.n	801005c <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010088:	2a00      	cmp	r2, #0
 801008a:	db30      	blt.n	80100ee <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801008c:	0051      	lsls	r1, r2, #1
 801008e:	d431      	bmi.n	80100f4 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010090:	0094      	lsls	r4, r2, #2
 8010092:	d431      	bmi.n	80100f8 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010094:	00d0      	lsls	r0, r2, #3
 8010096:	d431      	bmi.n	80100fc <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010098:	0111      	lsls	r1, r2, #4
 801009a:	d432      	bmi.n	8010102 <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801009c:	0154      	lsls	r4, r2, #5
 801009e:	d433      	bmi.n	8010108 <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80100a0:	01d0      	lsls	r0, r2, #7
 80100a2:	d434      	bmi.n	801010e <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80100a4:	0211      	lsls	r1, r2, #8
 80100a6:	d435      	bmi.n	8010114 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80100a8:	0254      	lsls	r4, r2, #9
 80100aa:	d436      	bmi.n	801011a <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80100ac:	0290      	lsls	r0, r2, #10
 80100ae:	d440      	bmi.n	8010132 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80100b0:	02d1      	lsls	r1, r2, #11
 80100b2:	d43b      	bmi.n	801012c <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80100b4:	0354      	lsls	r4, r2, #13
 80100b6:	d436      	bmi.n	8010126 <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80100b8:	0390      	lsls	r0, r2, #14
 80100ba:	d431      	bmi.n	8010120 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80100bc:	03d1      	lsls	r1, r2, #15
 80100be:	d444      	bmi.n	801014a <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80100c0:	0414      	lsls	r4, r2, #16
 80100c2:	d43f      	bmi.n	8010144 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80100c4:	0450      	lsls	r0, r2, #17
 80100c6:	d43a      	bmi.n	801013e <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80100c8:	0491      	lsls	r1, r2, #18
 80100ca:	d435      	bmi.n	8010138 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80100cc:	f012 0f08 	tst.w	r2, #8
 80100d0:	bf14      	ite	ne
 80100d2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80100d6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80100da:	e7bf      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80100dc:	2201      	movs	r2, #1
 80100de:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100e0:	e7bc      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100e2:	2301      	movs	r3, #1
 80100e4:	e7ba      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80100e6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80100e8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80100ea:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80100ec:	e7b6      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80100ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80100f2:	e7b3      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80100f4:	2340      	movs	r3, #64	; 0x40
 80100f6:	e7b1      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80100f8:	2380      	movs	r3, #128	; 0x80
 80100fa:	e7af      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80100fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010100:	e7ac      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010106:	e7a9      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801010c:	e7a6      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801010e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010112:	e7a3      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010118:	e7a0      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801011a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801011e:	e79d      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010120:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010124:	e79a      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801012a:	e797      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 801012c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010130:	e794      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010132:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010136:	e791      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8010138:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801013c:	e78e      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801013e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010142:	e78b      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010144:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010148:	e788      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801014a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801014e:	e785      	b.n	801005c <SDMMC_CmdBusWidth+0x40>
 8010150:	20000284 	.word	0x20000284
 8010154:	10624dd3 	.word	0x10624dd3
 8010158:	fffee0c0 	.word	0xfffee0c0
 801015c:	00200045 	.word	0x00200045
 8010160:	002000c5 	.word	0x002000c5
 8010164:	fdffe008 	.word	0xfdffe008

08010168 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010168:	4a4d      	ldr	r2, [pc, #308]	; (80102a0 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
 801016a:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801016c:	494d      	ldr	r1, [pc, #308]	; (80102a4 <SDMMC_CmdSendSCR+0x13c>)
{
 801016e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010170:	4c4d      	ldr	r4, [pc, #308]	; (80102a8 <SDMMC_CmdSendSCR+0x140>)
 8010172:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010174:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010176:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801017a:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801017e:	68c4      	ldr	r4, [r0, #12]
 8010180:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010182:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010184:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010186:	f241 3188 	movw	r1, #5000	; 0x1388
 801018a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801018e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8010190:	b14a      	cbz	r2, 80101a6 <SDMMC_CmdSendSCR+0x3e>
 8010192:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010194:	4945      	ldr	r1, [pc, #276]	; (80102ac <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 8010196:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010198:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801019a:	420a      	tst	r2, r1
 801019c:	d001      	beq.n	80101a2 <SDMMC_CmdSendSCR+0x3a>
 801019e:	0492      	lsls	r2, r2, #18
 80101a0:	d507      	bpl.n	80101b2 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 80101a2:	1c5c      	adds	r4, r3, #1
 80101a4:	d1f7      	bne.n	8010196 <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80101a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101b0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80101b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80101b4:	075c      	lsls	r4, r3, #29
 80101b6:	d43d      	bmi.n	8010234 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80101b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80101ba:	f013 0301 	ands.w	r3, r3, #1
 80101be:	d134      	bne.n	801022a <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80101c0:	4b3b      	ldr	r3, [pc, #236]	; (80102b0 <SDMMC_CmdSendSCR+0x148>)
 80101c2:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80101c4:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	2b33      	cmp	r3, #51	; 0x33
 80101ca:	d131      	bne.n	8010230 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 80101cc:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80101ce:	4b39      	ldr	r3, [pc, #228]	; (80102b4 <SDMMC_CmdSendSCR+0x14c>)
 80101d0:	4013      	ands	r3, r2
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d0e9      	beq.n	80101aa <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80101d6:	2a00      	cmp	r2, #0
 80101d8:	db30      	blt.n	801023c <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80101da:	0051      	lsls	r1, r2, #1
 80101dc:	d431      	bmi.n	8010242 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80101de:	0094      	lsls	r4, r2, #2
 80101e0:	d431      	bmi.n	8010246 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80101e2:	00d0      	lsls	r0, r2, #3
 80101e4:	d431      	bmi.n	801024a <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80101e6:	0111      	lsls	r1, r2, #4
 80101e8:	d432      	bmi.n	8010250 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80101ea:	0154      	lsls	r4, r2, #5
 80101ec:	d433      	bmi.n	8010256 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80101ee:	01d0      	lsls	r0, r2, #7
 80101f0:	d434      	bmi.n	801025c <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80101f2:	0211      	lsls	r1, r2, #8
 80101f4:	d435      	bmi.n	8010262 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80101f6:	0254      	lsls	r4, r2, #9
 80101f8:	d436      	bmi.n	8010268 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80101fa:	0290      	lsls	r0, r2, #10
 80101fc:	d440      	bmi.n	8010280 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80101fe:	02d1      	lsls	r1, r2, #11
 8010200:	d43b      	bmi.n	801027a <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010202:	0354      	lsls	r4, r2, #13
 8010204:	d436      	bmi.n	8010274 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010206:	0390      	lsls	r0, r2, #14
 8010208:	d431      	bmi.n	801026e <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801020a:	03d1      	lsls	r1, r2, #15
 801020c:	d444      	bmi.n	8010298 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801020e:	0414      	lsls	r4, r2, #16
 8010210:	d43f      	bmi.n	8010292 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010212:	0450      	lsls	r0, r2, #17
 8010214:	d43a      	bmi.n	801028c <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010216:	0491      	lsls	r1, r2, #18
 8010218:	d435      	bmi.n	8010286 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801021a:	f012 0f08 	tst.w	r2, #8
 801021e:	bf14      	ite	ne
 8010220:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8010224:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010228:	e7bf      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801022a:	2201      	movs	r2, #1
 801022c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801022e:	e7bc      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010230:	2301      	movs	r3, #1
 8010232:	e7ba      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010234:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010236:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010238:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801023a:	e7b6      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801023c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010240:	e7b3      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010242:	2340      	movs	r3, #64	; 0x40
 8010244:	e7b1      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010246:	2380      	movs	r3, #128	; 0x80
 8010248:	e7af      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801024a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801024e:	e7ac      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010254:	e7a9      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801025a:	e7a6      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801025c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010260:	e7a3      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010266:	e7a0      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801026c:	e79d      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801026e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010272:	e79a      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010278:	e797      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 801027a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801027e:	e794      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010284:	e791      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8010286:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801028a:	e78e      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801028c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010290:	e78b      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010292:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010296:	e788      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010298:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801029c:	e785      	b.n	80101aa <SDMMC_CmdSendSCR+0x42>
 801029e:	bf00      	nop
 80102a0:	20000284 	.word	0x20000284
 80102a4:	fffee0c0 	.word	0xfffee0c0
 80102a8:	10624dd3 	.word	0x10624dd3
 80102ac:	00200045 	.word	0x00200045
 80102b0:	002000c5 	.word	0x002000c5
 80102b4:	fdffe008 	.word	0xfdffe008

080102b8 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80102b8:	4a1a      	ldr	r2, [pc, #104]	; (8010324 <SDMMC_CmdSendCID+0x6c>)
{
 80102ba:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80102bc:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80102be:	481a      	ldr	r0, [pc, #104]	; (8010328 <SDMMC_CmdSendCID+0x70>)
{
 80102c0:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80102c2:	4c1a      	ldr	r4, [pc, #104]	; (801032c <SDMMC_CmdSendCID+0x74>)
 80102c4:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80102c6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80102c8:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80102cc:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80102d0:	68cc      	ldr	r4, [r1, #12]
 80102d2:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80102d4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80102d6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80102d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80102dc:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80102e0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 80102e2:	b14a      	cbz	r2, 80102f8 <SDMMC_CmdSendCID+0x40>
 80102e4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 80102e6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 80102e8:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80102ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 80102ee:	d001      	beq.n	80102f4 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80102f0:	0492      	lsls	r2, r2, #18
 80102f2:	d506      	bpl.n	8010302 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 80102f4:	1c58      	adds	r0, r3, #1
 80102f6:	d1f6      	bne.n	80102e6 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80102f8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80102fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010300:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010302:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010304:	075b      	lsls	r3, r3, #29
 8010306:	d409      	bmi.n	801031c <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010308:	6b48      	ldr	r0, [r1, #52]	; 0x34
 801030a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801030e:	bf14      	ite	ne
 8010310:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010312:	4b07      	ldreq	r3, [pc, #28]	; (8010330 <SDMMC_CmdSendCID+0x78>)
 8010314:	638b      	str	r3, [r1, #56]	; 0x38
}
 8010316:	f85d 4b04 	ldr.w	r4, [sp], #4
 801031a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801031c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801031e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010320:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010322:	e7eb      	b.n	80102fc <SDMMC_CmdSendCID+0x44>
 8010324:	20000284 	.word	0x20000284
 8010328:	fffee0c0 	.word	0xfffee0c0
 801032c:	10624dd3 	.word	0x10624dd3
 8010330:	002000c5 	.word	0x002000c5

08010334 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010334:	4a1b      	ldr	r2, [pc, #108]	; (80103a4 <SDMMC_CmdSendCSD+0x70>)
{
 8010336:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010338:	4b1b      	ldr	r3, [pc, #108]	; (80103a8 <SDMMC_CmdSendCSD+0x74>)
 801033a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 801033c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010340:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010344:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010348:	4818      	ldr	r0, [pc, #96]	; (80103ac <SDMMC_CmdSendCSD+0x78>)
 801034a:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801034e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010350:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010352:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010356:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010358:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801035c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010360:	1e53      	subs	r3, r2, #1
 8010362:	b14a      	cbz	r2, 8010378 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 8010364:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8010368:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801036a:	f012 0f45 	tst.w	r2, #69	; 0x45
 801036e:	d001      	beq.n	8010374 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010370:	0492      	lsls	r2, r2, #18
 8010372:	d504      	bpl.n	801037e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 8010374:	1c59      	adds	r1, r3, #1
 8010376:	d1f5      	bne.n	8010364 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8010378:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 801037c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801037e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8010382:	075b      	lsls	r3, r3, #29
 8010384:	d409      	bmi.n	801039a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010386:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 801038a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801038e:	bf14      	ite	ne
 8010390:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010392:	4b07      	ldreq	r3, [pc, #28]	; (80103b0 <SDMMC_CmdSendCSD+0x7c>)
 8010394:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8010398:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801039a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801039c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801039e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80103a2:	4770      	bx	lr
 80103a4:	20000284 	.word	0x20000284
 80103a8:	10624dd3 	.word	0x10624dd3
 80103ac:	fffee0c0 	.word	0xfffee0c0
 80103b0:	002000c5 	.word	0x002000c5

080103b4 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 80103b4:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80103b6:	4a27      	ldr	r2, [pc, #156]	; (8010454 <SDMMC_CmdSetRelAdd+0xa0>)
{
 80103b8:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 80103ba:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80103bc:	4c26      	ldr	r4, [pc, #152]	; (8010458 <SDMMC_CmdSetRelAdd+0xa4>)
 80103be:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80103c0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80103c2:	401c      	ands	r4, r3
 80103c4:	f241 1303 	movw	r3, #4355	; 0x1103
 80103c8:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80103ca:	4c24      	ldr	r4, [pc, #144]	; (801045c <SDMMC_CmdSetRelAdd+0xa8>)
 80103cc:	fba4 4202 	umull	r4, r2, r4, r2
 80103d0:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80103d4:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80103d6:	0a52      	lsrs	r2, r2, #9
 80103d8:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
 80103dc:	b14a      	cbz	r2, 80103f2 <SDMMC_CmdSetRelAdd+0x3e>
 80103de:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 80103e0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80103e2:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80103e4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80103e8:	d001      	beq.n	80103ee <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80103ea:	0492      	lsls	r2, r2, #18
 80103ec:	d507      	bpl.n	80103fe <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
 80103ee:	1c5c      	adds	r4, r3, #1
 80103f0:	d1f6      	bne.n	80103e0 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80103f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103fc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010400:	075c      	lsls	r4, r3, #29
 8010402:	d41c      	bmi.n	801043e <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010404:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010406:	f013 0301 	ands.w	r3, r3, #1
 801040a:	d113      	bne.n	8010434 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
 801040c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801040e:	b2db      	uxtb	r3, r3
 8010410:	2b03      	cmp	r3, #3
 8010412:	d112      	bne.n	801043a <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010414:	4b12      	ldr	r3, [pc, #72]	; (8010460 <SDMMC_CmdSetRelAdd+0xac>)
 8010416:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8010418:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801041a:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 801041e:	d015      	beq.n	801044c <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010420:	0451      	lsls	r1, r2, #17
 8010422:	d410      	bmi.n	8010446 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010424:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8010428:	bf14      	ite	ne
 801042a:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 801042e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010432:	e7e0      	b.n	80103f6 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010434:	2201      	movs	r2, #1
 8010436:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010438:	e7dd      	b.n	80103f6 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801043a:	2301      	movs	r3, #1
 801043c:	e7db      	b.n	80103f6 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801043e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010440:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010442:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010444:	e7d7      	b.n	80103f6 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801044a:	e7d4      	b.n	80103f6 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
 801044c:	0c12      	lsrs	r2, r2, #16
 801044e:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 8010450:	e7d1      	b.n	80103f6 <SDMMC_CmdSetRelAdd+0x42>
 8010452:	bf00      	nop
 8010454:	20000284 	.word	0x20000284
 8010458:	fffee0c0 	.word	0xfffee0c0
 801045c:	10624dd3 	.word	0x10624dd3
 8010460:	002000c5 	.word	0x002000c5

08010464 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010464:	4a4c      	ldr	r2, [pc, #304]	; (8010598 <SDMMC_CmdSendStatus+0x134>)
 8010466:	4b4d      	ldr	r3, [pc, #308]	; (801059c <SDMMC_CmdSendStatus+0x138>)
{
 8010468:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801046a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 801046c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801046e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010472:	68c1      	ldr	r1, [r0, #12]
 8010474:	4c4a      	ldr	r4, [pc, #296]	; (80105a0 <SDMMC_CmdSendStatus+0x13c>)
 8010476:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801047a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801047c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801047e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010482:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010484:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010488:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 801048a:	b14a      	cbz	r2, 80104a0 <SDMMC_CmdSendStatus+0x3c>
 801048c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801048e:	4945      	ldr	r1, [pc, #276]	; (80105a4 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
 8010490:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010492:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010494:	420a      	tst	r2, r1
 8010496:	d001      	beq.n	801049c <SDMMC_CmdSendStatus+0x38>
 8010498:	0492      	lsls	r2, r2, #18
 801049a:	d507      	bpl.n	80104ac <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 801049c:	1c5c      	adds	r4, r3, #1
 801049e:	d1f7      	bne.n	8010490 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80104a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104aa:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80104ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80104ae:	075c      	lsls	r4, r3, #29
 80104b0:	d43d      	bmi.n	801052e <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80104b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80104b4:	f013 0301 	ands.w	r3, r3, #1
 80104b8:	d134      	bne.n	8010524 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80104ba:	4b3b      	ldr	r3, [pc, #236]	; (80105a8 <SDMMC_CmdSendStatus+0x144>)
 80104bc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80104be:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b0d      	cmp	r3, #13
 80104c4:	d131      	bne.n	801052a <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
 80104c6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80104c8:	4b38      	ldr	r3, [pc, #224]	; (80105ac <SDMMC_CmdSendStatus+0x148>)
 80104ca:	4013      	ands	r3, r2
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d0e9      	beq.n	80104a4 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80104d0:	2a00      	cmp	r2, #0
 80104d2:	db30      	blt.n	8010536 <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80104d4:	0051      	lsls	r1, r2, #1
 80104d6:	d431      	bmi.n	801053c <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80104d8:	0094      	lsls	r4, r2, #2
 80104da:	d431      	bmi.n	8010540 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80104dc:	00d0      	lsls	r0, r2, #3
 80104de:	d431      	bmi.n	8010544 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80104e0:	0111      	lsls	r1, r2, #4
 80104e2:	d432      	bmi.n	801054a <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80104e4:	0154      	lsls	r4, r2, #5
 80104e6:	d433      	bmi.n	8010550 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80104e8:	01d0      	lsls	r0, r2, #7
 80104ea:	d434      	bmi.n	8010556 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80104ec:	0211      	lsls	r1, r2, #8
 80104ee:	d435      	bmi.n	801055c <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80104f0:	0254      	lsls	r4, r2, #9
 80104f2:	d436      	bmi.n	8010562 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80104f4:	0290      	lsls	r0, r2, #10
 80104f6:	d440      	bmi.n	801057a <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80104f8:	02d1      	lsls	r1, r2, #11
 80104fa:	d43b      	bmi.n	8010574 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80104fc:	0354      	lsls	r4, r2, #13
 80104fe:	d436      	bmi.n	801056e <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010500:	0390      	lsls	r0, r2, #14
 8010502:	d431      	bmi.n	8010568 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010504:	03d1      	lsls	r1, r2, #15
 8010506:	d444      	bmi.n	8010592 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010508:	0414      	lsls	r4, r2, #16
 801050a:	d43f      	bmi.n	801058c <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801050c:	0450      	lsls	r0, r2, #17
 801050e:	d43a      	bmi.n	8010586 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010510:	0491      	lsls	r1, r2, #18
 8010512:	d435      	bmi.n	8010580 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010514:	f012 0f08 	tst.w	r2, #8
 8010518:	bf14      	ite	ne
 801051a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801051e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010522:	e7bf      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010524:	2201      	movs	r2, #1
 8010526:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010528:	e7bc      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801052a:	2301      	movs	r3, #1
 801052c:	e7ba      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801052e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010530:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010532:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010534:	e7b6      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801053a:	e7b3      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801053c:	2340      	movs	r3, #64	; 0x40
 801053e:	e7b1      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010540:	2380      	movs	r3, #128	; 0x80
 8010542:	e7af      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010548:	e7ac      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801054a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801054e:	e7a9      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010554:	e7a6      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801055a:	e7a3      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010560:	e7a0      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010566:	e79d      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010568:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801056c:	e79a      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801056e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010572:	e797      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 8010574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010578:	e794      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801057a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801057e:	e791      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8010580:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010584:	e78e      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010586:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801058a:	e78b      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801058c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010590:	e788      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010592:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010596:	e785      	b.n	80104a4 <SDMMC_CmdSendStatus+0x40>
 8010598:	20000284 	.word	0x20000284
 801059c:	10624dd3 	.word	0x10624dd3
 80105a0:	fffee0c0 	.word	0xfffee0c0
 80105a4:	00200045 	.word	0x00200045
 80105a8:	002000c5 	.word	0x002000c5
 80105ac:	fdffe008 	.word	0xfdffe008

080105b0 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80105b0:	4a4d      	ldr	r2, [pc, #308]	; (80106e8 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
 80105b2:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80105b4:	494d      	ldr	r1, [pc, #308]	; (80106ec <SDMMC_CmdStatusRegister+0x13c>)
{
 80105b6:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80105b8:	4c4d      	ldr	r4, [pc, #308]	; (80106f0 <SDMMC_CmdStatusRegister+0x140>)
 80105ba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80105bc:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80105be:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80105c2:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80105c6:	68c4      	ldr	r4, [r0, #12]
 80105c8:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80105ca:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80105cc:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80105ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80105d2:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80105d6:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80105d8:	b14a      	cbz	r2, 80105ee <SDMMC_CmdStatusRegister+0x3e>
 80105da:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80105dc:	4945      	ldr	r1, [pc, #276]	; (80106f4 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 80105de:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80105e0:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80105e2:	420a      	tst	r2, r1
 80105e4:	d001      	beq.n	80105ea <SDMMC_CmdStatusRegister+0x3a>
 80105e6:	0492      	lsls	r2, r2, #18
 80105e8:	d507      	bpl.n	80105fa <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 80105ea:	1c5c      	adds	r4, r3, #1
 80105ec:	d1f7      	bne.n	80105de <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80105ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105f8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80105fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80105fc:	075c      	lsls	r4, r3, #29
 80105fe:	d43d      	bmi.n	801067c <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010600:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010602:	f013 0301 	ands.w	r3, r3, #1
 8010606:	d134      	bne.n	8010672 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010608:	4b3b      	ldr	r3, [pc, #236]	; (80106f8 <SDMMC_CmdStatusRegister+0x148>)
 801060a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801060c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801060e:	b2db      	uxtb	r3, r3
 8010610:	2b0d      	cmp	r3, #13
 8010612:	d131      	bne.n	8010678 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 8010614:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010616:	4b39      	ldr	r3, [pc, #228]	; (80106fc <SDMMC_CmdStatusRegister+0x14c>)
 8010618:	4013      	ands	r3, r2
 801061a:	2b00      	cmp	r3, #0
 801061c:	d0e9      	beq.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801061e:	2a00      	cmp	r2, #0
 8010620:	db30      	blt.n	8010684 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010622:	0051      	lsls	r1, r2, #1
 8010624:	d431      	bmi.n	801068a <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010626:	0094      	lsls	r4, r2, #2
 8010628:	d431      	bmi.n	801068e <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801062a:	00d0      	lsls	r0, r2, #3
 801062c:	d431      	bmi.n	8010692 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801062e:	0111      	lsls	r1, r2, #4
 8010630:	d432      	bmi.n	8010698 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010632:	0154      	lsls	r4, r2, #5
 8010634:	d433      	bmi.n	801069e <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010636:	01d0      	lsls	r0, r2, #7
 8010638:	d434      	bmi.n	80106a4 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801063a:	0211      	lsls	r1, r2, #8
 801063c:	d435      	bmi.n	80106aa <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801063e:	0254      	lsls	r4, r2, #9
 8010640:	d436      	bmi.n	80106b0 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010642:	0290      	lsls	r0, r2, #10
 8010644:	d440      	bmi.n	80106c8 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010646:	02d1      	lsls	r1, r2, #11
 8010648:	d43b      	bmi.n	80106c2 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801064a:	0354      	lsls	r4, r2, #13
 801064c:	d436      	bmi.n	80106bc <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801064e:	0390      	lsls	r0, r2, #14
 8010650:	d431      	bmi.n	80106b6 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010652:	03d1      	lsls	r1, r2, #15
 8010654:	d444      	bmi.n	80106e0 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010656:	0414      	lsls	r4, r2, #16
 8010658:	d43f      	bmi.n	80106da <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801065a:	0450      	lsls	r0, r2, #17
 801065c:	d43a      	bmi.n	80106d4 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801065e:	0491      	lsls	r1, r2, #18
 8010660:	d435      	bmi.n	80106ce <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010662:	f012 0f08 	tst.w	r2, #8
 8010666:	bf14      	ite	ne
 8010668:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801066c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010670:	e7bf      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010672:	2201      	movs	r2, #1
 8010674:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010676:	e7bc      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010678:	2301      	movs	r3, #1
 801067a:	e7ba      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801067c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801067e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010680:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010682:	e7b6      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010688:	e7b3      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801068a:	2340      	movs	r3, #64	; 0x40
 801068c:	e7b1      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801068e:	2380      	movs	r3, #128	; 0x80
 8010690:	e7af      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010696:	e7ac      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010698:	f44f 7300 	mov.w	r3, #512	; 0x200
 801069c:	e7a9      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801069e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106a2:	e7a6      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80106a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80106a8:	e7a3      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80106aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106ae:	e7a0      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80106b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80106b4:	e79d      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80106b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80106ba:	e79a      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80106bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80106c0:	e797      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 80106c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106c6:	e794      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80106c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80106cc:	e791      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 80106ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80106d2:	e78e      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80106d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80106d8:	e78b      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80106da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80106de:	e788      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80106e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80106e4:	e785      	b.n	80105f2 <SDMMC_CmdStatusRegister+0x42>
 80106e6:	bf00      	nop
 80106e8:	20000284 	.word	0x20000284
 80106ec:	fffee0c0 	.word	0xfffee0c0
 80106f0:	10624dd3 	.word	0x10624dd3
 80106f4:	00200045 	.word	0x00200045
 80106f8:	002000c5 	.word	0x002000c5
 80106fc:	fdffe008 	.word	0xfdffe008

08010700 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010700:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010702:	4903      	ldr	r1, [pc, #12]	; (8010710 <MX_FATFS_Init+0x10>)
 8010704:	4803      	ldr	r0, [pc, #12]	; (8010714 <MX_FATFS_Init+0x14>)
 8010706:	f003 f94f 	bl	80139a8 <FATFS_LinkDriver>
 801070a:	4b03      	ldr	r3, [pc, #12]	; (8010718 <MX_FATFS_Init+0x18>)
 801070c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801070e:	bd08      	pop	{r3, pc}
 8010710:	20019d10 	.word	0x20019d10
 8010714:	0801eefc 	.word	0x0801eefc
 8010718:	20019d14 	.word	0x20019d14

0801071c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 801071c:	2000      	movs	r0, #0
 801071e:	4770      	bx	lr

08010720 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010720:	b510      	push	{r4, lr}
 8010722:	4694      	mov	ip, r2
 8010724:	b082      	sub	sp, #8
 8010726:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010728:	460a      	mov	r2, r1
 801072a:	4663      	mov	r3, ip
 801072c:	4601      	mov	r1, r0
 801072e:	9400      	str	r4, [sp, #0]
 8010730:	4803      	ldr	r0, [pc, #12]	; (8010740 <BSP_SD_ReadBlocks+0x20>)
 8010732:	f7fd f8fb 	bl	800d92c <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8010736:	3800      	subs	r0, #0
 8010738:	bf18      	it	ne
 801073a:	2001      	movne	r0, #1
 801073c:	b002      	add	sp, #8
 801073e:	bd10      	pop	{r4, pc}
 8010740:	200194b0 	.word	0x200194b0

08010744 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010744:	b510      	push	{r4, lr}
 8010746:	4694      	mov	ip, r2
 8010748:	b082      	sub	sp, #8
 801074a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801074c:	460a      	mov	r2, r1
 801074e:	4663      	mov	r3, ip
 8010750:	4601      	mov	r1, r0
 8010752:	9400      	str	r4, [sp, #0]
 8010754:	4803      	ldr	r0, [pc, #12]	; (8010764 <BSP_SD_WriteBlocks+0x20>)
 8010756:	f7fd f9f1 	bl	800db3c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 801075a:	3800      	subs	r0, #0
 801075c:	bf18      	it	ne
 801075e:	2001      	movne	r0, #1
 8010760:	b002      	add	sp, #8
 8010762:	bd10      	pop	{r4, pc}
 8010764:	200194b0 	.word	0x200194b0

08010768 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010768:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801076a:	4803      	ldr	r0, [pc, #12]	; (8010778 <BSP_SD_GetCardState+0x10>)
 801076c:	f7fd fe54 	bl	800e418 <HAL_SD_GetCardState>
}
 8010770:	3804      	subs	r0, #4
 8010772:	bf18      	it	ne
 8010774:	2001      	movne	r0, #1
 8010776:	bd08      	pop	{r3, pc}
 8010778:	200194b0 	.word	0x200194b0

0801077c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801077c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801077e:	4801      	ldr	r0, [pc, #4]	; (8010784 <BSP_SD_GetCardInfo+0x8>)
 8010780:	f7fd bcfa 	b.w	800e178 <HAL_SD_GetCardInfo>
 8010784:	200194b0 	.word	0x200194b0

08010788 <BSP_SD_WriteCpltCallback>:
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop

0801078c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801078c:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801078e:	f7ff fffb 	bl	8010788 <BSP_SD_WriteCpltCallback>
}
 8010792:	bd08      	pop	{r3, pc}

08010794 <BSP_SD_ReadCpltCallback>:
 8010794:	4770      	bx	lr
 8010796:	bf00      	nop

08010798 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010798:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801079a:	f7ff fffb 	bl	8010794 <BSP_SD_ReadCpltCallback>
}
 801079e:	bd08      	pop	{r3, pc}

080107a0 <BSP_SD_Init>:
{
 80107a0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80107a2:	f7f4 fd4b 	bl	800523c <BSP_SD_IsDetected>
 80107a6:	2801      	cmp	r0, #1
 80107a8:	d001      	beq.n	80107ae <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 80107aa:	2002      	movs	r0, #2
}
 80107ac:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 80107ae:	4807      	ldr	r0, [pc, #28]	; (80107cc <BSP_SD_Init+0x2c>)
 80107b0:	f7fd fdca 	bl	800e348 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d1f9      	bne.n	80107ac <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80107b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80107bc:	4803      	ldr	r0, [pc, #12]	; (80107cc <BSP_SD_Init+0x2c>)
 80107be:	f7fd fcef 	bl	800e1a0 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80107c2:	3800      	subs	r0, #0
 80107c4:	bf18      	it	ne
 80107c6:	2001      	movne	r0, #1
}
 80107c8:	bd08      	pop	{r3, pc}
 80107ca:	bf00      	nop
 80107cc:	200194b0 	.word	0x200194b0

080107d0 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80107d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80107d4:	4803      	ldr	r0, [pc, #12]	; (80107e4 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 80107d6:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80107d8:	f7f9 fbc0 	bl	8009f5c <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80107dc:	fab0 f080 	clz	r0, r0
 80107e0:	0940      	lsrs	r0, r0, #5
 80107e2:	bd08      	pop	{r3, pc}
 80107e4:	58020800 	.word	0x58020800

080107e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80107e8:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 80107ea:	4c0a      	ldr	r4, [pc, #40]	; (8010814 <SD_initialize+0x2c>)
 80107ec:	2501      	movs	r5, #1
 80107ee:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80107f0:	f7ff ffd6 	bl	80107a0 <BSP_SD_Init>
 80107f4:	b108      	cbz	r0, 80107fa <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80107f6:	7820      	ldrb	r0, [r4, #0]
}
 80107f8:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 80107fa:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 80107fc:	f7ff ffb4 	bl	8010768 <BSP_SD_GetCardState>
 8010800:	b918      	cbnz	r0, 801080a <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 8010802:	7823      	ldrb	r3, [r4, #0]
 8010804:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8010808:	7023      	strb	r3, [r4, #0]
  return Stat;
 801080a:	7823      	ldrb	r3, [r4, #0]
 801080c:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 801080e:	7023      	strb	r3, [r4, #0]
  return Stat;
 8010810:	7820      	ldrb	r0, [r4, #0]
}
 8010812:	bd38      	pop	{r3, r4, r5, pc}
 8010814:	20000294 	.word	0x20000294

08010818 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010818:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801081a:	2301      	movs	r3, #1
 801081c:	4c05      	ldr	r4, [pc, #20]	; (8010834 <SD_status+0x1c>)
 801081e:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8010820:	f7ff ffa2 	bl	8010768 <BSP_SD_GetCardState>
 8010824:	b918      	cbnz	r0, 801082e <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 8010826:	7823      	ldrb	r3, [r4, #0]
 8010828:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801082c:	7023      	strb	r3, [r4, #0]
  return Stat;
 801082e:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8010830:	bd10      	pop	{r4, pc}
 8010832:	bf00      	nop
 8010834:	20000294 	.word	0x20000294

08010838 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010838:	b508      	push	{r3, lr}
 801083a:	4608      	mov	r0, r1
 801083c:	4611      	mov	r1, r2
 801083e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010844:	f7ff ff6c 	bl	8010720 <BSP_SD_ReadBlocks>
 8010848:	b108      	cbz	r0, 801084e <SD_read+0x16>
  DRESULT res = RES_ERROR;
 801084a:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 801084c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 801084e:	f7ff ff8b 	bl	8010768 <BSP_SD_GetCardState>
 8010852:	2800      	cmp	r0, #0
 8010854:	d0fa      	beq.n	801084c <SD_read+0x14>
 8010856:	f7ff ff87 	bl	8010768 <BSP_SD_GetCardState>
 801085a:	2800      	cmp	r0, #0
 801085c:	d1f7      	bne.n	801084e <SD_read+0x16>
 801085e:	e7f5      	b.n	801084c <SD_read+0x14>

08010860 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010860:	4b18      	ldr	r3, [pc, #96]	; (80108c4 <SD_ioctl+0x64>)
{
 8010862:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010864:	7818      	ldrb	r0, [r3, #0]
{
 8010866:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010868:	f010 0401 	ands.w	r4, r0, #1
 801086c:	d106      	bne.n	801087c <SD_ioctl+0x1c>
 801086e:	4615      	mov	r5, r2

  switch (cmd)
 8010870:	2903      	cmp	r1, #3
 8010872:	d824      	bhi.n	80108be <SD_ioctl+0x5e>
 8010874:	e8df f001 	tbb	[pc, r1]
 8010878:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801087c:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 801087e:	4620      	mov	r0, r4
 8010880:	b00b      	add	sp, #44	; 0x2c
 8010882:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 8010884:	460c      	mov	r4, r1
}
 8010886:	4620      	mov	r0, r4
 8010888:	b00b      	add	sp, #44	; 0x2c
 801088a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801088c:	a801      	add	r0, sp, #4
 801088e:	f7ff ff75 	bl	801077c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010892:	9b07      	ldr	r3, [sp, #28]
}
 8010894:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010896:	602b      	str	r3, [r5, #0]
}
 8010898:	b00b      	add	sp, #44	; 0x2c
 801089a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801089c:	a801      	add	r0, sp, #4
 801089e:	f7ff ff6d 	bl	801077c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80108a2:	9b08      	ldr	r3, [sp, #32]
}
 80108a4:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 80108a6:	802b      	strh	r3, [r5, #0]
}
 80108a8:	b00b      	add	sp, #44	; 0x2c
 80108aa:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80108ac:	a801      	add	r0, sp, #4
 80108ae:	f7ff ff65 	bl	801077c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80108b2:	9b08      	ldr	r3, [sp, #32]
}
 80108b4:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80108b6:	0a5b      	lsrs	r3, r3, #9
 80108b8:	602b      	str	r3, [r5, #0]
}
 80108ba:	b00b      	add	sp, #44	; 0x2c
 80108bc:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 80108be:	2404      	movs	r4, #4
 80108c0:	e7dd      	b.n	801087e <SD_ioctl+0x1e>
 80108c2:	bf00      	nop
 80108c4:	20000294 	.word	0x20000294

080108c8 <SD_write>:
{
 80108c8:	b508      	push	{r3, lr}
 80108ca:	4608      	mov	r0, r1
 80108cc:	4611      	mov	r1, r2
 80108ce:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80108d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108d4:	f7ff ff36 	bl	8010744 <BSP_SD_WriteBlocks>
 80108d8:	b108      	cbz	r0, 80108de <SD_write+0x16>
  DRESULT res = RES_ERROR;
 80108da:	2001      	movs	r0, #1
}
 80108dc:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 80108de:	f7ff ff43 	bl	8010768 <BSP_SD_GetCardState>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d0fa      	beq.n	80108dc <SD_write+0x14>
 80108e6:	f7ff ff3f 	bl	8010768 <BSP_SD_GetCardState>
 80108ea:	2800      	cmp	r0, #0
 80108ec:	d1f7      	bne.n	80108de <SD_write+0x16>
 80108ee:	e7f5      	b.n	80108dc <SD_write+0x14>

080108f0 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80108f0:	4b03      	ldr	r3, [pc, #12]	; (8010900 <disk_status+0x10>)
 80108f2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80108f6:	4403      	add	r3, r0
 80108f8:	6852      	ldr	r2, [r2, #4]
 80108fa:	7a18      	ldrb	r0, [r3, #8]
 80108fc:	6853      	ldr	r3, [r2, #4]
 80108fe:	4718      	bx	r3
 8010900:	20019f40 	.word	0x20019f40

08010904 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8010904:	4b07      	ldr	r3, [pc, #28]	; (8010924 <disk_initialize+0x20>)
 8010906:	5c1a      	ldrb	r2, [r3, r0]
 8010908:	b952      	cbnz	r2, 8010920 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801090a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801090e:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 8010910:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010914:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8010916:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801091a:	7a08      	ldrb	r0, [r1, #8]
 801091c:	6813      	ldr	r3, [r2, #0]
 801091e:	4718      	bx	r3
  }
  return stat;
}
 8010920:	2000      	movs	r0, #0
 8010922:	4770      	bx	lr
 8010924:	20019f40 	.word	0x20019f40

08010928 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010928:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801092a:	4c05      	ldr	r4, [pc, #20]	; (8010940 <disk_read+0x18>)
 801092c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8010930:	4404      	add	r4, r0
 8010932:	686d      	ldr	r5, [r5, #4]
 8010934:	7a20      	ldrb	r0, [r4, #8]
 8010936:	68ac      	ldr	r4, [r5, #8]
 8010938:	46a4      	mov	ip, r4
  return res;
}
 801093a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801093c:	4760      	bx	ip
 801093e:	bf00      	nop
 8010940:	20019f40 	.word	0x20019f40

08010944 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010944:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010946:	4c05      	ldr	r4, [pc, #20]	; (801095c <disk_write+0x18>)
 8010948:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 801094c:	4404      	add	r4, r0
 801094e:	686d      	ldr	r5, [r5, #4]
 8010950:	7a20      	ldrb	r0, [r4, #8]
 8010952:	68ec      	ldr	r4, [r5, #12]
 8010954:	46a4      	mov	ip, r4
  return res;
}
 8010956:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010958:	4760      	bx	ip
 801095a:	bf00      	nop
 801095c:	20019f40 	.word	0x20019f40

08010960 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010960:	4b04      	ldr	r3, [pc, #16]	; (8010974 <disk_ioctl+0x14>)
 8010962:	eb03 0c00 	add.w	ip, r3, r0
 8010966:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8010970:	691b      	ldr	r3, [r3, #16]
 8010972:	4718      	bx	r3
 8010974:	20019f40 	.word	0x20019f40

08010978 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8010978:	4b26      	ldr	r3, [pc, #152]	; (8010a14 <inc_lock+0x9c>)
{
 801097a:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	6805      	ldr	r5, [r0, #0]
 8010980:	4295      	cmp	r5, r2
 8010982:	d01b      	beq.n	80109bc <inc_lock+0x44>
 8010984:	691c      	ldr	r4, [r3, #16]
 8010986:	42ac      	cmp	r4, r5
 8010988:	d006      	beq.n	8010998 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801098a:	b30a      	cbz	r2, 80109d0 <inc_lock+0x58>
 801098c:	2c00      	cmp	r4, #0
 801098e:	d036      	beq.n	80109fe <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010990:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8010992:	4620      	mov	r0, r4
 8010994:	bcf0      	pop	{r4, r5, r6, r7}
 8010996:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 8010998:	695e      	ldr	r6, [r3, #20]
 801099a:	6887      	ldr	r7, [r0, #8]
 801099c:	42be      	cmp	r6, r7
 801099e:	d1f4      	bne.n	801098a <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 80109a0:	699e      	ldr	r6, [r3, #24]
 80109a2:	6947      	ldr	r7, [r0, #20]
 80109a4:	42be      	cmp	r6, r7
 80109a6:	d1f0      	bne.n	801098a <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80109a8:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80109aa:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80109ae:	bb49      	cbnz	r1, 8010a04 <inc_lock+0x8c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80109b0:	0111      	lsls	r1, r2, #4
	return i + 1;
 80109b2:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80109b4:	8982      	ldrh	r2, [r0, #12]
 80109b6:	3201      	adds	r2, #1
 80109b8:	b292      	uxth	r2, r2
 80109ba:	e01b      	b.n	80109f4 <inc_lock+0x7c>
		if (Files[i].fs == dp->obj.fs &&
 80109bc:	6884      	ldr	r4, [r0, #8]
 80109be:	685e      	ldr	r6, [r3, #4]
 80109c0:	42a6      	cmp	r6, r4
 80109c2:	d1df      	bne.n	8010984 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 80109c4:	689c      	ldr	r4, [r3, #8]
 80109c6:	6946      	ldr	r6, [r0, #20]
 80109c8:	42a6      	cmp	r6, r4
 80109ca:	d1db      	bne.n	8010984 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80109cc:	2200      	movs	r2, #0
 80109ce:	e7ec      	b.n	80109aa <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80109d0:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80109d2:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 80109d4:	ea4f 1102 	mov.w	r1, r2, lsl #4
 80109d8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80109dc:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 80109de:	6945      	ldr	r5, [r0, #20]
 80109e0:	6880      	ldr	r0, [r0, #8]
 80109e2:	e9c2 0501 	strd	r0, r5, [r2, #4]
		Files[i].ctr = 0;
 80109e6:	f04f 0000 	mov.w	r0, #0
 80109ea:	8190      	strh	r0, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80109ec:	bf14      	ite	ne
 80109ee:	f44f 7280 	movne.w	r2, #256	; 0x100
 80109f2:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80109f4:	440b      	add	r3, r1
}
 80109f6:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80109f8:	819a      	strh	r2, [r3, #12]
}
 80109fa:	bcf0      	pop	{r4, r5, r6, r7}
 80109fc:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80109fe:	2402      	movs	r4, #2
 8010a00:	2201      	movs	r2, #1
 8010a02:	e7e6      	b.n	80109d2 <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010a04:	8980      	ldrh	r0, [r0, #12]
 8010a06:	0111      	lsls	r1, r2, #4
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d1c1      	bne.n	8010990 <inc_lock+0x18>
	return i + 1;
 8010a0c:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a12:	e7ef      	b.n	80109f4 <inc_lock+0x7c>
 8010a14:	20019d1c 	.word	0x20019d1c

08010a18 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8010a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a1c:	440a      	add	r2, r1
 8010a1e:	460d      	mov	r5, r1
 8010a20:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8010a22:	4f37      	ldr	r7, [pc, #220]	; (8010b00 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8010a24:	42aa      	cmp	r2, r5
 8010a26:	d012      	beq.n	8010a4e <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010a28:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010a2c:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8010a30:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010a34:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010a38:	2919      	cmp	r1, #25
 8010a3a:	d9f3      	bls.n	8010a24 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8010a3c:	2c7f      	cmp	r4, #127	; 0x7f
 8010a3e:	bf88      	it	hi
 8010a40:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8010a44:	2c00      	cmp	r4, #0
 8010a46:	d1ed      	bne.n	8010a24 <pattern_matching+0xc>
 8010a48:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 8010a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8010a4e:	1e1f      	subs	r7, r3, #0
 8010a50:	f896 8000 	ldrb.w	r8, [r6]
 8010a54:	bf18      	it	ne
 8010a56:	2701      	movne	r7, #1
 8010a58:	f1b8 0f00 	cmp.w	r8, #0
 8010a5c:	d100      	bne.n	8010a60 <pattern_matching+0x48>
 8010a5e:	bb8f      	cbnz	r7, 8010ac4 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8010a60:	4c27      	ldr	r4, [pc, #156]	; (8010b00 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8010a62:	4630      	mov	r0, r6
{
 8010a64:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8010a66:	46a9      	mov	r9, r5
 8010a68:	e010      	b.n	8010a8c <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010a6a:	3a20      	subs	r2, #32
 8010a6c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010a6e:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010a72:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010a76:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010a78:	f1bc 0f19 	cmp.w	ip, #25
 8010a7c:	d815      	bhi.n	8010aaa <pattern_matching+0x92>
 8010a7e:	3b20      	subs	r3, #32
 8010a80:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d118      	bne.n	8010ab8 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8010a86:	b1eb      	cbz	r3, 8010ac4 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8010a88:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8010a8c:	2b3f      	cmp	r3, #63	; 0x3f
 8010a8e:	d01c      	beq.n	8010aca <pattern_matching+0xb2>
 8010a90:	2b2a      	cmp	r3, #42	; 0x2a
 8010a92:	d01a      	beq.n	8010aca <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010a94:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010a98:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8010a9a:	2919      	cmp	r1, #25
 8010a9c:	d9e5      	bls.n	8010a6a <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8010a9e:	2a7f      	cmp	r2, #127	; 0x7f
 8010aa0:	d9e5      	bls.n	8010a6e <pattern_matching+0x56>
 8010aa2:	4423      	add	r3, r4
 8010aa4:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 8010aa8:	e7e1      	b.n	8010a6e <pattern_matching+0x56>
 8010aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8010aac:	d9e9      	bls.n	8010a82 <pattern_matching+0x6a>
 8010aae:	4421      	add	r1, r4
 8010ab0:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d0e6      	beq.n	8010a86 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8010ab8:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d0c4      	beq.n	8010a48 <pattern_matching+0x30>
 8010abe:	2f00      	cmp	r7, #0
 8010ac0:	d1cf      	bne.n	8010a62 <pattern_matching+0x4a>
 8010ac2:	e7c1      	b.n	8010a48 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 8010ac4:	2001      	movs	r0, #1
}
 8010ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010aca:	4601      	mov	r1, r0
				nm = nx = 0;
 8010acc:	2300      	movs	r3, #0
 8010ace:	f811 cb01 	ldrb.w	ip, [r1], #1
 8010ad2:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 8010ad4:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8010ad8:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 8010ada:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 8010ade:	bf0c      	ite	eq
 8010ae0:	3201      	addeq	r2, #1
 8010ae2:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 8010ae4:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 8010ae8:	d0f4      	beq.n	8010ad4 <pattern_matching+0xbc>
 8010aea:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8010aee:	d0f1      	beq.n	8010ad4 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8010af0:	4649      	mov	r1, r9
 8010af2:	f7ff ff91 	bl	8010a18 <pattern_matching>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d1e4      	bne.n	8010ac4 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 8010afa:	f899 3000 	ldrb.w	r3, [r9]
 8010afe:	e7db      	b.n	8010ab8 <pattern_matching+0xa0>
 8010b00:	0801ef24 	.word	0x0801ef24

08010b04 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 8010b04:	2300      	movs	r3, #0
{
 8010b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8010b0a:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8010b0e:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010b10:	69c2      	ldr	r2, [r0, #28]
 8010b12:	2a00      	cmp	r2, #0
 8010b14:	d063      	beq.n	8010bde <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8010b16:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8010b18:	4604      	mov	r4, r0
 8010b1a:	460d      	mov	r5, r1
 8010b1c:	3201      	adds	r2, #1
 8010b1e:	d01f      	beq.n	8010b60 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010b20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b24:	8818      	ldrh	r0, [r3, #0]
 8010b26:	2800      	cmp	r0, #0
 8010b28:	d063      	beq.n	8010bf2 <get_fileinfo+0xee>
 8010b2a:	f101 0715 	add.w	r7, r1, #21
 8010b2e:	2601      	movs	r6, #1
 8010b30:	e000      	b.n	8010b34 <get_fileinfo+0x30>
 8010b32:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8010b34:	2100      	movs	r1, #0
 8010b36:	f002 ff5b 	bl	80139f0 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010b3a:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d058      	beq.n	8010bf2 <get_fileinfo+0xee>
 8010b40:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8010b44:	d055      	beq.n	8010bf2 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 8010b46:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010b4a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8010b4e:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 8010b52:	2800      	cmp	r0, #0
 8010b54:	d1ed      	bne.n	8010b32 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 8010b56:	442e      	add	r6, r5
 8010b58:	2300      	movs	r3, #0
 8010b5a:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8010b5c:	7da8      	ldrb	r0, [r5, #22]
 8010b5e:	e000      	b.n	8010b62 <get_fileinfo+0x5e>
 8010b60:	4618      	mov	r0, r3
	i = j = 0;
 8010b62:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 8010b66:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 8010b68:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 8010b6a:	6a21      	ldr	r1, [r4, #32]
 8010b6c:	5c8b      	ldrb	r3, [r1, r2]
 8010b6e:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8010b70:	2b20      	cmp	r3, #32
 8010b72:	d01b      	beq.n	8010bac <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010b74:	2b05      	cmp	r3, #5
 8010b76:	bf08      	it	eq
 8010b78:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8010b7a:	2a09      	cmp	r2, #9
 8010b7c:	d031      	beq.n	8010be2 <get_fileinfo+0xde>
		fno->altname[j] = c;
 8010b7e:	eb05 010c 	add.w	r1, r5, ip
 8010b82:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 8010b84:	b980      	cbnz	r0, 8010ba8 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8010b86:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 8010b8a:	2e19      	cmp	r6, #25
 8010b8c:	d80b      	bhi.n	8010ba6 <get_fileinfo+0xa2>
 8010b8e:	6a26      	ldr	r6, [r4, #32]
 8010b90:	2a08      	cmp	r2, #8
 8010b92:	f896 e00c 	ldrb.w	lr, [r6, #12]
 8010b96:	bf8c      	ite	hi
 8010b98:	2610      	movhi	r6, #16
 8010b9a:	2608      	movls	r6, #8
 8010b9c:	ea1e 0f06 	tst.w	lr, r6
 8010ba0:	d001      	beq.n	8010ba6 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 8010ba2:	3320      	adds	r3, #32
 8010ba4:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 8010ba6:	758b      	strb	r3, [r1, #22]
		j++;
 8010ba8:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 8010bac:	2a0b      	cmp	r2, #11
 8010bae:	d1dc      	bne.n	8010b6a <get_fileinfo+0x66>
		fno->fname[j] = 0;
 8010bb0:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 8010bb4:	b928      	cbnz	r0, 8010bc2 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 8010bb6:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8010bb8:	6a23      	ldr	r3, [r4, #32]
 8010bba:	7b1b      	ldrb	r3, [r3, #12]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	bf08      	it	eq
 8010bc0:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010bc6:	6a23      	ldr	r3, [r4, #32]
 8010bc8:	7adb      	ldrb	r3, [r3, #11]
 8010bca:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 8010bcc:	6a23      	ldr	r3, [r4, #32]
 8010bce:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010bd0:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 8010bd2:	6a23      	ldr	r3, [r4, #32]
 8010bd4:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010bd8:	0c1a      	lsrs	r2, r3, #16
 8010bda:	80eb      	strh	r3, [r5, #6]
 8010bdc:	80aa      	strh	r2, [r5, #4]
}
 8010bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 8010be2:	eb05 010c 	add.w	r1, r5, ip
 8010be6:	b900      	cbnz	r0, 8010bea <get_fileinfo+0xe6>
 8010be8:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 8010bea:	f10c 0c01 	add.w	ip, ip, #1
 8010bee:	724f      	strb	r7, [r1, #9]
 8010bf0:	e7c5      	b.n	8010b7e <get_fileinfo+0x7a>
			i = j = 0;
 8010bf2:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	442e      	add	r6, r5
 8010bf8:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8010bfa:	7da8      	ldrb	r0, [r5, #22]
 8010bfc:	e7b1      	b.n	8010b62 <get_fileinfo+0x5e>
 8010bfe:	bf00      	nop

08010c00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010c00:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010c02:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8010c06:	2300      	movs	r3, #0
{
 8010c08:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010c0a:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010c0c:	70c3      	strb	r3, [r0, #3]
 8010c0e:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010c10:	d00c      	beq.n	8010c2c <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010c12:	460d      	mov	r5, r1
 8010c14:	460a      	mov	r2, r1
 8010c16:	2301      	movs	r3, #1
 8010c18:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8010c1c:	7840      	ldrb	r0, [r0, #1]
 8010c1e:	f7ff fe83 	bl	8010928 <disk_read>
 8010c22:	b110      	cbz	r0, 8010c2a <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010c24:	2004      	movs	r0, #4
			fs->winsect = sector;
 8010c26:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8010c28:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8010c2a:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010c2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010c30:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d11a      	bne.n	8010c6e <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010c38:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8010c3c:	2be9      	cmp	r3, #233	; 0xe9
 8010c3e:	d007      	beq.n	8010c50 <check_fs+0x50>
 8010c40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c42:	4a0d      	ldr	r2, [pc, #52]	; (8010c78 <check_fs+0x78>)
 8010c44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d001      	beq.n	8010c50 <check_fs+0x50>
	return 2;
 8010c4c:	2002      	movs	r0, #2
}
 8010c4e:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8010c50:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010c54:	4a09      	ldr	r2, [pc, #36]	; (8010c7c <check_fs+0x7c>)
 8010c56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d009      	beq.n	8010c72 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 8010c5e:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010c62:	4b07      	ldr	r3, [pc, #28]	; (8010c80 <check_fs+0x80>)
 8010c64:	4298      	cmp	r0, r3
 8010c66:	bf14      	ite	ne
 8010c68:	2002      	movne	r0, #2
 8010c6a:	2000      	moveq	r0, #0
}
 8010c6c:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010c6e:	2003      	movs	r0, #3
}
 8010c70:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010c72:	2000      	movs	r0, #0
}
 8010c74:	bd70      	pop	{r4, r5, r6, pc}
 8010c76:	bf00      	nop
 8010c78:	009000eb 	.word	0x009000eb
 8010c7c:	00544146 	.word	0x00544146
 8010c80:	33544146 	.word	0x33544146

08010c84 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8010c84:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010c86:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8010c88:	b083      	sub	sp, #12
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010c8e:	b973      	cbnz	r3, 8010cae <move_window.part.0+0x2a>
 8010c90:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010c94:	2301      	movs	r3, #1
 8010c96:	462a      	mov	r2, r5
 8010c98:	7860      	ldrb	r0, [r4, #1]
 8010c9a:	f7ff fe45 	bl	8010928 <disk_read>
 8010c9e:	b910      	cbnz	r0, 8010ca6 <move_window.part.0+0x22>
			fs->winsect = sector;
 8010ca0:	6325      	str	r5, [r4, #48]	; 0x30
}
 8010ca2:	b003      	add	sp, #12
 8010ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 8010ca6:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010ca8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8010cac:	e7f8      	b.n	8010ca0 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 8010cae:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010cb0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8010cb4:	2301      	movs	r3, #1
 8010cb6:	7840      	ldrb	r0, [r0, #1]
 8010cb8:	4632      	mov	r2, r6
 8010cba:	9101      	str	r1, [sp, #4]
 8010cbc:	f7ff fe42 	bl	8010944 <disk_write>
 8010cc0:	b9b8      	cbnz	r0, 8010cf2 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010cc2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010cc4:	69e3      	ldr	r3, [r4, #28]
 8010cc6:	1ab2      	subs	r2, r6, r2
 8010cc8:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 8010cca:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d2e1      	bcs.n	8010c94 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010cd0:	78a7      	ldrb	r7, [r4, #2]
 8010cd2:	2f01      	cmp	r7, #1
 8010cd4:	d801      	bhi.n	8010cda <move_window.part.0+0x56>
 8010cd6:	e7dd      	b.n	8010c94 <move_window.part.0+0x10>
					wsect += fs->fsize;
 8010cd8:	69e3      	ldr	r3, [r4, #28]
 8010cda:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010cdc:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8010cde:	2301      	movs	r3, #1
 8010ce0:	7860      	ldrb	r0, [r4, #1]
 8010ce2:	4632      	mov	r2, r6
 8010ce4:	9101      	str	r1, [sp, #4]
 8010ce6:	f7ff fe2d 	bl	8010944 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010cea:	2f01      	cmp	r7, #1
 8010cec:	9901      	ldr	r1, [sp, #4]
 8010cee:	d1f3      	bne.n	8010cd8 <move_window.part.0+0x54>
 8010cf0:	e7d0      	b.n	8010c94 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8010cf2:	2001      	movs	r0, #1
}
 8010cf4:	b003      	add	sp, #12
 8010cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010cf8 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010cf8:	2300      	movs	r3, #0
{
 8010cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8010cfe:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8010d00:	6804      	ldr	r4, [r0, #0]
 8010d02:	b18c      	cbz	r4, 8010d28 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010d04:	7825      	ldrb	r5, [r4, #0]
 8010d06:	2d1f      	cmp	r5, #31
 8010d08:	d912      	bls.n	8010d30 <find_volume+0x38>
 8010d0a:	2d3a      	cmp	r5, #58	; 0x3a
 8010d0c:	d010      	beq.n	8010d30 <find_volume+0x38>
 8010d0e:	46a4      	mov	ip, r4
 8010d10:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010d14:	2b1f      	cmp	r3, #31
 8010d16:	d90d      	bls.n	8010d34 <find_volume+0x3c>
 8010d18:	2b3a      	cmp	r3, #58	; 0x3a
 8010d1a:	d1f9      	bne.n	8010d10 <find_volume+0x18>
			i = *tp++ - '0';
 8010d1c:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010d1e:	45a4      	cmp	ip, r4
 8010d20:	d102      	bne.n	8010d28 <find_volume+0x30>
 8010d22:	2d30      	cmp	r5, #48	; 0x30
 8010d24:	f000 80da 	beq.w	8010edc <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8010d28:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010d30:	462b      	mov	r3, r5
 8010d32:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010d34:	2b3a      	cmp	r3, #58	; 0x3a
 8010d36:	d0f1      	beq.n	8010d1c <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010d38:	4ba6      	ldr	r3, [pc, #664]	; (8010fd4 <find_volume+0x2dc>)
 8010d3a:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010d3c:	2d00      	cmp	r5, #0
 8010d3e:	f000 80c9 	beq.w	8010ed4 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 8010d42:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010d44:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010d48:	782b      	ldrb	r3, [r5, #0]
 8010d4a:	b17b      	cbz	r3, 8010d6c <find_volume+0x74>
		stat = disk_status(fs->drv);
 8010d4c:	7868      	ldrb	r0, [r5, #1]
 8010d4e:	f7ff fdcf 	bl	80108f0 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010d52:	07c1      	lsls	r1, r0, #31
 8010d54:	d40a      	bmi.n	8010d6c <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010d56:	2c00      	cmp	r4, #0
 8010d58:	f000 80ab 	beq.w	8010eb2 <find_volume+0x1ba>
 8010d5c:	f010 0404 	ands.w	r4, r0, #4
 8010d60:	f000 80a7 	beq.w	8010eb2 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 8010d64:	240a      	movs	r4, #10
}
 8010d66:	4620      	mov	r0, r4
 8010d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8010d6c:	2000      	movs	r0, #0
 8010d6e:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010d70:	f7ff fdc8 	bl	8010904 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010d74:	07c2      	lsls	r2, r0, #31
 8010d76:	f100 809f 	bmi.w	8010eb8 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010d7a:	b10c      	cbz	r4, 8010d80 <find_volume+0x88>
 8010d7c:	0743      	lsls	r3, r0, #29
 8010d7e:	d4f1      	bmi.n	8010d64 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010d80:	2100      	movs	r1, #0
 8010d82:	4628      	mov	r0, r5
 8010d84:	f7ff ff3c 	bl	8010c00 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010d88:	2802      	cmp	r0, #2
 8010d8a:	d077      	beq.n	8010e7c <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010d8c:	2804      	cmp	r0, #4
 8010d8e:	f000 809f 	beq.w	8010ed0 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010d92:	2801      	cmp	r0, #1
 8010d94:	f200 808c 	bhi.w	8010eb0 <find_volume+0x1b8>
	bsect = 0;
 8010d98:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010d9a:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 8010d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010da2:	f040 8085 	bne.w	8010eb0 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010da6:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010daa:	b902      	cbnz	r2, 8010dae <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 8010dac:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010dae:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 8010db2:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010db4:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010db6:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010db8:	2901      	cmp	r1, #1
 8010dba:	d879      	bhi.n	8010eb0 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010dbc:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 8010dc0:	b288      	uxth	r0, r1
 8010dc2:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010dc4:	2800      	cmp	r0, #0
 8010dc6:	d073      	beq.n	8010eb0 <find_volume+0x1b8>
 8010dc8:	1e48      	subs	r0, r1, #1
 8010dca:	4208      	tst	r0, r1
 8010dcc:	d170      	bne.n	8010eb0 <find_volume+0x1b8>
	rv = ptr[1];
 8010dce:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010dd2:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010dd6:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010dda:	d169      	bne.n	8010eb0 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010ddc:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010de0:	b900      	cbnz	r0, 8010de4 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 8010de2:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
 8010de4:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010de8:	2f00      	cmp	r7, #0
 8010dea:	d061      	beq.n	8010eb0 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010dec:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010df0:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 8010df4:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010df6:	42b0      	cmp	r0, r6
 8010df8:	d35a      	bcc.n	8010eb0 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010dfa:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010dfe:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010e00:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010e04:	d354      	bcc.n	8010eb0 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010e06:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8010e0a:	4288      	cmp	r0, r1
 8010e0c:	f200 8084 	bhi.w	8010f18 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010e10:	f640 71f5 	movw	r1, #4085	; 0xff5
 8010e14:	4288      	cmp	r0, r1
 8010e16:	f200 80a3 	bhi.w	8010f60 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010e1a:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010e1c:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 8010e1e:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 8010e20:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010e22:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8010e24:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010e26:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010e28:	f1bc 0f00 	cmp.w	ip, #0
 8010e2c:	d040      	beq.n	8010eb0 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010e2e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8010e32:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010e36:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010e38:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 8010e3c:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010e3e:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010e40:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8010e44:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 8010e48:	d332      	bcc.n	8010eb0 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 8010e4e:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010e50:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 8010e54:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8010e56:	4960      	ldr	r1, [pc, #384]	; (8010fd8 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8010e58:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010e5a:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010e5c:	485f      	ldr	r0, [pc, #380]	; (8010fdc <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010e5e:	4a60      	ldr	r2, [pc, #384]	; (8010fe0 <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
 8010e60:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010e62:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010e64:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010e66:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010e68:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 8010e6a:	800b      	strh	r3, [r1, #0]
 8010e6c:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010e6e:	f000 8086 	beq.w	8010f7e <find_volume+0x286>
 8010e72:	6913      	ldr	r3, [r2, #16]
 8010e74:	429d      	cmp	r5, r3
 8010e76:	d06f      	beq.n	8010f58 <find_volume+0x260>
	return FR_OK;
 8010e78:	2400      	movs	r4, #0
 8010e7a:	e01a      	b.n	8010eb2 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010e7c:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 8010e80:	b10e      	cbz	r6, 8010e86 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 8010e82:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010e86:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 8010e8a:	b10c      	cbz	r4, 8010e90 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 8010e8c:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010e90:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 8010e94:	b303      	cbz	r3, 8010ed8 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 8010e96:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010e9a:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 8010e9e:	b10f      	cbz	r7, 8010ea4 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 8010ea0:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010ea4:	b9f6      	cbnz	r6, 8010ee4 <find_volume+0x1ec>
 8010ea6:	bb2c      	cbnz	r4, 8010ef4 <find_volume+0x1fc>
 8010ea8:	f1b8 0f00 	cmp.w	r8, #0
 8010eac:	d12c      	bne.n	8010f08 <find_volume+0x210>
 8010eae:	b93f      	cbnz	r7, 8010ec0 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010eb0:	240d      	movs	r4, #13
}
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010eb8:	2403      	movs	r4, #3
}
 8010eba:	4620      	mov	r0, r4
 8010ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010ec0:	4639      	mov	r1, r7
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f7ff fe9c 	bl	8010c00 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010ec8:	2801      	cmp	r0, #1
 8010eca:	d95b      	bls.n	8010f84 <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010ecc:	2804      	cmp	r0, #4
 8010ece:	d1ef      	bne.n	8010eb0 <find_volume+0x1b8>
 8010ed0:	2401      	movs	r4, #1
 8010ed2:	e7ee      	b.n	8010eb2 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010ed4:	240c      	movs	r4, #12
 8010ed6:	e7ec      	b.n	8010eb2 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010ed8:	4698      	mov	r8, r3
 8010eda:	e7de      	b.n	8010e9a <find_volume+0x1a2>
					*path = ++tt;
 8010edc:	f10c 0301 	add.w	r3, ip, #1
 8010ee0:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010ee2:	e729      	b.n	8010d38 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010ee4:	4631      	mov	r1, r6
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f7ff fe8a 	bl	8010c00 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010eec:	2801      	cmp	r0, #1
 8010eee:	d8da      	bhi.n	8010ea6 <find_volume+0x1ae>
 8010ef0:	4634      	mov	r4, r6
 8010ef2:	e752      	b.n	8010d9a <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010ef4:	4621      	mov	r1, r4
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	f7ff fe82 	bl	8010c00 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010efc:	2801      	cmp	r0, #1
 8010efe:	f67f af4c 	bls.w	8010d9a <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010f02:	f1b8 0f00 	cmp.w	r8, #0
 8010f06:	d0d2      	beq.n	8010eae <find_volume+0x1b6>
 8010f08:	4641      	mov	r1, r8
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f7ff fe78 	bl	8010c00 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010f10:	2801      	cmp	r0, #1
 8010f12:	d8cc      	bhi.n	8010eae <find_volume+0x1b6>
 8010f14:	4644      	mov	r4, r8
 8010f16:	e740      	b.n	8010d9a <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
 8010f18:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010f1c:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010f1e:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 8010f20:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010f22:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010f26:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010f28:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010f2a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8010f2c:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010f2e:	d1bf      	bne.n	8010eb0 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010f30:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 8010f32:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010f34:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010f38:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010f3a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 8010f3e:	d3b7      	bcc.n	8010eb0 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010f40:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010f44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 8010f48:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010f4a:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 8010f4c:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010f4e:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010f52:	d019      	beq.n	8010f88 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010f54:	2003      	movs	r0, #3
 8010f56:	e77e      	b.n	8010e56 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010f58:	2300      	movs	r3, #0
	return FR_OK;
 8010f5a:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010f5c:	6113      	str	r3, [r2, #16]
 8010f5e:	e7a8      	b.n	8010eb2 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010f60:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010f62:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 8010f64:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 8010f66:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010f68:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8010f6a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010f6c:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010f6e:	f1bc 0f00 	cmp.w	ip, #0
 8010f72:	d09d      	beq.n	8010eb0 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010f74:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010f76:	0049      	lsls	r1, r1, #1
 8010f78:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010f7a:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010f7c:	e760      	b.n	8010e40 <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010f7e:	2300      	movs	r3, #0
 8010f80:	6013      	str	r3, [r2, #0]
 8010f82:	e776      	b.n	8010e72 <find_volume+0x17a>
 8010f84:	463c      	mov	r4, r7
 8010f86:	e708      	b.n	8010d9a <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010f88:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010f8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010f8c:	4299      	cmp	r1, r3
 8010f8e:	d004      	beq.n	8010f9a <find_volume+0x2a2>
 8010f90:	4628      	mov	r0, r5
 8010f92:	f7ff fe77 	bl	8010c84 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d1dc      	bne.n	8010f54 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010f9a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010f9e:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 8010fa2:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010fa4:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 8010fa6:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010fa8:	d1d4      	bne.n	8010f54 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8010faa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010fac:	4b0d      	ldr	r3, [pc, #52]	; (8010fe4 <find_volume+0x2ec>)
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d1d0      	bne.n	8010f54 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010fb2:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8010fb6:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010fba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8010fbe:	3320      	adds	r3, #32
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d1c7      	bne.n	8010f54 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8010fc4:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010fc8:	2003      	movs	r0, #3
 8010fca:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 8010fce:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8010fd2:	e740      	b.n	8010e56 <find_volume+0x15e>
 8010fd4:	20019d18 	.word	0x20019d18
 8010fd8:	20019d3c 	.word	0x20019d3c
 8010fdc:	20019d40 	.word	0x20019d40
 8010fe0:	20019d1c 	.word	0x20019d1c
 8010fe4:	41615252 	.word	0x41615252

08010fe8 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8010fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 8010fec:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8010fee:	4604      	mov	r4, r0
 8010ff0:	460d      	mov	r5, r1
 8010ff2:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8010ff4:	2b02      	cmp	r3, #2
 8010ff6:	d006      	beq.n	8011006 <put_fat.part.0+0x1e>
 8010ff8:	2b03      	cmp	r3, #3
 8010ffa:	d052      	beq.n	80110a2 <put_fat.part.0+0xba>
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d01b      	beq.n	8011038 <put_fat.part.0+0x50>
 8011000:	2002      	movs	r0, #2
}
 8011002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011006:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011008:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801100a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801100e:	4299      	cmp	r1, r3
 8011010:	d003      	beq.n	801101a <put_fat.part.0+0x32>
 8011012:	f7ff fe37 	bl	8010c84 <move_window.part.0>
			if (res != FR_OK) break;
 8011016:	2800      	cmp	r0, #0
 8011018:	d1f3      	bne.n	8011002 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801101a:	006d      	lsls	r5, r5, #1
 801101c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8011020:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
 8011024:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011026:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 801102a:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801102c:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
 801102e:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8011030:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 8011032:	70e3      	strb	r3, [r4, #3]
}
 8011034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 8011038:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801103c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801103e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011040:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011044:	4299      	cmp	r1, r3
 8011046:	d003      	beq.n	8011050 <put_fat.part.0+0x68>
 8011048:	f7ff fe1c 	bl	8010c84 <move_window.part.0>
			if (res != FR_OK) break;
 801104c:	2800      	cmp	r0, #0
 801104e:	d1d8      	bne.n	8011002 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011050:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 8011052:	f107 0801 	add.w	r8, r7, #1
 8011056:	f104 0934 	add.w	r9, r4, #52	; 0x34
 801105a:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801105e:	d542      	bpl.n	80110e6 <put_fat.part.0+0xfe>
 8011060:	f819 3007 	ldrb.w	r3, [r9, r7]
 8011064:	f003 030f 	and.w	r3, r3, #15
 8011068:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 801106c:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
 8011070:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011072:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8011074:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011076:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801107a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801107c:	4299      	cmp	r1, r3
 801107e:	d004      	beq.n	801108a <put_fat.part.0+0xa2>
 8011080:	4620      	mov	r0, r4
 8011082:	f7ff fdff 	bl	8010c84 <move_window.part.0>
			if (res != FR_OK) break;
 8011086:	2800      	cmp	r0, #0
 8011088:	d1bb      	bne.n	8011002 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 801108a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801108e:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 8011092:	44c8      	add	r8, r9
			fs->wflag = 1;
 8011094:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011096:	f888 2000 	strb.w	r2, [r8]
			break;
 801109a:	2000      	movs	r0, #0
			fs->wflag = 1;
 801109c:	70e3      	strb	r3, [r4, #3]
}
 801109e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80110a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80110a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80110a6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80110aa:	4299      	cmp	r1, r3
 80110ac:	d003      	beq.n	80110b6 <put_fat.part.0+0xce>
 80110ae:	f7ff fde9 	bl	8010c84 <move_window.part.0>
			if (res != FR_OK) break;
 80110b2:	2800      	cmp	r0, #0
 80110b4:	d1a5      	bne.n	8011002 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80110b6:	00ad      	lsls	r5, r5, #2
 80110b8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80110bc:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 80110c0:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80110c4:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80110c6:	1941      	adds	r1, r0, r5
 80110c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80110cc:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
 80110ce:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80110d0:	5542      	strb	r2, [r0, r5]
 80110d2:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80110d4:	708b      	strb	r3, [r1, #2]
 80110d6:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
 80110d8:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80110da:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
 80110dc:	70ca      	strb	r2, [r1, #3]
			break;
 80110de:	2000      	movs	r0, #0
			fs->wflag = 1;
 80110e0:	70e3      	strb	r3, [r4, #3]
}
 80110e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80110e6:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 80110ea:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80110ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 80110ee:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80110f0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80110f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80110f6:	4299      	cmp	r1, r3
 80110f8:	d005      	beq.n	8011106 <put_fat.part.0+0x11e>
 80110fa:	4620      	mov	r0, r4
 80110fc:	f7ff fdc2 	bl	8010c84 <move_window.part.0>
			if (res != FR_OK) break;
 8011100:	2800      	cmp	r0, #0
 8011102:	f47f af7e 	bne.w	8011002 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8011106:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801110a:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 801110e:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011110:	f898 3000 	ldrb.w	r3, [r8]
 8011114:	f023 060f 	bic.w	r6, r3, #15
 8011118:	4332      	orrs	r2, r6
 801111a:	e7bb      	b.n	8011094 <put_fat.part.0+0xac>

0801111c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801111c:	2901      	cmp	r1, #1
 801111e:	d90e      	bls.n	801113e <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8011120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011122:	6983      	ldr	r3, [r0, #24]
 8011124:	460c      	mov	r4, r1
 8011126:	4605      	mov	r5, r0
 8011128:	4299      	cmp	r1, r3
 801112a:	d206      	bcs.n	801113a <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 801112c:	7803      	ldrb	r3, [r0, #0]
 801112e:	2b02      	cmp	r3, #2
 8011130:	d03e      	beq.n	80111b0 <get_fat.isra.0+0x94>
 8011132:	2b03      	cmp	r3, #3
 8011134:	d02b      	beq.n	801118e <get_fat.isra.0+0x72>
 8011136:	2b01      	cmp	r3, #1
 8011138:	d003      	beq.n	8011142 <get_fat.isra.0+0x26>
 801113a:	2001      	movs	r0, #1
}
 801113c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 801113e:	2001      	movs	r0, #1
}
 8011140:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 8011142:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011146:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011148:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801114a:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801114e:	4291      	cmp	r1, r2
 8011150:	d004      	beq.n	801115c <get_fat.isra.0+0x40>
 8011152:	f7ff fd97 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011156:	bba0      	cbnz	r0, 80111c2 <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011158:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801115a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 801115c:	1c77      	adds	r7, r6, #1
 801115e:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011162:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8011166:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011168:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 801116a:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801116e:	d003      	beq.n	8011178 <get_fat.isra.0+0x5c>
 8011170:	4628      	mov	r0, r5
 8011172:	f7ff fd87 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011176:	bb20      	cbnz	r0, 80111c2 <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011178:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801117c:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 801117e:	443d      	add	r5, r7
 8011180:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8011184:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011188:	d524      	bpl.n	80111d4 <get_fat.isra.0+0xb8>
 801118a:	0900      	lsrs	r0, r0, #4
}
 801118c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801118e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011190:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011192:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011196:	4299      	cmp	r1, r3
 8011198:	d002      	beq.n	80111a0 <get_fat.isra.0+0x84>
 801119a:	f7ff fd73 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801119e:	b980      	cbnz	r0, 80111c2 <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80111a0:	00a4      	lsls	r4, r4, #2
 80111a2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80111a6:	4425      	add	r5, r4
 80111a8:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80111aa:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 80111ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80111b0:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80111b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80111b4:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80111b8:	4299      	cmp	r1, r3
 80111ba:	d005      	beq.n	80111c8 <get_fat.isra.0+0xac>
 80111bc:	f7ff fd62 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80111c0:	b110      	cbz	r0, 80111c8 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80111c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80111c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80111c8:	0064      	lsls	r4, r4, #1
 80111ca:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80111ce:	4425      	add	r5, r4
 80111d0:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 80111d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80111d4:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 80111d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111da:	bf00      	nop

080111dc <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 80111dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80111e0:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80111e2:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80111e4:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80111e6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80111ea:	d22d      	bcs.n	8011248 <dir_next.constprop.0+0x6c>
 80111ec:	b363      	cbz	r3, 8011248 <dir_next.constprop.0+0x6c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80111ee:	f3c5 0708 	ubfx	r7, r5, #0, #9
 80111f2:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80111f4:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80111f6:	b137      	cbz	r7, 8011206 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80111f8:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 80111fa:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 80111fc:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80111fe:	443e      	add	r6, r7
 8011200:	6226      	str	r6, [r4, #32]
}
 8011202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8011206:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8011208:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 801120a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 801120c:	b1f9      	cbz	r1, 801124e <dir_next.constprop.0+0x72>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801120e:	8973      	ldrh	r3, [r6, #10]
 8011210:	3b01      	subs	r3, #1
 8011212:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8011216:	d1ef      	bne.n	80111f8 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011218:	4630      	mov	r0, r6
 801121a:	f7ff ff7f 	bl	801111c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801121e:	2801      	cmp	r0, #1
 8011220:	d91d      	bls.n	801125e <dir_next.constprop.0+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011222:	1c43      	adds	r3, r0, #1
 8011224:	d01d      	beq.n	8011262 <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011226:	69b3      	ldr	r3, [r6, #24]
 8011228:	4298      	cmp	r0, r3
 801122a:	d214      	bcs.n	8011256 <dir_next.constprop.0+0x7a>
				dp->clust = clst;		/* Initialize data for new cluster */
 801122c:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 801122e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011230:	69b3      	ldr	r3, [r6, #24]
 8011232:	3b02      	subs	r3, #2
 8011234:	4298      	cmp	r0, r3
 8011236:	d204      	bcs.n	8011242 <dir_next.constprop.0+0x66>
	return clst * fs->csize + fs->database;
 8011238:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 801123c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 801123e:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 8011242:	f8c4 801c 	str.w	r8, [r4, #28]
 8011246:	e7d7      	b.n	80111f8 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011248:	2004      	movs	r0, #4
}
 801124a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801124e:	8933      	ldrh	r3, [r6, #8]
 8011250:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8011254:	d8d0      	bhi.n	80111f8 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 8011256:	2300      	movs	r3, #0
 8011258:	2004      	movs	r0, #4
 801125a:	61e3      	str	r3, [r4, #28]
 801125c:	e7d1      	b.n	8011202 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801125e:	2002      	movs	r0, #2
 8011260:	e7cf      	b.n	8011202 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011262:	2001      	movs	r0, #1
 8011264:	e7cd      	b.n	8011202 <dir_next.constprop.0+0x26>
 8011266:	bf00      	nop

08011268 <dir_read>:
{
 8011268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 801126c:	69c6      	ldr	r6, [r0, #28]
{
 801126e:	b083      	sub	sp, #12
 8011270:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8011272:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 8011274:	2e00      	cmp	r6, #0
 8011276:	d064      	beq.n	8011342 <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 8011278:	23ff      	movs	r3, #255	; 0xff
 801127a:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801127c:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 8011280:	4698      	mov	r8, r3
 8011282:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011284:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8011286:	42b5      	cmp	r5, r6
 8011288:	d014      	beq.n	80112b4 <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801128a:	78fb      	ldrb	r3, [r7, #3]
 801128c:	2b00      	cmp	r3, #0
 801128e:	f040 80d2 	bne.w	8011436 <dir_read+0x1ce>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011292:	2301      	movs	r3, #1
 8011294:	4632      	mov	r2, r6
 8011296:	4649      	mov	r1, r9
 8011298:	7878      	ldrb	r0, [r7, #1]
 801129a:	f7ff fb45 	bl	8010928 <disk_read>
 801129e:	b140      	cbz	r0, 80112b2 <dir_read+0x4a>
			fs->winsect = sector;
 80112a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80112a4:	2001      	movs	r0, #1
			fs->winsect = sector;
 80112a6:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80112a8:	2300      	movs	r3, #0
 80112aa:	61e3      	str	r3, [r4, #28]
}
 80112ac:	b003      	add	sp, #12
 80112ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80112b2:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80112b4:	6a21      	ldr	r1, [r4, #32]
 80112b6:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 80112b8:	2a00      	cmp	r2, #0
 80112ba:	d042      	beq.n	8011342 <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80112bc:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80112be:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80112c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80112c4:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80112c6:	d00a      	beq.n	80112de <dir_read+0x76>
 80112c8:	2a2e      	cmp	r2, #46	; 0x2e
 80112ca:	d008      	beq.n	80112de <dir_read+0x76>
 80112cc:	f023 0020 	bic.w	r0, r3, #32
 80112d0:	f1a0 0008 	sub.w	r0, r0, #8
 80112d4:	fab0 f080 	clz	r0, r0
 80112d8:	0940      	lsrs	r0, r0, #5
 80112da:	4550      	cmp	r0, sl
 80112dc:	d038      	beq.n	8011350 <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80112de:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80112e2:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80112e4:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80112e6:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80112e8:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 80112ec:	d229      	bcs.n	8011342 <dir_read+0xda>
 80112ee:	b346      	cbz	r6, 8011342 <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80112f0:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 80112f4:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80112f6:	bb32      	cbnz	r2, 8011346 <dir_read+0xde>
		dp->sect++;				/* Next sector */
 80112f8:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 80112fa:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 80112fc:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 80112fe:	b961      	cbnz	r1, 801131a <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011300:	891a      	ldrh	r2, [r3, #8]
 8011302:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8011306:	d91c      	bls.n	8011342 <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011308:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 801130a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801130c:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 801130e:	2e00      	cmp	r6, #0
 8011310:	d1b8      	bne.n	8011284 <dir_read+0x1c>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011312:	2000      	movs	r0, #0
}
 8011314:	b003      	add	sp, #12
 8011316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801131a:	895a      	ldrh	r2, [r3, #10]
 801131c:	3a01      	subs	r2, #1
 801131e:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 8011322:	d1f1      	bne.n	8011308 <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011324:	4618      	mov	r0, r3
 8011326:	9301      	str	r3, [sp, #4]
 8011328:	f7ff fef8 	bl	801111c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801132c:	2801      	cmp	r0, #1
 801132e:	f240 80b6 	bls.w	801149e <dir_read+0x236>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011332:	1c43      	adds	r3, r0, #1
 8011334:	f000 8086 	beq.w	8011444 <dir_read+0x1dc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011338:	9b01      	ldr	r3, [sp, #4]
 801133a:	699a      	ldr	r2, [r3, #24]
 801133c:	4290      	cmp	r0, r2
 801133e:	f0c0 80a2 	bcc.w	8011486 <dir_read+0x21e>
	FRESULT res = FR_NO_FILE;
 8011342:	2004      	movs	r0, #4
 8011344:	e7b0      	b.n	80112a8 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011346:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8011348:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801134a:	441a      	add	r2, r3
 801134c:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 801134e:	e799      	b.n	8011284 <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011350:	2b0f      	cmp	r3, #15
 8011352:	f040 80ac 	bne.w	80114ae <dir_read+0x246>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011356:	0650      	lsls	r0, r2, #25
 8011358:	d576      	bpl.n	8011448 <dir_read+0x1e0>
						sum = dp->dir[LDIR_Chksum];
 801135a:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 801135c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8011360:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 8011362:	6963      	ldr	r3, [r4, #20]
 8011364:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011366:	7b4b      	ldrb	r3, [r1, #13]
 8011368:	9800      	ldr	r0, [sp, #0]
 801136a:	4283      	cmp	r3, r0
 801136c:	d1b7      	bne.n	80112de <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 801136e:	8b4b      	ldrh	r3, [r1, #26]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1b4      	bne.n	80112de <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011374:	780b      	ldrb	r3, [r1, #0]
 8011376:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 801137a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801137e:	3b01      	subs	r3, #1
 8011380:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8011384:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011388:	2bfe      	cmp	r3, #254	; 0xfe
 801138a:	d8a8      	bhi.n	80112de <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801138c:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 801138e:	f103 0801 	add.w	r8, r3, #1
 8011392:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 8011396:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 801139a:	2800      	cmp	r0, #0
 801139c:	f040 8090 	bne.w	80114c0 <dir_read+0x258>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80113a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113a4:	429e      	cmp	r6, r3
 80113a6:	d19a      	bne.n	80112de <dir_read+0x76>
	rv = ptr[1];
 80113a8:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80113ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113b0:	459e      	cmp	lr, r3
 80113b2:	d194      	bne.n	80112de <dir_read+0x76>
	rv = ptr[1];
 80113b4:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80113b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113bc:	459c      	cmp	ip, r3
 80113be:	d18e      	bne.n	80112de <dir_read+0x76>
	rv = ptr[1];
 80113c0:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80113c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113c8:	429e      	cmp	r6, r3
 80113ca:	d188      	bne.n	80112de <dir_read+0x76>
	rv = ptr[1];
 80113cc:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80113d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113d4:	459c      	cmp	ip, r3
 80113d6:	d182      	bne.n	80112de <dir_read+0x76>
	rv = ptr[1];
 80113d8:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80113dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113e0:	459e      	cmp	lr, r3
 80113e2:	f47f af7c 	bne.w	80112de <dir_read+0x76>
	rv = ptr[1];
 80113e6:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80113e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113ec:	429e      	cmp	r6, r3
 80113ee:	f47f af76 	bne.w	80112de <dir_read+0x76>
	rv = ptr[1];
 80113f2:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80113f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113fa:	459c      	cmp	ip, r3
 80113fc:	f47f af6f 	bne.w	80112de <dir_read+0x76>
	rv = ptr[1];
 8011400:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011406:	429e      	cmp	r6, r3
 8011408:	f47f af69 	bne.w	80112de <dir_read+0x76>
	rv = ptr[1];
 801140c:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011414:	459c      	cmp	ip, r3
 8011416:	f47f af62 	bne.w	80112de <dir_read+0x76>
	rv = ptr[1];
 801141a:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801141c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011420:	429e      	cmp	r6, r3
 8011422:	f47f af5c 	bne.w	80112de <dir_read+0x76>
	rv = ptr[1];
 8011426:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801142a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801142e:	459c      	cmp	ip, r3
 8011430:	f000 80df 	beq.w	80115f2 <dir_read+0x38a>
 8011434:	e753      	b.n	80112de <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011436:	2301      	movs	r3, #1
 8011438:	462a      	mov	r2, r5
 801143a:	4649      	mov	r1, r9
 801143c:	7878      	ldrb	r0, [r7, #1]
 801143e:	f7ff fa81 	bl	8010944 <disk_write>
 8011442:	b128      	cbz	r0, 8011450 <dir_read+0x1e8>
	FRESULT res = FR_NO_FILE;
 8011444:	2001      	movs	r0, #1
 8011446:	e72f      	b.n	80112a8 <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011448:	4590      	cmp	r8, r2
 801144a:	f47f af48 	bne.w	80112de <dir_read+0x76>
 801144e:	e78a      	b.n	8011366 <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 8011452:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011454:	1aea      	subs	r2, r5, r3
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	429a      	cmp	r2, r3
 801145a:	f4bf af1a 	bcs.w	8011292 <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801145e:	f897 b002 	ldrb.w	fp, [r7, #2]
 8011462:	f1bb 0f01 	cmp.w	fp, #1
 8011466:	d801      	bhi.n	801146c <dir_read+0x204>
 8011468:	e713      	b.n	8011292 <dir_read+0x2a>
					wsect += fs->fsize;
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801146e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 8011472:	2301      	movs	r3, #1
 8011474:	4649      	mov	r1, r9
 8011476:	462a      	mov	r2, r5
 8011478:	7878      	ldrb	r0, [r7, #1]
 801147a:	f7ff fa63 	bl	8010944 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801147e:	f1bb 0f01 	cmp.w	fp, #1
 8011482:	d1f2      	bne.n	801146a <dir_read+0x202>
 8011484:	e705      	b.n	8011292 <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 8011486:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8011488:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801148a:	699a      	ldr	r2, [r3, #24]
 801148c:	3a02      	subs	r2, #2
 801148e:	4290      	cmp	r0, r2
 8011490:	d207      	bcs.n	80114a2 <dir_read+0x23a>
	return clst * fs->csize + fs->database;
 8011492:	895a      	ldrh	r2, [r3, #10]
 8011494:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8011496:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 801149a:	61e6      	str	r6, [r4, #28]
 801149c:	e734      	b.n	8011308 <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801149e:	2002      	movs	r0, #2
 80114a0:	e702      	b.n	80112a8 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80114a2:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 80114a4:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 80114a8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80114aa:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 80114ac:	e731      	b.n	8011312 <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80114ae:	f1b8 0f00 	cmp.w	r8, #0
 80114b2:	f000 80ac 	beq.w	801160e <dir_read+0x3a6>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80114b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114ba:	2000      	movs	r0, #0
 80114bc:	6323      	str	r3, [r4, #48]	; 0x30
 80114be:	e6f5      	b.n	80112ac <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80114c0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80114c4:	f43f af0d 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80114c8:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 80114cc:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80114d0:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 80114d4:	f103 0802 	add.w	r8, r3, #2
		if (wc) {
 80114d8:	2e00      	cmp	r6, #0
 80114da:	f43f af67 	beq.w	80113ac <dir_read+0x144>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80114de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80114e2:	f43f aefe 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80114e6:	4428      	add	r0, r5
 80114e8:	f103 0803 	add.w	r8, r3, #3
 80114ec:	f8a0 e002 	strh.w	lr, [r0, #2]
 80114f0:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 80114f4:	f1be 0f00 	cmp.w	lr, #0
 80114f8:	f43f af5e 	beq.w	80113b8 <dir_read+0x150>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80114fc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011500:	f43f aeef 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011504:	f8a0 c004 	strh.w	ip, [r0, #4]
 8011508:	f103 0804 	add.w	r8, r3, #4
	rv = ptr[1];
 801150c:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 8011510:	f1bc 0f00 	cmp.w	ip, #0
 8011514:	f43f af56 	beq.w	80113c4 <dir_read+0x15c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011518:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801151c:	f43f aee1 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011520:	80c6      	strh	r6, [r0, #6]
 8011522:	f103 0805 	add.w	r8, r3, #5
	rv = ptr[1];
 8011526:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 801152a:	2e00      	cmp	r6, #0
 801152c:	f43f af50 	beq.w	80113d0 <dir_read+0x168>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011530:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011534:	f43f aed5 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011538:	f8a0 c008 	strh.w	ip, [r0, #8]
 801153c:	f103 0806 	add.w	r8, r3, #6
	rv = ptr[1];
 8011540:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 8011544:	f1bc 0f00 	cmp.w	ip, #0
 8011548:	f43f af48 	beq.w	80113dc <dir_read+0x174>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801154c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011550:	f43f aec7 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011554:	f8a0 e00a 	strh.w	lr, [r0, #10]
 8011558:	f103 0807 	add.w	r8, r3, #7
	rv = ptr[1];
 801155c:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 801155e:	f1be 0f00 	cmp.w	lr, #0
 8011562:	f43f af41 	beq.w	80113e8 <dir_read+0x180>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011566:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801156a:	f43f aeba 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801156e:	8186      	strh	r6, [r0, #12]
 8011570:	f103 0808 	add.w	r8, r3, #8
	rv = ptr[1];
 8011574:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 8011578:	2e00      	cmp	r6, #0
 801157a:	f43f af3c 	beq.w	80113f6 <dir_read+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801157e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011582:	f43f aeae 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011586:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801158a:	f103 0809 	add.w	r8, r3, #9
	rv = ptr[1];
 801158e:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 8011590:	f1bc 0f00 	cmp.w	ip, #0
 8011594:	f43f af35 	beq.w	8011402 <dir_read+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011598:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801159c:	f43f aea1 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80115a0:	8206      	strh	r6, [r0, #16]
 80115a2:	f103 080a 	add.w	r8, r3, #10
	rv = ptr[1];
 80115a6:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 80115aa:	2e00      	cmp	r6, #0
 80115ac:	f43f af30 	beq.w	8011410 <dir_read+0x1a8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80115b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80115b4:	f43f ae95 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80115b8:	f8a0 c012 	strh.w	ip, [r0, #18]
 80115bc:	f103 080b 	add.w	r8, r3, #11
	rv = ptr[1];
 80115c0:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 80115c2:	f1bc 0f00 	cmp.w	ip, #0
 80115c6:	f43f af29 	beq.w	801141c <dir_read+0x1b4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80115ca:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80115ce:	f43f ae88 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80115d2:	8286      	strh	r6, [r0, #20]
 80115d4:	f103 080c 	add.w	r8, r3, #12
	rv = ptr[1];
 80115d8:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 80115dc:	2e00      	cmp	r6, #0
 80115de:	f43f af24 	beq.w	801142a <dir_read+0x1c2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80115e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80115e6:	f43f ae7c 	beq.w	80112e2 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80115ea:	f103 080d 	add.w	r8, r3, #13
 80115ee:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80115f2:	780b      	ldrb	r3, [r1, #0]
 80115f4:	0659      	lsls	r1, r3, #25
 80115f6:	d506      	bpl.n	8011606 <dir_read+0x39e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80115f8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80115fc:	f43f ae71 	beq.w	80112e2 <dir_read+0x7a>
		lfnbuf[i] = 0;
 8011600:	2300      	movs	r3, #0
 8011602:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011606:	3a01      	subs	r2, #1
 8011608:	fa5f f882 	uxtb.w	r8, r2
 801160c:	e669      	b.n	80112e2 <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801160e:	780a      	ldrb	r2, [r1, #0]
 8011610:	01d3      	lsls	r3, r2, #7
 8011612:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8011616:	784a      	ldrb	r2, [r1, #1]
 8011618:	441a      	add	r2, r3
 801161a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801161e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011622:	788a      	ldrb	r2, [r1, #2]
 8011624:	fa52 f283 	uxtab	r2, r2, r3
 8011628:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801162c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011630:	78ca      	ldrb	r2, [r1, #3]
 8011632:	fa52 f283 	uxtab	r2, r2, r3
 8011636:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801163a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801163e:	790a      	ldrb	r2, [r1, #4]
 8011640:	fa52 f283 	uxtab	r2, r2, r3
 8011644:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011648:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801164c:	794a      	ldrb	r2, [r1, #5]
 801164e:	fa52 f283 	uxtab	r2, r2, r3
 8011652:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011656:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801165a:	798a      	ldrb	r2, [r1, #6]
 801165c:	fa52 f283 	uxtab	r2, r2, r3
 8011660:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011664:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011668:	79ca      	ldrb	r2, [r1, #7]
 801166a:	fa52 f283 	uxtab	r2, r2, r3
 801166e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011672:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011676:	7a0a      	ldrb	r2, [r1, #8]
 8011678:	fa52 f283 	uxtab	r2, r2, r3
 801167c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011680:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011684:	7a4a      	ldrb	r2, [r1, #9]
 8011686:	7a89      	ldrb	r1, [r1, #10]
 8011688:	fa52 f283 	uxtab	r2, r2, r3
 801168c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011690:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8011694:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011696:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801169a:	b2db      	uxtb	r3, r3
 801169c:	429a      	cmp	r2, r3
 801169e:	f47f af0a 	bne.w	80114b6 <dir_read+0x24e>
 80116a2:	e636      	b.n	8011312 <dir_read+0xaa>

080116a4 <sync_fs>:
{
 80116a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80116a6:	78c3      	ldrb	r3, [r0, #3]
{
 80116a8:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80116aa:	b95b      	cbnz	r3, 80116c4 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80116ac:	7823      	ldrb	r3, [r4, #0]
 80116ae:	2b03      	cmp	r3, #3
 80116b0:	d029      	beq.n	8011706 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80116b2:	2200      	movs	r2, #0
 80116b4:	7860      	ldrb	r0, [r4, #1]
 80116b6:	4611      	mov	r1, r2
 80116b8:	f7ff f952 	bl	8010960 <disk_ioctl>
			res = FR_DISK_ERR;
 80116bc:	3800      	subs	r0, #0
 80116be:	bf18      	it	ne
 80116c0:	2001      	movne	r0, #1
}
 80116c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 80116c4:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80116c6:	f100 0734 	add.w	r7, r0, #52	; 0x34
 80116ca:	2301      	movs	r3, #1
 80116cc:	7840      	ldrb	r0, [r0, #1]
 80116ce:	462a      	mov	r2, r5
 80116d0:	4639      	mov	r1, r7
 80116d2:	f7ff f937 	bl	8010944 <disk_write>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d150      	bne.n	801177c <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80116da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80116dc:	69e3      	ldr	r3, [r4, #28]
 80116de:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80116e0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d2e2      	bcs.n	80116ac <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80116e6:	78a6      	ldrb	r6, [r4, #2]
 80116e8:	2e01      	cmp	r6, #1
 80116ea:	d801      	bhi.n	80116f0 <sync_fs+0x4c>
 80116ec:	e7de      	b.n	80116ac <sync_fs+0x8>
					wsect += fs->fsize;
 80116ee:	69e3      	ldr	r3, [r4, #28]
 80116f0:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80116f2:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80116f4:	2301      	movs	r3, #1
 80116f6:	4639      	mov	r1, r7
 80116f8:	462a      	mov	r2, r5
 80116fa:	7860      	ldrb	r0, [r4, #1]
 80116fc:	f7ff f922 	bl	8010944 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011700:	2e01      	cmp	r6, #1
 8011702:	d1f4      	bne.n	80116ee <sync_fs+0x4a>
 8011704:	e7d2      	b.n	80116ac <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011706:	7925      	ldrb	r5, [r4, #4]
 8011708:	2d01      	cmp	r5, #1
 801170a:	d1d2      	bne.n	80116b2 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 801170c:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8011710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011714:	2100      	movs	r1, #0
 8011716:	4630      	mov	r0, r6
 8011718:	f00b f914 	bl	801c944 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 801171c:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011720:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011722:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8011724:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011728:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 801172a:	4815      	ldr	r0, [pc, #84]	; (8011780 <sync_fs+0xdc>)
 801172c:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 8011730:	6360      	str	r0, [r4, #52]	; 0x34
 8011732:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
 8011736:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 801173a:	3020      	adds	r0, #32
 801173c:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8011740:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8011742:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
 8011746:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011748:	0e12      	lsrs	r2, r2, #24
 801174a:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801174e:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
 8011750:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8011754:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
 8011756:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8011758:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
 801175c:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801175e:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 8011762:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011764:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 8011766:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8011768:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 801176c:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011770:	7860      	ldrb	r0, [r4, #1]
 8011772:	f7ff f8e7 	bl	8010944 <disk_write>
			fs->fsi_flag = 0;
 8011776:	2300      	movs	r3, #0
 8011778:	7123      	strb	r3, [r4, #4]
 801177a:	e79a      	b.n	80116b2 <sync_fs+0xe>
			res = FR_DISK_ERR;
 801177c:	2001      	movs	r0, #1
}
 801177e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011780:	41615252 	.word	0x41615252

08011784 <create_chain>:
{
 8011784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011788:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
 801178a:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 801178c:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
 8011790:	2900      	cmp	r1, #0
 8011792:	f040 80b4 	bne.w	80118fe <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011796:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801179a:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801179e:	b9ce      	cbnz	r6, 80117d4 <create_chain+0x50>
 80117a0:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 80117a2:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 80117a4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80117a6:	429c      	cmp	r4, r3
 80117a8:	d318      	bcc.n	80117dc <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 80117aa:	2e01      	cmp	r6, #1
 80117ac:	f000 80a3 	beq.w	80118f6 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80117b0:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
 80117b4:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80117b6:	69ab      	ldr	r3, [r5, #24]
 80117b8:	42a3      	cmp	r3, r4
 80117ba:	d907      	bls.n	80117cc <create_chain+0x48>
		switch (fs->fs_type) {
 80117bc:	782b      	ldrb	r3, [r5, #0]
 80117be:	2b02      	cmp	r3, #2
 80117c0:	f000 8088 	beq.w	80118d4 <create_chain+0x150>
 80117c4:	2b03      	cmp	r3, #3
 80117c6:	d044      	beq.n	8011852 <create_chain+0xce>
 80117c8:	2b01      	cmp	r3, #1
 80117ca:	d00c      	beq.n	80117e6 <create_chain+0x62>
 80117cc:	2401      	movs	r4, #1
}
 80117ce:	4620      	mov	r0, r4
 80117d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80117d4:	42b3      	cmp	r3, r6
 80117d6:	bf98      	it	ls
 80117d8:	2601      	movls	r6, #1
 80117da:	e7e2      	b.n	80117a2 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80117dc:	2c01      	cmp	r4, #1
 80117de:	f8da 5000 	ldr.w	r5, [sl]
 80117e2:	d9f3      	bls.n	80117cc <create_chain+0x48>
 80117e4:	e7e7      	b.n	80117b6 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 80117e6:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80117ec:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117ee:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80117f2:	4291      	cmp	r1, r2
 80117f4:	d005      	beq.n	8011802 <create_chain+0x7e>
 80117f6:	4628      	mov	r0, r5
 80117f8:	f7ff fa44 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117fc:	bb20      	cbnz	r0, 8011848 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011800:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8011802:	f107 0b01 	add.w	fp, r7, #1
 8011806:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801180a:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 801180e:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011810:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8011812:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011816:	d003      	beq.n	8011820 <create_chain+0x9c>
 8011818:	4628      	mov	r0, r5
 801181a:	f7ff fa33 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801181e:	b998      	cbnz	r0, 8011848 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011820:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011824:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8011826:	445d      	add	r5, fp
 8011828:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801182c:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011830:	d575      	bpl.n	801191e <create_chain+0x19a>
 8011832:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 8011834:	b30b      	cbz	r3, 801187a <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011836:	2b01      	cmp	r3, #1
 8011838:	d0c8      	beq.n	80117cc <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 801183a:	42a6      	cmp	r6, r4
 801183c:	d05b      	beq.n	80118f6 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801183e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8011842:	e7af      	b.n	80117a4 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011844:	2801      	cmp	r0, #1
 8011846:	d1c1      	bne.n	80117cc <create_chain+0x48>
 8011848:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 801184c:	4620      	mov	r0, r4
 801184e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011852:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011854:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011856:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801185a:	4299      	cmp	r1, r3
 801185c:	d004      	beq.n	8011868 <create_chain+0xe4>
 801185e:	4628      	mov	r0, r5
 8011860:	f7ff fa10 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011864:	2800      	cmp	r0, #0
 8011866:	d1ef      	bne.n	8011848 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011868:	00a3      	lsls	r3, r4, #2
 801186a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 801186e:	441d      	add	r5, r3
 8011870:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011872:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8011876:	2b00      	cmp	r3, #0
 8011878:	d1dd      	bne.n	8011836 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801187a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801187e:	42a3      	cmp	r3, r4
 8011880:	d9a4      	bls.n	80117cc <create_chain+0x48>
 8011882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011886:	4621      	mov	r1, r4
 8011888:	4648      	mov	r0, r9
 801188a:	f7ff fbad 	bl	8010fe8 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 801188e:	b970      	cbnz	r0, 80118ae <create_chain+0x12a>
 8011890:	f1b8 0f00 	cmp.w	r8, #0
 8011894:	d00b      	beq.n	80118ae <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011896:	f1b8 0f01 	cmp.w	r8, #1
 801189a:	d097      	beq.n	80117cc <create_chain+0x48>
 801189c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80118a0:	4598      	cmp	r8, r3
 80118a2:	d293      	bcs.n	80117cc <create_chain+0x48>
 80118a4:	4622      	mov	r2, r4
 80118a6:	4641      	mov	r1, r8
 80118a8:	4648      	mov	r0, r9
 80118aa:	f7ff fb9d 	bl	8010fe8 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d1c8      	bne.n	8011844 <create_chain+0xc0>
		fs->last_clst = ncl;
 80118b2:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80118b6:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
 80118ba:	3b02      	subs	r3, #2
 80118bc:	429a      	cmp	r2, r3
 80118be:	d802      	bhi.n	80118c6 <create_chain+0x142>
 80118c0:	3a01      	subs	r2, #1
 80118c2:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
 80118c6:	f899 3004 	ldrb.w	r3, [r9, #4]
 80118ca:	f043 0301 	orr.w	r3, r3, #1
 80118ce:	f889 3004 	strb.w	r3, [r9, #4]
 80118d2:	e77c      	b.n	80117ce <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80118d4:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80118d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80118d8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80118dc:	4299      	cmp	r1, r3
 80118de:	d004      	beq.n	80118ea <create_chain+0x166>
 80118e0:	4628      	mov	r0, r5
 80118e2:	f7ff f9cf 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80118e6:	2800      	cmp	r0, #0
 80118e8:	d1ae      	bne.n	8011848 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80118ea:	0063      	lsls	r3, r4, #1
 80118ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80118f0:	441d      	add	r5, r3
 80118f2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 80118f4:	e79e      	b.n	8011834 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 80118f6:	2400      	movs	r4, #0
}
 80118f8:	4620      	mov	r0, r4
 80118fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80118fe:	4648      	mov	r0, r9
 8011900:	f7ff fc0c 	bl	801111c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011904:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011906:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011908:	f67f af60 	bls.w	80117cc <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801190c:	1c41      	adds	r1, r0, #1
 801190e:	d09b      	beq.n	8011848 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011910:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8011914:	4283      	cmp	r3, r0
 8011916:	f63f af5a 	bhi.w	80117ce <create_chain+0x4a>
 801191a:	4646      	mov	r6, r8
 801191c:	e741      	b.n	80117a2 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801191e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011922:	e787      	b.n	8011834 <create_chain+0xb0>

08011924 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011924:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8011928:	d274      	bcs.n	8011a14 <dir_sdi+0xf0>
 801192a:	06ca      	lsls	r2, r1, #27
{
 801192c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011930:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011932:	d151      	bne.n	80119d8 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011934:	6885      	ldr	r5, [r0, #8]
 8011936:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 8011938:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 801193c:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801193e:	2d00      	cmp	r5, #0
 8011940:	d04d      	beq.n	80119de <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011942:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011946:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801194a:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 801194e:	f0c0 808e 	bcc.w	8011a6e <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011952:	2d01      	cmp	r5, #1
 8011954:	d040      	beq.n	80119d8 <dir_sdi+0xb4>
 8011956:	4647      	mov	r7, r8
 8011958:	e03b      	b.n	80119d2 <dir_sdi+0xae>
		switch (fs->fs_type) {
 801195a:	783b      	ldrb	r3, [r7, #0]
 801195c:	2b02      	cmp	r3, #2
 801195e:	d073      	beq.n	8011a48 <dir_sdi+0x124>
 8011960:	2b03      	cmp	r3, #3
 8011962:	d05f      	beq.n	8011a24 <dir_sdi+0x100>
 8011964:	2b01      	cmp	r3, #1
 8011966:	d137      	bne.n	80119d8 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 8011968:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801196e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011970:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011974:	4291      	cmp	r1, r2
 8011976:	d006      	beq.n	8011986 <dir_sdi+0x62>
 8011978:	4638      	mov	r0, r7
 801197a:	f7ff f983 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801197e:	2800      	cmp	r0, #0
 8011980:	d172      	bne.n	8011a68 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8011986:	f10a 0b01 	add.w	fp, sl, #1
 801198a:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801198e:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8011992:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011994:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8011996:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801199a:	d004      	beq.n	80119a6 <dir_sdi+0x82>
 801199c:	4638      	mov	r0, r7
 801199e:	f7ff f971 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80119a2:	2800      	cmp	r0, #0
 80119a4:	d160      	bne.n	8011a68 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
 80119a6:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 80119aa:	445f      	add	r7, fp
 80119ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80119b0:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80119b4:	07eb      	lsls	r3, r5, #31
 80119b6:	d568      	bpl.n	8011a8a <dir_sdi+0x166>
 80119b8:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80119bc:	2d01      	cmp	r5, #1
 80119be:	d90b      	bls.n	80119d8 <dir_sdi+0xb4>
 80119c0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80119c4:	42ab      	cmp	r3, r5
 80119c6:	d907      	bls.n	80119d8 <dir_sdi+0xb4>
			ofs -= csz;
 80119c8:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 80119cc:	45a1      	cmp	r9, r4
 80119ce:	d850      	bhi.n	8011a72 <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80119d0:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80119d2:	69bb      	ldr	r3, [r7, #24]
 80119d4:	42ab      	cmp	r3, r5
 80119d6:	d8c0      	bhi.n	801195a <dir_sdi+0x36>
		switch (fs->fs_type) {
 80119d8:	2002      	movs	r0, #2
}
 80119da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80119de:	f898 3000 	ldrb.w	r3, [r8]
 80119e2:	2b02      	cmp	r3, #2
 80119e4:	d818      	bhi.n	8011a18 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80119e6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80119ea:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80119ee:	d9f3      	bls.n	80119d8 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 80119f0:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 80119f4:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80119f6:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80119f8:	2a00      	cmp	r2, #0
 80119fa:	d0ed      	beq.n	80119d8 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80119fc:	f108 0834 	add.w	r8, r8, #52	; 0x34
 8011a00:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011a04:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
 8011a08:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011a0a:	4443      	add	r3, r8
 8011a0c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8011a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8011a14:	2002      	movs	r0, #2
}
 8011a16:	4770      	bx	lr
		clst = fs->dirbase;
 8011a18:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d0e2      	beq.n	80119e6 <dir_sdi+0xc2>
 8011a20:	461d      	mov	r5, r3
 8011a22:	e78e      	b.n	8011942 <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a28:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011a2c:	4299      	cmp	r1, r3
 8011a2e:	d003      	beq.n	8011a38 <dir_sdi+0x114>
 8011a30:	4638      	mov	r0, r7
 8011a32:	f7ff f927 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011a36:	b9b8      	cbnz	r0, 8011a68 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011a38:	00ad      	lsls	r5, r5, #2
 8011a3a:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8011a3e:	442f      	add	r7, r5
 8011a40:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011a42:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8011a46:	e7b9      	b.n	80119bc <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a4c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011a50:	4299      	cmp	r1, r3
 8011a52:	d003      	beq.n	8011a5c <dir_sdi+0x138>
 8011a54:	4638      	mov	r0, r7
 8011a56:	f7ff f915 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011a5a:	b928      	cbnz	r0, 8011a68 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011a5c:	006d      	lsls	r5, r5, #1
 8011a5e:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8011a62:	442f      	add	r7, r5
 8011a64:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
 8011a66:	e7a9      	b.n	80119bc <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011a68:	2001      	movs	r0, #1
}
 8011a6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011a6e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8011a72:	3b02      	subs	r3, #2
	clst -= 2;
 8011a74:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011a76:	4299      	cmp	r1, r3
 8011a78:	d20a      	bcs.n	8011a90 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
 8011a7a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8011a7e:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8011a82:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 8011a86:	61f2      	str	r2, [r6, #28]
 8011a88:	e7b5      	b.n	80119f6 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011a8a:	f3ca 050b 	ubfx	r5, sl, #0, #12
 8011a8e:	e795      	b.n	80119bc <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 8011a90:	2300      	movs	r3, #0
 8011a92:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011a96:	e79f      	b.n	80119d8 <dir_sdi+0xb4>

08011a98 <dir_find>:
{
 8011a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011a9c:	2100      	movs	r1, #0
{
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8011aa2:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011aa6:	f7ff ff3d 	bl	8011924 <dir_sdi>
	if (res != FR_OK) return res;
 8011aaa:	4607      	mov	r7, r0
 8011aac:	b9e8      	cbnz	r0, 8011aea <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011aae:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8011ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 8011ab6:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011ab8:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011aba:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011abc:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8011ac0:	42b5      	cmp	r5, r6
 8011ac2:	d018      	beq.n	8011af6 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ac4:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011ac8:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f040 8088 	bne.w	8011be2 <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	4632      	mov	r2, r6
 8011ad6:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011ada:	f7fe ff25 	bl	8010928 <disk_read>
 8011ade:	b140      	cbz	r0, 8011af2 <dir_find+0x5a>
			fs->winsect = sector;
 8011ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8011ae4:	2701      	movs	r7, #1
			fs->winsect = sector;
 8011ae6:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 8011aea:	4638      	mov	r0, r7
 8011aec:	b005      	add	sp, #20
 8011aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8011af2:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8011af6:	6a26      	ldr	r6, [r4, #32]
 8011af8:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011afa:	b34d      	cbz	r5, 8011b50 <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011afc:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011afe:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011b00:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8011b04:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011b06:	d004      	beq.n	8011b12 <dir_find+0x7a>
 8011b08:	0717      	lsls	r7, r2, #28
 8011b0a:	d526      	bpl.n	8011b5a <dir_find+0xc2>
 8011b0c:	2b0f      	cmp	r3, #15
 8011b0e:	f000 8094 	beq.w	8011c3a <dir_find+0x1a2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b16:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8011b1a:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b1c:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011b1e:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b20:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011b22:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8011b26:	d213      	bcs.n	8011b50 <dir_find+0xb8>
 8011b28:	b196      	cbz	r6, 8011b50 <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b2a:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8011b2e:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b30:	b94b      	cbnz	r3, 8011b46 <dir_find+0xae>
		dp->sect++;				/* Next sector */
 8011b32:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 8011b34:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8011b36:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8011b38:	2900      	cmp	r1, #0
 8011b3a:	d15e      	bne.n	8011bfa <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011b3c:	893a      	ldrh	r2, [r7, #8]
 8011b3e:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8011b42:	f240 8134 	bls.w	8011dae <dir_find+0x316>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b46:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8011b48:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b4a:	443b      	add	r3, r7
 8011b4c:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8011b4e:	e7b5      	b.n	8011abc <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011b50:	2704      	movs	r7, #4
}
 8011b52:	4638      	mov	r0, r7
 8011b54:	b005      	add	sp, #20
 8011b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011b5a:	2b0f      	cmp	r3, #15
 8011b5c:	d06d      	beq.n	8011c3a <dir_find+0x1a2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011b5e:	f1ba 0f00 	cmp.w	sl, #0
 8011b62:	f000 80d6 	beq.w	8011d12 <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011b66:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
 8011b6a:	f01a 0a01 	ands.w	sl, sl, #1
 8011b6e:	d1d0      	bne.n	8011b12 <dir_find+0x7a>
	} while (--cnt && r == 0);
 8011b70:	7832      	ldrb	r2, [r6, #0]
 8011b72:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d1cb      	bne.n	8011b12 <dir_find+0x7a>
 8011b7a:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8011b7e:	7873      	ldrb	r3, [r6, #1]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d1c6      	bne.n	8011b12 <dir_find+0x7a>
 8011b84:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8011b88:	78b3      	ldrb	r3, [r6, #2]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d1c1      	bne.n	8011b12 <dir_find+0x7a>
 8011b8e:	78f2      	ldrb	r2, [r6, #3]
 8011b90:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d1bc      	bne.n	8011b12 <dir_find+0x7a>
 8011b98:	7932      	ldrb	r2, [r6, #4]
 8011b9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d1b7      	bne.n	8011b12 <dir_find+0x7a>
 8011ba2:	7972      	ldrb	r2, [r6, #5]
 8011ba4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d1b2      	bne.n	8011b12 <dir_find+0x7a>
 8011bac:	79b2      	ldrb	r2, [r6, #6]
 8011bae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d1ad      	bne.n	8011b12 <dir_find+0x7a>
 8011bb6:	79f2      	ldrb	r2, [r6, #7]
 8011bb8:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d1a8      	bne.n	8011b12 <dir_find+0x7a>
 8011bc0:	7a32      	ldrb	r2, [r6, #8]
 8011bc2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d1a3      	bne.n	8011b12 <dir_find+0x7a>
 8011bca:	7a72      	ldrb	r2, [r6, #9]
 8011bcc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d19e      	bne.n	8011b12 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011bd4:	7ab2      	ldrb	r2, [r6, #10]
 8011bd6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d199      	bne.n	8011b12 <dir_find+0x7a>
 8011bde:	4657      	mov	r7, sl
 8011be0:	e783      	b.n	8011aea <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011be2:	2301      	movs	r3, #1
 8011be4:	462a      	mov	r2, r5
 8011be6:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011bea:	9100      	str	r1, [sp, #0]
 8011bec:	f7fe feaa 	bl	8010944 <disk_write>
 8011bf0:	9900      	ldr	r1, [sp, #0]
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	d06d      	beq.n	8011cd2 <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011bf6:	2701      	movs	r7, #1
 8011bf8:	e777      	b.n	8011aea <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011bfa:	897a      	ldrh	r2, [r7, #10]
 8011bfc:	3a01      	subs	r2, #1
 8011bfe:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8011c02:	d1a0      	bne.n	8011b46 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011c04:	4638      	mov	r0, r7
 8011c06:	9300      	str	r3, [sp, #0]
 8011c08:	f7ff fa88 	bl	801111c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011c0c:	2801      	cmp	r0, #1
 8011c0e:	f240 80d2 	bls.w	8011db6 <dir_find+0x31e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011c12:	1c43      	adds	r3, r0, #1
 8011c14:	d0ef      	beq.n	8011bf6 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011c16:	69ba      	ldr	r2, [r7, #24]
 8011c18:	4290      	cmp	r0, r2
 8011c1a:	f080 80c8 	bcs.w	8011dae <dir_find+0x316>
				dp->clust = clst;		/* Initialize data for new cluster */
 8011c1e:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8011c20:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011c22:	69ba      	ldr	r2, [r7, #24]
 8011c24:	9b00      	ldr	r3, [sp, #0]
 8011c26:	3a02      	subs	r2, #2
 8011c28:	4290      	cmp	r0, r2
 8011c2a:	f080 80c6 	bcs.w	8011dba <dir_find+0x322>
	return clst * fs->csize + fs->database;
 8011c2e:	897a      	ldrh	r2, [r7, #10]
 8011c30:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8011c32:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 8011c36:	61e6      	str	r6, [r4, #28]
 8011c38:	e785      	b.n	8011b46 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011c3a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8011c3e:	0658      	lsls	r0, r3, #25
 8011c40:	f53f af6c 	bmi.w	8011b1c <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011c44:	0669      	lsls	r1, r5, #25
 8011c46:	d53f      	bpl.n	8011cc8 <dir_find+0x230>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011c48:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011c4a:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8011c4e:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011c52:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011c54:	7b73      	ldrb	r3, [r6, #13]
 8011c56:	454b      	cmp	r3, r9
 8011c58:	d138      	bne.n	8011ccc <dir_find+0x234>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011c5a:	8b73      	ldrh	r3, [r6, #26]
 8011c5c:	bbb3      	cbnz	r3, 8011ccc <dir_find+0x234>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011c5e:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011c60:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011c62:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011c66:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8011c6a:	f8df a178 	ldr.w	sl, [pc, #376]	; 8011de4 <dir_find+0x34c>
 8011c6e:	9502      	str	r5, [sp, #8]
 8011c70:	4615      	mov	r5, r2
 8011c72:	3f01      	subs	r7, #1
 8011c74:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011c78:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011c7a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8011c7e:	f8cd 8000 	str.w	r8, [sp]
 8011c82:	9401      	str	r4, [sp, #4]
 8011c84:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011c88:	e010      	b.n	8011cac <dir_find+0x214>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011c8a:	2ffe      	cmp	r7, #254	; 0xfe
 8011c8c:	4620      	mov	r0, r4
 8011c8e:	d816      	bhi.n	8011cbe <dir_find+0x226>
 8011c90:	f001 fecc 	bl	8013a2c <ff_wtoupper>
 8011c94:	4680      	mov	r8, r0
 8011c96:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 8011c9a:	3701      	adds	r7, #1
 8011c9c:	f001 fec6 	bl	8013a2c <ff_wtoupper>
 8011ca0:	4580      	cmp	r8, r0
 8011ca2:	4621      	mov	r1, r4
 8011ca4:	d10b      	bne.n	8011cbe <dir_find+0x226>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011ca6:	45d3      	cmp	fp, sl
 8011ca8:	f000 8089 	beq.w	8011dbe <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011cac:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 8011cb0:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 8011cb2:	2900      	cmp	r1, #0
 8011cb4:	d1e9      	bne.n	8011c8a <dir_find+0x1f2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011cba:	429c      	cmp	r4, r3
 8011cbc:	d0f3      	beq.n	8011ca6 <dir_find+0x20e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011cbe:	e9dd 8400 	ldrd	r8, r4, [sp]
 8011cc2:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8011cc6:	e729      	b.n	8011b1c <dir_find+0x84>
 8011cc8:	45aa      	cmp	sl, r5
 8011cca:	d0c3      	beq.n	8011c54 <dir_find+0x1bc>
 8011ccc:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8011cd0:	e724      	b.n	8011b1c <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011cd2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8011cd6:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011cda:	1aea      	subs	r2, r5, r3
 8011cdc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	f4bf aef6 	bcs.w	8011ad2 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ce6:	f898 7002 	ldrb.w	r7, [r8, #2]
 8011cea:	2f01      	cmp	r7, #1
 8011cec:	f67f aef1 	bls.w	8011ad2 <dir_find+0x3a>
 8011cf0:	468b      	mov	fp, r1
 8011cf2:	e001      	b.n	8011cf8 <dir_find+0x260>
					wsect += fs->fsize;
 8011cf4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8011cf8:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011cfa:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	4659      	mov	r1, fp
 8011d00:	462a      	mov	r2, r5
 8011d02:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011d06:	f7fe fe1d 	bl	8010944 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d0a:	2f01      	cmp	r7, #1
 8011d0c:	d1f2      	bne.n	8011cf4 <dir_find+0x25c>
 8011d0e:	4659      	mov	r1, fp
 8011d10:	e6df      	b.n	8011ad2 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011d12:	7830      	ldrb	r0, [r6, #0]
 8011d14:	7872      	ldrb	r2, [r6, #1]
 8011d16:	01c1      	lsls	r1, r0, #7
 8011d18:	78b3      	ldrb	r3, [r6, #2]
 8011d1a:	f896 b003 	ldrb.w	fp, [r6, #3]
 8011d1e:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 8011d22:	7937      	ldrb	r7, [r6, #4]
 8011d24:	f896 e005 	ldrb.w	lr, [r6, #5]
 8011d28:	4411      	add	r1, r2
 8011d2a:	f896 c006 	ldrb.w	ip, [r6, #6]
 8011d2e:	7a32      	ldrb	r2, [r6, #8]
 8011d30:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8011d34:	7a75      	ldrb	r5, [r6, #9]
 8011d36:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8011d3a:	fa53 f180 	uxtab	r1, r3, r0
 8011d3e:	79f3      	ldrb	r3, [r6, #7]
 8011d40:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8011d44:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8011d48:	7ab1      	ldrb	r1, [r6, #10]
 8011d4a:	fa5b fb80 	uxtab	fp, fp, r0
 8011d4e:	f3cb 0046 	ubfx	r0, fp, #1, #7
 8011d52:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
 8011d56:	fa57 f780 	uxtab	r7, r7, r0
 8011d5a:	f3c7 0046 	ubfx	r0, r7, #1, #7
 8011d5e:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 8011d62:	fa5e f080 	uxtab	r0, lr, r0
 8011d66:	f3c0 0746 	ubfx	r7, r0, #1, #7
 8011d6a:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
 8011d6e:	fa5c f780 	uxtab	r7, ip, r0
 8011d72:	f3c7 0046 	ubfx	r0, r7, #1, #7
 8011d76:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 8011d7a:	fa53 f080 	uxtab	r0, r3, r0
 8011d7e:	f3c0 0346 	ubfx	r3, r0, #1, #7
 8011d82:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 8011d86:	fa52 f383 	uxtab	r3, r2, r3
 8011d8a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8011d8e:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8011d92:	fa55 f283 	uxtab	r2, r5, r3
 8011d96:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011d9a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011d9e:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	4599      	cmp	r9, r3
 8011da6:	f47f aede 	bne.w	8011b66 <dir_find+0xce>
 8011daa:	4657      	mov	r7, sl
 8011dac:	e69d      	b.n	8011aea <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
 8011dae:	2300      	movs	r3, #0
 8011db0:	2704      	movs	r7, #4
 8011db2:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 8011db4:	e699      	b.n	8011aea <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011db6:	2702      	movs	r7, #2
 8011db8:	e697      	b.n	8011aea <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011dba:	461e      	mov	r6, r3
 8011dbc:	e73b      	b.n	8011c36 <dir_find+0x19e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011dbe:	7833      	ldrb	r3, [r6, #0]
 8011dc0:	f8dd 8000 	ldr.w	r8, [sp]
 8011dc4:	065a      	lsls	r2, r3, #25
 8011dc6:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 8011dca:	d500      	bpl.n	8011dce <dir_find+0x336>
 8011dcc:	b919      	cbnz	r1, 8011dd6 <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011dce:	3d01      	subs	r5, #1
 8011dd0:	fa5f fa85 	uxtb.w	sl, r5
 8011dd4:	e6a2      	b.n	8011b1c <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011dd6:	9b03      	ldr	r3, [sp, #12]
 8011dd8:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d0f6      	beq.n	8011dce <dir_find+0x336>
 8011de0:	e774      	b.n	8011ccc <dir_find+0x234>
 8011de2:	bf00      	nop
 8011de4:	0801efa4 	.word	0x0801efa4

08011de8 <follow_path>:
{
 8011de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011dec:	780b      	ldrb	r3, [r1, #0]
{
 8011dee:	b083      	sub	sp, #12
 8011df0:	4688      	mov	r8, r1
 8011df2:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011df4:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8011df6:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011dfa:	d103      	bne.n	8011e04 <follow_path+0x1c>
 8011dfc:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8011e00:	2b2f      	cmp	r3, #47	; 0x2f
 8011e02:	d0fb      	beq.n	8011dfc <follow_path+0x14>
 8011e04:	2b5c      	cmp	r3, #92	; 0x5c
 8011e06:	d0f9      	beq.n	8011dfc <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 8011e08:	2100      	movs	r1, #0
 8011e0a:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011e0c:	f898 3000 	ldrb.w	r3, [r8]
 8011e10:	2b1f      	cmp	r3, #31
 8011e12:	f240 8148 	bls.w	80120a6 <follow_path+0x2be>
 8011e16:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 8011e18:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011e1a:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 8011e1c:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 8011e1e:	d929      	bls.n	8011e74 <follow_path+0x8c>
 8011e20:	f1a5 0902 	sub.w	r9, r5, #2
 8011e24:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 8011e26:	2401      	movs	r4, #1
 8011e28:	e008      	b.n	8011e3c <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 8011e2a:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 8011e2e:	1c63      	adds	r3, r4, #1
 8011e30:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8011e34:	281f      	cmp	r0, #31
 8011e36:	f240 80f7 	bls.w	8012028 <follow_path+0x240>
		w = p[si++];					/* Get a character */
 8011e3a:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8011e3c:	282f      	cmp	r0, #47	; 0x2f
 8011e3e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8011e42:	d01d      	beq.n	8011e80 <follow_path+0x98>
 8011e44:	285c      	cmp	r0, #92	; 0x5c
 8011e46:	d01b      	beq.n	8011e80 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011e48:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8011e4c:	d00e      	beq.n	8011e6c <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8011e4e:	2101      	movs	r1, #1
 8011e50:	f001 fdce 	bl	80139f0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8011e54:	b150      	cbz	r0, 8011e6c <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011e56:	287f      	cmp	r0, #127	; 0x7f
 8011e58:	d8e7      	bhi.n	8011e2a <follow_path+0x42>
	while (*str && *str != chr) str++;
 8011e5a:	2322      	movs	r3, #34	; 0x22
 8011e5c:	4aa5      	ldr	r2, [pc, #660]	; (80120f4 <follow_path+0x30c>)
 8011e5e:	e003      	b.n	8011e68 <follow_path+0x80>
 8011e60:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d0e0      	beq.n	8011e2a <follow_path+0x42>
 8011e68:	4298      	cmp	r0, r3
 8011e6a:	d1f9      	bne.n	8011e60 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011e6c:	2006      	movs	r0, #6
}
 8011e6e:	b003      	add	sp, #12
 8011e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8011e74:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011e76:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8011e78:	802b      	strh	r3, [r5, #0]
}
 8011e7a:	b003      	add	sp, #12
 8011e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011e80:	f818 3004 	ldrb.w	r3, [r8, r4]
 8011e84:	eb08 0204 	add.w	r2, r8, r4
 8011e88:	2b5c      	cmp	r3, #92	; 0x5c
 8011e8a:	d002      	beq.n	8011e92 <follow_path+0xaa>
 8011e8c:	2b2f      	cmp	r3, #47	; 0x2f
 8011e8e:	f040 811f 	bne.w	80120d0 <follow_path+0x2e8>
 8011e92:	1c63      	adds	r3, r4, #1
 8011e94:	4443      	add	r3, r8
 8011e96:	4698      	mov	r8, r3
 8011e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e9c:	2a2f      	cmp	r2, #47	; 0x2f
 8011e9e:	d0fa      	beq.n	8011e96 <follow_path+0xae>
 8011ea0:	2a5c      	cmp	r2, #92	; 0x5c
 8011ea2:	d0f8      	beq.n	8011e96 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011ea4:	f1ba 0f00 	cmp.w	sl, #0
 8011ea8:	d0e4      	beq.n	8011e74 <follow_path+0x8c>
 8011eaa:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011eac:	2400      	movs	r4, #0
 8011eae:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 8011eb2:	e002      	b.n	8011eba <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011eb4:	f1ba 0a01 	subs.w	sl, sl, #1
 8011eb8:	d0dc      	beq.n	8011e74 <follow_path+0x8c>
		w = lfn[di - 1];
 8011eba:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8011ebe:	2b20      	cmp	r3, #32
 8011ec0:	d0f8      	beq.n	8011eb4 <follow_path+0xcc>
 8011ec2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ec4:	d0f6      	beq.n	8011eb4 <follow_path+0xcc>
		*d++ = (BYTE)val;
 8011ec6:	2320      	movs	r3, #32
 8011ec8:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8011ecc:	2100      	movs	r1, #0
 8011ece:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 8011ed2:	627a      	str	r2, [r7, #36]	; 0x24
 8011ed4:	62ba      	str	r2, [r7, #40]	; 0x28
 8011ed6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8011eda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8011ede:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011ee2:	8828      	ldrh	r0, [r5, #0]
 8011ee4:	282e      	cmp	r0, #46	; 0x2e
 8011ee6:	d002      	beq.n	8011eee <follow_path+0x106>
 8011ee8:	4298      	cmp	r0, r3
 8011eea:	f040 80e5 	bne.w	80120b8 <follow_path+0x2d0>
 8011eee:	462a      	mov	r2, r5
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8011ef6:	461c      	mov	r4, r3
 8011ef8:	3301      	adds	r3, #1
 8011efa:	2820      	cmp	r0, #32
 8011efc:	d0f9      	beq.n	8011ef2 <follow_path+0x10a>
 8011efe:	282e      	cmp	r0, #46	; 0x2e
 8011f00:	d0f7      	beq.n	8011ef2 <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
 8011f02:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011f04:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 8011f08:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8011f0c:	2a2e      	cmp	r2, #46	; 0x2e
 8011f0e:	d002      	beq.n	8011f16 <follow_path+0x12e>
 8011f10:	f1ba 0a01 	subs.w	sl, sl, #1
 8011f14:	d1f8      	bne.n	8011f08 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
 8011f16:	b3b0      	cbz	r0, 8011f86 <follow_path+0x19e>
 8011f18:	2208      	movs	r2, #8
 8011f1a:	4641      	mov	r1, r8
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	46b8      	mov	r8, r7
 8011f20:	462f      	mov	r7, r5
 8011f22:	4615      	mov	r5, r2
 8011f24:	4699      	mov	r9, r3
 8011f26:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011f28:	2820      	cmp	r0, #32
 8011f2a:	d003      	beq.n	8011f34 <follow_path+0x14c>
 8011f2c:	282e      	cmp	r0, #46	; 0x2e
 8011f2e:	d14d      	bne.n	8011fcc <follow_path+0x1e4>
 8011f30:	45a2      	cmp	sl, r4
 8011f32:	d04b      	beq.n	8011fcc <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 8011f34:	f046 0603 	orr.w	r6, r6, #3
 8011f38:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 8011f3a:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8011f3e:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 8011f40:	2800      	cmp	r0, #0
 8011f42:	d1f1      	bne.n	8011f28 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011f44:	4647      	mov	r7, r8
 8011f46:	4690      	mov	r8, r2
 8011f48:	462a      	mov	r2, r5
 8011f4a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8011f4e:	29e5      	cmp	r1, #229	; 0xe5
 8011f50:	d102      	bne.n	8011f58 <follow_path+0x170>
 8011f52:	2105      	movs	r1, #5
 8011f54:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8011f58:	2a08      	cmp	r2, #8
 8011f5a:	f000 8093 	beq.w	8012084 <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011f5e:	f003 020c 	and.w	r2, r3, #12
 8011f62:	2a0c      	cmp	r2, #12
 8011f64:	d065      	beq.n	8012032 <follow_path+0x24a>
 8011f66:	f003 0303 	and.w	r3, r3, #3
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	d061      	beq.n	8012032 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011f6e:	07b1      	lsls	r1, r6, #30
 8011f70:	d409      	bmi.n	8011f86 <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8011f72:	2b01      	cmp	r3, #1
 8011f74:	d102      	bne.n	8011f7c <follow_path+0x194>
 8011f76:	f046 0610 	orr.w	r6, r6, #16
 8011f7a:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011f7c:	2a04      	cmp	r2, #4
 8011f7e:	d102      	bne.n	8011f86 <follow_path+0x19e>
 8011f80:	f046 0608 	orr.w	r6, r6, #8
 8011f84:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 8011f86:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8011f88:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8011f8c:	f7ff fd84 	bl	8011a98 <dir_find>
			ns = dp->fn[NSFLAG];
 8011f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8011f94:	2800      	cmp	r0, #0
 8011f96:	d158      	bne.n	801204a <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011f98:	075a      	lsls	r2, r3, #29
 8011f9a:	f53f af68 	bmi.w	8011e6e <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011f9e:	79bb      	ldrb	r3, [r7, #6]
 8011fa0:	06db      	lsls	r3, r3, #27
 8011fa2:	f140 8097 	bpl.w	80120d4 <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011fa6:	697a      	ldr	r2, [r7, #20]
 8011fa8:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8011fac:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8011fb4:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011fb6:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 8011fb8:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8011fba:	d102      	bne.n	8011fc2 <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011fbc:	8a9b      	ldrh	r3, [r3, #20]
 8011fbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011fc2:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011fc4:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 8011fc6:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011fca:	e725      	b.n	8011e18 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011fcc:	454d      	cmp	r5, r9
 8011fce:	d91c      	bls.n	801200a <follow_path+0x222>
 8011fd0:	ebaa 0104 	sub.w	r1, sl, r4
 8011fd4:	fab1 f181 	clz	r1, r1
 8011fd8:	0949      	lsrs	r1, r1, #5
 8011fda:	b9b1      	cbnz	r1, 801200a <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 8011fdc:	287f      	cmp	r0, #127	; 0x7f
 8011fde:	d83c      	bhi.n	801205a <follow_path+0x272>
	while (*str && *str != chr) str++;
 8011fe0:	212b      	movs	r1, #43	; 0x2b
 8011fe2:	f8df c118 	ldr.w	ip, [pc, #280]	; 80120fc <follow_path+0x314>
 8011fe6:	e003      	b.n	8011ff0 <follow_path+0x208>
 8011fe8:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8011fec:	2900      	cmp	r1, #0
 8011fee:	d052      	beq.n	8012096 <follow_path+0x2ae>
 8011ff0:	4281      	cmp	r1, r0
 8011ff2:	d1f9      	bne.n	8011fe8 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011ff4:	f046 0603 	orr.w	r6, r6, #3
 8011ff8:	205f      	movs	r0, #95	; 0x5f
 8011ffa:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 8011ffc:	eb08 0109 	add.w	r1, r8, r9
 8012000:	f109 0901 	add.w	r9, r9, #1
 8012004:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8012008:	e797      	b.n	8011f3a <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 801200a:	2d0b      	cmp	r5, #11
 801200c:	d064      	beq.n	80120d8 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801200e:	45a2      	cmp	sl, r4
 8012010:	d003      	beq.n	801201a <follow_path+0x232>
 8012012:	f046 0603 	orr.w	r6, r6, #3
 8012016:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 8012018:	d394      	bcc.n	8011f44 <follow_path+0x15c>
			b <<= 2; continue;
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801201e:	250b      	movs	r5, #11
 8012020:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 8012024:	b2db      	uxtb	r3, r3
 8012026:	e788      	b.n	8011f3a <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
 8012028:	46a2      	mov	sl, r4
 801202a:	4498      	add	r8, r3
 801202c:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801202e:	2404      	movs	r4, #4
 8012030:	e73d      	b.n	8011eae <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012032:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8012036:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012038:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801203a:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 801203e:	f7ff fd2b 	bl	8011a98 <dir_find>
			ns = dp->fn[NSFLAG];
 8012042:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8012046:	2800      	cmp	r0, #0
 8012048:	d0a6      	beq.n	8011f98 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801204a:	2804      	cmp	r0, #4
 801204c:	f47f af0f 	bne.w	8011e6e <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012050:	f013 0f04 	tst.w	r3, #4
 8012054:	bf08      	it	eq
 8012056:	2005      	moveq	r0, #5
 8012058:	e709      	b.n	8011e6e <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801205a:	e9cd 3200 	strd	r3, r2, [sp]
 801205e:	f001 fcc7 	bl	80139f0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012062:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012066:	b918      	cbnz	r0, 8012070 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
 8012068:	f046 0602 	orr.w	r6, r6, #2
 801206c:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801206e:	e7c1      	b.n	8011ff4 <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012070:	4921      	ldr	r1, [pc, #132]	; (80120f8 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 8012072:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012076:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 8012078:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801207a:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801207e:	2800      	cmp	r0, #0
 8012080:	d0b8      	beq.n	8011ff4 <follow_path+0x20c>
 8012082:	e7ad      	b.n	8011fe0 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
 8012084:	009b      	lsls	r3, r3, #2
 8012086:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801208a:	2a0c      	cmp	r2, #12
 801208c:	d0d1      	beq.n	8012032 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801208e:	07b0      	lsls	r0, r6, #30
 8012090:	f57f af74 	bpl.w	8011f7c <follow_path+0x194>
 8012094:	e777      	b.n	8011f86 <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8012096:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 801209a:	2919      	cmp	r1, #25
 801209c:	d80f      	bhi.n	80120be <follow_path+0x2d6>
					b |= 2;
 801209e:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 80120a2:	b2c0      	uxtb	r0, r0
 80120a4:	e7aa      	b.n	8011ffc <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
 80120a6:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80120a8:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 80120aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 80120ae:	b003      	add	sp, #12
 80120b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 80120b4:	f7ff bc36 	b.w	8011924 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80120b8:	4626      	mov	r6, r4
 80120ba:	2401      	movs	r4, #1
 80120bc:	e722      	b.n	8011f04 <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 80120be:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80120c2:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80120c4:	bf9c      	itt	ls
 80120c6:	3820      	subls	r0, #32
 80120c8:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 80120cc:	b2c0      	uxtb	r0, r0
 80120ce:	e795      	b.n	8011ffc <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80120d0:	4690      	mov	r8, r2
 80120d2:	e6e7      	b.n	8011ea4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80120d4:	2005      	movs	r0, #5
 80120d6:	e6ca      	b.n	8011e6e <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 80120d8:	4647      	mov	r7, r8
 80120da:	4690      	mov	r8, r2
 80120dc:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80120e0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 80120e4:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80120e6:	2ae5      	cmp	r2, #229	; 0xe5
 80120e8:	f47f af39 	bne.w	8011f5e <follow_path+0x176>
 80120ec:	2205      	movs	r2, #5
 80120ee:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80120f2:	e734      	b.n	8011f5e <follow_path+0x176>
 80120f4:	0801ef10 	.word	0x0801ef10
 80120f8:	0801ef24 	.word	0x0801ef24
 80120fc:	0801ef1c 	.word	0x0801ef1c

08012100 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012100:	2901      	cmp	r1, #1
{
 8012102:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012106:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8012108:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801210a:	d90f      	bls.n	801212c <remove_chain+0x2c>
 801210c:	69ab      	ldr	r3, [r5, #24]
 801210e:	428b      	cmp	r3, r1
 8012110:	d90c      	bls.n	801212c <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012112:	4606      	mov	r6, r0
 8012114:	4611      	mov	r1, r2
 8012116:	b962      	cbnz	r2, 8012132 <remove_chain+0x32>
 8012118:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801211a:	429c      	cmp	r4, r3
 801211c:	d206      	bcs.n	801212c <remove_chain+0x2c>
		switch (fs->fs_type) {
 801211e:	783b      	ldrb	r3, [r7, #0]
 8012120:	2b02      	cmp	r3, #2
 8012122:	d072      	beq.n	801220a <remove_chain+0x10a>
 8012124:	2b03      	cmp	r3, #3
 8012126:	d05d      	beq.n	80121e4 <remove_chain+0xe4>
 8012128:	2b01      	cmp	r3, #1
 801212a:	d010      	beq.n	801214e <remove_chain+0x4e>
 801212c:	2002      	movs	r0, #2
}
 801212e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012132:	4293      	cmp	r3, r2
 8012134:	d9fa      	bls.n	801212c <remove_chain+0x2c>
 8012136:	2a01      	cmp	r2, #1
 8012138:	d0f8      	beq.n	801212c <remove_chain+0x2c>
 801213a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801213e:	4628      	mov	r0, r5
 8012140:	f7fe ff52 	bl	8010fe8 <put_fat.part.0>
		if (res != FR_OK) return res;
 8012144:	2800      	cmp	r0, #0
 8012146:	d1f2      	bne.n	801212e <remove_chain+0x2e>
 8012148:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801214a:	69bb      	ldr	r3, [r7, #24]
 801214c:	e7e5      	b.n	801211a <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
 801214e:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012156:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801215a:	4291      	cmp	r1, r2
 801215c:	d006      	beq.n	801216c <remove_chain+0x6c>
 801215e:	4638      	mov	r0, r7
 8012160:	f7fe fd90 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012164:	2800      	cmp	r0, #0
 8012166:	d161      	bne.n	801222c <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801216a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 801216c:	f108 0901 	add.w	r9, r8, #1
 8012170:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012174:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8012178:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801217a:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 801217c:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012180:	d004      	beq.n	801218c <remove_chain+0x8c>
 8012182:	4638      	mov	r0, r7
 8012184:	f7fe fd7e 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012188:	2800      	cmp	r0, #0
 801218a:	d14f      	bne.n	801222c <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801218c:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8012190:	444f      	add	r7, r9
 8012192:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012196:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801219a:	07e3      	lsls	r3, r4, #31
 801219c:	d548      	bpl.n	8012230 <remove_chain+0x130>
 801219e:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 80121a2:	f1b8 0f00 	cmp.w	r8, #0
 80121a6:	d046      	beq.n	8012236 <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80121a8:	f1b8 0f01 	cmp.w	r8, #1
 80121ac:	d0be      	beq.n	801212c <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80121ae:	69ab      	ldr	r3, [r5, #24]
 80121b0:	42a3      	cmp	r3, r4
 80121b2:	d9bb      	bls.n	801212c <remove_chain+0x2c>
 80121b4:	2200      	movs	r2, #0
 80121b6:	4621      	mov	r1, r4
 80121b8:	4628      	mov	r0, r5
 80121ba:	f7fe ff15 	bl	8010fe8 <put_fat.part.0>
			if (res != FR_OK) return res;
 80121be:	2800      	cmp	r0, #0
 80121c0:	d1b5      	bne.n	801212e <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80121c2:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 80121c6:	1e91      	subs	r1, r2, #2
 80121c8:	428b      	cmp	r3, r1
 80121ca:	d205      	bcs.n	80121d8 <remove_chain+0xd8>
			fs->free_clst++;
 80121cc:	3301      	adds	r3, #1
 80121ce:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 80121d0:	792b      	ldrb	r3, [r5, #4]
 80121d2:	f043 0301 	orr.w	r3, r3, #1
 80121d6:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80121d8:	4542      	cmp	r2, r8
 80121da:	d92c      	bls.n	8012236 <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80121dc:	6837      	ldr	r7, [r6, #0]
 80121de:	4644      	mov	r4, r8
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	e79a      	b.n	801211a <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80121e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121e8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80121ec:	4299      	cmp	r1, r3
 80121ee:	d003      	beq.n	80121f8 <remove_chain+0xf8>
 80121f0:	4638      	mov	r0, r7
 80121f2:	f7fe fd47 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121f6:	b9c8      	cbnz	r0, 801222c <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80121f8:	00a3      	lsls	r3, r4, #2
 80121fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80121fe:	441f      	add	r7, r3
 8012200:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012204:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8012208:	e7cb      	b.n	80121a2 <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801220a:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801220e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012212:	4299      	cmp	r1, r3
 8012214:	d003      	beq.n	801221e <remove_chain+0x11e>
 8012216:	4638      	mov	r0, r7
 8012218:	f7fe fd34 	bl	8010c84 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801221c:	b930      	cbnz	r0, 801222c <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801221e:	0063      	lsls	r3, r4, #1
 8012220:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012224:	441f      	add	r7, r3
 8012226:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 801222a:	e7ba      	b.n	80121a2 <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801222c:	2001      	movs	r0, #1
 801222e:	e77e      	b.n	801212e <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012230:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8012234:	e7b5      	b.n	80121a2 <remove_chain+0xa2>
	return FR_OK;
 8012236:	2000      	movs	r0, #0
 8012238:	e779      	b.n	801212e <remove_chain+0x2e>
 801223a:	bf00      	nop

0801223c <dir_alloc>:
{
 801223c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012240:	460b      	mov	r3, r1
	res = dir_sdi(dp, 0);
 8012242:	2100      	movs	r1, #0
{
 8012244:	4681      	mov	r9, r0
 8012246:	ed2d 8b02 	vpush	{d8}
 801224a:	b089      	sub	sp, #36	; 0x24
	FATFS *fs = dp->obj.fs;
 801224c:	f8d0 8000 	ldr.w	r8, [r0]
{
 8012250:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8012252:	f7ff fb67 	bl	8011924 <dir_sdi>
	if (res == FR_OK) {
 8012256:	9002      	str	r0, [sp, #8]
 8012258:	b150      	cbz	r0, 8012270 <dir_alloc+0x34>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801225a:	9b02      	ldr	r3, [sp, #8]
 801225c:	2b04      	cmp	r3, #4
 801225e:	d101      	bne.n	8012264 <dir_alloc+0x28>
 8012260:	2307      	movs	r3, #7
 8012262:	9302      	str	r3, [sp, #8]
}
 8012264:	9802      	ldr	r0, [sp, #8]
 8012266:	b009      	add	sp, #36	; 0x24
 8012268:	ecbd 8b02 	vpop	{d8}
 801226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 8012270:	f8d9 b01c 	ldr.w	fp, [r9, #28]
 8012274:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012276:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 801227a:	465d      	mov	r5, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
 801227c:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
 8012280:	42ac      	cmp	r4, r5
 8012282:	d019      	beq.n	80122b8 <dir_alloc+0x7c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012284:	f898 3003 	ldrb.w	r3, [r8, #3]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d148      	bne.n	801231e <dir_alloc+0xe2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801228c:	2301      	movs	r3, #1
 801228e:	462a      	mov	r2, r5
 8012290:	4651      	mov	r1, sl
 8012292:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012296:	f7fe fb47 	bl	8010928 <disk_read>
 801229a:	b158      	cbz	r0, 80122b4 <dir_alloc+0x78>
				res = FR_DISK_ERR;
 801229c:	2201      	movs	r2, #1
			fs->winsect = sector;
 801229e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80122a2:	9202      	str	r2, [sp, #8]
}
 80122a4:	9802      	ldr	r0, [sp, #8]
			fs->winsect = sector;
 80122a6:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 80122aa:	b009      	add	sp, #36	; 0x24
 80122ac:	ecbd 8b02 	vpop	{d8}
 80122b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 80122b4:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80122b8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	2be5      	cmp	r3, #229	; 0xe5
 80122c0:	d028      	beq.n	8012314 <dir_alloc+0xd8>
 80122c2:	fab3 f283 	clz	r2, r3
 80122c6:	0952      	lsrs	r2, r2, #5
 80122c8:	b323      	cbz	r3, 8012314 <dir_alloc+0xd8>
				n = 0;					/* Not a blank entry. Restart to search */
 80122ca:	4617      	mov	r7, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80122cc:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80122d0:	f8d9 501c 	ldr.w	r5, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80122d4:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80122d6:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 80122da:	d2c1      	bcs.n	8012260 <dir_alloc+0x24>
 80122dc:	2d00      	cmp	r5, #0
 80122de:	d0bf      	beq.n	8012260 <dir_alloc+0x24>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80122e0:	f3c4 0b08 	ubfx	fp, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 80122e4:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80122e8:	f1bb 0f00 	cmp.w	fp, #0
 80122ec:	d109      	bne.n	8012302 <dir_alloc+0xc6>
		dp->sect++;				/* Next sector */
 80122ee:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 80122f0:	f8d9 1018 	ldr.w	r1, [r9, #24]
		dp->sect++;				/* Next sector */
 80122f4:	f8c9 501c 	str.w	r5, [r9, #28]
		if (!dp->clust) {		/* Static table */
 80122f8:	bba9      	cbnz	r1, 8012366 <dir_alloc+0x12a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80122fa:	8933      	ldrh	r3, [r6, #8]
 80122fc:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8012300:	d95b      	bls.n	80123ba <dir_alloc+0x17e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012302:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8012306:	9301      	str	r3, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012308:	445b      	add	r3, fp
	dp->dptr = ofs;						/* Current entry */
 801230a:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801230e:	f8c9 3020 	str.w	r3, [r9, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012312:	e7b3      	b.n	801227c <dir_alloc+0x40>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012314:	3701      	adds	r7, #1
 8012316:	9b03      	ldr	r3, [sp, #12]
 8012318:	429f      	cmp	r7, r3
 801231a:	d1d7      	bne.n	80122cc <dir_alloc+0x90>
 801231c:	e7a2      	b.n	8012264 <dir_alloc+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801231e:	2301      	movs	r3, #1
 8012320:	4622      	mov	r2, r4
 8012322:	4651      	mov	r1, sl
 8012324:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012328:	f7fe fb0c 	bl	8010944 <disk_write>
 801232c:	bb48      	cbnz	r0, 8012382 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801232e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8012332:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012336:	1ae2      	subs	r2, r4, r3
 8012338:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801233c:	429a      	cmp	r2, r3
 801233e:	d2a5      	bcs.n	801228c <dir_alloc+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012340:	f898 6002 	ldrb.w	r6, [r8, #2]
 8012344:	2e01      	cmp	r6, #1
 8012346:	d802      	bhi.n	801234e <dir_alloc+0x112>
 8012348:	e7a0      	b.n	801228c <dir_alloc+0x50>
					wsect += fs->fsize;
 801234a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801234e:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012350:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8012352:	2301      	movs	r3, #1
 8012354:	4651      	mov	r1, sl
 8012356:	4622      	mov	r2, r4
 8012358:	f898 0001 	ldrb.w	r0, [r8, #1]
 801235c:	f7fe faf2 	bl	8010944 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012360:	2e01      	cmp	r6, #1
 8012362:	d1f2      	bne.n	801234a <dir_alloc+0x10e>
 8012364:	e792      	b.n	801228c <dir_alloc+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012366:	8973      	ldrh	r3, [r6, #10]
 8012368:	3b01      	subs	r3, #1
 801236a:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 801236e:	d1c8      	bne.n	8012302 <dir_alloc+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012370:	4630      	mov	r0, r6
 8012372:	f7fe fed3 	bl	801111c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012376:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012378:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801237a:	f240 8082 	bls.w	8012482 <dir_alloc+0x246>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801237e:	1c43      	adds	r3, r0, #1
 8012380:	d102      	bne.n	8012388 <dir_alloc+0x14c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012382:	2301      	movs	r3, #1
 8012384:	9302      	str	r3, [sp, #8]
 8012386:	e76d      	b.n	8012264 <dir_alloc+0x28>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012388:	69b3      	ldr	r3, [r6, #24]
 801238a:	4298      	cmp	r0, r3
 801238c:	d21a      	bcs.n	80123c4 <dir_alloc+0x188>
	clst -= 2;
 801238e:	1e83      	subs	r3, r0, #2
 8012390:	9305      	str	r3, [sp, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012392:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8012396:	9301      	str	r3, [sp, #4]
 8012398:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
 801239a:	f8c9 3018 	str.w	r3, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801239e:	69b3      	ldr	r3, [r6, #24]
 80123a0:	9a05      	ldr	r2, [sp, #20]
 80123a2:	3b02      	subs	r3, #2
 80123a4:	4293      	cmp	r3, r2
 80123a6:	f240 809e 	bls.w	80124e6 <dir_alloc+0x2aa>
	return clst * fs->csize + fs->database;
 80123aa:	8973      	ldrh	r3, [r6, #10]
 80123ac:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 80123ae:	fb02 5503 	mla	r5, r2, r3, r5
 80123b2:	9b01      	ldr	r3, [sp, #4]
				dp->sect = clust2sect(fs, clst);
 80123b4:	f8c9 501c 	str.w	r5, [r9, #28]
 80123b8:	e7a6      	b.n	8012308 <dir_alloc+0xcc>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80123ba:	2307      	movs	r3, #7
				dp->sect = 0; return FR_NO_FILE;
 80123bc:	f8c9 101c 	str.w	r1, [r9, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80123c0:	9302      	str	r3, [sp, #8]
 80123c2:	e74f      	b.n	8012264 <dir_alloc+0x28>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80123c4:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80123c8:	4648      	mov	r0, r9
 80123ca:	f7ff f9db 	bl	8011784 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80123ce:	4603      	mov	r3, r0
 80123d0:	9004      	str	r0, [sp, #16]
 80123d2:	2800      	cmp	r0, #0
 80123d4:	f43f af44 	beq.w	8012260 <dir_alloc+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80123d8:	2801      	cmp	r0, #1
 80123da:	d052      	beq.n	8012482 <dir_alloc+0x246>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80123dc:	3301      	adds	r3, #1
 80123de:	d0d0      	beq.n	8012382 <dir_alloc+0x146>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80123e0:	78f3      	ldrb	r3, [r6, #3]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d150      	bne.n	8012488 <dir_alloc+0x24c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80123e6:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80123ea:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 80123ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80123f0:	2100      	movs	r1, #0
 80123f2:	9801      	ldr	r0, [sp, #4]
 80123f4:	f00a faa6 	bl	801c944 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80123f8:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 80123fa:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80123fc:	3b02      	subs	r3, #2
	clst -= 2;
 80123fe:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012400:	429a      	cmp	r2, r3
	clst -= 2;
 8012402:	9205      	str	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012404:	d27c      	bcs.n	8012500 <dir_alloc+0x2c4>
	return clst * fs->csize + fs->database;
 8012406:	4611      	mov	r1, r2
 8012408:	8973      	ldrh	r3, [r6, #10]
 801240a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 801240c:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012410:	6332      	str	r2, [r6, #48]	; 0x30
 8012412:	2b00      	cmp	r3, #0
 8012414:	d071      	beq.n	80124fa <dir_alloc+0x2be>
 8012416:	2300      	movs	r3, #0
 8012418:	ee08 aa10 	vmov	s16, sl
 801241c:	9706      	str	r7, [sp, #24]
 801241e:	4692      	mov	sl, r2
 8012420:	f8cd 901c 	str.w	r9, [sp, #28]
 8012424:	46a1      	mov	r9, r4
 8012426:	9f01      	ldr	r7, [sp, #4]
 8012428:	461c      	mov	r4, r3
						fs->wflag = 1;
 801242a:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801242e:	4652      	mov	r2, sl
 8012430:	4639      	mov	r1, r7
 8012432:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 8012434:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012436:	2301      	movs	r3, #1
 8012438:	f7fe fa84 	bl	8010944 <disk_write>
 801243c:	2800      	cmp	r0, #0
 801243e:	d1a0      	bne.n	8012382 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012440:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 8012442:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012444:	ebaa 0203 	sub.w	r2, sl, r3
 8012448:	69f3      	ldr	r3, [r6, #28]
 801244a:	429a      	cmp	r2, r3
 801244c:	d20e      	bcs.n	801246c <dir_alloc+0x230>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801244e:	78b5      	ldrb	r5, [r6, #2]
 8012450:	2d01      	cmp	r5, #1
 8012452:	d801      	bhi.n	8012458 <dir_alloc+0x21c>
 8012454:	e00a      	b.n	801246c <dir_alloc+0x230>
					wsect += fs->fsize;
 8012456:	69f3      	ldr	r3, [r6, #28]
 8012458:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801245a:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801245c:	2301      	movs	r3, #1
 801245e:	4639      	mov	r1, r7
 8012460:	4652      	mov	r2, sl
 8012462:	7870      	ldrb	r0, [r6, #1]
 8012464:	f7fe fa6e 	bl	8010944 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012468:	2d01      	cmp	r5, #1
 801246a:	d1f4      	bne.n	8012456 <dir_alloc+0x21a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801246c:	6b31      	ldr	r1, [r6, #48]	; 0x30
 801246e:	1c63      	adds	r3, r4, #1
 8012470:	8972      	ldrh	r2, [r6, #10]
 8012472:	f101 0a01 	add.w	sl, r1, #1
 8012476:	4293      	cmp	r3, r2
 8012478:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
 801247c:	d235      	bcs.n	80124ea <dir_alloc+0x2ae>
 801247e:	461c      	mov	r4, r3
 8012480:	e7d3      	b.n	801242a <dir_alloc+0x1ee>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012482:	2302      	movs	r3, #2
 8012484:	9302      	str	r3, [sp, #8]
 8012486:	e6ed      	b.n	8012264 <dir_alloc+0x28>
		wsect = fs->winsect;	/* Current sector number */
 8012488:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801248a:	f106 0134 	add.w	r1, r6, #52	; 0x34
 801248e:	2301      	movs	r3, #1
 8012490:	7870      	ldrb	r0, [r6, #1]
 8012492:	9205      	str	r2, [sp, #20]
 8012494:	9101      	str	r1, [sp, #4]
 8012496:	f7fe fa55 	bl	8010944 <disk_write>
 801249a:	2800      	cmp	r0, #0
 801249c:	f47f af71 	bne.w	8012382 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80124a0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80124a2:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
 80124a4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80124a6:	1ad1      	subs	r1, r2, r3
 80124a8:	69f3      	ldr	r3, [r6, #28]
 80124aa:	4299      	cmp	r1, r3
 80124ac:	d29e      	bcs.n	80123ec <dir_alloc+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124ae:	78b5      	ldrb	r5, [r6, #2]
 80124b0:	2d01      	cmp	r5, #1
 80124b2:	d99b      	bls.n	80123ec <dir_alloc+0x1b0>
 80124b4:	ee08 aa10 	vmov	s16, sl
 80124b8:	f8cd 9014 	str.w	r9, [sp, #20]
 80124bc:	4692      	mov	sl, r2
 80124be:	46a1      	mov	r9, r4
 80124c0:	9c01      	ldr	r4, [sp, #4]
 80124c2:	e000      	b.n	80124c6 <dir_alloc+0x28a>
					wsect += fs->fsize;
 80124c4:	69f3      	ldr	r3, [r6, #28]
 80124c6:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124c8:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80124ca:	2301      	movs	r3, #1
 80124cc:	4621      	mov	r1, r4
 80124ce:	4652      	mov	r2, sl
 80124d0:	7870      	ldrb	r0, [r6, #1]
 80124d2:	f7fe fa37 	bl	8010944 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124d6:	2d01      	cmp	r5, #1
 80124d8:	d1f4      	bne.n	80124c4 <dir_alloc+0x288>
 80124da:	464c      	mov	r4, r9
 80124dc:	ee18 aa10 	vmov	sl, s16
 80124e0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80124e4:	e782      	b.n	80123ec <dir_alloc+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80124e6:	2500      	movs	r5, #0
 80124e8:	e763      	b.n	80123b2 <dir_alloc+0x176>
					fs->winsect -= n;							/* Restore window offset */
 80124ea:	4623      	mov	r3, r4
 80124ec:	9f06      	ldr	r7, [sp, #24]
 80124ee:	464c      	mov	r4, r9
 80124f0:	ee18 aa10 	vmov	sl, s16
 80124f4:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80124f8:	1aca      	subs	r2, r1, r3
 80124fa:	9b04      	ldr	r3, [sp, #16]
 80124fc:	6332      	str	r2, [r6, #48]	; 0x30
 80124fe:	e74c      	b.n	801239a <dir_alloc+0x15e>
	return clst * fs->csize + fs->database;
 8012500:	8973      	ldrh	r3, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012502:	2200      	movs	r2, #0
 8012504:	e784      	b.n	8012410 <dir_alloc+0x1d4>
 8012506:	bf00      	nop

08012508 <dir_register>:
{
 8012508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801250c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8012510:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012512:	f013 0ba0 	ands.w	fp, r3, #160	; 0xa0
 8012516:	930a      	str	r3, [sp, #40]	; 0x28
 8012518:	f040 8450 	bne.w	8012dbc <dir_register+0x8b4>
	FATFS *fs = dp->obj.fs;
 801251c:	f8d0 9000 	ldr.w	r9, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012520:	4604      	mov	r4, r0
 8012522:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8012526:	881a      	ldrh	r2, [r3, #0]
 8012528:	2a00      	cmp	r2, #0
 801252a:	f000 844b 	beq.w	8012dc4 <dir_register+0x8bc>
 801252e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8012532:	f10b 0b01 	add.w	fp, fp, #1
 8012536:	2a00      	cmp	r2, #0
 8012538:	d1f9      	bne.n	801252e <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
 801253a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
 801253e:	ab12      	add	r3, sp, #72	; 0x48
 8012540:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012544:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801254a:	07d8      	lsls	r0, r3, #31
 801254c:	f140 818b 	bpl.w	8012866 <dir_register+0x35e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012550:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012552:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
			*d++ = *s++;
 8012556:	f89d a046 	ldrb.w	sl, [sp, #70]	; 0x46
		for (n = 1; n < 100; n++) {
 801255a:	2701      	movs	r7, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801255c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012560:	f04f 0820 	mov.w	r8, #32
			*d++ = *s++;
 8012564:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
				if (sr & 0x10000) sr ^= 0x11021;
 8012568:	4dba      	ldr	r5, [pc, #744]	; (8012854 <dir_register+0x34c>)
			*d++ = *s++;
 801256a:	9301      	str	r3, [sp, #4]
 801256c:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8012570:	9302      	str	r3, [sp, #8]
 8012572:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 8012576:	9305      	str	r3, [sp, #20]
 8012578:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 801257c:	9304      	str	r3, [sp, #16]
 801257e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8012582:	9303      	str	r3, [sp, #12]
 8012584:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8012588:	9308      	str	r3, [sp, #32]
 801258a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 801258e:	9307      	str	r3, [sp, #28]
 8012590:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8012594:	9306      	str	r3, [sp, #24]
 8012596:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801259a:	9309      	str	r3, [sp, #36]	; 0x24
 801259c:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80125a0:	469b      	mov	fp, r3
			*d++ = *s++;
 80125a2:	9b01      	ldr	r3, [sp, #4]
 80125a4:	2100      	movs	r1, #0
 80125a6:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80125a8:	2f05      	cmp	r7, #5
			*d++ = *s++;
 80125aa:	f363 0107 	bfi	r1, r3, #0, #8
 80125ae:	9b02      	ldr	r3, [sp, #8]
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80125b0:	f8d9 000c 	ldr.w	r0, [r9, #12]
			*d++ = *s++;
 80125b4:	f363 210f 	bfi	r1, r3, #8, #8
 80125b8:	9b05      	ldr	r3, [sp, #20]
 80125ba:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
 80125be:	f363 4117 	bfi	r1, r3, #16, #8
 80125c2:	9b04      	ldr	r3, [sp, #16]
 80125c4:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
 80125c8:	f363 611f 	bfi	r1, r3, #24, #8
 80125cc:	9b03      	ldr	r3, [sp, #12]
 80125ce:	f363 0207 	bfi	r2, r3, #0, #8
 80125d2:	9b08      	ldr	r3, [sp, #32]
 80125d4:	f363 220f 	bfi	r2, r3, #8, #8
 80125d8:	9b07      	ldr	r3, [sp, #28]
 80125da:	f363 4217 	bfi	r2, r3, #16, #8
 80125de:	9b06      	ldr	r3, [sp, #24]
 80125e0:	f363 621f 	bfi	r2, r3, #24, #8
 80125e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125e6:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 80125ea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80125ee:	f240 8304 	bls.w	8012bfa <dir_register+0x6f2>
		while (*lfn) {	/* Create a CRC */
 80125f2:	8802      	ldrh	r2, [r0, #0]
 80125f4:	2a00      	cmp	r2, #0
 80125f6:	f000 8300 	beq.w	8012bfa <dir_register+0x6f2>
				sr = (sr << 1) + (wc & 1);
 80125fa:	f002 0101 	and.w	r1, r2, #1
 80125fe:	4684      	mov	ip, r0
				wc >>= 1;
 8012600:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 8012602:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012606:	e009      	b.n	801261c <dir_register+0x114>
				sr = (sr << 1) + (wc & 1);
 8012608:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 801260c:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 8012610:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 8012614:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012618:	bf18      	it	ne
 801261a:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 801261c:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 8012620:	0893      	lsrs	r3, r2, #2
 8012622:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 8012624:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012628:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 801262a:	f003 0301 	and.w	r3, r3, #1
 801262e:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012632:	bf48      	it	mi
 8012634:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
 8012638:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 801263a:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801263e:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 8012642:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012646:	bf18      	it	ne
 8012648:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 801264a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801264e:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8012650:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 8012654:	bf48      	it	mi
 8012656:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8012658:	f003 0301 	and.w	r3, r3, #1
 801265c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012660:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8012662:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 8012666:	bf48      	it	mi
 8012668:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 801266a:	f000 0001 	and.w	r0, r0, #1
 801266e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012672:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8012674:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8012678:	bf48      	it	mi
 801267a:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 801267c:	f001 0101 	and.w	r1, r1, #1
 8012680:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012684:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8012686:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 801268a:	bf48      	it	mi
 801268c:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 801268e:	f003 0301 	and.w	r3, r3, #1
 8012692:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012696:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8012698:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 801269c:	bf48      	it	mi
 801269e:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80126a0:	f000 0001 	and.w	r0, r0, #1
 80126a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80126a8:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80126aa:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 80126ae:	bf48      	it	mi
 80126b0:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 80126b2:	f001 0101 	and.w	r1, r1, #1
 80126b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80126ba:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 80126bc:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 80126c0:	bf48      	it	mi
 80126c2:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 80126c4:	f003 0301 	and.w	r3, r3, #1
 80126c8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80126cc:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 80126ce:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 80126d2:	bf48      	it	mi
 80126d4:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80126d6:	f000 0001 	and.w	r0, r0, #1
 80126da:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80126de:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80126e0:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 80126e4:	bf48      	it	mi
 80126e6:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 80126e8:	f001 0101 	and.w	r1, r1, #1
 80126ec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80126f0:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 80126f2:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 80126f6:	bf48      	it	mi
 80126f8:	4068      	eormi	r0, r5
				wc >>= 1;
 80126fa:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
 80126fc:	f003 0301 	and.w	r3, r3, #1
 8012700:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012704:	0400      	lsls	r0, r0, #16
 8012706:	bf48      	it	mi
 8012708:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 801270a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801270e:	0409      	lsls	r1, r1, #16
 8012710:	bf48      	it	mi
 8012712:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8012714:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8012718:	041a      	lsls	r2, r3, #16
		while (*lfn) {	/* Create a CRC */
 801271a:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 801271e:	bf48      	it	mi
 8012720:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
 8012724:	2a00      	cmp	r2, #0
 8012726:	f47f af6f 	bne.w	8012608 <dir_register+0x100>
		c = (BYTE)((seq % 16) + '0');
 801272a:	f00e 010f 	and.w	r1, lr, #15
 801272e:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8012732:	2a39      	cmp	r2, #57	; 0x39
 8012734:	bf88      	it	hi
 8012736:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 801273a:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 801273e:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 8012742:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
 8012746:	f240 830c 	bls.w	8012d62 <dir_register+0x85a>
		c = (BYTE)((seq % 16) + '0');
 801274a:	f001 000f 	and.w	r0, r1, #15
 801274e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8012752:	2a39      	cmp	r2, #57	; 0x39
 8012754:	bf88      	it	hi
 8012756:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 801275a:	290f      	cmp	r1, #15
		seq /= 16;
 801275c:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 8012760:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
 8012764:	f240 8303 	bls.w	8012d6e <dir_register+0x866>
		c = (BYTE)((seq % 16) + '0');
 8012768:	f000 010f 	and.w	r1, r0, #15
 801276c:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8012770:	2a39      	cmp	r2, #57	; 0x39
 8012772:	bf88      	it	hi
 8012774:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8012778:	280f      	cmp	r0, #15
		seq /= 16;
 801277a:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 801277e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
 8012782:	f240 82fa 	bls.w	8012d7a <dir_register+0x872>
		c = (BYTE)((seq % 16) + '0');
 8012786:	f001 000f 	and.w	r0, r1, #15
 801278a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 801278e:	2a39      	cmp	r2, #57	; 0x39
 8012790:	bf88      	it	hi
 8012792:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8012796:	290f      	cmp	r1, #15
		seq /= 16;
 8012798:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 801279c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
 80127a0:	f240 82fa 	bls.w	8012d98 <dir_register+0x890>
		c = (BYTE)((seq % 16) + '0');
 80127a4:	f000 010f 	and.w	r1, r0, #15
 80127a8:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 80127ac:	2a39      	cmp	r2, #57	; 0x39
 80127ae:	bf88      	it	hi
 80127b0:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 80127b4:	280f      	cmp	r0, #15
		seq /= 16;
 80127b6:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 80127ba:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
 80127be:	f240 82f1 	bls.w	8012da4 <dir_register+0x89c>
		c = (BYTE)((seq % 16) + '0');
 80127c2:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 80127c6:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 80127ca:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 80127ce:	2a39      	cmp	r2, #57	; 0x39
 80127d0:	bf88      	it	hi
 80127d2:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 80127d6:	290f      	cmp	r1, #15
		ns[i--] = c;
 80127d8:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
 80127dc:	f240 82e8 	bls.w	8012db0 <dir_register+0x8a8>
		c = (BYTE)((seq % 16) + '0');
 80127e0:	f00e 010f 	and.w	r1, lr, #15
 80127e4:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 80127e8:	2a39      	cmp	r2, #57	; 0x39
 80127ea:	bf88      	it	hi
 80127ec:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 80127f0:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 80127f4:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 80127f8:	f240 82c5 	bls.w	8012d86 <dir_register+0x87e>
		ns[i--] = c;
 80127fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012800:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012804:	2200      	movs	r2, #0
 8012806:	e002      	b.n	801280e <dir_register+0x306>
 8012808:	3201      	adds	r2, #1
 801280a:	4562      	cmp	r2, ip
 801280c:	d003      	beq.n	8012816 <dir_register+0x30e>
 801280e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012812:	2b20      	cmp	r3, #32
 8012814:	d1f8      	bne.n	8012808 <dir_register+0x300>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012816:	f1bc 0f07 	cmp.w	ip, #7
 801281a:	f240 81f3 	bls.w	8012c04 <dir_register+0x6fc>
 801281e:	1c50      	adds	r0, r2, #1
 8012820:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 8012824:	2807      	cmp	r0, #7
 8012826:	d809      	bhi.n	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012828:	1c42      	adds	r2, r0, #1
 801282a:	2120      	movs	r1, #32
 801282c:	2a08      	cmp	r2, #8
 801282e:	f1c0 0208 	rsb	r2, r0, #8
 8012832:	4430      	add	r0, r6
 8012834:	bf88      	it	hi
 8012836:	2201      	movhi	r2, #1
 8012838:	f00a f884 	bl	801c944 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801283c:	4620      	mov	r0, r4
 801283e:	f7ff f92b 	bl	8011a98 <dir_find>
			if (res != FR_OK) break;
 8012842:	b948      	cbnz	r0, 8012858 <dir_register+0x350>
		for (n = 1; n < 100; n++) {
 8012844:	3701      	adds	r7, #1
 8012846:	2f64      	cmp	r7, #100	; 0x64
 8012848:	f47f aeab 	bne.w	80125a2 <dir_register+0x9a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801284c:	2007      	movs	r0, #7
}
 801284e:	b013      	add	sp, #76	; 0x4c
 8012850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012854:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012858:	2804      	cmp	r0, #4
 801285a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801285e:	d1f6      	bne.n	801284e <dir_register+0x346>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012862:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012868:	079b      	lsls	r3, r3, #30
 801286a:	f140 818e 	bpl.w	8012b8a <dir_register+0x682>
 801286e:	f10b 0b0c 	add.w	fp, fp, #12
 8012872:	4de3      	ldr	r5, [pc, #908]	; (8012c00 <dir_register+0x6f8>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012874:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012876:	fba5 350b 	umull	r3, r5, r5, fp
 801287a:	08ad      	lsrs	r5, r5, #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801287c:	1c69      	adds	r1, r5, #1
 801287e:	f7ff fcdd 	bl	801223c <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012882:	2800      	cmp	r0, #0
 8012884:	d1e3      	bne.n	801284e <dir_register+0x346>
 8012886:	f1bb 0f0c 	cmp.w	fp, #12
 801288a:	f000 8185 	beq.w	8012b98 <dir_register+0x690>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801288e:	6961      	ldr	r1, [r4, #20]
 8012890:	4620      	mov	r0, r4
 8012892:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8012896:	f7ff f845 	bl	8011924 <dir_sdi>
		if (res == FR_OK) {
 801289a:	2800      	cmp	r0, #0
 801289c:	d1d7      	bne.n	801284e <dir_register+0x346>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801289e:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
	dir[LDIR_Type] = 0;
 80128a2:	4680      	mov	r8, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80128a4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80128a8:	01fb      	lsls	r3, r7, #7
 80128aa:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 80128ae:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 80128b2:	ea43 0357 	orr.w	r3, r3, r7, lsr #1
 80128b6:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
 80128ba:	f894 e02a 	ldrb.w	lr, [r4, #42]	; 0x2a
 80128be:	189f      	adds	r7, r3, r2
 80128c0:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80128c4:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
 80128c8:	f3c7 0346 	ubfx	r3, r7, #1, #7
 80128cc:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 80128d0:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 80128d4:	fa50 f783 	uxtab	r7, r0, r3
 80128d8:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80128dc:	f3c7 0346 	ubfx	r3, r7, #1, #7
 80128e0:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 80128e4:	fa51 f783 	uxtab	r7, r1, r3
 80128e8:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80128ec:	f3c7 0346 	ubfx	r3, r7, #1, #7
 80128f0:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80128f4:	f64f 77fd 	movw	r7, #65533	; 0xfffd
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80128f8:	fa5a fa83 	uxtab	sl, sl, r3
 80128fc:	f3ca 0346 	ubfx	r3, sl, #1, #7
 8012900:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 8012904:	fa52 f283 	uxtab	r2, r2, r3
 8012908:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801290c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012910:	fa5e f283 	uxtab	r2, lr, r3
 8012914:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012918:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801291c:	fa5c f283 	uxtab	r2, ip, r3
 8012920:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012924:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012928:	fa56 f283 	uxtab	r2, r6, r3
 801292c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012930:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012934:	fa50 f383 	uxtab	r3, r0, r3
 8012938:	f3c3 0246 	ubfx	r2, r3, #1, #7
 801293c:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8012940:	fa51 f183 	uxtab	r1, r1, r3
 8012944:	b2ce      	uxtb	r6, r1
	} while (--n);
 8012946:	e036      	b.n	80129b6 <dir_register+0x4ae>
	*ptr++ = (BYTE)val; val >>= 8;
 8012948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801294c:	f8a3 2003 	strh.w	r2, [r3, #3]
 8012950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012954:	f8a3 2005 	strh.w	r2, [r3, #5]
 8012958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801295c:	f8a3 2007 	strh.w	r2, [r3, #7]
 8012960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012964:	f8a3 2009 	strh.w	r2, [r3, #9]
 8012968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801296c:	81da      	strh	r2, [r3, #14]
 801296e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012972:	821a      	strh	r2, [r3, #16]
 8012974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012978:	825a      	strh	r2, [r3, #18]
 801297a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801297e:	829a      	strh	r2, [r3, #20]
 8012980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012984:	82da      	strh	r2, [r3, #22]
 8012986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801298a:	831a      	strh	r2, [r3, #24]
 801298c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012990:	839a      	strh	r2, [r3, #28]
 8012992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012996:	83da      	strh	r2, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012998:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801299c:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 801299e:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 80129a0:	4620      	mov	r0, r4
				fs->wflag = 1;
 80129a2:	f889 3003 	strb.w	r3, [r9, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80129a6:	f7fe fc19 	bl	80111dc <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 80129aa:	2800      	cmp	r0, #0
 80129ac:	f47f af4f 	bne.w	801284e <dir_register+0x346>
 80129b0:	3d01      	subs	r5, #1
 80129b2:	f000 80f1 	beq.w	8012b98 <dir_register+0x690>
				res = move_window(fs, dp->sect);
 80129b6:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80129b8:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80129bc:	4299      	cmp	r1, r3
 80129be:	d005      	beq.n	80129cc <dir_register+0x4c4>
 80129c0:	4648      	mov	r0, r9
 80129c2:	f7fe f95f 	bl	8010c84 <move_window.part.0>
				if (res != FR_OK) break;
 80129c6:	2800      	cmp	r0, #0
 80129c8:	f47f af41 	bne.w	801284e <dir_register+0x346>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80129cc:	6a23      	ldr	r3, [r4, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80129ce:	f04f 020f 	mov.w	r2, #15
 80129d2:	b2e8      	uxtb	r0, r5
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80129d4:	f8d9 100c 	ldr.w	r1, [r9, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80129d8:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80129da:	1e42      	subs	r2, r0, #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80129dc:	735e      	strb	r6, [r3, #13]
	dir[LDIR_Type] = 0;
 80129de:	f883 800c 	strb.w	r8, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80129e2:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 80129e6:	f883 801a 	strb.w	r8, [r3, #26]
	*ptr++ = (BYTE)val;
 80129ea:	f883 801b 	strb.w	r8, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80129ee:	eb02 028c 	add.w	r2, r2, ip, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80129f2:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 80129f6:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 80129fa:	f883 c001 	strb.w	ip, [r3, #1]
 80129fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012a02:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 8012a06:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012a0a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8012a0e:	45be      	cmp	lr, r7
 8012a10:	d89a      	bhi.n	8012948 <dir_register+0x440>
 8012a12:	3201      	adds	r2, #1
 8012a14:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 8012a18:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8012a1a:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 8012a1e:	f883 a003 	strb.w	sl, [r3, #3]
	*ptr++ = (BYTE)val;
 8012a22:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012a26:	f1ba 0f00 	cmp.w	sl, #0
 8012a2a:	d091      	beq.n	8012950 <dir_register+0x448>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012a2c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8012a30:	45f2      	cmp	sl, lr
 8012a32:	d08d      	beq.n	8012950 <dir_register+0x448>
 8012a34:	440a      	add	r2, r1
 8012a36:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a3a:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8012a3e:	f883 a005 	strb.w	sl, [r3, #5]
	*ptr++ = (BYTE)val;
 8012a42:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012a46:	f1ba 0f00 	cmp.w	sl, #0
 8012a4a:	f000 81be 	beq.w	8012dca <dir_register+0x8c2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012a4e:	45f2      	cmp	sl, lr
 8012a50:	d082      	beq.n	8012958 <dir_register+0x450>
 8012a52:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a56:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8012a5a:	f883 a007 	strb.w	sl, [r3, #7]
	*ptr++ = (BYTE)val;
 8012a5e:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012a62:	f1ba 0f00 	cmp.w	sl, #0
 8012a66:	f000 81c5 	beq.w	8012df4 <dir_register+0x8ec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012a6a:	45f2      	cmp	sl, lr
 8012a6c:	f43f af78 	beq.w	8012960 <dir_register+0x458>
 8012a70:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a74:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8012a78:	f883 a009 	strb.w	sl, [r3, #9]
	*ptr++ = (BYTE)val;
 8012a7c:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012a80:	f1ba 0f00 	cmp.w	sl, #0
 8012a84:	f000 81b3 	beq.w	8012dee <dir_register+0x8e6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012a88:	45f2      	cmp	sl, lr
 8012a8a:	f43f af6d 	beq.w	8012968 <dir_register+0x460>
 8012a8e:	f8b2 a008 	ldrh.w	sl, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a92:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 8012a96:	f883 a00e 	strb.w	sl, [r3, #14]
	*ptr++ = (BYTE)val;
 8012a9a:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012a9e:	f1ba 0f00 	cmp.w	sl, #0
 8012aa2:	f43f af64 	beq.w	801296e <dir_register+0x466>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012aa6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8012aaa:	45f2      	cmp	sl, lr
 8012aac:	f43f af5f 	beq.w	801296e <dir_register+0x466>
 8012ab0:	f8b2 a00a 	ldrh.w	sl, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ab4:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8012ab8:	f883 a010 	strb.w	sl, [r3, #16]
	*ptr++ = (BYTE)val;
 8012abc:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012ac0:	f1ba 0f00 	cmp.w	sl, #0
 8012ac4:	f000 8190 	beq.w	8012de8 <dir_register+0x8e0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012ac8:	45f2      	cmp	sl, lr
 8012aca:	f43f af53 	beq.w	8012974 <dir_register+0x46c>
 8012ace:	f8b2 a00c 	ldrh.w	sl, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ad2:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8012ad6:	f883 a012 	strb.w	sl, [r3, #18]
	*ptr++ = (BYTE)val;
 8012ada:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012ade:	f1ba 0f00 	cmp.w	sl, #0
 8012ae2:	f000 817e 	beq.w	8012de2 <dir_register+0x8da>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012ae6:	45f2      	cmp	sl, lr
 8012ae8:	f43f af47 	beq.w	801297a <dir_register+0x472>
 8012aec:	f8b2 a00e 	ldrh.w	sl, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8012af0:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8012af4:	f883 a014 	strb.w	sl, [r3, #20]
	*ptr++ = (BYTE)val;
 8012af8:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012afc:	f1ba 0f00 	cmp.w	sl, #0
 8012b00:	f000 816c 	beq.w	8012ddc <dir_register+0x8d4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012b04:	45f2      	cmp	sl, lr
 8012b06:	f43f af3b 	beq.w	8012980 <dir_register+0x478>
 8012b0a:	f8b2 a010 	ldrh.w	sl, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8012b0e:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8012b12:	f883 a016 	strb.w	sl, [r3, #22]
	*ptr++ = (BYTE)val;
 8012b16:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012b1a:	f1ba 0f00 	cmp.w	sl, #0
 8012b1e:	f000 815a 	beq.w	8012dd6 <dir_register+0x8ce>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012b22:	45f2      	cmp	sl, lr
 8012b24:	f43f af2f 	beq.w	8012986 <dir_register+0x47e>
 8012b28:	f8b2 e012 	ldrh.w	lr, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8012b2c:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8012b30:	f883 e018 	strb.w	lr, [r3, #24]
	*ptr++ = (BYTE)val;
 8012b34:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012b38:	f1be 0f00 	cmp.w	lr, #0
 8012b3c:	f43f af26 	beq.w	801298c <dir_register+0x484>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012b40:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8012b44:	45d6      	cmp	lr, sl
 8012b46:	f43f af21 	beq.w	801298c <dir_register+0x484>
 8012b4a:	f8b2 e014 	ldrh.w	lr, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8012b4e:	ea4f 2b1e 	mov.w	fp, lr, lsr #8
 8012b52:	f883 e01c 	strb.w	lr, [r3, #28]
	*ptr++ = (BYTE)val;
 8012b56:	f883 b01d 	strb.w	fp, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012b5a:	f1be 0f00 	cmp.w	lr, #0
 8012b5e:	f000 8137 	beq.w	8012dd0 <dir_register+0x8c8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012b62:	45d6      	cmp	lr, sl
 8012b64:	f43f af15 	beq.w	8012992 <dir_register+0x48a>
 8012b68:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012b6a:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8012b6e:	779a      	strb	r2, [r3, #30]
 8012b70:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8012b72:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012b74:	fa1f f28e 	uxth.w	r2, lr
 8012b78:	42ba      	cmp	r2, r7
 8012b7a:	f63f af0d 	bhi.w	8012998 <dir_register+0x490>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012b7e:	4461      	add	r1, ip
 8012b80:	8b4a      	ldrh	r2, [r1, #26]
 8012b82:	2a00      	cmp	r2, #0
 8012b84:	f47f af0a 	bne.w	801299c <dir_register+0x494>
 8012b88:	e706      	b.n	8012998 <dir_register+0x490>
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012b8a:	2101      	movs	r1, #1
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f7ff fb55 	bl	801223c <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012b92:	2800      	cmp	r0, #0
 8012b94:	f47f ae5b 	bne.w	801284e <dir_register+0x346>
		res = move_window(fs, dp->sect);
 8012b98:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012b9a:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8012b9e:	4299      	cmp	r1, r3
 8012ba0:	d005      	beq.n	8012bae <dir_register+0x6a6>
 8012ba2:	4648      	mov	r0, r9
 8012ba4:	f7fe f86e 	bl	8010c84 <move_window.part.0>
		if (res == FR_OK) {
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	f47f ae50 	bne.w	801284e <dir_register+0x346>
		*d++ = (BYTE)val;
 8012bae:	2220      	movs	r2, #32
 8012bb0:	2100      	movs	r1, #0
 8012bb2:	6a20      	ldr	r0, [r4, #32]
 8012bb4:	f009 fec6 	bl	801c944 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012bb8:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012bba:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8012bbe:	1a9a      	subs	r2, r3, r2
 8012bc0:	2a02      	cmp	r2, #2
 8012bc2:	f240 811a 	bls.w	8012dfa <dir_register+0x8f2>
			*d++ = *s++;
 8012bc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8012bc8:	601a      	str	r2, [r3, #0]
 8012bca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012bcc:	605a      	str	r2, [r3, #4]
 8012bce:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
			fs->wflag = 1;
 8012bd2:	2000      	movs	r0, #0
			*d++ = *s++;
 8012bd4:	721a      	strb	r2, [r3, #8]
 8012bd6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012bda:	725a      	strb	r2, [r3, #9]
 8012bdc:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8012be0:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8012be2:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012be4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8012be8:	6a21      	ldr	r1, [r4, #32]
 8012bea:	f003 0318 	and.w	r3, r3, #24
 8012bee:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8012bf0:	f889 2003 	strb.w	r2, [r9, #3]
}
 8012bf4:	b013      	add	sp, #76	; 0x4c
 8012bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bfa:	46be      	mov	lr, r7
 8012bfc:	e595      	b.n	801272a <dir_register+0x222>
 8012bfe:	bf00      	nop
 8012c00:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012c04:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 8012c08:	f10c 0c01 	add.w	ip, ip, #1
 8012c0c:	eb0d 0103 	add.w	r1, sp, r3
 8012c10:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8012c14:	54b1      	strb	r1, [r6, r2]
 8012c16:	3201      	adds	r2, #1
	} while (j < 8);
 8012c18:	2a07      	cmp	r2, #7
 8012c1a:	f63f ae0f 	bhi.w	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012c1e:	f1bc 0f08 	cmp.w	ip, #8
 8012c22:	d067      	beq.n	8012cf4 <dir_register+0x7ec>
 8012c24:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
 8012c28:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012c2a:	f102 0001 	add.w	r0, r2, #1
 8012c2e:	eb0d 0103 	add.w	r1, sp, r3
 8012c32:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8012c36:	54b1      	strb	r1, [r6, r2]
 8012c38:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 8012c3c:	f43f adfe 	beq.w	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012c40:	2908      	cmp	r1, #8
 8012c42:	d05f      	beq.n	8012d04 <dir_register+0x7fc>
 8012c44:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
 8012c48:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012c4a:	eb0d 0103 	add.w	r1, sp, r3
 8012c4e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8012c52:	5431      	strb	r1, [r6, r0]
 8012c54:	f10c 0102 	add.w	r1, ip, #2
 8012c58:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8012c5c:	f43f adee 	beq.w	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012c60:	2908      	cmp	r1, #8
 8012c62:	d057      	beq.n	8012d14 <dir_register+0x80c>
 8012c64:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
 8012c68:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012c6a:	eb0d 0103 	add.w	r1, sp, r3
 8012c6e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8012c72:	5431      	strb	r1, [r6, r0]
 8012c74:	f10c 0103 	add.w	r1, ip, #3
 8012c78:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8012c7c:	f43f adde 	beq.w	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012c80:	2908      	cmp	r1, #8
 8012c82:	d04f      	beq.n	8012d24 <dir_register+0x81c>
 8012c84:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
 8012c88:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012c8a:	eb0d 0103 	add.w	r1, sp, r3
 8012c8e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8012c92:	5431      	strb	r1, [r6, r0]
 8012c94:	f10c 0104 	add.w	r1, ip, #4
 8012c98:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8012c9c:	f43f adce 	beq.w	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012ca0:	2908      	cmp	r1, #8
 8012ca2:	d047      	beq.n	8012d34 <dir_register+0x82c>
 8012ca4:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
 8012ca8:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012caa:	eb0d 0103 	add.w	r1, sp, r3
 8012cae:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8012cb2:	5431      	strb	r1, [r6, r0]
 8012cb4:	f10c 0105 	add.w	r1, ip, #5
 8012cb8:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8012cbc:	f43f adbe 	beq.w	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012cc0:	2908      	cmp	r1, #8
 8012cc2:	d03f      	beq.n	8012d44 <dir_register+0x83c>
 8012cc4:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
 8012cc8:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012cca:	eb0d 0103 	add.w	r1, sp, r3
 8012cce:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8012cd2:	5431      	strb	r1, [r6, r0]
 8012cd4:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 8012cd8:	f43f adb0 	beq.w	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012cdc:	f1bc 0f01 	cmp.w	ip, #1
 8012ce0:	d138      	bne.n	8012d54 <dir_register+0x84c>
 8012ce2:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
 8012ce6:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012ce8:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 8012cea:	f47f ada7 	bne.w	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012cee:	f884 802b 	strb.w	r8, [r4, #43]	; 0x2b
	} while (j < 8);
 8012cf2:	e5a3      	b.n	801283c <dir_register+0x334>
 8012cf4:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012cf6:	f102 0001 	add.w	r0, r2, #1
 8012cfa:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 8012cfe:	f47f ad93 	bne.w	8012828 <dir_register+0x320>
 8012d02:	e59b      	b.n	801283c <dir_register+0x334>
 8012d04:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d06:	f806 8000 	strb.w	r8, [r6, r0]
 8012d0a:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8012d0e:	f47f ad8b 	bne.w	8012828 <dir_register+0x320>
 8012d12:	e593      	b.n	801283c <dir_register+0x334>
 8012d14:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d16:	f806 8000 	strb.w	r8, [r6, r0]
 8012d1a:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8012d1e:	f47f ad83 	bne.w	8012828 <dir_register+0x320>
 8012d22:	e58b      	b.n	801283c <dir_register+0x334>
 8012d24:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d26:	f806 8000 	strb.w	r8, [r6, r0]
 8012d2a:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8012d2e:	f47f ad7b 	bne.w	8012828 <dir_register+0x320>
 8012d32:	e583      	b.n	801283c <dir_register+0x334>
 8012d34:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d36:	f806 8000 	strb.w	r8, [r6, r0]
 8012d3a:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8012d3e:	f47f ad73 	bne.w	8012828 <dir_register+0x320>
 8012d42:	e57b      	b.n	801283c <dir_register+0x334>
 8012d44:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d46:	f806 8000 	strb.w	r8, [r6, r0]
 8012d4a:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 8012d4e:	f47f ad6b 	bne.w	8012828 <dir_register+0x320>
 8012d52:	e573      	b.n	801283c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d54:	f806 8001 	strb.w	r8, [r6, r1]
	} while (j < 8);
 8012d58:	2a00      	cmp	r2, #0
 8012d5a:	f47f ad6f 	bne.w	801283c <dir_register+0x334>
 8012d5e:	2007      	movs	r0, #7
 8012d60:	e562      	b.n	8012828 <dir_register+0x320>
	ns[i] = '~';
 8012d62:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8012d64:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 8012d68:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012d6c:	e548      	b.n	8012800 <dir_register+0x2f8>
	ns[i] = '~';
 8012d6e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8012d70:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 8012d74:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012d78:	e542      	b.n	8012800 <dir_register+0x2f8>
	ns[i] = '~';
 8012d7a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8012d7c:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 8012d80:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012d84:	e53c      	b.n	8012800 <dir_register+0x2f8>
	ns[i] = '~';
 8012d86:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d88:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8012d8c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d90:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8012d94:	4662      	mov	r2, ip
 8012d96:	e745      	b.n	8012c24 <dir_register+0x71c>
	ns[i] = '~';
 8012d98:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8012d9a:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 8012d9e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012da2:	e52d      	b.n	8012800 <dir_register+0x2f8>
	ns[i] = '~';
 8012da4:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8012da6:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 8012daa:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012dae:	e527      	b.n	8012800 <dir_register+0x2f8>
	ns[i] = '~';
 8012db0:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8012db2:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8012db6:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012dba:	e521      	b.n	8012800 <dir_register+0x2f8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012dbc:	2006      	movs	r0, #6
}
 8012dbe:	b013      	add	sp, #76	; 0x4c
 8012dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012dc4:	4693      	mov	fp, r2
 8012dc6:	f7ff bbb8 	b.w	801253a <dir_register+0x32>
	*ptr++ = (BYTE)val; val >>= 8;
 8012dca:	f8a3 e007 	strh.w	lr, [r3, #7]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012dce:	e5c7      	b.n	8012960 <dir_register+0x458>
	*ptr++ = (BYTE)val; val >>= 8;
 8012dd0:	f8a3 a01e 	strh.w	sl, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012dd4:	e5e0      	b.n	8012998 <dir_register+0x490>
	*ptr++ = (BYTE)val; val >>= 8;
 8012dd6:	f8a3 e018 	strh.w	lr, [r3, #24]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012dda:	e5d7      	b.n	801298c <dir_register+0x484>
	*ptr++ = (BYTE)val; val >>= 8;
 8012ddc:	f8a3 e016 	strh.w	lr, [r3, #22]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012de0:	e5d1      	b.n	8012986 <dir_register+0x47e>
	*ptr++ = (BYTE)val; val >>= 8;
 8012de2:	f8a3 e014 	strh.w	lr, [r3, #20]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012de6:	e5cb      	b.n	8012980 <dir_register+0x478>
	*ptr++ = (BYTE)val; val >>= 8;
 8012de8:	f8a3 e012 	strh.w	lr, [r3, #18]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012dec:	e5c5      	b.n	801297a <dir_register+0x472>
	*ptr++ = (BYTE)val; val >>= 8;
 8012dee:	f8a3 e00e 	strh.w	lr, [r3, #14]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012df2:	e5bc      	b.n	801296e <dir_register+0x466>
	*ptr++ = (BYTE)val; val >>= 8;
 8012df4:	f8a3 e009 	strh.w	lr, [r3, #9]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012df8:	e5b6      	b.n	8012968 <dir_register+0x460>
			*d++ = *s++;
 8012dfa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8012dfe:	701a      	strb	r2, [r3, #0]
 8012e00:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8012e04:	705a      	strb	r2, [r3, #1]
 8012e06:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8012e0a:	709a      	strb	r2, [r3, #2]
 8012e0c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8012e10:	70da      	strb	r2, [r3, #3]
 8012e12:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8012e16:	711a      	strb	r2, [r3, #4]
 8012e18:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8012e1c:	715a      	strb	r2, [r3, #5]
 8012e1e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8012e22:	719a      	strb	r2, [r3, #6]
 8012e24:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8012e28:	71da      	strb	r2, [r3, #7]
 8012e2a:	e6d0      	b.n	8012bce <dir_register+0x6c6>

08012e2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012e2c:	b510      	push	{r4, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8012e34:	b1a1      	cbz	r1, 8012e60 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012e36:	f891 c000 	ldrb.w	ip, [r1]
 8012e3a:	f1bc 0f1f 	cmp.w	ip, #31
 8012e3e:	d912      	bls.n	8012e66 <f_mount+0x3a>
 8012e40:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 8012e44:	d00f      	beq.n	8012e66 <f_mount+0x3a>
 8012e46:	4608      	mov	r0, r1
 8012e48:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8012e4c:	2b1f      	cmp	r3, #31
 8012e4e:	d90c      	bls.n	8012e6a <f_mount+0x3e>
 8012e50:	2b3a      	cmp	r3, #58	; 0x3a
 8012e52:	d1f9      	bne.n	8012e48 <f_mount+0x1c>
			i = *tp++ - '0';
 8012e54:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012e56:	4288      	cmp	r0, r1
 8012e58:	d102      	bne.n	8012e60 <f_mount+0x34>
 8012e5a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012e5e:	d006      	beq.n	8012e6e <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e60:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8012e62:	b002      	add	sp, #8
 8012e64:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012e66:	4663      	mov	r3, ip
 8012e68:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012e6a:	2b3a      	cmp	r3, #58	; 0x3a
 8012e6c:	d0f2      	beq.n	8012e54 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012e6e:	4916      	ldr	r1, [pc, #88]	; (8012ec8 <f_mount+0x9c>)
 8012e70:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 8012e72:	b143      	cbz	r3, 8012e86 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012e74:	4815      	ldr	r0, [pc, #84]	; (8012ecc <f_mount+0xa0>)
 8012e76:	6804      	ldr	r4, [r0, #0]
 8012e78:	42a3      	cmp	r3, r4
 8012e7a:	d01c      	beq.n	8012eb6 <f_mount+0x8a>
 8012e7c:	6904      	ldr	r4, [r0, #16]
 8012e7e:	429c      	cmp	r4, r3
 8012e80:	d016      	beq.n	8012eb0 <f_mount+0x84>
		cfs->fs_type = 0;				/* Clear old fs object */
 8012e82:	2000      	movs	r0, #0
 8012e84:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8012e86:	9b01      	ldr	r3, [sp, #4]
 8012e88:	b173      	cbz	r3, 8012ea8 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
 8012e8a:	2000      	movs	r0, #0
 8012e8c:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8012e8e:	9b01      	ldr	r3, [sp, #4]
 8012e90:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012e92:	b1b3      	cbz	r3, 8012ec2 <f_mount+0x96>
 8012e94:	3a01      	subs	r2, #1
 8012e96:	bf18      	it	ne
 8012e98:	2201      	movne	r2, #1
 8012e9a:	b992      	cbnz	r2, 8012ec2 <f_mount+0x96>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012e9c:	a901      	add	r1, sp, #4
 8012e9e:	4668      	mov	r0, sp
 8012ea0:	f7fd ff2a 	bl	8010cf8 <find_volume>
}
 8012ea4:	b002      	add	sp, #8
 8012ea6:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012ea8:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8012eaa:	600b      	str	r3, [r1, #0]
}
 8012eac:	b002      	add	sp, #8
 8012eae:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012eb0:	2400      	movs	r4, #0
 8012eb2:	6104      	str	r4, [r0, #16]
 8012eb4:	e7e5      	b.n	8012e82 <f_mount+0x56>
 8012eb6:	2400      	movs	r4, #0
 8012eb8:	6004      	str	r4, [r0, #0]
 8012eba:	6904      	ldr	r4, [r0, #16]
 8012ebc:	429c      	cmp	r4, r3
 8012ebe:	d1e0      	bne.n	8012e82 <f_mount+0x56>
 8012ec0:	e7f6      	b.n	8012eb0 <f_mount+0x84>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012ec2:	2000      	movs	r0, #0
}
 8012ec4:	b002      	add	sp, #8
 8012ec6:	bd10      	pop	{r4, pc}
 8012ec8:	20019d18 	.word	0x20019d18
 8012ecc:	20019d1c 	.word	0x20019d1c

08012ed0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ed4:	b092      	sub	sp, #72	; 0x48
 8012ed6:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	f000 80a1 	beq.w	8013020 <f_open+0x150>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012ede:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8012ee2:	4616      	mov	r6, r2
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	a903      	add	r1, sp, #12
 8012ee8:	a801      	add	r0, sp, #4
 8012eea:	463a      	mov	r2, r7
 8012eec:	f7fd ff04 	bl	8010cf8 <find_volume>
	if (res == FR_OK) {
 8012ef0:	4605      	mov	r5, r0
 8012ef2:	b128      	cbz	r0, 8012f00 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8012ef8:	4628      	mov	r0, r5
 8012efa:	b012      	add	sp, #72	; 0x48
 8012efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8012f00:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f02:	a804      	add	r0, sp, #16
 8012f04:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8012f06:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8012f08:	f7fe ff6e 	bl	8011de8 <follow_path>
		if (res == FR_OK) {
 8012f0c:	bb00      	cbnz	r0, 8012f50 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012f0e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	f2c0 808b 	blt.w	801302e <f_open+0x15e>
		if (Files[i].fs) {	/* Existing entry */
 8012f18:	4ba7      	ldr	r3, [pc, #668]	; (80131b8 <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f1a:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012f1e:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 8012f20:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f24:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
 8012f26:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 8012f2a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 8012f2e:	f1b8 0f00 	cmp.w	r8, #0
 8012f32:	f000 80fe 	beq.w	8013132 <f_open+0x262>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012f36:	4580      	cmp	r8, r0
 8012f38:	d07b      	beq.n	8013032 <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
 8012f3a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8012f3e:	f1b8 0f00 	cmp.w	r8, #0
 8012f42:	f000 808e 	beq.w	8013062 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012f46:	4580      	cmp	r8, r0
 8012f48:	f000 8103 	beq.w	8013152 <f_open+0x282>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012f4c:	2512      	movs	r5, #18
 8012f4e:	e7d1      	b.n	8012ef4 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012f50:	f016 0f1c 	tst.w	r6, #28
 8012f54:	d069      	beq.n	801302a <f_open+0x15a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012f56:	2804      	cmp	r0, #4
 8012f58:	d167      	bne.n	801302a <f_open+0x15a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012f5a:	4b97      	ldr	r3, [pc, #604]	; (80131b8 <f_open+0x2e8>)
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	b112      	cbz	r2, 8012f66 <f_open+0x96>
 8012f60:	691b      	ldr	r3, [r3, #16]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d1f2      	bne.n	8012f4c <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012f66:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012f68:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012f6c:	f7ff facc 	bl	8012508 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012f70:	2800      	cmp	r0, #0
 8012f72:	d15a      	bne.n	801302a <f_open+0x15a>
				dw = GET_FATTIME();
 8012f74:	f7fd fbd2 	bl	801071c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012f78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8012f7a:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8012f7e:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8012f82:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012f86:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
 8012f8a:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8012f8c:	73de      	strb	r6, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f8e:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f92:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8012f94:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012f98:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f9a:	75de      	strb	r6, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8012f9c:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8012fa0:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8012fa2:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fa6:	f883 e00b 	strb.w	lr, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 8012faa:	780a      	ldrb	r2, [r1, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012fac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8012fae:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8012fb0:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8012fb2:	d102      	bne.n	8012fba <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012fb4:	8a9a      	ldrh	r2, [r3, #20]
 8012fb6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8012fba:	2200      	movs	r2, #0
 8012fbc:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8012fbe:	7808      	ldrb	r0, [r1, #0]
 8012fc0:	2803      	cmp	r0, #3
 8012fc2:	d100      	bne.n	8012fc6 <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
 8012fc4:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8012fc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8012fc8:	2200      	movs	r2, #0
 8012fca:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 8012fcc:	2301      	movs	r3, #1
 8012fce:	70cb      	strb	r3, [r1, #3]
						dw = fs->winsect;
 8012fd0:	9b03      	ldr	r3, [sp, #12]
					if (cl) {							/* Remove the cluster chain if exist */
 8012fd2:	b19e      	cbz	r6, 8012ffc <f_open+0x12c>
						res = remove_chain(&dj.obj, cl, 0);
 8012fd4:	4631      	mov	r1, r6
 8012fd6:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8012fd8:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8012fdc:	f7ff f890 	bl	8012100 <remove_chain>
						if (res == FR_OK) {
 8012fe0:	bb18      	cbnz	r0, 801302a <f_open+0x15a>
							res = move_window(fs, dw);
 8012fe2:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012fe6:	4590      	cmp	r8, r2
 8012fe8:	f000 80e3 	beq.w	80131b2 <f_open+0x2e2>
 8012fec:	4618      	mov	r0, r3
 8012fee:	4641      	mov	r1, r8
 8012ff0:	f7fd fe48 	bl	8010c84 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012ff4:	3e01      	subs	r6, #1
 8012ff6:	9b03      	ldr	r3, [sp, #12]
 8012ff8:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8012ffa:	b9b0      	cbnz	r0, 801302a <f_open+0x15a>
				mode |= FA_MODIFIED;
 8012ffc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013000:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013006:	3900      	subs	r1, #0
 8013008:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801300a:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801300c:	bf18      	it	ne
 801300e:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 8013010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013012:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013014:	f7fd fcb0 	bl	8010978 <inc_lock>
 8013018:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801301a:	bb70      	cbnz	r0, 801307a <f_open+0x1aa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801301c:	2502      	movs	r5, #2
 801301e:	e769      	b.n	8012ef4 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8013020:	2509      	movs	r5, #9
}
 8013022:	4628      	mov	r0, r5
 8013024:	b012      	add	sp, #72	; 0x48
 8013026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801302a:	4605      	mov	r5, r0
 801302c:	e762      	b.n	8012ef4 <f_open+0x24>
				res = FR_INVALID_NAME;
 801302e:	2506      	movs	r5, #6
 8013030:	e760      	b.n	8012ef4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013032:	6858      	ldr	r0, [r3, #4]
 8013034:	4560      	cmp	r0, ip
 8013036:	f000 8095 	beq.w	8013164 <f_open+0x294>
		if (Files[i].fs) {	/* Existing entry */
 801303a:	6918      	ldr	r0, [r3, #16]
 801303c:	b188      	cbz	r0, 8013062 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801303e:	4540      	cmp	r0, r8
 8013040:	d184      	bne.n	8012f4c <f_open+0x7c>
 8013042:	6958      	ldr	r0, [r3, #20]
 8013044:	4560      	cmp	r0, ip
 8013046:	d181      	bne.n	8012f4c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8013048:	6998      	ldr	r0, [r3, #24]
 801304a:	4570      	cmp	r0, lr
 801304c:	f47f af7e 	bne.w	8012f4c <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013050:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013052:	2a00      	cmp	r2, #0
 8013054:	d164      	bne.n	8013120 <f_open+0x250>
 8013056:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 801305a:	899b      	ldrh	r3, [r3, #12]
 801305c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013060:	d05e      	beq.n	8013120 <f_open+0x250>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013062:	f016 0f1c 	tst.w	r6, #28
 8013066:	d04b      	beq.n	8013100 <f_open+0x230>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013068:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801306c:	f013 0f11 	tst.w	r3, #17
 8013070:	d15d      	bne.n	801312e <f_open+0x25e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013072:	0773      	lsls	r3, r6, #29
 8013074:	d556      	bpl.n	8013124 <f_open+0x254>
 8013076:	2508      	movs	r5, #8
 8013078:	e73c      	b.n	8012ef4 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801307a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801307e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8013080:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 8013084:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8013086:	2a03      	cmp	r2, #3
 8013088:	d102      	bne.n	8013090 <f_open+0x1c0>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801308a:	8a9a      	ldrh	r2, [r3, #20]
 801308c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013090:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013092:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 8013094:	f8d3 801c 	ldr.w	r8, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013098:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->cltbl = 0;			/* Disable fast seek mode */
 801309c:	62e1      	str	r1, [r4, #44]	; 0x2c
		*d++ = (BYTE)val;
 801309e:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->obj.fs = fs;	 	/* Validate the file object */
 80130a2:	f8c4 9000 	str.w	r9, [r4]
		*d++ = (BYTE)val;
 80130a6:	4650      	mov	r0, sl
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80130a8:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->obj.id = fs->id;
 80130ac:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->err = 0;			/* Clear error flag */
 80130b0:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80130b2:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80130b4:	61a1      	str	r1, [r4, #24]
			fp->obj.id = fs->id;
 80130b6:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 80130b8:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 80130ba:	f009 fc43 	bl	801c944 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80130be:	06b9      	lsls	r1, r7, #26
 80130c0:	f57f af1a 	bpl.w	8012ef8 <f_open+0x28>
 80130c4:	f1b8 0f00 	cmp.w	r8, #0
 80130c8:	f43f af16 	beq.w	8012ef8 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80130cc:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80130d0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80130d4:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80130d8:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80130dc:	d804      	bhi.n	80130e8 <f_open+0x218>
 80130de:	e047      	b.n	8013170 <f_open+0x2a0>
 80130e0:	1c42      	adds	r2, r0, #1
 80130e2:	d06b      	beq.n	80131bc <f_open+0x2ec>
 80130e4:	4547      	cmp	r7, r8
 80130e6:	d269      	bcs.n	80131bc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80130e8:	4631      	mov	r1, r6
 80130ea:	6820      	ldr	r0, [r4, #0]
 80130ec:	f7fe f816 	bl	801111c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80130f0:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80130f2:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
 80130f6:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 80130f8:	d8f2      	bhi.n	80130e0 <f_open+0x210>
 80130fa:	2502      	movs	r5, #2
				fp->clust = clst;
 80130fc:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80130fe:	e6f9      	b.n	8012ef4 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013100:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013104:	06d9      	lsls	r1, r3, #27
 8013106:	d422      	bmi.n	801314e <f_open+0x27e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013108:	07b1      	lsls	r1, r6, #30
 801310a:	d501      	bpl.n	8013110 <f_open+0x240>
 801310c:	07d8      	lsls	r0, r3, #31
 801310e:	d40e      	bmi.n	801312e <f_open+0x25e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013110:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013114:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013116:	2e00      	cmp	r6, #0
 8013118:	f47f af70 	bne.w	8012ffc <f_open+0x12c>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801311c:	4611      	mov	r1, r2
 801311e:	e771      	b.n	8013004 <f_open+0x134>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013120:	2510      	movs	r5, #16
 8013122:	e6e7      	b.n	8012ef4 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013124:	0730      	lsls	r0, r6, #28
 8013126:	f53f af25 	bmi.w	8012f74 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801312a:	9b03      	ldr	r3, [sp, #12]
 801312c:	e76a      	b.n	8013004 <f_open+0x134>
						res = FR_DENIED;
 801312e:	2507      	movs	r5, #7
 8013130:	e6e0      	b.n	8012ef4 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 8013132:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8013136:	f1b8 0f00 	cmp.w	r8, #0
 801313a:	d092      	beq.n	8013062 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801313c:	4540      	cmp	r0, r8
 801313e:	d190      	bne.n	8013062 <f_open+0x192>
 8013140:	6958      	ldr	r0, [r3, #20]
 8013142:	4560      	cmp	r0, ip
 8013144:	d18d      	bne.n	8013062 <f_open+0x192>
				Files[i].clu == dp->obj.sclust &&
 8013146:	6998      	ldr	r0, [r3, #24]
 8013148:	4586      	cmp	lr, r0
 801314a:	d18a      	bne.n	8013062 <f_open+0x192>
 801314c:	e780      	b.n	8013050 <f_open+0x180>
					res = FR_NO_FILE;
 801314e:	2504      	movs	r5, #4
 8013150:	e6d0      	b.n	8012ef4 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013152:	6958      	ldr	r0, [r3, #20]
 8013154:	4560      	cmp	r0, ip
 8013156:	f47f aef9 	bne.w	8012f4c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 801315a:	6998      	ldr	r0, [r3, #24]
 801315c:	4586      	cmp	lr, r0
 801315e:	f47f aef5 	bne.w	8012f4c <f_open+0x7c>
 8013162:	e775      	b.n	8013050 <f_open+0x180>
 8013164:	6898      	ldr	r0, [r3, #8]
 8013166:	4570      	cmp	r0, lr
 8013168:	f47f af67 	bne.w	801303a <f_open+0x16a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 801316c:	4628      	mov	r0, r5
 801316e:	e770      	b.n	8013052 <f_open+0x182>
				fp->clust = clst;
 8013170:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013172:	f3c8 0308 	ubfx	r3, r8, #0, #9
 8013176:	2b00      	cmp	r3, #0
 8013178:	f43f aebe 	beq.w	8012ef8 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801317c:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
 801317e:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013180:	6983      	ldr	r3, [r0, #24]
 8013182:	3b02      	subs	r3, #2
 8013184:	429e      	cmp	r6, r3
 8013186:	f4bf af49 	bcs.w	801301c <f_open+0x14c>
	return clst * fs->csize + fs->database;
 801318a:	8942      	ldrh	r2, [r0, #10]
 801318c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801318e:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013192:	2a00      	cmp	r2, #0
 8013194:	f43f af42 	beq.w	801301c <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013198:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801319c:	4651      	mov	r1, sl
 801319e:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80131a0:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80131a2:	7840      	ldrb	r0, [r0, #1]
 80131a4:	f7fd fbc0 	bl	8010928 <disk_read>
 80131a8:	2800      	cmp	r0, #0
 80131aa:	f43f aea5 	beq.w	8012ef8 <f_open+0x28>
 80131ae:	2501      	movs	r5, #1
 80131b0:	e6a0      	b.n	8012ef4 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80131b2:	3e01      	subs	r6, #1
 80131b4:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 80131b6:	e721      	b.n	8012ffc <f_open+0x12c>
 80131b8:	20019d1c 	.word	0x20019d1c
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80131bc:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
 80131be:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80131c0:	bf0c      	ite	eq
 80131c2:	2301      	moveq	r3, #1
 80131c4:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80131c6:	d1d4      	bne.n	8013172 <f_open+0x2a2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80131c8:	461d      	mov	r5, r3
 80131ca:	e693      	b.n	8012ef4 <f_open+0x24>

080131cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80131cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d0:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80131d2:	2300      	movs	r3, #0
{
 80131d4:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 80131d6:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80131d8:	b150      	cbz	r0, 80131f0 <f_read+0x24>
 80131da:	6803      	ldr	r3, [r0, #0]
 80131dc:	4604      	mov	r4, r0
 80131de:	b13b      	cbz	r3, 80131f0 <f_read+0x24>
 80131e0:	4617      	mov	r7, r2
 80131e2:	781a      	ldrb	r2, [r3, #0]
 80131e4:	b122      	cbz	r2, 80131f0 <f_read+0x24>
 80131e6:	460d      	mov	r5, r1
 80131e8:	88da      	ldrh	r2, [r3, #6]
 80131ea:	8881      	ldrh	r1, [r0, #4]
 80131ec:	4291      	cmp	r1, r2
 80131ee:	d005      	beq.n	80131fc <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80131f0:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 80131f4:	4640      	mov	r0, r8
 80131f6:	b005      	add	sp, #20
 80131f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80131fc:	7858      	ldrb	r0, [r3, #1]
 80131fe:	f7fd fb77 	bl	80108f0 <disk_status>
 8013202:	07c2      	lsls	r2, r0, #31
 8013204:	d4f4      	bmi.n	80131f0 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013206:	f894 8015 	ldrb.w	r8, [r4, #21]
 801320a:	f1b8 0f00 	cmp.w	r8, #0
 801320e:	d1f1      	bne.n	80131f4 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013210:	7d23      	ldrb	r3, [r4, #20]
 8013212:	f013 0301 	ands.w	r3, r3, #1
 8013216:	9300      	str	r3, [sp, #0]
 8013218:	f000 80d8 	beq.w	80133cc <f_read+0x200>
	remain = fp->obj.objsize - fp->fptr;
 801321c:	69a1      	ldr	r1, [r4, #24]
 801321e:	68e3      	ldr	r3, [r4, #12]
 8013220:	1a5b      	subs	r3, r3, r1
 8013222:	429f      	cmp	r7, r3
 8013224:	bf28      	it	cs
 8013226:	461f      	movcs	r7, r3
	for ( ;  btr;								/* Repeat until all data read */
 8013228:	2f00      	cmp	r7, #0
 801322a:	d0e3      	beq.n	80131f4 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801322c:	f104 0331 	add.w	r3, r4, #49	; 0x31
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013230:	46a2      	mov	sl, r4
 8013232:	f8cd 8008 	str.w	r8, [sp, #8]
 8013236:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013238:	f3c1 0308 	ubfx	r3, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801323c:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013240:	2b00      	cmp	r3, #0
 8013242:	d142      	bne.n	80132ca <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013244:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8013248:	0a4b      	lsrs	r3, r1, #9
 801324a:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 801324c:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 8013250:	d06d      	beq.n	801332e <f_read+0x162>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013252:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013254:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8013258:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801325a:	3b02      	subs	r3, #2
 801325c:	4298      	cmp	r0, r3
 801325e:	d273      	bcs.n	8013348 <f_read+0x17c>
	return clst * fs->csize + fs->database;
 8013260:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8013264:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8013268:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 801326c:	2800      	cmp	r0, #0
 801326e:	d06b      	beq.n	8013348 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013270:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 8013274:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013278:	d36d      	bcc.n	8013356 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801327a:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801327e:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013282:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013284:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8013288:	bf88      	it	hi
 801328a:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801328e:	465a      	mov	r2, fp
 8013290:	4629      	mov	r1, r5
 8013292:	4643      	mov	r3, r8
 8013294:	f7fd fb48 	bl	8010928 <disk_read>
 8013298:	2800      	cmp	r0, #0
 801329a:	f040 8085 	bne.w	80133a8 <f_read+0x1dc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801329e:	f994 2014 	ldrsb.w	r2, [r4, #20]
 80132a2:	2a00      	cmp	r2, #0
 80132a4:	f2c0 80a9 	blt.w	80133fa <f_read+0x22e>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80132a8:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80132ac:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 80132ae:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80132b0:	440d      	add	r5, r1
 80132b2:	440b      	add	r3, r1
 80132b4:	61a3      	str	r3, [r4, #24]
 80132b6:	6833      	ldr	r3, [r6, #0]
 80132b8:	440b      	add	r3, r1
 80132ba:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 80132bc:	f000 80b3 	beq.w	8013426 <f_read+0x25a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80132c0:	69a1      	ldr	r1, [r4, #24]
 80132c2:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d0bc      	beq.n	8013244 <f_read+0x78>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80132ca:	1c58      	adds	r0, r3, #1
 80132cc:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80132d0:	4453      	add	r3, sl
 80132d2:	4450      	add	r0, sl
 80132d4:	42b9      	cmp	r1, r7
 80132d6:	eba5 0000 	sub.w	r0, r5, r0
 80132da:	bf28      	it	cs
 80132dc:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80132de:	2802      	cmp	r0, #2
 80132e0:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 80132e4:	d968      	bls.n	80133b8 <f_read+0x1ec>
 80132e6:	f1bb 0f07 	cmp.w	fp, #7
 80132ea:	d965      	bls.n	80133b8 <f_read+0x1ec>
 80132ec:	f021 0e03 	bic.w	lr, r1, #3
 80132f0:	461a      	mov	r2, r3
 80132f2:	4628      	mov	r0, r5
 80132f4:	449e      	add	lr, r3
			*d++ = *s++;
 80132f6:	f852 cb04 	ldr.w	ip, [r2], #4
 80132fa:	4596      	cmp	lr, r2
 80132fc:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 8013300:	d1f9      	bne.n	80132f6 <f_read+0x12a>
 8013302:	f021 0203 	bic.w	r2, r1, #3
 8013306:	4291      	cmp	r1, r2
 8013308:	eb05 0002 	add.w	r0, r5, r2
 801330c:	eb03 0c02 	add.w	ip, r3, r2
 8013310:	d0cc      	beq.n	80132ac <f_read+0xe0>
			*d++ = *s++;
 8013312:	5c9b      	ldrb	r3, [r3, r2]
 8013314:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 8013316:	ebbb 0202 	subs.w	r2, fp, r2
 801331a:	d0c7      	beq.n	80132ac <f_read+0xe0>
			*d++ = *s++;
 801331c:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 8013320:	2a01      	cmp	r2, #1
			*d++ = *s++;
 8013322:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 8013324:	d0c2      	beq.n	80132ac <f_read+0xe0>
			*d++ = *s++;
 8013326:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801332a:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 801332c:	e7be      	b.n	80132ac <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801332e:	bb39      	cbnz	r1, 8013380 <f_read+0x1b4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013330:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013332:	2801      	cmp	r0, #1
 8013334:	d908      	bls.n	8013348 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013336:	1c43      	adds	r3, r0, #1
 8013338:	d036      	beq.n	80133a8 <f_read+0x1dc>
				fp->clust = clst;				/* Update current cluster */
 801333a:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 801333c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801333e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8013342:	3b02      	subs	r3, #2
 8013344:	4298      	cmp	r0, r3
 8013346:	d38b      	bcc.n	8013260 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013348:	2302      	movs	r3, #2
 801334a:	4698      	mov	r8, r3
 801334c:	7563      	strb	r3, [r4, #21]
}
 801334e:	4640      	mov	r0, r8
 8013350:	b005      	add	sp, #20
 8013352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013356:	6a22      	ldr	r2, [r4, #32]
 8013358:	455a      	cmp	r2, fp
 801335a:	d00b      	beq.n	8013374 <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801335c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8013360:	2b00      	cmp	r3, #0
 8013362:	db3d      	blt.n	80133e0 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013364:	2301      	movs	r3, #1
 8013366:	465a      	mov	r2, fp
 8013368:	4651      	mov	r1, sl
 801336a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801336e:	f7fd fadb 	bl	8010928 <disk_read>
 8013372:	b9c8      	cbnz	r0, 80133a8 <f_read+0x1dc>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013374:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 8013376:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801337a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801337e:	e7a4      	b.n	80132ca <f_read+0xfe>
					if (fp->cltbl) {
 8013380:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013382:	b330      	cbz	r0, 80133d2 <f_read+0x206>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013384:	6821      	ldr	r1, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013386:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013388:	8949      	ldrh	r1, [r1, #10]
 801338a:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801338e:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013390:	b929      	cbnz	r1, 801339e <f_read+0x1d2>
 8013392:	e7d9      	b.n	8013348 <f_read+0x17c>
		cl -= ncl; tbl++;		/* Next fragment */
 8013394:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013396:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801339a:	2900      	cmp	r1, #0
 801339c:	d0d4      	beq.n	8013348 <f_read+0x17c>
		if (cl < ncl) break;	/* In this fragment? */
 801339e:	4299      	cmp	r1, r3
 80133a0:	d9f8      	bls.n	8013394 <f_read+0x1c8>
	return cl + *tbl;	/* Return the cluster number */
 80133a2:	6840      	ldr	r0, [r0, #4]
 80133a4:	4418      	add	r0, r3
 80133a6:	e7c4      	b.n	8013332 <f_read+0x166>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133a8:	f8dd 8000 	ldr.w	r8, [sp]
 80133ac:	2301      	movs	r3, #1
}
 80133ae:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80133b0:	7563      	strb	r3, [r4, #21]
}
 80133b2:	b005      	add	sp, #20
 80133b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b8:	1e6a      	subs	r2, r5, #1
 80133ba:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 80133be:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 80133c2:	4563      	cmp	r3, ip
			*d++ = *s++;
 80133c4:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 80133c8:	d1f9      	bne.n	80133be <f_read+0x1f2>
 80133ca:	e76f      	b.n	80132ac <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80133cc:	f04f 0807 	mov.w	r8, #7
 80133d0:	e710      	b.n	80131f4 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80133d2:	69e1      	ldr	r1, [r4, #28]
 80133d4:	6820      	ldr	r0, [r4, #0]
 80133d6:	9203      	str	r2, [sp, #12]
 80133d8:	f7fd fea0 	bl	801111c <get_fat.isra.0>
 80133dc:	9a03      	ldr	r2, [sp, #12]
 80133de:	e7a8      	b.n	8013332 <f_read+0x166>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80133e0:	2301      	movs	r3, #1
 80133e2:	4651      	mov	r1, sl
 80133e4:	f899 0001 	ldrb.w	r0, [r9, #1]
 80133e8:	f7fd faac 	bl	8010944 <disk_write>
 80133ec:	2800      	cmp	r0, #0
 80133ee:	d1db      	bne.n	80133a8 <f_read+0x1dc>
					fp->flag &= (BYTE)~FA_DIRTY;
 80133f0:	7d23      	ldrb	r3, [r4, #20]
 80133f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133f6:	7523      	strb	r3, [r4, #20]
 80133f8:	e7b4      	b.n	8013364 <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80133fa:	6a22      	ldr	r2, [r4, #32]
 80133fc:	eba2 0b0b 	sub.w	fp, r2, fp
 8013400:	45c3      	cmp	fp, r8
 8013402:	f4bf af51 	bcs.w	80132a8 <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013406:	eb05 224b 	add.w	r2, r5, fp, lsl #9
 801340a:	9b01      	ldr	r3, [sp, #4]
 801340c:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801340e:	1ad0      	subs	r0, r2, r3
 8013410:	2802      	cmp	r0, #2
 8013412:	d90b      	bls.n	801342c <f_read+0x260>
 8013414:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8013418:	f851 3b04 	ldr.w	r3, [r1], #4
 801341c:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 8013420:	4562      	cmp	r2, ip
 8013422:	d1f9      	bne.n	8013418 <f_read+0x24c>
 8013424:	e740      	b.n	80132a8 <f_read+0xdc>
 8013426:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801342a:	e6e3      	b.n	80131f4 <f_read+0x28>
 801342c:	3a01      	subs	r2, #1
 801342e:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 8013432:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8013436:	458c      	cmp	ip, r1
			*d++ = *s++;
 8013438:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 801343c:	d1f9      	bne.n	8013432 <f_read+0x266>
 801343e:	e733      	b.n	80132a8 <f_read+0xdc>

08013440 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013444:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8013446:	2300      	movs	r3, #0
{
 8013448:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 801344a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801344c:	b150      	cbz	r0, 8013464 <f_write+0x24>
 801344e:	6803      	ldr	r3, [r0, #0]
 8013450:	4604      	mov	r4, r0
 8013452:	b13b      	cbz	r3, 8013464 <f_write+0x24>
 8013454:	4616      	mov	r6, r2
 8013456:	781a      	ldrb	r2, [r3, #0]
 8013458:	b122      	cbz	r2, 8013464 <f_write+0x24>
 801345a:	460d      	mov	r5, r1
 801345c:	88da      	ldrh	r2, [r3, #6]
 801345e:	8881      	ldrh	r1, [r0, #4]
 8013460:	4291      	cmp	r1, r2
 8013462:	d005      	beq.n	8013470 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8013464:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8013468:	4640      	mov	r0, r8
 801346a:	b005      	add	sp, #20
 801346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013470:	7858      	ldrb	r0, [r3, #1]
 8013472:	f7fd fa3d 	bl	80108f0 <disk_status>
 8013476:	07c1      	lsls	r1, r0, #31
 8013478:	d4f4      	bmi.n	8013464 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801347a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801347e:	f1b8 0f00 	cmp.w	r8, #0
 8013482:	d1f1      	bne.n	8013468 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013484:	7d23      	ldrb	r3, [r4, #20]
 8013486:	079a      	lsls	r2, r3, #30
 8013488:	f140 80f4 	bpl.w	8013674 <f_write+0x234>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801348c:	69a2      	ldr	r2, [r4, #24]
 801348e:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013490:	bf28      	it	cs
 8013492:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 8013494:	2e00      	cmp	r6, #0
 8013496:	f000 80cb 	beq.w	8013630 <f_write+0x1f0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801349a:	f504 730c 	add.w	r3, r4, #560	; 0x230
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801349e:	46a2      	mov	sl, r4
 80134a0:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80134a2:	f3c2 0308 	ubfx	r3, r2, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80134a6:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d160      	bne.n	8013570 <f_write+0x130>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80134ae:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 80134b2:	0a53      	lsrs	r3, r2, #9
 80134b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 80134b8:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 80134bc:	d110      	bne.n	80134e0 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80134be:	2a00      	cmp	r2, #0
 80134c0:	f040 809f 	bne.w	8013602 <f_write+0x1c2>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80134c4:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80134c6:	2800      	cmp	r0, #0
 80134c8:	f000 80df 	beq.w	801368a <f_write+0x24a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80134cc:	2801      	cmp	r0, #1
 80134ce:	f000 8086 	beq.w	80135de <f_write+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80134d2:	1c43      	adds	r3, r0, #1
 80134d4:	f000 80bd 	beq.w	8013652 <f_write+0x212>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80134d8:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80134da:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80134dc:	b903      	cbnz	r3, 80134e0 <f_write+0xa0>
 80134de:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80134e0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	f2c0 80a7 	blt.w	8013638 <f_write+0x1f8>
	clst -= 2;
 80134ea:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80134ec:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 80134f0:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80134f2:	3b02      	subs	r3, #2
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d272      	bcs.n	80135de <f_write+0x19e>
	return clst * fs->csize + fs->database;
 80134f8:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 80134fc:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8013500:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013504:	2a00      	cmp	r2, #0
 8013506:	d06a      	beq.n	80135de <f_write+0x19e>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013508:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 801350c:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 801350e:	d36d      	bcc.n	80135ec <f_write+0x1ac>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013510:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013514:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013516:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013518:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 801351c:	bf88      	it	hi
 801351e:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013522:	4629      	mov	r1, r5
 8013524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013528:	f7fd fa0c 	bl	8010944 <disk_write>
 801352c:	2800      	cmp	r0, #0
 801352e:	f040 8090 	bne.w	8013652 <f_write+0x212>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013532:	6a21      	ldr	r1, [r4, #32]
 8013534:	9a02      	ldr	r2, [sp, #8]
 8013536:	9b03      	ldr	r3, [sp, #12]
 8013538:	1a8a      	subs	r2, r1, r2
 801353a:	429a      	cmp	r2, r3
 801353c:	f0c0 80b9 	bcc.w	80136b2 <f_write+0x272>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013540:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 8013544:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013548:	69a3      	ldr	r3, [r4, #24]
 801354a:	4615      	mov	r5, r2
 801354c:	68e2      	ldr	r2, [r4, #12]
 801354e:	4463      	add	r3, ip
 8013550:	4293      	cmp	r3, r2
 8013552:	61a3      	str	r3, [r4, #24]
 8013554:	bf38      	it	cc
 8013556:	4613      	movcc	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
 8013558:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801355c:	60e3      	str	r3, [r4, #12]
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	4463      	add	r3, ip
 8013562:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8013564:	d063      	beq.n	801362e <f_write+0x1ee>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013566:	69a2      	ldr	r2, [r4, #24]
 8013568:	f3c2 0308 	ubfx	r3, r2, #0, #9
 801356c:	2b00      	cmp	r3, #0
 801356e:	d09e      	beq.n	80134ae <f_write+0x6e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013570:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013574:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013576:	4453      	add	r3, sl
 8013578:	45b4      	cmp	ip, r6
 801357a:	eba3 0202 	sub.w	r2, r3, r2
 801357e:	bf28      	it	cs
 8013580:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013582:	2a02      	cmp	r2, #2
 8013584:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 8013588:	d96a      	bls.n	8013660 <f_write+0x220>
 801358a:	f1bb 0f07 	cmp.w	fp, #7
 801358e:	d967      	bls.n	8013660 <f_write+0x220>
 8013590:	f02c 0e03 	bic.w	lr, ip, #3
 8013594:	461a      	mov	r2, r3
 8013596:	4629      	mov	r1, r5
 8013598:	449e      	add	lr, r3
			*d++ = *s++;
 801359a:	f851 0b04 	ldr.w	r0, [r1], #4
 801359e:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 80135a2:	4596      	cmp	lr, r2
 80135a4:	d1f9      	bne.n	801359a <f_write+0x15a>
 80135a6:	f02c 0103 	bic.w	r1, ip, #3
 80135aa:	458c      	cmp	ip, r1
 80135ac:	eb03 0001 	add.w	r0, r3, r1
 80135b0:	eb05 0201 	add.w	r2, r5, r1
 80135b4:	d00e      	beq.n	80135d4 <f_write+0x194>
			*d++ = *s++;
 80135b6:	f815 e001 	ldrb.w	lr, [r5, r1]
 80135ba:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 80135be:	ebbb 0101 	subs.w	r1, fp, r1
 80135c2:	d005      	beq.n	80135d0 <f_write+0x190>
			*d++ = *s++;
 80135c4:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 80135c6:	2901      	cmp	r1, #1
			*d++ = *s++;
 80135c8:	7043      	strb	r3, [r0, #1]
 80135ca:	bf1c      	itt	ne
 80135cc:	7893      	ldrbne	r3, [r2, #2]
 80135ce:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 80135d0:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 80135d4:	7d23      	ldrb	r3, [r4, #20]
 80135d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80135da:	7523      	strb	r3, [r4, #20]
 80135dc:	e7b4      	b.n	8013548 <f_write+0x108>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80135de:	2302      	movs	r3, #2
 80135e0:	4698      	mov	r8, r3
 80135e2:	7563      	strb	r3, [r4, #21]
}
 80135e4:	4640      	mov	r0, r8
 80135e6:	b005      	add	sp, #20
 80135e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80135ec:	6a23      	ldr	r3, [r4, #32]
 80135ee:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 80135f0:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80135f2:	d002      	beq.n	80135fa <f_write+0x1ba>
 80135f4:	68e1      	ldr	r1, [r4, #12]
 80135f6:	428b      	cmp	r3, r1
 80135f8:	d34f      	bcc.n	801369a <f_write+0x25a>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80135fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 80135fe:	6222      	str	r2, [r4, #32]
 8013600:	e7b6      	b.n	8013570 <f_write+0x130>
					if (fp->cltbl) {
 8013602:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013604:	2900      	cmp	r1, #0
 8013606:	d038      	beq.n	801367a <f_write+0x23a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013608:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801360a:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801360c:	8952      	ldrh	r2, [r2, #10]
 801360e:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013612:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013614:	b922      	cbnz	r2, 8013620 <f_write+0x1e0>
 8013616:	e00a      	b.n	801362e <f_write+0x1ee>
		cl -= ncl; tbl++;		/* Next fragment */
 8013618:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801361a:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801361e:	b132      	cbz	r2, 801362e <f_write+0x1ee>
		if (cl < ncl) break;	/* In this fragment? */
 8013620:	4293      	cmp	r3, r2
 8013622:	d2f9      	bcs.n	8013618 <f_write+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 8013624:	6848      	ldr	r0, [r1, #4]
 8013626:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013628:	2800      	cmp	r0, #0
 801362a:	f47f af4f 	bne.w	80134cc <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801362e:	7d23      	ldrb	r3, [r4, #20]
 8013630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013634:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8013636:	e717      	b.n	8013468 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013638:	2301      	movs	r3, #1
 801363a:	6a22      	ldr	r2, [r4, #32]
 801363c:	4651      	mov	r1, sl
 801363e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013642:	f7fd f97f 	bl	8010944 <disk_write>
 8013646:	b920      	cbnz	r0, 8013652 <f_write+0x212>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013648:	7d23      	ldrb	r3, [r4, #20]
 801364a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801364e:	7523      	strb	r3, [r4, #20]
 8013650:	e74b      	b.n	80134ea <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013652:	2301      	movs	r3, #1
 8013654:	4698      	mov	r8, r3
 8013656:	7563      	strb	r3, [r4, #21]
}
 8013658:	4640      	mov	r0, r8
 801365a:	b005      	add	sp, #20
 801365c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013660:	3b01      	subs	r3, #1
 8013662:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 8013666:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 801366a:	4295      	cmp	r5, r2
			*d++ = *s++;
 801366c:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 8013670:	d1f9      	bne.n	8013666 <f_write+0x226>
 8013672:	e7af      	b.n	80135d4 <f_write+0x194>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013674:	f04f 0807 	mov.w	r8, #7
 8013678:	e6f6      	b.n	8013468 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801367a:	69e1      	ldr	r1, [r4, #28]
 801367c:	4620      	mov	r0, r4
 801367e:	f7fe f881 	bl	8011784 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013682:	2800      	cmp	r0, #0
 8013684:	f47f af22 	bne.w	80134cc <f_write+0x8c>
 8013688:	e7d1      	b.n	801362e <f_write+0x1ee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801368a:	4659      	mov	r1, fp
 801368c:	4620      	mov	r0, r4
 801368e:	f7fe f879 	bl	8011784 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013692:	2800      	cmp	r0, #0
 8013694:	f47f af1a 	bne.w	80134cc <f_write+0x8c>
 8013698:	e7c9      	b.n	801362e <f_write+0x1ee>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801369a:	2301      	movs	r3, #1
 801369c:	4651      	mov	r1, sl
 801369e:	f899 0001 	ldrb.w	r0, [r9, #1]
 80136a2:	9202      	str	r2, [sp, #8]
 80136a4:	f7fd f940 	bl	8010928 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80136a8:	2800      	cmp	r0, #0
 80136aa:	d1d2      	bne.n	8013652 <f_write+0x212>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80136ac:	69a3      	ldr	r3, [r4, #24]
 80136ae:	9a02      	ldr	r2, [sp, #8]
 80136b0:	e7a3      	b.n	80135fa <f_write+0x1ba>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80136b2:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 80136b6:	1c42      	adds	r2, r0, #1
 80136b8:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80136ba:	ebaa 0202 	sub.w	r2, sl, r2
 80136be:	2a02      	cmp	r2, #2
 80136c0:	d90d      	bls.n	80136de <f_write+0x29e>
 80136c2:	4652      	mov	r2, sl
 80136c4:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 80136c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80136cc:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 80136d0:	4562      	cmp	r2, ip
 80136d2:	d1f9      	bne.n	80136c8 <f_write+0x288>
					fp->flag &= (BYTE)~FA_DIRTY;
 80136d4:	7d22      	ldrb	r2, [r4, #20]
 80136d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80136da:	7522      	strb	r2, [r4, #20]
 80136dc:	e730      	b.n	8013540 <f_write+0x100>
 80136de:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 80136e2:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 80136e6:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 80136ea:	458c      	cmp	ip, r1
			*d++ = *s++;
 80136ec:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 80136f0:	d1f9      	bne.n	80136e6 <f_write+0x2a6>
 80136f2:	e7ef      	b.n	80136d4 <f_write+0x294>

080136f4 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80136f4:	b158      	cbz	r0, 801370e <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80136f6:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80136f8:	6803      	ldr	r3, [r0, #0]
 80136fa:	4604      	mov	r4, r0
 80136fc:	b12b      	cbz	r3, 801370a <f_close+0x16>
 80136fe:	781a      	ldrb	r2, [r3, #0]
 8013700:	b11a      	cbz	r2, 801370a <f_close+0x16>
 8013702:	8881      	ldrh	r1, [r0, #4]
 8013704:	88da      	ldrh	r2, [r3, #6]
 8013706:	4291      	cmp	r1, r2
 8013708:	d003      	beq.n	8013712 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 801370a:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 801370c:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 801370e:	2009      	movs	r0, #9
}
 8013710:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013712:	7858      	ldrb	r0, [r3, #1]
 8013714:	f7fd f8ec 	bl	80108f0 <disk_status>
 8013718:	07c1      	lsls	r1, r0, #31
 801371a:	d4f6      	bmi.n	801370a <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801371c:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801371e:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013720:	065a      	lsls	r2, r3, #25
 8013722:	d53c      	bpl.n	801379e <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013724:	061b      	lsls	r3, r3, #24
 8013726:	d45d      	bmi.n	80137e4 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 8013728:	f7fc fff8 	bl	801071c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 801372c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801372e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 8013730:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013732:	4299      	cmp	r1, r3
 8013734:	d004      	beq.n	8013740 <f_close+0x4c>
 8013736:	4628      	mov	r0, r5
 8013738:	f7fd faa4 	bl	8010c84 <move_window.part.0>
				if (res == FR_OK) {
 801373c:	2800      	cmp	r0, #0
 801373e:	d1e5      	bne.n	801370c <f_close+0x18>
					dir = fp->dir_ptr;
 8013740:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013742:	7ad3      	ldrb	r3, [r2, #11]
 8013744:	f043 0320 	orr.w	r3, r3, #32
 8013748:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801374a:	68a3      	ldr	r3, [r4, #8]
 801374c:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801374e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8013752:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 8013754:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8013756:	7809      	ldrb	r1, [r1, #0]
 8013758:	2903      	cmp	r1, #3
 801375a:	d103      	bne.n	8013764 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801375c:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801375e:	7513      	strb	r3, [r2, #20]
 8013760:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8013762:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013764:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013766:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8013768:	7596      	strb	r6, [r2, #22]
 801376a:	0a19      	lsrs	r1, r3, #8
 801376c:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 801376e:	7751      	strb	r1, [r2, #29]
 8013770:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013772:	0e1b      	lsrs	r3, r3, #24
 8013774:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 8013776:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8013778:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801377a:	75d3      	strb	r3, [r2, #23]
 801377c:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801377e:	0e36      	lsrs	r6, r6, #24
 8013780:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 8013782:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 8013784:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8013786:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
 8013788:	2301      	movs	r3, #1
 801378a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801378c:	f7fd ff8a 	bl	80116a4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013790:	7d23      	ldrb	r3, [r4, #20]
 8013792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013796:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8013798:	2800      	cmp	r0, #0
 801379a:	d1b7      	bne.n	801370c <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801379c:	6825      	ldr	r5, [r4, #0]
 801379e:	2d00      	cmp	r5, #0
 80137a0:	d0b3      	beq.n	801370a <f_close+0x16>
 80137a2:	782b      	ldrb	r3, [r5, #0]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d0b0      	beq.n	801370a <f_close+0x16>
 80137a8:	88a2      	ldrh	r2, [r4, #4]
 80137aa:	88eb      	ldrh	r3, [r5, #6]
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d1ac      	bne.n	801370a <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80137b0:	7868      	ldrb	r0, [r5, #1]
 80137b2:	f7fd f89d 	bl	80108f0 <disk_status>
 80137b6:	f010 0001 	ands.w	r0, r0, #1
 80137ba:	d1a6      	bne.n	801370a <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80137bc:	6923      	ldr	r3, [r4, #16]
 80137be:	3b01      	subs	r3, #1
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	d81c      	bhi.n	80137fe <f_close+0x10a>
		n = Files[i].ctr;
 80137c4:	4912      	ldr	r1, [pc, #72]	; (8013810 <f_close+0x11c>)
 80137c6:	011d      	lsls	r5, r3, #4
 80137c8:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 80137cc:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80137ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80137d2:	d016      	beq.n	8013802 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 80137d4:	b1b2      	cbz	r2, 8013804 <f_close+0x110>
 80137d6:	3a01      	subs	r2, #1
 80137d8:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 80137da:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80137dc:	b192      	cbz	r2, 8013804 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 80137de:	2300      	movs	r3, #0
 80137e0:	6023      	str	r3, [r4, #0]
}
 80137e2:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80137e4:	2301      	movs	r3, #1
 80137e6:	6a22      	ldr	r2, [r4, #32]
 80137e8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80137ec:	7868      	ldrb	r0, [r5, #1]
 80137ee:	f7fd f8a9 	bl	8010944 <disk_write>
 80137f2:	b950      	cbnz	r0, 801380a <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 80137f4:	7d23      	ldrb	r3, [r4, #20]
 80137f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80137fa:	7523      	strb	r3, [r4, #20]
 80137fc:	e794      	b.n	8013728 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 80137fe:	2002      	movs	r0, #2
}
 8013800:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8013802:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013804:	2300      	movs	r3, #0
 8013806:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8013808:	e7e9      	b.n	80137de <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801380a:	2001      	movs	r0, #1
}
 801380c:	bd70      	pop	{r4, r5, r6, pc}
 801380e:	bf00      	nop
 8013810:	20019d1c 	.word	0x20019d1c

08013814 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8013814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013816:	b150      	cbz	r0, 801382e <f_findnext+0x1a>
 8013818:	4605      	mov	r5, r0
 801381a:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801381c:	4c3a      	ldr	r4, [pc, #232]	; (8013908 <f_findnext+0xf4>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801381e:	682b      	ldr	r3, [r5, #0]
 8013820:	b12b      	cbz	r3, 801382e <f_findnext+0x1a>
 8013822:	781a      	ldrb	r2, [r3, #0]
 8013824:	b11a      	cbz	r2, 801382e <f_findnext+0x1a>
 8013826:	88a9      	ldrh	r1, [r5, #4]
 8013828:	88da      	ldrh	r2, [r3, #6]
 801382a:	4291      	cmp	r1, r2
 801382c:	d002      	beq.n	8013834 <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 801382e:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8013830:	4638      	mov	r0, r7
 8013832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013834:	7858      	ldrb	r0, [r3, #1]
 8013836:	f7fd f85b 	bl	80108f0 <disk_status>
 801383a:	f010 0101 	ands.w	r1, r0, #1
 801383e:	d1f6      	bne.n	801382e <f_findnext+0x1a>
		if (!fno) {
 8013840:	2e00      	cmp	r6, #0
 8013842:	d058      	beq.n	80138f6 <f_findnext+0xe2>
			res = dir_read(dp, 0);			/* Read an item */
 8013844:	4628      	mov	r0, r5
 8013846:	f7fd fd0f 	bl	8011268 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 801384a:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 801384e:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8013850:	d1ee      	bne.n	8013830 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013852:	4631      	mov	r1, r6
 8013854:	4628      	mov	r0, r5
 8013856:	f7fd f955 	bl	8010b04 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801385a:	4628      	mov	r0, r5
 801385c:	f7fd fcbe 	bl	80111dc <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8013860:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 8013864:	d14d      	bne.n	8013902 <f_findnext+0xee>
 8013866:	7db3      	ldrb	r3, [r6, #22]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d0e1      	beq.n	8013830 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801386c:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 8013870:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 8013874:	e00f      	b.n	8013896 <f_findnext+0x82>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8013876:	3a20      	subs	r2, #32
 8013878:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801387a:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801387e:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8013882:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8013884:	f1be 0f19 	cmp.w	lr, #25
 8013888:	d817      	bhi.n	80138ba <f_findnext+0xa6>
 801388a:	3b20      	subs	r3, #32
 801388c:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 801388e:	4293      	cmp	r3, r2
 8013890:	d1c5      	bne.n	801381e <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8013892:	2b00      	cmp	r3, #0
 8013894:	d0cc      	beq.n	8013830 <f_findnext+0x1c>
 8013896:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8013898:	f81c 3b01 	ldrb.w	r3, [ip], #1
 801389c:	2b3f      	cmp	r3, #63	; 0x3f
 801389e:	d012      	beq.n	80138c6 <f_findnext+0xb2>
 80138a0:	2b2a      	cmp	r3, #42	; 0x2a
 80138a2:	d010      	beq.n	80138c6 <f_findnext+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80138a4:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80138a8:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80138aa:	2819      	cmp	r0, #25
 80138ac:	d9e3      	bls.n	8013876 <f_findnext+0x62>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80138ae:	2a7f      	cmp	r2, #127	; 0x7f
 80138b0:	d9e3      	bls.n	801387a <f_findnext+0x66>
 80138b2:	4423      	add	r3, r4
 80138b4:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 80138b8:	e7df      	b.n	801387a <f_findnext+0x66>
 80138ba:	2b7f      	cmp	r3, #127	; 0x7f
 80138bc:	d9e7      	bls.n	801388e <f_findnext+0x7a>
 80138be:	4420      	add	r0, r4
 80138c0:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 80138c4:	e7e3      	b.n	801388e <f_findnext+0x7a>
 80138c6:	4694      	mov	ip, r2
				nm = nx = 0;
 80138c8:	2300      	movs	r3, #0
 80138ca:	f81c eb01 	ldrb.w	lr, [ip], #1
 80138ce:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 80138d0:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 80138d4:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 80138d6:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 80138da:	bf0c      	ite	eq
 80138dc:	3201      	addeq	r2, #1
 80138de:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 80138e0:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 80138e4:	d0f4      	beq.n	80138d0 <f_findnext+0xbc>
 80138e6:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 80138ea:	d0f1      	beq.n	80138d0 <f_findnext+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80138ec:	f7fd f894 	bl	8010a18 <pattern_matching>
 80138f0:	2800      	cmp	r0, #0
 80138f2:	d094      	beq.n	801381e <f_findnext+0xa>
 80138f4:	e79c      	b.n	8013830 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80138f6:	4631      	mov	r1, r6
 80138f8:	4628      	mov	r0, r5
}
 80138fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80138fe:	f7fe b811 	b.w	8011924 <dir_sdi>
 8013902:	4607      	mov	r7, r0
 8013904:	e794      	b.n	8013830 <f_findnext+0x1c>
 8013906:	bf00      	nop
 8013908:	0801ef24 	.word	0x0801ef24

0801390c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 801390c:	b570      	push	{r4, r5, r6, lr}
 801390e:	b082      	sub	sp, #8
 8013910:	4615      	mov	r5, r2
 8013912:	4604      	mov	r4, r0
 8013914:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8013916:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 8013918:	2200      	movs	r2, #0
 801391a:	a901      	add	r1, sp, #4
 801391c:	4668      	mov	r0, sp
 801391e:	9500      	str	r5, [sp, #0]
 8013920:	f7fd f9ea 	bl	8010cf8 <find_volume>
	if (res == FR_OK) {
 8013924:	b118      	cbz	r0, 801392e <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013926:	2300      	movs	r3, #0
 8013928:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 801392a:	b002      	add	sp, #8
 801392c:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801392e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8013932:	4620      	mov	r0, r4
		obj->fs = fs;
 8013934:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8013936:	f7fe fa57 	bl	8011de8 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 801393a:	bb08      	cbnz	r0, 8013980 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801393c:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 8013940:	2b00      	cmp	r3, #0
 8013942:	db25      	blt.n	8013990 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8013944:	79a3      	ldrb	r3, [r4, #6]
 8013946:	06db      	lsls	r3, r3, #27
 8013948:	d520      	bpl.n	801398c <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801394a:	9b01      	ldr	r3, [sp, #4]
 801394c:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 801394e:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 8013950:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8013952:	2803      	cmp	r0, #3
 8013954:	d102      	bne.n	801395c <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013956:	8a89      	ldrh	r1, [r1, #20]
 8013958:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801395c:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
 801395e:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013960:	2100      	movs	r1, #0
 8013962:	4620      	mov	r0, r4
				obj->id = fs->id;
 8013964:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8013966:	f7fd ffdd 	bl	8011924 <dir_sdi>
				if (res == FR_OK) {
 801396a:	b948      	cbnz	r0, 8013980 <f_findfirst+0x74>
					if (obj->sclust) {
 801396c:	68a3      	ldr	r3, [r4, #8]
 801396e:	b98b      	cbnz	r3, 8013994 <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8013970:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 8013972:	4631      	mov	r1, r6
 8013974:	4620      	mov	r0, r4
}
 8013976:	b002      	add	sp, #8
 8013978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 801397c:	f7ff bf4a 	b.w	8013814 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013980:	2804      	cmp	r0, #4
 8013982:	d1d0      	bne.n	8013926 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013984:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013986:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8013988:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 801398a:	e7ce      	b.n	801392a <f_findfirst+0x1e>
					res = FR_NO_PATH;
 801398c:	2005      	movs	r0, #5
 801398e:	e7ca      	b.n	8013926 <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8013990:	9b01      	ldr	r3, [sp, #4]
 8013992:	e7e4      	b.n	801395e <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8013994:	4601      	mov	r1, r0
 8013996:	4620      	mov	r0, r4
 8013998:	f7fc ffee 	bl	8010978 <inc_lock>
 801399c:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801399e:	2800      	cmp	r0, #0
 80139a0:	d1e7      	bne.n	8013972 <f_findfirst+0x66>
 80139a2:	2012      	movs	r0, #18
 80139a4:	e7bf      	b.n	8013926 <f_findfirst+0x1a>
 80139a6:	bf00      	nop

080139a8 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80139a8:	4b10      	ldr	r3, [pc, #64]	; (80139ec <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80139aa:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 80139ac:	7a5c      	ldrb	r4, [r3, #9]
 80139ae:	b9cc      	cbnz	r4, 80139e4 <FATFS_LinkDriver+0x3c>
 80139b0:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 80139b2:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 80139b6:	7a5c      	ldrb	r4, [r3, #9]
 80139b8:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80139ba:	7a5c      	ldrb	r4, [r3, #9]
 80139bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80139c0:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80139c2:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 80139c4:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80139c6:	441c      	add	r4, r3
 80139c8:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 80139ca:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 80139cc:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80139ce:	b2e4      	uxtb	r4, r4
 80139d0:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 80139d2:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 80139d4:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80139d6:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80139d8:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 80139da:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80139dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80139e0:	708b      	strb	r3, [r1, #2]
}
 80139e2:	4770      	bx	lr
  uint8_t ret = 1;
 80139e4:	2001      	movs	r0, #1
}
 80139e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139ea:	4770      	bx	lr
 80139ec:	20019f40 	.word	0x20019f40

080139f0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80139f0:	287f      	cmp	r0, #127	; 0x7f
 80139f2:	d912      	bls.n	8013a1a <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80139f4:	b971      	cbnz	r1, 8013a14 <ff_convert+0x24>
 80139f6:	4b0c      	ldr	r3, [pc, #48]	; (8013a28 <ff_convert+0x38>)
 80139f8:	e001      	b.n	80139fe <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80139fa:	2980      	cmp	r1, #128	; 0x80
 80139fc:	d00c      	beq.n	8013a18 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
 80139fe:	f833 2b02 	ldrh.w	r2, [r3], #2
 8013a02:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8013a06:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 8013a08:	4282      	cmp	r2, r0
 8013a0a:	d1f6      	bne.n	80139fa <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 8013a0c:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 8013a10:	b280      	uxth	r0, r0
 8013a12:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013a14:	28ff      	cmp	r0, #255	; 0xff
 8013a16:	d901      	bls.n	8013a1c <ff_convert+0x2c>
 8013a18:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8013a1a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013a1c:	4b02      	ldr	r3, [pc, #8]	; (8013a28 <ff_convert+0x38>)
 8013a1e:	3880      	subs	r0, #128	; 0x80
 8013a20:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8013a24:	4770      	bx	lr
 8013a26:	bf00      	nop
 8013a28:	0801efb4 	.word	0x0801efb4

08013a2c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8013a2c:	4b22      	ldr	r3, [pc, #136]	; (8013ab8 <ff_wtoupper+0x8c>)
 8013a2e:	4a23      	ldr	r2, [pc, #140]	; (8013abc <ff_wtoupper+0x90>)
 8013a30:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8013a34:	bf28      	it	cs
 8013a36:	4613      	movcs	r3, r2
{
 8013a38:	b510      	push	{r4, lr}
 8013a3a:	3304      	adds	r3, #4
 8013a3c:	e001      	b.n	8013a42 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8013a3e:	3304      	adds	r3, #4
 8013a40:	b1da      	cbz	r2, 8013a7a <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
 8013a42:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8013a46:	461c      	mov	r4, r3
 8013a48:	b1b1      	cbz	r1, 8013a78 <ff_wtoupper+0x4c>
 8013a4a:	4288      	cmp	r0, r1
 8013a4c:	d314      	bcc.n	8013a78 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013a4e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8013a52:	fa5f fc82 	uxtb.w	ip, r2
 8013a56:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8013a58:	eb0c 0e01 	add.w	lr, ip, r1
 8013a5c:	4570      	cmp	r0, lr
 8013a5e:	daee      	bge.n	8013a3e <ff_wtoupper+0x12>
			switch (cmd) {
 8013a60:	2a08      	cmp	r2, #8
 8013a62:	d809      	bhi.n	8013a78 <ff_wtoupper+0x4c>
 8013a64:	e8df f002 	tbb	[pc, r2]
 8013a68:	19161005 	.word	0x19161005
 8013a6c:	25221f1c 	.word	0x25221f1c
 8013a70:	0c          	.byte	0x0c
 8013a71:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013a72:	1a41      	subs	r1, r0, r1
 8013a74:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8013a78:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
 8013a7a:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8013a7e:	e7dc      	b.n	8013a3a <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013a80:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8013a84:	b280      	uxth	r0, r0
}
 8013a86:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8013a88:	1a43      	subs	r3, r0, r1
 8013a8a:	f003 0301 	and.w	r3, r3, #1
 8013a8e:	1ac0      	subs	r0, r0, r3
 8013a90:	b280      	uxth	r0, r0
}
 8013a92:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8013a94:	3810      	subs	r0, #16
 8013a96:	b280      	uxth	r0, r0
}
 8013a98:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 8013a9a:	3820      	subs	r0, #32
 8013a9c:	b280      	uxth	r0, r0
}
 8013a9e:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8013aa0:	3830      	subs	r0, #48	; 0x30
 8013aa2:	b280      	uxth	r0, r0
}
 8013aa4:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 8013aa6:	381a      	subs	r0, #26
 8013aa8:	b280      	uxth	r0, r0
}
 8013aaa:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 8013aac:	3008      	adds	r0, #8
 8013aae:	b280      	uxth	r0, r0
}
 8013ab0:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 8013ab2:	3850      	subs	r0, #80	; 0x50
 8013ab4:	b280      	uxth	r0, r0
}
 8013ab6:	bd10      	pop	{r4, pc}
 8013ab8:	0801f0b4 	.word	0x0801f0b4
 8013abc:	0801f2a8 	.word	0x0801f2a8

08013ac0 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
 8013ac0:	b538      	push	{r3, r4, r5, lr}
 8013ac2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8013ac6:	680d      	ldr	r5, [r1, #0]
{
 8013ac8:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 8013aca:	2010      	movs	r0, #16
{
 8013acc:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 8013ad0:	4629      	mov	r1, r5
 8013ad2:	f002 ffe3 	bl	8016a9c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 8013ad6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 8013ada:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 8013adc:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 8013ade:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 8013ae0:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
 8013ae4:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 8013ae6:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 8013aea:	edc0 7a02 	vstr	s15, [r0, #8]
}
 8013aee:	ecbd 8b02 	vpop	{d8}
 8013af2:	bd38      	pop	{r3, r4, r5, pc}

08013af4 <tPowerFollower_setFactor>:
    mpool_free((char*)p, p->mempool);
}

void tPowerFollower_setFactor(tPowerFollower* const pf, float factor)
{
    _tPowerFollower* p = *pf;
 8013af4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013af8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8013b14 <tPowerFollower_setFactor+0x20>
 8013afc:	6803      	ldr	r3, [r0, #0]
 8013afe:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
 8013b02:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 8013b06:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
 8013b0a:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 8013b0e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8013b12:	4770      	bx	lr
 8013b14:	00000000 	.word	0x00000000

08013b18 <tPowerFollower_tick>:

float tPowerFollower_tick(tPowerFollower* const pf, float input)
{
    _tPowerFollower* p = *pf;
 8013b18:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 8013b1a:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013b1e:	edd3 6a03 	vldr	s13, [r3, #12]
 8013b22:	ed93 0a02 	vldr	s0, [r3, #8]
 8013b26:	ed93 7a01 	vldr	s14, [r3, #4]
 8013b2a:	ee20 0a26 	vmul.f32	s0, s0, s13
 8013b2e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013b32:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 8013b36:	4770      	bx	lr

08013b38 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 8013b38:	b570      	push	{r4, r5, r6, lr}
 8013b3a:	460d      	mov	r5, r1
 8013b3c:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8013b3e:	202c      	movs	r0, #44	; 0x2c
{
 8013b40:	ed2d 8b02 	vpush	{d8}
 8013b44:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 8013b46:	6811      	ldr	r1, [r2, #0]
{
 8013b48:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8013b4c:	9101      	str	r1, [sp, #4]
 8013b4e:	f002 ffa5 	bl	8016a9c <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 8013b52:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
 8013b56:	9901      	ldr	r1, [sp, #4]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8013b58:	6030      	str	r0, [r6, #0]
 8013b5a:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 8013b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 8013b60:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 8013b62:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 8013b64:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6c:	d550      	bpl.n	8013c10 <tLinearDelay_initToPool+0xd8>
 8013b6e:	edc0 7a08 	vstr	s15, [r0, #32]
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8013b72:	00a8      	lsls	r0, r5, #2
 8013b74:	f002 ff92 	bl	8016a9c <mpool_alloc>

    d->gain = 1.0f;
 8013b78:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
 8013b7c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8013c24 <tLinearDelay_initToPool+0xec>
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 8013b80:	2300      	movs	r3, #0
    d->gain = 1.0f;
 8013b82:	6062      	str	r2, [r4, #4]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8013b84:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
 8013b86:	ed84 0a04 	vstr	s0, [r4, #16]
    d->lastOut = 0.0f;
 8013b8a:	ed84 0a03 	vstr	s0, [r4, #12]

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8013b8e:	edd4 0a08 	vldr	s1, [r4, #32]
    d->outPoint = 0;
 8013b92:	e9c4 3305 	strd	r3, r3, [r4, #20]
    _tLinearDelay* d = *dl;
 8013b96:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8013b98:	edd5 7a07 	vldr	s15, [r5, #28]
 8013b9c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8013ba0:	f002 fd8c 	bl	80166bc <LEAF_clip>

    float outPointer = d->inPoint - d->delay;
 8013ba4:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8013ba8:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
 8013bac:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 8013bb0:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
 8013bb2:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 8013bb6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bbe:	d50a      	bpl.n	8013bd6 <tLinearDelay_initToPool+0x9e>
        outPointer += d->maxDelay; // modulo maximum length
 8013bc0:	ee07 2a90 	vmov	s15, r2
 8013bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013bc8:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 8013bcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd4:	d4f8      	bmi.n	8013bc8 <tLinearDelay_initToPool+0x90>

    d->outPoint = (uint32_t) outPointer;   // integer part
 8013bd6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013bda:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 8013bde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8013be2:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8013be6:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 8013be8:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 8013bec:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8013bee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013bf2:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 8013bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 8013bfa:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 8013bfe:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8013c02:	d101      	bne.n	8013c08 <tLinearDelay_initToPool+0xd0>
 8013c04:	2300      	movs	r3, #0
 8013c06:	61ab      	str	r3, [r5, #24]
}
 8013c08:	b002      	add	sp, #8
 8013c0a:	ecbd 8b02 	vpop	{d8}
 8013c0e:	bd70      	pop	{r4, r5, r6, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
 8013c10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013c14:	2300      	movs	r3, #0
 8013c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c1a:	bf4c      	ite	mi
 8013c1c:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
 8013c1e:	ed80 8a08 	vstrpl	s16, [r0, #32]
 8013c22:	e7a6      	b.n	8013b72 <tLinearDelay_initToPool+0x3a>
 8013c24:	00000000 	.word	0x00000000

08013c28 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
 8013c28:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8013c2a:	69cb      	ldr	r3, [r1, #28]
 8013c2c:	b14b      	cbz	r3, 8013c42 <tLinearDelay_clear+0x1a>
 8013c2e:	2300      	movs	r3, #0
        d->buff[i] = 0;
 8013c30:	2000      	movs	r0, #0
 8013c32:	688a      	ldr	r2, [r1, #8]
 8013c34:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 8013c38:	3301      	adds	r3, #1
        d->buff[i] = 0;
 8013c3a:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8013c3c:	69ca      	ldr	r2, [r1, #28]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	d8f7      	bhi.n	8013c32 <tLinearDelay_clear+0xa>
}
 8013c42:	4770      	bx	lr

08013c44 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
 8013c44:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 8013c46:	edd3 7a01 	vldr	s15, [r3, #4]
 8013c4a:	6959      	ldr	r1, [r3, #20]
 8013c4c:	689a      	ldr	r2, [r3, #8]
 8013c4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013c52:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8013c56:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 8013c5a:	695a      	ldr	r2, [r3, #20]
 8013c5c:	69d9      	ldr	r1, [r3, #28]
 8013c5e:	3201      	adds	r2, #1
 8013c60:	428a      	cmp	r2, r1
 8013c62:	615a      	str	r2, [r3, #20]
 8013c64:	d101      	bne.n	8013c6a <tLinearDelay_tickIn+0x26>
 8013c66:	2200      	movs	r2, #0
 8013c68:	615a      	str	r2, [r3, #20]
}
 8013c6a:	4770      	bx	lr

08013c6c <tLinearDelay_tickOut>:
{
 8013c6c:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 8013c6e:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 8013c70:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 8013c72:	6899      	ldr	r1, [r3, #8]
 8013c74:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013c78:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
 8013c7c:	69dc      	ldr	r4, [r3, #28]
 8013c7e:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 8013c80:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
 8013c84:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 8013c86:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c8a:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 8013c8e:	d20b      	bcs.n	8013ca8 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 8013c90:	ed90 7a01 	vldr	s14, [r0, #4]
 8013c94:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8013c98:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 8013c9a:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013c9e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8013ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ca6:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 8013ca8:	ed91 7a00 	vldr	s14, [r1]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8013cac:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
 8013cae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8013cb2:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 8013cb4:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013cb8:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8013cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop

08013cc4 <tLinearDelay_setDelay>:
{
 8013cc4:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 8013cc6:	6804      	ldr	r4, [r0, #0]
{
 8013cc8:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8013ccc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8013d44 <tLinearDelay_setDelay+0x80>
 8013cd0:	edd4 7a07 	vldr	s15, [r4, #28]
 8013cd4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8013cd8:	f002 fcf0 	bl	80166bc <LEAF_clip>
    float outPointer = d->inPoint - d->delay;
 8013cdc:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8013ce0:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
 8013ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
 8013ce8:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
 8013cea:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 8013cee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf6:	d50a      	bpl.n	8013d0e <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 8013cf8:	ee07 2a90 	vmov	s15, r2
 8013cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013d00:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 8013d04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d0c:	d4f8      	bmi.n	8013d00 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 8013d0e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013d12:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
 8013d16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8013d1a:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8013d1e:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 8013d20:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 8013d24:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8013d26:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013d2a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 8013d2e:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 8013d32:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 8013d36:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8013d3a:	d000      	beq.n	8013d3e <tLinearDelay_setDelay+0x7a>
}
 8013d3c:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	61a3      	str	r3, [r4, #24]
}
 8013d42:	bd10      	pop	{r4, pc}
 8013d44:	00000000 	.word	0x00000000

08013d48 <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 8013d48:	b570      	push	{r4, r5, r6, lr}
 8013d4a:	460d      	mov	r5, r1
 8013d4c:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 8013d4e:	2030      	movs	r0, #48	; 0x30
{
 8013d50:	ed2d 8b02 	vpush	{d8}
 8013d54:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 8013d56:	6811      	ldr	r1, [r2, #0]
{
 8013d58:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 8013d5c:	9101      	str	r1, [sp, #4]
 8013d5e:	f002 fe9d 	bl	8016a9c <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 8013d62:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
 8013d66:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 8013d68:	6030      	str	r0, [r6, #0]
 8013d6a:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 8013d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 8013d70:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 8013d72:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 8013d74:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7c:	d558      	bpl.n	8013e30 <tHermiteDelay_initToPool+0xe8>
 8013d7e:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 8013d82:	2d00      	cmp	r5, #0
 8013d84:	d14f      	bne.n	8013e26 <tHermiteDelay_initToPool+0xde>
 8013d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
 8013d8a:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 8013d8e:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 8013d92:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 8013d96:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 8013d9a:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
 8013d9e:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
 8013da0:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
 8013da2:	60a2      	str	r2, [r4, #8]
    }
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8013da4:	00a8      	lsls	r0, r5, #2
 8013da6:	f002 fe79 	bl	8016a9c <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
 8013daa:	2300      	movs	r3, #0
    d->gain = 1.0f;
 8013dac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8013db0:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
 8013db2:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 8013db4:	60e3      	str	r3, [r4, #12]

    d->inPoint = 0;
 8013db6:	2300      	movs	r3, #0
    d->gain = 1.0f;
 8013db8:	6222      	str	r2, [r4, #32]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
 8013dba:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
 8013dbe:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, float delay)
{
    _tHermiteDelay* d = *dl;
 8013dc2:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    float outPointer = d->inPoint - d->delay;
 8013dc4:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 8013dc8:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
 8013dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013dd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
 8013dd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ddc:	d50a      	bpl.n	8013df4 <tHermiteDelay_initToPool+0xac>
        outPointer += d->maxDelay; // modulo maximum length
 8013dde:	ed93 7a07 	vldr	s14, [r3, #28]
 8013de2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013de6:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 8013dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df2:	d4f8      	bmi.n	8013de6 <tHermiteDelay_initToPool+0x9e>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
 8013df4:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
 8013df8:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
 8013dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8013dfe:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
 8013e02:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
 8013e06:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
 8013e0a:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
 8013e0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 8013e10:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
 8013e14:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8013e16:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
 8013e1a:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
 8013e1e:	b002      	add	sp, #8
 8013e20:	ecbd 8b02 	vpop	{d8}
 8013e24:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 8013e26:	1e6b      	subs	r3, r5, #1
 8013e28:	422b      	tst	r3, r5
 8013e2a:	461a      	mov	r2, r3
 8013e2c:	d1ad      	bne.n	8013d8a <tHermiteDelay_initToPool+0x42>
 8013e2e:	e7b8      	b.n	8013da2 <tHermiteDelay_initToPool+0x5a>
    else if (delay < 0.0f)  d->delay = 0.0f;
 8013e30:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013e34:	2300      	movs	r3, #0
 8013e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e3a:	bf4c      	ite	mi
 8013e3c:	6243      	strmi	r3, [r0, #36]	; 0x24
    else                    d->delay = delay;
 8013e3e:	ed80 8a09 	vstrpl	s16, [r0, #36]	; 0x24
 8013e42:	e79e      	b.n	8013d82 <tHermiteDelay_initToPool+0x3a>

08013e44 <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
 8013e44:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8013e46:	69cb      	ldr	r3, [r1, #28]
 8013e48:	b14b      	cbz	r3, 8013e5e <tHermiteDelay_clear+0x1a>
 8013e4a:	2300      	movs	r3, #0
        d->buff[i] = 0;
 8013e4c:	2000      	movs	r0, #0
 8013e4e:	684a      	ldr	r2, [r1, #4]
 8013e50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 8013e54:	3301      	adds	r3, #1
        d->buff[i] = 0;
 8013e56:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8013e58:	69ca      	ldr	r2, [r1, #28]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d8f7      	bhi.n	8013e4e <tHermiteDelay_clear+0xa>
}
 8013e5e:	4770      	bx	lr

08013e60 <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
 8013e60:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
 8013e62:	6959      	ldr	r1, [r3, #20]
 8013e64:	685a      	ldr	r2, [r3, #4]
 8013e66:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8013e6a:	ed82 0a00 	vstr	s0, [r2]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 8013e6e:	695a      	ldr	r2, [r3, #20]
 8013e70:	6899      	ldr	r1, [r3, #8]
 8013e72:	3201      	adds	r2, #1
 8013e74:	400a      	ands	r2, r1
 8013e76:	615a      	str	r2, [r3, #20]
}
 8013e78:	4770      	bx	lr
 8013e7a:	bf00      	nop

08013e7c <tHermiteDelay_tickOut>:
{
 8013e7c:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
 8013e7e:	6804      	ldr	r4, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 8013e80:	69a1      	ldr	r1, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8013e82:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
                                                d->buff[(idx + 2) & d->bufferMask],
 8013e86:	1c8b      	adds	r3, r1, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8013e88:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                                d->buff[(idx + 2) & d->bufferMask],
 8013e8c:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8013e8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013e92:	edd3 1a00 	vldr	s3, [r3]
 8013e96:	69e3      	ldr	r3, [r4, #28]
 8013e98:	440b      	add	r3, r1
 8013e9a:	3b01      	subs	r3, #1
 8013e9c:	4003      	ands	r3, r0
 8013e9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013ea2:	ed93 0a00 	vldr	s0, [r3]
                                                d->buff[(idx + 1) & d->bufferMask],
 8013ea6:	1c4b      	adds	r3, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8013ea8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
 8013eac:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8013eae:	edd1 0a00 	vldr	s1, [r1]
 8013eb2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013eb6:	ed92 1a00 	vldr	s2, [r2]
 8013eba:	f002 fce9 	bl	8016890 <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 8013ebe:	69a3      	ldr	r3, [r4, #24]
 8013ec0:	68a2      	ldr	r2, [r4, #8]
 8013ec2:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8013ec4:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 8013ec8:	4013      	ands	r3, r2
 8013eca:	61a3      	str	r3, [r4, #24]
}
 8013ecc:	bd10      	pop	{r4, pc}
 8013ece:	bf00      	nop

08013ed0 <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
 8013ed0:	6803      	ldr	r3, [r0, #0]
    float outPointer = d->inPoint - d->delay;
 8013ed2:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 8013ed6:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
 8013eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ede:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 8013ee2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eea:	d50a      	bpl.n	8013f02 <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
 8013eec:	edd3 7a07 	vldr	s15, [r3, #28]
 8013ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ef4:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 8013ef8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f00:	d4f8      	bmi.n	8013ef4 <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
 8013f02:	eefc 6ac0 	vcvt.u32.f32	s13, s0
    d->outPoint &= d->bufferMask;
 8013f06:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
 8013f08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8013f0c:	eeb8 7a66 	vcvt.f32.u32	s14, s13
    d->outPoint &= d->bufferMask;
 8013f10:	ee16 1a90 	vmov	r1, s13
    d->omAlpha = 1.0f - d->alpha;
 8013f14:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint &= d->bufferMask;
 8013f18:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
 8013f1a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 8013f1e:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->outPoint &= d->bufferMask;
 8013f22:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8013f24:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
 8013f28:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8013f2c:	4770      	bx	lr
 8013f2e:	bf00      	nop

08013f30 <tHermiteDelay_tapOut>:

float tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
 8013f30:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 8013f32:	43c9      	mvns	r1, r1
 8013f34:	6958      	ldr	r0, [r3, #20]
    
    return d->buff[tap];
 8013f36:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 8013f3a:	4401      	add	r1, r0
 8013f3c:	4011      	ands	r1, r2
    return d->buff[tap];
 8013f3e:	eb03 0181 	add.w	r1, r3, r1, lsl #2

}
 8013f42:	ed91 0a00 	vldr	s0, [r1]
 8013f46:	4770      	bx	lr

08013f48 <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

float tHermiteDelay_addTo (tHermiteDelay* const dl, float value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
 8013f48:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 8013f4a:	43c9      	mvns	r1, r1
 8013f4c:	6958      	ldr	r0, [r3, #20]
    
    return (d->buff[tap] += value);
 8013f4e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 8013f52:	4401      	add	r1, r0
 8013f54:	4011      	ands	r1, r2
    return (d->buff[tap] += value);
 8013f56:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8013f5a:	edd1 7a00 	vldr	s15, [r1]
 8013f5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f62:	ed81 0a00 	vstr	s0, [r1]
}
 8013f66:	4770      	bx	lr

08013f68 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
 8013f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f6c:	460d      	mov	r5, r1

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
 8013f6e:	1e16      	subs	r6, r2, #0
    _tMempool* m = *mp;
 8013f70:	6999      	ldr	r1, [r3, #24]
{
 8013f72:	b082      	sub	sp, #8
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8013f74:	f1a5 0302 	sub.w	r3, r5, #2
    if (extraQuality) offset = 6;
 8013f78:	bf0c      	ite	eq
 8013f7a:	2700      	moveq	r7, #0
 8013f7c:	2706      	movne	r7, #6
{
 8013f7e:	4680      	mov	r8, r0
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8013f80:	2b1e      	cmp	r3, #30
 8013f82:	d93a      	bls.n	8013ffa <tOversampler_init+0x92>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
 8013f84:	2d40      	cmp	r5, #64	; 0x40
 8013f86:	d135      	bne.n	8013ff4 <tOversampler_init+0x8c>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8013f88:	2028      	movs	r0, #40	; 0x28
 8013f8a:	9101      	str	r1, [sp, #4]
 8013f8c:	f002 fd86 	bl	8016a9c <mpool_alloc>
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8013f90:	ee07 5a90 	vmov	s15, r5
        os->mempool = m;
 8013f94:	9901      	ldr	r1, [sp, #4]
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8013f96:	4604      	mov	r4, r0
 8013f98:	f8c8 0000 	str.w	r0, [r8]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8013f9c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->mempool = m;
 8013fa0:	6001      	str	r1, [r0, #0]
        os->ratio = os->maxRatio;
 8013fa2:	60c5      	str	r5, [r0, #12]
        os->offset = offset;
 8013fa4:	6107      	str	r7, [r0, #16]
        os->allowHighQuality = extraQuality;
 8013fa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8013faa:	f009 f887 	bl	801d0bc <log2f>
 8013fae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8013fb2:	4a16      	ldr	r2, [pc, #88]	; (801400c <tOversampler_init+0xa4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013fb4:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8013fb6:	ee17 3a90 	vmov	r3, s15
 8013fba:	3b01      	subs	r3, #1
 8013fbc:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8013fbe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013fc2:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8013fc6:	4a12      	ldr	r2, [pc, #72]	; (8014010 <tOversampler_init+0xa8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8013fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013fcc:	ee17 0a90 	vmov	r0, s15
 8013fd0:	edc4 7a08 	vstr	s15, [r4, #32]
        os->phaseLength = os->numTaps / os->ratio;
 8013fd4:	fb90 f5f5 	sdiv	r5, r0, r5
 8013fd8:	6265      	str	r5, [r4, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013fda:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8013fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013fe0:	6163      	str	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013fe2:	f002 fd5b 	bl	8016a9c <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013fe6:	6a23      	ldr	r3, [r4, #32]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013fe8:	61a0      	str	r0, [r4, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013fea:	9901      	ldr	r1, [sp, #4]
 8013fec:	00d8      	lsls	r0, r3, #3
 8013fee:	f002 fd55 	bl	8016a9c <mpool_alloc>
 8013ff2:	61e0      	str	r0, [r4, #28]
}
 8013ff4:	b002      	add	sp, #8
 8013ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8013ffa:	4a06      	ldr	r2, [pc, #24]	; (8014014 <tOversampler_init+0xac>)
 8013ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8014000:	07db      	lsls	r3, r3, #31
 8014002:	d4c1      	bmi.n	8013f88 <tOversampler_init+0x20>
}
 8014004:	b002      	add	sp, #8
 8014006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801400a:	bf00      	nop
 801400c:	080289e4 	.word	0x080289e4
 8014010:	20000298 	.word	0x20000298
 8014014:	40004045 	.word	0x40004045

08014018 <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, float input, float* output)
#else
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
#endif
{
 8014018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
 801401c:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d05b      	beq.n	80140dc <tOversampler_upsample+0xc4>
    {
        output[0] = input;
        return;
    }
    
    float *pState = os->upState;                 /* State pointer */
 8014024:	69be      	ldr	r6, [r7, #24]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 8014026:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8014028:	f8d7 8014 	ldr.w	r8, [r7, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 801402c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8014030:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 8014034:	68fc      	ldr	r4, [r7, #12]
 8014036:	46a1      	mov	r9, r4
    
    while (i > 0U)
 8014038:	b3ac      	cbz	r4, 80140a6 <tOversampler_upsample+0x8e>
    j = 1U;
 801403a:	f04f 0e01 	mov.w	lr, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 801403e:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80140e4 <tOversampler_upsample+0xcc>
        ptr2 = pCoeffs + (os->ratio - j);
 8014042:	eba4 030e 	sub.w	r3, r4, lr
 8014046:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 801404a:	b325      	cbz	r5, 8014096 <tOversampler_upsample+0x7e>
 801404c:	2c01      	cmp	r4, #1
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 801404e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014052:	d135      	bne.n	80140c0 <tOversampler_upsample+0xa8>
 8014054:	462a      	mov	r2, r5
        ptr1 = pState;
 8014056:	4630      	mov	r0, r6
        sum0 = 0.0f;
 8014058:	eddf 7a22 	vldr	s15, [pc, #136]	; 80140e4 <tOversampler_upsample+0xcc>
            sum0 += *ptr1++ * *ptr2;
 801405c:	edd3 6a00 	vldr	s13, [r3]
        while (tapCnt > 0U)
 8014060:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 8014062:	ecb0 7a01 	vldmia	r0!, {s14}
            ptr2 += os->ratio;
 8014066:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 8014068:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 801406c:	d1f6      	bne.n	801405c <tOversampler_upsample+0x44>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
 801406e:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
 8014072:	45f1      	cmp	r9, lr
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 8014074:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 8014078:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801407c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014080:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8014084:	d00f      	beq.n	80140a6 <tOversampler_upsample+0x8e>
        ptr2 = pCoeffs + (os->ratio - j);
 8014086:	68fc      	ldr	r4, [r7, #12]
 8014088:	469e      	mov	lr, r3
 801408a:	eba4 030e 	sub.w	r3, r4, lr
 801408e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 8014092:	2d00      	cmp	r5, #0
 8014094:	d1da      	bne.n	801404c <tOversampler_upsample+0x34>
 8014096:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
 801409a:	45f1      	cmp	r9, lr
        j++;
 801409c:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 80140a0:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 80140a4:	d1ef      	bne.n	8014086 <tOversampler_upsample+0x6e>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 80140a6:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 80140a8:	f106 0604 	add.w	r6, r6, #4
    pStateCur = os->upState;
 80140ac:	69ba      	ldr	r2, [r7, #24]
    while (tapCnt > 0U)
 80140ae:	d005      	beq.n	80140bc <tOversampler_upsample+0xa4>
    {
        *pStateCur++ = *pState++;
 80140b0:	f856 1b04 	ldr.w	r1, [r6], #4
    while (tapCnt > 0U)
 80140b4:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 80140b6:	f842 1b04 	str.w	r1, [r2], #4
    while (tapCnt > 0U)
 80140ba:	d1f9      	bne.n	80140b0 <tOversampler_upsample+0x98>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 80140bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
 80140c0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80140e4 <tOversampler_upsample+0xcc>
            ptr2 += os->ratio;
 80140c4:	462a      	mov	r2, r5
        ptr1 = pState;
 80140c6:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
 80140c8:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 80140cc:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 80140ce:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 80140d2:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 80140d4:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 80140d8:	d1f6      	bne.n	80140c8 <tOversampler_upsample+0xb0>
 80140da:	e7c8      	b.n	801406e <tOversampler_upsample+0x56>
        output[0] = input;
 80140dc:	ed81 0a00 	vstr	s0, [r1]
}
 80140e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140e4:	00000000 	.word	0x00000000

080140e8 <tOversampler_downsample>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, float* input)
#else
float tOversampler_downsample(tOversampler *const osr, float* input)
#endif
{
 80140e8:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
 80140ea:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
 80140ec:	68f3      	ldr	r3, [r6, #12]
 80140ee:	2b01      	cmp	r3, #1
 80140f0:	d029      	beq.n	8014146 <tOversampler_downsample+0x5e>
    float *pStateCur;                          /* Points to the current sample of the state */
    float *px0;                                /* Temporary pointer for state buffer */
    float *pb;                                 /* Temporary pointer for coefficient buffer */
    float x0, c0;                              /* Temporary variables to hold state and coefficient values */
    float acc0;                                /* Accumulator */
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
 80140f2:	6a32      	ldr	r2, [r6, #32]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 80140f4:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 80140f8:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
 80140fa:	4410      	add	r0, r2
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 80140fc:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
 80140fe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
 8014102:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
 8014106:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 8014108:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
 801410c:	d1f9      	bne.n	8014102 <tOversampler_downsample+0x1a>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 801410e:	b1f2      	cbz	r2, 801414e <tOversampler_downsample+0x66>
 8014110:	4613      	mov	r3, r2
    acc0 = 0.0f;
 8014112:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8014160 <tOversampler_downsample+0x78>
    px0 = pState;
 8014116:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 8014118:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
 801411c:	3b01      	subs	r3, #1
        acc0 += x0 * c0;
 801411e:	ecf1 7a01 	vldmia	r1!, {s15}
 8014122:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 8014126:	d1f7      	bne.n	8014118 <tOversampler_downsample+0x30>
        tapCnt--;
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
 8014128:	68f1      	ldr	r1, [r6, #12]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 801412a:	1e53      	subs	r3, r2, #1
    pStateCur = os->downState;
 801412c:	69f0      	ldr	r0, [r6, #28]
    pState = pState + os->ratio;
 801412e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 8014132:	d006      	beq.n	8014142 <tOversampler_downsample+0x5a>
 8014134:	4602      	mov	r2, r0
    {
        *pStateCur++ = *pState++;
 8014136:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 801413a:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 801413c:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 8014140:	d1f9      	bne.n	8014136 <tOversampler_downsample+0x4e>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 8014142:	bc70      	pop	{r4, r5, r6}
 8014144:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
 8014146:	ed91 0a00 	vldr	s0, [r1]
}
 801414a:	bc70      	pop	{r4, r5, r6}
 801414c:	4770      	bx	lr
    pState = pState + os->ratio;
 801414e:	68f1      	ldr	r1, [r6, #12]
    tapCnt = (numTaps - 1U);
 8014150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
 8014154:	69f0      	ldr	r0, [r6, #28]
    acc0 = 0.0f;
 8014156:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8014160 <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
 801415a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 801415e:	e7e9      	b.n	8014134 <tOversampler_downsample+0x4c>
 8014160:	00000000 	.word	0x00000000

08014164 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 8014164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014166:	698f      	ldr	r7, [r1, #24]
{
 8014168:	4606      	mov	r6, r0
 801416a:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 801416c:	2020      	movs	r0, #32
 801416e:	4639      	mov	r1, r7
 8014170:	f002 fc94 	bl	8016a9c <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 8014174:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 8014178:	4a10      	ldr	r2, [pc, #64]	; (80141bc <tCrusher_init+0x58>)
    c->op = 4;
 801417a:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 801417c:	6030      	str	r0, [r6, #0]
 801417e:	4604      	mov	r4, r0
    c->op = 4;
 8014180:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 8014182:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 8014184:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 8014186:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 8014188:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801418a:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 801418c:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801418e:	4629      	mov	r1, r5
 8014190:	f002 fc84 	bl	8016a9c <mpool_alloc>
    s->invRatio = 1.0f;
 8014194:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 8014198:	2200      	movs	r2, #0
    s->count = 0;
 801419a:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801419c:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801419e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80141c0 <tCrusher_init+0x5c>
    s->mempool = m;
 80141a2:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 80141a4:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 80141a6:	6082      	str	r2, [r0, #8]
    s->count = 0;
 80141a8:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 80141aa:	eddf 7a06 	vldr	s15, [pc, #24]	; 80141c4 <tCrusher_init+0x60>
 80141ae:	edd4 6a03 	vldr	s13, [r4, #12]
 80141b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80141b6:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80141ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141bc:	3951b717 	.word	0x3951b717
 80141c0:	3912ccf6 	.word	0x3912ccf6
 80141c4:	3e99999a 	.word	0x3e99999a

080141c8 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 80141c8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014244 <tCrusher_tick+0x7c>
 80141cc:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80141d0:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 80141d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 80141d6:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 80141d8:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 80141dc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80141e0:	6960      	ldr	r0, [r4, #20]
 80141e2:	05c0      	lsls	r0, r0, #23
 80141e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80141e8:	f002 fa62 	bl	80166b0 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 80141ec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80141f0:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 80141f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80141f8:	f002 fa60 	bl	80166bc <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 80141fc:	edd4 0a04 	vldr	s1, [r4, #16]
 8014200:	f002 fa44 	bl	801668c <LEAF_round>
    _tSampleReducer* s = *sr;
 8014204:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 8014206:	68da      	ldr	r2, [r3, #12]
 8014208:	edd3 7a01 	vldr	s15, [r3, #4]
 801420c:	ee07 2a10 	vmov	s14, r2
 8014210:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801421c:	dc08      	bgt.n	8014230 <tCrusher_tick+0x68>
    s->count++;
 801421e:	3201      	adds	r2, #1
    return s->hold;
 8014220:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 8014224:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 8014226:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 801422a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801422e:	bd10      	pop	{r4, pc}
        s->hold = input;
 8014230:	2201      	movs	r2, #1
 8014232:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 8014236:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 8014238:	edd4 7a06 	vldr	s15, [r4, #24]
}
 801423c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014240:	bd10      	pop	{r4, pc}
 8014242:	bf00      	nop
 8014244:	459c4000 	.word	0x459c4000

08014248 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 8014248:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->rnd = rnd;
}

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
 801424c:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 801424e:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 8014252:	eeb4 0a67 	vcmp.f32	s0, s15
 8014256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801425a:	d809      	bhi.n	8014270 <tCrusher_setSamplingRatio+0x28>
 801425c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014264:	db04      	blt.n	8014270 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 8014266:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 801426a:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 801426c:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 8014270:	4770      	bx	lr
 8014272:	bf00      	nop

08014274 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
 8014274:	b570      	push	{r4, r5, r6, lr}
 8014276:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
 801427a:	698d      	ldr	r5, [r1, #24]
{
 801427c:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 801427e:	206c      	movs	r0, #108	; 0x6c
 8014280:	4629      	mov	r1, r5
 8014282:	f002 fc0b 	bl	8016a9c <mpool_alloc>
 8014286:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8014288:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 801428a:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
 801428e:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 8014290:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 8014292:	ed93 8a00 	vldr	s16, [r3]
 8014296:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 801429a:	ee80 0a08 	vdiv.f32	s0, s0, s16
 801429e:	f008 fe2b 	bl	801cef8 <expf>
 80142a2:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 80142a6:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 80142aa:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80142ae:	f008 fe23 	bl	801cef8 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 80142b2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 80142b6:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 80142b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 80142bc:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 80142be:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 80142c0:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
 80142c2:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
 80142c4:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 80142c8:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
 80142ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80142cc:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
 80142ce:	6363      	str	r3, [r4, #52]	; 0x34
 80142d0:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
 80142d2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80142d4:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 80142d6:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
 80142d8:	4905      	ldr	r1, [pc, #20]	; (80142f0 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
 80142da:	4b06      	ldr	r3, [pc, #24]	; (80142f4 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 80142dc:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 80142e0:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 80142e2:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 80142e4:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 80142e6:	6223      	str	r3, [r4, #32]
}
 80142e8:	ecbd 8b02 	vpop	{d8}
 80142ec:	bd70      	pop	{r4, r5, r6, pc}
 80142ee:	bf00      	nop
 80142f0:	40400000 	.word	0x40400000
 80142f4:	3e2aaaab 	.word	0x3e2aaaab

080142f8 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
 80142f8:	b510      	push	{r4, lr}
 80142fa:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 80142fe:	6804      	ldr	r4, [r0, #0]
{
 8014300:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 8014304:	f002 f93e 	bl	8016584 <fastabsf>
 8014308:	f002 fb5c 	bl	80169c4 <fasteratodb>
 801430c:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 80143c0 <tCompressor_tick+0xc8>
 8014310:	eef0 0a40 	vmov.f32	s1, s0
 8014314:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80143c4 <tCompressor_tick+0xcc>
 8014318:	f002 f9d0 	bl	80166bc <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 801431c:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
 8014320:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 8014324:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
 8014328:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 801432c:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
 8014330:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 8014334:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433c:	db23      	blt.n	8014386 <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
 801433e:	2300      	movs	r3, #0
 8014340:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80143c0 <tCompressor_tick+0xc8>
 8014344:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 8014346:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 801434a:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 801434e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
 8014352:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 8014356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 801435a:	bf4c      	ite	mi
 801435c:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 8014360:	ed94 6a02 	vldrpl	s12, [r4, #8]
 8014364:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014368:	ee67 7a87 	vmul.f32	s15, s15, s14
 801436c:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 8014370:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014374:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8014378:	f002 fb58 	bl	8016a2c <fasterdbtoa>
    return attenuation * in;
}
 801437c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014380:	ecbd 8b02 	vpop	{d8}
 8014384:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8014386:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
 801438a:	edd4 5a07 	vldr	s11, [r4, #28]
 801438e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8014392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 8014396:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801439a:	dd0c      	ble.n	80143b6 <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 801439c:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
 80143a0:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
 80143a4:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80143a6:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
 80143aa:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80143ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80143b0:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
 80143b4:	e7c7      	b.n	8014346 <tCompressor_tick+0x4e>
        c->isActive = 1;
 80143b6:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
 80143b8:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
 80143bc:	6463      	str	r3, [r4, #68]	; 0x44
 80143be:	e7c2      	b.n	8014346 <tCompressor_tick+0x4e>
 80143c0:	00000000 	.word	0x00000000
 80143c4:	c2b40000 	.word	0xc2b40000

080143c8 <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
 80143c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 80143ca:	6817      	ldr	r7, [r2, #0]
{
 80143cc:	4614      	mov	r4, r2
 80143ce:	4606      	mov	r6, r0
 80143d0:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80143d2:	2018      	movs	r0, #24
 80143d4:	4639      	mov	r1, r7
{
 80143d6:	ed2d 8b02 	vpush	{d8}
 80143da:	eef0 8a40 	vmov.f32	s17, s0
 80143de:	b083      	sub	sp, #12
 80143e0:	eeb0 8a41 	vmov.f32	s16, s2
 80143e4:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80143e8:	f002 fb58 	bl	8016a9c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80143ec:	4621      	mov	r1, r4
    p->curr=0.0f;
 80143ee:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80143f0:	4604      	mov	r4, r0
 80143f2:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80143f4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80143f8:	3014      	adds	r0, #20
    p->mempool = m;
 80143fa:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 80143fe:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 8014402:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8014404:	f7ff fb5c 	bl	8013ac0 <tPowerFollower_initToPool>
    p->mode=mode;
 8014408:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 801440a:	ed84 8a02 	vstr	s16, [r4, #8]
}
 801440e:	b003      	add	sp, #12
 8014410:	ecbd 8b02 	vpop	{d8}
 8014414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014416:	bf00      	nop

08014418 <tFeedbackLeveler_setStrength>:
}

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, float strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 8014418:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 801441a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801441e:	4770      	bx	lr

08014420 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, float factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 8014420:	6800      	ldr	r0, [r0, #0]
 8014422:	3014      	adds	r0, #20
 8014424:	f7ff bb66 	b.w	8013af4 <tPowerFollower_setFactor>

08014428 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 8014428:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 801442a:	60d9      	str	r1, [r3, #12]
}
 801442c:	4770      	bx	lr
 801442e:	bf00      	nop

08014430 <tFeedbackLeveler_tick>:

float   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, float input)
{
 8014430:	b510      	push	{r4, lr}
 8014432:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 8014436:	6804      	ldr	r4, [r0, #0]
{
 8014438:	eeb0 8a40 	vmov.f32	s16, s0
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 801443c:	f104 0014 	add.w	r0, r4, #20
 8014440:	f7ff fb6a 	bl	8013b18 <tPowerFollower_tick>
 8014444:	ed94 7a01 	vldr	s14, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8014448:	68e3      	ldr	r3, [r4, #12]
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 801444a:	ee30 7a47 	vsub.f32	s14, s0, s14
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 801444e:	b91b      	cbnz	r3, 8014458 <tFeedbackLeveler_tick+0x28>
 8014450:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014474 <tFeedbackLeveler_tick+0x44>
 8014454:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
 8014458:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801445c:	edd4 6a02 	vldr	s13, [r4, #8]
 8014460:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014464:	ee27 0a88 	vmul.f32	s0, s15, s16
 8014468:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 801446c:	ecbd 8b02 	vpop	{d8}
 8014470:	bd10      	pop	{r4, pc}
 8014472:	bf00      	nop
 8014474:	00000000 	.word	0x00000000

08014478 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, float TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 8014478:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 801447a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801447e:	4770      	bx	lr

08014480 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 8014480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014482:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014486:	699e      	ldr	r6, [r3, #24]
{
 8014488:	4614      	mov	r4, r2
 801448a:	4607      	mov	r7, r0
 801448c:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 801448e:	2068      	movs	r0, #104	; 0x68
 8014490:	4631      	mov	r1, r6
{
 8014492:	eef0 9a40 	vmov.f32	s19, s0
 8014496:	eeb0 9a60 	vmov.f32	s18, s1
 801449a:	eeb0 8a41 	vmov.f32	s16, s2
 801449e:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 80144a2:	f002 fafb 	bl	8016a9c <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80144a6:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 80144aa:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 80144ac:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 80144ae:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80144b0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 80144b4:	eddf 7a22 	vldr	s15, [pc, #136]	; 8014540 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 80144b8:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
 80144ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 80144be:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80144c0:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80144c4:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
 80144c8:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 80144ca:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
 80144cc:	fe88 8a66 	vminnm.f32	s16, s16, s13
 80144d0:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
 80144d4:	2200      	movs	r2, #0
 80144d6:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8014544 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80144da:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
 80144de:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80144e2:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
 80144e6:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
 80144ea:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
 80144ee:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
 80144f2:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->sustain = sustain;
 80144f6:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
 80144fa:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
 80144fe:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
 8014500:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->sustain = sustain;
 8014504:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->decay = decay;
 8014508:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
 801450c:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8014510:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8014514:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8014518:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 801451c:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8014520:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8014524:	edc0 5a0a 	vstr	s11, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8014528:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 801452c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8014530:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	6643      	str	r3, [r0, #100]	; 0x64
}
 8014538:	ecbd 8b04 	vpop	{d8-d9}
 801453c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801453e:	bf00      	nop
 8014540:	4479ffff 	.word	0x4479ffff
 8014544:	00000000 	.word	0x00000000

08014548 <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 8014548:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 801454c:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 801454e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 8014552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 8014556:	bf48      	it	mi
 8014558:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 801456c <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 801455c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 8014560:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8014564:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8014568:	4770      	bx	lr
 801456a:	bf00      	nop
 801456c:	3c23d70a 	.word	0x3c23d70a

08014570 <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 8014570:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8014574:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8014576:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 801457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 801457e:	bf48      	it	mi
 8014580:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8014594 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8014584:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 8014588:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 801458c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8014590:	4770      	bx	lr
 8014592:	bf00      	nop
 8014594:	3c23d70a 	.word	0x3c23d70a

08014598 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8014598:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
 801459c:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 801459e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80145a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145a6:	dd02      	ble.n	80145ae <tADSRT_setSustain+0x16>
 80145a8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 80145ac:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 80145ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80145b2:	2200      	movs	r2, #0
 80145b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b8:	bf4c      	ite	mi
 80145ba:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
 80145bc:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
 80145c0:	4770      	bx	lr
 80145c2:	bf00      	nop

080145c4 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 80145c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 80145c8:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80145ca:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 80145ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 80145d2:	bf48      	it	mi
 80145d4:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 80145e8 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80145d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 80145dc:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80145e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 80145e4:	4770      	bx	lr
 80145e6:	bf00      	nop
 80145e8:	3c23d70a 	.word	0x3c23d70a

080145ec <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 80145ec:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 80145ee:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 80145f0:	eddf 7a06 	vldr	s15, [pc, #24]	; 801460c <tADSRT_setLeakFactor+0x20>
 80145f4:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 80145f8:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 80145fc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014600:	f008 fe1a 	bl	801d238 <powf>
 8014604:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8014608:	bd10      	pop	{r4, pc}
 801460a:	bf00      	nop
 801460c:	472c4400 	.word	0x472c4400

08014610 <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 8014610:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 8014612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014614:	b162      	cbz	r2, 8014630 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 8014616:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 8014618:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 801461a:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 801461c:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 801461e:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 8014620:	2200      	movs	r2, #0
 8014622:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 8014624:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 8014628:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 801462a:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 801462c:	655a      	str	r2, [r3, #84]	; 0x54
}
 801462e:	4770      	bx	lr
        adsr->whichStage = env_attack;
 8014630:	2101      	movs	r1, #1
 8014632:	e7f5      	b.n	8014620 <tADSRT_on+0x10>

08014634 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 8014634:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 8014636:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014638:	b11a      	cbz	r2, 8014642 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 801463a:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 801463c:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 801463e:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 8014640:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 8014642:	4770      	bx	lr

08014644 <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
 8014644:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8014646:	6804      	ldr	r4, [r0, #0]
{
 8014648:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 801464c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801464e:	3b01      	subs	r3, #1
 8014650:	2b04      	cmp	r3, #4
 8014652:	f200 8148 	bhi.w	80148e6 <tADSRT_tick+0x2a2>
 8014656:	e8df f003 	tbb	[pc, r3]
 801465a:	441f      	.short	0x441f
 801465c:	6339      	.short	0x6339
 801465e:	03          	.byte	0x03
 801465f:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8014660:	edd4 7a03 	vldr	s15, [r4, #12]
 8014664:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 8014668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801466c:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8014670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014674:	dd71      	ble.n	801475a <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 8014676:	eddf 7a9d 	vldr	s15, [pc, #628]	; 80148ec <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
 801467a:	2301      	movs	r3, #1
 801467c:	eeb0 0a67 	vmov.f32	s0, s15
 8014680:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 8014682:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 8014686:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801468a:	ee37 1a81 	vadd.f32	s2, s15, s2
 801468e:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 8014692:	ecbd 8b02 	vpop	{d8}
 8014696:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8014698:	edd4 7a03 	vldr	s15, [r4, #12]
 801469c:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 80146a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80146a4:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80146a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146ac:	dd7f      	ble.n	80147ae <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
 80146ae:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 80146b0:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
 80146b4:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
 80146b6:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 80146ba:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80146be:	ee37 1a81 	vadd.f32	s2, s15, s2
 80146c2:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
 80146c6:	ecbd 8b02 	vpop	{d8}
 80146ca:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
 80146cc:	ed94 0a06 	vldr	s0, [r4, #24]
 80146d0:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 80146d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80146d8:	ed84 0a06 	vstr	s0, [r4, #24]
}
 80146dc:	ecbd 8b02 	vpop	{d8}
 80146e0:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 80146e2:	edd4 7a03 	vldr	s15, [r4, #12]
 80146e6:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 80146ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80146ee:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80146f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f6:	f340 8088 	ble.w	801480a <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
 80146fa:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 80146fe:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
 8014700:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 8014704:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 8014706:	ee20 0a27 	vmul.f32	s0, s0, s15
 801470a:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 801470e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014712:	ee37 1a81 	vadd.f32	s2, s15, s2
 8014716:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
 801471a:	ecbd 8b02 	vpop	{d8}
 801471e:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8014720:	edd4 7a03 	vldr	s15, [r4, #12]
 8014724:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 8014728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801472c:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8014730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014734:	f340 809e 	ble.w	8014874 <tADSRT_tick+0x230>
                adsr->next = 0.0f;
 8014738:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80148ec <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
 801473c:	2300      	movs	r3, #0
 801473e:	eeb0 0a67 	vmov.f32	s0, s15
 8014742:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 8014744:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 8014748:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 801474c:	ee37 1a81 	vadd.f32	s2, s15, s2
 8014750:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
 8014754:	ecbd 8b02 	vpop	{d8}
 8014758:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 801475a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 801475e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014762:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
 8014766:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 801476a:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
 801476e:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014776:	f100 80b2 	bmi.w	80148de <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 801477a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801477e:	6862      	ldr	r2, [r4, #4]
 8014780:	ee17 3a90 	vmov	r3, s15
 8014784:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014788:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 801478c:	ee16 3a90 	vmov	r3, s13
 8014790:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 8014794:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014798:	ed92 0a00 	vldr	s0, [r2]
 801479c:	f002 f89a 	bl	80168d4 <LEAF_interpolation_linear>
 80147a0:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 80147a4:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 80147a8:	ed84 0a06 	vstr	s0, [r4, #24]
 80147ac:	e76b      	b.n	8014686 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80147ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 80147b2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80147b6:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
 80147ba:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80147be:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
 80147c2:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 80147c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ca:	f100 8084 	bmi.w	80148d6 <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 80147ce:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80147d2:	6862      	ldr	r2, [r4, #4]
 80147d4:	ee17 3a90 	vmov	r3, s15
 80147d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80147dc:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 80147e0:	ee16 3a90 	vmov	r3, s13
 80147e4:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 80147e8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80147ec:	ed92 0a00 	vldr	s0, [r2]
 80147f0:	f002 f870 	bl	80168d4 <LEAF_interpolation_linear>
 80147f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 80147f8:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 80147fc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014800:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014804:	ed84 0a06 	vstr	s0, [r4, #24]
 8014808:	e757      	b.n	80146ba <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 801480a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 801480e:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014812:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
 8014816:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 801481a:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
 801481e:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8014822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014826:	d452      	bmi.n	80148ce <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 8014828:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801482c:	6862      	ldr	r2, [r4, #4]
 801482e:	ee17 3a90 	vmov	r3, s15
 8014832:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014836:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
 801483a:	ee16 3a90 	vmov	r3, s13
 801483e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014842:	ed92 0a00 	vldr	s0, [r2]
 8014846:	f002 f845 	bl	80168d4 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 801484a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801484e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014852:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8014856:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801485a:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
            adsr->decayPhase += adsr->decayInc;
 801485e:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8014862:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014866:	eea6 7a80 	vfma.f32	s14, s13, s0
 801486a:	ee27 0a87 	vmul.f32	s0, s15, s14
 801486e:	ed84 0a06 	vstr	s0, [r4, #24]
 8014872:	e74c      	b.n	801470e <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8014874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 8014878:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 801487c:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
 8014880:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8014884:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
 8014888:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 801488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014890:	d419      	bmi.n	80148c6 <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 8014892:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014896:	6862      	ldr	r2, [r4, #4]
 8014898:	ee17 3a90 	vmov	r3, s15
 801489c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80148a0:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 80148a4:	ee16 3a90 	vmov	r3, s13
 80148a8:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 80148ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80148b0:	ed92 0a00 	vldr	s0, [r2]
 80148b4:	f002 f80e 	bl	80168d4 <LEAF_interpolation_linear>
 80148b8:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 80148bc:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 80148c0:	ed84 0a06 	vstr	s0, [r4, #24]
 80148c4:	e740      	b.n	8014748 <tADSRT_tick+0x104>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 80148c6:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 80148c8:	eddf 0a08 	vldr	s1, [pc, #32]	; 80148ec <tADSRT_tick+0x2a8>
 80148cc:	e7ea      	b.n	80148a4 <tADSRT_tick+0x260>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 80148ce:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 80148d0:	eddf 0a06 	vldr	s1, [pc, #24]	; 80148ec <tADSRT_tick+0x2a8>
 80148d4:	e7b1      	b.n	801483a <tADSRT_tick+0x1f6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 80148d6:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 80148d8:	eddf 0a04 	vldr	s1, [pc, #16]	; 80148ec <tADSRT_tick+0x2a8>
 80148dc:	e780      	b.n	80147e0 <tADSRT_tick+0x19c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 80148de:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 80148e0:	eddf 0a02 	vldr	s1, [pc, #8]	; 80148ec <tADSRT_tick+0x2a8>
 80148e4:	e752      	b.n	801478c <tADSRT_tick+0x148>
    return adsr->next;
 80148e6:	ed94 0a06 	vldr	s0, [r4, #24]
 80148ea:	e6d2      	b.n	8014692 <tADSRT_tick+0x4e>
 80148ec:	00000000 	.word	0x00000000

080148f0 <tADSRT_tickNoInterp>:

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 80148f0:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 80148f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80148f4:	3a01      	subs	r2, #1
 80148f6:	2a04      	cmp	r2, #4
 80148f8:	f200 80ba 	bhi.w	8014a70 <tADSRT_tickNoInterp+0x180>
 80148fc:	e8df f002 	tbb	[pc, r2]
 8014900:	58333c1b 	.word	0x58333c1b
 8014904:	03          	.byte	0x03
 8014905:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8014906:	edd3 7a03 	vldr	s15, [r3, #12]
 801490a:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 801490e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014912:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801491a:	dd61      	ble.n	80149e0 <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
 801491c:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 801491e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8014a78 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
 8014922:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 8014924:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8014928:	ed83 0a06 	vstr	s0, [r3, #24]
 801492c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014930:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 8014934:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8014936:	edd3 7a03 	vldr	s15, [r3, #12]
 801493a:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 801493e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014942:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801494a:	dd57      	ble.n	80149fc <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
 801494c:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 801494e:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
 8014952:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 8014954:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014958:	ed83 0a06 	vstr	s0, [r3, #24]
 801495c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014960:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
 8014964:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 8014966:	ed93 0a06 	vldr	s0, [r3, #24]
 801496a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 801496e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014972:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 8014976:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8014978:	edd3 7a03 	vldr	s15, [r3, #12]
 801497c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8014980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014984:	eef4 6ac7 	vcmpe.f32	s13, s14
 8014988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801498c:	dd48      	ble.n	8014a20 <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
 801498e:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8014992:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
 8014994:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 8014998:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 801499a:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
 801499e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80149a2:	ed83 0a06 	vstr	s0, [r3, #24]
 80149a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80149aa:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 80149ae:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 80149b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80149b4:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80149b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80149bc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80149c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c4:	dd46      	ble.n	8014a54 <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
 80149c6:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 80149c8:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8014a78 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
 80149cc:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 80149ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80149d2:	ed83 0a06 	vstr	s0, [r3, #24]
 80149d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80149da:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
 80149de:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 80149e0:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 80149e4:	685a      	ldr	r2, [r3, #4]
 80149e6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80149ea:	ee17 1a10 	vmov	r1, s14
 80149ee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80149f2:	ed92 0a00 	vldr	s0, [r2]
 80149f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80149fa:	e793      	b.n	8014924 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 80149fc:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8014a00:	685a      	ldr	r2, [r3, #4]
 8014a02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014a06:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8014a0a:	ee17 1a10 	vmov	r1, s14
 8014a0e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014a12:	ed92 7a00 	vldr	s14, [r2]
 8014a16:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014a1a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a1e:	e799      	b.n	8014954 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 8014a20:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 8014a24:	685a      	ldr	r2, [r3, #4]
 8014a26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014a2a:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8014a2e:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 8014a32:	ee15 1a90 	vmov	r1, s11
 8014a36:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8014a3a:	ee37 7a40 	vsub.f32	s14, s14, s0
 8014a3e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014a42:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014a46:	ed92 6a00 	vldr	s12, [r2]
 8014a4a:	eea6 0a07 	vfma.f32	s0, s12, s14
 8014a4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014a52:	e7a4      	b.n	801499e <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 8014a54:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8014a58:	685a      	ldr	r2, [r3, #4]
 8014a5a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8014a5e:	ee17 1a10 	vmov	r1, s14
 8014a62:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014a66:	ed92 0a00 	vldr	s0, [r2]
 8014a6a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014a6e:	e7ae      	b.n	80149ce <tADSRT_tickNoInterp+0xde>
    return adsr->next;
 8014a70:	ed93 0a06 	vldr	s0, [r3, #24]
 8014a74:	4770      	bx	lr
 8014a76:	bf00      	nop
 8014a78:	00000000 	.word	0x00000000

08014a7c <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8014a7c:	b538      	push	{r3, r4, r5, lr}
 8014a7e:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014a82:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8014a84:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8014a86:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8014a88:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8014a8c:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8014a8e:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8014a92:	f002 f803 	bl	8016a9c <mpool_alloc>
 8014a96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a9a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8014ad0 <tExpSmooth_init+0x54>
 8014a9e:	6028      	str	r0, [r5, #0]
 8014aa0:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 8014aa4:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 8014aa8:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8014aac:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 8014aae:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 8014ab2:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 8014ab6:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 8014aba:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 8014abe:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8014ac2:	6863      	ldr	r3, [r4, #4]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	6183      	str	r3, [r0, #24]
}
 8014ac8:	ecbd 8b02 	vpop	{d8}
 8014acc:	bd38      	pop	{r3, r4, r5, pc}
 8014ace:	bf00      	nop
 8014ad0:	00000000 	.word	0x00000000

08014ad4 <tExpSmooth_initToPool>:
{
 8014ad4:	b538      	push	{r3, r4, r5, lr}
 8014ad6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8014ada:	680c      	ldr	r4, [r1, #0]
{
 8014adc:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8014ade:	201c      	movs	r0, #28
{
 8014ae0:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8014ae4:	4621      	mov	r1, r4
{
 8014ae6:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8014aea:	f001 ffd7 	bl	8016a9c <mpool_alloc>
 8014aee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014af2:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8014b28 <tExpSmooth_initToPool+0x54>
 8014af6:	6028      	str	r0, [r5, #0]
 8014af8:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 8014afc:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
 8014b00:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8014b04:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 8014b06:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 8014b0a:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 8014b0e:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 8014b12:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 8014b16:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8014b1a:	6863      	ldr	r3, [r4, #4]
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	6183      	str	r3, [r0, #24]
}
 8014b20:	ecbd 8b02 	vpop	{d8}
 8014b24:	bd38      	pop	{r3, r4, r5, pc}
 8014b26:	bf00      	nop
 8014b28:	00000000 	.word	0x00000000

08014b2c <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 8014b2c:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 8014b2e:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8014b32:	4770      	bx	lr

08014b34 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8014b34:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 8014b36:	edd3 6a04 	vldr	s13, [r3, #16]
 8014b3a:	ed93 0a03 	vldr	s0, [r3, #12]
 8014b3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8014b42:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014b46:	edd3 7a05 	vldr	s15, [r3, #20]
 8014b4a:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014b4e:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 8014b52:	4770      	bx	lr

08014b54 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8014b54:	b538      	push	{r3, r4, r5, lr}
 8014b56:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014b5a:	698d      	ldr	r5, [r1, #24]
{
 8014b5c:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8014b5e:	201c      	movs	r0, #28
{
 8014b60:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8014b64:	4629      	mov	r1, r5
{
 8014b66:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8014b6a:	f001 ff97 	bl	8016a9c <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8014b6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8014b72:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8014b74:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8014b76:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8014b78:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8014b7c:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8014b80:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8014b84:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8014b86:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8014b88:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8014b8a:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8014b8c:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8014b90:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8014b94:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8014b98:	ecbd 8b02 	vpop	{d8}
 8014b9c:	bd38      	pop	{r3, r4, r5, pc}
 8014b9e:	bf00      	nop

08014ba0 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8014ba0:	6803      	ldr	r3, [r0, #0]
{
 8014ba2:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 8014ba6:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 8014baa:	ed83 7a03 	vstr	s14, [r3, #12]
    if (in >= s->prevOut)
 8014bae:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8014bb2:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 8014bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8014bba:	bf94      	ite	ls
 8014bbc:	edd3 6a04 	vldrls	s13, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8014bc0:	edd3 6a05 	vldrhi	s13, [r3, #20]
 8014bc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8014bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8014bcc:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8014bd0:	edc3 7a01 	vstr	s15, [r3, #4]
    return s->currentOut;
}
 8014bd4:	4770      	bx	lr
 8014bd6:	bf00      	nop

08014bd8 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, float freq, tMempool* const mp)
{
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8014bde:	680d      	ldr	r5, [r1, #0]
{
 8014be0:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
 8014be2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8014be6:	2028      	movs	r0, #40	; 0x28
 8014be8:	4629      	mov	r1, r5
{
 8014bea:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8014bee:	f001 ff55 	bl	8016a9c <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
 8014bf2:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8014c3c <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8014bf6:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014bf8:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
 8014bfc:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8014bfe:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
 8014c00:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
 8014c04:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
 8014c08:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
 8014c0c:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
 8014c14:	6824      	ldr	r4, [r4, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8014c16:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    f->freq = freq;
 8014c1a:	ed84 8a01 	vstr	s16, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8014c1e:	ee68 0a20 	vmul.f32	s1, s16, s1
 8014c22:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014c26:	f001 fd49 	bl	80166bc <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 8014c2a:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014c2e:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8014c32:	edc4 8a04 	vstr	s17, [r4, #16]
}
 8014c36:	ecbd 8b02 	vpop	{d8}
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	00000000 	.word	0x00000000

08014c40 <tOnePole_setFreq>:
{
 8014c40:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 8014c42:	6804      	ldr	r4, [r0, #0]
{
 8014c44:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014c48:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8014c4c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8014c78 <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8014c50:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 8014c54:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8014c58:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014c5c:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014c60:	f001 fd2c 	bl	80166bc <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 8014c64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014c68:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8014c6c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014c70:	edc4 7a04 	vstr	s15, [r4, #16]
}
 8014c74:	bd10      	pop	{r4, pc}
 8014c76:	bf00      	nop
 8014c78:	00000000 	.word	0x00000000

08014c7c <tOnePole_tick>:
    f->gain = gain;
}

float   tOnePole_tick(tOnePole* const ft, float input)
{
    _tOnePole* f = *ft;
 8014c7c:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8014c7e:	ed93 6a08 	vldr	s12, [r3, #32]
    float in = input * f->gain;
 8014c82:	ed93 7a02 	vldr	s14, [r3, #8]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8014c86:	edd3 7a04 	vldr	s15, [r3, #16]
    float in = input * f->gain;
 8014c8a:	ee20 7a07 	vmul.f32	s14, s0, s14
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8014c8e:	edd3 6a05 	vldr	s13, [r3, #20]
 8014c92:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 8014c96:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8014c9a:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 8014c9e:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 8014ca2:	4770      	bx	lr

08014ca4 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, float sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8014ca4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8014ce0 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014ca8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8014cac:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014cb0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014ce4 <tOnePole_setSampleRate+0x40>
{
 8014cb4:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 8014cb6:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8014cb8:	edd4 0a01 	vldr	s1, [r4, #4]
 8014cbc:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8014cc0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8014cc4:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014cc8:	f001 fcf8 	bl	80166bc <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 8014ccc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8014cd0:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8014cd4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014cd8:	edc4 7a04 	vstr	s15, [r4, #16]
}
 8014cdc:	bd10      	pop	{r4, pc}
 8014cde:	bf00      	nop
 8014ce0:	40c90fdb 	.word	0x40c90fdb
 8014ce4:	00000000 	.word	0x00000000

08014ce8 <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
 8014ce8:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 8014cea:	680c      	ldr	r4, [r1, #0]
{
 8014cec:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
 8014cee:	2028      	movs	r0, #40	; 0x28
 8014cf0:	4621      	mov	r1, r4
 8014cf2:	f001 fed3 	bl	8016a9c <mpool_alloc>
 8014cf6:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8014cf8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
 8014cfa:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8014cfc:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
 8014cfe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8014d02:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
 8014d04:	6041      	str	r1, [r0, #4]
    f->lastIn[0] = 0.0f;
 8014d06:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
 8014d08:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8014d0a:	6242      	str	r2, [r0, #36]	; 0x24
}
 8014d0c:	bd38      	pop	{r3, r4, r5, pc}
 8014d0e:	bf00      	nop

08014d10 <tTwoZero_tick>:
    mpool_free((char*)f, f->mempool);
}

float   tTwoZero_tick(tTwoZero* const ft, float input)
{
    _tTwoZero* f = *ft;
 8014d10:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 8014d12:	edd3 6a07 	vldr	s13, [r3, #28]
 8014d16:	edd3 7a03 	vldr	s15, [r3, #12]
 8014d1a:	edd3 5a08 	vldr	s11, [r3, #32]
 8014d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014d22:	ed93 5a04 	vldr	s10, [r3, #16]
    float in = input * f->gain;
 8014d26:	ed93 7a01 	vldr	s14, [r3, #4]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 8014d2a:	ed93 6a02 	vldr	s12, [r3, #8]
 8014d2e:	eee5 7a25 	vfma.f32	s15, s10, s11
    
    f->lastIn[1] = f->lastIn[0];
 8014d32:	edc3 6a08 	vstr	s13, [r3, #32]
    float in = input * f->gain;
 8014d36:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->lastIn[0] = in;
 8014d3a:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 8014d3e:	eeb0 0a67 	vmov.f32	s0, s15
    
    return out;
}
 8014d42:	eea6 0a07 	vfma.f32	s0, s12, s14
 8014d46:	4770      	bx	lr

08014d48 <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, float b0, float b1, float b2)
{
    _tTwoZero* f = *ft;
 8014d48:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
 8014d4a:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
 8014d4e:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
 8014d52:	ed83 1a04 	vstr	s2, [r3, #16]
}
 8014d56:	4770      	bx	lr

08014d58 <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
 8014d58:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 8014d5a:	680c      	ldr	r4, [r1, #0]
{
 8014d5c:	4605      	mov	r5, r0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
 8014d5e:	2044      	movs	r0, #68	; 0x44
 8014d60:	4621      	mov	r1, r4
 8014d62:	f001 fe9b 	bl	8016a9c <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
    
    f->b0 = 0.0f;
 8014d66:	2300      	movs	r3, #0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
 8014d68:	6028      	str	r0, [r5, #0]
    f->gain = 1.0f;
 8014d6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->mempool = m;
 8014d6e:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8014d70:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
 8014d72:	6041      	str	r1, [r0, #4]
    f->b0 = 0.0f;
 8014d74:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
 8014d76:	6083      	str	r3, [r0, #8]
    
    f->lastIn[0] = 0.0f;
 8014d78:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
 8014d7a:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
 8014d7c:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
 8014d7e:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8014d80:	68d3      	ldr	r3, [r2, #12]
 8014d82:	6403      	str	r3, [r0, #64]	; 0x40
}
 8014d84:	bd38      	pop	{r3, r4, r5, pc}
 8014d86:	bf00      	nop

08014d88 <tBiQuad_setSampleRate>:
void    tBiQuad_setSampleRate(tBiQuad* const ft, float sr)
{
    _tBiQuad* f = *ft;
    
    f->sampleRate = sr;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
 8014d88:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8014df4 <tBiQuad_setSampleRate+0x6c>
 8014d8c:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
 8014d90:	b510      	push	{r4, lr}
    _tBiQuad* f = *ft;
 8014d92:	6804      	ldr	r4, [r0, #0]
{
 8014d94:	ed2d 8b02 	vpush	{d8}
    
    f->a2 = f->radius * f->radius;
 8014d98:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8014d9c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    f->a2 = f->radius * f->radius;
 8014da0:	ee68 8a08 	vmul.f32	s17, s16, s16
    f->sampleRate = sr;
 8014da4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->a2 = f->radius * f->radius;
 8014da8:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8014dac:	ee27 0a27 	vmul.f32	s0, s14, s15
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
 8014db0:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8014db4:	f007 fe60 	bl	801ca78 <cosf>
 8014db8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
    
    if (f->normalize)
 8014dbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8014dbe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014dc2:	ee28 8a00 	vmul.f32	s16, s16, s0
 8014dc6:	ed84 8a03 	vstr	s16, [r4, #12]
    if (f->normalize)
 8014dca:	b17b      	cbz	r3, 8014dec <tBiQuad_setSampleRate+0x64>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
 8014dcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        f->b1 = 0.0f;
 8014dd0:	2300      	movs	r3, #0
        f->b0 = 0.5f - 0.5f * f->a2;
 8014dd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        f->b1 = 0.0f;
 8014dd6:	61a3      	str	r3, [r4, #24]
        f->b0 = 0.5f - 0.5f * f->a2;
 8014dd8:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8014ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
        f->b2 = -f->b0;
 8014de0:	eeb1 7a67 	vneg.f32	s14, s15
        f->b0 = 0.5f - 0.5f * f->a2;
 8014de4:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b2 = -f->b0;
 8014de8:	ed84 7a07 	vstr	s14, [r4, #28]
    }
}
 8014dec:	ecbd 8b02 	vpop	{d8}
 8014df0:	bd10      	pop	{r4, pc}
 8014df2:	bf00      	nop
 8014df4:	40c90fdb 	.word	0x40c90fdb

08014df8 <tSVF_init>:

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
 8014df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dfa:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014dfe:	6996      	ldr	r6, [r2, #24]
{
 8014e00:	4607      	mov	r7, r0
 8014e02:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8014e04:	2044      	movs	r0, #68	; 0x44
 8014e06:	4631      	mov	r1, r6
{
 8014e08:	eef0 8a40 	vmov.f32	s17, s0
 8014e0c:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8014e10:	f001 fe44 	bl	8016a9c <mpool_alloc>
 8014e14:	6038      	str	r0, [r7, #0]
 8014e16:	4604      	mov	r4, r0
    svf->mempool = m;
 8014e18:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 8014e1a:	6873      	ldr	r3, [r6, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 8014e1c:	2600      	movs	r6, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8014e1e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8014ed0 <tSVF_init+0xd8>
    svf->sampleRate = leaf->sampleRate;
 8014e22:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8014e24:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 8014e28:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
 8014e2a:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
 8014e2e:	7105      	strb	r5, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8014e30:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 8014e34:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
 8014e38:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
 8014e3a:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
 8014e3c:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 8014e40:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8014e44:	f008 fb58 	bl	801d4f8 <tanf>
    svf->k = 1.0f/Q;
 8014e48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8014e4c:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 8014e50:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
 8014e52:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
 8014e54:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
 8014e58:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
 8014e5a:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
 8014e5c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014e60:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
 8014e64:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014e68:	eeb0 7a67 	vmov.f32	s14, s15
 8014e6c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8014e70:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
 8014e74:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014e78:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 8014e7c:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
 8014e80:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8014e84:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
 8014e88:	d007      	beq.n	8014e9a <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 8014e8a:	2d02      	cmp	r5, #2
 8014e8c:	d008      	beq.n	8014ea0 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
 8014e8e:	b96d      	cbnz	r5, 8014eac <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8014e90:	4b10      	ldr	r3, [pc, #64]	; (8014ed4 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8014e92:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8014e96:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 8014e98:	6363      	str	r3, [r4, #52]	; 0x34
}
 8014e9a:	ecbd 8b02 	vpop	{d8}
 8014e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
 8014ea0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
 8014ea4:	6366      	str	r6, [r4, #52]	; 0x34
}
 8014ea6:	ecbd 8b02 	vpop	{d8}
 8014eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
 8014eac:	2d03      	cmp	r5, #3
 8014eae:	d009      	beq.n	8014ec4 <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
 8014eb0:	2d04      	cmp	r5, #4
 8014eb2:	d1f2      	bne.n	8014e9a <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8014eb4:	4a07      	ldr	r2, [pc, #28]	; (8014ed4 <tSVF_init+0xdc>)
        svf->cL = -2.0f;
 8014eb6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8014eba:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8014ebe:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 8014ec0:	6363      	str	r3, [r4, #52]	; 0x34
}
 8014ec2:	e7ea      	b.n	8014e9a <tSVF_init+0xa2>
        svf->cBK = -1.0f;
 8014ec4:	4b03      	ldr	r3, [pc, #12]	; (8014ed4 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8014ec6:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
 8014eca:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
 8014ecc:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 8014ece:	e7e4      	b.n	8014e9a <tSVF_init+0xa2>
 8014ed0:	40490fdb 	.word	0x40490fdb
 8014ed4:	bf800000 	.word	0xbf800000

08014ed8 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 8014ed8:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8014eda:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 8014ede:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8014ee2:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8014ee6:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8014eea:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 8014eee:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8014ef2:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
 8014ef6:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
 8014efa:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8014efe:	edd3 2a08 	vldr	s5, [r3, #32]
 8014f02:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014f06:	ed93 2a07 	vldr	s4, [r3, #28]
 8014f0a:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8014f0e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8014f12:	eea2 5a23 	vfma.f32	s10, s4, s7
 8014f16:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8014f1a:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8014f1e:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8014f22:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8014f26:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8014f2a:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 8014f2e:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8014f32:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8014f36:	edc3 6a05 	vstr	s13, [r3, #20]
}
 8014f3a:	eea3 7a80 	vfma.f32	s14, s7, s0
 8014f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8014f42:	4770      	bx	lr

08014f44 <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
 8014f44:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014f48:	4a18      	ldr	r2, [pc, #96]	; (8014fac <tSVF_setFreqFast+0x68>)
 8014f4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
 8014f4e:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
 8014f50:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014f54:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014f58:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
 8014f5c:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014f60:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
 8014f64:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014f68:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
 8014f6c:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014f70:	ee76 6a86 	vadd.f32	s13, s13, s12
 8014f74:	ed90 6a00 	vldr	s12, [r0]
 8014f78:	ee20 0a25 	vmul.f32	s0, s0, s11
 8014f7c:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014f80:	eef0 6a67 	vmov.f32	s13, s15
 8014f84:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014f88:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014f8c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8014f90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
 8014f94:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014f98:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8014f9c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8014fa0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8014fa4:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 8014fa8:	4770      	bx	lr
 8014faa:	bf00      	nop
 8014fac:	0801f364 	.word	0x0801f364

08014fb0 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 8014fb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8014fb4:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014fb6:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 8014fba:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 8014fbe:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014fc2:	eeb0 6a47 	vmov.f32	s12, s14
 8014fc6:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 8014fca:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014fce:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8014fd2:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 8014fd6:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8014fda:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8014fde:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8014fe2:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8014fe6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8014fea:	4770      	bx	lr

08014fec <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8014fec:	b538      	push	{r3, r4, r5, lr}
 8014fee:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014ff2:	698c      	ldr	r4, [r1, #24]
{
 8014ff4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8014ff6:	2018      	movs	r0, #24
{
 8014ff8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8014ffc:	4621      	mov	r1, r4
 8014ffe:	f001 fdb1 	bl	8016b64 <mpool_calloc>
 8015002:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8015004:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015006:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801500a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 801500c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801500e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8015012:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015014:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8015018:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 801501a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801501e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015022:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8015026:	ecbd 8b02 	vpop	{d8}
 801502a:	bd38      	pop	{r3, r4, r5, pc}

0801502c <tHighpass_initToPool>:
{
 801502c:	b538      	push	{r3, r4, r5, lr}
 801502e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8015032:	680c      	ldr	r4, [r1, #0]
{
 8015034:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8015036:	2018      	movs	r0, #24
{
 8015038:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 801503c:	4621      	mov	r1, r4
 801503e:	f001 fd91 	bl	8016b64 <mpool_calloc>
 8015042:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8015044:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015046:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801504a:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 801504c:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801504e:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8015052:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015054:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
 8015058:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
 801505a:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801505e:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015062:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8015066:	ecbd 8b02 	vpop	{d8}
 801506a:	bd38      	pop	{r3, r4, r5, pc}

0801506c <tHighpass_setFreq>:
    mpool_free((char*)f, f->mempool);
}

void tHighpass_setFreq(tHighpass* const ft, float freq)
{
    _tHighpass* f = *ft;
 801506c:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 801506e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015072:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
 8015076:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 801507a:	eee7 7a40 	vfms.f32	s15, s14, s0
 801507e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8015082:	4770      	bx	lr

08015084 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8015084:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8015086:	edd3 7a01 	vldr	s15, [r3, #4]
 801508a:	ed93 7a02 	vldr	s14, [r3, #8]
 801508e:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8015092:	ed83 0a01 	vstr	s0, [r3, #4]
 8015096:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 801509a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801509e:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 80150a2:	4770      	bx	lr

080150a4 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, float sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 80150a4:	eddf 6a07 	vldr	s13, [pc, #28]	; 80150c4 <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 80150a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
 80150ac:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 80150ae:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 80150b2:	edd3 6a04 	vldr	s13, [r3, #16]
 80150b6:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 80150ba:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 80150be:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80150c2:	4770      	bx	lr
 80150c4:	40c90fdb 	.word	0x40c90fdb

080150c8 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 80150c8:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80150ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80150ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80150d2:	ee70 7a66 	vsub.f32	s15, s0, s13
 80150d6:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 80150da:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80150de:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80150e2:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 80150e6:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 80150ea:	edd3 4a08 	vldr	s9, [r3, #32]
 80150ee:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80150f2:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 80150f6:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 80150fa:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 80150fe:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8015102:	eeb0 5a47 	vmov.f32	s10, s14
 8015106:	eea4 0a87 	vfma.f32	s0, s9, s14
 801510a:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 801510e:	eef0 7a66 	vmov.f32	s15, s13
}
 8015112:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8015116:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 801511a:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 801511e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8015122:	4770      	bx	lr

08015124 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8015124:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8015126:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015128:	eddf 7a98 	vldr	s15, [pc, #608]	; 801538c <tVZFilter_calcCoeffs+0x268>
{
 801512c:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015130:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8015134:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8015138:	ee68 8a87 	vmul.f32	s17, s17, s14
 801513c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015140:	eeb0 0a68 	vmov.f32	s0, s17
 8015144:	f008 f9d8 	bl	801d4f8 <tanf>
    
    switch( f->type )
 8015148:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 801514a:	eeb0 8a40 	vmov.f32	s16, s0
 801514e:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8015152:	2b0a      	cmp	r3, #10
 8015154:	f200 8117 	bhi.w	8015386 <tVZFilter_calcCoeffs+0x262>
 8015158:	e8df f013 	tbh	[pc, r3, lsl #1]
 801515c:	002f0026 	.word	0x002f0026
 8015160:	00410038 	.word	0x00410038
 8015164:	0056004d 	.word	0x0056004d
 8015168:	00a1008b 	.word	0x00a1008b
 801516c:	010a00b7 	.word	0x010a00b7
 8015170:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8015172:	edd4 7a05 	vldr	s15, [r4, #20]
 8015176:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801517a:	eeb1 7a67 	vneg.f32	s14, s15
 801517e:	61e3      	str	r3, [r4, #28]
 8015180:	6263      	str	r3, [r4, #36]	; 0x24
 8015182:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 801518a:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 801518e:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8015192:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015196:	eee7 6a88 	vfma.f32	s13, s15, s16
 801519a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801519e:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80151a2:	ecbd 8b02 	vpop	{d8}
 80151a6:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80151a8:	2300      	movs	r3, #0
 80151aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80151ae:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80151b2:	61e3      	str	r3, [r4, #28]
 80151b4:	6223      	str	r3, [r4, #32]
 80151b6:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 80151b8:	e7e5      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80151ba:	2300      	movs	r3, #0
 80151bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80151c0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80151c4:	6223      	str	r3, [r4, #32]
 80151c6:	6263      	str	r3, [r4, #36]	; 0x24
 80151c8:	61e2      	str	r2, [r4, #28]
            break;
 80151ca:	e7dc      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80151cc:	2300      	movs	r3, #0
 80151ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80151d2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80151d6:	61e3      	str	r3, [r4, #28]
 80151d8:	6263      	str	r3, [r4, #36]	; 0x24
 80151da:	6222      	str	r2, [r4, #32]
            break;
 80151dc:	e7d3      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80151de:	edd4 7a05 	vldr	s15, [r4, #20]
 80151e2:	2300      	movs	r3, #0
 80151e4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 80151e8:	61e3      	str	r3, [r4, #28]
 80151ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80151ee:	6263      	str	r3, [r4, #36]	; 0x24
 80151f0:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 80151f4:	e7c7      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80151f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80151fa:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 80151fc:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015200:	6222      	str	r2, [r4, #32]
 8015202:	61e3      	str	r3, [r4, #28]
 8015204:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8015206:	e7be      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8015208:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801520c:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8015210:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8015214:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015218:	f008 f80e 	bl	801d238 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801521c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015220:	f008 f96a 	bl	801d4f8 <tanf>
            float r  = f->g/wl;
 8015224:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015228:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801522c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015230:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8015234:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015238:	ed84 7a07 	vstr	s14, [r4, #28]
 801523c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8015240:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015244:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8015248:	eef0 6a47 	vmov.f32	s13, s14
 801524c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015250:	ee77 7a45 	vsub.f32	s15, s14, s10
 8015254:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015258:	ee87 7a86 	vdiv.f32	s14, s15, s12
 801525c:	eef1 7ac7 	vsqrt.f32	s15, s14
 8015260:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015264:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015268:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801526c:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8015270:	e789      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8015272:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015276:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801527a:	edd4 7a05 	vldr	s15, [r4, #20]
 801527e:	eef1 6ac7 	vsqrt.f32	s13, s14
 8015282:	ed84 7a07 	vstr	s14, [r4, #28]
 8015286:	6263      	str	r3, [r4, #36]	; 0x24
 8015288:	ee27 6a27 	vmul.f32	s12, s14, s15
 801528c:	ed84 6a08 	vstr	s12, [r4, #32]
 8015290:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015294:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8015298:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 801529c:	e773      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 801529e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80152a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80152a6:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80152aa:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80152ae:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 80152b2:	61e3      	str	r3, [r4, #28]
 80152b4:	ee27 6a27 	vmul.f32	s12, s14, s15
 80152b8:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80152bc:	eeb1 7ae6 	vsqrt.f32	s14, s13
 80152c0:	ee20 8a07 	vmul.f32	s16, s0, s14
 80152c4:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 80152c8:	e75d      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 80152ca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80152ce:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80152d2:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80152d6:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8015390 <tVZFilter_calcCoeffs+0x26c>
 80152da:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 80152de:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80152e2:	eeb0 0a48 	vmov.f32	s0, s16
 80152e6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80152ea:	f001 fbb9 	bl	8016a60 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80152ee:	eddf 0a28 	vldr	s1, [pc, #160]	; 8015390 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80152f2:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80152f6:	eeb0 0a68 	vmov.f32	s0, s17
 80152fa:	f001 fbb5 	bl	8016a68 <minimum>
            f->cB = 1.0f-x*x;
 80152fe:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015302:	edd4 7a05 	vldr	s15, [r4, #20]
 8015306:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 801530a:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801530e:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8015312:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015316:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801531a:	ee76 5a06 	vadd.f32	s11, s12, s12
 801531e:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8015322:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015326:	eee6 7a06 	vfma.f32	s15, s12, s12
 801532a:	eee0 7a00 	vfma.f32	s15, s0, s0
 801532e:	eee0 7a65 	vfms.f32	s15, s0, s11
 8015332:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8015336:	f001 f903 	bl	8016540 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 801533a:	edd4 5a07 	vldr	s11, [r4, #28]
 801533e:	ed94 6a08 	vldr	s12, [r4, #32]
 8015342:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8015346:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801534a:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 801534e:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015352:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8015356:	ee65 5a80 	vmul.f32	s11, s11, s0
 801535a:	ee26 6a00 	vmul.f32	s12, s12, s0
 801535e:	ee26 0a80 	vmul.f32	s0, s13, s0
 8015362:	edc4 5a07 	vstr	s11, [r4, #28]
 8015366:	ed84 6a08 	vstr	s12, [r4, #32]
 801536a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 801536e:	e70a      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8015370:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8015374:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8015378:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 801537a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 801537e:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8015382:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8015384:	e6ff      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 8015386:	edd4 7a05 	vldr	s15, [r4, #20]
 801538a:	e6fc      	b.n	8015186 <tVZFilter_calcCoeffs+0x62>
 801538c:	40490fdb 	.word	0x40490fdb
 8015390:	00000000 	.word	0x00000000

08015394 <tVZFilter_initToPool>:
{
 8015394:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8015396:	6817      	ldr	r7, [r2, #0]
{
 8015398:	4605      	mov	r5, r0
 801539a:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 801539c:	204c      	movs	r0, #76	; 0x4c
 801539e:	4639      	mov	r1, r7
{
 80153a0:	ed2d 8b04 	vpush	{d8-d9}
 80153a4:	b083      	sub	sp, #12
 80153a6:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80153aa:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80153ae:	ed9f 8a42 	vldr	s16, [pc, #264]	; 80154b8 <tVZFilter_initToPool+0x124>
{
 80153b2:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 80153b6:	f001 fb71 	bl	8016a9c <mpool_alloc>
 80153ba:	6028      	str	r0, [r5, #0]
 80153bc:	4604      	mov	r4, r0
    f->mempool = m;
 80153be:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80153c0:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 80153c4:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80153c6:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 80153ca:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80153ce:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 80154bc <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 80153d2:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80153d6:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80153de:	f001 f96d 	bl	80166bc <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80153e2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80154c0 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 80153e6:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80153ea:	ee20 6a09 	vmul.f32	s12, s0, s18
 80153ee:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 80153f2:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 80153f6:	4b33      	ldr	r3, [pc, #204]	; (80154c4 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 80153f8:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 80153fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 80153fe:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 8015402:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015406:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 801540a:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 801540e:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 8015410:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8015414:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8015418:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 801541c:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8015420:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015424:	f008 f868 	bl	801d4f8 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015428:	ed9f 1a27 	vldr	s2, [pc, #156]	; 80154c8 <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 801542c:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015430:	eef0 0a68 	vmov.f32	s1, s17
 8015434:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8015438:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 801543a:	f001 f93f 	bl	80166bc <LEAF_clip>
 801543e:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8015442:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8015446:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 801544a:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 801544e:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8015450:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015454:	f007 fef0 	bl	801d238 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8015458:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 801545c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8015460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015464:	ee67 7a89 	vmul.f32	s15, s15, s18
 8015468:	ee27 0a80 	vmul.f32	s0, s15, s0
 801546c:	f008 f844 	bl	801d4f8 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8015470:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8015474:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8015478:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 801547a:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 801547e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8015482:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801548a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801548e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015492:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8015496:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 801549a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801549e:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 80154a2:	f7ff fe3f 	bl	8015124 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 80154a6:	4628      	mov	r0, r5
}
 80154a8:	b003      	add	sp, #12
 80154aa:	ecbd 8b04 	vpop	{d8-d9}
 80154ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 80154b2:	f7ff be37 	b.w	8015124 <tVZFilter_calcCoeffs>
 80154b6:	bf00      	nop
 80154b8:	00000000 	.word	0x00000000
 80154bc:	40490fdb 	.word	0x40490fdb
 80154c0:	3fb504f3 	.word	0x3fb504f3
 80154c4:	3f3504f3 	.word	0x3f3504f3
 80154c8:	42c80000 	.word	0x42c80000

080154cc <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 80154cc:	3218      	adds	r2, #24
 80154ce:	f7ff bf61 	b.w	8015394 <tVZFilter_initToPool>
 80154d2:	bf00      	nop

080154d4 <tVZFilter_setFreq>:
{
 80154d4:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 80154d6:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80154d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 80154dc:	4604      	mov	r4, r0
 80154de:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80154e2:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 80154e6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8015500 <tVZFilter_setFreq+0x2c>
 80154ea:	ee21 1a27 	vmul.f32	s2, s2, s15
 80154ee:	f001 f8e5 	bl	80166bc <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
 80154f2:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80154f4:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
 80154f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 80154fc:	f7ff be12 	b.w	8015124 <tVZFilter_calcCoeffs>
 8015500:	00000000 	.word	0x00000000

08015504 <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
 8015504:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015508:	4baa      	ldr	r3, [pc, #680]	; (80157b4 <tVZFilter_setFreqFast+0x2b0>)
 801550a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
 801550e:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015512:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
 8015516:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801551a:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 801551e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015522:	ed91 6a01 	vldr	s12, [r1, #4]
{
 8015526:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
 8015528:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
 801552c:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801552e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015532:	edd1 6a00 	vldr	s13, [r1]
 8015536:	ee67 7a86 	vmul.f32	s15, s15, s12
{
 801553a:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801553e:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
 8015542:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015544:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 8015548:	2a0a      	cmp	r2, #10
 801554a:	f200 812f 	bhi.w	80157ac <tVZFilter_setFreqFast+0x2a8>
 801554e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8015552:	0026      	.short	0x0026
 8015554:	0038002f 	.word	0x0038002f
 8015558:	004d0041 	.word	0x004d0041
 801555c:	009b0056 	.word	0x009b0056
 8015560:	00cf00b5 	.word	0x00cf00b5
 8015564:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8015568:	ed94 7a05 	vldr	s14, [r4, #20]
 801556c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015570:	eef1 6a47 	vneg.f32	s13, s14
 8015574:	61e3      	str	r3, [r4, #28]
 8015576:	6263      	str	r3, [r4, #36]	; 0x24
 8015578:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 801557c:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8015584:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015588:	eef0 6a47 	vmov.f32	s13, s14
 801558c:	eee0 6a27 	vfma.f32	s13, s0, s15
 8015590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015594:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8015598:	ecbd 8b02 	vpop	{d8}
 801559c:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 801559e:	2300      	movs	r3, #0
 80155a0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80155a4:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80155a8:	61e3      	str	r3, [r4, #28]
 80155aa:	6223      	str	r3, [r4, #32]
 80155ac:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 80155ae:	e7e5      	b.n	801557c <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80155b0:	2300      	movs	r3, #0
 80155b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80155b6:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80155ba:	6223      	str	r3, [r4, #32]
 80155bc:	6263      	str	r3, [r4, #36]	; 0x24
 80155be:	61e2      	str	r2, [r4, #28]
            break;
 80155c0:	e7dc      	b.n	801557c <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80155c2:	2300      	movs	r3, #0
 80155c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80155c8:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80155cc:	61e3      	str	r3, [r4, #28]
 80155ce:	6263      	str	r3, [r4, #36]	; 0x24
 80155d0:	6222      	str	r2, [r4, #32]
            break;
 80155d2:	e7d3      	b.n	801557c <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80155d4:	ed94 7a05 	vldr	s14, [r4, #20]
 80155d8:	2300      	movs	r3, #0
 80155da:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80155de:	61e3      	str	r3, [r4, #28]
 80155e0:	ee66 6a87 	vmul.f32	s13, s13, s14
 80155e4:	6263      	str	r3, [r4, #36]	; 0x24
 80155e6:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 80155ea:	e7c7      	b.n	801557c <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80155ec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80155f0:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 80155f2:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80155f6:	6222      	str	r2, [r4, #32]
 80155f8:	61e3      	str	r3, [r4, #28]
 80155fa:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80155fc:	e7be      	b.n	801557c <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80155fe:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8015602:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8015606:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801560a:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801560e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8015612:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015616:	f000 ffd7 	bl	80165c8 <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801561a:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 801561e:	eddf 7a66 	vldr	s15, [pc, #408]	; 80157b8 <tVZFilter_setFreqFast+0x2b4>
 8015622:	ee28 8a07 	vmul.f32	s16, s16, s14
 8015626:	ee28 8a27 	vmul.f32	s16, s16, s15
 801562a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801562e:	f000 ff73 	bl	8016518 <fastertanf>
            float r  = f->g/wl;
 8015632:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015636:	eeb0 5a68 	vmov.f32	s10, s17
 801563a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
 801563e:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015642:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015646:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 801564a:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801564e:	eea7 5aa7 	vfma.f32	s10, s15, s15
 8015652:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8015656:	ee77 7a65 	vsub.f32	s15, s14, s11
 801565a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801565e:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8015662:	f000 ff6d 	bl	8016540 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015666:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 801566a:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801566e:	edc4 8a07 	vstr	s17, [r4, #28]
 8015672:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015676:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801567a:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801567e:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015682:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8015686:	e779      	b.n	801557c <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 8015688:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801568c:	f000 ff58 	bl	8016540 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015690:	f000 ff56 	bl	8016540 <fastsqrtf>
 8015694:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015698:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 801569c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80156a0:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 80156a4:	ed94 7a05 	vldr	s14, [r4, #20]
 80156a8:	edc4 6a07 	vstr	s13, [r4, #28]
 80156ac:	6263      	str	r3, [r4, #36]	; 0x24
 80156ae:	ee66 6a87 	vmul.f32	s13, s13, s14
 80156b2:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80156b6:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 80156ba:	e75f      	b.n	801557c <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 80156bc:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80156c0:	f000 ff3e 	bl	8016540 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80156c4:	f000 ff3c 	bl	8016540 <fastsqrtf>
 80156c8:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80156cc:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80156d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80156d4:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80156d8:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80156dc:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 80156e0:	ee67 6a26 	vmul.f32	s13, s14, s13
 80156e4:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80156e6:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80156ea:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 80156ee:	e745      	b.n	801557c <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
 80156f0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80156f4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80156f8:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80156fc:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80157bc <tVZFilter_setFreqFast+0x2b8>
 8015700:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8015704:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015708:	eeb0 0a48 	vmov.f32	s0, s16
 801570c:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015710:	f001 f9a6 	bl	8016a60 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015714:	eddf 0a29 	vldr	s1, [pc, #164]	; 80157bc <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015718:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 801571c:	eeb0 0a68 	vmov.f32	s0, s17
 8015720:	f001 f9a2 	bl	8016a68 <minimum>
            f->cB = 1.0f-x*x;
 8015724:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015728:	edd4 7a05 	vldr	s15, [r4, #20]
 801572c:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8015730:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015734:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8015738:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 801573c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015740:	ee76 5a06 	vadd.f32	s11, s12, s12
 8015744:	ee38 8a08 	vadd.f32	s16, s16, s16
 8015748:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 801574c:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015750:	eee6 7a06 	vfma.f32	s15, s12, s12
 8015754:	eee0 7a00 	vfma.f32	s15, s0, s0
 8015758:	eee0 7a65 	vfms.f32	s15, s0, s11
 801575c:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8015760:	f000 feee 	bl	8016540 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8015764:	edd4 5a07 	vldr	s11, [r4, #28]
 8015768:	ed94 6a08 	vldr	s12, [r4, #32]
 801576c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8015770:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015774:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 8015778:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 801577c:	ee65 5a80 	vmul.f32	s11, s11, s0
 8015780:	ee26 6a00 	vmul.f32	s12, s12, s0
 8015784:	ee26 0a80 	vmul.f32	s0, s13, s0
 8015788:	edc4 5a07 	vstr	s11, [r4, #28]
 801578c:	ed84 6a08 	vstr	s12, [r4, #32]
 8015790:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8015794:	e6f2      	b.n	801557c <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
 8015796:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 801579a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 801579e:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 80157a0:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 80157a4:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 80157a8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80157aa:	e6e7      	b.n	801557c <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
 80157ac:	ed94 7a05 	vldr	s14, [r4, #20]
 80157b0:	e6e4      	b.n	801557c <tVZFilter_setFreqFast+0x78>
 80157b2:	bf00      	nop
 80157b4:	0801f364 	.word	0x0801f364
 80157b8:	40490fdb 	.word	0x40490fdb
 80157bc:	00000000 	.word	0x00000000

080157c0 <tVZFilter_setGain>:
{
 80157c0:	b538      	push	{r3, r4, r5, lr}
 80157c2:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80157c6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80157f0 <tVZFilter_setGain+0x30>
 80157ca:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80157f4 <tVZFilter_setGain+0x34>
{
 80157ce:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 80157d0:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80157d2:	f000 ff73 	bl	80166bc <LEAF_clip>
    f->invG = 1.0f/f->G;
 80157d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 80157da:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80157dc:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 80157e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80157e4:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 80157e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 80157ec:	f7ff bc9a 	b.w	8015124 <tVZFilter_calcCoeffs>
 80157f0:	457a0000 	.word	0x457a0000
 80157f4:	358637bd 	.word	0x358637bd

080157f8 <tVZFilter_setResonance>:
{
 80157f8:	b538      	push	{r3, r4, r5, lr}
 80157fa:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 80157fe:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015828 <tVZFilter_setResonance+0x30>
 8015802:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801582c <tVZFilter_setResonance+0x34>
{
 8015806:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8015808:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 801580a:	f000 ff57 	bl	80166bc <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 801580e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8015812:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8015814:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 8015818:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801581c:	edc5 7a05 	vstr	s15, [r5, #20]
}
 8015820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8015824:	f7ff bc7e 	b.w	8015124 <tVZFilter_calcCoeffs>
 8015828:	42c80000 	.word	0x42c80000
 801582c:	3c23d70a 	.word	0x3c23d70a

08015830 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 8015830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
 8015834:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015836:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8015aac <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
 801583a:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
 801583e:	b510      	push	{r4, lr}
 8015840:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
 8015844:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
 8015848:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
 801584c:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 801584e:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8015852:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8015856:	ee68 8a87 	vmul.f32	s17, s17, s14
 801585a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801585e:	eeb0 0a68 	vmov.f32	s0, s17
 8015862:	f007 fe49 	bl	801d4f8 <tanf>
    switch( f->type )
 8015866:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015868:	eeb0 8a40 	vmov.f32	s16, s0
 801586c:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8015870:	2b0a      	cmp	r3, #10
 8015872:	f200 8117 	bhi.w	8015aa4 <tVZFilter_setSampleRate+0x274>
 8015876:	e8df f013 	tbh	[pc, r3, lsl #1]
 801587a:	0026      	.short	0x0026
 801587c:	0038002f 	.word	0x0038002f
 8015880:	004d0041 	.word	0x004d0041
 8015884:	008b0056 	.word	0x008b0056
 8015888:	00b700a1 	.word	0x00b700a1
 801588c:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8015890:	edd4 7a05 	vldr	s15, [r4, #20]
 8015894:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015898:	eeb1 7a67 	vneg.f32	s14, s15
 801589c:	61e3      	str	r3, [r4, #28]
 801589e:	6263      	str	r3, [r4, #36]	; 0x24
 80158a0:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80158a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 80158a8:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80158ac:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 80158b0:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80158b4:	eee7 6a88 	vfma.f32	s13, s15, s16
 80158b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80158bc:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
 80158c0:	ecbd 8b02 	vpop	{d8}
 80158c4:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80158c6:	2300      	movs	r3, #0
 80158c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80158cc:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80158d0:	61e3      	str	r3, [r4, #28]
 80158d2:	6223      	str	r3, [r4, #32]
 80158d4:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 80158d6:	e7e5      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80158d8:	2300      	movs	r3, #0
 80158da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80158de:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80158e2:	6223      	str	r3, [r4, #32]
 80158e4:	6263      	str	r3, [r4, #36]	; 0x24
 80158e6:	61e2      	str	r2, [r4, #28]
            break;
 80158e8:	e7dc      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80158ea:	2300      	movs	r3, #0
 80158ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80158f0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80158f4:	61e3      	str	r3, [r4, #28]
 80158f6:	6263      	str	r3, [r4, #36]	; 0x24
 80158f8:	6222      	str	r2, [r4, #32]
            break;
 80158fa:	e7d3      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80158fc:	edd4 7a05 	vldr	s15, [r4, #20]
 8015900:	2300      	movs	r3, #0
 8015902:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8015906:	61e3      	str	r3, [r4, #28]
 8015908:	ee27 7a27 	vmul.f32	s14, s14, s15
 801590c:	6263      	str	r3, [r4, #36]	; 0x24
 801590e:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8015912:	e7c7      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015914:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015918:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 801591a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 801591e:	6222      	str	r2, [r4, #32]
 8015920:	61e3      	str	r3, [r4, #28]
 8015922:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8015924:	e7be      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8015926:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801592a:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 801592e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8015932:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015936:	f007 fc7f 	bl	801d238 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801593a:	ee28 0a80 	vmul.f32	s0, s17, s0
 801593e:	f007 fddb 	bl	801d4f8 <tanf>
            float r  = f->g/wl;
 8015942:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015946:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801594a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801594e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8015952:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015956:	ed84 7a07 	vstr	s14, [r4, #28]
 801595a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 801595e:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015962:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8015966:	eef0 6a47 	vmov.f32	s13, s14
 801596a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801596e:	ee77 7a45 	vsub.f32	s15, s14, s10
 8015972:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015976:	ee87 7a86 	vdiv.f32	s14, s15, s12
 801597a:	eef1 7ac7 	vsqrt.f32	s15, s14
 801597e:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015982:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015986:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801598a:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 801598e:	e789      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 8015990:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015994:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015998:	edd4 7a05 	vldr	s15, [r4, #20]
 801599c:	eef1 6ac7 	vsqrt.f32	s13, s14
 80159a0:	ed84 7a07 	vstr	s14, [r4, #28]
 80159a4:	6263      	str	r3, [r4, #36]	; 0x24
 80159a6:	ee27 6a27 	vmul.f32	s12, s14, s15
 80159aa:	ed84 6a08 	vstr	s12, [r4, #32]
 80159ae:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80159b2:	ee80 8a07 	vdiv.f32	s16, s0, s14
 80159b6:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 80159ba:	e773      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 80159bc:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80159c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80159c4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80159c8:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80159cc:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 80159d0:	61e3      	str	r3, [r4, #28]
 80159d2:	ee27 6a27 	vmul.f32	s12, s14, s15
 80159d6:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80159da:	eeb1 7ae6 	vsqrt.f32	s14, s13
 80159de:	ee20 8a07 	vmul.f32	s16, s0, s14
 80159e2:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 80159e6:	e75d      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
            float x  = (2.0f*f->m-1.0f);
 80159e8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80159ec:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80159f0:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80159f4:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8015ab0 <tVZFilter_setSampleRate+0x280>
 80159f8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 80159fc:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015a00:	eeb0 0a48 	vmov.f32	s0, s16
 8015a04:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015a08:	f001 f82a 	bl	8016a60 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015a0c:	eddf 0a28 	vldr	s1, [pc, #160]	; 8015ab0 <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015a10:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015a14:	eeb0 0a68 	vmov.f32	s0, s17
 8015a18:	f001 f826 	bl	8016a68 <minimum>
            f->cB = 1.0f-x*x;
 8015a1c:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015a20:	edd4 7a05 	vldr	s15, [r4, #20]
 8015a24:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8015a28:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015a2c:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8015a30:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015a34:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015a38:	ee76 5a06 	vadd.f32	s11, s12, s12
 8015a3c:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8015a40:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015a44:	eee6 7a06 	vfma.f32	s15, s12, s12
 8015a48:	eee0 7a00 	vfma.f32	s15, s0, s0
 8015a4c:	eee0 7a65 	vfms.f32	s15, s0, s11
 8015a50:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8015a54:	f000 fd74 	bl	8016540 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8015a58:	edd4 5a07 	vldr	s11, [r4, #28]
 8015a5c:	ed94 6a08 	vldr	s12, [r4, #32]
 8015a60:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8015a64:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015a68:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8015a6c:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015a70:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8015a74:	ee65 5a80 	vmul.f32	s11, s11, s0
 8015a78:	ee26 6a00 	vmul.f32	s12, s12, s0
 8015a7c:	ee26 0a80 	vmul.f32	s0, s13, s0
 8015a80:	edc4 5a07 	vstr	s11, [r4, #28]
 8015a84:	ed84 6a08 	vstr	s12, [r4, #32]
 8015a88:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8015a8c:	e70a      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
 8015a8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8015a92:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8015a96:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8015a98:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8015a9c:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8015aa0:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8015aa2:	e6ff      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
    f->R2Plusg = f->R2+f->g;
 8015aa4:	edd4 7a05 	vldr	s15, [r4, #20]
 8015aa8:	e6fc      	b.n	80158a4 <tVZFilter_setSampleRate+0x74>
 8015aaa:	bf00      	nop
 8015aac:	40490fdb 	.word	0x40490fdb
 8015ab0:	00000000 	.word	0x00000000

08015ab4 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 8015ab4:	b570      	push	{r4, r5, r6, lr}
 8015ab6:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8015aba:	698d      	ldr	r5, [r1, #24]
{
 8015abc:	eeb0 8a40 	vmov.f32	s16, s0
 8015ac0:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8015ac2:	2040      	movs	r0, #64	; 0x40
 8015ac4:	4629      	mov	r1, r5
{
 8015ac6:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8015aca:	f000 ffe7 	bl	8016a9c <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8015ace:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8015b48 <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8015ad2:	6030      	str	r0, [r6, #0]
 8015ad4:	4604      	mov	r4, r0
    f->mempool = m;
 8015ad6:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8015ad8:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
 8015adc:	686b      	ldr	r3, [r5, #4]
 8015ade:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
 8015ae2:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8015ae6:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
 8015aea:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8015aee:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8015af2:	f007 f9cd 	bl	801ce90 <tan>
    f->r = (7.f * resonance + 0.5f);
 8015af6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015afa:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 8015afe:	4913      	ldr	r1, [pc, #76]	; (8015b4c <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
 8015b00:	4b13      	ldr	r3, [pc, #76]	; (8015b50 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 8015b02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
 8015b06:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
 8015b0a:	2000      	movs	r0, #0
    f->n = 1.836f;
 8015b0c:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8015b0e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
 8015b12:	4910      	ldr	r1, [pc, #64]	; (8015b54 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
 8015b14:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
 8015b18:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
 8015b1a:	4b0f      	ldr	r3, [pc, #60]	; (8015b58 <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
 8015b1c:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
 8015b1e:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
 8015b20:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
 8015b22:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
 8015b24:	480d      	ldr	r0, [pc, #52]	; (8015b5c <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
 8015b26:	490e      	ldr	r1, [pc, #56]	; (8015b60 <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
 8015b28:	4a0e      	ldr	r2, [pc, #56]	; (8015b64 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
 8015b2a:	4b0f      	ldr	r3, [pc, #60]	; (8015b68 <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8015b2c:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
 8015b30:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 8015b34:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
 8015b38:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
 8015b3a:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 8015b3c:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
 8015b3e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8015b40:	ecbd 8b02 	vpop	{d8}
 8015b44:	bd70      	pop	{r4, r5, r6, pc}
 8015b46:	bf00      	nop
 8015b48:	40490fdb 	.word	0x40490fdb
 8015b4c:	3feb020c 	.word	0x3feb020c
 8015b50:	3f6b020c 	.word	0x3f6b020c
 8015b54:	3c23d70a 	.word	0x3c23d70a
 8015b58:	3ca3d70a 	.word	0x3ca3d70a
 8015b5c:	3cf5c28f 	.word	0x3cf5c28f
 8015b60:	3f0b6efd 	.word	0x3f0b6efd
 8015b64:	3e39e952 	.word	0x3e39e952
 8015b68:	3d23d70a 	.word	0x3d23d70a

08015b6c <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 8015b6c:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015b6e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015b72:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8015e5c <tDiodeFilter_tick+0x2f0>
 8015b76:	eddf 7aba 	vldr	s15, [pc, #744]	; 8015e60 <tDiodeFilter_tick+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015b7a:	eddf 0aba 	vldr	s1, [pc, #744]	; 8015e64 <tDiodeFilter_tick+0x2f8>
 8015b7e:	eeb0 1a67 	vmov.f32	s2, s15
{
 8015b82:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015b86:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015b8a:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015b8e:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015b92:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 8015b96:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015b9a:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015b9e:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 8015ba2:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 8015ba6:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8015baa:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 8015bae:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015bb2:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8015bb6:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015bba:	eea4 7a84 	vfma.f32	s14, s9, s8
 8015bbe:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015bc2:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8015bc6:	ee73 5ac3 	vsub.f32	s11, s7, s6
 8015bca:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015bce:	ee27 7a22 	vmul.f32	s14, s14, s5
 8015bd2:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 8015bd6:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8015bda:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015bde:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015be2:	ee77 4a20 	vadd.f32	s9, s14, s1
 8015be6:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015bea:	eef0 4a67 	vmov.f32	s9, s15
 8015bee:	eee7 4a04 	vfma.f32	s9, s14, s8
 8015bf2:	eeb0 7a42 	vmov.f32	s14, s4
 8015bf6:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015bfa:	ee81 4a24 	vdiv.f32	s8, s2, s9
 8015bfe:	ee75 4aa0 	vadd.f32	s9, s11, s1
 8015c02:	eeb0 1a67 	vmov.f32	s2, s15
 8015c06:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015c0a:	eef0 4a67 	vmov.f32	s9, s15
 8015c0e:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8015c12:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015c16:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015c1a:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8015c1e:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 8015c22:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8015c26:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8015c2a:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8015c2e:	ee24 4a06 	vmul.f32	s8, s8, s12
 8015c32:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 8015c36:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8015c3a:	ee25 5a25 	vmul.f32	s10, s10, s11
 8015c3e:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 8015c42:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015c46:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 8015c4a:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015c4e:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8015c52:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015c56:	eee5 9a88 	vfma.f32	s19, s11, s16
 8015c5a:	eeb0 8a67 	vmov.f32	s16, s15
 8015c5e:	eee1 8a09 	vfma.f32	s17, s2, s18
 8015c62:	eeb0 9a67 	vmov.f32	s18, s15
 8015c66:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015c6a:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015c6e:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015c72:	ee75 9aa0 	vadd.f32	s19, s11, s1
 8015c76:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015c7a:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015c7e:	eec2 5a09 	vdiv.f32	s11, s4, s18
 8015c82:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8015c86:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015c8a:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015c8e:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015c92:	eea1 9a25 	vfma.f32	s18, s2, s11
 8015c96:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015c9a:	eee1 aaa2 	vfma.f32	s21, s3, s5
 8015c9e:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015ca2:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015ca6:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015caa:	ee89 2a28 	vdiv.f32	s4, s18, s17
 8015cae:	eec7 5a88 	vdiv.f32	s11, s15, s16
 8015cb2:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015cb6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015cba:	ee31 1a20 	vadd.f32	s2, s2, s1
 8015cbe:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015cc2:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015cc6:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8015cca:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015cce:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015cd2:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015cd6:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015cda:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8015cde:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015ce2:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015ce6:	eeaa aa87 	vfma.f32	s20, s21, s14
 8015cea:	ee68 aa07 	vmul.f32	s21, s16, s14
 8015cee:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015cf2:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015cf6:	eeea 5a82 	vfma.f32	s11, s21, s4
 8015cfa:	eeb0 1a65 	vmov.f32	s2, s11
 8015cfe:	eef0 5a45 	vmov.f32	s11, s10
 8015d02:	eeea 5a89 	vfma.f32	s11, s21, s18
 8015d06:	eee1 5a27 	vfma.f32	s11, s2, s15
 8015d0a:	ee35 1a09 	vadd.f32	s2, s10, s18
 8015d0e:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015d12:	ee66 9a87 	vmul.f32	s19, s13, s14
 8015d16:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015d1a:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015d1e:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015d22:	eee1 5a06 	vfma.f32	s11, s2, s12
 8015d26:	eeb0 1a66 	vmov.f32	s2, s13
 8015d2a:	eea9 1a89 	vfma.f32	s2, s19, s18
 8015d2e:	eea2 1a27 	vfma.f32	s2, s4, s15
 8015d32:	ee34 2a04 	vadd.f32	s4, s8, s8
 8015d36:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015d3a:	eeb0 2a41 	vmov.f32	s4, s2
 8015d3e:	eea0 4aa7 	vfma.f32	s8, s1, s15
 8015d42:	eea4 2a06 	vfma.f32	s4, s8, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 8015d46:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8015d4a:	eef4 5a44 	vcmp.f32	s11, s8
 8015d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8015d52:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015d56:	bf14      	ite	ne
 8015d58:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 8015d5c:	eddf 5a42 	vldreq	s11, [pc, #264]	; 8015e68 <tDiodeFilter_tick+0x2fc>
    if (t1 == 0.0f)
 8015d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8015d64:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 8015d68:	d069      	beq.n	8015e3e <tDiodeFilter_tick+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8015d6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015d6e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8015d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d76:	ee37 2a02 	vadd.f32	s4, s14, s4
 8015d7a:	d069      	beq.n	8015e50 <tDiodeFilter_tick+0x2e4>
 8015d7c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015d80:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8015d84:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
 8015d88:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8015d8c:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 8015d90:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8015d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8015d98:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 8015d9c:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 8015da0:	bf08      	it	eq
 8015da2:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 8015e68 <tDiodeFilter_tick+0x2fc>
    return tanhf(y3*f->r);
 8015da6:	eeb0 0a61 	vmov.f32	s0, s3
 8015daa:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8015dae:	ee38 4a06 	vadd.f32	s8, s16, s12
 8015db2:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8015db6:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8015dba:	eed4 8a20 	vfnms.f32	s17, s8, s1
 8015dbe:	eea6 8a20 	vfma.f32	s16, s12, s1
 8015dc2:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8015dc6:	ee95 8a84 	vfnms.f32	s16, s11, s8
 8015dca:	eee7 1a84 	vfma.f32	s3, s15, s8
 8015dce:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8015dd2:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8015dd6:	ee35 2ac4 	vsub.f32	s4, s11, s8
 8015dda:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8015dde:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8015de2:	ee74 1a60 	vsub.f32	s3, s8, s1
 8015de6:	ee61 1a86 	vmul.f32	s3, s3, s12
 8015dea:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8015dee:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8015df2:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8015df6:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8015dfa:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8015dfe:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8015e02:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8015e06:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8015e0a:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8015e0e:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8015e12:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8015e16:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8015e1a:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8015e1e:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8015e22:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8015e26:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8015e2a:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8015e2e:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8015e32:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 8015e36:	ecbd 8b06 	vpop	{d8-d10}
    return tanhf(y3*f->r);
 8015e3a:	f007 bb89 	b.w	801d550 <tanhf>
    if (t2 == 0.0f)
 8015e3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015e42:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8015e6c <tDiodeFilter_tick+0x300>
        t1 = 0.000001f;
 8015e46:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8015e68 <tDiodeFilter_tick+0x2fc>
    if (t2 == 0.0f)
 8015e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e4e:	d195      	bne.n	8015d7c <tDiodeFilter_tick+0x210>
 8015e50:	eddf 5a06 	vldr	s11, [pc, #24]	; 8015e6c <tDiodeFilter_tick+0x300>
        t2 = 0.000001f;
 8015e54:	eddf 7a04 	vldr	s15, [pc, #16]	; 8015e68 <tDiodeFilter_tick+0x2fc>
 8015e58:	e794      	b.n	8015d84 <tDiodeFilter_tick+0x218>
 8015e5a:	bf00      	nop
 8015e5c:	43d20000 	.word	0x43d20000
 8015e60:	446c4000 	.word	0x446c4000
 8015e64:	42d20000 	.word	0x42d20000
 8015e68:	358637bd 	.word	0x358637bd
 8015e6c:	3f800008 	.word	0x3f800008

08015e70 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
float   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 8015e70:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015e72:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015e76:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8016160 <tDiodeFilter_tickEfficient+0x2f0>
 8015e7a:	eddf 7aba 	vldr	s15, [pc, #744]	; 8016164 <tDiodeFilter_tickEfficient+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015e7e:	eddf 0aba 	vldr	s1, [pc, #744]	; 8016168 <tDiodeFilter_tickEfficient+0x2f8>
 8015e82:	eeb0 1a67 	vmov.f32	s2, s15
{
 8015e86:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015e8a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015e8e:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015e92:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015e96:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 8015e9a:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015e9e:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015ea2:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 8015ea6:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 8015eaa:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8015eae:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 8015eb2:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015eb6:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8015eba:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015ebe:	eea4 7a84 	vfma.f32	s14, s9, s8
 8015ec2:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015ec6:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8015eca:	ee73 5ac3 	vsub.f32	s11, s7, s6
 8015ece:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015ed2:	ee27 7a22 	vmul.f32	s14, s14, s5
 8015ed6:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 8015eda:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8015ede:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015ee2:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015ee6:	ee77 4a20 	vadd.f32	s9, s14, s1
 8015eea:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015eee:	eef0 4a67 	vmov.f32	s9, s15
 8015ef2:	eee7 4a04 	vfma.f32	s9, s14, s8
 8015ef6:	eeb0 7a42 	vmov.f32	s14, s4
 8015efa:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015efe:	ee81 4a24 	vdiv.f32	s8, s2, s9
 8015f02:	ee75 4aa0 	vadd.f32	s9, s11, s1
 8015f06:	eeb0 1a67 	vmov.f32	s2, s15
 8015f0a:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015f0e:	eef0 4a67 	vmov.f32	s9, s15
 8015f12:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8015f16:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8015f1a:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015f1e:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8015f22:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 8015f26:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8015f2a:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8015f2e:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8015f32:	ee24 4a06 	vmul.f32	s8, s8, s12
 8015f36:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 8015f3a:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8015f3e:	ee25 5a25 	vmul.f32	s10, s10, s11
 8015f42:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 8015f46:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015f4a:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 8015f4e:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015f52:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8015f56:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015f5a:	eee5 9a88 	vfma.f32	s19, s11, s16
 8015f5e:	eeb0 8a67 	vmov.f32	s16, s15
 8015f62:	eee1 8a09 	vfma.f32	s17, s2, s18
 8015f66:	eeb0 9a67 	vmov.f32	s18, s15
 8015f6a:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015f6e:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8015f72:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015f76:	ee75 9aa0 	vadd.f32	s19, s11, s1
 8015f7a:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015f7e:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015f82:	eec2 5a09 	vdiv.f32	s11, s4, s18
 8015f86:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8015f8a:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015f8e:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015f92:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015f96:	eea1 9a25 	vfma.f32	s18, s2, s11
 8015f9a:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015f9e:	eee1 aaa2 	vfma.f32	s21, s3, s5
 8015fa2:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015fa6:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015faa:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8015fae:	ee89 2a28 	vdiv.f32	s4, s18, s17
 8015fb2:	eec7 5a88 	vdiv.f32	s11, s15, s16
 8015fb6:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015fba:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015fbe:	ee31 1a20 	vadd.f32	s2, s2, s1
 8015fc2:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015fc6:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015fca:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8015fce:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015fd2:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015fd6:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015fda:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015fde:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8015fe2:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015fe6:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015fea:	eeaa aa87 	vfma.f32	s20, s21, s14
 8015fee:	ee68 aa07 	vmul.f32	s21, s16, s14
 8015ff2:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8015ff6:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8015ffa:	eeea 5a82 	vfma.f32	s11, s21, s4
 8015ffe:	eeb0 1a65 	vmov.f32	s2, s11
 8016002:	eef0 5a45 	vmov.f32	s11, s10
 8016006:	eeea 5a89 	vfma.f32	s11, s21, s18
 801600a:	eee1 5a27 	vfma.f32	s11, s2, s15
 801600e:	ee35 1a09 	vadd.f32	s2, s10, s18
 8016012:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016016:	ee66 9a87 	vmul.f32	s19, s13, s14
 801601a:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801601e:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016022:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016026:	eee1 5a06 	vfma.f32	s11, s2, s12
 801602a:	eeb0 1a66 	vmov.f32	s2, s13
 801602e:	eea9 1a89 	vfma.f32	s2, s19, s18
 8016032:	eea2 1a27 	vfma.f32	s2, s4, s15
 8016036:	ee34 2a04 	vadd.f32	s4, s8, s8
 801603a:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801603e:	eeb0 2a41 	vmov.f32	s4, s2
 8016042:	eea0 4aa7 	vfma.f32	s8, s1, s15
 8016046:	eea4 2a06 	vfma.f32	s4, s8, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 801604a:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 801604e:	eef4 5a44 	vcmp.f32	s11, s8
 8016052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8016056:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801605a:	bf14      	ite	ne
 801605c:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 8016060:	eddf 5a42 	vldreq	s11, [pc, #264]	; 801616c <tDiodeFilter_tickEfficient+0x2fc>
    if (t1 == 0.0f)
 8016064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8016068:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 801606c:	d069      	beq.n	8016142 <tDiodeFilter_tickEfficient+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 801606e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016072:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8016076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801607a:	ee37 2a02 	vadd.f32	s4, s14, s4
 801607e:	d069      	beq.n	8016154 <tDiodeFilter_tickEfficient+0x2e4>
 8016080:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016084:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8016088:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
 801608c:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8016090:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 8016094:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8016098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 801609c:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 80160a0:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 80160a4:	bf08      	it	eq
 80160a6:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 801616c <tDiodeFilter_tickEfficient+0x2fc>
    return LEAF_tanh(y3*f->r);
 80160aa:	eeb0 0a61 	vmov.f32	s0, s3
 80160ae:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80160b2:	ee38 4a06 	vadd.f32	s8, s16, s12
 80160b6:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80160ba:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80160be:	eed4 8a20 	vfnms.f32	s17, s8, s1
 80160c2:	eea6 8a20 	vfma.f32	s16, s12, s1
 80160c6:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80160ca:	ee95 8a84 	vfnms.f32	s16, s11, s8
 80160ce:	eee7 1a84 	vfma.f32	s3, s15, s8
 80160d2:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80160d6:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80160da:	ee35 2ac4 	vsub.f32	s4, s11, s8
 80160de:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80160e2:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80160e6:	ee74 1a60 	vsub.f32	s3, s8, s1
 80160ea:	ee61 1a86 	vmul.f32	s3, s3, s12
 80160ee:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80160f2:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80160f6:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80160fa:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80160fe:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8016102:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8016106:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801610a:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801610e:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016112:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8016116:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801611a:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 801611e:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016122:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8016126:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801612a:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 801612e:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8016132:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8016136:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 801613a:	ecbd 8b06 	vpop	{d8-d10}
    return LEAF_tanh(y3*f->r);
 801613e:	f000 bad1 	b.w	80166e4 <LEAF_tanh>
    if (t2 == 0.0f)
 8016142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016146:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8016170 <tDiodeFilter_tickEfficient+0x300>
        t1 = 0.000001f;
 801614a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801616c <tDiodeFilter_tickEfficient+0x2fc>
    if (t2 == 0.0f)
 801614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016152:	d195      	bne.n	8016080 <tDiodeFilter_tickEfficient+0x210>
 8016154:	eddf 5a06 	vldr	s11, [pc, #24]	; 8016170 <tDiodeFilter_tickEfficient+0x300>
        t2 = 0.000001f;
 8016158:	eddf 7a04 	vldr	s15, [pc, #16]	; 801616c <tDiodeFilter_tickEfficient+0x2fc>
 801615c:	e794      	b.n	8016088 <tDiodeFilter_tickEfficient+0x218>
 801615e:	bf00      	nop
 8016160:	43d20000 	.word	0x43d20000
 8016164:	446c4000 	.word	0x446c4000
 8016168:	42d20000 	.word	0x42d20000
 801616c:	358637bd 	.word	0x358637bd
 8016170:	3f800008 	.word	0x3f800008

08016174 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
 8016174:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016178:	4b0d      	ldr	r3, [pc, #52]	; (80161b0 <tDiodeFilter_setFreqFast+0x3c>)
 801617a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
 801617e:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8016180:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8016184:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016188:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801618c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8016190:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016194:	edd0 6a01 	vldr	s13, [r0, #4]
 8016198:	ee77 7a87 	vadd.f32	s15, s15, s14
 801619c:	ed90 7a00 	vldr	s14, [r0]
 80161a0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80161a4:	eea7 0a27 	vfma.f32	s0, s14, s15
 80161a8:	ed81 0a02 	vstr	s0, [r1, #8]
}
 80161ac:	4770      	bx	lr
 80161ae:	bf00      	nop
 80161b0:	0801f364 	.word	0x0801f364

080161b4 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 80161b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80161b8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80161bc:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 80161c0:	eef0 0a67 	vmov.f32	s1, s15
{
 80161c4:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 80161c6:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 80161c8:	eee0 0a07 	vfma.f32	s1, s0, s14
 80161cc:	eeb0 0a67 	vmov.f32	s0, s15
 80161d0:	f000 fa74 	bl	80166bc <LEAF_clip>
 80161d4:	ed84 0a03 	vstr	s0, [r4, #12]
}
 80161d8:	bd10      	pop	{r4, pc}
 80161da:	bf00      	nop

080161dc <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 80161dc:	b570      	push	{r4, r5, r6, lr}
 80161de:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 80161e2:	698d      	ldr	r5, [r1, #24]
{
 80161e4:	eef0 8a40 	vmov.f32	s17, s0
 80161e8:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80161ea:	2038      	movs	r0, #56	; 0x38
 80161ec:	4629      	mov	r1, r5
{
 80161ee:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80161f2:	f000 fc53 	bl	8016a9c <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 80161f6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8016258 <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80161fa:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
 80161fc:	2301      	movs	r3, #1
    f->mempool = m;
 80161fe:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8016200:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
 8016204:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8016206:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 8016208:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
 801620c:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8016210:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
 8016214:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
 8016216:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 801621a:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801621e:	f006 fe37 	bl	801ce90 <tan>
 8016222:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8016226:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 801622a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 801622e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 8016232:	490a      	ldr	r1, [pc, #40]	; (801625c <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
 8016234:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 8016238:	4b09      	ldr	r3, [pc, #36]	; (8016260 <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
 801623a:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 801623e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
 8016242:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
 8016244:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
 8016246:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
 8016248:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
 801624c:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
 8016250:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8016252:	ecbd 8b02 	vpop	{d8}
 8016256:	bd70      	pop	{r4, r5, r6, pc}
 8016258:	40490fdb 	.word	0x40490fdb
 801625c:	3dcccccd 	.word	0x3dcccccd
 8016260:	3d23d70a 	.word	0x3d23d70a

08016264 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
 8016264:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
 8016266:	eddf 7a8f 	vldr	s15, [pc, #572]	; 80164a4 <tLadderFilter_tick+0x240>
{
 801626a:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 801626e:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 8016270:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 8016274:	2900      	cmp	r1, #0
 8016276:	f340 8110 	ble.w	801649a <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801627a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
 801627e:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8016282:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
 8016286:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
 801628a:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801628e:	ed92 7a08 	vldr	s14, [r2, #32]
 8016292:	ee72 2a27 	vadd.f32	s5, s4, s15
 8016296:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 801629a:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 801629e:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 80162a2:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80162a6:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 80162aa:	ee25 9a28 	vmul.f32	s18, s10, s17
 80162ae:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80162b2:	ee62 2a87 	vmul.f32	s5, s5, s14
 80162b6:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80162ba:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 80162be:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 80162c0:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80162c4:	ed9f 8a78 	vldr	s16, [pc, #480]	; 80164a8 <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 80162c8:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 80162cc:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 80162ce:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 80162d2:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 80162d6:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80162d8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80162dc:	ee26 6a06 	vmul.f32	s12, s12, s12
 80162e0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80162e4:	ee22 baa5 	vmul.f32	s22, s5, s11
 80162e8:	ee26 ca22 	vmul.f32	s24, s12, s5
 80162ec:	ee72 5a25 	vadd.f32	s11, s4, s11
 80162f0:	ee32 6a06 	vadd.f32	s12, s4, s12
 80162f4:	ee66 baa2 	vmul.f32	s23, s13, s5
 80162f8:	eecb ea25 	vdiv.f32	s29, s22, s11
 80162fc:	ee8c ba06 	vdiv.f32	s22, s24, s12
 8016300:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 8016304:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016308:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 801630c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8016310:	ee77 eaee 	vsub.f32	s29, s15, s29
 8016314:	ee77 6acb 	vsub.f32	s13, s15, s22
 8016318:	ee62 5a87 	vmul.f32	s11, s5, s14
 801631c:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
 8016320:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016324:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
 8016328:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801632c:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
 8016330:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
 8016334:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
 8016338:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
 801633c:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
 8016340:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
 8016344:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016348:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
 801634c:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
 8016350:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
 8016354:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016358:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
 801635c:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
 8016360:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016364:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
 8016368:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 801636c:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
 8016370:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
 8016374:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
 8016378:	ee73 5a2a 	vadd.f32	s11, s6, s21
 801637c:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8016380:	ee66 6a26 	vmul.f32	s13, s12, s13
 8016384:	ee65 5a89 	vmul.f32	s11, s11, s18
 8016388:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 801638c:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8016390:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8016394:	ee2d 7a07 	vmul.f32	s14, s26, s14
 8016398:	ee65 5a8f 	vmul.f32	s11, s11, s30
 801639c:	ee60 ea8e 	vmul.f32	s29, s1, s28
 80163a0:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80163a4:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80163a8:	eeb0 ea67 	vmov.f32	s28, s15
 80163ac:	eeab eaad 	vfma.f32	s28, s23, s27
 80163b0:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
 80163b4:	eeb0 ba67 	vmov.f32	s22, s15
 80163b8:	eeec 5a84 	vfma.f32	s11, s25, s8
 80163bc:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 80163c0:	eec9 ba8e 	vdiv.f32	s23, s19, s28
 80163c4:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
 80163c8:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80163cc:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
 80163d0:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
 80163d4:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80163d8:	eef0 ca48 	vmov.f32	s25, s16
 80163dc:	eeab da0b 	vfma.f32	s26, s22, s22
 80163e0:	eee5 caa5 	vfma.f32	s25, s11, s11
 80163e4:	eef1 5acd 	vsqrt.f32	s11, s26
 80163e8:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 80163ec:	ee3b ba65 	vsub.f32	s22, s22, s11
 80163f0:	eef0 5a40 	vmov.f32	s11, s0
 80163f4:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 80163f8:	eeb0 ba43 	vmov.f32	s22, s6
 80163fc:	eea5 ba25 	vfma.f32	s22, s10, s11
 8016400:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8016404:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 8016408:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 801640c:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 8016410:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8016414:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8016418:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 801641c:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 8016420:	ee36 6a66 	vsub.f32	s12, s12, s13
 8016424:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016428:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 801642c:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016430:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 8016434:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8016438:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 801643c:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 8016440:	ee37 7a4c 	vsub.f32	s14, s14, s24
 8016444:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 8016448:	f47f af3e 	bne.w	80162c8 <tLadderFilter_tick+0x64>
 801644c:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 8016450:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 8016454:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 8016458:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 801645c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80164a8 <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
 8016460:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8016464:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016468:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 801646c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016470:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
 8016474:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016478:	eea0 7aa0 	vfma.f32	s14, s1, s1
 801647c:	eef1 7ae5 	vsqrt.f32	s15, s11
 8016480:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
 8016484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016488:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 801648c:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
 8016490:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8016494:	ecbd 8b10 	vpop	{d8-d15}
 8016498:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 801649a:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
 801649e:	ed9f ca03 	vldr	s24, [pc, #12]	; 80164ac <tLadderFilter_tick+0x248>
 80164a2:	e7db      	b.n	801645c <tLadderFilter_tick+0x1f8>
 80164a4:	3c75c28f 	.word	0x3c75c28f
 80164a8:	3c23d70a 	.word	0x3c23d70a
 80164ac:	00000000 	.word	0x00000000

080164b0 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
 80164b0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80164b4:	4b0f      	ldr	r3, [pc, #60]	; (80164f4 <tLadderFilter_setFreqFast+0x44>)
 80164b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
 80164ba:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 80164bc:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 80164c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80164c4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80164c8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 80164cc:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80164d0:	edd0 6a01 	vldr	s13, [r0, #4]
 80164d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80164d8:	ed90 7a00 	vldr	s14, [r0]
 80164dc:	ee20 0a26 	vmul.f32	s0, s0, s13
 80164e0:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
 80164e4:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80164e8:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
 80164ec:	edc1 7a06 	vstr	s15, [r1, #24]
}
 80164f0:	4770      	bx	lr
 80164f2:	bf00      	nop
 80164f4:	0801f364 	.word	0x0801f364

080164f8 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
 80164f8:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 80164fa:	6804      	ldr	r4, [r0, #0]
{
 80164fc:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 8016500:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8016504:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016514 <tLadderFilter_setQ+0x1c>
 8016508:	f000 f8d8 	bl	80166bc <LEAF_clip>
 801650c:	ed84 0a05 	vstr	s0, [r4, #20]
}
 8016510:	bd10      	pop	{r4, pc}
 8016512:	bf00      	nop
 8016514:	3e4ccccd 	.word	0x3e4ccccd

08016518 <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
 8016518:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 801651c:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8016538 <fastertanf+0x20>
 8016520:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801653c <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 8016524:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 8016528:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 801652c:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 8016530:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016534:	4770      	bx	lr
 8016536:	bf00      	nop
 8016538:	3e502de0 	.word	0x3e502de0
 801653c:	3ea295ea 	.word	0x3ea295ea

08016540 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8016540:	ee10 2a10 	vmov	r2, s0
 8016544:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8016548:	4b0d      	ldr	r3, [pc, #52]	; (8016580 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 801654a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801654e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8016552:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016556:	ee00 3a10 	vmov	s0, r3
 801655a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801655e:	eea0 7a67 	vfms.f32	s14, s0, s15
 8016562:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8016566:	ee10 3a10 	vmov	r3, s0
 801656a:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 801656e:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8016572:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8016576:	336e      	adds	r3, #110	; 0x6e
}
 8016578:	ee00 3a10 	vmov	s0, r3
 801657c:	4770      	bx	lr
 801657e:	bf00      	nop
 8016580:	5f3759df 	.word	0x5f3759df

08016584 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8016584:	ee10 3a10 	vmov	r3, s0
 8016588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801658c:	ee00 3a10 	vmov	s0, r3
}
 8016590:	4770      	bx	lr
 8016592:	bf00      	nop

08016594 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
 8016594:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016598:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80165c4 <fasterexpf+0x30>
 801659c:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 80165a0:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80165a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80165a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80165ac:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 80165b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80165b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80165b8:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 80165bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80165c0:	4770      	bx	lr
 80165c2:	bf00      	nop
 80165c4:	3b800000 	.word	0x3b800000

080165c8 <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 80165c8:	ee10 3a10 	vmov	r3, s0
 80165cc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80165f0 <fastPowf+0x28>
 80165d0:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80165d4:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 80165d8:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 80165dc:	330b      	adds	r3, #11
 80165de:	ee07 3a90 	vmov	s15, r3
 80165e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80165e6:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 80165ea:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 80165ee:	4770      	bx	lr
 80165f0:	4e7de250 	.word	0x4e7de250

080165f4 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 80165f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016674 <LEAF_shaper+0x80>
 80165f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80165fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016600:	d406      	bmi.n	8016610 <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8016602:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8016678 <LEAF_shaper+0x84>
 8016606:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801660a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801660e:	dd02      	ble.n	8016616 <LEAF_shaper+0x22>
 8016610:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 801667c <LEAF_shaper+0x88>
}
 8016614:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
 8016616:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 801661a:	ed9f 5a19 	vldr	s10, [pc, #100]	; 8016680 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 801661e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
 8016622:	ed9f 4a18 	vldr	s8, [pc, #96]	; 8016684 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8016626:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
 801662a:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 801662e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
 8016632:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016636:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 801663a:	eddf 5a13 	vldr	s11, [pc, #76]	; 8016688 <LEAF_shaper+0x94>
 801663e:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
 8016642:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8016646:	ee66 4aa6 	vmul.f32	s9, s13, s13
 801664a:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
 801664e:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8016652:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016656:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 801665a:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
 801665e:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8016662:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8016666:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
 801666a:	ee20 0a80 	vmul.f32	s0, s1, s0
 801666e:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
 8016672:	4770      	bx	lr
 8016674:	bfb504f3 	.word	0xbfb504f3
 8016678:	3fb504f3 	.word	0x3fb504f3
 801667c:	00000000 	.word	0x00000000
 8016680:	3c800000 	.word	0x3c800000
 8016684:	3f272f05 	.word	0x3f272f05
 8016688:	3d4ccccd 	.word	0x3d4ccccd

0801668c <LEAF_round>:
    rnd = fabsf(rnd);
 801668c:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8016690:	eddf 7a06 	vldr	s15, [pc, #24]	; 80166ac <LEAF_round+0x20>
 8016694:	eef4 0ae7 	vcmpe.f32	s1, s15
 8016698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801669c:	d905      	bls.n	80166aa <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 801669e:	eec0 7a20 	vdiv.f32	s15, s0, s1
 80166a2:	feb8 0a67 	vrinta.f32	s0, s15
 80166a6:	ee20 0a20 	vmul.f32	s0, s0, s1
}
 80166aa:	4770      	bx	lr
 80166ac:	33d6bf95 	.word	0x33d6bf95

080166b0 <LEAF_bitwise_xor>:
    return unholy.f;
 80166b0:	ee10 3a10 	vmov	r3, s0
 80166b4:	4043      	eors	r3, r0
 80166b6:	ee00 3a10 	vmov	s0, r3
}
 80166ba:	4770      	bx	lr

080166bc <LEAF_clip>:
    if (min > max)
 80166bc:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80166c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166c4:	dd05      	ble.n	80166d2 <LEAF_clip+0x16>
 80166c6:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
 80166ca:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 80166ce:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
 80166d2:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80166d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166da:	dc01      	bgt.n	80166e0 <LEAF_clip+0x24>
    else if (val > tempmax)
 80166dc:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
}
 80166e0:	4770      	bx	lr
 80166e2:	bf00      	nop

080166e4 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
 80166e4:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 80166e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80166ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166f0:	d418      	bmi.n	8016724 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 80166f2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80166f6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80166fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166fe:	dd02      	ble.n	8016706 <LEAF_tanh+0x22>
        return 1.0f;
 8016700:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 8016704:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8016706:	ee60 6a00 	vmul.f32	s13, s0, s0
 801670a:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 801670e:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8016712:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8016716:	eee6 7a86 	vfma.f32	s15, s13, s12
 801671a:	ee27 7a00 	vmul.f32	s14, s14, s0
 801671e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8016722:	4770      	bx	lr
        return -1.0f;
 8016724:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016728:	4770      	bx	lr
 801672a:	bf00      	nop

0801672c <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
 801672c:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
 801672e:	1e4b      	subs	r3, r1, #1
 8016730:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 8016734:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
 8016736:	ee07 3a90 	vmov	s15, r3
 801673a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 801673e:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
 8016742:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 8016746:	dd16      	ble.n	8016776 <LEAF_generate_exp+0x4a>
 8016748:	4604      	mov	r4, r0
 801674a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801674e:	eeb0 8a60 	vmov.f32	s16, s1
 8016752:	eef0 8a40 	vmov.f32	s17, s0
 8016756:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 801675a:	eef0 0a48 	vmov.f32	s1, s16
 801675e:	eeb0 0a68 	vmov.f32	s0, s17
 8016762:	f006 fd69 	bl	801d238 <powf>
 8016766:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 801676a:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 801676e:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8016772:	42a5      	cmp	r5, r4
 8016774:	d1f1      	bne.n	801675a <LEAF_generate_exp+0x2e>
    }
}
 8016776:	ecbd 8b04 	vpop	{d8-d9}
 801677a:	bd38      	pop	{r3, r4, r5, pc}

0801677c <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
 801677c:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 801677e:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 8016782:	460d      	mov	r5, r1
 8016784:	4604      	mov	r4, r0
 8016786:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 801678a:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 801678e:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8016792:	ee81 0a29 	vdiv.f32	s0, s2, s19
 8016796:	f006 fc2b 	bl	801cff0 <logf>
    float increment = 1.0 / (float)(size-1);
 801679a:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
 801679c:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
 801679e:	ee07 3a90 	vmov	s15, r3
 80167a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80167a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80167aa:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 80167ae:	dd19      	ble.n	80167e4 <LEAF_generate_table_skew_non_sym+0x68>
 80167b0:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 80167ec <LEAF_generate_table_skew_non_sym+0x70>
 80167b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
 80167b8:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80167f0 <LEAF_generate_table_skew_non_sym+0x74>
 80167bc:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
 80167c0:	eeb0 0a48 	vmov.f32	s0, s16
 80167c4:	f006 fc14 	bl	801cff0 <logf>
 80167c8:	ee20 0a09 	vmul.f32	s0, s0, s18
 80167cc:	f006 fb94 	bl	801cef8 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
 80167d0:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 80167d4:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
 80167d8:	eee9 7a80 	vfma.f32	s15, s19, s0
 80167dc:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 80167e0:	42a5      	cmp	r5, r4
 80167e2:	d1ed      	bne.n	80167c0 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
 80167e4:	ecbd 8b06 	vpop	{d8-d10}
 80167e8:	bd38      	pop	{r3, r4, r5, pc}
 80167ea:	bf00      	nop
 80167ec:	bfb8aa3b 	.word	0xbfb8aa3b
 80167f0:	00000000 	.word	0x00000000

080167f4 <LEAF_generate_mtof>:
    }
}


void LEAF_generate_mtof(float* buffer, float startMIDI, float endMIDI, int size)
{
 80167f4:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 80167f6:	1e4b      	subs	r3, r1, #1
 80167f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    float scalar = (endMIDI-startMIDI);
    for (int i = 0; i < size; i++)
 80167fc:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 80167fe:	ee07 3a90 	vmov	s15, r3
 8016802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8016806:	ed2d 8b0a 	vpush	{d8-d12}
    float increment = 1.0f / (float)(size-1);
 801680a:	eec7 aa27 	vdiv.f32	s21, s14, s15
    float scalar = (endMIDI-startMIDI);
 801680e:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 8016812:	dd29      	ble.n	8016868 <LEAF_generate_mtof+0x74>
    float x = 0.0f;
 8016814:	ed9f 9a19 	vldr	s18, [pc, #100]	; 801687c <LEAF_generate_mtof+0x88>
 8016818:	eef0 9a40 	vmov.f32	s19, s0
 801681c:	4604      	mov	r4, r0

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 801681e:	eddf 8a18 	vldr	s17, [pc, #96]	; 8016880 <LEAF_generate_mtof+0x8c>
 8016822:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 8016826:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8016884 <LEAF_generate_mtof+0x90>
 801682a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 801682e:	ed9f ca16 	vldr	s24, [pc, #88]	; 8016888 <LEAF_generate_mtof+0x94>
 8016832:	eddf ba16 	vldr	s23, [pc, #88]	; 801688c <LEAF_generate_mtof+0x98>
        float midiVal = (x * scalar) + startMIDI;
 8016836:	eeb0 0a69 	vmov.f32	s0, s19
 801683a:	eeaa 0a09 	vfma.f32	s0, s20, s18
float mtof(float f)
 801683e:	e006      	b.n	801684e <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8016840:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8016844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016848:	dd11      	ble.n	801686e <LEAF_generate_mtof+0x7a>
 801684a:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 801684e:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8016852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016856:	d8f3      	bhi.n	8016840 <LEAF_generate_mtof+0x4c>
 8016858:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 801685c:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8016860:	42a5      	cmp	r5, r4
        x += increment;
 8016862:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 8016866:	d1e6      	bne.n	8016836 <LEAF_generate_mtof+0x42>
}
 8016868:	ecbd 8b0a 	vpop	{d8-d12}
 801686c:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 801686e:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8016872:	f006 fb41 	bl	801cef8 <expf>
 8016876:	ee60 7a2b 	vmul.f32	s15, s0, s23
 801687a:	e7ef      	b.n	801685c <LEAF_generate_mtof+0x68>
 801687c:	00000000 	.word	0x00000000
 8016880:	c4bb8000 	.word	0xc4bb8000
 8016884:	44bb6000 	.word	0x44bb6000
 8016888:	3d6c9820 	.word	0x3d6c9820
 801688c:	4102d013 	.word	0x4102d013

08016890 <LEAF_interpolate_hermite_x>:
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8016890:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8016894:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float c1 = 0.5f * (yy2 - yy0);
 8016898:	ee31 6a40 	vsub.f32	s12, s2, s0
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 801689c:	ee71 1aa0 	vadd.f32	s3, s3, s1
 80168a0:	eef0 7a60 	vmov.f32	s15, s1
 80168a4:	ee30 7ac1 	vsub.f32	s14, s1, s2
 80168a8:	ee71 1ac1 	vsub.f32	s3, s3, s2
 80168ac:	eed6 7a26 	vfnms.f32	s15, s12, s13
 80168b0:	eea1 7aa6 	vfma.f32	s14, s3, s13
    float c2 = y0my1 + c1 - c3;
 80168b4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80168b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 80168bc:	eee7 7a02 	vfma.f32	s15, s14, s4
 80168c0:	ee67 7a82 	vmul.f32	s15, s15, s4
 80168c4:	eee6 7a26 	vfma.f32	s15, s12, s13
}
 80168c8:	eee7 0a82 	vfma.f32	s1, s15, s4
 80168cc:	eeb0 0a60 	vmov.f32	s0, s1
 80168d0:	4770      	bx	lr
 80168d2:	bf00      	nop

080168d4 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 80168d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
 80168d8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80168f8 <LEAF_interpolation_linear+0x24>
 80168dc:	fe81 1a67 	vminnm.f32	s2, s2, s15
 80168e0:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
 80168e4:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 80168e8:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 80168ec:	eee7 0a80 	vfma.f32	s1, s15, s0
 80168f0:	eeb0 0a60 	vmov.f32	s0, s1
 80168f4:	4770      	bx	lr
 80168f6:	bf00      	nop
 80168f8:	00000000 	.word	0x00000000

080168fc <mtof>:
    if (f <= -1500.0f) return(0);
 80168fc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801693c <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8016900:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8016940 <mtof+0x44>
 8016904:	e006      	b.n	8016914 <mtof+0x18>
 8016906:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801690a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690e:	dd09      	ble.n	8016924 <mtof+0x28>
 8016910:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 8016914:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8016918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801691c:	d8f3      	bhi.n	8016906 <mtof+0xa>
 801691e:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8016944 <mtof+0x48>
}
 8016922:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 8016924:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016948 <mtof+0x4c>
{
 8016928:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 801692a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801692e:	f006 fae3 	bl	801cef8 <expf>
 8016932:	eddf 7a06 	vldr	s15, [pc, #24]	; 801694c <mtof+0x50>
 8016936:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 801693a:	bd08      	pop	{r3, pc}
 801693c:	c4bb8000 	.word	0xc4bb8000
 8016940:	44bb6000 	.word	0x44bb6000
 8016944:	00000000 	.word	0x00000000
 8016948:	3d6c9820 	.word	0x3d6c9820
 801694c:	4102d013 	.word	0x4102d013

08016950 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
 8016950:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016954:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8016988 <faster_mtof+0x38>
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

float faster_mtof(float f)
{
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8016958:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801698c <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
 801695c:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
 8016960:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016964:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801696c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 8016970:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016974:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016978:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 801697c:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8016980:	ee27 0a87 	vmul.f32	s0, s15, s14
 8016984:	4770      	bx	lr
 8016986:	bf00      	nop
 8016988:	396c9820 	.word	0x396c9820
 801698c:	4102d013 	.word	0x4102d013

08016990 <ftom>:

float ftom(float f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8016990:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016998:	dd0b      	ble.n	80169b2 <ftom+0x22>
 801699a:	eddf 7a07 	vldr	s15, [pc, #28]	; 80169b8 <ftom+0x28>
{
 801699e:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80169a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80169a4:	f006 fb24 	bl	801cff0 <logf>
 80169a8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80169bc <ftom+0x2c>
 80169ac:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80169b0:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80169b2:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80169c0 <ftom+0x30>
}
 80169b6:	4770      	bx	lr
 80169b8:	3dfa7ed2 	.word	0x3dfa7ed2
 80169bc:	418a7fac 	.word	0x418a7fac
 80169c0:	c4bb8000 	.word	0xc4bb8000

080169c4 <fasteratodb>:
float atodb(float a)
{
    return 20.0f*log10f(a);
}
float fasteratodb(float a)
{
 80169c4:	b500      	push	{lr}
 80169c6:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 80169c8:	eeb0 0ac0 	vabs.f32	s0, s0
 80169cc:	a801      	add	r0, sp, #4
 80169ce:	f005 ffc1 	bl	801c954 <frexpf>
    Y += -4.11852516267426f;
 80169d2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8016a08 <fasteratodb+0x44>
 80169d6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8016a0c <fasteratodb+0x48>
    Y += 6.02197014179219f;
 80169da:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8016a10 <fasteratodb+0x4c>
    Y += -4.11852516267426f;
 80169de:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
 80169e2:	eddd 7a01 	vldr	s15, [sp, #4]
 80169e6:	eddf 5a0b 	vldr	s11, [pc, #44]	; 8016a14 <fasteratodb+0x50>
 80169ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
 80169ee:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8016a18 <fasteratodb+0x54>
    Y += E;
 80169f2:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
 80169f6:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 80169fa:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 80169fe:	ee27 0a86 	vmul.f32	s0, s15, s12
 8016a02:	b003      	add	sp, #12
 8016a04:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a08:	3f9da1a8 	.word	0x3f9da1a8
 8016a0c:	c083caf5 	.word	0xc083caf5
 8016a10:	40c0b3fb 	.word	0x40c0b3fb
 8016a14:	404892e0 	.word	0x404892e0
 8016a18:	40c0a8c2 	.word	0x40c0a8c2

08016a1c <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 8016a1c:	eddf 7a02 	vldr	s15, [pc, #8]	; 8016a28 <fastdbtoa+0xc>
 8016a20:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016a24:	f006 ba68 	b.w	801cef8 <expf>
 8016a28:	3debc8e3 	.word	0x3debc8e3

08016a2c <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 8016a2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016a30:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8016a5c <fasterdbtoa+0x30>
 8016a34:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8016a38:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8016a3c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016a40:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016a44:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8016a48:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016a4c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016a50:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 8016a54:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016a58:	4770      	bx	lr
 8016a5a:	bf00      	nop
 8016a5c:	39ebc8e3 	.word	0x39ebc8e3

08016a60 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 8016a60:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8016a64:	4770      	bx	lr
 8016a66:	bf00      	nop

08016a68 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8016a68:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8016a6c:	4770      	bx	lr
 8016a6e:	bf00      	nop

08016a70 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8016a70:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8016a72:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8016a74:	2510      	movs	r5, #16
    pool->usize  = 0;
 8016a76:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8016a78:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8016a7a:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 8016a7c:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 8016a7e:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8016a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016a84:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8016a86:	440b      	add	r3, r1
 8016a88:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8016a8a:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8016a8e:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8016a90:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8016a94:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8016a96:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 8016a98:	6183      	str	r3, [r0, #24]
}
 8016a9a:	4770      	bx	lr

08016a9c <mpool_alloc>:
{
 8016a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8016a9e:	684a      	ldr	r2, [r1, #4]
{
 8016aa0:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8016aa2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8016aa8:	694b      	ldr	r3, [r1, #20]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d04a      	beq.n	8016b44 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8016aae:	1dc4      	adds	r4, r0, #7
 8016ab0:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8016ab4:	e002      	b.n	8016abc <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8016ab6:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d043      	beq.n	8016b44 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 8016abc:	68da      	ldr	r2, [r3, #12]
 8016abe:	42a2      	cmp	r2, r4
 8016ac0:	d3f9      	bcc.n	8016ab6 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8016ac2:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8016ac4:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8016ac6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8016aca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016acc:	4281      	cmp	r1, r0
 8016ace:	d246      	bcs.n	8016b5e <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8016ad0:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8016ad4:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8016ad6:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8016ad8:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8016ada:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8016adc:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 8016ade:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8016ae2:	4429      	add	r1, r5
 8016ae4:	5111      	str	r1, [r2, r4]
    node->size = size;
 8016ae6:	60e8      	str	r0, [r5, #12]
    node->next = next;
 8016ae8:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8016aec:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8016af0:	429a      	cmp	r2, r3
        pool->head = new_node;
 8016af2:	bf08      	it	eq
 8016af4:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8016af8:	685a      	ldr	r2, [r3, #4]
 8016afa:	b10a      	cbz	r2, 8016b00 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 8016afc:	6899      	ldr	r1, [r3, #8]
 8016afe:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8016b00:	689a      	ldr	r2, [r3, #8]
 8016b02:	b10a      	cbz	r2, 8016b08 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8016b04:	6859      	ldr	r1, [r3, #4]
 8016b06:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 8016b08:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8016b0a:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 8016b0c:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8016b10:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8016b14:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016b18:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8016b1a:	4422      	add	r2, r4
 8016b1c:	4402      	add	r2, r0
 8016b1e:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8016b22:	694a      	ldr	r2, [r1, #20]
 8016b24:	42aa      	cmp	r2, r5
 8016b26:	dd0b      	ble.n	8016b40 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8016b28:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8016b2a:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8016b2c:	b14a      	cbz	r2, 8016b42 <mpool_alloc+0xa6>
 8016b2e:	1e41      	subs	r1, r0, #1
 8016b30:	460a      	mov	r2, r1
 8016b32:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016b36:	68dc      	ldr	r4, [r3, #12]
 8016b38:	3202      	adds	r2, #2
 8016b3a:	1a12      	subs	r2, r2, r0
 8016b3c:	4294      	cmp	r4, r2
 8016b3e:	d8f7      	bhi.n	8016b30 <mpool_alloc+0x94>
    return node_to_alloc->pool;
 8016b40:	6818      	ldr	r0, [r3, #0]
}
 8016b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8016b44:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8016b48:	1a9b      	subs	r3, r3, r2
 8016b4a:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8016b4c:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8016b50:	bf8c      	ite	hi
 8016b52:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8016b54:	2100      	movls	r1, #0
 8016b56:	f005 fe59 	bl	801c80c <LEAF_internalErrorCallback>
        return NULL;
 8016b5a:	2000      	movs	r0, #0
}
 8016b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 8016b5e:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8016b60:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8016b62:	e7c3      	b.n	8016aec <mpool_alloc+0x50>

08016b64 <mpool_calloc>:
{
 8016b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8016b66:	684a      	ldr	r2, [r1, #4]
{
 8016b68:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8016b6a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8016b6c:	3301      	adds	r3, #1
 8016b6e:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8016b70:	694b      	ldr	r3, [r1, #20]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d044      	beq.n	8016c00 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8016b76:	1dc4      	adds	r4, r0, #7
 8016b78:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8016b7c:	e002      	b.n	8016b84 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8016b7e:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d03d      	beq.n	8016c00 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8016b84:	68da      	ldr	r2, [r3, #12]
 8016b86:	42a2      	cmp	r2, r4
 8016b88:	d3f9      	bcc.n	8016b7e <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8016b8a:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8016b8c:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8016b8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8016b92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016b94:	4281      	cmp	r1, r0
 8016b96:	d240      	bcs.n	8016c1a <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8016b98:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8016b9c:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8016b9e:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8016ba0:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8016ba2:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8016ba4:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 8016ba6:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8016baa:	4429      	add	r1, r5
 8016bac:	5111      	str	r1, [r2, r4]
    node->size = size;
 8016bae:	60e8      	str	r0, [r5, #12]
    node->next = next;
 8016bb0:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8016bb4:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8016bb8:	429a      	cmp	r2, r3
        pool->head = new_node;
 8016bba:	bf08      	it	eq
 8016bbc:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 8016bc0:	685a      	ldr	r2, [r3, #4]
 8016bc2:	b10a      	cbz	r2, 8016bc8 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 8016bc4:	6899      	ldr	r1, [r3, #8]
 8016bc6:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8016bc8:	689a      	ldr	r2, [r3, #8]
 8016bca:	b10a      	cbz	r2, 8016bd0 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 8016bcc:	6859      	ldr	r1, [r3, #4]
 8016bce:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8016bd0:	2200      	movs	r2, #0
    node->prev = NULL;
 8016bd2:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8016bd6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8016bda:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8016bde:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016be0:	4401      	add	r1, r0
 8016be2:	68d8      	ldr	r0, [r3, #12]
 8016be4:	4401      	add	r1, r0
 8016be6:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8016bea:	68d9      	ldr	r1, [r3, #12]
 8016bec:	b131      	cbz	r1, 8016bfc <mpool_calloc+0x98>
 8016bee:	4610      	mov	r0, r2
 8016bf0:	6819      	ldr	r1, [r3, #0]
 8016bf2:	5488      	strb	r0, [r1, r2]
 8016bf4:	3201      	adds	r2, #1
 8016bf6:	68d9      	ldr	r1, [r3, #12]
 8016bf8:	4291      	cmp	r1, r2
 8016bfa:	d8f9      	bhi.n	8016bf0 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 8016bfc:	6818      	ldr	r0, [r3, #0]
}
 8016bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8016c00:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8016c04:	1a9b      	subs	r3, r3, r2
 8016c06:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8016c08:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8016c0c:	bf8c      	ite	hi
 8016c0e:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8016c10:	2100      	movls	r1, #0
 8016c12:	f005 fdfb 	bl	801c80c <LEAF_internalErrorCallback>
        return NULL;
 8016c16:	2000      	movs	r0, #0
}
 8016c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 8016c1a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8016c1c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 8016c1e:	e7c9      	b.n	8016bb4 <mpool_calloc+0x50>

08016c20 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8016c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 8016c24:	699d      	ldr	r5, [r3, #24]
{
 8016c26:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
 8016c28:	6868      	ldr	r0, [r5, #4]
 8016c2a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8016c2c:	3301      	adds	r3, #1
 8016c2e:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
 8016c30:	696b      	ldr	r3, [r5, #20]
 8016c32:	b91b      	cbnz	r3, 8016c3c <tMempool_init+0x1c>
 8016c34:	e063      	b.n	8016cfe <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
 8016c36:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d060      	beq.n	8016cfe <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
 8016c3c:	68dc      	ldr	r4, [r3, #12]
 8016c3e:	2c17      	cmp	r4, #23
 8016c40:	d9f9      	bls.n	8016c36 <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
 8016c42:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8016c44:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
 8016c48:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8016c4a:	6868      	ldr	r0, [r5, #4]
 8016c4c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8016c4e:	4287      	cmp	r7, r0
 8016c50:	d952      	bls.n	8016cf8 <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8016c52:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8016c56:	f100 0c18 	add.w	ip, r0, #24
 8016c5a:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 8016c5e:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8016c60:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
 8016c64:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8016c68:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
 8016c6a:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
 8016c6e:	4420      	add	r0, r4
 8016c70:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
 8016c74:	60e7      	str	r7, [r4, #12]
    node->next = next;
 8016c76:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
 8016c7a:	6968      	ldr	r0, [r5, #20]
 8016c7c:	4283      	cmp	r3, r0
        pool->head = new_node;
 8016c7e:	bf08      	it	eq
 8016c80:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
 8016c82:	6858      	ldr	r0, [r3, #4]
 8016c84:	b108      	cbz	r0, 8016c8a <tMempool_init+0x6a>
        node->next->prev = node->prev;
 8016c86:	689c      	ldr	r4, [r3, #8]
 8016c88:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
 8016c8a:	6898      	ldr	r0, [r3, #8]
 8016c8c:	b108      	cbz	r0, 8016c92 <tMempool_init+0x72>
        node->prev->next = node->next;
 8016c8e:	685c      	ldr	r4, [r3, #4]
 8016c90:	6044      	str	r4, [r0, #4]
    node->next = NULL;
 8016c92:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8016c94:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 8016c96:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8016c9a:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8016c9e:	68e8      	ldr	r0, [r5, #12]
 8016ca0:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
 8016ca4:	4430      	add	r0, r6
 8016ca6:	4404      	add	r4, r0
 8016ca8:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8016caa:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8016cae:	42b8      	cmp	r0, r7
 8016cb0:	dd0c      	ble.n	8016ccc <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8016cb2:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8016cb4:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8016cb6:	b154      	cbz	r4, 8016cce <tMempool_init+0xae>
 8016cb8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8016cbc:	4664      	mov	r4, ip
 8016cbe:	f80c 7f01 	strb.w	r7, [ip, #1]!
 8016cc2:	68de      	ldr	r6, [r3, #12]
 8016cc4:	3402      	adds	r4, #2
 8016cc6:	1a24      	subs	r4, r4, r0
 8016cc8:	42a6      	cmp	r6, r4
 8016cca:	d8f7      	bhi.n	8016cbc <tMempool_init+0x9c>
    return node_to_alloc->pool;
 8016ccc:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8016cce:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8016cd2:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
 8016cd4:	686b      	ldr	r3, [r5, #4]
 8016cd6:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8016cd8:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
 8016cda:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8016cdc:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
 8016cde:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
 8016ce0:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8016ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ce6:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 8016ce8:	440b      	add	r3, r1
    node->prev = prev;
 8016cea:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
 8016cee:	600b      	str	r3, [r1, #0]
    node->size = size;
 8016cf0:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8016cf2:	6141      	str	r1, [r0, #20]
}
 8016cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
 8016cf8:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
 8016cfa:	685c      	ldr	r4, [r3, #4]
 8016cfc:	e7bd      	b.n	8016c7a <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
 8016cfe:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8016d02:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
 8016d04:	1a52      	subs	r2, r2, r1
 8016d06:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8016d08:	bf94      	ite	ls
 8016d0a:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8016d0c:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8016d0e:	f005 fd7d 	bl	801c80c <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8016d12:	2300      	movs	r3, #0
 8016d14:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
 8016d18:	686a      	ldr	r2, [r5, #4]
 8016d1a:	605a      	str	r2, [r3, #4]
 8016d1c:	deff      	udf	#255	; 0xff
 8016d1e:	bf00      	nop

08016d20 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 8016d20:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8016d22:	698c      	ldr	r4, [r1, #24]
{
 8016d24:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8016d26:	2018      	movs	r0, #24
 8016d28:	4621      	mov	r1, r4
 8016d2a:	f7ff feb7 	bl	8016a9c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 8016d2e:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8016d30:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 8016d32:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 8016d36:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8016d38:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8016d3a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8016d54 <tCycle_init+0x34>
    c->phase    =  0;
 8016d3e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8016d42:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8016d46:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8016d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016d4c:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8016d50:	bd38      	pop	{r3, r4, r5, pc}
 8016d52:	bf00      	nop
 8016d54:	4f800000 	.word	0x4f800000

08016d58 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8016d58:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 8016d5a:	4910      	ldr	r1, [pc, #64]	; (8016d9c <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8016d5c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8016da0 <tCycle_tick+0x48>
    c->phase += c->inc;
 8016d60:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8016d64:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 8016d66:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 8016d68:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8016d6a:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 8016d6e:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8016d70:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 8016d74:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 8016d78:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8016d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 8016d7e:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 8016d82:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 8016d84:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8016d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016d8c:	ed92 7a00 	vldr	s14, [r2]
 8016d90:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8016d94:	eea7 0a27 	vfma.f32	s0, s14, s15
 8016d98:	4770      	bx	lr
 8016d9a:	bf00      	nop
 8016d9c:	080269e4 	.word	0x080269e4
 8016da0:	35000004 	.word	0x35000004

08016da4 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 8016da4:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8016da6:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8016daa:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8016dae:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016db2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016db6:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8016dba:	4770      	bx	lr

08016dbc <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 8016dbc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8016dc0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8016ddc <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 8016dc4:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8016dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016dca:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8016dce:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016dd2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8016dd6:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8016dda:	4770      	bx	lr
 8016ddc:	4f800000 	.word	0x4f800000

08016de0 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 8016de0:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 8016de2:	6995      	ldr	r5, [r2, #24]
{
 8016de4:	4606      	mov	r6, r0
 8016de6:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8016de8:	2018      	movs	r0, #24
 8016dea:	4629      	mov	r1, r5
 8016dec:	f7ff fe56 	bl	8016a9c <mpool_alloc>
 8016df0:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8016df2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8016df4:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 8016df6:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 8016df8:	691b      	ldr	r3, [r3, #16]
 8016dfa:	6143      	str	r3, [r0, #20]
}
 8016dfc:	bd70      	pop	{r4, r5, r6, pc}
 8016dfe:	bf00      	nop

08016e00 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

float   tNoise_tick(tNoise* const ns)
{
 8016e00:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 8016e02:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
 8016e04:	6963      	ldr	r3, [r4, #20]
 8016e06:	4798      	blx	r3
    
    if (n->type == PinkNoise)
 8016e08:	7923      	ldrb	r3, [r4, #4]
    float rand = (n->rand() * 2.0f) - 1.0f;
 8016e0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016e0e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
 8016e12:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
 8016e14:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
 8016e18:	d12f      	bne.n	8016e7a <tNoise_tick+0x7a>
    {
        float tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8016e1a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8016e80 <tNoise_tick+0x80>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8016e1e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8016e84 <tNoise_tick+0x84>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8016e22:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8016e26:	ed94 5a03 	vldr	s10, [r4, #12]
 8016e2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8016e2e:	edd4 3a02 	vldr	s7, [r4, #8]
 8016e32:	eddf 4a15 	vldr	s9, [pc, #84]	; 8016e88 <tNoise_tick+0x88>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8016e36:	eddf 5a15 	vldr	s11, [pc, #84]	; 8016e8c <tNoise_tick+0x8c>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8016e3a:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8016e3e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8016e90 <tNoise_tick+0x90>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8016e42:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8016e46:	ed94 4a04 	vldr	s8, [r4, #16]
 8016e4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8016e4e:	eddf 4a11 	vldr	s9, [pc, #68]	; 8016e94 <tNoise_tick+0x94>
 8016e52:	ed9f 5a11 	vldr	s10, [pc, #68]	; 8016e98 <tNoise_tick+0x98>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
 8016e56:	eddf 5a11 	vldr	s11, [pc, #68]	; 8016e9c <tNoise_tick+0x9c>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8016e5a:	eea4 7a24 	vfma.f32	s14, s8, s9
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8016e5e:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8016e62:	ee36 0a26 	vadd.f32	s0, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8016e66:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8016e6a:	eea7 0a85 	vfma.f32	s0, s15, s10
 8016e6e:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8016e72:	ee77 7a00 	vadd.f32	s15, s14, s0
        return (tmp * 0.05f);
 8016e76:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8016e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8016e7e:	bd10      	pop	{r4, pc}
 8016e80:	3dcad8a1 	.word	0x3dcad8a1
 8016e84:	3e97d0ff 	.word	0x3e97d0ff
 8016e88:	3f7f65fe 	.word	0x3f7f65fe
 8016e8c:	3f76872b 	.word	0x3f76872b
 8016e90:	3f86be97 	.word	0x3f86be97
 8016e94:	3f11eb85 	.word	0x3f11eb85
 8016e98:	3e3d3c36 	.word	0x3e3d3c36
 8016e9c:	3d4ccccd 	.word	0x3d4ccccd

08016ea0 <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
 8016ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8016ea2:	698e      	ldr	r6, [r1, #24]
{
 8016ea4:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8016ea6:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8016eaa:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8016eac:	4631      	mov	r1, r6
 8016eae:	f7ff fdf5 	bl	8016a9c <mpool_alloc>
 8016eb2:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8016eb4:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8016eb6:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8016eb8:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 8016eba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8016ebe:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8016f24 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8016ec2:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8016ec4:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8016ec8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->freq = 440.f;
 8016ecc:	eddf 7a16 	vldr	s15, [pc, #88]	; 8016f28 <tMBPulse_init+0x88>
    c->_inv_w = 1.0f / c->_w;
 8016ed0:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8016ed4:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8016ed6:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8016eda:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8016edc:	6181      	str	r1, [r0, #24]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8016ede:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 8016ee0:	ed80 7aba 	vstr	s14, [r0, #744]	; 0x2e8
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8016ee4:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8016ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8016eec:	62a2      	str	r2, [r4, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
 8016eee:	62e2      	str	r2, [r4, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8016ef0:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8016ef2:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8016ef6:	f104 0066 	add.w	r0, r4, #102	; 0x66
    c->softsync = 0;
 8016efa:	61e5      	str	r5, [r4, #28]
    c->waveform = 0.0f;
 8016efc:	60e3      	str	r3, [r4, #12]
    c->_z = 0.0f;
 8016efe:	6323      	str	r3, [r4, #48]	; 0x30
    c->_j = 0;
 8016f00:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_p = 0.0f;  /* phase [0, 1) */
 8016f02:	6223      	str	r3, [r4, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8016f04:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8016f08:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
 8016f0a:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
 8016f0c:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8016f10:	f005 fd18 	bl	801c944 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8016f14:	4629      	mov	r1, r5
 8016f16:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8016f1a:	2220      	movs	r2, #32
}
 8016f1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8016f20:	f005 bd10 	b.w	801c944 <memset>
 8016f24:	3b14f209 	.word	0x3b14f209
 8016f28:	43dc0000 	.word	0x43dc0000

08016f2c <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
 8016f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f30:	ed2d 8b0c 	vpush	{d8-d13}
    _tMBPulse* c = *osc;
 8016f34:	6804      	ldr	r4, [r0, #0]
{
 8016f36:	b083      	sub	sp, #12
 8016f38:	4605      	mov	r5, r0
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
 8016f3a:	ed94 8a05 	vldr	s16, [r4, #20]


    p = c->_p;  /* phase [0, 1) */
 8016f3e:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016f42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
 8016f46:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
 8016f4a:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 8016f4e:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
 8016f56:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8016f5a:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016f5e:	f340 80f9 	ble.w	8017154 <tMBPulse_tick+0x228>
 8016f62:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8016f66:	f1b9 0f00 	cmp.w	r9, #0
 8016f6a:	f340 80bd 	ble.w	80170e8 <tMBPulse_tick+0x1bc>
 8016f6e:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8016f72:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016f76:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 8016f7a:	ee66 7a8a 	vmul.f32	s15, s13, s20
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016f7e:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8016f82:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 8016f86:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8016f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f8e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8016f92:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
 8016f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
 8016f9a:	2f00      	cmp	r7, #0
 8016f9c:	f040 80ef 	bne.w	801717e <tMBPulse_tick+0x252>
        if (sw > 0)
 8016fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fa4:	f340 81a4 	ble.w	80172f0 <tMBPulse_tick+0x3c4>
        {
            if (p >= b) {
 8016fa8:	eef4 aac8 	vcmpe.f32	s21, s16
 8016fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fb0:	f240 8162 	bls.w	8017278 <tMBPulse_tick+0x34c>
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8016fb4:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
 8016fb6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8016fba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fc2:	f280 8276 	bge.w	80174b2 <tMBPulse_tick+0x586>
 8016fc6:	461f      	mov	r7, r3
                x = -0.5f;
            }
        }
    }

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8016fc8:	1d33      	adds	r3, r6, #4
 8016fca:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 8016fce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016fd2:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8016fd6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8016fda:	f88d 3005 	strb.w	r3, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016fde:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	f000 8229 	beq.w	801743a <tMBPulse_tick+0x50e>
 8016fe8:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8016fec:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8016ff0:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016ff4:	f04f 0c00 	mov.w	ip, #0
 8016ff8:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
 8016ffc:	4db9      	ldr	r5, [pc, #740]	; (80172e4 <tMBPulse_tick+0x3b8>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8016ffe:	eba8 030c 	sub.w	r3, r8, ip
 8017002:	b29b      	uxth	r3, r3
 8017004:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
 8017008:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801700c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017010:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017014:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8017018:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801701c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017020:	b289      	uxth	r1, r1
 8017022:	f8bd a006 	ldrh.w	sl, [sp, #6]
 8017026:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017028:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801702c:	b280      	uxth	r0, r0
 801702e:	fa1f fa8a 	uxth.w	sl, sl
 8017032:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8017036:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
 801703a:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801703e:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017040:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
 8017044:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8017048:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801704c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017050:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 8017054:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
 8017058:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801705c:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017060:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017064:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017066:	edda 6a01 	vldr	s13, [sl, #4]
 801706a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801706e:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017070:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017074:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017078:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801707c:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017080:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
 8017084:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017086:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801708a:	f0c0 80e8 	bcc.w	801725e <tMBPulse_tick+0x332>
		{
			c->numBLEPs--;
 801708e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017092:	f10c 0c01 	add.w	ip, ip, #1
 8017096:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 801709a:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801709c:	4594      	cmp	ip, r2
			c->numBLEPs--;
 801709e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80170a2:	dbac      	blt.n	8016ffe <tMBPulse_tick+0xd2>
 80170a4:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
 80170a8:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
 80170ac:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
 80170ae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 80170b2:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 80170b6:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
 80170ba:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 80170be:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    c->_b = b;
 80170c2:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 80170c6:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 80170ca:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
 80170ce:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c->_k = k;
    
    return -c->out;
 80170d2:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 80170d6:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 80170da:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 80170de:	b003      	add	sp, #12
 80170e0:	ecbd 8b0c 	vpop	{d8-d13}
 80170e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sw = w * c->syncdir;
 80170e8:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80170ec:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 80170f0:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 80170f4:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 80170f8:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 80170fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017100:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8017104:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8017108:	f040 8457 	bne.w	80179ba <tMBPulse_tick+0xa8e>
        if (sw > 0) p = eof_offset;
 801710c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017110:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8017112:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
 8017116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801711a:	ee38 bac8 	vsub.f32	s22, s17, s16
        if (sw > 0) p = eof_offset;
 801711e:	f340 80a6 	ble.w	801726e <tMBPulse_tick+0x342>
        if (!k) {
 8017122:	2f00      	cmp	r7, #0
 8017124:	f040 818e 	bne.w	8017444 <tMBPulse_tick+0x518>
                if (p_at_reset >= b) {
 8017128:	eef4 aacb 	vcmpe.f32	s21, s22
 801712c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017130:	f240 8310 	bls.w	8017754 <tMBPulse_tick+0x828>
                if (p_at_reset >= 1.0f) {
 8017134:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017138:	eeb4 bae7 	vcmpe.f32	s22, s15
 801713c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017140:	f280 81f1 	bge.w	8017526 <tMBPulse_tick+0x5fa>
            if (p >= b) {
 8017144:	eef4 aac8 	vcmpe.f32	s21, s16
 8017148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801714c:	f240 81e1 	bls.w	8017512 <tMBPulse_tick+0x5e6>
 8017150:	464f      	mov	r7, r9
 8017152:	e739      	b.n	8016fc8 <tMBPulse_tick+0x9c>
    sw = w * c->syncdir;
 8017154:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017158:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 801715c:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8017160:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8017164:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8017168:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
 801716c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 8017170:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017174:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
 8017178:	2f00      	cmp	r7, #0
 801717a:	f43f af11 	beq.w	8016fa0 <tMBPulse_tick+0x74>
        if (sw > 0)
 801717e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017182:	f340 8129 	ble.w	80173d8 <tMBPulse_tick+0x4ac>
            if (p >= 1.0f) {
 8017186:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801718a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017192:	f6ff af19 	blt.w	8016fc8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017196:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 801719a:	eddf 7a54 	vldr	s15, [pc, #336]	; 80172ec <tMBPulse_tick+0x3c0>
                p -= 1.0f;
 801719e:	ee38 8a68 	vsub.f32	s16, s16, s17
	_tMBPulse* c = *osc;
 80171a2:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 80171a4:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 80171a8:	eeb0 0a4b 	vmov.f32	s0, s22
 80171ac:	eea8 0a09 	vfma.f32	s0, s16, s18
 80171b0:	f005 ffea 	bl	801d188 <lrintf>
	r -= (float)i;
 80171b4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171b8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80171bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80171c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171c4:	3301      	adds	r3, #1
            if (!k && p >= b) {
 80171c6:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80171ce:	eed8 7a09 	vfnms.f32	s15, s16, s18
            if (!k && p >= b) {
 80171d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80171d6:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171da:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80171de:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80171e2:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 80171e6:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80171ea:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80171ee:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80171f2:	f103 0301 	add.w	r3, r3, #1
 80171f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80171fa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if (!k && p >= b) {
 80171fe:	f200 8306 	bhi.w	801780e <tMBPulse_tick+0x8e2>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8017202:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 8017206:	682d      	ldr	r5, [r5, #0]
	i = lrintf(r - 0.5f);
 8017208:	eeb0 0a4b 	vmov.f32	s0, s22
 801720c:	eea8 0a89 	vfma.f32	s0, s17, s18
 8017210:	f005 ffba 	bl	801d188 <lrintf>
	r -= (float)i;
 8017214:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017218:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
                x = -0.5f;
 801721c:	eef0 5a4b 	vmov.f32	s11, s22
	r -= (float)i;
 8017220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017224:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017228:	3301      	adds	r3, #1
	r -= (float)i;
 801722a:	eed8 7a89 	vfnms.f32	s15, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801722e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017232:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017236:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801723a:	4a2b      	ldr	r2, [pc, #172]	; (80172e8 <tMBPulse_tick+0x3bc>)
                k = 1;
 801723c:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801723e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017242:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8017246:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801724a:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801724e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017252:	443b      	add	r3, r7
 8017254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017258:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 801725c:	e6b4      	b.n	8016fc8 <tMBPulse_tick+0x9c>
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801725e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017262:	f10c 0c01 	add.w	ip, ip, #1
 8017266:	4563      	cmp	r3, ip
 8017268:	f73f aec9 	bgt.w	8016ffe <tMBPulse_tick+0xd2>
 801726c:	e71a      	b.n	80170a4 <tMBPulse_tick+0x178>
        else if (sw < 0) p = 1.0f - eof_offset;
 801726e:	f100 81be 	bmi.w	80175ee <tMBPulse_tick+0x6c2>
    p += sw - (int)sw;
 8017272:	eeb0 8a68 	vmov.f32	s16, s17
 8017276:	e6a7      	b.n	8016fc8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017278:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 801727c:	eddf 8a1b 	vldr	s17, [pc, #108]	; 80172ec <tMBPulse_tick+0x3c0>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8017280:	ee38 ba6a 	vsub.f32	s22, s16, s21
	_tMBPulse* c = *osc;
 8017284:	f8d5 8000 	ldr.w	r8, [r5]
	r = MINBLEP_PHASES * phase * inv_w;
 8017288:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 801728c:	eeb0 0a6b 	vmov.f32	s0, s23
 8017290:	eeab 0a28 	vfma.f32	s0, s22, s17
 8017294:	f005 ff78 	bl	801d188 <lrintf>
	r -= (float)i;
 8017298:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801729c:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80172a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80172a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80172a8:	4a0f      	ldr	r2, [pc, #60]	; (80172e8 <tMBPulse_tick+0x3bc>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80172aa:	3301      	adds	r3, #1
                x = -0.5f;
 80172ac:	eef0 5a6b 	vmov.f32	s11, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80172b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80172b4:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 80172b8:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80172bc:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80172c0:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80172c4:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 80172c8:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80172cc:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80172d0:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 80172d4:	3301      	adds	r3, #1
 80172d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80172da:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                k = 1;
 80172de:	2301      	movs	r3, #1
}
 80172e0:	e669      	b.n	8016fb6 <tMBPulse_tick+0x8a>
 80172e2:	bf00      	nop
 80172e4:	0802d168 	.word	0x0802d168
 80172e8:	bf800000 	.word	0xbf800000
 80172ec:	42800000 	.word	0x42800000
            if (p < 0.0f) {
 80172f0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80172f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172f8:	f57f ae66 	bpl.w	8016fc8 <tMBPulse_tick+0x9c>
 80172fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017304:	f57f ae60 	bpl.w	8016fc8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017308:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 801730c:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 80172ec <tMBPulse_tick+0x3c0>
	r = MINBLEP_PHASES * phase * inv_w;
 8017310:	ee28 ca09 	vmul.f32	s24, s16, s18
	_tMBPulse* c = *osc;
 8017314:	f8d5 8000 	ldr.w	r8, [r5]
                p += 1.0f;
 8017318:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801731c:	eeb0 0a6b 	vmov.f32	s0, s23
                p += 1.0f;
 8017320:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
 8017324:	eeac 0a28 	vfma.f32	s0, s24, s17
 8017328:	f005 ff2e 	bl	801d188 <lrintf>
	r -= (float)i;
 801732c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017330:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017334:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801733c:	4ad0      	ldr	r2, [pc, #832]	; (8017680 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801733e:	3301      	adds	r3, #1
            if (k && p < b) {
 8017340:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017348:	eedc 7a28 	vfnms.f32	s15, s24, s17
            if (k && p < b) {
 801734c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017350:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017354:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017358:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801735c:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8017360:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017364:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017368:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 801736c:	f103 0301 	add.w	r3, r3, #1
 8017370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017374:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (k && p < b) {
 8017378:	f340 8323 	ble.w	80179c2 <tMBPulse_tick+0xa96>
	_tMBPulse* c = *osc;
 801737c:	ee38 ca6a 	vsub.f32	s24, s16, s21
 8017380:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017382:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8017386:	eeb0 0a6b 	vmov.f32	s0, s23
 801738a:	eea8 0a8c 	vfma.f32	s0, s17, s24
 801738e:	f005 fefb 	bl	801d188 <lrintf>
	r -= (float)i;
 8017392:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017396:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801739a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801739e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80173a2:	3301      	adds	r3, #1
                x = 0.5f;
 80173a4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80173a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80173ac:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 80173b0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80173b4:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80173b8:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80173bc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80173c0:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80173c4:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80173c8:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80173cc:	3301      	adds	r3, #1
 80173ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80173d2:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 80173d6:	e5f7      	b.n	8016fc8 <tMBPulse_tick+0x9c>
        else if (sw < 0)
 80173d8:	f57f adf6 	bpl.w	8016fc8 <tMBPulse_tick+0x9c>
            if (p < b) {
 80173dc:	eef4 aac8 	vcmpe.f32	s21, s16
 80173e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173e4:	f300 80d0 	bgt.w	8017588 <tMBPulse_tick+0x65c>
            if (p < 0.0f) {
 80173e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80173ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173f0:	f57f adea 	bpl.w	8016fc8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 80173f4:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 80173f8:	eddf 8aa2 	vldr	s17, [pc, #648]	; 8017684 <tMBPulse_tick+0x758>
	r = MINBLEP_PHASES * phase * inv_w;
 80173fc:	ee28 9a09 	vmul.f32	s18, s16, s18
	_tMBPulse* c = *osc;
 8017400:	682d      	ldr	r5, [r5, #0]
                p += 1.0f;
 8017402:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8017406:	eeb0 0a4b 	vmov.f32	s0, s22
                p += 1.0f;
 801740a:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
 801740e:	eea9 0a28 	vfma.f32	s0, s18, s17
 8017412:	f005 feb9 	bl	801d188 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017416:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	r -= (float)i;
 801741a:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 801741e:	eef0 5a4b 	vmov.f32	s11, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017422:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017424:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801742c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017430:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017434:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
 8017438:	e6fd      	b.n	8017236 <tMBPulse_tick+0x30a>
    z += 0.5f * (c->_f[j] - z);
 801743a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801743e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8017442:	e631      	b.n	80170a8 <tMBPulse_tick+0x17c>
                if (p_at_reset >= 1.0f) {
 8017444:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017448:	eeb4 bae8 	vcmpe.f32	s22, s17
 801744c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017450:	f280 811a 	bge.w	8017688 <tMBPulse_tick+0x75c>
 8017454:	eddf ba8b 	vldr	s23, [pc, #556]	; 8017684 <tMBPulse_tick+0x758>
 8017458:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 801745c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017460:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8017464:	f005 fe90 	bl	801d188 <lrintf>
	r -= (float)i;
 8017468:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801746c:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017470:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017478:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801747c:	3301      	adds	r3, #1
                x = 0.5f;
 801747e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017486:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 801748a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801748e:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017492:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017496:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 801749a:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801749e:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80174a2:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 80174a6:	3301      	adds	r3, #1
 80174a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80174ac:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
}
 80174b0:	e648      	b.n	8017144 <tMBPulse_tick+0x218>
                p -= 1.0f;
 80174b2:	eddf 7a74 	vldr	s15, [pc, #464]	; 8017684 <tMBPulse_tick+0x758>
 80174b6:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
 80174ba:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 80174be:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 80174c0:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 80174c4:	eea9 0a08 	vfma.f32	s0, s18, s16
 80174c8:	f005 fe5e 	bl	801d188 <lrintf>
	r -= (float)i;
 80174cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80174d0:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80174d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80174d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80174dc:	3301      	adds	r3, #1
                x = 0.5f;
 80174de:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80174e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80174e6:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
 80174ea:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80174ee:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80174f2:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80174f6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80174fa:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80174fe:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017502:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017506:	3301      	adds	r3, #1
 8017508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801750c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8017510:	e55a      	b.n	8016fc8 <tMBPulse_tick+0x9c>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8017512:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8017684 <tMBPulse_tick+0x758>
 8017516:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
 801751a:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 801751e:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017520:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8017524:	e670      	b.n	8017208 <tMBPulse_tick+0x2dc>
 8017526:	eddf ba57 	vldr	s23, [pc, #348]	; 8017684 <tMBPulse_tick+0x758>
 801752a:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801752e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8017532:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8017536:	ee78 8acb 	vsub.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 801753a:	eea8 0aab 	vfma.f32	s0, s17, s23
 801753e:	f005 fe23 	bl	801d188 <lrintf>
	r -= (float)i;
 8017542:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017546:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801754a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801754e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017552:	3301      	adds	r3, #1
                    x = 0.5f;
 8017554:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801755c:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017560:	eb08 0243 	add.w	r2, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017564:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017568:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801756c:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8017570:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017574:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017578:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 801757c:	3301      	adds	r3, #1
 801757e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017582:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
        if (sw > 0)
 8017586:	e5dd      	b.n	8017144 <tMBPulse_tick+0x218>
	_tMBPulse* c = *osc;
 8017588:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8017684 <tMBPulse_tick+0x758>
 801758c:	ee38 ba6a 	vsub.f32	s22, s16, s21
	i = lrintf(r - 0.5f);
 8017590:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8017594:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017596:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 801759a:	eeab 0a28 	vfma.f32	s0, s22, s17
 801759e:	f005 fdf3 	bl	801d188 <lrintf>
	r -= (float)i;
 80175a2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80175aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80175ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80175b2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175b6:	3301      	adds	r3, #1
                x = 0.5f;
 80175b8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80175c0:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 80175c4:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80175c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80175cc:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80175d0:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 80175d4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80175d8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80175dc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80175e0:	3301      	adds	r3, #1
 80175e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80175e6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                k = 0;
 80175ea:	2700      	movs	r7, #0
}
 80175ec:	e6fc      	b.n	80173e8 <tMBPulse_tick+0x4bc>
        else if (sw < 0) p = 1.0f - eof_offset;
 80175ee:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 80175f2:	ee3c da48 	vsub.f32	s26, s24, s16
        if (!k) {
 80175f6:	2f00      	cmp	r7, #0
 80175f8:	f040 80e5 	bne.w	80177c6 <tMBPulse_tick+0x89a>
                if (p_at_reset < 0.0f) {
 80175fc:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8017600:	eddf ba20 	vldr	s23, [pc, #128]	; 8017684 <tMBPulse_tick+0x758>
 8017604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017608:	f100 813c 	bmi.w	8017884 <tMBPulse_tick+0x958>
 801760c:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8017610:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
 8017614:	2701      	movs	r7, #1
 8017616:	eeb1 ba48 	vneg.f32	s22, s16
	i = lrintf(r - 0.5f);
 801761a:	eeb0 0a68 	vmov.f32	s0, s17
 801761e:	eea8 0a6b 	vfms.f32	s0, s16, s23
 8017622:	f005 fdb1 	bl	801d188 <lrintf>
	r -= (float)i;
 8017626:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 801762a:	eef0 5a68 	vmov.f32	s11, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801762e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017636:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801763a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801763e:	4a10      	ldr	r2, [pc, #64]	; (8017680 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017640:	443b      	add	r3, r7
 8017642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017646:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801764a:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801764e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017652:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8017656:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801765a:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801765e:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8017662:	443b      	add	r3, r7
 8017664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017668:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (p < b) {
 801766c:	eef4 aacd 	vcmpe.f32	s21, s26
 8017670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017674:	f300 80d0 	bgt.w	8017818 <tMBPulse_tick+0x8ec>
 8017678:	eeb0 8a4d 	vmov.f32	s16, s26
 801767c:	e4a4      	b.n	8016fc8 <tMBPulse_tick+0x9c>
 801767e:	bf00      	nop
 8017680:	bf800000 	.word	0xbf800000
 8017684:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 8017688:	ee3b ba68 	vsub.f32	s22, s22, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801768c:	ed5f ba03 	vldr	s23, [pc, #-12]	; 8017684 <tMBPulse_tick+0x758>
	i = lrintf(r - 0.5f);
 8017690:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8017694:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8017698:	ee38 ca0b 	vadd.f32	s24, s16, s22
	i = lrintf(r - 0.5f);
 801769c:	eeb0 0a6c 	vmov.f32	s0, s25
 80176a0:	eeac 0a2b 	vfma.f32	s0, s24, s23
 80176a4:	f005 fd70 	bl	801d188 <lrintf>
	r -= (float)i;
 80176a8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80176ac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80176b0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80176b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80176b8:	3301      	adds	r3, #1
                if (!k && p_at_reset >= b) {
 80176ba:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80176be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80176c2:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (!k && p_at_reset >= b) {
 80176c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80176ca:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80176ce:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80176d2:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80176d6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80176da:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80176de:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80176e2:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80176e6:	f103 0301 	add.w	r3, r3, #1
 80176ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80176ee:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
 80176f2:	f200 815e 	bhi.w	80179b2 <tMBPulse_tick+0xa86>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 80176f6:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 80176fa:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 80176fc:	eeb0 0a6c 	vmov.f32	s0, s25
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8017700:	ee78 8a8b 	vadd.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 8017704:	eea8 0aab 	vfma.f32	s0, s17, s23
 8017708:	f005 fd3e 	bl	801d188 <lrintf>
	r -= (float)i;
 801770c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017710:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017714:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801771c:	4aad      	ldr	r2, [pc, #692]	; (80179d4 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801771e:	3301      	adds	r3, #1
	r -= (float)i;
 8017720:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017728:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801772c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017730:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017734:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8017738:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801773c:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017740:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8017744:	3301      	adds	r3, #1
 8017746:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801774a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        if (sw > 0)
 801774e:	f8d5 8000 	ldr.w	r8, [r5]
 8017752:	e683      	b.n	801745c <tMBPulse_tick+0x530>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8017754:	eddf baa0 	vldr	s23, [pc, #640]	; 80179d8 <tMBPulse_tick+0xaac>
 8017758:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
 801775c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017760:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8017764:	eeac 0a2b 	vfma.f32	s0, s24, s23
 8017768:	f005 fd0e 	bl	801d188 <lrintf>
	r -= (float)i;
 801776c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017770:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017774:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801777c:	4a95      	ldr	r2, [pc, #596]	; (80179d4 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801777e:	3301      	adds	r3, #1
                if (p_at_reset >= 1.0f) {
 8017780:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017788:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (p_at_reset >= 1.0f) {
 801778c:	eeb4 bac7 	vcmpe.f32	s22, s14
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017790:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017794:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017798:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801779c:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
                if (p_at_reset >= 1.0f) {
 80177a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80177a4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80177a8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80177ac:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 80177b0:	f103 0301 	add.w	r3, r3, #1
 80177b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80177b8:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
 80177bc:	f8d5 8000 	ldr.w	r8, [r5]
 80177c0:	f6ff ae4c 	blt.w	801745c <tMBPulse_tick+0x530>
 80177c4:	e6b3      	b.n	801752e <tMBPulse_tick+0x602>
                if (p_at_reset < b) {
 80177c6:	eef4 aacb 	vcmpe.f32	s21, s22
 80177ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ce:	f300 80ba 	bgt.w	8017946 <tMBPulse_tick+0xa1a>
                if (p_at_reset < 0.0f) {
 80177d2:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 80177d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177da:	f57f af47 	bpl.w	801766c <tMBPulse_tick+0x740>
 80177de:	eddf ba7e 	vldr	s23, [pc, #504]	; 80179d8 <tMBPulse_tick+0xaac>
 80177e2:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 80177e6:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
 80177ea:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
 80177ec:	eeb0 0a48 	vmov.f32	s0, s16
 80177f0:	eea8 0aab 	vfma.f32	s0, s17, s23
 80177f4:	f005 fcc8 	bl	801d188 <lrintf>
	r -= (float)i;
 80177f8:	ee07 0a90 	vmov	s15, r0
                    x = -0.5f;
 80177fc:	eef0 5a48 	vmov.f32	s11, s16
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017800:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017808:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801780c:	e715      	b.n	801763a <tMBPulse_tick+0x70e>
                x = 0.5f;
 801780e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
 8017812:	2700      	movs	r7, #0
 8017814:	f7ff bbd8 	b.w	8016fc8 <tMBPulse_tick+0x9c>
	_tMBPulse* c = *osc;
 8017818:	eddf 7a6f 	vldr	s15, [pc, #444]	; 80179d8 <tMBPulse_tick+0xaac>
 801781c:	ee7d 8a6a 	vsub.f32	s17, s26, s21
	i = lrintf(r - 0.5f);
 8017820:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8017824:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017826:	ee29 9a27 	vmul.f32	s18, s18, s15
                k = 0;
 801782a:	464f      	mov	r7, r9
}
 801782c:	eeb0 8a4d 	vmov.f32	s16, s26
	i = lrintf(r - 0.5f);
 8017830:	eea9 0a28 	vfma.f32	s0, s18, s17
 8017834:	f005 fca8 	bl	801d188 <lrintf>
	r -= (float)i;
 8017838:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801783c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017840:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017848:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801784c:	3301      	adds	r3, #1
                x = 0.5f;
 801784e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017856:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 801785a:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801785e:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017862:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017866:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801786a:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801786e:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017872:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017876:	3301      	adds	r3, #1
 8017878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801787c:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8017880:	f7ff bba2 	b.w	8016fc8 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017884:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8017888:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    p_at_reset += 1.0f;
 801788c:	ee3b ba0c 	vadd.f32	s22, s22, s24
	i = lrintf(r - 0.5f);
 8017890:	eeb0 0a6c 	vmov.f32	s0, s25
 8017894:	eea8 0aab 	vfma.f32	s0, s17, s23
 8017898:	f005 fc76 	bl	801d188 <lrintf>
	r -= (float)i;
 801789c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80178a0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80178a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80178a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80178ac:	4a49      	ldr	r2, [pc, #292]	; (80179d4 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80178ae:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 80178b0:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80178b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80178b8:	eed8 7aab 	vfnms.f32	s15, s17, s23
                if (k && p_at_reset < b) {
 80178bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80178c0:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80178c4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80178c8:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80178cc:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 80178d0:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80178d4:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80178d8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80178dc:	f103 0301 	add.w	r3, r3, #1
 80178e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80178e4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
 80178e8:	dd70      	ble.n	80179cc <tMBPulse_tick+0xaa0>
	_tMBPulse* c = *osc;
 80178ea:	ee78 8a6a 	vsub.f32	s17, s16, s21
 80178ee:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 80178f0:	eeb0 0a6c 	vmov.f32	s0, s25
 80178f4:	ee78 8a8b 	vadd.f32	s17, s17, s22
 80178f8:	eea8 0aab 	vfma.f32	s0, s17, s23
 80178fc:	f005 fc44 	bl	801d188 <lrintf>
	r -= (float)i;
 8017900:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017904:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017908:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801790c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017910:	3301      	adds	r3, #1
	r -= (float)i;
 8017912:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801791a:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801791e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017922:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017926:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 801792a:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801792e:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017932:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8017936:	3301      	adds	r3, #1
 8017938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801793c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        else if (sw < 0)
 8017940:	f8d5 8000 	ldr.w	r8, [r5]
 8017944:	e664      	b.n	8017610 <tMBPulse_tick+0x6e4>
	r = MINBLEP_PHASES * phase * inv_w;
 8017946:	eddf ba24 	vldr	s23, [pc, #144]	; 80179d8 <tMBPulse_tick+0xaac>
 801794a:	ee78 caea 	vsub.f32	s25, s17, s21
	i = lrintf(r - 0.5f);
 801794e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017952:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8017956:	eeac 0aab 	vfma.f32	s0, s25, s23
 801795a:	f005 fc15 	bl	801d188 <lrintf>
	r -= (float)i;
 801795e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017962:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017966:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801796a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801796e:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 8017970:	eeb5 bac0 	vcmpe.f32	s22, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017978:	eedc 7aab 	vfnms.f32	s15, s25, s23
                if (p_at_reset < 0.0f) {
 801797c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017980:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017984:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017988:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801798c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8017990:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017994:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017998:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801799c:	f103 0301 	add.w	r3, r3, #1
 80179a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80179a4:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
 80179a8:	f8d5 8000 	ldr.w	r8, [r5]
 80179ac:	f57f ae30 	bpl.w	8017610 <tMBPulse_tick+0x6e4>
 80179b0:	e719      	b.n	80177e6 <tMBPulse_tick+0x8ba>
                    x = 0.5f;
 80179b2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80179b6:	f7ff bbc5 	b.w	8017144 <tMBPulse_tick+0x218>
    p += sw - (int)sw;
 80179ba:	eeb0 8a68 	vmov.f32	s16, s17
 80179be:	f7ff baea 	b.w	8016f96 <tMBPulse_tick+0x6a>
                x = -0.5f;
 80179c2:	eef0 5a6b 	vmov.f32	s11, s23
                k = 1;
 80179c6:	2701      	movs	r7, #1
 80179c8:	f7ff bafe 	b.w	8016fc8 <tMBPulse_tick+0x9c>
                    x = -0.5f;
 80179cc:	eef0 5a6c 	vmov.f32	s11, s25
                    k = 1;
 80179d0:	2701      	movs	r7, #1
 80179d2:	e64b      	b.n	801766c <tMBPulse_tick+0x740>
 80179d4:	bf800000 	.word	0xbf800000
 80179d8:	42800000 	.word	0x42800000

080179dc <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
 80179dc:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80179de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80179e2:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
 80179e6:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80179ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 80179ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80179f2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80179f6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80179fa:	4770      	bx	lr

080179fc <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
 80179fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
 8017a00:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
 8017a02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
 8017a06:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
 8017a0a:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017a12:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8017a16:	4770      	bx	lr

08017a18 <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
 8017a18:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017a1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8017a1e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 8017a22:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8017a26:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8017a2a:	eef1 7a67 	vneg.f32	s15, s15
 8017a2e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017a32:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8017a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a3a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017a3e:	bfcc      	ite	gt
 8017a40:	2201      	movgt	r2, #1
 8017a42:	2200      	movle	r2, #0
 8017a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a48:	f002 0201 	and.w	r2, r2, #1
 8017a4c:	bf88      	it	hi
 8017a4e:	2200      	movhi	r2, #0
 8017a50:	b122      	cbz	r2, 8017a5c <tMBPulse_sync+0x44>
 8017a52:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8017a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a5a:	da04      	bge.n	8017a66 <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8017a5c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8017a74 <tMBPulse_sync+0x5c>
 8017a60:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 8017a64:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8017a66:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017a6a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017a6e:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8017a72:	4770      	bx	lr
 8017a74:	00000000 	.word	0x00000000

08017a78 <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
 8017a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8017a7a:	698e      	ldr	r6, [r1, #24]
{
 8017a7c:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8017a7e:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8017a82:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8017a84:	4631      	mov	r1, r6
 8017a86:	f7ff f809 	bl	8016a9c <mpool_alloc>
 8017a8a:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8017a8c:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8017a8e:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8017a90:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 8017a92:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8017a96:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8017af8 <tMBTriangle_init+0x80>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8017a9a:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8017a9c:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 8017aa0:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8017aa4:	eddf 7a15 	vldr	s15, [pc, #84]	; 8017afc <tMBTriangle_init+0x84>
    c->_inv_w = 1.0f / c->_w;
 8017aa8:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8017aac:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8017aae:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8017ab2:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8017ab4:	6181      	str	r1, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017ab6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 8017aba:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017abc:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 8017ac0:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017ac2:	4b0f      	ldr	r3, [pc, #60]	; (8017b00 <tMBTriangle_init+0x88>)
    c->softsync = 0;
 8017ac4:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 8017ac6:	6345      	str	r5, [r0, #52]	; 0x34
    c->_p = 0.25f;  /* phase [0, 1) */
 8017ac8:	6202      	str	r2, [r0, #32]
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017aca:	2280      	movs	r2, #128	; 0x80
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017acc:	6281      	str	r1, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017ace:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017ad0:	6385      	str	r5, [r0, #56]	; 0x38
    c->invSampleRate = leaf->invSampleRate;
 8017ad2:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017ad6:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017ada:	e9c0 5319 	strd	r5, r3, [r0, #100]	; 0x64
    c->_inv_w = 1.0f / c->_w;
 8017ade:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017ae2:	306c      	adds	r0, #108	; 0x6c
 8017ae4:	f004 ff2e 	bl	801c944 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8017ae8:	4629      	mov	r1, r5
 8017aea:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8017aee:	2220      	movs	r2, #32
}
 8017af0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8017af4:	f004 bf26 	b.w	801c944 <memset>
 8017af8:	3b14f209 	.word	0x3b14f209
 8017afc:	43dc0000 	.word	0x43dc0000
 8017b00:	11c01200 	.word	0x11c01200

08017b04 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
 8017b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b08:	ed2d 8b10 	vpush	{d8-d15}
    _tMBTriangle* c = *osc;
 8017b0c:	6804      	ldr	r4, [r0, #0]
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 8017b0e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
 8017b12:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
{
 8017b16:	b085      	sub	sp, #20
    b = 0.5f * (1.0f + c->waveform);
 8017b18:	ed94 7a03 	vldr	s14, [r4, #12]
{
 8017b1c:	4607      	mov	r7, r0
    sync = c->sync;
 8017b1e:	ed94 8a05 	vldr	s16, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 8017b22:	ee37 7a28 	vadd.f32	s14, s14, s17
    invB = 1.0f / b;
 8017b26:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017b2a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    p = c->_p;  /* phase [0, 1) */
 8017b2e:	edd4 6a08 	vldr	s13, [r4, #32]
    invB = 1.0f / b;
 8017b32:	ee88 daa7 	vdiv.f32	s26, s17, s15
    w = c->_w;  /* phase increment */
 8017b36:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 8017b3a:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
 8017b3e:	6b65      	ldr	r5, [r4, #52]	; 0x34
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8017b40:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b = 0.5f * (1.0f + c->waveform);
 8017b42:	ee67 9a0b 	vmul.f32	s19, s14, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 8017b4a:	ee78 7ae9 	vsub.f32	s15, s17, s19
    invB1 = 1.0f / b1;
 8017b4e:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017b52:	f340 8181 	ble.w	8017e58 <tMBTriangle_tick+0x354>
 8017b56:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8017b5a:	f1b9 0f00 	cmp.w	r9, #0
 8017b5e:	f340 8138 	ble.w	8017dd2 <tMBTriangle_tick+0x2ce>
 8017b62:	edd4 7a06 	vldr	s15, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8017b66:	ed94 ca0f 	vldr	s24, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017b6a:	eef1 7a67 	vneg.f32	s15, s15
    sw = w * c->syncdir;
 8017b6e:	ee67 baaa 	vmul.f32	s23, s15, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017b72:	edc4 7a06 	vstr	s15, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017b76:	ee27 ca8c 	vmul.f32	s24, s15, s24
    p += sw - (int)sw;
 8017b7a:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 8017b7e:	ee76 6aab 	vadd.f32	s13, s13, s23
 8017b82:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017b86:	ee36 8ac8 	vsub.f32	s16, s13, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 8017b8a:	2e00      	cmp	r6, #0
 8017b8c:	f040 8177 	bne.w	8017e7e <tMBTriangle_tick+0x37a>
        
        x = -0.5f + p * invB;
 8017b90:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8017b94:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
 8017b98:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 8017b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 8017ba0:	eee8 8a0d 	vfma.f32	s17, s16, s26
        if (sw > 0)
 8017ba4:	f340 8252 	ble.w	801804c <tMBTriangle_tick+0x548>
        {
            if (p >= b) {
 8017ba8:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8017bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bb0:	f280 820c 	bge.w	8017fcc <tMBTriangle_tick+0x4c8>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8017bb4:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 8017bb6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8017bba:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8017bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bc2:	f280 837b 	bge.w	80182bc <tMBTriangle_tick+0x7b8>
 8017bc6:	461e      	mov	r6, r3
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
                k = 1;
            }
        }
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8017bc8:	1d2b      	adds	r3, r5, #4
 8017bca:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 8017bce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017bd2:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8017bd6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8017bda:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017bde:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	f000 80d3 	beq.w	8017d8e <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8017be8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8017bec:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017bf0:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8017bf2:	48ea      	ldr	r0, [pc, #936]	; (8017f9c <tMBTriangle_tick+0x498>)
 8017bf4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017bf8:	4fe9      	ldr	r7, [pc, #932]	; (8017fa0 <tMBTriangle_tick+0x49c>)
 8017bfa:	e053      	b.n	8017ca4 <tMBTriangle_tick+0x1a0>
 8017bfc:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 8017c00:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8017c04:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017c08:	fa1f fe8e 	uxth.w	lr, lr
 8017c0c:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8017c10:	fa1f f989 	uxth.w	r9, r9
 8017c14:	b29b      	uxth	r3, r3
 8017c16:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8017c1a:	fa1f f888 	uxth.w	r8, r8
 8017c1e:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8017c22:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 8017c26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c2a:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8017c2e:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 8017c32:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017c36:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017c3a:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 8017c3e:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 8017c42:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 8017c46:	ed99 7a00 	vldr	s14, [r9]
 8017c4a:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8017c4e:	edd3 5a01 	vldr	s11, [r3, #4]
 8017c52:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 8017c56:	eea5 7a25 	vfma.f32	s14, s10, s11
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017c5a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017c5e:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017c62:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017c64:	fa1f fe8e 	uxth.w	lr, lr
 8017c68:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017c6c:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017c70:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017c74:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017c78:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8017c7c:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8017c80:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017c84:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8017c88:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8017c8c:	459e      	cmp	lr, r3
 8017c8e:	d304      	bcc.n	8017c9a <tMBTriangle_tick+0x196>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 8017c90:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8017c94:	3b01      	subs	r3, #1
 8017c96:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017c9a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8017c9e:	3201      	adds	r2, #1
 8017ca0:	4293      	cmp	r3, r2
 8017ca2:	dd74      	ble.n	8017d8e <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8017ca4:	ebac 0302 	sub.w	r3, ip, r2
 8017ca8:	b29b      	uxth	r3, r3
 8017caa:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 8017cae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017cb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017cb6:	f8ad 300e 	strh.w	r3, [sp, #14]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8017cba:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017cbe:	b29b      	uxth	r3, r3
 8017cc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017cc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017cc8:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8017ccc:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd4:	d492      	bmi.n	8017bfc <tMBTriangle_tick+0xf8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8017cd6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017cda:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 8017cde:	b29b      	uxth	r3, r3
 8017ce0:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8017ce4:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8017ce8:	fa1f fe8e 	uxth.w	lr, lr
 8017cec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017cf0:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8017cf4:	fa1f f989 	uxth.w	r9, r9
 8017cf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017cfc:	fa1f f888 	uxth.w	r8, r8
 8017d00:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
 8017d04:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8017d08:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8017d0c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017d10:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8017d14:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 8017d18:	b29b      	uxth	r3, r3
 8017d1a:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8017d1e:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8017d22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017d26:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 8017d2a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 8017d2e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8017d32:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8017d36:	edd8 6a01 	vldr	s13, [r8, #4]
 8017d3a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017d3e:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017d42:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8017d46:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017d4a:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8017d4e:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8017d52:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8017d56:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8017d5a:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8017d5e:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8017d62:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8017d66:	eee5 7a87 	vfma.f32	s15, s11, s14
 8017d6a:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017d6e:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8017d72:	3340      	adds	r3, #64	; 0x40
 8017d74:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8017d78:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8017d7c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8017d80:	459e      	cmp	lr, r3
 8017d82:	d285      	bcs.n	8017c90 <tMBTriangle_tick+0x18c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017d84:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8017d88:	3201      	adds	r2, #1
 8017d8a:	4293      	cmp	r3, r2
 8017d8c:	dc8a      	bgt.n	8017ca4 <tMBTriangle_tick+0x1a0>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8017d8e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017d92:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8017d96:	eef0 7a4a 	vmov.f32	s15, s20
    c->out = z;
    j = (j+1) & 7;
 8017d9a:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 8017d9c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
    j = (j+1) & 7;
 8017da0:	f005 0507 	and.w	r5, r5, #7
    c->_p = p;
 8017da4:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8017da8:	ee37 7a4a 	vsub.f32	s14, s14, s20
    c->_w = w;
 8017dac:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 8017db0:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 8017db4:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_z = z;
    c->_j = j;
    c->_k = k;
 8017db8:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
    
    return -c->out;
 8017dbc:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8017dc0:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8017dc4:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
}
 8017dc8:	b005      	add	sp, #20
 8017dca:	ecbd 8b10 	vpop	{d8-d15}
 8017dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 8017dd2:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017dd6:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8017dda:	ee6a ba8c 	vmul.f32	s23, s21, s24
    float inv_sw = c->_inv_w * c->syncdir;
 8017dde:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 8017de2:	eefd caeb 	vcvt.s32.f32	s25, s23
 8017de6:	ee36 9aab 	vadd.f32	s18, s13, s23
 8017dea:	eef8 caec 	vcvt.f32.s32	s25, s25
 8017dee:	ee39 ea6c 	vsub.f32	s28, s18, s25
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8017df2:	f040 863f 	bne.w	8018a74 <tMBTriangle_tick+0xf70>
        if (sw > 0) p = eof_offset;
 8017df6:	eef5 bac0 	vcmpe.f32	s23, #0.0
 8017dfa:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8017dfc:	ee28 8a2b 	vmul.f32	s16, s16, s23
        if (sw > 0) p = eof_offset;
 8017e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8017e04:	ee7e ea48 	vsub.f32	s29, s28, s16
        if (sw > 0) p = eof_offset;
 8017e08:	f340 80ce 	ble.w	8017fa8 <tMBTriangle_tick+0x4a4>
        if (!k) {
 8017e0c:	2e00      	cmp	r6, #0
 8017e0e:	f040 81e1 	bne.w	80181d4 <tMBTriangle_tick+0x6d0>
                if (p_at_reset >= b) {
 8017e12:	eef4 9aee 	vcmpe.f32	s19, s29
 8017e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e1a:	f240 8449 	bls.w	80186b0 <tMBTriangle_tick+0xbac>
                if (p_at_reset >= 1.0f) {
 8017e1e:	eef4 eae8 	vcmpe.f32	s29, s17
 8017e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e26:	f280 82bf 	bge.w	80183a8 <tMBTriangle_tick+0x8a4>
 8017e2a:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8017fa4 <tMBTriangle_tick+0x4a0>
            x = -0.5f + p_at_reset * invB;
 8017e2e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017e32:	ee2c ca27 	vmul.f32	s24, s24, s15
 8017e36:	eef0 ca40 	vmov.f32	s25, s0
	i = lrintf(r - 0.5f);
 8017e3a:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8017e3e:	f005 f9a3 	bl	801d188 <lrintf>
	r -= (float)i;
 8017e42:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 8017e46:	eeed ca2e 	vfma.f32	s25, s26, s29
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e4a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8017e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e52:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 8017e56:	e203      	b.n	8018260 <tMBTriangle_tick+0x75c>
    sw = w * c->syncdir;
 8017e58:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017e5c:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8017e60:	ee6c ba2a 	vmul.f32	s23, s24, s21
    float inv_sw = c->_inv_w * c->syncdir;
 8017e64:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 8017e68:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 8017e6c:	ee7b 6aa6 	vadd.f32	s13, s23, s13
 8017e70:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017e74:	ee36 8ac8 	vsub.f32	s16, s13, s16
    } else if (!k) {  /* normal operation, slope currently up */
 8017e78:	2e00      	cmp	r6, #0
 8017e7a:	f43f ae89 	beq.w	8017b90 <tMBTriangle_tick+0x8c>
        x = 0.5f - (p - b) * invB1;
 8017e7e:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
        if (sw > 0)
 8017e82:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
 8017e86:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8017e8a:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 8017e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 8017e92:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 8017e96:	f340 815a 	ble.w	801814e <tMBTriangle_tick+0x64a>
            if (p >= 1.0f) {
 8017e9a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8017e9e:	eeb4 8acb 	vcmpe.f32	s16, s22
 8017ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ea6:	f6ff ae8f 	blt.w	8017bc8 <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 8017eaa:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 8017eae:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8017fa4 <tMBTriangle_tick+0x4a0>
                p -= 1.0f;
 8017eb2:	ee78 ca4b 	vsub.f32	s25, s16, s22
	_tMBTriangle* c = *osc;
 8017eb6:	683e      	ldr	r6, [r7, #0]
 8017eb8:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 8017ebc:	eeb0 0a68 	vmov.f32	s0, s17
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8017ec0:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 8017ec4:	eeac 0a8c 	vfma.f32	s0, s25, s24
	scale *= w;
 8017ec8:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
 8017ecc:	f005 f95c 	bl	801d188 <lrintf>
	r -= (float)i;
 8017ed0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ed4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017ed8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 8017edc:	eef4 9aec 	vcmpe.f32	s19, s25
	r -= (float)i;
 8017ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ee4:	3301      	adds	r3, #1
 8017ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 8017eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8017eee:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ef2:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017ef6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017efa:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017efe:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f02:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8017f06:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017f0a:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017f0e:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017f12:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8017f16:	f103 0301 	add.w	r3, r3, #1
 8017f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f1e:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 8017f22:	f200 843e 	bhi.w	80187a2 <tMBTriangle_tick+0xc9e>
                x = 0.5f - (p - b) * invB1;
 8017f26:	ee79 7a8b 	vadd.f32	s15, s19, s22
	_tMBTriangle* c = *osc;
 8017f2a:	683f      	ldr	r7, [r7, #0]
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8017f2c:	ee3c dae9 	vsub.f32	s26, s25, s19
	i = lrintf(r - 0.5f);
 8017f30:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8017f34:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8017f38:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 8017f3c:	eead 0a0c 	vfma.f32	s0, s26, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017f40:	eef1 ba6b 	vneg.f32	s23, s23
                x = 0.5f - (p - b) * invB1;
 8017f44:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8017f48:	f005 f91e 	bl	801d188 <lrintf>
	r -= (float)i;
 8017f4c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f50:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017f54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p -= 1.0f;
 8017f58:	eeb0 8a6c 	vmov.f32	s16, s25
	r -= (float)i;
 8017f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f60:	3301      	adds	r3, #1
 8017f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017f66:	eedd 7a0c 	vfnms.f32	s15, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f6a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f6e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017f72:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017f76:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f7a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017f7e:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017f82:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f86:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017f8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 8017f8e:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017f90:	4433      	add	r3, r6
 8017f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8017f9a:	e615      	b.n	8017bc8 <tMBTriangle_tick+0xc4>
 8017f9c:	08028a64 	.word	0x08028a64
 8017fa0:	0802d168 	.word	0x0802d168
 8017fa4:	42800000 	.word	0x42800000
        else if (sw < 0) p = 1.0f - eof_offset;
 8017fa8:	f100 828a 	bmi.w	80184c0 <tMBTriangle_tick+0x9bc>
        if (!k) {
 8017fac:	2e00      	cmp	r6, #0
 8017fae:	f000 81f4 	beq.w	801839a <tMBTriangle_tick+0x896>
            x = 0.5f - (p_at_reset - b) * invB1;
 8017fb2:	ee79 7a88 	vadd.f32	s15, s19, s16
 8017fb6:	ee7c 6ac9 	vsub.f32	s13, s25, s18
 8017fba:	eef0 8a4b 	vmov.f32	s17, s22
    p += sw - (int)sw;
 8017fbe:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 8017fc2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8017fc6:	eeed 8aa6 	vfma.f32	s17, s27, s13
        else if (sw < 0)
 8017fca:	e5fd      	b.n	8017bc8 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;;
 8017fcc:	ed5f ca0b 	vldr	s25, [pc, #-44]	; 8017fa4 <tMBTriangle_tick+0x4a0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8017fd0:	ee38 ea69 	vsub.f32	s28, s16, s19
	i = lrintf(r - 0.5f);
 8017fd4:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8017fd8:	f8d7 8000 	ldr.w	r8, [r7]
 8017fdc:	ee6c ca2c 	vmul.f32	s25, s24, s25
                x = 0.5f - (p - b) * invB1;;
 8017fe0:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8017fe4:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8017fe8:	eeae 0a2c 	vfma.f32	s0, s28, s25
 8017fec:	ee3d ba2d 	vadd.f32	s22, s26, s27
                x = 0.5f - (p - b) * invB1;;
 8017ff0:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8017ff4:	f005 f8c8 	bl	801d188 <lrintf>
	r -= (float)i;
 8017ff8:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ffc:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018000:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018004:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	r -= (float)i;
 8018008:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801800c:	3301      	adds	r3, #1
 801800e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018012:	ee9e 7a2c 	vfnms.f32	s14, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018016:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801801a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801801e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018022:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018026:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801802a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801802e:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018032:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018036:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801803a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801803e:	3301      	adds	r3, #1
 8018040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018044:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 8018048:	2301      	movs	r3, #1
}
 801804a:	e5b4      	b.n	8017bb6 <tMBTriangle_tick+0xb2>
            if (p < 0.0f) {
 801804c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018054:	f57f adb8 	bpl.w	8017bc8 <tMBTriangle_tick+0xc4>
 8018058:	eef5 ba40 	vcmp.f32	s23, #0.0
 801805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018060:	f57f adb2 	bpl.w	8017bc8 <tMBTriangle_tick+0xc4>
	r = MINBLEP_PHASES * phase * inv_w;
 8018064:	ee6c ca08 	vmul.f32	s25, s24, s16
	i = lrintf(r - 0.5f);
 8018068:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8017fa4 <tMBTriangle_tick+0x4a0>
 801806c:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8018070:	f8d7 8000 	ldr.w	r8, [r7]
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8018074:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8018078:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801807c:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8018080:	ee67 baab 	vmul.f32	s23, s15, s23
 8018084:	f005 f880 	bl	801d188 <lrintf>
	r -= (float)i;
 8018088:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801808c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018090:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8018094:	ee38 8a0b 	vadd.f32	s16, s16, s22
	r -= (float)i;
 8018098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801809c:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801809e:	eeb1 7a6b 	vneg.f32	s14, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 80180a6:	eef4 9ac8 	vcmpe.f32	s19, s16
	r -= (float)i;
 80180aa:	eedc 7aa8 	vfnms.f32	s15, s25, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180ae:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80180b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80180b6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 80180ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80180be:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80180c2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80180c6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80180ca:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80180ce:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80180d2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80180d6:	f103 0301 	add.w	r3, r3, #1
 80180da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80180de:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 80180e2:	f340 84cb 	ble.w	8018a7c <tMBTriangle_tick+0xf78>
                x = -0.5f + p * invB;
 80180e6:	ee2c ca28 	vmul.f32	s24, s24, s17
	_tMBTriangle* c = *osc;
 80180ea:	683f      	ldr	r7, [r7, #0]
 80180ec:	ee78 ca69 	vsub.f32	s25, s16, s19
	i = lrintf(r - 0.5f);
 80180f0:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
 80180f4:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 80180f8:	eeac 0a8c 	vfma.f32	s0, s25, s24
 80180fc:	f005 f844 	bl	801d188 <lrintf>
	r -= (float)i;
 8018100:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018104:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018108:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801810c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018110:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8018112:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801811a:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801811e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018122:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018126:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801812a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801812e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8018132:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018136:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801813a:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801813e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018142:	3301      	adds	r3, #1
 8018144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018148:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 801814c:	e53c      	b.n	8017bc8 <tMBTriangle_tick+0xc4>
        else if (sw < 0)
 801814e:	f57f ad3b 	bpl.w	8017bc8 <tMBTriangle_tick+0xc4>
            if (p < b) {
 8018152:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801815a:	f100 8174 	bmi.w	8018446 <tMBTriangle_tick+0x942>
            if (p < 0.0f) {
 801815e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018166:	f57f ad2f 	bpl.w	8017bc8 <tMBTriangle_tick+0xc4>
                p += 1.0f;
 801816a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801816e:	ed1f ba73 	vldr	s22, [pc, #-460]	; 8017fa4 <tMBTriangle_tick+0x4a0>
	r = MINBLEP_PHASES * phase * inv_w;
 8018172:	ee2c ca08 	vmul.f32	s24, s24, s16
	_tMBTriangle* c = *osc;
 8018176:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8018178:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 801817c:	ee38 8a09 	vadd.f32	s16, s16, s18
                x = 0.5f - (p - b) * invB1;
 8018180:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8018184:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
 8018188:	ee79 7ac8 	vsub.f32	s15, s19, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 801818c:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8018190:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8018194:	f004 fff8 	bl	801d188 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018198:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	r -= (float)i;
 801819c:	ee07 0a90 	vmov	s15, r0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80181a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80181a4:	ee2d da6b 	vnmul.f32	s26, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181a8:	3301      	adds	r3, #1
	r -= (float)i;
 80181aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80181b2:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80181ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80181be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80181c2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80181c6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80181ca:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80181ce:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
 80181d2:	e6d8      	b.n	8017f86 <tMBTriangle_tick+0x482>
            x = 0.5f - (p_at_reset - b) * invB1;
 80181d4:	ee3c 9ac9 	vsub.f32	s18, s25, s18
 80181d8:	ee79 7a88 	vadd.f32	s15, s19, s16
                if (p_at_reset >= 1.0f) {
 80181dc:	eef4 eae8 	vcmpe.f32	s29, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 80181e0:	eef0 ca4b 	vmov.f32	s25, s22
 80181e4:	ee77 7a89 	vadd.f32	s15, s15, s18
                if (p_at_reset >= 1.0f) {
 80181e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 80181ec:	eeed caa7 	vfma.f32	s25, s27, s15
                if (p_at_reset >= 1.0f) {
 80181f0:	f280 81e1 	bge.w	80185b6 <tMBTriangle_tick+0xab2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80181f4:	ee3d ea2d 	vadd.f32	s28, s26, s27
 80181f8:	ed5f 7a96 	vldr	s15, [pc, #-600]	; 8017fa4 <tMBTriangle_tick+0x4a0>
 80181fc:	ee2c ca27 	vmul.f32	s24, s24, s15
 8018200:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
 8018204:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018208:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801820c:	f004 ffbc 	bl	801d188 <lrintf>
	r -= (float)i;
 8018210:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018214:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018218:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 801821c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018220:	3301      	adds	r3, #1
	r -= (float)i;
 8018222:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801822a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801822e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018232:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018236:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801823a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801823e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018242:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018246:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801824a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801824e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018252:	3301      	adds	r3, #1
 8018254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018258:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 801825c:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018260:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8018264:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            if (p >= b) {
 8018268:	eef4 9ac8 	vcmpe.f32	s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801826c:	3301      	adds	r3, #1
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 801826e:	ee78 caec 	vsub.f32	s25, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018272:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8018276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801827a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801827e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018282:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	scale *= w;
 8018286:	ee6c caab 	vmul.f32	s25, s25, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 801828a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801828e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018292:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018296:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801829a:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801829e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80182a2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80182a6:	f103 0301 	add.w	r3, r3, #1
 80182aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80182ae:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 80182b2:	d93d      	bls.n	8018330 <tMBTriangle_tick+0x82c>
            x = -0.5f + p * invB;
 80182b4:	eeed 8a08 	vfma.f32	s17, s26, s16
            k = 0;
 80182b8:	464e      	mov	r6, r9
 80182ba:	e485      	b.n	8017bc8 <tMBTriangle_tick+0xc4>
                p -= 1.0f;
 80182bc:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 8017fa4 <tMBTriangle_tick+0x4a0>
 80182c0:	ee38 8a49 	vsub.f32	s16, s16, s18
                x = -0.5f + p * invB;
 80182c4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 80182c8:	683f      	ldr	r7, [r7, #0]
 80182ca:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 80182ce:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 80182d2:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 80182d6:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80182da:	f004 ff55 	bl	801d188 <lrintf>
	r -= (float)i;
 80182de:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80182e6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80182ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182ee:	3301      	adds	r3, #1
	scale *= w;
 80182f0:	ee6d daab 	vmul.f32	s27, s27, s23
                x = -0.5f + p * invB;
 80182f4:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80182fc:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018300:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018304:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018308:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801830c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018310:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8018314:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018318:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801831c:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018320:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018324:	3301      	adds	r3, #1
 8018326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801832a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 801832e:	e44b      	b.n	8017bc8 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;
 8018330:	ee39 7ac8 	vsub.f32	s14, s19, s16
	_tMBTriangle* c = *osc;
 8018334:	683f      	ldr	r7, [r7, #0]
                x = 0.5f - (p - b) * invB1;
 8018336:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 801833a:	ee38 9a69 	vsub.f32	s18, s16, s19
	i = lrintf(r - 0.5f);
 801833e:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8018342:	eee7 7a2d 	vfma.f32	s15, s14, s27
 8018346:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 801834a:	eea9 0a0c 	vfma.f32	s0, s18, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801834e:	ee2b dacd 	vnmul.f32	s26, s23, s26
                x = 0.5f - (p - b) * invB1;
 8018352:	eef0 8a67 	vmov.f32	s17, s15
	i = lrintf(r - 0.5f);
 8018356:	f004 ff17 	bl	801d188 <lrintf>
	r -= (float)i;
 801835a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801835e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018362:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018366:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
 801836a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801836e:	3301      	adds	r3, #1
 8018370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018374:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018378:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801837c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018380:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018384:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018388:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 801838c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018390:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018394:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018398:	e5f7      	b.n	8017f8a <tMBTriangle_tick+0x486>
            x = -0.5f + p_at_reset * invB;
 801839a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    p += sw - (int)sw;
 801839e:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
 80183a2:	eeed 8a2e 	vfma.f32	s17, s26, s29
            else if (sw < 0)
 80183a6:	e40f      	b.n	8017bc8 <tMBTriangle_tick+0xc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80183a8:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 80183ac:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 8018748 <tMBTriangle_tick+0xc44>
 80183b0:	ee2c ca07 	vmul.f32	s24, s24, s14
 80183b4:	ee27 faab 	vmul.f32	s30, s15, s23
                    p_at_reset -= 1.0f;
 80183b8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 80183bc:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 80183c0:	ee7e eac9 	vsub.f32	s29, s29, s18
	i = lrintf(r - 0.5f);
 80183c4:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 80183c8:	eef0 ca68 	vmov.f32	s25, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 80183cc:	ee38 ba2e 	vadd.f32	s22, s16, s29
                    x = -0.5f + p_at_reset * invB;
 80183d0:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 80183d4:	eeab 0a0c 	vfma.f32	s0, s22, s24
 80183d8:	f004 fed6 	bl	801d188 <lrintf>
	r -= (float)i;
 80183dc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183e0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80183e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80183e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183ec:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 80183ee:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 80183f2:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 80183fa:	eea8 0a0c 	vfma.f32	s0, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183fe:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018402:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018406:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801840a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801840e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018412:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018416:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801841a:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801841e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018422:	3301      	adds	r3, #1
 8018424:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018428:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 801842c:	f004 feac 	bl	801d188 <lrintf>
	r -= (float)i;
 8018430:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018434:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8018438:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801843c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018440:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 8018444:	e70c      	b.n	8018260 <tMBTriangle_tick+0x75c>
                x = -0.5f + p * invB;
 8018446:	ed9f 9ac0 	vldr	s18, [pc, #768]	; 8018748 <tMBTriangle_tick+0xc44>
 801844a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801844e:	ee38 ba69 	vsub.f32	s22, s16, s19
	_tMBTriangle* c = *osc;
 8018452:	683e      	ldr	r6, [r7, #0]
 8018454:	ee2c 9a09 	vmul.f32	s18, s24, s18
                x = -0.5f + p * invB;
 8018458:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 801845c:	eeab 0a09 	vfma.f32	s0, s22, s18
 8018460:	f004 fe92 	bl	801d188 <lrintf>
	r -= (float)i;
 8018464:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018468:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 801846c:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8018470:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018474:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018478:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 801847a:	eee8 8a0d 	vfma.f32	s17, s16, s26
	scale *= w;
 801847e:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018486:	ee9b 7a09 	vfnms.f32	s14, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801848a:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801848e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018492:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8018496:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801849a:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801849e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80184a2:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80184a6:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80184aa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80184ae:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80184b2:	3301      	adds	r3, #1
 80184b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80184b8:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 80184bc:	2600      	movs	r6, #0
}
 80184be:	e64e      	b.n	801815e <tMBTriangle_tick+0x65a>
        else if (sw < 0) p = 1.0f - eof_offset;
 80184c0:	ee38 fac8 	vsub.f32	s30, s17, s16
        if (!k) {
 80184c4:	2e00      	cmp	r6, #0
 80184c6:	f040 8141 	bne.w	801874c <tMBTriangle_tick+0xc48>
                if (p_at_reset < 0.0f) {
 80184ca:	eef5 eac0 	vcmpe.f32	s29, #0.0
 80184ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184d2:	f100 81ac 	bmi.w	801882e <tMBTriangle_tick+0xd2a>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80184d6:	ee3d 9a2d 	vadd.f32	s18, s26, s27
 80184da:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8018748 <tMBTriangle_tick+0xc44>
            x = -0.5f + p_at_reset * invB;
 80184de:	ee6d ea2e 	vmul.f32	s29, s26, s29
 80184e2:	ee2c ca27 	vmul.f32	s24, s24, s15
 80184e6:	ee2b 9ac9 	vnmul.f32	s18, s23, s18
	i = lrintf(r - 0.5f);
 80184ea:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80184ee:	eef1 8a48 	vneg.f32	s17, s16
 80184f2:	eea8 0a4c 	vfms.f32	s0, s16, s24
 80184f6:	f004 fe47 	bl	801d188 <lrintf>
	r -= (float)i;
 80184fa:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184fe:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018502:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8018506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801850a:	3301      	adds	r3, #1
	r -= (float)i;
 801850c:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018514:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018518:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801851c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018520:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018524:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018528:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801852c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018530:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018534:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018538:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801853c:	3301      	adds	r3, #1
 801853e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018542:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8018546:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801854a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 801854e:	ee6b eaae 	vmul.f32	s29, s23, s29
            if (p < b) {
 8018552:	eef4 9acf 	vcmpe.f32	s19, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018556:	3301      	adds	r3, #1
 8018558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 801855c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018560:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018564:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018568:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801856c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018570:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018574:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018578:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801857c:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018580:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018584:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018588:	f103 0301 	add.w	r3, r3, #1
 801858c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018590:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8018594:	f300 810c 	bgt.w	80187b0 <tMBTriangle_tick+0xcac>
            x = 0.5f - (p - b) * invB1;
 8018598:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
 801859c:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 801859e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80185a2:	ee78 7a67 	vsub.f32	s15, s16, s15
 80185a6:	eeb0 8a4f 	vmov.f32	s16, s30
 80185aa:	ee77 7aa9 	vadd.f32	s15, s15, s19
 80185ae:	eee7 8aad 	vfma.f32	s17, s15, s27
 80185b2:	f7ff bb09 	b.w	8017bc8 <tMBTriangle_tick+0xc4>
                    p_at_reset -= 1.0f;
 80185b6:	ee7e eae8 	vsub.f32	s29, s29, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 80185ba:	eddf 7a63 	vldr	s15, [pc, #396]	; 8018748 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 80185be:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 80185c2:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 80185c6:	ee38 fa2e 	vadd.f32	s30, s16, s29
	i = lrintf(r - 0.5f);
 80185ca:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 80185ce:	ee3d ea2d 	vadd.f32	s28, s26, s27
	i = lrintf(r - 0.5f);
 80185d2:	eeac 0a0f 	vfma.f32	s0, s24, s30
 80185d6:	f004 fdd7 	bl	801d188 <lrintf>
	r -= (float)i;
 80185da:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185de:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80185e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80185e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185ea:	3301      	adds	r3, #1
	scale *= w;
 80185ec:	ee2e ea2b 	vmul.f32	s28, s28, s23
                if (!k && p_at_reset >= b) {
 80185f0:	eef4 9aee 	vcmpe.f32	s19, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80185f8:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80185fc:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018600:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018604:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 8018608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801860c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018610:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018614:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018618:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801861c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018620:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018624:	f103 0301 	add.w	r3, r3, #1
 8018628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801862c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 8018630:	f200 81b5 	bhi.w	801899e <tMBTriangle_tick+0xe9a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8018634:	ee78 7a69 	vsub.f32	s15, s16, s19
	_tMBTriangle* c = *osc;
 8018638:	683e      	ldr	r6, [r7, #0]
                    x = 0.5f - (p_at_reset - b) * invB1;
 801863a:	ee39 7aa8 	vadd.f32	s14, s19, s17
	i = lrintf(r - 0.5f);
 801863e:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8018642:	ee77 eaae 	vadd.f32	s29, s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018646:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
 801864a:	eeac 0a2e 	vfma.f32	s0, s24, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 801864e:	ee37 9a09 	vadd.f32	s18, s14, s18
	i = lrintf(r - 0.5f);
 8018652:	f004 fd99 	bl	801d188 <lrintf>
	r -= (float)i;
 8018656:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801865a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801865e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018662:	eef1 7a4e 	vneg.f32	s15, s28
	r -= (float)i;
 8018666:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801866a:	3301      	adds	r3, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
 801866c:	eea9 ba2d 	vfma.f32	s22, s18, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018674:	ee9c 7a2e 	vfnms.f32	s14, s24, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018678:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801867c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018680:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8018684:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018688:	eb06 0382 	add.w	r3, r6, r2, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
 801868c:	eef0 ca4b 	vmov.f32	s25, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018690:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018694:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018698:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801869c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80186a0:	3301      	adds	r3, #1
 80186a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80186a6:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 80186aa:	f8d7 8000 	ldr.w	r8, [r7]
 80186ae:	e5a9      	b.n	8018204 <tMBTriangle_tick+0x700>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80186b0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8018748 <tMBTriangle_tick+0xc44>
 80186b4:	ee3e fa69 	vsub.f32	s30, s28, s19
	i = lrintf(r - 0.5f);
 80186b8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80186bc:	ee2c ca07 	vmul.f32	s24, s24, s14
 80186c0:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 80186c4:	eeaf 0a0c 	vfma.f32	s0, s30, s24
 80186c8:	ee27 eaab 	vmul.f32	s28, s15, s23
 80186cc:	f004 fd5c 	bl	801d188 <lrintf>
	r -= (float)i;
 80186d0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186d4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80186d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 80186dc:	eef4 eae8 	vcmpe.f32	s29, s17
	r -= (float)i;
 80186e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186e4:	3301      	adds	r3, #1
 80186e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 80186ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 80186ee:	eedf 7a0c 	vfnms.f32	s15, s30, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80186f2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80186f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80186fa:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80186fe:	eeb0 fa4e 	vmov.f32	s30, s28
 8018702:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018706:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801870a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801870e:	eef1 7a4e 	vneg.f32	s15, s28
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018712:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018716:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801871a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801871e:	f103 0301 	add.w	r3, r3, #1
 8018722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018726:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 801872a:	da7d      	bge.n	8018828 <tMBTriangle_tick+0xd24>
                    x = 0.5f - (p_at_reset - b) * invB1;
 801872c:	ee79 6a88 	vadd.f32	s13, s19, s16
 8018730:	f8d7 8000 	ldr.w	r8, [r7]
 8018734:	ee76 6aac 	vadd.f32	s13, s13, s25
 8018738:	ee76 6ac9 	vsub.f32	s13, s13, s18
 801873c:	eea6 baad 	vfma.f32	s22, s13, s27
 8018740:	eef0 ca4b 	vmov.f32	s25, s22
 8018744:	e55e      	b.n	8018204 <tMBTriangle_tick+0x700>
 8018746:	bf00      	nop
 8018748:	42800000 	.word	0x42800000
            x = 0.5f - (p_at_reset - b) * invB1;
 801874c:	ee39 7a88 	vadd.f32	s14, s19, s16
 8018750:	ee3c 9ac9 	vsub.f32	s18, s25, s18
                if (p_at_reset < b) {
 8018754:	eef4 9aee 	vcmpe.f32	s19, s29
            x = 0.5f - (p_at_reset - b) * invB1;
 8018758:	ee37 7a09 	vadd.f32	s14, s14, s18
                if (p_at_reset < b) {
 801875c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8018760:	ee6d 7a87 	vmul.f32	s15, s27, s14
                if (p_at_reset < b) {
 8018764:	f300 80da 	bgt.w	801891c <tMBTriangle_tick+0xe18>
                if (p_at_reset < 0.0f) {
 8018768:	eef5 eac0 	vcmpe.f32	s29, #0.0
 801876c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018770:	f100 8128 	bmi.w	80189c4 <tMBTriangle_tick+0xec0>
        else if (sw < 0)
 8018774:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8018748 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 8018778:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801877c:	ee77 eaa8 	vadd.f32	s29, s15, s17
 8018780:	ee2c ca07 	vmul.f32	s24, s24, s14
 8018784:	eef1 8a48 	vneg.f32	s17, s16
 8018788:	eea8 0a4c 	vfms.f32	s0, s16, s24
 801878c:	f004 fcfc 	bl	801d188 <lrintf>
	r -= (float)i;
 8018790:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018794:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8018798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801879c:	eedc 7a28 	vfnms.f32	s15, s24, s17
 80187a0:	e6d3      	b.n	801854a <tMBTriangle_tick+0xa46>
                x = -0.5f + p * invB;
 80187a2:	eeed 8a2c 	vfma.f32	s17, s26, s25
                k = 0;
 80187a6:	2600      	movs	r6, #0
                p -= 1.0f;
 80187a8:	eeb0 8a6c 	vmov.f32	s16, s25
 80187ac:	f7ff ba0c 	b.w	8017bc8 <tMBTriangle_tick+0xc4>
                x = -0.5f + p * invB;
 80187b0:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 80187b4:	683f      	ldr	r7, [r7, #0]
 80187b6:	ee3f 9a69 	vsub.f32	s18, s30, s19
                k = 0;
 80187ba:	464e      	mov	r6, r9
}
 80187bc:	eeb0 8a4f 	vmov.f32	s16, s30
	i = lrintf(r - 0.5f);
 80187c0:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 80187c4:	eeed 8a0f 	vfma.f32	s17, s26, s30
	scale *= w;
 80187c8:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 80187cc:	eea9 0a0c 	vfma.f32	s0, s18, s24
 80187d0:	f004 fcda 	bl	801d188 <lrintf>
	r -= (float)i;
 80187d4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80187dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80187e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187e4:	3301      	adds	r3, #1
	scale *= w;
 80187e6:	ee6d ba2b 	vmul.f32	s23, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80187ee:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80187f6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80187fa:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80187fe:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018802:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018806:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801880a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801880e:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018812:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018816:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801881a:	3301      	adds	r3, #1
 801881c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018820:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8018824:	f7ff b9d0 	b.w	8017bc8 <tMBTriangle_tick+0xc4>
 8018828:	f8d7 8000 	ldr.w	r8, [r7]
 801882c:	e5c4      	b.n	80183b8 <tMBTriangle_tick+0x8b4>
	i = lrintf(r - 0.5f);
 801882e:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8018832:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 8018748 <tMBTriangle_tick+0xc44>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8018836:	ee3d ba2d 	vadd.f32	s22, s26, s27
 801883a:	ee2c ca07 	vmul.f32	s24, s24, s14
	i = lrintf(r - 0.5f);
 801883e:	eeb0 0a67 	vmov.f32	s0, s15
 8018842:	edcd 7a01 	vstr	s15, [sp, #4]
 8018846:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    p_at_reset += 1.0f;
 801884a:	ee7e faa8 	vadd.f32	s31, s29, s17
	i = lrintf(r - 0.5f);
 801884e:	eeac 0a0e 	vfma.f32	s0, s24, s28
 8018852:	f004 fc99 	bl	801d188 <lrintf>
	r -= (float)i;
 8018856:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801885a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801885e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018862:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                if (k && p_at_reset < b) {
 8018866:	eddd 7a01 	vldr	s15, [sp, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801886a:	3301      	adds	r3, #1
 801886c:	eeb1 9a4b 	vneg.f32	s18, s22
                if (k && p_at_reset < b) {
 8018870:	eef4 9aef 	vcmpe.f32	s19, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018878:	ee9c 7a0e 	vfnms.f32	s14, s24, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801887c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018880:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018884:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 8018888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801888c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018890:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018894:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018898:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801889c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80188a0:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80188a4:	f103 0301 	add.w	r3, r3, #1
 80188a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80188ac:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 80188b0:	f340 80ed 	ble.w	8018a8e <tMBTriangle_tick+0xf8a>
                    x = -0.5f + p_at_reset * invB;
 80188b4:	ee78 ca69 	vsub.f32	s25, s16, s19
	_tMBTriangle* c = *osc;
 80188b8:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 80188ba:	ee6d ea2f 	vmul.f32	s29, s26, s31
	r = MINBLEP_PHASES * phase * inv_w;
 80188be:	ee7c caaf 	vadd.f32	s25, s25, s31
	i = lrintf(r - 0.5f);
 80188c2:	eeec 7a2c 	vfma.f32	s15, s24, s25
 80188c6:	eeb0 0a67 	vmov.f32	s0, s15
 80188ca:	f004 fc5d 	bl	801d188 <lrintf>
	r -= (float)i;
 80188ce:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188d2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80188d6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80188da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188de:	3301      	adds	r3, #1
	r -= (float)i;
 80188e0:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80188e8:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80188ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80188f0:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80188f4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80188f8:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80188fc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018900:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018904:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018908:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801890c:	3301      	adds	r3, #1
 801890e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018912:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 8018916:	f8d7 8000 	ldr.w	r8, [r7]
 801891a:	e5e6      	b.n	80184ea <tMBTriangle_tick+0x9e6>
	r = MINBLEP_PHASES * phase * inv_w;
 801891c:	ed5f 7a76 	vldr	s15, [pc, #-472]	; 8018748 <tMBTriangle_tick+0xc44>
 8018920:	ee78 ca47 	vsub.f32	s25, s16, s14
	i = lrintf(r - 0.5f);
 8018924:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018928:	ee2c ca27 	vmul.f32	s24, s24, s15
	scale *= w;
 801892c:	ee3d ba2d 	vadd.f32	s22, s26, s27
	i = lrintf(r - 0.5f);
 8018930:	eeac 0a2c 	vfma.f32	s0, s24, s25
 8018934:	f004 fc28 	bl	801d188 <lrintf>
	r -= (float)i;
 8018938:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801893c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018940:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018948:	3301      	adds	r3, #1
	scale *= w;
 801894a:	ee2b ba2b 	vmul.f32	s22, s22, s23
                if (p_at_reset < 0.0f) {
 801894e:	eef5 eac0 	vcmpe.f32	s29, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018956:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801895a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801895e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018962:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 8018966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801896a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801896e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018972:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018976:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801897a:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801897e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018982:	f103 0301 	add.w	r3, r3, #1
 8018986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801898a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 801898e:	d46e      	bmi.n	8018a6e <tMBTriangle_tick+0xf6a>
                    x = -0.5f + p_at_reset * invB;
 8018990:	ee6d ea2e 	vmul.f32	s29, s26, s29
        else if (sw < 0)
 8018994:	f8d7 8000 	ldr.w	r8, [r7]
 8018998:	eeb1 9a4b 	vneg.f32	s18, s22
 801899c:	e5a5      	b.n	80184ea <tMBTriangle_tick+0x9e6>
	i = lrintf(r - 0.5f);
 801899e:	eeb0 0a6c 	vmov.f32	s0, s25
                    x = -0.5f + p_at_reset * invB;
 80189a2:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 80189a6:	eeac 0a08 	vfma.f32	s0, s24, s16
 80189aa:	f004 fbed 	bl	801d188 <lrintf>
	r -= (float)i;
 80189ae:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80189b2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80189b6:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80189ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189be:	eedc 7a08 	vfnms.f32	s15, s24, s16
 80189c2:	e44d      	b.n	8018260 <tMBTriangle_tick+0x75c>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80189c4:	ee3d ba2d 	vadd.f32	s22, s26, s27
 80189c8:	ed5f 7aa1 	vldr	s15, [pc, #-644]	; 8018748 <tMBTriangle_tick+0xc44>
 80189cc:	ee2c ca27 	vmul.f32	s24, s24, s15
 80189d0:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
 80189d4:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80189d8:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 80189dc:	ee39 9a08 	vadd.f32	s18, s18, s16
 80189e0:	ee79 7aef 	vsub.f32	s15, s19, s31
	i = lrintf(r - 0.5f);
 80189e4:	eeb0 0a6c 	vmov.f32	s0, s25
 80189e8:	eef0 ea6f 	vmov.f32	s29, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 80189ec:	ee79 7a27 	vadd.f32	s15, s18, s15
	i = lrintf(r - 0.5f);
 80189f0:	eeae 0a0c 	vfma.f32	s0, s28, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80189f4:	eeb1 9a4b 	vneg.f32	s18, s22
 80189f8:	eee7 eaad 	vfma.f32	s29, s15, s27
	i = lrintf(r - 0.5f);
 80189fc:	f004 fbc4 	bl	801d188 <lrintf>
	r -= (float)i;
 8018a00:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a04:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018a08:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8018a0c:	eeb0 0a6c 	vmov.f32	s0, s25
	r -= (float)i;
 8018a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a14:	3301      	adds	r3, #1
 8018a16:	eef1 8a48 	vneg.f32	s17, s16
 8018a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8018a1e:	eea8 0a4c 	vfms.f32	s0, s16, s24
	r -= (float)i;
 8018a22:	eede 7a0c 	vfnms.f32	s15, s28, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a26:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a2a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018a2e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018a32:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a36:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018a3a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018a3e:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018a42:	edc3 fa3d 	vstr	s31, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018a46:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018a4a:	3301      	adds	r3, #1
 8018a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018a50:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8018a54:	f004 fb98 	bl	801d188 <lrintf>
	r -= (float)i;
 8018a58:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018a5c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8018a60:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8018a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a68:	eedc 7a28 	vfnms.f32	s15, s24, s17
 8018a6c:	e56d      	b.n	801854a <tMBTriangle_tick+0xa46>
 8018a6e:	f8d7 8000 	ldr.w	r8, [r7]
 8018a72:	e7af      	b.n	80189d4 <tMBTriangle_tick+0xed0>
    p += sw - (int)sw;
 8018a74:	eeb0 8a4e 	vmov.f32	s16, s28
 8018a78:	f7ff b887 	b.w	8017b8a <tMBTriangle_tick+0x86>
                x = 0.5f - (p - b) * invB1;
 8018a7c:	ee79 7ac8 	vsub.f32	s15, s19, s16
                k = 1;
 8018a80:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 8018a82:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8018a86:	eee7 8aad 	vfma.f32	s17, s15, s27
 8018a8a:	f7ff b89d 	b.w	8017bc8 <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 8018a8e:	eee8 7a4c 	vfms.f32	s15, s16, s24
                    x = 0.5f - (p_at_reset - b)  * invB1;
 8018a92:	ee79 caef 	vsub.f32	s25, s19, s31
 8018a96:	eeb1 9a48 	vneg.f32	s18, s16
 8018a9a:	eeec 8aad 	vfma.f32	s17, s25, s27
	i = lrintf(r - 0.5f);
 8018a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8018aa2:	f004 fb71 	bl	801d188 <lrintf>
	r -= (float)i;
 8018aa6:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018aaa:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8018aae:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8018ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ab6:	eef0 ea68 	vmov.f32	s29, s17
 8018aba:	eedc 7a09 	vfnms.f32	s15, s24, s18
 8018abe:	e544      	b.n	801854a <tMBTriangle_tick+0xa46>

08018ac0 <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
 8018ac0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8018ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018ac6:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 8018aca:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018ace:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8018ad2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018ad6:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8018ada:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 8018ade:	4770      	bx	lr

08018ae0 <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
 8018ae0:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
 8018ae2:	6804      	ldr	r4, [r0, #0]
{
 8018ae4:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
 8018ae8:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8018afc <tMBTriangle_setWidth+0x1c>
 8018aec:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8018b00 <tMBTriangle_setWidth+0x20>
 8018af0:	f7fd fde4 	bl	80166bc <LEAF_clip>
    c->waveform = w;
 8018af4:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8018af8:	bd10      	pop	{r4, pc}
 8018afa:	bf00      	nop
 8018afc:	3f7d70a4 	.word	0x3f7d70a4
 8018b00:	00000000 	.word	0x00000000

08018b04 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
 8018b04:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8018b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8018b0a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 8018b0e:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8018b12:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8018b16:	eef1 7a67 	vneg.f32	s15, s15
 8018b1a:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8018b1e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b26:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018b2a:	bfcc      	ite	gt
 8018b2c:	2201      	movgt	r2, #1
 8018b2e:	2200      	movle	r2, #0
 8018b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b34:	f002 0201 	and.w	r2, r2, #1
 8018b38:	bf88      	it	hi
 8018b3a:	2200      	movhi	r2, #0
 8018b3c:	b122      	cbz	r2, 8018b48 <tMBTriangle_sync+0x44>
 8018b3e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b46:	da04      	bge.n	8018b52 <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8018b48:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018b60 <tMBTriangle_sync+0x5c>
 8018b4c:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 8018b50:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8018b52:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018b56:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018b5a:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8018b5e:	4770      	bx	lr
 8018b60:	00000000 	.word	0x00000000

08018b64 <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
 8018b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8018b66:	698e      	ldr	r6, [r1, #24]
{
 8018b68:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 8018b6a:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8018b6e:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 8018b70:	4631      	mov	r1, r6
 8018b72:	f7fd ff93 	bl	8016a9c <mpool_alloc>
 8018b76:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8018b78:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8018b7a:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8018b7c:	6871      	ldr	r1, [r6, #4]
    c->syncdir = 1.0f;
 8018b7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8018b82:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8018bf0 <tMBSineTri_init+0x8c>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 8018b86:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8018b88:	ed91 7a01 	vldr	s14, [r1, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 8018b8c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8018b90:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018bf4 <tMBSineTri_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 8018b94:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8018b98:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8018b9a:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8018b9e:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8018ba0:	6182      	str	r2, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8018ba2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 8018ba6:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->shape = 0.0f;
 8018bac:	6343      	str	r3, [r0, #52]	; 0x34
    c->_z = 0.0f;
 8018bae:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->_sinPhase = 0.0f;
 8018bb0:	6303      	str	r3, [r0, #48]	; 0x30
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
 8018bb2:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
 8018bb6:	6201      	str	r1, [r0, #32]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8018bb8:	490f      	ldr	r1, [pc, #60]	; (8018bf8 <tMBSineTri_init+0x94>)
    c->softsync = 0;
 8018bba:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 8018bbc:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8018bbe:	6282      	str	r2, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8018bc0:	2280      	movs	r2, #128	; 0x80
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8018bc2:	63c5      	str	r5, [r0, #60]	; 0x3c
    c->sineMask = 2047;
 8018bc4:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
 8018bc8:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018bcc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8018bd0:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8018bd4:	e9c0 5119 	strd	r5, r1, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8018bd8:	4629      	mov	r1, r5
 8018bda:	306c      	adds	r0, #108	; 0x6c
 8018bdc:	f003 feb2 	bl	801c944 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8018be0:	4629      	mov	r1, r5
 8018be2:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8018be6:	2220      	movs	r2, #32
}
 8018be8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8018bec:	f003 beaa 	b.w	801c944 <memset>
 8018bf0:	3b14f209 	.word	0x3b14f209
 8018bf4:	43dc0000 	.word	0x43dc0000
 8018bf8:	11c01200 	.word	0x11c01200

08018bfc <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
 8018bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c00:	ed2d 8b10 	vpush	{d8-d15}
    _tMBSineTri* c = *osc;
 8018c04:	6804      	ldr	r4, [r0, #0]

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 8018c06:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
 8018c0a:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
{
 8018c0e:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
 8018c10:	ed94 9a03 	vldr	s18, [r4, #12]
{
 8018c14:	4607      	mov	r7, r0
    sync = c->sync;
 8018c16:	ed94 7a05 	vldr	s14, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 8018c1a:	ee39 9a28 	vadd.f32	s18, s18, s17
    invB = 1.0f / b;
 8018c1e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018c22:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    p = c->_p;  /* phase [0, 1) */
 8018c26:	ed94 aa08 	vldr	s20, [r4, #32]
    invB = 1.0f / b;
 8018c2a:	ee88 daa7 	vdiv.f32	s26, s17, s15
    sinPhase = c->_sinPhase;
 8018c2e:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    w = c->_w;  /* phase increment */
 8018c32:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 8018c36:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
 8018c3a:	ee29 9a2b 	vmul.f32	s18, s18, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 8018c42:	ee78 7ac9 	vsub.f32	s15, s17, s18
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8018c46:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
    invB1 = 1.0f / b1;
 8018c4a:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018c4e:	f340 81d8 	ble.w	8019002 <tMBSineTri_tick+0x406>
 8018c52:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8018c56:	f1b9 0f00 	cmp.w	r9, #0
 8018c5a:	f340 8189 	ble.w	8018f70 <tMBSineTri_tick+0x374>
 8018c5e:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8018c62:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018c66:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
 8018c6a:	ee27 ca2a 	vmul.f32	s24, s14, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018c6e:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8018c72:	ee67 ca2c 	vmul.f32	s25, s14, s25
    float inc_amount = sw - (int)sw;
 8018c76:	eefd 7acc 	vcvt.s32.f32	s15, s24
 8018c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c7e:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 8018c82:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
 8018c86:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 8018c8a:	2e00      	cmp	r6, #0
 8018c8c:	f040 81cc 	bne.w	8019028 <tMBSineTri_tick+0x42c>

        x = -0.5f + p * invB;
 8018c90:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8018c94:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = -0.5f + p * invB;
 8018c98:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8018c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 8018ca0:	eeea 8a0d 	vfma.f32	s17, s20, s26
        if (sw > 0)
 8018ca4:	f340 82a1 	ble.w	80191ea <tMBSineTri_tick+0x5ee>
        {
            if (p >= b) {
 8018ca8:	eeb4 aac9 	vcmpe.f32	s20, s18
 8018cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cb0:	f280 825b 	bge.w	801916a <tMBSineTri_tick+0x56e>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8018cb4:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 8018cb6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8018cba:	eeb4 aacb 	vcmpe.f32	s20, s22
 8018cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cc2:	f280 83c8 	bge.w	8019456 <tMBSineTri_tick+0x85a>
 8018cc6:	461e      	mov	r6, r3
    uint32_t idx;
    float samp0;
    float samp1;

    // Wavetable synthesis
    while (sinPhase >= 1.0f)
 8018cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8018ccc:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
 8018cce:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8018cd2:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
 8018cd6:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
 8018cda:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
 8018cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce2:	db0a      	blt.n	8018cfa <tMBSineTri_tick+0xfe>
 8018ce4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    {
    	sinPhase -= 1.0f;
 8018ce8:	eef0 7a48 	vmov.f32	s15, s16
 8018cec:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
 8018cf0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8018cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cf8:	daf6      	bge.n	8018ce8 <tMBSineTri_tick+0xec>
    }

    while (sinPhase < 0.0f)
 8018cfa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d02:	d50c      	bpl.n	8018d1e <tMBSineTri_tick+0x122>
    {
    	sinPhase += 1.0f;
 8018d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
 8018d08:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
 8018d0c:	eef0 7a48 	vmov.f32	s15, s16
 8018d10:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
 8018d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d1c:	d4f6      	bmi.n	8018d0c <tMBSineTri_tick+0x110>
    }
    float tempPhase = (sinPhase * 2048.0f);
 8018d1e:	eddf 7abd 	vldr	s15, [pc, #756]	; 8019014 <tMBSineTri_tick+0x418>
    idx = (idx + 1) & c->sineMask;
    samp1 = __leaf_table_sinewave[idx];

    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8018d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
 8018d26:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8018d2a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
 8018d2e:	ee68 7a27 	vmul.f32	s15, s16, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8018d32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018d36:	ee37 7a44 	vsub.f32	s14, s14, s8
    idx = (uint32_t)tempPhase; //11 bit table
 8018d3a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8018d3e:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
 8018d42:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
 8018d46:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
 8018d4a:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
 8018d4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
 8018d50:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
 8018d52:	49b1      	ldr	r1, [pc, #708]	; (8019018 <tMBSineTri_tick+0x41c>)
 8018d54:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
 8018d58:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
 8018d5c:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
 8018d60:	ed91 6a00 	vldr	s12, [r1]
 8018d64:	ee36 6a66 	vsub.f32	s12, s12, s13
 8018d68:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8018d6c:	eee7 8a26 	vfma.f32	s17, s14, s13
 8018d70:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8018d74:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8018d78:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018d7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	f000 80d3 	beq.w	8018f2c <tMBSineTri_tick+0x330>
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018d86:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018d8a:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8018d8c:	48a3      	ldr	r0, [pc, #652]	; (801901c <tMBSineTri_tick+0x420>)
 8018d8e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018d92:	4fa3      	ldr	r7, [pc, #652]	; (8019020 <tMBSineTri_tick+0x424>)
 8018d94:	e053      	b.n	8018e3e <tMBSineTri_tick+0x242>
 8018d96:	f8bd e006 	ldrh.w	lr, [sp, #6]
 8018d9a:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8018d9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018da2:	fa1f fe8e 	uxth.w	lr, lr
 8018da6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8018daa:	fa1f f989 	uxth.w	r9, r9
 8018dae:	b29b      	uxth	r3, r3
 8018db0:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8018db4:	fa1f f888 	uxth.w	r8, r8
 8018db8:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8018dbc:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 8018dc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018dc4:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8018dc8:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 8018dcc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018dd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018dd4:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 8018dd8:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 8018ddc:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 8018de0:	ed99 7a00 	vldr	s14, [r9]
 8018de4:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8018de8:	ed93 6a01 	vldr	s12, [r3, #4]
 8018dec:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 8018df0:	eea5 7a06 	vfma.f32	s14, s10, s12
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018df4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018df8:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018dfc:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018dfe:	fa1f fe8e 	uxth.w	lr, lr
 8018e02:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018e06:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018e0a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018e0e:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018e12:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8018e16:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8018e1a:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018e1e:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8018e22:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8018e26:	459e      	cmp	lr, r3
 8018e28:	d304      	bcc.n	8018e34 <tMBSineTri_tick+0x238>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 8018e2a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8018e2e:	3b01      	subs	r3, #1
 8018e30:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018e34:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018e38:	3201      	adds	r2, #1
 8018e3a:	4293      	cmp	r3, r2
 8018e3c:	dd76      	ble.n	8018f2c <tMBSineTri_tick+0x330>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018e3e:	ebac 0302 	sub.w	r3, ip, r2
 8018e42:	b29b      	uxth	r3, r3
 8018e44:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 8018e48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018e50:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8018e54:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018e58:	b29b      	uxth	r3, r3
 8018e5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e5e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018e62:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8018e66:	eef4 7ae5 	vcmpe.f32	s15, s11
 8018e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e6e:	d492      	bmi.n	8018d96 <tMBSineTri_tick+0x19a>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8018e70:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018e74:	f8bd e006 	ldrh.w	lr, [sp, #6]
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8018e7e:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8018e82:	fa1f fe8e 	uxth.w	lr, lr
 8018e86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e8a:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8018e8e:	fa1f f989 	uxth.w	r9, r9
 8018e92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018e96:	fa1f f888 	uxth.w	r8, r8
 8018e9a:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8018e9e:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8018ea2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018ea6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018eaa:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8018eae:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 8018eb2:	b29b      	uxth	r3, r3
 8018eb4:	ee24 7a07 	vmul.f32	s14, s8, s14
 8018eb8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8018ebc:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8018ec0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018ec4:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 8018ec8:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 8018ecc:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8018ed0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8018ed4:	ed98 6a01 	vldr	s12, [r8, #4]
 8018ed8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8018edc:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018ee0:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8018ee4:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018ee8:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8018eec:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8018ef0:	ee36 6a64 	vsub.f32	s12, s12, s9
 8018ef4:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8018ef8:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8018efc:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8018f00:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8018f04:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018f08:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018f0c:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8018f10:	3340      	adds	r3, #64	; 0x40
 8018f12:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8018f16:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8018f1a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8018f1e:	459e      	cmp	lr, r3
 8018f20:	d283      	bcs.n	8018e2a <tMBSineTri_tick+0x22e>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018f22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018f26:	3201      	adds	r2, #1
 8018f28:	4293      	cmp	r3, r2
 8018f2a:	dc88      	bgt.n	8018e3e <tMBSineTri_tick+0x242>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8018f2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018f30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 8018f34:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 8018f36:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    j = (j+1) & 7;
 8018f3a:	f005 0507 	and.w	r5, r5, #7
    c->out = z;
    c->_p = p;
 8018f3e:	ed84 aa08 	vstr	s20, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8018f42:	ee77 7ae9 	vsub.f32	s15, s15, s19
    c->_w = w;
 8018f46:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 8018f4a:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
    c->_sinPhase = sinPhase;
 8018f4e:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    z += 0.5f * (c->_f[j] - z);
 8018f52:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_k = k;
 8018f56:	e9c4 560e 	strd	r5, r6, [r4, #56]	; 0x38

    return -c->out;
 8018f5a:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
 8018f5e:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
 8018f62:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
 8018f66:	b003      	add	sp, #12
 8018f68:	ecbd 8b10 	vpop	{d8-d15}
 8018f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 8018f70:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8018f74:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 8018f78:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8018f7c:	ee6c caa7 	vmul.f32	s25, s25, s15
    float inc_amount = sw - (int)sw;
 8018f80:	eefd 7acc 	vcvt.s32.f32	s15, s24
 8018f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018f88:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 8018f8c:	ee37 ba8a 	vadd.f32	s22, s15, s20
    sinPhase += inc_amount;
 8018f90:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8018f94:	f040 8644 	bne.w	8019c20 <tMBSineTri_tick+0x1024>
        if (sw > 0)
 8018f98:	eeb5 cac0 	vcmpe.f32	s24, #0.0
 8018f9c:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8018f9e:	ee2c 8a07 	vmul.f32	s16, s24, s14
        if (sw > 0)
 8018fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8018fa6:	ee3b ea48 	vsub.f32	s28, s22, s16
        if (sw > 0)
 8018faa:	f340 80cc 	ble.w	8019146 <tMBSineTri_tick+0x54a>
        	p = eof_offset + 0.25f;
 8018fae:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
 8018fb2:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
 8018fb6:	2e00      	cmp	r6, #0
 8018fb8:	f040 81dd 	bne.w	8019376 <tMBSineTri_tick+0x77a>
                if (p_at_reset >= b) {
 8018fbc:	eeb4 9ace 	vcmpe.f32	s18, s28
 8018fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fc4:	f240 844d 	bls.w	8019862 <tMBSineTri_tick+0xc66>
                if (p_at_reset >= 1.0f) {
 8018fc8:	eeb4 eae8 	vcmpe.f32	s28, s17
 8018fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fd0:	f280 82b9 	bge.w	8019546 <tMBSineTri_tick+0x94a>
 8018fd4:	eddf 7a13 	vldr	s15, [pc, #76]	; 8019024 <tMBSineTri_tick+0x428>
            x = -0.5f + p_at_reset * invB;
 8018fd8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018fdc:	ee6c caa7 	vmul.f32	s25, s25, s15
 8018fe0:	eef0 fa40 	vmov.f32	s31, s0
	i = lrintf(r - 0.5f);
 8018fe4:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8018fe8:	f004 f8ce 	bl	801d188 <lrintf>
	r -= (float)i;
 8018fec:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 8018ff0:	eeed fa0e 	vfma.f32	s31, s26, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018ff4:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8018ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ffc:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 8019000:	e1fd      	b.n	80193fe <tMBSineTri_tick+0x802>
    sw = w * c->syncdir;
 8019002:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8019006:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 801900a:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 801900e:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019012:	e630      	b.n	8018c76 <tMBSineTri_tick+0x7a>
 8019014:	45000000 	.word	0x45000000
 8019018:	080269e4 	.word	0x080269e4
 801901c:	08028a64 	.word	0x08028a64
 8019020:	0802d168 	.word	0x0802d168
 8019024:	42800000 	.word	0x42800000
        x = 0.5f - (p - b) * invB1;
 8019028:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
        if (sw > 0)
 801902c:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = 0.5f - (p - b) * invB1;
 8019030:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8019034:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8019038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 801903c:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 8019040:	f340 8154 	ble.w	80192ec <tMBSineTri_tick+0x6f0>
            if (p >= 1.0f) {
 8019044:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8019048:	eeb4 aaeb 	vcmpe.f32	s20, s23
 801904c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019050:	f6ff ae3a 	blt.w	8018cc8 <tMBSineTri_tick+0xcc>
	i = lrintf(r - 0.5f);
 8019054:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 8019058:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 8019024 <tMBSineTri_tick+0x428>
                p -= 1.0f;
 801905c:	ee3a ea6b 	vsub.f32	s28, s20, s23
	_tMBSineTri* c = *osc;
 8019060:	683e      	ldr	r6, [r7, #0]
 8019062:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 8019066:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 801906a:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 801906e:	eeae 0a2c 	vfma.f32	s0, s28, s25
	scale *= w;
 8019072:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 8019076:	f004 f887 	bl	801d188 <lrintf>
	r -= (float)i;
 801907a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801907e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019082:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 8019086:	eeb4 9ace 	vcmpe.f32	s18, s28
	r -= (float)i;
 801908a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801908e:	3301      	adds	r3, #1
 8019090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 8019094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8019098:	eede 7a2c 	vfnms.f32	s15, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801909c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80190a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80190a4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80190a8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80190ac:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80190b0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80190b4:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80190b8:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80190bc:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80190c0:	f103 0301 	add.w	r3, r3, #1
 80190c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80190c8:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 80190cc:	f200 843b 	bhi.w	8019946 <tMBSineTri_tick+0xd4a>
                x = 0.5f - (p - b) * invB1;
 80190d0:	ee79 7a2b 	vadd.f32	s15, s18, s23
	_tMBSineTri* c = *osc;
 80190d4:	683f      	ldr	r7, [r7, #0]
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 80190d6:	ee3e da49 	vsub.f32	s26, s28, s18
	i = lrintf(r - 0.5f);
 80190da:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 80190de:	ee77 7aca 	vsub.f32	s15, s15, s20
 80190e2:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 80190e6:	eead 0a2c 	vfma.f32	s0, s26, s25
                p -= 1.0f;
 80190ea:	eeb0 aa4e 	vmov.f32	s20, s28
                x = 0.5f - (p - b) * invB1;
 80190ee:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 80190f2:	f004 f849 	bl	801d188 <lrintf>
	r -= (float)i;
 80190f6:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80190fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80190fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019102:	eef1 7a4c 	vneg.f32	s15, s24
	r -= (float)i;
 8019106:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801910a:	3301      	adds	r3, #1
 801910c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019110:	ee9d 7a2c 	vfnms.f32	s14, s26, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019114:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019118:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801911c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019120:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019124:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019128:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801912c:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019130:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019134:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 8019138:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801913a:	4433      	add	r3, r6
 801913c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019140:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8019144:	e5c0      	b.n	8018cc8 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 8019146:	f100 828a 	bmi.w	801965e <tMBSineTri_tick+0xa62>
        if (!k) {
 801914a:	2e00      	cmp	r6, #0
 801914c:	f000 81f1 	beq.w	8019532 <tMBSineTri_tick+0x936>
            x = 0.5f - (p_at_reset - b) * invB1;
 8019150:	ee39 7a08 	vadd.f32	s14, s18, s16
    p += inc_amount;
 8019154:	eeb0 aa4b 	vmov.f32	s20, s22
            x = 0.5f - (p_at_reset - b) * invB1;
 8019158:	eef0 8a6b 	vmov.f32	s17, s23
 801915c:	ee37 ba4b 	vsub.f32	s22, s14, s22
    sinPhase += inc_amount;
 8019160:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
 8019164:	eeed 8a8b 	vfma.f32	s17, s27, s22
            if (sw > 0)
 8019168:	e5ae      	b.n	8018cc8 <tMBSineTri_tick+0xcc>
                x = 0.5f - (p - b) * invB1;;
 801916a:	ed1f ea52 	vldr	s28, [pc, #-328]	; 8019024 <tMBSineTri_tick+0x428>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 801916e:	ee7a ea49 	vsub.f32	s29, s20, s18
	i = lrintf(r - 0.5f);
 8019172:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 8019176:	f8d7 8000 	ldr.w	r8, [r7]
 801917a:	ee2c ea8e 	vmul.f32	s28, s25, s28
                x = 0.5f - (p - b) * invB1;;
 801917e:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8019182:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8019186:	eeae 0a8e 	vfma.f32	s0, s29, s28
 801918a:	ee7d ba2d 	vadd.f32	s23, s26, s27
                x = 0.5f - (p - b) * invB1;;
 801918e:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8019192:	f003 fff9 	bl	801d188 <lrintf>
	r -= (float)i;
 8019196:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801919a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801919e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80191a2:	ee6b 7acc 	vnmul.f32	s15, s23, s24
	r -= (float)i;
 80191a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80191aa:	3301      	adds	r3, #1
 80191ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80191b0:	ee9e 7a8e 	vfnms.f32	s14, s29, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80191b4:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80191b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80191bc:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80191c0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80191c4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80191c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80191cc:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80191d0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80191d4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80191d8:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80191dc:	3301      	adds	r3, #1
 80191de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80191e2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 80191e6:	2301      	movs	r3, #1
}
 80191e8:	e565      	b.n	8018cb6 <tMBSineTri_tick+0xba>
            if (p < 0.0f) {
 80191ea:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80191ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191f2:	f57f ad69 	bpl.w	8018cc8 <tMBSineTri_tick+0xcc>
 80191f6:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80191fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191fe:	f57f ad63 	bpl.w	8018cc8 <tMBSineTri_tick+0xcc>
	r = MINBLEP_PHASES * phase * inv_w;
 8019202:	ee2c ea8a 	vmul.f32	s28, s25, s20
	i = lrintf(r - 0.5f);
 8019206:	ed5f 8a79 	vldr	s17, [pc, #-484]	; 8019024 <tMBSineTri_tick+0x428>
 801920a:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 801920e:	f8d7 8000 	ldr.w	r8, [r7]
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8019212:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8019216:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801921a:	eeae 0a28 	vfma.f32	s0, s28, s17
 801921e:	ee2c ca27 	vmul.f32	s24, s24, s15
 8019222:	f003 ffb1 	bl	801d188 <lrintf>
	r -= (float)i;
 8019226:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801922a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801922e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8019232:	ee3a aa2b 	vadd.f32	s20, s20, s23
	r -= (float)i;
 8019236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801923a:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801923c:	eeb1 7a4c 	vneg.f32	s14, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8019244:	eeb4 9aca 	vcmpe.f32	s18, s20
	r -= (float)i;
 8019248:	eede 7a28 	vfnms.f32	s15, s28, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801924c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019250:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019254:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8019258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801925c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019260:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8019264:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019268:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801926c:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019270:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019274:	f103 0301 	add.w	r3, r3, #1
 8019278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801927c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8019280:	f340 84d4 	ble.w	8019c2c <tMBSineTri_tick+0x1030>
                x = -0.5f + p * invB;
 8019284:	ee6c caa8 	vmul.f32	s25, s25, s17
	_tMBSineTri* c = *osc;
 8019288:	683f      	ldr	r7, [r7, #0]
 801928a:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
 801928e:	eeb0 0a4b 	vmov.f32	s0, s22
                x = -0.5f + p * invB;
 8019292:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 8019296:	eeac 0aad 	vfma.f32	s0, s25, s27
 801929a:	f003 ff75 	bl	801d188 <lrintf>
	r -= (float)i;
 801929e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80192a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80192a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80192aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80192ae:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 80192b0:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80192b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80192b8:	eedc 7aad 	vfnms.f32	s15, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80192bc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80192c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80192c4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80192c8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80192cc:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 80192d0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80192d4:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80192d8:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80192dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80192e0:	3301      	adds	r3, #1
 80192e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80192e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80192ea:	e4ed      	b.n	8018cc8 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 80192ec:	f57f acec 	bpl.w	8018cc8 <tMBSineTri_tick+0xcc>
            if (p < b) {
 80192f0:	eeb4 aac9 	vcmpe.f32	s20, s18
 80192f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192f8:	f100 8174 	bmi.w	80195e4 <tMBSineTri_tick+0x9e8>
            if (p < 0.0f) {
 80192fc:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8019300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019304:	f57f ace0 	bpl.w	8018cc8 <tMBSineTri_tick+0xcc>
                p += 1.0f;
 8019308:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801930c:	ed5f babb 	vldr	s23, [pc, #-748]	; 8019024 <tMBSineTri_tick+0x428>
	r = MINBLEP_PHASES * phase * inv_w;
 8019310:	ee6c ca8a 	vmul.f32	s25, s25, s20
	_tMBSineTri* c = *osc;
 8019314:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8019316:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 801931a:	ee3a aa0b 	vadd.f32	s20, s20, s22
                x = 0.5f - (p - b) * invB1;
 801931e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8019322:	eeac 0aab 	vfma.f32	s0, s25, s23
                x = 0.5f - (p - b) * invB1;
 8019326:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 801932a:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 801932e:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8019332:	f003 ff29 	bl	801d188 <lrintf>
	r -= (float)i;
 8019336:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801933a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801933e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019342:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 8019346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801934a:	3301      	adds	r3, #1
 801934c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019350:	eedc 7aab 	vfnms.f32	s15, s25, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019354:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019358:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801935c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019360:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019364:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019368:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801936c:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019370:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8019374:	e6de      	b.n	8019134 <tMBSineTri_tick+0x538>
            x = 0.5f - (p_at_reset - b) * invB1;
 8019376:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
 801937a:	eeb4 eae8 	vcmpe.f32	s28, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 801937e:	eef0 fa6b 	vmov.f32	s31, s23
 8019382:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset >= 1.0f) {
 8019386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 801938a:	eeed faa7 	vfma.f32	s31, s27, s15
                if (p_at_reset >= 1.0f) {
 801938e:	f280 81eb 	bge.w	8019768 <tMBSineTri_tick+0xb6c>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8019392:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8019396:	ed5f 7add 	vldr	s15, [pc, #-884]	; 8019024 <tMBSineTri_tick+0x428>
 801939a:	ee6c caa7 	vmul.f32	s25, s25, s15
 801939e:	ee6e ea8c 	vmul.f32	s29, s29, s24
	i = lrintf(r - 0.5f);
 80193a2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80193a6:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 80193aa:	f003 feed 	bl	801d188 <lrintf>
	r -= (float)i;
 80193ae:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193b2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 80193b6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 80193ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193be:	3301      	adds	r3, #1
	r -= (float)i;
 80193c0:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193c8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80193cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80193d0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80193d4:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80193d8:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80193dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80193e0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80193e4:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80193e8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80193ec:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80193f0:	3301      	adds	r3, #1
 80193f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193f6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 80193fa:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193fe:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019402:	ee2f 7acc 	vnmul.f32	s14, s31, s24
            if (p >= b) {
 8019406:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801940a:	3301      	adds	r3, #1
 801940c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8019410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019414:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019418:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801941c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019420:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019424:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019428:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801942c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019430:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019434:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019438:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801943c:	f103 0301 	add.w	r3, r3, #1
 8019440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019444:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8019448:	d940      	bls.n	80194cc <tMBSineTri_tick+0x8d0>
            x = -0.5f + p * invB;
 801944a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
 801944e:	464e      	mov	r6, r9
            x = -0.5f + p * invB;
 8019450:	eeed 8a0a 	vfma.f32	s17, s26, s20
 8019454:	e438      	b.n	8018cc8 <tMBSineTri_tick+0xcc>
                p -= 1.0f;
 8019456:	eddf 7ac3 	vldr	s15, [pc, #780]	; 8019764 <tMBSineTri_tick+0xb68>
 801945a:	ee3a aa4b 	vsub.f32	s20, s20, s22
                x = -0.5f + p * invB;
 801945e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 8019462:	683f      	ldr	r7, [r7, #0]
 8019464:	ee6c caa7 	vmul.f32	s25, s25, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8019468:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 801946c:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8019470:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8019474:	f003 fe88 	bl	801d188 <lrintf>
	r -= (float)i;
 8019478:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801947c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019480:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019488:	3301      	adds	r3, #1
	scale *= w;
 801948a:	ee6c da2d 	vmul.f32	s27, s24, s27
                x = -0.5f + p * invB;
 801948e:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019496:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801949a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801949e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80194a2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80194a6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80194aa:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 80194ae:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80194b2:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80194b6:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80194ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80194be:	3301      	adds	r3, #1
 80194c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80194c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80194c8:	f7ff bbfe 	b.w	8018cc8 <tMBSineTri_tick+0xcc>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 80194cc:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 80194d0:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 80194d2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
 80194d6:	ee79 7a4a 	vsub.f32	s15, s18, s20
 80194da:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 80194de:	eeab 0a2c 	vfma.f32	s0, s22, s25
 80194e2:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 80194e6:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 80194ea:	f003 fe4d 	bl	801d188 <lrintf>
	r -= (float)i;
 80194ee:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80194f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80194f6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80194fa:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 80194fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019502:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019504:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801950c:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019510:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019514:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019518:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801951c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019520:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8019524:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019528:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801952c:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019530:	e600      	b.n	8019134 <tMBSineTri_tick+0x538>
            x = -0.5f + p_at_reset * invB;
 8019532:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    sinPhase += inc_amount;
 8019536:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 801953a:	eeb0 aa4b 	vmov.f32	s20, s22
            x = -0.5f + p_at_reset * invB;
 801953e:	eeed 8a0e 	vfma.f32	s17, s26, s28
            else if (sw < 0)
 8019542:	f7ff bbc1 	b.w	8018cc8 <tMBSineTri_tick+0xcc>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8019546:	ee7d ea2d 	vadd.f32	s29, s26, s27
 801954a:	eddf 7a86 	vldr	s15, [pc, #536]	; 8019764 <tMBSineTri_tick+0xb68>
 801954e:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019552:	ee2c fa2e 	vmul.f32	s30, s24, s29
                    p_at_reset -= 1.0f;
 8019556:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 801955a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 801955e:	ee3e ea4b 	vsub.f32	s28, s28, s22
	i = lrintf(r - 0.5f);
 8019562:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8019566:	eef0 fa68 	vmov.f32	s31, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801956a:	ee78 ba0e 	vadd.f32	s23, s16, s28
                    x = -0.5f + p_at_reset * invB;
 801956e:	eeed fa0e 	vfma.f32	s31, s26, s28
	i = lrintf(r - 0.5f);
 8019572:	eeab 0aac 	vfma.f32	s0, s23, s25
 8019576:	f003 fe07 	bl	801d188 <lrintf>
	r -= (float)i;
 801957a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801957e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019582:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019586:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801958a:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 801958c:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 8019590:	eedb 7aac 	vfnms.f32	s15, s23, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8019598:	eeaa 0a2c 	vfma.f32	s0, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801959c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80195a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80195a4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80195a8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80195ac:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80195b0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80195b4:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80195b8:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80195bc:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80195c0:	3301      	adds	r3, #1
 80195c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80195c6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 80195ca:	f003 fddd 	bl	801d188 <lrintf>
	r -= (float)i;
 80195ce:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80195d2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80195d6:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80195da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195de:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 80195e2:	e70c      	b.n	80193fe <tMBSineTri_tick+0x802>
                x = -0.5f + p * invB;
 80195e4:	eddf ba5f 	vldr	s23, [pc, #380]	; 8019764 <tMBSineTri_tick+0xb68>
 80195e8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80195ec:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 80195f0:	683e      	ldr	r6, [r7, #0]
 80195f2:	ee6c baab 	vmul.f32	s23, s25, s23
                x = -0.5f + p * invB;
 80195f6:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 80195fa:	eeab 0a8b 	vfma.f32	s0, s23, s22
 80195fe:	f003 fdc3 	bl	801d188 <lrintf>
	r -= (float)i;
 8019602:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019606:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 801960a:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 801960e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019612:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019616:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8019618:	eeea 8a0d 	vfma.f32	s17, s20, s26
	scale *= w;
 801961c:	ee67 7a8c 	vmul.f32	s15, s15, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019624:	ee9b 7a8b 	vfnms.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019628:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801962c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019630:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019634:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019638:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801963c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019640:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019644:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019648:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801964c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8019650:	3301      	adds	r3, #1
 8019652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019656:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 801965a:	2600      	movs	r6, #0
}
 801965c:	e64e      	b.n	80192fc <tMBSineTri_tick+0x700>
        	p = (1.0f - eof_offset) + 0.25f;
 801965e:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
 8019662:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
 8019666:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
 801966a:	2e00      	cmp	r6, #0
 801966c:	f040 8142 	bne.w	80198f4 <tMBSineTri_tick+0xcf8>
                if (p_at_reset < 0.0f) {
 8019670:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 8019674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019678:	f100 81ab 	bmi.w	80199d2 <tMBSineTri_tick+0xdd6>
            x = -0.5f + p_at_reset * invB;
 801967c:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8019680:	eddf 7a38 	vldr	s15, [pc, #224]	; 8019764 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8019684:	ee3d ba2d 	vadd.f32	s22, s26, s27
 8019688:	ee6c caa7 	vmul.f32	s25, s25, s15
            x = -0.5f + p_at_reset * invB;
 801968c:	eeed ba0e 	vfma.f32	s23, s26, s28
 8019690:	ee2c ba4b 	vnmul.f32	s22, s24, s22
	r = MINBLEP_PHASES * phase * inv_w;
 8019694:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	i = lrintf(r - 0.5f);
 8019698:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801969c:	ee78 8ac8 	vsub.f32	s17, s17, s16
 80196a0:	eea8 0aac 	vfma.f32	s0, s17, s25
 80196a4:	f003 fd70 	bl	801d188 <lrintf>
	r -= (float)i;
 80196a8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80196ac:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 80196b0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 80196b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80196b8:	3301      	adds	r3, #1
	r -= (float)i;
 80196ba:	eed8 7aac 	vfnms.f32	s15, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80196be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80196c2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80196c6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80196ca:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80196ce:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80196d2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80196d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80196da:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80196de:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80196e2:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80196e6:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80196ea:	3301      	adds	r3, #1
 80196ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80196f0:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 80196f4:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80196f8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 80196fc:	ee6c ba2b 	vmul.f32	s23, s24, s23
            if (p < b) {
 8019700:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019704:	3301      	adds	r3, #1
 8019706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 801970a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801970e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019712:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019716:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801971a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801971e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019722:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019726:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801972a:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801972e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019732:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019736:	f103 0301 	add.w	r3, r3, #1
 801973a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801973e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8019742:	f300 8107 	bgt.w	8019954 <tMBSineTri_tick+0xd58>
            x = 0.5f - (p - b) * invB1;
 8019746:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
 801974a:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 801974c:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8019750:	ee78 7a67 	vsub.f32	s15, s16, s15
 8019754:	eeb0 8a6e 	vmov.f32	s16, s29
 8019758:	ee77 7a89 	vadd.f32	s15, s15, s18
 801975c:	eee7 8aad 	vfma.f32	s17, s15, s27
 8019760:	f7ff bab2 	b.w	8018cc8 <tMBSineTri_tick+0xcc>
 8019764:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 8019768:	ee3e ea68 	vsub.f32	s28, s28, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801976c:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8019764 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 8019770:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
 8019774:	ee6c caa7 	vmul.f32	s25, s25, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8019778:	ee78 fa0e 	vadd.f32	s31, s16, s28
	i = lrintf(r - 0.5f);
 801977c:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8019780:	ee7d ea2d 	vadd.f32	s29, s26, s27
	i = lrintf(r - 0.5f);
 8019784:	eeac 0aaf 	vfma.f32	s0, s25, s31
 8019788:	f003 fcfe 	bl	801d188 <lrintf>
	r -= (float)i;
 801978c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019790:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019794:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801979c:	3301      	adds	r3, #1
	scale *= w;
 801979e:	ee6e ea8c 	vmul.f32	s29, s29, s24
                if (!k && p_at_reset >= b) {
 80197a2:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80197aa:	eedc 7aaf 	vfnms.f32	s15, s25, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197ae:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80197b2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80197b6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 80197ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80197be:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80197c2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80197c6:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80197ca:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80197ce:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80197d2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80197d6:	f103 0301 	add.w	r3, r3, #1
 80197da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80197de:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 80197e2:	f200 81ae 	bhi.w	8019b42 <tMBSineTri_tick+0xf46>
                    x = 0.5f - (p_at_reset - b) * invB1;
 80197e6:	ee79 7a28 	vadd.f32	s15, s18, s17
	_tMBSineTri* c = *osc;
 80197ea:	683e      	ldr	r6, [r7, #0]
	i = lrintf(r - 0.5f);
 80197ec:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
 80197f0:	ee77 7a88 	vadd.f32	s15, s15, s16
 80197f4:	ee37 bacb 	vsub.f32	s22, s15, s22
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80197f8:	ee78 7a49 	vsub.f32	s15, s16, s18
                    x = 0.5f - (p_at_reset - b) * invB1;
 80197fc:	eeeb ba2d 	vfma.f32	s23, s22, s27
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8019800:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 8019804:	eeac 0a8e 	vfma.f32	s0, s25, s28
 8019808:	f003 fcbe 	bl	801d188 <lrintf>
	r -= (float)i;
 801980c:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019810:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019814:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019818:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801981c:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801981e:	eef1 7a6e 	vneg.f32	s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019822:	eef0 fa6b 	vmov.f32	s31, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801982a:	ee9c 7a8e 	vfnms.f32	s14, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801982e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019832:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019836:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801983a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801983e:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8019842:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019846:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801984a:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801984e:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8019852:	3301      	adds	r3, #1
 8019854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019858:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 801985c:	f8d7 8000 	ldr.w	r8, [r7]
 8019860:	e59f      	b.n	80193a2 <tMBSineTri_tick+0x7a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8019862:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8019764 <tMBSineTri_tick+0xb68>
 8019866:	ee3b fa49 	vsub.f32	s30, s22, s18
	i = lrintf(r - 0.5f);
 801986a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801986e:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019872:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8019876:	eeaf 0a2c 	vfma.f32	s0, s30, s25
 801987a:	f003 fc85 	bl	801d188 <lrintf>
	r -= (float)i;
 801987e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019882:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019886:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801988a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801988e:	3301      	adds	r3, #1
 8019890:	ee6c ea2e 	vmul.f32	s29, s24, s29
                if (p_at_reset >= 1.0f) {
 8019894:	eeb4 eae8 	vcmpe.f32	s28, s17
	r -= (float)i;
 8019898:	eedf 7a2c 	vfnms.f32	s15, s30, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801989c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198a0:	eeb0 fa6e 	vmov.f32	s30, s29
 80198a4:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80198a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80198ac:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset >= 1.0f) {
 80198b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80198b4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80198b8:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80198bc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80198c0:	eef1 7a6e 	vneg.f32	s15, s29
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80198c4:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80198c8:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80198cc:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80198d0:	f103 0301 	add.w	r3, r3, #1
 80198d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198d8:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 80198dc:	da76      	bge.n	80199cc <tMBSineTri_tick+0xdd0>
                    x = 0.5f - (p_at_reset - b) * invB1;
 80198de:	ee79 7a08 	vadd.f32	s15, s18, s16
 80198e2:	f8d7 8000 	ldr.w	r8, [r7]
 80198e6:	ee37 bacb 	vsub.f32	s22, s15, s22
 80198ea:	eeeb ba2d 	vfma.f32	s23, s22, s27
 80198ee:	eef0 fa6b 	vmov.f32	s31, s23
 80198f2:	e556      	b.n	80193a2 <tMBSineTri_tick+0x7a6>
            x = 0.5f - (p_at_reset - b) * invB1;
 80198f4:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
 80198f8:	eeb4 9ace 	vcmpe.f32	s18, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 80198fc:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset < b) {
 8019900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8019904:	eeed baa7 	vfma.f32	s23, s27, s15
                if (p_at_reset < b) {
 8019908:	f300 80d8 	bgt.w	8019abc <tMBSineTri_tick+0xec0>
                if (p_at_reset < 0.0f) {
 801990c:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 8019910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019914:	f100 812a 	bmi.w	8019b6c <tMBSineTri_tick+0xf70>
        else if (sw < 0)
 8019918:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
 801991c:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8019764 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 8019920:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019924:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019928:	ee78 8ac8 	vsub.f32	s17, s17, s16
 801992c:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8019930:	f003 fc2a 	bl	801d188 <lrintf>
	r -= (float)i;
 8019934:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019938:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 801993c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019940:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 8019944:	e6d8      	b.n	80196f8 <tMBSineTri_tick+0xafc>
                x = -0.5f + p * invB;
 8019946:	eeed 8a0e 	vfma.f32	s17, s26, s28
                k = 0;
 801994a:	2600      	movs	r6, #0
                p -= 1.0f;
 801994c:	eeb0 aa4e 	vmov.f32	s20, s28
 8019950:	f7ff b9ba 	b.w	8018cc8 <tMBSineTri_tick+0xcc>
                x = -0.5f + p * invB;
 8019954:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 8019958:	683f      	ldr	r7, [r7, #0]
 801995a:	ee3a ba49 	vsub.f32	s22, s20, s18
                k = 0;
 801995e:	464e      	mov	r6, r9
}
 8019960:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
 8019964:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 8019968:	eeed 8a0a 	vfma.f32	s17, s26, s20
	scale *= w;
 801996c:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 8019970:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8019974:	f003 fc08 	bl	801d188 <lrintf>
	r -= (float)i;
 8019978:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801997c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019980:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019988:	3301      	adds	r3, #1
	scale *= w;
 801998a:	ee2d ca0c 	vmul.f32	s24, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801998e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019992:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019996:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801999a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801999e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80199a2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80199a6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80199aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80199ae:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80199b2:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80199b6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80199ba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80199be:	3301      	adds	r3, #1
 80199c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80199c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80199c8:	f7ff b97e 	b.w	8018cc8 <tMBSineTri_tick+0xcc>
 80199cc:	f8d7 8000 	ldr.w	r8, [r7]
 80199d0:	e5c1      	b.n	8019556 <tMBSineTri_tick+0x95a>
	i = lrintf(r - 0.5f);
 80199d2:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
 80199d6:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 8019764 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80199da:	ee3d fa2d 	vadd.f32	s30, s26, s27
 80199de:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 80199e2:	eeb0 0a6f 	vmov.f32	s0, s31
 80199e6:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    p_at_reset += 1.0f;
 80199ea:	ee3e ea28 	vadd.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
 80199ee:	eeac 0a8b 	vfma.f32	s0, s25, s22
 80199f2:	f003 fbc9 	bl	801d188 <lrintf>
	r -= (float)i;
 80199f6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80199fa:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80199fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a06:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 8019a08:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019a10:	eedc 7a8b 	vfnms.f32	s15, s25, s22
	scale *= w;
 8019a14:	eeb1 ba4f 	vneg.f32	s22, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a18:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019a1c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019a20:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 8019a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019a28:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019a2c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019a30:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019a34:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019a38:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019a3c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019a40:	f103 0301 	add.w	r3, r3, #1
 8019a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019a48:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 8019a4c:	f340 80f7 	ble.w	8019c3e <tMBSineTri_tick+0x1042>
                    x = -0.5f + p_at_reset * invB;
 8019a50:	ee78 7a49 	vsub.f32	s15, s16, s18
	_tMBSineTri* c = *osc;
 8019a54:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 8019a56:	eef0 ba6f 	vmov.f32	s23, s31
	i = lrintf(r - 0.5f);
 8019a5a:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = -0.5f + p_at_reset * invB;
 8019a5e:	eeed ba0e 	vfma.f32	s23, s26, s28
	r = MINBLEP_PHASES * phase * inv_w;
 8019a62:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 8019a66:	eeac 0a8e 	vfma.f32	s0, s25, s28
 8019a6a:	f003 fb8d 	bl	801d188 <lrintf>
	r -= (float)i;
 8019a6e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a72:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019a76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a7e:	3301      	adds	r3, #1
	r -= (float)i;
 8019a80:	eedc 7a8e 	vfnms.f32	s15, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019a88:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019a8c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019a90:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019a94:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019a98:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8019a9c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019aa0:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019aa4:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019aa8:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8019aac:	3301      	adds	r3, #1
 8019aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019ab2:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 8019ab6:	f8d7 8000 	ldr.w	r8, [r7]
 8019aba:	e5eb      	b.n	8019694 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 8019abc:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8019ac0:	ed5f 7ad8 	vldr	s15, [pc, #-864]	; 8019764 <tMBSineTri_tick+0xb68>
 8019ac4:	ee3b fa49 	vsub.f32	s30, s22, s18
 8019ac8:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019acc:	eeb0 0a6b 	vmov.f32	s0, s23
 8019ad0:	eeac 0a8f 	vfma.f32	s0, s25, s30
 8019ad4:	f003 fb58 	bl	801d188 <lrintf>
	r -= (float)i;
 8019ad8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019adc:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019ae0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019ae8:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 8019aea:	eeb5 eac0 	vcmpe.f32	s28, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019af2:	eedc 7a8f 	vfnms.f32	s15, s25, s30
	scale *= w;
 8019af6:	ee3d fa2d 	vadd.f32	s30, s26, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019afa:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019afe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019b02:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 8019b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
 8019b0a:	ee2f fa0c 	vmul.f32	s30, s30, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019b0e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019b12:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8019b16:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019b1a:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019b1e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019b22:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019b26:	f103 0301 	add.w	r3, r3, #1
 8019b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019b2e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 8019b32:	d472      	bmi.n	8019c1a <tMBSineTri_tick+0x101e>
                    x = -0.5f + p_at_reset * invB;
 8019b34:	eeed ba0e 	vfma.f32	s23, s26, s28
        else if (sw < 0)
 8019b38:	f8d7 8000 	ldr.w	r8, [r7]
 8019b3c:	eeb1 ba4f 	vneg.f32	s22, s30
 8019b40:	e5a8      	b.n	8019694 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 8019b42:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
 8019b46:	eead fa0e 	vfma.f32	s30, s26, s28
	i = lrintf(r - 0.5f);
 8019b4a:	eeac 0a8a 	vfma.f32	s0, s25, s20
 8019b4e:	f003 fb1b 	bl	801d188 <lrintf>
	r -= (float)i;
 8019b52:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019b56:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8019b5a:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8019b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    x = -0.5f + p_at_reset * invB;
 8019b62:	eef0 fa4f 	vmov.f32	s31, s30
	r -= (float)i;
 8019b66:	eedc 7a8a 	vfnms.f32	s15, s25, s20
 8019b6a:	e448      	b.n	80193fe <tMBSineTri_tick+0x802>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8019b6c:	ee3d fa2d 	vadd.f32	s30, s26, s27
 8019b70:	eddf 7a39 	vldr	s15, [pc, #228]	; 8019c58 <tMBSineTri_tick+0x105c>
 8019b74:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019b78:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019b7c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8019b80:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019b84:	ee78 7a4b 	vsub.f32	s15, s16, s22
 8019b88:	ee39 7a4e 	vsub.f32	s14, s18, s28
	i = lrintf(r - 0.5f);
 8019b8c:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019b90:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8019b94:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
 8019b98:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8019b9c:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019ba0:	eee7 baad 	vfma.f32	s23, s15, s27
	i = lrintf(r - 0.5f);
 8019ba4:	f003 faf0 	bl	801d188 <lrintf>
	r -= (float)i;
 8019ba8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019bac:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019bb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019bb4:	eeb1 fa4f 	vneg.f32	s30, s30
	r -= (float)i;
 8019bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019bbc:	3301      	adds	r3, #1
 8019bbe:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8019bc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8019bc6:	eeb0 0a6f 	vmov.f32	s0, s31
	r -= (float)i;
 8019bca:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019bce:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019bd2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019bd6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	i = lrintf(r - 0.5f);
 8019bda:	eeac 0aa8 	vfma.f32	s0, s25, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019bde:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019be2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8019be6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019bea:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019bee:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019bf2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019bf6:	3301      	adds	r3, #1
 8019bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019bfc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8019c00:	f003 fac2 	bl	801d188 <lrintf>
	r -= (float)i;
 8019c04:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019c08:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8019c0c:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8019c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c14:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 8019c18:	e56e      	b.n	80196f8 <tMBSineTri_tick+0xafc>
 8019c1a:	f8d7 8000 	ldr.w	r8, [r7]
 8019c1e:	e7ad      	b.n	8019b7c <tMBSineTri_tick+0xf80>
    sinPhase += inc_amount;
 8019c20:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 8019c24:	eeb0 aa4b 	vmov.f32	s20, s22
 8019c28:	f7ff b82f 	b.w	8018c8a <tMBSineTri_tick+0x8e>
                x = 0.5f - (p - b) * invB1;
 8019c2c:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
 8019c30:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 8019c32:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8019c36:	eee7 8aad 	vfma.f32	s17, s15, s27
 8019c3a:	f7ff b845 	b.w	8018cc8 <tMBSineTri_tick+0xcc>
 8019c3e:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
 8019c42:	ee39 ea4e 	vsub.f32	s28, s18, s28
	i = lrintf(r - 0.5f);
 8019c46:	eeb0 0a6f 	vmov.f32	s0, s31
 8019c4a:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
 8019c4e:	eeee ba2d 	vfma.f32	s23, s28, s27
	i = lrintf(r - 0.5f);
 8019c52:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8019c56:	e7d3      	b.n	8019c00 <tMBSineTri_tick+0x1004>
 8019c58:	42800000 	.word	0x42800000

08019c5c <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
 8019c5c:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8019c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019c62:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 8019c66:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019c6a:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8019c6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019c72:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8019c76:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 8019c7a:	4770      	bx	lr

08019c7c <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
 8019c7c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8019c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8019c82:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 8019c86:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8019c8a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8019c8e:	eef1 7a67 	vneg.f32	s15, s15
 8019c92:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8019c96:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8019c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c9e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019ca2:	bfcc      	ite	gt
 8019ca4:	2201      	movgt	r2, #1
 8019ca6:	2200      	movle	r2, #0
 8019ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cac:	f002 0201 	and.w	r2, r2, #1
 8019cb0:	bf88      	it	hi
 8019cb2:	2200      	movhi	r2, #0
 8019cb4:	b122      	cbz	r2, 8019cc0 <tMBSineTri_sync+0x44>
 8019cb6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cbe:	da04      	bge.n	8019cca <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8019cc0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8019cd8 <tMBSineTri_sync+0x5c>
 8019cc4:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
 8019cc8:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8019cca:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019cce:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019cd2:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8019cd6:	4770      	bx	lr
 8019cd8:	00000000 	.word	0x00000000

08019cdc <tMBSineTri_setShape>:
    c->_p = phase;
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
 8019cdc:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8019cde:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 8019ce2:	4770      	bx	lr

08019ce4 <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
 8019ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8019ce6:	698e      	ldr	r6, [r1, #24]
{
 8019ce8:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 8019cea:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8019cee:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 8019cf0:	4631      	mov	r1, r6
 8019cf2:	f7fc fed3 	bl	8016a9c <mpool_alloc>
 8019cf6:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8019cf8:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8019cfa:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8019cfc:	6871      	ldr	r1, [r6, #4]
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 8019cfe:	4604      	mov	r4, r0
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8019d00:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8019d5c <tMBSaw_init+0x78>
    c->syncdir = 1.0f;
 8019d04:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->invSampleRate = leaf->invSampleRate;
 8019d08:	ed91 7a01 	vldr	s14, [r1, #4]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8019d0c:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->freq = 440.f;
 8019d10:	eddf 7a13 	vldr	s15, [pc, #76]	; 8019d60 <tMBSaw_init+0x7c>
    c->_inv_w = 1.0f / c->_w;
 8019d14:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8019d18:	60c3      	str	r3, [r0, #12]
    c->freq = 440.f;
 8019d1a:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8019d1e:	6103      	str	r3, [r0, #16]
    c->syncdir = 1.0f;
 8019d20:	6142      	str	r2, [r0, #20]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8019d22:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
 8019d24:	6185      	str	r5, [r0, #24]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019d26:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 8019d2a:	6243      	str	r3, [r0, #36]	; 0x24
    c->_j = 0;
 8019d2c:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->_p = 0.0f;  /* phase [0, 1) */
 8019d2e:	61c3      	str	r3, [r0, #28]
    c->numBLEPs = 0;
 8019d30:	6505      	str	r5, [r0, #80]	; 0x50
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8019d32:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8019d36:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 8019d38:	ed80 7ab6 	vstr	s14, [r0, #728]	; 0x2d8
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019d3c:	edc0 7a08 	vstr	s15, [r0, #32]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8019d40:	3056      	adds	r0, #86	; 0x56
    c->_inv_w = 1.0f / c->_w;
 8019d42:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8019d46:	f002 fdfd 	bl	801c944 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8019d4a:	4629      	mov	r1, r5
 8019d4c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8019d50:	2220      	movs	r2, #32
}
 8019d52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8019d56:	f002 bdf5 	b.w	801c944 <memset>
 8019d5a:	bf00      	nop
 8019d5c:	3b14f209 	.word	0x3b14f209
 8019d60:	43dc0000 	.word	0x43dc0000

08019d64 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
 8019d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d68:	ed2d 8b08 	vpush	{d8-d11}
    _tMBSaw* c = *osc;
 8019d6c:	6804      	ldr	r4, [r0, #0]
{
 8019d6e:	b082      	sub	sp, #8
 8019d70:	4605      	mov	r5, r0

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
 8019d72:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
 8019d76:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8019d7a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    z = c->_z;  /* low pass filter state */
 8019d7e:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    j = c->_j;  /* index into buffer _f */
 8019d82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8019d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d88:	f340 813d 	ble.w	801a006 <tMBSaw_tick+0x2a2>
 8019d8c:	69a3      	ldr	r3, [r4, #24]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	f340 80b1 	ble.w	8019ef6 <tMBSaw_tick+0x192>
 8019d94:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
 8019d98:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8019d9c:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
 8019da0:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 8019da4:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8019da8:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8019dac:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
 8019db0:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8019db4:	ee37 8a27 	vadd.f32	s16, s14, s15
 8019db8:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 8019dbc:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
 8019dc0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8019dc4:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8019dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dcc:	f280 8135 	bge.w	801a03a <tMBSaw_tick+0x2d6>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
 8019dd0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dd8:	f100 8193 	bmi.w	801a102 <tMBSaw_tick+0x39e>

    //construct the current output sample based on the state of the active BLEPs

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;
 8019ddc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8019de0:	1d33      	adds	r3, r6, #4
 8019de2:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
 8019de6:	ee37 7a48 	vsub.f32	s14, s14, s16
 8019dea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019dee:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8019df2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8019df6:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019dfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	f000 817a 	beq.w	801a0f8 <tMBSaw_tick+0x394>
 8019e04:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8019e08:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8019e0c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019e10:	2000      	movs	r0, #0
 8019e12:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8019e16:	4deb      	ldr	r5, [pc, #940]	; (801a1c4 <tMBSaw_tick+0x460>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8019e18:	ebae 0300 	sub.w	r3, lr, r0
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 8019e22:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e2a:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8019e2e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8019e32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8019e36:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8019e3a:	b289      	uxth	r1, r1
 8019e3c:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8019e40:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019e42:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8019e46:	fa1f f888 	uxth.w	r8, r8
 8019e4a:	fa1f f989 	uxth.w	r9, r9
 8019e4e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8019e52:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8019e56:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
 8019e5a:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8019e5e:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019e62:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8019e64:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
 8019e68:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 8019e6c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8019e70:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8019e74:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8019e78:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8019e7c:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019e7e:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8019e82:	edd9 6a01 	vldr	s13, [r9, #4]
 8019e86:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019e8a:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8019e8e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8019e92:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019e96:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019e9a:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8019e9e:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
 8019ea2:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8019ea4:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8019ea8:	f0c0 80a6 	bcc.w	8019ff8 <tMBSaw_tick+0x294>
		{
			c->numBLEPs--;
 8019eac:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019eb0:	3001      	adds	r0, #1
 8019eb2:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8019eb6:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019eb8:	4290      	cmp	r0, r2
			c->numBLEPs--;
 8019eba:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019ebe:	dbab      	blt.n	8019e18 <tMBSaw_tick+0xb4>
 8019ec0:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
 8019ec4:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 8019ec8:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8019eca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 8019ece:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8019ed2:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 8019ed6:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
 8019eda:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8019edc:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
 8019ee0:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8019ee4:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8019ee8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8019eec:	b002      	add	sp, #8
 8019eee:	ecbd 8b08 	vpop	{d8-d11}
 8019ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
 8019ef6:	edd4 8a05 	vldr	s17, [r4, #20]
 8019efa:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 8019efe:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 8019f02:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
 8019f06:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
 8019f0a:	eebd 9aca 	vcvt.s32.f32	s18, s20
 8019f0e:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8019f12:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8019f16:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8019f1a:	f040 815e 	bne.w	801a1da <tMBSaw_tick+0x476>
        if (sw > 0) p = eof_offset;
 8019f1e:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
 8019f22:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
 8019f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8019f2a:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
 8019f2e:	f340 80b2 	ble.w	801a096 <tMBSaw_tick+0x332>
 8019f32:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
 8019f36:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8019f3a:	eef4 aacb 	vcmpe.f32	s21, s22
 8019f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f42:	db2d      	blt.n	8019fa0 <tMBSaw_tick+0x23c>
            p_at_reset -= 1.0f;
 8019f44:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8019f48:	eddf ba9f 	vldr	s23, [pc, #636]	; 801a1c8 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8019f4c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019f50:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8019f54:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
 8019f58:	eea9 0a2b 	vfma.f32	s0, s18, s23
 8019f5c:	f003 f914 	bl	801d188 <lrintf>
	r -= (float)i;
 8019f60:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f64:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019f68:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f70:	3301      	adds	r3, #1
	r -= (float)i;
 8019f72:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019f7a:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f7e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019f82:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019f86:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8019f8a:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019f8e:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019f92:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8019f96:	3301      	adds	r3, #1
 8019f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019f9c:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
 8019fa0:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8019fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fa8:	f100 80da 	bmi.w	801a160 <tMBSaw_tick+0x3fc>
        if (sw > 0)
 8019fac:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8019fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fb4:	dc74      	bgt.n	801a0a0 <tMBSaw_tick+0x33c>
        else if (sw < 0)
 8019fb6:	f57f af11 	bpl.w	8019ddc <tMBSaw_tick+0x78>
	_tMBSaw* c = *osc;
 8019fba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019fbe:	ed9f 9a82 	vldr	s18, [pc, #520]	; 801a1c8 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8019fc2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8019fc6:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8019fc8:	ee28 9a89 	vmul.f32	s18, s17, s18
 8019fcc:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
 8019fd0:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
 8019fd4:	eea9 0a28 	vfma.f32	s0, s18, s17
 8019fd8:	f003 f8d6 	bl	801d188 <lrintf>
	r -= (float)i;
 8019fdc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019fe0:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019fe4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019fec:	3301      	adds	r3, #1
	r -= (float)i;
 8019fee:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019ff6:	e06b      	b.n	801a0d0 <tMBSaw_tick+0x36c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019ff8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019ffc:	3001      	adds	r0, #1
 8019ffe:	4283      	cmp	r3, r0
 801a000:	f73f af0a 	bgt.w	8019e18 <tMBSaw_tick+0xb4>
 801a004:	e75c      	b.n	8019ec0 <tMBSaw_tick+0x15c>
    sw = c->_w * c->syncdir;
 801a006:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
 801a00a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
 801a00e:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 801a012:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801a016:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
 801a01a:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
 801a01e:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 801a022:	ee77 7a88 	vadd.f32	s15, s15, s16
 801a026:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 801a02a:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
 801a02e:	eeb4 8ac9 	vcmpe.f32	s16, s18
 801a032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a036:	f6ff aecb 	blt.w	8019dd0 <tMBSaw_tick+0x6c>
        p -= 1.0f;
 801a03a:	eddf 7a63 	vldr	s15, [pc, #396]	; 801a1c8 <tMBSaw_tick+0x464>
 801a03e:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 801a042:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801a046:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801a048:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 801a04c:	eea8 0a88 	vfma.f32	s0, s17, s16
 801a050:	f003 f89a 	bl	801d188 <lrintf>
	r -= (float)i;
 801a054:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a058:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a05c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a064:	3301      	adds	r3, #1
	r -= (float)i;
 801a066:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a06a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a06e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a072:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a076:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a07a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a07e:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a082:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a086:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801a08a:	3301      	adds	r3, #1
 801a08c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a090:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 801a094:	e6a2      	b.n	8019ddc <tMBSaw_tick+0x78>
        else if (sw < 0) p = 1.0f - eof_offset;
 801a096:	f100 809b 	bmi.w	801a1d0 <tMBSaw_tick+0x46c>
    p += sw - (int)sw;
 801a09a:	eeb0 8a49 	vmov.f32	s16, s18
 801a09e:	e74a      	b.n	8019f36 <tMBSaw_tick+0x1d2>
	_tMBSaw* c = *osc;
 801a0a0:	eddf 7a49 	vldr	s15, [pc, #292]	; 801a1c8 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801a0a4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801a0a8:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801a0aa:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 801a0ae:	eea8 0a88 	vfma.f32	s0, s17, s16
 801a0b2:	f003 f869 	bl	801d188 <lrintf>
	r -= (float)i;
 801a0b6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a0ba:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a0be:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a0c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a0c6:	3301      	adds	r3, #1
	r -= (float)i;
 801a0c8:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a0cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a0d0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a0d4:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a0d8:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a0dc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a0e0:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a0e4:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a0e8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801a0ec:	3301      	adds	r3, #1
 801a0ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a0f2:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 801a0f6:	e671      	b.n	8019ddc <tMBSaw_tick+0x78>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a0f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a0fc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801a100:	e6e0      	b.n	8019ec4 <tMBSaw_tick+0x160>
	r = MINBLEP_PHASES * phase * inv_w;
 801a102:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
 801a106:	ed9f aa30 	vldr	s20, [pc, #192]	; 801a1c8 <tMBSaw_tick+0x464>
 801a10a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801a10e:	682d      	ldr	r5, [r5, #0]
        p += 1.0f;
 801a110:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 801a114:	eea8 0a8a 	vfma.f32	s0, s17, s20
 801a118:	f003 f836 	bl	801d188 <lrintf>
	r -= (float)i;
 801a11c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a120:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a124:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a12c:	4a27      	ldr	r2, [pc, #156]	; (801a1cc <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a12e:	3301      	adds	r3, #1
	r -= (float)i;
 801a130:	eed8 7a8a 	vfnms.f32	s15, s17, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a138:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a13c:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a140:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a144:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801a148:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a14c:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a150:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801a154:	3301      	adds	r3, #1
 801a156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a15a:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 801a15e:	e63d      	b.n	8019ddc <tMBSaw_tick+0x78>
            p_at_reset += 1.0f;
 801a160:	ed9f ba19 	vldr	s22, [pc, #100]	; 801a1c8 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801a164:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
 801a168:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tMBSaw* c = *osc;
 801a16c:	682f      	ldr	r7, [r5, #0]
 801a16e:	ee28 ba8b 	vmul.f32	s22, s17, s22
            p_at_reset += 1.0f;
 801a172:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
 801a176:	eeab 0a09 	vfma.f32	s0, s22, s18
 801a17a:	f003 f805 	bl	801d188 <lrintf>
	r -= (float)i;
 801a17e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a182:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a186:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a18a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a18e:	4a0f      	ldr	r2, [pc, #60]	; (801a1cc <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a190:	3301      	adds	r3, #1
	r -= (float)i;
 801a192:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a19a:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a19e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a1a2:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a1a6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 801a1aa:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a1ae:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a1b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801a1b6:	3301      	adds	r3, #1
 801a1b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a1bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
}
 801a1c0:	e6f4      	b.n	8019fac <tMBSaw_tick+0x248>
 801a1c2:	bf00      	nop
 801a1c4:	0802d168 	.word	0x0802d168
 801a1c8:	42800000 	.word	0x42800000
 801a1cc:	bf800000 	.word	0xbf800000
        else if (sw < 0) p = 1.0f - eof_offset;
 801a1d0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801a1d4:	ee38 8a47 	vsub.f32	s16, s16, s14
 801a1d8:	e6ad      	b.n	8019f36 <tMBSaw_tick+0x1d2>
    p += sw - (int)sw;
 801a1da:	eeb0 8a49 	vmov.f32	s16, s18
 801a1de:	e5ef      	b.n	8019dc0 <tMBSaw_tick+0x5c>

0801a1e0 <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
 801a1e0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
 801a1e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
 801a1e6:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
 801a1ea:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
 801a1ee:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801a1f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
 801a1f6:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
 801a1fa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 801a1fe:	4770      	bx	lr

0801a200 <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
 801a200:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801a202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801a206:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 801a20a:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 801a20e:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801a212:	eef1 7a67 	vneg.f32	s15, s15
 801a216:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801a21a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a222:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a226:	bfcc      	ite	gt
 801a228:	2201      	movgt	r2, #1
 801a22a:	2200      	movle	r2, #0
 801a22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a230:	f002 0201 	and.w	r2, r2, #1
 801a234:	bf88      	it	hi
 801a236:	2200      	movhi	r2, #0
 801a238:	b122      	cbz	r2, 801a244 <tMBSaw_sync+0x44>
 801a23a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801a23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a242:	da04      	bge.n	801a24e <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801a244:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801a25c <tMBSaw_sync+0x5c>
 801a248:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
 801a24c:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801a24e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a252:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a256:	ed83 7a04 	vstr	s14, [r3, #16]
}
 801a25a:	4770      	bx	lr
 801a25c:	00000000 	.word	0x00000000

0801a260 <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
 801a260:	b570      	push	{r4, r5, r6, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801a262:	698d      	ldr	r5, [r1, #24]
{
 801a264:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801a266:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 801a26a:	4629      	mov	r1, r5
 801a26c:	f7fc fc16 	bl	8016a9c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->gain = 1.0f;
 801a270:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801a274:	6030      	str	r0, [r6, #0]
    c->active = 1;
 801a276:	2201      	movs	r2, #1
    c->mempool = m;
 801a278:	6005      	str	r5, [r0, #0]
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801a27a:	4604      	mov	r4, r0
    LEAF* leaf = c->mempool->leaf;
 801a27c:	686b      	ldr	r3, [r5, #4]
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 801a27e:	2500      	movs	r5, #0
    c->gain = 1.0f;
 801a280:	f8c0 12f0 	str.w	r1, [r0, #752]	; 0x2f0
    c->active = 1;
 801a284:	f8c0 22f4 	str.w	r2, [r0, #756]	; 0x2f4
    c->waveform = 0.0f;
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801a288:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 801a28c:	ed93 7a01 	vldr	s14, [r3, #4]
    c->lastsyncin = 0.0f;
 801a290:	2300      	movs	r3, #0
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801a292:	ed9f 6a16 	vldr	s12, [pc, #88]	; 801a2ec <tMBSawPulse_init+0x8c>
    c->freq = 440.f;
 801a296:	eddf 7a16 	vldr	s15, [pc, #88]	; 801a2f0 <tMBSawPulse_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 801a29a:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->syncdir = 1.0f;
 801a29e:	6141      	str	r1, [r0, #20]
    c->freq = 440.f;
 801a2a0:	edc0 7a02 	vstr	s15, [r0, #8]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801a2a4:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->softsync = 0;
 801a2a8:	6185      	str	r5, [r0, #24]
    c->_j = 0;
 801a2aa:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801a2ac:	6282      	str	r2, [r0, #40]	; 0x28
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a2ae:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_x = 0.5f;  /* temporary output variable */
 801a2b2:	62c2      	str	r2, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
 801a2b4:	6685      	str	r5, [r0, #104]	; 0x68
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a2b6:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801a2b8:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a2bc:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 801a2be:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    c->lastsyncin = 0.0f;
 801a2c2:	60c3      	str	r3, [r0, #12]
    c->sync = 0.0f;
 801a2c4:	6103      	str	r3, [r0, #16]
    c->waveform = 0.0f;
 801a2c6:	61c3      	str	r3, [r0, #28]
    c->_z = 0.0f;
 801a2c8:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
 801a2ca:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a2cc:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801a2d0:	6343      	str	r3, [r0, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a2d2:	306e      	adds	r0, #110	; 0x6e
    c->_inv_w = 1.0f / c->_w;
 801a2d4:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a2d8:	f002 fb34 	bl	801c944 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801a2dc:	4629      	mov	r1, r5
 801a2de:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801a2e2:	2220      	movs	r2, #32
}
 801a2e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 801a2e8:	f002 bb2c 	b.w	801c944 <memset>
 801a2ec:	3b14f209 	.word	0x3b14f209
 801a2f0:	43dc0000 	.word	0x43dc0000

0801a2f4 <tMBSawPulse_tick>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tMBSawPulse_tick(tMBSawPulse* const osc)
#else
float tMBSawPulse_tick(tMBSawPulse* const osc)
#endif
{
 801a2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a2f8:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
 801a2fc:	6804      	ldr	r4, [r0, #0]
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    float shape = c->shape;
    float sawShape = 1.0f - c->shape;
 801a2fe:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
 801a302:	b084      	sub	sp, #16
 801a304:	4607      	mov	r7, r0
    sync = c->sync;
 801a306:	ed94 8a04 	vldr	s16, [r4, #16]
    float shape = c->shape;
 801a30a:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    x = c->_x;  /* temporary output variable */
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */

    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a30e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801a312:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
 801a316:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
 801a31a:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801a31e:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
 801a322:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
 801a32a:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 801a32e:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
 801a332:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
 801a336:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a338:	f340 80d8 	ble.w	801a4ec <tMBSawPulse_tick+0x1f8>
 801a33c:	69a3      	ldr	r3, [r4, #24]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	dd65      	ble.n	801a40e <tMBSawPulse_tick+0x11a>
 801a342:	edd4 6a05 	vldr	s13, [r4, #20]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 801a346:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a34a:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 801a34e:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a352:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 801a356:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 801a35a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 801a35e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a362:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a366:	ee37 8a48 	vsub.f32	s16, s14, s16


    }


    else if (!k)
 801a36a:	ee1c 3a90 	vmov	r3, s25
    {  /* normal operation for pulse, signal currently high */

		if (sw > 0)
 801a36e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
 801a372:	2b00      	cmp	r3, #0
 801a374:	f040 80d1 	bne.w	801a51a <tMBSawPulse_tick+0x226>
		if (sw > 0)
 801a378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a37c:	f340 8210 	ble.w	801a7a0 <tMBSawPulse_tick+0x4ac>
		{
			if (p >= b) {
 801a380:	eeb4 8acb 	vcmpe.f32	s16, s22
 801a384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a388:	f280 81cc 	bge.w	801a724 <tMBSawPulse_tick+0x430>
 801a38c:	eddf 5ae3 	vldr	s11, [pc, #908]	; 801a71c <tMBSawPulse_tick+0x428>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
				k = 1;
				x = -0.5f;
			}
			if (p >= 1.0f) {
 801a390:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a394:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a39c:	f2c0 80cb 	blt.w	801a536 <tMBSawPulse_tick+0x242>
    _tMBSawPulse* c = *osc;
 801a3a0:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 801a3a2:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 801a3a6:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	f000 81f3 	beq.w	801a796 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 801a3b0:	eddf 7adb 	vldr	s15, [pc, #876]	; 801a720 <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 801a3b4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);
				k = 0;
				x = 0.5f;
 801a3b8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801a3bc:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
 801a3c0:	eea9 0a08 	vfma.f32	s0, s18, s16
 801a3c4:	f002 fee0 	bl	801d188 <lrintf>
		r -= (float)i;
 801a3c8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a3cc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a3d0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801a3d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a3d8:	eddf 5ad0 	vldr	s11, [pc, #832]	; 801a71c <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a3dc:	3301      	adds	r3, #1
		r -= (float)i;
 801a3de:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a3e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a3e6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a3ea:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a3ee:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a3f2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a3f6:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a3fa:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a3fe:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801a402:	3301      	adds	r3, #1
 801a404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a408:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801a40c:	e093      	b.n	801a536 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 801a40e:	ed94 9a05 	vldr	s18, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 801a412:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 801a416:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 801a41a:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 801a41e:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 801a422:	ee37 7a87 	vadd.f32	s14, s15, s14
 801a426:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801a42a:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
 801a42e:	f040 8639 	bne.w	801b0a4 <tMBSawPulse_tick+0xdb0>
        if (sw > 0) p = eof_offset;
 801a432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a436:	4625      	mov	r5, r4
        float eof_offset = sync * sw;
 801a438:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
 801a43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801a440:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
 801a444:	f340 8117 	ble.w	801a676 <tMBSawPulse_tick+0x382>
		 if (!k)
 801a448:	ee1c 2a90 	vmov	r2, s25
 801a44c:	2a00      	cmp	r2, #0
 801a44e:	f040 8274 	bne.w	801a93a <tMBSawPulse_tick+0x646>
				 if (p_at_reset >= b)
 801a452:	eeb4 baed 	vcmpe.f32	s22, s27
 801a456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a45a:	f240 83c0 	bls.w	801abde <tMBSawPulse_tick+0x8ea>
    _tMBSawPulse* c = *osc;
 801a45e:	46a0      	mov	r8, r4
    if (c->active)
 801a460:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801a464:	ee1c 9a90 	vmov	r9, s25
				 if (p_at_reset >= 1.0f)
 801a468:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a46c:	eef4 dae8 	vcmpe.f32	s27, s17
 801a470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a474:	f280 82ad 	bge.w	801a9d2 <tMBSawPulse_tick+0x6de>
    if (c->active)
 801a478:	b35a      	cbz	r2, 801a4d2 <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
 801a47a:	eddf 8aa9 	vldr	s17, [pc, #676]	; 801a720 <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 801a47e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
 801a482:	ee6d da8d 	vmul.f32	s27, s27, s26
 801a486:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801a48a:	eea8 0a28 	vfma.f32	s0, s16, s17
 801a48e:	f002 fe7b 	bl	801d188 <lrintf>
		r -= (float)i;
 801a492:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a496:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a49a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801a49e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a4a2:	3301      	adds	r3, #1
		r -= (float)i;
 801a4a4:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a4a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a4ac:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a4b0:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a4b4:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a4b8:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801a4bc:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a4c0:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a4c4:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 801a4c8:	3301      	adds	r3, #1
 801a4ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a4ce:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
            if (k) {
 801a4d2:	f1b9 0f00 	cmp.w	r9, #0
 801a4d6:	f040 8419 	bne.w	801ad0c <tMBSawPulse_tick+0xa18>
			if (p >= b) {
 801a4da:	eeb4 bac8 	vcmpe.f32	s22, s16
 801a4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4e2:	f240 80df 	bls.w	801a6a4 <tMBSawPulse_tick+0x3b0>
		 if (!k)
 801a4e6:	eddf 5a8d 	vldr	s11, [pc, #564]	; 801a71c <tMBSawPulse_tick+0x428>
 801a4ea:	e024      	b.n	801a536 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 801a4ec:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
 801a4f0:	ee1c 3a90 	vmov	r3, s25
    float inv_sw = c->_inv_w * c->syncdir;
 801a4f4:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 801a4f8:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 801a4fc:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 801a500:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 801a504:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
 801a508:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 801a50c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a510:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
 801a514:	2b00      	cmp	r3, #0
 801a516:	f43f af2f 	beq.w	801a378 <tMBSawPulse_tick+0x84>
			}
		}

	} else {  /* normal operation, signal currently low */

		if (sw > 0)
 801a51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a51e:	f340 81bd 	ble.w	801a89c <tMBSawPulse_tick+0x5a8>
		{
			if (p >= 1.0f) {
 801a522:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801a526:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a52e:	f280 80ac 	bge.w	801a68a <tMBSawPulse_tick+0x396>
    c->_w = w;
    c->_b = b;
    c->_x = x;
    c->_z = z;
    c->_j = j;
    c->_k = k;
 801a532:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 801a536:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801a53a:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
 801a53c:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801a540:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 801a544:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
 801a548:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a54c:	eea6 7a8d 	vfma.f32	s14, s13, s26
 801a550:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801a554:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 801a558:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a55c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801a560:	2b00      	cmp	r3, #0
 801a562:	f000 81e5 	beq.w	801a930 <tMBSawPulse_tick+0x63c>
 801a566:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801a56a:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a56e:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a572:	2000      	movs	r0, #0
 801a574:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801a578:	4d67      	ldr	r5, [pc, #412]	; (801a718 <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801a57a:	ebae 0300 	sub.w	r3, lr, r0
 801a57e:	b29b      	uxth	r3, r3
 801a580:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 801a584:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801a588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a58c:	f8ad 300e 	strh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a590:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801a594:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801a598:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 801a59c:	b289      	uxth	r1, r1
 801a59e:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 801a5a2:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a5a4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a5a8:	fa1f f888 	uxth.w	r8, r8
 801a5ac:	fa1f f989 	uxth.w	r9, r9
 801a5b0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801a5b4:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801a5b8:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
 801a5bc:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 801a5c0:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a5c4:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a5c6:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
 801a5ca:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 801a5ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a5d2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a5d6:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 801a5da:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a5de:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a5e0:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a5e4:	edd9 6a01 	vldr	s13, [r9, #4]
 801a5e8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a5ec:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a5f0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a5f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a5f8:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a5fc:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a600:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
 801a604:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a606:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a60a:	d32e      	bcc.n	801a66a <tMBSawPulse_tick+0x376>
			c->numBLEPs--;
 801a60c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a610:	3001      	adds	r0, #1
 801a612:	f89d 200d 	ldrb.w	r2, [sp, #13]
			c->numBLEPs--;
 801a616:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a618:	4282      	cmp	r2, r0
			c->numBLEPs--;
 801a61a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a61e:	dcac      	bgt.n	801a57a <tMBSawPulse_tick+0x286>
 801a620:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a624:	ee37 7a4a 	vsub.f32	s14, s14, s20

    return -c->out * c->gain;
 801a628:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a62c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 801a630:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a632:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
 801a636:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
 801a63a:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 801a63e:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
 801a642:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a646:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 801a64a:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
 801a64e:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
 801a650:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
 801a654:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
 801a658:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 801a65c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 801a660:	b004      	add	sp, #16
 801a662:	ecbd 8b0e 	vpop	{d8-d14}
 801a666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a66a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801a66e:	3001      	adds	r0, #1
 801a670:	4283      	cmp	r3, r0
 801a672:	dc82      	bgt.n	801a57a <tMBSawPulse_tick+0x286>
 801a674:	e7d4      	b.n	801a620 <tMBSawPulse_tick+0x32c>
        else if (sw < 0) p = 1.0f - eof_offset;
 801a676:	f100 8229 	bmi.w	801aacc <tMBSawPulse_tick+0x7d8>
		 if (!k)
 801a67a:	ee1c 2a90 	vmov	r2, s25
 801a67e:	2a00      	cmp	r2, #0
 801a680:	f040 8197 	bne.w	801a9b2 <tMBSawPulse_tick+0x6be>
    p += sw - (int)sw;
 801a684:	eeb0 8a68 	vmov.f32	s16, s17
 801a688:	e72d      	b.n	801a4e6 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 801a68a:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 801a68c:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 801a690:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801a694:	2b00      	cmp	r3, #0
 801a696:	f040 8161 	bne.w	801a95c <tMBSawPulse_tick+0x668>
			if (!k && p >= b) {
 801a69a:	eeb4 bac8 	vcmpe.f32	s22, s16
 801a69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6a2:	d878      	bhi.n	801a796 <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
 801a6a4:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801a6a6:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	f000 8151 	beq.w	801a952 <tMBSawPulse_tick+0x65e>
		r = MINBLEP_PHASES * phase * inv_w;
 801a6b0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801a720 <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801a6b4:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801a6b8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a6bc:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = -0.5f;
 801a6c0:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801a6c4:	eea8 0a89 	vfma.f32	s0, s17, s18
 801a6c8:	f002 fd5e 	bl	801d188 <lrintf>
		r -= (float)i;
 801a6cc:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a6d0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a6d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801a6d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a6dc:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801a6de:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a6e2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a6e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801a6ea:	ee98 7a89 	vfnms.f32	s14, s17, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a6ee:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a6f2:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a6f6:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a6fa:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a6fe:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a702:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a706:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801a70a:	3301      	adds	r3, #1
 801a70c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a710:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801a714:	e70f      	b.n	801a536 <tMBSawPulse_tick+0x242>
 801a716:	bf00      	nop
 801a718:	0802d168 	.word	0x0802d168
 801a71c:	00000000 	.word	0x00000000
 801a720:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
 801a724:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801a726:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	f000 814c 	beq.w	801a9c8 <tMBSawPulse_tick+0x6d4>
		r = MINBLEP_PHASES * phase * inv_w;
 801a730:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 801a720 <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801a734:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801a738:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a73c:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
 801a740:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801a744:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801a748:	f002 fd1e 	bl	801d188 <lrintf>
		r -= (float)i;
 801a74c:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a750:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a754:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801a758:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a75c:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801a75e:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a762:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801a76a:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a76e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a772:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a776:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a77a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a77e:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a782:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a786:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801a78a:	3301      	adds	r3, #1
 801a78c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a790:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801a794:	e5fc      	b.n	801a390 <tMBSawPulse_tick+0x9c>
				x = 0.5f;
 801a796:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
 801a79a:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 801a71c <tMBSawPulse_tick+0x428>
 801a79e:	e6ca      	b.n	801a536 <tMBSawPulse_tick+0x242>
			if (p < 0.0f) {
 801a7a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7a8:	f57f ae9d 	bpl.w	801a4e6 <tMBSawPulse_tick+0x1f2>
 801a7ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7b4:	f57f ae97 	bpl.w	801a4e6 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 801a7b8:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 801a7ba:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 801a7be:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 801a7c2:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
 801a7c6:	b353      	cbz	r3, 801a81e <tMBSawPulse_tick+0x52a>
		r = MINBLEP_PHASES * phase * inv_w;
 801a7c8:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
 801a7cc:	ed5f 9a2c 	vldr	s19, [pc, #-176]	; 801a720 <tMBSawPulse_tick+0x42c>
 801a7d0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a7d4:	eea8 0a29 	vfma.f32	s0, s16, s19
 801a7d8:	f002 fcd6 	bl	801d188 <lrintf>
		r -= (float)i;
 801a7dc:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a7e0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a7e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801a7e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a7ec:	4ab2      	ldr	r2, [pc, #712]	; (801aab8 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a7ee:	3301      	adds	r3, #1
		r -= (float)i;
 801a7f0:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a7f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a7f8:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a7fc:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a800:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a804:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801a808:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a80c:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a810:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801a814:	3301      	adds	r3, #1
 801a816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a81a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
 801a81e:	eeb4 bae8 	vcmpe.f32	s22, s17
 801a822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a826:	f340 8446 	ble.w	801b0b6 <tMBSawPulse_tick+0xdc2>
    _tMBSawPulse* c = *osc;
 801a82a:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801a82c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801a830:	2b00      	cmp	r3, #0
 801a832:	f000 8327 	beq.w	801ae84 <tMBSawPulse_tick+0xb90>
		r = MINBLEP_PHASES * phase * inv_w;
 801a836:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801aac8 <tMBSawPulse_tick+0x7d4>
 801a83a:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 801a83e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a842:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 801a846:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a84a:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
 801a84e:	eea9 0a29 	vfma.f32	s0, s18, s19
 801a852:	f002 fc99 	bl	801d188 <lrintf>
		r -= (float)i;
 801a856:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a85a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a85e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801a862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a866:	eddf 5a97 	vldr	s11, [pc, #604]	; 801aac4 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a86a:	3301      	adds	r3, #1
		r -= (float)i;
 801a86c:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a874:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a878:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a87c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a880:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a884:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a888:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a88c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801a890:	3301      	adds	r3, #1
 801a892:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a896:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801a89a:	e64c      	b.n	801a536 <tMBSawPulse_tick+0x242>
		else if (sw < 0)
 801a89c:	f57f ae49 	bpl.w	801a532 <tMBSawPulse_tick+0x23e>
			if (p < b) {
 801a8a0:	eeb4 8acb 	vcmpe.f32	s16, s22
 801a8a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8a8:	f100 80cd 	bmi.w	801aa46 <tMBSawPulse_tick+0x752>
			if (p < 0.0f) {
 801a8ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b4:	f57f ae3d 	bpl.w	801a532 <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 801a8b8:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 801a8ba:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 801a8be:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 801a8c2:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	f000 8302 	beq.w	801aed0 <tMBSawPulse_tick+0xbdc>
		i = lrintf(r - 0.5f);
 801a8cc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801a8d0:	eddf 9a7d 	vldr	s19, [pc, #500]	; 801aac8 <tMBSawPulse_tick+0x7d4>
		r = MINBLEP_PHASES * phase * inv_w;
 801a8d4:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
 801a8d8:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
 801a8dc:	eeb0 0a6a 	vmov.f32	s0, s21
 801a8e0:	eea9 0a29 	vfma.f32	s0, s18, s19
 801a8e4:	f002 fc50 	bl	801d188 <lrintf>
		r -= (float)i;
 801a8e8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a8ec:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a8f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801a8f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a8f8:	4a6f      	ldr	r2, [pc, #444]	; (801aab8 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a8fa:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a8fc:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801a904:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a908:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a90c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a910:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a914:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801a918:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a91c:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a920:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801a924:	3301      	adds	r3, #1
 801a926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a92a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801a92e:	e602      	b.n	801a536 <tMBSawPulse_tick+0x242>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801a930:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a934:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 801a938:	e674      	b.n	801a624 <tMBSawPulse_tick+0x330>
				 if (p_at_reset >= 1.0f)
 801a93a:	eef4 dae9 	vcmpe.f32	s27, s19
 801a93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a942:	f280 8159 	bge.w	801abf8 <tMBSawPulse_tick+0x904>
    _tMBSawPulse* c = *osc;
 801a946:	46a0      	mov	r8, r4
    if (c->active)
 801a948:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 801a94c:	ee1c 9a90 	vmov	r9, s25
 801a950:	e592      	b.n	801a478 <tMBSawPulse_tick+0x184>
 801a952:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801a956:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801a95a:	e5ec      	b.n	801a536 <tMBSawPulse_tick+0x242>
		r = MINBLEP_PHASES * phase * inv_w;
 801a95c:	eddf 9a5a 	vldr	s19, [pc, #360]	; 801aac8 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801a960:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a964:	ee69 9a29 	vmul.f32	s19, s18, s19
 801a968:	eea9 0a88 	vfma.f32	s0, s19, s16
 801a96c:	f002 fc0c 	bl	801d188 <lrintf>
		r -= (float)i;
 801a970:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a974:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a978:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801a97c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a980:	3301      	adds	r3, #1
		r -= (float)i;
 801a982:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a98a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a98e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801a992:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a996:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801a99a:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a99e:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a9a2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801a9a6:	3301      	adds	r3, #1
 801a9a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a9ac:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801a9b0:	e673      	b.n	801a69a <tMBSawPulse_tick+0x3a6>
			 else if (sw < 0)
 801a9b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9ba:	f100 815b 	bmi.w	801ac74 <tMBSawPulse_tick+0x980>
    c->_k = k;
 801a9be:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
 801a9c2:	eeb0 8a68 	vmov.f32	s16, s17
 801a9c6:	e5b6      	b.n	801a536 <tMBSawPulse_tick+0x242>
 801a9c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801a9cc:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801a9d0:	e4de      	b.n	801a390 <tMBSawPulse_tick+0x9c>
					 p_at_reset -= 1.0f;
 801a9d2:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
 801a9d6:	2a00      	cmp	r2, #0
 801a9d8:	f000 810b 	beq.w	801abf2 <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 801a9dc:	eddf 9a3a 	vldr	s19, [pc, #232]	; 801aac8 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801a9e0:	ee78 ca2d 	vadd.f32	s25, s16, s27
		i = lrintf(r - 0.5f);
 801a9e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 801a9e8:	f04f 0900 	mov.w	r9, #0
 801a9ec:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = 0.5f;
 801a9f0:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801a9f4:	eeac 0aa9 	vfma.f32	s0, s25, s19
 801a9f8:	f002 fbc6 	bl	801d188 <lrintf>
		r -= (float)i;
 801a9fc:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa00:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801aa04:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801aa08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa0c:	3301      	adds	r3, #1
		r -= (float)i;
 801aa0e:	eedc 7aa9 	vfnms.f32	s15, s25, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801aa16:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa1a:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801aa1e:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801aa22:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801aa26:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801aa2a:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801aa2e:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 801aa32:	3301      	adds	r3, #1
 801aa34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aa38:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801aa3c:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 801aa40:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 801aa44:	e518      	b.n	801a478 <tMBSawPulse_tick+0x184>
    _tMBSawPulse* c = *osc;
 801aa46:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801aa48:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 801aa4c:	ee1c 3a90 	vmov	r3, s25
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	f000 820d 	beq.w	801ae70 <tMBSawPulse_tick+0xb7c>
		r = MINBLEP_PHASES * phase * inv_w;
 801aa56:	eddf 9a1c 	vldr	s19, [pc, #112]	; 801aac8 <tMBSawPulse_tick+0x7d4>
 801aa5a:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801aa5e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
 801aa62:	eddf ca16 	vldr	s25, [pc, #88]	; 801aabc <tMBSawPulse_tick+0x7c8>
 801aa66:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
 801aa6a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801aa6e:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801aa72:	f002 fb89 	bl	801d188 <lrintf>
		r -= (float)i;
 801aa76:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa7a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801aa7e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801aa82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa86:	3301      	adds	r3, #1
		r -= (float)i;
 801aa88:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801aa90:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aa94:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801aa98:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801aa9c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801aaa0:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801aaa4:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801aaa8:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801aaac:	3301      	adds	r3, #1
 801aaae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aab2:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801aab6:	e6f9      	b.n	801a8ac <tMBSawPulse_tick+0x5b8>
 801aab8:	bf800000 	.word	0xbf800000
 801aabc:	00000000 	.word	0x00000000
 801aac0:	00000001 	.word	0x00000001
 801aac4:	00000000 	.word	0x00000000
 801aac8:	42800000 	.word	0x42800000
		 if (!k)
 801aacc:	ee1c 2a90 	vmov	r2, s25
        else if (sw < 0) p = 1.0f - eof_offset;
 801aad0:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
 801aad4:	2a00      	cmp	r2, #0
 801aad6:	f040 80cf 	bne.w	801ac78 <tMBSawPulse_tick+0x984>
				 if (p_at_reset < 0.0f)
 801aada:	eef5 da40 	vcmp.f32	s27, #0.0
 801aade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aae2:	d571      	bpl.n	801abc8 <tMBSawPulse_tick+0x8d4>
    if (c->active)
 801aae4:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
 801aae8:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	f040 8231 	bne.w	801af54 <tMBSawPulse_tick+0xc60>
				 if (k && p_at_reset < b)
 801aaf2:	eeb4 baed 	vcmpe.f32	s22, s27
 801aaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aafa:	f340 82d7 	ble.w	801b0ac <tMBSawPulse_tick+0xdb8>
        else if (sw < 0) p = 1.0f - eof_offset;
 801aafe:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 801ab02:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	f000 81d6 	beq.w	801aeb8 <tMBSawPulse_tick+0xbc4>
		r = MINBLEP_PHASES * phase * inv_w;
 801ab0c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801ab10:	ed5f 9a13 	vldr	s19, [pc, #-76]	; 801aac8 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801ab14:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
 801ab18:	ed5f ca17 	vldr	s25, [pc, #-92]	; 801aac0 <tMBSawPulse_tick+0x7cc>
 801ab1c:	ee69 9a29 	vmul.f32	s19, s18, s19
 801ab20:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
 801ab24:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801ab28:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801ab2c:	f002 fb2c 	bl	801d188 <lrintf>
		r -= (float)i;
 801ab30:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab34:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ab38:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801ab3c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab40:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
 801ab42:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801ab4a:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ab4e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab52:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ab56:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ab5a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801ab5e:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ab62:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ab66:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801ab6a:	3301      	adds	r3, #1
 801ab6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab70:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
 801ab74:	eeb4 bace 	vcmpe.f32	s22, s28
 801ab78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab7c:	f77f acd9 	ble.w	801a532 <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 801ab80:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801ab82:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	f43f ae05 	beq.w	801a796 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 801ab8c:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 801aac8 <tMBSawPulse_tick+0x7d4>
 801ab90:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
 801ab94:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801ab98:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 801ab9c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801aba0:	eea9 0a0e 	vfma.f32	s0, s18, s28
 801aba4:	f002 faf0 	bl	801d188 <lrintf>
		r -= (float)i;
 801aba8:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801abac:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801abb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801abb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801abb8:	ed5f 5a3e 	vldr	s11, [pc, #-248]	; 801aac4 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801abbc:	3301      	adds	r3, #1
		r -= (float)i;
 801abbe:	eed9 7a0e 	vfnms.f32	s15, s18, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801abc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801abc6:	e655      	b.n	801a874 <tMBSawPulse_tick+0x580>
		else if (sw < 0)
 801abc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801abcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abd0:	f100 814b 	bmi.w	801ae6a <tMBSawPulse_tick+0xb76>
        else if (sw < 0) p = 1.0f - eof_offset;
 801abd4:	eeb0 8a4e 	vmov.f32	s16, s28
 801abd8:	ed5f 5a46 	vldr	s11, [pc, #-280]	; 801aac4 <tMBSawPulse_tick+0x7d0>
 801abdc:	e4ab      	b.n	801a536 <tMBSawPulse_tick+0x242>
    if (c->active)
 801abde:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	f040 8109 	bne.w	801adfa <tMBSawPulse_tick+0xb06>
				 if (p_at_reset >= 1.0f)
 801abe8:	eef4 dae9 	vcmpe.f32	s27, s19
 801abec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abf0:	db0f      	blt.n	801ac12 <tMBSawPulse_tick+0x91e>
				x = 0.5f;
 801abf2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801abf6:	e470      	b.n	801a4da <tMBSawPulse_tick+0x1e6>
    if (c->active)
 801abf8:	f8d4 92f4 	ldr.w	r9, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
 801abfc:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
 801ac00:	f1b9 0f00 	cmp.w	r9, #0
 801ac04:	f040 8084 	bne.w	801ad10 <tMBSawPulse_tick+0xa1c>
				 if (!k && p_at_reset >= b)
 801ac08:	eeb4 baed 	vcmpe.f32	s22, s27
 801ac0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac10:	d8ef      	bhi.n	801abf2 <tMBSawPulse_tick+0x8fe>
    if (c->active)
 801ac12:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d0eb      	beq.n	801abf2 <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 801ac1a:	ed5f 8a55 	vldr	s17, [pc, #-340]	; 801aac8 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801ac1e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
 801ac22:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801ac26:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801ac2a:	eea8 0a28 	vfma.f32	s0, s16, s17
 801ac2e:	f002 faab 	bl	801d188 <lrintf>
		r -= (float)i;
 801ac32:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac36:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ac3a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801ac3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac42:	3301      	adds	r3, #1
		r -= (float)i;
 801ac44:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ac4c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac50:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ac54:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ac58:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801ac5c:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ac60:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ac64:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801ac68:	3301      	adds	r3, #1
 801ac6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ac6e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801ac72:	e432      	b.n	801a4da <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
 801ac74:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
 801ac78:	eeb4 baed 	vcmpe.f32	s22, s27
 801ac7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac80:	f300 8108 	bgt.w	801ae94 <tMBSawPulse_tick+0xba0>
				 if (p_at_reset < 0.0f)
 801ac84:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
 801ac88:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
 801ac8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac90:	f100 8126 	bmi.w	801aee0 <tMBSawPulse_tick+0xbec>
        else if (sw < 0) p = 1.0f - eof_offset;
 801ac94:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 801ac98:	b38b      	cbz	r3, 801acfe <tMBSawPulse_tick+0xa0a>
		r = MINBLEP_PHASES * phase * inv_w;
 801ac9a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801ac9e:	ed5f 9a76 	vldr	s19, [pc, #-472]	; 801aac8 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801aca2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801aca6:	ee69 9a29 	vmul.f32	s19, s18, s19
 801acaa:	ee7e ea68 	vsub.f32	s29, s28, s17
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 801acae:	ee7c 8a68 	vsub.f32	s17, s24, s17
		i = lrintf(r - 0.5f);
 801acb2:	eea9 0aae 	vfma.f32	s0, s19, s29
 801acb6:	f002 fa67 	bl	801d188 <lrintf>
		r -= (float)i;
 801acba:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801acbe:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801acc2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801acc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801acca:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 801accc:	ee68 daad 	vmul.f32	s27, s17, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801acd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801acd4:	eed9 7aae 	vfnms.f32	s15, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
 801acd8:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801acdc:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ace0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ace4:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801ace8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801acec:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801acf0:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801acf4:	3301      	adds	r3, #1
 801acf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801acfa:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
 801acfe:	ee1c 3a90 	vmov	r3, s25
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	f47f af36 	bne.w	801ab74 <tMBSawPulse_tick+0x880>
 801ad08:	683d      	ldr	r5, [r7, #0]
 801ad0a:	e6fa      	b.n	801ab02 <tMBSawPulse_tick+0x80e>
 801ad0c:	683d      	ldr	r5, [r7, #0]
 801ad0e:	e780      	b.n	801ac12 <tMBSawPulse_tick+0x91e>
		i = lrintf(r - 0.5f);
 801ad10:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 801ad14:	ed5f 8a94 	vldr	s17, [pc, #-592]	; 801aac8 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801ad18:	ee78 aa2d 	vadd.f32	s21, s16, s27
 801ad1c:	9301      	str	r3, [sp, #4]
 801ad1e:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801ad22:	eeb0 0a6c 	vmov.f32	s0, s25
 801ad26:	eeaa 0aa8 	vfma.f32	s0, s21, s17
 801ad2a:	f002 fa2d 	bl	801d188 <lrintf>
		r -= (float)i;
 801ad2e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad32:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ad36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801ad3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 if (!k && p_at_reset >= b)
 801ad3e:	9b01      	ldr	r3, [sp, #4]
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad40:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
 801ad42:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		r -= (float)i;
 801ad4a:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
 801ad4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ad52:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad56:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ad5a:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ad5e:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 801ad62:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ad66:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ad6a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 801ad6e:	f102 0201 	add.w	r2, r2, #1
 801ad72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801ad76:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801ad7a:	f8d7 8000 	ldr.w	r8, [r7]
 801ad7e:	4645      	mov	r5, r8
    if (c->active)
 801ad80:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
 801ad84:	f200 8175 	bhi.w	801b072 <tMBSawPulse_tick+0xd7e>
    if (c->active)
 801ad88:	2a00      	cmp	r2, #0
 801ad8a:	f43f af42 	beq.w	801ac12 <tMBSawPulse_tick+0x91e>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801ad8e:	ee78 9a4b 	vsub.f32	s19, s16, s22
					 k = 1;
 801ad92:	f04f 0901 	mov.w	r9, #1
		i = lrintf(r - 0.5f);
 801ad96:	eeb0 0a6c 	vmov.f32	s0, s25
					 x = -0.5f;
 801ad9a:	eef0 aa6c 	vmov.f32	s21, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801ad9e:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
 801ada2:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801ada6:	f002 f9ef 	bl	801d188 <lrintf>
		r -= (float)i;
 801adaa:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801adae:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801adb2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801adb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801adba:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801adbc:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801adc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801adc4:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801adc8:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801adcc:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801add0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801add4:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801add8:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801addc:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ade0:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 801ade4:	444b      	add	r3, r9
 801ade6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801adea:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801adee:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 801adf2:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 801adf6:	f7ff bb3f 	b.w	801a478 <tMBSawPulse_tick+0x184>
		r = MINBLEP_PHASES * phase * inv_w;
 801adfa:	ed5f 9acd 	vldr	s19, [pc, #-820]	; 801aac8 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801adfe:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
 801ae02:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 801ae06:	f04f 0901 	mov.w	r9, #1
 801ae0a:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
 801ae0e:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801ae12:	eea8 0aa9 	vfma.f32	s0, s17, s19
 801ae16:	f002 f9b7 	bl	801d188 <lrintf>
		r -= (float)i;
 801ae1a:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ae1e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ae22:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801ae26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ae2a:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801ae2c:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ae30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801ae34:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ae38:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ae3c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801ae40:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ae44:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801ae48:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ae4c:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ae50:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801ae54:	444b      	add	r3, r9
 801ae56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ae5a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801ae5e:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 801ae62:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 801ae66:	f7ff baff 	b.w	801a468 <tMBSawPulse_tick+0x174>
 801ae6a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801ae6e:	e711      	b.n	801ac94 <tMBSawPulse_tick+0x9a0>
			if (p < 0.0f) {
 801ae70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ae74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae78:	f100 8100 	bmi.w	801b07c <tMBSawPulse_tick+0xd88>
				x = 0.5f;
 801ae7c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801ae80:	f7ff bb57 	b.w	801a532 <tMBSawPulse_tick+0x23e>
				x = 0.5f;
 801ae84:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801ae88:	eddf 5a8f 	vldr	s11, [pc, #572]	; 801b0c8 <tMBSawPulse_tick+0xdd4>
 801ae8c:	eeb0 8a68 	vmov.f32	s16, s17
 801ae90:	f7ff bb51 	b.w	801a536 <tMBSawPulse_tick+0x242>
    if (c->active)
 801ae94:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 801ae98:	ee1c 2a90 	vmov	r2, s25
 801ae9c:	2a00      	cmp	r2, #0
 801ae9e:	f040 80b6 	bne.w	801b00e <tMBSawPulse_tick+0xd1a>
				 if (p_at_reset < 0.0f)
 801aea2:	eef5 dac0 	vcmpe.f32	s27, #0.0
 801aea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeaa:	f100 80ef 	bmi.w	801b08c <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
 801aeae:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
 801aeb2:	eeb0 8a4e 	vmov.f32	s16, s28
 801aeb6:	e722      	b.n	801acfe <tMBSawPulse_tick+0xa0a>
			if (p < b) {
 801aeb8:	eeb4 bace 	vcmpe.f32	s22, s28
 801aebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aec0:	f73f ac69 	bgt.w	801a796 <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
 801aec4:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
 801aec8:	eddf ca80 	vldr	s25, [pc, #512]	; 801b0cc <tMBSawPulse_tick+0xdd8>
 801aecc:	f7ff bb31 	b.w	801a532 <tMBSawPulse_tick+0x23e>
				x = -0.5f;
 801aed0:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 801aed4:	eeb0 8a67 	vmov.f32	s16, s15
 801aed8:	eef0 5a68 	vmov.f32	s11, s17
 801aedc:	f7ff bb2b 	b.w	801a536 <tMBSawPulse_tick+0x242>
					 p_at_reset += 1.0f;
 801aee0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801aee4:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	f000 80cf 	beq.w	801b08c <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
 801aeee:	ed9f 8a78 	vldr	s16, [pc, #480]	; 801b0d0 <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 801aef2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 801aef6:	eddf ca75 	vldr	s25, [pc, #468]	; 801b0cc <tMBSawPulse_tick+0xdd8>
 801aefa:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
 801aefe:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801af02:	eea8 0a28 	vfma.f32	s0, s16, s17
 801af06:	f002 f93f 	bl	801d188 <lrintf>
		r -= (float)i;
 801af0a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af0e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801af12:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801af16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801af1a:	4a6e      	ldr	r2, [pc, #440]	; (801b0d4 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af1c:	3301      	adds	r3, #1
		r -= (float)i;
 801af1e:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801af26:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af2a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801af2e:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801af32:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801af36:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801af3a:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801af3e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801af42:	3301      	adds	r3, #1
 801af44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801af48:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801af4c:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801af4e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801af52:	e69f      	b.n	801ac94 <tMBSawPulse_tick+0x9a0>
		r = MINBLEP_PHASES * phase * inv_w;
 801af54:	eddf 9a5e 	vldr	s19, [pc, #376]	; 801b0d0 <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 801af58:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801af5c:	ee69 9a29 	vmul.f32	s19, s18, s19
 801af60:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801af64:	f002 f910 	bl	801d188 <lrintf>
		r -= (float)i;
 801af68:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af6c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801af70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801af74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801af78:	4a56      	ldr	r2, [pc, #344]	; (801b0d4 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af7a:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
 801af7c:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801af84:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
 801af88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 801af8c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af90:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801af94:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801af98:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801af9c:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801afa0:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801afa4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801afa8:	f103 0301 	add.w	r3, r3, #1
 801afac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801afb0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801afb4:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801afb6:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
 801afba:	dd6e      	ble.n	801b09a <tMBSawPulse_tick+0xda6>
    if (c->active)
 801afbc:	2b00      	cmp	r3, #0
 801afbe:	f43f ad9e 	beq.w	801aafe <tMBSawPulse_tick+0x80a>
		r = MINBLEP_PHASES * phase * inv_w;
 801afc2:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
 801afc6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
 801afca:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801afce:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
 801afd2:	eea8 0a29 	vfma.f32	s0, s16, s19
 801afd6:	f002 f8d7 	bl	801d188 <lrintf>
		r -= (float)i;
 801afda:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801afde:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801afe2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801afe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801afea:	3301      	adds	r3, #1
		r -= (float)i;
 801afec:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801aff4:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aff8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801affc:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b000:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b004:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b008:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b00c:	e797      	b.n	801af3e <tMBSawPulse_tick+0xc4a>
		r = MINBLEP_PHASES * phase * inv_w;
 801b00e:	ed9f 8a30 	vldr	s16, [pc, #192]	; 801b0d0 <tMBSawPulse_tick+0xddc>
 801b012:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 801b016:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 801b01a:	ee0c 3a90 	vmov	s25, r3
 801b01e:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
 801b022:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801b026:	eea9 0a88 	vfma.f32	s0, s19, s16
 801b02a:	f002 f8ad 	bl	801d188 <lrintf>
		r -= (float)i;
 801b02e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b032:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b036:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b03a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b03e:	3301      	adds	r3, #1
		r -= (float)i;
 801b040:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b048:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b04c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b050:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b054:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b058:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b05c:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b060:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b064:	3301      	adds	r3, #1
 801b066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b06a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b06e:	683d      	ldr	r5, [r7, #0]
 801b070:	e608      	b.n	801ac84 <tMBSawPulse_tick+0x990>
 801b072:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801b076:	4699      	mov	r9, r3
 801b078:	f7ff b9fe 	b.w	801a478 <tMBSawPulse_tick+0x184>
				p += 1.0f;
 801b07c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801b080:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 801b084:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
 801b088:	f7ff ba55 	b.w	801a536 <tMBSawPulse_tick+0x242>
        else if (sw < 0) p = 1.0f - eof_offset;
 801b08c:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b090:	eddf ca0e 	vldr	s25, [pc, #56]	; 801b0cc <tMBSawPulse_tick+0xdd8>
 801b094:	eeb0 8a4e 	vmov.f32	s16, s28
 801b098:	e56c      	b.n	801ab74 <tMBSawPulse_tick+0x880>
 801b09a:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b09e:	eddf ca0b 	vldr	s25, [pc, #44]	; 801b0cc <tMBSawPulse_tick+0xdd8>
		else if (sw < 0)
 801b0a2:	e5f7      	b.n	801ac94 <tMBSawPulse_tick+0x9a0>
    p += sw - (int)sw;
 801b0a4:	eeb0 8a68 	vmov.f32	s16, s17
 801b0a8:	f7ff b95f 	b.w	801a36a <tMBSawPulse_tick+0x76>
				 if (k && p_at_reset < b)
 801b0ac:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b0b0:	eddf ca06 	vldr	s25, [pc, #24]	; 801b0cc <tMBSawPulse_tick+0xdd8>
 801b0b4:	e6fd      	b.n	801aeb2 <tMBSawPulse_tick+0xbbe>
 801b0b6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801b0ba:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b0be:	eeb0 8a68 	vmov.f32	s16, s17
 801b0c2:	f7ff ba38 	b.w	801a536 <tMBSawPulse_tick+0x242>
 801b0c6:	bf00      	nop
 801b0c8:	00000000 	.word	0x00000000
 801b0cc:	00000001 	.word	0x00000001
 801b0d0:	42800000 	.word	0x42800000
 801b0d4:	bf800000 	.word	0xbf800000

0801b0d8 <tMBSawPulse_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#else
void tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#endif
{
    _tMBSawPulse* c = *osc;
 801b0d8:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801b0da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
 801b0de:	eddf 6a14 	vldr	s13, [pc, #80]	; 801b130 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801b0e2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
 801b0e6:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
 801b0ea:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801b0ee:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
 801b0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
 801b0f6:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801b0fa:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801b0fe:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
 801b102:	dc0c      	bgt.n	801b11e <tMBSawPulse_setFreq+0x46>
 801b104:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801b134 <tMBSawPulse_setFreq+0x5c>
 801b108:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801b10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b110:	d405      	bmi.n	801b11e <tMBSawPulse_setFreq+0x46>
    	c->active = 0;
    	c->gain = 0.0f;
    }
    else
    {
    	c->active = 1;
 801b112:	2201      	movs	r2, #1
 801b114:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 801b118:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    	c->gain = 1.0f;
    }
}
 801b11c:	4770      	bx	lr
    	c->gain = 0.0f;
 801b11e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801b138 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
 801b122:	2200      	movs	r2, #0
 801b124:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 801b128:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 801b12c:	4770      	bx	lr
 801b12e:	bf00      	nop
 801b130:	45bb8000 	.word	0x45bb8000
 801b134:	c5bb8000 	.word	0xc5bb8000
 801b138:	00000000 	.word	0x00000000

0801b13c <tMBSawPulse_sync>:
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#else
float tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#endif
{
    _tMBSawPulse* c = *osc;
 801b13c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801b13e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801b142:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 801b146:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 801b14a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801b14e:	eef1 7a67 	vneg.f32	s15, s15
 801b152:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801b156:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801b15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b15e:	eef4 6ac7 	vcmpe.f32	s13, s14
 801b162:	bfcc      	ite	gt
 801b164:	2201      	movgt	r2, #1
 801b166:	2200      	movle	r2, #0
 801b168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b16c:	f002 0201 	and.w	r2, r2, #1
 801b170:	bf88      	it	hi
 801b172:	2200      	movhi	r2, #0
 801b174:	b122      	cbz	r2, 801b180 <tMBSawPulse_sync+0x44>
 801b176:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801b17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b17e:	da04      	bge.n	801b18a <tMBSawPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801b180:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801b198 <tMBSawPulse_sync+0x5c>
 801b184:	ed83 7a04 	vstr	s14, [r3, #16]

    return value;
}
 801b188:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801b18a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801b18e:	ee27 7a06 	vmul.f32	s14, s14, s12
 801b192:	ed83 7a04 	vstr	s14, [r3, #16]
}
 801b196:	4770      	bx	lr
 801b198:	00000000 	.word	0x00000000

0801b19c <tMBSawPulse_setShape>:
    c->_p = phase;
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
 801b19c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801b19e:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 801b1a2:	4770      	bx	lr

0801b1a4 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 801b1a4:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801b1a6:	698c      	ldr	r4, [r1, #24]
{
 801b1a8:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b1aa:	201c      	movs	r0, #28
 801b1ac:	4621      	mov	r1, r4
 801b1ae:	f7fb fc75 	bl	8016a9c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 801b1b2:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b1b4:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 801b1b6:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801b1b8:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b1ba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801b1d0 <tIntPhasor_init+0x2c>
    c->phase    =  0;
 801b1be:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b1c0:	edd3 7a01 	vldr	s15, [r3, #4]
 801b1c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b1c8:	edc0 7a06 	vstr	s15, [r0, #24]
}
 801b1cc:	bd38      	pop	{r3, r4, r5, pc}
 801b1ce:	bf00      	nop
 801b1d0:	4f800000 	.word	0x4f800000

0801b1d4 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 801b1d4:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 801b1d6:	eddf 7a06 	vldr	s15, [pc, #24]	; 801b1f0 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 801b1da:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 801b1de:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 801b1e0:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 801b1e4:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801b1e6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 801b1ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b1ee:	4770      	bx	lr
 801b1f0:	2f80000d 	.word	0x2f80000d

0801b1f4 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
 801b1f4:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b1f6:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801b1fa:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b1fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b202:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b206:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801b20a:	4770      	bx	lr

0801b20c <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 801b20c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 801b210:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801b22c <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 801b214:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801b216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b21a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801b21e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b222:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b226:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801b22a:	4770      	bx	lr
 801b22c:	4f800000 	.word	0x4f800000

0801b230 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 801b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b232:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801b236:	698f      	ldr	r7, [r1, #24]
{
 801b238:	4606      	mov	r6, r0
 801b23a:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b23c:	2010      	movs	r0, #16
 801b23e:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b240:	ed9f 8a21 	vldr	s16, [pc, #132]	; 801b2c8 <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b244:	f7fb fc2a 	bl	8016a9c <mpool_alloc>
 801b248:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 801b24a:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b24c:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 801b24e:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b250:	201c      	movs	r0, #28
 801b252:	4639      	mov	r1, r7
 801b254:	f7fb fc22 	bl	8016a9c <mpool_alloc>
 801b258:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801b25a:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801b25c:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 801b25e:	2700      	movs	r7, #0
 801b260:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b262:	edd3 7a01 	vldr	s15, [r3, #4]
 801b266:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b26a:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b26e:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 801b270:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b272:	4629      	mov	r1, r5
 801b274:	f7fb fc12 	bl	8016a9c <mpool_alloc>
 801b278:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801b27a:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 801b27c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 801b280:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801b282:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b284:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b288:	eddf 6a10 	vldr	s13, [pc, #64]	; 801b2cc <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b28c:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b290:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 801b294:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b296:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 801b298:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b29c:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801b2a0:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b2a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b2a6:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 801b2aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801b2ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b2b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801b2b6:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b2ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b2be:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801b2c2:	ecbd 8b02 	vpop	{d8}
 801b2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2c8:	4f800000 	.word	0x4f800000
 801b2cc:	2f80000d 	.word	0x2f80000d

0801b2d0 <tSquareLFO_initToPool>:
{
 801b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2d2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801b2d6:	680f      	ldr	r7, [r1, #0]
{
 801b2d8:	4606      	mov	r6, r0
 801b2da:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b2dc:	2010      	movs	r0, #16
 801b2de:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b2e0:	ed9f 8a21 	vldr	s16, [pc, #132]	; 801b368 <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b2e4:	f7fb fbda 	bl	8016a9c <mpool_alloc>
 801b2e8:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 801b2ea:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801b2ec:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 801b2ee:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b2f0:	201c      	movs	r0, #28
 801b2f2:	4639      	mov	r1, r7
 801b2f4:	f7fb fbd2 	bl	8016a9c <mpool_alloc>
 801b2f8:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801b2fa:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801b2fc:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 801b2fe:	2700      	movs	r7, #0
 801b300:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b302:	edd3 7a01 	vldr	s15, [r3, #4]
 801b306:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b30a:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b30e:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 801b310:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b312:	4629      	mov	r1, r5
 801b314:	f7fb fbc2 	bl	8016a9c <mpool_alloc>
 801b318:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801b31a:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 801b31c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 801b320:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801b322:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b324:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b328:	eddf 6a10 	vldr	s13, [pc, #64]	; 801b36c <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b32c:	ee27 7a08 	vmul.f32	s14, s14, s16
 801b330:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 801b334:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b336:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 801b338:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b33c:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801b340:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b342:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b346:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 801b34a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801b34e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b352:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801b356:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b35a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b35e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801b362:	ecbd 8b02 	vpop	{d8}
 801b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b368:	4f800000 	.word	0x4f800000
 801b36c:	2f80000d 	.word	0x2f80000d

0801b370 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 801b370:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b372:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801b376:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801b3b4 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 801b37a:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 801b37c:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801b380:	4403      	add	r3, r0
 801b382:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 801b384:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 801b388:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801b38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 801b38e:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801b392:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 801b394:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 801b398:	604b      	str	r3, [r1, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b39a:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801b39e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b3a2:	ee30 0a66 	vsub.f32	s0, s0, s13
 801b3a6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801b3aa:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 801b3ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b3b2:	4770      	bx	lr
 801b3b4:	2f80000d 	.word	0x2f80000d

0801b3b8 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 801b3b8:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 801b3ba:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b3bc:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801b3c0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b3c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b3c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b3cc:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801b3d0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b3d2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801b3d6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b3da:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b3de:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b3e2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801b3e6:	4770      	bx	lr

0801b3e8 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 801b3e8:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b3ea:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801b420 <tSquareLFO_setPulseWidth+0x38>
 801b3ee:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 801b3f0:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b3f4:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 801b3f8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801b424 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 801b400:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b402:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 801b406:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 801b40a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b40e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801b412:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b416:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b41a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801b41e:	4770      	bx	lr
 801b420:	2f80000d 	.word	0x2f80000d
 801b424:	4f800000 	.word	0x4f800000

0801b428 <tSquareLFO_setPhase>:
    int i = phase;
 801b428:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 801b42c:	eddf 6a13 	vldr	s13, [pc, #76]	; 801b47c <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
 801b430:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b432:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801b480 <tSquareLFO_setPhase+0x58>
    phase -= i;
 801b436:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tIntPhasor* c = *cy;
 801b43a:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 801b43c:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 801b440:	ee20 0a26 	vmul.f32	s0, s0, s13
 801b444:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b448:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b44c:	689a      	ldr	r2, [r3, #8]
 801b44e:	edd3 7a01 	vldr	s15, [r3, #4]
 801b452:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801b456:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b458:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b45c:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 801b460:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801b464:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b468:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801b46c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b474:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801b478:	4770      	bx	lr
 801b47a:	bf00      	nop
 801b47c:	4f800000 	.word	0x4f800000
 801b480:	2f80000d 	.word	0x2f80000d

0801b484 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 801b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801b486:	460c      	mov	r4, r1
{
 801b488:	4606      	mov	r6, r0
 801b48a:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801b48c:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 801b48e:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801b492:	4639      	mov	r1, r7
 801b494:	f7fb fb02 	bl	8016a9c <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 801b498:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801b49a:	6030      	str	r0, [r6, #0]
 801b49c:	4604      	mov	r4, r0
    c->mempool = m;
 801b49e:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 801b4a2:	f7ff ff15 	bl	801b2d0 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 801b4a6:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b4a8:	201c      	movs	r0, #28
 801b4aa:	4629      	mov	r1, r5
 801b4ac:	f7fb faf6 	bl	8016a9c <mpool_alloc>
    c->phase    =  0;
 801b4b0:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801b4b2:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801b4b4:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801b4b6:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b4b8:	ed9f 7a04 	vldr	s14, [pc, #16]	; 801b4cc <tSawSquareLFO_init+0x48>
    c->phase    =  0;
 801b4bc:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b4be:	edd3 7a01 	vldr	s15, [r3, #4]
 801b4c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b4c6:	edc0 7a06 	vstr	s15, [r0, #24]
}
 801b4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4cc:	4f800000 	.word	0x4f800000

0801b4d0 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 801b4d0:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 801b4d2:	6802      	ldr	r2, [r0, #0]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 801b4d4:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 801b4d8:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801b550 <tSawSquareLFO_tick+0x80>
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b4dc:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 801b4e0:	6891      	ldr	r1, [r2, #8]
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 801b4e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 801b4e6:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801b4ea:	4403      	add	r3, r0
 801b4ec:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 801b4ee:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 801b4f2:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801b4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 801b4f8:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 801b4fa:	6843      	ldr	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 801b4fc:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 801b500:	6884      	ldr	r4, [r0, #8]
 801b502:	4423      	add	r3, r4
 801b504:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 801b506:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 801b50a:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 801b50c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 801b510:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801b514:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 801b516:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 801b51a:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 801b51c:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801b520:	eef8 4a66 	vcvt.f32.u32	s9, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b524:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 801b528:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 801b52c:	f85d 4b04 	ldr.w	r4, [sp], #4
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b530:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801b534:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 801b538:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b53c:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801b540:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 801b544:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 801b548:	eea6 0a07 	vfma.f32	s0, s12, s14
 801b54c:	4770      	bx	lr
 801b54e:	bf00      	nop
 801b550:	2f80000d 	.word	0x2f80000d

0801b554 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
 801b554:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 801b556:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 801b558:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b55a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801b55e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b562:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b56a:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801b56e:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b570:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801b574:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b578:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b57c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b580:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801b584:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b586:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801b58a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b58e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b592:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801b596:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 801b59a:	4770      	bx	lr

0801b59c <tSawSquareLFO_setPhase>:
    int i = phase;
 801b59c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 801b5a0:	eddf 6a15 	vldr	s13, [pc, #84]	; 801b5f8 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
 801b5a4:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b5a6:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801b5fc <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 801b5aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tSquareLFO *c = *cy;
 801b5ae:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 801b5b0:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 801b5b2:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 801b5b6:	ee20 0a26 	vmul.f32	s0, s0, s13
 801b5ba:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801b5be:	edc0 7a01 	vstr	s15, [r0, #4]
 801b5c2:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b5c6:	6890      	ldr	r0, [r2, #8]
 801b5c8:	edd2 7a01 	vldr	s15, [r2, #4]
 801b5cc:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 801b5d0:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801b5d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801b5d6:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 801b5da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801b5de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b5e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801b5e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b5ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b5ee:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 801b5f2:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 801b5f4:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 801b5f6:	4770      	bx	lr
 801b5f8:	4f800000 	.word	0x4f800000
 801b5fc:	2f80000d 	.word	0x2f80000d

0801b600 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
 801b600:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 801b602:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801b606:	4770      	bx	lr

0801b608 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 801b608:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801b60a:	698d      	ldr	r5, [r1, #24]
{
 801b60c:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801b60e:	2018      	movs	r0, #24
 801b610:	4629      	mov	r1, r5
 801b612:	f7fb fa43 	bl	8016a9c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 801b616:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801b618:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 801b61a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801b61c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801b61e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801b654 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 801b622:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801b658 <tTriLFO_init+0x50>
    c->phase    =  0;
 801b626:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 801b62a:	edd2 7a01 	vldr	s15, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801b62e:	ee27 7a87 	vmul.f32	s14, s15, s14
    c->invSampleRate = leaf->invSampleRate;
 801b632:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801b636:	ed80 7a05 	vstr	s14, [r0, #20]
    _tTriLFO* c = *cy;
 801b63a:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b63c:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801b640:	edc3 6a03 	vstr	s13, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b644:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b64c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 801b650:	bd38      	pop	{r3, r4, r5, pc}
 801b652:	bf00      	nop
 801b654:	4f800000 	.word	0x4f800000
 801b658:	435c0000 	.word	0x435c0000

0801b65c <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 801b65c:	6803      	ldr	r3, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801b65e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b662:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801b68c <tTriLFO_tick+0x30>
    c->phase += c->inc;
 801b666:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 801b66a:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801b66c:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
 801b670:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801b672:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801b676:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801b67a:	ee07 3a90 	vmov	s15, r3
 801b67e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b682:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 801b686:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b68a:	4770      	bx	lr
 801b68c:	2ffffff6 	.word	0x2ffffff6

0801b690 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 801b690:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b692:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801b696:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b69a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b69e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b6a2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801b6a6:	4770      	bx	lr

0801b6a8 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 801b6a8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 801b6ac:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801b6ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b6b2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801b6b6:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 801b6ba:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801b6be:	4770      	bx	lr

0801b6c0 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 801b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6c2:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801b6c6:	698f      	ldr	r7, [r1, #24]
{
 801b6c8:	4606      	mov	r6, r0
 801b6ca:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801b6cc:	2010      	movs	r0, #16
 801b6ce:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801b6d0:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 801b74c <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801b6d4:	f7fb f9e2 	bl	8016a9c <mpool_alloc>
 801b6d8:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801b6da:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801b6dc:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 801b6de:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 801b6e0:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801b6e2:	4631      	mov	r1, r6
 801b6e4:	f7fb f9da 	bl	8016a9c <mpool_alloc>
 801b6e8:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801b6ea:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801b6ec:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 801b6ee:	2600      	movs	r6, #0
    c->freq  = freq;
 801b6f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801b750 <tSineTriLFO_init+0x90>
    c->phase    =  0;
 801b6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 801b6f8:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801b6fc:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 801b700:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801b704:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801b708:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 801b70a:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b70c:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801b710:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b714:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b718:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b71c:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 801b720:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801b722:	4629      	mov	r1, r5
 801b724:	f7fb f9ba 	bl	8016a9c <mpool_alloc>
 801b728:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801b72a:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 801b72c:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 801b730:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801b732:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b736:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 801b73a:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801b73c:	ee67 7a88 	vmul.f32	s15, s15, s16
 801b740:	edc0 7a04 	vstr	s15, [r0, #16]
}
 801b744:	ecbd 8b02 	vpop	{d8}
 801b748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b74a:	bf00      	nop
 801b74c:	4f800000 	.word	0x4f800000
 801b750:	435c0000 	.word	0x435c0000

0801b754 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 801b754:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 801b756:	6804      	ldr	r4, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 801b758:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 801b75c:	4a20      	ldr	r2, [pc, #128]	; (801b7e0 <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801b75e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 801b762:	68e1      	ldr	r1, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801b764:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801b7e4 <tSineTriLFO_tick+0x90>
    idx = (idx + 1) & c->mask;
 801b768:	694e      	ldr	r6, [r1, #20]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801b76a:	eddf 4a1f 	vldr	s9, [pc, #124]	; 801b7e8 <tSineTriLFO_tick+0x94>
    c->phase += c->inc;
 801b76e:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801b772:	4403      	add	r3, r0
 801b774:	604b      	str	r3, [r1, #4]
    idx = c->phase >> 21; //11 bit table 
 801b776:	0d58      	lsrs	r0, r3, #21
    _tTriLFO* c = *cy;
 801b778:	68a5      	ldr	r5, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 801b77a:	f3c3 0314 	ubfx	r3, r3, #0, #21
 801b77e:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 801b782:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801b786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 801b78a:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
 801b78c:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
 801b78e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c->phase += c->inc;
 801b792:	606b      	str	r3, [r5, #4]
    idx = (idx + 1) & c->mask;
 801b794:	4031      	ands	r1, r6
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801b796:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801b79a:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp1 = __leaf_table_sinewave[idx];
 801b79e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 801b7a2:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801b7a6:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
 801b7aa:	edd0 6a00 	vldr	s13, [r0]
    return  (1.0f - c->shape) * a + c->shape * b;
 801b7ae:	ee37 6a07 	vadd.f32	s12, s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801b7b2:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801b7b6:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 801b7ba:	ee75 5ac7 	vsub.f32	s11, s11, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801b7be:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801b7c2:	ee07 3a10 	vmov	s14, r3
 801b7c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801b7ca:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801b7ce:	eea7 0a24 	vfma.f32	s0, s14, s9
}
 801b7d2:	bc70      	pop	{r4, r5, r6}
    return  (1.0f - c->shape) * a + c->shape * b;
 801b7d4:	ee26 0a00 	vmul.f32	s0, s12, s0
}
 801b7d8:	eea5 0aa6 	vfma.f32	s0, s11, s13
 801b7dc:	4770      	bx	lr
 801b7de:	bf00      	nop
 801b7e0:	080269e4 	.word	0x080269e4
 801b7e4:	35000004 	.word	0x35000004
 801b7e8:	2ffffff6 	.word	0x2ffffff6

0801b7ec <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
 801b7ec:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 801b7ee:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b7f0:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801b7f4:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b7f8:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b7fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b800:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 801b804:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b806:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 801b80a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801b80e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b812:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b816:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 801b81a:	4770      	bx	lr

0801b81c <tSineTriLFO_setPhase>:
    int i = phase;
 801b81c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 801b820:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801b848 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
 801b824:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801b826:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 801b82a:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 801b82c:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801b830:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b834:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 801b838:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 801b83c:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 801b840:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 801b842:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 801b846:	4770      	bx	lr
 801b848:	4f800000 	.word	0x4f800000

0801b84c <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
 801b84c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801b84e:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 801b852:	4770      	bx	lr
 801b854:	0000      	movs	r0, r0
	...

0801b858 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, float freq, float dampFreq,
                                         float decay, float targetLev, float levSmoothFactor,
                                         float levStrength, int levMode, tMempool* const mp)
{
 801b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b85c:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
 801b860:	f8d3 9000 	ldr.w	r9, [r3]
{
 801b864:	b083      	sub	sp, #12
 801b866:	460e      	mov	r6, r1
 801b868:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801b86a:	4649      	mov	r1, r9
 801b86c:	2064      	movs	r0, #100	; 0x64
{
 801b86e:	461d      	mov	r5, r3
 801b870:	eeb0 8a40 	vmov.f32	s16, s0
 801b874:	eeb0 9a41 	vmov.f32	s18, s2
 801b878:	4617      	mov	r7, r2
 801b87a:	eef0 9a61 	vmov.f32	s19, s3
 801b87e:	eeb0 aa42 	vmov.f32	s20, s4
 801b882:	eef0 aa62 	vmov.f32	s21, s5
 801b886:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801b88a:	f7fb f907 	bl	8016a9c <mpool_alloc>
 801b88e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
 801b892:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801b896:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801b89a:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
    p->mempool = m;
 801b89e:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
 801b8a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b8a6:	ee87 ba08 	vdiv.f32	s22, s14, s16
    LEAF* leaf = p->mempool->leaf;
 801b8aa:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
 801b8ae:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->maxLength = 2400 * oversampling;
 801b8b0:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->sampleRate = leaf->sampleRate * oversampling;
 801b8b4:	ed93 0a00 	vldr	s0, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801b8b8:	4604      	mov	r4, r0
    p->curr=0.0f;
 801b8ba:	2300      	movs	r3, #0
    p->maxLength = 2400 * oversampling;
 801b8bc:	fb01 f606 	mul.w	r6, r1, r6
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801b8c0:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 801b8c4:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->sampleRate = leaf->sampleRate * oversampling;
 801b8c8:	ee67 7a80 	vmul.f32	s15, s15, s0
    p->curr=0.0f;
 801b8cc:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801b8ce:	eddf 0a82 	vldr	s1, [pc, #520]	; 801bad8 <tSimpleLivingString3_initToPool+0x280>
 801b8d2:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
 801b8d4:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 801b8d6:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
 801b8da:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801b8de:	4650      	mov	r0, sl
 801b8e0:	ee2b 0a2b 	vmul.f32	s0, s22, s23
 801b8e4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801b8e8:	f7f9 f8f4 	bl	8014ad4 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 801b8ec:	ed94 0a02 	vldr	s0, [r4, #8]
 801b8f0:	462a      	mov	r2, r5
 801b8f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b8f4:	4658      	mov	r0, fp
 801b8f6:	f7f8 f91f 	bl	8013b38 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 801b8fa:	ed94 0a02 	vldr	s0, [r4, #8]
 801b8fe:	462a      	mov	r2, r5
 801b900:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b902:	4648      	mov	r0, r9
 801b904:	f7f8 f918 	bl	8013b38 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, float freq)
{
    _tSimpleLivingString3* p = *pl;
 801b908:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    float waveLength = (p->sampleRate/freq);
 801b90c:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    p->freq = freq;
 801b910:	ed86 8a01 	vstr	s16, [r6, #4]
    float waveLength = (p->sampleRate/freq);
 801b914:	ee2b 0a27 	vmul.f32	s0, s22, s15
    if (waveLength<4.8) waveLength=4.8f;
 801b918:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 801bac8 <tSimpleLivingString3_initToPool+0x270>
 801b91c:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801b920:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b928:	f100 80c7 	bmi.w	801baba <tSimpleLivingString3_initToPool+0x262>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801b92c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801b92e:	005b      	lsls	r3, r3, #1
 801b930:	ee07 3a90 	vmov	s15, r3
 801b934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
 801b938:	fec7 7ac0 	vminnm.f32	s15, s15, s0
 801b93c:	ee27 0aab 	vmul.f32	s0, s15, s23
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801b940:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 801b944:	ed86 0a02 	vstr	s0, [r6, #8]
    //float decay = p->userDecay;

    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801b948:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801b94c:	f7f9 f8ee 	bl	8014b2c <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801b950:	ed96 7a05 	vldr	s14, [r6, #20]
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
 801b954:	f104 0840 	add.w	r8, r4, #64	; 0x40
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801b958:	eddf 7a60 	vldr	s15, [pc, #384]	; 801badc <tSimpleLivingString3_initToPool+0x284>
 801b95c:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801b960:	ed96 6a01 	vldr	s12, [r6, #4]
 801b964:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801b968:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801b96c:	ed9f 0b58 	vldr	d0, [pc, #352]	; 801bad0 <tSimpleLivingString3_initToPool+0x278>
 801b970:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801b974:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b978:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801b97c:	f001 f920 	bl	801cbc0 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 801b980:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801b982:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801b986:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
 801b98a:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 801b98e:	ed94 0a02 	vldr	s0, [r4, #8]
 801b992:	f7f8 f997 	bl	8013cc4 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 801b996:	ed94 0a02 	vldr	s0, [r4, #8]
 801b99a:	4648      	mov	r0, r9
 801b99c:	f7f8 f992 	bl	8013cc4 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 801b9a0:	4658      	mov	r0, fp
 801b9a2:	f7f8 f941 	bl	8013c28 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 801b9a6:	4648      	mov	r0, r9
 801b9a8:	f7f8 f93e 	bl	8013c28 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 801b9ac:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801b9b0:	4629      	mov	r1, r5
 801b9b2:	eeb0 0a68 	vmov.f32	s0, s17
 801b9b6:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
 801b9b8:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 801b9bc:	9301      	str	r3, [sp, #4]
 801b9be:	f7f9 f90b 	bl	8014bd8 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 801b9c2:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801b9c6:	9801      	ldr	r0, [sp, #4]
 801b9c8:	f7f9 f96c 	bl	8014ca4 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 801b9cc:	eeb0 0a68 	vmov.f32	s0, s17
 801b9d0:	9801      	ldr	r0, [sp, #4]
 801b9d2:	f7f9 f935 	bl	8014c40 <tOnePole_setFreq>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
 801b9d6:	4629      	mov	r1, r5
 801b9d8:	4640      	mov	r0, r8
 801b9da:	f8cd 8004 	str.w	r8, [sp, #4]
 801b9de:	f7f9 f9bb 	bl	8014d58 <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
 801b9e2:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801b9e6:	9801      	ldr	r0, [sp, #4]
 801b9e8:	f7f9 f9ce 	bl	8014d88 <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
 801b9ec:	4629      	mov	r1, r5
 801b9ee:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 801b9f2:	4630      	mov	r0, r6
 801b9f4:	9601      	str	r6, [sp, #4]
 801b9f6:	f7f9 fb19 	bl	801502c <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 801b9fa:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801b9fe:	9801      	ldr	r0, [sp, #4]
 801ba00:	f7f9 fb50 	bl	80150a4 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 801ba04:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 801ba08:	9801      	ldr	r0, [sp, #4]
 801ba0a:	f7f9 fb2f 	bl	801506c <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801ba0e:	eeb0 0a69 	vmov.f32	s0, s19
 801ba12:	eeb0 1a6a 	vmov.f32	s2, s21
 801ba16:	462a      	mov	r2, r5
 801ba18:	eef0 0a4a 	vmov.f32	s1, s20
 801ba1c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801ba20:	4639      	mov	r1, r7
    p->userDecay = decay;
 801ba22:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801ba26:	f7f8 fccf 	bl	80143c8 <tFeedbackLeveler_initToPool>
    float waveLength = (p->sampleRate/freq);
 801ba2a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
    p->levMode=levMode;
 801ba2e:	6227      	str	r7, [r4, #32]
    float waveLength = (p->sampleRate/freq);
 801ba30:	ee2b ba00 	vmul.f32	s22, s22, s0
    p->changeGainCompensator = 1.0f;
 801ba34:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
 801ba38:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
 801ba3c:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801bac8 <tSimpleLivingString3_initToPool+0x270>
 801ba40:	eeb7 6acb 	vcvt.f64.f32	d6, s22
 801ba44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba4c:	d438      	bmi.n	801bac0 <tSimpleLivingString3_initToPool+0x268>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801ba4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 801ba50:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801ba54:	005b      	lsls	r3, r3, #1
 801ba56:	ee00 3a10 	vmov	s0, r3
 801ba5a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 801ba5e:	fe80 0a4b 	vminnm.f32	s0, s0, s22
 801ba62:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801ba66:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
 801ba68:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801ba6c:	f7f9 f85e 	bl	8014b2c <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801ba70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba74:	ed94 7a05 	vldr	s14, [r4, #20]
 801ba78:	eddf 7a18 	vldr	s15, [pc, #96]	; 801badc <tSimpleLivingString3_initToPool+0x284>
 801ba7c:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801ba80:	ed94 6a01 	vldr	s12, [r4, #4]
 801ba84:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801ba88:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801ba8c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 801bad0 <tSimpleLivingString3_initToPool+0x278>
 801ba90:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801ba94:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ba98:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801ba9c:	f001 f890 	bl	801cbc0 <exp>
    p->pickupPoint = 0.9f;
 801baa0:	4a0f      	ldr	r2, [pc, #60]	; (801bae0 <tSimpleLivingString3_initToPool+0x288>)
    p->prevDelayLength = p->waveLengthInSamples;
 801baa2:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
 801baa4:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801baa6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
 801baaa:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801baac:	ed84 0a04 	vstr	s0, [r4, #16]
}
 801bab0:	b003      	add	sp, #12
 801bab2:	ecbd 8b08 	vpop	{d8-d11}
 801bab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baba:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801bae4 <tSimpleLivingString3_initToPool+0x28c>
 801babe:	e73f      	b.n	801b940 <tSimpleLivingString3_initToPool+0xe8>
 801bac0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801bae4 <tSimpleLivingString3_initToPool+0x28c>
 801bac4:	e7cf      	b.n	801ba66 <tSimpleLivingString3_initToPool+0x20e>
 801bac6:	bf00      	nop
 801bac8:	33333333 	.word	0x33333333
 801bacc:	40133333 	.word	0x40133333
 801bad0:	0a3d70a4 	.word	0x0a3d70a4
 801bad4:	c01ba3d7 	.word	0xc01ba3d7
 801bad8:	3c23d70a 	.word	0x3c23d70a
 801badc:	3d8d78c4 	.word	0x3d8d78c4
 801bae0:	3f666666 	.word	0x3f666666
 801bae4:	4019999a 	.word	0x4019999a

0801bae8 <tSimpleLivingString3_setFreq>:
{
 801bae8:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 801baea:	6804      	ldr	r4, [r0, #0]
    float waveLength = (p->sampleRate/freq);
 801baec:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
 801baf0:	ed84 0a01 	vstr	s0, [r4, #4]
    float waveLength = (p->sampleRate/freq);
 801baf4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 801baf8:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 801bb70 <tSimpleLivingString3_setFreq+0x88>
 801bafc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 801bb00:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801bb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb08:	d42e      	bmi.n	801bb68 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801bb0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 801bb0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801bb10:	005b      	lsls	r3, r3, #1
 801bb12:	ee00 3a10 	vmov	s0, r3
 801bb16:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 801bb1a:	fe80 0a67 	vminnm.f32	s0, s0, s15
 801bb1e:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801bb22:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 801bb26:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801bb2a:	f7f8 ffff 	bl	8014b2c <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801bb2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb32:	ed94 7a05 	vldr	s14, [r4, #20]
 801bb36:	eddf 7a12 	vldr	s15, [pc, #72]	; 801bb80 <tSimpleLivingString3_setFreq+0x98>
 801bb3a:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801bb3e:	ed94 6a01 	vldr	s12, [r4, #4]
 801bb42:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801bb46:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801bb4a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 801bb78 <tSimpleLivingString3_setFreq+0x90>
 801bb4e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801bb52:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bb56:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801bb5a:	f001 f831 	bl	801cbc0 <exp>
 801bb5e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bb62:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 801bb66:	bd10      	pop	{r4, pc}
 801bb68:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801bb84 <tSimpleLivingString3_setFreq+0x9c>
 801bb6c:	e7d9      	b.n	801bb22 <tSimpleLivingString3_setFreq+0x3a>
 801bb6e:	bf00      	nop
 801bb70:	33333333 	.word	0x33333333
 801bb74:	40133333 	.word	0x40133333
 801bb78:	0a3d70a4 	.word	0x0a3d70a4
 801bb7c:	c01ba3d7 	.word	0xc01ba3d7
 801bb80:	3d8d78c4 	.word	0x3d8d78c4
 801bb84:	4019999a 	.word	0x4019999a

0801bb88 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 801bb88:	6800      	ldr	r0, [r0, #0]
 801bb8a:	303c      	adds	r0, #60	; 0x3c
 801bb8c:	f7f9 b858 	b.w	8014c40 <tOnePole_setFreq>

0801bb90 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, float decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801bb90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bb94:	eddf 6a10 	vldr	s13, [pc, #64]	; 801bbd8 <tSimpleLivingString3_setDecay+0x48>
{
 801bb98:	b510      	push	{r4, lr}
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801bb9a:	ee30 7a27 	vadd.f32	s14, s0, s15
    _tSimpleLivingString3* p = *pl;
 801bb9e:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 801bba0:	ed94 6a01 	vldr	s12, [r4, #4]
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801bba4:	ee27 7a26 	vmul.f32	s14, s14, s13
    p->userDecay = decay;
 801bba8:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 801bbac:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801bbb0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801bbb4:	ed9f 5b06 	vldr	d5, [pc, #24]	; 801bbd0 <tSimpleLivingString3_setDecay+0x40>
 801bbb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bbbc:	ee85 0b07 	vdiv.f64	d0, d5, d7
 801bbc0:	f000 fffe 	bl	801cbc0 <exp>
 801bbc4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bbc8:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 801bbcc:	bd10      	pop	{r4, pc}
 801bbce:	bf00      	nop
 801bbd0:	52bd3c36 	.word	0x52bd3c36
 801bbd4:	c01ba196 	.word	0xc01ba196
 801bbd8:	3d8d78c4 	.word	0x3d8d78c4

0801bbdc <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, float targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 801bbdc:	6800      	ldr	r0, [r0, #0]
 801bbde:	3054      	adds	r0, #84	; 0x54
 801bbe0:	f7f8 bc4a 	b.w	8014478 <tFeedbackLeveler_setTargetLevel>

0801bbe4 <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, float levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 801bbe4:	6800      	ldr	r0, [r0, #0]
 801bbe6:	3054      	adds	r0, #84	; 0x54
 801bbe8:	f7f8 bc1a 	b.w	8014420 <tFeedbackLeveler_setFactor>

0801bbec <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, float levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 801bbec:	6800      	ldr	r0, [r0, #0]
 801bbee:	3054      	adds	r0, #84	; 0x54
 801bbf0:	f7f8 bc12 	b.w	8014418 <tFeedbackLeveler_setStrength>

0801bbf4 <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 801bbf4:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
 801bbf6:	6805      	ldr	r5, [r0, #0]
{
 801bbf8:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 801bbfa:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801bbfe:	f7f8 fc13 	bl	8014428 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801bc02:	622c      	str	r4, [r5, #32]
}
 801bc04:	bd38      	pop	{r3, r4, r5, pc}
 801bc06:	bf00      	nop

0801bc08 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, float input, float position)
{
 801bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimpleLivingString3* p = *pl;
 801bc0c:	6801      	ldr	r1, [r0, #0]
{
 801bc0e:	b082      	sub	sp, #8
    int length = p->waveLengthInSamples;
 801bc10:	edd1 7a02 	vldr	s15, [r1, #8]
 801bc14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bc18:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 801bc1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc20:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801bc24:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 801bc28:	ee17 3a90 	vmov	r3, s15
    if (pluckPoint < 1)
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	f340 8081 	ble.w	801bd34 <tSimpleLivingString3_pluck+0x12c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 801bc32:	4298      	cmp	r0, r3
 801bc34:	dc0f      	bgt.n	801bc56 <tSimpleLivingString3_pluck+0x4e>
    {
    	pluckPoint = length-1;
 801bc36:	1e47      	subs	r7, r0, #1
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
 801bc38:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
 801bc3a:	463b      	mov	r3, r7
    for (int i = 0; i < length; i++)
 801bc3c:	dd77      	ble.n	801bd2e <tSimpleLivingString3_pluck+0x126>
    {
        float val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((float)i/(float)pluckPoint);
 801bc3e:	ee07 7a90 	vmov	s15, r7
 801bc42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc46:	2f00      	cmp	r7, #0
 801bc48:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801bc4c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801bc50:	da0f      	bge.n	801bc72 <tSimpleLivingString3_pluck+0x6a>
 801bc52:	2300      	movs	r3, #0
 801bc54:	e02b      	b.n	801bcae <tSimpleLivingString3_pluck+0xa6>
    int remainder = length-pluckPoint;
 801bc56:	1ac2      	subs	r2, r0, r3
            val = input * ((float)i/(float)pluckPoint);
 801bc58:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801bc5c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801bc60:	1e47      	subs	r7, r0, #1
        }
        else
        {
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801bc62:	ee07 2a90 	vmov	s15, r2
 801bc66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bc6a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801bc6e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 801bc72:	429f      	cmp	r7, r3
 801bc74:	bfa8      	it	ge
 801bc76:	461f      	movge	r7, r3
    for (int i = 0; i < length; i++)
 801bc78:	2300      	movs	r3, #0
 801bc7a:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801bc7e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((float)i/(float)pluckPoint);
 801bc80:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801bc84:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((float)i/(float)pluckPoint);
 801bc88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
 801bc8c:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801bc8e:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 801bc90:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801bc92:	fbb2 f6f5 	udiv	r6, r2, r5
 801bc96:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * ((float)i/(float)pluckPoint);
 801bc9a:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
 801bc9e:	42bb      	cmp	r3, r7
        p->delayLineU->buff[bufWritePoint] = val;
 801bca0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bca4:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 801bca8:	dde9      	ble.n	801bc7e <tSimpleLivingString3_pluck+0x76>
 801bcaa:	4298      	cmp	r0, r3
 801bcac:	dd1d      	ble.n	801bcea <tSimpleLivingString3_pluck+0xe2>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801bcae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801bcb2:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801bcb6:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801bcb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801bcbc:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801bcc0:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801bcc4:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
 801bcc8:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801bcca:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 801bccc:	3301      	adds	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801bcce:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
 801bcd2:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801bcd4:	fbb2 f6f5 	udiv	r6, r2, r5
 801bcd8:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801bcdc:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
 801bce0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bce4:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 801bce8:	dce3      	bgt.n	801bcb2 <tSimpleLivingString3_pluck+0xaa>
            val = input * ((float)i/(float)pluckPoint);
 801bcea:	f04f 0c00 	mov.w	ip, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
 801bcee:	eba0 020c 	sub.w	r2, r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801bcf2:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
 801bcf6:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801bcf8:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801bcfa:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
 801bcfc:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801bcfe:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
 801bd00:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801bd02:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801bd04:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801bd06:	4463      	add	r3, ip
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801bd08:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
 801bd0a:	f10c 0c01 	add.w	ip, ip, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801bd0e:	fbb2 f8f7 	udiv	r8, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801bd12:	fbb3 fef6 	udiv	lr, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801bd16:	fb07 2218 	mls	r2, r7, r8, r2
    for (int i = 0; i < length; i++)
 801bd1a:	4560      	cmp	r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801bd1c:	fb06 331e 	mls	r3, r6, lr, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801bd20:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801bd24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bd28:	6812      	ldr	r2, [r2, #0]
 801bd2a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 801bd2c:	d1df      	bne.n	801bcee <tSimpleLivingString3_pluck+0xe6>
    }
}
 801bd2e:	b002      	add	sp, #8
 801bd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < length; i++)
 801bd34:	2800      	cmp	r0, #0
 801bd36:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
 801bd3a:	ddf8      	ble.n	801bd2e <tSimpleLivingString3_pluck+0x126>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801bd3c:	ee07 7a10 	vmov	s14, r7
 801bd40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
 801bd44:	2301      	movs	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801bd46:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 801bd4a:	eeb0 7a67 	vmov.f32	s14, s15
 801bd4e:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((float)i/(float)pluckPoint);
 801bd52:	eeb0 6a67 	vmov.f32	s12, s15
 801bd56:	e78c      	b.n	801bc72 <tSimpleLivingString3_pluck+0x6a>

0801bd58 <tSimpleLivingString3_tick>:

float   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, float input)
{
 801bd58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd5c:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
 801bd60:	6804      	ldr	r4, [r0, #0]
{
 801bd62:	b083      	sub	sp, #12

    //p->changeGainCompensator = 1.0f;
    float wl = tExpSmooth_tick(&p->wlSmooth);
 801bd64:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //float changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801bd68:	f104 0634 	add.w	r6, r4, #52	; 0x34
    float wl = tExpSmooth_tick(&p->wlSmooth);
 801bd6c:	f7f8 fee2 	bl	8014b34 <tExpSmooth_tick>
 801bd70:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
 801bd74:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801bd78:	4630      	mov	r0, r6
    float wl = tExpSmooth_tick(&p->wlSmooth);
 801bd7a:	ed8d 0a01 	vstr	s0, [sp, #4]
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801bd7e:	f7f7 ffa1 	bl	8013cc4 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 801bd82:	eeb0 0a48 	vmov.f32	s0, s16
 801bd86:	4638      	mov	r0, r7
 801bd88:	f7f7 ff9c 	bl	8013cc4 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 801bd8c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	dd3c      	ble.n	801be0c <tSimpleLivingString3_tick+0xb4>
    {
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801bd92:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801bd96:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
 801bd9a:	2500      	movs	r5, #0
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801bd9c:	4630      	mov	r0, r6
    for (int i = 0; i < p->oversampling; i++)
 801bd9e:	3501      	adds	r5, #1
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801bda0:	f7f7 ff64 	bl	8013c6c <tLinearDelay_tickOut>
 801bda4:	4648      	mov	r0, r9
 801bda6:	f7f8 ff69 	bl	8014c7c <tOnePole_tick>
 801bdaa:	edd4 7a04 	vldr	s15, [r4, #16]
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801bdae:	4640      	mov	r0, r8
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801bdb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bdb4:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801bdb8:	f7f8 fb3a 	bl	8014430 <tFeedbackLeveler_tick>
 801bdbc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801bdc0:	eef0 0a40 	vmov.f32	s1, s0
 801bdc4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801bdc8:	f7fa fc78 	bl	80166bc <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801bdcc:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801bdce:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801bdd2:	f7f7 ff4b 	bl	8013c6c <tLinearDelay_tickOut>
 801bdd6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801bdda:	eef0 0a40 	vmov.f32	s1, s0
 801bdde:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801bde2:	f7fa fc6b 	bl	80166bc <LEAF_clip>
 801bde6:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
 801bdea:	4630      	mov	r0, r6
 801bdec:	eeb1 0a40 	vneg.f32	s0, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801bdf0:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
 801bdf4:	f7f7 ff26 	bl	8013c44 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 801bdf8:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 801bdfc:	4638      	mov	r0, r7
 801bdfe:	eeb1 0a40 	vneg.f32	s0, s0
 801be02:	f7f7 ff1f 	bl	8013c44 <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
 801be06:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801be08:	42ab      	cmp	r3, r5
 801be0a:	dcc7      	bgt.n	801bd9c <tSimpleLivingString3_tick+0x44>
    }
    
    //calculate pickup point
    float point = wl * p->pickupPoint;
    float reversePoint = wl * (1.0f - p->pickupPoint);
 801be0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float point = wl * p->pickupPoint;
 801be10:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    float floatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801be14:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801be16:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    float point = wl * p->pickupPoint;
 801be1a:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801be1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    float reversePoint = wl * (1.0f - p->pickupPoint);
 801be20:	ee77 6ae6 	vsub.f32	s13, s15, s13
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801be24:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
 801be26:	feb8 6a65 	vrinta.f32	s12, s11
 801be2a:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    float reversePoint = wl * (1.0f - p->pickupPoint);
 801be2e:	ee66 6a88 	vmul.f32	s13, s13, s16
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801be32:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
 801be36:	feb8 7a66 	vrinta.f32	s14, s13
 801be3a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801be3e:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801be42:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801be46:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801be4a:	ee17 0a10 	vmov	r0, s14
    float floatPart = point - whichPoint;
 801be4e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801be52:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801be54:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801be56:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801be5a:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801be5c:	fb07 2216 	mls	r2, r7, r6, r2
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801be60:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801be64:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 801be66:	69c8      	ldr	r0, [r1, #28]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801be68:	6889      	ldr	r1, [r1, #8]
    float floatPart = point - whichPoint;
 801be6a:	ee35 6ac6 	vsub.f32	s12, s11, s12
    floatPart = reversePoint - whichPoint;
 801be6e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 801be72:	fb93 f6f0 	sdiv	r6, r3, r0
 801be76:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801be7a:	1c56      	adds	r6, r2, #1
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801be7c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    floatPart = reversePoint - whichPoint;
 801be80:	ee76 6ae5 	vsub.f32	s13, s13, s11
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801be84:	ee30 0a25 	vadd.f32	s0, s0, s11
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801be88:	ed92 7a00 	vldr	s14, [r2]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801be8c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801be90:	3301      	adds	r3, #1
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801be92:	edd2 5a00 	vldr	s11, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801be96:	fb96 f2f7 	sdiv	r2, r6, r7
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801be9a:	ee20 0a25 	vmul.f32	s0, s0, s11
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801be9e:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 801bea2:	68a2      	ldr	r2, [r4, #8]
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801bea4:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801bea8:	eea7 0a27 	vfma.f32	s0, s14, s15
 801beac:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801beb0:	fb93 f5f0 	sdiv	r5, r3, r0
 801beb4:	eea7 0a86 	vfma.f32	s0, s15, s12
 801beb8:	fb00 3315 	mls	r3, r0, r5, r3
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801bebc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801bec0:	edd3 7a00 	vldr	s15, [r3]
    p->prevDelayLength = p->waveLengthInSamples;
 801bec4:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801bec6:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801beca:	ee20 0a24 	vmul.f32	s0, s0, s9
 801bece:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //float stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 801bed2:	b003      	add	sp, #12
 801bed4:	ecbd 8b02 	vpop	{d8}
 801bed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801bedc <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, float pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 801bedc:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 801bede:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 801bee2:	4770      	bx	lr

0801bee4 <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, float freq, float pickPos, float prepPos, float pickupPos, float prepIndex,
                                     float brightness, float decay, float targetLev, float levSmoothFactor,
                                     float levStrength, int levMode, tMempool* const mp)
{
 801bee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bee8:	ed2d 8b0c 	vpush	{d8-d13}
    _tMempool* m = *mp;
 801beec:	f8d2 8000 	ldr.w	r8, [r2]
{
 801bef0:	4606      	mov	r6, r0
 801bef2:	b083      	sub	sp, #12
 801bef4:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
 801bef6:	2070      	movs	r0, #112	; 0x70
 801bef8:	4641      	mov	r1, r8
{
 801befa:	eef0 ca61 	vmov.f32	s25, s3
 801befe:	4615      	mov	r5, r2
 801bf00:	eeb0 8a42 	vmov.f32	s16, s4
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
 801bf04:	ed9f da99 	vldr	s26, [pc, #612]	; 801c16c <tLivingString2_initToPool+0x288>
{
 801bf08:	eef0 9a62 	vmov.f32	s19, s5
 801bf0c:	eef0 aa63 	vmov.f32	s21, s7
 801bf10:	eef0 ba44 	vmov.f32	s23, s8
 801bf14:	eeb0 ca64 	vmov.f32	s24, s9
 801bf18:	eeb0 ba43 	vmov.f32	s22, s6
 801bf1c:	eef0 8a41 	vmov.f32	s17, s2
 801bf20:	eeb0 aa40 	vmov.f32	s20, s0
 801bf24:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
 801bf28:	f7fa fdb8 	bl	8016a9c <mpool_alloc>
 801bf2c:	6030      	str	r0, [r6, #0]
 801bf2e:	4604      	mov	r4, r0
    p->mempool = m;
 801bf30:	f8c0 8000 	str.w	r8, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801bf34:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
 801bf36:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801bf3a:	305c      	adds	r0, #92	; 0x5c
 801bf3c:	eddf 0a8c 	vldr	s1, [pc, #560]	; 801c170 <tLivingString2_initToPool+0x28c>
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801bf40:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
    p->sampleRate = leaf->sampleRate;
 801bf44:	edd3 7a00 	vldr	s15, [r3]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 801bf48:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    p->curr=0.0f;
 801bf4c:	ed00 da0d 	vstr	s26, [r0, #-52]	; 0xffffffcc
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 801bf50:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801bf54:	ee87 0a8a 	vdiv.f32	s0, s15, s20
    p->sampleRate = leaf->sampleRate;
 801bf58:	edc0 7a04 	vstr	s15, [r0, #16]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801bf5c:	f7f8 fdba 	bl	8014ad4 <tExpSmooth_initToPool>
    _tLivingString2* p = *pl;
 801bf60:	eddf 7a84 	vldr	s15, [pc, #528]	; 801c174 <tLivingString2_initToPool+0x290>
 801bf64:	6830      	ldr	r0, [r6, #0]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 801bf66:	f104 0934 	add.w	r9, r4, #52	; 0x34
 801bf6a:	feca 7a67 	vminnm.f32	s15, s20, s15
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 801bf6e:	f104 0838 	add.w	r8, r4, #56	; 0x38
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801bf72:	305c      	adds	r0, #92	; 0x5c
 801bf74:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801bf78:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    freq = freq*2;
 801bf7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801bf80:	ed90 7a04 	vldr	s14, [r0, #16]
 801bf84:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
 801bf88:	ed40 7a16 	vstr	s15, [r0, #-88]	; 0xffffffa8
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801bf8c:	ee30 0a6d 	vsub.f32	s0, s0, s27
 801bf90:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801bf94:	f7f8 fdca 	bl	8014b2c <tExpSmooth_setDest>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
 801bf98:	eddf 0a77 	vldr	s1, [pc, #476]	; 801c178 <tLivingString2_initToPool+0x294>
 801bf9c:	eeb0 0a49 	vmov.f32	s0, s18
 801bfa0:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801bfa4:	4629      	mov	r1, r5
    p->freq = freq;
 801bfa6:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
 801bfaa:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
 801bfae:	edcd 0a00 	vstr	s1, [sp]
 801bfb2:	f7f8 fd8f 	bl	8014ad4 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
 801bfb6:	eeb0 0a68 	vmov.f32	s0, s17
 801bfba:	4629      	mov	r1, r5
 801bfbc:	eddd 0a00 	vldr	s1, [sp]
 801bfc0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801bfc4:	f7f8 fd86 	bl	8014ad4 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
 801bfc8:	eddd 0a00 	vldr	s1, [sp]
 801bfcc:	4629      	mov	r1, r5
 801bfce:	eeb0 0a6c 	vmov.f32	s0, s25
 801bfd2:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bfd6:	f7f8 fd7d 	bl	8014ad4 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, float pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
 801bfda:	6830      	ldr	r0, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
 801bfdc:	fe89 0a6d 	vminnm.f32	s0, s18, s27
 801bfe0:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801bfe4:	3060      	adds	r0, #96	; 0x60
    p->pickPos = pickPos;
 801bfe6:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801bfea:	f7f8 fd9f 	bl	8014b2c <tExpSmooth_setDest>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, float prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
 801bfee:	6830      	ldr	r0, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
 801bff0:	fe88 0aed 	vminnm.f32	s0, s17, s27
 801bff4:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801bff8:	3064      	adds	r0, #100	; 0x64
    p->prepPos = prepPos;
 801bffa:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801bffe:	f7f8 fd95 	bl	8014b2c <tExpSmooth_setDest>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 801c002:	ed94 0a02 	vldr	s0, [r4, #8]
 801c006:	462a      	mov	r2, r5
 801c008:	4658      	mov	r0, fp
 801c00a:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->prepIndex = prepIndex;
 801c00e:	ed84 8a06 	vstr	s16, [r4, #24]
    p->pickupPos = pickupPos;
 801c012:	edc4 ca05 	vstr	s25, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 801c016:	f7f7 fe97 	bl	8013d48 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 801c01a:	ed94 0a02 	vldr	s0, [r4, #8]
 801c01e:	462a      	mov	r2, r5
 801c020:	4650      	mov	r0, sl
 801c022:	f44f 6116 	mov.w	r1, #2400	; 0x960
 801c026:	f7f7 fe8f 	bl	8013d48 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 801c02a:	ed94 0a02 	vldr	s0, [r4, #8]
 801c02e:	462a      	mov	r2, r5
 801c030:	4648      	mov	r0, r9
 801c032:	f44f 6116 	mov.w	r1, #2400	; 0x960
 801c036:	f7f7 fe87 	bl	8013d48 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 801c03a:	462a      	mov	r2, r5
 801c03c:	ed94 0a02 	vldr	s0, [r4, #8]
 801c040:	f44f 6116 	mov.w	r1, #2400	; 0x960
 801c044:	4640      	mov	r0, r8
 801c046:	f7f7 fe7f 	bl	8013d48 <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
 801c04a:	4658      	mov	r0, fp
 801c04c:	f7f7 fefa 	bl	8013e44 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
 801c050:	4650      	mov	r0, sl
 801c052:	f7f7 fef7 	bl	8013e44 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
 801c056:	4648      	mov	r0, r9
 801c058:	f7f7 fef4 	bl	8013e44 <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
 801c05c:	4640      	mov	r0, r8
 801c05e:	f7f7 fef1 	bl	8013e44 <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
 801c062:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801c066:	4629      	mov	r1, r5
    p->brightness = brightness;
 801c068:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
 801c06c:	f7f8 fe3c 	bl	8014ce8 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
 801c070:	4629      	mov	r1, r5
 801c072:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801c076:	f7f8 fe37 	bl	8014ce8 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
 801c07a:	4629      	mov	r1, r5
 801c07c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801c080:	f7f8 fe32 	bl	8014ce8 <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
 801c084:	4629      	mov	r1, r5
 801c086:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801c08a:	f7f8 fe2d 	bl	8014ce8 <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, float brightness)
{
    _tLivingString2* p = *pl;
    float h0=(1.0 + brightness) * 0.5f;
 801c08e:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
 801c092:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
 801c096:	6836      	ldr	r6, [r6, #0]
    float h0=(1.0 + brightness) * 0.5f;
 801c098:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
 801c09c:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801c0a0:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
 801c0a4:	ee05 6b06 	vmla.f64	d6, d5, d6
    float h1=(1.0 - brightness) * 0.25f;
 801c0a8:	ee37 7b45 	vsub.f64	d7, d7, d5
 801c0ac:	ee27 7b00 	vmul.f64	d7, d7, d0
    float h0=(1.0 + brightness) * 0.5f;
 801c0b0:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
 801c0b4:	eeb7 1bc7 	vcvt.f32.f64	s2, d7
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801c0b8:	edcd 0a00 	vstr	s1, [sp]
 801c0bc:	eeb0 0a41 	vmov.f32	s0, s2
 801c0c0:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c0c4:	f7f8 fe40 	bl	8014d48 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
 801c0c8:	ed9d 1a01 	vldr	s2, [sp, #4]
 801c0cc:	eddd 0a00 	vldr	s1, [sp]
 801c0d0:	f106 0040 	add.w	r0, r6, #64	; 0x40
 801c0d4:	eeb0 0a41 	vmov.f32	s0, s2
 801c0d8:	ed8d 1a00 	vstr	s2, [sp]
 801c0dc:	edcd 0a01 	vstr	s1, [sp, #4]
 801c0e0:	f7f8 fe32 	bl	8014d48 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
 801c0e4:	ed9d 1a00 	vldr	s2, [sp]
 801c0e8:	f106 0044 	add.w	r0, r6, #68	; 0x44
 801c0ec:	eddd 0a01 	vldr	s1, [sp, #4]
 801c0f0:	eeb0 0a41 	vmov.f32	s0, s2
 801c0f4:	f7f8 fe28 	bl	8014d48 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 801c0f8:	ed9d 1a00 	vldr	s2, [sp]
 801c0fc:	eddd 0a01 	vldr	s1, [sp, #4]
 801c100:	f106 0048 	add.w	r0, r6, #72	; 0x48
 801c104:	eeb0 0a41 	vmov.f32	s0, s2
 801c108:	f7f8 fe1e 	bl	8014d48 <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
 801c10c:	4629      	mov	r1, r5
 801c10e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c112:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801c116:	f7f8 ff89 	bl	801502c <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
 801c11a:	4629      	mov	r1, r5
 801c11c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801c120:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801c124:	f7f8 ff82 	bl	801502c <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801c128:	eeb0 1a4c 	vmov.f32	s2, s24
 801c12c:	eef0 0a6b 	vmov.f32	s1, s23
 801c130:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801c134:	eeb0 0a6a 	vmov.f32	s0, s21
 801c138:	462a      	mov	r2, r5
 801c13a:	4639      	mov	r1, r7
    p->decay=decay;
 801c13c:	ed84 ba07 	vstr	s22, [r4, #28]
    p->prepIndex = prepIndex;
 801c140:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801c144:	f7f8 f940 	bl	80143c8 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801c148:	eeb0 1a4c 	vmov.f32	s2, s24
 801c14c:	eef0 0a6b 	vmov.f32	s1, s23
 801c150:	462a      	mov	r2, r5
 801c152:	eeb0 0a6a 	vmov.f32	s0, s21
 801c156:	4639      	mov	r1, r7
 801c158:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c15c:	f7f8 f934 	bl	80143c8 <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 801c160:	6227      	str	r7, [r4, #32]
}
 801c162:	b003      	add	sp, #12
 801c164:	ecbd 8b0c 	vpop	{d8-d13}
 801c168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c16c:	00000000 	.word	0x00000000
 801c170:	3dcccccd 	.word	0x3dcccccd
 801c174:	461c4000 	.word	0x461c4000
 801c178:	3c23d70a 	.word	0x3c23d70a

0801c17c <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
 801c17c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 801c180:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801c1b4 <tLivingString2_setFreq+0x38>
 801c184:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c186:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c18a:	fe80 0a66 	vminnm.f32	s0, s0, s13
 801c18e:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    freq = freq*2;
 801c192:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c196:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c19a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c19e:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    p->freq = freq;
 801c1a2:	edc3 7a01 	vstr	s15, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801c1a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c1aa:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c1ae:	f7f8 bcbd 	b.w	8014b2c <tExpSmooth_setDest>
 801c1b2:	bf00      	nop
 801c1b4:	461c4000 	.word	0x461c4000

0801c1b8 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
 801c1b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c1bc:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
 801c1be:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c1d8 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801c1c2:	f103 0060 	add.w	r0, r3, #96	; 0x60
 801c1c6:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801c1ca:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
 801c1ce:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801c1d2:	f7f8 bcab 	b.w	8014b2c <tExpSmooth_setDest>
 801c1d6:	bf00      	nop
 801c1d8:	00000000 	.word	0x00000000

0801c1dc <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
 801c1dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c1e0:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
 801c1e2:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c1fc <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801c1e6:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801c1ea:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801c1ee:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
 801c1f2:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801c1f6:	f7f8 bc99 	b.w	8014b2c <tExpSmooth_setDest>
 801c1fa:	bf00      	nop
 801c1fc:	00000000 	.word	0x00000000

0801c200 <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
 801c200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c204:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
 801c206:	eddf 7a06 	vldr	s15, [pc, #24]	; 801c220 <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
 801c20a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 801c20e:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801c212:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
 801c216:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
 801c21a:	f7f8 bc87 	b.w	8014b2c <tExpSmooth_setDest>
 801c21e:	bf00      	nop
 801c220:	00000000 	.word	0x00000000

0801c224 <tLivingString2_setPrepIndex>:
    _tLivingString2* p = *pl;
 801c224:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->prepIndex = prepIndex;
 801c228:	eddf 7a04 	vldr	s15, [pc, #16]	; 801c23c <tLivingString2_setPrepIndex+0x18>
    _tLivingString2* p = *pl;
 801c22c:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
 801c22e:	fe80 0a47 	vminnm.f32	s0, s0, s14
    p->prepIndex = prepIndex;
 801c232:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 801c236:	ed83 0a06 	vstr	s0, [r3, #24]
}
 801c23a:	4770      	bx	lr
 801c23c:	00000000 	.word	0x00000000

0801c240 <tLivingString2_setBrightness>:
    float h0=(1.0 + brightness) * 0.5f;
 801c240:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801c244:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801c248:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
 801c24c:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
    float h0=(1.0 + brightness) * 0.5f;
 801c250:	ee00 6b06 	vmla.f64	d6, d0, d6
    float h1=(1.0 - brightness) * 0.25f;
 801c254:	ee37 7b40 	vsub.f64	d7, d7, d0
{
 801c258:	b510      	push	{r4, lr}
    float h1=(1.0 - brightness) * 0.25f;
 801c25a:	ee27 1b01 	vmul.f64	d1, d7, d1
    _tLivingString2* p = *pl;
 801c25e:	6804      	ldr	r4, [r0, #0]
{
 801c260:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801c262:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
 801c266:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
 801c26a:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801c26e:	edcd 0a00 	vstr	s1, [sp]
 801c272:	eeb0 0a41 	vmov.f32	s0, s2
 801c276:	ed8d 1a01 	vstr	s2, [sp, #4]
 801c27a:	f7f8 fd65 	bl	8014d48 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
 801c27e:	ed9d 1a01 	vldr	s2, [sp, #4]
 801c282:	eddd 0a00 	vldr	s1, [sp]
 801c286:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801c28a:	eeb0 0a41 	vmov.f32	s0, s2
 801c28e:	ed8d 1a00 	vstr	s2, [sp]
 801c292:	edcd 0a01 	vstr	s1, [sp, #4]
 801c296:	f7f8 fd57 	bl	8014d48 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
 801c29a:	ed9d 1a00 	vldr	s2, [sp]
 801c29e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801c2a2:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2a6:	eeb0 0a41 	vmov.f32	s0, s2
 801c2aa:	f7f8 fd4d 	bl	8014d48 <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 801c2ae:	ed9d 1a00 	vldr	s2, [sp]
 801c2b2:	eddd 0a01 	vldr	s1, [sp, #4]
 801c2b6:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801c2ba:	eeb0 0a41 	vmov.f32	s0, s2
}
 801c2be:	b002      	add	sp, #8
 801c2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 801c2c4:	f7f8 bd40 	b.w	8014d48 <tTwoZero_setCoefficients>

0801c2c8 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, float decay)
{
 801c2c8:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
 801c2ca:	6804      	ldr	r4, [r0, #0]
{
 801c2cc:	eef0 7a40 	vmov.f32	s15, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
 801c2d0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801c2d4:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801c2f0 <tLivingString2_setDecay+0x28>
 801c2d8:	ed94 7a01 	vldr	s14, [r4, #4]
 801c2dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c2e0:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 801c2e4:	f000 ffa8 	bl	801d238 <powf>
 801c2e8:	ed84 0a07 	vstr	s0, [r4, #28]
}
 801c2ec:	bd10      	pop	{r4, pc}
 801c2ee:	bf00      	nop
 801c2f0:	3a83126f 	.word	0x3a83126f

0801c2f4 <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, float targetLev)
{
 801c2f4:	b510      	push	{r4, lr}
 801c2f6:	ed2d 8b02 	vpush	{d8}
 801c2fa:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 801c2fe:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
 801c300:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801c304:	f7f8 f8b8 	bl	8014478 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 801c308:	eeb0 0a48 	vmov.f32	s0, s16
 801c30c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801c310:	ecbd 8b02 	vpop	{d8}
 801c314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 801c318:	f7f8 b8ae 	b.w	8014478 <tFeedbackLeveler_setTargetLevel>

0801c31c <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, float levSmoothFactor)
{
 801c31c:	b510      	push	{r4, lr}
 801c31e:	ed2d 8b02 	vpush	{d8}
 801c322:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 801c326:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
 801c328:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801c32c:	f7f8 f878 	bl	8014420 <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
 801c330:	eeb0 0a48 	vmov.f32	s0, s16
 801c334:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801c338:	ecbd 8b02 	vpop	{d8}
 801c33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
 801c340:	f7f8 b86e 	b.w	8014420 <tFeedbackLeveler_setFactor>

0801c344 <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, float levStrength)
{
 801c344:	b510      	push	{r4, lr}
 801c346:	ed2d 8b02 	vpush	{d8}
 801c34a:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 801c34e:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
 801c350:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801c354:	f7f8 f860 	bl	8014418 <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
 801c358:	eeb0 0a48 	vmov.f32	s0, s16
 801c35c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801c360:	ecbd 8b02 	vpop	{d8}
 801c364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
 801c368:	f7f8 b856 	b.w	8014418 <tFeedbackLeveler_setStrength>

0801c36c <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
 801c36c:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
 801c36e:	6805      	ldr	r5, [r0, #0]
{
 801c370:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
 801c372:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801c376:	f7f8 f857 	bl	8014428 <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
 801c37a:	4621      	mov	r1, r4
 801c37c:	f105 0058 	add.w	r0, r5, #88	; 0x58
 801c380:	f7f8 f852 	bl	8014428 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801c384:	622c      	str	r4, [r5, #32]
}
 801c386:	bd38      	pop	{r3, r4, r5, pc}

0801c388 <tLivingString2_tick>:

float   tLivingString2_tick(tLivingString2* const pl, float input)
{
 801c388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
 801c38c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 801c390:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;
 801c394:	6804      	ldr	r4, [r0, #0]
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
 801c396:	ee60 aa27 	vmul.f32	s21, s0, s15
    //float pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    float prepP=tExpSmooth_tick(&p->prpSmooth);
    float lowLen=prepP*wLen;
    float upLen=(1.0f-prepP)*wLen;
 801c39a:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 801c39e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c3a2:	f7f8 fbc7 	bl	8014b34 <tExpSmooth_tick>
    float pickP=tExpSmooth_tick(&p->ppSmooth);
 801c3a6:	f104 0060 	add.w	r0, r4, #96	; 0x60
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 801c3aa:	eef0 8a40 	vmov.f32	s17, s0
    float pickP=tExpSmooth_tick(&p->ppSmooth);
 801c3ae:	f7f8 fbc1 	bl	8014b34 <tExpSmooth_tick>
 801c3b2:	eeb0 8a40 	vmov.f32	s16, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
 801c3b6:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801c3ba:	f7f8 fbbb 	bl	8014b34 <tExpSmooth_tick>
    float upLen=(1.0f-prepP)*wLen;
 801c3be:	ee7c 9ac0 	vsub.f32	s19, s25, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
 801c3c2:	eeb0 aa40 	vmov.f32	s20, s0
    uint32_t pickPInt;

    if (pickP > prepP)
 801c3c6:	eeb4 8ac0 	vcmpe.f32	s16, s0
    float lowLen=prepP*wLen;
 801c3ca:	ee28 9a80 	vmul.f32	s18, s17, s0
    float upLen=(1.0f-prepP)*wLen;
 801c3ce:	ee69 9aa8 	vmul.f32	s19, s19, s17
    if (pickP > prepP)
 801c3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3d6:	f340 8170 	ble.w	801c6ba <tLivingString2_tick+0x332>
    {
        float fullPickPoint =  ((pickP*wLen) - lowLen);
 801c3da:	eef0 6a49 	vmov.f32	s13, s18
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c3de:	f104 0930 	add.w	r9, r4, #48	; 0x30
 801c3e2:	ee79 ba2c 	vadd.f32	s23, s18, s25
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801c3e6:	f104 0834 	add.w	r8, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c3ea:	4648      	mov	r0, r9
    {
         float fullPickPoint =  pickP * wLen;
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801c3ec:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        float fullPickPoint =  ((pickP*wLen) - lowLen);
 801c3f0:	eed8 6a88 	vfnms.f32	s13, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801c3f4:	f104 0638 	add.w	r6, r4, #56	; 0x38
 801c3f8:	eee8 bac8 	vfms.f32	s23, s17, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
 801c3fc:	eebc bae6 	vcvt.u32.f32	s22, s13
        float pickPFloat = fullPickPoint - pickPInt;
 801c400:	eeb8 7a4b 	vcvt.f32.u32	s14, s22
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c404:	ee1b 1a10 	vmov	r1, s22
 801c408:	ee77 ba2b 	vadd.f32	s23, s14, s23
        float pickPFloat = fullPickPoint - pickPInt;
 801c40c:	ee36 cac7 	vsub.f32	s24, s13, s14
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801c410:	ee39 8ac7 	vsub.f32	s16, s19, s14
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c414:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
 801c418:	ee6a aa8c 	vmul.f32	s21, s21, s24
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c41c:	eeb0 0a6b 	vmov.f32	s0, s23
 801c420:	f7f7 fd92 	bl	8013f48 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
 801c424:	ee1b 1a10 	vmov	r1, s22
 801c428:	4648      	mov	r0, r9
 801c42a:	eeb0 0a6a 	vmov.f32	s0, s21
 801c42e:	3101      	adds	r1, #1
 801c430:	f7f7 fd8a 	bl	8013f48 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801c434:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 801c438:	4640      	mov	r0, r8
 801c43a:	eeb0 0a6b 	vmov.f32	s0, s23
 801c43e:	ee17 1a90 	vmov	r1, s15
 801c442:	f7f7 fd81 	bl	8013f48 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPFloat, (uint32_t) (upLen - pickPInt - 1));
 801c446:	ee38 7a6c 	vsub.f32	s14, s16, s25
 801c44a:	eeb0 0a6a 	vmov.f32	s0, s21
 801c44e:	4640      	mov	r0, r8
 801c450:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801c454:	ee17 1a90 	vmov	r1, s15
 801c458:	f7f7 fd76 	bl	8013f48 <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 801c45c:	4638      	mov	r0, r7
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);

    // into upper half of string, from bridge, going backwards
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801c45e:	f104 0554 	add.w	r5, r4, #84	; 0x54
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 801c462:	f7f7 fd0b 	bl	8013e7c <tHermiteDelay_tickOut>
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 801c466:	4648      	mov	r0, r9
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 801c468:	eef0 aa40 	vmov.f32	s21, s0
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 801c46c:	f7f7 fd06 	bl	8013e7c <tHermiteDelay_tickOut>
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
 801c470:	4640      	mov	r0, r8
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 801c472:	eeb0 8a40 	vmov.f32	s16, s0
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
 801c476:	f7f7 fd01 	bl	8013e7c <tHermiteDelay_tickOut>
 801c47a:	eeb0 ba40 	vmov.f32	s22, s0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
 801c47e:	4630      	mov	r0, r6
 801c480:	f7f7 fcfc 	bl	8013e7c <tHermiteDelay_tickOut>
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
 801c484:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
 801c488:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
 801c48c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c490:	f7fa f914 	bl	80166bc <LEAF_clip>
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
 801c494:	eef0 0a4b 	vmov.f32	s1, s22
 801c498:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
 801c49c:	eeb0 ca40 	vmov.f32	s24, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
 801c4a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c4a4:	f7fa f90a 	bl	80166bc <LEAF_clip>
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
 801c4a8:	eef0 0a48 	vmov.f32	s1, s16
 801c4ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
 801c4b0:	eef0 ba40 	vmov.f32	s23, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
 801c4b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c4b8:	f7fa f900 	bl	80166bc <LEAF_clip>
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
 801c4bc:	eef0 0a6a 	vmov.f32	s1, s21
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
 801c4c0:	eeb0 8a40 	vmov.f32	s16, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
 801c4c4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c4c8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c4cc:	f7fa f8f6 	bl	80166bc <LEAF_clip>
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801c4d0:	6a23      	ldr	r3, [r4, #32]
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
 801c4d2:	eeb0 ba40 	vmov.f32	s22, s0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	f040 80ec 	bne.w	801c6b4 <tLivingString2_tick+0x32c>
 801c4dc:	edd4 ca07 	vldr	s25, [r4, #28]
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
    // into lower half of string, from prepPoint, going backwards
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801c4e0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801c4e4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801c4e8:	eeb0 0a48 	vmov.f32	s0, s16
 801c4ec:	f7f8 fc10 	bl	8014d10 <tTwoZero_tick>
 801c4f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c4f4:	f7f8 fdc6 	bl	8015084 <tHighpass_tick>
 801c4f8:	4628      	mov	r0, r5
 801c4fa:	ee20 0a2c 	vmul.f32	s0, s0, s25
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 801c4fe:	f104 0558 	add.w	r5, r4, #88	; 0x58
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801c502:	f7f7 ff95 	bl	8014430 <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
 801c506:	eeb0 1a6a 	vmov.f32	s2, s21
 801c50a:	eef1 0a40 	vneg.f32	s1, s0
 801c50e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c512:	f7fa f8d3 	bl	80166bc <LEAF_clip>
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
 801c516:	4640      	mov	r0, r8
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
 801c518:	eeb0 8a40 	vmov.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
 801c51c:	f7f7 fca0 	bl	8013e60 <tHermiteDelay_tickIn>
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
 801c520:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801c524:	eeb0 0a4b 	vmov.f32	s0, s22
 801c528:	f7f8 fbf2 	bl	8014d10 <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
 801c52c:	eeb0 1a6a 	vmov.f32	s2, s21
 801c530:	eef1 0a40 	vneg.f32	s1, s0
 801c534:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c538:	f7fa f8c0 	bl	80166bc <LEAF_clip>
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801c53c:	edd4 7a06 	vldr	s15, [r4, #24]
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
 801c540:	eeb0 7a40 	vmov.f32	s14, s0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801c544:	ee7a 0ae7 	vsub.f32	s1, s21, s15
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
 801c548:	eeb0 1a6a 	vmov.f32	s2, s21
 801c54c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801c550:	ee60 0aab 	vmul.f32	s1, s1, s23
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
 801c554:	eee7 0a87 	vfma.f32	s1, s15, s14
 801c558:	f7fa f8b0 	bl	80166bc <LEAF_clip>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
 801c55c:	4630      	mov	r0, r6
 801c55e:	f7f7 fc7f 	bl	8013e60 <tHermiteDelay_tickIn>
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 801c562:	6a23      	ldr	r3, [r4, #32]
 801c564:	b90b      	cbnz	r3, 801c56a <tLivingString2_tick+0x1e2>
 801c566:	edd4 aa07 	vldr	s21, [r4, #28]
 801c56a:	eeb0 0a4c 	vmov.f32	s0, s24
 801c56e:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
    tHermiteDelay_tickIn(&p->delLF, fromNut);
    // into upper half of string, from prepPoint, going forwards/upwards
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801c572:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 801c576:	f7f8 fbcb 	bl	8014d10 <tTwoZero_tick>
 801c57a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801c57e:	f7f8 fd81 	bl	8015084 <tHighpass_tick>
 801c582:	4628      	mov	r0, r5
 801c584:	ee20 0a2a 	vmul.f32	s0, s0, s21
 801c588:	f7f7 ff52 	bl	8014430 <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
 801c58c:	eeb0 1a4c 	vmov.f32	s2, s24
 801c590:	eef1 0a40 	vneg.f32	s1, s0
 801c594:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c598:	f7fa f890 	bl	80166bc <LEAF_clip>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
 801c59c:	4638      	mov	r0, r7
 801c59e:	f7f7 fc5f 	bl	8013e60 <tHermiteDelay_tickIn>
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
 801c5a2:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801c5a6:	eeb0 0a6b 	vmov.f32	s0, s23
 801c5aa:	f7f8 fbb1 	bl	8014d10 <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
 801c5ae:	eeb0 1a4c 	vmov.f32	s2, s24
 801c5b2:	eef1 0a40 	vneg.f32	s1, s0
 801c5b6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c5ba:	f7fa f87f 	bl	80166bc <LEAF_clip>
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801c5be:	edd4 7a06 	vldr	s15, [r4, #24]
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
 801c5c2:	eeb0 7a40 	vmov.f32	s14, s0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801c5c6:	ee7c 0a67 	vsub.f32	s1, s24, s15
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
 801c5ca:	eeb0 1a4c 	vmov.f32	s2, s24
 801c5ce:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801c5d2:	ee60 0a8b 	vmul.f32	s1, s1, s22
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
 801c5d6:	eee7 0a87 	vfma.f32	s1, s15, s14
 801c5da:	f7fa f86f 	bl	80166bc <LEAF_clip>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
 801c5de:	4648      	mov	r0, r9
 801c5e0:	f7f7 fc3e 	bl	8013e60 <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
 801c5e4:	eeb0 0a49 	vmov.f32	s0, s18
 801c5e8:	4638      	mov	r0, r7
 801c5ea:	f7f7 fc71 	bl	8013ed0 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
 801c5ee:	eeb0 0a49 	vmov.f32	s0, s18
 801c5f2:	4630      	mov	r0, r6
 801c5f4:	f7f7 fc6c 	bl	8013ed0 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
 801c5f8:	eeb0 0a69 	vmov.f32	s0, s19
 801c5fc:	4648      	mov	r0, r9
 801c5fe:	f7f7 fc67 	bl	8013ed0 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
 801c602:	eeb0 0a69 	vmov.f32	s0, s19
 801c606:	4640      	mov	r0, r8
 801c608:	f7f7 fc62 	bl	8013ed0 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    float pickupOut = 0.0f;
    float pupos = tExpSmooth_tick(&p->puSmooth);
 801c60c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c610:	f7f8 fa90 	bl	8014b34 <tExpSmooth_tick>
    if (pupos < 0.9999f)
 801c614:	eddf 7a66 	vldr	s15, [pc, #408]	; 801c7b0 <tLivingString2_tick+0x428>
    float pupos = tExpSmooth_tick(&p->puSmooth);
 801c618:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
 801c61c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801c620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c624:	d53e      	bpl.n	801c6a4 <tLivingString2_tick+0x31c>
    {
        if (pupos > prepP)
 801c626:	eeb4 aac0 	vcmpe.f32	s20, s0
 801c62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c62e:	f140 8082 	bpl.w	801c736 <tLivingString2_tick+0x3ae>
        {
            float fullPUPoint =  ((pupos*wLen) - lowLen);
 801c632:	eeb0 8a49 	vmov.f32	s16, s18
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
            float PUPFloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801c636:	4648      	mov	r0, r9
 801c638:	ee39 9a0c 	vadd.f32	s18, s18, s24
            float fullPUPoint =  ((pupos*wLen) - lowLen);
 801c63c:	ee98 8a80 	vfnms.f32	s16, s17, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
 801c640:	eea8 9aea 	vfms.f32	s18, s17, s21
 801c644:	eebc aac8 	vcvt.u32.f32	s20, s16
            float PUPFloat = fullPUPoint - PUPInt;
 801c648:	eeb8 ba4a 	vcvt.f32.u32	s22, s20
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801c64c:	ee1a 1a10 	vmov	r1, s20
 801c650:	f7f7 fc6e 	bl	8013f30 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801c654:	ee1a 1a10 	vmov	r1, s20
 801c658:	4648      	mov	r0, r9
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801c65a:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801c65e:	ee79 9acb 	vsub.f32	s19, s19, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801c662:	3101      	adds	r1, #1
 801c664:	f7f7 fc64 	bl	8013f30 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801c668:	4640      	mov	r0, r8
            float PUPFloat = fullPUPoint - PUPInt;
 801c66a:	ee78 ba4b 	vsub.f32	s23, s16, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801c66e:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
 801c672:	ee79 9acc 	vsub.f32	s19, s19, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801c676:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801c67a:	ee17 1a90 	vmov	r1, s15
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801c67e:	ee3b ba09 	vadd.f32	s22, s22, s18
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801c682:	f7f7 fc55 	bl	8013f30 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
 801c686:	eefc 7ae9 	vcvt.u32.f32	s15, s19
 801c68a:	4640      	mov	r0, r8
 801c68c:	ee3a aa00 	vadd.f32	s20, s20, s0
 801c690:	ee17 1a90 	vmov	r1, s15
 801c694:	f7f7 fc4c 	bl	8013f30 <tHermiteDelay_tapOut>
 801c698:	ee38 8a00 	vadd.f32	s16, s16, s0
 801c69c:	ee28 8a2b 	vmul.f32	s16, s16, s23
 801c6a0:	eeab 8a0a 	vfma.f32	s16, s22, s20

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
 801c6a4:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
 801c6a8:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
 801c6ac:	ecbd 8b0a 	vpop	{d8-d12}
 801c6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801c6b4:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 801c6b8:	e712      	b.n	801c4e0 <tLivingString2_tick+0x158>
         float fullPickPoint =  pickP * wLen;
 801c6ba:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801c6be:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801c6c2:	f104 0638 	add.w	r6, r4, #56	; 0x38
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801c6c6:	f104 0930 	add.w	r9, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801c6ca:	4638      	mov	r0, r7
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801c6cc:	f104 0834 	add.w	r8, r4, #52	; 0x34
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
 801c6d0:	eebc cac8 	vcvt.u32.f32	s24, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801c6d4:	ee7c bac8 	vsub.f32	s23, s25, s16
        float pickPFloat = fullPickPoint - pickPInt;
 801c6d8:	eef8 7a4c 	vcvt.f32.u32	s15, s24
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801c6dc:	ee1c 1a10 	vmov	r1, s24
 801c6e0:	ee7b baa7 	vadd.f32	s23, s23, s15
        float pickPFloat = fullPickPoint - pickPInt;
 801c6e4:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801c6e8:	ee39 ba67 	vsub.f32	s22, s18, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801c6ec:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
 801c6f0:	ee2a 8a88 	vmul.f32	s16, s21, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801c6f4:	eeb0 0a6b 	vmov.f32	s0, s23
 801c6f8:	f7f7 fc26 	bl	8013f48 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
 801c6fc:	ee1c 1a10 	vmov	r1, s24
 801c700:	4638      	mov	r0, r7
 801c702:	eeb0 0a48 	vmov.f32	s0, s16
 801c706:	3101      	adds	r1, #1
 801c708:	f7f7 fc1e 	bl	8013f48 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801c70c:	eefc 7acb 	vcvt.u32.f32	s15, s22
 801c710:	4630      	mov	r0, r6
 801c712:	eeb0 0a6b 	vmov.f32	s0, s23
 801c716:	ee17 1a90 	vmov	r1, s15
 801c71a:	f7f7 fc15 	bl	8013f48 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPFloat, (uint32_t) (lowLen - pickPInt - 1));
 801c71e:	ee7b 7a6c 	vsub.f32	s15, s22, s25
 801c722:	eeb0 0a48 	vmov.f32	s0, s16
 801c726:	4630      	mov	r0, r6
 801c728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c72c:	ee17 1a90 	vmov	r1, s15
 801c730:	f7f7 fc0a 	bl	8013f48 <tHermiteDelay_addTo>
 801c734:	e692      	b.n	801c45c <tLivingString2_tick+0xd4>
             float fullPUPoint =  pupos * wLen;
 801c736:	ee68 8a80 	vmul.f32	s17, s17, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801c73a:	4638      	mov	r0, r7
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
 801c73c:	eefc 9ae8 	vcvt.u32.f32	s19, s17
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801c740:	ee3c aa68 	vsub.f32	s20, s24, s17
            float PUPFloat = fullPUPoint - PUPInt;
 801c744:	eeb8 8a69 	vcvt.f32.u32	s16, s19
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801c748:	ee19 1a90 	vmov	r1, s19
 801c74c:	f7f7 fbf0 	bl	8013f30 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 801c750:	ee19 1a90 	vmov	r1, s19
 801c754:	4638      	mov	r0, r7
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801c756:	eef0 9a40 	vmov.f32	s19, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801c75a:	ee39 9a48 	vsub.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 801c75e:	3101      	adds	r1, #1
 801c760:	f7f7 fbe6 	bl	8013f30 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801c764:	4630      	mov	r0, r6
            float PUPFloat = fullPUPoint - PUPInt;
 801c766:	ee78 8ac8 	vsub.f32	s17, s17, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801c76a:	eefc 7ac9 	vcvt.u32.f32	s15, s18
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
 801c76e:	ee39 9a4c 	vsub.f32	s18, s18, s24
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801c772:	ee3a aa08 	vadd.f32	s20, s20, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801c776:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 801c77a:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801c77e:	f7f7 fbd7 	bl	8013f30 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
 801c782:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 801c786:	4630      	mov	r0, r6
 801c788:	ee79 9a80 	vadd.f32	s19, s19, s0
 801c78c:	ee17 1a90 	vmov	r1, s15
 801c790:	f7f7 fbce 	bl	8013f30 <tHermiteDelay_tapOut>
 801c794:	ee38 8a00 	vadd.f32	s16, s16, s0
 801c798:	ee28 8a28 	vmul.f32	s16, s16, s17
 801c79c:	eeaa 8a29 	vfma.f32	s16, s20, s19
}
 801c7a0:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
 801c7a4:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
 801c7a8:	ecbd 8b0a 	vpop	{d8-d12}
 801c7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c7b0:	3f7ff972 	.word	0x3f7ff972

0801c7b4 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 801c7b4:	4770      	bx	lr
 801c7b6:	bf00      	nop

0801c7b8 <LEAF_init>:
{
 801c7b8:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 801c7ba:	6200      	str	r0, [r0, #32]
{
 801c7bc:	4604      	mov	r4, r0
 801c7be:	461d      	mov	r5, r3
 801c7c0:	ed2d 8b02 	vpush	{d8}
 801c7c4:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 801c7c8:	f7fa f952 	bl	8016a70 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 801c7cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801c7d0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801c804 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 801c7d4:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 801c7d6:	4b0c      	ldr	r3, [pc, #48]	; (801c808 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 801c7d8:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 801c7dc:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 801c7e0:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 801c7e2:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 801c7e4:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 801c7e8:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 801c7ec:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801c7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 801c7f4:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801c7f8:	edc4 7a03 	vstr	s15, [r4, #12]
}
 801c7fc:	ecbd 8b02 	vpop	{d8}
 801c800:	bd38      	pop	{r3, r4, r5, pc}
 801c802:	bf00      	nop
 801c804:	40c90fdb 	.word	0x40c90fdb
 801c808:	0801c7b5 	.word	0x0801c7b5

0801c80c <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 801c80c:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 801c80e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801c812:	2401      	movs	r4, #1
 801c814:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 801c816:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 801c81a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801c81c:	4718      	bx	r3
 801c81e:	bf00      	nop

0801c820 <arm_sin_f32>:
 801c820:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801c8a0 <arm_sin_f32+0x80>
 801c824:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c828:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c82c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c834:	d504      	bpl.n	801c840 <arm_sin_f32+0x20>
 801c836:	ee17 3a90 	vmov	r3, s15
 801c83a:	3b01      	subs	r3, #1
 801c83c:	ee07 3a90 	vmov	s15, r3
 801c840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c844:	eddf 6a17 	vldr	s13, [pc, #92]	; 801c8a4 <arm_sin_f32+0x84>
 801c848:	ee70 7a67 	vsub.f32	s15, s0, s15
 801c84c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c850:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801c854:	ee17 3a10 	vmov	r3, s14
 801c858:	b29b      	uxth	r3, r3
 801c85a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c85e:	d21a      	bcs.n	801c896 <arm_sin_f32+0x76>
 801c860:	ee07 3a10 	vmov	s14, r3
 801c864:	1c59      	adds	r1, r3, #1
 801c866:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801c86a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801c86e:	4a0e      	ldr	r2, [pc, #56]	; (801c8a8 <arm_sin_f32+0x88>)
 801c870:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c878:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801c87c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c880:	edd3 6a00 	vldr	s13, [r3]
 801c884:	ed92 7a00 	vldr	s14, [r2]
 801c888:	ee20 0a26 	vmul.f32	s0, s0, s13
 801c88c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c890:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c894:	4770      	bx	lr
 801c896:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c89a:	2101      	movs	r1, #1
 801c89c:	2300      	movs	r3, #0
 801c89e:	e7e6      	b.n	801c86e <arm_sin_f32+0x4e>
 801c8a0:	3e22f983 	.word	0x3e22f983
 801c8a4:	44000000 	.word	0x44000000
 801c8a8:	08036170 	.word	0x08036170

0801c8ac <__libc_init_array>:
 801c8ac:	b570      	push	{r4, r5, r6, lr}
 801c8ae:	4d0d      	ldr	r5, [pc, #52]	; (801c8e4 <__libc_init_array+0x38>)
 801c8b0:	4c0d      	ldr	r4, [pc, #52]	; (801c8e8 <__libc_init_array+0x3c>)
 801c8b2:	1b64      	subs	r4, r4, r5
 801c8b4:	10a4      	asrs	r4, r4, #2
 801c8b6:	2600      	movs	r6, #0
 801c8b8:	42a6      	cmp	r6, r4
 801c8ba:	d109      	bne.n	801c8d0 <__libc_init_array+0x24>
 801c8bc:	4d0b      	ldr	r5, [pc, #44]	; (801c8ec <__libc_init_array+0x40>)
 801c8be:	4c0c      	ldr	r4, [pc, #48]	; (801c8f0 <__libc_init_array+0x44>)
 801c8c0:	f002 fafa 	bl	801eeb8 <_init>
 801c8c4:	1b64      	subs	r4, r4, r5
 801c8c6:	10a4      	asrs	r4, r4, #2
 801c8c8:	2600      	movs	r6, #0
 801c8ca:	42a6      	cmp	r6, r4
 801c8cc:	d105      	bne.n	801c8da <__libc_init_array+0x2e>
 801c8ce:	bd70      	pop	{r4, r5, r6, pc}
 801c8d0:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8d4:	4798      	blx	r3
 801c8d6:	3601      	adds	r6, #1
 801c8d8:	e7ee      	b.n	801c8b8 <__libc_init_array+0xc>
 801c8da:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8de:	4798      	blx	r3
 801c8e0:	3601      	adds	r6, #1
 801c8e2:	e7f2      	b.n	801c8ca <__libc_init_array+0x1e>
 801c8e4:	08037db0 	.word	0x08037db0
 801c8e8:	08037db0 	.word	0x08037db0
 801c8ec:	08037db0 	.word	0x08037db0
 801c8f0:	08037db4 	.word	0x08037db4

0801c8f4 <__itoa>:
 801c8f4:	1e93      	subs	r3, r2, #2
 801c8f6:	2b22      	cmp	r3, #34	; 0x22
 801c8f8:	b510      	push	{r4, lr}
 801c8fa:	460c      	mov	r4, r1
 801c8fc:	d904      	bls.n	801c908 <__itoa+0x14>
 801c8fe:	2300      	movs	r3, #0
 801c900:	700b      	strb	r3, [r1, #0]
 801c902:	461c      	mov	r4, r3
 801c904:	4620      	mov	r0, r4
 801c906:	bd10      	pop	{r4, pc}
 801c908:	2a0a      	cmp	r2, #10
 801c90a:	d109      	bne.n	801c920 <__itoa+0x2c>
 801c90c:	2800      	cmp	r0, #0
 801c90e:	da07      	bge.n	801c920 <__itoa+0x2c>
 801c910:	232d      	movs	r3, #45	; 0x2d
 801c912:	700b      	strb	r3, [r1, #0]
 801c914:	4240      	negs	r0, r0
 801c916:	2101      	movs	r1, #1
 801c918:	4421      	add	r1, r4
 801c91a:	f000 f841 	bl	801c9a0 <__utoa>
 801c91e:	e7f1      	b.n	801c904 <__itoa+0x10>
 801c920:	2100      	movs	r1, #0
 801c922:	e7f9      	b.n	801c918 <__itoa+0x24>

0801c924 <itoa>:
 801c924:	f7ff bfe6 	b.w	801c8f4 <__itoa>

0801c928 <memcpy>:
 801c928:	440a      	add	r2, r1
 801c92a:	4291      	cmp	r1, r2
 801c92c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c930:	d100      	bne.n	801c934 <memcpy+0xc>
 801c932:	4770      	bx	lr
 801c934:	b510      	push	{r4, lr}
 801c936:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c93a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c93e:	4291      	cmp	r1, r2
 801c940:	d1f9      	bne.n	801c936 <memcpy+0xe>
 801c942:	bd10      	pop	{r4, pc}

0801c944 <memset>:
 801c944:	4402      	add	r2, r0
 801c946:	4603      	mov	r3, r0
 801c948:	4293      	cmp	r3, r2
 801c94a:	d100      	bne.n	801c94e <memset+0xa>
 801c94c:	4770      	bx	lr
 801c94e:	f803 1b01 	strb.w	r1, [r3], #1
 801c952:	e7f9      	b.n	801c948 <memset+0x4>

0801c954 <frexpf>:
 801c954:	ee10 3a10 	vmov	r3, s0
 801c958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c95c:	2100      	movs	r1, #0
 801c95e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801c962:	6001      	str	r1, [r0, #0]
 801c964:	da19      	bge.n	801c99a <frexpf+0x46>
 801c966:	b1c2      	cbz	r2, 801c99a <frexpf+0x46>
 801c968:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801c96c:	d10a      	bne.n	801c984 <frexpf+0x30>
 801c96e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801c99c <frexpf+0x48>
 801c972:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c976:	f06f 0118 	mvn.w	r1, #24
 801c97a:	ee17 3a90 	vmov	r3, s15
 801c97e:	6001      	str	r1, [r0, #0]
 801c980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c984:	6801      	ldr	r1, [r0, #0]
 801c986:	15d2      	asrs	r2, r2, #23
 801c988:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c98c:	3a7e      	subs	r2, #126	; 0x7e
 801c98e:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801c992:	440a      	add	r2, r1
 801c994:	ee00 3a10 	vmov	s0, r3
 801c998:	6002      	str	r2, [r0, #0]
 801c99a:	4770      	bx	lr
 801c99c:	4c000000 	.word	0x4c000000

0801c9a0 <__utoa>:
 801c9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9a2:	4c1f      	ldr	r4, [pc, #124]	; (801ca20 <__utoa+0x80>)
 801c9a4:	b08b      	sub	sp, #44	; 0x2c
 801c9a6:	4605      	mov	r5, r0
 801c9a8:	460b      	mov	r3, r1
 801c9aa:	466e      	mov	r6, sp
 801c9ac:	f104 0c20 	add.w	ip, r4, #32
 801c9b0:	6820      	ldr	r0, [r4, #0]
 801c9b2:	6861      	ldr	r1, [r4, #4]
 801c9b4:	4637      	mov	r7, r6
 801c9b6:	c703      	stmia	r7!, {r0, r1}
 801c9b8:	3408      	adds	r4, #8
 801c9ba:	4564      	cmp	r4, ip
 801c9bc:	463e      	mov	r6, r7
 801c9be:	d1f7      	bne.n	801c9b0 <__utoa+0x10>
 801c9c0:	7921      	ldrb	r1, [r4, #4]
 801c9c2:	7139      	strb	r1, [r7, #4]
 801c9c4:	1e91      	subs	r1, r2, #2
 801c9c6:	6820      	ldr	r0, [r4, #0]
 801c9c8:	6038      	str	r0, [r7, #0]
 801c9ca:	2922      	cmp	r1, #34	; 0x22
 801c9cc:	f04f 0100 	mov.w	r1, #0
 801c9d0:	d904      	bls.n	801c9dc <__utoa+0x3c>
 801c9d2:	7019      	strb	r1, [r3, #0]
 801c9d4:	460b      	mov	r3, r1
 801c9d6:	4618      	mov	r0, r3
 801c9d8:	b00b      	add	sp, #44	; 0x2c
 801c9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9dc:	1e58      	subs	r0, r3, #1
 801c9de:	4684      	mov	ip, r0
 801c9e0:	fbb5 f7f2 	udiv	r7, r5, r2
 801c9e4:	fb02 5617 	mls	r6, r2, r7, r5
 801c9e8:	3628      	adds	r6, #40	; 0x28
 801c9ea:	446e      	add	r6, sp
 801c9ec:	460c      	mov	r4, r1
 801c9ee:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801c9f2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801c9f6:	462e      	mov	r6, r5
 801c9f8:	42b2      	cmp	r2, r6
 801c9fa:	f101 0101 	add.w	r1, r1, #1
 801c9fe:	463d      	mov	r5, r7
 801ca00:	d9ee      	bls.n	801c9e0 <__utoa+0x40>
 801ca02:	2200      	movs	r2, #0
 801ca04:	545a      	strb	r2, [r3, r1]
 801ca06:	1919      	adds	r1, r3, r4
 801ca08:	1aa5      	subs	r5, r4, r2
 801ca0a:	42aa      	cmp	r2, r5
 801ca0c:	dae3      	bge.n	801c9d6 <__utoa+0x36>
 801ca0e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801ca12:	780e      	ldrb	r6, [r1, #0]
 801ca14:	7006      	strb	r6, [r0, #0]
 801ca16:	3201      	adds	r2, #1
 801ca18:	f801 5901 	strb.w	r5, [r1], #-1
 801ca1c:	e7f4      	b.n	801ca08 <__utoa+0x68>
 801ca1e:	bf00      	nop
 801ca20:	08036974 	.word	0x08036974

0801ca24 <sinf_poly>:
 801ca24:	07cb      	lsls	r3, r1, #31
 801ca26:	d412      	bmi.n	801ca4e <sinf_poly+0x2a>
 801ca28:	ee21 5b00 	vmul.f64	d5, d1, d0
 801ca2c:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 801ca30:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801ca34:	eea6 7b01 	vfma.f64	d7, d6, d1
 801ca38:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 801ca3c:	ee21 1b05 	vmul.f64	d1, d1, d5
 801ca40:	eea6 0b05 	vfma.f64	d0, d6, d5
 801ca44:	eea7 0b01 	vfma.f64	d0, d7, d1
 801ca48:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ca4c:	4770      	bx	lr
 801ca4e:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801ca52:	ee21 5b01 	vmul.f64	d5, d1, d1
 801ca56:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801ca5a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801ca5e:	eea1 7b06 	vfma.f64	d7, d1, d6
 801ca62:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801ca66:	eea1 0b06 	vfma.f64	d0, d1, d6
 801ca6a:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801ca6e:	ee21 1b05 	vmul.f64	d1, d1, d5
 801ca72:	eea5 0b06 	vfma.f64	d0, d5, d6
 801ca76:	e7e5      	b.n	801ca44 <sinf_poly+0x20>

0801ca78 <cosf>:
 801ca78:	b538      	push	{r3, r4, r5, lr}
 801ca7a:	ee10 4a10 	vmov	r4, s0
 801ca7e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801ca82:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801ca86:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801ca8a:	d21f      	bcs.n	801cacc <cosf+0x54>
 801ca8c:	ee27 0b07 	vmul.f64	d0, d7, d7
 801ca90:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801ca94:	f0c0 8088 	bcc.w	801cba8 <cosf+0x130>
 801ca98:	ee20 4b00 	vmul.f64	d4, d0, d0
 801ca9c:	4b46      	ldr	r3, [pc, #280]	; (801cbb8 <cosf+0x140>)
 801ca9e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 801caa2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 801caa6:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 801caaa:	eea0 6b05 	vfma.f64	d6, d0, d5
 801caae:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 801cab2:	eea0 7b05 	vfma.f64	d7, d0, d5
 801cab6:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 801caba:	ee20 0b04 	vmul.f64	d0, d0, d4
 801cabe:	eea4 7b05 	vfma.f64	d7, d4, d5
 801cac2:	eea6 7b00 	vfma.f64	d7, d6, d0
 801cac6:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 801caca:	bd38      	pop	{r3, r4, r5, pc}
 801cacc:	f240 422e 	movw	r2, #1070	; 0x42e
 801cad0:	4293      	cmp	r3, r2
 801cad2:	d82b      	bhi.n	801cb2c <cosf+0xb4>
 801cad4:	4b38      	ldr	r3, [pc, #224]	; (801cbb8 <cosf+0x140>)
 801cad6:	ed93 6b08 	vldr	d6, [r3, #32]
 801cada:	ee27 6b06 	vmul.f64	d6, d7, d6
 801cade:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801cae2:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801cae6:	ee16 1a90 	vmov	r1, s13
 801caea:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801caee:	1609      	asrs	r1, r1, #24
 801caf0:	ee06 1a90 	vmov	s13, r1
 801caf4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801caf8:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 801cafc:	f001 0203 	and.w	r2, r1, #3
 801cb00:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cb04:	eea5 7b46 	vfms.f64	d7, d5, d6
 801cb08:	eeb0 0b47 	vmov.f64	d0, d7
 801cb0c:	ed92 7b00 	vldr	d7, [r2]
 801cb10:	ee20 1b00 	vmul.f64	d1, d0, d0
 801cb14:	f011 0f02 	tst.w	r1, #2
 801cb18:	bf08      	it	eq
 801cb1a:	4618      	moveq	r0, r3
 801cb1c:	f081 0101 	eor.w	r1, r1, #1
 801cb20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb24:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cb28:	f7ff bf7c 	b.w	801ca24 <sinf_poly>
 801cb2c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801cb30:	d236      	bcs.n	801cba0 <cosf+0x128>
 801cb32:	4a22      	ldr	r2, [pc, #136]	; (801cbbc <cosf+0x144>)
 801cb34:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801cb38:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 801cb3c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801cb40:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 801cb44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801cb48:	4083      	lsls	r3, r0
 801cb4a:	6a28      	ldr	r0, [r5, #32]
 801cb4c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801cb50:	fba3 1000 	umull	r1, r0, r3, r0
 801cb54:	6929      	ldr	r1, [r5, #16]
 801cb56:	435a      	muls	r2, r3
 801cb58:	fbe3 0201 	umlal	r0, r2, r3, r1
 801cb5c:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 801cb60:	0f8d      	lsrs	r5, r1, #30
 801cb62:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 801cb66:	1a51      	subs	r1, r2, r1
 801cb68:	f7e3 fd4c 	bl	8000604 <__aeabi_l2d>
 801cb6c:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801cb70:	4b11      	ldr	r3, [pc, #68]	; (801cbb8 <cosf+0x140>)
 801cb72:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 801cbb0 <cosf+0x138>
 801cb76:	ec41 0b16 	vmov	d6, r0, r1
 801cb7a:	f004 0203 	and.w	r2, r4, #3
 801cb7e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801cb82:	f014 0f02 	tst.w	r4, #2
 801cb86:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801cb8a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cb8e:	ed92 0b00 	vldr	d0, [r2]
 801cb92:	ee27 1b07 	vmul.f64	d1, d7, d7
 801cb96:	f085 0101 	eor.w	r1, r5, #1
 801cb9a:	bf08      	it	eq
 801cb9c:	4618      	moveq	r0, r3
 801cb9e:	e7bf      	b.n	801cb20 <cosf+0xa8>
 801cba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cba4:	f000 b964 	b.w	801ce70 <__math_invalidf>
 801cba8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801cbac:	e78d      	b.n	801caca <cosf+0x52>
 801cbae:	bf00      	nop
 801cbb0:	54442d18 	.word	0x54442d18
 801cbb4:	3c1921fb 	.word	0x3c1921fb
 801cbb8:	08037728 	.word	0x08037728
 801cbbc:	080376c8 	.word	0x080376c8

0801cbc0 <exp>:
 801cbc0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 801cbc2:	ee10 3a90 	vmov	r3, s1
 801cbc6:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801cbca:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801cbce:	18a2      	adds	r2, r4, r2
 801cbd0:	2a3e      	cmp	r2, #62	; 0x3e
 801cbd2:	ee10 1a10 	vmov	r1, s0
 801cbd6:	d922      	bls.n	801cc1e <exp+0x5e>
 801cbd8:	2a00      	cmp	r2, #0
 801cbda:	da06      	bge.n	801cbea <exp+0x2a>
 801cbdc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801cbe0:	ee30 0b07 	vadd.f64	d0, d0, d7
 801cbe4:	b004      	add	sp, #16
 801cbe6:	bcf0      	pop	{r4, r5, r6, r7}
 801cbe8:	4770      	bx	lr
 801cbea:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 801cbee:	f04f 0000 	mov.w	r0, #0
 801cbf2:	d913      	bls.n	801cc1c <exp+0x5c>
 801cbf4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 801cbf8:	bf08      	it	eq
 801cbfa:	4281      	cmpeq	r1, r0
 801cbfc:	f000 80a0 	beq.w	801cd40 <exp+0x180>
 801cc00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801cc04:	4294      	cmp	r4, r2
 801cc06:	d0e9      	beq.n	801cbdc <exp+0x1c>
 801cc08:	4283      	cmp	r3, r0
 801cc0a:	da03      	bge.n	801cc14 <exp+0x54>
 801cc0c:	b004      	add	sp, #16
 801cc0e:	bcf0      	pop	{r4, r5, r6, r7}
 801cc10:	f000 b8c6 	b.w	801cda0 <__math_uflow>
 801cc14:	b004      	add	sp, #16
 801cc16:	bcf0      	pop	{r4, r5, r6, r7}
 801cc18:	f000 b8ca 	b.w	801cdb0 <__math_oflow>
 801cc1c:	4604      	mov	r4, r0
 801cc1e:	4950      	ldr	r1, [pc, #320]	; (801cd60 <exp+0x1a0>)
 801cc20:	ed91 6b02 	vldr	d6, [r1, #8]
 801cc24:	ed91 5b00 	vldr	d5, [r1]
 801cc28:	eeb0 7b46 	vmov.f64	d7, d6
 801cc2c:	eea5 7b00 	vfma.f64	d7, d5, d0
 801cc30:	ee17 5a10 	vmov	r5, s14
 801cc34:	ee37 7b46 	vsub.f64	d7, d7, d6
 801cc38:	ed91 6b04 	vldr	d6, [r1, #16]
 801cc3c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801cc40:	eea6 0b07 	vfma.f64	d0, d6, d7
 801cc44:	ed91 6b06 	vldr	d6, [r1, #24]
 801cc48:	18d8      	adds	r0, r3, r3
 801cc4a:	f100 030f 	add.w	r3, r0, #15
 801cc4e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801cc52:	eea6 0b07 	vfma.f64	d0, d6, d7
 801cc56:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801cc5a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801cc5e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801cc62:	ed91 5b08 	vldr	d5, [r1, #32]
 801cc66:	ee30 6b06 	vadd.f64	d6, d0, d6
 801cc6a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801cc6e:	eea4 5b00 	vfma.f64	d5, d4, d0
 801cc72:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801cc76:	eea5 6b07 	vfma.f64	d6, d5, d7
 801cc7a:	ee27 7b07 	vmul.f64	d7, d7, d7
 801cc7e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801cc82:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801cc86:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801cc8a:	eea4 5b00 	vfma.f64	d5, d4, d0
 801cc8e:	2600      	movs	r6, #0
 801cc90:	19f2      	adds	r2, r6, r7
 801cc92:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801cc96:	eea7 6b05 	vfma.f64	d6, d7, d5
 801cc9a:	2c00      	cmp	r4, #0
 801cc9c:	d14b      	bne.n	801cd36 <exp+0x176>
 801cc9e:	42b5      	cmp	r5, r6
 801cca0:	db10      	blt.n	801ccc4 <exp+0x104>
 801cca2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801cca6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 801cd48 <exp+0x188>
 801ccaa:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801ccae:	4610      	mov	r0, r2
 801ccb0:	ec41 0b10 	vmov	d0, r0, r1
 801ccb4:	eea6 0b00 	vfma.f64	d0, d6, d0
 801ccb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ccbc:	b004      	add	sp, #16
 801ccbe:	bcf0      	pop	{r4, r5, r6, r7}
 801ccc0:	f000 b88a 	b.w	801cdd8 <__math_check_oflow>
 801ccc4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801ccc8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801cccc:	4610      	mov	r0, r2
 801ccce:	ec41 0b17 	vmov	d7, r0, r1
 801ccd2:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801ccd6:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ccda:	ee37 5b06 	vadd.f64	d5, d7, d6
 801ccde:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801cce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cce6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801cd50 <exp+0x190>
 801ccea:	d51e      	bpl.n	801cd2a <exp+0x16a>
 801ccec:	ee35 3b04 	vadd.f64	d3, d5, d4
 801ccf0:	ee37 7b45 	vsub.f64	d7, d7, d5
 801ccf4:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ccf8:	ee34 6b43 	vsub.f64	d6, d4, d3
 801ccfc:	ee36 5b05 	vadd.f64	d5, d6, d5
 801cd00:	ee35 5b07 	vadd.f64	d5, d5, d7
 801cd04:	ee35 5b03 	vadd.f64	d5, d5, d3
 801cd08:	ee35 5b44 	vsub.f64	d5, d5, d4
 801cd0c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 801cd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd14:	d101      	bne.n	801cd1a <exp+0x15a>
 801cd16:	ed9f 5b10 	vldr	d5, [pc, #64]	; 801cd58 <exp+0x198>
 801cd1a:	ed8d 0b00 	vstr	d0, [sp]
 801cd1e:	ed9d 7b00 	vldr	d7, [sp]
 801cd22:	ee27 7b00 	vmul.f64	d7, d7, d0
 801cd26:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cd2a:	ee25 0b00 	vmul.f64	d0, d5, d0
 801cd2e:	b004      	add	sp, #16
 801cd30:	bcf0      	pop	{r4, r5, r6, r7}
 801cd32:	f000 b845 	b.w	801cdc0 <__math_check_uflow>
 801cd36:	ec43 2b10 	vmov	d0, r2, r3
 801cd3a:	eea6 0b00 	vfma.f64	d0, d6, d0
 801cd3e:	e751      	b.n	801cbe4 <exp+0x24>
 801cd40:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801cd58 <exp+0x198>
 801cd44:	e74e      	b.n	801cbe4 <exp+0x24>
 801cd46:	bf00      	nop
 801cd48:	00000000 	.word	0x00000000
 801cd4c:	7f000000 	.word	0x7f000000
 801cd50:	00000000 	.word	0x00000000
 801cd54:	00100000 	.word	0x00100000
	...
 801cd60:	080369a0 	.word	0x080369a0

0801cd64 <with_errno>:
 801cd64:	b513      	push	{r0, r1, r4, lr}
 801cd66:	4604      	mov	r4, r0
 801cd68:	ed8d 0b00 	vstr	d0, [sp]
 801cd6c:	f002 f89e 	bl	801eeac <__errno>
 801cd70:	ed9d 0b00 	vldr	d0, [sp]
 801cd74:	6004      	str	r4, [r0, #0]
 801cd76:	b002      	add	sp, #8
 801cd78:	bd10      	pop	{r4, pc}

0801cd7a <xflow>:
 801cd7a:	b082      	sub	sp, #8
 801cd7c:	b158      	cbz	r0, 801cd96 <xflow+0x1c>
 801cd7e:	eeb1 7b40 	vneg.f64	d7, d0
 801cd82:	ed8d 7b00 	vstr	d7, [sp]
 801cd86:	ed9d 7b00 	vldr	d7, [sp]
 801cd8a:	2022      	movs	r0, #34	; 0x22
 801cd8c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cd90:	b002      	add	sp, #8
 801cd92:	f7ff bfe7 	b.w	801cd64 <with_errno>
 801cd96:	eeb0 7b40 	vmov.f64	d7, d0
 801cd9a:	e7f2      	b.n	801cd82 <xflow+0x8>
 801cd9c:	0000      	movs	r0, r0
	...

0801cda0 <__math_uflow>:
 801cda0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cda8 <__math_uflow+0x8>
 801cda4:	f7ff bfe9 	b.w	801cd7a <xflow>
 801cda8:	00000000 	.word	0x00000000
 801cdac:	10000000 	.word	0x10000000

0801cdb0 <__math_oflow>:
 801cdb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cdb8 <__math_oflow+0x8>
 801cdb4:	f7ff bfe1 	b.w	801cd7a <xflow>
 801cdb8:	00000000 	.word	0x00000000
 801cdbc:	70000000 	.word	0x70000000

0801cdc0 <__math_check_uflow>:
 801cdc0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801cdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cdc8:	d102      	bne.n	801cdd0 <__math_check_uflow+0x10>
 801cdca:	2022      	movs	r0, #34	; 0x22
 801cdcc:	f7ff bfca 	b.w	801cd64 <with_errno>
 801cdd0:	4770      	bx	lr
 801cdd2:	0000      	movs	r0, r0
 801cdd4:	0000      	movs	r0, r0
	...

0801cdd8 <__math_check_oflow>:
 801cdd8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801cdf8 <__math_check_oflow+0x20>
 801cddc:	eeb0 7bc0 	vabs.f64	d7, d0
 801cde0:	eeb4 7b46 	vcmp.f64	d7, d6
 801cde4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cde8:	dd02      	ble.n	801cdf0 <__math_check_oflow+0x18>
 801cdea:	2022      	movs	r0, #34	; 0x22
 801cdec:	f7ff bfba 	b.w	801cd64 <with_errno>
 801cdf0:	4770      	bx	lr
 801cdf2:	bf00      	nop
 801cdf4:	f3af 8000 	nop.w
 801cdf8:	ffffffff 	.word	0xffffffff
 801cdfc:	7fefffff 	.word	0x7fefffff

0801ce00 <with_errnof>:
 801ce00:	b513      	push	{r0, r1, r4, lr}
 801ce02:	4604      	mov	r4, r0
 801ce04:	ed8d 0a01 	vstr	s0, [sp, #4]
 801ce08:	f002 f850 	bl	801eeac <__errno>
 801ce0c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ce10:	6004      	str	r4, [r0, #0]
 801ce12:	b002      	add	sp, #8
 801ce14:	bd10      	pop	{r4, pc}

0801ce16 <xflowf>:
 801ce16:	b130      	cbz	r0, 801ce26 <xflowf+0x10>
 801ce18:	eef1 7a40 	vneg.f32	s15, s0
 801ce1c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ce20:	2022      	movs	r0, #34	; 0x22
 801ce22:	f7ff bfed 	b.w	801ce00 <with_errnof>
 801ce26:	eef0 7a40 	vmov.f32	s15, s0
 801ce2a:	e7f7      	b.n	801ce1c <xflowf+0x6>

0801ce2c <__math_uflowf>:
 801ce2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ce34 <__math_uflowf+0x8>
 801ce30:	f7ff bff1 	b.w	801ce16 <xflowf>
 801ce34:	10000000 	.word	0x10000000

0801ce38 <__math_may_uflowf>:
 801ce38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ce40 <__math_may_uflowf+0x8>
 801ce3c:	f7ff bfeb 	b.w	801ce16 <xflowf>
 801ce40:	1a200000 	.word	0x1a200000

0801ce44 <__math_oflowf>:
 801ce44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ce4c <__math_oflowf+0x8>
 801ce48:	f7ff bfe5 	b.w	801ce16 <xflowf>
 801ce4c:	70000000 	.word	0x70000000

0801ce50 <__math_divzerof>:
 801ce50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ce54:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801ce58:	2800      	cmp	r0, #0
 801ce5a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801ce5e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801ce6c <__math_divzerof+0x1c>
 801ce62:	2022      	movs	r0, #34	; 0x22
 801ce64:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801ce68:	f7ff bfca 	b.w	801ce00 <with_errnof>
 801ce6c:	00000000 	.word	0x00000000

0801ce70 <__math_invalidf>:
 801ce70:	eef0 7a40 	vmov.f32	s15, s0
 801ce74:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ce78:	eef4 7a67 	vcmp.f32	s15, s15
 801ce7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce80:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801ce84:	d602      	bvs.n	801ce8c <__math_invalidf+0x1c>
 801ce86:	2021      	movs	r0, #33	; 0x21
 801ce88:	f7ff bfba 	b.w	801ce00 <with_errnof>
 801ce8c:	4770      	bx	lr
	...

0801ce90 <tan>:
 801ce90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ce92:	eeb0 7b40 	vmov.f64	d7, d0
 801ce96:	ee17 3a90 	vmov	r3, s15
 801ce9a:	4a15      	ldr	r2, [pc, #84]	; (801cef0 <tan+0x60>)
 801ce9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cea0:	4293      	cmp	r3, r2
 801cea2:	dc07      	bgt.n	801ceb4 <tan+0x24>
 801cea4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 801cee8 <tan+0x58>
 801cea8:	2001      	movs	r0, #1
 801ceaa:	b005      	add	sp, #20
 801ceac:	f85d eb04 	ldr.w	lr, [sp], #4
 801ceb0:	f001 b8ba 	b.w	801e028 <__kernel_tan>
 801ceb4:	4a0f      	ldr	r2, [pc, #60]	; (801cef4 <tan+0x64>)
 801ceb6:	4293      	cmp	r3, r2
 801ceb8:	dd04      	ble.n	801cec4 <tan+0x34>
 801ceba:	ee30 0b40 	vsub.f64	d0, d0, d0
 801cebe:	b005      	add	sp, #20
 801cec0:	f85d fb04 	ldr.w	pc, [sp], #4
 801cec4:	4668      	mov	r0, sp
 801cec6:	f000 fb97 	bl	801d5f8 <__ieee754_rem_pio2>
 801ceca:	0040      	lsls	r0, r0, #1
 801cecc:	f000 0002 	and.w	r0, r0, #2
 801ced0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801ced4:	ed9d 0b00 	vldr	d0, [sp]
 801ced8:	f1c0 0001 	rsb	r0, r0, #1
 801cedc:	f001 f8a4 	bl	801e028 <__kernel_tan>
 801cee0:	e7ed      	b.n	801cebe <tan+0x2e>
 801cee2:	bf00      	nop
 801cee4:	f3af 8000 	nop.w
	...
 801cef0:	3fe921fb 	.word	0x3fe921fb
 801cef4:	7fefffff 	.word	0x7fefffff

0801cef8 <expf>:
 801cef8:	ee10 2a10 	vmov	r2, s0
 801cefc:	f240 412a 	movw	r1, #1066	; 0x42a
 801cf00:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801cf04:	428b      	cmp	r3, r1
 801cf06:	b430      	push	{r4, r5}
 801cf08:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801cf0c:	d92a      	bls.n	801cf64 <expf+0x6c>
 801cf0e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801cf12:	d058      	beq.n	801cfc6 <expf+0xce>
 801cf14:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801cf18:	d303      	bcc.n	801cf22 <expf+0x2a>
 801cf1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801cf1e:	bc30      	pop	{r4, r5}
 801cf20:	4770      	bx	lr
 801cf22:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801cfcc <expf+0xd4>
 801cf26:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf2e:	dd03      	ble.n	801cf38 <expf+0x40>
 801cf30:	bc30      	pop	{r4, r5}
 801cf32:	2000      	movs	r0, #0
 801cf34:	f7ff bf86 	b.w	801ce44 <__math_oflowf>
 801cf38:	eddf 7a25 	vldr	s15, [pc, #148]	; 801cfd0 <expf+0xd8>
 801cf3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cf40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf44:	d503      	bpl.n	801cf4e <expf+0x56>
 801cf46:	bc30      	pop	{r4, r5}
 801cf48:	2000      	movs	r0, #0
 801cf4a:	f7ff bf6f 	b.w	801ce2c <__math_uflowf>
 801cf4e:	eddf 7a21 	vldr	s15, [pc, #132]	; 801cfd4 <expf+0xdc>
 801cf52:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801cf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf5a:	d503      	bpl.n	801cf64 <expf+0x6c>
 801cf5c:	bc30      	pop	{r4, r5}
 801cf5e:	2000      	movs	r0, #0
 801cf60:	f7ff bf6a 	b.w	801ce38 <__math_may_uflowf>
 801cf64:	4b1c      	ldr	r3, [pc, #112]	; (801cfd8 <expf+0xe0>)
 801cf66:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801cf6a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801cf6e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801cf72:	eeb0 7b44 	vmov.f64	d7, d4
 801cf76:	eea5 7b06 	vfma.f64	d7, d5, d6
 801cf7a:	ee17 0a10 	vmov	r0, s14
 801cf7e:	ee37 7b44 	vsub.f64	d7, d7, d4
 801cf82:	f000 021f 	and.w	r2, r0, #31
 801cf86:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801cf8a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801cf8e:	ee27 4b07 	vmul.f64	d4, d7, d7
 801cf92:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801cf96:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801cf9a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801cf9e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801cfa2:	684d      	ldr	r5, [r1, #4]
 801cfa4:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801cfa8:	2100      	movs	r1, #0
 801cfaa:	190a      	adds	r2, r1, r4
 801cfac:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801cfb0:	eea5 0b07 	vfma.f64	d0, d5, d7
 801cfb4:	ec43 2b17 	vmov	d7, r2, r3
 801cfb8:	eea6 0b04 	vfma.f64	d0, d6, d4
 801cfbc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cfc0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801cfc4:	e7ab      	b.n	801cf1e <expf+0x26>
 801cfc6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801cfdc <expf+0xe4>
 801cfca:	e7a8      	b.n	801cf1e <expf+0x26>
 801cfcc:	42b17217 	.word	0x42b17217
 801cfd0:	c2cff1b4 	.word	0xc2cff1b4
 801cfd4:	c2ce8ecf 	.word	0xc2ce8ecf
 801cfd8:	08037210 	.word	0x08037210
 801cfdc:	00000000 	.word	0x00000000

0801cfe0 <fabsf>:
 801cfe0:	ee10 3a10 	vmov	r3, s0
 801cfe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cfe8:	ee00 3a10 	vmov	s0, r3
 801cfec:	4770      	bx	lr
	...

0801cff0 <logf>:
 801cff0:	ee10 3a10 	vmov	r3, s0
 801cff4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801cff8:	b410      	push	{r4}
 801cffa:	d055      	beq.n	801d0a8 <logf+0xb8>
 801cffc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 801d000:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801d004:	d31a      	bcc.n	801d03c <logf+0x4c>
 801d006:	005a      	lsls	r2, r3, #1
 801d008:	d104      	bne.n	801d014 <logf+0x24>
 801d00a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d00e:	2001      	movs	r0, #1
 801d010:	f7ff bf1e 	b.w	801ce50 <__math_divzerof>
 801d014:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d018:	d043      	beq.n	801d0a2 <logf+0xb2>
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	db02      	blt.n	801d024 <logf+0x34>
 801d01e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801d022:	d303      	bcc.n	801d02c <logf+0x3c>
 801d024:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d028:	f7ff bf22 	b.w	801ce70 <__math_invalidf>
 801d02c:	eddf 7a20 	vldr	s15, [pc, #128]	; 801d0b0 <logf+0xc0>
 801d030:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d034:	ee10 3a10 	vmov	r3, s0
 801d038:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 801d03c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 801d040:	491c      	ldr	r1, [pc, #112]	; (801d0b4 <logf+0xc4>)
 801d042:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 801d046:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801d04a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801d04e:	0dd4      	lsrs	r4, r2, #23
 801d050:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801d054:	05e4      	lsls	r4, r4, #23
 801d056:	ed90 6b00 	vldr	d6, [r0]
 801d05a:	1b1b      	subs	r3, r3, r4
 801d05c:	ee07 3a90 	vmov	s15, r3
 801d060:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801d064:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801d068:	15d2      	asrs	r2, r2, #23
 801d06a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801d06e:	ed90 6b02 	vldr	d6, [r0, #8]
 801d072:	ee20 4b00 	vmul.f64	d4, d0, d0
 801d076:	ee07 2a90 	vmov	s15, r2
 801d07a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d07e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d082:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 801d086:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801d08a:	eea5 7b00 	vfma.f64	d7, d5, d0
 801d08e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801d092:	ee30 0b06 	vadd.f64	d0, d0, d6
 801d096:	eea5 7b04 	vfma.f64	d7, d5, d4
 801d09a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d09e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d0a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0a6:	4770      	bx	lr
 801d0a8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801d0b8 <logf+0xc8>
 801d0ac:	e7f9      	b.n	801d0a2 <logf+0xb2>
 801d0ae:	bf00      	nop
 801d0b0:	4b000000 	.word	0x4b000000
 801d0b4:	08037478 	.word	0x08037478
 801d0b8:	00000000 	.word	0x00000000

0801d0bc <log2f>:
 801d0bc:	ee10 2a10 	vmov	r2, s0
 801d0c0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801d0c4:	b410      	push	{r4}
 801d0c6:	d055      	beq.n	801d174 <log2f+0xb8>
 801d0c8:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 801d0cc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801d0d0:	d31a      	bcc.n	801d108 <log2f+0x4c>
 801d0d2:	0053      	lsls	r3, r2, #1
 801d0d4:	d104      	bne.n	801d0e0 <log2f+0x24>
 801d0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0da:	2001      	movs	r0, #1
 801d0dc:	f7ff beb8 	b.w	801ce50 <__math_divzerof>
 801d0e0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801d0e4:	d043      	beq.n	801d16e <log2f+0xb2>
 801d0e6:	2a00      	cmp	r2, #0
 801d0e8:	db02      	blt.n	801d0f0 <log2f+0x34>
 801d0ea:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801d0ee:	d303      	bcc.n	801d0f8 <log2f+0x3c>
 801d0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0f4:	f7ff bebc 	b.w	801ce70 <__math_invalidf>
 801d0f8:	eddf 7a20 	vldr	s15, [pc, #128]	; 801d17c <log2f+0xc0>
 801d0fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d100:	ee10 3a10 	vmov	r3, s0
 801d104:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 801d108:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 801d10c:	491c      	ldr	r1, [pc, #112]	; (801d180 <log2f+0xc4>)
 801d10e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801d112:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 801d116:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 801d11a:	0ddc      	lsrs	r4, r3, #23
 801d11c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801d120:	05e4      	lsls	r4, r4, #23
 801d122:	ed90 5b00 	vldr	d5, [r0]
 801d126:	1b12      	subs	r2, r2, r4
 801d128:	ee07 2a90 	vmov	s15, r2
 801d12c:	15db      	asrs	r3, r3, #23
 801d12e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801d132:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d136:	ed90 7b02 	vldr	d7, [r0, #8]
 801d13a:	ee26 4b06 	vmul.f64	d4, d6, d6
 801d13e:	ee00 3a10 	vmov	s0, r3
 801d142:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801d146:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801d14a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d14e:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 801d152:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d156:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801d15a:	eea5 7b04 	vfma.f64	d7, d5, d4
 801d15e:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 801d162:	eea5 0b06 	vfma.f64	d0, d5, d6
 801d166:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d16a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d16e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d172:	4770      	bx	lr
 801d174:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801d184 <log2f+0xc8>
 801d178:	e7f9      	b.n	801d16e <log2f+0xb2>
 801d17a:	bf00      	nop
 801d17c:	4b000000 	.word	0x4b000000
 801d180:	08037358 	.word	0x08037358
 801d184:	00000000 	.word	0x00000000

0801d188 <lrintf>:
 801d188:	ee10 3a10 	vmov	r3, s0
 801d18c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d190:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 801d194:	281e      	cmp	r0, #30
 801d196:	b082      	sub	sp, #8
 801d198:	dc2e      	bgt.n	801d1f8 <lrintf+0x70>
 801d19a:	1c41      	adds	r1, r0, #1
 801d19c:	da02      	bge.n	801d1a4 <lrintf+0x1c>
 801d19e:	2000      	movs	r0, #0
 801d1a0:	b002      	add	sp, #8
 801d1a2:	4770      	bx	lr
 801d1a4:	2816      	cmp	r0, #22
 801d1a6:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801d1aa:	dd09      	ble.n	801d1c0 <lrintf+0x38>
 801d1ac:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801d1b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801d1b4:	3a96      	subs	r2, #150	; 0x96
 801d1b6:	4090      	lsls	r0, r2
 801d1b8:	2900      	cmp	r1, #0
 801d1ba:	d0f1      	beq.n	801d1a0 <lrintf+0x18>
 801d1bc:	4240      	negs	r0, r0
 801d1be:	e7ef      	b.n	801d1a0 <lrintf+0x18>
 801d1c0:	4b10      	ldr	r3, [pc, #64]	; (801d204 <lrintf+0x7c>)
 801d1c2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d1c6:	ed93 7a00 	vldr	s14, [r3]
 801d1ca:	ee37 0a00 	vadd.f32	s0, s14, s0
 801d1ce:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d1d2:	eddd 7a01 	vldr	s15, [sp, #4]
 801d1d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d1da:	ee17 3a90 	vmov	r3, s15
 801d1de:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801d1e2:	d0dc      	beq.n	801d19e <lrintf+0x16>
 801d1e4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801d1e8:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801d1ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801d1f0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801d1f4:	40d8      	lsrs	r0, r3
 801d1f6:	e7df      	b.n	801d1b8 <lrintf+0x30>
 801d1f8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d1fc:	ee17 0a90 	vmov	r0, s15
 801d200:	e7ce      	b.n	801d1a0 <lrintf+0x18>
 801d202:	bf00      	nop
 801d204:	08037598 	.word	0x08037598

0801d208 <checkint>:
 801d208:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801d20c:	2b7e      	cmp	r3, #126	; 0x7e
 801d20e:	dd10      	ble.n	801d232 <checkint+0x2a>
 801d210:	2b96      	cmp	r3, #150	; 0x96
 801d212:	dc0c      	bgt.n	801d22e <checkint+0x26>
 801d214:	2201      	movs	r2, #1
 801d216:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801d21a:	fa02 f303 	lsl.w	r3, r2, r3
 801d21e:	1e5a      	subs	r2, r3, #1
 801d220:	4202      	tst	r2, r0
 801d222:	d106      	bne.n	801d232 <checkint+0x2a>
 801d224:	4203      	tst	r3, r0
 801d226:	bf0c      	ite	eq
 801d228:	2002      	moveq	r0, #2
 801d22a:	2001      	movne	r0, #1
 801d22c:	4770      	bx	lr
 801d22e:	2002      	movs	r0, #2
 801d230:	4770      	bx	lr
 801d232:	2000      	movs	r0, #0
 801d234:	4770      	bx	lr
	...

0801d238 <powf>:
 801d238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d23a:	ee10 1a10 	vmov	r1, s0
 801d23e:	ee10 4a90 	vmov	r4, s1
 801d242:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801d246:	0062      	lsls	r2, r4, #1
 801d248:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801d24c:	eef0 7a40 	vmov.f32	s15, s0
 801d250:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801d254:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 801d258:	d252      	bcs.n	801d300 <powf+0xc8>
 801d25a:	4298      	cmp	r0, r3
 801d25c:	d252      	bcs.n	801d304 <powf+0xcc>
 801d25e:	2000      	movs	r0, #0
 801d260:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801d264:	4ca0      	ldr	r4, [pc, #640]	; (801d4e8 <powf+0x2b0>)
 801d266:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 801d26a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801d26e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801d272:	0dd2      	lsrs	r2, r2, #23
 801d274:	05d2      	lsls	r2, r2, #23
 801d276:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 801d27a:	1a8b      	subs	r3, r1, r2
 801d27c:	ed95 6b00 	vldr	d6, [r5]
 801d280:	ee07 3a90 	vmov	s15, r3
 801d284:	15d2      	asrs	r2, r2, #23
 801d286:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801d28a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801d28e:	ed95 6b02 	vldr	d6, [r5, #8]
 801d292:	ee25 2b05 	vmul.f64	d2, d5, d5
 801d296:	ee22 1b02 	vmul.f64	d1, d2, d2
 801d29a:	ee07 2a90 	vmov	s15, r2
 801d29e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801d2a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801d2a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d2aa:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 801d2ae:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 801d2b2:	eea5 3b06 	vfma.f64	d3, d5, d6
 801d2b6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 801d2ba:	eea5 6b04 	vfma.f64	d6, d5, d4
 801d2be:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801d2c2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801d2c6:	eea5 7b04 	vfma.f64	d7, d5, d4
 801d2ca:	eea2 7b06 	vfma.f64	d7, d2, d6
 801d2ce:	eea3 7b01 	vfma.f64	d7, d3, d1
 801d2d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d2d6:	ee10 3a90 	vmov	r3, s1
 801d2da:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801d2de:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801d2e2:	429a      	cmp	r2, r3
 801d2e4:	f0c0 80b1 	bcc.w	801d44a <powf+0x212>
 801d2e8:	ed9f 7b77 	vldr	d7, [pc, #476]	; 801d4c8 <powf+0x290>
 801d2ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801d2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2f4:	dd79      	ble.n	801d3ea <powf+0x1b2>
 801d2f6:	b003      	add	sp, #12
 801d2f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d2fc:	f7ff bda2 	b.w	801ce44 <__math_oflowf>
 801d300:	4298      	cmp	r0, r3
 801d302:	d32d      	bcc.n	801d360 <powf+0x128>
 801d304:	b952      	cbnz	r2, 801d31c <powf+0xe4>
 801d306:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 801d30a:	005b      	lsls	r3, r3, #1
 801d30c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 801d310:	f240 80c9 	bls.w	801d4a6 <powf+0x26e>
 801d314:	ee37 0aa0 	vadd.f32	s0, s15, s1
 801d318:	b003      	add	sp, #12
 801d31a:	bd30      	pop	{r4, r5, pc}
 801d31c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801d320:	d105      	bne.n	801d32e <powf+0xf6>
 801d322:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801d326:	0064      	lsls	r4, r4, #1
 801d328:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801d32c:	e7f0      	b.n	801d310 <powf+0xd8>
 801d32e:	004b      	lsls	r3, r1, #1
 801d330:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801d334:	d8ee      	bhi.n	801d314 <powf+0xdc>
 801d336:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801d33a:	d1eb      	bne.n	801d314 <powf+0xdc>
 801d33c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801d340:	f000 80b1 	beq.w	801d4a6 <powf+0x26e>
 801d344:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801d348:	ea6f 0404 	mvn.w	r4, r4
 801d34c:	bf34      	ite	cc
 801d34e:	2300      	movcc	r3, #0
 801d350:	2301      	movcs	r3, #1
 801d352:	0fe4      	lsrs	r4, r4, #31
 801d354:	42a3      	cmp	r3, r4
 801d356:	f040 80a9 	bne.w	801d4ac <powf+0x274>
 801d35a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801d35e:	e7db      	b.n	801d318 <powf+0xe0>
 801d360:	004d      	lsls	r5, r1, #1
 801d362:	1e6a      	subs	r2, r5, #1
 801d364:	429a      	cmp	r2, r3
 801d366:	d31c      	bcc.n	801d3a2 <powf+0x16a>
 801d368:	2900      	cmp	r1, #0
 801d36a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801d36e:	da0f      	bge.n	801d390 <powf+0x158>
 801d370:	ee10 0a90 	vmov	r0, s1
 801d374:	f7ff ff48 	bl	801d208 <checkint>
 801d378:	2801      	cmp	r0, #1
 801d37a:	d109      	bne.n	801d390 <powf+0x158>
 801d37c:	eeb1 0a40 	vneg.f32	s0, s0
 801d380:	b945      	cbnz	r5, 801d394 <powf+0x15c>
 801d382:	2c00      	cmp	r4, #0
 801d384:	dac8      	bge.n	801d318 <powf+0xe0>
 801d386:	b003      	add	sp, #12
 801d388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d38c:	f7ff bd60 	b.w	801ce50 <__math_divzerof>
 801d390:	2000      	movs	r0, #0
 801d392:	e7f5      	b.n	801d380 <powf+0x148>
 801d394:	2c00      	cmp	r4, #0
 801d396:	dabf      	bge.n	801d318 <powf+0xe0>
 801d398:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d39c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801d3a0:	e7ba      	b.n	801d318 <powf+0xe0>
 801d3a2:	2900      	cmp	r1, #0
 801d3a4:	da1f      	bge.n	801d3e6 <powf+0x1ae>
 801d3a6:	ee10 0a90 	vmov	r0, s1
 801d3aa:	f7ff ff2d 	bl	801d208 <checkint>
 801d3ae:	b920      	cbnz	r0, 801d3ba <powf+0x182>
 801d3b0:	b003      	add	sp, #12
 801d3b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d3b6:	f7ff bd5b 	b.w	801ce70 <__math_invalidf>
 801d3ba:	2801      	cmp	r0, #1
 801d3bc:	bf14      	ite	ne
 801d3be:	2000      	movne	r0, #0
 801d3c0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801d3c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801d3c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801d3cc:	f4bf af48 	bcs.w	801d260 <powf+0x28>
 801d3d0:	ed9f 0a46 	vldr	s0, [pc, #280]	; 801d4ec <powf+0x2b4>
 801d3d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d3d8:	ee10 3a10 	vmov	r3, s0
 801d3dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d3e0:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801d3e4:	e73c      	b.n	801d260 <powf+0x28>
 801d3e6:	2000      	movs	r0, #0
 801d3e8:	e7ee      	b.n	801d3c8 <powf+0x190>
 801d3ea:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801d4d0 <powf+0x298>
 801d3ee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801d3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3f6:	dd10      	ble.n	801d41a <powf+0x1e2>
 801d3f8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801d3fc:	2800      	cmp	r0, #0
 801d3fe:	d158      	bne.n	801d4b2 <powf+0x27a>
 801d400:	9300      	str	r3, [sp, #0]
 801d402:	eddd 7a00 	vldr	s15, [sp]
 801d406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d40a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d40e:	eef4 7a47 	vcmp.f32	s15, s14
 801d412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d416:	f47f af6e 	bne.w	801d2f6 <powf+0xbe>
 801d41a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801d4d8 <powf+0x2a0>
 801d41e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801d422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d426:	d804      	bhi.n	801d432 <powf+0x1fa>
 801d428:	b003      	add	sp, #12
 801d42a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d42e:	f7ff bcfd 	b.w	801ce2c <__math_uflowf>
 801d432:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801d4e0 <powf+0x2a8>
 801d436:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801d43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d43e:	d504      	bpl.n	801d44a <powf+0x212>
 801d440:	b003      	add	sp, #12
 801d442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d446:	f7ff bcf7 	b.w	801ce38 <__math_may_uflowf>
 801d44a:	4b29      	ldr	r3, [pc, #164]	; (801d4f0 <powf+0x2b8>)
 801d44c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 801d450:	ee30 6b07 	vadd.f64	d6, d0, d7
 801d454:	ee16 2a10 	vmov	r2, s12
 801d458:	ee36 7b47 	vsub.f64	d7, d6, d7
 801d45c:	f002 011f 	and.w	r1, r2, #31
 801d460:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801d464:	ee30 7b47 	vsub.f64	d7, d0, d7
 801d468:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d46c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801d470:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d474:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801d478:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801d47c:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d480:	686d      	ldr	r5, [r5, #4]
 801d482:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801d486:	1882      	adds	r2, r0, r2
 801d488:	2300      	movs	r3, #0
 801d48a:	1918      	adds	r0, r3, r4
 801d48c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 801d490:	eea7 0b05 	vfma.f64	d0, d7, d5
 801d494:	ec41 0b17 	vmov	d7, r0, r1
 801d498:	eea6 0b04 	vfma.f64	d0, d6, d4
 801d49c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d4a0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d4a4:	e738      	b.n	801d318 <powf+0xe0>
 801d4a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d4aa:	e735      	b.n	801d318 <powf+0xe0>
 801d4ac:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801d4f4 <powf+0x2bc>
 801d4b0:	e732      	b.n	801d318 <powf+0xe0>
 801d4b2:	9301      	str	r3, [sp, #4]
 801d4b4:	eddd 7a01 	vldr	s15, [sp, #4]
 801d4b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801d4bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d4c0:	e7a5      	b.n	801d40e <powf+0x1d6>
 801d4c2:	bf00      	nop
 801d4c4:	f3af 8000 	nop.w
 801d4c8:	ffd1d571 	.word	0xffd1d571
 801d4cc:	405fffff 	.word	0x405fffff
 801d4d0:	ffa3aae2 	.word	0xffa3aae2
 801d4d4:	405fffff 	.word	0x405fffff
 801d4d8:	00000000 	.word	0x00000000
 801d4dc:	c062c000 	.word	0xc062c000
 801d4e0:	00000000 	.word	0x00000000
 801d4e4:	c062a000 	.word	0xc062a000
 801d4e8:	080375a0 	.word	0x080375a0
 801d4ec:	4b000000 	.word	0x4b000000
 801d4f0:	08037210 	.word	0x08037210
 801d4f4:	00000000 	.word	0x00000000

0801d4f8 <tanf>:
 801d4f8:	ee10 3a10 	vmov	r3, s0
 801d4fc:	b507      	push	{r0, r1, r2, lr}
 801d4fe:	4a12      	ldr	r2, [pc, #72]	; (801d548 <tanf+0x50>)
 801d500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d504:	4293      	cmp	r3, r2
 801d506:	dc07      	bgt.n	801d518 <tanf+0x20>
 801d508:	eddf 0a10 	vldr	s1, [pc, #64]	; 801d54c <tanf+0x54>
 801d50c:	2001      	movs	r0, #1
 801d50e:	b003      	add	sp, #12
 801d510:	f85d eb04 	ldr.w	lr, [sp], #4
 801d514:	f001 b916 	b.w	801e744 <__kernel_tanf>
 801d518:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d51c:	db04      	blt.n	801d528 <tanf+0x30>
 801d51e:	ee30 0a40 	vsub.f32	s0, s0, s0
 801d522:	b003      	add	sp, #12
 801d524:	f85d fb04 	ldr.w	pc, [sp], #4
 801d528:	4668      	mov	r0, sp
 801d52a:	f000 f9a9 	bl	801d880 <__ieee754_rem_pio2f>
 801d52e:	0040      	lsls	r0, r0, #1
 801d530:	f000 0002 	and.w	r0, r0, #2
 801d534:	eddd 0a01 	vldr	s1, [sp, #4]
 801d538:	ed9d 0a00 	vldr	s0, [sp]
 801d53c:	f1c0 0001 	rsb	r0, r0, #1
 801d540:	f001 f900 	bl	801e744 <__kernel_tanf>
 801d544:	e7ed      	b.n	801d522 <tanf+0x2a>
 801d546:	bf00      	nop
 801d548:	3f490fda 	.word	0x3f490fda
 801d54c:	00000000 	.word	0x00000000

0801d550 <tanhf>:
 801d550:	b510      	push	{r4, lr}
 801d552:	ee10 4a10 	vmov	r4, s0
 801d556:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801d55a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801d55e:	ed2d 8b02 	vpush	{d8}
 801d562:	eeb0 7a40 	vmov.f32	s14, s0
 801d566:	db0c      	blt.n	801d582 <tanhf+0x32>
 801d568:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d56c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 801d570:	2c00      	cmp	r4, #0
 801d572:	bfac      	ite	ge
 801d574:	ee37 0a80 	vaddge.f32	s0, s15, s0
 801d578:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 801d57c:	ecbd 8b02 	vpop	{d8}
 801d580:	bd10      	pop	{r4, pc}
 801d582:	4a1b      	ldr	r2, [pc, #108]	; (801d5f0 <tanhf+0xa0>)
 801d584:	4293      	cmp	r3, r2
 801d586:	dc30      	bgt.n	801d5ea <tanhf+0x9a>
 801d588:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 801d58c:	da06      	bge.n	801d59c <tanhf+0x4c>
 801d58e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801d592:	ee70 7a27 	vadd.f32	s15, s0, s15
 801d596:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d59a:	e7ef      	b.n	801d57c <tanhf+0x2c>
 801d59c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801d5a0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 801d5a4:	db12      	blt.n	801d5cc <tanhf+0x7c>
 801d5a6:	f7ff fd1b 	bl	801cfe0 <fabsf>
 801d5aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d5ae:	f001 fab1 	bl	801eb14 <expm1f>
 801d5b2:	ee30 0a08 	vadd.f32	s0, s0, s16
 801d5b6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801d5ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d5be:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d5c2:	2c00      	cmp	r4, #0
 801d5c4:	bfb8      	it	lt
 801d5c6:	eeb1 0a40 	vneglt.f32	s0, s0
 801d5ca:	e7d7      	b.n	801d57c <tanhf+0x2c>
 801d5cc:	f7ff fd08 	bl	801cfe0 <fabsf>
 801d5d0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 801d5d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d5d8:	f001 fa9c 	bl	801eb14 <expm1f>
 801d5dc:	ee70 7a08 	vadd.f32	s15, s0, s16
 801d5e0:	eeb1 7a40 	vneg.f32	s14, s0
 801d5e4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801d5e8:	e7eb      	b.n	801d5c2 <tanhf+0x72>
 801d5ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d5ee:	e7e8      	b.n	801d5c2 <tanhf+0x72>
 801d5f0:	41afffff 	.word	0x41afffff
 801d5f4:	00000000 	.word	0x00000000

0801d5f8 <__ieee754_rem_pio2>:
 801d5f8:	b570      	push	{r4, r5, r6, lr}
 801d5fa:	eeb0 7b40 	vmov.f64	d7, d0
 801d5fe:	ee17 5a90 	vmov	r5, s15
 801d602:	4b99      	ldr	r3, [pc, #612]	; (801d868 <__ieee754_rem_pio2+0x270>)
 801d604:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d608:	429e      	cmp	r6, r3
 801d60a:	b088      	sub	sp, #32
 801d60c:	4604      	mov	r4, r0
 801d60e:	dc07      	bgt.n	801d620 <__ieee754_rem_pio2+0x28>
 801d610:	2200      	movs	r2, #0
 801d612:	2300      	movs	r3, #0
 801d614:	ed84 0b00 	vstr	d0, [r4]
 801d618:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801d61c:	2000      	movs	r0, #0
 801d61e:	e01b      	b.n	801d658 <__ieee754_rem_pio2+0x60>
 801d620:	4b92      	ldr	r3, [pc, #584]	; (801d86c <__ieee754_rem_pio2+0x274>)
 801d622:	429e      	cmp	r6, r3
 801d624:	dc3b      	bgt.n	801d69e <__ieee754_rem_pio2+0xa6>
 801d626:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801d62a:	2d00      	cmp	r5, #0
 801d62c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801d828 <__ieee754_rem_pio2+0x230>
 801d630:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801d634:	dd19      	ble.n	801d66a <__ieee754_rem_pio2+0x72>
 801d636:	ee30 7b46 	vsub.f64	d7, d0, d6
 801d63a:	429e      	cmp	r6, r3
 801d63c:	d00e      	beq.n	801d65c <__ieee754_rem_pio2+0x64>
 801d63e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801d830 <__ieee754_rem_pio2+0x238>
 801d642:	ee37 5b46 	vsub.f64	d5, d7, d6
 801d646:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d64a:	ed84 5b00 	vstr	d5, [r4]
 801d64e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d652:	ed84 7b02 	vstr	d7, [r4, #8]
 801d656:	2001      	movs	r0, #1
 801d658:	b008      	add	sp, #32
 801d65a:	bd70      	pop	{r4, r5, r6, pc}
 801d65c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801d838 <__ieee754_rem_pio2+0x240>
 801d660:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d664:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801d840 <__ieee754_rem_pio2+0x248>
 801d668:	e7eb      	b.n	801d642 <__ieee754_rem_pio2+0x4a>
 801d66a:	429e      	cmp	r6, r3
 801d66c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801d670:	d00e      	beq.n	801d690 <__ieee754_rem_pio2+0x98>
 801d672:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801d830 <__ieee754_rem_pio2+0x238>
 801d676:	ee37 5b06 	vadd.f64	d5, d7, d6
 801d67a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d67e:	ed84 5b00 	vstr	d5, [r4]
 801d682:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d68a:	ed84 7b02 	vstr	d7, [r4, #8]
 801d68e:	e7e3      	b.n	801d658 <__ieee754_rem_pio2+0x60>
 801d690:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801d838 <__ieee754_rem_pio2+0x240>
 801d694:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d698:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801d840 <__ieee754_rem_pio2+0x248>
 801d69c:	e7eb      	b.n	801d676 <__ieee754_rem_pio2+0x7e>
 801d69e:	4b74      	ldr	r3, [pc, #464]	; (801d870 <__ieee754_rem_pio2+0x278>)
 801d6a0:	429e      	cmp	r6, r3
 801d6a2:	dc70      	bgt.n	801d786 <__ieee754_rem_pio2+0x18e>
 801d6a4:	f001 f92e 	bl	801e904 <fabs>
 801d6a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801d6ac:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801d848 <__ieee754_rem_pio2+0x250>
 801d6b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801d6b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801d6b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801d6bc:	ee17 0a90 	vmov	r0, s15
 801d6c0:	eeb1 4b45 	vneg.f64	d4, d5
 801d6c4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801d828 <__ieee754_rem_pio2+0x230>
 801d6c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 801d6cc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801d830 <__ieee754_rem_pio2+0x238>
 801d6d0:	281f      	cmp	r0, #31
 801d6d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 801d6d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d6da:	dc08      	bgt.n	801d6ee <__ieee754_rem_pio2+0xf6>
 801d6dc:	4b65      	ldr	r3, [pc, #404]	; (801d874 <__ieee754_rem_pio2+0x27c>)
 801d6de:	1e42      	subs	r2, r0, #1
 801d6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d6e4:	42b3      	cmp	r3, r6
 801d6e6:	d002      	beq.n	801d6ee <__ieee754_rem_pio2+0xf6>
 801d6e8:	ed84 6b00 	vstr	d6, [r4]
 801d6ec:	e026      	b.n	801d73c <__ieee754_rem_pio2+0x144>
 801d6ee:	ee16 3a90 	vmov	r3, s13
 801d6f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d6f6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801d6fa:	2b10      	cmp	r3, #16
 801d6fc:	ea4f 5226 	mov.w	r2, r6, asr #20
 801d700:	ddf2      	ble.n	801d6e8 <__ieee754_rem_pio2+0xf0>
 801d702:	eeb0 6b40 	vmov.f64	d6, d0
 801d706:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801d838 <__ieee754_rem_pio2+0x240>
 801d70a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801d840 <__ieee754_rem_pio2+0x248>
 801d70e:	eea4 6b07 	vfma.f64	d6, d4, d7
 801d712:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d716:	eea4 0b07 	vfma.f64	d0, d4, d7
 801d71a:	eeb0 7b40 	vmov.f64	d7, d0
 801d71e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801d722:	ee36 3b47 	vsub.f64	d3, d6, d7
 801d726:	ee13 3a90 	vmov	r3, s7
 801d72a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801d72e:	1ad3      	subs	r3, r2, r3
 801d730:	2b31      	cmp	r3, #49	; 0x31
 801d732:	dc17      	bgt.n	801d764 <__ieee754_rem_pio2+0x16c>
 801d734:	eeb0 0b46 	vmov.f64	d0, d6
 801d738:	ed84 3b00 	vstr	d3, [r4]
 801d73c:	ed94 6b00 	vldr	d6, [r4]
 801d740:	2d00      	cmp	r5, #0
 801d742:	ee30 0b46 	vsub.f64	d0, d0, d6
 801d746:	ee30 0b47 	vsub.f64	d0, d0, d7
 801d74a:	ed84 0b02 	vstr	d0, [r4, #8]
 801d74e:	da83      	bge.n	801d658 <__ieee754_rem_pio2+0x60>
 801d750:	eeb1 6b46 	vneg.f64	d6, d6
 801d754:	eeb1 0b40 	vneg.f64	d0, d0
 801d758:	ed84 6b00 	vstr	d6, [r4]
 801d75c:	ed84 0b02 	vstr	d0, [r4, #8]
 801d760:	4240      	negs	r0, r0
 801d762:	e779      	b.n	801d658 <__ieee754_rem_pio2+0x60>
 801d764:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 801d850 <__ieee754_rem_pio2+0x258>
 801d768:	eeb0 0b46 	vmov.f64	d0, d6
 801d76c:	eea4 0b03 	vfma.f64	d0, d4, d3
 801d770:	ee36 7b40 	vsub.f64	d7, d6, d0
 801d774:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801d858 <__ieee754_rem_pio2+0x260>
 801d778:	eea4 7b03 	vfma.f64	d7, d4, d3
 801d77c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801d780:	ee30 6b47 	vsub.f64	d6, d0, d7
 801d784:	e7b0      	b.n	801d6e8 <__ieee754_rem_pio2+0xf0>
 801d786:	4b3c      	ldr	r3, [pc, #240]	; (801d878 <__ieee754_rem_pio2+0x280>)
 801d788:	429e      	cmp	r6, r3
 801d78a:	dd06      	ble.n	801d79a <__ieee754_rem_pio2+0x1a2>
 801d78c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801d790:	ed80 7b02 	vstr	d7, [r0, #8]
 801d794:	ed80 7b00 	vstr	d7, [r0]
 801d798:	e740      	b.n	801d61c <__ieee754_rem_pio2+0x24>
 801d79a:	1532      	asrs	r2, r6, #20
 801d79c:	ee10 0a10 	vmov	r0, s0
 801d7a0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801d7a4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801d7a8:	ec41 0b17 	vmov	d7, r0, r1
 801d7ac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d7b0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801d860 <__ieee754_rem_pio2+0x268>
 801d7b4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d7b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d7bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d7c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d7c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801d7c8:	a902      	add	r1, sp, #8
 801d7ca:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801d7ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d7d2:	ed8d 6b04 	vstr	d6, [sp, #16]
 801d7d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 801d7da:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d7de:	2603      	movs	r6, #3
 801d7e0:	4608      	mov	r0, r1
 801d7e2:	ed91 7b04 	vldr	d7, [r1, #16]
 801d7e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7ee:	4633      	mov	r3, r6
 801d7f0:	f1a1 0108 	sub.w	r1, r1, #8
 801d7f4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 801d7f8:	d0f3      	beq.n	801d7e2 <__ieee754_rem_pio2+0x1ea>
 801d7fa:	4920      	ldr	r1, [pc, #128]	; (801d87c <__ieee754_rem_pio2+0x284>)
 801d7fc:	9101      	str	r1, [sp, #4]
 801d7fe:	2102      	movs	r1, #2
 801d800:	9100      	str	r1, [sp, #0]
 801d802:	4621      	mov	r1, r4
 801d804:	f000 f978 	bl	801daf8 <__kernel_rem_pio2>
 801d808:	2d00      	cmp	r5, #0
 801d80a:	f6bf af25 	bge.w	801d658 <__ieee754_rem_pio2+0x60>
 801d80e:	ed94 7b00 	vldr	d7, [r4]
 801d812:	eeb1 7b47 	vneg.f64	d7, d7
 801d816:	ed84 7b00 	vstr	d7, [r4]
 801d81a:	ed94 7b02 	vldr	d7, [r4, #8]
 801d81e:	eeb1 7b47 	vneg.f64	d7, d7
 801d822:	ed84 7b02 	vstr	d7, [r4, #8]
 801d826:	e79b      	b.n	801d760 <__ieee754_rem_pio2+0x168>
 801d828:	54400000 	.word	0x54400000
 801d82c:	3ff921fb 	.word	0x3ff921fb
 801d830:	1a626331 	.word	0x1a626331
 801d834:	3dd0b461 	.word	0x3dd0b461
 801d838:	1a600000 	.word	0x1a600000
 801d83c:	3dd0b461 	.word	0x3dd0b461
 801d840:	2e037073 	.word	0x2e037073
 801d844:	3ba3198a 	.word	0x3ba3198a
 801d848:	6dc9c883 	.word	0x6dc9c883
 801d84c:	3fe45f30 	.word	0x3fe45f30
 801d850:	2e000000 	.word	0x2e000000
 801d854:	3ba3198a 	.word	0x3ba3198a
 801d858:	252049c1 	.word	0x252049c1
 801d85c:	397b839a 	.word	0x397b839a
 801d860:	00000000 	.word	0x00000000
 801d864:	41700000 	.word	0x41700000
 801d868:	3fe921fb 	.word	0x3fe921fb
 801d86c:	4002d97b 	.word	0x4002d97b
 801d870:	413921fb 	.word	0x413921fb
 801d874:	08037808 	.word	0x08037808
 801d878:	7fefffff 	.word	0x7fefffff
 801d87c:	08037888 	.word	0x08037888

0801d880 <__ieee754_rem_pio2f>:
 801d880:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d882:	ee10 6a10 	vmov	r6, s0
 801d886:	4b8e      	ldr	r3, [pc, #568]	; (801dac0 <__ieee754_rem_pio2f+0x240>)
 801d888:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801d88c:	429d      	cmp	r5, r3
 801d88e:	b087      	sub	sp, #28
 801d890:	eef0 7a40 	vmov.f32	s15, s0
 801d894:	4604      	mov	r4, r0
 801d896:	dc05      	bgt.n	801d8a4 <__ieee754_rem_pio2f+0x24>
 801d898:	2300      	movs	r3, #0
 801d89a:	ed80 0a00 	vstr	s0, [r0]
 801d89e:	6043      	str	r3, [r0, #4]
 801d8a0:	2000      	movs	r0, #0
 801d8a2:	e01a      	b.n	801d8da <__ieee754_rem_pio2f+0x5a>
 801d8a4:	4b87      	ldr	r3, [pc, #540]	; (801dac4 <__ieee754_rem_pio2f+0x244>)
 801d8a6:	429d      	cmp	r5, r3
 801d8a8:	dc46      	bgt.n	801d938 <__ieee754_rem_pio2f+0xb8>
 801d8aa:	2e00      	cmp	r6, #0
 801d8ac:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801dac8 <__ieee754_rem_pio2f+0x248>
 801d8b0:	4b86      	ldr	r3, [pc, #536]	; (801dacc <__ieee754_rem_pio2f+0x24c>)
 801d8b2:	f025 050f 	bic.w	r5, r5, #15
 801d8b6:	dd1f      	ble.n	801d8f8 <__ieee754_rem_pio2f+0x78>
 801d8b8:	429d      	cmp	r5, r3
 801d8ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d8be:	d00e      	beq.n	801d8de <__ieee754_rem_pio2f+0x5e>
 801d8c0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801dad0 <__ieee754_rem_pio2f+0x250>
 801d8c4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801d8c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d8cc:	ed80 0a00 	vstr	s0, [r0]
 801d8d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d8d4:	2001      	movs	r0, #1
 801d8d6:	edc4 7a01 	vstr	s15, [r4, #4]
 801d8da:	b007      	add	sp, #28
 801d8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8de:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801dad4 <__ieee754_rem_pio2f+0x254>
 801d8e2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801dad8 <__ieee754_rem_pio2f+0x258>
 801d8e6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d8ea:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801d8ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d8f2:	edc0 6a00 	vstr	s13, [r0]
 801d8f6:	e7eb      	b.n	801d8d0 <__ieee754_rem_pio2f+0x50>
 801d8f8:	429d      	cmp	r5, r3
 801d8fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d8fe:	d00e      	beq.n	801d91e <__ieee754_rem_pio2f+0x9e>
 801d900:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801dad0 <__ieee754_rem_pio2f+0x250>
 801d904:	ee37 0a87 	vadd.f32	s0, s15, s14
 801d908:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d90c:	ed80 0a00 	vstr	s0, [r0]
 801d910:	ee77 7a87 	vadd.f32	s15, s15, s14
 801d914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d918:	edc4 7a01 	vstr	s15, [r4, #4]
 801d91c:	e7dd      	b.n	801d8da <__ieee754_rem_pio2f+0x5a>
 801d91e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801dad4 <__ieee754_rem_pio2f+0x254>
 801d922:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801dad8 <__ieee754_rem_pio2f+0x258>
 801d926:	ee77 7a80 	vadd.f32	s15, s15, s0
 801d92a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801d92e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d932:	edc0 6a00 	vstr	s13, [r0]
 801d936:	e7eb      	b.n	801d910 <__ieee754_rem_pio2f+0x90>
 801d938:	4b68      	ldr	r3, [pc, #416]	; (801dadc <__ieee754_rem_pio2f+0x25c>)
 801d93a:	429d      	cmp	r5, r3
 801d93c:	dc72      	bgt.n	801da24 <__ieee754_rem_pio2f+0x1a4>
 801d93e:	f7ff fb4f 	bl	801cfe0 <fabsf>
 801d942:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801dae0 <__ieee754_rem_pio2f+0x260>
 801d946:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801d94a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d94e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d956:	ee17 0a90 	vmov	r0, s15
 801d95a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801dac8 <__ieee754_rem_pio2f+0x248>
 801d95e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801d962:	281f      	cmp	r0, #31
 801d964:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801dad0 <__ieee754_rem_pio2f+0x250>
 801d968:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d96c:	eeb1 6a47 	vneg.f32	s12, s14
 801d970:	ee70 6a67 	vsub.f32	s13, s0, s15
 801d974:	ee16 2a90 	vmov	r2, s13
 801d978:	dc1c      	bgt.n	801d9b4 <__ieee754_rem_pio2f+0x134>
 801d97a:	495a      	ldr	r1, [pc, #360]	; (801dae4 <__ieee754_rem_pio2f+0x264>)
 801d97c:	1e47      	subs	r7, r0, #1
 801d97e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801d982:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801d986:	428b      	cmp	r3, r1
 801d988:	d014      	beq.n	801d9b4 <__ieee754_rem_pio2f+0x134>
 801d98a:	6022      	str	r2, [r4, #0]
 801d98c:	ed94 7a00 	vldr	s14, [r4]
 801d990:	ee30 0a47 	vsub.f32	s0, s0, s14
 801d994:	2e00      	cmp	r6, #0
 801d996:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d99a:	ed84 0a01 	vstr	s0, [r4, #4]
 801d99e:	da9c      	bge.n	801d8da <__ieee754_rem_pio2f+0x5a>
 801d9a0:	eeb1 7a47 	vneg.f32	s14, s14
 801d9a4:	eeb1 0a40 	vneg.f32	s0, s0
 801d9a8:	ed84 7a00 	vstr	s14, [r4]
 801d9ac:	ed84 0a01 	vstr	s0, [r4, #4]
 801d9b0:	4240      	negs	r0, r0
 801d9b2:	e792      	b.n	801d8da <__ieee754_rem_pio2f+0x5a>
 801d9b4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801d9b8:	15eb      	asrs	r3, r5, #23
 801d9ba:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801d9be:	2d08      	cmp	r5, #8
 801d9c0:	dde3      	ble.n	801d98a <__ieee754_rem_pio2f+0x10a>
 801d9c2:	eddf 7a44 	vldr	s15, [pc, #272]	; 801dad4 <__ieee754_rem_pio2f+0x254>
 801d9c6:	eddf 5a44 	vldr	s11, [pc, #272]	; 801dad8 <__ieee754_rem_pio2f+0x258>
 801d9ca:	eef0 6a40 	vmov.f32	s13, s0
 801d9ce:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d9d2:	ee30 0a66 	vsub.f32	s0, s0, s13
 801d9d6:	eea6 0a27 	vfma.f32	s0, s12, s15
 801d9da:	eef0 7a40 	vmov.f32	s15, s0
 801d9de:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801d9e2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801d9e6:	ee15 2a90 	vmov	r2, s11
 801d9ea:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801d9ee:	1a5b      	subs	r3, r3, r1
 801d9f0:	2b19      	cmp	r3, #25
 801d9f2:	dc04      	bgt.n	801d9fe <__ieee754_rem_pio2f+0x17e>
 801d9f4:	edc4 5a00 	vstr	s11, [r4]
 801d9f8:	eeb0 0a66 	vmov.f32	s0, s13
 801d9fc:	e7c6      	b.n	801d98c <__ieee754_rem_pio2f+0x10c>
 801d9fe:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801dae8 <__ieee754_rem_pio2f+0x268>
 801da02:	eeb0 0a66 	vmov.f32	s0, s13
 801da06:	eea6 0a25 	vfma.f32	s0, s12, s11
 801da0a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801da0e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801daec <__ieee754_rem_pio2f+0x26c>
 801da12:	eee6 7a25 	vfma.f32	s15, s12, s11
 801da16:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801da1a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801da1e:	ed84 7a00 	vstr	s14, [r4]
 801da22:	e7b3      	b.n	801d98c <__ieee754_rem_pio2f+0x10c>
 801da24:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801da28:	db06      	blt.n	801da38 <__ieee754_rem_pio2f+0x1b8>
 801da2a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801da2e:	edc0 7a01 	vstr	s15, [r0, #4]
 801da32:	edc0 7a00 	vstr	s15, [r0]
 801da36:	e733      	b.n	801d8a0 <__ieee754_rem_pio2f+0x20>
 801da38:	15ea      	asrs	r2, r5, #23
 801da3a:	3a86      	subs	r2, #134	; 0x86
 801da3c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801da40:	ee07 3a90 	vmov	s15, r3
 801da44:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801da48:	eddf 6a29 	vldr	s13, [pc, #164]	; 801daf0 <__ieee754_rem_pio2f+0x270>
 801da4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801da50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801da54:	ed8d 7a03 	vstr	s14, [sp, #12]
 801da58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801da5c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801da60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801da64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801da68:	ed8d 7a04 	vstr	s14, [sp, #16]
 801da6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801da70:	eef5 7a40 	vcmp.f32	s15, #0.0
 801da74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da78:	edcd 7a05 	vstr	s15, [sp, #20]
 801da7c:	d11e      	bne.n	801dabc <__ieee754_rem_pio2f+0x23c>
 801da7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801da82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da86:	bf14      	ite	ne
 801da88:	2302      	movne	r3, #2
 801da8a:	2301      	moveq	r3, #1
 801da8c:	4919      	ldr	r1, [pc, #100]	; (801daf4 <__ieee754_rem_pio2f+0x274>)
 801da8e:	9101      	str	r1, [sp, #4]
 801da90:	2102      	movs	r1, #2
 801da92:	9100      	str	r1, [sp, #0]
 801da94:	a803      	add	r0, sp, #12
 801da96:	4621      	mov	r1, r4
 801da98:	f000 fbde 	bl	801e258 <__kernel_rem_pio2f>
 801da9c:	2e00      	cmp	r6, #0
 801da9e:	f6bf af1c 	bge.w	801d8da <__ieee754_rem_pio2f+0x5a>
 801daa2:	edd4 7a00 	vldr	s15, [r4]
 801daa6:	eef1 7a67 	vneg.f32	s15, s15
 801daaa:	edc4 7a00 	vstr	s15, [r4]
 801daae:	edd4 7a01 	vldr	s15, [r4, #4]
 801dab2:	eef1 7a67 	vneg.f32	s15, s15
 801dab6:	edc4 7a01 	vstr	s15, [r4, #4]
 801daba:	e779      	b.n	801d9b0 <__ieee754_rem_pio2f+0x130>
 801dabc:	2303      	movs	r3, #3
 801dabe:	e7e5      	b.n	801da8c <__ieee754_rem_pio2f+0x20c>
 801dac0:	3f490fd8 	.word	0x3f490fd8
 801dac4:	4016cbe3 	.word	0x4016cbe3
 801dac8:	3fc90f80 	.word	0x3fc90f80
 801dacc:	3fc90fd0 	.word	0x3fc90fd0
 801dad0:	37354443 	.word	0x37354443
 801dad4:	37354400 	.word	0x37354400
 801dad8:	2e85a308 	.word	0x2e85a308
 801dadc:	43490f80 	.word	0x43490f80
 801dae0:	3f22f984 	.word	0x3f22f984
 801dae4:	08037990 	.word	0x08037990
 801dae8:	2e85a300 	.word	0x2e85a300
 801daec:	248d3132 	.word	0x248d3132
 801daf0:	43800000 	.word	0x43800000
 801daf4:	08037a10 	.word	0x08037a10

0801daf8 <__kernel_rem_pio2>:
 801daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dafc:	ed2d 8b06 	vpush	{d8-d10}
 801db00:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801db04:	460f      	mov	r7, r1
 801db06:	9002      	str	r0, [sp, #8]
 801db08:	49c5      	ldr	r1, [pc, #788]	; (801de20 <__kernel_rem_pio2+0x328>)
 801db0a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801db0c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 801db10:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801db14:	9301      	str	r3, [sp, #4]
 801db16:	f112 0f14 	cmn.w	r2, #20
 801db1a:	bfa8      	it	ge
 801db1c:	2018      	movge	r0, #24
 801db1e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801db22:	bfb8      	it	lt
 801db24:	2000      	movlt	r0, #0
 801db26:	f06f 0417 	mvn.w	r4, #23
 801db2a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 801de08 <__kernel_rem_pio2+0x310>
 801db2e:	bfa4      	itt	ge
 801db30:	f1a2 0a03 	subge.w	sl, r2, #3
 801db34:	fb9a f0f0 	sdivge	r0, sl, r0
 801db38:	fb00 4404 	mla	r4, r0, r4, r4
 801db3c:	1a46      	subs	r6, r0, r1
 801db3e:	4414      	add	r4, r2
 801db40:	eb09 0c01 	add.w	ip, r9, r1
 801db44:	ad1a      	add	r5, sp, #104	; 0x68
 801db46:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801db4a:	2200      	movs	r2, #0
 801db4c:	4562      	cmp	r2, ip
 801db4e:	dd10      	ble.n	801db72 <__kernel_rem_pio2+0x7a>
 801db50:	9a01      	ldr	r2, [sp, #4]
 801db52:	ab1a      	add	r3, sp, #104	; 0x68
 801db54:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801db58:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801db5c:	f04f 0c00 	mov.w	ip, #0
 801db60:	45cc      	cmp	ip, r9
 801db62:	dc26      	bgt.n	801dbb2 <__kernel_rem_pio2+0xba>
 801db64:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 801de08 <__kernel_rem_pio2+0x310>
 801db68:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801db6c:	4616      	mov	r6, r2
 801db6e:	2500      	movs	r5, #0
 801db70:	e015      	b.n	801db9e <__kernel_rem_pio2+0xa6>
 801db72:	42d6      	cmn	r6, r2
 801db74:	d409      	bmi.n	801db8a <__kernel_rem_pio2+0x92>
 801db76:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801db7a:	ee07 3a90 	vmov	s15, r3
 801db7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801db82:	eca5 7b02 	vstmia	r5!, {d7}
 801db86:	3201      	adds	r2, #1
 801db88:	e7e0      	b.n	801db4c <__kernel_rem_pio2+0x54>
 801db8a:	eeb0 7b46 	vmov.f64	d7, d6
 801db8e:	e7f8      	b.n	801db82 <__kernel_rem_pio2+0x8a>
 801db90:	ecb8 5b02 	vldmia	r8!, {d5}
 801db94:	ed96 6b00 	vldr	d6, [r6]
 801db98:	3501      	adds	r5, #1
 801db9a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801db9e:	428d      	cmp	r5, r1
 801dba0:	f1a6 0608 	sub.w	r6, r6, #8
 801dba4:	ddf4      	ble.n	801db90 <__kernel_rem_pio2+0x98>
 801dba6:	ecaa 7b02 	vstmia	sl!, {d7}
 801dbaa:	f10c 0c01 	add.w	ip, ip, #1
 801dbae:	3208      	adds	r2, #8
 801dbb0:	e7d6      	b.n	801db60 <__kernel_rem_pio2+0x68>
 801dbb2:	ab06      	add	r3, sp, #24
 801dbb4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801de10 <__kernel_rem_pio2+0x318>
 801dbb8:	ed9f ab97 	vldr	d10, [pc, #604]	; 801de18 <__kernel_rem_pio2+0x320>
 801dbbc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801dbc0:	9303      	str	r3, [sp, #12]
 801dbc2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801dbc6:	464d      	mov	r5, r9
 801dbc8:	00eb      	lsls	r3, r5, #3
 801dbca:	9304      	str	r3, [sp, #16]
 801dbcc:	ab92      	add	r3, sp, #584	; 0x248
 801dbce:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801dbd2:	f10d 0b18 	add.w	fp, sp, #24
 801dbd6:	ab6a      	add	r3, sp, #424	; 0x1a8
 801dbd8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801dbdc:	465e      	mov	r6, fp
 801dbde:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801dbe2:	4628      	mov	r0, r5
 801dbe4:	2800      	cmp	r0, #0
 801dbe6:	f1a2 0208 	sub.w	r2, r2, #8
 801dbea:	dc4c      	bgt.n	801dc86 <__kernel_rem_pio2+0x18e>
 801dbec:	4620      	mov	r0, r4
 801dbee:	9105      	str	r1, [sp, #20]
 801dbf0:	f000 ff06 	bl	801ea00 <scalbn>
 801dbf4:	eeb0 8b40 	vmov.f64	d8, d0
 801dbf8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801dbfc:	ee28 0b00 	vmul.f64	d0, d8, d0
 801dc00:	f000 fe8a 	bl	801e918 <floor>
 801dc04:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801dc08:	eea0 8b47 	vfms.f64	d8, d0, d7
 801dc0c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801dc10:	2c00      	cmp	r4, #0
 801dc12:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801dc16:	ee17 8a90 	vmov	r8, s15
 801dc1a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801dc1e:	9905      	ldr	r1, [sp, #20]
 801dc20:	dd43      	ble.n	801dcaa <__kernel_rem_pio2+0x1b2>
 801dc22:	1e68      	subs	r0, r5, #1
 801dc24:	ab06      	add	r3, sp, #24
 801dc26:	f1c4 0c18 	rsb	ip, r4, #24
 801dc2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801dc2e:	fa46 f20c 	asr.w	r2, r6, ip
 801dc32:	4490      	add	r8, r2
 801dc34:	fa02 f20c 	lsl.w	r2, r2, ip
 801dc38:	1ab6      	subs	r6, r6, r2
 801dc3a:	f1c4 0217 	rsb	r2, r4, #23
 801dc3e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801dc42:	4116      	asrs	r6, r2
 801dc44:	2e00      	cmp	r6, #0
 801dc46:	dd3f      	ble.n	801dcc8 <__kernel_rem_pio2+0x1d0>
 801dc48:	f04f 0c00 	mov.w	ip, #0
 801dc4c:	f108 0801 	add.w	r8, r8, #1
 801dc50:	4660      	mov	r0, ip
 801dc52:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801dc56:	4565      	cmp	r5, ip
 801dc58:	dc6e      	bgt.n	801dd38 <__kernel_rem_pio2+0x240>
 801dc5a:	2c00      	cmp	r4, #0
 801dc5c:	dd04      	ble.n	801dc68 <__kernel_rem_pio2+0x170>
 801dc5e:	2c01      	cmp	r4, #1
 801dc60:	d07f      	beq.n	801dd62 <__kernel_rem_pio2+0x26a>
 801dc62:	2c02      	cmp	r4, #2
 801dc64:	f000 8087 	beq.w	801dd76 <__kernel_rem_pio2+0x27e>
 801dc68:	2e02      	cmp	r6, #2
 801dc6a:	d12d      	bne.n	801dcc8 <__kernel_rem_pio2+0x1d0>
 801dc6c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801dc70:	ee30 8b48 	vsub.f64	d8, d0, d8
 801dc74:	b340      	cbz	r0, 801dcc8 <__kernel_rem_pio2+0x1d0>
 801dc76:	4620      	mov	r0, r4
 801dc78:	9105      	str	r1, [sp, #20]
 801dc7a:	f000 fec1 	bl	801ea00 <scalbn>
 801dc7e:	9905      	ldr	r1, [sp, #20]
 801dc80:	ee38 8b40 	vsub.f64	d8, d8, d0
 801dc84:	e020      	b.n	801dcc8 <__kernel_rem_pio2+0x1d0>
 801dc86:	ee20 7b09 	vmul.f64	d7, d0, d9
 801dc8a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801dc8e:	3801      	subs	r0, #1
 801dc90:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801dc94:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801dc98:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801dc9c:	eca6 0a01 	vstmia	r6!, {s0}
 801dca0:	ed92 0b00 	vldr	d0, [r2]
 801dca4:	ee37 0b00 	vadd.f64	d0, d7, d0
 801dca8:	e79c      	b.n	801dbe4 <__kernel_rem_pio2+0xec>
 801dcaa:	d105      	bne.n	801dcb8 <__kernel_rem_pio2+0x1c0>
 801dcac:	1e6a      	subs	r2, r5, #1
 801dcae:	ab06      	add	r3, sp, #24
 801dcb0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801dcb4:	15f6      	asrs	r6, r6, #23
 801dcb6:	e7c5      	b.n	801dc44 <__kernel_rem_pio2+0x14c>
 801dcb8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801dcbc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801dcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcc4:	da36      	bge.n	801dd34 <__kernel_rem_pio2+0x23c>
 801dcc6:	2600      	movs	r6, #0
 801dcc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801dccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dcd0:	f040 80aa 	bne.w	801de28 <__kernel_rem_pio2+0x330>
 801dcd4:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801dcd8:	4658      	mov	r0, fp
 801dcda:	2200      	movs	r2, #0
 801dcdc:	4548      	cmp	r0, r9
 801dcde:	da52      	bge.n	801dd86 <__kernel_rem_pio2+0x28e>
 801dce0:	2a00      	cmp	r2, #0
 801dce2:	f000 8081 	beq.w	801dde8 <__kernel_rem_pio2+0x2f0>
 801dce6:	ab06      	add	r3, sp, #24
 801dce8:	3c18      	subs	r4, #24
 801dcea:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801dcee:	2b00      	cmp	r3, #0
 801dcf0:	f000 8087 	beq.w	801de02 <__kernel_rem_pio2+0x30a>
 801dcf4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801dcf8:	4620      	mov	r0, r4
 801dcfa:	f000 fe81 	bl	801ea00 <scalbn>
 801dcfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801dd02:	ed9f 6b43 	vldr	d6, [pc, #268]	; 801de10 <__kernel_rem_pio2+0x318>
 801dd06:	a96a      	add	r1, sp, #424	; 0x1a8
 801dd08:	f103 0208 	add.w	r2, r3, #8
 801dd0c:	1888      	adds	r0, r1, r2
 801dd0e:	4659      	mov	r1, fp
 801dd10:	2900      	cmp	r1, #0
 801dd12:	f280 80b7 	bge.w	801de84 <__kernel_rem_pio2+0x38c>
 801dd16:	4659      	mov	r1, fp
 801dd18:	2900      	cmp	r1, #0
 801dd1a:	f2c0 80d5 	blt.w	801dec8 <__kernel_rem_pio2+0x3d0>
 801dd1e:	a86a      	add	r0, sp, #424	; 0x1a8
 801dd20:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801dd24:	ed9f 7b38 	vldr	d7, [pc, #224]	; 801de08 <__kernel_rem_pio2+0x310>
 801dd28:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801de24 <__kernel_rem_pio2+0x32c>
 801dd2c:	2400      	movs	r4, #0
 801dd2e:	ebab 0001 	sub.w	r0, fp, r1
 801dd32:	e0be      	b.n	801deb2 <__kernel_rem_pio2+0x3ba>
 801dd34:	2602      	movs	r6, #2
 801dd36:	e787      	b.n	801dc48 <__kernel_rem_pio2+0x150>
 801dd38:	f8db 2000 	ldr.w	r2, [fp]
 801dd3c:	b958      	cbnz	r0, 801dd56 <__kernel_rem_pio2+0x25e>
 801dd3e:	b122      	cbz	r2, 801dd4a <__kernel_rem_pio2+0x252>
 801dd40:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801dd44:	f8cb 2000 	str.w	r2, [fp]
 801dd48:	2201      	movs	r2, #1
 801dd4a:	f10c 0c01 	add.w	ip, ip, #1
 801dd4e:	f10b 0b04 	add.w	fp, fp, #4
 801dd52:	4610      	mov	r0, r2
 801dd54:	e77f      	b.n	801dc56 <__kernel_rem_pio2+0x15e>
 801dd56:	ebae 0202 	sub.w	r2, lr, r2
 801dd5a:	f8cb 2000 	str.w	r2, [fp]
 801dd5e:	4602      	mov	r2, r0
 801dd60:	e7f3      	b.n	801dd4a <__kernel_rem_pio2+0x252>
 801dd62:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801dd66:	ab06      	add	r3, sp, #24
 801dd68:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801dd6c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801dd70:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801dd74:	e778      	b.n	801dc68 <__kernel_rem_pio2+0x170>
 801dd76:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801dd7a:	ab06      	add	r3, sp, #24
 801dd7c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801dd80:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801dd84:	e7f4      	b.n	801dd70 <__kernel_rem_pio2+0x278>
 801dd86:	ab06      	add	r3, sp, #24
 801dd88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801dd8c:	3801      	subs	r0, #1
 801dd8e:	431a      	orrs	r2, r3
 801dd90:	e7a4      	b.n	801dcdc <__kernel_rem_pio2+0x1e4>
 801dd92:	f10c 0c01 	add.w	ip, ip, #1
 801dd96:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801dd9a:	2800      	cmp	r0, #0
 801dd9c:	d0f9      	beq.n	801dd92 <__kernel_rem_pio2+0x29a>
 801dd9e:	9b04      	ldr	r3, [sp, #16]
 801dda0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801dda4:	eb0d 0203 	add.w	r2, sp, r3
 801dda8:	9b01      	ldr	r3, [sp, #4]
 801ddaa:	18e8      	adds	r0, r5, r3
 801ddac:	ab1a      	add	r3, sp, #104	; 0x68
 801ddae:	1c6e      	adds	r6, r5, #1
 801ddb0:	3a98      	subs	r2, #152	; 0x98
 801ddb2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801ddb6:	4465      	add	r5, ip
 801ddb8:	42b5      	cmp	r5, r6
 801ddba:	f6ff af05 	blt.w	801dbc8 <__kernel_rem_pio2+0xd0>
 801ddbe:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801ddc2:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ddc6:	ee07 3a90 	vmov	s15, r3
 801ddca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ddce:	f04f 0c00 	mov.w	ip, #0
 801ddd2:	eca0 7b02 	vstmia	r0!, {d7}
 801ddd6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801de08 <__kernel_rem_pio2+0x310>
 801ddda:	4680      	mov	r8, r0
 801dddc:	458c      	cmp	ip, r1
 801ddde:	dd07      	ble.n	801ddf0 <__kernel_rem_pio2+0x2f8>
 801dde0:	eca2 7b02 	vstmia	r2!, {d7}
 801dde4:	3601      	adds	r6, #1
 801dde6:	e7e7      	b.n	801ddb8 <__kernel_rem_pio2+0x2c0>
 801dde8:	9a03      	ldr	r2, [sp, #12]
 801ddea:	f04f 0c01 	mov.w	ip, #1
 801ddee:	e7d2      	b.n	801dd96 <__kernel_rem_pio2+0x29e>
 801ddf0:	ecbe 5b02 	vldmia	lr!, {d5}
 801ddf4:	ed38 6b02 	vldmdb	r8!, {d6}
 801ddf8:	f10c 0c01 	add.w	ip, ip, #1
 801ddfc:	eea5 7b06 	vfma.f64	d7, d5, d6
 801de00:	e7ec      	b.n	801dddc <__kernel_rem_pio2+0x2e4>
 801de02:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801de06:	e76e      	b.n	801dce6 <__kernel_rem_pio2+0x1ee>
	...
 801de14:	3e700000 	.word	0x3e700000
 801de18:	00000000 	.word	0x00000000
 801de1c:	41700000 	.word	0x41700000
 801de20:	08037d68 	.word	0x08037d68
 801de24:	08037d28 	.word	0x08037d28
 801de28:	4260      	negs	r0, r4
 801de2a:	eeb0 0b48 	vmov.f64	d0, d8
 801de2e:	f000 fde7 	bl	801ea00 <scalbn>
 801de32:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801e010 <__kernel_rem_pio2+0x518>
 801de36:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801de3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de3e:	db18      	blt.n	801de72 <__kernel_rem_pio2+0x37a>
 801de40:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801e018 <__kernel_rem_pio2+0x520>
 801de44:	ee20 7b07 	vmul.f64	d7, d0, d7
 801de48:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801de4c:	aa06      	add	r2, sp, #24
 801de4e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801de52:	eea5 0b46 	vfms.f64	d0, d5, d6
 801de56:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801de5a:	f105 0b01 	add.w	fp, r5, #1
 801de5e:	ee10 3a10 	vmov	r3, s0
 801de62:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801de66:	ee17 3a10 	vmov	r3, s14
 801de6a:	3418      	adds	r4, #24
 801de6c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801de70:	e740      	b.n	801dcf4 <__kernel_rem_pio2+0x1fc>
 801de72:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801de76:	aa06      	add	r2, sp, #24
 801de78:	ee10 3a10 	vmov	r3, s0
 801de7c:	46ab      	mov	fp, r5
 801de7e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801de82:	e737      	b.n	801dcf4 <__kernel_rem_pio2+0x1fc>
 801de84:	ac06      	add	r4, sp, #24
 801de86:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801de8a:	9401      	str	r4, [sp, #4]
 801de8c:	ee07 4a90 	vmov	s15, r4
 801de90:	3901      	subs	r1, #1
 801de92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801de96:	ee27 7b00 	vmul.f64	d7, d7, d0
 801de9a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801de9e:	ed20 7b02 	vstmdb	r0!, {d7}
 801dea2:	e735      	b.n	801dd10 <__kernel_rem_pio2+0x218>
 801dea4:	ecbc 5b02 	vldmia	ip!, {d5}
 801dea8:	ecb5 6b02 	vldmia	r5!, {d6}
 801deac:	3401      	adds	r4, #1
 801deae:	eea5 7b06 	vfma.f64	d7, d5, d6
 801deb2:	454c      	cmp	r4, r9
 801deb4:	dc01      	bgt.n	801deba <__kernel_rem_pio2+0x3c2>
 801deb6:	4284      	cmp	r4, r0
 801deb8:	ddf4      	ble.n	801dea4 <__kernel_rem_pio2+0x3ac>
 801deba:	ac42      	add	r4, sp, #264	; 0x108
 801debc:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801dec0:	ed80 7b00 	vstr	d7, [r0]
 801dec4:	3901      	subs	r1, #1
 801dec6:	e727      	b.n	801dd18 <__kernel_rem_pio2+0x220>
 801dec8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801deca:	2902      	cmp	r1, #2
 801decc:	dc0a      	bgt.n	801dee4 <__kernel_rem_pio2+0x3ec>
 801dece:	2900      	cmp	r1, #0
 801ded0:	dc2c      	bgt.n	801df2c <__kernel_rem_pio2+0x434>
 801ded2:	d045      	beq.n	801df60 <__kernel_rem_pio2+0x468>
 801ded4:	f008 0007 	and.w	r0, r8, #7
 801ded8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801dedc:	ecbd 8b06 	vpop	{d8-d10}
 801dee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dee4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801dee6:	2a03      	cmp	r2, #3
 801dee8:	d1f4      	bne.n	801ded4 <__kernel_rem_pio2+0x3dc>
 801deea:	aa42      	add	r2, sp, #264	; 0x108
 801deec:	4413      	add	r3, r2
 801deee:	461a      	mov	r2, r3
 801def0:	4619      	mov	r1, r3
 801def2:	4658      	mov	r0, fp
 801def4:	2800      	cmp	r0, #0
 801def6:	f1a1 0108 	sub.w	r1, r1, #8
 801defa:	dc54      	bgt.n	801dfa6 <__kernel_rem_pio2+0x4ae>
 801defc:	4659      	mov	r1, fp
 801defe:	2901      	cmp	r1, #1
 801df00:	f1a2 0208 	sub.w	r2, r2, #8
 801df04:	dc5f      	bgt.n	801dfc6 <__kernel_rem_pio2+0x4ce>
 801df06:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801e020 <__kernel_rem_pio2+0x528>
 801df0a:	3308      	adds	r3, #8
 801df0c:	f1bb 0f01 	cmp.w	fp, #1
 801df10:	dc69      	bgt.n	801dfe6 <__kernel_rem_pio2+0x4ee>
 801df12:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801df16:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801df1a:	2e00      	cmp	r6, #0
 801df1c:	d16a      	bne.n	801dff4 <__kernel_rem_pio2+0x4fc>
 801df1e:	ed87 5b00 	vstr	d5, [r7]
 801df22:	ed87 6b02 	vstr	d6, [r7, #8]
 801df26:	ed87 7b04 	vstr	d7, [r7, #16]
 801df2a:	e7d3      	b.n	801ded4 <__kernel_rem_pio2+0x3dc>
 801df2c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 801e020 <__kernel_rem_pio2+0x528>
 801df30:	ab42      	add	r3, sp, #264	; 0x108
 801df32:	441a      	add	r2, r3
 801df34:	465b      	mov	r3, fp
 801df36:	2b00      	cmp	r3, #0
 801df38:	da26      	bge.n	801df88 <__kernel_rem_pio2+0x490>
 801df3a:	b35e      	cbz	r6, 801df94 <__kernel_rem_pio2+0x49c>
 801df3c:	eeb1 7b46 	vneg.f64	d7, d6
 801df40:	ed87 7b00 	vstr	d7, [r7]
 801df44:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801df48:	aa44      	add	r2, sp, #272	; 0x110
 801df4a:	2301      	movs	r3, #1
 801df4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801df50:	459b      	cmp	fp, r3
 801df52:	da22      	bge.n	801df9a <__kernel_rem_pio2+0x4a2>
 801df54:	b10e      	cbz	r6, 801df5a <__kernel_rem_pio2+0x462>
 801df56:	eeb1 7b47 	vneg.f64	d7, d7
 801df5a:	ed87 7b02 	vstr	d7, [r7, #8]
 801df5e:	e7b9      	b.n	801ded4 <__kernel_rem_pio2+0x3dc>
 801df60:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801e020 <__kernel_rem_pio2+0x528>
 801df64:	ab42      	add	r3, sp, #264	; 0x108
 801df66:	441a      	add	r2, r3
 801df68:	f1bb 0f00 	cmp.w	fp, #0
 801df6c:	da05      	bge.n	801df7a <__kernel_rem_pio2+0x482>
 801df6e:	b10e      	cbz	r6, 801df74 <__kernel_rem_pio2+0x47c>
 801df70:	eeb1 7b47 	vneg.f64	d7, d7
 801df74:	ed87 7b00 	vstr	d7, [r7]
 801df78:	e7ac      	b.n	801ded4 <__kernel_rem_pio2+0x3dc>
 801df7a:	ed32 6b02 	vldmdb	r2!, {d6}
 801df7e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801df82:	ee37 7b06 	vadd.f64	d7, d7, d6
 801df86:	e7ef      	b.n	801df68 <__kernel_rem_pio2+0x470>
 801df88:	ed32 7b02 	vldmdb	r2!, {d7}
 801df8c:	3b01      	subs	r3, #1
 801df8e:	ee36 6b07 	vadd.f64	d6, d6, d7
 801df92:	e7d0      	b.n	801df36 <__kernel_rem_pio2+0x43e>
 801df94:	eeb0 7b46 	vmov.f64	d7, d6
 801df98:	e7d2      	b.n	801df40 <__kernel_rem_pio2+0x448>
 801df9a:	ecb2 6b02 	vldmia	r2!, {d6}
 801df9e:	3301      	adds	r3, #1
 801dfa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 801dfa4:	e7d4      	b.n	801df50 <__kernel_rem_pio2+0x458>
 801dfa6:	ed91 7b00 	vldr	d7, [r1]
 801dfaa:	ed91 5b02 	vldr	d5, [r1, #8]
 801dfae:	3801      	subs	r0, #1
 801dfb0:	ee37 6b05 	vadd.f64	d6, d7, d5
 801dfb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801dfb8:	ed81 6b00 	vstr	d6, [r1]
 801dfbc:	ee37 7b05 	vadd.f64	d7, d7, d5
 801dfc0:	ed81 7b02 	vstr	d7, [r1, #8]
 801dfc4:	e796      	b.n	801def4 <__kernel_rem_pio2+0x3fc>
 801dfc6:	ed92 7b00 	vldr	d7, [r2]
 801dfca:	ed92 5b02 	vldr	d5, [r2, #8]
 801dfce:	3901      	subs	r1, #1
 801dfd0:	ee37 6b05 	vadd.f64	d6, d7, d5
 801dfd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801dfd8:	ed82 6b00 	vstr	d6, [r2]
 801dfdc:	ee37 7b05 	vadd.f64	d7, d7, d5
 801dfe0:	ed82 7b02 	vstr	d7, [r2, #8]
 801dfe4:	e78b      	b.n	801defe <__kernel_rem_pio2+0x406>
 801dfe6:	ed33 6b02 	vldmdb	r3!, {d6}
 801dfea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801dfee:	ee37 7b06 	vadd.f64	d7, d7, d6
 801dff2:	e78b      	b.n	801df0c <__kernel_rem_pio2+0x414>
 801dff4:	eeb1 5b45 	vneg.f64	d5, d5
 801dff8:	eeb1 6b46 	vneg.f64	d6, d6
 801dffc:	ed87 5b00 	vstr	d5, [r7]
 801e000:	eeb1 7b47 	vneg.f64	d7, d7
 801e004:	ed87 6b02 	vstr	d6, [r7, #8]
 801e008:	e78d      	b.n	801df26 <__kernel_rem_pio2+0x42e>
 801e00a:	bf00      	nop
 801e00c:	f3af 8000 	nop.w
 801e010:	00000000 	.word	0x00000000
 801e014:	41700000 	.word	0x41700000
 801e018:	00000000 	.word	0x00000000
 801e01c:	3e700000 	.word	0x3e700000
	...

0801e028 <__kernel_tan>:
 801e028:	eeb0 7b40 	vmov.f64	d7, d0
 801e02c:	ee17 3a90 	vmov	r3, s15
 801e030:	4987      	ldr	r1, [pc, #540]	; (801e250 <__kernel_tan+0x228>)
 801e032:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801e036:	428a      	cmp	r2, r1
 801e038:	b510      	push	{r4, lr}
 801e03a:	dc33      	bgt.n	801e0a4 <__kernel_tan+0x7c>
 801e03c:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801e040:	ee16 1a90 	vmov	r1, s13
 801e044:	2900      	cmp	r1, #0
 801e046:	d143      	bne.n	801e0d0 <__kernel_tan+0xa8>
 801e048:	ee10 4a10 	vmov	r4, s0
 801e04c:	1c43      	adds	r3, r0, #1
 801e04e:	4323      	orrs	r3, r4
 801e050:	4313      	orrs	r3, r2
 801e052:	d108      	bne.n	801e066 <__kernel_tan+0x3e>
 801e054:	f000 fc56 	bl	801e904 <fabs>
 801e058:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e05c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801e060:	eeb0 0b47 	vmov.f64	d0, d7
 801e064:	bd10      	pop	{r4, pc}
 801e066:	2801      	cmp	r0, #1
 801e068:	d0fa      	beq.n	801e060 <__kernel_tan+0x38>
 801e06a:	ee30 6b01 	vadd.f64	d6, d0, d1
 801e06e:	ec53 2b16 	vmov	r2, r3, d6
 801e072:	460a      	mov	r2, r1
 801e074:	ec43 2b15 	vmov	d5, r2, r3
 801e078:	ee35 7b40 	vsub.f64	d7, d5, d0
 801e07c:	ee31 1b47 	vsub.f64	d1, d1, d7
 801e080:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801e084:	ee87 4b06 	vdiv.f64	d4, d7, d6
 801e088:	ec53 2b14 	vmov	r2, r3, d4
 801e08c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e090:	460a      	mov	r2, r1
 801e092:	ec43 2b17 	vmov	d7, r2, r3
 801e096:	eea5 6b07 	vfma.f64	d6, d5, d7
 801e09a:	eea1 6b07 	vfma.f64	d6, d1, d7
 801e09e:	eea6 7b04 	vfma.f64	d7, d6, d4
 801e0a2:	e7dd      	b.n	801e060 <__kernel_tan+0x38>
 801e0a4:	496b      	ldr	r1, [pc, #428]	; (801e254 <__kernel_tan+0x22c>)
 801e0a6:	428a      	cmp	r2, r1
 801e0a8:	dd12      	ble.n	801e0d0 <__kernel_tan+0xa8>
 801e0aa:	ed9f 6b49 	vldr	d6, [pc, #292]	; 801e1d0 <__kernel_tan+0x1a8>
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	bfb8      	it	lt
 801e0b2:	eeb1 7b40 	vneglt.f64	d7, d0
 801e0b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e0ba:	ed9f 6b47 	vldr	d6, [pc, #284]	; 801e1d8 <__kernel_tan+0x1b0>
 801e0be:	bfb8      	it	lt
 801e0c0:	eeb1 1b41 	vneglt.f64	d1, d1
 801e0c4:	ee36 1b41 	vsub.f64	d1, d6, d1
 801e0c8:	ee31 7b07 	vadd.f64	d7, d1, d7
 801e0cc:	ed9f 1b44 	vldr	d1, [pc, #272]	; 801e1e0 <__kernel_tan+0x1b8>
 801e0d0:	ee27 5b07 	vmul.f64	d5, d7, d7
 801e0d4:	ee25 6b05 	vmul.f64	d6, d5, d5
 801e0d8:	ed9f 3b43 	vldr	d3, [pc, #268]	; 801e1e8 <__kernel_tan+0x1c0>
 801e0dc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e1f0 <__kernel_tan+0x1c8>
 801e0e0:	eea6 4b03 	vfma.f64	d4, d6, d3
 801e0e4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801e1f8 <__kernel_tan+0x1d0>
 801e0e8:	eea4 3b06 	vfma.f64	d3, d4, d6
 801e0ec:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e200 <__kernel_tan+0x1d8>
 801e0f0:	eea3 4b06 	vfma.f64	d4, d3, d6
 801e0f4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801e208 <__kernel_tan+0x1e0>
 801e0f8:	eea4 3b06 	vfma.f64	d3, d4, d6
 801e0fc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e210 <__kernel_tan+0x1e8>
 801e100:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801e218 <__kernel_tan+0x1f0>
 801e104:	eea3 4b06 	vfma.f64	d4, d3, d6
 801e108:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801e220 <__kernel_tan+0x1f8>
 801e10c:	eea6 3b02 	vfma.f64	d3, d6, d2
 801e110:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801e228 <__kernel_tan+0x200>
 801e114:	eea3 2b06 	vfma.f64	d2, d3, d6
 801e118:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801e230 <__kernel_tan+0x208>
 801e11c:	eea2 3b06 	vfma.f64	d3, d2, d6
 801e120:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801e238 <__kernel_tan+0x210>
 801e124:	eea3 2b06 	vfma.f64	d2, d3, d6
 801e128:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801e240 <__kernel_tan+0x218>
 801e12c:	4949      	ldr	r1, [pc, #292]	; (801e254 <__kernel_tan+0x22c>)
 801e12e:	eea2 3b06 	vfma.f64	d3, d2, d6
 801e132:	ee27 2b05 	vmul.f64	d2, d7, d5
 801e136:	eeb0 6b44 	vmov.f64	d6, d4
 801e13a:	eeb0 4b41 	vmov.f64	d4, d1
 801e13e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e142:	eea6 4b02 	vfma.f64	d4, d6, d2
 801e146:	ed9f 6b40 	vldr	d6, [pc, #256]	; 801e248 <__kernel_tan+0x220>
 801e14a:	eea4 1b05 	vfma.f64	d1, d4, d5
 801e14e:	428a      	cmp	r2, r1
 801e150:	eea2 1b06 	vfma.f64	d1, d2, d6
 801e154:	ee37 5b01 	vadd.f64	d5, d7, d1
 801e158:	dd1d      	ble.n	801e196 <__kernel_tan+0x16e>
 801e15a:	ee25 3b05 	vmul.f64	d3, d5, d5
 801e15e:	179b      	asrs	r3, r3, #30
 801e160:	ee06 0a90 	vmov	s13, r0
 801e164:	f003 0302 	and.w	r3, r3, #2
 801e168:	f1c3 0301 	rsb	r3, r3, #1
 801e16c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801e170:	ee35 5b06 	vadd.f64	d5, d5, d6
 801e174:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801e178:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801e17c:	ee34 1b41 	vsub.f64	d1, d4, d1
 801e180:	ee37 7b41 	vsub.f64	d7, d7, d1
 801e184:	eea7 6b45 	vfms.f64	d6, d7, d5
 801e188:	ee07 3a10 	vmov	s14, r3
 801e18c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801e190:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e194:	e764      	b.n	801e060 <__kernel_tan+0x38>
 801e196:	2801      	cmp	r0, #1
 801e198:	d016      	beq.n	801e1c8 <__kernel_tan+0x1a0>
 801e19a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e19e:	ec51 0b15 	vmov	r0, r1, d5
 801e1a2:	2000      	movs	r0, #0
 801e1a4:	ec41 0b13 	vmov	d3, r0, r1
 801e1a8:	ee33 7b47 	vsub.f64	d7, d3, d7
 801e1ac:	ee31 1b47 	vsub.f64	d1, d1, d7
 801e1b0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801e1b4:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801e1b8:	ec53 2b14 	vmov	r2, r3, d4
 801e1bc:	4602      	mov	r2, r0
 801e1be:	ec43 2b17 	vmov	d7, r2, r3
 801e1c2:	eea3 6b07 	vfma.f64	d6, d3, d7
 801e1c6:	e768      	b.n	801e09a <__kernel_tan+0x72>
 801e1c8:	eeb0 7b45 	vmov.f64	d7, d5
 801e1cc:	e748      	b.n	801e060 <__kernel_tan+0x38>
 801e1ce:	bf00      	nop
 801e1d0:	54442d18 	.word	0x54442d18
 801e1d4:	3fe921fb 	.word	0x3fe921fb
 801e1d8:	33145c07 	.word	0x33145c07
 801e1dc:	3c81a626 	.word	0x3c81a626
	...
 801e1e8:	db605373 	.word	0xdb605373
 801e1ec:	bef375cb 	.word	0xbef375cb
 801e1f0:	a03792a6 	.word	0xa03792a6
 801e1f4:	3f147e88 	.word	0x3f147e88
 801e1f8:	f2f26501 	.word	0xf2f26501
 801e1fc:	3f4344d8 	.word	0x3f4344d8
 801e200:	c9560328 	.word	0xc9560328
 801e204:	3f6d6d22 	.word	0x3f6d6d22
 801e208:	8406d637 	.word	0x8406d637
 801e20c:	3f9664f4 	.word	0x3f9664f4
 801e210:	1110fe7a 	.word	0x1110fe7a
 801e214:	3fc11111 	.word	0x3fc11111
 801e218:	74bf7ad4 	.word	0x74bf7ad4
 801e21c:	3efb2a70 	.word	0x3efb2a70
 801e220:	32f0a7e9 	.word	0x32f0a7e9
 801e224:	3f12b80f 	.word	0x3f12b80f
 801e228:	1a8d1068 	.word	0x1a8d1068
 801e22c:	3f3026f7 	.word	0x3f3026f7
 801e230:	fee08315 	.word	0xfee08315
 801e234:	3f57dbc8 	.word	0x3f57dbc8
 801e238:	e96e8493 	.word	0xe96e8493
 801e23c:	3f8226e3 	.word	0x3f8226e3
 801e240:	1bb341fe 	.word	0x1bb341fe
 801e244:	3faba1ba 	.word	0x3faba1ba
 801e248:	55555563 	.word	0x55555563
 801e24c:	3fd55555 	.word	0x3fd55555
 801e250:	3e2fffff 	.word	0x3e2fffff
 801e254:	3fe59427 	.word	0x3fe59427

0801e258 <__kernel_rem_pio2f>:
 801e258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e25c:	ed2d 8b04 	vpush	{d8-d9}
 801e260:	b0d9      	sub	sp, #356	; 0x164
 801e262:	4688      	mov	r8, r1
 801e264:	9002      	str	r0, [sp, #8]
 801e266:	49bb      	ldr	r1, [pc, #748]	; (801e554 <__kernel_rem_pio2f+0x2fc>)
 801e268:	9866      	ldr	r0, [sp, #408]	; 0x198
 801e26a:	9301      	str	r3, [sp, #4]
 801e26c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801e270:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801e274:	1e59      	subs	r1, r3, #1
 801e276:	1d13      	adds	r3, r2, #4
 801e278:	db27      	blt.n	801e2ca <__kernel_rem_pio2f+0x72>
 801e27a:	f1b2 0b03 	subs.w	fp, r2, #3
 801e27e:	bf48      	it	mi
 801e280:	f102 0b04 	addmi.w	fp, r2, #4
 801e284:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801e288:	1c45      	adds	r5, r0, #1
 801e28a:	00ec      	lsls	r4, r5, #3
 801e28c:	1a47      	subs	r7, r0, r1
 801e28e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801e564 <__kernel_rem_pio2f+0x30c>
 801e292:	9403      	str	r4, [sp, #12]
 801e294:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801e298:	eb0a 0c01 	add.w	ip, sl, r1
 801e29c:	ae1c      	add	r6, sp, #112	; 0x70
 801e29e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801e2a2:	2400      	movs	r4, #0
 801e2a4:	4564      	cmp	r4, ip
 801e2a6:	dd12      	ble.n	801e2ce <__kernel_rem_pio2f+0x76>
 801e2a8:	9b01      	ldr	r3, [sp, #4]
 801e2aa:	ac1c      	add	r4, sp, #112	; 0x70
 801e2ac:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801e2b0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801e2b4:	f04f 0c00 	mov.w	ip, #0
 801e2b8:	45d4      	cmp	ip, sl
 801e2ba:	dc27      	bgt.n	801e30c <__kernel_rem_pio2f+0xb4>
 801e2bc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801e2c0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801e564 <__kernel_rem_pio2f+0x30c>
 801e2c4:	4627      	mov	r7, r4
 801e2c6:	2600      	movs	r6, #0
 801e2c8:	e016      	b.n	801e2f8 <__kernel_rem_pio2f+0xa0>
 801e2ca:	2000      	movs	r0, #0
 801e2cc:	e7dc      	b.n	801e288 <__kernel_rem_pio2f+0x30>
 801e2ce:	42e7      	cmn	r7, r4
 801e2d0:	bf5d      	ittte	pl
 801e2d2:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801e2d6:	ee07 3a90 	vmovpl	s15, r3
 801e2da:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801e2de:	eef0 7a47 	vmovmi.f32	s15, s14
 801e2e2:	ece6 7a01 	vstmia	r6!, {s15}
 801e2e6:	3401      	adds	r4, #1
 801e2e8:	e7dc      	b.n	801e2a4 <__kernel_rem_pio2f+0x4c>
 801e2ea:	ecf9 6a01 	vldmia	r9!, {s13}
 801e2ee:	ed97 7a00 	vldr	s14, [r7]
 801e2f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e2f6:	3601      	adds	r6, #1
 801e2f8:	428e      	cmp	r6, r1
 801e2fa:	f1a7 0704 	sub.w	r7, r7, #4
 801e2fe:	ddf4      	ble.n	801e2ea <__kernel_rem_pio2f+0x92>
 801e300:	eceb 7a01 	vstmia	fp!, {s15}
 801e304:	f10c 0c01 	add.w	ip, ip, #1
 801e308:	3404      	adds	r4, #4
 801e30a:	e7d5      	b.n	801e2b8 <__kernel_rem_pio2f+0x60>
 801e30c:	ab08      	add	r3, sp, #32
 801e30e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801e312:	eddf 8a93 	vldr	s17, [pc, #588]	; 801e560 <__kernel_rem_pio2f+0x308>
 801e316:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801e55c <__kernel_rem_pio2f+0x304>
 801e31a:	9304      	str	r3, [sp, #16]
 801e31c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801e320:	4656      	mov	r6, sl
 801e322:	00b3      	lsls	r3, r6, #2
 801e324:	9305      	str	r3, [sp, #20]
 801e326:	ab58      	add	r3, sp, #352	; 0x160
 801e328:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e32c:	ac08      	add	r4, sp, #32
 801e32e:	ab44      	add	r3, sp, #272	; 0x110
 801e330:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801e334:	46a4      	mov	ip, r4
 801e336:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801e33a:	4637      	mov	r7, r6
 801e33c:	2f00      	cmp	r7, #0
 801e33e:	f1a0 0004 	sub.w	r0, r0, #4
 801e342:	dc4f      	bgt.n	801e3e4 <__kernel_rem_pio2f+0x18c>
 801e344:	4628      	mov	r0, r5
 801e346:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801e34a:	f000 fd3f 	bl	801edcc <scalbnf>
 801e34e:	eeb0 8a40 	vmov.f32	s16, s0
 801e352:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801e356:	ee28 0a00 	vmul.f32	s0, s16, s0
 801e35a:	f000 fcf5 	bl	801ed48 <floorf>
 801e35e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801e362:	eea0 8a67 	vfms.f32	s16, s0, s15
 801e366:	2d00      	cmp	r5, #0
 801e368:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801e36c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801e370:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801e374:	ee17 9a90 	vmov	r9, s15
 801e378:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e37c:	dd44      	ble.n	801e408 <__kernel_rem_pio2f+0x1b0>
 801e37e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801e382:	ab08      	add	r3, sp, #32
 801e384:	f1c5 0e08 	rsb	lr, r5, #8
 801e388:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801e38c:	fa47 f00e 	asr.w	r0, r7, lr
 801e390:	4481      	add	r9, r0
 801e392:	fa00 f00e 	lsl.w	r0, r0, lr
 801e396:	1a3f      	subs	r7, r7, r0
 801e398:	f1c5 0007 	rsb	r0, r5, #7
 801e39c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801e3a0:	4107      	asrs	r7, r0
 801e3a2:	2f00      	cmp	r7, #0
 801e3a4:	dd3f      	ble.n	801e426 <__kernel_rem_pio2f+0x1ce>
 801e3a6:	f04f 0e00 	mov.w	lr, #0
 801e3aa:	f109 0901 	add.w	r9, r9, #1
 801e3ae:	4673      	mov	r3, lr
 801e3b0:	4576      	cmp	r6, lr
 801e3b2:	dc6b      	bgt.n	801e48c <__kernel_rem_pio2f+0x234>
 801e3b4:	2d00      	cmp	r5, #0
 801e3b6:	dd04      	ble.n	801e3c2 <__kernel_rem_pio2f+0x16a>
 801e3b8:	2d01      	cmp	r5, #1
 801e3ba:	d078      	beq.n	801e4ae <__kernel_rem_pio2f+0x256>
 801e3bc:	2d02      	cmp	r5, #2
 801e3be:	f000 8081 	beq.w	801e4c4 <__kernel_rem_pio2f+0x26c>
 801e3c2:	2f02      	cmp	r7, #2
 801e3c4:	d12f      	bne.n	801e426 <__kernel_rem_pio2f+0x1ce>
 801e3c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e3ca:	ee30 8a48 	vsub.f32	s16, s0, s16
 801e3ce:	b353      	cbz	r3, 801e426 <__kernel_rem_pio2f+0x1ce>
 801e3d0:	4628      	mov	r0, r5
 801e3d2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801e3d6:	f000 fcf9 	bl	801edcc <scalbnf>
 801e3da:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801e3de:	ee38 8a40 	vsub.f32	s16, s16, s0
 801e3e2:	e020      	b.n	801e426 <__kernel_rem_pio2f+0x1ce>
 801e3e4:	ee60 7a28 	vmul.f32	s15, s0, s17
 801e3e8:	3f01      	subs	r7, #1
 801e3ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e3ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e3f2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801e3f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e3fa:	ecac 0a01 	vstmia	ip!, {s0}
 801e3fe:	ed90 0a00 	vldr	s0, [r0]
 801e402:	ee37 0a80 	vadd.f32	s0, s15, s0
 801e406:	e799      	b.n	801e33c <__kernel_rem_pio2f+0xe4>
 801e408:	d105      	bne.n	801e416 <__kernel_rem_pio2f+0x1be>
 801e40a:	1e70      	subs	r0, r6, #1
 801e40c:	ab08      	add	r3, sp, #32
 801e40e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801e412:	11ff      	asrs	r7, r7, #7
 801e414:	e7c5      	b.n	801e3a2 <__kernel_rem_pio2f+0x14a>
 801e416:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e41a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e422:	da31      	bge.n	801e488 <__kernel_rem_pio2f+0x230>
 801e424:	2700      	movs	r7, #0
 801e426:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e42e:	f040 809b 	bne.w	801e568 <__kernel_rem_pio2f+0x310>
 801e432:	1e74      	subs	r4, r6, #1
 801e434:	46a4      	mov	ip, r4
 801e436:	2000      	movs	r0, #0
 801e438:	45d4      	cmp	ip, sl
 801e43a:	da4a      	bge.n	801e4d2 <__kernel_rem_pio2f+0x27a>
 801e43c:	2800      	cmp	r0, #0
 801e43e:	d07a      	beq.n	801e536 <__kernel_rem_pio2f+0x2de>
 801e440:	ab08      	add	r3, sp, #32
 801e442:	3d08      	subs	r5, #8
 801e444:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801e448:	2b00      	cmp	r3, #0
 801e44a:	f000 8081 	beq.w	801e550 <__kernel_rem_pio2f+0x2f8>
 801e44e:	4628      	mov	r0, r5
 801e450:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e454:	00a5      	lsls	r5, r4, #2
 801e456:	f000 fcb9 	bl	801edcc <scalbnf>
 801e45a:	aa44      	add	r2, sp, #272	; 0x110
 801e45c:	1d2b      	adds	r3, r5, #4
 801e45e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801e560 <__kernel_rem_pio2f+0x308>
 801e462:	18d1      	adds	r1, r2, r3
 801e464:	4622      	mov	r2, r4
 801e466:	2a00      	cmp	r2, #0
 801e468:	f280 80ae 	bge.w	801e5c8 <__kernel_rem_pio2f+0x370>
 801e46c:	4622      	mov	r2, r4
 801e46e:	2a00      	cmp	r2, #0
 801e470:	f2c0 80cc 	blt.w	801e60c <__kernel_rem_pio2f+0x3b4>
 801e474:	a944      	add	r1, sp, #272	; 0x110
 801e476:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801e47a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801e558 <__kernel_rem_pio2f+0x300>
 801e47e:	eddf 7a39 	vldr	s15, [pc, #228]	; 801e564 <__kernel_rem_pio2f+0x30c>
 801e482:	2000      	movs	r0, #0
 801e484:	1aa1      	subs	r1, r4, r2
 801e486:	e0b6      	b.n	801e5f6 <__kernel_rem_pio2f+0x39e>
 801e488:	2702      	movs	r7, #2
 801e48a:	e78c      	b.n	801e3a6 <__kernel_rem_pio2f+0x14e>
 801e48c:	6820      	ldr	r0, [r4, #0]
 801e48e:	b94b      	cbnz	r3, 801e4a4 <__kernel_rem_pio2f+0x24c>
 801e490:	b118      	cbz	r0, 801e49a <__kernel_rem_pio2f+0x242>
 801e492:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801e496:	6020      	str	r0, [r4, #0]
 801e498:	2001      	movs	r0, #1
 801e49a:	f10e 0e01 	add.w	lr, lr, #1
 801e49e:	3404      	adds	r4, #4
 801e4a0:	4603      	mov	r3, r0
 801e4a2:	e785      	b.n	801e3b0 <__kernel_rem_pio2f+0x158>
 801e4a4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801e4a8:	6020      	str	r0, [r4, #0]
 801e4aa:	4618      	mov	r0, r3
 801e4ac:	e7f5      	b.n	801e49a <__kernel_rem_pio2f+0x242>
 801e4ae:	1e74      	subs	r4, r6, #1
 801e4b0:	a808      	add	r0, sp, #32
 801e4b2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801e4b6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801e4ba:	f10d 0c20 	add.w	ip, sp, #32
 801e4be:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801e4c2:	e77e      	b.n	801e3c2 <__kernel_rem_pio2f+0x16a>
 801e4c4:	1e74      	subs	r4, r6, #1
 801e4c6:	a808      	add	r0, sp, #32
 801e4c8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801e4cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801e4d0:	e7f3      	b.n	801e4ba <__kernel_rem_pio2f+0x262>
 801e4d2:	ab08      	add	r3, sp, #32
 801e4d4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801e4d8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801e4dc:	4318      	orrs	r0, r3
 801e4de:	e7ab      	b.n	801e438 <__kernel_rem_pio2f+0x1e0>
 801e4e0:	f10c 0c01 	add.w	ip, ip, #1
 801e4e4:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801e4e8:	2c00      	cmp	r4, #0
 801e4ea:	d0f9      	beq.n	801e4e0 <__kernel_rem_pio2f+0x288>
 801e4ec:	9b05      	ldr	r3, [sp, #20]
 801e4ee:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801e4f2:	eb0d 0003 	add.w	r0, sp, r3
 801e4f6:	9b01      	ldr	r3, [sp, #4]
 801e4f8:	18f4      	adds	r4, r6, r3
 801e4fa:	ab1c      	add	r3, sp, #112	; 0x70
 801e4fc:	1c77      	adds	r7, r6, #1
 801e4fe:	384c      	subs	r0, #76	; 0x4c
 801e500:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e504:	4466      	add	r6, ip
 801e506:	42be      	cmp	r6, r7
 801e508:	f6ff af0b 	blt.w	801e322 <__kernel_rem_pio2f+0xca>
 801e50c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801e510:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e514:	ee07 3a90 	vmov	s15, r3
 801e518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e51c:	f04f 0c00 	mov.w	ip, #0
 801e520:	ece4 7a01 	vstmia	r4!, {s15}
 801e524:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801e564 <__kernel_rem_pio2f+0x30c>
 801e528:	46a1      	mov	r9, r4
 801e52a:	458c      	cmp	ip, r1
 801e52c:	dd07      	ble.n	801e53e <__kernel_rem_pio2f+0x2e6>
 801e52e:	ece0 7a01 	vstmia	r0!, {s15}
 801e532:	3701      	adds	r7, #1
 801e534:	e7e7      	b.n	801e506 <__kernel_rem_pio2f+0x2ae>
 801e536:	9804      	ldr	r0, [sp, #16]
 801e538:	f04f 0c01 	mov.w	ip, #1
 801e53c:	e7d2      	b.n	801e4e4 <__kernel_rem_pio2f+0x28c>
 801e53e:	ecfe 6a01 	vldmia	lr!, {s13}
 801e542:	ed39 7a01 	vldmdb	r9!, {s14}
 801e546:	f10c 0c01 	add.w	ip, ip, #1
 801e54a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e54e:	e7ec      	b.n	801e52a <__kernel_rem_pio2f+0x2d2>
 801e550:	3c01      	subs	r4, #1
 801e552:	e775      	b.n	801e440 <__kernel_rem_pio2f+0x1e8>
 801e554:	08037da4 	.word	0x08037da4
 801e558:	08037d78 	.word	0x08037d78
 801e55c:	43800000 	.word	0x43800000
 801e560:	3b800000 	.word	0x3b800000
 801e564:	00000000 	.word	0x00000000
 801e568:	9b03      	ldr	r3, [sp, #12]
 801e56a:	eeb0 0a48 	vmov.f32	s0, s16
 801e56e:	1a98      	subs	r0, r3, r2
 801e570:	f000 fc2c 	bl	801edcc <scalbnf>
 801e574:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801e55c <__kernel_rem_pio2f+0x304>
 801e578:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801e57c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e580:	db19      	blt.n	801e5b6 <__kernel_rem_pio2f+0x35e>
 801e582:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801e560 <__kernel_rem_pio2f+0x308>
 801e586:	ee60 7a27 	vmul.f32	s15, s0, s15
 801e58a:	aa08      	add	r2, sp, #32
 801e58c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e590:	1c74      	adds	r4, r6, #1
 801e592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e596:	3508      	adds	r5, #8
 801e598:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801e59c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e5a0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e5a4:	ee10 3a10 	vmov	r3, s0
 801e5a8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801e5ac:	ee17 3a90 	vmov	r3, s15
 801e5b0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801e5b4:	e74b      	b.n	801e44e <__kernel_rem_pio2f+0x1f6>
 801e5b6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801e5ba:	aa08      	add	r2, sp, #32
 801e5bc:	ee10 3a10 	vmov	r3, s0
 801e5c0:	4634      	mov	r4, r6
 801e5c2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801e5c6:	e742      	b.n	801e44e <__kernel_rem_pio2f+0x1f6>
 801e5c8:	a808      	add	r0, sp, #32
 801e5ca:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801e5ce:	9001      	str	r0, [sp, #4]
 801e5d0:	ee07 0a90 	vmov	s15, r0
 801e5d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e5d8:	3a01      	subs	r2, #1
 801e5da:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e5de:	ee20 0a07 	vmul.f32	s0, s0, s14
 801e5e2:	ed61 7a01 	vstmdb	r1!, {s15}
 801e5e6:	e73e      	b.n	801e466 <__kernel_rem_pio2f+0x20e>
 801e5e8:	ecfc 6a01 	vldmia	ip!, {s13}
 801e5ec:	ecb6 7a01 	vldmia	r6!, {s14}
 801e5f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 801e5f4:	3001      	adds	r0, #1
 801e5f6:	4550      	cmp	r0, sl
 801e5f8:	dc01      	bgt.n	801e5fe <__kernel_rem_pio2f+0x3a6>
 801e5fa:	4288      	cmp	r0, r1
 801e5fc:	ddf4      	ble.n	801e5e8 <__kernel_rem_pio2f+0x390>
 801e5fe:	a858      	add	r0, sp, #352	; 0x160
 801e600:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e604:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801e608:	3a01      	subs	r2, #1
 801e60a:	e730      	b.n	801e46e <__kernel_rem_pio2f+0x216>
 801e60c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801e60e:	2a02      	cmp	r2, #2
 801e610:	dc09      	bgt.n	801e626 <__kernel_rem_pio2f+0x3ce>
 801e612:	2a00      	cmp	r2, #0
 801e614:	dc2a      	bgt.n	801e66c <__kernel_rem_pio2f+0x414>
 801e616:	d043      	beq.n	801e6a0 <__kernel_rem_pio2f+0x448>
 801e618:	f009 0007 	and.w	r0, r9, #7
 801e61c:	b059      	add	sp, #356	; 0x164
 801e61e:	ecbd 8b04 	vpop	{d8-d9}
 801e622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e626:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801e628:	2b03      	cmp	r3, #3
 801e62a:	d1f5      	bne.n	801e618 <__kernel_rem_pio2f+0x3c0>
 801e62c:	ab30      	add	r3, sp, #192	; 0xc0
 801e62e:	442b      	add	r3, r5
 801e630:	461a      	mov	r2, r3
 801e632:	4619      	mov	r1, r3
 801e634:	4620      	mov	r0, r4
 801e636:	2800      	cmp	r0, #0
 801e638:	f1a1 0104 	sub.w	r1, r1, #4
 801e63c:	dc51      	bgt.n	801e6e2 <__kernel_rem_pio2f+0x48a>
 801e63e:	4621      	mov	r1, r4
 801e640:	2901      	cmp	r1, #1
 801e642:	f1a2 0204 	sub.w	r2, r2, #4
 801e646:	dc5c      	bgt.n	801e702 <__kernel_rem_pio2f+0x4aa>
 801e648:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801e564 <__kernel_rem_pio2f+0x30c>
 801e64c:	3304      	adds	r3, #4
 801e64e:	2c01      	cmp	r4, #1
 801e650:	dc67      	bgt.n	801e722 <__kernel_rem_pio2f+0x4ca>
 801e652:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801e656:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801e65a:	2f00      	cmp	r7, #0
 801e65c:	d167      	bne.n	801e72e <__kernel_rem_pio2f+0x4d6>
 801e65e:	edc8 6a00 	vstr	s13, [r8]
 801e662:	ed88 7a01 	vstr	s14, [r8, #4]
 801e666:	edc8 7a02 	vstr	s15, [r8, #8]
 801e66a:	e7d5      	b.n	801e618 <__kernel_rem_pio2f+0x3c0>
 801e66c:	aa30      	add	r2, sp, #192	; 0xc0
 801e66e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801e564 <__kernel_rem_pio2f+0x30c>
 801e672:	4413      	add	r3, r2
 801e674:	4622      	mov	r2, r4
 801e676:	2a00      	cmp	r2, #0
 801e678:	da24      	bge.n	801e6c4 <__kernel_rem_pio2f+0x46c>
 801e67a:	b34f      	cbz	r7, 801e6d0 <__kernel_rem_pio2f+0x478>
 801e67c:	eef1 7a47 	vneg.f32	s15, s14
 801e680:	edc8 7a00 	vstr	s15, [r8]
 801e684:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801e688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e68c:	aa31      	add	r2, sp, #196	; 0xc4
 801e68e:	2301      	movs	r3, #1
 801e690:	429c      	cmp	r4, r3
 801e692:	da20      	bge.n	801e6d6 <__kernel_rem_pio2f+0x47e>
 801e694:	b10f      	cbz	r7, 801e69a <__kernel_rem_pio2f+0x442>
 801e696:	eef1 7a67 	vneg.f32	s15, s15
 801e69a:	edc8 7a01 	vstr	s15, [r8, #4]
 801e69e:	e7bb      	b.n	801e618 <__kernel_rem_pio2f+0x3c0>
 801e6a0:	aa30      	add	r2, sp, #192	; 0xc0
 801e6a2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801e564 <__kernel_rem_pio2f+0x30c>
 801e6a6:	4413      	add	r3, r2
 801e6a8:	2c00      	cmp	r4, #0
 801e6aa:	da05      	bge.n	801e6b8 <__kernel_rem_pio2f+0x460>
 801e6ac:	b10f      	cbz	r7, 801e6b2 <__kernel_rem_pio2f+0x45a>
 801e6ae:	eef1 7a67 	vneg.f32	s15, s15
 801e6b2:	edc8 7a00 	vstr	s15, [r8]
 801e6b6:	e7af      	b.n	801e618 <__kernel_rem_pio2f+0x3c0>
 801e6b8:	ed33 7a01 	vldmdb	r3!, {s14}
 801e6bc:	3c01      	subs	r4, #1
 801e6be:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e6c2:	e7f1      	b.n	801e6a8 <__kernel_rem_pio2f+0x450>
 801e6c4:	ed73 7a01 	vldmdb	r3!, {s15}
 801e6c8:	3a01      	subs	r2, #1
 801e6ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e6ce:	e7d2      	b.n	801e676 <__kernel_rem_pio2f+0x41e>
 801e6d0:	eef0 7a47 	vmov.f32	s15, s14
 801e6d4:	e7d4      	b.n	801e680 <__kernel_rem_pio2f+0x428>
 801e6d6:	ecb2 7a01 	vldmia	r2!, {s14}
 801e6da:	3301      	adds	r3, #1
 801e6dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e6e0:	e7d6      	b.n	801e690 <__kernel_rem_pio2f+0x438>
 801e6e2:	edd1 7a00 	vldr	s15, [r1]
 801e6e6:	edd1 6a01 	vldr	s13, [r1, #4]
 801e6ea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e6ee:	3801      	subs	r0, #1
 801e6f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e6f4:	ed81 7a00 	vstr	s14, [r1]
 801e6f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e6fc:	edc1 7a01 	vstr	s15, [r1, #4]
 801e700:	e799      	b.n	801e636 <__kernel_rem_pio2f+0x3de>
 801e702:	edd2 7a00 	vldr	s15, [r2]
 801e706:	edd2 6a01 	vldr	s13, [r2, #4]
 801e70a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801e70e:	3901      	subs	r1, #1
 801e710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e714:	ed82 7a00 	vstr	s14, [r2]
 801e718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e71c:	edc2 7a01 	vstr	s15, [r2, #4]
 801e720:	e78e      	b.n	801e640 <__kernel_rem_pio2f+0x3e8>
 801e722:	ed33 7a01 	vldmdb	r3!, {s14}
 801e726:	3c01      	subs	r4, #1
 801e728:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e72c:	e78f      	b.n	801e64e <__kernel_rem_pio2f+0x3f6>
 801e72e:	eef1 6a66 	vneg.f32	s13, s13
 801e732:	eeb1 7a47 	vneg.f32	s14, s14
 801e736:	edc8 6a00 	vstr	s13, [r8]
 801e73a:	ed88 7a01 	vstr	s14, [r8, #4]
 801e73e:	eef1 7a67 	vneg.f32	s15, s15
 801e742:	e790      	b.n	801e666 <__kernel_rem_pio2f+0x40e>

0801e744 <__kernel_tanf>:
 801e744:	b508      	push	{r3, lr}
 801e746:	ee10 3a10 	vmov	r3, s0
 801e74a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801e74e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801e752:	eef0 7a40 	vmov.f32	s15, s0
 801e756:	da17      	bge.n	801e788 <__kernel_tanf+0x44>
 801e758:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801e75c:	ee17 1a10 	vmov	r1, s14
 801e760:	bb41      	cbnz	r1, 801e7b4 <__kernel_tanf+0x70>
 801e762:	1c43      	adds	r3, r0, #1
 801e764:	4313      	orrs	r3, r2
 801e766:	d108      	bne.n	801e77a <__kernel_tanf+0x36>
 801e768:	f7fe fc3a 	bl	801cfe0 <fabsf>
 801e76c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e770:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e774:	eeb0 0a67 	vmov.f32	s0, s15
 801e778:	bd08      	pop	{r3, pc}
 801e77a:	2801      	cmp	r0, #1
 801e77c:	d0fa      	beq.n	801e774 <__kernel_tanf+0x30>
 801e77e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e782:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e786:	e7f5      	b.n	801e774 <__kernel_tanf+0x30>
 801e788:	494c      	ldr	r1, [pc, #304]	; (801e8bc <__kernel_tanf+0x178>)
 801e78a:	428a      	cmp	r2, r1
 801e78c:	db12      	blt.n	801e7b4 <__kernel_tanf+0x70>
 801e78e:	2b00      	cmp	r3, #0
 801e790:	bfb8      	it	lt
 801e792:	eef1 7a40 	vneglt.f32	s15, s0
 801e796:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801e8c0 <__kernel_tanf+0x17c>
 801e79a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801e79e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801e8c4 <__kernel_tanf+0x180>
 801e7a2:	bfb8      	it	lt
 801e7a4:	eef1 0a60 	vneglt.f32	s1, s1
 801e7a8:	ee70 0a60 	vsub.f32	s1, s0, s1
 801e7ac:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801e7b0:	eddf 0a45 	vldr	s1, [pc, #276]	; 801e8c8 <__kernel_tanf+0x184>
 801e7b4:	eddf 5a45 	vldr	s11, [pc, #276]	; 801e8cc <__kernel_tanf+0x188>
 801e7b8:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801e8d0 <__kernel_tanf+0x18c>
 801e7bc:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801e8d4 <__kernel_tanf+0x190>
 801e7c0:	493e      	ldr	r1, [pc, #248]	; (801e8bc <__kernel_tanf+0x178>)
 801e7c2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801e7c6:	428a      	cmp	r2, r1
 801e7c8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801e7cc:	eea7 6a25 	vfma.f32	s12, s14, s11
 801e7d0:	eddf 5a41 	vldr	s11, [pc, #260]	; 801e8d8 <__kernel_tanf+0x194>
 801e7d4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e7d8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801e8dc <__kernel_tanf+0x198>
 801e7dc:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e7e0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801e8e0 <__kernel_tanf+0x19c>
 801e7e4:	eee6 5a07 	vfma.f32	s11, s12, s14
 801e7e8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801e8e4 <__kernel_tanf+0x1a0>
 801e7ec:	eea5 6a87 	vfma.f32	s12, s11, s14
 801e7f0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801e8e8 <__kernel_tanf+0x1a4>
 801e7f4:	eee7 5a05 	vfma.f32	s11, s14, s10
 801e7f8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801e8ec <__kernel_tanf+0x1a8>
 801e7fc:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e800:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801e8f0 <__kernel_tanf+0x1ac>
 801e804:	eee5 5a07 	vfma.f32	s11, s10, s14
 801e808:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801e8f4 <__kernel_tanf+0x1b0>
 801e80c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801e810:	eddf 5a39 	vldr	s11, [pc, #228]	; 801e8f8 <__kernel_tanf+0x1b4>
 801e814:	eee5 5a07 	vfma.f32	s11, s10, s14
 801e818:	eeb0 7a46 	vmov.f32	s14, s12
 801e81c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801e820:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801e824:	eeb0 6a60 	vmov.f32	s12, s1
 801e828:	eea7 6a05 	vfma.f32	s12, s14, s10
 801e82c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801e8fc <__kernel_tanf+0x1b8>
 801e830:	eee6 0a26 	vfma.f32	s1, s12, s13
 801e834:	eee5 0a07 	vfma.f32	s1, s10, s14
 801e838:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801e83c:	db1d      	blt.n	801e87a <__kernel_tanf+0x136>
 801e83e:	ee06 0a90 	vmov	s13, r0
 801e842:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801e846:	ee27 6a07 	vmul.f32	s12, s14, s14
 801e84a:	ee37 7a00 	vadd.f32	s14, s14, s0
 801e84e:	179b      	asrs	r3, r3, #30
 801e850:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801e854:	f003 0302 	and.w	r3, r3, #2
 801e858:	f1c3 0301 	rsb	r3, r3, #1
 801e85c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801e860:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801e864:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801e868:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801e86c:	ee07 3a90 	vmov	s15, r3
 801e870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801e874:	ee67 7a80 	vmul.f32	s15, s15, s0
 801e878:	e77c      	b.n	801e774 <__kernel_tanf+0x30>
 801e87a:	2801      	cmp	r0, #1
 801e87c:	d01b      	beq.n	801e8b6 <__kernel_tanf+0x172>
 801e87e:	4b20      	ldr	r3, [pc, #128]	; (801e900 <__kernel_tanf+0x1bc>)
 801e880:	ee17 2a10 	vmov	r2, s14
 801e884:	401a      	ands	r2, r3
 801e886:	ee06 2a10 	vmov	s12, r2
 801e88a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801e88e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e892:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801e896:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801e89a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e89e:	ee16 2a90 	vmov	r2, s13
 801e8a2:	4013      	ands	r3, r2
 801e8a4:	ee07 3a90 	vmov	s15, r3
 801e8a8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801e8ac:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801e8b0:	eee7 7a26 	vfma.f32	s15, s14, s13
 801e8b4:	e75e      	b.n	801e774 <__kernel_tanf+0x30>
 801e8b6:	eef0 7a47 	vmov.f32	s15, s14
 801e8ba:	e75b      	b.n	801e774 <__kernel_tanf+0x30>
 801e8bc:	3f2ca140 	.word	0x3f2ca140
 801e8c0:	3f490fda 	.word	0x3f490fda
 801e8c4:	33222168 	.word	0x33222168
 801e8c8:	00000000 	.word	0x00000000
 801e8cc:	b79bae5f 	.word	0xb79bae5f
 801e8d0:	38a3f445 	.word	0x38a3f445
 801e8d4:	37d95384 	.word	0x37d95384
 801e8d8:	3a1a26c8 	.word	0x3a1a26c8
 801e8dc:	3b6b6916 	.word	0x3b6b6916
 801e8e0:	3cb327a4 	.word	0x3cb327a4
 801e8e4:	3e088889 	.word	0x3e088889
 801e8e8:	3895c07a 	.word	0x3895c07a
 801e8ec:	398137b9 	.word	0x398137b9
 801e8f0:	3abede48 	.word	0x3abede48
 801e8f4:	3c11371f 	.word	0x3c11371f
 801e8f8:	3d5d0dd1 	.word	0x3d5d0dd1
 801e8fc:	3eaaaaab 	.word	0x3eaaaaab
 801e900:	fffff000 	.word	0xfffff000

0801e904 <fabs>:
 801e904:	ec51 0b10 	vmov	r0, r1, d0
 801e908:	ee10 2a10 	vmov	r2, s0
 801e90c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e910:	ec43 2b10 	vmov	d0, r2, r3
 801e914:	4770      	bx	lr
	...

0801e918 <floor>:
 801e918:	ee10 1a90 	vmov	r1, s1
 801e91c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e920:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801e924:	2b13      	cmp	r3, #19
 801e926:	b530      	push	{r4, r5, lr}
 801e928:	ee10 0a10 	vmov	r0, s0
 801e92c:	ee10 5a10 	vmov	r5, s0
 801e930:	dc31      	bgt.n	801e996 <floor+0x7e>
 801e932:	2b00      	cmp	r3, #0
 801e934:	da15      	bge.n	801e962 <floor+0x4a>
 801e936:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801e9f0 <floor+0xd8>
 801e93a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e93e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e946:	dd07      	ble.n	801e958 <floor+0x40>
 801e948:	2900      	cmp	r1, #0
 801e94a:	da4e      	bge.n	801e9ea <floor+0xd2>
 801e94c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e950:	4318      	orrs	r0, r3
 801e952:	d001      	beq.n	801e958 <floor+0x40>
 801e954:	4928      	ldr	r1, [pc, #160]	; (801e9f8 <floor+0xe0>)
 801e956:	2000      	movs	r0, #0
 801e958:	460b      	mov	r3, r1
 801e95a:	4602      	mov	r2, r0
 801e95c:	ec43 2b10 	vmov	d0, r2, r3
 801e960:	e020      	b.n	801e9a4 <floor+0x8c>
 801e962:	4a26      	ldr	r2, [pc, #152]	; (801e9fc <floor+0xe4>)
 801e964:	411a      	asrs	r2, r3
 801e966:	ea01 0402 	and.w	r4, r1, r2
 801e96a:	4304      	orrs	r4, r0
 801e96c:	d01a      	beq.n	801e9a4 <floor+0x8c>
 801e96e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801e9f0 <floor+0xd8>
 801e972:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e976:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e97e:	ddeb      	ble.n	801e958 <floor+0x40>
 801e980:	2900      	cmp	r1, #0
 801e982:	bfbe      	ittt	lt
 801e984:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801e988:	fa40 f303 	asrlt.w	r3, r0, r3
 801e98c:	18c9      	addlt	r1, r1, r3
 801e98e:	ea21 0102 	bic.w	r1, r1, r2
 801e992:	2000      	movs	r0, #0
 801e994:	e7e0      	b.n	801e958 <floor+0x40>
 801e996:	2b33      	cmp	r3, #51	; 0x33
 801e998:	dd05      	ble.n	801e9a6 <floor+0x8e>
 801e99a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e99e:	d101      	bne.n	801e9a4 <floor+0x8c>
 801e9a0:	ee30 0b00 	vadd.f64	d0, d0, d0
 801e9a4:	bd30      	pop	{r4, r5, pc}
 801e9a6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801e9aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e9ae:	40e2      	lsrs	r2, r4
 801e9b0:	4202      	tst	r2, r0
 801e9b2:	d0f7      	beq.n	801e9a4 <floor+0x8c>
 801e9b4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801e9f0 <floor+0xd8>
 801e9b8:	ee30 0b07 	vadd.f64	d0, d0, d7
 801e9bc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801e9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9c4:	ddc8      	ble.n	801e958 <floor+0x40>
 801e9c6:	2900      	cmp	r1, #0
 801e9c8:	da02      	bge.n	801e9d0 <floor+0xb8>
 801e9ca:	2b14      	cmp	r3, #20
 801e9cc:	d103      	bne.n	801e9d6 <floor+0xbe>
 801e9ce:	3101      	adds	r1, #1
 801e9d0:	ea20 0002 	bic.w	r0, r0, r2
 801e9d4:	e7c0      	b.n	801e958 <floor+0x40>
 801e9d6:	2401      	movs	r4, #1
 801e9d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e9dc:	fa04 f303 	lsl.w	r3, r4, r3
 801e9e0:	4418      	add	r0, r3
 801e9e2:	42a8      	cmp	r0, r5
 801e9e4:	bf38      	it	cc
 801e9e6:	1909      	addcc	r1, r1, r4
 801e9e8:	e7f2      	b.n	801e9d0 <floor+0xb8>
 801e9ea:	2000      	movs	r0, #0
 801e9ec:	4601      	mov	r1, r0
 801e9ee:	e7b3      	b.n	801e958 <floor+0x40>
 801e9f0:	8800759c 	.word	0x8800759c
 801e9f4:	7e37e43c 	.word	0x7e37e43c
 801e9f8:	bff00000 	.word	0xbff00000
 801e9fc:	000fffff 	.word	0x000fffff

0801ea00 <scalbn>:
 801ea00:	ee10 1a90 	vmov	r1, s1
 801ea04:	b510      	push	{r4, lr}
 801ea06:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801ea0a:	b98c      	cbnz	r4, 801ea30 <scalbn+0x30>
 801ea0c:	ee10 3a10 	vmov	r3, s0
 801ea10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ea14:	430b      	orrs	r3, r1
 801ea16:	d011      	beq.n	801ea3c <scalbn+0x3c>
 801ea18:	ed9f 7b31 	vldr	d7, [pc, #196]	; 801eae0 <scalbn+0xe0>
 801ea1c:	4b3c      	ldr	r3, [pc, #240]	; (801eb10 <scalbn+0x110>)
 801ea1e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ea22:	4298      	cmp	r0, r3
 801ea24:	da0b      	bge.n	801ea3e <scalbn+0x3e>
 801ea26:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801eae8 <scalbn+0xe8>
 801ea2a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ea2e:	e005      	b.n	801ea3c <scalbn+0x3c>
 801ea30:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801ea34:	429c      	cmp	r4, r3
 801ea36:	d107      	bne.n	801ea48 <scalbn+0x48>
 801ea38:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ea3c:	bd10      	pop	{r4, pc}
 801ea3e:	ee10 1a90 	vmov	r1, s1
 801ea42:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801ea46:	3c36      	subs	r4, #54	; 0x36
 801ea48:	4404      	add	r4, r0
 801ea4a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801ea4e:	429c      	cmp	r4, r3
 801ea50:	dd0d      	ble.n	801ea6e <scalbn+0x6e>
 801ea52:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801eaf0 <scalbn+0xf0>
 801ea56:	ed9f 5b28 	vldr	d5, [pc, #160]	; 801eaf8 <scalbn+0xf8>
 801ea5a:	eeb0 6b47 	vmov.f64	d6, d7
 801ea5e:	ee10 3a90 	vmov	r3, s1
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	fe27 7b05 	vselge.f64	d7, d7, d5
 801ea68:	ee27 0b06 	vmul.f64	d0, d7, d6
 801ea6c:	e7e6      	b.n	801ea3c <scalbn+0x3c>
 801ea6e:	2c00      	cmp	r4, #0
 801ea70:	dd0a      	ble.n	801ea88 <scalbn+0x88>
 801ea72:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801ea76:	ec53 2b10 	vmov	r2, r3, d0
 801ea7a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801ea7e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801ea82:	ec43 2b10 	vmov	d0, r2, r3
 801ea86:	e7d9      	b.n	801ea3c <scalbn+0x3c>
 801ea88:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801ea8c:	da19      	bge.n	801eac2 <scalbn+0xc2>
 801ea8e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ea92:	4298      	cmp	r0, r3
 801ea94:	ee10 3a90 	vmov	r3, s1
 801ea98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ea9c:	dd09      	ble.n	801eab2 <scalbn+0xb2>
 801ea9e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 801eaf0 <scalbn+0xf0>
 801eaa2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 801eaf8 <scalbn+0xf8>
 801eaa6:	eeb0 7b40 	vmov.f64	d7, d0
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	fe00 0b06 	vseleq.f64	d0, d0, d6
 801eab0:	e7bb      	b.n	801ea2a <scalbn+0x2a>
 801eab2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 801eae8 <scalbn+0xe8>
 801eab6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 801eb00 <scalbn+0x100>
 801eaba:	eeb0 7b40 	vmov.f64	d7, d0
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	e7f4      	b.n	801eaac <scalbn+0xac>
 801eac2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801eac6:	ec53 2b10 	vmov	r2, r3, d0
 801eaca:	3436      	adds	r4, #54	; 0x36
 801eacc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801ead0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801ead4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801eb08 <scalbn+0x108>
 801ead8:	ec43 2b10 	vmov	d0, r2, r3
 801eadc:	e7a5      	b.n	801ea2a <scalbn+0x2a>
 801eade:	bf00      	nop
 801eae0:	00000000 	.word	0x00000000
 801eae4:	43500000 	.word	0x43500000
 801eae8:	c2f8f359 	.word	0xc2f8f359
 801eaec:	01a56e1f 	.word	0x01a56e1f
 801eaf0:	8800759c 	.word	0x8800759c
 801eaf4:	7e37e43c 	.word	0x7e37e43c
 801eaf8:	8800759c 	.word	0x8800759c
 801eafc:	fe37e43c 	.word	0xfe37e43c
 801eb00:	c2f8f359 	.word	0xc2f8f359
 801eb04:	81a56e1f 	.word	0x81a56e1f
 801eb08:	00000000 	.word	0x00000000
 801eb0c:	3c900000 	.word	0x3c900000
 801eb10:	ffff3cb0 	.word	0xffff3cb0

0801eb14 <expm1f>:
 801eb14:	ee10 2a10 	vmov	r2, s0
 801eb18:	497c      	ldr	r1, [pc, #496]	; (801ed0c <expm1f+0x1f8>)
 801eb1a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801eb1e:	428b      	cmp	r3, r1
 801eb20:	d920      	bls.n	801eb64 <expm1f+0x50>
 801eb22:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801eb26:	d902      	bls.n	801eb2e <expm1f+0x1a>
 801eb28:	ee30 0a00 	vadd.f32	s0, s0, s0
 801eb2c:	4770      	bx	lr
 801eb2e:	d105      	bne.n	801eb3c <expm1f+0x28>
 801eb30:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801eb34:	2a00      	cmp	r2, #0
 801eb36:	fe20 0a27 	vselge.f32	s0, s0, s15
 801eb3a:	4770      	bx	lr
 801eb3c:	2a00      	cmp	r2, #0
 801eb3e:	db05      	blt.n	801eb4c <expm1f+0x38>
 801eb40:	4973      	ldr	r1, [pc, #460]	; (801ed10 <expm1f+0x1fc>)
 801eb42:	428b      	cmp	r3, r1
 801eb44:	d95c      	bls.n	801ec00 <expm1f+0xec>
 801eb46:	2000      	movs	r0, #0
 801eb48:	f7fe b97c 	b.w	801ce44 <__math_oflowf>
 801eb4c:	eddf 7a71 	vldr	s15, [pc, #452]	; 801ed14 <expm1f+0x200>
 801eb50:	ee70 7a27 	vadd.f32	s15, s0, s15
 801eb54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801eb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb5c:	d550      	bpl.n	801ec00 <expm1f+0xec>
 801eb5e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801eb62:	4770      	bx	lr
 801eb64:	496c      	ldr	r1, [pc, #432]	; (801ed18 <expm1f+0x204>)
 801eb66:	428b      	cmp	r3, r1
 801eb68:	d966      	bls.n	801ec38 <expm1f+0x124>
 801eb6a:	496c      	ldr	r1, [pc, #432]	; (801ed1c <expm1f+0x208>)
 801eb6c:	428b      	cmp	r3, r1
 801eb6e:	d847      	bhi.n	801ec00 <expm1f+0xec>
 801eb70:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 801ed20 <expm1f+0x20c>
 801eb74:	2a00      	cmp	r2, #0
 801eb76:	bfa7      	ittee	ge
 801eb78:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801eb7c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 801ed24 <expm1f+0x210>
 801eb80:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 801ed28 <expm1f+0x214>
 801eb84:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801eb88:	bfac      	ite	ge
 801eb8a:	2301      	movge	r3, #1
 801eb8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801eb90:	ee37 0a67 	vsub.f32	s0, s14, s15
 801eb94:	ee37 7a40 	vsub.f32	s14, s14, s0
 801eb98:	ee77 7a67 	vsub.f32	s15, s14, s15
 801eb9c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801eba0:	ee20 4a25 	vmul.f32	s8, s0, s11
 801eba4:	ed9f 6a61 	vldr	s12, [pc, #388]	; 801ed2c <expm1f+0x218>
 801eba8:	eddf 6a61 	vldr	s13, [pc, #388]	; 801ed30 <expm1f+0x21c>
 801ebac:	ed9f 5a61 	vldr	s10, [pc, #388]	; 801ed34 <expm1f+0x220>
 801ebb0:	ee20 7a04 	vmul.f32	s14, s0, s8
 801ebb4:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801ebb8:	eee7 6a06 	vfma.f32	s13, s14, s12
 801ebbc:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 801ed38 <expm1f+0x224>
 801ebc0:	eea6 6a87 	vfma.f32	s12, s13, s14
 801ebc4:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801ed3c <expm1f+0x228>
 801ebc8:	eee6 6a07 	vfma.f32	s13, s12, s14
 801ebcc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801ebd0:	eea6 5a87 	vfma.f32	s10, s13, s14
 801ebd4:	eef0 6a46 	vmov.f32	s13, s12
 801ebd8:	eee5 6a07 	vfma.f32	s13, s10, s14
 801ebdc:	eee4 4a66 	vfms.f32	s9, s8, s13
 801ebe0:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801ebe4:	eea0 4a64 	vfms.f32	s8, s0, s9
 801ebe8:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801ebec:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801ebf0:	ee66 6a87 	vmul.f32	s13, s13, s14
 801ebf4:	bb73      	cbnz	r3, 801ec54 <expm1f+0x140>
 801ebf6:	eef0 7a47 	vmov.f32	s15, s14
 801ebfa:	eed0 7a26 	vfnms.f32	s15, s0, s13
 801ebfe:	e024      	b.n	801ec4a <expm1f+0x136>
 801ec00:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801ec04:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ec08:	2a00      	cmp	r2, #0
 801ec0a:	fe67 7a87 	vselge.f32	s15, s15, s14
 801ec0e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801ed40 <expm1f+0x22c>
 801ec12:	eddf 6a43 	vldr	s13, [pc, #268]	; 801ed20 <expm1f+0x20c>
 801ec16:	ee40 7a07 	vmla.f32	s15, s0, s14
 801ec1a:	eeb0 7a40 	vmov.f32	s14, s0
 801ec1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ec22:	ee17 3a90 	vmov	r3, s15
 801ec26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec2a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ec2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801ed24 <expm1f+0x210>
 801ec32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ec36:	e7ab      	b.n	801eb90 <expm1f+0x7c>
 801ec38:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801ec3c:	d208      	bcs.n	801ec50 <expm1f+0x13c>
 801ec3e:	eddf 7a41 	vldr	s15, [pc, #260]	; 801ed44 <expm1f+0x230>
 801ec42:	ee70 7a27 	vadd.f32	s15, s0, s15
 801ec46:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801ec4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ec4e:	4770      	bx	lr
 801ec50:	2300      	movs	r3, #0
 801ec52:	e7a3      	b.n	801eb9c <expm1f+0x88>
 801ec54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801ec58:	1c5a      	adds	r2, r3, #1
 801ec5a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801ec5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ec62:	d106      	bne.n	801ec72 <expm1f+0x15e>
 801ec64:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ec68:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801ec6c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801ec70:	4770      	bx	lr
 801ec72:	2b01      	cmp	r3, #1
 801ec74:	d118      	bne.n	801eca8 <expm1f+0x194>
 801ec76:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801ec7a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801ec7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec82:	bf5b      	ittet	pl
 801ec84:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801ec88:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801ec8c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801ec90:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801ec94:	bf43      	ittte	mi
 801ec96:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 801ec9a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801ec9e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801eca2:	eeb0 0a46 	vmovpl.f32	s0, s12
 801eca6:	4770      	bx	lr
 801eca8:	1c5a      	adds	r2, r3, #1
 801ecaa:	2a39      	cmp	r2, #57	; 0x39
 801ecac:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801ecb0:	d90b      	bls.n	801ecca <expm1f+0x1b6>
 801ecb2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ecb6:	ee36 0a40 	vsub.f32	s0, s12, s0
 801ecba:	ee10 3a10 	vmov	r3, s0
 801ecbe:	440b      	add	r3, r1
 801ecc0:	ee00 3a10 	vmov	s0, r3
 801ecc4:	ee30 0a46 	vsub.f32	s0, s0, s12
 801ecc8:	4770      	bx	lr
 801ecca:	2b16      	cmp	r3, #22
 801eccc:	dc11      	bgt.n	801ecf2 <expm1f+0x1de>
 801ecce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ecd2:	fa42 f303 	asr.w	r3, r2, r3
 801ecd6:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801ecda:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ecde:	ee07 3a90 	vmov	s15, r3
 801ece2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ece6:	ee10 3a10 	vmov	r3, s0
 801ecea:	440b      	add	r3, r1
 801ecec:	ee00 3a10 	vmov	s0, r3
 801ecf0:	4770      	bx	lr
 801ecf2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801ecf6:	05db      	lsls	r3, r3, #23
 801ecf8:	ee07 3a10 	vmov	s14, r3
 801ecfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ed00:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ed04:	ee37 0a86 	vadd.f32	s0, s15, s12
 801ed08:	e7ed      	b.n	801ece6 <expm1f+0x1d2>
 801ed0a:	bf00      	nop
 801ed0c:	4195b843 	.word	0x4195b843
 801ed10:	42b17217 	.word	0x42b17217
 801ed14:	0da24260 	.word	0x0da24260
 801ed18:	3eb17218 	.word	0x3eb17218
 801ed1c:	3f851591 	.word	0x3f851591
 801ed20:	3f317180 	.word	0x3f317180
 801ed24:	3717f7d1 	.word	0x3717f7d1
 801ed28:	b717f7d1 	.word	0xb717f7d1
 801ed2c:	b457edbb 	.word	0xb457edbb
 801ed30:	36867e54 	.word	0x36867e54
 801ed34:	bd088889 	.word	0xbd088889
 801ed38:	b8a670cd 	.word	0xb8a670cd
 801ed3c:	3ad00d01 	.word	0x3ad00d01
 801ed40:	3fb8aa3b 	.word	0x3fb8aa3b
 801ed44:	7149f2ca 	.word	0x7149f2ca

0801ed48 <floorf>:
 801ed48:	ee10 3a10 	vmov	r3, s0
 801ed4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ed50:	3a7f      	subs	r2, #127	; 0x7f
 801ed52:	2a16      	cmp	r2, #22
 801ed54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ed58:	dc2a      	bgt.n	801edb0 <floorf+0x68>
 801ed5a:	2a00      	cmp	r2, #0
 801ed5c:	da11      	bge.n	801ed82 <floorf+0x3a>
 801ed5e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801edc0 <floorf+0x78>
 801ed62:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ed66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ed6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed6e:	dd05      	ble.n	801ed7c <floorf+0x34>
 801ed70:	2b00      	cmp	r3, #0
 801ed72:	da23      	bge.n	801edbc <floorf+0x74>
 801ed74:	4a13      	ldr	r2, [pc, #76]	; (801edc4 <floorf+0x7c>)
 801ed76:	2900      	cmp	r1, #0
 801ed78:	bf18      	it	ne
 801ed7a:	4613      	movne	r3, r2
 801ed7c:	ee00 3a10 	vmov	s0, r3
 801ed80:	4770      	bx	lr
 801ed82:	4911      	ldr	r1, [pc, #68]	; (801edc8 <floorf+0x80>)
 801ed84:	4111      	asrs	r1, r2
 801ed86:	420b      	tst	r3, r1
 801ed88:	d0fa      	beq.n	801ed80 <floorf+0x38>
 801ed8a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801edc0 <floorf+0x78>
 801ed8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ed92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ed96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed9a:	ddef      	ble.n	801ed7c <floorf+0x34>
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	bfbe      	ittt	lt
 801eda0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801eda4:	fa40 f202 	asrlt.w	r2, r0, r2
 801eda8:	189b      	addlt	r3, r3, r2
 801edaa:	ea23 0301 	bic.w	r3, r3, r1
 801edae:	e7e5      	b.n	801ed7c <floorf+0x34>
 801edb0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801edb4:	d3e4      	bcc.n	801ed80 <floorf+0x38>
 801edb6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801edba:	4770      	bx	lr
 801edbc:	2300      	movs	r3, #0
 801edbe:	e7dd      	b.n	801ed7c <floorf+0x34>
 801edc0:	7149f2ca 	.word	0x7149f2ca
 801edc4:	bf800000 	.word	0xbf800000
 801edc8:	007fffff 	.word	0x007fffff

0801edcc <scalbnf>:
 801edcc:	ee10 3a10 	vmov	r3, s0
 801edd0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801edd4:	d024      	beq.n	801ee20 <scalbnf+0x54>
 801edd6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801edda:	d302      	bcc.n	801ede2 <scalbnf+0x16>
 801eddc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ede0:	4770      	bx	lr
 801ede2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801ede6:	d121      	bne.n	801ee2c <scalbnf+0x60>
 801ede8:	4b29      	ldr	r3, [pc, #164]	; (801ee90 <scalbnf+0xc4>)
 801edea:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801ee94 <scalbnf+0xc8>
 801edee:	4298      	cmp	r0, r3
 801edf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801edf4:	db15      	blt.n	801ee22 <scalbnf+0x56>
 801edf6:	ee10 3a10 	vmov	r3, s0
 801edfa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801edfe:	3a19      	subs	r2, #25
 801ee00:	4402      	add	r2, r0
 801ee02:	2afe      	cmp	r2, #254	; 0xfe
 801ee04:	dd14      	ble.n	801ee30 <scalbnf+0x64>
 801ee06:	eddf 7a24 	vldr	s15, [pc, #144]	; 801ee98 <scalbnf+0xcc>
 801ee0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801ee9c <scalbnf+0xd0>
 801ee0e:	ee10 3a10 	vmov	r3, s0
 801ee12:	eeb0 7a67 	vmov.f32	s14, s15
 801ee16:	2b00      	cmp	r3, #0
 801ee18:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801ee1c:	ee27 0a27 	vmul.f32	s0, s14, s15
 801ee20:	4770      	bx	lr
 801ee22:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801eea0 <scalbnf+0xd4>
 801ee26:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ee2a:	4770      	bx	lr
 801ee2c:	0dd2      	lsrs	r2, r2, #23
 801ee2e:	e7e7      	b.n	801ee00 <scalbnf+0x34>
 801ee30:	2a00      	cmp	r2, #0
 801ee32:	dd06      	ble.n	801ee42 <scalbnf+0x76>
 801ee34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ee38:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801ee3c:	ee00 3a10 	vmov	s0, r3
 801ee40:	4770      	bx	lr
 801ee42:	f112 0f16 	cmn.w	r2, #22
 801ee46:	da19      	bge.n	801ee7c <scalbnf+0xb0>
 801ee48:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ee4c:	4298      	cmp	r0, r3
 801ee4e:	ee10 3a10 	vmov	r3, s0
 801ee52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ee56:	dd09      	ble.n	801ee6c <scalbnf+0xa0>
 801ee58:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 801ee98 <scalbnf+0xcc>
 801ee5c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801ee9c <scalbnf+0xd0>
 801ee60:	eef0 7a40 	vmov.f32	s15, s0
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	fe00 0a07 	vseleq.f32	s0, s0, s14
 801ee6a:	e7dc      	b.n	801ee26 <scalbnf+0x5a>
 801ee6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801eea0 <scalbnf+0xd4>
 801ee70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801eea4 <scalbnf+0xd8>
 801ee74:	eef0 7a40 	vmov.f32	s15, s0
 801ee78:	2b00      	cmp	r3, #0
 801ee7a:	e7f4      	b.n	801ee66 <scalbnf+0x9a>
 801ee7c:	3219      	adds	r2, #25
 801ee7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ee82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801ee86:	eddf 7a08 	vldr	s15, [pc, #32]	; 801eea8 <scalbnf+0xdc>
 801ee8a:	ee07 3a10 	vmov	s14, r3
 801ee8e:	e7c5      	b.n	801ee1c <scalbnf+0x50>
 801ee90:	ffff3cb0 	.word	0xffff3cb0
 801ee94:	4c000000 	.word	0x4c000000
 801ee98:	7149f2ca 	.word	0x7149f2ca
 801ee9c:	f149f2ca 	.word	0xf149f2ca
 801eea0:	0da24260 	.word	0x0da24260
 801eea4:	8da24260 	.word	0x8da24260
 801eea8:	33000000 	.word	0x33000000

0801eeac <__errno>:
 801eeac:	4b01      	ldr	r3, [pc, #4]	; (801eeb4 <__errno+0x8>)
 801eeae:	6818      	ldr	r0, [r3, #0]
 801eeb0:	4770      	bx	lr
 801eeb2:	bf00      	nop
 801eeb4:	20000318 	.word	0x20000318

0801eeb8 <_init>:
 801eeb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eeba:	bf00      	nop
 801eebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eebe:	bc08      	pop	{r3}
 801eec0:	469e      	mov	lr, r3
 801eec2:	4770      	bx	lr

0801eec4 <_fini>:
 801eec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eec6:	bf00      	nop
 801eec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eeca:	bc08      	pop	{r3}
 801eecc:	469e      	mov	lr, r3
 801eece:	4770      	bx	lr
