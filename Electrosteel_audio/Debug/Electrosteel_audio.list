
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017018  08000298  08000298  00020298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018530  080172b0  080172b0  000372b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f7e0  0802f7e0  00050194  2**0
                  CONTENTS
  4 .ARM          00000000  0802f7e0  0802f7e0  00050194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0802f7e0  0802f7e0  00050194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f7e0  0802f7e0  0004f7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f7e4  0802f7e4  0004f7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0802f7e8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018a1c  20000198  0802f97c  00050198  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20018bb4  0802f97c  00058bb4  2**0
                  ALLOC
 11 .RAM_D1       0007eb58  24000000  24000000  00060000  2**5
                  ALLOC
 12 .RAM_D2       000042f4  30000000  30000000  00060000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00060000  2**5
                  ALLOC
 14 .ITCMRAM      000037e8  00000000  00000000  00010000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .ARM.attributes 0000002e  00000000  00000000  00050194  2**0
                  CONTENTS, READONLY
 16 .debug_info   0006f228  00000000  00000000  000501c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000092d0  00000000  00000000  000bf3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000645c4  00000000  00000000  000c86ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003218  00000000  00000000  0012cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 0000d220  00000000  00000000  0012fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004fbc0  00000000  00000000  0013d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0000f3d4  00000000  00000000  0018cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000c5  00000000  00000000  0019c04c  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000abc0  00000000  00000000  0019c114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000198 	.word	0x20000198
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08017258 	.word	0x08017258

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000019c 	.word	0x2000019c
 80002d4:	08017258 	.word	0x08017258

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80002e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80002ec:	4eda      	ldr	r6, [pc, #872]	; (8000658 <audioInit+0x370>)
{
 80002ee:	4604      	mov	r4, r0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80002f0:	ed9f 0ada 	vldr	s0, [pc, #872]	; 800065c <audioInit+0x374>
 80002f4:	4630      	mov	r0, r6
 80002f6:	4bda      	ldr	r3, [pc, #872]	; (8000660 <audioInit+0x378>)
 80002f8:	4dda      	ldr	r5, [pc, #872]	; (8000664 <audioInit+0x37c>)
{
 80002fa:	ed2d 8b08 	vpush	{d8-d11}
 80002fe:	ee0b 1a10 	vmov	s22, r1
 8000302:	ee0b 2a90 	vmov	s23, r2
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000306:	49d8      	ldr	r1, [pc, #864]	; (8000668 <audioInit+0x380>)
 8000308:	f64e 32a8 	movw	r2, #60328	; 0xeba8
 800030c:	f014 fdf6 	bl	8014efc <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000310:	4633      	mov	r3, r6
 8000312:	4ad6      	ldr	r2, [pc, #856]	; (800066c <audioInit+0x384>)
{
 8000314:	ee0a 4a90 	vmov	s21, r4
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000318:	49d5      	ldr	r1, [pc, #852]	; (8000670 <audioInit+0x388>)
 800031a:	48d6      	ldr	r0, [pc, #856]	; (8000674 <audioInit+0x38c>)
 800031c:	f00f fef8 	bl	8010110 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8000320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000324:	4633      	mov	r3, r6
 8000326:	49d4      	ldr	r1, [pc, #848]	; (8000678 <audioInit+0x390>)
 8000328:	48d4      	ldr	r0, [pc, #848]	; (800067c <audioInit+0x394>)
 800032a:	f00f fef1 	bl	8010110 <tMempool_init>

	leaf.clearOnAllocation = 1;
 800032e:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000330:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000334:	eddf 1ad2 	vldr	s3, [pc, #840]	; 8000680 <audioInit+0x398>
 8000338:	eddf 0ad2 	vldr	s1, [pc, #840]	; 8000684 <audioInit+0x39c>
 800033c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000340:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8000688 <audioInit+0x3a0>
 8000344:	48d1      	ldr	r0, [pc, #836]	; (800068c <audioInit+0x3a4>)
	leaf.clearOnAllocation = 1;
 8000346:	6173      	str	r3, [r6, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000348:	f00f fcde 	bl	800fd08 <LEAF_generate_exp>

	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800034c:	2102      	movs	r1, #2
 800034e:	48d0      	ldr	r0, [pc, #832]	; (8000690 <audioInit+0x3a8>)
 8000350:	f004 fc6a 	bl	8004c28 <HAL_GPIO_ReadPin>
 8000354:	4604      	mov	r4, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000356:	2120      	movs	r1, #32
 8000358:	48ce      	ldr	r0, [pc, #824]	; (8000694 <audioInit+0x3ac>)
 800035a:	f004 fc65 	bl	8004c28 <HAL_GPIO_ReadPin>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{

		tSlide_init(&freqSlider[i], 1, 20, &leaf);

		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 800035e:	ed9f 8ace 	vldr	s16, [pc, #824]	; 8000698 <audioInit+0x3b0>
	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;
 8000362:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8000366:	4ccd      	ldr	r4, [pc, #820]	; (800069c <audioInit+0x3b4>)
 8000368:	4acd      	ldr	r2, [pc, #820]	; (80006a0 <audioInit+0x3b8>)
 800036a:	0080      	lsls	r0, r0, #2
 800036c:	f104 0710 	add.w	r7, r4, #16
 8000370:	6010      	str	r0, [r2, #0]
		tSlide_init(&freqSlider[i], 1, 20, &leaf);
 8000372:	4620      	mov	r0, r4
 8000374:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000378:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800037c:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800037e:	3404      	adds	r4, #4
		tSlide_init(&freqSlider[i], 1, 20, &leaf);
 8000380:	f00e f97a 	bl	800e678 <tSlide_init>
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 8000384:	4628      	mov	r0, r5
 8000386:	eef0 0a48 	vmov.f32	s1, s16
 800038a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800038e:	4631      	mov	r1, r6
 8000390:	f00e f932 	bl	800e5f8 <tExpSmooth_init>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8000394:	42bc      	cmp	r4, r7
 8000396:	f105 0504 	add.w	r5, r5, #4
 800039a:	d1ea      	bne.n	8000372 <audioInit+0x8a>
	}


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 800039c:	4cc1      	ldr	r4, [pc, #772]	; (80006a4 <audioInit+0x3bc>)
	for (int i = 0; i < 4; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 800039e:	4dae      	ldr	r5, [pc, #696]	; (8000658 <audioInit+0x370>)
 80003a0:	f104 0610 	add.w	r6, r4, #16
 80003a4:	eddf 8ac0 	vldr	s17, [pc, #768]	; 80006a8 <audioInit+0x3c0>
 80003a8:	ed9f 8ab6 	vldr	s16, [pc, #728]	; 8000684 <audioInit+0x39c>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 80003ac:	49aa      	ldr	r1, [pc, #680]	; (8000658 <audioInit+0x370>)
 80003ae:	eddf 0abe 	vldr	s1, [pc, #760]	; 80006a8 <audioInit+0x3c0>
 80003b2:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8000684 <audioInit+0x39c>
 80003b6:	48bd      	ldr	r0, [pc, #756]	; (80006ac <audioInit+0x3c4>)
 80003b8:	f00e f91e 	bl	800e5f8 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 80003bc:	4620      	mov	r0, r4
	for (int i = 0; i < 4; i++)
 80003be:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 80003c0:	eef0 0a68 	vmov.f32	s1, s17
 80003c4:	4629      	mov	r1, r5
 80003c6:	eeb0 0a48 	vmov.f32	s0, s16
 80003ca:	f00e f915 	bl	800e5f8 <tExpSmooth_init>
	for (int i = 0; i < 4; i++)
 80003ce:	42b4      	cmp	r4, r6
 80003d0:	d1f4      	bne.n	80003bc <audioInit+0xd4>
 80003d2:	4fb7      	ldr	r7, [pc, #732]	; (80006b0 <audioInit+0x3c8>)
 80003d4:	2400      	movs	r4, #0
 80003d6:	4eb7      	ldr	r6, [pc, #732]	; (80006b4 <audioInit+0x3cc>)
 80003d8:	4db7      	ldr	r5, [pc, #732]	; (80006b8 <audioInit+0x3d0>)
 80003da:	f8df a368 	ldr.w	sl, [pc, #872]	; 8000744 <audioInit+0x45c>
 80003de:	f8df 9368 	ldr.w	r9, [pc, #872]	; 8000748 <audioInit+0x460>
 80003e2:	f8df 8368 	ldr.w	r8, [pc, #872]	; 800074c <audioInit+0x464>
	}

	for(int i = 0; i < NUM_OSC; i++)
	{
		tMBSaw_init(&saw[i], &leaf);
 80003e6:	f8df b270 	ldr.w	fp, [pc, #624]	; 8000658 <audioInit+0x370>

		tMBSawPulse_init(&sawPaired[i], &leaf);

		tMBSineTri_init(&sinePaired[i], &leaf);

	    tExpSmooth_init(&pitchSmoother[i], 64.0f, 0.01f, &leaf);
 80003ea:	eddf 8ab4 	vldr	s17, [pc, #720]	; 80006bc <audioInit+0x3d4>
 80003ee:	ed9f 8ab4 	vldr	s16, [pc, #720]	; 80006c0 <audioInit+0x3d8>
		tMBSaw_init(&saw[i], &leaf);
 80003f2:	4638      	mov	r0, r7
 80003f4:	4659      	mov	r1, fp
 80003f6:	f012 ffd3 	bl	80133a0 <tMBSaw_init>
		tMBPulse_init(&pulse[i], &leaf);
 80003fa:	4630      	mov	r0, r6
 80003fc:	4659      	mov	r1, fp
	for(int i = 0; i < NUM_OSC; i++)
 80003fe:	3704      	adds	r7, #4
		tMBPulse_init(&pulse[i], &leaf);
 8000400:	f010 f94c 	bl	801069c <tMBPulse_init>
		tCycle_init(&sine[i], &leaf);
 8000404:	4628      	mov	r0, r5
 8000406:	4659      	mov	r1, fp
	for(int i = 0; i < NUM_OSC; i++)
 8000408:	3604      	adds	r6, #4
		tCycle_init(&sine[i], &leaf);
 800040a:	f010 f887 	bl	801051c <tCycle_init>
		tMBTriangle_init(&tri[i], &leaf);
 800040e:	eb0a 0004 	add.w	r0, sl, r4
 8000412:	4659      	mov	r1, fp
	for(int i = 0; i < NUM_OSC; i++)
 8000414:	3504      	adds	r5, #4
		tMBTriangle_init(&tri[i], &leaf);
 8000416:	f010 ff19 	bl	801124c <tMBTriangle_init>
		tMBSawPulse_init(&sawPaired[i], &leaf);
 800041a:	eb09 0004 	add.w	r0, r9, r4
 800041e:	4659      	mov	r1, fp
 8000420:	f013 fa7a 	bl	8013918 <tMBSawPulse_init>
		tMBSineTri_init(&sinePaired[i], &leaf);
 8000424:	eb08 0004 	add.w	r0, r8, r4
 8000428:	4659      	mov	r1, fp
 800042a:	f011 ff3d 	bl	80122a8 <tMBSineTri_init>
	    tExpSmooth_init(&pitchSmoother[i], 64.0f, 0.01f, &leaf);
 800042e:	4ba5      	ldr	r3, [pc, #660]	; (80006c4 <audioInit+0x3dc>)
 8000430:	eef0 0a68 	vmov.f32	s1, s17
 8000434:	4659      	mov	r1, fp
 8000436:	1918      	adds	r0, r3, r4
	for(int i = 0; i < NUM_OSC; i++)
 8000438:	3404      	adds	r4, #4
	    tExpSmooth_init(&pitchSmoother[i], 64.0f, 0.01f, &leaf);
 800043a:	eeb0 0a48 	vmov.f32	s0, s16
 800043e:	f00e f8db 	bl	800e5f8 <tExpSmooth_init>
	for(int i = 0; i < NUM_OSC; i++)
 8000442:	2c0c      	cmp	r4, #12
 8000444:	d1d5      	bne.n	80003f2 <audioInit+0x10a>
 8000446:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8000750 <audioInit+0x468>
 800044a:	2400      	movs	r4, #0
 800044c:	4e9e      	ldr	r6, [pc, #632]	; (80006c8 <audioInit+0x3e0>)
 800044e:	4d9f      	ldr	r5, [pc, #636]	; (80006cc <audioInit+0x3e4>)
 8000450:	f8df b300 	ldr.w	fp, [pc, #768]	; 8000754 <audioInit+0x46c>
 8000454:	f8df a300 	ldr.w	sl, [pc, #768]	; 8000758 <audioInit+0x470>
 8000458:	f8df 9300 	ldr.w	r9, [pc, #768]	; 800075c <audioInit+0x474>
	}

	for (int i = 0; i < NUM_FILT; i++)
	{
		tSVF_init(&lowpass[i], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800045c:	4f7e      	ldr	r7, [pc, #504]	; (8000658 <audioInit+0x370>)
 800045e:	eddf 8a9c 	vldr	s17, [pc, #624]	; 80006d0 <audioInit+0x3e8>
 8000462:	ed9f 8a9c 	vldr	s16, [pc, #624]	; 80006d4 <audioInit+0x3ec>
		tVZFilter_init(&VZfilterPeak[i], Bell, 2000.f, 1.0f, &leaf);
		tVZFilter_init(&VZfilterLS[i], Lowshelf, 2000.f, 1.0f, &leaf);
		tVZFilter_init(&VZfilterHS[i], Highshelf, 2000.f, 1.0f, &leaf);
		tVZFilter_init(&VZfilterBR[i], BandReject, 2000.f, 1.0f, &leaf);
		tLadderFilter_init(&Ladderfilter[i], 2000.f, 1.0f, &leaf);
	    tExpSmooth_init(&filterCutoffSmoother[i], 64.0f, 0.01f, &leaf);
 8000466:	eddf 9a95 	vldr	s19, [pc, #596]	; 80006bc <audioInit+0x3d4>
 800046a:	ed9f 9a95 	vldr	s18, [pc, #596]	; 80006c0 <audioInit+0x3d8>
		tSVF_init(&lowpass[i], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800046e:	4640      	mov	r0, r8
 8000470:	eef0 0a68 	vmov.f32	s1, s17
 8000474:	eeb0 0a48 	vmov.f32	s0, s16
 8000478:	2101      	movs	r1, #1
 800047a:	463a      	mov	r2, r7
	for (int i = 0; i < NUM_FILT; i++)
 800047c:	f108 0804 	add.w	r8, r8, #4
		tSVF_init(&lowpass[i], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8000480:	f00e f952 	bl	800e728 <tSVF_init>
		tSVF_init(&highpass[i], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8000484:	4630      	mov	r0, r6
 8000486:	eef0 0a68 	vmov.f32	s1, s17
 800048a:	463a      	mov	r2, r7
 800048c:	eeb0 0a48 	vmov.f32	s0, s16
 8000490:	2100      	movs	r1, #0
 8000492:	f00e f949 	bl	800e728 <tSVF_init>
		tSVF_init(&bandpass[i], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8000496:	463a      	mov	r2, r7
 8000498:	4628      	mov	r0, r5
 800049a:	eef0 0a68 	vmov.f32	s1, s17
 800049e:	eeb0 0a48 	vmov.f32	s0, s16
 80004a2:	2102      	movs	r1, #2
 80004a4:	f00e f940 	bl	800e728 <tSVF_init>
		tDiodeFilter_init(&diodeFilters[i], 2000.f, 0.5f, &leaf);
 80004a8:	eb0b 0004 	add.w	r0, fp, r4
 80004ac:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80004b0:	4639      	mov	r1, r7
 80004b2:	eeb0 0a48 	vmov.f32	s0, s16
	for (int i = 0; i < NUM_FILT; i++)
 80004b6:	3604      	adds	r6, #4
		tDiodeFilter_init(&diodeFilters[i], 2000.f, 0.5f, &leaf);
 80004b8:	f00e ff3c 	bl	800f334 <tDiodeFilter_init>
		tVZFilter_init(&VZfilterPeak[i], Bell, 2000.f, 1.0f, &leaf);
 80004bc:	eb0a 0004 	add.w	r0, sl, r4
 80004c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80004c4:	463a      	mov	r2, r7
 80004c6:	eeb0 0a48 	vmov.f32	s0, s16
 80004ca:	2105      	movs	r1, #5
 80004cc:	f00e fc5a 	bl	800ed84 <tVZFilter_init>
		tVZFilter_init(&VZfilterLS[i], Lowshelf, 2000.f, 1.0f, &leaf);
 80004d0:	eb09 0004 	add.w	r0, r9, r4
 80004d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80004d8:	463a      	mov	r2, r7
 80004da:	eeb0 0a48 	vmov.f32	s0, s16
 80004de:	2106      	movs	r1, #6
 80004e0:	f00e fc50 	bl	800ed84 <tVZFilter_init>
		tVZFilter_init(&VZfilterHS[i], Highshelf, 2000.f, 1.0f, &leaf);
 80004e4:	4b7c      	ldr	r3, [pc, #496]	; (80006d8 <audioInit+0x3f0>)
 80004e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80004ea:	463a      	mov	r2, r7
 80004ec:	1918      	adds	r0, r3, r4
 80004ee:	eeb0 0a48 	vmov.f32	s0, s16
 80004f2:	2107      	movs	r1, #7
	for (int i = 0; i < NUM_FILT; i++)
 80004f4:	3504      	adds	r5, #4
		tVZFilter_init(&VZfilterHS[i], Highshelf, 2000.f, 1.0f, &leaf);
 80004f6:	f00e fc45 	bl	800ed84 <tVZFilter_init>
		tVZFilter_init(&VZfilterBR[i], BandReject, 2000.f, 1.0f, &leaf);
 80004fa:	4b78      	ldr	r3, [pc, #480]	; (80006dc <audioInit+0x3f4>)
 80004fc:	463a      	mov	r2, r7
 80004fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000502:	1918      	adds	r0, r3, r4
 8000504:	eeb0 0a48 	vmov.f32	s0, s16
 8000508:	2104      	movs	r1, #4
 800050a:	f00e fc3b 	bl	800ed84 <tVZFilter_init>
		tLadderFilter_init(&Ladderfilter[i], 2000.f, 1.0f, &leaf);
 800050e:	4b74      	ldr	r3, [pc, #464]	; (80006e0 <audioInit+0x3f8>)
 8000510:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000514:	4639      	mov	r1, r7
 8000516:	1918      	adds	r0, r3, r4
 8000518:	eeb0 0a48 	vmov.f32	s0, s16
 800051c:	f00f f970 	bl	800f800 <tLadderFilter_init>
	    tExpSmooth_init(&filterCutoffSmoother[i], 64.0f, 0.01f, &leaf);
 8000520:	4b70      	ldr	r3, [pc, #448]	; (80006e4 <audioInit+0x3fc>)
 8000522:	eef0 0a69 	vmov.f32	s1, s19
 8000526:	4639      	mov	r1, r7
 8000528:	1918      	adds	r0, r3, r4
	for (int i = 0; i < NUM_FILT; i++)
 800052a:	3404      	adds	r4, #4
	    tExpSmooth_init(&filterCutoffSmoother[i], 64.0f, 0.01f, &leaf);
 800052c:	eeb0 0a49 	vmov.f32	s0, s18
 8000530:	f00e f862 	bl	800e5f8 <tExpSmooth_init>
	for (int i = 0; i < NUM_FILT; i++)
 8000534:	2c08      	cmp	r4, #8
 8000536:	d19a      	bne.n	800046e <audioInit+0x186>
 8000538:	f8df b224 	ldr.w	fp, [pc, #548]	; 8000760 <audioInit+0x478>
 800053c:	2400      	movs	r4, #0
 800053e:	4e6a      	ldr	r6, [pc, #424]	; (80006e8 <audioInit+0x400>)
 8000540:	4d6a      	ldr	r5, [pc, #424]	; (80006ec <audioInit+0x404>)
 8000542:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8000764 <audioInit+0x47c>
 8000546:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8000768 <audioInit+0x480>
 800054a:	4f69      	ldr	r7, [pc, #420]	; (80006f0 <audioInit+0x408>)
	}

	for (int i = 0; i < NUM_LFOS; i++)
	{
		tIntPhasor_init(&lfoSaw[i], &leaf);
 800054c:	f8df a108 	ldr.w	sl, [pc, #264]	; 8000658 <audioInit+0x370>
 8000550:	4658      	mov	r0, fp
 8000552:	4651      	mov	r1, sl
 8000554:	f014 f984 	bl	8014860 <tIntPhasor_init>
		tSquareLFO_init(&lfoPulse[i], &leaf);
 8000558:	4630      	mov	r0, r6
 800055a:	4651      	mov	r1, sl
	for (int i = 0; i < NUM_LFOS; i++)
 800055c:	f10b 0b04 	add.w	fp, fp, #4
		tSquareLFO_init(&lfoPulse[i], &leaf);
 8000560:	f014 f9c4 	bl	80148ec <tSquareLFO_init>
		tCycle_init(&lfoSine[i], &leaf);
 8000564:	4628      	mov	r0, r5
 8000566:	4651      	mov	r1, sl
	for (int i = 0; i < NUM_LFOS; i++)
 8000568:	3604      	adds	r6, #4
		tCycle_init(&lfoSine[i], &leaf);
 800056a:	f00f ffd7 	bl	801051c <tCycle_init>
		tTriLFO_init(&lfoTri[i], &leaf);
 800056e:	eb09 0004 	add.w	r0, r9, r4
 8000572:	4651      	mov	r1, sl
	for (int i = 0; i < NUM_LFOS; i++)
 8000574:	3504      	adds	r5, #4
		tTriLFO_init(&lfoTri[i], &leaf);
 8000576:	f014 fba1 	bl	8014cbc <tTriLFO_init>

		tSineTriLFO_init(&lfoSineTri[i], &leaf);
 800057a:	eb08 0004 	add.w	r0, r8, r4
 800057e:	4651      	mov	r1, sl
 8000580:	f014 fbf4 	bl	8014d6c <tSineTriLFO_init>
		tSawSquareLFO_init(&lfoSawSquare[i], &leaf);
 8000584:	1938      	adds	r0, r7, r4
	for (int i = 0; i < NUM_LFOS; i++)
 8000586:	3404      	adds	r4, #4
		tSawSquareLFO_init(&lfoSawSquare[i], &leaf);
 8000588:	4651      	mov	r1, sl
 800058a:	f014 fadb 	bl	8014b44 <tSawSquareLFO_init>
	for (int i = 0; i < NUM_LFOS; i++)
 800058e:	2c10      	cmp	r4, #16
 8000590:	d1de      	bne.n	8000550 <audioInit+0x268>
	}
    //noise
	tVZFilter_init(&noiseShelf1, Lowshelf, 80.0f, 6.0f, &leaf);
 8000592:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8000596:	4a30      	ldr	r2, [pc, #192]	; (8000658 <audioInit+0x370>)
 8000598:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80006f4 <audioInit+0x40c>
 800059c:	2106      	movs	r1, #6
 800059e:	4856      	ldr	r0, [pc, #344]	; (80006f8 <audioInit+0x410>)
 80005a0:	f00e fbf0 	bl	800ed84 <tVZFilter_init>
	tVZFilter_init(&noiseShelf2, Highshelf, 12000.0f, 6.0f, &leaf);
 80005a4:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80005a8:	4a2b      	ldr	r2, [pc, #172]	; (8000658 <audioInit+0x370>)
 80005aa:	2107      	movs	r1, #7
 80005ac:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80006fc <audioInit+0x414>
 80005b0:	4853      	ldr	r0, [pc, #332]	; (8000700 <audioInit+0x418>)
 80005b2:	f00e fbe7 	bl	800ed84 <tVZFilter_init>
	tVZFilter_init(&noiseBell1, Bell, 1000.0f, 1.9f, &leaf);
 80005b6:	eddf 0a53 	vldr	s1, [pc, #332]	; 8000704 <audioInit+0x41c>
 80005ba:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8000708 <audioInit+0x420>
 80005be:	2105      	movs	r1, #5
 80005c0:	4a25      	ldr	r2, [pc, #148]	; (8000658 <audioInit+0x370>)
 80005c2:	4852      	ldr	r0, [pc, #328]	; (800070c <audioInit+0x424>)
 80005c4:	f00e fbde 	bl	800ed84 <tVZFilter_init>
    tNoise_init(&noise, WhiteNoise, &leaf);
 80005c8:	4a23      	ldr	r2, [pc, #140]	; (8000658 <audioInit+0x370>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4850      	ldr	r0, [pc, #320]	; (8000710 <audioInit+0x428>)
 80005ce:	f010 f805 	bl	80105dc <tNoise_init>
    // exponential decay buffer falling from 1 to
    LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);
 80005d2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	eddf 1a29 	vldr	s3, [pc, #164]	; 8000680 <audioInit+0x398>
 80005de:	eddf 0a29 	vldr	s1, [pc, #164]	; 8000684 <audioInit+0x39c>
 80005e2:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000688 <audioInit+0x3a0>
 80005e6:	4829      	ldr	r0, [pc, #164]	; (800068c <audioInit+0x3a4>)
 80005e8:	f00f fb8e 	bl	800fd08 <LEAF_generate_exp>

    expBufferSizeMinusOne = EXP_BUFFER_SIZE - 1;
 80005ec:	4c49      	ldr	r4, [pc, #292]	; (8000714 <audioInit+0x42c>)
 80005ee:	4b4a      	ldr	r3, [pc, #296]	; (8000718 <audioInit+0x430>)
 80005f0:	4a4a      	ldr	r2, [pc, #296]	; (800071c <audioInit+0x434>)
 80005f2:	f104 0610 	add.w	r6, r4, #16
    decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;

    for (int i = 0; i < NUM_ENV; i++)
    {
        tADSRT_init(&envs[i], 0.1f,10.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80005f6:	4d18      	ldr	r5, [pc, #96]	; (8000658 <audioInit+0x370>)
    expBufferSizeMinusOne = EXP_BUFFER_SIZE - 1;
 80005f8:	601a      	str	r2, [r3, #0]
        tADSRT_init(&envs[i], 0.1f,10.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80005fa:	eddf 8a49 	vldr	s17, [pc, #292]	; 8000720 <audioInit+0x438>
    decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 80005fe:	4b49      	ldr	r3, [pc, #292]	; (8000724 <audioInit+0x43c>)
 8000600:	4a49      	ldr	r2, [pc, #292]	; (8000728 <audioInit+0x440>)
        tADSRT_setLeakFactor(&envs[i], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8000602:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 800072c <audioInit+0x444>
    decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000606:	601a      	str	r2, [r3, #0]
        tADSRT_init(&envs[i], 0.1f,10.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000608:	4620      	mov	r0, r4
 800060a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800060e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8000612:	462b      	mov	r3, r5
 8000614:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8000618:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800061c:	eeb0 0a68 	vmov.f32	s0, s17
 8000620:	491a      	ldr	r1, [pc, #104]	; (800068c <audioInit+0x3a4>)
 8000622:	f00d fdbd 	bl	800e1a0 <tADSRT_init>
        tADSRT_setLeakFactor(&envs[i], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8000626:	4620      	mov	r0, r4
    for (int i = 0; i < NUM_ENV; i++)
 8000628:	3404      	adds	r4, #4
        tADSRT_setLeakFactor(&envs[i], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 800062a:	eeb0 0a48 	vmov.f32	s0, s16
 800062e:	f00d fe61 	bl	800e2f4 <tADSRT_setLeakFactor>
    for (int i = 0; i < NUM_ENV; i++)
 8000632:	42a6      	cmp	r6, r4
 8000634:	d1e8      	bne.n	8000608 <audioInit+0x320>
 8000636:	f8df 8134 	ldr.w	r8, [pc, #308]	; 800076c <audioInit+0x484>
 800063a:	2400      	movs	r4, #0
 800063c:	4f3c      	ldr	r7, [pc, #240]	; (8000730 <audioInit+0x448>)
 800063e:	4e3d      	ldr	r6, [pc, #244]	; (8000734 <audioInit+0x44c>)
    }


    for (int i = 0; i < NUM_EFFECT; i++)
    {
		tCrusher_init(&bc[i],&leaf);
 8000640:	4d05      	ldr	r5, [pc, #20]	; (8000658 <audioInit+0x370>)
		tHighpass_init(&dcBlock1[i], 5.0f,&leaf);
		tHighpass_init(&dcBlock2[i], 5.0f,&leaf);
		tVZFilter_init(&shelf1[i], Lowshelf, 80.0f, 32.0f,  &leaf);
 8000642:	ed9f aa3d 	vldr	s20, [pc, #244]	; 8000738 <audioInit+0x450>
		tVZFilter_init(&shelf2[i], Highshelf, 12000.0f, 32.0f, &leaf);
		tVZFilter_init(&bell1[i], Bell, 1000.0f, 1.9f, &leaf);
		tVZFilter_setSampleRate(&shelf1[i], SAMPLE_RATE * OVERSAMPLE);
 8000646:	ed9f 9a3d 	vldr	s18, [pc, #244]	; 800073c <audioInit+0x454>
		tVZFilter_setSampleRate(&shelf2[i], SAMPLE_RATE * OVERSAMPLE);
		tVZFilter_setSampleRate(&bell1[i], SAMPLE_RATE * OVERSAMPLE);
		tCompressor_init(&comp[i], &leaf);
		tLinearDelay_initToPool(&delay1[i], 4000.0f, 4096, &mediumPool);
 800064a:	eddf 9a3d 	vldr	s19, [pc, #244]	; 8000740 <audioInit+0x458>
		tCycle_init(&mod2[i], &leaf);
		tCycle_setFreq(&mod1[i], 0.2f);
		tCycle_setFreq(&mod2[i], 0.22222222222f);

        //filters
        tSVF_init(&FXlowpass[i], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800064e:	eddf 8a20 	vldr	s17, [pc, #128]	; 80006d0 <audioInit+0x3e8>
 8000652:	ed9f 8a20 	vldr	s16, [pc, #128]	; 80006d4 <audioInit+0x3ec>
 8000656:	e08b      	b.n	8000770 <audioInit+0x488>
 8000658:	200003cc 	.word	0x200003cc
 800065c:	473b8000 	.word	0x473b8000
 8000660:	08002569 	.word	0x08002569
 8000664:	2000f3c8 	.word	0x2000f3c8
 8000668:	200007b0 	.word	0x200007b0
 800066c:	0007eb58 	.word	0x0007eb58
 8000670:	24000000 	.word	0x24000000
 8000674:	20000518 	.word	0x20000518
 8000678:	60000000 	.word	0x60000000
 800067c:	200003c8 	.word	0x200003c8
 8000680:	ba51b717 	.word	0xba51b717
 8000684:	00000000 	.word	0x00000000
 8000688:	3a83126f 	.word	0x3a83126f
 800068c:	30000200 	.word	0x30000200
 8000690:	58020400 	.word	0x58020400
 8000694:	58020800 	.word	0x58020800
 8000698:	3d4ccccd 	.word	0x3d4ccccd
 800069c:	20000360 	.word	0x20000360
 80006a0:	2000034c 	.word	0x2000034c
 80006a4:	200003b8 	.word	0x200003b8
 80006a8:	3a03126f 	.word	0x3a03126f
 80006ac:	2000f4e0 	.word	0x2000f4e0
 80006b0:	20000734 	.word	0x20000734
 80006b4:	20000724 	.word	0x20000724
 80006b8:	20000798 	.word	0x20000798
 80006bc:	3c23d70a 	.word	0x3c23d70a
 80006c0:	42800000 	.word	0x42800000
 80006c4:	200006e4 	.word	0x200006e4
 80006c8:	20000390 	.word	0x20000390
 80006cc:	20000270 	.word	0x20000270
 80006d0:	3f333333 	.word	0x3f333333
 80006d4:	44fa0000 	.word	0x44fa0000
 80006d8:	20000254 	.word	0x20000254
 80006dc:	2000024c 	.word	0x2000024c
 80006e0:	20000244 	.word	0x20000244
 80006e4:	20000330 	.word	0x20000330
 80006e8:	20000420 	.word	0x20000420
 80006ec:	20000460 	.word	0x20000460
 80006f0:	20000440 	.word	0x20000440
 80006f4:	42a00000 	.word	0x42a00000
 80006f8:	20000624 	.word	0x20000624
 80006fc:	463b8000 	.word	0x463b8000
 8000700:	20000628 	.word	0x20000628
 8000704:	3ff33333 	.word	0x3ff33333
 8000708:	447a0000 	.word	0x447a0000
 800070c:	20000618 	.word	0x20000618
 8000710:	20000614 	.word	0x20000614
 8000714:	2000031c 	.word	0x2000031c
 8000718:	2000032c 	.word	0x2000032c
 800071c:	44ffe000 	.word	0x44ffe000
 8000720:	3dcccccd 	.word	0x3dcccccd
 8000724:	200002d8 	.word	0x200002d8
 8000728:	457ff000 	.word	0x457ff000
 800072c:	3f7fffac 	.word	0x3f7fffac
 8000730:	200002b8 	.word	0x200002b8
 8000734:	200002c8 	.word	0x200002c8
 8000738:	42000000 	.word	0x42000000
 800073c:	47bb8000 	.word	0x47bb8000
 8000740:	457a0000 	.word	0x457a0000
 8000744:	2000f4c4 	.word	0x2000f4c4
 8000748:	20000740 	.word	0x20000740
 800074c:	200007a4 	.word	0x200007a4
 8000750:	20000490 	.word	0x20000490
 8000754:	200002fc 	.word	0x200002fc
 8000758:	20000264 	.word	0x20000264
 800075c:	2000025c 	.word	0x2000025c
 8000760:	20000430 	.word	0x20000430
 8000764:	20000480 	.word	0x20000480
 8000768:	20000470 	.word	0x20000470
 800076c:	20000278 	.word	0x20000278
		tCrusher_init(&bc[i],&leaf);
 8000770:	4640      	mov	r0, r8
 8000772:	4629      	mov	r1, r5
 8000774:	f00d fbae 	bl	800ded4 <tCrusher_init>
		tHighpass_init(&dcBlock1[i], 5.0f,&leaf);
 8000778:	4638      	mov	r0, r7
 800077a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800077e:	4629      	mov	r1, r5
 8000780:	f00e f8cc 	bl	800e91c <tHighpass_init>
		tHighpass_init(&dcBlock2[i], 5.0f,&leaf);
 8000784:	4b8b      	ldr	r3, [pc, #556]	; (80009b4 <audioInit+0x6cc>)
 8000786:	4630      	mov	r0, r6
 8000788:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800078c:	4629      	mov	r1, r5
 800078e:	eb03 0b04 	add.w	fp, r3, r4
 8000792:	f00e f8c3 	bl	800e91c <tHighpass_init>
		tVZFilter_init(&shelf1[i], Lowshelf, 80.0f, 32.0f,  &leaf);
 8000796:	4b88      	ldr	r3, [pc, #544]	; (80009b8 <audioInit+0x6d0>)
 8000798:	eef0 0a4a 	vmov.f32	s1, s20
 800079c:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80009bc <audioInit+0x6d4>
 80007a0:	eb03 0a04 	add.w	sl, r3, r4
 80007a4:	4b86      	ldr	r3, [pc, #536]	; (80009c0 <audioInit+0x6d8>)
 80007a6:	462a      	mov	r2, r5
 80007a8:	2106      	movs	r1, #6
 80007aa:	eb03 0904 	add.w	r9, r3, r4
 80007ae:	4658      	mov	r0, fp
 80007b0:	f00e fae8 	bl	800ed84 <tVZFilter_init>
		tVZFilter_init(&shelf2[i], Highshelf, 12000.0f, 32.0f, &leaf);
 80007b4:	4650      	mov	r0, sl
 80007b6:	eef0 0a4a 	vmov.f32	s1, s20
 80007ba:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80009c4 <audioInit+0x6dc>
 80007be:	462a      	mov	r2, r5
 80007c0:	2107      	movs	r1, #7
 80007c2:	f00e fadf 	bl	800ed84 <tVZFilter_init>
		tVZFilter_init(&bell1[i], Bell, 1000.0f, 1.9f, &leaf);
 80007c6:	eddf 0a80 	vldr	s1, [pc, #512]	; 80009c8 <audioInit+0x6e0>
 80007ca:	462a      	mov	r2, r5
 80007cc:	2105      	movs	r1, #5
 80007ce:	4648      	mov	r0, r9
 80007d0:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80009cc <audioInit+0x6e4>
 80007d4:	f00e fad6 	bl	800ed84 <tVZFilter_init>
		tVZFilter_setSampleRate(&shelf1[i], SAMPLE_RATE * OVERSAMPLE);
 80007d8:	eeb0 0a49 	vmov.f32	s0, s18
 80007dc:	4658      	mov	r0, fp
    for (int i = 0; i < NUM_EFFECT; i++)
 80007de:	f108 0804 	add.w	r8, r8, #4
		tVZFilter_setSampleRate(&shelf1[i], SAMPLE_RATE * OVERSAMPLE);
 80007e2:	f00e fc69 	bl	800f0b8 <tVZFilter_setSampleRate>
		tVZFilter_setSampleRate(&shelf2[i], SAMPLE_RATE * OVERSAMPLE);
 80007e6:	4650      	mov	r0, sl
 80007e8:	eeb0 0a49 	vmov.f32	s0, s18
    for (int i = 0; i < NUM_EFFECT; i++)
 80007ec:	3704      	adds	r7, #4
		tVZFilter_setSampleRate(&shelf2[i], SAMPLE_RATE * OVERSAMPLE);
 80007ee:	f00e fc63 	bl	800f0b8 <tVZFilter_setSampleRate>
		tVZFilter_setSampleRate(&bell1[i], SAMPLE_RATE * OVERSAMPLE);
 80007f2:	eeb0 0a49 	vmov.f32	s0, s18
 80007f6:	4648      	mov	r0, r9
    for (int i = 0; i < NUM_EFFECT; i++)
 80007f8:	3604      	adds	r6, #4
		tVZFilter_setSampleRate(&bell1[i], SAMPLE_RATE * OVERSAMPLE);
 80007fa:	f00e fc5d 	bl	800f0b8 <tVZFilter_setSampleRate>
		tCompressor_init(&comp[i], &leaf);
 80007fe:	4b74      	ldr	r3, [pc, #464]	; (80009d0 <audioInit+0x6e8>)
 8000800:	4629      	mov	r1, r5
 8000802:	1918      	adds	r0, r3, r4
 8000804:	f00d fc22 	bl	800e04c <tCompressor_init>
		tLinearDelay_initToPool(&delay1[i], 4000.0f, 4096, &mediumPool);
 8000808:	4b72      	ldr	r3, [pc, #456]	; (80009d4 <audioInit+0x6ec>)
 800080a:	eeb0 0a69 	vmov.f32	s0, s19
 800080e:	4a72      	ldr	r2, [pc, #456]	; (80009d8 <audioInit+0x6f0>)
 8000810:	1918      	adds	r0, r3, r4
 8000812:	4b72      	ldr	r3, [pc, #456]	; (80009dc <audioInit+0x6f4>)
 8000814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000818:	eb03 0a04 	add.w	sl, r3, r4
 800081c:	f00d f990 	bl	800db40 <tLinearDelay_initToPool>
		tLinearDelay_initToPool(&delay2[i], 4000.0f, 4096, &mediumPool);
 8000820:	4b6f      	ldr	r3, [pc, #444]	; (80009e0 <audioInit+0x6f8>)
 8000822:	eeb0 0a69 	vmov.f32	s0, s19
 8000826:	4a6c      	ldr	r2, [pc, #432]	; (80009d8 <audioInit+0x6f0>)
 8000828:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082c:	1918      	adds	r0, r3, r4
 800082e:	4b6d      	ldr	r3, [pc, #436]	; (80009e4 <audioInit+0x6fc>)
 8000830:	eb03 0904 	add.w	r9, r3, r4
 8000834:	f00d f984 	bl	800db40 <tLinearDelay_initToPool>
		tCycle_init(&mod1[i], &leaf);
 8000838:	4629      	mov	r1, r5
 800083a:	4650      	mov	r0, sl
 800083c:	f00f fe6e 	bl	801051c <tCycle_init>
		tCycle_init(&mod2[i], &leaf);
 8000840:	4629      	mov	r1, r5
 8000842:	4648      	mov	r0, r9
 8000844:	f00f fe6a 	bl	801051c <tCycle_init>
		tCycle_setFreq(&mod1[i], 0.2f);
 8000848:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80009e8 <audioInit+0x700>
 800084c:	4650      	mov	r0, sl
 800084e:	f00f fea7 	bl	80105a0 <tCycle_setFreq>
		tCycle_setFreq(&mod2[i], 0.22222222222f);
 8000852:	4648      	mov	r0, r9
 8000854:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80009ec <audioInit+0x704>
 8000858:	f00f fea2 	bl	80105a0 <tCycle_setFreq>
        tSVF_init(&FXlowpass[i], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800085c:	4b64      	ldr	r3, [pc, #400]	; (80009f0 <audioInit+0x708>)
 800085e:	eef0 0a68 	vmov.f32	s1, s17
 8000862:	462a      	mov	r2, r5
 8000864:	1918      	adds	r0, r3, r4
 8000866:	eeb0 0a48 	vmov.f32	s0, s16
 800086a:	2101      	movs	r1, #1
 800086c:	f00d ff5c 	bl	800e728 <tSVF_init>
        tSVF_init(&FXhighpass[i], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8000870:	4b60      	ldr	r3, [pc, #384]	; (80009f4 <audioInit+0x70c>)
 8000872:	eef0 0a68 	vmov.f32	s1, s17
 8000876:	462a      	mov	r2, r5
 8000878:	1918      	adds	r0, r3, r4
 800087a:	eeb0 0a48 	vmov.f32	s0, s16
 800087e:	2100      	movs	r1, #0
 8000880:	f00d ff52 	bl	800e728 <tSVF_init>
        tSVF_init(&FXbandpass[i], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8000884:	4b5c      	ldr	r3, [pc, #368]	; (80009f8 <audioInit+0x710>)
 8000886:	462a      	mov	r2, r5
 8000888:	eef0 0a68 	vmov.f32	s1, s17
 800088c:	1918      	adds	r0, r3, r4
 800088e:	eeb0 0a48 	vmov.f32	s0, s16
 8000892:	2102      	movs	r1, #2
 8000894:	f00d ff48 	bl	800e728 <tSVF_init>
        tDiodeFilter_init(&FXdiodeFilters[i], 2000.f, 1.0f, &leaf);
 8000898:	4b58      	ldr	r3, [pc, #352]	; (80009fc <audioInit+0x714>)
 800089a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800089e:	4629      	mov	r1, r5
 80008a0:	1918      	adds	r0, r3, r4
 80008a2:	eeb0 0a48 	vmov.f32	s0, s16
 80008a6:	f00e fd45 	bl	800f334 <tDiodeFilter_init>
        tVZFilter_init(&FXVZfilterPeak[i], Bell, 2000.f, 1.0f, &leaf);
 80008aa:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <audioInit+0x718>)
 80008ac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008b0:	462a      	mov	r2, r5
 80008b2:	1918      	adds	r0, r3, r4
 80008b4:	eeb0 0a48 	vmov.f32	s0, s16
 80008b8:	2105      	movs	r1, #5
 80008ba:	f00e fa63 	bl	800ed84 <tVZFilter_init>
        tVZFilter_init(&FXVZfilterLS[i], Lowshelf, 2000.f, 1.0f, &leaf);
 80008be:	4b51      	ldr	r3, [pc, #324]	; (8000a04 <audioInit+0x71c>)
 80008c0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008c4:	462a      	mov	r2, r5
 80008c6:	1918      	adds	r0, r3, r4
 80008c8:	eeb0 0a48 	vmov.f32	s0, s16
 80008cc:	2106      	movs	r1, #6
 80008ce:	f00e fa59 	bl	800ed84 <tVZFilter_init>
        tVZFilter_init(&FXVZfilterHS[i], Highshelf, 2000.f, 1.0f, &leaf);
 80008d2:	4b4d      	ldr	r3, [pc, #308]	; (8000a08 <audioInit+0x720>)
 80008d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008d8:	462a      	mov	r2, r5
 80008da:	1918      	adds	r0, r3, r4
 80008dc:	eeb0 0a48 	vmov.f32	s0, s16
 80008e0:	2107      	movs	r1, #7
 80008e2:	f00e fa4f 	bl	800ed84 <tVZFilter_init>
        tVZFilter_init(&FXVZfilterBR[i], BandReject, 2000.f, 1.0f, &leaf);
 80008e6:	4b49      	ldr	r3, [pc, #292]	; (8000a0c <audioInit+0x724>)
 80008e8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80008ec:	462a      	mov	r2, r5
 80008ee:	1918      	adds	r0, r3, r4
 80008f0:	eeb0 0a48 	vmov.f32	s0, s16
 80008f4:	2104      	movs	r1, #4
 80008f6:	f00e fa45 	bl	800ed84 <tVZFilter_init>
        tLadderFilter_init(&FXLadderfilter[i], 2000.f, 1.0f, &leaf);
 80008fa:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <audioInit+0x728>)
 80008fc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000900:	4629      	mov	r1, r5
 8000902:	1918      	adds	r0, r3, r4
    for (int i = 0; i < NUM_EFFECT; i++)
 8000904:	3404      	adds	r4, #4
        tLadderFilter_init(&FXLadderfilter[i], 2000.f, 1.0f, &leaf);
 8000906:	eeb0 0a48 	vmov.f32	s0, s16
 800090a:	f00e ff79 	bl	800f800 <tLadderFilter_init>
    for (int i = 0; i < NUM_EFFECT; i++)
 800090e:	2c10      	cmp	r4, #16
 8000910:	f47f af2e 	bne.w	8000770 <audioInit+0x488>
 8000914:	4c3f      	ldr	r4, [pc, #252]	; (8000a14 <audioInit+0x72c>)
    }

    for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    {
    	tExpSmooth_init(&mapSmoothers[i], 0.0f, 0.01f, &leaf);
 8000916:	4d40      	ldr	r5, [pc, #256]	; (8000a18 <audioInit+0x730>)
 8000918:	f104 0680 	add.w	r6, r4, #128	; 0x80
 800091c:	eddf 8a3f 	vldr	s17, [pc, #252]	; 8000a1c <audioInit+0x734>
 8000920:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 8000a20 <audioInit+0x738>
 8000924:	4620      	mov	r0, r4
    for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8000926:	3404      	adds	r4, #4
    	tExpSmooth_init(&mapSmoothers[i], 0.0f, 0.01f, &leaf);
 8000928:	eef0 0a68 	vmov.f32	s1, s17
 800092c:	4629      	mov	r1, r5
 800092e:	eeb0 0a48 	vmov.f32	s0, s16
 8000932:	f00d fe61 	bl	800e5f8 <tExpSmooth_init>
    for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8000936:	42a6      	cmp	r6, r4
 8000938:	d1f4      	bne.n	8000924 <audioInit+0x63c>
    }



	tSimplePoly_init(&myPoly, 1, &leaf);
 800093a:	4a37      	ldr	r2, [pc, #220]	; (8000a18 <audioInit+0x730>)
 800093c:	2101      	movs	r1, #1
 800093e:	4839      	ldr	r0, [pc, #228]	; (8000a24 <audioInit+0x73c>)
 8000940:	f00f fca6 	bl	8010290 <tSimplePoly_init>
	tNoise_init(&noise, WhiteNoise, &leaf);
 8000944:	4a34      	ldr	r2, [pc, #208]	; (8000a18 <audioInit+0x730>)
 8000946:	2100      	movs	r1, #0
 8000948:	4837      	ldr	r0, [pc, #220]	; (8000a28 <audioInit+0x740>)
 800094a:	f00f fe47 	bl	80105dc <tNoise_init>

	tOversampler_init(&os, OVERSAMPLE, 0, &leaf);
 800094e:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <audioInit+0x730>)
 8000950:	2200      	movs	r2, #0
 8000952:	2102      	movs	r1, #2
 8000954:	4835      	ldr	r0, [pc, #212]	; (8000a2c <audioInit+0x744>)
 8000956:	f00d f9e7 	bl	800dd28 <tOversampler_init>

	tSVF_init(&finalLowpass, SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 800095a:	eddf 0a35 	vldr	s1, [pc, #212]	; 8000a30 <audioInit+0x748>
 800095e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8000a34 <audioInit+0x74c>
 8000962:	2101      	movs	r1, #1
 8000964:	4a2c      	ldr	r2, [pc, #176]	; (8000a18 <audioInit+0x730>)
 8000966:	4834      	ldr	r0, [pc, #208]	; (8000a38 <audioInit+0x750>)
 8000968:	f00d fede 	bl	800e728 <tSVF_init>
	        1);
*/

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
 800096c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000970:	2100      	movs	r1, #0
 8000972:	4832      	ldr	r0, [pc, #200]	; (8000a3c <audioInit+0x754>)
 8000974:	f014 fba2 	bl	80150bc <memset>
	}

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000978:	2240      	movs	r2, #64	; 0x40
 800097a:	4930      	ldr	r1, [pc, #192]	; (8000a3c <audioInit+0x754>)
 800097c:	ee1b 0a10 	vmov	r0, s22
 8000980:	f007 f804 	bl	800798c <HAL_SAI_Transmit_DMA>
 8000984:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <audioInit+0x758>)
 8000986:	4601      	mov	r1, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8000988:	2240      	movs	r2, #64	; 0x40
 800098a:	ee1b 0a90 	vmov	r0, s23
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 800098e:	7019      	strb	r1, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8000990:	492c      	ldr	r1, [pc, #176]	; (8000a44 <audioInit+0x75c>)
 8000992:	f007 f88d 	bl	8007ab0 <HAL_SAI_Receive_DMA>
 8000996:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <audioInit+0x760>)
 8000998:	4602      	mov	r2, r0
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 800099a:	ee1a 0a90 	vmov	r0, s21
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800099e:	701a      	strb	r2, [r3, #0]
	AudioCodec_init(hi2c);
 80009a0:	f001 f974 	bl	8001c8c <AudioCodec_init>
	HAL_Delay(1);
 80009a4:	2001      	movs	r0, #1

}
 80009a6:	ecbd 8b08 	vpop	{d8-d11}
 80009aa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
 80009ae:	f002 be13 	b.w	80035d8 <HAL_Delay>
 80009b2:	bf00      	nop
 80009b4:	20000778 	.word	0x20000778
 80009b8:	20000788 	.word	0x20000788
 80009bc:	42a00000 	.word	0x42a00000
 80009c0:	20000288 	.word	0x20000288
 80009c4:	463b8000 	.word	0x463b8000
 80009c8:	3ff33333 	.word	0x3ff33333
 80009cc:	447a0000 	.word	0x447a0000
 80009d0:	200002a0 	.word	0x200002a0
 80009d4:	200002dc 	.word	0x200002dc
 80009d8:	20000518 	.word	0x20000518
 80009dc:	200005e0 	.word	0x200005e0
 80009e0:	200002ec 	.word	0x200002ec
 80009e4:	200005f0 	.word	0x200005f0
 80009e8:	3e4ccccd 	.word	0x3e4ccccd
 80009ec:	3e638e39 	.word	0x3e638e39
 80009f0:	20000234 	.word	0x20000234
 80009f4:	20000224 	.word	0x20000224
 80009f8:	20000204 	.word	0x20000204
 80009fc:	20000214 	.word	0x20000214
 8000a00:	200001f4 	.word	0x200001f4
 8000a04:	200001e4 	.word	0x200001e4
 8000a08:	200001d4 	.word	0x200001d4
 8000a0c:	200001c4 	.word	0x200001c4
 8000a10:	200001b4 	.word	0x200001b4
 8000a14:	20000498 	.word	0x20000498
 8000a18:	200003cc 	.word	0x200003cc
 8000a1c:	3c23d70a 	.word	0x3c23d70a
 8000a20:	00000000 	.word	0x00000000
 8000a24:	20000600 	.word	0x20000600
 8000a28:	20000614 	.word	0x20000614
 8000a2c:	2000062c 	.word	0x2000062c
 8000a30:	3e99999a 	.word	0x3e99999a
 8000a34:	46947000 	.word	0x46947000
 8000a38:	20000348 	.word	0x20000348
 8000a3c:	30000000 	.word	0x30000000
 8000a40:	2000f4bc 	.word	0x2000f4bc
 8000a44:	30000100 	.word	0x30000100
 8000a48:	20000731 	.word	0x20000731

08000a4c <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v]);
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <lfoSawSquareTick+0x14>)
{
 8000a4e:	b510      	push	{r4, lr}
 8000a50:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v]);
 8000a52:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8000a56:	f014 f89b 	bl	8014b90 <tSawSquareLFO_tick>
 8000a5a:	ed84 0a00 	vstr	s0, [r4]
}
 8000a5e:	bd10      	pop	{r4, pc}
 8000a60:	20000440 	.word	0x20000440

08000a64 <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v]);
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <lfoSineTriTick+0x14>)
{
 8000a66:	b510      	push	{r4, lr}
 8000a68:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v]);
 8000a6a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8000a6e:	f014 f9c3 	bl	8014df8 <tSineTriLFO_tick>
 8000a72:	ed84 0a00 	vstr	s0, [r4]
}
 8000a76:	bd10      	pop	{r4, pc}
 8000a78:	20000470 	.word	0x20000470

08000a7c <lfoSineTick>:

void lfoSineTick(float* sample, int v)
{
    *sample = tCycle_tick(&lfoSine[v]);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <lfoSineTick+0x14>)
{
 8000a7e:	b510      	push	{r4, lr}
 8000a80:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v]);
 8000a82:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8000a86:	f00f fd65 	bl	8010554 <tCycle_tick>
 8000a8a:	ed84 0a00 	vstr	s0, [r4]
}
 8000a8e:	bd10      	pop	{r4, pc}
 8000a90:	20000460 	.word	0x20000460

08000a94 <lfoTriTick>:

void lfoTriTick(float* sample, int v)
{
    *sample = tTriLFO_tick(&lfoTri[v]);
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <lfoTriTick+0x14>)
{
 8000a96:	b510      	push	{r4, lr}
 8000a98:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v]);
 8000a9a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8000a9e:	f014 f933 	bl	8014d08 <tTriLFO_tick>
 8000aa2:	ed84 0a00 	vstr	s0, [r4]
}
 8000aa6:	bd10      	pop	{r4, pc}
 8000aa8:	20000480 	.word	0x20000480

08000aac <lfoSawTick>:
void lfoSawTick(float* sample, int v)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v]) * 2.0f) - 1.0f;
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <lfoSawTick+0x20>)
{
 8000aae:	b510      	push	{r4, lr}
 8000ab0:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v]) * 2.0f) - 1.0f;
 8000ab2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8000ab6:	f013 feeb 	bl	8014890 <tIntPhasor_tick>
 8000aba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000abe:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8000ac2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000ac6:	edc4 7a00 	vstr	s15, [r4]
}
 8000aca:	bd10      	pop	{r4, pc}
 8000acc:	20000430 	.word	0x20000430

08000ad0 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v)
{
    *sample = tSquareLFO_tick(&lfoPulse[v]);
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <lfoPulseTick+0x14>)
{
 8000ad2:	b510      	push	{r4, lr}
 8000ad4:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v]);
 8000ad6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8000ada:	f013 ffa7 	bl	8014a2c <tSquareLFO_tick>
 8000ade:	ed84 0a00 	vstr	s0, [r4]
}
 8000ae2:	bd10      	pop	{r4, pc}
 8000ae4:	20000420 	.word	0x20000420

08000ae8 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v],r);
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <lfoSawSquareSetRate+0xc>)
 8000aea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000aee:	f014 b88f 	b.w	8014c10 <tSawSquareLFO_setFreq>
 8000af2:	bf00      	nop
 8000af4:	20000440 	.word	0x20000440

08000af8 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v)
{
	tSineTriLFO_setFreq(&lfoSineTri[v],r);
 8000af8:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <lfoSineTriSetRate+0xc>)
 8000afa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000afe:	f014 b9c7 	b.w	8014e90 <tSineTriLFO_setFreq>
 8000b02:	bf00      	nop
 8000b04:	20000470 	.word	0x20000470

08000b08 <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v)
{
	tCycle_setFreq(&lfoSine[v], r);
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <lfoSineSetRate+0xc>)
 8000b0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b0e:	f00f bd47 	b.w	80105a0 <tCycle_setFreq>
 8000b12:	bf00      	nop
 8000b14:	20000460 	.word	0x20000460

08000b18 <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v)
{
	tTriLFO_setFreq(&lfoTri[v], r);
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <lfoTriSetRate+0xc>)
 8000b1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b1e:	f014 b90d 	b.w	8014d3c <tTriLFO_setFreq>
 8000b22:	bf00      	nop
 8000b24:	20000480 	.word	0x20000480

08000b28 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v)
{
	tIntPhasor_setFreq(&lfoSaw[v], r);
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <lfoSawSetRate+0xc>)
 8000b2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b2e:	f013 bebf 	b.w	80148b0 <tIntPhasor_setFreq>
 8000b32:	bf00      	nop
 8000b34:	20000430 	.word	0x20000430

08000b38 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v)
{
	 tSquareLFO_setFreq(&lfoPulse[v], r);
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <lfoPulseSetRate+0xc>)
 8000b3a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b3e:	f013 bf9d 	b.w	8014a7c <tSquareLFO_setFreq>
 8000b42:	bf00      	nop
 8000b44:	20000420 	.word	0x20000420

08000b48 <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v],p);
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <lfoSawSquareSetPhase+0xc>)
 8000b4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b4e:	f014 b883 	b.w	8014c58 <tSawSquareLFO_setPhase>
 8000b52:	bf00      	nop
 8000b54:	20000440 	.word	0x20000440

08000b58 <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v)
{
	tSineTriLFO_setPhase(&lfoSineTri[v], p);
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <lfoSineTriSetPhase+0xc>)
 8000b5a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b5e:	f014 b9af 	b.w	8014ec0 <tSineTriLFO_setPhase>
 8000b62:	bf00      	nop
 8000b64:	20000470 	.word	0x20000470

08000b68 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v)
{
	tCycle_setPhase(&lfoSine[v],p);
 8000b68:	4b02      	ldr	r3, [pc, #8]	; (8000b74 <lfoSineSetPhase+0xc>)
 8000b6a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b6e:	f00f bd23 	b.w	80105b8 <tCycle_setPhase>
 8000b72:	bf00      	nop
 8000b74:	20000460 	.word	0x20000460

08000b78 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v)
{
	tTriLFO_setPhase(&lfoTri[v],p);
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <lfoTriSetPhase+0xc>)
 8000b7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b7e:	f014 b8e9 	b.w	8014d54 <tTriLFO_setPhase>
 8000b82:	bf00      	nop
 8000b84:	20000480 	.word	0x20000480

08000b88 <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v)
{
	tIntPhasor_setPhase(&lfoSaw[v], p);
 8000b88:	4b02      	ldr	r3, [pc, #8]	; (8000b94 <lfoSawSetPhase+0xc>)
 8000b8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b8e:	f013 be9b 	b.w	80148c8 <tIntPhasor_setPhase>
 8000b92:	bf00      	nop
 8000b94:	20000430 	.word	0x20000430

08000b98 <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v)
{
	tSquareLFO_setPhase(&lfoPulse[v], p);
 8000b98:	4b02      	ldr	r3, [pc, #8]	; (8000ba4 <lfoPulseSetPhase+0xc>)
 8000b9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000b9e:	f013 bfa5 	b.w	8014aec <tSquareLFO_setPhase>
 8000ba2:	bf00      	nop
 8000ba4:	20000420 	.word	0x20000420

08000ba8 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v],s);
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <lfoSawSquareSetShape+0xc>)
 8000baa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000bae:	f014 b881 	b.w	8014cb4 <tSawSquareLFO_setShape>
 8000bb2:	bf00      	nop
 8000bb4:	20000440 	.word	0x20000440

08000bb8 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v)
{
	tSineTriLFO_setShape(&lfoSineTri[v],s);
 8000bb8:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <lfoSineTriSetShape+0xc>)
 8000bba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000bbe:	f014 b997 	b.w	8014ef0 <tSineTriLFO_setShape>
 8000bc2:	bf00      	nop
 8000bc4:	20000470 	.word	0x20000470

08000bc8 <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v)
{
	//none
}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <lfoTriSetShape>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <lfoSawSetShape>:
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop

08000bd4 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v], s);
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <lfoPulseSetShape+0xc>)
 8000bd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000bda:	f013 bf67 	b.w	8014aac <tSquareLFO_setPulseWidth>
 8000bde:	bf00      	nop
 8000be0:	20000420 	.word	0x20000420

08000be4 <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000be4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8000be8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000c18 <FXLowpassParam1+0x34>
 8000bec:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000c1c <FXLowpassParam1+0x38>
 8000bf0:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8000c20 <FXLowpassParam1+0x3c>
 8000bf4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000bf8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000c24 <FXLowpassParam1+0x40>
{
 8000bfc:	b510      	push	{r4, lr}
 8000bfe:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000c00:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000c04:	f00f f86c 	bl	800fce0 <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v], value);
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <FXLowpassParam1+0x44>)
 8000c0a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&FXlowpass[v], value);
 8000c12:	f00d be2f 	b.w	800e874 <tSVF_setFreqFast>
 8000c16:	bf00      	nop
 8000c18:	429a0000 	.word	0x429a0000
 8000c1c:	420fb824 	.word	0x420fb824
 8000c20:	457ff000 	.word	0x457ff000
 8000c24:	00000000 	.word	0x00000000
 8000c28:	20000234 	.word	0x20000234

08000c2c <FXHighpassParam1>:
void FXHighpassParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000c2c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8000c30:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000c60 <FXHighpassParam1+0x34>
 8000c34:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000c64 <FXHighpassParam1+0x38>
 8000c38:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8000c68 <FXHighpassParam1+0x3c>
 8000c3c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000c40:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000c6c <FXHighpassParam1+0x40>
{
 8000c44:	b510      	push	{r4, lr}
 8000c46:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000c48:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000c4c:	f00f f848 	bl	800fce0 <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v], value);
 8000c50:	4807      	ldr	r0, [pc, #28]	; (8000c70 <FXHighpassParam1+0x44>)
 8000c52:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&FXhighpass[v], value);
 8000c5a:	f00d be0b 	b.w	800e874 <tSVF_setFreqFast>
 8000c5e:	bf00      	nop
 8000c60:	429a0000 	.word	0x429a0000
 8000c64:	420fb824 	.word	0x420fb824
 8000c68:	457ff000 	.word	0x457ff000
 8000c6c:	00000000 	.word	0x00000000
 8000c70:	20000224 	.word	0x20000224

08000c74 <FXBandpassParam1>:

void FXBandpassParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000c74:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8000c78:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000ca8 <FXBandpassParam1+0x34>
 8000c7c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000cac <FXBandpassParam1+0x38>
 8000c80:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8000cb0 <FXBandpassParam1+0x3c>
 8000c84:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000c88:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000cb4 <FXBandpassParam1+0x40>
{
 8000c8c:	b510      	push	{r4, lr}
 8000c8e:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000c90:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000c94:	f00f f824 	bl	800fce0 <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v], value);
 8000c98:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <FXBandpassParam1+0x44>)
 8000c9a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tSVF_setFreqFast(&FXbandpass[v], value);
 8000ca2:	f00d bde7 	b.w	800e874 <tSVF_setFreqFast>
 8000ca6:	bf00      	nop
 8000ca8:	429a0000 	.word	0x429a0000
 8000cac:	420fb824 	.word	0x420fb824
 8000cb0:	457ff000 	.word	0x457ff000
 8000cb4:	00000000 	.word	0x00000000
 8000cb8:	20000204 	.word	0x20000204

08000cbc <FXDiodeParam1>:

void FXDiodeParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000cbc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8000cc0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000cf0 <FXDiodeParam1+0x34>
 8000cc4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000cf4 <FXDiodeParam1+0x38>
 8000cc8:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8000cf8 <FXDiodeParam1+0x3c>
 8000ccc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000cd0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000cfc <FXDiodeParam1+0x40>
{
 8000cd4:	b510      	push	{r4, lr}
 8000cd6:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000cd8:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000cdc:	f00f f800 	bl	800fce0 <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v], value);
 8000ce0:	4807      	ldr	r0, [pc, #28]	; (8000d00 <FXDiodeParam1+0x44>)
 8000ce2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v], value);
 8000cea:	f00e bd55 	b.w	800f798 <tDiodeFilter_setFreqFast>
 8000cee:	bf00      	nop
 8000cf0:	429a0000 	.word	0x429a0000
 8000cf4:	420fb824 	.word	0x420fb824
 8000cf8:	457ff000 	.word	0x457ff000
 8000cfc:	00000000 	.word	0x00000000
 8000d00:	20000214 	.word	0x20000214

08000d04 <FXPeakParam1>:
void FXPeakParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000d04:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8000d08:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000d38 <FXPeakParam1+0x34>
 8000d0c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000d3c <FXPeakParam1+0x38>
 8000d10:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8000d40 <FXPeakParam1+0x3c>
 8000d14:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000d18:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000d44 <FXPeakParam1+0x40>
{
 8000d1c:	b510      	push	{r4, lr}
 8000d1e:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000d20:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000d24:	f00e ffdc 	bl	800fce0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v], value);
 8000d28:	4807      	ldr	r0, [pc, #28]	; (8000d48 <FXPeakParam1+0x44>)
 8000d2a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v], value);
 8000d32:	f00e b82b 	b.w	800ed8c <tVZFilter_setFreqFast>
 8000d36:	bf00      	nop
 8000d38:	429a0000 	.word	0x429a0000
 8000d3c:	420fb824 	.word	0x420fb824
 8000d40:	457ff000 	.word	0x457ff000
 8000d44:	00000000 	.word	0x00000000
 8000d48:	200001f4 	.word	0x200001f4

08000d4c <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000d4c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8000d50:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000d80 <FXLowShelfParam1+0x34>
 8000d54:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000d84 <FXLowShelfParam1+0x38>
 8000d58:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8000d88 <FXLowShelfParam1+0x3c>
 8000d5c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000d60:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000d8c <FXLowShelfParam1+0x40>
{
 8000d64:	b510      	push	{r4, lr}
 8000d66:	4604      	mov	r4, r0
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000d68:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000d6c:	f00e ffb8 	bl	800fce0 <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v], value);
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <FXLowShelfParam1+0x44>)
 8000d72:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v], value);
 8000d7a:	f00e b807 	b.w	800ed8c <tVZFilter_setFreqFast>
 8000d7e:	bf00      	nop
 8000d80:	429a0000 	.word	0x429a0000
 8000d84:	420fb824 	.word	0x420fb824
 8000d88:	457ff000 	.word	0x457ff000
 8000d8c:	00000000 	.word	0x00000000
 8000d90:	200001e4 	.word	0x200001e4

08000d94 <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000d94:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8000d98:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000dc8 <FXHighShelfParam1+0x34>
 8000d9c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000dcc <FXHighShelfParam1+0x38>
 8000da0:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8000dd0 <FXHighShelfParam1+0x3c>
 8000da4:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000da8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000dd4 <FXHighShelfParam1+0x40>
{
 8000dac:	b510      	push	{r4, lr}
 8000dae:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000db0:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000db4:	f00e ff94 	bl	800fce0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v], value);
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <FXHighShelfParam1+0x44>)
 8000dba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v], value);
 8000dc2:	f00d bfe3 	b.w	800ed8c <tVZFilter_setFreqFast>
 8000dc6:	bf00      	nop
 8000dc8:	429a0000 	.word	0x429a0000
 8000dcc:	420fb824 	.word	0x420fb824
 8000dd0:	457ff000 	.word	0x457ff000
 8000dd4:	00000000 	.word	0x00000000
 8000dd8:	200001d4 	.word	0x200001d4

08000ddc <FXNotchParam1>:
void FXNotchParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000ddc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8000de0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000e10 <FXNotchParam1+0x34>
 8000de4:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000e14 <FXNotchParam1+0x38>
 8000de8:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8000e18 <FXNotchParam1+0x3c>
 8000dec:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000df0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000e1c <FXNotchParam1+0x40>
{
 8000df4:	b510      	push	{r4, lr}
 8000df6:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000df8:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000dfc:	f00e ff70 	bl	800fce0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v], value);
 8000e00:	4807      	ldr	r0, [pc, #28]	; (8000e20 <FXNotchParam1+0x44>)
 8000e02:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v], value);
 8000e0a:	f00d bfbf 	b.w	800ed8c <tVZFilter_setFreqFast>
 8000e0e:	bf00      	nop
 8000e10:	429a0000 	.word	0x429a0000
 8000e14:	420fb824 	.word	0x420fb824
 8000e18:	457ff000 	.word	0x457ff000
 8000e1c:	00000000 	.word	0x00000000
 8000e20:	200001c4 	.word	0x200001c4

08000e24 <FXLadderParam1>:
void FXLadderParam1(float value, int v)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000e24:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8000e28:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000e58 <FXLadderParam1+0x34>
 8000e2c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8000e5c <FXLadderParam1+0x38>
 8000e30:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8000e60 <FXLadderParam1+0x3c>
 8000e34:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000e38:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8000e64 <FXLadderParam1+0x40>
{
 8000e3c:	b510      	push	{r4, lr}
 8000e3e:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8000e40:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8000e44:	f00e ff4c 	bl	800fce0 <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v], value);
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <FXLadderParam1+0x44>)
 8000e4a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v], value);
 8000e52:	f00e be3f 	b.w	800fad4 <tLadderFilter_setFreqFast>
 8000e56:	bf00      	nop
 8000e58:	429a0000 	.word	0x429a0000
 8000e5c:	420fb824 	.word	0x420fb824
 8000e60:	457ff000 	.word	0x457ff000
 8000e64:	00000000 	.word	0x00000000
 8000e68:	200001b4 	.word	0x200001b4

08000e6c <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v], fasterdbtoa((value * 50.f) - 25.f));
 8000e6c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8000e70:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000e94 <FXPeakParam2+0x28>
{
 8000e74:	b510      	push	{r4, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v], fasterdbtoa((value * 50.f) - 25.f));
 8000e76:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8000e7a:	4604      	mov	r4, r0
	 tVZFilter_setGain(&FXVZfilterPeak[v], fasterdbtoa((value * 50.f) - 25.f));
 8000e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e80:	f00f f832 	bl	800fee8 <fasterdbtoa>
 8000e84:	4804      	ldr	r0, [pc, #16]	; (8000e98 <FXPeakParam2+0x2c>)
 8000e86:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v], fasterdbtoa((value * 50.f) - 25.f));
 8000e8e:	f00e b8db 	b.w	800f048 <tVZFilter_setGain>
 8000e92:	bf00      	nop
 8000e94:	42480000 	.word	0x42480000
 8000e98:	200001f4 	.word	0x200001f4

08000e9c <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v)
{
tVZFilter_setGain(&FXVZfilterLS[v], fasterdbtoa((value * 50.f) - 25.f));
 8000e9c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8000ea0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000ec4 <FXLowShelfParam2+0x28>
{
 8000ea4:	b510      	push	{r4, lr}
tVZFilter_setGain(&FXVZfilterLS[v], fasterdbtoa((value * 50.f) - 25.f));
 8000ea6:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8000eaa:	4604      	mov	r4, r0
tVZFilter_setGain(&FXVZfilterLS[v], fasterdbtoa((value * 50.f) - 25.f));
 8000eac:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb0:	f00f f81a 	bl	800fee8 <fasterdbtoa>
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <FXLowShelfParam2+0x2c>)
 8000eb6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
tVZFilter_setGain(&FXVZfilterLS[v], fasterdbtoa((value * 50.f) - 25.f));
 8000ebe:	f00e b8c3 	b.w	800f048 <tVZFilter_setGain>
 8000ec2:	bf00      	nop
 8000ec4:	42480000 	.word	0x42480000
 8000ec8:	200001e4 	.word	0x200001e4

08000ecc <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v)
{
	tVZFilter_setGain(&FXVZfilterHS[v], fasterdbtoa((value * 50.f) - 25.f));
 8000ecc:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8000ed0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000ef4 <FXHighShelfParam2+0x28>
{
 8000ed4:	b510      	push	{r4, lr}
	tVZFilter_setGain(&FXVZfilterHS[v], fasterdbtoa((value * 50.f) - 25.f));
 8000ed6:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8000eda:	4604      	mov	r4, r0
	tVZFilter_setGain(&FXVZfilterHS[v], fasterdbtoa((value * 50.f) - 25.f));
 8000edc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee0:	f00f f802 	bl	800fee8 <fasterdbtoa>
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <FXHighShelfParam2+0x2c>)
 8000ee6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8000eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&FXVZfilterHS[v], fasterdbtoa((value * 50.f) - 25.f));
 8000eee:	f00e b8ab 	b.w	800f048 <tVZFilter_setGain>
 8000ef2:	bf00      	nop
 8000ef4:	42480000 	.word	0x42480000
 8000ef8:	200001d4 	.word	0x200001d4

08000efc <FXNotchParam2>:

void FXNotchParam2(float value, int v)
{
	tVZFilter_setGain(&FXVZfilterBR[v], fasterdbtoa((value * 50.f) - 25.f));
 8000efc:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8000f00:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000f24 <FXNotchParam2+0x28>
{
 8000f04:	b510      	push	{r4, lr}
	tVZFilter_setGain(&FXVZfilterBR[v], fasterdbtoa((value * 50.f) - 25.f));
 8000f06:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8000f0a:	4604      	mov	r4, r0
	tVZFilter_setGain(&FXVZfilterBR[v], fasterdbtoa((value * 50.f) - 25.f));
 8000f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f10:	f00e ffea 	bl	800fee8 <fasterdbtoa>
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <FXNotchParam2+0x2c>)
 8000f16:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
 8000f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&FXVZfilterBR[v], fasterdbtoa((value * 50.f) - 25.f));
 8000f1e:	f00e b893 	b.w	800f048 <tVZFilter_setGain>
 8000f22:	bf00      	nop
 8000f24:	42480000 	.word	0x42480000
 8000f28:	200001c4 	.word	0x200001c4

08000f2c <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v)
{
	tSVF_setQ(&FXlowpass[v], value);
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <FXLowpassParam3+0xc>)
 8000f2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f32:	f00d bcd5 	b.w	800e8e0 <tSVF_setQ>
 8000f36:	bf00      	nop
 8000f38:	20000234 	.word	0x20000234

08000f3c <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v)
{
    tSVF_setQ(&FXhighpass[v], value);
 8000f3c:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <FXHighpassParam3+0xc>)
 8000f3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f42:	f00d bccd 	b.w	800e8e0 <tSVF_setQ>
 8000f46:	bf00      	nop
 8000f48:	20000224 	.word	0x20000224

08000f4c <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v)
{
    tSVF_setQ(&FXbandpass[v], value);
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <FXBandpassParam3+0xc>)
 8000f4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f52:	f00d bcc5 	b.w	800e8e0 <tSVF_setQ>
 8000f56:	bf00      	nop
 8000f58:	20000204 	.word	0x20000204

08000f5c <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v], value);
 8000f5c:	4b02      	ldr	r3, [pc, #8]	; (8000f68 <FXDiodeParam3+0xc>)
 8000f5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f62:	f00e bc39 	b.w	800f7d8 <tDiodeFilter_setQ>
 8000f66:	bf00      	nop
 8000f68:	20000214 	.word	0x20000214

08000f6c <FXPeakParam3>:
}


void FXPeakParam3(float value, int v)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v], value);
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <FXPeakParam3+0xc>)
 8000f6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f72:	f00e b885 	b.w	800f080 <tVZFilter_setResonance>
 8000f76:	bf00      	nop
 8000f78:	200001f4 	.word	0x200001f4

08000f7c <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v)
{
	tVZFilter_setResonance(&FXVZfilterLS[v], value);
 8000f7c:	4b02      	ldr	r3, [pc, #8]	; (8000f88 <FXLowShelfParam3+0xc>)
 8000f7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f82:	f00e b87d 	b.w	800f080 <tVZFilter_setResonance>
 8000f86:	bf00      	nop
 8000f88:	200001e4 	.word	0x200001e4

08000f8c <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v)
{
	tVZFilter_setResonance(&FXVZfilterHS[v], value);
 8000f8c:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <FXHighShelfParam3+0xc>)
 8000f8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000f92:	f00e b875 	b.w	800f080 <tVZFilter_setResonance>
 8000f96:	bf00      	nop
 8000f98:	200001d4 	.word	0x200001d4

08000f9c <FXNotchParam3>:
}


void FXNotchParam3(float value, int v)
{
	tVZFilter_setResonance(&FXVZfilterBR[v], value);
 8000f9c:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <FXNotchParam3+0xc>)
 8000f9e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000fa2:	f00e b86d 	b.w	800f080 <tVZFilter_setResonance>
 8000fa6:	bf00      	nop
 8000fa8:	200001c4 	.word	0x200001c4

08000fac <FXLadderParam3>:
}


void FXLadderParam3(float value, int v)
{
	tLadderFilter_setQ(&FXLadderfilter[v], value);
 8000fac:	4b02      	ldr	r3, [pc, #8]	; (8000fb8 <FXLadderParam3+0xc>)
 8000fae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8000fb2:	f00e bdb3 	b.w	800fb1c <tLadderFilter_setQ>
 8000fb6:	bf00      	nop
 8000fb8:	200001b4 	.word	0x200001b4

08000fbc <audioTickL>:
	uint32_t tempCount5 = DWT->CYCCNT;
 8000fbc:	4ab8      	ldr	r2, [pc, #736]	; (80012a0 <audioTickL+0x2e4>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal > 0.5f);
 8000fbe:	4bb9      	ldr	r3, [pc, #740]	; (80012a4 <audioTickL+0x2e8>)
	uint32_t tempCount5 = DWT->CYCCNT;
 8000fc0:	6852      	ldr	r2, [r2, #4]
{
 8000fc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fc6:	ed2d 8b04 	vpush	{d8-d9}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	4cb6      	ldr	r4, [pc, #728]	; (80012a8 <audioTickL+0x2ec>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal > 0.5f);
 8000fce:	ed93 9a00 	vldr	s18, [r3]
	uint32_t tempCount5 = DWT->CYCCNT;
 8000fd2:	9200      	str	r2, [sp, #0]
	tickMappings();
 8000fd4:	f016 f968 	bl	80172a8 <__tickMappings_veneer>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8000fd8:	48b4      	ldr	r0, [pc, #720]	; (80012ac <audioTickL+0x2f0>)
 8000fda:	f104 0610 	add.w	r6, r4, #16
 8000fde:	4db4      	ldr	r5, [pc, #720]	; (80012b0 <audioTickL+0x2f4>)
 8000fe0:	f00d fb3a 	bl	800e658 <tExpSmooth_tick>
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8000fe4:	4628      	mov	r0, r5
	for (int i = 0; i < 4; i++)
 8000fe6:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8000fe8:	f00d fb36 	bl	800e658 <tExpSmooth_tick>
 8000fec:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 4; i++)
 8000ff0:	42b4      	cmp	r4, r6
 8000ff2:	d1f7      	bne.n	8000fe4 <audioTickL+0x28>
 8000ff4:	f8df b334 	ldr.w	fp, [pc, #820]	; 800132c <audioTickL+0x370>
 8000ff8:	4dae      	ldr	r5, [pc, #696]	; (80012b4 <audioTickL+0x2f8>)
 8000ffa:	465c      	mov	r4, fp
 8000ffc:	f10b 0610 	add.w	r6, fp, #16
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 8001000:	4628      	mov	r0, r5
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8001002:	3504      	adds	r5, #4
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 8001004:	f00d fb28 	bl	800e658 <tExpSmooth_tick>
 8001008:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800100c:	42b4      	cmp	r4, r6
 800100e:	d1f7      	bne.n	8001000 <audioTickL+0x44>
	if (newPluck)
 8001010:	f8df a31c 	ldr.w	sl, [pc, #796]	; 8001330 <audioTickL+0x374>
 8001014:	f8da 3000 	ldr.w	r3, [sl]
 8001018:	2b00      	cmp	r3, #0
 800101a:	f040 810d 	bne.w	8001238 <audioTickL+0x27c>
 800101e:	4ba6      	ldr	r3, [pc, #664]	; (80012b8 <audioTickL+0x2fc>)
 8001020:	9301      	str	r3, [sp, #4]
	float note = ftom(stringFrequencies[0]* octaveRatios[stringOctaveIndex[0]]);
 8001022:	9b01      	ldr	r3, [sp, #4]
 8001024:	eddb 7a00 	vldr	s15, [fp]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4ba4      	ldr	r3, [pc, #656]	; (80012bc <audioTickL+0x300>)
	interruptChecker = 0;
 800102c:	4fa4      	ldr	r7, [pc, #656]	; (80012c0 <audioTickL+0x304>)
	float note = ftom(stringFrequencies[0]* octaveRatios[stringOctaveIndex[0]]);
 800102e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001032:	4ca4      	ldr	r4, [pc, #656]	; (80012c4 <audioTickL+0x308>)
 8001034:	4da4      	ldr	r5, [pc, #656]	; (80012c8 <audioTickL+0x30c>)
 8001036:	ed93 0a00 	vldr	s0, [r3]
 800103a:	f104 0610 	add.w	r6, r4, #16
 800103e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001042:	f00e ff03 	bl	800fe4c <ftom>
	interruptChecker = 0;
 8001046:	2300      	movs	r3, #0
	float note = ftom(stringFrequencies[0]* octaveRatios[stringOctaveIndex[0]]);
 8001048:	eeb0 8a40 	vmov.f32	s16, s0
	interruptChecker = 0;
 800104c:	703b      	strb	r3, [r7, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 800104e:	4b94      	ldr	r3, [pc, #592]	; (80012a0 <audioTickL+0x2e4>)
 8001050:	f8d3 8004 	ldr.w	r8, [r3, #4]
		float value = tADSRT_tick(&envs[v]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8001054:	4628      	mov	r0, r5
	for (int v = 0; v < NUM_ENV; v++)
 8001056:	3504      	adds	r5, #4
		float value = tADSRT_tick(&envs[v]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8001058:	f00d f978 	bl	800e34c <tADSRT_tick>
		sourceValues[ENV_SOURCE_OFFSET + v] = value;
 800105c:	eca4 0a01 	vstmia	r4!, {s0}
	for (int v = 0; v < NUM_ENV; v++)
 8001060:	42b4      	cmp	r4, r6
 8001062:	d1f7      	bne.n	8001054 <audioTickL+0x98>
	timeEnv = DWT->CYCCNT - tempCount1;
 8001064:	4a8e      	ldr	r2, [pc, #568]	; (80012a0 <audioTickL+0x2e4>)
	interruptChecker = 0;
 8001066:	2400      	movs	r4, #0
	timeEnv = DWT->CYCCNT - tempCount1;
 8001068:	4998      	ldr	r1, [pc, #608]	; (80012cc <audioTickL+0x310>)
 800106a:	6853      	ldr	r3, [r2, #4]
 800106c:	4d98      	ldr	r5, [pc, #608]	; (80012d0 <audioTickL+0x314>)
 800106e:	eba3 0308 	sub.w	r3, r3, r8
	interruptChecker = 0;
 8001072:	703c      	strb	r4, [r7, #0]
 8001074:	4e97      	ldr	r6, [pc, #604]	; (80012d4 <audioTickL+0x318>)
		float sample = 0.0f;
 8001076:	2700      	movs	r7, #0
	timeEnv = DWT->CYCCNT - tempCount1;
 8001078:	600b      	str	r3, [r1, #0]
			lfoShapeTick[i](&sample,i);
 800107a:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8001334 <audioTickL+0x378>
	uint32_t tempCount1 = DWT->CYCCNT;
 800107e:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
 8001082:	f815 3b01 	ldrb.w	r3, [r5], #1
			lfoShapeTick[i](&sample,i);
 8001086:	4621      	mov	r1, r4
 8001088:	a804      	add	r0, sp, #16
		float sample = 0.0f;
 800108a:	9704      	str	r7, [sp, #16]
		if (lfoOn[i])
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80cc 	beq.w	800122a <audioTickL+0x26e>
			lfoShapeTick[i](&sample,i);
 8001092:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
 8001096:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i);
 8001098:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i] = sample;
 800109a:	9b04      	ldr	r3, [sp, #16]
	for (int i = 0; i < NUM_LFOS; i++)
 800109c:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i] = sample;
 800109e:	f846 3b04 	str.w	r3, [r6], #4
	for (int i = 0; i < NUM_LFOS; i++)
 80010a2:	d1ee      	bne.n	8001082 <audioTickL+0xc6>
	timeLFO = DWT->CYCCNT - tempCount1;
 80010a4:	4b7e      	ldr	r3, [pc, #504]	; (80012a0 <audioTickL+0x2e4>)
	oscillator_tick(note);
 80010a6:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
 80010aa:	4a8b      	ldr	r2, [pc, #556]	; (80012d8 <audioTickL+0x31c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	eba3 0308 	sub.w	r3, r3, r8
 80010b2:	6013      	str	r3, [r2, #0]
	oscillator_tick(note);
 80010b4:	f016 f8dc 	bl	8017270 <__oscillator_tick_veneer>
	noise_tick();
 80010b8:	f016 f8e6 	bl	8017288 <__noise_tick_veneer>
		filterSamps[1] += oscOuts[1][i];
 80010bc:	4b87      	ldr	r3, [pc, #540]	; (80012dc <audioTickL+0x320>)
	filterSamps[0] += noiseOuts[0];
 80010be:	4a88      	ldr	r2, [pc, #544]	; (80012e0 <audioTickL+0x324>)
	sample = filter_tick(&filterSamps[0], note);
 80010c0:	eeb0 0a48 	vmov.f32	s0, s16
		filterSamps[1] += oscOuts[1][i];
 80010c4:	ed93 6a03 	vldr	s12, [r3, #12]
	sample = filter_tick(&filterSamps[0], note);
 80010c8:	a804      	add	r0, sp, #16
		filterSamps[0] += oscOuts[0][i];
 80010ca:	edd3 6a00 	vldr	s13, [r3]
		filterSamps[1] += oscOuts[1][i];
 80010ce:	ed93 7a04 	vldr	s14, [r3, #16]
		filterSamps[0] += oscOuts[0][i];
 80010d2:	edd3 7a01 	vldr	s15, [r3, #4]
		filterSamps[1] += oscOuts[1][i];
 80010d6:	ee37 7a06 	vadd.f32	s14, s14, s12
 80010da:	ed93 5a05 	vldr	s10, [r3, #20]
		filterSamps[0] += oscOuts[0][i];
 80010de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010e2:	edd3 5a02 	vldr	s11, [r3, #8]
	filterSamps[0] += noiseOuts[0];
 80010e6:	ed92 6a00 	vldr	s12, [r2]
		filterSamps[1] += oscOuts[1][i];
 80010ea:	ee37 7a05 	vadd.f32	s14, s14, s10
	filterSamps[1] += noiseOuts[1];
 80010ee:	edd2 6a01 	vldr	s13, [r2, #4]
		filterSamps[0] += oscOuts[0][i];
 80010f2:	ee77 7aa5 	vadd.f32	s15, s15, s11
	filterSamps[1] += noiseOuts[1];
 80010f6:	ee36 7a87 	vadd.f32	s14, s13, s14
	filterSamps[0] += noiseOuts[0];
 80010fa:	ee77 7a86 	vadd.f32	s15, s15, s12
	filterSamps[1] += noiseOuts[1];
 80010fe:	ed8d 7a05 	vstr	s14, [sp, #20]
	filterSamps[0] += noiseOuts[0];
 8001102:	edcd 7a04 	vstr	s15, [sp, #16]
	sample = filter_tick(&filterSamps[0], note);
 8001106:	f016 f8bb 	bl	8017280 <__filter_tick_veneer>
	if (fxPre)
 800110a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800110e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	dd04      	ble.n	8001122 <audioTickL+0x166>
		sample *= amplitude;
 8001118:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <audioTickL+0x328>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee20 0a27 	vmul.f32	s0, s0, s15
	uint32_t tempCount1 = DWT->CYCCNT;
 8001122:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80012ec <audioTickL+0x330>
			oversamplerArray[j] = ((1.0f - fxMix[i]) * dry) + (fxMix[i] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8001126:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	uint32_t tempCount1 = DWT->CYCCNT;
 800112a:	4b5d      	ldr	r3, [pc, #372]	; (80012a0 <audioTickL+0x2e4>)
	for (int i = 0; i < NUM_EFFECT; i++) {
 800112c:	2500      	movs	r5, #0
 800112e:	f8df b208 	ldr.w	fp, [pc, #520]	; 8001338 <audioTickL+0x37c>
 8001132:	f108 0708 	add.w	r7, r8, #8
 8001136:	f8df a204 	ldr.w	sl, [pc, #516]	; 800133c <audioTickL+0x380>
 800113a:	4e6b      	ldr	r6, [pc, #428]	; (80012e8 <audioTickL+0x32c>)
	tOversampler_upsample(&os, sample, oversamplerArray);
 800113c:	496b      	ldr	r1, [pc, #428]	; (80012ec <audioTickL+0x330>)
 800113e:	486c      	ldr	r0, [pc, #432]	; (80012f0 <audioTickL+0x334>)
	uint32_t tempCount1 = DWT->CYCCNT;
 8001140:	f8d3 9004 	ldr.w	r9, [r3, #4]
	tOversampler_upsample(&os, sample, oversamplerArray);
 8001144:	f00c fe48 	bl	800ddd8 <tOversampler_upsample>
		for (int j = 0; j < OVERSAMPLE; j++)
 8001148:	4c68      	ldr	r4, [pc, #416]	; (80012ec <audioTickL+0x330>)
			float dry = oversamplerArray[j]; //store the dry value to mix later
 800114a:	ed94 8a00 	vldr	s16, [r4]
			oversamplerArray[j] = effectTick[i](oversamplerArray[j], i); //run the effect
 800114e:	4628      	mov	r0, r5
 8001150:	f8db 3000 	ldr.w	r3, [fp]
 8001154:	eeb0 0a48 	vmov.f32	s0, s16
 8001158:	4798      	blx	r3
			oversamplerArray[j] = ((1.0f - fxMix[i]) * dry) + (fxMix[i] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 800115a:	ed9a 7a00 	vldr	s14, [sl]
			oversamplerArray[j] *= fxPostGain[i]; //apply postgain
 800115e:	edd6 7a00 	vldr	s15, [r6]
			oversamplerArray[j] = ((1.0f - fxMix[i]) * dry) + (fxMix[i] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8001162:	ee78 6ac7 	vsub.f32	s13, s17, s14
 8001166:	ee20 0a07 	vmul.f32	s0, s0, s14
 800116a:	eea6 0a88 	vfma.f32	s0, s13, s16
			oversamplerArray[j] *= fxPostGain[i]; //apply postgain
 800116e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001172:	eca4 0a01 	vstmia	r4!, {s0}
		for (int j = 0; j < OVERSAMPLE; j++)
 8001176:	42a7      	cmp	r7, r4
 8001178:	d1e7      	bne.n	800114a <audioTickL+0x18e>
	for (int i = 0; i < NUM_EFFECT; i++) {
 800117a:	3501      	adds	r5, #1
 800117c:	f10b 0b04 	add.w	fp, fp, #4
 8001180:	f10a 0a04 	add.w	sl, sl, #4
 8001184:	3604      	adds	r6, #4
 8001186:	2d04      	cmp	r5, #4
 8001188:	d1de      	bne.n	8001148 <audioTickL+0x18c>
		oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 800118a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800118e:	edd8 0a00 	vldr	s1, [r8]
 8001192:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8001196:	f00e fda3 	bl	800fce0 <LEAF_clip>
 800119a:	eef0 7a40 	vmov.f32	s15, s0
 800119e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80011a2:	edd8 0a01 	vldr	s1, [r8, #4]
 80011a6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80011aa:	edc8 7a00 	vstr	s15, [r8]
 80011ae:	f00e fd97 	bl	800fce0 <LEAF_clip>
	sample = tOversampler_downsample(&os, oversamplerArray);
 80011b2:	494e      	ldr	r1, [pc, #312]	; (80012ec <audioTickL+0x330>)
 80011b4:	484e      	ldr	r0, [pc, #312]	; (80012f0 <audioTickL+0x334>)
		oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 80011b6:	ed88 0a01 	vstr	s0, [r8, #4]
	sample = tOversampler_downsample(&os, oversamplerArray);
 80011ba:	f00c fe4f 	bl	800de5c <tOversampler_downsample>
	if (!fxPre)
 80011be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	uint32_t tempCount2 = DWT->CYCCNT;
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <audioTickL+0x2e4>)
	oversampleCount = tempCount2-tempCount1;
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <audioTickL+0x338>)
	if (!fxPre)
 80011c6:	eeb4 9ae7 	vcmpe.f32	s18, s15
	uint32_t tempCount2 = DWT->CYCCNT;
 80011ca:	685b      	ldr	r3, [r3, #4]
	oversampleCount = tempCount2-tempCount1;
 80011cc:	eba3 0309 	sub.w	r3, r3, r9
	if (!fxPre)
 80011d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oversampleCount = tempCount2-tempCount1;
 80011d4:	6013      	str	r3, [r2, #0]
	if (!fxPre)
 80011d6:	d804      	bhi.n	80011e2 <audioTickL+0x226>
		sample *= amplitude;
 80011d8:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <audioTickL+0x328>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee20 0a27 	vmul.f32	s0, s0, s15
	sample = tSVF_tick(&finalLowpass, sample);
 80011e2:	4845      	ldr	r0, [pc, #276]	; (80012f8 <audioTickL+0x33c>)
 80011e4:	f00d fb10 	bl	800e808 <tSVF_tick>
	sample *= finalMaster;
 80011e8:	4b44      	ldr	r3, [pc, #272]	; (80012fc <audioTickL+0x340>)
	sample = tSVF_tick(&finalLowpass, sample);
 80011ea:	eef0 0a40 	vmov.f32	s1, s0
	sample *= finalMaster;
 80011ee:	edd3 7a00 	vldr	s15, [r3]
	sample = LEAF_clip(-1.0f, sample, 1.0f);
 80011f2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80011f6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80011fa:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80011fe:	f00e fd6f 	bl	800fce0 <LEAF_clip>
	return sample * audioMasterLevel * 0.95f;
 8001202:	493f      	ldr	r1, [pc, #252]	; (8001300 <audioTickL+0x344>)
	uint32_t tempCount6 = DWT->CYCCNT;
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <audioTickL+0x2e4>)
	return sample * audioMasterLevel * 0.95f;
 8001206:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001304 <audioTickL+0x348>
	uint32_t tempCount6 = DWT->CYCCNT;
 800120a:	685b      	ldr	r3, [r3, #4]
	return sample * audioMasterLevel * 0.95f;
 800120c:	edd1 7a00 	vldr	s15, [r1]
	timeTick = tempCount6-tempCount5;
 8001210:	9900      	ldr	r1, [sp, #0]
	return sample * audioMasterLevel * 0.95f;
 8001212:	ee67 7a87 	vmul.f32	s15, s15, s14
	timeTick = tempCount6-tempCount5;
 8001216:	4a3c      	ldr	r2, [pc, #240]	; (8001308 <audioTickL+0x34c>)
 8001218:	1a5b      	subs	r3, r3, r1
}
 800121a:	ee27 0a80 	vmul.f32	s0, s15, s0
	timeTick = tempCount6-tempCount5;
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	b007      	add	sp, #28
 8001222:	ecbd 8b04 	vpop	{d8-d9}
 8001226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < NUM_LFOS; i++)
 800122a:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i] = sample;
 800122c:	f846 7b04 	str.w	r7, [r6], #4
	for (int i = 0; i < NUM_LFOS; i++)
 8001230:	2c04      	cmp	r4, #4
 8001232:	f47f af26 	bne.w	8001082 <audioTickL+0xc6>
 8001236:	e735      	b.n	80010a4 <audioTickL+0xe8>
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <audioTickL+0x2fc>)
 800123a:	4c34      	ldr	r4, [pc, #208]	; (800130c <audioTickL+0x350>)
 800123c:	4d34      	ldr	r5, [pc, #208]	; (8001310 <audioTickL+0x354>)
 800123e:	461f      	mov	r7, r3
				float amplitz = stringInputs[i] * 0.00005f;
 8001240:	eddf 9a34 	vldr	s19, [pc, #208]	; 8001314 <audioTickL+0x358>
 8001244:	f104 0910 	add.w	r9, r4, #16
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8001248:	eddf 8a33 	vldr	s17, [pc, #204]	; 8001318 <audioTickL+0x35c>
 800124c:	9301      	str	r3, [sp, #4]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 800124e:	f854 6b04 	ldr.w	r6, [r4], #4
 8001252:	682a      	ldr	r2, [r5, #0]
 8001254:	2e00      	cmp	r6, #0
 8001256:	d10d      	bne.n	8001274 <audioTickL+0x2b8>
 8001258:	2a00      	cmp	r2, #0
 800125a:	d171      	bne.n	8001340 <audioTickL+0x384>
		for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800125c:	454c      	cmp	r4, r9
 800125e:	f105 0504 	add.w	r5, r5, #4
 8001262:	f107 0704 	add.w	r7, r7, #4
			previousStringInputs[i] = stringInputs[i];
 8001266:	f844 2c04 	str.w	r2, [r4, #-4]
		for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800126a:	d1f0      	bne.n	800124e <audioTickL+0x292>
		newPluck = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	f8ca 3000 	str.w	r3, [sl]
 8001272:	e6d6      	b.n	8001022 <audioTickL+0x66>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 8001274:	ddf2      	ble.n	800125c <audioTickL+0x2a0>
 8001276:	2a00      	cmp	r2, #0
 8001278:	d1f0      	bne.n	800125c <audioTickL+0x2a0>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800127a:	2110      	movs	r1, #16
 800127c:	4827      	ldr	r0, [pc, #156]	; (800131c <audioTickL+0x360>)
 800127e:	f003 fcd9 	bl	8004c34 <HAL_GPIO_WritePin>
					tADSRT_off(&envs[v]);
 8001282:	4811      	ldr	r0, [pc, #68]	; (80012c8 <audioTickL+0x30c>)
 8001284:	f00d f85a 	bl	800e33c <tADSRT_off>
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <audioTickL+0x364>)
 800128a:	f00d f857 	bl	800e33c <tADSRT_off>
 800128e:	4825      	ldr	r0, [pc, #148]	; (8001324 <audioTickL+0x368>)
 8001290:	f00d f854 	bl	800e33c <tADSRT_off>
 8001294:	4824      	ldr	r0, [pc, #144]	; (8001328 <audioTickL+0x36c>)
 8001296:	f00d f851 	bl	800e33c <tADSRT_off>
			previousStringInputs[i] = stringInputs[i];
 800129a:	682a      	ldr	r2, [r5, #0]
 800129c:	e7de      	b.n	800125c <audioTickL+0x2a0>
 800129e:	bf00      	nop
 80012a0:	e0001000 	.word	0xe0001000
 80012a4:	20015a10 	.word	0x20015a10
 80012a8:	200003a8 	.word	0x200003a8
 80012ac:	2000f4e0 	.word	0x2000f4e0
 80012b0:	200003b8 	.word	0x200003b8
 80012b4:	2000f3c8 	.word	0x2000f3c8
 80012b8:	2000f478 	.word	0x2000f478
 80012bc:	20000068 	.word	0x20000068
 80012c0:	20012745 	.word	0x20012745
 80012c4:	2000f3a8 	.word	0x2000f3a8
 80012c8:	2000031c 	.word	0x2000031c
 80012cc:	2000f498 	.word	0x2000f498
 80012d0:	2000041c 	.word	0x2000041c
 80012d4:	2000f3b8 	.word	0x2000f3b8
 80012d8:	2000f4a4 	.word	0x2000f4a4
 80012dc:	20000630 	.word	0x20000630
 80012e0:	2000061c 	.word	0x2000061c
 80012e4:	2000026c 	.word	0x2000026c
 80012e8:	20000380 	.word	0x20000380
 80012ec:	2000064c 	.word	0x2000064c
 80012f0:	2000062c 	.word	0x2000062c
 80012f4:	20000648 	.word	0x20000648
 80012f8:	20000348 	.word	0x20000348
 80012fc:	20000004 	.word	0x20000004
 8001300:	20000094 	.word	0x20000094
 8001304:	3f733333 	.word	0x3f733333
 8001308:	2000f4b8 	.word	0x2000f4b8
 800130c:	200006f4 	.word	0x200006f4
 8001310:	2000f408 	.word	0x2000f408
 8001314:	3851b717 	.word	0x3851b717
 8001318:	00000000 	.word	0x00000000
 800131c:	58020400 	.word	0x58020400
 8001320:	20000320 	.word	0x20000320
 8001324:	20000324 	.word	0x20000324
 8001328:	20000328 	.word	0x20000328
 800132c:	2000f3d8 	.word	0x2000f3d8
 8001330:	20000610 	.word	0x20000610
 8001334:	20000450 	.word	0x20000450
 8001338:	2000030c 	.word	0x2000030c
 800133c:	20000370 	.word	0x20000370
				float amplitz = stringInputs[i] * 0.00005f;
 8001340:	ee07 2a90 	vmov	s15, r2
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8001344:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001348:	eeb0 0a68 	vmov.f32	s0, s17
 800134c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80013f0 <audioTickL+0x434>
				float amplitz = stringInputs[i] * 0.00005f;
 8001350:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8001354:	ee60 0aa9 	vmul.f32	s1, s1, s19
 8001358:	f00e fcc2 	bl	800fce0 <LEAF_clip>
				stringOctaveIndex[i] = octaveIndex;
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <audioTickL+0x420>)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2110      	movs	r1, #16
				stringOctaveIndex[i] = octaveIndex;
 8001362:	681b      	ldr	r3, [r3, #0]
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8001364:	eeb0 8a40 	vmov.f32	s16, s0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001368:	481d      	ldr	r0, [pc, #116]	; (80013e0 <audioTickL+0x424>)
				stringOctaveIndex[i] = octaveIndex;
 800136a:	603b      	str	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <audioTickL+0x428>)
 800136e:	9303      	str	r3, [sp, #12]
 8001370:	f003 fc60 	bl	8004c34 <HAL_GPIO_WritePin>
 8001374:	9b03      	ldr	r3, [sp, #12]
 8001376:	9402      	str	r4, [sp, #8]
 8001378:	461c      	mov	r4, r3
					if (useVelocity == 0) envVel = 1.f;
 800137a:	edd8 7a00 	vldr	s15, [r8]
				    tADSRT_on(&envs[v], envVel);
 800137e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001382:	4620      	mov	r0, r4
				for (int v = 0; v < NUM_ENV; v++)
 8001384:	f108 0878 	add.w	r8, r8, #120	; 0x78
					if (useVelocity == 0) envVel = 1.f;
 8001388:	eef5 7a40 	vcmp.f32	s15, #0.0
				for (int v = 0; v < NUM_ENV; v++)
 800138c:	3404      	adds	r4, #4
					if (useVelocity == 0) envVel = 1.f;
 800138e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				    tADSRT_on(&envs[v], envVel);
 8001392:	bf18      	it	ne
 8001394:	eeb0 0a48 	vmovne.f32	s0, s16
 8001398:	f00c ffbe 	bl	800e318 <tADSRT_on>
				    voiceSounding = 1;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <audioTickL+0x42c>)
 800139e:	f04f 0201 	mov.w	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <audioTickL+0x430>)
 80013a6:	4543      	cmp	r3, r8
 80013a8:	d1e7      	bne.n	800137a <audioTickL+0x3be>
					if (noteOnSync > 0.5f)
 80013aa:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80013ae:	9c02      	ldr	r4, [sp, #8]
 80013b0:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80013f4 <audioTickL+0x438>
 80013b4:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal, v);
 80013b8:	4630      	mov	r0, r6
				for (int v = 0; v < NUM_LFOS; v++)
 80013ba:	3601      	adds	r6, #1
					if (noteOnSync > 0.5f)
 80013bc:	eef4 7ac8 	vcmpe.f32	s15, s16
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	dd04      	ble.n	80013d0 <audioTickL+0x414>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal, v);
 80013c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80013ca:	ed98 0a00 	vldr	s0, [r8]
 80013ce:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
 80013d0:	2e04      	cmp	r6, #4
 80013d2:	f108 0864 	add.w	r8, r8, #100	; 0x64
 80013d6:	d1ed      	bne.n	80013b4 <audioTickL+0x3f8>
 80013d8:	e75f      	b.n	800129a <audioTickL+0x2de>
 80013da:	bf00      	nop
 80013dc:	20000064 	.word	0x20000064
 80013e0:	58020400 	.word	0x58020400
 80013e4:	2000031c 	.word	0x2000031c
 80013e8:	2000f4d4 	.word	0x2000f4d4
 80013ec:	200158bc 	.word	0x200158bc
 80013f0:	200156dc 	.word	0x200156dc
 80013f4:	20015880 	.word	0x20015880

080013f8 <audioFrame>:
{
 80013f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (newBar)
 80013fc:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80014e4 <audioFrame+0xec>
	volatile uint32_t tmpCnt = 0;
 8001400:	2400      	movs	r4, #0
	uint32_t tempCountFrame = DWT->CYCCNT;
 8001402:	492c      	ldr	r1, [pc, #176]	; (80014b4 <audioFrame+0xbc>)
{
 8001404:	4605      	mov	r5, r0
	if (newBar)
 8001406:	f8db 2000 	ldr.w	r2, [fp]
{
 800140a:	ed2d 8b04 	vpush	{d8-d9}
 800140e:	b085      	sub	sp, #20
	volatile uint32_t tmpCnt = 0;
 8001410:	9403      	str	r4, [sp, #12]
	uint32_t tempCountFrame = DWT->CYCCNT;
 8001412:	684e      	ldr	r6, [r1, #4]
	if (newBar)
 8001414:	b15a      	cbz	r2, 800142e <audioFrame+0x36>
		int currentBarBufferL = currentBarBuffer;
 8001416:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <audioFrame+0xc0>)
		if ((SPI_RX[6 + (8 * currentBarBufferL)] == 254) && (SPI_RX[7 + (8 * currentBarBufferL)] == 253))
 8001418:	4828      	ldr	r0, [pc, #160]	; (80014bc <audioFrame+0xc4>)
		int currentBarBufferL = currentBarBuffer;
 800141a:	6812      	ldr	r2, [r2, #0]
		if ((SPI_RX[6 + (8 * currentBarBufferL)] == 254) && (SPI_RX[7 + (8 * currentBarBufferL)] == 253))
 800141c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8001420:	798c      	ldrb	r4, [r1, #6]
 8001422:	2cfe      	cmp	r4, #254	; 0xfe
 8001424:	f000 820c 	beq.w	8001840 <audioFrame+0x448>
		newBar = 0;
 8001428:	2200      	movs	r2, #0
 800142a:	f8cb 2000 	str.w	r2, [fp]
	if (newLevers)
 800142e:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <audioFrame+0xc8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b163      	cbz	r3, 800144e <audioFrame+0x56>
		int currentLeverBufferL = currentLeverBuffer;
 8001434:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <audioFrame+0xcc>)
		if ((SPI_LEVERS[72 + (currentLeverBufferL * 74)] == 254) && (SPI_LEVERS[73 + (currentLeverBufferL * 74)] == 253))
 8001436:	234a      	movs	r3, #74	; 0x4a
 8001438:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80014e8 <audioFrame+0xf0>
 800143c:	6814      	ldr	r4, [r2, #0]
 800143e:	fb03 f404 	mul.w	r4, r3, r4
 8001442:	eb08 0304 	add.w	r3, r8, r4
 8001446:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800144a:	2afe      	cmp	r2, #254	; 0xfe
 800144c:	d050      	beq.n	80014f0 <audioFrame+0xf8>
	if ((codecReady)&&(presetReady))
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <audioFrame+0xd0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	b1c3      	cbz	r3, 8001486 <audioFrame+0x8e>
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <audioFrame+0xd4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	b1ab      	cbz	r3, 8001486 <audioFrame+0x8e>
 800145a:	4c1d      	ldr	r4, [pc, #116]	; (80014d0 <audioFrame+0xd8>)
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 800145c:	ed9f 8a1d 	vldr	s16, [pc, #116]	; 80014d4 <audioFrame+0xdc>
 8001460:	f104 0380 	add.w	r3, r4, #128	; 0x80
 8001464:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8001468:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800146c:	f7ff fda6 	bl	8000fbc <audioTickL>
 8001470:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8001474:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 8001476:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 800147a:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 800147c:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
 8001480:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8001484:	d1f2      	bne.n	800146c <audioFrame+0x74>
	timeFrame = DWT->CYCCNT - tempCountFrame;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <audioFrame+0xbc>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <audioFrame+0xe0>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
 800148a:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 800148c:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
 8001490:	1b9b      	subs	r3, r3, r6
 8001492:	4912      	ldr	r1, [pc, #72]	; (80014dc <audioFrame+0xe4>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8001494:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <audioFrame+0xe8>)
 8001496:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
 800149a:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 800149c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a4:	edc2 7a00 	vstr	s15, [r2]
}
 80014a8:	b005      	add	sp, #20
 80014aa:	ecbd 8b04 	vpop	{d8-d9}
 80014ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b2:	bf00      	nop
 80014b4:	e0001000 	.word	0xe0001000
 80014b8:	200002b0 	.word	0x200002b0
 80014bc:	30004200 	.word	0x30004200
 80014c0:	2000060c 	.word	0x2000060c
 80014c4:	20010588 	.word	0x20010588
 80014c8:	2000029c 	.word	0x2000029c
 80014cc:	200006f0 	.word	0x200006f0
 80014d0:	30000000 	.word	0x30000000
 80014d4:	4b000000 	.word	0x4b000000
 80014d8:	20000008 	.word	0x20000008
 80014dc:	2000f4a0 	.word	0x2000f4a0
 80014e0:	20000350 	.word	0x20000350
 80014e4:	20000608 	.word	0x20000608
 80014e8:	30004260 	.word	0x30004260
 80014ec:	3b808081 	.word	0x3b808081
		if ((SPI_LEVERS[72 + (currentLeverBufferL * 74)] == 254) && (SPI_LEVERS[73 + (currentLeverBufferL * 74)] == 253))
 80014f0:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 80014f4:	2afd      	cmp	r2, #253	; 0xfd
 80014f6:	d1aa      	bne.n	800144e <audioFrame+0x56>
				paramsFromBrain[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 80014f8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80014fc:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 80014ec <audioFrame+0xf4>
 8001500:	ee09 2a10 	vmov	s18, r2
 8001504:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001508:	ee00 2a10 	vmov	s0, r2
 800150c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8001510:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8001514:	ee00 2a90 	vmov	s1, r2
 8001518:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800151c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001520:	ee01 2a10 	vmov	s2, r2
 8001524:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001528:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 800152c:	ee01 2a90 	vmov	s3, r2
 8001530:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001534:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8001538:	ee02 2a10 	vmov	s4, r2
 800153c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001540:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8001544:	ee02 2a90 	vmov	s5, r2
 8001548:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800154c:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 8001550:	ee03 2a10 	vmov	s6, r2
 8001554:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001558:	eef8 2ae2 	vcvt.f32.s32	s5, s5
 800155c:	ee03 2a90 	vmov	s7, r2
 8001560:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001564:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8001568:	ee04 2a10 	vmov	s8, r2
 800156c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001570:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8001574:	ee04 2a90 	vmov	s9, r2
 8001578:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800157c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8001580:	ee05 2a10 	vmov	s10, r2
 8001584:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8001588:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800158c:	ee05 2a90 	vmov	s11, r2
 8001590:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8001594:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8001598:	ee06 2a10 	vmov	s12, r2
 800159c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80015a0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80015a4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80015a8:	ee06 2a90 	vmov	s13, r2
 80015ac:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80015b0:	ee07 3a10 	vmov	s14, r3
 80015b4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80015b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80015bc:	4b92      	ldr	r3, [pc, #584]	; (8001808 <audioFrame+0x410>)
 80015be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80015c2:	4a92      	ldr	r2, [pc, #584]	; (800180c <audioFrame+0x414>)
				paramsFromBrain[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 80015c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80015c8:	ed83 9a00 	vstr	s18, [r3]
 80015cc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80015d0:	ee21 1a27 	vmul.f32	s2, s2, s15
 80015d4:	ee61 1aa7 	vmul.f32	s3, s3, s15
 80015d8:	ed83 0a01 	vstr	s0, [r3, #4]
 80015dc:	ee22 2a27 	vmul.f32	s4, s4, s15
 80015e0:	edc3 0a02 	vstr	s1, [r3, #8]
 80015e4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 80015e8:	ed83 1a03 	vstr	s2, [r3, #12]
 80015ec:	ee23 3a27 	vmul.f32	s6, s6, s15
 80015f0:	edc3 1a04 	vstr	s3, [r3, #16]
 80015f4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 80015f8:	ed83 2a05 	vstr	s4, [r3, #20]
 80015fc:	ee24 4a27 	vmul.f32	s8, s8, s15
 8001600:	edc3 2a06 	vstr	s5, [r3, #24]
 8001604:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8001608:	ed83 3a07 	vstr	s6, [r3, #28]
 800160c:	ee25 5a27 	vmul.f32	s10, s10, s15
 8001610:	edc3 3a08 	vstr	s7, [r3, #32]
 8001614:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001618:	ed83 4a09 	vstr	s8, [r3, #36]	; 0x24
 800161c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001620:	edc3 4a0a 	vstr	s9, [r3, #40]	; 0x28
 8001624:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001628:	ed83 5a0b 	vstr	s10, [r3, #44]	; 0x2c
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	edc3 5a0c 	vstr	s11, [r3, #48]	; 0x30
 8001634:	ed83 6a0d 	vstr	s12, [r3, #52]	; 0x34
 8001638:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
 800163c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8001640:	6813      	ldr	r3, [r2, #0]
 8001642:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8001646:	5d19      	ldrb	r1, [r3, r4]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8001648:	6813      	ldr	r3, [r2, #0]
 800164a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800164e:	4423      	add	r3, r4
 8001650:	7858      	ldrb	r0, [r3, #1]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8001652:	6813      	ldr	r3, [r2, #0]
 8001654:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8001658:	4423      	add	r3, r4
 800165a:	f893 c002 	ldrb.w	ip, [r3, #2]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 800165e:	6813      	ldr	r3, [r2, #0]
 8001660:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8001664:	4423      	add	r3, r4
 8001666:	78df      	ldrb	r7, [r3, #3]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8001668:	2300      	movs	r3, #0
 800166a:	f361 0307 	bfi	r3, r1, #0, #8
 800166e:	6811      	ldr	r1, [r2, #0]
 8001670:	3101      	adds	r1, #1
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8001672:	f360 230f 	bfi	r3, r0, #8, #8
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8001676:	eb08 0181 	add.w	r1, r8, r1, lsl #2
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 800167a:	f36c 4317 	bfi	r3, ip, #16, #8
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 800167e:	f811 b004 	ldrb.w	fp, [r1, r4]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8001682:	f367 631f 	bfi	r3, r7, #24, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8001686:	6811      	ldr	r1, [r2, #0]
				stringMIDIPitches[i] = tempBreak.f;
 8001688:	4699      	mov	r9, r3
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 800168a:	f36b 0307 	bfi	r3, fp, #0, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 800168e:	3101      	adds	r1, #1
 8001690:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8001694:	4421      	add	r1, r4
 8001696:	f891 a001 	ldrb.w	sl, [r1, #1]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 800169a:	6811      	ldr	r1, [r2, #0]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 800169c:	f36a 230f 	bfi	r3, sl, #8, #8
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80016a0:	3101      	adds	r1, #1
 80016a2:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80016a6:	4421      	add	r1, r4
 80016a8:	f891 e002 	ldrb.w	lr, [r1, #2]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80016ac:	6811      	ldr	r1, [r2, #0]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80016ae:	f36e 4317 	bfi	r3, lr, #16, #8
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80016b2:	3101      	adds	r1, #1
 80016b4:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80016b8:	4421      	add	r1, r4
 80016ba:	78c8      	ldrb	r0, [r1, #3]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80016bc:	6811      	ldr	r1, [r2, #0]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80016be:	f360 631f 	bfi	r3, r0, #24, #8
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80016c2:	3102      	adds	r1, #2
				stringMIDIPitches[i] = tempBreak.f;
 80016c4:	469e      	mov	lr, r3
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80016c6:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80016ca:	f811 c004 	ldrb.w	ip, [r1, r4]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 80016ce:	6811      	ldr	r1, [r2, #0]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80016d0:	f36c 0307 	bfi	r3, ip, #0, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 80016d4:	3102      	adds	r1, #2
 80016d6:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80016da:	4421      	add	r1, r4
 80016dc:	784f      	ldrb	r7, [r1, #1]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80016de:	6811      	ldr	r1, [r2, #0]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 80016e0:	f367 230f 	bfi	r3, r7, #8, #8
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80016e4:	3102      	adds	r1, #2
 80016e6:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 80016ea:	4421      	add	r1, r4
 80016ec:	7888      	ldrb	r0, [r1, #2]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80016ee:	6811      	ldr	r1, [r2, #0]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80016f0:	f360 4317 	bfi	r3, r0, #16, #8
				stringMIDIPitches[i] = tempBreak.f;
 80016f4:	4846      	ldr	r0, [pc, #280]	; (8001810 <audioFrame+0x418>)
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80016f6:	3102      	adds	r1, #2
				stringMIDIPitches[i] = tempBreak.f;
 80016f8:	f8c0 e004 	str.w	lr, [r0, #4]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80016fc:	eb08 0181 	add.w	r1, r8, r1, lsl #2
				stringMIDIPitches[i] = tempBreak.f;
 8001700:	f8c0 9000 	str.w	r9, [r0]
 8001704:	f104 0931 	add.w	r9, r4, #49	; 0x31
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8001708:	4421      	add	r1, r4
 800170a:	44c1      	add	r9, r8
 800170c:	78c9      	ldrb	r1, [r1, #3]
 800170e:	f361 631f 	bfi	r3, r1, #24, #8
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8001712:	6811      	ldr	r1, [r2, #0]
 8001714:	3103      	adds	r1, #3
				stringMIDIPitches[i] = tempBreak.f;
 8001716:	469e      	mov	lr, r3
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8001718:	eb08 0181 	add.w	r1, r8, r1, lsl #2
				stringMIDIPitches[i] = tempBreak.f;
 800171c:	f8c0 e008 	str.w	lr, [r0, #8]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8001720:	f811 c004 	ldrb.w	ip, [r1, r4]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8001724:	6811      	ldr	r1, [r2, #0]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8001726:	f36c 0307 	bfi	r3, ip, #0, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 800172a:	3103      	adds	r1, #3
 800172c:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8001730:	4421      	add	r1, r4
 8001732:	784f      	ldrb	r7, [r1, #1]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8001734:	6811      	ldr	r1, [r2, #0]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8001736:	f367 230f 	bfi	r3, r7, #8, #8
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 800173a:	4f36      	ldr	r7, [pc, #216]	; (8001814 <audioFrame+0x41c>)
 800173c:	3103      	adds	r1, #3
 800173e:	f107 0a10 	add.w	sl, r7, #16
 8001742:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8001746:	4421      	add	r1, r4
 8001748:	7889      	ldrb	r1, [r1, #2]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 800174a:	6812      	ldr	r2, [r2, #0]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 800174c:	f361 4317 	bfi	r3, r1, #16, #8
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8001750:	3203      	adds	r2, #3
 8001752:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8001756:	4422      	add	r2, r4
 8001758:	78d2      	ldrb	r2, [r2, #3]
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[(i + 49) + (currentLeverBufferL * 74)] * 0.0078125)); //   divided by 128
 800175a:	ed9f 8b29 	vldr	d8, [pc, #164]	; 8001800 <audioFrame+0x408>
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 800175e:	f362 631f 	bfi	r3, r2, #24, #8
				stringMIDIPitches[i] = tempBreak.f;
 8001762:	60c3      	str	r3, [r0, #12]
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[(i + 49) + (currentLeverBufferL * 74)] * 0.0078125)); //   divided by 128
 8001764:	f819 3b01 	ldrb.w	r3, [r9], #1
 8001768:	4638      	mov	r0, r7
			for (int i = 0; i < 4; i++)
 800176a:	3704      	adds	r7, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[(i + 49) + (currentLeverBufferL * 74)] * 0.0078125)); //   divided by 128
 800176c:	ee00 3a10 	vmov	s0, r3
 8001770:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8001774:	ee20 0b08 	vmul.f64	d0, d0, d8
 8001778:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800177c:	f00c ff68 	bl	800e650 <tExpSmooth_setDest>
			for (int i = 0; i < 4; i++)
 8001780:	45ba      	cmp	sl, r7
 8001782:	d1ef      	bne.n	8001764 <audioFrame+0x36c>
			int modeBit = SPI_LEVERS[48 + (currentLeverBufferL * 74)];
 8001784:	4444      	add	r4, r8
			neck = (modeBit >> 6) & 1;
 8001786:	4f24      	ldr	r7, [pc, #144]	; (8001818 <audioFrame+0x420>)
			volumePedal = volumePedalInt * 0.0002442002442f;
 8001788:	eddf 7a24 	vldr	s15, [pc, #144]	; 800181c <audioFrame+0x424>
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 800178c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 8001790:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8001794:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
			int modeBit = SPI_LEVERS[48 + (currentLeverBufferL * 74)];
 8001798:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 800179c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80017a0:	491f      	ldr	r1, [pc, #124]	; (8001820 <audioFrame+0x428>)
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 80017a2:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
			dualSlider = (modeBit >> 5) & 1;
 80017a6:	f3c2 1440 	ubfx	r4, r2, #5, #1
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	800b      	strh	r3, [r1, #0]
			volumePedal = volumePedalInt * 0.0002442002442f;
 80017ae:	880b      	ldrh	r3, [r1, #0]
			neck = (modeBit >> 6) & 1;
 80017b0:	f3c2 1180 	ubfx	r1, r2, #6, #1
			volumePedal = volumePedalInt * 0.0002442002442f;
 80017b4:	b29b      	uxth	r3, r3
			neck = (modeBit >> 6) & 1;
 80017b6:	6039      	str	r1, [r7, #0]
			volumePedal = volumePedalInt * 0.0002442002442f;
 80017b8:	ee00 3a10 	vmov	s0, r3
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 80017bc:	f002 030f 	and.w	r3, r2, #15
			edit = (modeBit >> 4) & 1;
 80017c0:	f3c2 1200 	ubfx	r2, r2, #4, #1
			volumePedal = volumePedalInt * 0.0002442002442f;
 80017c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 80017c8:	1e59      	subs	r1, r3, #1
			volumePedal = volumePedalInt * 0.0002442002442f;
 80017ca:	ee20 0a27 	vmul.f32	s0, s0, s15
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 80017ce:	ee07 1a90 	vmov	s15, r1
			dualSlider = (modeBit >> 5) & 1;
 80017d2:	4914      	ldr	r1, [pc, #80]	; (8001824 <audioFrame+0x42c>)
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 80017d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dualSlider = (modeBit >> 5) & 1;
 80017d8:	600c      	str	r4, [r1, #0]
			edit = (modeBit >> 4) & 1;
 80017da:	4913      	ldr	r1, [pc, #76]	; (8001828 <audioFrame+0x430>)
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 80017dc:	ee67 7a87 	vmul.f32	s15, s15, s14
			edit = (modeBit >> 4) & 1;
 80017e0:	600a      	str	r2, [r1, #0]
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <audioFrame+0x434>)
			octaveIndex = (modeBit & 15);
 80017e4:	4912      	ldr	r1, [pc, #72]	; (8001830 <audioFrame+0x438>)
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 80017e6:	6010      	str	r0, [r2, #0]
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 80017e8:	4a12      	ldr	r2, [pc, #72]	; (8001834 <audioFrame+0x43c>)
			tExpSmooth_setDest(&volumeSmoother,volumePedal);
 80017ea:	4813      	ldr	r0, [pc, #76]	; (8001838 <audioFrame+0x440>)
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 80017ec:	edc2 7a00 	vstr	s15, [r2]
			volumePedal = volumePedalInt * 0.0002442002442f;
 80017f0:	4a12      	ldr	r2, [pc, #72]	; (800183c <audioFrame+0x444>)
			octaveIndex = (modeBit & 15);
 80017f2:	600b      	str	r3, [r1, #0]
			volumePedal = volumePedalInt * 0.0002442002442f;
 80017f4:	ed82 0a00 	vstr	s0, [r2]
			tExpSmooth_setDest(&volumeSmoother,volumePedal);
 80017f8:	f00c ff2a 	bl	800e650 <tExpSmooth_setDest>
 80017fc:	e627      	b.n	800144e <audioFrame+0x56>
 80017fe:	bf00      	nop
 8001800:	00000000 	.word	0x00000000
 8001804:	3f800000 	.word	0x3f800000
 8001808:	200006a4 	.word	0x200006a4
 800180c:	2000034c 	.word	0x2000034c
 8001810:	2000f438 	.word	0x2000f438
 8001814:	200003b8 	.word	0x200003b8
 8001818:	20000604 	.word	0x20000604
 800181c:	39800801 	.word	0x39800801
 8001820:	2000f4dc 	.word	0x2000f4dc
 8001824:	20000304 	.word	0x20000304
 8001828:	20000308 	.word	0x20000308
 800182c:	2000f4d0 	.word	0x2000f4d0
 8001830:	20000064 	.word	0x20000064
 8001834:	20000060 	.word	0x20000060
 8001838:	2000f4e0 	.word	0x2000f4e0
 800183c:	2000f4d8 	.word	0x2000f4d8
		if ((SPI_RX[6 + (8 * currentBarBufferL)] == 254) && (SPI_RX[7 + (8 * currentBarBufferL)] == 253))
 8001840:	79cc      	ldrb	r4, [r1, #7]
 8001842:	2cfd      	cmp	r4, #253	; 0xfd
 8001844:	f47f adf0 	bne.w	8001428 <audioFrame+0x30>
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8001848:	4c8d      	ldr	r4, [pc, #564]	; (8001a80 <audioFrame+0x688>)
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 800184a:	f64f 77ff 	movw	r7, #65535	; 0xffff
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 800184e:	7849      	ldrb	r1, [r1, #1]
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8001850:	ed94 7a02 	vldr	s14, [r4, #8]
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8001854:	edd4 6a01 	vldr	s13, [r4, #4]
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8001858:	ed94 6a00 	vldr	s12, [r4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800185c:	edd4 7a03 	vldr	s15, [r4, #12]
 8001860:	ee77 3a66 	vsub.f32	s7, s14, s13
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8001864:	f810 4032 	ldrb.w	r4, [r0, r2, lsl #3]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8001868:	ee76 4ac6 	vsub.f32	s9, s13, s12
 800186c:	ee77 5ac7 	vsub.f32	s11, s15, s14
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8001870:	0092      	lsls	r2, r2, #2
 8001872:	eb01 2104 	add.w	r1, r1, r4, lsl #8
 8001876:	4c83      	ldr	r4, [pc, #524]	; (8001a84 <audioFrame+0x68c>)
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8001878:	42b9      	cmp	r1, r7
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 800187a:	6021      	str	r1, [r4, #0]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 800187c:	f000 80a5 	beq.w	80019ca <audioFrame+0x5d2>
 8001880:	ee07 1a90 	vmov	s15, r1
 8001884:	4980      	ldr	r1, [pc, #512]	; (8001a88 <audioFrame+0x690>)
 8001886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188a:	ed91 5a00 	vldr	s10, [r1]
 800188e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	f300 8098 	bgt.w	80019ca <audioFrame+0x5d2>
				else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 800189a:	ed91 4a04 	vldr	s8, [r1, #16]
 800189e:	eef4 7ac4 	vcmpe.f32	s15, s8
 80018a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a6:	f280 80bd 	bge.w	8001a24 <audioFrame+0x62c>
				else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 80018aa:	ed91 5a08 	vldr	s10, [r1, #32]
 80018ae:	eef4 7ac5 	vcmpe.f32	s15, s10
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	f2c0 80c4 	blt.w	8001a42 <audioFrame+0x64a>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80018ba:	ee77 7ac4 	vsub.f32	s15, s15, s8
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 80018be:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001aa0 <audioFrame+0x6a8>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80018c2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80018c6:	ee87 4a85 	vdiv.f32	s8, s15, s10
 80018ca:	eef0 7a66 	vmov.f32	s15, s13
 80018ce:	eee3 7a84 	vfma.f32	s15, s7, s8
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 80018d2:	edc8 7a00 	vstr	s15, [r8]
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 80018d6:	3201      	adds	r2, #1
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 80018d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 80018dc:	eb00 0742 	add.w	r7, r0, r2, lsl #1
 80018e0:	f810 0012 	ldrb.w	r0, [r0, r2, lsl #1]
 80018e4:	787a      	ldrb	r2, [r7, #1]
 80018e6:	eb02 2200 	add.w	r2, r2, r0, lsl #8
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 80018ea:	428a      	cmp	r2, r1
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 80018ec:	6062      	str	r2, [r4, #4]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 80018ee:	f000 8082 	beq.w	80019f6 <audioFrame+0x5fe>
 80018f2:	ee07 2a90 	vmov	s15, r2
 80018f6:	4a64      	ldr	r2, [pc, #400]	; (8001a88 <audioFrame+0x690>)
 80018f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fc:	ed92 5a01 	vldr	s10, [r2, #4]
 8001900:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	d475      	bmi.n	80019f6 <audioFrame+0x5fe>
				else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 800190a:	ed92 4a05 	vldr	s8, [r2, #20]
 800190e:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8001912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001916:	d873      	bhi.n	8001a00 <audioFrame+0x608>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8001918:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800191c:	ee34 5a45 	vsub.f32	s10, s8, s10
 8001920:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8001924:	eea4 6a87 	vfma.f32	s12, s9, s14
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8001928:	ed88 6a01 	vstr	s12, [r8, #4]
			for (int j = 0; j < 2; j++)
 800192c:	f8df a174 	ldr.w	sl, [pc, #372]	; 8001aa4 <audioFrame+0x6ac>
					if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 8001930:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8001934:	4b55      	ldr	r3, [pc, #340]	; (8001a8c <audioFrame+0x694>)
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8001936:	f04f 0900 	mov.w	r9, #0
				if (dualSlider)
 800193a:	f8da 1000 	ldr.w	r1, [sl]
					myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * 0.090909090909091f);
 800193e:	ed9f 9a54 	vldr	s18, [pc, #336]	; 8001a90 <audioFrame+0x698>
 8001942:	4f54      	ldr	r7, [pc, #336]	; (8001a94 <audioFrame+0x69c>)
 8001944:	4c54      	ldr	r4, [pc, #336]	; (8001a98 <audioFrame+0x6a0>)
 8001946:	9301      	str	r3, [sp, #4]
				if (dualSlider)
 8001948:	2900      	cmp	r1, #0
 800194a:	d03b      	beq.n	80019c4 <audioFrame+0x5cc>
					if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 800194c:	ed98 0a00 	vldr	s0, [r8]
 8001950:	edd8 0a01 	vldr	s1, [r8, #4]
 8001954:	eeb4 0a68 	vcmp.f32	s0, s17
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d13c      	bne.n	80019d8 <audioFrame+0x5e0>
 800195e:	eef4 0ae8 	vcmpe.f32	s1, s17
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	d503      	bpl.n	8001970 <audioFrame+0x578>
						stringMappedPositions[0] = stringMappedPositions[1];
 8001968:	eeb0 0a60 	vmov.f32	s0, s1
 800196c:	edc8 0a00 	vstr	s1, [r8]
					myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * 0.090909090909091f);
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <audioFrame+0x6a4>)
 8001972:	6819      	ldr	r1, [r3, #0]
 8001974:	eb01 0309 	add.w	r3, r1, r9
 8001978:	ee01 3a10 	vmov	s2, r3
 800197c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8001980:	ee21 1a09 	vmul.f32	s2, s2, s18
 8001984:	f00e fa24 	bl	800fdd0 <LEAF_interpolation_linear>
 8001988:	eeb0 8a40 	vmov.f32	s16, s0
				float tempFreq = (1.0f / myMappedPos) * mtof(stringMIDIPitches[i]);
 800198c:	9b01      	ldr	r3, [sp, #4]
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800198e:	f109 0901 	add.w	r9, r9, #1
				float tempFreq = (1.0f / myMappedPos) * mtof(stringMIDIPitches[i]);
 8001992:	ecb3 0a01 	vldmia	r3!, {s0}
 8001996:	9301      	str	r3, [sp, #4]
 8001998:	f00e fa2e 	bl	800fdf8 <mtof>
				tempFreq = tSlide_tick(&freqSlider[i], tempFreq);
 800199c:	4638      	mov	r0, r7
 800199e:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80019a2:	f00c fe8f 	bl	800e6c4 <tSlide_tick>
				tExpSmooth_setDest(&stringFreqSmoothers[i], tempFreq);
 80019a6:	4620      	mov	r0, r4
 80019a8:	f00c fe52 	bl	800e650 <tExpSmooth_setDest>
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 80019ac:	f1b9 0f04 	cmp.w	r9, #4
 80019b0:	f107 0704 	add.w	r7, r7, #4
 80019b4:	f104 0404 	add.w	r4, r4, #4
 80019b8:	f43f ad36 	beq.w	8001428 <audioFrame+0x30>
				if (dualSlider)
 80019bc:	f8da 1000 	ldr.w	r1, [sl]
 80019c0:	2900      	cmp	r1, #0
 80019c2:	d1c3      	bne.n	800194c <audioFrame+0x554>
					myMappedPos =  stringMappedPositions[0];
 80019c4:	ed98 8a00 	vldr	s16, [r8]
 80019c8:	e7e0      	b.n	800198c <audioFrame+0x594>
					stringMappedPositions[j] = 1.0f;
 80019ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019ce:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001aa0 <audioFrame+0x6a8>
 80019d2:	f8c8 1000 	str.w	r1, [r8]
 80019d6:	e77e      	b.n	80018d6 <audioFrame+0x4de>
					else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
 80019d8:	eef4 0a68 	vcmp.f32	s1, s17
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d1c6      	bne.n	8001970 <audioFrame+0x578>
 80019e2:	eeb4 0a68 	vcmp.f32	s0, s17
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d5c1      	bpl.n	8001970 <audioFrame+0x578>
						stringMappedPositions[1] = stringMappedPositions[0];
 80019ec:	eef0 0a40 	vmov.f32	s1, s0
 80019f0:	ed88 0a01 	vstr	s0, [r8, #4]
 80019f4:	e7bc      	b.n	8001970 <audioFrame+0x578>
					stringMappedPositions[j] = 1.0f;
 80019f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019fa:	f8c8 2004 	str.w	r2, [r8, #4]
 80019fe:	e795      	b.n	800192c <audioFrame+0x534>
				else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 8001a00:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8001a04:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0c:	d82a      	bhi.n	8001a64 <audioFrame+0x66c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8001a0e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8001a12:	ee36 6a44 	vsub.f32	s12, s12, s8
 8001a16:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001a1a:	eee3 6a87 	vfma.f32	s13, s7, s14
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8001a1e:	edc8 6a01 	vstr	s13, [r8, #4]
 8001a22:	e783      	b.n	800192c <audioFrame+0x534>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8001a24:	ee77 7ac5 	vsub.f32	s15, s15, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8001a28:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001aa0 <audioFrame+0x6a8>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8001a2c:	ee34 5a45 	vsub.f32	s10, s8, s10
 8001a30:	ee87 4a85 	vdiv.f32	s8, s15, s10
 8001a34:	eef0 7a46 	vmov.f32	s15, s12
 8001a38:	eee4 7a84 	vfma.f32	s15, s9, s8
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8001a3c:	edc8 7a00 	vstr	s15, [r8]
 8001a40:	e749      	b.n	80018d6 <audioFrame+0x4de>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8001a42:	ed91 4a0c 	vldr	s8, [r1, #48]	; 0x30
 8001a46:	ee77 7ac5 	vsub.f32	s15, s15, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8001a4a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8001aa0 <audioFrame+0x6a8>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8001a4e:	ee34 5a45 	vsub.f32	s10, s8, s10
 8001a52:	ee87 4a85 	vdiv.f32	s8, s15, s10
 8001a56:	eef0 7a47 	vmov.f32	s15, s14
 8001a5a:	eee5 7a84 	vfma.f32	s15, s11, s8
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8001a5e:	edc8 7a00 	vstr	s15, [r8]
 8001a62:	e738      	b.n	80018d6 <audioFrame+0x4de>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8001a64:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
 8001a68:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001a6c:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8001a70:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a74:	eea5 7aa6 	vfma.f32	s14, s11, s13
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8001a78:	ed88 7a01 	vstr	s14, [r8, #4]
 8001a7c:	e756      	b.n	800192c <audioFrame+0x534>
 8001a7e:	bf00      	nop
 8001a80:	2000004c 	.word	0x2000004c
 8001a84:	2000f488 	.word	0x2000f488
 8001a88:	2000000c 	.word	0x2000000c
 8001a8c:	2000f438 	.word	0x2000f438
 8001a90:	3dba2e8c 	.word	0x3dba2e8c
 8001a94:	20000360 	.word	0x20000360
 8001a98:	2000f3c8 	.word	0x2000f3c8
 8001a9c:	2000034c 	.word	0x2000034c
 8001aa0:	2000f448 	.word	0x2000f448
 8001aa4:	20000304 	.word	0x20000304

08001aa8 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{


	if (hspi == &hspi5)
 8001aa8:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_SPI_RxCpltCallback+0xbc>)
 8001aaa:	4298      	cmp	r0, r3
{
 8001aac:	b570      	push	{r4, r5, r6, lr}
 8001aae:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 8001ab0:	d012      	beq.n	8001ad8 <HAL_SPI_RxCpltCallback+0x30>
			}
		}
		newPluck = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_SPI_RxCpltCallback+0xc0>)
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	d009      	beq.n	8001acc <HAL_SPI_RxCpltCallback+0x24>
		*/
		newBar = 1;
		currentBarBuffer = 1;
	}

	if (hspi == &hspi1)
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <HAL_SPI_RxCpltCallback+0xc4>)
 8001aba:	429c      	cmp	r4, r3
 8001abc:	d000      	beq.n	8001ac0 <HAL_SPI_RxCpltCallback+0x18>
		}
		*/
		newLevers = 1;
		currentLeverBuffer = 1;
	}
}
 8001abe:	bd70      	pop	{r4, r5, r6, pc}
		newLevers = 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	492b      	ldr	r1, [pc, #172]	; (8001b70 <HAL_SPI_RxCpltCallback+0xc8>)
		currentLeverBuffer = 1;
 8001ac4:	4a2b      	ldr	r2, [pc, #172]	; (8001b74 <HAL_SPI_RxCpltCallback+0xcc>)
		newLevers = 1;
 8001ac6:	600b      	str	r3, [r1, #0]
		currentLeverBuffer = 1;
 8001ac8:	6013      	str	r3, [r2, #0]
}
 8001aca:	bd70      	pop	{r4, r5, r6, pc}
		newBar = 1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	492a      	ldr	r1, [pc, #168]	; (8001b78 <HAL_SPI_RxCpltCallback+0xd0>)
		currentBarBuffer = 1;
 8001ad0:	4a2a      	ldr	r2, [pc, #168]	; (8001b7c <HAL_SPI_RxCpltCallback+0xd4>)
		newBar = 1;
 8001ad2:	600b      	str	r3, [r1, #0]
		currentBarBuffer = 1;
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	e7ef      	b.n	8001ab8 <HAL_SPI_RxCpltCallback+0x10>
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8001ad8:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_SPI_RxCpltCallback+0xd8>)
		currentPluckBuffer = 1;
 8001ada:	2001      	movs	r0, #1
 8001adc:	4929      	ldr	r1, [pc, #164]	; (8001b84 <HAL_SPI_RxCpltCallback+0xdc>)
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8001ade:	7e9a      	ldrb	r2, [r3, #26]
		currentPluckBuffer = 1;
 8001ae0:	6008      	str	r0, [r1, #0]
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8001ae2:	2afe      	cmp	r2, #254	; 0xfe
 8001ae4:	d008      	beq.n	8001af8 <HAL_SPI_RxCpltCallback+0x50>
		newPluck = 1;
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_SPI_RxCpltCallback+0xe0>)
 8001ae8:	2001      	movs	r0, #1
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8001aea:	2234      	movs	r2, #52	; 0x34
 8001aec:	4924      	ldr	r1, [pc, #144]	; (8001b80 <HAL_SPI_RxCpltCallback+0xd8>)
		newPluck = 1;
 8001aee:	6018      	str	r0, [r3, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8001af0:	481c      	ldr	r0, [pc, #112]	; (8001b64 <HAL_SPI_RxCpltCallback+0xbc>)
 8001af2:	f007 f935 	bl	8008d60 <HAL_SPI_Receive_DMA>
 8001af6:	e7dc      	b.n	8001ab2 <HAL_SPI_RxCpltCallback+0xa>
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8001af8:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8001afc:	2afd      	cmp	r2, #253	; 0xfd
 8001afe:	d1f2      	bne.n	8001ae6 <HAL_SPI_RxCpltCallback+0x3e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1 + (26*currentPluckBuffer)] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2 + (26*currentPluckBuffer)];
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <HAL_SPI_RxCpltCallback+0xe4>)
 8001b02:	6810      	ldr	r0, [r2, #0]
 8001b04:	6811      	ldr	r1, [r2, #0]
 8001b06:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001b0a:	310e      	adds	r1, #14
 8001b0c:	7ec5      	ldrb	r5, [r0, #27]
 8001b0e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8001b12:	6811      	ldr	r1, [r2, #0]
 8001b14:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8001b18:	6815      	ldr	r5, [r2, #0]
 8001b1a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8001b1e:	350f      	adds	r5, #15
 8001b20:	7f4e      	ldrb	r6, [r1, #29]
 8001b22:	f813 1015 	ldrb.w	r1, [r3, r5, lsl #1]
 8001b26:	6815      	ldr	r5, [r2, #0]
 8001b28:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 8001b2c:	6816      	ldr	r6, [r2, #0]
 8001b2e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8001b32:	3610      	adds	r6, #16
 8001b34:	f895 c01f 	ldrb.w	ip, [r5, #31]
 8001b38:	f813 5016 	ldrb.w	r5, [r3, r6, lsl #1]
 8001b3c:	6816      	ldr	r6, [r2, #0]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8001b44:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8001b48:	3211      	adds	r2, #17
 8001b4a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001b4e:	f89c 3021 	ldrb.w	r3, [ip, #33]	; 0x21
 8001b52:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_SPI_RxCpltCallback+0xe8>)
 8001b58:	e9c3 5202 	strd	r5, r2, [r3, #8]
 8001b5c:	e9c3 0100 	strd	r0, r1, [r3]
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8001b60:	e7c1      	b.n	8001ae6 <HAL_SPI_RxCpltCallback+0x3e>
 8001b62:	bf00      	nop
 8001b64:	20018488 	.word	0x20018488
 8001b68:	20018400 	.word	0x20018400
 8001b6c:	20018378 	.word	0x20018378
 8001b70:	2000060c 	.word	0x2000060c
 8001b74:	20010588 	.word	0x20010588
 8001b78:	20000608 	.word	0x20000608
 8001b7c:	200002b0 	.word	0x200002b0
 8001b80:	30004220 	.word	0x30004220
 8001b84:	200002b4 	.word	0x200002b4
 8001b88:	20000610 	.word	0x20000610
 8001b8c:	2000034c 	.word	0x2000034c
 8001b90:	2000f408 	.word	0x2000f408

08001b94 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	if (hspi == &hspi5)
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_SPI_RxHalfCpltCallback+0xbc>)
 8001b96:	4298      	cmp	r0, r3
{
 8001b98:	b470      	push	{r4, r5, r6}
	if (hspi == &hspi5)
 8001b9a:	d007      	beq.n	8001bac <HAL_SPI_RxHalfCpltCallback+0x18>
			}
		}
		newPluck = 1;

	}
	if (hspi == &hspi2)
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_SPI_RxHalfCpltCallback+0xc0>)
 8001b9e:	4298      	cmp	r0, r3
 8001ba0:	d011      	beq.n	8001bc6 <HAL_SPI_RxHalfCpltCallback+0x32>
		}
		*/
		newBar = 1;
		currentBarBuffer = 0;
	}
	if (hspi == &hspi1)
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_SPI_RxHalfCpltCallback+0xc4>)
 8001ba4:	4298      	cmp	r0, r3
 8001ba6:	d017      	beq.n	8001bd8 <HAL_SPI_RxHalfCpltCallback+0x44>
		}
		*/
		newLevers = 1;
		currentLeverBuffer = 0;
	}
}
 8001ba8:	bc70      	pop	{r4, r5, r6}
 8001baa:	4770      	bx	lr
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_SPI_RxHalfCpltCallback+0xc8>)
		currentPluckBuffer = 0;
 8001bae:	2400      	movs	r4, #0
 8001bb0:	492b      	ldr	r1, [pc, #172]	; (8001c60 <HAL_SPI_RxHalfCpltCallback+0xcc>)
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8001bb2:	781a      	ldrb	r2, [r3, #0]
		currentPluckBuffer = 0;
 8001bb4:	600c      	str	r4, [r1, #0]
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8001bb6:	2afe      	cmp	r2, #254	; 0xfe
 8001bb8:	d016      	beq.n	8001be8 <HAL_SPI_RxHalfCpltCallback+0x54>
		newPluck = 1;
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_SPI_RxHalfCpltCallback+0xd0>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
	if (hspi == &hspi2)
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_SPI_RxHalfCpltCallback+0xc0>)
 8001bc2:	4298      	cmp	r0, r3
 8001bc4:	d1ed      	bne.n	8001ba2 <HAL_SPI_RxHalfCpltCallback+0xe>
		currentBarBuffer = 0;
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <HAL_SPI_RxHalfCpltCallback+0xd4>)
 8001bc8:	2200      	movs	r2, #0
		newBar = 1;
 8001bca:	4928      	ldr	r1, [pc, #160]	; (8001c6c <HAL_SPI_RxHalfCpltCallback+0xd8>)
 8001bcc:	2401      	movs	r4, #1
		currentBarBuffer = 0;
 8001bce:	601a      	str	r2, [r3, #0]
	if (hspi == &hspi1)
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_SPI_RxHalfCpltCallback+0xc4>)
		newBar = 1;
 8001bd2:	600c      	str	r4, [r1, #0]
	if (hspi == &hspi1)
 8001bd4:	4298      	cmp	r0, r3
 8001bd6:	d1e7      	bne.n	8001ba8 <HAL_SPI_RxHalfCpltCallback+0x14>
		newLevers = 1;
 8001bd8:	4925      	ldr	r1, [pc, #148]	; (8001c70 <HAL_SPI_RxHalfCpltCallback+0xdc>)
 8001bda:	2001      	movs	r0, #1
		currentLeverBuffer = 0;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <HAL_SPI_RxHalfCpltCallback+0xe0>)
 8001bde:	2200      	movs	r2, #0
		newLevers = 1;
 8001be0:	6008      	str	r0, [r1, #0]
		currentLeverBuffer = 0;
 8001be2:	601a      	str	r2, [r3, #0]
}
 8001be4:	bc70      	pop	{r4, r5, r6}
 8001be6:	4770      	bx	lr
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8001be8:	7e5a      	ldrb	r2, [r3, #25]
 8001bea:	2afd      	cmp	r2, #253	; 0xfd
 8001bec:	d1e5      	bne.n	8001bba <HAL_SPI_RxHalfCpltCallback+0x26>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1 + (26*currentPluckBuffer)] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2 + (26*currentPluckBuffer)];
 8001bee:	4a22      	ldr	r2, [pc, #136]	; (8001c78 <HAL_SPI_RxHalfCpltCallback+0xe4>)
 8001bf0:	6814      	ldr	r4, [r2, #0]
 8001bf2:	6811      	ldr	r1, [r2, #0]
 8001bf4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8001bf8:	3101      	adds	r1, #1
 8001bfa:	7865      	ldrb	r5, [r4, #1]
 8001bfc:	f813 4011 	ldrb.w	r4, [r3, r1, lsl #1]
 8001c00:	6811      	ldr	r1, [r2, #0]
 8001c02:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8001c06:	6815      	ldr	r5, [r2, #0]
 8001c08:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8001c0c:	3502      	adds	r5, #2
 8001c0e:	78ce      	ldrb	r6, [r1, #3]
 8001c10:	f813 1015 	ldrb.w	r1, [r3, r5, lsl #1]
 8001c14:	6815      	ldr	r5, [r2, #0]
 8001c16:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 8001c1a:	6816      	ldr	r6, [r2, #0]
 8001c1c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8001c20:	3603      	adds	r6, #3
 8001c22:	f895 c005 	ldrb.w	ip, [r5, #5]
 8001c26:	f813 5016 	ldrb.w	r5, [r3, r6, lsl #1]
 8001c2a:	6816      	ldr	r6, [r2, #0]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8001c32:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8001c36:	3204      	adds	r2, #4
 8001c38:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8001c3c:	f89c 3007 	ldrb.w	r3, [ip, #7]
 8001c40:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001c44:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_SPI_RxHalfCpltCallback+0xe8>)
 8001c46:	e9c3 5202 	strd	r5, r2, [r3, #8]
 8001c4a:	e9c3 4100 	strd	r4, r1, [r3]
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8001c4e:	e7b4      	b.n	8001bba <HAL_SPI_RxHalfCpltCallback+0x26>
 8001c50:	20018488 	.word	0x20018488
 8001c54:	20018400 	.word	0x20018400
 8001c58:	20018378 	.word	0x20018378
 8001c5c:	30004220 	.word	0x30004220
 8001c60:	200002b4 	.word	0x200002b4
 8001c64:	20000610 	.word	0x20000610
 8001c68:	200002b0 	.word	0x200002b0
 8001c6c:	20000608 	.word	0x20000608
 8001c70:	2000060c 	.word	0x2000060c
 8001c74:	20010588 	.word	0x20010588
 8001c78:	2000034c 	.word	0x2000034c
 8001c7c:	2000f408 	.word	0x2000f408

08001c80 <HAL_SAI_ErrorCallback>:
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <HAL_SAI_TxCpltCallback>:
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop

08001c88 <HAL_SAI_TxHalfCpltCallback>:
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{

}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop

08001c8c <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8001c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8001c92:	b082      	sub	sp, #8
 8001c94:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9a:	483b      	ldr	r0, [pc, #236]	; (8001d88 <AudioCodec_init+0xfc>)
 8001c9c:	f002 ffca 	bl	8004c34 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8001ca0:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8001ca2:	4c3a      	ldr	r4, [pc, #232]	; (8001d8c <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8001ca4:	f001 fc98 	bl	80035d8 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001ca8:	4f39      	ldr	r7, [pc, #228]	; (8001d90 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 8001caa:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cae:	4e39      	ldr	r6, [pc, #228]	; (8001d94 <AudioCodec_init+0x108>)
 8001cb0:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8001cb2:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	4628      	mov	r0, r5
 8001cba:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8001d9c <AudioCodec_init+0x110>
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	8833      	ldrh	r3, [r6, #0]
 8001cc2:	f003 f8cf 	bl	8004e64 <HAL_I2C_Master_Transmit>
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cca:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cce:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8001cd0:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 8001cd8:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cda:	8833      	ldrh	r3, [r6, #0]
 8001cdc:	f003 f8c2 	bl	8004e64 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001ce4:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001ce8:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 8001cea:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cec:	2120      	movs	r1, #32
 8001cee:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 8001cf0:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cf2:	8833      	ldrh	r3, [r6, #0]
 8001cf4:	f003 f8b6 	bl	8004e64 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001cfc:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d00:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8001d02:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d06:	2120      	movs	r1, #32
 8001d08:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 8001d0a:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d0c:	8833      	ldrh	r3, [r6, #0]
 8001d0e:	f003 f8a9 	bl	8004e64 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d16:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d1a:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 8001d1c:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d20:	2120      	movs	r1, #32
 8001d22:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8001d24:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d26:	8833      	ldrh	r3, [r6, #0]
 8001d28:	f003 f89c 	bl	8004e64 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d30:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d34:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8001d36:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d3a:	2120      	movs	r1, #32
 8001d3c:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 8001d3e:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d40:	8833      	ldrh	r3, [r6, #0]
 8001d42:	f003 f88f 	bl	8004e64 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d4a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d4e:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8001d50:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d54:	2120      	movs	r1, #32
 8001d56:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8001d58:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d5a:	8833      	ldrh	r3, [r6, #0]
 8001d5c:	f003 f882 	bl	8004e64 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d60:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8001d62:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d66:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d68:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8001d72:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001d74:	2120      	movs	r1, #32
 8001d76:	f003 f875 	bl	8004e64 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <AudioCodec_init+0x10c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

}
 8001d80:	b002      	add	sp, #8
 8001d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d86:	bf00      	nop
 8001d88:	58020800 	.word	0x58020800
 8001d8c:	2000f4f4 	.word	0x2000f4f4
 8001d90:	2000008c 	.word	0x2000008c
 8001d94:	20000090 	.word	0x20000090
 8001d98:	2000029c 	.word	0x2000029c
 8001d9c:	2000f4f6 	.word	0x2000f4f6

08001da0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	200b      	movs	r0, #11
 8001da6:	4611      	mov	r1, r2
{
 8001da8:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001daa:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8001dae:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001db0:	f044 0401 	orr.w	r4, r4, #1
 8001db4:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8001db8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001dc4:	f001 fc3c 	bl	8003640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001dc8:	200b      	movs	r0, #11
 8001dca:	f001 fc77 	bl	80036bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 4, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	200c      	movs	r0, #12
 8001dd4:	f001 fc34 	bl	8003640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001dd8:	200c      	movs	r0, #12
 8001dda:	f001 fc6f 	bl	80036bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2105      	movs	r1, #5
 8001de2:	200d      	movs	r0, #13
 8001de4:	f001 fc2c 	bl	8003640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001de8:	200d      	movs	r0, #13
 8001dea:	f001 fc67 	bl	80036bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	200e      	movs	r0, #14
 8001df2:	4611      	mov	r1, r2
 8001df4:	f001 fc24 	bl	8003640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001df8:	200e      	movs	r0, #14
 8001dfa:	f001 fc5f 	bl	80036bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001dfe:	2200      	movs	r2, #0
 8001e00:	200f      	movs	r0, #15
 8001e02:	4611      	mov	r1, r2
 8001e04:	f001 fc1c 	bl	8003640 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e08:	200f      	movs	r0, #15

}
 8001e0a:	b002      	add	sp, #8
 8001e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e10:	f001 bc54 	b.w	80036bc <HAL_NVIC_EnableIRQ>
 8001e14:	58024400 	.word	0x58024400

08001e18 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001e18:	481f      	ldr	r0, [pc, #124]	; (8001e98 <MX_FMC_Init+0x80>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001e1a:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001e1c:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001e1e:	2108      	movs	r1, #8
{
 8001e20:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001e22:	4c1e      	ldr	r4, [pc, #120]	; (8001e9c <MX_FMC_Init+0x84>)
{
 8001e24:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001e26:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001e28:	2210      	movs	r2, #16
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001e2a:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8001e2c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001e30:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001e32:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e36:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001e38:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001e3a:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e3e:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001e40:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001e42:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001e46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8001e4a:	2402      	movs	r4, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001e4c:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8001e50:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001e52:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 2;
 8001e54:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
 8001e56:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8001e90 <MX_FMC_Init+0x78>
 8001e5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	2302      	movs	r3, #2
 8001e62:	ed8d 7b00 	vstr	d7, [sp]
 8001e66:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001e6a:	f006 fde7 	bl	8008a3c <HAL_SDRAM_Init>
 8001e6e:	b928      	cbnz	r0, 8001e7c <MX_FMC_Init+0x64>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8001e70:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001e74:	f001 fbc8 	bl	8003608 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001e78:	b008      	add	sp, #32
 8001e7a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8001e7c:	f000 fed8 	bl	8002c30 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8001e80:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001e84:	f001 fbc0 	bl	8003608 <HAL_SetFMCMemorySwappingConfig>
}
 8001e88:	b008      	add	sp, #32
 8001e8a:	bd10      	pop	{r4, pc}
 8001e8c:	f3af 8000 	nop.w
 8001e90:	00000002 	.word	0x00000002
 8001e94:	00000006 	.word	0x00000006
 8001e98:	2000f4fc 	.word	0x2000f4fc
 8001e9c:	52004140 	.word	0x52004140

08001ea0 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8001ea0:	4836      	ldr	r0, [pc, #216]	; (8001f7c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001ea4:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
 8001ea6:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001ea8:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001eae:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001eb2:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8001eb4:	b109      	cbz	r1, 8001eba <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001eb6:	b038      	add	sp, #224	; 0xe0
 8001eb8:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8001eba:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ebc:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8001ebe:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec0:	a80a      	add	r0, sp, #40	; 0x28
 8001ec2:	f013 f8fb 	bl	80150bc <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001ec6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eca:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ecc:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001ece:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed2:	f004 f89d 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d14c      	bne.n	8001f74 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001eda:	4b29      	ldr	r3, [pc, #164]	; (8001f80 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001edc:	f64f 003f 	movw	r0, #63551	; 0xf83f
 8001ee0:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ee2:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001ee4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ee8:	2600      	movs	r6, #0
 8001eea:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001eec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ef0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001ef4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ef8:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f02:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f04:	a902      	add	r1, sp, #8
 8001f06:	481f      	ldr	r0, [pc, #124]	; (8001f84 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f08:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f0e:	f002 fd51 	bl	80049b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8001f12:	2219      	movs	r2, #25
 8001f14:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	a902      	add	r1, sp, #8
 8001f18:	481b      	ldr	r0, [pc, #108]	; (8001f88 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f1a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8001f1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f20:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f002 fd46 	bl	80049b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001f28:	f248 1237 	movw	r2, #33079	; 0x8137
 8001f2c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f2e:	a902      	add	r1, sp, #8
 8001f30:	4816      	ldr	r0, [pc, #88]	; (8001f8c <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f32:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8001f34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f38:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f3c:	f002 fd3a 	bl	80049b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f40:	f64f 7283 	movw	r2, #65411	; 0xff83
 8001f44:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f46:	a902      	add	r1, sp, #8
 8001f48:	4811      	ldr	r0, [pc, #68]	; (8001f90 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f4a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001f4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f50:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f54:	f002 fd2e 	bl	80049b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001f58:	f24c 7203 	movw	r2, #50947	; 0xc703
 8001f5c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5e:	a902      	add	r1, sp, #8
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f62:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001f64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001f68:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f6c:	f002 fd22 	bl	80049b4 <HAL_GPIO_Init>
}
 8001f70:	b038      	add	sp, #224	; 0xe0
 8001f72:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8001f74:	f000 fe5c 	bl	8002c30 <Error_Handler>
 8001f78:	e7af      	b.n	8001eda <HAL_SDRAM_MspInit+0x3a>
 8001f7a:	bf00      	nop
 8001f7c:	2000f4f8 	.word	0x2000f4f8
 8001f80:	58024400 	.word	0x58024400
 8001f84:	58021400 	.word	0x58021400
 8001f88:	58020800 	.word	0x58020800
 8001f8c:	58021800 	.word	0x58021800
 8001f90:	58021000 	.word	0x58021000
 8001f94:	58020c00 	.word	0x58020c00

08001f98 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9c:	4b74      	ldr	r3, [pc, #464]	; (8002170 <MX_GPIO_Init+0x1d8>)
{
 8001f9e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001fa2:	4d74      	ldr	r5, [pc, #464]	; (8002174 <MX_GPIO_Init+0x1dc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001fa4:	4e74      	ldr	r6, [pc, #464]	; (8002178 <MX_GPIO_Init+0x1e0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001fac:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fae:	f04f 0800 	mov.w	r8, #0
 8001fb2:	f04f 0900 	mov.w	r9, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fb6:	2701      	movs	r7, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001fbc:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001fc4:	f042 0210 	orr.w	r2, r2, #16
 8001fc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001fcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001fd0:	f002 0210 	and.w	r2, r2, #16
 8001fd4:	9200      	str	r2, [sp, #0]
 8001fd6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001fdc:	f042 0204 	orr.w	r2, r2, #4
 8001fe0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001fe4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001fe8:	f002 0204 	and.w	r2, r2, #4
 8001fec:	9201      	str	r2, [sp, #4]
 8001fee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001ff4:	f042 0220 	orr.w	r2, r2, #32
 8001ff8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001ffc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002000:	f002 0220 	and.w	r2, r2, #32
 8002004:	9202      	str	r2, [sp, #8]
 8002006:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002008:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800200c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002010:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002014:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002018:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800201c:	9203      	str	r2, [sp, #12]
 800201e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800202c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002030:	f002 0201 	and.w	r2, r2, #1
 8002034:	9204      	str	r2, [sp, #16]
 8002036:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800203c:	f042 0202 	orr.w	r2, r2, #2
 8002040:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002044:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002048:	f002 0202 	and.w	r2, r2, #2
 800204c:	9205      	str	r2, [sp, #20]
 800204e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002050:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002058:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800205c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002060:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002064:	9206      	str	r2, [sp, #24]
 8002066:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002068:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800206c:	f042 0208 	orr.w	r2, r2, #8
 8002070:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002074:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	9307      	str	r3, [sp, #28]
 8002080:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002082:	f002 fdd7 	bl	8004c34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002086:	4622      	mov	r2, r4
 8002088:	4630      	mov	r0, r6
 800208a:	2110      	movs	r1, #16
 800208c:	f002 fdd2 	bl	8004c34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002090:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002094:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002096:	a908      	add	r1, sp, #32
 8002098:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800209c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a0:	f002 fc88 	bl	80049b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020a8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020aa:	a908      	add	r1, sp, #32
 80020ac:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80020ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80020b2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b6:	f002 fc7d 	bl	80049b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80020ba:	f248 02c6 	movw	r2, #32966	; 0x80c6
 80020be:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c0:	a908      	add	r1, sp, #32
 80020c2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80020c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ca:	f002 fc73 	bl	80049b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d2:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d4:	a908      	add	r1, sp, #32
 80020d6:	4829      	ldr	r0, [pc, #164]	; (800217c <MX_GPIO_Init+0x1e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020da:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020de:	f002 fc69 	bl	80049b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80020e2:	f649 720f 	movw	r2, #40719	; 0x9f0f
 80020e6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	a908      	add	r1, sp, #32
 80020ea:	4825      	ldr	r0, [pc, #148]	; (8002180 <MX_GPIO_Init+0x1e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80020ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f2:	f002 fc5f 	bl	80049b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020f6:	2220      	movs	r2, #32
 80020f8:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020fa:	4628      	mov	r0, r5
 80020fc:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020fe:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002100:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002104:	f002 fc56 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8002108:	f240 32e5 	movw	r2, #997	; 0x3e5
 800210c:	2303      	movs	r3, #3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210e:	a908      	add	r1, sp, #32
 8002110:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8002114:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002118:	f002 fc4c 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800211c:	2202      	movs	r2, #2
 800211e:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002120:	a908      	add	r1, sp, #32
 8002122:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002124:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002126:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f002 fc43 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 800212e:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8002132:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002134:	a908      	add	r1, sp, #32
 8002136:	4813      	ldr	r0, [pc, #76]	; (8002184 <MX_GPIO_Init+0x1ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 800213a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800213e:	f002 fc39 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8002142:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 8002146:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002148:	a908      	add	r1, sp, #32
 800214a:	480f      	ldr	r0, [pc, #60]	; (8002188 <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800214e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002152:	f002 fc2f 	bl	80049b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002156:	2210      	movs	r2, #16
 8002158:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	a908      	add	r1, sp, #32
 800215c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800215e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8002162:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002166:	f002 fc25 	bl	80049b4 <HAL_GPIO_Init>

}
 800216a:	b00f      	add	sp, #60	; 0x3c
 800216c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002170:	58024400 	.word	0x58024400
 8002174:	58020800 	.word	0x58020800
 8002178:	58020400 	.word	0x58020400
 800217c:	58021400 	.word	0x58021400
 8002180:	58020000 	.word	0x58020000
 8002184:	58020c00 	.word	0x58020c00
 8002188:	58021800 	.word	0x58021800

0800218c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800218c:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800218e:	4817      	ldr	r0, [pc, #92]	; (80021ec <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002190:	2300      	movs	r3, #0
 8002192:	4917      	ldr	r1, [pc, #92]	; (80021f0 <MX_I2C2_Init+0x64>)
 8002194:	2401      	movs	r4, #1
 8002196:	4a17      	ldr	r2, [pc, #92]	; (80021f4 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002198:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219a:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 800219e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021a6:	f002 fe07 	bl	8004db8 <HAL_I2C_Init>
 80021aa:	b950      	cbnz	r0, 80021c2 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ac:	2100      	movs	r1, #0
 80021ae:	480f      	ldr	r0, [pc, #60]	; (80021ec <MX_I2C2_Init+0x60>)
 80021b0:	f002 fff8 	bl	80051a4 <HAL_I2CEx_ConfigAnalogFilter>
 80021b4:	b968      	cbnz	r0, 80021d2 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80021b6:	2100      	movs	r1, #0
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <MX_I2C2_Init+0x60>)
 80021ba:	f003 f81d 	bl	80051f8 <HAL_I2CEx_ConfigDigitalFilter>
 80021be:	b980      	cbnz	r0, 80021e2 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021c0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80021c2:	f000 fd35 	bl	8002c30 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021c6:	2100      	movs	r1, #0
 80021c8:	4808      	ldr	r0, [pc, #32]	; (80021ec <MX_I2C2_Init+0x60>)
 80021ca:	f002 ffeb 	bl	80051a4 <HAL_I2CEx_ConfigAnalogFilter>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d0f1      	beq.n	80021b6 <MX_I2C2_Init+0x2a>
    Error_Handler();
 80021d2:	f000 fd2d 	bl	8002c30 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80021d6:	2100      	movs	r1, #0
 80021d8:	4804      	ldr	r0, [pc, #16]	; (80021ec <MX_I2C2_Init+0x60>)
 80021da:	f003 f80d 	bl	80051f8 <HAL_I2CEx_ConfigDigitalFilter>
 80021de:	2800      	cmp	r0, #0
 80021e0:	d0ee      	beq.n	80021c0 <MX_I2C2_Init+0x34>
}
 80021e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80021e6:	f000 bd23 	b.w	8002c30 <Error_Handler>
 80021ea:	bf00      	nop
 80021ec:	2000f530 	.word	0x2000f530
 80021f0:	40005800 	.word	0x40005800
 80021f4:	00b03fdb 	.word	0x00b03fdb

080021f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021f8:	b510      	push	{r4, lr}
 80021fa:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021fc:	2100      	movs	r1, #0
{
 80021fe:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002200:	22c0      	movs	r2, #192	; 0xc0
 8002202:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	9106      	str	r1, [sp, #24]
 8002206:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800220a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800220e:	f012 ff55 	bl	80150bc <memset>
  if(i2cHandle->Instance==I2C2)
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_I2C_MspInit+0x98>)
 8002214:	6822      	ldr	r2, [r4, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d001      	beq.n	800221e <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800221a:	b038      	add	sp, #224	; 0xe0
 800221c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800221e:	2208      	movs	r2, #8
 8002220:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002222:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002224:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002228:	f003 fef2 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 800222c:	bb40      	cbnz	r0, 8002280 <HAL_I2C_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	4c19      	ldr	r4, [pc, #100]	; (8002294 <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002230:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	a902      	add	r1, sp, #8
 8002234:	4818      	ldr	r0, [pc, #96]	; (8002298 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002242:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002246:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002248:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800224e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8002288 <HAL_I2C_MspInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002256:	2303      	movs	r3, #3
 8002258:	ed8d 7b02 	vstr	d7, [sp, #8]
 800225c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	f002 fba8 	bl	80049b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002264:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8002268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800226c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8002270:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8002274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	9b01      	ldr	r3, [sp, #4]
}
 800227c:	b038      	add	sp, #224	; 0xe0
 800227e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002280:	f000 fcd6 	bl	8002c30 <Error_Handler>
 8002284:	e7d3      	b.n	800222e <HAL_I2C_MspInit+0x36>
 8002286:	bf00      	nop
 8002288:	00000c00 	.word	0x00000c00
 800228c:	00000012 	.word	0x00000012
 8002290:	40005800 	.word	0x40005800
 8002294:	58024400 	.word	0x58024400
 8002298:	58020400 	.word	0x58020400

0800229c <blankFunction>:


void blankFunction(float a, int b)
{
	;
}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <checkForSDCardPreset>:
{
 80022a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a4:	b08a      	sub	sp, #40	; 0x28
 80022a6:	4604      	mov	r4, r0
	if(BSP_SD_IsDetected())
 80022a8:	f008 fab6 	bl	800a818 <BSP_SD_IsDetected>
 80022ac:	b958      	cbnz	r0, 80022c6 <checkForSDCardPreset+0x26>
 80022ae:	4d3f      	ldr	r5, [pc, #252]	; (80023ac <checkForSDCardPreset+0x10c>)
 80022b0:	4e3f      	ldr	r6, [pc, #252]	; (80023b0 <checkForSDCardPreset+0x110>)
		loadFailed = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	2000      	movs	r0, #0
 80022b6:	7033      	strb	r3, [r6, #0]
	presetWaitingToLoad = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	4a3e      	ldr	r2, [pc, #248]	; (80023b4 <checkForSDCardPreset+0x114>)
 80022bc:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 80022be:	702b      	strb	r3, [r5, #0]
}
 80022c0:	b00a      	add	sp, #40	; 0x28
 80022c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loadFailed = 0;
 80022c6:	2700      	movs	r7, #0
		diskBusy = 1;
 80022c8:	f04f 0801 	mov.w	r8, #1
 80022cc:	4d37      	ldr	r5, [pc, #220]	; (80023ac <checkForSDCardPreset+0x10c>)
		loadFailed = 0;
 80022ce:	4e38      	ldr	r6, [pc, #224]	; (80023b0 <checkForSDCardPreset+0x110>)
		disk_initialize(0);
 80022d0:	4638      	mov	r0, r7
		diskBusy = 1;
 80022d2:	f885 8000 	strb.w	r8, [r5]
		loadFailed = 0;
 80022d6:	7037      	strb	r7, [r6, #0]
		disk_initialize(0);
 80022d8:	f008 fb62 	bl	800a9a0 <disk_initialize>
	    disk_status(0);
 80022dc:	4638      	mov	r0, r7
 80022de:	f008 fb55 	bl	800a98c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80022e2:	4642      	mov	r2, r8
 80022e4:	4934      	ldr	r1, [pc, #208]	; (80023b8 <checkForSDCardPreset+0x118>)
 80022e6:	4835      	ldr	r0, [pc, #212]	; (80023bc <checkForSDCardPreset+0x11c>)
 80022e8:	f00a fdec 	bl	800cec4 <f_mount>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1e0      	bne.n	80022b2 <checkForSDCardPreset+0x12>
			itoa(numberToLoad, charBuf, 10);
 80022f0:	a904      	add	r1, sp, #16
 80022f2:	220a      	movs	r2, #10
 80022f4:	4620      	mov	r0, r4
 80022f6:	f012 feb7 	bl	8015068 <itoa>
			int len = ((strlen(charBuf)));
 80022fa:	a804      	add	r0, sp, #16
 80022fc:	f7fd ffec 	bl	80002d8 <strlen>
			if (len == 1)
 8002300:	4540      	cmp	r0, r8
			int len = ((strlen(charBuf)));
 8002302:	4601      	mov	r1, r0
			if (len == 1)
 8002304:	d038      	beq.n	8002378 <checkForSDCardPreset+0xd8>
				strcat(charBuf, ".ebp");
 8002306:	ab04      	add	r3, sp, #16
 8002308:	4c2d      	ldr	r4, [pc, #180]	; (80023c0 <checkForSDCardPreset+0x120>)
 800230a:	f10d 0c10 	add.w	ip, sp, #16
				strcpy(finalString, charBuf);
 800230e:	1d42      	adds	r2, r0, #5
				strcat(charBuf, ".ebp");
 8002310:	181f      	adds	r7, r3, r0
 8002312:	6820      	ldr	r0, [r4, #0]
				strcpy(finalString, charBuf);
 8002314:	ab07      	add	r3, sp, #28
				strcat(charBuf, ".ebp");
 8002316:	f84c 0001 	str.w	r0, [ip, r1]
 800231a:	7921      	ldrb	r1, [r4, #4]
				strcpy(finalString, charBuf);
 800231c:	4618      	mov	r0, r3
				strcat(charBuf, ".ebp");
 800231e:	7139      	strb	r1, [r7, #4]
				strcpy(finalString, charBuf);
 8002320:	4661      	mov	r1, ip
 8002322:	f012 fea3 	bl	801506c <memcpy>
 8002326:	4603      	mov	r3, r0
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 8002328:	4a23      	ldr	r2, [pc, #140]	; (80023b8 <checkForSDCardPreset+0x118>)
 800232a:	4926      	ldr	r1, [pc, #152]	; (80023c4 <checkForSDCardPreset+0x124>)
 800232c:	4826      	ldr	r0, [pc, #152]	; (80023c8 <checkForSDCardPreset+0x128>)
 800232e:	f00b fb2d 	bl	800d98c <f_findfirst>
			if(res == FR_OK)
 8002332:	2800      	cmp	r0, #0
 8002334:	d1bd      	bne.n	80022b2 <checkForSDCardPreset+0x12>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8002336:	4f25      	ldr	r7, [pc, #148]	; (80023cc <checkForSDCardPreset+0x12c>)
 8002338:	2211      	movs	r2, #17
 800233a:	4925      	ldr	r1, [pc, #148]	; (80023d0 <checkForSDCardPreset+0x130>)
 800233c:	4638      	mov	r0, r7
 800233e:	f00a fe0d 	bl	800cf5c <f_open>
 8002342:	2800      	cmp	r0, #0
 8002344:	d1b5      	bne.n	80022b2 <checkForSDCardPreset+0x12>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8002346:	ab03      	add	r3, sp, #12
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4922      	ldr	r1, [pc, #136]	; (80023d4 <checkForSDCardPreset+0x134>)
 800234c:	4638      	mov	r0, r7
 800234e:	f00a ff83 	bl	800d258 <f_read>
					presetWaitingToParse = bytesRead;
 8002352:	9a03      	ldr	r2, [sp, #12]
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <checkForSDCardPreset+0x138>)
					f_close(&SDFile);
 8002356:	4638      	mov	r0, r7
 8002358:	2404      	movs	r4, #4
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800235a:	4e20      	ldr	r6, [pc, #128]	; (80023dc <checkForSDCardPreset+0x13c>)
					presetWaitingToParse = bytesRead;
 800235c:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 800235e:	f00b fa09 	bl	800d774 <f_close>
						HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8002362:	4630      	mov	r0, r6
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	f002 fc69 	bl	8004c3c <HAL_GPIO_TogglePin>
						HAL_Delay(50);
 800236a:	2032      	movs	r0, #50	; 0x32
 800236c:	f001 f934 	bl	80035d8 <HAL_Delay>
					for (int i = 0; i < 4; i++)
 8002370:	3c01      	subs	r4, #1
 8002372:	d1f6      	bne.n	8002362 <checkForSDCardPreset+0xc2>
					found = 1;
 8002374:	2001      	movs	r0, #1
 8002376:	e79f      	b.n	80022b8 <checkForSDCardPreset+0x18>
				finalString[1] = charBuf[0];
 8002378:	f89d 2010 	ldrb.w	r2, [sp, #16]
				strcat(finalString, ".ebp");
 800237c:	ab07      	add	r3, sp, #28
				finalString[2] = charBuf[1];
 800237e:	f89d 1011 	ldrb.w	r1, [sp, #17]
				finalString[1] = charBuf[0];
 8002382:	f88d 201d 	strb.w	r2, [sp, #29]
				finalString[0] = '0';
 8002386:	2230      	movs	r2, #48	; 0x30
				strcat(finalString, ".ebp");
 8002388:	4618      	mov	r0, r3
				finalString[2] = charBuf[1];
 800238a:	f88d 101e 	strb.w	r1, [sp, #30]
				strcat(finalString, ".ebp");
 800238e:	9301      	str	r3, [sp, #4]
				finalString[0] = '0';
 8002390:	f88d 201c 	strb.w	r2, [sp, #28]
				strcat(finalString, ".ebp");
 8002394:	f7fd ffa0 	bl	80002d8 <strlen>
 8002398:	4909      	ldr	r1, [pc, #36]	; (80023c0 <checkForSDCardPreset+0x120>)
 800239a:	4602      	mov	r2, r0
 800239c:	9b01      	ldr	r3, [sp, #4]
 800239e:	181c      	adds	r4, r3, r0
 80023a0:	6808      	ldr	r0, [r1, #0]
 80023a2:	5098      	str	r0, [r3, r2]
 80023a4:	790a      	ldrb	r2, [r1, #4]
 80023a6:	7122      	strb	r2, [r4, #4]
 80023a8:	e7be      	b.n	8002328 <checkForSDCardPreset+0x88>
 80023aa:	bf00      	nop
 80023ac:	200105c8 	.word	0x200105c8
 80023b0:	20014778 	.word	0x20014778
 80023b4:	20015b4c 	.word	0x20015b4c
 80023b8:	20018978 	.word	0x20018978
 80023bc:	20018514 	.word	0x20018514
 80023c0:	080172bc 	.word	0x080172bc
 80023c4:	2001262c 	.word	0x2001262c
 80023c8:	20010590 	.word	0x20010590
 80023cc:	20018748 	.word	0x20018748
 80023d0:	20012642 	.word	0x20012642
 80023d4:	2000f584 	.word	0x2000f584
 80023d8:	20015b50 	.word	0x20015b50
 80023dc:	58020800 	.word	0x58020800

080023e0 <SystemClock_Config>:
{
 80023e0:	b500      	push	{lr}
 80023e2:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e4:	224c      	movs	r2, #76	; 0x4c
 80023e6:	2100      	movs	r1, #0
 80023e8:	a80c      	add	r0, sp, #48	; 0x30
 80023ea:	f012 fe67 	bl	80150bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023ee:	2220      	movs	r2, #32
 80023f0:	2100      	movs	r1, #0
 80023f2:	a804      	add	r0, sp, #16
 80023f4:	f012 fe62 	bl	80150bc <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80023f8:	2002      	movs	r0, #2
 80023fa:	f002 ff29 	bl	8005250 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fe:	4b40      	ldr	r3, [pc, #256]	; (8002500 <SystemClock_Config+0x120>)
 8002400:	2100      	movs	r1, #0
 8002402:	4a40      	ldr	r2, [pc, #256]	; (8002504 <SystemClock_Config+0x124>)
 8002404:	9101      	str	r1, [sp, #4]
 8002406:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002408:	f021 0101 	bic.w	r1, r1, #1
 800240c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	6993      	ldr	r3, [r2, #24]
 8002418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241c:	6193      	str	r3, [r2, #24]
 800241e:	6993      	ldr	r3, [r2, #24]
 8002420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002428:	6993      	ldr	r3, [r2, #24]
 800242a:	0499      	lsls	r1, r3, #18
 800242c:	d5fc      	bpl.n	8002428 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <SystemClock_Config+0x128>)
 8002430:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8002434:	f041 0102 	orr.w	r1, r1, #2
 8002438:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800243c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800244a:	9103      	str	r1, [sp, #12]
 800244c:	6991      	ldr	r1, [r2, #24]
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <SystemClock_Config+0x120>)
 8002450:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002454:	6191      	str	r1, [r2, #24]
 8002456:	6992      	ldr	r2, [r2, #24]
 8002458:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800245c:	9203      	str	r2, [sp, #12]
 800245e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002460:	4a28      	ldr	r2, [pc, #160]	; (8002504 <SystemClock_Config+0x124>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002462:	f041 0101 	orr.w	r1, r1, #1
 8002466:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	9303      	str	r3, [sp, #12]
 8002470:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002472:	6993      	ldr	r3, [r2, #24]
 8002474:	049b      	lsls	r3, r3, #18
 8002476:	d5fc      	bpl.n	8002472 <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <SystemClock_Config+0x128>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800247a:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247c:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800247e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002480:	f023 0303 	bic.w	r3, r3, #3
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248a:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800248c:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 5;
 800248e:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002490:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002492:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8002494:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002496:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002498:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 192;
 800249a:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800249c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80024e8 <SystemClock_Config+0x108>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024a0:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80024a4:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80024a8:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80024aa:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80024ae:	e9cd 321c 	strd	r3, r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b2:	f002 ff75 	bl	80053a0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b6:	2200      	movs	r2, #0
 80024b8:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024ba:	2104      	movs	r1, #4
 80024bc:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024be:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80024f0 <SystemClock_Config+0x110>
 80024c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80024c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ca:	2340      	movs	r3, #64	; 0x40
 80024cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80024d0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80024f8 <SystemClock_Config+0x118>
 80024d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80024d8:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024dc:	f003 faf4 	bl	8005ac8 <HAL_RCC_ClockConfig>
}
 80024e0:	b021      	add	sp, #132	; 0x84
 80024e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80024e6:	bf00      	nop
 80024e8:	00000021 	.word	0x00000021
 80024ec:	00010000 	.word	0x00010000
 80024f0:	0000003f 	.word	0x0000003f
 80024f4:	00000003 	.word	0x00000003
 80024f8:	00000040 	.word	0x00000040
 80024fc:	00000040 	.word	0x00000040
 8002500:	58000400 	.word	0x58000400
 8002504:	58024800 	.word	0x58024800
 8002508:	58024400 	.word	0x58024400
 800250c:	00000000 	.word	0x00000000

08002510 <PeriphCommonClock_Config>:
{
 8002510:	b500      	push	{lr}
 8002512:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002514:	22a4      	movs	r2, #164	; 0xa4
 8002516:	2100      	movs	r1, #0
 8002518:	a807      	add	r0, sp, #28
 800251a:	f012 fdcf 	bl	80150bc <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800251e:	2019      	movs	r0, #25
 8002520:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002524:	2302      	movs	r3, #2
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8002526:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002528:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800252a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800252e:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8002530:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8002532:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8002558 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8002536:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800253a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8002540:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8002544:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8002560 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8002548:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800254a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254e:	f003 fd5f 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
}
 8002552:	b031      	add	sp, #196	; 0xc4
 8002554:	f85d fb04 	ldr.w	pc, [sp], #4
 8002558:	00011100 	.word	0x00011100
 800255c:	00000000 	.word	0x00000000
 8002560:	00000007 	.word	0x00000007
 8002564:	00000002 	.word	0x00000002

08002568 <randomNumber>:
float randomNumber(void) {
 8002568:	b500      	push	{lr}
 800256a:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800256c:	4807      	ldr	r0, [pc, #28]	; (800258c <randomNumber+0x24>)
 800256e:	a901      	add	r1, sp, #4
 8002570:	f004 ff54 	bl	800741c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8002574:	eddd 7a01 	vldr	s15, [sp, #4]
 8002578:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002590 <randomNumber+0x28>
 800257c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8002580:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002584:	b003      	add	sp, #12
 8002586:	f85d fb04 	ldr.w	pc, [sp], #4
 800258a:	bf00      	nop
 800258c:	20017f58 	.word	0x20017f58
 8002590:	2f80000d 	.word	0x2f80000d

08002594 <getPresetNamesFromSDCard>:
{
 8002594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002598:	b089      	sub	sp, #36	; 0x24
	if(BSP_SD_IsDetected())
 800259a:	f008 f93d 	bl	800a818 <BSP_SD_IsDetected>
 800259e:	b938      	cbnz	r0, 80025b0 <getPresetNamesFromSDCard+0x1c>
 80025a0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8002718 <getPresetNamesFromSDCard+0x184>
	diskBusy = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f889 3000 	strb.w	r3, [r9]
}
 80025aa:	b009      	add	sp, #36	; 0x24
 80025ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
 80025b0:	2400      	movs	r4, #0
 80025b2:	4b51      	ldr	r3, [pc, #324]	; (80026f8 <getPresetNamesFromSDCard+0x164>)
		diskBusy = 1;
 80025b4:	2501      	movs	r5, #1
 80025b6:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8002718 <getPresetNamesFromSDCard+0x184>
		disk_initialize(0);
 80025ba:	4620      	mov	r0, r4
		loadFailed = 0;
 80025bc:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 80025be:	f889 5000 	strb.w	r5, [r9]
		disk_initialize(0);
 80025c2:	f008 f9ed 	bl	800a9a0 <disk_initialize>
	    disk_status(0);
 80025c6:	4620      	mov	r0, r4
 80025c8:	f008 f9e0 	bl	800a98c <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80025cc:	462a      	mov	r2, r5
 80025ce:	494b      	ldr	r1, [pc, #300]	; (80026fc <getPresetNamesFromSDCard+0x168>)
 80025d0:	484b      	ldr	r0, [pc, #300]	; (8002700 <getPresetNamesFromSDCard+0x16c>)
 80025d2:	f00a fc77 	bl	800cec4 <f_mount>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d1e4      	bne.n	80025a4 <getPresetNamesFromSDCard+0x10>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 80025da:	4604      	mov	r4, r0
 80025dc:	4d49      	ldr	r5, [pc, #292]	; (8002704 <getPresetNamesFromSDCard+0x170>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80025de:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80026fc <getPresetNamesFromSDCard+0x168>
 80025e2:	4f49      	ldr	r7, [pc, #292]	; (8002708 <getPresetNamesFromSDCard+0x174>)
 80025e4:	4e49      	ldr	r6, [pc, #292]	; (800270c <getPresetNamesFromSDCard+0x178>)
 80025e6:	e014      	b.n	8002612 <getPresetNamesFromSDCard+0x7e>
					strcat(charBuf, ".ebp");
 80025e8:	6828      	ldr	r0, [r5, #0]
 80025ea:	f10d 0e08 	add.w	lr, sp, #8
 80025ee:	f84e 0003 	str.w	r0, [lr, r3]
					strcpy(finalString, charBuf);
 80025f2:	a805      	add	r0, sp, #20
					strcat(charBuf, ".ebp");
 80025f4:	792b      	ldrb	r3, [r5, #4]
 80025f6:	f88c 3004 	strb.w	r3, [ip, #4]
					strcpy(finalString, charBuf);
 80025fa:	f012 fd37 	bl	801506c <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80025fe:	ab05      	add	r3, sp, #20
 8002600:	4642      	mov	r2, r8
 8002602:	4639      	mov	r1, r7
 8002604:	4630      	mov	r0, r6
 8002606:	f00b f9c1 	bl	800d98c <f_findfirst>
				if(res == FR_OK)
 800260a:	b378      	cbz	r0, 800266c <getPresetNamesFromSDCard+0xd8>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 800260c:	3401      	adds	r4, #1
 800260e:	2c14      	cmp	r4, #20
 8002610:	d0c8      	beq.n	80025a4 <getPresetNamesFromSDCard+0x10>
				itoa(i, charBuf, 10);
 8002612:	220a      	movs	r2, #10
 8002614:	a902      	add	r1, sp, #8
 8002616:	4620      	mov	r0, r4
 8002618:	f012 fd26 	bl	8015068 <itoa>
				int len = ((strlen(charBuf)));
 800261c:	a802      	add	r0, sp, #8
 800261e:	f7fd fe5b 	bl	80002d8 <strlen>
					strcpy(finalString, charBuf);
 8002622:	a902      	add	r1, sp, #8
				if (len == 1)
 8002624:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8002626:	4603      	mov	r3, r0
					strcat(charBuf, ".ebp");
 8002628:	eb01 0c00 	add.w	ip, r1, r0
					strcpy(finalString, charBuf);
 800262c:	f100 0205 	add.w	r2, r0, #5
				if (len == 1)
 8002630:	d1da      	bne.n	80025e8 <getPresetNamesFromSDCard+0x54>
					finalString[2] = charBuf[1];
 8002632:	f89d 3009 	ldrb.w	r3, [sp, #9]
					strcat(finalString, ".ebp");
 8002636:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 8002638:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
 800263c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002640:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
 8002644:	2330      	movs	r3, #48	; 0x30
 8002646:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 800264a:	f7fd fe45 	bl	80002d8 <strlen>
 800264e:	aa05      	add	r2, sp, #20
 8002650:	4603      	mov	r3, r0
 8002652:	6828      	ldr	r0, [r5, #0]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8002654:	4639      	mov	r1, r7
					strcat(finalString, ".ebp");
 8002656:	50d0      	str	r0, [r2, r3]
 8002658:	4413      	add	r3, r2
 800265a:	792a      	ldrb	r2, [r5, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 800265c:	4630      	mov	r0, r6
					strcat(finalString, ".ebp");
 800265e:	711a      	strb	r2, [r3, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8002660:	ab05      	add	r3, sp, #20
 8002662:	4642      	mov	r2, r8
 8002664:	f00b f992 	bl	800d98c <f_findfirst>
				if(res == FR_OK)
 8002668:	2800      	cmp	r0, #0
 800266a:	d1cf      	bne.n	800260c <getPresetNamesFromSDCard+0x78>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 800266c:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800271c <getPresetNamesFromSDCard+0x188>
 8002670:	2211      	movs	r2, #17
 8002672:	4927      	ldr	r1, [pc, #156]	; (8002710 <getPresetNamesFromSDCard+0x17c>)
 8002674:	4650      	mov	r0, sl
 8002676:	f00a fc71 	bl	800cf5c <f_open>
 800267a:	2800      	cmp	r0, #0
 800267c:	d1c6      	bne.n	800260c <getPresetNamesFromSDCard+0x78>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 800267e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8002720 <getPresetNamesFromSDCard+0x18c>
 8002682:	ab01      	add	r3, sp, #4
 8002684:	f8da 200c 	ldr.w	r2, [sl, #12]
 8002688:	4650      	mov	r0, sl
 800268a:	4659      	mov	r1, fp
 800268c:	f00a fde4 	bl	800d258 <f_read>
						f_close(&SDFile);
 8002690:	4650      	mov	r0, sl
 8002692:	f00b f86f 	bl	800d774 <f_close>
							presetNamesArray[i][j] = buffer[j];
 8002696:	4a1f      	ldr	r2, [pc, #124]	; (8002714 <getPresetNamesFromSDCard+0x180>)
 8002698:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800269c:	f89b 1000 	ldrb.w	r1, [fp]
 80026a0:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
 80026a4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80026a8:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80026ac:	705a      	strb	r2, [r3, #1]
 80026ae:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80026b2:	709a      	strb	r2, [r3, #2]
 80026b4:	f89b 2003 	ldrb.w	r2, [fp, #3]
 80026b8:	70da      	strb	r2, [r3, #3]
 80026ba:	f89b 2004 	ldrb.w	r2, [fp, #4]
 80026be:	711a      	strb	r2, [r3, #4]
 80026c0:	f89b 2005 	ldrb.w	r2, [fp, #5]
 80026c4:	715a      	strb	r2, [r3, #5]
 80026c6:	f89b 2006 	ldrb.w	r2, [fp, #6]
 80026ca:	719a      	strb	r2, [r3, #6]
 80026cc:	f89b 2007 	ldrb.w	r2, [fp, #7]
 80026d0:	71da      	strb	r2, [r3, #7]
 80026d2:	f89b 2008 	ldrb.w	r2, [fp, #8]
 80026d6:	721a      	strb	r2, [r3, #8]
 80026d8:	f89b 2009 	ldrb.w	r2, [fp, #9]
 80026dc:	725a      	strb	r2, [r3, #9]
 80026de:	f89b 200a 	ldrb.w	r2, [fp, #10]
 80026e2:	729a      	strb	r2, [r3, #10]
 80026e4:	f89b 200b 	ldrb.w	r2, [fp, #11]
 80026e8:	72da      	strb	r2, [r3, #11]
 80026ea:	f89b 200c 	ldrb.w	r2, [fp, #12]
 80026ee:	731a      	strb	r2, [r3, #12]
 80026f0:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80026f4:	735a      	strb	r2, [r3, #13]
						for (int j = 0; j < 14; j++)
 80026f6:	e789      	b.n	800260c <getPresetNamesFromSDCard+0x78>
 80026f8:	20014778 	.word	0x20014778
 80026fc:	20018978 	.word	0x20018978
 8002700:	20018514 	.word	0x20018514
 8002704:	080172bc 	.word	0x080172bc
 8002708:	2001262c 	.word	0x2001262c
 800270c:	20010590 	.word	0x20010590
 8002710:	20012642 	.word	0x20012642
 8002714:	20015a30 	.word	0x20015a30
 8002718:	200105c8 	.word	0x200105c8
 800271c:	20018748 	.word	0x20018748
 8002720:	2000f584 	.word	0x2000f584

08002724 <SDRAM_init>:
{
 8002724:	b5d0      	push	{r4, r6, r7, lr}
	        __IO uint32_t tmpmrd = 0;
 8002726:	2300      	movs	r3, #0
{
 8002728:	b086      	sub	sp, #24
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800272a:	4c22      	ldr	r4, [pc, #136]	; (80027b4 <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800272c:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
 800272e:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002730:	2310      	movs	r3, #16
 8002732:	2601      	movs	r6, #1
 8002734:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8002736:	a902      	add	r1, sp, #8
 8002738:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800273a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800273e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002742:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8002746:	f006 f9a3 	bl	8008a90 <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
 800274a:	2064      	movs	r0, #100	; 0x64
 800274c:	f000 ff44 	bl	80035d8 <HAL_Delay>
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8002750:	a902      	add	r1, sp, #8
 8002752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002756:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002758:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800275c:	2602      	movs	r6, #2
 800275e:	2710      	movs	r7, #16
 8002760:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8002764:	f006 f994 	bl	8008a90 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002768:	2003      	movs	r0, #3
 800276a:	2110      	movs	r1, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800276c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002774:	2004      	movs	r0, #4
 8002776:	2100      	movs	r1, #0
 8002778:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800277c:	a902      	add	r1, sp, #8
 800277e:	4620      	mov	r0, r4
 8002780:	f006 f986 	bl	8008a90 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8002784:	f240 2032 	movw	r0, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002788:	2204      	movs	r2, #4
 800278a:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 800278c:	9001      	str	r0, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
 800278e:	2001      	movs	r0, #1
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8002790:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002792:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
 8002796:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8002798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 800279c:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80027a0:	4620      	mov	r0, r4
 80027a2:	f006 f975 	bl	8008a90 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
 80027a6:	f640 0106 	movw	r1, #2054	; 0x806
 80027aa:	4620      	mov	r0, r4
 80027ac:	f006 f990 	bl	8008ad0 <HAL_SDRAM_ProgramRefreshRate>
}
 80027b0:	b006      	add	sp, #24
 80027b2:	bdd0      	pop	{r4, r6, r7, pc}
 80027b4:	2000f4fc 	.word	0x2000f4fc

080027b8 <MPU_Conf>:
{
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	b084      	sub	sp, #16
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027bc:	2401      	movs	r4, #1
	  HAL_MPU_Disable();
 80027be:	f000 ffa1 	bl	8003704 <HAL_MPU_Disable>
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80027c2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80027c6:	4a22      	ldr	r2, [pc, #136]	; (8002850 <MPU_Conf+0x98>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027c8:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <MPU_Conf+0x9c>)
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027cc:	f240 1601 	movw	r6, #257	; 0x101
	  MPU_InitStruct.BaseAddress = 0x30000000;
 80027d0:	9101      	str	r1, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80027d2:	9202      	str	r2, [sp, #8]
 80027d4:	9303      	str	r3, [sp, #12]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027d6:	f8ad 4000 	strh.w	r4, [sp]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027da:	f000 ffb1 	bl	8003740 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x38000000;
 80027de:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80027e2:	4d1d      	ldr	r5, [pc, #116]	; (8002858 <MPU_Conf+0xa0>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027e4:	4668      	mov	r0, sp
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027e6:	f8ad 6000 	strh.w	r6, [sp]
	  MPU_InitStruct.BaseAddress = 0x38000000;
 80027ea:	9301      	str	r3, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <MPU_Conf+0xa4>)
 80027ee:	e9cd 3502 	strd	r3, r5, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027f2:	f000 ffa5 	bl	8003740 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0x38800000;
 80027f6:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027fa:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 80027fc:	9603      	str	r6, [sp, #12]
	  MPU_InitStruct.BaseAddress = 0x38800000;
 80027fe:	9301      	str	r3, [sp, #4]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002800:	f240 2301 	movw	r3, #513	; 0x201
 8002804:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_4KB;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MPU_Conf+0xa8>)
 800280a:	9302      	str	r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800280c:	f000 ff98 	bl	8003740 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002810:	f240 3301 	movw	r3, #769	; 0x301
	  MPU_InitStruct.BaseAddress = 0x24000000;
 8002814:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002818:	4668      	mov	r0, sp
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 800281a:	9503      	str	r5, [sp, #12]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800281c:	f8ad 3000 	strh.w	r3, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <MPU_Conf+0xac>)
	  MPU_InitStruct.BaseAddress = 0x24000000;
 8002822:	9201      	str	r2, [sp, #4]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002824:	9302      	str	r3, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002826:	f000 ff8b 	bl	8003740 <HAL_MPU_ConfigRegion>
	  MPU_InitStruct.BaseAddress = 0xc0000000;
 800282a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800282e:	f240 4201 	movw	r2, #1025	; 0x401
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <MPU_Conf+0xb0>)
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002834:	4668      	mov	r0, sp
	  MPU_InitStruct.BaseAddress = 0xc0000000;
 8002836:	9101      	str	r1, [sp, #4]
	  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002838:	f8ad 2000 	strh.w	r2, [sp]
	  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800283c:	e9cd 3402 	strd	r3, r4, [sp, #8]
	  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002840:	f000 ff7e 	bl	8003740 <HAL_MPU_ConfigRegion>
	  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002844:	2004      	movs	r0, #4
 8002846:	f000 ff6b 	bl	8003720 <HAL_MPU_Enable>
}
 800284a:	b004      	add	sp, #16
 800284c:	bd70      	pop	{r4, r5, r6, pc}
 800284e:	bf00      	nop
 8002850:	03000011 	.word	0x03000011
 8002854:	01000101 	.word	0x01000101
 8002858:	01010000 	.word	0x01010000
 800285c:	0301000f 	.word	0x0301000f
 8002860:	0300000b 	.word	0x0300000b
 8002864:	03010012 	.word	0x03010012
 8002868:	03000019 	.word	0x03000019

0800286c <main>:
{
 800286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002870:	ed2d 8b02 	vpush	{d8}
 8002874:	b089      	sub	sp, #36	; 0x24
	  MPU_Conf();
 8002876:	f7ff ff9f 	bl	80027b8 <MPU_Conf>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800287a:	4bc5      	ldr	r3, [pc, #788]	; (8002b90 <main+0x324>)
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8002882:	d111      	bne.n	80028a8 <main+0x3c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002884:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002888:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800288c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002894:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800289e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80028a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028a4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80028a8:	49b9      	ldr	r1, [pc, #740]	; (8002b90 <main+0x324>)
 80028aa:	694b      	ldr	r3, [r1, #20]
 80028ac:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80028b0:	d124      	bne.n	80028fc <main+0x90>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80028b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80028b6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80028ba:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80028be:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80028c2:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80028c6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80028ca:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80028cc:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80028d0:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80028d2:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80028d6:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80028d8:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	d1f8      	bne.n	80028d2 <main+0x66>
    } while(sets-- != 0U);
 80028e0:	3c20      	subs	r4, #32
 80028e2:	f114 0f20 	cmn.w	r4, #32
 80028e6:	d1f1      	bne.n	80028cc <main+0x60>
 80028e8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80028ec:	694b      	ldr	r3, [r1, #20]
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f2:	614b      	str	r3, [r1, #20]
 80028f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028f8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80028fc:	f000 fe2a 	bl	8003554 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8002900:	b662      	cpsie	i
  SystemClock_Config();
 8002902:	f7ff fd6d 	bl	80023e0 <SystemClock_Config>
  PeriphCommonClock_Config();
 8002906:	f7ff fe03 	bl	8002510 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800290a:	f7ff fb45 	bl	8001f98 <MX_GPIO_Init>
  MX_DMA_Init();
 800290e:	f7ff fa47 	bl	8001da0 <MX_DMA_Init>
  MX_FMC_Init();
 8002912:	f7ff fa81 	bl	8001e18 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8002916:	f000 fac5 	bl	8002ea4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800291a:	f007 ff39 	bl	800a790 <MX_FATFS_Init>
  MX_SAI1_Init();
 800291e:	f000 f9c9 	bl	8002cb4 <MX_SAI1_Init>
  MX_RNG_Init();
 8002922:	f000 f987 	bl	8002c34 <MX_RNG_Init>
  MX_SPI2_Init();
 8002926:	f000 fb57 	bl	8002fd8 <MX_SPI2_Init>
  MX_I2C2_Init();
 800292a:	f7ff fc2f 	bl	800218c <MX_I2C2_Init>
  MX_SPI1_Init();
 800292e:	f000 fb27 	bl	8002f80 <MX_SPI1_Init>
  MX_SPI5_Init();
 8002932:	f000 fb7d 	bl	8003030 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002936:	2200      	movs	r2, #0
 8002938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800293c:	4895      	ldr	r0, [pc, #596]	; (8002b94 <main+0x328>)
 800293e:	f002 f979 	bl	8004c34 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8002942:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 8002946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 800294a:	eee1 3a10 	vmsr	fpscr, r3

// helper function to initialize measuring unit (cycle counter) */
void CycleCounterInit( void )
{
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800294e:	4990      	ldr	r1, [pc, #576]	; (8002b90 <main+0x324>)

  /* Unlock DWT registers */
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8002950:	4a91      	ldr	r2, [pc, #580]	; (8002b98 <main+0x32c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002952:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8002956:	f8d2 0fb4 	ldr.w	r0, [r2, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295e:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8002962:	07c3      	lsls	r3, r0, #31
 8002964:	d502      	bpl.n	800296c <main+0x100>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8002966:	4b8d      	ldr	r3, [pc, #564]	; (8002b9c <main+0x330>)
 8002968:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0

  /* clear the cycle counter */
  DWT->CYCCNT = 0;
 800296c:	4b8a      	ldr	r3, [pc, #552]	; (8002b98 <main+0x32c>)
 800296e:	2500      	movs	r5, #0

  /* start the cycle counter */
  DWT->CTRL = 0x40000001;
 8002970:	4a8b      	ldr	r2, [pc, #556]	; (8002ba0 <main+0x334>)
	  buffer[i] = 0;
 8002972:	4c8c      	ldr	r4, [pc, #560]	; (8002ba4 <main+0x338>)
  DWT->CYCCNT = 0;
 8002974:	605d      	str	r5, [r3, #4]
  cStack_init(&midiStack);
 8002976:	488c      	ldr	r0, [pc, #560]	; (8002ba8 <main+0x33c>)
  DWT->CTRL = 0x40000001;
 8002978:	601a      	str	r2, [r3, #0]
  cStack_init(&midiStack);
 800297a:	f014 fc7d 	bl	8017278 <__cStack_init_veneer>
	  buffer[i] = 0;
 800297e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002982:	4629      	mov	r1, r5
 8002984:	4620      	mov	r0, r4
 8002986:	f012 fb99 	bl	80150bc <memset>
  buffer[NUM_PARAMS*2+19] = 1;
 800298a:	2201      	movs	r2, #1
  buffer[NUM_PARAMS*2+25] = 0xfe;
 800298c:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  buffer[15] = NUM_PARAMS;
 8002990:	219b      	movs	r1, #155	; 0x9b
  buffer[NUM_PARAMS*2+16] = 0xef;
 8002992:	f64e 70ef 	movw	r0, #61423	; 0xefef
  buffer[NUM_PARAMS*2+19] = 1;
 8002996:	f884 2149 	strb.w	r2, [r4, #329]	; 0x149
  buffer[NUM_PARAMS*2+25] = 0xfe;
 800299a:	f8a4 314f 	strh.w	r3, [r4, #335]	; 0x14f
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800299e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15] = NUM_PARAMS;
 80029a2:	73e1      	strb	r1, [r4, #15]
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80029a4:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+16] = 0xef;
 80029a8:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80029ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029b0:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8002bac <main+0x340>
 80029b4:	487e      	ldr	r0, [pc, #504]	; (8002bb0 <main+0x344>)
 80029b6:	f00d f9cf 	bl	800fd58 <LEAF_generate_table_skew_non_sym>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80029ba:	f8df a268 	ldr.w	sl, [pc, #616]	; 8002c24 <main+0x3b8>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 80029be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029c2:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8002bb4 <main+0x348>
 80029c6:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8002bb8 <main+0x34c>
 80029ca:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8002bbc <main+0x350>
 80029ce:	487c      	ldr	r0, [pc, #496]	; (8002bc0 <main+0x354>)
 80029d0:	f00d f9c2 	bl	800fd58 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 80029d4:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80029d8:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80029dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029e0:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8002bbc <main+0x350>
 80029e4:	4877      	ldr	r0, [pc, #476]	; (8002bc4 <main+0x358>)
 80029e6:	f00d f9b7 	bl	800fd58 <LEAF_generate_table_skew_non_sym>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80029ea:	4c77      	ldr	r4, [pc, #476]	; (8002bc8 <main+0x35c>)
  getPresetNamesFromSDCard();
 80029ec:	f7ff fdd2 	bl	8002594 <getPresetNamesFromSDCard>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80029f0:	f89a 0000 	ldrb.w	r0, [sl]
 80029f4:	f7ff fc54 	bl	80022a0 <checkForSDCardPreset>
 80029f8:	b2c3      	uxtb	r3, r0
 80029fa:	7023      	strb	r3, [r4, #0]
  SDRAM_init();
 80029fc:	f7ff fe92 	bl	8002724 <SDRAM_init>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8002a00:	4972      	ldr	r1, [pc, #456]	; (8002bcc <main+0x360>)
 8002a02:	4a73      	ldr	r2, [pc, #460]	; (8002bd0 <main+0x364>)
 8002a04:	4873      	ldr	r0, [pc, #460]	; (8002bd4 <main+0x368>)
 8002a06:	f7fd fc6f 	bl	80002e8 <audioInit>
  	if (foundOne == 0)
 8002a0a:	7823      	ldrb	r3, [r4, #0]
 8002a0c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f040 80b5 	bne.w	8002b80 <main+0x314>
	  parsePreset((NUM_PARAMS*2)+27, 0); //default preset binary
 8002a16:	f240 1051 	movw	r0, #337	; 0x151
 8002a1a:	4d6f      	ldr	r5, [pc, #444]	; (8002bd8 <main+0x36c>)
 8002a1c:	f014 fc40 	bl	80172a0 <__parsePreset_veneer>
    HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 24);
 8002a20:	2218      	movs	r2, #24
 8002a22:	496e      	ldr	r1, [pc, #440]	; (8002bdc <main+0x370>)
 8002a24:	486e      	ldr	r0, [pc, #440]	; (8002be0 <main+0x374>)
 8002a26:	f006 f99b 	bl	8008d60 <HAL_SPI_Receive_DMA>
    HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8002a2a:	2234      	movs	r2, #52	; 0x34
 8002a2c:	496d      	ldr	r1, [pc, #436]	; (8002be4 <main+0x378>)
 8002a2e:	486e      	ldr	r0, [pc, #440]	; (8002be8 <main+0x37c>)
 8002a30:	f006 f996 	bl	8008d60 <HAL_SPI_Receive_DMA>
    HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, 74);
 8002a34:	224a      	movs	r2, #74	; 0x4a
 8002a36:	496d      	ldr	r1, [pc, #436]	; (8002bec <main+0x380>)
 8002a38:	486d      	ldr	r0, [pc, #436]	; (8002bf0 <main+0x384>)
 8002a3a:	f006 f991 	bl	8008d60 <HAL_SPI_Receive_DMA>
  	presetReady = 1;
 8002a3e:	4b6d      	ldr	r3, [pc, #436]	; (8002bf4 <main+0x388>)
 8002a40:	2201      	movs	r2, #1
	  if (rand > TWO_TO_31)
 8002a42:	eddf 8a6d 	vldr	s17, [pc, #436]	; 8002bf8 <main+0x38c>
 8002a46:	4f6d      	ldr	r7, [pc, #436]	; (8002bfc <main+0x390>)
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8002a48:	ed9f 8a6d 	vldr	s16, [pc, #436]	; 8002c00 <main+0x394>
 8002a4c:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8002c28 <main+0x3bc>
 8002a50:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8002c2c <main+0x3c0>
 8002a54:	4c6b      	ldr	r4, [pc, #428]	; (8002c04 <main+0x398>)
 8002a56:	4e6c      	ldr	r6, [pc, #432]	; (8002c08 <main+0x39c>)
  	presetReady = 1;
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e02b      	b.n	8002ab4 <main+0x248>
	  if (presetWaitingToParse > 0)
 8002a5c:	6828      	ldr	r0, [r5, #0]
 8002a5e:	bb98      	cbnz	r0, 8002ac8 <main+0x25c>
	  else if (presetWaitingToWrite > 0)
 8002a60:	f8d9 b000 	ldr.w	fp, [r9]
 8002a64:	f1bb 0f00 	cmp.w	fp, #0
 8002a68:	d133      	bne.n	8002ad2 <main+0x266>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8002a6a:	a905      	add	r1, sp, #20
 8002a6c:	4867      	ldr	r0, [pc, #412]	; (8002c0c <main+0x3a0>)
 8002a6e:	f004 fcd5 	bl	800741c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 8002a72:	eddd 7a05 	vldr	s15, [sp, #20]
 8002a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8002a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a82:	dd0c      	ble.n	8002a9e <main+0x232>
		  myTestInt++;
 8002a84:	f8d8 3000 	ldr.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	4842      	ldr	r0, [pc, #264]	; (8002b94 <main+0x328>)
		  myTestInt++;
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f8c8 3000 	str.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8002a92:	f002 f8d3 	bl	8004c3c <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 8002a96:	eddd 7a05 	vldr	s15, [sp, #20]
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8002a9e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002aa2:	7823      	ldrb	r3, [r4, #0]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8002aaa:	eea7 7a88 	vfma.f32	s14, s15, s16
 8002aae:	7022      	strb	r2, [r4, #0]
 8002ab0:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0d0      	beq.n	8002a5c <main+0x1f0>
		  checkForSDCardPreset(presetNumberToLoad);
 8002aba:	f89a 0000 	ldrb.w	r0, [sl]
 8002abe:	f7ff fbef 	bl	80022a0 <checkForSDCardPreset>
	  if (presetWaitingToParse > 0)
 8002ac2:	6828      	ldr	r0, [r5, #0]
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d0cb      	beq.n	8002a60 <main+0x1f4>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8002ac8:	f89a 1000 	ldrb.w	r1, [sl]
 8002acc:	f014 fbe8 	bl	80172a0 <__parsePreset_veneer>
 8002ad0:	e7cb      	b.n	8002a6a <main+0x1fe>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad2:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 8002ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad8:	4601      	mov	r1, r0
 8002ada:	484d      	ldr	r0, [pc, #308]	; (8002c10 <main+0x3a4>)
 8002adc:	f012 faee 	bl	80150bc <memset>
	if(BSP_SD_IsDetected())
 8002ae0:	f007 fe9a 	bl	800a818 <BSP_SD_IsDetected>
 8002ae4:	b320      	cbz	r0, 8002b30 <main+0x2c4>
				diskBusy = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4a4a      	ldr	r2, [pc, #296]	; (8002c14 <main+0x3a8>)
 8002aea:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <main+0x3ac>)
 8002aee:	7818      	ldrb	r0, [r3, #0]
 8002af0:	2863      	cmp	r0, #99	; 0x63
 8002af2:	d901      	bls.n	8002af8 <main+0x28c>
			        presetNumberToSave = 99;
 8002af4:	2063      	movs	r0, #99	; 0x63
 8002af6:	7018      	strb	r0, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
 8002af8:	220a      	movs	r2, #10
 8002afa:	a902      	add	r1, sp, #8
 8002afc:	f012 fab4 	bl	8015068 <itoa>
				int len = ((strlen(charBuf)));
 8002b00:	a802      	add	r0, sp, #8
 8002b02:	f7fd fbe9 	bl	80002d8 <strlen>
				if (len == 1)
 8002b06:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8002b08:	4602      	mov	r2, r0
				if (len == 1)
 8002b0a:	d018      	beq.n	8002b3e <main+0x2d2>
					strcat(charBuf, ".ebp");
 8002b0c:	4943      	ldr	r1, [pc, #268]	; (8002c1c <main+0x3b0>)
 8002b0e:	ab02      	add	r3, sp, #8
 8002b10:	6808      	ldr	r0, [r1, #0]
 8002b12:	7909      	ldrb	r1, [r1, #4]
 8002b14:	5098      	str	r0, [r3, r2]
 8002b16:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 8002b18:	a805      	add	r0, sp, #20
 8002b1a:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8002b1c:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 8002b1e:	a902      	add	r1, sp, #8
 8002b20:	f012 faa4 	bl	801506c <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8002b24:	220a      	movs	r2, #10
 8002b26:	a905      	add	r1, sp, #20
 8002b28:	483d      	ldr	r0, [pc, #244]	; (8002c20 <main+0x3b4>)
 8002b2a:	f00a fa17 	bl	800cf5c <f_open>
 8002b2e:	b1e8      	cbz	r0, 8002b6c <main+0x300>
	presetWaitingToWrite = 0;
 8002b30:	2300      	movs	r3, #0
	diskBusy = 0;
 8002b32:	4a38      	ldr	r2, [pc, #224]	; (8002c14 <main+0x3a8>)
	presetWaitingToWrite = 0;
 8002b34:	f8c9 3000 	str.w	r3, [r9]
	diskBusy = 0;
 8002b38:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b3a:	b662      	cpsie	i
}
 8002b3c:	e795      	b.n	8002a6a <main+0x1fe>
					finalString[2] = charBuf[1];
 8002b3e:	f89d 3009 	ldrb.w	r3, [sp, #9]
					strcat(finalString, ".ebp");
 8002b42:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 8002b44:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
 8002b48:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002b4c:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
 8002b50:	2330      	movs	r3, #48	; 0x30
 8002b52:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 8002b56:	f7fd fbbf 	bl	80002d8 <strlen>
 8002b5a:	4a30      	ldr	r2, [pc, #192]	; (8002c1c <main+0x3b0>)
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	a905      	add	r1, sp, #20
 8002b60:	6810      	ldr	r0, [r2, #0]
 8002b62:	7912      	ldrb	r2, [r2, #4]
 8002b64:	50c8      	str	r0, [r1, r3]
 8002b66:	440b      	add	r3, r1
 8002b68:	711a      	strb	r2, [r3, #4]
 8002b6a:	e7db      	b.n	8002b24 <main+0x2b8>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 8002b6c:	465a      	mov	r2, fp
 8002b6e:	ab01      	add	r3, sp, #4
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <main+0x338>)
 8002b72:	482b      	ldr	r0, [pc, #172]	; (8002c20 <main+0x3b4>)
 8002b74:	f00a fca8 	bl	800d4c8 <f_write>
					f_close(&SDFile);
 8002b78:	4829      	ldr	r0, [pc, #164]	; (8002c20 <main+0x3b4>)
 8002b7a:	f00a fdfb 	bl	800d774 <f_close>
 8002b7e:	e7d7      	b.n	8002b30 <main+0x2c4>
	  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8002b80:	4d15      	ldr	r5, [pc, #84]	; (8002bd8 <main+0x36c>)
 8002b82:	f89a 1000 	ldrb.w	r1, [sl]
 8002b86:	6828      	ldr	r0, [r5, #0]
 8002b88:	f014 fb8a 	bl	80172a0 <__parsePreset_veneer>
 8002b8c:	e748      	b.n	8002a20 <main+0x1b4>
 8002b8e:	bf00      	nop
 8002b90:	e000ed00 	.word	0xe000ed00
 8002b94:	58020800 	.word	0x58020800
 8002b98:	e0001000 	.word	0xe0001000
 8002b9c:	c5acce55 	.word	0xc5acce55
 8002ba0:	40000001 	.word	0x40000001
 8002ba4:	2000f584 	.word	0x2000f584
 8002ba8:	2000051c 	.word	0x2000051c
 8002bac:	3c23d70a 	.word	0x3c23d70a
 8002bb0:	20015f58 	.word	0x20015f58
 8002bb4:	457a0000 	.word	0x457a0000
 8002bb8:	469c4000 	.word	0x469c4000
 8002bbc:	00000000 	.word	0x00000000
 8002bc0:	2001061c 	.word	0x2001061c
 8002bc4:	20012748 	.word	0x20012748
 8002bc8:	20012744 	.word	0x20012744
 8002bcc:	20018060 	.word	0x20018060
 8002bd0:	200180f8 	.word	0x200180f8
 8002bd4:	2000f530 	.word	0x2000f530
 8002bd8:	20015b50 	.word	0x20015b50
 8002bdc:	30004200 	.word	0x30004200
 8002be0:	20018400 	.word	0x20018400
 8002be4:	30004220 	.word	0x30004220
 8002be8:	20018488 	.word	0x20018488
 8002bec:	30004260 	.word	0x30004260
 8002bf0:	20018378 	.word	0x20018378
 8002bf4:	200006f0 	.word	0x200006f0
 8002bf8:	4f000000 	.word	0x4f000000
 8002bfc:	20015b4c 	.word	0x20015b4c
 8002c00:	3000000d 	.word	0x3000000d
 8002c04:	2001058c 	.word	0x2001058c
 8002c08:	20015b58 	.word	0x20015b58
 8002c0c:	20017f58 	.word	0x20017f58
 8002c10:	30000000 	.word	0x30000000
 8002c14:	200105c8 	.word	0x200105c8
 8002c18:	20015b49 	.word	0x20015b49
 8002c1c:	080172bc 	.word	0x080172bc
 8002c20:	20018748 	.word	0x20018748
 8002c24:	20015b48 	.word	0x20015b48
 8002c28:	20015b54 	.word	0x20015b54
 8002c2c:	20014dfc 	.word	0x20014dfc

08002c30 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop

08002c34 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002c34:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002c36:	4806      	ldr	r0, [pc, #24]	; (8002c50 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <MX_RNG_Init+0x20>)
 8002c3c:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002c40:	f004 fbae 	bl	80073a0 <HAL_RNG_Init>
 8002c44:	b900      	cbnz	r0, 8002c48 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002c46:	bd08      	pop	{r3, pc}
 8002c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002c4c:	f7ff bff0 	b.w	8002c30 <Error_Handler>
 8002c50:	20017f58 	.word	0x20017f58
 8002c54:	48021800 	.word	0x48021800

08002c58 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002c58:	b510      	push	{r4, lr}
 8002c5a:	b0b2      	sub	sp, #200	; 0xc8
 8002c5c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c5e:	22c0      	movs	r2, #192	; 0xc0
 8002c60:	2100      	movs	r1, #0
 8002c62:	a802      	add	r0, sp, #8
 8002c64:	f012 fa2a 	bl	80150bc <memset>
  if(rngHandle->Instance==RNG)
 8002c68:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_RNG_MspInit+0x54>)
 8002c6a:	6822      	ldr	r2, [r4, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002c70:	b032      	add	sp, #200	; 0xc8
 8002c72:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002c74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c78:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c7a:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c80:	f003 f9c6 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 8002c84:	b970      	cbnz	r0, 8002ca4 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_RNG_MspInit+0x58>)
 8002c88:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8002c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c90:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002c94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	9b01      	ldr	r3, [sp, #4]
}
 8002ca0:	b032      	add	sp, #200	; 0xc8
 8002ca2:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002ca4:	f7ff ffc4 	bl	8002c30 <Error_Handler>
 8002ca8:	e7ed      	b.n	8002c86 <HAL_RNG_MspInit+0x2e>
 8002caa:	bf00      	nop
 8002cac:	48021800 	.word	0x48021800
 8002cb0:	58024400 	.word	0x58024400

08002cb4 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002cb4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002cb6:	4818      	ldr	r0, [pc, #96]	; (8002d18 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002cb8:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002cba:	4c18      	ldr	r4, [pc, #96]	; (8002d1c <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002cbc:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002cbe:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002cc0:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002cc2:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002cc4:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002cc6:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002cc8:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002cca:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002cce:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002cd2:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002cd6:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002cd8:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002cdc:	f004 fd9c 	bl	8007818 <HAL_SAI_InitProtocol>
 8002ce0:	b998      	cbnz	r0, 8002d0a <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8002ce2:	480f      	ldr	r0, [pc, #60]	; (8002d20 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002ce4:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002ce6:	4c0f      	ldr	r4, [pc, #60]	; (8002d24 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002ce8:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002cea:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002cec:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002cee:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002cf0:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002cf2:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002cf4:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002cf6:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002cf8:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002cfa:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002cfc:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002cfe:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002d02:	f004 fd89 	bl	8007818 <HAL_SAI_InitProtocol>
 8002d06:	b918      	cbnz	r0, 8002d10 <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002d08:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002d0a:	f7ff ff91 	bl	8002c30 <Error_Handler>
 8002d0e:	e7e8      	b.n	8002ce2 <MX_SAI1_Init+0x2e>
}
 8002d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002d14:	f7ff bf8c 	b.w	8002c30 <Error_Handler>
 8002d18:	20018060 	.word	0x20018060
 8002d1c:	40015804 	.word	0x40015804
 8002d20:	200180f8 	.word	0x200180f8
 8002d24:	40015824 	.word	0x40015824

08002d28 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002d28:	4a55      	ldr	r2, [pc, #340]	; (8002e80 <HAL_SAI_MspInit+0x158>)
 8002d2a:	6803      	ldr	r3, [r0, #0]
 8002d2c:	4293      	cmp	r3, r2
{
 8002d2e:	b530      	push	{r4, r5, lr}
 8002d30:	4604      	mov	r4, r0
 8002d32:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 8002d34:	d004      	beq.n	8002d40 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002d36:	4a53      	ldr	r2, [pc, #332]	; (8002e84 <HAL_SAI_MspInit+0x15c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d041      	beq.n	8002dc0 <HAL_SAI_MspInit+0x98>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8002d3c:	b009      	add	sp, #36	; 0x24
 8002d3e:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 8002d40:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <HAL_SAI_MspInit+0x160>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2a00      	cmp	r2, #0
 8002d46:	f000 8083 	beq.w	8002e50 <HAL_SAI_MspInit+0x128>
    SAI1_client ++;
 8002d4a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002d4c:	2074      	movs	r0, #116	; 0x74
 8002d4e:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002d50:	4d4e      	ldr	r5, [pc, #312]	; (8002e8c <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 8002d52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d54:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002d56:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8002e78 <HAL_SAI_MspInit+0x150>
 8002d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d5e:	a902      	add	r1, sp, #8
 8002d60:	484b      	ldr	r0, [pc, #300]	; (8002e90 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002d62:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002d64:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d68:	f001 fe24 	bl	80049b4 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002d6c:	4949      	ldr	r1, [pc, #292]	; (8002e94 <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002d6e:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d70:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002d72:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d74:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002d76:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002d78:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d80:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002d82:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002d86:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d90:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d92:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d96:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d9e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002da2:	2304      	movs	r3, #4
 8002da4:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002da6:	f000 fde3 	bl	8003970 <HAL_DMA_Init>
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d15e      	bne.n	8002e6c <HAL_SAI_MspInit+0x144>
    if(saiHandle->Instance==SAI1_Block_B)
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002db2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(saiHandle->Instance==SAI1_Block_B)
 8002db6:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002db8:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002dba:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 8002dbe:	d1bd      	bne.n	8002d3c <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 8002dc0:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <HAL_SAI_MspInit+0x160>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	b3b2      	cbz	r2, 8002e34 <HAL_SAI_MspInit+0x10c>
    SAI1_client ++;
 8002dc6:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dc8:	2008      	movs	r0, #8
 8002dca:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002dcc:	4d32      	ldr	r5, [pc, #200]	; (8002e98 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 8002dce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002dd0:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dd2:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8002e78 <HAL_SAI_MspInit+0x150>
 8002dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dda:	a902      	add	r1, sp, #8
 8002ddc:	482c      	ldr	r0, [pc, #176]	; (8002e90 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002dde:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002de0:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002de4:	f001 fde6 	bl	80049b4 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002de8:	492c      	ldr	r1, [pc, #176]	; (8002e9c <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002dea:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dec:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002dee:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002df0:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002df2:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002dfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002dfe:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002e02:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e0a:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8002e0e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002e12:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e16:	2304      	movs	r3, #4
 8002e18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e1c:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8002e20:	f000 fda6 	bl	8003970 <HAL_DMA_Init>
 8002e24:	bb28      	cbnz	r0, 8002e72 <HAL_SAI_MspInit+0x14a>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8002e26:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8002e2a:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8002e2c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8002e30:	b009      	add	sp, #36	; 0x24
 8002e32:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e34:	491a      	ldr	r1, [pc, #104]	; (8002ea0 <HAL_SAI_MspInit+0x178>)
 8002e36:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8002e3a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002e3e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8002e42:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8002e46:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002e4a:	9101      	str	r1, [sp, #4]
 8002e4c:	9901      	ldr	r1, [sp, #4]
 8002e4e:	e7ba      	b.n	8002dc6 <HAL_SAI_MspInit+0x9e>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002e50:	4913      	ldr	r1, [pc, #76]	; (8002ea0 <HAL_SAI_MspInit+0x178>)
 8002e52:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8002e56:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8002e5a:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8002e5e:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8002e62:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002e66:	9100      	str	r1, [sp, #0]
 8002e68:	9900      	ldr	r1, [sp, #0]
 8002e6a:	e76e      	b.n	8002d4a <HAL_SAI_MspInit+0x22>
      Error_Handler();
 8002e6c:	f7ff fee0 	bl	8002c30 <Error_Handler>
 8002e70:	e79d      	b.n	8002dae <HAL_SAI_MspInit+0x86>
      Error_Handler();
 8002e72:	f7ff fedd 	bl	8002c30 <Error_Handler>
 8002e76:	e7d6      	b.n	8002e26 <HAL_SAI_MspInit+0xfe>
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	00000003 	.word	0x00000003
 8002e80:	40015804 	.word	0x40015804
 8002e84:	40015824 	.word	0x40015824
 8002e88:	20017f6c 	.word	0x20017f6c
 8002e8c:	20017f70 	.word	0x20017f70
 8002e90:	58021000 	.word	0x58021000
 8002e94:	40020028 	.word	0x40020028
 8002e98:	20017fe8 	.word	0x20017fe8
 8002e9c:	40020040 	.word	0x40020040
 8002ea0:	58024400 	.word	0x58024400

08002ea4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002ea4:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002ea8:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 8002eaa:	4c07      	ldr	r4, [pc, #28]	; (8002ec8 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002eac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 16;
 8002eb0:	2110      	movs	r1, #16
  hsd1.Instance = SDMMC1;
 8002eb2:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002eb6:	e9c3 2002 	strd	r2, r0, [r3, #8]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002eba:	f85d 4b04 	ldr.w	r4, [sp], #4
  hsd1.Init.ClockDiv = 16;
 8002ebe:	e9c3 2104 	strd	r2, r1, [r3, #16]
}
 8002ec2:	4770      	bx	lr
 8002ec4:	20018190 	.word	0x20018190
 8002ec8:	52007000 	.word	0x52007000

08002ecc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <HAL_SD_MspInit+0xa0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ece:	2300      	movs	r3, #0
  if(sdHandle->Instance==SDMMC1)
 8002ed0:	6801      	ldr	r1, [r0, #0]
{
 8002ed2:	b5d0      	push	{r4, r6, r7, lr}
  if(sdHandle->Instance==SDMMC1)
 8002ed4:	4291      	cmp	r1, r2
{
 8002ed6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002edc:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002ee0:	9308      	str	r3, [sp, #32]
  if(sdHandle->Instance==SDMMC1)
 8002ee2:	d001      	beq.n	8002ee8 <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002ee4:	b00a      	add	sp, #40	; 0x28
 8002ee6:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002ee8:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002eea:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
 8002eee:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002ef0:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002ef2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002ef6:	2601      	movs	r6, #1
 8002ef8:	2701      	movs	r7, #1
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002efa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002efe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002f02:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002f06:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002f0a:	9201      	str	r2, [sp, #4]
 8002f0c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f12:	f042 0204 	orr.w	r2, r2, #4
 8002f16:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002f1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f1e:	f002 0204 	and.w	r2, r2, #4
 8002f22:	9202      	str	r2, [sp, #8]
 8002f24:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f26:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002f2a:	f042 0208 	orr.w	r2, r2, #8
 8002f2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002f36:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f38:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f40:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f42:	a904      	add	r1, sp, #16
 8002f44:	480b      	ldr	r0, [pc, #44]	; (8002f74 <HAL_SD_MspInit+0xa8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f46:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f48:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f4c:	f001 fd32 	bl	80049b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f50:	2204      	movs	r2, #4
 8002f52:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f54:	a904      	add	r1, sp, #16
 8002f56:	4808      	ldr	r0, [pc, #32]	; (8002f78 <HAL_SD_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002f58:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002f5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f62:	f001 fd27 	bl	80049b4 <HAL_GPIO_Init>
}
 8002f66:	b00a      	add	sp, #40	; 0x28
 8002f68:	bdd0      	pop	{r4, r6, r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	52007000 	.word	0x52007000
 8002f70:	58024400 	.word	0x58024400
 8002f74:	58020800 	.word	0x58020800
 8002f78:	58020c00 	.word	0x58020c00
 8002f7c:	00000000 	.word	0x00000000

08002f80 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f80:	4813      	ldr	r0, [pc, #76]	; (8002fd0 <MX_SPI1_Init+0x50>)
 8002f82:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f84:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002fc8 <MX_SPI1_Init+0x48>
{
 8002f88:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002f8a:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8002f8c:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f8e:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002f90:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f92:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f94:	ed80 7b08 	vstr	d7, [r0, #32]
 8002f98:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fa0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002fa4:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002fa8:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002fac:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002fb0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002fb4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fb8:	f005 fdfe 	bl	8008bb8 <HAL_SPI_Init>
 8002fbc:	b900      	cbnz	r0, 8002fc0 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fbe:	bd08      	pop	{r3, pc}
 8002fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002fc4:	f7ff be34 	b.w	8002c30 <Error_Handler>
	...
 8002fd0:	20018378 	.word	0x20018378
 8002fd4:	40013000 	.word	0x40013000

08002fd8 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002fd8:	4813      	ldr	r0, [pc, #76]	; (8003028 <MX_SPI2_Init+0x50>)
 8002fda:	4a14      	ldr	r2, [pc, #80]	; (800302c <MX_SPI2_Init+0x54>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fdc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8003020 <MX_SPI2_Init+0x48>
{
 8002fe0:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8002fe2:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 8002fe4:	6002      	str	r2, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fe6:	2207      	movs	r2, #7
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8002fe8:	6183      	str	r3, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fea:	60c2      	str	r2, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fec:	ed80 7b08 	vstr	d7, [r0, #32]
 8002ff0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ff4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ff8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ffc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003000:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003004:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003008:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800300c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003010:	f005 fdd2 	bl	8008bb8 <HAL_SPI_Init>
 8003014:	b900      	cbnz	r0, 8003018 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003016:	bd08      	pop	{r3, pc}
 8003018:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800301c:	f7ff be08 	b.w	8002c30 <Error_Handler>
	...
 8003028:	20018400 	.word	0x20018400
 800302c:	40003800 	.word	0x40003800

08003030 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003030:	4813      	ldr	r0, [pc, #76]	; (8003080 <MX_SPI5_Init+0x50>)
 8003032:	4a14      	ldr	r2, [pc, #80]	; (8003084 <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003034:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8003078 <MX_SPI5_Init+0x48>
{
 8003038:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800303a:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 800303c:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800303e:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8003040:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003042:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003044:	ed80 7b08 	vstr	d7, [r0, #32]
 8003048:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800304c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003050:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003054:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003058:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800305c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003060:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003064:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003068:	f005 fda6 	bl	8008bb8 <HAL_SPI_Init>
 800306c:	b900      	cbnz	r0, 8003070 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800306e:	bd08      	pop	{r3, pc}
 8003070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003074:	f7ff bddc 	b.w	8002c30 <Error_Handler>
	...
 8003080:	20018488 	.word	0x20018488
 8003084:	40015000 	.word	0x40015000

08003088 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003088:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308a:	2400      	movs	r4, #0
{
 800308c:	b0bc      	sub	sp, #240	; 0xf0
 800308e:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003090:	22c0      	movs	r2, #192	; 0xc0
 8003092:	4621      	mov	r1, r4
 8003094:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003096:	940a      	str	r4, [sp, #40]	; 0x28
 8003098:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800309c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a0:	f012 f80c 	bl	80150bc <memset>
  if(spiHandle->Instance==SPI1)
 80030a4:	682b      	ldr	r3, [r5, #0]
 80030a6:	4a99      	ldr	r2, [pc, #612]	; (800330c <HAL_SPI_MspInit+0x284>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d008      	beq.n	80030be <HAL_SPI_MspInit+0x36>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 80030ac:	4a98      	ldr	r2, [pc, #608]	; (8003310 <HAL_SPI_MspInit+0x288>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d061      	beq.n	8003176 <HAL_SPI_MspInit+0xee>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 80030b2:	4a98      	ldr	r2, [pc, #608]	; (8003314 <HAL_SPI_MspInit+0x28c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	f000 80bb 	beq.w	8003230 <HAL_SPI_MspInit+0x1a8>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80030ba:	b03c      	add	sp, #240	; 0xf0
 80030bc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030be:	4b96      	ldr	r3, [pc, #600]	; (8003318 <HAL_SPI_MspInit+0x290>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c0:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030c2:	4896      	ldr	r0, [pc, #600]	; (800331c <HAL_SPI_MspInit+0x294>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80030c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030cc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80030d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80030d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80030d8:	9200      	str	r2, [sp, #0]
 80030da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80030e0:	f042 0201 	orr.w	r2, r2, #1
 80030e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80030e8:	22b0      	movs	r2, #176	; 0xb0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80030f4:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80030fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fe:	2303      	movs	r3, #3
 8003100:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003104:	f001 fc56 	bl	80049b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003108:	2240      	movs	r2, #64	; 0x40
 800310a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310c:	4883      	ldr	r0, [pc, #524]	; (800331c <HAL_SPI_MspInit+0x294>)
 800310e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003110:	960a      	str	r6, [sp, #40]	; 0x28
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8003112:	4e83      	ldr	r6, [pc, #524]	; (8003320 <HAL_SPI_MspInit+0x298>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003114:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003118:	2200      	movs	r2, #0
 800311a:	2302      	movs	r3, #2
 800311c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f001 fc48 	bl	80049b4 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8003124:	4a7f      	ldr	r2, [pc, #508]	; (8003324 <HAL_SPI_MspInit+0x29c>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003126:	2325      	movs	r3, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003128:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800312a:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800312e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8003132:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003136:	6132      	str	r2, [r6, #16]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003138:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800313c:	61f3      	str	r3, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800313e:	2304      	movs	r3, #4
 8003140:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003144:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003146:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800314a:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800314e:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003152:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003154:	f000 fc0c 	bl	8003970 <HAL_DMA_Init>
 8003158:	2800      	cmp	r0, #0
 800315a:	f040 80cb 	bne.w	80032f4 <HAL_SPI_MspInit+0x26c>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800315e:	2200      	movs	r2, #0
 8003160:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003162:	67ee      	str	r6, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003164:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003166:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003168:	f000 fa6a 	bl	8003640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800316c:	2023      	movs	r0, #35	; 0x23
 800316e:	f000 faa5 	bl	80036bc <HAL_NVIC_EnableIRQ>
}
 8003172:	b03c      	add	sp, #240	; 0xf0
 8003174:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003176:	4b68      	ldr	r3, [pc, #416]	; (8003318 <HAL_SPI_MspInit+0x290>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003178:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317a:	486b      	ldr	r0, [pc, #428]	; (8003328 <HAL_SPI_MspInit+0x2a0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800317c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003184:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003188:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800318c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003190:	9202      	str	r2, [sp, #8]
 8003192:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003194:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003198:	f042 0202 	orr.w	r2, r2, #2
 800319c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80031a0:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80031ae:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b0:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b2:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80031b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031be:	f001 fbf9 	bl	80049b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031c6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c8:	4857      	ldr	r0, [pc, #348]	; (8003328 <HAL_SPI_MspInit+0x2a0>)
 80031ca:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031cc:	960a      	str	r6, [sp, #40]	; 0x28
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80031ce:	4e57      	ldr	r6, [pc, #348]	; (800332c <HAL_SPI_MspInit+0x2a4>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2302      	movs	r3, #2
 80031d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031dc:	f001 fbea 	bl	80049b4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80031e0:	4a53      	ldr	r2, [pc, #332]	; (8003330 <HAL_SPI_MspInit+0x2a8>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80031e2:	2327      	movs	r3, #39	; 0x27
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80031e4:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80031e6:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80031ee:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031f2:	6132      	str	r2, [r6, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80031f8:	61f3      	str	r3, [r6, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80031fa:	2304      	movs	r3, #4
 80031fc:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003200:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003202:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003206:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800320a:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800320e:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003210:	f000 fbae 	bl	8003970 <HAL_DMA_Init>
 8003214:	2800      	cmp	r0, #0
 8003216:	d170      	bne.n	80032fa <HAL_SPI_MspInit+0x272>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003218:	2200      	movs	r2, #0
 800321a:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800321c:	67ee      	str	r6, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800321e:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8003220:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8003222:	f000 fa0d 	bl	8003640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003226:	2024      	movs	r0, #36	; 0x24
 8003228:	f000 fa48 	bl	80036bc <HAL_NVIC_EnableIRQ>
}
 800322c:	b03c      	add	sp, #240	; 0xf0
 800322e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003230:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003234:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003236:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8003238:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800323c:	f002 fee8 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 8003240:	2800      	cmp	r0, #0
 8003242:	d160      	bne.n	8003306 <HAL_SPI_MspInit+0x27e>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003244:	4b34      	ldr	r3, [pc, #208]	; (8003318 <HAL_SPI_MspInit+0x290>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003246:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003248:	483a      	ldr	r0, [pc, #232]	; (8003334 <HAL_SPI_MspInit+0x2ac>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 800324a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800324e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003252:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003256:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800325a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800325e:	9204      	str	r2, [sp, #16]
 8003260:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003262:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003266:	f042 0220 	orr.w	r2, r2, #32
 800326a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800326e:	f44f 7230 	mov.w	r2, #704	; 0x2c0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003276:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800327e:	2302      	movs	r3, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003280:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003282:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8003284:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003288:	2200      	movs	r2, #0
 800328a:	2302      	movs	r3, #2
 800328c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003290:	f001 fb90 	bl	80049b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003298:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800329a:	a906      	add	r1, sp, #24
 800329c:	4825      	ldr	r0, [pc, #148]	; (8003334 <HAL_SPI_MspInit+0x2ac>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800329e:	940a      	str	r4, [sp, #40]	; 0x28
    hdma_spi5_rx.Instance = DMA1_Stream3;
 80032a0:	4c25      	ldr	r4, [pc, #148]	; (8003338 <HAL_SPI_MspInit+0x2b0>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80032a6:	2200      	movs	r2, #0
 80032a8:	2300      	movs	r3, #0
 80032aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032ae:	f001 fb81 	bl	80049b4 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 80032b2:	4922      	ldr	r1, [pc, #136]	; (800333c <HAL_SPI_MspInit+0x2b4>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80032b4:	2255      	movs	r2, #85	; 0x55
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032b6:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80032b8:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032ba:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80032bc:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032c8:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032cc:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032d0:	6121      	str	r1, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032d2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80032d6:	f000 fb4b 	bl	8003970 <HAL_DMA_Init>
 80032da:	b988      	cbnz	r0, 8003300 <HAL_SPI_MspInit+0x278>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80032dc:	2200      	movs	r2, #0
 80032de:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 80032e0:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80032e2:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 80032e4:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80032e6:	f000 f9ab 	bl	8003640 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80032ea:	2055      	movs	r0, #85	; 0x55
 80032ec:	f000 f9e6 	bl	80036bc <HAL_NVIC_EnableIRQ>
}
 80032f0:	b03c      	add	sp, #240	; 0xf0
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80032f4:	f7ff fc9c 	bl	8002c30 <Error_Handler>
 80032f8:	e731      	b.n	800315e <HAL_SPI_MspInit+0xd6>
      Error_Handler();
 80032fa:	f7ff fc99 	bl	8002c30 <Error_Handler>
 80032fe:	e78b      	b.n	8003218 <HAL_SPI_MspInit+0x190>
      Error_Handler();
 8003300:	f7ff fc96 	bl	8002c30 <Error_Handler>
 8003304:	e7ea      	b.n	80032dc <HAL_SPI_MspInit+0x254>
      Error_Handler();
 8003306:	f7ff fc93 	bl	8002c30 <Error_Handler>
 800330a:	e79b      	b.n	8003244 <HAL_SPI_MspInit+0x1bc>
 800330c:	40013000 	.word	0x40013000
 8003310:	40003800 	.word	0x40003800
 8003314:	40015000 	.word	0x40015000
 8003318:	58024400 	.word	0x58024400
 800331c:	58020000 	.word	0x58020000
 8003320:	2001820c 	.word	0x2001820c
 8003324:	40020070 	.word	0x40020070
 8003328:	58020400 	.word	0x58020400
 800332c:	20018284 	.word	0x20018284
 8003330:	40020010 	.word	0x40020010
 8003334:	58021400 	.word	0x58021400
 8003338:	200182fc 	.word	0x200182fc
 800333c:	40020058 	.word	0x40020058

08003340 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <HAL_MspInit+0x20>)
{
 8003342:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003344:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003348:	f042 0202 	orr.w	r2, r2, #2
 800334c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800335c:	b002      	add	sp, #8
 800335e:	4770      	bx	lr
 8003360:	58024400 	.word	0x58024400

08003364 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <NMI_Handler>
 8003366:	bf00      	nop

08003368 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003368:	e7fe      	b.n	8003368 <HardFault_Handler>
 800336a:	bf00      	nop

0800336c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800336c:	e7fe      	b.n	800336c <MemManage_Handler>
 800336e:	bf00      	nop

08003370 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <BusFault_Handler>
 8003372:	bf00      	nop

08003374 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003374:	e7fe      	b.n	8003374 <UsageFault_Handler>
 8003376:	bf00      	nop

08003378 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop

0800337c <DebugMon_Handler>:
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop

08003380 <PendSV_Handler>:
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003384:	f000 b916 	b.w	80035b4 <HAL_IncTick>

08003388 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003388:	4801      	ldr	r0, [pc, #4]	; (8003390 <DMA1_Stream0_IRQHandler+0x8>)
 800338a:	f000 bfc1 	b.w	8004310 <HAL_DMA_IRQHandler>
 800338e:	bf00      	nop
 8003390:	20018284 	.word	0x20018284

08003394 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <DMA1_Stream1_IRQHandler+0x8>)
 8003396:	f000 bfbb 	b.w	8004310 <HAL_DMA_IRQHandler>
 800339a:	bf00      	nop
 800339c:	20017f70 	.word	0x20017f70

080033a0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80033a0:	4801      	ldr	r0, [pc, #4]	; (80033a8 <DMA1_Stream2_IRQHandler+0x8>)
 80033a2:	f000 bfb5 	b.w	8004310 <HAL_DMA_IRQHandler>
 80033a6:	bf00      	nop
 80033a8:	20017fe8 	.word	0x20017fe8

080033ac <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 80033ac:	4801      	ldr	r0, [pc, #4]	; (80033b4 <DMA1_Stream3_IRQHandler+0x8>)
 80033ae:	f000 bfaf 	b.w	8004310 <HAL_DMA_IRQHandler>
 80033b2:	bf00      	nop
 80033b4:	200182fc 	.word	0x200182fc

080033b8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80033b8:	4801      	ldr	r0, [pc, #4]	; (80033c0 <DMA1_Stream4_IRQHandler+0x8>)
 80033ba:	f000 bfa9 	b.w	8004310 <HAL_DMA_IRQHandler>
 80033be:	bf00      	nop
 80033c0:	2001820c 	.word	0x2001820c

080033c4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80033c4:	4801      	ldr	r0, [pc, #4]	; (80033cc <SPI1_IRQHandler+0x8>)
 80033c6:	f005 be31 	b.w	800902c <HAL_SPI_IRQHandler>
 80033ca:	bf00      	nop
 80033cc:	20018378 	.word	0x20018378

080033d0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80033d0:	4801      	ldr	r0, [pc, #4]	; (80033d8 <SPI2_IRQHandler+0x8>)
 80033d2:	f005 be2b 	b.w	800902c <HAL_SPI_IRQHandler>
 80033d6:	bf00      	nop
 80033d8:	20018400 	.word	0x20018400

080033dc <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80033dc:	4801      	ldr	r0, [pc, #4]	; (80033e4 <SPI5_IRQHandler+0x8>)
 80033de:	f005 be25 	b.w	800902c <HAL_SPI_IRQHandler>
 80033e2:	bf00      	nop
 80033e4:	20018488 	.word	0x20018488

080033e8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033e8:	4927      	ldr	r1, [pc, #156]	; (8003488 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033ea:	4a28      	ldr	r2, [pc, #160]	; (800348c <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033ec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80033f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80033f4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	2b06      	cmp	r3, #6
 8003402:	d805      	bhi.n	8003410 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	f023 030f 	bic.w	r3, r3, #15
 800340a:	f043 0307 	orr.w	r3, r3, #7
 800340e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003410:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003412:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003414:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003416:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003418:	481c      	ldr	r0, [pc, #112]	; (800348c <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800341a:	f041 0101 	orr.w	r1, r1, #1
 800341e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003420:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	400a      	ands	r2, r1
 8003426:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003428:	6803      	ldr	r3, [r0, #0]
 800342a:	071b      	lsls	r3, r3, #28
 800342c:	d505      	bpl.n	800343a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800342e:	6803      	ldr	r3, [r0, #0]
 8003430:	f023 030f 	bic.w	r3, r3, #15
 8003434:	f043 0307 	orr.w	r3, r3, #7
 8003438:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <SystemInit+0xa8>)
 800343c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800343e:	4916      	ldr	r1, [pc, #88]	; (8003498 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8003440:	4c16      	ldr	r4, [pc, #88]	; (800349c <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8003442:	4817      	ldr	r0, [pc, #92]	; (80034a0 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8003444:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8003446:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8003448:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800344a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800344c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800344e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003452:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003454:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003456:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003458:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800345a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800345c:	4c11      	ldr	r4, [pc, #68]	; (80034a4 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800345e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003462:	4911      	ldr	r1, [pc, #68]	; (80034a8 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8003464:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8003466:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003468:	6823      	ldr	r3, [r4, #0]
 800346a:	4019      	ands	r1, r3
 800346c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8003470:	d203      	bcs.n	800347a <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003472:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <SystemInit+0xc4>)
 8003474:	2201      	movs	r2, #1
 8003476:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <SystemInit+0xc8>)
 800347c:	f243 02d2 	movw	r2, #12498	; 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003480:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003484:	601a      	str	r2, [r3, #0]
}
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00
 800348c:	52002000 	.word	0x52002000
 8003490:	58024400 	.word	0x58024400
 8003494:	eaf6ed7f 	.word	0xeaf6ed7f
 8003498:	01010280 	.word	0x01010280
 800349c:	02020200 	.word	0x02020200
 80034a0:	01ff0000 	.word	0x01ff0000
 80034a4:	5c001000 	.word	0x5c001000
 80034a8:	ffff0000 	.word	0xffff0000
 80034ac:	51008000 	.word	0x51008000
 80034b0:	52004000 	.word	0x52004000

080034b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80034b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80034b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034ba:	e003      	b.n	80034c4 <LoopCopyDataInit>

080034bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034c2:	3104      	adds	r1, #4

080034c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80034c4:	480b      	ldr	r0, [pc, #44]	; (80034f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034c6:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034cc:	d3f6      	bcc.n	80034bc <CopyDataInit>
  ldr  r2, =_sbss
 80034ce:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034d0:	e002      	b.n	80034d8 <LoopFillZerobss>

080034d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80034d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034d4:	f842 3b04 	str.w	r3, [r2], #4

080034d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034dc:	d3f9      	bcc.n	80034d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80034de:	f7ff ff83 	bl	80033e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034e2:	f011 fd85 	bl	8014ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034e6:	f7ff f9c1 	bl	800286c <main>
  bx  lr
 80034ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80034f0:	0802f7e8 	.word	0x0802f7e8
  ldr  r0, =_sdata
 80034f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034f8:	20000194 	.word	0x20000194
  ldr  r2, =_sbss
 80034fc:	20000198 	.word	0x20000198
  ldr  r3, = _ebss
 8003500:	20018bb4 	.word	0x20018bb4

08003504 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003504:	e7fe      	b.n	8003504 <ADC3_IRQHandler>
	...

08003508 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_InitTick+0x40>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b90b      	cbnz	r3, 8003512 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800350e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003510:	4770      	bx	lr
{
 8003512:	b510      	push	{r4, lr}
 8003514:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <HAL_InitTick+0x44>)
 800351c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003520:	6810      	ldr	r0, [r2, #0]
 8003522:	fbb0 f0f3 	udiv	r0, r0, r3
 8003526:	f000 f8d7 	bl	80036d8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352a:	2c0f      	cmp	r4, #15
 800352c:	d800      	bhi.n	8003530 <HAL_InitTick+0x28>
 800352e:	b108      	cbz	r0, 8003534 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003530:	2001      	movs	r0, #1
}
 8003532:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003534:	2200      	movs	r2, #0
 8003536:	4621      	mov	r1, r4
 8003538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800353c:	f000 f880 	bl	8003640 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_InitTick+0x48>)
 8003542:	2000      	movs	r0, #0
 8003544:	601c      	str	r4, [r3, #0]
}
 8003546:	bd10      	pop	{r4, pc}
 8003548:	200000a4 	.word	0x200000a4
 800354c:	2000009c 	.word	0x2000009c
 8003550:	200000a8 	.word	0x200000a8

08003554 <HAL_Init>:
{
 8003554:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003556:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003558:	4c12      	ldr	r4, [pc, #72]	; (80035a4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800355a:	f000 f85f 	bl	800361c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800355e:	f002 fa13 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8003562:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <HAL_Init+0x54>)
 8003564:	4911      	ldr	r1, [pc, #68]	; (80035ac <HAL_Init+0x58>)
 8003566:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003568:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800356a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800356e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003572:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003574:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003576:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800357a:	490d      	ldr	r1, [pc, #52]	; (80035b0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800357c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003580:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003582:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003586:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003588:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800358a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800358c:	f7ff ffbc 	bl	8003508 <HAL_InitTick>
 8003590:	b110      	cbz	r0, 8003598 <HAL_Init+0x44>
    return HAL_ERROR;
 8003592:	2401      	movs	r4, #1
}
 8003594:	4620      	mov	r0, r4
 8003596:	bd10      	pop	{r4, pc}
 8003598:	4604      	mov	r4, r0
  HAL_MspInit();
 800359a:	f7ff fed1 	bl	8003340 <HAL_MspInit>
}
 800359e:	4620      	mov	r0, r4
 80035a0:	bd10      	pop	{r4, pc}
 80035a2:	bf00      	nop
 80035a4:	200000a0 	.word	0x200000a0
 80035a8:	58024400 	.word	0x58024400
 80035ac:	080172c4 	.word	0x080172c4
 80035b0:	2000009c 	.word	0x2000009c

080035b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80035b4:	4a03      	ldr	r2, [pc, #12]	; (80035c4 <HAL_IncTick+0x10>)
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <HAL_IncTick+0x14>)
 80035b8:	6811      	ldr	r1, [r2, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	440b      	add	r3, r1
 80035be:	6013      	str	r3, [r2, #0]
}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20018510 	.word	0x20018510
 80035c8:	200000a4 	.word	0x200000a4

080035cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80035cc:	4b01      	ldr	r3, [pc, #4]	; (80035d4 <HAL_GetTick+0x8>)
 80035ce:	6818      	ldr	r0, [r3, #0]
}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20018510 	.word	0x20018510

080035d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035d8:	b538      	push	{r3, r4, r5, lr}
 80035da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80035dc:	f7ff fff6 	bl	80035cc <HAL_GetTick>
 80035e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035e2:	1c63      	adds	r3, r4, #1
 80035e4:	d002      	beq.n	80035ec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <HAL_Delay+0x20>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ec:	f7ff ffee 	bl	80035cc <HAL_GetTick>
 80035f0:	1b43      	subs	r3, r0, r5
 80035f2:	42a3      	cmp	r3, r4
 80035f4:	d3fa      	bcc.n	80035ec <HAL_Delay+0x14>
  {
  }
}
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	200000a4 	.word	0x200000a4

080035fc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80035fc:	4b01      	ldr	r3, [pc, #4]	; (8003604 <HAL_GetREVID+0x8>)
 80035fe:	6818      	ldr	r0, [r3, #0]
}
 8003600:	0c00      	lsrs	r0, r0, #16
 8003602:	4770      	bx	lr
 8003604:	5c001000 	.word	0x5c001000

08003608 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8003608:	4a03      	ldr	r2, [pc, #12]	; (8003618 <HAL_SetFMCMemorySwappingConfig+0x10>)
 800360a:	6813      	ldr	r3, [r2, #0]
 800360c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003610:	4318      	orrs	r0, r3
 8003612:	6010      	str	r0, [r2, #0]
}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	52004000 	.word	0x52004000

0800361c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800361c:	4906      	ldr	r1, [pc, #24]	; (8003638 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003622:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003626:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003628:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003630:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003632:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003634:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00
 800363c:	05fa0000 	.word	0x05fa0000

08003640 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_NVIC_SetPriority+0x70>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003648:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800364a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003652:	f1be 0f04 	cmp.w	lr, #4
 8003656:	bf28      	it	cs
 8003658:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365c:	f1bc 0f06 	cmp.w	ip, #6
 8003660:	d91a      	bls.n	8003698 <HAL_NVIC_SetPriority+0x58>
 8003662:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003668:	fa0c fc03 	lsl.w	ip, ip, r3
 800366c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8003674:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003676:	fa0c fc0e 	lsl.w	ip, ip, lr
 800367a:	ea21 010c 	bic.w	r1, r1, ip
 800367e:	fa01 f103 	lsl.w	r1, r1, r3
 8003682:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003686:	db0a      	blt.n	800369e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003688:	0109      	lsls	r1, r1, #4
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_NVIC_SetPriority+0x74>)
 800368c:	b2c9      	uxtb	r1, r1
 800368e:	4403      	add	r3, r0
 8003690:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003694:	f85d fb04 	ldr.w	pc, [sp], #4
 8003698:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800369a:	4613      	mov	r3, r2
 800369c:	e7e8      	b.n	8003670 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369e:	f000 000f 	and.w	r0, r0, #15
 80036a2:	0109      	lsls	r1, r1, #4
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <HAL_NVIC_SetPriority+0x78>)
 80036a6:	b2c9      	uxtb	r1, r1
 80036a8:	4403      	add	r3, r0
 80036aa:	7619      	strb	r1, [r3, #24]
 80036ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80036b0:	e000ed00 	.word	0xe000ed00
 80036b4:	e000e100 	.word	0xe000e100
 80036b8:	e000ecfc 	.word	0xe000ecfc

080036bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036bc:	2800      	cmp	r0, #0
 80036be:	db07      	blt.n	80036d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c0:	2301      	movs	r3, #1
 80036c2:	f000 011f 	and.w	r1, r0, #31
 80036c6:	4a03      	ldr	r2, [pc, #12]	; (80036d4 <HAL_NVIC_EnableIRQ+0x18>)
 80036c8:	0940      	lsrs	r0, r0, #5
 80036ca:	408b      	lsls	r3, r1
 80036cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d8:	1e43      	subs	r3, r0, #1
 80036da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036de:	d20c      	bcs.n	80036fa <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e6:	4906      	ldr	r1, [pc, #24]	; (8003700 <HAL_SYSTICK_Config+0x28>)
 80036e8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ec:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ee:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80036fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000ed00 	.word	0xe000ed00

08003704 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003704:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800370a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800370c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800370e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8003714:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_MPU_Enable+0x1c>)
 8003722:	f040 0001 	orr.w	r0, r0, #1
 8003726:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800372a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800372c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003730:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003732:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003736:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800373a:	4770      	bx	lr
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003740:	4a17      	ldr	r2, [pc, #92]	; (80037a0 <HAL_MPU_ConfigRegion+0x60>)
 8003742:	7843      	ldrb	r3, [r0, #1]
 8003744:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8003748:	7801      	ldrb	r1, [r0, #0]
 800374a:	b321      	cbz	r1, 8003796 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800374c:	6843      	ldr	r3, [r0, #4]
{
 800374e:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8003750:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003754:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003756:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800375a:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800375c:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003760:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003764:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003768:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800376a:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800376c:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003770:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003774:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003778:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800377c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003780:	7a01      	ldrb	r1, [r0, #8]
 8003782:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8003786:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800378a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800378e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003792:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8003796:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800379a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037a4:	6802      	ldr	r2, [r0, #0]
 80037a6:	4b34      	ldr	r3, [pc, #208]	; (8003878 <DMA_CalcBaseAndBitshift+0xd4>)
 80037a8:	4934      	ldr	r1, [pc, #208]	; (800387c <DMA_CalcBaseAndBitshift+0xd8>)
{
 80037aa:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ac:	4d34      	ldr	r5, [pc, #208]	; (8003880 <DMA_CalcBaseAndBitshift+0xdc>)
 80037ae:	4c35      	ldr	r4, [pc, #212]	; (8003884 <DMA_CalcBaseAndBitshift+0xe0>)
 80037b0:	42aa      	cmp	r2, r5
 80037b2:	bf18      	it	ne
 80037b4:	429a      	cmpne	r2, r3
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	428a      	cmp	r2, r1
 80037be:	bf08      	it	eq
 80037c0:	f043 0301 	orreq.w	r3, r3, #1
 80037c4:	3130      	adds	r1, #48	; 0x30
 80037c6:	42a2      	cmp	r2, r4
 80037c8:	bf08      	it	eq
 80037ca:	f043 0301 	orreq.w	r3, r3, #1
 80037ce:	3430      	adds	r4, #48	; 0x30
 80037d0:	428a      	cmp	r2, r1
 80037d2:	bf08      	it	eq
 80037d4:	f043 0301 	orreq.w	r3, r3, #1
 80037d8:	3130      	adds	r1, #48	; 0x30
 80037da:	42a2      	cmp	r2, r4
 80037dc:	bf08      	it	eq
 80037de:	f043 0301 	orreq.w	r3, r3, #1
 80037e2:	3430      	adds	r4, #48	; 0x30
 80037e4:	428a      	cmp	r2, r1
 80037e6:	bf08      	it	eq
 80037e8:	f043 0301 	orreq.w	r3, r3, #1
 80037ec:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80037f0:	42a2      	cmp	r2, r4
 80037f2:	bf08      	it	eq
 80037f4:	f043 0301 	orreq.w	r3, r3, #1
 80037f8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80037fc:	428a      	cmp	r2, r1
 80037fe:	bf08      	it	eq
 8003800:	f043 0301 	orreq.w	r3, r3, #1
 8003804:	3130      	adds	r1, #48	; 0x30
 8003806:	42a2      	cmp	r2, r4
 8003808:	bf08      	it	eq
 800380a:	f043 0301 	orreq.w	r3, r3, #1
 800380e:	3430      	adds	r4, #48	; 0x30
 8003810:	428a      	cmp	r2, r1
 8003812:	bf08      	it	eq
 8003814:	f043 0301 	orreq.w	r3, r3, #1
 8003818:	3130      	adds	r1, #48	; 0x30
 800381a:	42a2      	cmp	r2, r4
 800381c:	bf08      	it	eq
 800381e:	f043 0301 	orreq.w	r3, r3, #1
 8003822:	3430      	adds	r4, #48	; 0x30
 8003824:	428a      	cmp	r2, r1
 8003826:	bf08      	it	eq
 8003828:	f043 0301 	orreq.w	r3, r3, #1
 800382c:	3130      	adds	r1, #48	; 0x30
 800382e:	42a2      	cmp	r2, r4
 8003830:	bf08      	it	eq
 8003832:	f043 0301 	orreq.w	r3, r3, #1
 8003836:	428a      	cmp	r2, r1
 8003838:	bf08      	it	eq
 800383a:	f043 0301 	orreq.w	r3, r3, #1
 800383e:	b913      	cbnz	r3, 8003846 <DMA_CalcBaseAndBitshift+0xa2>
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <DMA_CalcBaseAndBitshift+0xe4>)
 8003842:	429a      	cmp	r2, r3
 8003844:	d113      	bne.n	800386e <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003846:	b2d3      	uxtb	r3, r2
 8003848:	4910      	ldr	r1, [pc, #64]	; (800388c <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800384a:	4c11      	ldr	r4, [pc, #68]	; (8003890 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800384c:	3b10      	subs	r3, #16
 800384e:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8003852:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003856:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800385a:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800385e:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003860:	bf88      	it	hi
 8003862:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003864:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003866:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8003868:	4618      	mov	r0, r3
 800386a:	bc30      	pop	{r4, r5}
 800386c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800386e:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8003872:	6583      	str	r3, [r0, #88]	; 0x58
 8003874:	e7f8      	b.n	8003868 <DMA_CalcBaseAndBitshift+0xc4>
 8003876:	bf00      	nop
 8003878:	40020010 	.word	0x40020010
 800387c:	40020040 	.word	0x40020040
 8003880:	40020028 	.word	0x40020028
 8003884:	40020058 	.word	0x40020058
 8003888:	400204b8 	.word	0x400204b8
 800388c:	aaaaaaab 	.word	0xaaaaaaab
 8003890:	080172d4 	.word	0x080172d4
 8003894:	fffffc00 	.word	0xfffffc00

08003898 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003898:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800389a:	4a29      	ldr	r2, [pc, #164]	; (8003940 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800389c:	4929      	ldr	r1, [pc, #164]	; (8003944 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800389e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80038a0:	4d29      	ldr	r5, [pc, #164]	; (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80038a2:	4c2a      	ldr	r4, [pc, #168]	; (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80038a4:	42ab      	cmp	r3, r5
 80038a6:	bf18      	it	ne
 80038a8:	4293      	cmpne	r3, r2
 80038aa:	bf0c      	ite	eq
 80038ac:	2201      	moveq	r2, #1
 80038ae:	2200      	movne	r2, #0
 80038b0:	428b      	cmp	r3, r1
 80038b2:	bf08      	it	eq
 80038b4:	f042 0201 	orreq.w	r2, r2, #1
 80038b8:	3128      	adds	r1, #40	; 0x28
 80038ba:	42a3      	cmp	r3, r4
 80038bc:	bf08      	it	eq
 80038be:	f042 0201 	orreq.w	r2, r2, #1
 80038c2:	3428      	adds	r4, #40	; 0x28
 80038c4:	428b      	cmp	r3, r1
 80038c6:	bf08      	it	eq
 80038c8:	f042 0201 	orreq.w	r2, r2, #1
 80038cc:	3128      	adds	r1, #40	; 0x28
 80038ce:	42a3      	cmp	r3, r4
 80038d0:	bf08      	it	eq
 80038d2:	f042 0201 	orreq.w	r2, r2, #1
 80038d6:	428b      	cmp	r3, r1
 80038d8:	bf08      	it	eq
 80038da:	f042 0201 	orreq.w	r2, r2, #1
 80038de:	b912      	cbnz	r2, 80038e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80038e0:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d113      	bne.n	800390e <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	4c1a      	ldr	r4, [pc, #104]	; (8003954 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80038ea:	4a1b      	ldr	r2, [pc, #108]	; (8003958 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038ec:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80038ee:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80038f0:	4d1a      	ldr	r5, [pc, #104]	; (800395c <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80038f2:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80038f6:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80038f8:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038fc:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003900:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003902:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003906:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003908:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800390a:	bc30      	pop	{r4, r5}
 800390c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800390e:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003910:	4913      	ldr	r1, [pc, #76]	; (8003960 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003912:	4c14      	ldr	r4, [pc, #80]	; (8003964 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003914:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003916:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003918:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800391a:	fba4 2302 	umull	r2, r3, r4, r2
 800391e:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003922:	d800      	bhi.n	8003926 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8003924:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003926:	4a10      	ldr	r2, [pc, #64]	; (8003968 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003928:	f003 051f 	and.w	r5, r3, #31
 800392c:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800392e:	4c0f      	ldr	r4, [pc, #60]	; (800396c <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003930:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003932:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003934:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003936:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003938:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800393a:	6602      	str	r2, [r0, #96]	; 0x60
}
 800393c:	e7e5      	b.n	800390a <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 800393e:	bf00      	nop
 8003940:	58025408 	.word	0x58025408
 8003944:	58025430 	.word	0x58025430
 8003948:	5802541c 	.word	0x5802541c
 800394c:	58025444 	.word	0x58025444
 8003950:	58025494 	.word	0x58025494
 8003954:	cccccccd 	.word	0xcccccccd
 8003958:	16009600 	.word	0x16009600
 800395c:	58025880 	.word	0x58025880
 8003960:	bffdfbf0 	.word	0xbffdfbf0
 8003964:	aaaaaaab 	.word	0xaaaaaaab
 8003968:	10008200 	.word	0x10008200
 800396c:	40020880 	.word	0x40020880

08003970 <HAL_DMA_Init>:
{
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7ff fe2a 	bl	80035cc <HAL_GetTick>
  if(hdma == NULL)
 8003978:	2c00      	cmp	r4, #0
 800397a:	f000 8177 	beq.w	8003c6c <HAL_DMA_Init+0x2fc>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	4605      	mov	r5, r0
 8003982:	4a92      	ldr	r2, [pc, #584]	; (8003bcc <HAL_DMA_Init+0x25c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d048      	beq.n	8003a1a <HAL_DMA_Init+0xaa>
 8003988:	3218      	adds	r2, #24
 800398a:	4293      	cmp	r3, r2
 800398c:	d045      	beq.n	8003a1a <HAL_DMA_Init+0xaa>
 800398e:	3230      	adds	r2, #48	; 0x30
 8003990:	498f      	ldr	r1, [pc, #572]	; (8003bd0 <HAL_DMA_Init+0x260>)
 8003992:	428b      	cmp	r3, r1
 8003994:	bf18      	it	ne
 8003996:	4293      	cmpne	r3, r2
 8003998:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800399c:	bf0c      	ite	eq
 800399e:	2201      	moveq	r2, #1
 80039a0:	2200      	movne	r2, #0
 80039a2:	428b      	cmp	r3, r1
 80039a4:	bf08      	it	eq
 80039a6:	f042 0201 	orreq.w	r2, r2, #1
 80039aa:	3118      	adds	r1, #24
 80039ac:	428b      	cmp	r3, r1
 80039ae:	bf08      	it	eq
 80039b0:	f042 0201 	orreq.w	r2, r2, #1
 80039b4:	3118      	adds	r1, #24
 80039b6:	428b      	cmp	r3, r1
 80039b8:	bf08      	it	eq
 80039ba:	f042 0201 	orreq.w	r2, r2, #1
 80039be:	3118      	adds	r1, #24
 80039c0:	428b      	cmp	r3, r1
 80039c2:	bf08      	it	eq
 80039c4:	f042 0201 	orreq.w	r2, r2, #1
 80039c8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80039cc:	428b      	cmp	r3, r1
 80039ce:	bf08      	it	eq
 80039d0:	f042 0201 	orreq.w	r2, r2, #1
 80039d4:	3118      	adds	r1, #24
 80039d6:	428b      	cmp	r3, r1
 80039d8:	bf08      	it	eq
 80039da:	f042 0201 	orreq.w	r2, r2, #1
 80039de:	3118      	adds	r1, #24
 80039e0:	428b      	cmp	r3, r1
 80039e2:	bf08      	it	eq
 80039e4:	f042 0201 	orreq.w	r2, r2, #1
 80039e8:	3118      	adds	r1, #24
 80039ea:	428b      	cmp	r3, r1
 80039ec:	bf08      	it	eq
 80039ee:	f042 0201 	orreq.w	r2, r2, #1
 80039f2:	3118      	adds	r1, #24
 80039f4:	428b      	cmp	r3, r1
 80039f6:	bf08      	it	eq
 80039f8:	f042 0201 	orreq.w	r2, r2, #1
 80039fc:	3118      	adds	r1, #24
 80039fe:	428b      	cmp	r3, r1
 8003a00:	bf08      	it	eq
 8003a02:	f042 0201 	orreq.w	r2, r2, #1
 8003a06:	3118      	adds	r1, #24
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	bf08      	it	eq
 8003a0c:	f042 0201 	orreq.w	r2, r2, #1
 8003a10:	b91a      	cbnz	r2, 8003a1a <HAL_DMA_Init+0xaa>
 8003a12:	4a70      	ldr	r2, [pc, #448]	; (8003bd4 <HAL_DMA_Init+0x264>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	f040 8198 	bne.w	8003d4a <HAL_DMA_Init+0x3da>
    __HAL_UNLOCK(hdma);
 8003a1a:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a1c:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8003a1e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a22:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e006      	b.n	8003a3e <HAL_DMA_Init+0xce>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a30:	f7ff fdcc 	bl	80035cc <HAL_GetTick>
 8003a34:	1b43      	subs	r3, r0, r5
 8003a36:	2b05      	cmp	r3, #5
 8003a38:	f200 80ff 	bhi.w	8003c3a <HAL_DMA_Init+0x2ca>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	07d6      	lsls	r6, r2, #31
 8003a42:	d4f5      	bmi.n	8003a30 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8003a44:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8003a4a:	432a      	orrs	r2, r5
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4c:	69a1      	ldr	r1, [r4, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a4e:	681d      	ldr	r5, [r3, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a50:	4302      	orrs	r2, r0
 8003a52:	6960      	ldr	r0, [r4, #20]
 8003a54:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a56:	69e0      	ldr	r0, [r4, #28]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	4302      	orrs	r2, r0
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a5c:	485e      	ldr	r0, [pc, #376]	; (8003bd8 <HAL_DMA_Init+0x268>)
 8003a5e:	4028      	ands	r0, r5
            hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	6a25      	ldr	r5, [r4, #32]
 8003a62:	432a      	orrs	r2, r5
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a64:	4d5d      	ldr	r5, [pc, #372]	; (8003bdc <HAL_DMA_Init+0x26c>)
    registerValue |=  hdma->Init.Direction           |
 8003a66:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a68:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003a6a:	2804      	cmp	r0, #4
 8003a6c:	f000 8100 	beq.w	8003c70 <HAL_DMA_Init+0x300>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003a70:	682e      	ldr	r6, [r5, #0]
 8003a72:	4d5b      	ldr	r5, [pc, #364]	; (8003be0 <HAL_DMA_Init+0x270>)
 8003a74:	4035      	ands	r5, r6
 8003a76:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 8003a7a:	f080 80bb 	bcs.w	8003bf4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a7e:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a80:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a82:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8003a86:	4302      	orrs	r2, r0
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a88:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f7ff fe8a 	bl	80037a4 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a90:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003a92:	233f      	movs	r3, #63	; 0x3f
 8003a94:	f002 021f 	and.w	r2, r2, #31
 8003a98:	4093      	lsls	r3, r2
 8003a9a:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a9c:	6822      	ldr	r2, [r4, #0]
 8003a9e:	4b4b      	ldr	r3, [pc, #300]	; (8003bcc <HAL_DMA_Init+0x25c>)
 8003aa0:	4850      	ldr	r0, [pc, #320]	; (8003be4 <HAL_DMA_Init+0x274>)
 8003aa2:	494b      	ldr	r1, [pc, #300]	; (8003bd0 <HAL_DMA_Init+0x260>)
 8003aa4:	4282      	cmp	r2, r0
 8003aa6:	bf18      	it	ne
 8003aa8:	429a      	cmpne	r2, r3
 8003aaa:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	428a      	cmp	r2, r1
 8003ab6:	bf08      	it	eq
 8003ab8:	f043 0301 	orreq.w	r3, r3, #1
 8003abc:	3130      	adds	r1, #48	; 0x30
 8003abe:	4282      	cmp	r2, r0
 8003ac0:	bf08      	it	eq
 8003ac2:	f043 0301 	orreq.w	r3, r3, #1
 8003ac6:	3030      	adds	r0, #48	; 0x30
 8003ac8:	428a      	cmp	r2, r1
 8003aca:	bf08      	it	eq
 8003acc:	f043 0301 	orreq.w	r3, r3, #1
 8003ad0:	3130      	adds	r1, #48	; 0x30
 8003ad2:	4282      	cmp	r2, r0
 8003ad4:	bf08      	it	eq
 8003ad6:	f043 0301 	orreq.w	r3, r3, #1
 8003ada:	3030      	adds	r0, #48	; 0x30
 8003adc:	428a      	cmp	r2, r1
 8003ade:	bf08      	it	eq
 8003ae0:	f043 0301 	orreq.w	r3, r3, #1
 8003ae4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8003ae8:	4282      	cmp	r2, r0
 8003aea:	bf08      	it	eq
 8003aec:	f043 0301 	orreq.w	r3, r3, #1
 8003af0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003af4:	428a      	cmp	r2, r1
 8003af6:	bf08      	it	eq
 8003af8:	f043 0301 	orreq.w	r3, r3, #1
 8003afc:	3130      	adds	r1, #48	; 0x30
 8003afe:	4282      	cmp	r2, r0
 8003b00:	bf08      	it	eq
 8003b02:	f043 0301 	orreq.w	r3, r3, #1
 8003b06:	3030      	adds	r0, #48	; 0x30
 8003b08:	428a      	cmp	r2, r1
 8003b0a:	bf08      	it	eq
 8003b0c:	f043 0301 	orreq.w	r3, r3, #1
 8003b10:	3130      	adds	r1, #48	; 0x30
 8003b12:	4282      	cmp	r2, r0
 8003b14:	bf08      	it	eq
 8003b16:	f043 0301 	orreq.w	r3, r3, #1
 8003b1a:	3030      	adds	r0, #48	; 0x30
 8003b1c:	428a      	cmp	r2, r1
 8003b1e:	bf08      	it	eq
 8003b20:	f043 0301 	orreq.w	r3, r3, #1
 8003b24:	3130      	adds	r1, #48	; 0x30
 8003b26:	4282      	cmp	r2, r0
 8003b28:	bf08      	it	eq
 8003b2a:	f043 0301 	orreq.w	r3, r3, #1
 8003b2e:	3030      	adds	r0, #48	; 0x30
 8003b30:	428a      	cmp	r2, r1
 8003b32:	bf08      	it	eq
 8003b34:	f043 0301 	orreq.w	r3, r3, #1
 8003b38:	492b      	ldr	r1, [pc, #172]	; (8003be8 <HAL_DMA_Init+0x278>)
 8003b3a:	4282      	cmp	r2, r0
 8003b3c:	bf08      	it	eq
 8003b3e:	f043 0301 	orreq.w	r3, r3, #1
 8003b42:	482a      	ldr	r0, [pc, #168]	; (8003bec <HAL_DMA_Init+0x27c>)
 8003b44:	428a      	cmp	r2, r1
 8003b46:	bf08      	it	eq
 8003b48:	f043 0301 	orreq.w	r3, r3, #1
 8003b4c:	3128      	adds	r1, #40	; 0x28
 8003b4e:	4282      	cmp	r2, r0
 8003b50:	bf08      	it	eq
 8003b52:	f043 0301 	orreq.w	r3, r3, #1
 8003b56:	3028      	adds	r0, #40	; 0x28
 8003b58:	428a      	cmp	r2, r1
 8003b5a:	bf08      	it	eq
 8003b5c:	f043 0301 	orreq.w	r3, r3, #1
 8003b60:	3128      	adds	r1, #40	; 0x28
 8003b62:	4282      	cmp	r2, r0
 8003b64:	bf08      	it	eq
 8003b66:	f043 0301 	orreq.w	r3, r3, #1
 8003b6a:	3028      	adds	r0, #40	; 0x28
 8003b6c:	428a      	cmp	r2, r1
 8003b6e:	bf08      	it	eq
 8003b70:	f043 0301 	orreq.w	r3, r3, #1
 8003b74:	3128      	adds	r1, #40	; 0x28
 8003b76:	4282      	cmp	r2, r0
 8003b78:	bf08      	it	eq
 8003b7a:	f043 0301 	orreq.w	r3, r3, #1
 8003b7e:	428a      	cmp	r2, r1
 8003b80:	bf08      	it	eq
 8003b82:	f043 0301 	orreq.w	r3, r3, #1
 8003b86:	b913      	cbnz	r3, 8003b8e <HAL_DMA_Init+0x21e>
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_DMA_Init+0x280>)
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d118      	bne.n	8003bc0 <HAL_DMA_Init+0x250>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f7ff fe82 	bl	8003898 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b94:	68a3      	ldr	r3, [r4, #8]
 8003b96:	2b80      	cmp	r3, #128	; 0x80
 8003b98:	d05c      	beq.n	8003c54 <HAL_DMA_Init+0x2e4>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b9a:	6863      	ldr	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b9c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b9e:	b2da      	uxtb	r2, r3
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ba0:	3b01      	subs	r3, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ba2:	e9d4 5118 	ldrd	r5, r1, [r4, #96]	; 0x60
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003ba6:	2b07      	cmp	r3, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ba8:	602a      	str	r2, [r5, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003baa:	6048      	str	r0, [r1, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003bac:	d859      	bhi.n	8003c62 <HAL_DMA_Init+0x2f2>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003bae:	1e50      	subs	r0, r2, #1
 8003bb0:	2807      	cmp	r0, #7
 8003bb2:	d96e      	bls.n	8003c92 <HAL_DMA_Init+0x322>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bb4:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003bb6:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bba:	2000      	movs	r0, #0
 8003bbc:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bbe:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003bc6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bcc:	40020010 	.word	0x40020010
 8003bd0:	40020040 	.word	0x40020040
 8003bd4:	400204b8 	.word	0x400204b8
 8003bd8:	fe10803f 	.word	0xfe10803f
 8003bdc:	5c001000 	.word	0x5c001000
 8003be0:	ffff0000 	.word	0xffff0000
 8003be4:	40020028 	.word	0x40020028
 8003be8:	58025408 	.word	0x58025408
 8003bec:	5802541c 	.word	0x5802541c
 8003bf0:	58025494 	.word	0x58025494
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003bf4:	6865      	ldr	r5, [r4, #4]
 8003bf6:	f1a5 0629 	sub.w	r6, r5, #41	; 0x29
 8003bfa:	2e1f      	cmp	r6, #31
 8003bfc:	d924      	bls.n	8003c48 <HAL_DMA_Init+0x2d8>
 8003bfe:	3d4f      	subs	r5, #79	; 0x4f
 8003c00:	2d03      	cmp	r5, #3
 8003c02:	d801      	bhi.n	8003c08 <HAL_DMA_Init+0x298>
        registerValue |= DMA_SxCR_TRBUFF;
 8003c04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c08:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c0a:	2804      	cmp	r0, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c0c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c0e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8003c12:	ea42 0200 	orr.w	r2, r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c16:	f47f af37 	bne.w	8003a88 <HAL_DMA_Init+0x118>
 8003c1a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8003c1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003c1e:	4302      	orrs	r2, r0
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c20:	2d00      	cmp	r5, #0
 8003c22:	f43f af31 	beq.w	8003a88 <HAL_DMA_Init+0x118>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c26:	2900      	cmp	r1, #0
 8003c28:	d169      	bne.n	8003cfe <HAL_DMA_Init+0x38e>
    switch (hdma->Init.FIFOThreshold)
 8003c2a:	2801      	cmp	r0, #1
 8003c2c:	f000 8088 	beq.w	8003d40 <HAL_DMA_Init+0x3d0>
 8003c30:	f030 0102 	bics.w	r1, r0, #2
 8003c34:	f47f af28 	bne.w	8003a88 <HAL_DMA_Init+0x118>
 8003c38:	e069      	b.n	8003d0e <HAL_DMA_Init+0x39e>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c3a:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c3c:	2303      	movs	r3, #3
        return HAL_ERROR;
 8003c3e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c40:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c48:	4d73      	ldr	r5, [pc, #460]	; (8003e18 <HAL_DMA_Init+0x4a8>)
 8003c4a:	fa25 f606 	lsr.w	r6, r5, r6
 8003c4e:	07f5      	lsls	r5, r6, #31
 8003c50:	d5da      	bpl.n	8003c08 <HAL_DMA_Init+0x298>
 8003c52:	e7d7      	b.n	8003c04 <HAL_DMA_Init+0x294>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c54:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c56:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003c58:	e9d4 0218 	ldrd	r0, r2, [r4, #96]	; 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c5c:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c5e:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c60:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8003c62:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c64:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c68:	6763      	str	r3, [r4, #116]	; 0x74
 8003c6a:	e7a9      	b.n	8003bc0 <HAL_DMA_Init+0x250>
    return HAL_ERROR;
 8003c6c:	2001      	movs	r0, #1
}
 8003c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c70:	682f      	ldr	r7, [r5, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c72:	e9d4 560b 	ldrd	r5, r6, [r4, #44]	; 0x2c
 8003c76:	432e      	orrs	r6, r5
 8003c78:	4332      	orrs	r2, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c7a:	4e68      	ldr	r6, [pc, #416]	; (8003e1c <HAL_DMA_Init+0x4ac>)
 8003c7c:	403e      	ands	r6, r7
 8003c7e:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
 8003c82:	d2b7      	bcs.n	8003bf4 <HAL_DMA_Init+0x284>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c84:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c86:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c88:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8003c8c:	f042 0204 	orr.w	r2, r2, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c90:	e7c4      	b.n	8003c1c <HAL_DMA_Init+0x2ac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c92:	6821      	ldr	r1, [r4, #0]
 8003c94:	4b62      	ldr	r3, [pc, #392]	; (8003e20 <HAL_DMA_Init+0x4b0>)
 8003c96:	4d63      	ldr	r5, [pc, #396]	; (8003e24 <HAL_DMA_Init+0x4b4>)
 8003c98:	42a9      	cmp	r1, r5
 8003c9a:	bf18      	it	ne
 8003c9c:	4299      	cmpne	r1, r3
 8003c9e:	f105 0514 	add.w	r5, r5, #20
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	42a9      	cmp	r1, r5
 8003caa:	bf08      	it	eq
 8003cac:	f043 0301 	orreq.w	r3, r3, #1
 8003cb0:	3514      	adds	r5, #20
 8003cb2:	42a9      	cmp	r1, r5
 8003cb4:	bf08      	it	eq
 8003cb6:	f043 0301 	orreq.w	r3, r3, #1
 8003cba:	3514      	adds	r5, #20
 8003cbc:	42a9      	cmp	r1, r5
 8003cbe:	bf08      	it	eq
 8003cc0:	f043 0301 	orreq.w	r3, r3, #1
 8003cc4:	3514      	adds	r5, #20
 8003cc6:	42a9      	cmp	r1, r5
 8003cc8:	bf08      	it	eq
 8003cca:	f043 0301 	orreq.w	r3, r3, #1
 8003cce:	3514      	adds	r5, #20
 8003cd0:	42a9      	cmp	r1, r5
 8003cd2:	bf08      	it	eq
 8003cd4:	f043 0301 	orreq.w	r3, r3, #1
 8003cd8:	b93b      	cbnz	r3, 8003cea <HAL_DMA_Init+0x37a>
 8003cda:	4b53      	ldr	r3, [pc, #332]	; (8003e28 <HAL_DMA_Init+0x4b8>)
 8003cdc:	4299      	cmp	r1, r3
 8003cde:	d004      	beq.n	8003cea <HAL_DMA_Init+0x37a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ce0:	4b52      	ldr	r3, [pc, #328]	; (8003e2c <HAL_DMA_Init+0x4bc>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ce2:	4953      	ldr	r1, [pc, #332]	; (8003e30 <HAL_DMA_Init+0x4c0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ce8:	e003      	b.n	8003cf2 <HAL_DMA_Init+0x382>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cea:	4b52      	ldr	r3, [pc, #328]	; (8003e34 <HAL_DMA_Init+0x4c4>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003cec:	4952      	ldr	r1, [pc, #328]	; (8003e38 <HAL_DMA_Init+0x4c8>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	4082      	lsls	r2, r0
 8003cf6:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8003cfa:	6762      	str	r2, [r4, #116]	; 0x74
 8003cfc:	e75d      	b.n	8003bba <HAL_DMA_Init+0x24a>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cfe:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003d02:	d00e      	beq.n	8003d22 <HAL_DMA_Init+0x3b2>
    switch (hdma->Init.FIFOThreshold)
 8003d04:	2802      	cmp	r0, #2
 8003d06:	d905      	bls.n	8003d14 <HAL_DMA_Init+0x3a4>
 8003d08:	2803      	cmp	r0, #3
 8003d0a:	f47f aebd 	bne.w	8003a88 <HAL_DMA_Init+0x118>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d0e:	01e9      	lsls	r1, r5, #7
 8003d10:	f57f aeba 	bpl.w	8003a88 <HAL_DMA_Init+0x118>
          hdma->State = HAL_DMA_STATE_READY;
 8003d14:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d16:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8003d18:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d1a:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003d1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (hdma->Init.FIFOThreshold)
 8003d22:	2803      	cmp	r0, #3
 8003d24:	f63f aeb0 	bhi.w	8003a88 <HAL_DMA_Init+0x118>
 8003d28:	a101      	add	r1, pc, #4	; (adr r1, 8003d30 <HAL_DMA_Init+0x3c0>)
 8003d2a:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d15 	.word	0x08003d15
 8003d34:	08003d0f 	.word	0x08003d0f
 8003d38:	08003d15 	.word	0x08003d15
 8003d3c:	08003d41 	.word	0x08003d41
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d40:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003d44:	f47f aea0 	bne.w	8003a88 <HAL_DMA_Init+0x118>
 8003d48:	e7e4      	b.n	8003d14 <HAL_DMA_Init+0x3a4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d4a:	4a35      	ldr	r2, [pc, #212]	; (8003e20 <HAL_DMA_Init+0x4b0>)
 8003d4c:	4835      	ldr	r0, [pc, #212]	; (8003e24 <HAL_DMA_Init+0x4b4>)
 8003d4e:	493b      	ldr	r1, [pc, #236]	; (8003e3c <HAL_DMA_Init+0x4cc>)
 8003d50:	4283      	cmp	r3, r0
 8003d52:	bf18      	it	ne
 8003d54:	4293      	cmpne	r3, r2
 8003d56:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2201      	moveq	r2, #1
 8003d5e:	2200      	movne	r2, #0
 8003d60:	428b      	cmp	r3, r1
 8003d62:	bf08      	it	eq
 8003d64:	f042 0201 	orreq.w	r2, r2, #1
 8003d68:	3128      	adds	r1, #40	; 0x28
 8003d6a:	4283      	cmp	r3, r0
 8003d6c:	bf08      	it	eq
 8003d6e:	f042 0201 	orreq.w	r2, r2, #1
 8003d72:	3028      	adds	r0, #40	; 0x28
 8003d74:	428b      	cmp	r3, r1
 8003d76:	bf08      	it	eq
 8003d78:	f042 0201 	orreq.w	r2, r2, #1
 8003d7c:	3128      	adds	r1, #40	; 0x28
 8003d7e:	4283      	cmp	r3, r0
 8003d80:	bf08      	it	eq
 8003d82:	f042 0201 	orreq.w	r2, r2, #1
 8003d86:	428b      	cmp	r3, r1
 8003d88:	bf08      	it	eq
 8003d8a:	f042 0201 	orreq.w	r2, r2, #1
 8003d8e:	b912      	cbnz	r2, 8003d96 <HAL_DMA_Init+0x426>
 8003d90:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <HAL_DMA_Init+0x4b8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d138      	bne.n	8003e08 <HAL_DMA_Init+0x498>
    __HAL_UNLOCK(hdma);
 8003d96:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d98:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d9a:	4d29      	ldr	r5, [pc, #164]	; (8003e40 <HAL_DMA_Init+0x4d0>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003da0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003da4:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003da6:	4015      	ands	r5, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003da8:	68a2      	ldr	r2, [r4, #8]
 8003daa:	2a40      	cmp	r2, #64	; 0x40
 8003dac:	d02a      	beq.n	8003e04 <HAL_DMA_Init+0x494>
 8003dae:	2a80      	cmp	r2, #128	; 0x80
 8003db0:	bf0c      	ite	eq
 8003db2:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8003db6:	2000      	movne	r0, #0
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003db8:	6a26      	ldr	r6, [r4, #32]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003dba:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8003dbe:	08d2      	lsrs	r2, r2, #3
 8003dc0:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003dc4:	6961      	ldr	r1, [r4, #20]
 8003dc6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003dca:	69a1      	ldr	r1, [r4, #24]
 8003dcc:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003dd0:	69e1      	ldr	r1, [r4, #28]
 8003dd2:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003dd6:	491b      	ldr	r1, [pc, #108]	; (8003e44 <HAL_DMA_Init+0x4d4>)
 8003dd8:	ea42 1216 	orr.w	r2, r2, r6, lsr #4
 8003ddc:	4419      	add	r1, r3
 8003dde:	432a      	orrs	r2, r5
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003de0:	4302      	orrs	r2, r0
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003de2:	4819      	ldr	r0, [pc, #100]	; (8003e48 <HAL_DMA_Init+0x4d8>)
 8003de4:	fba0 0101 	umull	r0, r1, r0, r1
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003de8:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003dea:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003dec:	090b      	lsrs	r3, r1, #4
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003df2:	f7ff fcd7 	bl	80037a4 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003df6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f002 021f 	and.w	r2, r2, #31
 8003dfe:	4093      	lsls	r3, r2
 8003e00:	6043      	str	r3, [r0, #4]
 8003e02:	e64b      	b.n	8003a9c <HAL_DMA_Init+0x12c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e04:	2010      	movs	r0, #16
 8003e06:	e7d7      	b.n	8003db8 <HAL_DMA_Init+0x448>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e08:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e0a:	2303      	movs	r3, #3
    return HAL_ERROR;
 8003e0c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e0e:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003e10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e16:	bf00      	nop
 8003e18:	c3c0003f 	.word	0xc3c0003f
 8003e1c:	ffff0000 	.word	0xffff0000
 8003e20:	58025408 	.word	0x58025408
 8003e24:	5802541c 	.word	0x5802541c
 8003e28:	58025494 	.word	0x58025494
 8003e2c:	1000823f 	.word	0x1000823f
 8003e30:	40020940 	.word	0x40020940
 8003e34:	1600963f 	.word	0x1600963f
 8003e38:	58025940 	.word	0x58025940
 8003e3c:	58025430 	.word	0x58025430
 8003e40:	fffe000f 	.word	0xfffe000f
 8003e44:	a7fdabf8 	.word	0xa7fdabf8
 8003e48:	cccccccd 	.word	0xcccccccd

08003e4c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	f000 8177 	beq.w	8004140 <HAL_DMA_Start_IT+0x2f4>
 8003e52:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8003e54:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003e58:	2801      	cmp	r0, #1
 8003e5a:	f000 8173 	beq.w	8004144 <HAL_DMA_Start_IT+0x2f8>
 8003e5e:	2001      	movs	r0, #1
{
 8003e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e64:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8003e68:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e6c:	4284      	cmp	r4, r0
 8003e6e:	d008      	beq.n	8003e82 <HAL_DMA_Start_IT+0x36>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8003e74:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e76:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8003e7a:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8003e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e82:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8003e84:	f8dc 4000 	ldr.w	r4, [ip]
 8003e88:	4d53      	ldr	r5, [pc, #332]	; (8003fd8 <HAL_DMA_Start_IT+0x18c>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e8a:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e8e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8003e90:	4e52      	ldr	r6, [pc, #328]	; (8003fdc <HAL_DMA_Start_IT+0x190>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e92:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8003e96:	4852      	ldr	r0, [pc, #328]	; (8003fe0 <HAL_DMA_Start_IT+0x194>)
 8003e98:	42ac      	cmp	r4, r5
 8003e9a:	bf18      	it	ne
 8003e9c:	4284      	cmpne	r4, r0
 8003e9e:	f105 0518 	add.w	r5, r5, #24
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2001      	moveq	r0, #1
 8003ea6:	2000      	movne	r0, #0
 8003ea8:	42ac      	cmp	r4, r5
 8003eaa:	bf08      	it	eq
 8003eac:	f040 0001 	orreq.w	r0, r0, #1
 8003eb0:	3518      	adds	r5, #24
 8003eb2:	42ac      	cmp	r4, r5
 8003eb4:	bf08      	it	eq
 8003eb6:	f040 0001 	orreq.w	r0, r0, #1
 8003eba:	3518      	adds	r5, #24
 8003ebc:	42ac      	cmp	r4, r5
 8003ebe:	bf08      	it	eq
 8003ec0:	f040 0001 	orreq.w	r0, r0, #1
 8003ec4:	3518      	adds	r5, #24
 8003ec6:	42ac      	cmp	r4, r5
 8003ec8:	bf08      	it	eq
 8003eca:	f040 0001 	orreq.w	r0, r0, #1
 8003ece:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8003ed2:	42ac      	cmp	r4, r5
 8003ed4:	bf08      	it	eq
 8003ed6:	f040 0001 	orreq.w	r0, r0, #1
 8003eda:	3518      	adds	r5, #24
 8003edc:	42ac      	cmp	r4, r5
 8003ede:	bf08      	it	eq
 8003ee0:	f040 0001 	orreq.w	r0, r0, #1
 8003ee4:	3518      	adds	r5, #24
 8003ee6:	42ac      	cmp	r4, r5
 8003ee8:	bf08      	it	eq
 8003eea:	f040 0001 	orreq.w	r0, r0, #1
 8003eee:	3518      	adds	r5, #24
 8003ef0:	42ac      	cmp	r4, r5
 8003ef2:	bf08      	it	eq
 8003ef4:	f040 0001 	orreq.w	r0, r0, #1
 8003ef8:	3518      	adds	r5, #24
 8003efa:	42ac      	cmp	r4, r5
 8003efc:	bf08      	it	eq
 8003efe:	f040 0001 	orreq.w	r0, r0, #1
 8003f02:	3518      	adds	r5, #24
 8003f04:	42ac      	cmp	r4, r5
 8003f06:	bf08      	it	eq
 8003f08:	f040 0001 	orreq.w	r0, r0, #1
 8003f0c:	3518      	adds	r5, #24
 8003f0e:	42ac      	cmp	r4, r5
 8003f10:	bf08      	it	eq
 8003f12:	f040 0001 	orreq.w	r0, r0, #1
 8003f16:	3518      	adds	r5, #24
 8003f18:	42ac      	cmp	r4, r5
 8003f1a:	bf14      	ite	ne
 8003f1c:	4681      	movne	r9, r0
 8003f1e:	f040 0901 	orreq.w	r9, r0, #1
 8003f22:	f5a5 6592 	sub.w	r5, r5, #1168	; 0x490
 8003f26:	42ac      	cmp	r4, r5
 8003f28:	bf18      	it	ne
 8003f2a:	42b4      	cmpne	r4, r6
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2501      	moveq	r5, #1
 8003f30:	2500      	movne	r5, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_DMA_Start_IT+0xee>
 8003f34:	f1b9 0f00 	cmp.w	r9, #0
 8003f38:	d054      	beq.n	8003fe4 <HAL_DMA_Start_IT+0x198>
 8003f3a:	6826      	ldr	r6, [r4, #0]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3c:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
    __HAL_DMA_DISABLE(hdma);
 8003f40:	f026 0601 	bic.w	r6, r6, #1
 8003f44:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f46:	2d00      	cmp	r5, #0
 8003f48:	d078      	beq.n	800403c <HAL_DMA_Start_IT+0x1f0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f4a:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8003f4e:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003f50:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8003f54:	b117      	cbz	r7, 8003f5c <HAL_DMA_Start_IT+0x110>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f56:	e9dc 601c 	ldrd	r6, r0, [ip, #112]	; 0x70
 8003f5a:	6070      	str	r0, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f5c:	f8dc 605c 	ldr.w	r6, [ip, #92]	; 0x5c
 8003f60:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
 8003f64:	f006 081f 	and.w	r8, r6, #31
 8003f68:	fa0e fe08 	lsl.w	lr, lr, r8
 8003f6c:	f8ca e008 	str.w	lr, [sl, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f70:	6826      	ldr	r6, [r4, #0]
 8003f72:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8003f76:	6026      	str	r6, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f78:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f7a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8003f7e:	2b40      	cmp	r3, #64	; 0x40
 8003f80:	f000 80e2 	beq.w	8004148 <HAL_DMA_Start_IT+0x2fc>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f84:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003f86:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f88:	b91d      	cbnz	r5, 8003f92 <HAL_DMA_Start_IT+0x146>
 8003f8a:	f1b9 0f00 	cmp.w	r9, #0
 8003f8e:	f000 80e1 	beq.w	8004154 <HAL_DMA_Start_IT+0x308>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f92:	6823      	ldr	r3, [r4, #0]
 8003f94:	f023 031e 	bic.w	r3, r3, #30
 8003f98:	f043 0316 	orr.w	r3, r3, #22
 8003f9c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003f9e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8003fa2:	b11b      	cbz	r3, 8003fac <HAL_DMA_Start_IT+0x160>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	f043 0308 	orr.w	r3, r3, #8
 8003faa:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fac:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	03d2      	lsls	r2, r2, #15
 8003fb4:	d503      	bpl.n	8003fbe <HAL_DMA_Start_IT+0x172>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fbc:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8003fbe:	b11f      	cbz	r7, 8003fc8 <HAL_DMA_Start_IT+0x17c>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc6:	603b      	str	r3, [r7, #0]
    __HAL_DMA_ENABLE(hdma);
 8003fc8:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fca:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	6023      	str	r3, [r4, #0]
}
 8003fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40020058 	.word	0x40020058
 8003fdc:	40020010 	.word	0x40020010
 8003fe0:	40020040 	.word	0x40020040
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fe4:	4f61      	ldr	r7, [pc, #388]	; (800416c <HAL_DMA_Start_IT+0x320>)
 8003fe6:	4e62      	ldr	r6, [pc, #392]	; (8004170 <HAL_DMA_Start_IT+0x324>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fe8:	f8dc a058 	ldr.w	sl, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fec:	42b4      	cmp	r4, r6
 8003fee:	bf18      	it	ne
 8003ff0:	42bc      	cmpne	r4, r7
 8003ff2:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2701      	moveq	r7, #1
 8003ffa:	2700      	movne	r7, #0
 8003ffc:	42b4      	cmp	r4, r6
 8003ffe:	bf08      	it	eq
 8004000:	f047 0701 	orreq.w	r7, r7, #1
 8004004:	3614      	adds	r6, #20
 8004006:	42b4      	cmp	r4, r6
 8004008:	bf08      	it	eq
 800400a:	f047 0701 	orreq.w	r7, r7, #1
 800400e:	3614      	adds	r6, #20
 8004010:	42b4      	cmp	r4, r6
 8004012:	bf08      	it	eq
 8004014:	f047 0701 	orreq.w	r7, r7, #1
 8004018:	3614      	adds	r6, #20
 800401a:	42b4      	cmp	r4, r6
 800401c:	bf08      	it	eq
 800401e:	f047 0701 	orreq.w	r7, r7, #1
    __HAL_DMA_DISABLE(hdma);
 8004022:	6826      	ldr	r6, [r4, #0]
 8004024:	f026 0601 	bic.w	r6, r6, #1
 8004028:	6026      	str	r6, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800402a:	4e52      	ldr	r6, [pc, #328]	; (8004174 <HAL_DMA_Start_IT+0x328>)
 800402c:	42b4      	cmp	r4, r6
 800402e:	bf08      	it	eq
 8004030:	f047 0701 	orreq.w	r7, r7, #1
 8004034:	b917      	cbnz	r7, 800403c <HAL_DMA_Start_IT+0x1f0>
 8004036:	4f50      	ldr	r7, [pc, #320]	; (8004178 <HAL_DMA_Start_IT+0x32c>)
 8004038:	42bc      	cmp	r4, r7
 800403a:	d10b      	bne.n	8004054 <HAL_DMA_Start_IT+0x208>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800403c:	e9dc 6719 	ldrd	r6, r7, [ip, #100]	; 0x64
 8004040:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004042:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 8004046:	b117      	cbz	r7, 800404e <HAL_DMA_Start_IT+0x202>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004048:	e9dc 061c 	ldrd	r0, r6, [ip, #112]	; 0x70
 800404c:	6046      	str	r6, [r0, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800404e:	f1b9 0f00 	cmp.w	r9, #0
 8004052:	d183      	bne.n	8003f5c <HAL_DMA_Start_IT+0x110>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004054:	4f46      	ldr	r7, [pc, #280]	; (8004170 <HAL_DMA_Start_IT+0x324>)
 8004056:	f8df e114 	ldr.w	lr, [pc, #276]	; 800416c <HAL_DMA_Start_IT+0x320>
 800405a:	4574      	cmp	r4, lr
 800405c:	bf18      	it	ne
 800405e:	42bc      	cmpne	r4, r7
 8004060:	f10e 0e14 	add.w	lr, lr, #20
 8004064:	bf0c      	ite	eq
 8004066:	2701      	moveq	r7, #1
 8004068:	2700      	movne	r7, #0
 800406a:	4574      	cmp	r4, lr
 800406c:	bf08      	it	eq
 800406e:	f047 0701 	orreq.w	r7, r7, #1
 8004072:	f10e 0e14 	add.w	lr, lr, #20
 8004076:	4574      	cmp	r4, lr
 8004078:	bf08      	it	eq
 800407a:	f047 0701 	orreq.w	r7, r7, #1
 800407e:	f10e 0e14 	add.w	lr, lr, #20
 8004082:	4574      	cmp	r4, lr
 8004084:	bf08      	it	eq
 8004086:	f047 0701 	orreq.w	r7, r7, #1
 800408a:	f10e 0e14 	add.w	lr, lr, #20
 800408e:	4574      	cmp	r4, lr
 8004090:	bf08      	it	eq
 8004092:	f047 0701 	orreq.w	r7, r7, #1
 8004096:	f10e 0e14 	add.w	lr, lr, #20
 800409a:	4574      	cmp	r4, lr
 800409c:	bf08      	it	eq
 800409e:	f047 0701 	orreq.w	r7, r7, #1
 80040a2:	b917      	cbnz	r7, 80040aa <HAL_DMA_Start_IT+0x25e>
 80040a4:	4f34      	ldr	r7, [pc, #208]	; (8004178 <HAL_DMA_Start_IT+0x32c>)
 80040a6:	42bc      	cmp	r4, r7
 80040a8:	d154      	bne.n	8004154 <HAL_DMA_Start_IT+0x308>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040aa:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 80040ae:	2701      	movs	r7, #1
 80040b0:	f000 0e1f 	and.w	lr, r0, #31
 80040b4:	fa07 f70e 	lsl.w	r7, r7, lr
 80040b8:	f8ca 7004 	str.w	r7, [sl, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80040bc:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040be:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d043      	beq.n	800414e <HAL_DMA_Start_IT+0x302>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80040c6:	60a1      	str	r1, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80040c8:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	f023 030e 	bic.w	r3, r3, #14
 80040d0:	f043 030a 	orr.w	r3, r3, #10
 80040d4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80040d6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d02d      	beq.n	800413a <HAL_DMA_Start_IT+0x2ee>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040e6:	4b21      	ldr	r3, [pc, #132]	; (800416c <HAL_DMA_Start_IT+0x320>)
 80040e8:	4a21      	ldr	r2, [pc, #132]	; (8004170 <HAL_DMA_Start_IT+0x324>)
 80040ea:	4294      	cmp	r4, r2
 80040ec:	bf18      	it	ne
 80040ee:	429c      	cmpne	r4, r3
 80040f0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80040f4:	bf0c      	ite	eq
 80040f6:	2301      	moveq	r3, #1
 80040f8:	2300      	movne	r3, #0
 80040fa:	4294      	cmp	r4, r2
 80040fc:	bf08      	it	eq
 80040fe:	f043 0301 	orreq.w	r3, r3, #1
 8004102:	3214      	adds	r2, #20
 8004104:	4294      	cmp	r4, r2
 8004106:	bf08      	it	eq
 8004108:	f043 0301 	orreq.w	r3, r3, #1
 800410c:	3214      	adds	r2, #20
 800410e:	4294      	cmp	r4, r2
 8004110:	bf08      	it	eq
 8004112:	f043 0301 	orreq.w	r3, r3, #1
 8004116:	3214      	adds	r2, #20
 8004118:	4294      	cmp	r4, r2
 800411a:	bf08      	it	eq
 800411c:	f043 0301 	orreq.w	r3, r3, #1
 8004120:	3214      	adds	r2, #20
 8004122:	4294      	cmp	r4, r2
 8004124:	bf08      	it	eq
 8004126:	f043 0301 	orreq.w	r3, r3, #1
 800412a:	3214      	adds	r2, #20
 800412c:	4294      	cmp	r4, r2
 800412e:	bf08      	it	eq
 8004130:	f043 0301 	orreq.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	f43f af47 	beq.w	8003fc8 <HAL_DMA_Start_IT+0x17c>
 800413a:	f8dc 706c 	ldr.w	r7, [ip, #108]	; 0x6c
 800413e:	e735      	b.n	8003fac <HAL_DMA_Start_IT+0x160>
    return HAL_ERROR;
 8004140:	2001      	movs	r0, #1
 8004142:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8004144:	2002      	movs	r0, #2
}
 8004146:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004148:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800414a:	60e1      	str	r1, [r4, #12]
 800414c:	e71c      	b.n	8003f88 <HAL_DMA_Start_IT+0x13c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800414e:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004150:	60e1      	str	r1, [r4, #12]
 8004152:	e7ba      	b.n	80040ca <HAL_DMA_Start_IT+0x27e>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f023 030e 	bic.w	r3, r3, #14
 800415a:	f043 030a 	orr.w	r3, r3, #10
 800415e:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004160:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ba      	bne.n	80040de <HAL_DMA_Start_IT+0x292>
 8004168:	e7bd      	b.n	80040e6 <HAL_DMA_Start_IT+0x29a>
 800416a:	bf00      	nop
 800416c:	5802541c 	.word	0x5802541c
 8004170:	58025408 	.word	0x58025408
 8004174:	58025480 	.word	0x58025480
 8004178:	58025494 	.word	0x58025494

0800417c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800417c:	2800      	cmp	r0, #0
 800417e:	d05f      	beq.n	8004240 <HAL_DMA_Abort_IT+0xc4>
{
 8004180:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004182:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8004186:	4603      	mov	r3, r0
 8004188:	2a02      	cmp	r2, #2
 800418a:	d155      	bne.n	8004238 <HAL_DMA_Abort_IT+0xbc>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800418c:	6801      	ldr	r1, [r0, #0]
 800418e:	4a57      	ldr	r2, [pc, #348]	; (80042ec <HAL_DMA_Abort_IT+0x170>)
 8004190:	4291      	cmp	r1, r2
 8004192:	d048      	beq.n	8004226 <HAL_DMA_Abort_IT+0xaa>
 8004194:	3218      	adds	r2, #24
 8004196:	4291      	cmp	r1, r2
 8004198:	d045      	beq.n	8004226 <HAL_DMA_Abort_IT+0xaa>
 800419a:	3230      	adds	r2, #48	; 0x30
 800419c:	4c54      	ldr	r4, [pc, #336]	; (80042f0 <HAL_DMA_Abort_IT+0x174>)
 800419e:	4855      	ldr	r0, [pc, #340]	; (80042f4 <HAL_DMA_Abort_IT+0x178>)
 80041a0:	42a1      	cmp	r1, r4
 80041a2:	bf18      	it	ne
 80041a4:	4291      	cmpne	r1, r2
 80041a6:	f104 0448 	add.w	r4, r4, #72	; 0x48
 80041aa:	bf0c      	ite	eq
 80041ac:	2201      	moveq	r2, #1
 80041ae:	2200      	movne	r2, #0
 80041b0:	4281      	cmp	r1, r0
 80041b2:	bf08      	it	eq
 80041b4:	f042 0201 	orreq.w	r2, r2, #1
 80041b8:	3030      	adds	r0, #48	; 0x30
 80041ba:	42a1      	cmp	r1, r4
 80041bc:	bf08      	it	eq
 80041be:	f042 0201 	orreq.w	r2, r2, #1
 80041c2:	3430      	adds	r4, #48	; 0x30
 80041c4:	4281      	cmp	r1, r0
 80041c6:	bf08      	it	eq
 80041c8:	f042 0201 	orreq.w	r2, r2, #1
 80041cc:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80041d0:	42a1      	cmp	r1, r4
 80041d2:	bf08      	it	eq
 80041d4:	f042 0201 	orreq.w	r2, r2, #1
 80041d8:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80041dc:	4281      	cmp	r1, r0
 80041de:	bf08      	it	eq
 80041e0:	f042 0201 	orreq.w	r2, r2, #1
 80041e4:	3030      	adds	r0, #48	; 0x30
 80041e6:	42a1      	cmp	r1, r4
 80041e8:	bf08      	it	eq
 80041ea:	f042 0201 	orreq.w	r2, r2, #1
 80041ee:	3430      	adds	r4, #48	; 0x30
 80041f0:	4281      	cmp	r1, r0
 80041f2:	bf08      	it	eq
 80041f4:	f042 0201 	orreq.w	r2, r2, #1
 80041f8:	3030      	adds	r0, #48	; 0x30
 80041fa:	42a1      	cmp	r1, r4
 80041fc:	bf08      	it	eq
 80041fe:	f042 0201 	orreq.w	r2, r2, #1
 8004202:	3430      	adds	r4, #48	; 0x30
 8004204:	4281      	cmp	r1, r0
 8004206:	bf08      	it	eq
 8004208:	f042 0201 	orreq.w	r2, r2, #1
 800420c:	3030      	adds	r0, #48	; 0x30
 800420e:	42a1      	cmp	r1, r4
 8004210:	bf08      	it	eq
 8004212:	f042 0201 	orreq.w	r2, r2, #1
 8004216:	4281      	cmp	r1, r0
 8004218:	bf08      	it	eq
 800421a:	f042 0201 	orreq.w	r2, r2, #1
 800421e:	b912      	cbnz	r2, 8004226 <HAL_DMA_Abort_IT+0xaa>
 8004220:	4a35      	ldr	r2, [pc, #212]	; (80042f8 <HAL_DMA_Abort_IT+0x17c>)
 8004222:	4291      	cmp	r1, r2
 8004224:	d10e      	bne.n	8004244 <HAL_DMA_Abort_IT+0xc8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004226:	2204      	movs	r2, #4
  return HAL_OK;
 8004228:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800422a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800422e:	680b      	ldr	r3, [r1, #0]
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	600b      	str	r3, [r1, #0]
}
 8004236:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004238:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800423a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800423e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004240:	2001      	movs	r0, #1
}
 8004242:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004244:	4a2d      	ldr	r2, [pc, #180]	; (80042fc <HAL_DMA_Abort_IT+0x180>)
 8004246:	4d2e      	ldr	r5, [pc, #184]	; (8004300 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004248:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800424a:	42a9      	cmp	r1, r5
 800424c:	bf18      	it	ne
 800424e:	4291      	cmpne	r1, r2
 8004250:	4c2c      	ldr	r4, [pc, #176]	; (8004304 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004252:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004256:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 800425a:	bf0c      	ite	eq
 800425c:	2201      	moveq	r2, #1
 800425e:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004260:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004262:	42a1      	cmp	r1, r4
 8004264:	bf08      	it	eq
 8004266:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800426a:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800426c:	3428      	adds	r4, #40	; 0x28
 800426e:	42a9      	cmp	r1, r5
 8004270:	bf08      	it	eq
 8004272:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8004276:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800427a:	42a1      	cmp	r1, r4
 800427c:	bf08      	it	eq
 800427e:	f042 0201 	orreq.w	r2, r2, #1
 8004282:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8004284:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004286:	42a1      	cmp	r1, r4
 8004288:	bf08      	it	eq
 800428a:	f042 0201 	orreq.w	r2, r2, #1
 800428e:	481e      	ldr	r0, [pc, #120]	; (8004308 <HAL_DMA_Abort_IT+0x18c>)
 8004290:	4281      	cmp	r1, r0
 8004292:	bf08      	it	eq
 8004294:	f042 0201 	orreq.w	r2, r2, #1
 8004298:	b912      	cbnz	r2, 80042a0 <HAL_DMA_Abort_IT+0x124>
 800429a:	4a1c      	ldr	r2, [pc, #112]	; (800430c <HAL_DMA_Abort_IT+0x190>)
 800429c:	4291      	cmp	r1, r2
 800429e:	d117      	bne.n	80042d0 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042a0:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042a2:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042a4:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042a8:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042aa:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042ae:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042b2:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042b4:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042b6:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80042b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042ba:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 80042be:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80042c0:	b132      	cbz	r2, 80042d0 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042c2:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c4:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042c8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80042cc:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042ce:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80042d0:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 80042d2:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 80042d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 80042d6:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80042da:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80042de:	b11a      	cbz	r2, 80042e8 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 80042e0:	4618      	mov	r0, r3
 80042e2:	4790      	blx	r2
  return HAL_OK;
 80042e4:	4620      	mov	r0, r4
}
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 80042e8:	4610      	mov	r0, r2
}
 80042ea:	bd38      	pop	{r3, r4, r5, pc}
 80042ec:	40020010 	.word	0x40020010
 80042f0:	40020040 	.word	0x40020040
 80042f4:	40020070 	.word	0x40020070
 80042f8:	400204b8 	.word	0x400204b8
 80042fc:	5802541c 	.word	0x5802541c
 8004300:	58025408 	.word	0x58025408
 8004304:	58025430 	.word	0x58025430
 8004308:	58025480 	.word	0x58025480
 800430c:	58025494 	.word	0x58025494

08004310 <HAL_DMA_IRQHandler>:
{
 8004310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t count = 0U;
 8004314:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8004316:	4b9c      	ldr	r3, [pc, #624]	; (8004588 <HAL_DMA_IRQHandler+0x278>)
{
 8004318:	b083      	sub	sp, #12
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800431a:	4e9c      	ldr	r6, [pc, #624]	; (800458c <HAL_DMA_IRQHandler+0x27c>)
  uint32_t timeout = SystemCoreClock / 9600U;
 800431c:	681d      	ldr	r5, [r3, #0]
{
 800431e:	4681      	mov	r9, r0
  __IO uint32_t count = 0U;
 8004320:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004322:	6803      	ldr	r3, [r0, #0]
 8004324:	4a9a      	ldr	r2, [pc, #616]	; (8004590 <HAL_DMA_IRQHandler+0x280>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004326:	6d84      	ldr	r4, [r0, #88]	; 0x58
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004328:	4293      	cmp	r3, r2
 800432a:	bf18      	it	ne
 800432c:	42b3      	cmpne	r3, r6
  tmpisr_dma  = regs_dma->ISR;
 800432e:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004330:	bf08      	it	eq
 8004332:	2601      	moveq	r6, #1
  tmpisr_bdma = regs_bdma->ISR;
 8004334:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004336:	bf18      	it	ne
 8004338:	2600      	movne	r6, #0
 800433a:	d045      	beq.n	80043c8 <HAL_DMA_IRQHandler+0xb8>
 800433c:	3218      	adds	r2, #24
 800433e:	4895      	ldr	r0, [pc, #596]	; (8004594 <HAL_DMA_IRQHandler+0x284>)
 8004340:	4283      	cmp	r3, r0
 8004342:	bf18      	it	ne
 8004344:	4293      	cmpne	r3, r2
 8004346:	f100 0018 	add.w	r0, r0, #24
 800434a:	bf0c      	ite	eq
 800434c:	2201      	moveq	r2, #1
 800434e:	2200      	movne	r2, #0
 8004350:	4283      	cmp	r3, r0
 8004352:	bf08      	it	eq
 8004354:	f042 0201 	orreq.w	r2, r2, #1
 8004358:	3018      	adds	r0, #24
 800435a:	4283      	cmp	r3, r0
 800435c:	bf08      	it	eq
 800435e:	f042 0201 	orreq.w	r2, r2, #1
 8004362:	3018      	adds	r0, #24
 8004364:	4283      	cmp	r3, r0
 8004366:	bf08      	it	eq
 8004368:	f042 0201 	orreq.w	r2, r2, #1
 800436c:	3018      	adds	r0, #24
 800436e:	4283      	cmp	r3, r0
 8004370:	bf08      	it	eq
 8004372:	f042 0201 	orreq.w	r2, r2, #1
 8004376:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800437a:	4283      	cmp	r3, r0
 800437c:	bf08      	it	eq
 800437e:	f042 0201 	orreq.w	r2, r2, #1
 8004382:	3018      	adds	r0, #24
 8004384:	4283      	cmp	r3, r0
 8004386:	bf08      	it	eq
 8004388:	f042 0201 	orreq.w	r2, r2, #1
 800438c:	3018      	adds	r0, #24
 800438e:	4283      	cmp	r3, r0
 8004390:	bf08      	it	eq
 8004392:	f042 0201 	orreq.w	r2, r2, #1
 8004396:	3018      	adds	r0, #24
 8004398:	4283      	cmp	r3, r0
 800439a:	bf08      	it	eq
 800439c:	f042 0201 	orreq.w	r2, r2, #1
 80043a0:	3018      	adds	r0, #24
 80043a2:	4283      	cmp	r3, r0
 80043a4:	bf08      	it	eq
 80043a6:	f042 0201 	orreq.w	r2, r2, #1
 80043aa:	3018      	adds	r0, #24
 80043ac:	4283      	cmp	r3, r0
 80043ae:	bf08      	it	eq
 80043b0:	f042 0201 	orreq.w	r2, r2, #1
 80043b4:	3018      	adds	r0, #24
 80043b6:	4283      	cmp	r3, r0
 80043b8:	bf08      	it	eq
 80043ba:	f042 0201 	orreq.w	r2, r2, #1
 80043be:	b91a      	cbnz	r2, 80043c8 <HAL_DMA_IRQHandler+0xb8>
 80043c0:	4a75      	ldr	r2, [pc, #468]	; (8004598 <HAL_DMA_IRQHandler+0x288>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	f040 8250 	bne.w	8004868 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c8:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
 80043cc:	2208      	movs	r2, #8
 80043ce:	f001 0c1f 	and.w	ip, r1, #31
 80043d2:	fa02 f20c 	lsl.w	r2, r2, ip
 80043d6:	4217      	tst	r7, r2
 80043d8:	f040 8188 	bne.w	80046ec <HAL_DMA_IRQHandler+0x3dc>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043dc:	fa27 f20c 	lsr.w	r2, r7, ip
 80043e0:	07d2      	lsls	r2, r2, #31
 80043e2:	d50c      	bpl.n	80043fe <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	0610      	lsls	r0, r2, #24
 80043e8:	d509      	bpl.n	80043fe <HAL_DMA_IRQHandler+0xee>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043ea:	2201      	movs	r2, #1
 80043ec:	fa02 f20c 	lsl.w	r2, r2, ip
 80043f0:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043f2:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80043f6:	f042 0202 	orr.w	r2, r2, #2
 80043fa:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043fe:	f04f 0e04 	mov.w	lr, #4
 8004402:	fa0e f00c 	lsl.w	r0, lr, ip
 8004406:	4238      	tst	r0, r7
 8004408:	d05b      	beq.n	80044c2 <HAL_DMA_IRQHandler+0x1b2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800440a:	2e00      	cmp	r6, #0
 800440c:	d14f      	bne.n	80044ae <HAL_DMA_IRQHandler+0x19e>
 800440e:	4a61      	ldr	r2, [pc, #388]	; (8004594 <HAL_DMA_IRQHandler+0x284>)
 8004410:	f8df 8188 	ldr.w	r8, [pc, #392]	; 800459c <HAL_DMA_IRQHandler+0x28c>
 8004414:	4543      	cmp	r3, r8
 8004416:	bf18      	it	ne
 8004418:	4293      	cmpne	r3, r2
 800441a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800441e:	bf0c      	ite	eq
 8004420:	2201      	moveq	r2, #1
 8004422:	2200      	movne	r2, #0
 8004424:	4543      	cmp	r3, r8
 8004426:	bf08      	it	eq
 8004428:	f042 0201 	orreq.w	r2, r2, #1
 800442c:	f108 0818 	add.w	r8, r8, #24
 8004430:	4543      	cmp	r3, r8
 8004432:	bf08      	it	eq
 8004434:	f042 0201 	orreq.w	r2, r2, #1
 8004438:	f108 0818 	add.w	r8, r8, #24
 800443c:	4543      	cmp	r3, r8
 800443e:	bf08      	it	eq
 8004440:	f042 0201 	orreq.w	r2, r2, #1
 8004444:	f108 0818 	add.w	r8, r8, #24
 8004448:	4543      	cmp	r3, r8
 800444a:	bf08      	it	eq
 800444c:	f042 0201 	orreq.w	r2, r2, #1
 8004450:	f508 7856 	add.w	r8, r8, #856	; 0x358
 8004454:	4543      	cmp	r3, r8
 8004456:	bf08      	it	eq
 8004458:	f042 0201 	orreq.w	r2, r2, #1
 800445c:	f108 0818 	add.w	r8, r8, #24
 8004460:	4543      	cmp	r3, r8
 8004462:	bf08      	it	eq
 8004464:	f042 0201 	orreq.w	r2, r2, #1
 8004468:	f108 0818 	add.w	r8, r8, #24
 800446c:	4543      	cmp	r3, r8
 800446e:	bf08      	it	eq
 8004470:	f042 0201 	orreq.w	r2, r2, #1
 8004474:	f108 0818 	add.w	r8, r8, #24
 8004478:	4543      	cmp	r3, r8
 800447a:	bf08      	it	eq
 800447c:	f042 0201 	orreq.w	r2, r2, #1
 8004480:	f108 0818 	add.w	r8, r8, #24
 8004484:	4543      	cmp	r3, r8
 8004486:	bf08      	it	eq
 8004488:	f042 0201 	orreq.w	r2, r2, #1
 800448c:	f108 0818 	add.w	r8, r8, #24
 8004490:	4543      	cmp	r3, r8
 8004492:	bf08      	it	eq
 8004494:	f042 0201 	orreq.w	r2, r2, #1
 8004498:	f108 0818 	add.w	r8, r8, #24
 800449c:	4543      	cmp	r3, r8
 800449e:	bf08      	it	eq
 80044a0:	f042 0201 	orreq.w	r2, r2, #1
 80044a4:	b91a      	cbnz	r2, 80044ae <HAL_DMA_IRQHandler+0x19e>
 80044a6:	4a3c      	ldr	r2, [pc, #240]	; (8004598 <HAL_DMA_IRQHandler+0x288>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	f040 8219 	bne.w	80048e0 <HAL_DMA_IRQHandler+0x5d0>
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	0792      	lsls	r2, r2, #30
 80044b2:	d506      	bpl.n	80044c2 <HAL_DMA_IRQHandler+0x1b2>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044b4:	60a0      	str	r0, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044b6:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 80044ba:	f042 0204 	orr.w	r2, r2, #4
 80044be:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044c2:	2210      	movs	r2, #16
 80044c4:	fa02 fc0c 	lsl.w	ip, r2, ip
 80044c8:	ea1c 0f07 	tst.w	ip, r7
 80044cc:	d06c      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	d145      	bne.n	800455e <HAL_DMA_IRQHandler+0x24e>
 80044d2:	4a30      	ldr	r2, [pc, #192]	; (8004594 <HAL_DMA_IRQHandler+0x284>)
 80044d4:	4e31      	ldr	r6, [pc, #196]	; (800459c <HAL_DMA_IRQHandler+0x28c>)
 80044d6:	42b3      	cmp	r3, r6
 80044d8:	bf18      	it	ne
 80044da:	4293      	cmpne	r3, r2
 80044dc:	f106 0630 	add.w	r6, r6, #48	; 0x30
 80044e0:	bf0c      	ite	eq
 80044e2:	2201      	moveq	r2, #1
 80044e4:	2200      	movne	r2, #0
 80044e6:	42b3      	cmp	r3, r6
 80044e8:	bf08      	it	eq
 80044ea:	f042 0201 	orreq.w	r2, r2, #1
 80044ee:	3618      	adds	r6, #24
 80044f0:	42b3      	cmp	r3, r6
 80044f2:	bf08      	it	eq
 80044f4:	f042 0201 	orreq.w	r2, r2, #1
 80044f8:	3618      	adds	r6, #24
 80044fa:	42b3      	cmp	r3, r6
 80044fc:	bf08      	it	eq
 80044fe:	f042 0201 	orreq.w	r2, r2, #1
 8004502:	3618      	adds	r6, #24
 8004504:	42b3      	cmp	r3, r6
 8004506:	bf08      	it	eq
 8004508:	f042 0201 	orreq.w	r2, r2, #1
 800450c:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8004510:	42b3      	cmp	r3, r6
 8004512:	bf08      	it	eq
 8004514:	f042 0201 	orreq.w	r2, r2, #1
 8004518:	3618      	adds	r6, #24
 800451a:	42b3      	cmp	r3, r6
 800451c:	bf08      	it	eq
 800451e:	f042 0201 	orreq.w	r2, r2, #1
 8004522:	3618      	adds	r6, #24
 8004524:	42b3      	cmp	r3, r6
 8004526:	bf08      	it	eq
 8004528:	f042 0201 	orreq.w	r2, r2, #1
 800452c:	3618      	adds	r6, #24
 800452e:	42b3      	cmp	r3, r6
 8004530:	bf08      	it	eq
 8004532:	f042 0201 	orreq.w	r2, r2, #1
 8004536:	3618      	adds	r6, #24
 8004538:	42b3      	cmp	r3, r6
 800453a:	bf08      	it	eq
 800453c:	f042 0201 	orreq.w	r2, r2, #1
 8004540:	3618      	adds	r6, #24
 8004542:	42b3      	cmp	r3, r6
 8004544:	bf08      	it	eq
 8004546:	f042 0201 	orreq.w	r2, r2, #1
 800454a:	3618      	adds	r6, #24
 800454c:	42b3      	cmp	r3, r6
 800454e:	bf08      	it	eq
 8004550:	f042 0201 	orreq.w	r2, r2, #1
 8004554:	b91a      	cbnz	r2, 800455e <HAL_DMA_IRQHandler+0x24e>
 8004556:	4a10      	ldr	r2, [pc, #64]	; (8004598 <HAL_DMA_IRQHandler+0x288>)
 8004558:	4293      	cmp	r3, r2
 800455a:	f040 81c9 	bne.w	80048f0 <HAL_DMA_IRQHandler+0x5e0>
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	0710      	lsls	r0, r2, #28
 8004562:	d521      	bpl.n	80045a8 <HAL_DMA_IRQHandler+0x298>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004564:	f8c4 c008 	str.w	ip, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	0356      	lsls	r6, r2, #13
 800456c:	f100 814c 	bmi.w	8004808 <HAL_DMA_IRQHandler+0x4f8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	05d2      	lsls	r2, r2, #23
 8004574:	d403      	bmi.n	800457e <HAL_DMA_IRQHandler+0x26e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	f022 0208 	bic.w	r2, r2, #8
 800457c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800457e:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8004582:	b18b      	cbz	r3, 80045a8 <HAL_DMA_IRQHandler+0x298>
 8004584:	e00c      	b.n	80045a0 <HAL_DMA_IRQHandler+0x290>
 8004586:	bf00      	nop
 8004588:	2000009c 	.word	0x2000009c
 800458c:	40020010 	.word	0x40020010
 8004590:	40020028 	.word	0x40020028
 8004594:	40020058 	.word	0x40020058
 8004598:	400204b8 	.word	0x400204b8
 800459c:	40020040 	.word	0x40020040
            hdma->XferHalfCpltCallback(hdma);
 80045a0:	4648      	mov	r0, r9
 80045a2:	4798      	blx	r3
 80045a4:	f8d9 105c 	ldr.w	r1, [r9, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045a8:	f001 011f 	and.w	r1, r1, #31
 80045ac:	2620      	movs	r6, #32
 80045ae:	408e      	lsls	r6, r1
 80045b0:	423e      	tst	r6, r7
 80045b2:	d068      	beq.n	8004686 <HAL_DMA_IRQHandler+0x376>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80045b4:	f8d9 2000 	ldr.w	r2, [r9]
 80045b8:	4ba5      	ldr	r3, [pc, #660]	; (8004850 <HAL_DMA_IRQHandler+0x540>)
 80045ba:	4fa6      	ldr	r7, [pc, #664]	; (8004854 <HAL_DMA_IRQHandler+0x544>)
 80045bc:	42ba      	cmp	r2, r7
 80045be:	bf18      	it	ne
 80045c0:	429a      	cmpne	r2, r3
 80045c2:	f107 0718 	add.w	r7, r7, #24
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	42ba      	cmp	r2, r7
 80045ce:	bf08      	it	eq
 80045d0:	f043 0301 	orreq.w	r3, r3, #1
 80045d4:	3718      	adds	r7, #24
 80045d6:	42ba      	cmp	r2, r7
 80045d8:	bf08      	it	eq
 80045da:	f043 0301 	orreq.w	r3, r3, #1
 80045de:	3718      	adds	r7, #24
 80045e0:	42ba      	cmp	r2, r7
 80045e2:	bf08      	it	eq
 80045e4:	f043 0301 	orreq.w	r3, r3, #1
 80045e8:	3718      	adds	r7, #24
 80045ea:	42ba      	cmp	r2, r7
 80045ec:	bf08      	it	eq
 80045ee:	f043 0301 	orreq.w	r3, r3, #1
 80045f2:	3718      	adds	r7, #24
 80045f4:	42ba      	cmp	r2, r7
 80045f6:	bf08      	it	eq
 80045f8:	f043 0301 	orreq.w	r3, r3, #1
 80045fc:	3718      	adds	r7, #24
 80045fe:	42ba      	cmp	r2, r7
 8004600:	bf08      	it	eq
 8004602:	f043 0301 	orreq.w	r3, r3, #1
 8004606:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800460a:	42ba      	cmp	r2, r7
 800460c:	bf08      	it	eq
 800460e:	f043 0301 	orreq.w	r3, r3, #1
 8004612:	3718      	adds	r7, #24
 8004614:	42ba      	cmp	r2, r7
 8004616:	bf08      	it	eq
 8004618:	f043 0301 	orreq.w	r3, r3, #1
 800461c:	3718      	adds	r7, #24
 800461e:	42ba      	cmp	r2, r7
 8004620:	bf08      	it	eq
 8004622:	f043 0301 	orreq.w	r3, r3, #1
 8004626:	3718      	adds	r7, #24
 8004628:	42ba      	cmp	r2, r7
 800462a:	bf08      	it	eq
 800462c:	f043 0301 	orreq.w	r3, r3, #1
 8004630:	3718      	adds	r7, #24
 8004632:	42ba      	cmp	r2, r7
 8004634:	bf08      	it	eq
 8004636:	f043 0301 	orreq.w	r3, r3, #1
 800463a:	3718      	adds	r7, #24
 800463c:	42ba      	cmp	r2, r7
 800463e:	bf08      	it	eq
 8004640:	f043 0301 	orreq.w	r3, r3, #1
 8004644:	3718      	adds	r7, #24
 8004646:	42ba      	cmp	r2, r7
 8004648:	bf08      	it	eq
 800464a:	f043 0301 	orreq.w	r3, r3, #1
 800464e:	b91b      	cbnz	r3, 8004658 <HAL_DMA_IRQHandler+0x348>
 8004650:	4b81      	ldr	r3, [pc, #516]	; (8004858 <HAL_DMA_IRQHandler+0x548>)
 8004652:	429a      	cmp	r2, r3
 8004654:	f040 8162 	bne.w	800491c <HAL_DMA_IRQHandler+0x60c>
 8004658:	6813      	ldr	r3, [r2, #0]
 800465a:	06db      	lsls	r3, r3, #27
 800465c:	d513      	bpl.n	8004686 <HAL_DMA_IRQHandler+0x376>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800465e:	60a6      	str	r6, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004660:	f899 3035 	ldrb.w	r3, [r9, #53]	; 0x35
 8004664:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004666:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004668:	f000 80ae 	beq.w	80047c8 <HAL_DMA_IRQHandler+0x4b8>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800466c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004670:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004672:	f000 80d3 	beq.w	800481c <HAL_DMA_IRQHandler+0x50c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004676:	031c      	lsls	r4, r3, #12
 8004678:	f140 80de 	bpl.w	8004838 <HAL_DMA_IRQHandler+0x528>
          if(hdma->XferCpltCallback != NULL)
 800467c:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 8004680:	b10b      	cbz	r3, 8004686 <HAL_DMA_IRQHandler+0x376>
            hdma->XferCpltCallback(hdma);
 8004682:	4648      	mov	r0, r9
 8004684:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004686:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80b9 	beq.w	8004802 <HAL_DMA_IRQHandler+0x4f2>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004690:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
 8004694:	07d8      	lsls	r0, r3, #31
 8004696:	d51f      	bpl.n	80046d8 <HAL_DMA_IRQHandler+0x3c8>
        __HAL_DMA_DISABLE(hdma);
 8004698:	f8d9 2000 	ldr.w	r2, [r9]
        hdma->State = HAL_DMA_STATE_ABORT;
 800469c:	2104      	movs	r1, #4
 800469e:	f889 1035 	strb.w	r1, [r9, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	f023 0301 	bic.w	r3, r3, #1
 80046a8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046aa:	4b6c      	ldr	r3, [pc, #432]	; (800485c <HAL_DMA_IRQHandler+0x54c>)
 80046ac:	fba3 3505 	umull	r3, r5, r3, r5
 80046b0:	0aad      	lsrs	r5, r5, #10
 80046b2:	e002      	b.n	80046ba <HAL_DMA_IRQHandler+0x3aa>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046b4:	6813      	ldr	r3, [r2, #0]
 80046b6:	07d9      	lsls	r1, r3, #31
 80046b8:	d504      	bpl.n	80046c4 <HAL_DMA_IRQHandler+0x3b4>
          if (++count > timeout)
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	3301      	adds	r3, #1
 80046be:	42ab      	cmp	r3, r5
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	d9f7      	bls.n	80046b4 <HAL_DMA_IRQHandler+0x3a4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046c4:	6813      	ldr	r3, [r2, #0]
 80046c6:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80046c8:	bf4c      	ite	mi
 80046ca:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80046cc:	2301      	movpl	r3, #1
 80046ce:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80046d2:	2300      	movs	r3, #0
 80046d4:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80046d8:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8090 	beq.w	8004802 <HAL_DMA_IRQHandler+0x4f2>
          hdma->XferCpltCallback(hdma);
 80046e2:	4648      	mov	r0, r9
}
 80046e4:	b003      	add	sp, #12
 80046e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
          hdma->XferCpltCallback(hdma);
 80046ea:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	0740      	lsls	r0, r0, #29
 80046f0:	d50a      	bpl.n	8004708 <HAL_DMA_IRQHandler+0x3f8>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	f020 0004 	bic.w	r0, r0, #4
 80046f8:	6018      	str	r0, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046fa:	60a2      	str	r2, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046fc:	f8d9 2054 	ldr.w	r2, [r9, #84]	; 0x54
 8004700:	f042 0201 	orr.w	r2, r2, #1
 8004704:	f8c9 2054 	str.w	r2, [r9, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004708:	fa27 f20c 	lsr.w	r2, r7, ip
 800470c:	07d2      	lsls	r2, r2, #31
 800470e:	f57f ae76 	bpl.w	80043fe <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004712:	4a53      	ldr	r2, [pc, #332]	; (8004860 <HAL_DMA_IRQHandler+0x550>)
 8004714:	4853      	ldr	r0, [pc, #332]	; (8004864 <HAL_DMA_IRQHandler+0x554>)
 8004716:	4283      	cmp	r3, r0
 8004718:	bf18      	it	ne
 800471a:	4293      	cmpne	r3, r2
 800471c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004720:	bf0c      	ite	eq
 8004722:	2201      	moveq	r2, #1
 8004724:	2200      	movne	r2, #0
 8004726:	4283      	cmp	r3, r0
 8004728:	bf08      	it	eq
 800472a:	f042 0201 	orreq.w	r2, r2, #1
 800472e:	3018      	adds	r0, #24
 8004730:	4283      	cmp	r3, r0
 8004732:	bf08      	it	eq
 8004734:	f042 0201 	orreq.w	r2, r2, #1
 8004738:	3018      	adds	r0, #24
 800473a:	4283      	cmp	r3, r0
 800473c:	bf08      	it	eq
 800473e:	f042 0201 	orreq.w	r2, r2, #1
 8004742:	3018      	adds	r0, #24
 8004744:	4283      	cmp	r3, r0
 8004746:	bf08      	it	eq
 8004748:	f042 0201 	orreq.w	r2, r2, #1
 800474c:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004750:	4283      	cmp	r3, r0
 8004752:	bf08      	it	eq
 8004754:	f042 0201 	orreq.w	r2, r2, #1
 8004758:	3018      	adds	r0, #24
 800475a:	4283      	cmp	r3, r0
 800475c:	bf08      	it	eq
 800475e:	f042 0201 	orreq.w	r2, r2, #1
 8004762:	3018      	adds	r0, #24
 8004764:	4283      	cmp	r3, r0
 8004766:	bf08      	it	eq
 8004768:	f042 0201 	orreq.w	r2, r2, #1
 800476c:	3018      	adds	r0, #24
 800476e:	4283      	cmp	r3, r0
 8004770:	bf08      	it	eq
 8004772:	f042 0201 	orreq.w	r2, r2, #1
 8004776:	3018      	adds	r0, #24
 8004778:	4283      	cmp	r3, r0
 800477a:	bf08      	it	eq
 800477c:	f042 0201 	orreq.w	r2, r2, #1
 8004780:	3018      	adds	r0, #24
 8004782:	4283      	cmp	r3, r0
 8004784:	bf08      	it	eq
 8004786:	f042 0201 	orreq.w	r2, r2, #1
 800478a:	3018      	adds	r0, #24
 800478c:	4283      	cmp	r3, r0
 800478e:	bf08      	it	eq
 8004790:	f042 0201 	orreq.w	r2, r2, #1
 8004794:	3018      	adds	r0, #24
 8004796:	4283      	cmp	r3, r0
 8004798:	bf08      	it	eq
 800479a:	f042 0201 	orreq.w	r2, r2, #1
 800479e:	2a00      	cmp	r2, #0
 80047a0:	f47f ae20 	bne.w	80043e4 <HAL_DMA_IRQHandler+0xd4>
 80047a4:	2e00      	cmp	r6, #0
 80047a6:	f47f ae1d 	bne.w	80043e4 <HAL_DMA_IRQHandler+0xd4>
 80047aa:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047ac:	2204      	movs	r2, #4
 80047ae:	fa02 f20c 	lsl.w	r2, r2, ip
 80047b2:	423a      	tst	r2, r7
 80047b4:	f040 8094 	bne.w	80048e0 <HAL_DMA_IRQHandler+0x5d0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047b8:	2210      	movs	r2, #16
 80047ba:	fa02 fc0c 	lsl.w	ip, r2, ip
 80047be:	ea17 0f0c 	tst.w	r7, ip
 80047c2:	f43f aef1 	beq.w	80045a8 <HAL_DMA_IRQHandler+0x298>
 80047c6:	e684      	b.n	80044d2 <HAL_DMA_IRQHandler+0x1c2>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047c8:	f023 0316 	bic.w	r3, r3, #22
 80047cc:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047ce:	6953      	ldr	r3, [r2, #20]
 80047d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d4:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047d6:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 80047da:	b39b      	cbz	r3, 8004844 <HAL_DMA_IRQHandler+0x534>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047dc:	6813      	ldr	r3, [r2, #0]
 80047de:	f023 0308 	bic.w	r3, r3, #8
 80047e2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047e4:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80047e6:	2501      	movs	r5, #1
          __HAL_UNLOCK(hdma);
 80047e8:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047ea:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 80047ee:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047f2:	60a1      	str	r1, [r4, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80047f4:	f889 5035 	strb.w	r5, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80047f8:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f af70 	bne.w	80046e2 <HAL_DMA_IRQHandler+0x3d2>
}
 8004802:	b003      	add	sp, #12
 8004804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	0318      	lsls	r0, r3, #12
 800480c:	f57f aeb7 	bpl.w	800457e <HAL_DMA_IRQHandler+0x26e>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004810:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8004814:	2b00      	cmp	r3, #0
 8004816:	f47f aec3 	bne.w	80045a0 <HAL_DMA_IRQHandler+0x290>
 800481a:	e6c5      	b.n	80045a8 <HAL_DMA_IRQHandler+0x298>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800481c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8004820:	f47f af2c 	bne.w	800467c <HAL_DMA_IRQHandler+0x36c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004824:	6811      	ldr	r1, [r2, #0]
 8004826:	f021 0110 	bic.w	r1, r1, #16
 800482a:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800482c:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 800482e:	f889 3034 	strb.w	r3, [r9, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8004832:	f889 2035 	strb.w	r2, [r9, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8004836:	e721      	b.n	800467c <HAL_DMA_IRQHandler+0x36c>
            if(hdma->XferM1CpltCallback != NULL)
 8004838:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 800483c:	2b00      	cmp	r3, #0
 800483e:	f47f af20 	bne.w	8004682 <HAL_DMA_IRQHandler+0x372>
 8004842:	e720      	b.n	8004686 <HAL_DMA_IRQHandler+0x376>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004844:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1c7      	bne.n	80047dc <HAL_DMA_IRQHandler+0x4cc>
 800484c:	e7ca      	b.n	80047e4 <HAL_DMA_IRQHandler+0x4d4>
 800484e:	bf00      	nop
 8004850:	40020010 	.word	0x40020010
 8004854:	40020028 	.word	0x40020028
 8004858:	400204b8 	.word	0x400204b8
 800485c:	1b4e81b5 	.word	0x1b4e81b5
 8004860:	40020058 	.word	0x40020058
 8004864:	40020040 	.word	0x40020040
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004868:	4a4e      	ldr	r2, [pc, #312]	; (80049a4 <HAL_DMA_IRQHandler+0x694>)
 800486a:	4d4f      	ldr	r5, [pc, #316]	; (80049a8 <HAL_DMA_IRQHandler+0x698>)
 800486c:	42ab      	cmp	r3, r5
 800486e:	bf18      	it	ne
 8004870:	4293      	cmpne	r3, r2
 8004872:	f105 0514 	add.w	r5, r5, #20
 8004876:	bf0c      	ite	eq
 8004878:	2201      	moveq	r2, #1
 800487a:	2200      	movne	r2, #0
 800487c:	42ab      	cmp	r3, r5
 800487e:	bf08      	it	eq
 8004880:	f042 0201 	orreq.w	r2, r2, #1
 8004884:	3514      	adds	r5, #20
 8004886:	42ab      	cmp	r3, r5
 8004888:	bf08      	it	eq
 800488a:	f042 0201 	orreq.w	r2, r2, #1
 800488e:	3514      	adds	r5, #20
 8004890:	42ab      	cmp	r3, r5
 8004892:	bf08      	it	eq
 8004894:	f042 0201 	orreq.w	r2, r2, #1
 8004898:	3514      	adds	r5, #20
 800489a:	42ab      	cmp	r3, r5
 800489c:	bf08      	it	eq
 800489e:	f042 0201 	orreq.w	r2, r2, #1
 80048a2:	3514      	adds	r5, #20
 80048a4:	42ab      	cmp	r3, r5
 80048a6:	bf08      	it	eq
 80048a8:	f042 0201 	orreq.w	r2, r2, #1
 80048ac:	b912      	cbnz	r2, 80048b4 <HAL_DMA_IRQHandler+0x5a4>
 80048ae:	4a3f      	ldr	r2, [pc, #252]	; (80049ac <HAL_DMA_IRQHandler+0x69c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d1a6      	bne.n	8004802 <HAL_DMA_IRQHandler+0x4f2>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80048b4:	f8d9 505c 	ldr.w	r5, [r9, #92]	; 0x5c
 80048b8:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80048ba:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80048bc:	f005 051f 	and.w	r5, r5, #31
 80048c0:	40ae      	lsls	r6, r5
 80048c2:	420e      	tst	r6, r1
 80048c4:	d019      	beq.n	80048fa <HAL_DMA_IRQHandler+0x5ea>
 80048c6:	0757      	lsls	r7, r2, #29
 80048c8:	d517      	bpl.n	80048fa <HAL_DMA_IRQHandler+0x5ea>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ca:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80048cc:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ce:	d54b      	bpl.n	8004968 <HAL_DMA_IRQHandler+0x658>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80048d0:	03d1      	lsls	r1, r2, #15
 80048d2:	d44f      	bmi.n	8004974 <HAL_DMA_IRQHandler+0x664>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048d4:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f47f af02 	bne.w	80046e2 <HAL_DMA_IRQHandler+0x3d2>
 80048de:	e790      	b.n	8004802 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80048e0:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048e2:	2210      	movs	r2, #16
 80048e4:	fa02 fc0c 	lsl.w	ip, r2, ip
 80048e8:	ea17 0f0c 	tst.w	r7, ip
 80048ec:	f43f ae5c 	beq.w	80045a8 <HAL_DMA_IRQHandler+0x298>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	0752      	lsls	r2, r2, #29
 80048f4:	f57f ae58 	bpl.w	80045a8 <HAL_DMA_IRQHandler+0x298>
 80048f8:	e634      	b.n	8004564 <HAL_DMA_IRQHandler+0x254>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048fa:	2602      	movs	r6, #2
 80048fc:	40ae      	lsls	r6, r5
 80048fe:	420e      	tst	r6, r1
 8004900:	d011      	beq.n	8004926 <HAL_DMA_IRQHandler+0x616>
 8004902:	0797      	lsls	r7, r2, #30
 8004904:	d50f      	bpl.n	8004926 <HAL_DMA_IRQHandler+0x616>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004906:	6066      	str	r6, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004908:	0414      	lsls	r4, r2, #16
 800490a:	d539      	bpl.n	8004980 <HAL_DMA_IRQHandler+0x670>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800490c:	03d0      	lsls	r0, r2, #15
 800490e:	d443      	bmi.n	8004998 <HAL_DMA_IRQHandler+0x688>
          if(hdma->XferM1CpltCallback != NULL)
 8004910:	f8d9 3044 	ldr.w	r3, [r9, #68]	; 0x44
 8004914:	2b00      	cmp	r3, #0
 8004916:	f47f aee4 	bne.w	80046e2 <HAL_DMA_IRQHandler+0x3d2>
 800491a:	e772      	b.n	8004802 <HAL_DMA_IRQHandler+0x4f2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800491c:	6813      	ldr	r3, [r2, #0]
 800491e:	079f      	lsls	r7, r3, #30
 8004920:	f57f aeb1 	bpl.w	8004686 <HAL_DMA_IRQHandler+0x376>
 8004924:	e69b      	b.n	800465e <HAL_DMA_IRQHandler+0x34e>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004926:	2608      	movs	r6, #8
 8004928:	40ae      	lsls	r6, r5
 800492a:	420e      	tst	r6, r1
 800492c:	f43f af69 	beq.w	8004802 <HAL_DMA_IRQHandler+0x4f2>
 8004930:	0711      	lsls	r1, r2, #28
 8004932:	f57f af66 	bpl.w	8004802 <HAL_DMA_IRQHandler+0x4f2>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004936:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8004938:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493a:	f022 020e 	bic.w	r2, r2, #14
 800493e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004940:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8004942:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004946:	fa03 f505 	lsl.w	r5, r3, r5
 800494a:	6065      	str	r5, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800494c:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8004950:	f889 1034 	strb.w	r1, [r9, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004954:	f889 3035 	strb.w	r3, [r9, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8004958:	2a00      	cmp	r2, #0
 800495a:	f43f af52 	beq.w	8004802 <HAL_DMA_IRQHandler+0x4f2>
        hdma->XferErrorCallback(hdma);
 800495e:	4648      	mov	r0, r9
}
 8004960:	b003      	add	sp, #12
 8004962:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        hdma->XferErrorCallback(hdma);
 8004966:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004968:	0692      	lsls	r2, r2, #26
 800496a:	d403      	bmi.n	8004974 <HAL_DMA_IRQHandler+0x664>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	f022 0204 	bic.w	r2, r2, #4
 8004972:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8004974:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	f47f aeb2 	bne.w	80046e2 <HAL_DMA_IRQHandler+0x3d2>
 800497e:	e740      	b.n	8004802 <HAL_DMA_IRQHandler+0x4f2>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004980:	f012 0220 	ands.w	r2, r2, #32
 8004984:	d108      	bne.n	8004998 <HAL_DMA_IRQHandler+0x688>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004986:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004988:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800498a:	f021 010a 	bic.w	r1, r1, #10
 800498e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004990:	f889 4035 	strb.w	r4, [r9, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8004994:	f889 2034 	strb.w	r2, [r9, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8004998:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
 800499c:	2b00      	cmp	r3, #0
 800499e:	f47f aea0 	bne.w	80046e2 <HAL_DMA_IRQHandler+0x3d2>
 80049a2:	e72e      	b.n	8004802 <HAL_DMA_IRQHandler+0x4f2>
 80049a4:	58025408 	.word	0x58025408
 80049a8:	5802541c 	.word	0x5802541c
 80049ac:	58025494 	.word	0x58025494

080049b0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80049b0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80049b2:	4770      	bx	lr

080049b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049b8:	680c      	ldr	r4, [r1, #0]
{
 80049ba:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049bc:	2c00      	cmp	r4, #0
 80049be:	f000 80a6 	beq.w	8004b0e <HAL_GPIO_Init+0x15a>
 80049c2:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c6:	4f8e      	ldr	r7, [pc, #568]	; (8004c00 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
 80049c8:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049ca:	2201      	movs	r2, #1
 80049cc:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80049ce:	ea12 0e04 	ands.w	lr, r2, r4
 80049d2:	f000 8095 	beq.w	8004b00 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049d6:	684d      	ldr	r5, [r1, #4]
 80049d8:	f005 0903 	and.w	r9, r5, #3
 80049dc:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 80049e0:	2e01      	cmp	r6, #1
 80049e2:	f240 8097 	bls.w	8004b14 <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e6:	f1b9 0f03 	cmp.w	r9, #3
 80049ea:	f040 80d1 	bne.w	8004b90 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049ee:	fa09 f20c 	lsl.w	r2, r9, ip
 80049f2:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80049f6:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049f8:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049fc:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a00:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 8004a04:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a06:	d07b      	beq.n	8004b00 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a08:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004a0c:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a10:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a14:	f042 0202 	orr.w	r2, r2, #2
 8004a18:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a1c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a20:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004a24:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8004a28:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004a2c:	f002 0202 	and.w	r2, r2, #2
 8004a30:	9201      	str	r2, [sp, #4]
 8004a32:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a34:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8004a36:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a3a:	fa02 f209 	lsl.w	r2, r2, r9
 8004a3e:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a42:	4e70      	ldr	r6, [pc, #448]	; (8004c04 <HAL_GPIO_Init+0x250>)
 8004a44:	42b0      	cmp	r0, r6
 8004a46:	d029      	beq.n	8004a9c <HAL_GPIO_Init+0xe8>
 8004a48:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004a4c:	42b0      	cmp	r0, r6
 8004a4e:	f000 80ac 	beq.w	8004baa <HAL_GPIO_Init+0x1f6>
 8004a52:	4e6d      	ldr	r6, [pc, #436]	; (8004c08 <HAL_GPIO_Init+0x254>)
 8004a54:	42b0      	cmp	r0, r6
 8004a56:	f000 80ae 	beq.w	8004bb6 <HAL_GPIO_Init+0x202>
 8004a5a:	4e6c      	ldr	r6, [pc, #432]	; (8004c0c <HAL_GPIO_Init+0x258>)
 8004a5c:	42b0      	cmp	r0, r6
 8004a5e:	f000 809e 	beq.w	8004b9e <HAL_GPIO_Init+0x1ea>
 8004a62:	4e6b      	ldr	r6, [pc, #428]	; (8004c10 <HAL_GPIO_Init+0x25c>)
 8004a64:	42b0      	cmp	r0, r6
 8004a66:	f000 80b2 	beq.w	8004bce <HAL_GPIO_Init+0x21a>
 8004a6a:	4e6a      	ldr	r6, [pc, #424]	; (8004c14 <HAL_GPIO_Init+0x260>)
 8004a6c:	42b0      	cmp	r0, r6
 8004a6e:	f000 80b4 	beq.w	8004bda <HAL_GPIO_Init+0x226>
 8004a72:	4e69      	ldr	r6, [pc, #420]	; (8004c18 <HAL_GPIO_Init+0x264>)
 8004a74:	42b0      	cmp	r0, r6
 8004a76:	f000 80a4 	beq.w	8004bc2 <HAL_GPIO_Init+0x20e>
 8004a7a:	4e68      	ldr	r6, [pc, #416]	; (8004c1c <HAL_GPIO_Init+0x268>)
 8004a7c:	42b0      	cmp	r0, r6
 8004a7e:	f000 80b2 	beq.w	8004be6 <HAL_GPIO_Init+0x232>
 8004a82:	4e67      	ldr	r6, [pc, #412]	; (8004c20 <HAL_GPIO_Init+0x26c>)
 8004a84:	42b0      	cmp	r0, r6
 8004a86:	f000 80b4 	beq.w	8004bf2 <HAL_GPIO_Init+0x23e>
 8004a8a:	4e66      	ldr	r6, [pc, #408]	; (8004c24 <HAL_GPIO_Init+0x270>)
 8004a8c:	42b0      	cmp	r0, r6
 8004a8e:	bf0c      	ite	eq
 8004a90:	2609      	moveq	r6, #9
 8004a92:	260a      	movne	r6, #10
 8004a94:	fa06 f909 	lsl.w	r9, r6, r9
 8004a98:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a9c:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aa0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aa4:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8004aa6:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 8004aaa:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004aac:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8004ab0:	bf54      	ite	pl
 8004ab2:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8004ab6:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8004aba:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004abc:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 8004abe:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8004ac4:	bf54      	ite	pl
 8004ac6:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8004aca:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 8004ace:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ad0:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ad4:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8004ada:	bf54      	ite	pl
 8004adc:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8004ae0:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ae4:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004ae6:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8004aea:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8004aee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 8004af2:	bf54      	ite	pl
 8004af4:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8004af8:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8004afc:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8004b00:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b02:	f10c 0c02 	add.w	ip, ip, #2
 8004b06:	fa34 f203 	lsrs.w	r2, r4, r3
 8004b0a:	f47f af5e 	bne.w	80049ca <HAL_GPIO_Init+0x16>
  }
}
 8004b0e:	b003      	add	sp, #12
 8004b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b14:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 8004b18:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b1a:	fa08 f80c 	lsl.w	r8, r8, ip
 8004b1e:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b22:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b24:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b28:	fa06 f60c 	lsl.w	r6, r6, ip
 8004b2c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8004b30:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b32:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8004b36:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b3a:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b3c:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b40:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8004b42:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8004b44:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b46:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b4a:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b4c:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b50:	fa06 f60c 	lsl.w	r6, r6, ip
 8004b54:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8004b58:	fa09 f20c 	lsl.w	r2, r9, ip
 8004b5c:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b5e:	f47f af4a 	bne.w	80049f6 <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b62:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004b66:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b6a:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 8004b6e:	260f      	movs	r6, #15
 8004b70:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8004b74:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8004b78:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b7c:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b80:	690e      	ldr	r6, [r1, #16]
 8004b82:	fa06 f60b 	lsl.w	r6, r6, fp
 8004b86:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8004b8a:	f8c9 6020 	str.w	r6, [r9, #32]
 8004b8e:	e732      	b.n	80049f6 <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b90:	f04f 0803 	mov.w	r8, #3
 8004b94:	fa08 f80c 	lsl.w	r8, r8, ip
 8004b98:	ea6f 0808 	mvn.w	r8, r8
 8004b9c:	e7d2      	b.n	8004b44 <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b9e:	2603      	movs	r6, #3
 8004ba0:	fa06 f909 	lsl.w	r9, r6, r9
 8004ba4:	ea42 0209 	orr.w	r2, r2, r9
 8004ba8:	e778      	b.n	8004a9c <HAL_GPIO_Init+0xe8>
 8004baa:	2601      	movs	r6, #1
 8004bac:	fa06 f909 	lsl.w	r9, r6, r9
 8004bb0:	ea42 0209 	orr.w	r2, r2, r9
 8004bb4:	e772      	b.n	8004a9c <HAL_GPIO_Init+0xe8>
 8004bb6:	2602      	movs	r6, #2
 8004bb8:	fa06 f909 	lsl.w	r9, r6, r9
 8004bbc:	ea42 0209 	orr.w	r2, r2, r9
 8004bc0:	e76c      	b.n	8004a9c <HAL_GPIO_Init+0xe8>
 8004bc2:	2606      	movs	r6, #6
 8004bc4:	fa06 f909 	lsl.w	r9, r6, r9
 8004bc8:	ea42 0209 	orr.w	r2, r2, r9
 8004bcc:	e766      	b.n	8004a9c <HAL_GPIO_Init+0xe8>
 8004bce:	2604      	movs	r6, #4
 8004bd0:	fa06 f909 	lsl.w	r9, r6, r9
 8004bd4:	ea42 0209 	orr.w	r2, r2, r9
 8004bd8:	e760      	b.n	8004a9c <HAL_GPIO_Init+0xe8>
 8004bda:	2605      	movs	r6, #5
 8004bdc:	fa06 f909 	lsl.w	r9, r6, r9
 8004be0:	ea42 0209 	orr.w	r2, r2, r9
 8004be4:	e75a      	b.n	8004a9c <HAL_GPIO_Init+0xe8>
 8004be6:	2607      	movs	r6, #7
 8004be8:	fa06 f909 	lsl.w	r9, r6, r9
 8004bec:	ea42 0209 	orr.w	r2, r2, r9
 8004bf0:	e754      	b.n	8004a9c <HAL_GPIO_Init+0xe8>
 8004bf2:	2608      	movs	r6, #8
 8004bf4:	fa06 f909 	lsl.w	r9, r6, r9
 8004bf8:	ea42 0209 	orr.w	r2, r2, r9
 8004bfc:	e74e      	b.n	8004a9c <HAL_GPIO_Init+0xe8>
 8004bfe:	bf00      	nop
 8004c00:	58024400 	.word	0x58024400
 8004c04:	58020000 	.word	0x58020000
 8004c08:	58020800 	.word	0x58020800
 8004c0c:	58020c00 	.word	0x58020c00
 8004c10:	58021000 	.word	0x58021000
 8004c14:	58021400 	.word	0x58021400
 8004c18:	58021800 	.word	0x58021800
 8004c1c:	58021c00 	.word	0x58021c00
 8004c20:	58022000 	.word	0x58022000
 8004c24:	58022400 	.word	0x58022400

08004c28 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c28:	6903      	ldr	r3, [r0, #16]
 8004c2a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004c2c:	bf14      	ite	ne
 8004c2e:	2001      	movne	r0, #1
 8004c30:	2000      	moveq	r0, #0
 8004c32:	4770      	bx	lr

08004c34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c34:	b902      	cbnz	r2, 8004c38 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c36:	0409      	lsls	r1, r1, #16
 8004c38:	6181      	str	r1, [r0, #24]
  }
}
 8004c3a:	4770      	bx	lr

08004c3c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c3c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c3e:	ea01 0203 	and.w	r2, r1, r3
 8004c42:	ea21 0103 	bic.w	r1, r1, r3
 8004c46:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004c4a:	6181      	str	r1, [r0, #24]
}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop

08004c50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c50:	6803      	ldr	r3, [r0, #0]
{
 8004c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c56:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	0694      	lsls	r4, r2, #26
 8004c5c:	d465      	bmi.n	8004d2a <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c62:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c66:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c68:	f014 0410 	ands.w	r4, r4, #16
 8004c6c:	d060      	beq.n	8004d30 <I2C_WaitOnSTOPFlagUntilTimeout+0xe0>
  uint32_t error_code = 0;
 8004c6e:	2500      	movs	r5, #0
  uint32_t tickstart = Tickstart;
 8004c70:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c72:	f8c3 901c 	str.w	r9, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	46aa      	mov	sl, r5
 8004c78:	1c79      	adds	r1, r7, #1

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c7a:	699a      	ldr	r2, [r3, #24]
 8004c7c:	d15a      	bne.n	8004d34 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
 8004c7e:	0690      	lsls	r0, r2, #26
 8004c80:	d47d      	bmi.n	8004d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
 8004c82:	f1ba 0f00 	cmp.w	sl, #0
 8004c86:	d104      	bne.n	8004c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8004c88:	699c      	ldr	r4, [r3, #24]
 8004c8a:	06a1      	lsls	r1, r4, #26
 8004c8c:	d5fc      	bpl.n	8004c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c8e:	2220      	movs	r2, #32
 8004c90:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c92:	f045 0404 	orr.w	r4, r5, #4

    status = HAL_ERROR;
 8004c96:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c98:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004c9a:	05d0      	lsls	r0, r2, #23
 8004c9c:	d530      	bpl.n	8004d00 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c9e:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ca2:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8004ca4:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ca8:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004caa:	d504      	bpl.n	8004cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004cb0:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cb4:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004cb6:	0597      	lsls	r7, r2, #22
 8004cb8:	d504      	bpl.n	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cba:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004cbe:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cc2:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	0790      	lsls	r0, r2, #30
 8004cc8:	d501      	bpl.n	8004cce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    hi2c->Instance->TXDR = 0x00U;
 8004cca:	2200      	movs	r2, #0
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	07d1      	lsls	r1, r2, #31
 8004cd2:	d403      	bmi.n	8004cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cdc:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cde:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8004ce0:	4834      	ldr	r0, [pc, #208]	; (8004db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>)
    hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 8004ce4:	4002      	ands	r2, r0
      return HAL_ERROR;
 8004ce6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8004ce8:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8004cea:	6c73      	ldr	r3, [r6, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cec:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8004cf0:	431c      	orrs	r4, r3
 8004cf2:	6474      	str	r4, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cf4:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf8:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
 8004cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d00:	0550      	lsls	r0, r2, #21
 8004d02:	d4d3      	bmi.n	8004cac <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d04:	0595      	lsls	r5, r2, #22
 8004d06:	d4d8      	bmi.n	8004cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (status != HAL_OK)
 8004d08:	2900      	cmp	r1, #0
 8004d0a:	d1db      	bne.n	8004cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0c:	f7fe fc5e 	bl	80035cc <HAL_GetTick>
 8004d10:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d14:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d16:	42b8      	cmp	r0, r7
 8004d18:	d800      	bhi.n	8004d1c <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
 8004d1a:	b91f      	cbnz	r7, 8004d24 <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	f012 0220 	ands.w	r2, r2, #32
 8004d22:	d030      	beq.n	8004d86 <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	0692      	lsls	r2, r2, #26
 8004d28:	d59d      	bpl.n	8004c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8004d2a:	2000      	movs	r0, #0
}
 8004d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004d30:	4621      	mov	r1, r4
 8004d32:	e7b1      	b.n	8004c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d34:	0692      	lsls	r2, r2, #26
 8004d36:	d422      	bmi.n	8004d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
 8004d38:	f1ba 0f00 	cmp.w	sl, #0
 8004d3c:	d1a9      	bne.n	8004c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d3e:	f7fe fc45 	bl	80035cc <HAL_GetTick>
 8004d42:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d44:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	4287      	cmp	r7, r0
 8004d48:	d301      	bcc.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0xfe>
 8004d4a:	2f00      	cmp	r7, #0
 8004d4c:	d194      	bne.n	8004c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d4e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8004d50:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d54:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8004d56:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d58:	0409      	lsls	r1, r1, #16
 8004d5a:	d503      	bpl.n	8004d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 8004d5c:	0441      	lsls	r1, r0, #17
 8004d5e:	d401      	bmi.n	8004d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
 8004d60:	2a20      	cmp	r2, #32
 8004d62:	d11d      	bne.n	8004da0 <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	0690      	lsls	r0, r2, #26
 8004d68:	d486      	bmi.n	8004c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d6a:	f7fe fc2f 	bl	80035cc <HAL_GetTick>
 8004d6e:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d70:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d72:	2819      	cmp	r0, #25
 8004d74:	d9f6      	bls.n	8004d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d76:	2520      	movs	r5, #32
              status = HAL_ERROR;
 8004d78:	f04f 0a01 	mov.w	sl, #1
 8004d7c:	e77c      	b.n	8004c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (status == HAL_OK)
 8004d7e:	f1ba 0f00 	cmp.w	sl, #0
 8004d82:	d084      	beq.n	8004c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
 8004d84:	e785      	b.n	8004c92 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d88:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d98:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
}
 8004d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004da6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8004da8:	f7fe fc10 	bl	80035cc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dac:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
 8004dae:	4604      	mov	r4, r0
 8004db0:	e7d8      	b.n	8004d64 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
 8004db2:	bf00      	nop
 8004db4:	fe00e800 	.word	0xfe00e800

08004db8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004db8:	2800      	cmp	r0, #0
 8004dba:	d04e      	beq.n	8004e5a <HAL_I2C_Init+0xa2>
{
 8004dbc:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dbe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d041      	beq.n	8004e50 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
 8004dcc:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dce:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dd0:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004dd6:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ddc:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8004dde:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004de2:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 8004de4:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004de6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dee:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004df0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004df2:	d029      	beq.n	8004e48 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004df4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004df8:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dfa:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dfc:	d102      	bne.n	8004e04 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004dfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e02:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e04:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 8004e06:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e0a:	4915      	ldr	r1, [pc, #84]	; (8004e60 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e0c:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e0e:	4301      	orrs	r1, r0
 8004e10:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e12:	68d9      	ldr	r1, [r3, #12]
 8004e14:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8004e18:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e1a:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e1e:	4302      	orrs	r2, r0
 8004e20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e24:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e28:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e2a:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e2c:	4301      	orrs	r1, r0
  return HAL_OK;
 8004e2e:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e30:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	f041 0101 	orr.w	r1, r1, #1
 8004e38:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e3c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e40:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e42:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8004e46:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e4c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e4e:	e7d9      	b.n	8004e04 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8004e50:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004e54:	f7fd f9d0 	bl	80021f8 <HAL_I2C_MspInit>
 8004e58:	e7b8      	b.n	8004dcc <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8004e5a:	2001      	movs	r0, #1
}
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	02008000 	.word	0x02008000

08004e64 <HAL_I2C_Master_Transmit>:
{
 8004e64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e68:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004e6e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d12c      	bne.n	8004ece <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 8004e74:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004e78:	4683      	mov	fp, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d027      	beq.n	8004ece <HAL_I2C_Master_Transmit+0x6a>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	468a      	mov	sl, r1
 8004e82:	4616      	mov	r6, r2
 8004e84:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004e88:	f7fe fba0 	bl	80035cc <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e8c:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 8004e90:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e92:	699a      	ldr	r2, [r3, #24]
 8004e94:	0417      	lsls	r7, r2, #16
 8004e96:	d51d      	bpl.n	8004ed4 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e98:	f7fe fb98 	bl	80035cc <HAL_GetTick>
 8004e9c:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ea0:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea4:	2819      	cmp	r0, #25
 8004ea6:	d9f4      	bls.n	8004e92 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	0410      	lsls	r0, r2, #16
 8004eac:	d5f1      	bpl.n	8004e92 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eae:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004eb2:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	2200      	movs	r2, #0
      return HAL_ERROR;
 8004eb6:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004eb8:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8004eba:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ebe:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec6:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 8004eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8004ece:	2002      	movs	r0, #2
}
 8004ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ed4:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed6:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8004ed8:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004edc:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ee0:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 8004ee2:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ee6:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eea:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 8004eee:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef2:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	2aff      	cmp	r2, #255	; 0xff
 8004efa:	d86c      	bhi.n	8004fd6 <HAL_I2C_Master_Transmit+0x172>
      hi2c->XferSize = hi2c->XferCount;
 8004efc:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f00:	48a2      	ldr	r0, [pc, #648]	; (800518c <HAL_I2C_Master_Transmit+0x328>)
 8004f02:	6859      	ldr	r1, [r3, #4]
      hi2c->XferSize = hi2c->XferCount;
 8004f04:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f06:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f08:	f3ca 0109 	ubfx	r1, sl, #0, #10
      hi2c->XferSize = hi2c->XferCount;
 8004f0c:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f10:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f12:	4301      	orrs	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f14:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f18:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8004f1c:	499c      	ldr	r1, [pc, #624]	; (8005190 <HAL_I2C_Master_Transmit+0x32c>)
 8004f1e:	4311      	orrs	r1, r2
 8004f20:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f22:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 8004f26:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 8004f2a:	b292      	uxth	r2, r2
 8004f2c:	2a00      	cmp	r2, #0
 8004f2e:	f000 80ee 	beq.w	800510e <HAL_I2C_Master_Transmit+0x2aa>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f32:	699c      	ldr	r4, [r3, #24]
 8004f34:	f014 0402 	ands.w	r4, r4, #2
 8004f38:	f040 80b2 	bne.w	80050a0 <HAL_I2C_Master_Transmit+0x23c>
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f3c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f3e:	f012 0210 	ands.w	r2, r2, #16
 8004f42:	d07b      	beq.n	800503c <HAL_I2C_Master_Transmit+0x1d8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f44:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 8004f46:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f4a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f4c:	1c69      	adds	r1, r5, #1
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	d176      	bne.n	8005040 <HAL_I2C_Master_Transmit+0x1dc>
 8004f52:	0690      	lsls	r0, r2, #26
 8004f54:	f100 80f1 	bmi.w	800513a <HAL_I2C_Master_Transmit+0x2d6>
 8004f58:	b927      	cbnz	r7, 8004f64 <HAL_I2C_Master_Transmit+0x100>
 8004f5a:	699a      	ldr	r2, [r3, #24]
 8004f5c:	0691      	lsls	r1, r2, #26
 8004f5e:	d5fc      	bpl.n	8004f5a <HAL_I2C_Master_Transmit+0xf6>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f60:	f8c3 901c 	str.w	r9, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8004f64:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 8004f68:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8004f6a:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f6c:	05ce      	lsls	r6, r1, #23
 8004f6e:	d541      	bpl.n	8004ff4 <HAL_I2C_Master_Transmit+0x190>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f70:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f74:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 8004f76:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f7a:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f7c:	d504      	bpl.n	8004f88 <HAL_I2C_Master_Transmit+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f7e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004f82:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f86:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f88:	0589      	lsls	r1, r1, #22
 8004f8a:	d504      	bpl.n	8004f96 <HAL_I2C_Master_Transmit+0x132>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f8c:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f90:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f94:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f96:	6999      	ldr	r1, [r3, #24]
 8004f98:	078e      	lsls	r6, r1, #30
 8004f9a:	d501      	bpl.n	8004fa0 <HAL_I2C_Master_Transmit+0x13c>
    hi2c->Instance->TXDR = 0x00U;
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fa0:	6999      	ldr	r1, [r3, #24]
 8004fa2:	07cd      	lsls	r5, r1, #31
 8004fa4:	d403      	bmi.n	8004fae <HAL_I2C_Master_Transmit+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fa6:	6999      	ldr	r1, [r3, #24]
 8004fa8:	f041 0101 	orr.w	r1, r1, #1
 8004fac:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8004fae:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb0:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 8004fb2:	4878      	ldr	r0, [pc, #480]	; (8005194 <HAL_I2C_Master_Transmit+0x330>)
    hi2c->State = HAL_I2C_STATE_READY;
 8004fb4:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 8004fb6:	4001      	ands	r1, r0
        return HAL_ERROR;
 8004fb8:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8004fba:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8004fbc:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8004fc0:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fca:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 8004fd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	496c      	ldr	r1, [pc, #432]	; (800518c <HAL_I2C_Master_Transmit+0x328>)
 8004fda:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fdc:	f3ca 0109 	ubfx	r1, sl, #0, #10
 8004fe0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fe4:	4311      	orrs	r1, r2
 8004fe6:	4a6c      	ldr	r2, [pc, #432]	; (8005198 <HAL_I2C_Master_Transmit+0x334>)
 8004fe8:	430a      	orrs	r2, r1
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fea:	21ff      	movs	r1, #255	; 0xff
 8004fec:	f8ab 1028 	strh.w	r1, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ff0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ff2:	e796      	b.n	8004f22 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ff4:	054c      	lsls	r4, r1, #21
 8004ff6:	d4c2      	bmi.n	8004f7e <HAL_I2C_Master_Transmit+0x11a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ff8:	058f      	lsls	r7, r1, #22
 8004ffa:	d4c7      	bmi.n	8004f8c <HAL_I2C_Master_Transmit+0x128>
  if (status != HAL_OK)
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d1ca      	bne.n	8004f96 <HAL_I2C_Master_Transmit+0x132>
    if (Timeout != HAL_MAX_DELAY)
 8005000:	1c6a      	adds	r2, r5, #1
 8005002:	d096      	beq.n	8004f32 <HAL_I2C_Master_Transmit+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005004:	f7fe fae2 	bl	80035cc <HAL_GetTick>
 8005008:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800500c:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005010:	4285      	cmp	r5, r0
 8005012:	d301      	bcc.n	8005018 <HAL_I2C_Master_Transmit+0x1b4>
 8005014:	2d00      	cmp	r5, #0
 8005016:	d18c      	bne.n	8004f32 <HAL_I2C_Master_Transmit+0xce>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	f012 0202 	ands.w	r2, r2, #2
 800501e:	d188      	bne.n	8004f32 <HAL_I2C_Master_Transmit+0xce>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005020:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005024:	2120      	movs	r1, #32
          return HAL_ERROR;
 8005026:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8005028:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800502c:	430b      	orrs	r3, r1
 800502e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005032:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005036:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 800503a:	e749      	b.n	8004ed0 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 800503c:	4610      	mov	r0, r2
 800503e:	e794      	b.n	8004f6a <HAL_I2C_Master_Transmit+0x106>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005040:	0692      	lsls	r2, r2, #26
 8005042:	d47a      	bmi.n	800513a <HAL_I2C_Master_Transmit+0x2d6>
 8005044:	2f00      	cmp	r7, #0
 8005046:	d18d      	bne.n	8004f64 <HAL_I2C_Master_Transmit+0x100>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005048:	f7fe fac0 	bl	80035cc <HAL_GetTick>
 800504c:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800504e:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005052:	4285      	cmp	r5, r0
 8005054:	d302      	bcc.n	800505c <HAL_I2C_Master_Transmit+0x1f8>
 8005056:	2d00      	cmp	r5, #0
 8005058:	f47f af78 	bne.w	8004f4c <HAL_I2C_Master_Transmit+0xe8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800505c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800505e:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005062:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8005064:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005066:	0409      	lsls	r1, r1, #16
 8005068:	d50c      	bpl.n	8005084 <HAL_I2C_Master_Transmit+0x220>
              (tmp1 != I2C_CR2_STOP) && \
 800506a:	0441      	lsls	r1, r0, #17
 800506c:	d40a      	bmi.n	8005084 <HAL_I2C_Master_Transmit+0x220>
 800506e:	2a20      	cmp	r2, #32
 8005070:	d008      	beq.n	8005084 <HAL_I2C_Master_Transmit+0x220>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005078:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800507a:	f7fe faa7 	bl	80035cc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800507e:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 8005082:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	0690      	lsls	r0, r2, #26
 8005088:	f53f af60 	bmi.w	8004f4c <HAL_I2C_Master_Transmit+0xe8>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800508c:	f7fe fa9e 	bl	80035cc <HAL_GetTick>
 8005090:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005092:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005096:	2819      	cmp	r0, #25
 8005098:	d9f4      	bls.n	8005084 <HAL_I2C_Master_Transmit+0x220>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800509a:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800509c:	2701      	movs	r7, #1
 800509e:	e755      	b.n	8004f4c <HAL_I2C_Master_Transmit+0xe8>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050a0:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
      hi2c->XferSize--;
 80050a4:	f8bb 2028 	ldrh.w	r2, [fp, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050a8:	f810 1b01 	ldrb.w	r1, [r0], #1
      hi2c->XferSize--;
 80050ac:	3a01      	subs	r2, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050ae:	6299      	str	r1, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050b0:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 80050b4:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80050b6:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
      hi2c->XferCount--;
 80050ba:	3901      	subs	r1, #1
      hi2c->XferSize--;
 80050bc:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
      hi2c->XferCount--;
 80050c0:	b289      	uxth	r1, r1
 80050c2:	f8ab 102a 	strh.w	r1, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050c6:	f8bb 102a 	ldrh.w	r1, [fp, #42]	; 0x2a
 80050ca:	b289      	uxth	r1, r1
 80050cc:	2900      	cmp	r1, #0
 80050ce:	f43f af2a 	beq.w	8004f26 <HAL_I2C_Master_Transmit+0xc2>
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	f47f af27 	bne.w	8004f26 <HAL_I2C_Master_Transmit+0xc2>
 80050d8:	1c6c      	adds	r4, r5, #1
 80050da:	d132      	bne.n	8005142 <HAL_I2C_Master_Transmit+0x2de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050dc:	699a      	ldr	r2, [r3, #24]
 80050de:	0610      	lsls	r0, r2, #24
 80050e0:	d5fc      	bpl.n	80050dc <HAL_I2C_Master_Transmit+0x278>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050e2:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 80050e6:	b292      	uxth	r2, r2
 80050e8:	2aff      	cmp	r2, #255	; 0xff
 80050ea:	d93c      	bls.n	8005166 <HAL_I2C_Master_Transmit+0x302>
  MODIFY_REG(hi2c->Instance->CR2, \
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	492b      	ldr	r1, [pc, #172]	; (800519c <HAL_I2C_Master_Transmit+0x338>)
 80050f0:	400a      	ands	r2, r1
 80050f2:	492b      	ldr	r1, [pc, #172]	; (80051a0 <HAL_I2C_Master_Transmit+0x33c>)
 80050f4:	ea4a 0202 	orr.w	r2, sl, r2
 80050f8:	4311      	orrs	r1, r2
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050fa:	22ff      	movs	r2, #255	; 0xff
 80050fc:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005100:	6059      	str	r1, [r3, #4]
    while (hi2c->XferCount > 0U)
 8005102:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 8005106:	b292      	uxth	r2, r2
 8005108:	2a00      	cmp	r2, #0
 800510a:	f47f af12 	bne.w	8004f32 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800510e:	4642      	mov	r2, r8
 8005110:	4629      	mov	r1, r5
 8005112:	4658      	mov	r0, fp
 8005114:	f7ff fd9c 	bl	8004c50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005118:	2800      	cmp	r0, #0
 800511a:	d135      	bne.n	8005188 <HAL_I2C_Master_Transmit+0x324>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800511c:	f8db 3000 	ldr.w	r3, [fp]
 8005120:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8005122:	4c1c      	ldr	r4, [pc, #112]	; (8005194 <HAL_I2C_Master_Transmit+0x330>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005124:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	4022      	ands	r2, r4
 800512a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800512c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005130:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005134:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 8005138:	e6ca      	b.n	8004ed0 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 800513a:	2f00      	cmp	r7, #0
 800513c:	f43f af10 	beq.w	8004f60 <HAL_I2C_Master_Transmit+0xfc>
 8005140:	e710      	b.n	8004f64 <HAL_I2C_Master_Transmit+0x100>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	0611      	lsls	r1, r2, #24
 8005146:	d4cc      	bmi.n	80050e2 <HAL_I2C_Master_Transmit+0x27e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005148:	f7fe fa40 	bl	80035cc <HAL_GetTick>
 800514c:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005150:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005154:	4285      	cmp	r5, r0
 8005156:	d301      	bcc.n	800515c <HAL_I2C_Master_Transmit+0x2f8>
 8005158:	2d00      	cmp	r5, #0
 800515a:	d1bd      	bne.n	80050d8 <HAL_I2C_Master_Transmit+0x274>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 8005162:	d1b9      	bne.n	80050d8 <HAL_I2C_Master_Transmit+0x274>
 8005164:	e75c      	b.n	8005020 <HAL_I2C_Master_Transmit+0x1bc>
          hi2c->XferSize = hi2c->XferCount;
 8005166:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800516a:	480c      	ldr	r0, [pc, #48]	; (800519c <HAL_I2C_Master_Transmit+0x338>)
          hi2c->XferSize = hi2c->XferCount;
 800516c:	b292      	uxth	r2, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800516e:	b2d1      	uxtb	r1, r2
          hi2c->XferSize = hi2c->XferCount;
 8005170:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	4002      	ands	r2, r0
 8005178:	ea4a 0202 	orr.w	r2, sl, r2
 800517c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005180:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005184:	605a      	str	r2, [r3, #4]
}
 8005186:	e6ce      	b.n	8004f26 <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 8005188:	2001      	movs	r0, #1
 800518a:	e6a1      	b.n	8004ed0 <HAL_I2C_Master_Transmit+0x6c>
 800518c:	fc009800 	.word	0xfc009800
 8005190:	02002000 	.word	0x02002000
 8005194:	fe00e800 	.word	0xfe00e800
 8005198:	01ff2000 	.word	0x01ff2000
 800519c:	fc009c00 	.word	0xfc009c00
 80051a0:	01ff0000 	.word	0x01ff0000

080051a4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80051a8:	2a20      	cmp	r2, #32
 80051aa:	d123      	bne.n	80051f4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80051ac:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80051b4:	4603      	mov	r3, r0
 80051b6:	2a01      	cmp	r2, #1
 80051b8:	d01c      	beq.n	80051f4 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051ba:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051bc:	2024      	movs	r0, #36	; 0x24
{
 80051be:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051c0:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c4:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
 80051c8:	6810      	ldr	r0, [r2, #0]
 80051ca:	f020 0001 	bic.w	r0, r0, #1
 80051ce:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051d0:	6810      	ldr	r0, [r2, #0]
 80051d2:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80051d6:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80051d8:	6810      	ldr	r0, [r2, #0]
 80051da:	4301      	orrs	r1, r0

    return HAL_OK;
 80051dc:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
 80051de:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80051e0:	6811      	ldr	r1, [r2, #0]
 80051e2:	f041 0101 	orr.w	r1, r1, #1
 80051e6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80051e8:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80051ec:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80051f0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80051f4:	2002      	movs	r0, #2
}
 80051f6:	4770      	bx	lr

080051f8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80051fc:	2a20      	cmp	r2, #32
 80051fe:	d122      	bne.n	8005246 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
 8005200:	4603      	mov	r3, r0
{
 8005202:	b500      	push	{lr}
 8005204:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005208:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800520c:	2a01      	cmp	r2, #1
 800520e:	d01c      	beq.n	800524a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005210:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005212:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005214:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005218:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800521c:	6810      	ldr	r0, [r2, #0]
 800521e:	f020 0001 	bic.w	r0, r0, #1
 8005222:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8005224:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8005226:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800522a:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
 800522e:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
 8005230:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8005232:	6811      	ldr	r1, [r2, #0]
 8005234:	f041 0101 	orr.w	r1, r1, #1
 8005238:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800523a:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800523e:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005242:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8005246:	2002      	movs	r0, #2
}
 8005248:	4770      	bx	lr
    return HAL_BUSY;
 800524a:	2002      	movs	r0, #2
}
 800524c:	f85d fb04 	ldr.w	pc, [sp], #4

08005250 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005250:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005252:	4c10      	ldr	r4, [pc, #64]	; (8005294 <HAL_PWREx_ConfigSupply+0x44>)
 8005254:	68e3      	ldr	r3, [r4, #12]
 8005256:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800525a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800525c:	d105      	bne.n	800526a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800525e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005262:	1a18      	subs	r0, r3, r0
 8005264:	bf18      	it	ne
 8005266:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005268:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	4318      	orrs	r0, r3
 8005270:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8005272:	f7fe f9ab 	bl	80035cc <HAL_GetTick>
 8005276:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005278:	e005      	b.n	8005286 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800527a:	f7fe f9a7 	bl	80035cc <HAL_GetTick>
 800527e:	1b40      	subs	r0, r0, r5
 8005280:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005284:	d804      	bhi.n	8005290 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005286:	6863      	ldr	r3, [r4, #4]
 8005288:	049b      	lsls	r3, r3, #18
 800528a:	d5f6      	bpl.n	800527a <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800528c:	2000      	movs	r0, #0
}
 800528e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005290:	2001      	movs	r0, #1
}
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	58024800 	.word	0x58024800

08005298 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005298:	4b3b      	ldr	r3, [pc, #236]	; (8005388 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800529a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800529c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800529e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052a0:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 80052a2:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052a8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80052ac:	d038      	beq.n	8005320 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052ae:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052b2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052b6:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052ba:	fb05 f101 	mul.w	r1, r5, r1
 80052be:	2a01      	cmp	r2, #1
 80052c0:	ee07 1a90 	vmov	s15, r1
 80052c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80052ca:	2a02      	cmp	r2, #2
 80052cc:	d04e      	beq.n	800536c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80052ce:	b34a      	cbz	r2, 8005324 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052d0:	ee07 0a90 	vmov	s15, r0
 80052d4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800538c <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80052d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80052e2:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8005390 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80052e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ea:	ee06 3a90 	vmov	s13, r3
 80052ee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80052f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80052f6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80052fa:	eee7 6a25 	vfma.f32	s13, s14, s11
 80052fe:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005302:	4b21      	ldr	r3, [pc, #132]	; (8005388 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800530a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800530c:	ee07 3a90 	vmov	s15, r3
 8005310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800531c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8005320:	bc30      	pop	{r4, r5}
 8005322:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	0692      	lsls	r2, r2, #26
 8005328:	d527      	bpl.n	800537a <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800532a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800532c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005330:	4a18      	ldr	r2, [pc, #96]	; (8005394 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005332:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005338:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800533c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005340:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8005390 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8005344:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005348:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800534a:	ee06 3a90 	vmov	s13, r3
 800534e:	ee05 2a90 	vmov	s11, r2
 8005352:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005356:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800535a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800535e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005362:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005366:	ee66 6a26 	vmul.f32	s13, s12, s13
 800536a:	e7ca      	b.n	8005302 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800536c:	ee07 0a90 	vmov	s15, r0
 8005370:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005398 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8005374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005378:	e7b0      	b.n	80052dc <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800537a:	ee07 0a90 	vmov	s15, r0
 800537e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800539c <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8005382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005386:	e7a9      	b.n	80052dc <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8005388:	58024400 	.word	0x58024400
 800538c:	4a742400 	.word	0x4a742400
 8005390:	39000000 	.word	0x39000000
 8005394:	03d09000 	.word	0x03d09000
 8005398:	4bbebc20 	.word	0x4bbebc20
 800539c:	4c742400 	.word	0x4c742400

080053a0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f000 81e8 	beq.w	8005776 <HAL_RCC_OscConfig+0x3d6>
{
 80053a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a8:	6803      	ldr	r3, [r0, #0]
 80053aa:	4604      	mov	r4, r0
 80053ac:	07d9      	lsls	r1, r3, #31
 80053ae:	d52e      	bpl.n	800540e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b0:	49a4      	ldr	r1, [pc, #656]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 80053b2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053b4:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053ba:	2a10      	cmp	r2, #16
 80053bc:	f000 8107 	beq.w	80055ce <HAL_RCC_OscConfig+0x22e>
 80053c0:	2a18      	cmp	r2, #24
 80053c2:	f000 80ff 	beq.w	80055c4 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053cc:	f000 812a 	beq.w	8005624 <HAL_RCC_OscConfig+0x284>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 8168 	beq.w	80056a6 <HAL_RCC_OscConfig+0x306>
 80053d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053da:	4b9a      	ldr	r3, [pc, #616]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f000 8289 	beq.w	80058f4 <HAL_RCC_OscConfig+0x554>
 80053e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80053f0:	f7fe f8ec 	bl	80035cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053f4:	4e93      	ldr	r6, [pc, #588]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80053f6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80053f8:	e005      	b.n	8005406 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053fa:	f7fe f8e7 	bl	80035cc <HAL_GetTick>
 80053fe:	1b40      	subs	r0, r0, r5
 8005400:	2864      	cmp	r0, #100	; 0x64
 8005402:	f200 814e 	bhi.w	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005406:	6833      	ldr	r3, [r6, #0]
 8005408:	039b      	lsls	r3, r3, #14
 800540a:	d5f6      	bpl.n	80053fa <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	079d      	lsls	r5, r3, #30
 8005410:	f100 808a 	bmi.w	8005528 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005414:	06d9      	lsls	r1, r3, #27
 8005416:	d533      	bpl.n	8005480 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005418:	4a8a      	ldr	r2, [pc, #552]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 800541a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800541c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541e:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005422:	2b08      	cmp	r3, #8
 8005424:	f000 80e3 	beq.w	80055ee <HAL_RCC_OscConfig+0x24e>
 8005428:	2b18      	cmp	r3, #24
 800542a:	f000 80db 	beq.w	80055e4 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800542e:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8005430:	4d84      	ldr	r5, [pc, #528]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 816f 	beq.w	8005716 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8005438:	682b      	ldr	r3, [r5, #0]
 800543a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005440:	f7fe f8c4 	bl	80035cc <HAL_GetTick>
 8005444:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005446:	e005      	b.n	8005454 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005448:	f7fe f8c0 	bl	80035cc <HAL_GetTick>
 800544c:	1b80      	subs	r0, r0, r6
 800544e:	2802      	cmp	r0, #2
 8005450:	f200 8127 	bhi.w	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	05db      	lsls	r3, r3, #23
 8005458:	d5f6      	bpl.n	8005448 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800545a:	f7fe f8cf 	bl	80035fc <HAL_GetREVID>
 800545e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005462:	4298      	cmp	r0, r3
 8005464:	f200 826d 	bhi.w	8005942 <HAL_RCC_OscConfig+0x5a2>
 8005468:	6a22      	ldr	r2, [r4, #32]
 800546a:	686b      	ldr	r3, [r5, #4]
 800546c:	2a20      	cmp	r2, #32
 800546e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005472:	bf0c      	ite	eq
 8005474:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8005478:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800547c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	071d      	lsls	r5, r3, #28
 8005482:	d516      	bpl.n	80054b2 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005484:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8005486:	4d6f      	ldr	r5, [pc, #444]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 8122 	beq.w	80056d2 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 800548e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005496:	f7fe f899 	bl	80035cc <HAL_GetTick>
 800549a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800549c:	e005      	b.n	80054aa <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800549e:	f7fe f895 	bl	80035cc <HAL_GetTick>
 80054a2:	1b80      	subs	r0, r0, r6
 80054a4:	2802      	cmp	r0, #2
 80054a6:	f200 80fc 	bhi.w	80056a2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80054ac:	0798      	lsls	r0, r3, #30
 80054ae:	d5f6      	bpl.n	800549e <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054b0:	6823      	ldr	r3, [r4, #0]
 80054b2:	069a      	lsls	r2, r3, #26
 80054b4:	d516      	bpl.n	80054e4 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80054b6:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80054b8:	4d62      	ldr	r5, [pc, #392]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 811a 	beq.w	80056f4 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054c6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80054c8:	f7fe f880 	bl	80035cc <HAL_GetTick>
 80054cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054ce:	e005      	b.n	80054dc <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054d0:	f7fe f87c 	bl	80035cc <HAL_GetTick>
 80054d4:	1b80      	subs	r0, r0, r6
 80054d6:	2802      	cmp	r0, #2
 80054d8:	f200 80e3 	bhi.w	80056a2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	049f      	lsls	r7, r3, #18
 80054e0:	d5f6      	bpl.n	80054d0 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	0759      	lsls	r1, r3, #29
 80054e6:	f100 80a3 	bmi.w	8005630 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80054ec:	b1d0      	cbz	r0, 8005524 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054ee:	4d55      	ldr	r5, [pc, #340]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 80054f0:	692b      	ldr	r3, [r5, #16]
 80054f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f6:	2b18      	cmp	r3, #24
 80054f8:	f000 81ae 	beq.w	8005858 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 80054fc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054fe:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005504:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005506:	f000 8142 	beq.w	800578e <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 800550a:	f7fe f85f 	bl	80035cc <HAL_GetTick>
 800550e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005510:	e005      	b.n	800551e <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005512:	f7fe f85b 	bl	80035cc <HAL_GetTick>
 8005516:	1b00      	subs	r0, r0, r4
 8005518:	2802      	cmp	r0, #2
 800551a:	f200 80c2 	bhi.w	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800551e:	682b      	ldr	r3, [r5, #0]
 8005520:	019b      	lsls	r3, r3, #6
 8005522:	d4f6      	bmi.n	8005512 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8005524:	2000      	movs	r0, #0
}
 8005526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005528:	4a46      	ldr	r2, [pc, #280]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 800552a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800552c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800552e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8005532:	d12d      	bne.n	8005590 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005534:	4b43      	ldr	r3, [pc, #268]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 8005536:	68e2      	ldr	r2, [r4, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	0759      	lsls	r1, r3, #29
 800553c:	d501      	bpl.n	8005542 <HAL_RCC_OscConfig+0x1a2>
 800553e:	2a00      	cmp	r2, #0
 8005540:	d04e      	beq.n	80055e0 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005542:	4d40      	ldr	r5, [pc, #256]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	f023 0319 	bic.w	r3, r3, #25
 800554a:	4313      	orrs	r3, r2
 800554c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800554e:	f7fe f83d 	bl	80035cc <HAL_GetTick>
 8005552:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005554:	e005      	b.n	8005562 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005556:	f7fe f839 	bl	80035cc <HAL_GetTick>
 800555a:	1b80      	subs	r0, r0, r6
 800555c:	2802      	cmp	r0, #2
 800555e:	f200 80a0 	bhi.w	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005562:	682b      	ldr	r3, [r5, #0]
 8005564:	075b      	lsls	r3, r3, #29
 8005566:	d5f6      	bpl.n	8005556 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005568:	f7fe f848 	bl	80035fc <HAL_GetREVID>
 800556c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005570:	4298      	cmp	r0, r3
 8005572:	f200 80f7 	bhi.w	8005764 <HAL_RCC_OscConfig+0x3c4>
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	686b      	ldr	r3, [r5, #4]
 800557a:	2a40      	cmp	r2, #64	; 0x40
 800557c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005580:	bf0c      	ite	eq
 8005582:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8005586:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800558a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	e741      	b.n	8005414 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005590:	2b18      	cmp	r3, #24
 8005592:	f000 80e3 	beq.w	800575c <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005596:	4d2b      	ldr	r5, [pc, #172]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005598:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800559a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800559c:	2a00      	cmp	r2, #0
 800559e:	f000 80cc 	beq.w	800573a <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055a2:	f023 0319 	bic.w	r3, r3, #25
 80055a6:	4313      	orrs	r3, r2
 80055a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80055aa:	f7fe f80f 	bl	80035cc <HAL_GetTick>
 80055ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055b0:	e004      	b.n	80055bc <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b2:	f7fe f80b 	bl	80035cc <HAL_GetTick>
 80055b6:	1b80      	subs	r0, r0, r6
 80055b8:	2802      	cmp	r0, #2
 80055ba:	d872      	bhi.n	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	075f      	lsls	r7, r3, #29
 80055c0:	d5f7      	bpl.n	80055b2 <HAL_RCC_OscConfig+0x212>
 80055c2:	e7d1      	b.n	8005568 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055c4:	f001 0103 	and.w	r1, r1, #3
 80055c8:	2902      	cmp	r1, #2
 80055ca:	f47f aefc 	bne.w	80053c6 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ce:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	0392      	lsls	r2, r2, #14
 80055d4:	f57f af1b 	bpl.w	800540e <HAL_RCC_OscConfig+0x6e>
 80055d8:	6862      	ldr	r2, [r4, #4]
 80055da:	2a00      	cmp	r2, #0
 80055dc:	f47f af17 	bne.w	800540e <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80055e0:	2001      	movs	r0, #1
}
 80055e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80055e4:	f002 0203 	and.w	r2, r2, #3
 80055e8:	2a01      	cmp	r2, #1
 80055ea:	f47f af20 	bne.w	800542e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	05da      	lsls	r2, r3, #23
 80055f4:	d502      	bpl.n	80055fc <HAL_RCC_OscConfig+0x25c>
 80055f6:	69e3      	ldr	r3, [r4, #28]
 80055f8:	2b80      	cmp	r3, #128	; 0x80
 80055fa:	d1f1      	bne.n	80055e0 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055fc:	f7fd fffe 	bl	80035fc <HAL_GetREVID>
 8005600:	f241 0303 	movw	r3, #4099	; 0x1003
 8005604:	4298      	cmp	r0, r3
 8005606:	f200 80b8 	bhi.w	800577a <HAL_RCC_OscConfig+0x3da>
 800560a:	6a22      	ldr	r2, [r4, #32]
 800560c:	2a20      	cmp	r2, #32
 800560e:	f000 81a7 	beq.w	8005960 <HAL_RCC_OscConfig+0x5c0>
 8005612:	490c      	ldr	r1, [pc, #48]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 8005614:	684b      	ldr	r3, [r1, #4]
 8005616:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800561a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800561e:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	e72d      	b.n	8005480 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005624:	4a07      	ldr	r2, [pc, #28]	; (8005644 <HAL_RCC_OscConfig+0x2a4>)
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562c:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800562e:	e6df      	b.n	80053f0 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8005630:	4d05      	ldr	r5, [pc, #20]	; (8005648 <HAL_RCC_OscConfig+0x2a8>)
 8005632:	682b      	ldr	r3, [r5, #0]
 8005634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005638:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800563a:	f7fd ffc7 	bl	80035cc <HAL_GetTick>
 800563e:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005640:	e009      	b.n	8005656 <HAL_RCC_OscConfig+0x2b6>
 8005642:	bf00      	nop
 8005644:	58024400 	.word	0x58024400
 8005648:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564c:	f7fd ffbe 	bl	80035cc <HAL_GetTick>
 8005650:	1b80      	subs	r0, r0, r6
 8005652:	2864      	cmp	r0, #100	; 0x64
 8005654:	d825      	bhi.n	80056a2 <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005656:	682b      	ldr	r3, [r5, #0]
 8005658:	05da      	lsls	r2, r3, #23
 800565a:	d5f7      	bpl.n	800564c <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800565c:	68a3      	ldr	r3, [r4, #8]
 800565e:	2b01      	cmp	r3, #1
 8005660:	f000 8178 	beq.w	8005954 <HAL_RCC_OscConfig+0x5b4>
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8153 	beq.w	8005910 <HAL_RCC_OscConfig+0x570>
 800566a:	2b05      	cmp	r3, #5
 800566c:	4ba5      	ldr	r3, [pc, #660]	; (8005904 <HAL_RCC_OscConfig+0x564>)
 800566e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005670:	f000 817f 	beq.w	8005972 <HAL_RCC_OscConfig+0x5d2>
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	671a      	str	r2, [r3, #112]	; 0x70
 800567a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800567c:	f022 0204 	bic.w	r2, r2, #4
 8005680:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005682:	f7fd ffa3 	bl	80035cc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005686:	4e9f      	ldr	r6, [pc, #636]	; (8005904 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005688:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800568c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800568e:	e004      	b.n	800569a <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005690:	f7fd ff9c 	bl	80035cc <HAL_GetTick>
 8005694:	1b40      	subs	r0, r0, r5
 8005696:	42b8      	cmp	r0, r7
 8005698:	d803      	bhi.n	80056a2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800569a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800569c:	079b      	lsls	r3, r3, #30
 800569e:	d5f7      	bpl.n	8005690 <HAL_RCC_OscConfig+0x2f0>
 80056a0:	e723      	b.n	80054ea <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 80056a2:	2003      	movs	r0, #3
}
 80056a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056a6:	4d97      	ldr	r5, [pc, #604]	; (8005904 <HAL_RCC_OscConfig+0x564>)
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ae:	602b      	str	r3, [r5, #0]
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80056b8:	f7fd ff88 	bl	80035cc <HAL_GetTick>
 80056bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056be:	e004      	b.n	80056ca <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c0:	f7fd ff84 	bl	80035cc <HAL_GetTick>
 80056c4:	1b80      	subs	r0, r0, r6
 80056c6:	2864      	cmp	r0, #100	; 0x64
 80056c8:	d8eb      	bhi.n	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056ca:	682b      	ldr	r3, [r5, #0]
 80056cc:	039f      	lsls	r7, r3, #14
 80056ce:	d4f7      	bmi.n	80056c0 <HAL_RCC_OscConfig+0x320>
 80056d0:	e69c      	b.n	800540c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 80056d2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80056d4:	f023 0301 	bic.w	r3, r3, #1
 80056d8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80056da:	f7fd ff77 	bl	80035cc <HAL_GetTick>
 80056de:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056e0:	e004      	b.n	80056ec <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056e2:	f7fd ff73 	bl	80035cc <HAL_GetTick>
 80056e6:	1b80      	subs	r0, r0, r6
 80056e8:	2802      	cmp	r0, #2
 80056ea:	d8da      	bhi.n	80056a2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80056ee:	0799      	lsls	r1, r3, #30
 80056f0:	d4f7      	bmi.n	80056e2 <HAL_RCC_OscConfig+0x342>
 80056f2:	e6dd      	b.n	80054b0 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056fa:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80056fc:	f7fd ff66 	bl	80035cc <HAL_GetTick>
 8005700:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005702:	e004      	b.n	800570e <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005704:	f7fd ff62 	bl	80035cc <HAL_GetTick>
 8005708:	1b80      	subs	r0, r0, r6
 800570a:	2802      	cmp	r0, #2
 800570c:	d8c9      	bhi.n	80056a2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800570e:	682b      	ldr	r3, [r5, #0]
 8005710:	0498      	lsls	r0, r3, #18
 8005712:	d4f7      	bmi.n	8005704 <HAL_RCC_OscConfig+0x364>
 8005714:	e6e5      	b.n	80054e2 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8005716:	682b      	ldr	r3, [r5, #0]
 8005718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800571e:	f7fd ff55 	bl	80035cc <HAL_GetTick>
 8005722:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005724:	e004      	b.n	8005730 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005726:	f7fd ff51 	bl	80035cc <HAL_GetTick>
 800572a:	1b80      	subs	r0, r0, r6
 800572c:	2802      	cmp	r0, #2
 800572e:	d8b8      	bhi.n	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	05df      	lsls	r7, r3, #23
 8005734:	d4f7      	bmi.n	8005726 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	e6a2      	b.n	8005480 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005740:	f7fd ff44 	bl	80035cc <HAL_GetTick>
 8005744:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005746:	e004      	b.n	8005752 <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005748:	f7fd ff40 	bl	80035cc <HAL_GetTick>
 800574c:	1b80      	subs	r0, r0, r6
 800574e:	2802      	cmp	r0, #2
 8005750:	d8a7      	bhi.n	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005752:	682b      	ldr	r3, [r5, #0]
 8005754:	0758      	lsls	r0, r3, #29
 8005756:	d4f7      	bmi.n	8005748 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	e65b      	b.n	8005414 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800575c:	0790      	lsls	r0, r2, #30
 800575e:	f47f af1a 	bne.w	8005596 <HAL_RCC_OscConfig+0x1f6>
 8005762:	e6e7      	b.n	8005534 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005764:	686b      	ldr	r3, [r5, #4]
 8005766:	6922      	ldr	r2, [r4, #16]
 8005768:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800576c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005770:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	e64e      	b.n	8005414 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8005776:	2001      	movs	r0, #1
}
 8005778:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800577a:	4a62      	ldr	r2, [pc, #392]	; (8005904 <HAL_RCC_OscConfig+0x564>)
 800577c:	6a21      	ldr	r1, [r4, #32]
 800577e:	68d3      	ldr	r3, [r2, #12]
 8005780:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005784:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005788:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	e678      	b.n	8005480 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800578e:	f7fd ff1d 	bl	80035cc <HAL_GetTick>
 8005792:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005794:	e004      	b.n	80057a0 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005796:	f7fd ff19 	bl	80035cc <HAL_GetTick>
 800579a:	1b80      	subs	r0, r0, r6
 800579c:	2802      	cmp	r0, #2
 800579e:	d880      	bhi.n	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	0199      	lsls	r1, r3, #6
 80057a4:	d4f7      	bmi.n	8005796 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80057a8:	4b57      	ldr	r3, [pc, #348]	; (8005908 <HAL_RCC_OscConfig+0x568>)
 80057aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80057ac:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057ae:	4957      	ldr	r1, [pc, #348]	; (800590c <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057b0:	4e54      	ldr	r6, [pc, #336]	; (8005904 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057b2:	4313      	orrs	r3, r2
 80057b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80057b6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80057ba:	62ab      	str	r3, [r5, #40]	; 0x28
 80057bc:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80057c0:	3b01      	subs	r3, #1
 80057c2:	3a01      	subs	r2, #1
 80057c4:	025b      	lsls	r3, r3, #9
 80057c6:	0412      	lsls	r2, r2, #16
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80057ce:	4313      	orrs	r3, r2
 80057d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80057d2:	3a01      	subs	r2, #1
 80057d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d8:	4313      	orrs	r3, r2
 80057da:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80057dc:	3a01      	subs	r2, #1
 80057de:	0612      	lsls	r2, r2, #24
 80057e0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80057e4:	4313      	orrs	r3, r2
 80057e6:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80057e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057f0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80057f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80057f4:	4011      	ands	r1, r2
 80057f6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80057fa:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80057fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005800:	f023 030c 	bic.w	r3, r3, #12
 8005804:	4313      	orrs	r3, r2
 8005806:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005808:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800580a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800580c:	f023 0302 	bic.w	r3, r3, #2
 8005810:	4313      	orrs	r3, r2
 8005812:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005814:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800581a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800581e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005822:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005824:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800582a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800582c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800583a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800583c:	f7fd fec6 	bl	80035cc <HAL_GetTick>
 8005840:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005842:	e005      	b.n	8005850 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005844:	f7fd fec2 	bl	80035cc <HAL_GetTick>
 8005848:	1b00      	subs	r0, r0, r4
 800584a:	2802      	cmp	r0, #2
 800584c:	f63f af29 	bhi.w	80056a2 <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005850:	6833      	ldr	r3, [r6, #0]
 8005852:	019a      	lsls	r2, r3, #6
 8005854:	d5f6      	bpl.n	8005844 <HAL_RCC_OscConfig+0x4a4>
 8005856:	e665      	b.n	8005524 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005858:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800585a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800585c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800585e:	f43f ae62 	beq.w	8005526 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005862:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005866:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005868:	428b      	cmp	r3, r1
 800586a:	f47f aeb9 	bne.w	80055e0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800586e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005872:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	f47f aeb3 	bne.w	80055e0 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800587a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800587c:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8005880:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	f47f aeac 	bne.w	80055e0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005888:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800588a:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800588e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005890:	429a      	cmp	r2, r3
 8005892:	f47f aea5 	bne.w	80055e0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005896:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005898:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800589c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	f47f ae9e 	bne.w	80055e0 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058a6:	f3c6 6606 	ubfx	r6, r6, #24, #7
 80058aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058ac:	429e      	cmp	r6, r3
 80058ae:	f47f ae97 	bne.w	80055e0 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058b6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f43f ae32 	beq.w	8005524 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 80058c0:	4a10      	ldr	r2, [pc, #64]	; (8005904 <HAL_RCC_OscConfig+0x564>)
 80058c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058c4:	f023 0301 	bic.w	r3, r3, #1
 80058c8:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80058ca:	f7fd fe7f 	bl	80035cc <HAL_GetTick>
 80058ce:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80058d0:	f7fd fe7c 	bl	80035cc <HAL_GetTick>
 80058d4:	42a8      	cmp	r0, r5
 80058d6:	d0fb      	beq.n	80058d0 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058d8:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 80058da:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <HAL_RCC_OscConfig+0x56c>)
 80058e0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80058e2:	4023      	ands	r3, r4
 80058e4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80058e8:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80058ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80058f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e575      	b.n	80053f0 <HAL_RCC_OscConfig+0x50>
 8005904:	58024400 	.word	0x58024400
 8005908:	fffffc0c 	.word	0xfffffc0c
 800590c:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005910:	4d1c      	ldr	r5, [pc, #112]	; (8005984 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005912:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005916:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	672b      	str	r3, [r5, #112]	; 0x70
 800591e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8005920:	f023 0304 	bic.w	r3, r3, #4
 8005924:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8005926:	f7fd fe51 	bl	80035cc <HAL_GetTick>
 800592a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800592c:	e005      	b.n	800593a <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fd fe4d 	bl	80035cc <HAL_GetTick>
 8005932:	1b80      	subs	r0, r0, r6
 8005934:	42b8      	cmp	r0, r7
 8005936:	f63f aeb4 	bhi.w	80056a2 <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800593a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800593c:	0798      	lsls	r0, r3, #30
 800593e:	d4f6      	bmi.n	800592e <HAL_RCC_OscConfig+0x58e>
 8005940:	e5d3      	b.n	80054ea <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005942:	68eb      	ldr	r3, [r5, #12]
 8005944:	6a22      	ldr	r2, [r4, #32]
 8005946:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800594a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800594e:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	e595      	b.n	8005480 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005954:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <HAL_RCC_OscConfig+0x5e4>)
 8005956:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005958:	f043 0301 	orr.w	r3, r3, #1
 800595c:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800595e:	e690      	b.n	8005682 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005960:	4a08      	ldr	r2, [pc, #32]	; (8005984 <HAL_RCC_OscConfig+0x5e4>)
 8005962:	6853      	ldr	r3, [r2, #4]
 8005964:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596c:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	e586      	b.n	8005480 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005972:	f042 0204 	orr.w	r2, r2, #4
 8005976:	671a      	str	r2, [r3, #112]	; 0x70
 8005978:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	671a      	str	r2, [r3, #112]	; 0x70
 8005980:	e67f      	b.n	8005682 <HAL_RCC_OscConfig+0x2e2>
 8005982:	bf00      	nop
 8005984:	58024400 	.word	0x58024400

08005988 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005988:	4a47      	ldr	r2, [pc, #284]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x120>)
 800598a:	6913      	ldr	r3, [r2, #16]
 800598c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005990:	2b10      	cmp	r3, #16
 8005992:	d004      	beq.n	800599e <HAL_RCC_GetSysClockFreq+0x16>
 8005994:	2b18      	cmp	r3, #24
 8005996:	d00d      	beq.n	80059b4 <HAL_RCC_GetSysClockFreq+0x2c>
 8005998:	b11b      	cbz	r3, 80059a2 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800599a:	4844      	ldr	r0, [pc, #272]	; (8005aac <HAL_RCC_GetSysClockFreq+0x124>)
 800599c:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800599e:	4844      	ldr	r0, [pc, #272]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x128>)
 80059a0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059a2:	6813      	ldr	r3, [r2, #0]
 80059a4:	0699      	lsls	r1, r3, #26
 80059a6:	d54a      	bpl.n	8005a3e <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059a8:	6813      	ldr	r3, [r2, #0]
 80059aa:	4842      	ldr	r0, [pc, #264]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80059ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80059b0:	40d8      	lsrs	r0, r3
 80059b2:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 80059b6:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80059b8:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80059ba:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 80059bc:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80059c0:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80059c2:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 80059c6:	d038      	beq.n	8005a3a <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80059c8:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80059cc:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059d0:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80059d4:	fb05 f101 	mul.w	r1, r5, r1
 80059d8:	2b01      	cmp	r3, #1
 80059da:	ee07 1a90 	vmov	s15, r1
 80059de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 80059e2:	d002      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0x62>
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d02c      	beq.n	8005a42 <HAL_RCC_GetSysClockFreq+0xba>
 80059e8:	b393      	cbz	r3, 8005a50 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059ea:	ee07 0a90 	vmov	s15, r0
 80059ee:	eddf 6a32 	vldr	s13, [pc, #200]	; 8005ab8 <HAL_RCC_GetSysClockFreq+0x130>
 80059f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80059f8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80059fc:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8005abc <HAL_RCC_GetSysClockFreq+0x134>
 8005a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a04:	ee06 3a90 	vmov	s13, r3
 8005a08:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005a0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005a10:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005a14:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005a18:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a1c:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x120>)
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005a24:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a36:	ee17 0a90 	vmov	r0, s15
}
 8005a3a:	bc30      	pop	{r4, r5}
 8005a3c:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a3e:	481d      	ldr	r0, [pc, #116]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8005a40:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a42:	ee07 0a90 	vmov	s15, r0
 8005a46:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005ac0 <HAL_RCC_GetSysClockFreq+0x138>
 8005a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a4e:	e7d2      	b.n	80059f6 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a50:	6813      	ldr	r3, [r2, #0]
 8005a52:	069b      	lsls	r3, r3, #26
 8005a54:	d520      	bpl.n	8005a98 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a56:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a58:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a5c:	4915      	ldr	r1, [pc, #84]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005a62:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a64:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8005abc <HAL_RCC_GetSysClockFreq+0x134>
 8005a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a74:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a76:	ee06 3a90 	vmov	s13, r3
 8005a7a:	ee05 1a90 	vmov	s11, r1
 8005a7e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005a82:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005a86:	ee76 6a86 	vadd.f32	s13, s13, s12
 8005a8a:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8005a8e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8005a92:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005a96:	e7c1      	b.n	8005a1c <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a98:	ee07 0a90 	vmov	s15, r0
 8005a9c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005ac4 <HAL_RCC_GetSysClockFreq+0x13c>
 8005aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aa4:	e7a7      	b.n	80059f6 <HAL_RCC_GetSysClockFreq+0x6e>
 8005aa6:	bf00      	nop
 8005aa8:	58024400 	.word	0x58024400
 8005aac:	003d0900 	.word	0x003d0900
 8005ab0:	017d7840 	.word	0x017d7840
 8005ab4:	03d09000 	.word	0x03d09000
 8005ab8:	4a742400 	.word	0x4a742400
 8005abc:	39000000 	.word	0x39000000
 8005ac0:	4bbebc20 	.word	0x4bbebc20
 8005ac4:	4c742400 	.word	0x4c742400

08005ac8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f000 810c 	beq.w	8005ce6 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ace:	4a8c      	ldr	r2, [pc, #560]	; (8005d00 <HAL_RCC_ClockConfig+0x238>)
 8005ad0:	6813      	ldr	r3, [r2, #0]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	428b      	cmp	r3, r1
{
 8005ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	4604      	mov	r4, r0
 8005ade:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ae0:	d20c      	bcs.n	8005afc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae2:	6813      	ldr	r3, [r2, #0]
 8005ae4:	f023 030f 	bic.w	r3, r3, #15
 8005ae8:	430b      	orrs	r3, r1
 8005aea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aec:	6813      	ldr	r3, [r2, #0]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	428b      	cmp	r3, r1
 8005af4:	d002      	beq.n	8005afc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005af6:	2001      	movs	r0, #1
}
 8005af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005afc:	6823      	ldr	r3, [r4, #0]
 8005afe:	075f      	lsls	r7, r3, #29
 8005b00:	d50b      	bpl.n	8005b1a <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b02:	4980      	ldr	r1, [pc, #512]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005b04:	6920      	ldr	r0, [r4, #16]
 8005b06:	698a      	ldr	r2, [r1, #24]
 8005b08:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005b0c:	4290      	cmp	r0, r2
 8005b0e:	d904      	bls.n	8005b1a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b10:	698a      	ldr	r2, [r1, #24]
 8005b12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b16:	4302      	orrs	r2, r0
 8005b18:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1a:	071e      	lsls	r6, r3, #28
 8005b1c:	d50b      	bpl.n	8005b36 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b1e:	4979      	ldr	r1, [pc, #484]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005b20:	6960      	ldr	r0, [r4, #20]
 8005b22:	69ca      	ldr	r2, [r1, #28]
 8005b24:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005b28:	4290      	cmp	r0, r2
 8005b2a:	d904      	bls.n	8005b36 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b2c:	69ca      	ldr	r2, [r1, #28]
 8005b2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b32:	4302      	orrs	r2, r0
 8005b34:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b36:	06d8      	lsls	r0, r3, #27
 8005b38:	d50b      	bpl.n	8005b52 <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b3a:	4972      	ldr	r1, [pc, #456]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005b3c:	69a0      	ldr	r0, [r4, #24]
 8005b3e:	69ca      	ldr	r2, [r1, #28]
 8005b40:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005b44:	4290      	cmp	r0, r2
 8005b46:	d904      	bls.n	8005b52 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b48:	69ca      	ldr	r2, [r1, #28]
 8005b4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b4e:	4302      	orrs	r2, r0
 8005b50:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b52:	0699      	lsls	r1, r3, #26
 8005b54:	d50b      	bpl.n	8005b6e <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b56:	496b      	ldr	r1, [pc, #428]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005b58:	69e0      	ldr	r0, [r4, #28]
 8005b5a:	6a0a      	ldr	r2, [r1, #32]
 8005b5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005b60:	4290      	cmp	r0, r2
 8005b62:	d904      	bls.n	8005b6e <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b64:	6a0a      	ldr	r2, [r1, #32]
 8005b66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b6a:	4302      	orrs	r2, r0
 8005b6c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6e:	079a      	lsls	r2, r3, #30
 8005b70:	f140 80ab 	bpl.w	8005cca <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b74:	4863      	ldr	r0, [pc, #396]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005b76:	68e1      	ldr	r1, [r4, #12]
 8005b78:	6982      	ldr	r2, [r0, #24]
 8005b7a:	f002 020f 	and.w	r2, r2, #15
 8005b7e:	4291      	cmp	r1, r2
 8005b80:	d904      	bls.n	8005b8c <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b82:	6982      	ldr	r2, [r0, #24]
 8005b84:	f022 020f 	bic.w	r2, r2, #15
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b8c:	07d8      	lsls	r0, r3, #31
 8005b8e:	d530      	bpl.n	8005bf2 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b90:	4a5c      	ldr	r2, [pc, #368]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005b92:	68a1      	ldr	r1, [r4, #8]
 8005b94:	6993      	ldr	r3, [r2, #24]
 8005b96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b9e:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ba0:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba2:	2902      	cmp	r1, #2
 8005ba4:	f000 80a1 	beq.w	8005cea <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ba8:	2903      	cmp	r1, #3
 8005baa:	f000 8098 	beq.w	8005cde <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bae:	2901      	cmp	r1, #1
 8005bb0:	f000 80a1 	beq.w	8005cf6 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bb4:	0758      	lsls	r0, r3, #29
 8005bb6:	d59e      	bpl.n	8005af6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bb8:	4e52      	ldr	r6, [pc, #328]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bba:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bbe:	6933      	ldr	r3, [r6, #16]
 8005bc0:	f023 0307 	bic.w	r3, r3, #7
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8005bc8:	f7fd fd00 	bl	80035cc <HAL_GetTick>
 8005bcc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bce:	e005      	b.n	8005bdc <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd0:	f7fd fcfc 	bl	80035cc <HAL_GetTick>
 8005bd4:	1bc0      	subs	r0, r0, r7
 8005bd6:	4540      	cmp	r0, r8
 8005bd8:	f200 808b 	bhi.w	8005cf2 <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bdc:	6933      	ldr	r3, [r6, #16]
 8005bde:	6862      	ldr	r2, [r4, #4]
 8005be0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005be4:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005be8:	d1f2      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	0799      	lsls	r1, r3, #30
 8005bee:	d506      	bpl.n	8005bfe <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005bf0:	68e1      	ldr	r1, [r4, #12]
 8005bf2:	4844      	ldr	r0, [pc, #272]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005bf4:	6982      	ldr	r2, [r0, #24]
 8005bf6:	f002 020f 	and.w	r2, r2, #15
 8005bfa:	428a      	cmp	r2, r1
 8005bfc:	d869      	bhi.n	8005cd2 <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bfe:	4940      	ldr	r1, [pc, #256]	; (8005d00 <HAL_RCC_ClockConfig+0x238>)
 8005c00:	680a      	ldr	r2, [r1, #0]
 8005c02:	f002 020f 	and.w	r2, r2, #15
 8005c06:	42aa      	cmp	r2, r5
 8005c08:	d90a      	bls.n	8005c20 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0a:	680a      	ldr	r2, [r1, #0]
 8005c0c:	f022 020f 	bic.w	r2, r2, #15
 8005c10:	432a      	orrs	r2, r5
 8005c12:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c14:	680a      	ldr	r2, [r1, #0]
 8005c16:	f002 020f 	and.w	r2, r2, #15
 8005c1a:	42aa      	cmp	r2, r5
 8005c1c:	f47f af6b 	bne.w	8005af6 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c20:	075a      	lsls	r2, r3, #29
 8005c22:	d50b      	bpl.n	8005c3c <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c24:	4937      	ldr	r1, [pc, #220]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005c26:	6920      	ldr	r0, [r4, #16]
 8005c28:	698a      	ldr	r2, [r1, #24]
 8005c2a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005c2e:	4290      	cmp	r0, r2
 8005c30:	d204      	bcs.n	8005c3c <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c32:	698a      	ldr	r2, [r1, #24]
 8005c34:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c38:	4302      	orrs	r2, r0
 8005c3a:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c3c:	071f      	lsls	r7, r3, #28
 8005c3e:	d50b      	bpl.n	8005c58 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c40:	4930      	ldr	r1, [pc, #192]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005c42:	6960      	ldr	r0, [r4, #20]
 8005c44:	69ca      	ldr	r2, [r1, #28]
 8005c46:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005c4a:	4290      	cmp	r0, r2
 8005c4c:	d204      	bcs.n	8005c58 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c4e:	69ca      	ldr	r2, [r1, #28]
 8005c50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005c54:	4302      	orrs	r2, r0
 8005c56:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c58:	06de      	lsls	r6, r3, #27
 8005c5a:	d50b      	bpl.n	8005c74 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c5c:	4929      	ldr	r1, [pc, #164]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005c5e:	69a0      	ldr	r0, [r4, #24]
 8005c60:	69ca      	ldr	r2, [r1, #28]
 8005c62:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005c66:	4290      	cmp	r0, r2
 8005c68:	d204      	bcs.n	8005c74 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c6a:	69ca      	ldr	r2, [r1, #28]
 8005c6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c70:	4302      	orrs	r2, r0
 8005c72:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c74:	069d      	lsls	r5, r3, #26
 8005c76:	d50b      	bpl.n	8005c90 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c78:	4a22      	ldr	r2, [pc, #136]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005c7a:	69e1      	ldr	r1, [r4, #28]
 8005c7c:	6a13      	ldr	r3, [r2, #32]
 8005c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c82:	4299      	cmp	r1, r3
 8005c84:	d204      	bcs.n	8005c90 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c86:	6a13      	ldr	r3, [r2, #32]
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c90:	f7ff fe7a 	bl	8005988 <HAL_RCC_GetSysClockFreq>
 8005c94:	4a1b      	ldr	r2, [pc, #108]	; (8005d04 <HAL_RCC_ClockConfig+0x23c>)
 8005c96:	4603      	mov	r3, r0
 8005c98:	481b      	ldr	r0, [pc, #108]	; (8005d08 <HAL_RCC_ClockConfig+0x240>)
 8005c9a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c9c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c9e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8005ca2:	4d1a      	ldr	r5, [pc, #104]	; (8005d0c <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ca4:	f002 020f 	and.w	r2, r2, #15
 8005ca8:	4c19      	ldr	r4, [pc, #100]	; (8005d10 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005caa:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cac:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cae:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8005cb2:	4818      	ldr	r0, [pc, #96]	; (8005d14 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cb4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cb8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8005cba:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8005cbc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cbe:	40d3      	lsrs	r3, r2
 8005cc0:	6023      	str	r3, [r4, #0]
}
 8005cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8005cc6:	f7fd bc1f 	b.w	8003508 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cca:	07da      	lsls	r2, r3, #31
 8005ccc:	f53f af60 	bmi.w	8005b90 <HAL_RCC_ClockConfig+0xc8>
 8005cd0:	e795      	b.n	8005bfe <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd2:	6982      	ldr	r2, [r0, #24]
 8005cd4:	f022 020f 	bic.w	r2, r2, #15
 8005cd8:	4311      	orrs	r1, r2
 8005cda:	6181      	str	r1, [r0, #24]
 8005cdc:	e78f      	b.n	8005bfe <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cde:	019f      	lsls	r7, r3, #6
 8005ce0:	f53f af6a 	bmi.w	8005bb8 <HAL_RCC_ClockConfig+0xf0>
 8005ce4:	e707      	b.n	8005af6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005ce6:	2001      	movs	r0, #1
}
 8005ce8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cea:	039b      	lsls	r3, r3, #14
 8005cec:	f53f af64 	bmi.w	8005bb8 <HAL_RCC_ClockConfig+0xf0>
 8005cf0:	e701      	b.n	8005af6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005cf2:	2003      	movs	r0, #3
 8005cf4:	e700      	b.n	8005af8 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cf6:	05de      	lsls	r6, r3, #23
 8005cf8:	f53f af5e 	bmi.w	8005bb8 <HAL_RCC_ClockConfig+0xf0>
 8005cfc:	e6fb      	b.n	8005af6 <HAL_RCC_ClockConfig+0x2e>
 8005cfe:	bf00      	nop
 8005d00:	52002000 	.word	0x52002000
 8005d04:	58024400 	.word	0x58024400
 8005d08:	080172c4 	.word	0x080172c4
 8005d0c:	2000009c 	.word	0x2000009c
 8005d10:	200000a0 	.word	0x200000a0
 8005d14:	200000a8 	.word	0x200000a8

08005d18 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d18:	4a18      	ldr	r2, [pc, #96]	; (8005d7c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d1a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d1c:	6913      	ldr	r3, [r2, #16]
 8005d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d01a      	beq.n	8005d5c <HAL_RCC_GetHCLKFreq+0x44>
 8005d26:	2b18      	cmp	r3, #24
 8005d28:	d023      	beq.n	8005d72 <HAL_RCC_GetHCLKFreq+0x5a>
 8005d2a:	b1cb      	cbz	r3, 8005d60 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8005d2c:	4814      	ldr	r0, [pc, #80]	; (8005d80 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <HAL_RCC_GetHCLKFreq+0x64>)
 8005d30:	4914      	ldr	r1, [pc, #80]	; (8005d84 <HAL_RCC_GetHCLKFreq+0x6c>)
 8005d32:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d34:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d36:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d3a:	4c13      	ldr	r4, [pc, #76]	; (8005d88 <HAL_RCC_GetHCLKFreq+0x70>)
 8005d3c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d40:	4d12      	ldr	r5, [pc, #72]	; (8005d8c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d42:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d44:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d46:	f002 021f 	and.w	r2, r2, #31
 8005d4a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d4e:	f003 001f 	and.w	r0, r3, #31
 8005d52:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8005d56:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d58:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d5c:	480c      	ldr	r0, [pc, #48]	; (8005d90 <HAL_RCC_GetHCLKFreq+0x78>)
 8005d5e:	e7e6      	b.n	8005d2e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d60:	6813      	ldr	r3, [r2, #0]
 8005d62:	069b      	lsls	r3, r3, #26
 8005d64:	d508      	bpl.n	8005d78 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	480a      	ldr	r0, [pc, #40]	; (8005d94 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005d6a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005d6e:	40d0      	lsrs	r0, r2
 8005d70:	e7dd      	b.n	8005d2e <HAL_RCC_GetHCLKFreq+0x16>
 8005d72:	f7ff fa91 	bl	8005298 <HAL_RCC_GetSysClockFreq.part.0>
 8005d76:	e7da      	b.n	8005d2e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d78:	4806      	ldr	r0, [pc, #24]	; (8005d94 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005d7a:	e7d8      	b.n	8005d2e <HAL_RCC_GetHCLKFreq+0x16>
 8005d7c:	58024400 	.word	0x58024400
 8005d80:	003d0900 	.word	0x003d0900
 8005d84:	080172c4 	.word	0x080172c4
 8005d88:	200000a0 	.word	0x200000a0
 8005d8c:	2000009c 	.word	0x2000009c
 8005d90:	017d7840 	.word	0x017d7840
 8005d94:	03d09000 	.word	0x03d09000

08005d98 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d98:	4a1c      	ldr	r2, [pc, #112]	; (8005e0c <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d9a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d9c:	6913      	ldr	r3, [r2, #16]
 8005d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d021      	beq.n	8005dea <HAL_RCC_GetPCLK1Freq+0x52>
 8005da6:	2b18      	cmp	r3, #24
 8005da8:	d02b      	beq.n	8005e02 <HAL_RCC_GetPCLK1Freq+0x6a>
 8005daa:	b303      	cbz	r3, 8005dee <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8005dac:	4818      	ldr	r0, [pc, #96]	; (8005e10 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dae:	4a17      	ldr	r2, [pc, #92]	; (8005e0c <HAL_RCC_GetPCLK1Freq+0x74>)
 8005db0:	4918      	ldr	r1, [pc, #96]	; (8005e14 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8005db2:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 8005db4:	4d18      	ldr	r5, [pc, #96]	; (8005e18 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005db6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dba:	4c18      	ldr	r4, [pc, #96]	; (8005e1c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dbc:	5ccb      	ldrb	r3, [r1, r3]
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dc6:	6990      	ldr	r0, [r2, #24]
 8005dc8:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8005dcc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dce:	5c08      	ldrb	r0, [r1, r0]
 8005dd0:	f000 001f 	and.w	r0, r0, #31
 8005dd4:	40c3      	lsrs	r3, r0
 8005dd6:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005dd8:	69d2      	ldr	r2, [r2, #28]
 8005dda:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005dde:	5c88      	ldrb	r0, [r1, r2]
 8005de0:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005de4:	fa23 f000 	lsr.w	r0, r3, r0
 8005de8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dea:	480d      	ldr	r0, [pc, #52]	; (8005e20 <HAL_RCC_GetPCLK1Freq+0x88>)
 8005dec:	e7df      	b.n	8005dae <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dee:	6813      	ldr	r3, [r2, #0]
 8005df0:	069b      	lsls	r3, r3, #26
 8005df2:	d509      	bpl.n	8005e08 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005df4:	6810      	ldr	r0, [r2, #0]
 8005df6:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8005df8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005dfc:	fa23 f000 	lsr.w	r0, r3, r0
 8005e00:	e7d5      	b.n	8005dae <HAL_RCC_GetPCLK1Freq+0x16>
 8005e02:	f7ff fa49 	bl	8005298 <HAL_RCC_GetSysClockFreq.part.0>
 8005e06:	e7d2      	b.n	8005dae <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e08:	4806      	ldr	r0, [pc, #24]	; (8005e24 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8005e0a:	e7d0      	b.n	8005dae <HAL_RCC_GetPCLK1Freq+0x16>
 8005e0c:	58024400 	.word	0x58024400
 8005e10:	003d0900 	.word	0x003d0900
 8005e14:	080172c4 	.word	0x080172c4
 8005e18:	2000009c 	.word	0x2000009c
 8005e1c:	200000a0 	.word	0x200000a0
 8005e20:	017d7840 	.word	0x017d7840
 8005e24:	03d09000 	.word	0x03d09000

08005e28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e2a:	4c3a      	ldr	r4, [pc, #232]	; (8005f14 <RCCEx_PLL2_Config+0xec>)
 8005e2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d067      	beq.n	8005f06 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	4606      	mov	r6, r0
 8005e3a:	460f      	mov	r7, r1
 8005e3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e40:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e42:	f7fd fbc3 	bl	80035cc <HAL_GetTick>
 8005e46:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e48:	e004      	b.n	8005e54 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e4a:	f7fd fbbf 	bl	80035cc <HAL_GetTick>
 8005e4e:	1b43      	subs	r3, r0, r5
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d856      	bhi.n	8005f02 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	011a      	lsls	r2, r3, #4
 8005e58:	d4f7      	bmi.n	8005e4a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e5c:	6832      	ldr	r2, [r6, #0]
 8005e5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005e62:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005e66:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e68:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	3a01      	subs	r2, #1
 8005e70:	025b      	lsls	r3, r3, #9
 8005e72:	0412      	lsls	r2, r2, #16
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	6872      	ldr	r2, [r6, #4]
 8005e7e:	3a01      	subs	r2, #1
 8005e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e84:	4313      	orrs	r3, r2
 8005e86:	6932      	ldr	r2, [r6, #16]
 8005e88:	3a01      	subs	r2, #1
 8005e8a:	0612      	lsls	r2, r2, #24
 8005e8c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005e90:	4313      	orrs	r3, r2
 8005e92:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005e96:	6972      	ldr	r2, [r6, #20]
 8005e98:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005ea0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ea2:	69b3      	ldr	r3, [r6, #24]
 8005ea4:	f022 0220 	bic.w	r2, r2, #32
 8005ea8:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005eaa:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005eac:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005eae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005eb0:	f022 0210 	bic.w	r2, r2, #16
 8005eb4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005eb6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005eb8:	69f2      	ldr	r2, [r6, #28]
 8005eba:	400b      	ands	r3, r1
 8005ebc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005ec0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ec2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ec4:	f043 0310 	orr.w	r3, r3, #16
 8005ec8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005eca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005ecc:	b1ef      	cbz	r7, 8005f0a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ece:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005ed0:	bf0c      	ite	eq
 8005ed2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005ed6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8005eda:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005edc:	4c0d      	ldr	r4, [pc, #52]	; (8005f14 <RCCEx_PLL2_Config+0xec>)
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ee4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee6:	f7fd fb71 	bl	80035cc <HAL_GetTick>
 8005eea:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005eec:	e004      	b.n	8005ef8 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005eee:	f7fd fb6d 	bl	80035cc <HAL_GetTick>
 8005ef2:	1b40      	subs	r0, r0, r5
 8005ef4:	2802      	cmp	r0, #2
 8005ef6:	d804      	bhi.n	8005f02 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	d5f7      	bpl.n	8005eee <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8005efe:	2000      	movs	r0, #0
}
 8005f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005f02:	2003      	movs	r0, #3
}
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005f06:	2001      	movs	r0, #1
}
 8005f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f10:	e7e4      	b.n	8005edc <RCCEx_PLL2_Config+0xb4>
 8005f12:	bf00      	nop
 8005f14:	58024400 	.word	0x58024400
 8005f18:	ffff0007 	.word	0xffff0007

08005f1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f1e:	4c3a      	ldr	r4, [pc, #232]	; (8006008 <RCCEx_PLL3_Config+0xec>)
 8005f20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	2b03      	cmp	r3, #3
 8005f28:	d067      	beq.n	8005ffa <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	4606      	mov	r6, r0
 8005f2e:	460f      	mov	r7, r1
 8005f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f34:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f36:	f7fd fb49 	bl	80035cc <HAL_GetTick>
 8005f3a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f3c:	e004      	b.n	8005f48 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f3e:	f7fd fb45 	bl	80035cc <HAL_GetTick>
 8005f42:	1b43      	subs	r3, r0, r5
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d856      	bhi.n	8005ff6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	009a      	lsls	r2, r3, #2
 8005f4c:	d4f7      	bmi.n	8005f3e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f50:	6832      	ldr	r2, [r6, #0]
 8005f52:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005f56:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005f5a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f5c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	3a01      	subs	r2, #1
 8005f64:	025b      	lsls	r3, r3, #9
 8005f66:	0412      	lsls	r2, r2, #16
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	6872      	ldr	r2, [r6, #4]
 8005f72:	3a01      	subs	r2, #1
 8005f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	6932      	ldr	r2, [r6, #16]
 8005f7c:	3a01      	subs	r2, #1
 8005f7e:	0612      	lsls	r2, r2, #24
 8005f80:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005f84:	4313      	orrs	r3, r2
 8005f86:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f8a:	6972      	ldr	r2, [r6, #20]
 8005f8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f90:	4313      	orrs	r3, r2
 8005f92:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f96:	69b3      	ldr	r3, [r6, #24]
 8005f98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f9c:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	; (800600c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005fa0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005fa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fa8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005faa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005fac:	69f2      	ldr	r2, [r6, #28]
 8005fae:	400b      	ands	r3, r1
 8005fb0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005fb4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005fb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fbc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005fc0:	b1ef      	cbz	r7, 8005ffe <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005fc2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005fc4:	bf0c      	ite	eq
 8005fc6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005fca:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8005fce:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005fd0:	4c0d      	ldr	r4, [pc, #52]	; (8006008 <RCCEx_PLL3_Config+0xec>)
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fda:	f7fd faf7 	bl	80035cc <HAL_GetTick>
 8005fde:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fe0:	e004      	b.n	8005fec <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005fe2:	f7fd faf3 	bl	80035cc <HAL_GetTick>
 8005fe6:	1b40      	subs	r0, r0, r5
 8005fe8:	2802      	cmp	r0, #2
 8005fea:	d804      	bhi.n	8005ff6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	d5f7      	bpl.n	8005fe2 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8005ff2:	2000      	movs	r0, #0
}
 8005ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005ff6:	2003      	movs	r0, #3
}
 8005ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005ffa:	2001      	movs	r0, #1
}
 8005ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006002:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006004:	e7e4      	b.n	8005fd0 <RCCEx_PLL3_Config+0xb4>
 8006006:	bf00      	nop
 8006008:	58024400 	.word	0x58024400
 800600c:	ffff0007 	.word	0xffff0007

08006010 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006014:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8006018:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800601a:	011d      	lsls	r5, r3, #4
 800601c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8006020:	d523      	bpl.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006022:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8006024:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006028:	f000 854f 	beq.w	8006aca <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800602c:	d812      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800602e:	2900      	cmp	r1, #0
 8006030:	f000 85a5 	beq.w	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8006034:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006038:	f040 859e 	bne.w	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800603c:	2102      	movs	r1, #2
 800603e:	3008      	adds	r0, #8
 8006040:	f7ff fef2 	bl	8005e28 <RCCEx_PLL2_Config>
 8006044:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8006046:	2e00      	cmp	r6, #0
 8006048:	f040 851e 	bne.w	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800604c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800604e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006052:	e003      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006054:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8006058:	f040 858e 	bne.w	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800605c:	4dae      	ldr	r5, [pc, #696]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800605e:	2600      	movs	r6, #0
 8006060:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8006062:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8006066:	4301      	orrs	r1, r0
 8006068:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800606a:	05d8      	lsls	r0, r3, #23
 800606c:	d50a      	bpl.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 800606e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006070:	2904      	cmp	r1, #4
 8006072:	d806      	bhi.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006074:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006078:	05390532 	.word	0x05390532
 800607c:	03100516 	.word	0x03100516
 8006080:	0310      	.short	0x0310
 8006082:	2601      	movs	r6, #1
 8006084:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006086:	0599      	lsls	r1, r3, #22
 8006088:	d51d      	bpl.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800608a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800608c:	2980      	cmp	r1, #128	; 0x80
 800608e:	f000 8512 	beq.w	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
 8006092:	f200 80f9 	bhi.w	8006288 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006096:	2900      	cmp	r1, #0
 8006098:	f000 8420 	beq.w	80068dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800609c:	2940      	cmp	r1, #64	; 0x40
 800609e:	f040 80fa 	bne.w	8006296 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060a2:	2100      	movs	r1, #0
 80060a4:	f104 0008 	add.w	r0, r4, #8
 80060a8:	f7ff febe 	bl	8005e28 <RCCEx_PLL2_Config>
 80060ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80060ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80060b2:	2d00      	cmp	r5, #0
 80060b4:	f040 83eb 	bne.w	800688e <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80060b8:	4f97      	ldr	r7, [pc, #604]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80060ba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80060bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060be:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 80060c2:	4301      	orrs	r1, r0
 80060c4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80060c6:	055f      	lsls	r7, r3, #21
 80060c8:	d521      	bpl.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 80060ca:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80060ce:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80060d2:	f000 851d 	beq.w	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80060d6:	f200 80e1 	bhi.w	800629c <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80060da:	2900      	cmp	r1, #0
 80060dc:	f000 8405 	beq.w	80068ea <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80060e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80060e4:	f040 80e2 	bne.w	80062ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80060e8:	2100      	movs	r1, #0
 80060ea:	f104 0008 	add.w	r0, r4, #8
 80060ee:	f7ff fe9b 	bl	8005e28 <RCCEx_PLL2_Config>
 80060f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80060f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	f040 83cf 	bne.w	800689c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060fe:	4f86      	ldr	r7, [pc, #536]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006100:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8006104:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006106:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800610a:	4301      	orrs	r1, r0
 800610c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800610e:	0518      	lsls	r0, r3, #20
 8006110:	d521      	bpl.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 8006112:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8006116:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800611a:	f000 84b9 	beq.w	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xa80>
 800611e:	f200 80c8 	bhi.w	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8006122:	2900      	cmp	r1, #0
 8006124:	f000 83d4 	beq.w	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006128:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800612c:	f040 80c9 	bne.w	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006130:	2100      	movs	r1, #0
 8006132:	f104 0008 	add.w	r0, r4, #8
 8006136:	f7ff fe77 	bl	8005e28 <RCCEx_PLL2_Config>
 800613a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800613c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006140:	2d00      	cmp	r5, #0
 8006142:	f040 83a2 	bne.w	800688a <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006146:	4f74      	ldr	r7, [pc, #464]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006148:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800614c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800614e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8006152:	4301      	orrs	r1, r0
 8006154:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006156:	0199      	lsls	r1, r3, #6
 8006158:	d518      	bpl.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 800615a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800615c:	2920      	cmp	r1, #32
 800615e:	f000 841e 	beq.w	800699e <HAL_RCCEx_PeriphCLKConfig+0x98e>
 8006162:	f200 80b1 	bhi.w	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006166:	b139      	cbz	r1, 8006178 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006168:	2910      	cmp	r1, #16
 800616a:	f040 80b0 	bne.w	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800616e:	486a      	ldr	r0, [pc, #424]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006170:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006172:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006176:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8006178:	2d00      	cmp	r5, #0
 800617a:	f040 83d3 	bne.w	8006924 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800617e:	4f66      	ldr	r7, [pc, #408]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006180:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006182:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006184:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8006188:	4301      	orrs	r1, r0
 800618a:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800618c:	04df      	lsls	r7, r3, #19
 800618e:	d51f      	bpl.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 8006190:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006192:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006196:	f000 84b1 	beq.w	8006afc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800619a:	f200 809b 	bhi.w	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800619e:	2900      	cmp	r1, #0
 80061a0:	f000 8390 	beq.w	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80061a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80061a8:	f040 809c 	bne.w	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ac:	2100      	movs	r1, #0
 80061ae:	f104 0008 	add.w	r0, r4, #8
 80061b2:	f7ff fe39 	bl	8005e28 <RCCEx_PLL2_Config>
 80061b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80061bc:	2d00      	cmp	r5, #0
 80061be:	f040 8368 	bne.w	8006892 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061c2:	4f55      	ldr	r7, [pc, #340]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80061c4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80061c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061c8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80061cc:	4301      	orrs	r1, r0
 80061ce:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80061d0:	0498      	lsls	r0, r3, #18
 80061d2:	d51d      	bpl.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 80061d4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80061d6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80061da:	f000 840f 	beq.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 80061de:	f200 8084 	bhi.w	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80061e2:	b159      	cbz	r1, 80061fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80061e4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80061e8:	f040 8087 	bne.w	80062fa <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061ec:	2101      	movs	r1, #1
 80061ee:	f104 0008 	add.w	r0, r4, #8
 80061f2:	f7ff fe19 	bl	8005e28 <RCCEx_PLL2_Config>
 80061f6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80061f8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80061fc:	2d00      	cmp	r5, #0
 80061fe:	f040 839b 	bne.w	8006938 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006202:	4f45      	ldr	r7, [pc, #276]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006204:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006206:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006208:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800620c:	4301      	orrs	r1, r0
 800620e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006210:	0459      	lsls	r1, r3, #17
 8006212:	d51d      	bpl.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 8006214:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8006218:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800621c:	f000 83fa 	beq.w	8006a14 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006220:	d86e      	bhi.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8006222:	b151      	cbz	r1, 800623a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006224:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8006228:	d172      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800622a:	2101      	movs	r1, #1
 800622c:	f104 0008 	add.w	r0, r4, #8
 8006230:	f7ff fdfa 	bl	8005e28 <RCCEx_PLL2_Config>
 8006234:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006236:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800623a:	2d00      	cmp	r5, #0
 800623c:	f040 8380 	bne.w	8006940 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006240:	4f35      	ldr	r7, [pc, #212]	; (8006318 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8006242:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8006246:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006248:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 800624c:	4301      	orrs	r1, r0
 800624e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006250:	041f      	lsls	r7, r3, #16
 8006252:	d50d      	bpl.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 8006254:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006256:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800625a:	f000 83c7 	beq.w	80069ec <HAL_RCCEx_PeriphCLKConfig+0x9dc>
 800625e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006262:	f000 8225 	beq.w	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8006266:	2900      	cmp	r1, #0
 8006268:	f000 822a 	beq.w	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800626c:	2601      	movs	r6, #1
 800626e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006270:	01d8      	lsls	r0, r3, #7
 8006272:	d55f      	bpl.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
 8006274:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006276:	2903      	cmp	r1, #3
 8006278:	f200 84bb 	bhi.w	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800627c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006280:	03e10056 	.word	0x03e10056
 8006284:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
 8006288:	29c0      	cmp	r1, #192	; 0xc0
 800628a:	f43f af12 	beq.w	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800628e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006292:	f43f af0e 	beq.w	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006296:	2601      	movs	r6, #1
 8006298:	4635      	mov	r5, r6
 800629a:	e714      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800629c:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 80062a0:	f43f af2a 	beq.w	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80062a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80062a8:	f43f af26 	beq.w	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80062ac:	2601      	movs	r6, #1
 80062ae:	4635      	mov	r5, r6
 80062b0:	e72d      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 80062b2:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80062b6:	f43f af43 	beq.w	8006140 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80062ba:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80062be:	f43f af3f 	beq.w	8006140 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80062c2:	2601      	movs	r6, #1
 80062c4:	4635      	mov	r5, r6
 80062c6:	e746      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 80062c8:	2930      	cmp	r1, #48	; 0x30
 80062ca:	f43f af55 	beq.w	8006178 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80062ce:	2601      	movs	r6, #1
 80062d0:	4635      	mov	r5, r6
 80062d2:	e75b      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 80062d4:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80062d8:	f43f af70 	beq.w	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80062dc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80062e0:	f43f af6c 	beq.w	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 80062e4:	2601      	movs	r6, #1
 80062e6:	4635      	mov	r5, r6
 80062e8:	e772      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 80062ea:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 80062ee:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80062f2:	d083      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80062f4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80062f8:	d080      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 80062fa:	2601      	movs	r6, #1
 80062fc:	4635      	mov	r5, r6
 80062fe:	e787      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 8006300:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8006304:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006308:	d097      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800630a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800630e:	d094      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006310:	2601      	movs	r6, #1
 8006312:	4635      	mov	r5, r6
 8006314:	e79c      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006316:	bf00      	nop
 8006318:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800631c:	2102      	movs	r1, #2
 800631e:	f104 0008 	add.w	r0, r4, #8
 8006322:	f7ff fd81 	bl	8005e28 <RCCEx_PLL2_Config>
 8006326:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006328:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800632c:	2d00      	cmp	r5, #0
 800632e:	f000 82fb 	beq.w	8006928 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8006332:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006334:	0259      	lsls	r1, r3, #9
 8006336:	f100 825a 	bmi.w	80067ee <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800633a:	07d8      	lsls	r0, r3, #31
 800633c:	d52f      	bpl.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
 800633e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006340:	2928      	cmp	r1, #40	; 0x28
 8006342:	d82a      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x38a>
 8006344:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006348:	002901fa 	.word	0x002901fa
 800634c:	00290029 	.word	0x00290029
 8006350:	00290029 	.word	0x00290029
 8006354:	00290029 	.word	0x00290029
 8006358:	00290406 	.word	0x00290406
 800635c:	00290029 	.word	0x00290029
 8006360:	00290029 	.word	0x00290029
 8006364:	00290029 	.word	0x00290029
 8006368:	002901f2 	.word	0x002901f2
 800636c:	00290029 	.word	0x00290029
 8006370:	00290029 	.word	0x00290029
 8006374:	00290029 	.word	0x00290029
 8006378:	002901fa 	.word	0x002901fa
 800637c:	00290029 	.word	0x00290029
 8006380:	00290029 	.word	0x00290029
 8006384:	00290029 	.word	0x00290029
 8006388:	002901fa 	.word	0x002901fa
 800638c:	00290029 	.word	0x00290029
 8006390:	00290029 	.word	0x00290029
 8006394:	00290029 	.word	0x00290029
 8006398:	01fa      	.short	0x01fa
 800639a:	2601      	movs	r6, #1
 800639c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800639e:	0799      	lsls	r1, r3, #30
 80063a0:	d517      	bpl.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80063a2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80063a4:	2905      	cmp	r1, #5
 80063a6:	f200 8420 	bhi.w	8006bea <HAL_RCCEx_PeriphCLKConfig+0xbda>
 80063aa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80063ae:	000e      	.short	0x000e
 80063b0:	000603bb 	.word	0x000603bb
 80063b4:	000e000e 	.word	0x000e000e
 80063b8:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ba:	2101      	movs	r1, #1
 80063bc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80063c0:	f7ff fdac 	bl	8005f1c <RCCEx_PLL3_Config>
 80063c4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063c6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80063ca:	2d00      	cmp	r5, #0
 80063cc:	f000 8299 	beq.w	8006902 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80063d0:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063d2:	075f      	lsls	r7, r3, #29
 80063d4:	d518      	bpl.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80063d6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80063da:	2905      	cmp	r1, #5
 80063dc:	f200 840d 	bhi.w	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xbea>
 80063e0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80063e4:	03ac000e 	.word	0x03ac000e
 80063e8:	000e0006 	.word	0x000e0006
 80063ec:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063f0:	2101      	movs	r1, #1
 80063f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80063f6:	f7ff fd91 	bl	8005f1c <RCCEx_PLL3_Config>
 80063fa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80063fc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006400:	2d00      	cmp	r5, #0
 8006402:	f000 8286 	beq.w	8006912 <HAL_RCCEx_PeriphCLKConfig+0x902>
 8006406:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006408:	0698      	lsls	r0, r3, #26
 800640a:	d51f      	bpl.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800640c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006410:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006414:	f000 8309 	beq.w	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006418:	f200 810b 	bhi.w	8006632 <HAL_RCCEx_PeriphCLKConfig+0x622>
 800641c:	b159      	cbz	r1, 8006436 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800641e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8006422:	f040 8110 	bne.w	8006646 <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006426:	2100      	movs	r1, #0
 8006428:	f104 0008 	add.w	r0, r4, #8
 800642c:	f7ff fcfc 	bl	8005e28 <RCCEx_PLL2_Config>
 8006430:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006432:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006436:	2d00      	cmp	r5, #0
 8006438:	f040 825f 	bne.w	80068fa <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800643c:	4fa6      	ldr	r7, [pc, #664]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800643e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006442:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006444:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8006448:	4301      	orrs	r1, r0
 800644a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800644c:	0659      	lsls	r1, r3, #25
 800644e:	d51f      	bpl.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006450:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8006454:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006458:	f000 82b2 	beq.w	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800645c:	f200 80f6 	bhi.w	800664c <HAL_RCCEx_PeriphCLKConfig+0x63c>
 8006460:	b159      	cbz	r1, 800647a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8006462:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006466:	f040 80fb 	bne.w	8006660 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800646a:	2100      	movs	r1, #0
 800646c:	f104 0008 	add.w	r0, r4, #8
 8006470:	f7ff fcda 	bl	8005e28 <RCCEx_PLL2_Config>
 8006474:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006476:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800647a:	2d00      	cmp	r5, #0
 800647c:	f040 8262 	bne.w	8006944 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006480:	4f95      	ldr	r7, [pc, #596]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006482:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8006486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006488:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800648c:	4301      	orrs	r1, r0
 800648e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006490:	061f      	lsls	r7, r3, #24
 8006492:	d51f      	bpl.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006494:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8006498:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800649c:	f000 829b 	beq.w	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
 80064a0:	f200 80e1 	bhi.w	8006666 <HAL_RCCEx_PeriphCLKConfig+0x656>
 80064a4:	b159      	cbz	r1, 80064be <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80064a6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80064aa:	f040 80e6 	bne.w	800667a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ae:	2100      	movs	r1, #0
 80064b0:	f104 0008 	add.w	r0, r4, #8
 80064b4:	f7ff fcb8 	bl	8005e28 <RCCEx_PLL2_Config>
 80064b8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064ba:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80064be:	2d00      	cmp	r5, #0
 80064c0:	f040 823c 	bne.w	800693c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064c4:	4f84      	ldr	r7, [pc, #528]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064c6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80064ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064cc:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80064d0:	4301      	orrs	r1, r0
 80064d2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064d4:	0718      	lsls	r0, r3, #28
 80064d6:	d50b      	bpl.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80064d8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80064dc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80064e0:	f000 82b8 	beq.w	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80064e4:	4f7c      	ldr	r7, [pc, #496]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80064e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064e8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80064ec:	4301      	orrs	r1, r0
 80064ee:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064f0:	06d9      	lsls	r1, r3, #27
 80064f2:	d50b      	bpl.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064f4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80064f8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80064fc:	f000 82b7 	beq.w	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006500:	4f75      	ldr	r7, [pc, #468]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006502:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006504:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006508:	4301      	orrs	r1, r0
 800650a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800650c:	031f      	lsls	r7, r3, #12
 800650e:	d50e      	bpl.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
 8006510:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8006514:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006518:	f000 80f4 	beq.w	8006704 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800651c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006520:	f000 80f8 	beq.w	8006714 <HAL_RCCEx_PeriphCLKConfig+0x704>
 8006524:	2900      	cmp	r1, #0
 8006526:	f000 822e 	beq.w	8006986 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800652a:	2601      	movs	r6, #1
 800652c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800652e:	0358      	lsls	r0, r3, #13
 8006530:	d50f      	bpl.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
 8006532:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8006536:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800653a:	f000 80cf 	beq.w	80066dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800653e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8006542:	f000 80d3 	beq.w	80066ec <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8006546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800654a:	f000 8214 	beq.w	8006976 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800654e:	2601      	movs	r6, #1
 8006550:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006552:	03d9      	lsls	r1, r3, #15
 8006554:	d509      	bpl.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
 8006556:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006558:	2900      	cmp	r1, #0
 800655a:	f000 8203 	beq.w	8006964 <HAL_RCCEx_PeriphCLKConfig+0x954>
 800655e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006562:	f000 819d 	beq.w	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x890>
 8006566:	2601      	movs	r6, #1
 8006568:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800656a:	009f      	lsls	r7, r3, #2
 800656c:	f100 80f1 	bmi.w	8006752 <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006570:	0398      	lsls	r0, r3, #14
 8006572:	d50c      	bpl.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
 8006574:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8006578:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800657c:	f000 81ea 	beq.w	8006954 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8006580:	d97e      	bls.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x670>
 8006582:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8006586:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800658a:	d07b      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x674>
 800658c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800658e:	02d9      	lsls	r1, r3, #11
 8006590:	d506      	bpl.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006592:	4851      	ldr	r0, [pc, #324]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006594:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8006596:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006598:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800659c:	4329      	orrs	r1, r5
 800659e:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065a0:	00df      	lsls	r7, r3, #3
 80065a2:	d507      	bpl.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065a4:	484c      	ldr	r0, [pc, #304]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065a6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80065aa:	6901      	ldr	r1, [r0, #16]
 80065ac:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80065b0:	4329      	orrs	r1, r5
 80065b2:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065b4:	029d      	lsls	r5, r3, #10
 80065b6:	d506      	bpl.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065b8:	4847      	ldr	r0, [pc, #284]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065ba:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 80065bc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80065be:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80065c2:	4329      	orrs	r1, r5
 80065c4:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065c6:	0058      	lsls	r0, r3, #1
 80065c8:	d509      	bpl.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065ca:	4943      	ldr	r1, [pc, #268]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065cc:	6908      	ldr	r0, [r1, #16]
 80065ce:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80065d2:	6108      	str	r0, [r1, #16]
 80065d4:	6908      	ldr	r0, [r1, #16]
 80065d6:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 80065da:	4328      	orrs	r0, r5
 80065dc:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80065de:	2b00      	cmp	r3, #0
 80065e0:	da06      	bge.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065e2:	483d      	ldr	r0, [pc, #244]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065e4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80065e6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80065e8:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80065ec:	4329      	orrs	r1, r5
 80065ee:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065f0:	0219      	lsls	r1, r3, #8
 80065f2:	d507      	bpl.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065f4:	4938      	ldr	r1, [pc, #224]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80065f6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80065fa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80065fc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006600:	4303      	orrs	r3, r0
 8006602:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006604:	07d3      	lsls	r3, r2, #31
 8006606:	f100 80b0 	bmi.w	800676a <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800660a:	0797      	lsls	r7, r2, #30
 800660c:	f100 80ba 	bmi.w	8006784 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006610:	0755      	lsls	r5, r2, #29
 8006612:	f100 80c4 	bmi.w	800679e <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006616:	0710      	lsls	r0, r2, #28
 8006618:	f100 80ce 	bmi.w	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800661c:	06d1      	lsls	r1, r2, #27
 800661e:	f100 80d8 	bmi.w	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006622:	0692      	lsls	r2, r2, #26
 8006624:	f100 8125 	bmi.w	8006872 <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
 8006628:	1e30      	subs	r0, r6, #0
 800662a:	bf18      	it	ne
 800662c:	2001      	movne	r0, #1
}
 800662e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006632:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8006636:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800663a:	f43f aefc 	beq.w	8006436 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800663e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8006642:	f43f aef8 	beq.w	8006436 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8006646:	2601      	movs	r6, #1
 8006648:	4635      	mov	r5, r6
 800664a:	e6ff      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800664c:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8006650:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8006654:	f43f af11 	beq.w	800647a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8006658:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800665c:	f43f af0d 	beq.w	800647a <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8006660:	2601      	movs	r6, #1
 8006662:	4635      	mov	r5, r6
 8006664:	e714      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006666:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800666a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800666e:	f43f af26 	beq.w	80064be <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006672:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8006676:	f43f af22 	beq.w	80064be <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800667a:	2601      	movs	r6, #1
 800667c:	4635      	mov	r5, r6
 800667e:	e729      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
 8006680:	2900      	cmp	r1, #0
 8006682:	d183      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
 8006684:	2d00      	cmp	r5, #0
 8006686:	f040 8163 	bne.w	8006950 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800668a:	4d13      	ldr	r5, [pc, #76]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800668c:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800668e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006692:	4301      	orrs	r1, r0
 8006694:	6569      	str	r1, [r5, #84]	; 0x54
 8006696:	e77a      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8006698:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800669a:	2d00      	cmp	r5, #0
 800669c:	f040 80fb 	bne.w	8006896 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066a0:	4f0d      	ldr	r7, [pc, #52]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80066a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066a6:	f021 0107 	bic.w	r1, r1, #7
 80066aa:	4301      	orrs	r1, r0
 80066ac:	6539      	str	r1, [r7, #80]	; 0x50
 80066ae:	e4ea      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066b0:	2101      	movs	r1, #1
 80066b2:	f104 0008 	add.w	r0, r4, #8
 80066b6:	f7ff fbb7 	bl	8005e28 <RCCEx_PLL2_Config>
 80066ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	f040 811c 	bne.w	80068fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066c6:	4f04      	ldr	r7, [pc, #16]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80066c8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80066ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066cc:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80066d0:	4301      	orrs	r1, r0
 80066d2:	6539      	str	r1, [r7, #80]	; 0x50
 80066d4:	e5cc      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80066d6:	bf00      	nop
 80066d8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066dc:	2101      	movs	r1, #1
 80066de:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80066e2:	f7ff fc1b 	bl	8005f1c <RCCEx_PLL3_Config>
 80066e6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066e8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80066ec:	2d00      	cmp	r5, #0
 80066ee:	f040 812d 	bne.w	800694c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066f2:	4fb1      	ldr	r7, [pc, #708]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80066f4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80066f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066fa:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80066fe:	4301      	orrs	r1, r0
 8006700:	6579      	str	r1, [r7, #84]	; 0x54
 8006702:	e726      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006704:	2102      	movs	r1, #2
 8006706:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800670a:	f7ff fc07 	bl	8005f1c <RCCEx_PLL3_Config>
 800670e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006710:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006714:	2d00      	cmp	r5, #0
 8006716:	f040 8117 	bne.w	8006948 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800671a:	4fa7      	ldr	r7, [pc, #668]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800671c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8006720:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006722:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8006726:	4301      	orrs	r1, r0
 8006728:	65b9      	str	r1, [r7, #88]	; 0x58
 800672a:	e700      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800672c:	2101      	movs	r1, #1
 800672e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006732:	f7ff fbf3 	bl	8005f1c <RCCEx_PLL3_Config>
 8006736:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006738:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800673c:	2d00      	cmp	r5, #0
 800673e:	f040 80da 	bne.w	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006742:	4f9d      	ldr	r7, [pc, #628]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006744:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006746:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006748:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 800674c:	4301      	orrs	r1, r0
 800674e:	6579      	str	r1, [r7, #84]	; 0x54
 8006750:	e625      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006752:	2102      	movs	r1, #2
 8006754:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006758:	f7ff fbe0 	bl	8005f1c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800675c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006760:	2800      	cmp	r0, #0
 8006762:	f43f af05 	beq.w	8006570 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
 8006766:	2601      	movs	r6, #1
 8006768:	e702      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800676a:	2100      	movs	r1, #0
 800676c:	f104 0008 	add.w	r0, r4, #8
 8006770:	f7ff fb5a 	bl	8005e28 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006774:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006776:	2800      	cmp	r0, #0
 8006778:	f43f af47 	beq.w	800660a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800677c:	0797      	lsls	r7, r2, #30
 800677e:	4606      	mov	r6, r0
 8006780:	f57f af46 	bpl.w	8006610 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006784:	2101      	movs	r1, #1
 8006786:	f104 0008 	add.w	r0, r4, #8
 800678a:	f7ff fb4d 	bl	8005e28 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800678e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006790:	2800      	cmp	r0, #0
 8006792:	f43f af3d 	beq.w	8006610 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006796:	0755      	lsls	r5, r2, #29
 8006798:	4606      	mov	r6, r0
 800679a:	f57f af3c 	bpl.w	8006616 <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800679e:	2102      	movs	r1, #2
 80067a0:	f104 0008 	add.w	r0, r4, #8
 80067a4:	f7ff fb40 	bl	8005e28 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067a8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f43f af33 	beq.w	8006616 <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067b0:	4606      	mov	r6, r0
 80067b2:	0710      	lsls	r0, r2, #28
 80067b4:	f57f af32 	bpl.w	800661c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067b8:	2100      	movs	r1, #0
 80067ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80067be:	f7ff fbad 	bl	8005f1c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067c2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80067c4:	2800      	cmp	r0, #0
 80067c6:	f43f af29 	beq.w	800661c <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067ca:	06d1      	lsls	r1, r2, #27
 80067cc:	4606      	mov	r6, r0
 80067ce:	f57f af28 	bpl.w	8006622 <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067d2:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80067d6:	2101      	movs	r1, #1
 80067d8:	4628      	mov	r0, r5
 80067da:	f7ff fb9f 	bl	8005f1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80067de:	2800      	cmp	r0, #0
 80067e0:	f000 80db 	beq.w	800699a <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	069b      	lsls	r3, r3, #26
 80067e8:	d54c      	bpl.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x874>
 80067ea:	4606      	mov	r6, r0
 80067ec:	e043      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ee:	4f73      	ldr	r7, [pc, #460]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80067f8:	f7fc fee8 	bl	80035cc <HAL_GetTick>
 80067fc:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067fe:	e006      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006800:	f7fc fee4 	bl	80035cc <HAL_GetTick>
 8006804:	eba0 0008 	sub.w	r0, r0, r8
 8006808:	2864      	cmp	r0, #100	; 0x64
 800680a:	f200 81af 	bhi.w	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	05da      	lsls	r2, r3, #23
 8006812:	d5f5      	bpl.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
 8006814:	2d00      	cmp	r5, #0
 8006816:	f040 81e3 	bne.w	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800681a:	4a67      	ldr	r2, [pc, #412]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800681c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8006820:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006822:	4059      	eors	r1, r3
 8006824:	f411 7f40 	tst.w	r1, #768	; 0x300
 8006828:	d00b      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800682a:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800682c:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800682e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8006832:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8006836:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006838:	6f10      	ldr	r0, [r2, #112]	; 0x70
 800683a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800683e:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8006840:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006846:	f000 81ad 	beq.w	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800684a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800684e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006852:	f000 81bb 	beq.w	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8006856:	4958      	ldr	r1, [pc, #352]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006858:	690a      	ldr	r2, [r1, #16]
 800685a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800685e:	610a      	str	r2, [r1, #16]
 8006860:	4855      	ldr	r0, [pc, #340]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006862:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8006866:	6f07      	ldr	r7, [r0, #112]	; 0x70
 8006868:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800686a:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800686e:	6701      	str	r1, [r0, #112]	; 0x70
 8006870:	e563      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006872:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006876:	2102      	movs	r1, #2
 8006878:	4628      	mov	r0, r5
 800687a:	f7ff fb4f 	bl	8005f1c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800687e:	2800      	cmp	r0, #0
 8006880:	f43f aed2 	beq.w	8006628 <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
 8006884:	2001      	movs	r0, #1
}
 8006886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800688a:	462e      	mov	r6, r5
 800688c:	e463      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x146>
 800688e:	462e      	mov	r6, r5
 8006890:	e419      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8006892:	462e      	mov	r6, r5
 8006894:	e49c      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006896:	462e      	mov	r6, r5
 8006898:	f7ff bbf5 	b.w	8006086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800689c:	462e      	mov	r6, r5
 800689e:	e436      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068a0:	2102      	movs	r1, #2
 80068a2:	f104 0008 	add.w	r0, r4, #8
 80068a6:	f7ff fabf 	bl	8005e28 <RCCEx_PLL2_Config>
 80068aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	d15e      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80068b4:	4f40      	ldr	r7, [pc, #256]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80068b6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80068b8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80068ba:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80068be:	4301      	orrs	r1, r0
 80068c0:	64f9      	str	r1, [r7, #76]	; 0x4c
 80068c2:	e652      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c4:	483c      	ldr	r0, [pc, #240]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80068c6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80068c8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80068cc:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80068ce:	e475      	b.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d0:	4839      	ldr	r0, [pc, #228]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80068d2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80068d4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80068d8:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80068da:	e431      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068dc:	4836      	ldr	r0, [pc, #216]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80068de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80068e0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80068e4:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80068e6:	f7ff bbe4 	b.w	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ea:	4833      	ldr	r0, [pc, #204]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80068ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80068ee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80068f2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80068f4:	e400      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80068f6:	462e      	mov	r6, r5
 80068f8:	e551      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 80068fa:	462e      	mov	r6, r5
 80068fc:	e5a6      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 80068fe:	462e      	mov	r6, r5
 8006900:	e4b6      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006902:	4f2d      	ldr	r7, [pc, #180]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006904:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006906:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006908:	f021 0107 	bic.w	r1, r1, #7
 800690c:	4301      	orrs	r1, r0
 800690e:	6579      	str	r1, [r7, #84]	; 0x54
 8006910:	e55f      	b.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006912:	4f29      	ldr	r7, [pc, #164]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006914:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8006918:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800691a:	f021 0107 	bic.w	r1, r1, #7
 800691e:	4301      	orrs	r1, r0
 8006920:	65b9      	str	r1, [r7, #88]	; 0x58
 8006922:	e571      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006924:	462e      	mov	r6, r5
 8006926:	e431      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006928:	4f23      	ldr	r7, [pc, #140]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800692a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800692c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800692e:	f021 0103 	bic.w	r1, r1, #3
 8006932:	4301      	orrs	r1, r0
 8006934:	64f9      	str	r1, [r7, #76]	; 0x4c
 8006936:	e4fd      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006938:	462e      	mov	r6, r5
 800693a:	e469      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800693c:	462e      	mov	r6, r5
 800693e:	e5c9      	b.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8006940:	462e      	mov	r6, r5
 8006942:	e485      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006944:	462e      	mov	r6, r5
 8006946:	e5a3      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006948:	462e      	mov	r6, r5
 800694a:	e5f0      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800694c:	462e      	mov	r6, r5
 800694e:	e600      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x542>
 8006950:	462e      	mov	r6, r5
 8006952:	e61c      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006954:	4f18      	ldr	r7, [pc, #96]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006958:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800695c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 800695e:	2d00      	cmp	r5, #0
 8006960:	d1f6      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8006962:	e692      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006964:	4814      	ldr	r0, [pc, #80]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006966:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006968:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800696c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800696e:	2d00      	cmp	r5, #0
 8006970:	d0a0      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8006972:	462e      	mov	r6, r5
 8006974:	e5f9      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006976:	4810      	ldr	r0, [pc, #64]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8006978:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800697a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800697e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8006980:	2d00      	cmp	r5, #0
 8006982:	d1e3      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x93c>
 8006984:	e6b5      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006986:	f104 0008 	add.w	r0, r4, #8
 800698a:	f7ff fa4d 	bl	8005e28 <RCCEx_PLL2_Config>
 800698e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006990:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006994:	2d00      	cmp	r5, #0
 8006996:	d1d7      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006998:	e6bf      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800699a:	6862      	ldr	r2, [r4, #4]
 800699c:	e641      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800699e:	2102      	movs	r1, #2
 80069a0:	f104 0008 	add.w	r0, r4, #8
 80069a4:	f7ff fa40 	bl	8005e28 <RCCEx_PLL2_Config>
 80069a8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80069aa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	d1b8      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x914>
 80069b2:	f7ff bbe4 	b.w	800617e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80069b6:	bf00      	nop
 80069b8:	58024400 	.word	0x58024400
 80069bc:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069c0:	2102      	movs	r1, #2
 80069c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80069c6:	f7ff faa9 	bl	8005f1c <RCCEx_PLL3_Config>
 80069ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80069cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	d1b7      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80069d4:	e554      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069d6:	2102      	movs	r1, #2
 80069d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80069dc:	f7ff fa9e 	bl	8005f1c <RCCEx_PLL3_Config>
 80069e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80069e2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80069e6:	2d00      	cmp	r5, #0
 80069e8:	d1a8      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x92c>
 80069ea:	e56b      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069ec:	4884      	ldr	r0, [pc, #528]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 80069ee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80069f0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80069f4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	d181      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80069fa:	e664      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069fc:	2101      	movs	r1, #1
 80069fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006a02:	f7ff fa8b 	bl	8005f1c <RCCEx_PLL3_Config>
 8006a06:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a08:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006a0c:	2d00      	cmp	r5, #0
 8006a0e:	d193      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x928>
 8006a10:	f7ff bbf7 	b.w	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a14:	2101      	movs	r1, #1
 8006a16:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006a1a:	f7ff fa7f 	bl	8005f1c <RCCEx_PLL3_Config>
 8006a1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	d18b      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x930>
 8006a28:	e40a      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a2a:	2102      	movs	r1, #2
 8006a2c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006a30:	f7ff fa74 	bl	8005f1c <RCCEx_PLL3_Config>
 8006a34:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a36:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006a3a:	2d00      	cmp	r5, #0
 8006a3c:	f47f af5d 	bne.w	80068fa <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8006a40:	e4fc      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a42:	486f      	ldr	r0, [pc, #444]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 8006a44:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006a46:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006a4a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	f47f ac70 	bne.w	8006332 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8006a52:	e769      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a54:	2102      	movs	r1, #2
 8006a56:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006a5a:	f7ff fa5f 	bl	8005f1c <RCCEx_PLL3_Config>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f040 8094 	bne.w	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a64:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a68:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006a6c:	e53a      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006a6e:	2102      	movs	r1, #2
 8006a70:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006a74:	f7ff fa52 	bl	8005f1c <RCCEx_PLL3_Config>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f040 808d 	bne.w	8006b98 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a7e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a82:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006a86:	e53b      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a88:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006a8c:	f7ff baed 	b.w	800606a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a90:	2100      	movs	r1, #0
 8006a92:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006a96:	f7ff fa41 	bl	8005f1c <RCCEx_PLL3_Config>
 8006a9a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a9c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006aa0:	f7ff bb4e 	b.w	8006140 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006aaa:	f7ff fa37 	bl	8005f1c <RCCEx_PLL3_Config>
 8006aae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ab0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006ab4:	e5f1      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006abc:	f7ff fa2e 	bl	8005f1c <RCCEx_PLL3_Config>
 8006ac0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ac2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006ac6:	f7ff baf4 	b.w	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aca:	2102      	movs	r1, #2
 8006acc:	3028      	adds	r0, #40	; 0x28
 8006ace:	f7ff fa25 	bl	8005f1c <RCCEx_PLL3_Config>
 8006ad2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8006ad4:	2e00      	cmp	r6, #0
 8006ad6:	f43f aab9 	beq.w	800604c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006ada:	e7d5      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006adc:	4848      	ldr	r0, [pc, #288]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
 8006ade:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006ae2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006ae6:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8006ae8:	e5d7      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aea:	2100      	movs	r1, #0
 8006aec:	f104 0008 	add.w	r0, r4, #8
 8006af0:	f7ff f99a 	bl	8005e28 <RCCEx_PLL2_Config>
 8006af4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006af6:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006afa:	e5ce      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006afc:	2100      	movs	r1, #0
 8006afe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006b02:	f7ff fa0b 	bl	8005f1c <RCCEx_PLL3_Config>
 8006b06:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006b08:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006b0c:	f7ff bb56 	b.w	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b10:	2100      	movs	r1, #0
 8006b12:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8006b16:	f7ff fa01 	bl	8005f1c <RCCEx_PLL3_Config>
 8006b1a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b1c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006b20:	f7ff baea 	b.w	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b24:	2101      	movs	r1, #1
 8006b26:	f104 0008 	add.w	r0, r4, #8
 8006b2a:	f7ff f97d 	bl	8005e28 <RCCEx_PLL2_Config>
 8006b2e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b30:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	f47f ac4b 	bne.w	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006b3a:	e6e2      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	f104 0008 	add.w	r0, r4, #8
 8006b42:	f7ff f971 	bl	8005e28 <RCCEx_PLL2_Config>
 8006b46:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b48:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006b4c:	2d00      	cmp	r5, #0
 8006b4e:	f47f ac5a 	bne.w	8006406 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8006b52:	e6de      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b54:	2101      	movs	r1, #1
 8006b56:	f104 0008 	add.w	r0, r4, #8
 8006b5a:	f7ff f965 	bl	8005e28 <RCCEx_PLL2_Config>
 8006b5e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b60:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006b64:	2d00      	cmp	r5, #0
 8006b66:	f47f aec6 	bne.w	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8006b6a:	e5ea      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
 8006b6c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b6e:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 8006b72:	4635      	mov	r5, r6
 8006b74:	f7ff bbe1 	b.w	800633a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b78:	2601      	movs	r6, #1
 8006b7a:	f7ff ba76 	b.w	800606a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7e:	4d20      	ldr	r5, [pc, #128]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 8006b80:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006b82:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8006b86:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 8006b88:	f7ff ba68 	b.w	800605c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b8c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 8006b90:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b92:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006b96:	e4a5      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b98:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 8006b9c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b9e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ba2:	e4ad      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
 8006ba4:	f7fc fd12 	bl	80035cc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ba8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8006c00 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
 8006bac:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bae:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bb2:	e004      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bb4:	f7fc fd0a 	bl	80035cc <HAL_GetTick>
 8006bb8:	1bc0      	subs	r0, r0, r7
 8006bba:	4548      	cmp	r0, r9
 8006bbc:	d8d6      	bhi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bbe:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8006bc2:	079b      	lsls	r3, r3, #30
 8006bc4:	d5f6      	bpl.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bc6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8006bca:	e63e      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8006bcc:	480c      	ldr	r0, [pc, #48]	; (8006c00 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
 8006bce:	4a0d      	ldr	r2, [pc, #52]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
 8006bd0:	6901      	ldr	r1, [r0, #16]
 8006bd2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8006bd6:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	6102      	str	r2, [r0, #16]
 8006bde:	e63f      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006be0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006be4:	462e      	mov	r6, r5
 8006be6:	f7ff bba8 	b.w	800633a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006bea:	2601      	movs	r6, #1
 8006bec:	4635      	mov	r5, r6
 8006bee:	f7ff bbf0 	b.w	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
 8006bf2:	2601      	movs	r6, #1
 8006bf4:	4635      	mov	r5, r6
 8006bf6:	f7ff bb9d 	b.w	8006334 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006bfa:	2601      	movs	r6, #1
 8006bfc:	4635      	mov	r5, r6
 8006bfe:	e403      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006c00:	58024400 	.word	0x58024400
 8006c04:	00ffffcf 	.word	0x00ffffcf

08006c08 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c08:	4b4f      	ldr	r3, [pc, #316]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8006c0a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006c0e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c10:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8006c12:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006c16:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c1a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8006c1c:	d05c      	beq.n	8006cd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c1e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c22:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c26:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c2a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8006c2e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006c30:	ee07 4a90 	vmov	s15, r4
 8006c34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8006c38:	d003      	beq.n	8006c42 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8006c3a:	2902      	cmp	r1, #2
 8006c3c:	d075      	beq.n	8006d2a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8006c3e:	2900      	cmp	r1, #0
 8006c40:	d04f      	beq.n	8006ce2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c42:	ee07 2a90 	vmov	s15, r2
 8006c46:	eddf 6a41 	vldr	s13, [pc, #260]	; 8006d4c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8006c54:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8006c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5c:	ee06 3a90 	vmov	s13, r3
 8006c60:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006c64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006c68:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006c6c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8006c70:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c74:	4a34      	ldr	r2, [pc, #208]	; (8006d48 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8006c76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006c7a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006c7c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006c80:	ee07 3a10 	vmov	s14, r3
 8006c84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8006c88:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c8a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006c8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c96:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006c9c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006ca0:	ee07 3a10 	vmov	s14, r3
 8006ca4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ca8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006cb8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006cba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cc6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006cd2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8006cd6:	4770      	bx	lr
 8006cd8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cda:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cde:	6082      	str	r2, [r0, #8]
}
 8006ce0:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ce2:	6819      	ldr	r1, [r3, #0]
 8006ce4:	0689      	lsls	r1, r1, #26
 8006ce6:	d527      	bpl.n	8006d38 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ce8:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cea:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cee:	4919      	ldr	r1, [pc, #100]	; (8006d54 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cf0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cf6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cfe:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8006d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d06:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d08:	ee06 3a90 	vmov	s13, r3
 8006d0c:	ee05 1a90 	vmov	s11, r1
 8006d10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006d14:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006d18:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006d1c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8006d20:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006d24:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006d28:	e7a4      	b.n	8006c74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d2a:	ee07 2a90 	vmov	s15, r2
 8006d2e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8006d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d36:	e78a      	b.n	8006c4e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d38:	ee07 2a90 	vmov	s15, r2
 8006d3c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8006d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d44:	e783      	b.n	8006c4e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8006d46:	bf00      	nop
 8006d48:	58024400 	.word	0x58024400
 8006d4c:	4a742400 	.word	0x4a742400
 8006d50:	39000000 	.word	0x39000000
 8006d54:	03d09000 	.word	0x03d09000
 8006d58:	4bbebc20 	.word	0x4bbebc20
 8006d5c:	4c742400 	.word	0x4c742400

08006d60 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d60:	4b4f      	ldr	r3, [pc, #316]	; (8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8006d62:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d64:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d66:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d68:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8006d6a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d6e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d72:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8006d74:	d05c      	beq.n	8006e30 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d76:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d7a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d7e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d82:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8006d86:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d88:	ee07 4a90 	vmov	s15, r4
 8006d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8006d90:	d003      	beq.n	8006d9a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8006d92:	2902      	cmp	r1, #2
 8006d94:	d075      	beq.n	8006e82 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8006d96:	2900      	cmp	r1, #0
 8006d98:	d04f      	beq.n	8006e3a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d9a:	ee07 2a90 	vmov	s15, r2
 8006d9e:	eddf 6a41 	vldr	s13, [pc, #260]	; 8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8006da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8006dac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8006db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db4:	ee06 3a90 	vmov	s13, r3
 8006db8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006dbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006dc0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006dc4:	eee7 6a25 	vfma.f32	s13, s14, s11
 8006dc8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006dcc:	4a34      	ldr	r2, [pc, #208]	; (8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8006dce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006dd2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006dd4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006dd8:	ee07 3a10 	vmov	s14, r3
 8006ddc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8006de0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006de2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dee:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006df2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006df4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006df8:	ee07 3a10 	vmov	s14, r3
 8006dfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006e00:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e0c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006e10:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006e12:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e26:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006e2a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8006e2e:	4770      	bx	lr
 8006e30:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e32:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e36:	6082      	str	r2, [r0, #8]
}
 8006e38:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e3a:	6819      	ldr	r1, [r3, #0]
 8006e3c:	0689      	lsls	r1, r1, #26
 8006e3e:	d527      	bpl.n	8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e40:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e42:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e46:	4919      	ldr	r1, [pc, #100]	; (8006eac <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e48:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e4e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e56:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8006ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e5e:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e60:	ee06 3a90 	vmov	s13, r3
 8006e64:	ee05 1a90 	vmov	s11, r1
 8006e68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006e6c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006e70:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006e74:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8006e78:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006e7c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006e80:	e7a4      	b.n	8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e82:	ee07 2a90 	vmov	s15, r2
 8006e86:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8006e8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e8e:	e78a      	b.n	8006da6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e90:	ee07 2a90 	vmov	s15, r2
 8006e94:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8006e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e9c:	e783      	b.n	8006da6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8006e9e:	bf00      	nop
 8006ea0:	58024400 	.word	0x58024400
 8006ea4:	4a742400 	.word	0x4a742400
 8006ea8:	39000000 	.word	0x39000000
 8006eac:	03d09000 	.word	0x03d09000
 8006eb0:	4bbebc20 	.word	0x4bbebc20
 8006eb4:	4c742400 	.word	0x4c742400

08006eb8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006eb8:	4b4f      	ldr	r3, [pc, #316]	; (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8006eba:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ebc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006ebe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006ec0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8006ec2:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006ec6:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006eca:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8006ecc:	d05c      	beq.n	8006f88 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ece:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006ed2:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ed6:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006eda:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8006ede:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006ee0:	ee07 4a90 	vmov	s15, r4
 8006ee4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8006ee8:	d07e      	beq.n	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8006eea:	2902      	cmp	r1, #2
 8006eec:	d075      	beq.n	8006fda <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8006eee:	2900      	cmp	r1, #0
 8006ef0:	d04f      	beq.n	8006f92 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ef2:	ee07 2a90 	vmov	s15, r2
 8006ef6:	eddf 6a41 	vldr	s13, [pc, #260]	; 8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8006f04:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8006f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0c:	ee06 3a90 	vmov	s13, r3
 8006f10:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006f14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006f18:	ee76 6a85 	vadd.f32	s13, s13, s10
 8006f1c:	eee7 6a25 	vfma.f32	s13, s14, s11
 8006f20:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006f24:	4a34      	ldr	r2, [pc, #208]	; (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8006f26:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006f2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f2c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006f30:	ee07 3a10 	vmov	s14, r3
 8006f34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8006f38:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006f3a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f46:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006f4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f4c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006f50:	ee07 3a10 	vmov	s14, r3
 8006f54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006f58:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f64:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006f68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006f6a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f76:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f7e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006f82:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8006f86:	4770      	bx	lr
 8006f88:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f8a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006f8e:	6082      	str	r2, [r0, #8]
}
 8006f90:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	0689      	lsls	r1, r1, #26
 8006f96:	d5ac      	bpl.n	8006ef2 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f98:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f9a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f9e:	4919      	ldr	r1, [pc, #100]	; (8007004 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fa0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fa6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fae:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8006fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fb6:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fb8:	ee06 3a90 	vmov	s13, r3
 8006fbc:	ee05 1a90 	vmov	s11, r1
 8006fc0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8006fc4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006fc8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006fcc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8006fd0:	eee7 6a05 	vfma.f32	s13, s14, s10
 8006fd4:	ee66 6a26 	vmul.f32	s13, s12, s13
 8006fd8:	e7a4      	b.n	8006f24 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fda:	ee07 2a90 	vmov	s15, r2
 8006fde:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007008 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8006fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fe6:	e78a      	b.n	8006efe <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fe8:	ee07 2a90 	vmov	s15, r2
 8006fec:	eddf 6a07 	vldr	s13, [pc, #28]	; 800700c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8006ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ff4:	e783      	b.n	8006efe <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8006ff6:	bf00      	nop
 8006ff8:	58024400 	.word	0x58024400
 8006ffc:	4c742400 	.word	0x4c742400
 8007000:	39000000 	.word	0x39000000
 8007004:	03d09000 	.word	0x03d09000
 8007008:	4bbebc20 	.word	0x4bbebc20
 800700c:	4a742400 	.word	0x4a742400

08007010 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007010:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8007014:	430b      	orrs	r3, r1
{
 8007016:	b500      	push	{lr}
 8007018:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800701a:	f000 8084 	beq.w	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800701e:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8007022:	430b      	orrs	r3, r1
 8007024:	d039      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007026:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800702a:	430b      	orrs	r3, r1
 800702c:	f000 80e6 	beq.w	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007030:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8007034:	430b      	orrs	r3, r1
 8007036:	f000 8089 	beq.w	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800703a:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800703e:	430b      	orrs	r3, r1
 8007040:	d061      	beq.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007042:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8007046:	430b      	orrs	r3, r1
 8007048:	f000 8112 	beq.w	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800704c:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8007050:	430b      	orrs	r3, r1
 8007052:	f000 80a3 	beq.w	800719c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007056:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800705a:	430b      	orrs	r3, r1
 800705c:	f000 80fa 	beq.w	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007060:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8007064:	430b      	orrs	r3, r1
 8007066:	f000 8143 	beq.w	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800706a:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800706e:	ea50 0301 	orrs.w	r3, r0, r1
 8007072:	d137      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007074:	4a99      	ldr	r2, [pc, #612]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007076:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800707c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007080:	f000 8083 	beq.w	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8007084:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007088:	f000 8156 	beq.w	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800708c:	bb53      	cbnz	r3, 80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800708e:	6810      	ldr	r0, [r2, #0]
 8007090:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007094:	d044      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 8007096:	4892      	ldr	r0, [pc, #584]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007098:	e042      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800709a:	4a90      	ldr	r2, [pc, #576]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800709c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800709e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 80070a2:	2b80      	cmp	r3, #128	; 0x80
 80070a4:	f000 80a5 	beq.w	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80070a8:	d920      	bls.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80070aa:	2bc0      	cmp	r3, #192	; 0xc0
 80070ac:	d037      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80070ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b2:	d117      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070b6:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070bc:	0749      	lsls	r1, r1, #29
 80070be:	d502      	bpl.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 80c1 	beq.w	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070c6:	4a85      	ldr	r2, [pc, #532]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80070c8:	6812      	ldr	r2, [r2, #0]
 80070ca:	05d0      	lsls	r0, r2, #23
 80070cc:	d503      	bpl.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 80070ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070d2:	f000 8101 	beq.w	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070d6:	4a81      	ldr	r2, [pc, #516]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80070d8:	6812      	ldr	r2, [r2, #0]
 80070da:	0391      	lsls	r1, r2, #14
 80070dc:	d502      	bpl.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 80070de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e2:	d0d8      	beq.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 80070e4:	2000      	movs	r0, #0
}
 80070e6:	b005      	add	sp, #20
 80070e8:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d04c      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80070f0:	2b40      	cmp	r3, #64	; 0x40
 80070f2:	d1f7      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070f4:	6810      	ldr	r0, [r2, #0]
 80070f6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80070fa:	d011      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070fc:	a801      	add	r0, sp, #4
 80070fe:	f7ff fd83 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007102:	9801      	ldr	r0, [sp, #4]
 8007104:	e00c      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007106:	4a75      	ldr	r2, [pc, #468]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007108:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800710a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800710e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007112:	d06e      	beq.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8007114:	d937      	bls.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800711a:	f040 8087 	bne.w	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800711e:	4871      	ldr	r0, [pc, #452]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8007120:	b005      	add	sp, #20
 8007122:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007126:	4b6d      	ldr	r3, [pc, #436]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800712a:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800712e:	2b04      	cmp	r3, #4
 8007130:	d8d8      	bhi.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	080071db 	.word	0x080071db
 800713c:	080071b7 	.word	0x080071b7
 8007140:	080071c7 	.word	0x080071c7
 8007144:	0800711f 	.word	0x0800711f
 8007148:	080071c3 	.word	0x080071c3
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800714c:	4a63      	ldr	r2, [pc, #396]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800714e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007150:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8007154:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007158:	d04b      	beq.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800715a:	d944      	bls.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800715c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007160:	d0dd      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8007162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007166:	d1bd      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007168:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800716a:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800716c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007170:	0752      	lsls	r2, r2, #29
 8007172:	d5a8      	bpl.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1a6      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007178:	4b58      	ldr	r3, [pc, #352]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800717a:	485b      	ldr	r0, [pc, #364]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007182:	40d8      	lsrs	r0, r3
 8007184:	e7cc      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 8007186:	2b00      	cmp	r3, #0
 8007188:	d154      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800718a:	6810      	ldr	r0, [r2, #0]
 800718c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8007190:	d0c6      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007192:	a801      	add	r0, sp, #4
 8007194:	f7ff fe90 	bl	8006eb8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007198:	9802      	ldr	r0, [sp, #8]
 800719a:	e7c1      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800719c:	4a4f      	ldr	r2, [pc, #316]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800719e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80071a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 80071a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a8:	f000 80d0 	beq.w	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 80071ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b0:	d0da      	beq.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d196      	bne.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071b6:	4b49      	ldr	r3, [pc, #292]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80071be:	d0af      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80071c0:	e79c      	b.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071c2:	4a46      	ldr	r2, [pc, #280]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80071c4:	e776      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071c6:	4b45      	ldr	r3, [pc, #276]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80071ce:	d0a7      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071d0:	a801      	add	r0, sp, #4
 80071d2:	f7ff fdc5 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071d6:	9801      	ldr	r0, [sp, #4]
 80071d8:	e7a2      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071da:	4b40      	ldr	r3, [pc, #256]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80071dc:	6818      	ldr	r0, [r3, #0]
 80071de:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80071e2:	d09d      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80071e4:	e7d5      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0cf      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80071ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071ee:	d081      	beq.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80071f0:	e778      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071f2:	6810      	ldr	r0, [r2, #0]
 80071f4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80071f8:	d092      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80071fa:	e7e9      	b.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80071fc:	4a37      	ldr	r2, [pc, #220]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80071fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007200:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8007204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007208:	d0f3      	beq.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800720a:	d806      	bhi.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0bc      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8007210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007214:	f43f af6e 	beq.w	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007218:	e764      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800721a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800721e:	f43f af7e 	beq.w	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8007222:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007226:	f43f af45 	beq.w	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800722a:	e75b      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800722c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007230:	d09a      	beq.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8007232:	e757      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	f43f af5c 	beq.w	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800723c:	e752      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800723e:	6810      	ldr	r0, [r2, #0]
 8007240:	f010 0004 	ands.w	r0, r0, #4
 8007244:	f43f af6c 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007248:	6813      	ldr	r3, [r2, #0]
 800724a:	4827      	ldr	r0, [pc, #156]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800724c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007250:	40d8      	lsrs	r0, r3
 8007252:	e765      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007254:	4b21      	ldr	r3, [pc, #132]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 8007258:	03d2      	lsls	r2, r2, #15
 800725a:	d5bf      	bpl.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800725c:	6818      	ldr	r0, [r3, #0]
 800725e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007262:	f43f af5d 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007266:	a801      	add	r0, sp, #4
 8007268:	f7ff fcce 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800726c:	9803      	ldr	r0, [sp, #12]
 800726e:	e757      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007270:	4a1a      	ldr	r2, [pc, #104]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007272:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007274:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 8007278:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800727c:	d0df      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800727e:	d810      	bhi.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8007280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007284:	d058      	beq.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007286:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800728a:	d118      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800728c:	4b13      	ldr	r3, [pc, #76]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800728e:	6818      	ldr	r0, [r3, #0]
 8007290:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007294:	f43f af44 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007298:	a801      	add	r0, sp, #4
 800729a:	f7ff fd61 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800729e:	9802      	ldr	r0, [sp, #8]
 80072a0:	e73e      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 80072a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072a6:	d012      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 80072a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80072ac:	f47f af1a 	bne.w	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80072b8:	f43f af32 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80072bc:	e6eb      	b.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f47f af10 	bne.w	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 80072c4:	b005      	add	sp, #20
 80072c6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80072ca:	f7fe bd65 	b.w	8005d98 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80072ce:	6810      	ldr	r0, [r2, #0]
 80072d0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80072d4:	f43f af24 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 80072d8:	4804      	ldr	r0, [pc, #16]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80072da:	e721      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80072dc:	58024400 	.word	0x58024400
 80072e0:	017d7840 	.word	0x017d7840
 80072e4:	00bb8000 	.word	0x00bb8000
 80072e8:	03d09000 	.word	0x03d09000
 80072ec:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80072f0:	4b28      	ldr	r3, [pc, #160]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80072f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 80072f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072fc:	d037      	beq.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 80072fe:	d814      	bhi.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8007300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007304:	d03f      	beq.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800730a:	d0bf      	beq.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800730c:	2b00      	cmp	r3, #0
 800730e:	f47f aee9 	bne.w	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007312:	f7fe fd01 	bl	8005d18 <HAL_RCC_GetHCLKFreq>
 8007316:	4b1f      	ldr	r3, [pc, #124]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8007318:	4a1f      	ldr	r2, [pc, #124]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007320:	5cd3      	ldrb	r3, [r2, r3]
 8007322:	f003 031f 	and.w	r3, r3, #31
 8007326:	40d8      	lsrs	r0, r3
        break;
 8007328:	e6fa      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800732a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732e:	d017      	beq.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8007330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007334:	d0bc      	beq.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007336:	e6d5      	b.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007338:	6810      	ldr	r0, [r2, #0]
 800733a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800733e:	f43f aeef 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007342:	a801      	add	r0, sp, #4
 8007344:	f7ff fc60 	bl	8006c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007348:	9802      	ldr	r0, [sp, #8]
 800734a:	e6e9      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800734c:	6810      	ldr	r0, [r2, #0]
 800734e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8007352:	f43f aee5 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007356:	a801      	add	r0, sp, #4
 8007358:	f7ff fd02 	bl	8006d60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800735c:	9803      	ldr	r0, [sp, #12]
 800735e:	e6df      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007360:	4b0c      	ldr	r3, [pc, #48]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007368:	f43f aeda 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800736c:	e7b4      	b.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800736e:	4b09      	ldr	r3, [pc, #36]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	f010 0004 	ands.w	r0, r0, #4
 8007376:	f43f aed3 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4807      	ldr	r0, [pc, #28]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800737e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007382:	40d8      	lsrs	r0, r3
 8007384:	e6cc      	b.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007386:	4b03      	ldr	r3, [pc, #12]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800738e:	f43f aec7 	beq.w	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007392:	e7d6      	b.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8007394:	58024400 	.word	0x58024400
 8007398:	080172c4 	.word	0x080172c4
 800739c:	03d09000 	.word	0x03d09000

080073a0 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d039      	beq.n	8007418 <HAL_RNG_Init+0x78>
{
 80073a4:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80073a6:	7a43      	ldrb	r3, [r0, #9]
 80073a8:	4604      	mov	r4, r0
 80073aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80073ae:	b37b      	cbz	r3, 8007410 <HAL_RNG_Init+0x70>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80073b0:	6823      	ldr	r3, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80073b2:	2202      	movs	r2, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80073b4:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 80073b6:	7262      	strb	r2, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	f022 0220 	bic.w	r2, r2, #32
 80073be:	430a      	orrs	r2, r1
 80073c0:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	f042 0204 	orr.w	r2, r2, #4
 80073c8:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	0658      	lsls	r0, r3, #25
 80073ce:	d503      	bpl.n	80073d8 <HAL_RNG_Init+0x38>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80073d0:	2304      	movs	r3, #4
    return HAL_ERROR;
 80073d2:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 80073d4:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 80073d8:	f7fc f8f8 	bl	80035cc <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80073dc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80073de:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	0759      	lsls	r1, r3, #29
 80073e4:	d50e      	bpl.n	8007404 <HAL_RNG_Init+0x64>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80073e6:	f7fc f8f1 	bl	80035cc <HAL_GetTick>
 80073ea:	1b43      	subs	r3, r0, r5
 80073ec:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80073ee:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80073f0:	d9f6      	bls.n	80073e0 <HAL_RNG_Init+0x40>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	0752      	lsls	r2, r2, #29
 80073f6:	d5f3      	bpl.n	80073e0 <HAL_RNG_Init+0x40>
        hrng->State = HAL_RNG_STATE_ERROR;
 80073f8:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80073fa:	2302      	movs	r3, #2
        return HAL_ERROR;
 80073fc:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 80073fe:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007400:	60e3      	str	r3, [r4, #12]
}
 8007402:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007404:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 8007406:	2201      	movs	r2, #1
  return HAL_OK;
 8007408:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800740a:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800740c:	60e3      	str	r3, [r4, #12]
}
 800740e:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8007410:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8007412:	f7fb fc21 	bl	8002c58 <HAL_RNG_MspInit>
 8007416:	e7cb      	b.n	80073b0 <HAL_RNG_Init+0x10>
    return HAL_ERROR;
 8007418:	2001      	movs	r0, #1
}
 800741a:	4770      	bx	lr

0800741c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800741e:	7a03      	ldrb	r3, [r0, #8]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d027      	beq.n	8007474 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007424:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 8007426:	2201      	movs	r2, #1
 8007428:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800742a:	4293      	cmp	r3, r2
 800742c:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 800742e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8007430:	d006      	beq.n	8007440 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007432:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8007434:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007436:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007438:	2300      	movs	r3, #0
 800743a:	7223      	strb	r3, [r4, #8]

  return status;
}
 800743c:	4630      	mov	r0, r6
 800743e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8007440:	2302      	movs	r3, #2
 8007442:	460d      	mov	r5, r1
 8007444:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8007446:	f7fc f8c1 	bl	80035cc <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800744a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800744c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	07d2      	lsls	r2, r2, #31
 8007452:	d412      	bmi.n	800747a <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007454:	f7fc f8ba 	bl	80035cc <HAL_GetTick>
 8007458:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800745a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800745c:	2802      	cmp	r0, #2
 800745e:	d9f6      	bls.n	800744e <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	f012 0201 	ands.w	r2, r2, #1
 8007466:	d1f2      	bne.n	800744e <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 8007468:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800746a:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 800746c:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 800746e:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007470:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 8007472:	e7e3      	b.n	800743c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 8007474:	2602      	movs	r6, #2
}
 8007476:	4630      	mov	r0, r6
 8007478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 800747a:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800747c:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800747e:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 8007480:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 8007482:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 8007484:	7262      	strb	r2, [r4, #9]
 8007486:	e7d7      	b.n	8007438 <HAL_RNG_GenerateRandomNumber+0x1c>

08007488 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800748a:	6801      	ldr	r1, [r0, #0]
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800748c:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800748e:	4bab      	ldr	r3, [pc, #684]	; (800773c <HAL_SAI_Init.part.0+0x2b4>)
 8007490:	4299      	cmp	r1, r3
 8007492:	d01c      	beq.n	80074ce <HAL_SAI_Init.part.0+0x46>
 8007494:	3320      	adds	r3, #32
 8007496:	4299      	cmp	r1, r3
 8007498:	d019      	beq.n	80074ce <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800749a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800749e:	4299      	cmp	r1, r3
 80074a0:	d04e      	beq.n	8007540 <HAL_SAI_Init.part.0+0xb8>
 80074a2:	3320      	adds	r3, #32
 80074a4:	4299      	cmp	r1, r3
 80074a6:	d04b      	beq.n	8007540 <HAL_SAI_Init.part.0+0xb8>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80074a8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80074ac:	4299      	cmp	r1, r3
 80074ae:	f000 812e 	beq.w	800770e <HAL_SAI_Init.part.0+0x286>
 80074b2:	3320      	adds	r3, #32
 80074b4:	4299      	cmp	r1, r3
 80074b6:	f000 812a 	beq.w	800770e <HAL_SAI_Init.part.0+0x286>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80074ba:	4ba1      	ldr	r3, [pc, #644]	; (8007740 <HAL_SAI_Init.part.0+0x2b8>)
 80074bc:	4299      	cmp	r1, r3
 80074be:	f000 8128 	beq.w	8007712 <HAL_SAI_Init.part.0+0x28a>
 80074c2:	3320      	adds	r3, #32
 80074c4:	4299      	cmp	r1, r3
 80074c6:	f000 8124 	beq.w	8007712 <HAL_SAI_Init.part.0+0x28a>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 80074ca:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 80074cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 80074ce:	4e9d      	ldr	r6, [pc, #628]	; (8007744 <HAL_SAI_Init.part.0+0x2bc>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 80074d0:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 80074d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d038      	beq.n	800754e <HAL_SAI_Init.part.0+0xc6>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80074dc:	4b9a      	ldr	r3, [pc, #616]	; (8007748 <HAL_SAI_Init.part.0+0x2c0>)
 80074de:	4a9b      	ldr	r2, [pc, #620]	; (800774c <HAL_SAI_Init.part.0+0x2c4>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80074e6:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80074e8:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 80074ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80074ee:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80074f0:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d032      	beq.n	800755c <HAL_SAI_Init.part.0+0xd4>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80074f6:	680c      	ldr	r4, [r1, #0]
    count--;
 80074f8:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80074fa:	f414 3480 	ands.w	r4, r4, #65536	; 0x10000
 80074fe:	d1f8      	bne.n	80074f2 <HAL_SAI_Init.part.0+0x6a>
  hsai->State = HAL_SAI_STATE_BUSY;
 8007500:	2302      	movs	r3, #2
 8007502:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8007506:	68eb      	ldr	r3, [r5, #12]
 8007508:	2b01      	cmp	r3, #1
 800750a:	f000 8144 	beq.w	8007796 <HAL_SAI_Init.part.0+0x30e>
 800750e:	2b02      	cmp	r3, #2
 8007510:	bf15      	itete	ne
 8007512:	2003      	movne	r0, #3
 8007514:	2023      	moveq	r0, #35	; 0x23
 8007516:	2702      	movne	r7, #2
 8007518:	2722      	moveq	r7, #34	; 0x22
 800751a:	bf15      	itete	ne
 800751c:	f04f 0c01 	movne.w	ip, #1
 8007520:	f04f 0c21 	moveq.w	ip, #33	; 0x21
 8007524:	2200      	movne	r2, #0
 8007526:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 8007528:	68ab      	ldr	r3, [r5, #8]
 800752a:	3b01      	subs	r3, #1
 800752c:	2b04      	cmp	r3, #4
 800752e:	f200 816e 	bhi.w	800780e <HAL_SAI_Init.part.0+0x386>
 8007532:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007536:	00e1      	.short	0x00e1
 8007538:	00e8001c 	.word	0x00e8001c
 800753c:	00e4001b 	.word	0x00e4001b
  if (hsai->State == HAL_SAI_STATE_RESET)
 8007540:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
 8007544:	4e82      	ldr	r6, [pc, #520]	; (8007750 <HAL_SAI_Init.part.0+0x2c8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8007546:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1c6      	bne.n	80074dc <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 800754e:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
 8007550:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8007554:	f7fb fbe8 	bl	8002d28 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 8007558:	6829      	ldr	r1, [r5, #0]
 800755a:	e7bf      	b.n	80074dc <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800755c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
 8007560:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007566:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
 800756a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800756c:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800756e:	f44f 6700 	mov.w	r7, #2048	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007572:	6a2b      	ldr	r3, [r5, #32]
  SaiBaseAddress->GCR = tmpregisterGCR;
 8007574:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007576:	2b00      	cmp	r3, #0
 8007578:	d049      	beq.n	800760e <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800757a:	4b70      	ldr	r3, [pc, #448]	; (800773c <HAL_SAI_Init.part.0+0x2b4>)
 800757c:	4299      	cmp	r1, r3
 800757e:	f000 811f 	beq.w	80077c0 <HAL_SAI_Init.part.0+0x338>
 8007582:	4874      	ldr	r0, [pc, #464]	; (8007754 <HAL_SAI_Init.part.0+0x2cc>)
 8007584:	1a08      	subs	r0, r1, r0
 8007586:	fab0 f080 	clz	r0, r0
 800758a:	0940      	lsrs	r0, r0, #5
 800758c:	2800      	cmp	r0, #0
 800758e:	f040 8117 	bne.w	80077c0 <HAL_SAI_Init.part.0+0x338>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007592:	4b71      	ldr	r3, [pc, #452]	; (8007758 <HAL_SAI_Init.part.0+0x2d0>)
 8007594:	4299      	cmp	r1, r3
 8007596:	f000 8121 	beq.w	80077dc <HAL_SAI_Init.part.0+0x354>
 800759a:	3320      	adds	r3, #32
 800759c:	4299      	cmp	r1, r3
 800759e:	f000 811d 	beq.w	80077dc <HAL_SAI_Init.part.0+0x354>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80075a2:	4b6e      	ldr	r3, [pc, #440]	; (800775c <HAL_SAI_Init.part.0+0x2d4>)
 80075a4:	4299      	cmp	r1, r3
 80075a6:	f000 8112 	beq.w	80077ce <HAL_SAI_Init.part.0+0x346>
 80075aa:	3320      	adds	r3, #32
 80075ac:	4299      	cmp	r1, r3
 80075ae:	f000 810e 	beq.w	80077ce <HAL_SAI_Init.part.0+0x346>
    if (hsai->Instance == SAI4_Block_A)
 80075b2:	4b63      	ldr	r3, [pc, #396]	; (8007740 <HAL_SAI_Init.part.0+0x2b8>)
 80075b4:	4299      	cmp	r1, r3
 80075b6:	f000 8121 	beq.w	80077fc <HAL_SAI_Init.part.0+0x374>
    if (hsai->Instance == SAI4_Block_B)
 80075ba:	4b69      	ldr	r3, [pc, #420]	; (8007760 <HAL_SAI_Init.part.0+0x2d8>)
 80075bc:	4299      	cmp	r1, r3
 80075be:	f000 8117 	beq.w	80077f0 <HAL_SAI_Init.part.0+0x368>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80075c2:	69ab      	ldr	r3, [r5, #24]
 80075c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80075c8:	f000 80eb 	beq.w	80077a2 <HAL_SAI_Init.part.0+0x31a>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80075cc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80075ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80075d2:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80075d4:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80075d8:	ea4f 0340 	mov.w	r3, r0, lsl #1
 80075dc:	6a28      	ldr	r0, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80075de:	bf0c      	ite	eq
 80075e0:	2202      	moveq	r2, #2
 80075e2:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80075e4:	fb00 f202 	mul.w	r2, r0, r2
 80075e8:	0212      	lsls	r2, r2, #8
 80075ea:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 80075ee:	4a5d      	ldr	r2, [pc, #372]	; (8007764 <HAL_SAI_Init.part.0+0x2dc>)
 80075f0:	fba2 0203 	umull	r0, r2, r2, r3
 80075f4:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 80075f6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80075fa:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80075fe:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8007600:	bf08      	it	eq
 8007602:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007604:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 8007606:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007608:	d101      	bne.n	800760e <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800760a:	0852      	lsrs	r2, r2, #1
 800760c:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800760e:	686b      	ldr	r3, [r5, #4]
 8007610:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007614:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007616:	f040 80b9 	bne.w	800778c <HAL_SAI_Init.part.0+0x304>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800761a:	2b01      	cmp	r3, #1
 800761c:	bf14      	ite	ne
 800761e:	f44f 7400 	movne.w	r4, #512	; 0x200
 8007622:	2400      	moveq	r4, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8007624:	f7fb ffea 	bl	80035fc <HAL_GetREVID>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007628:	6c69      	ldr	r1, [r5, #68]	; 0x44
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800762a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800762e:	e9d5 3200 	ldrd	r3, r2, [r5]
 8007632:	ea42 0201 	orr.w	r2, r2, r1
 8007636:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8007638:	ea42 0201 	orr.w	r2, r2, r1
 800763c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800763e:	ea42 0201 	orr.w	r2, r2, r1
 8007642:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8007644:	ea42 0201 	orr.w	r2, r2, r1
 8007648:	6969      	ldr	r1, [r5, #20]
 800764a:	ea42 0201 	orr.w	r2, r2, r1
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800764e:	f0c0 8095 	bcc.w	800777c <HAL_SAI_Init.part.0+0x2f4>
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007652:	69a9      	ldr	r1, [r5, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007654:	6818      	ldr	r0, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007656:	430a      	orrs	r2, r1
 8007658:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800765a:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800765c:	4942      	ldr	r1, [pc, #264]	; (8007768 <HAL_SAI_Init.part.0+0x2e0>)
 800765e:	4001      	ands	r1, r0
 8007660:	6019      	str	r1, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007662:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007664:	430a      	orrs	r2, r1
 8007666:	6819      	ldr	r1, [r3, #0]
 8007668:	430a      	orrs	r2, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800766a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800766c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007670:	493e      	ldr	r1, [pc, #248]	; (800776c <HAL_SAI_Init.part.0+0x2e4>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007672:	433a      	orrs	r2, r7
 8007674:	4322      	orrs	r2, r4
 8007676:	601a      	str	r2, [r3, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007678:	685a      	ldr	r2, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800767a:	6b28      	ldr	r0, [r5, #48]	; 0x30
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800767c:	4011      	ands	r1, r2
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800767e:	69ea      	ldr	r2, [r5, #28]
 8007680:	4302      	orrs	r2, r0
 8007682:	6b68      	ldr	r0, [r5, #52]	; 0x34
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007684:	6059      	str	r1, [r3, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007686:	4302      	orrs	r2, r0
 8007688:	6859      	ldr	r1, [r3, #4]
 800768a:	430a      	orrs	r2, r1
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800768c:	4938      	ldr	r1, [pc, #224]	; (8007770 <HAL_SAI_Init.part.0+0x2e8>)
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800768e:	605a      	str	r2, [r3, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007690:	689a      	ldr	r2, [r3, #8]
 8007692:	4011      	ands	r1, r2
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007694:	6e6a      	ldr	r2, [r5, #100]	; 0x64
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007696:	6099      	str	r1, [r3, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007698:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800769a:	6898      	ldr	r0, [r3, #8]
 800769c:	430a      	orrs	r2, r1
 800769e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80076a0:	430a      	orrs	r2, r1
 80076a2:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80076a4:	3901      	subs	r1, #1
 80076a6:	430a      	orrs	r2, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80076a8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80076aa:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80076ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80076b0:	4302      	orrs	r2, r0
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80076b2:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80076b6:	609a      	str	r2, [r3, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80076b8:	68d9      	ldr	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80076ba:	6eaa      	ldr	r2, [r5, #104]	; 0x68
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80076bc:	4001      	ands	r1, r0
 80076be:	60d9      	str	r1, [r3, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80076c0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 80076c2:	68d8      	ldr	r0, [r3, #12]
 80076c4:	430a      	orrs	r2, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80076c6:	6f69      	ldr	r1, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80076c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80076cc:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80076ce:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80076d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80076d4:	4919      	ldr	r1, [pc, #100]	; (800773c <HAL_SAI_Init.part.0+0x2b4>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80076d6:	4302      	orrs	r2, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80076d8:	428b      	cmp	r3, r1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80076da:	60da      	str	r2, [r3, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80076dc:	d01b      	beq.n	8007716 <HAL_SAI_Init.part.0+0x28e>
 80076de:	4a18      	ldr	r2, [pc, #96]	; (8007740 <HAL_SAI_Init.part.0+0x2b8>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d018      	beq.n	8007716 <HAL_SAI_Init.part.0+0x28e>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80076e4:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 80076e6:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80076e8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
 80076ec:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 80076ee:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 80076f2:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
 80076f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 80076f8:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80076fc:	e739      	b.n	8007572 <HAL_SAI_Init.part.0+0xea>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80076fe:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007700:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8007704:	e735      	b.n	8007572 <HAL_SAI_Init.part.0+0xea>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007706:	4662      	mov	r2, ip
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007708:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800770c:	e731      	b.n	8007572 <HAL_SAI_Init.part.0+0xea>
    SaiBaseAddress = SAI3;
 800770e:	4e19      	ldr	r6, [pc, #100]	; (8007774 <HAL_SAI_Init.part.0+0x2ec>)
 8007710:	e6de      	b.n	80074d0 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 8007712:	4e19      	ldr	r6, [pc, #100]	; (8007778 <HAL_SAI_Init.part.0+0x2f0>)
 8007714:	e6dc      	b.n	80074d0 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007716:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007718:	f023 0301 	bic.w	r3, r3, #1
 800771c:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800771e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8007722:	2b01      	cmp	r3, #1
 8007724:	d1de      	bne.n	80076e4 <HAL_SAI_Init.part.0+0x25c>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007726:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800772a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800772c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8007730:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8007732:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8007734:	f043 0301 	orr.w	r3, r3, #1
 8007738:	6473      	str	r3, [r6, #68]	; 0x44
 800773a:	e7d3      	b.n	80076e4 <HAL_SAI_Init.part.0+0x25c>
 800773c:	40015804 	.word	0x40015804
 8007740:	58005404 	.word	0x58005404
 8007744:	40015800 	.word	0x40015800
 8007748:	2000009c 	.word	0x2000009c
 800774c:	95cbec1b 	.word	0x95cbec1b
 8007750:	40015c00 	.word	0x40015c00
 8007754:	40015824 	.word	0x40015824
 8007758:	40015c04 	.word	0x40015c04
 800775c:	40016004 	.word	0x40016004
 8007760:	58005424 	.word	0x58005424
 8007764:	cccccccd 	.word	0xcccccccd
 8007768:	f005c010 	.word	0xf005c010
 800776c:	ffff1ff0 	.word	0xffff1ff0
 8007770:	fff88000 	.word	0xfff88000
 8007774:	40016000 	.word	0x40016000
 8007778:	58005400 	.word	0x58005400
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800777c:	69a9      	ldr	r1, [r5, #24]
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800777e:	6818      	ldr	r0, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007780:	430a      	orrs	r2, r1
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007782:	4924      	ldr	r1, [pc, #144]	; (8007814 <HAL_SAI_Init.part.0+0x38c>)
 8007784:	4001      	ands	r1, r0
 8007786:	6019      	str	r1, [r3, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007788:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800778a:	e76b      	b.n	8007664 <HAL_SAI_Init.part.0+0x1dc>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800778c:	2b01      	cmp	r3, #1
 800778e:	bf08      	it	eq
 8007790:	f44f 7400 	moveq.w	r4, #512	; 0x200
 8007794:	e746      	b.n	8007624 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
 8007796:	2013      	movs	r0, #19
 8007798:	2712      	movs	r7, #18
 800779a:	f04f 0c11 	mov.w	ip, #17
 800779e:	2210      	movs	r2, #16
 80077a0:	e6c2      	b.n	8007528 <HAL_SAI_Init.part.0+0xa0>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80077a2:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80077a4:	2904      	cmp	r1, #4
 80077a6:	d030      	beq.n	800780a <HAL_SAI_Init.part.0+0x382>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80077a8:	2908      	cmp	r1, #8
 80077aa:	d01e      	beq.n	80077ea <HAL_SAI_Init.part.0+0x362>
        tmpframelength = hsai->FrameInit.FrameLength;
 80077ac:	6d6a      	ldr	r2, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80077ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80077b2:	0043      	lsls	r3, r0, #1
 80077b4:	6a28      	ldr	r0, [r5, #32]
 80077b6:	fb00 f202 	mul.w	r2, r0, r2
 80077ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80077be:	e716      	b.n	80075ee <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80077c0:	2100      	movs	r1, #0
 80077c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80077c6:	f7ff fc23 	bl	8007010 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80077ca:	6829      	ldr	r1, [r5, #0]
 80077cc:	e6e1      	b.n	8007592 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80077ce:	2100      	movs	r1, #0
 80077d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80077d4:	f7ff fc1c 	bl	8007010 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 80077d8:	6829      	ldr	r1, [r5, #0]
 80077da:	e6ea      	b.n	80075b2 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80077dc:	2100      	movs	r1, #0
 80077de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80077e2:	f7ff fc15 	bl	8007010 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80077e6:	6829      	ldr	r1, [r5, #0]
 80077e8:	e6db      	b.n	80075a2 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80077ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077ee:	e7de      	b.n	80077ae <HAL_SAI_Init.part.0+0x326>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80077f0:	2100      	movs	r1, #0
 80077f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80077f6:	f7ff fc0b 	bl	8007010 <HAL_RCCEx_GetPeriphCLKFreq>
 80077fa:	e6e2      	b.n	80075c2 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80077fc:	2100      	movs	r1, #0
 80077fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007802:	f7ff fc05 	bl	8007010 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 8007806:	6829      	ldr	r1, [r5, #0]
 8007808:	e6d7      	b.n	80075ba <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800780a:	2240      	movs	r2, #64	; 0x40
 800780c:	e7cf      	b.n	80077ae <HAL_SAI_Init.part.0+0x326>
      syncen_bits = 0;
 800780e:	2700      	movs	r7, #0
 8007810:	e6af      	b.n	8007572 <HAL_SAI_Init.part.0+0xea>
 8007812:	bf00      	nop
 8007814:	f805c010 	.word	0xf805c010

08007818 <HAL_SAI_InitProtocol>:
  switch (protocol)
 8007818:	2902      	cmp	r1, #2
{
 800781a:	b538      	push	{r3, r4, r5, lr}
 800781c:	4604      	mov	r4, r0
  switch (protocol)
 800781e:	d935      	bls.n	800788c <HAL_SAI_InitProtocol+0x74>
 8007820:	1ec8      	subs	r0, r1, #3
 8007822:	2801      	cmp	r0, #1
 8007824:	d830      	bhi.n	8007888 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007826:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8007828:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800782a:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800782c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800782e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 8007830:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8007832:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007836:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007838:	6860      	ldr	r0, [r4, #4]
 800783a:	f030 0002 	bics.w	r0, r0, #2
 800783e:	bf0c      	ite	eq
 8007840:	2501      	moveq	r5, #1
 8007842:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 8007844:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007846:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800784a:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 800784c:	bf0c      	ite	eq
 800784e:	2001      	moveq	r0, #1
 8007850:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8007852:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8007854:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8007858:	65a0      	str	r0, [r4, #88]	; 0x58
 800785a:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 800785c:	2a03      	cmp	r2, #3
 800785e:	d813      	bhi.n	8007888 <HAL_SAI_InitProtocol+0x70>
 8007860:	e8df f002 	tbb	[pc, r2]
 8007864:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8007868:	6823      	ldr	r3, [r4, #0]
 800786a:	4a47      	ldr	r2, [pc, #284]	; (8007988 <HAL_SAI_InitProtocol+0x170>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d005      	beq.n	800787c <HAL_SAI_InitProtocol+0x64>
 8007870:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8007874:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8007878:	4293      	cmp	r3, r2
 800787a:	d105      	bne.n	8007888 <HAL_SAI_InitProtocol+0x70>
 800787c:	6863      	ldr	r3, [r4, #4]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d102      	bne.n	8007888 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007882:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007884:	2b00      	cmp	r3, #0
 8007886:	d037      	beq.n	80078f8 <HAL_SAI_InitProtocol+0xe0>
}
 8007888:	2001      	movs	r0, #1
 800788a:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800788c:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800788e:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8007890:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8007892:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 8007894:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007896:	6860      	ldr	r0, [r4, #4]
 8007898:	f030 0002 	bics.w	r0, r0, #2
 800789c:	bf14      	ite	ne
 800789e:	2001      	movne	r0, #1
 80078a0:	2000      	moveq	r0, #0
 80078a2:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80078a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80078a8:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80078aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80078ae:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 80078b0:	f013 0001 	ands.w	r0, r3, #1
 80078b4:	d1e8      	bne.n	8007888 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 80078b6:	b949      	cbnz	r1, 80078cc <HAL_SAI_InitProtocol+0xb4>
 80078b8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80078bc:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 80078c0:	2a03      	cmp	r2, #3
 80078c2:	d8e1      	bhi.n	8007888 <HAL_SAI_InitProtocol+0x70>
 80078c4:	e8df f002 	tbb	[pc, r2]
 80078c8:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80078cc:	6660      	str	r0, [r4, #100]	; 0x64
 80078ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80078d2:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 80078d4:	2a03      	cmp	r2, #3
 80078d6:	d8d7      	bhi.n	8007888 <HAL_SAI_InitProtocol+0x70>
 80078d8:	e8df f002 	tbb	[pc, r2]
 80078dc:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80078e0:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80078e2:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80078e4:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80078e6:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 80078e8:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80078ea:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80078ec:	f7fb fe86 	bl	80035fc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80078f0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d0b7      	beq.n	8007868 <HAL_SAI_InitProtocol+0x50>
 80078f8:	4620      	mov	r0, r4
}
 80078fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078fe:	f7ff bdc3 	b.w	8007488 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007902:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007904:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007906:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007908:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800790a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800790c:	e7ee      	b.n	80078ec <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800790e:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007910:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007912:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007914:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8007916:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007918:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800791a:	e7e7      	b.n	80078ec <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800791c:	21e0      	movs	r1, #224	; 0xe0
 800791e:	e7f7      	b.n	8007910 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007920:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007922:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007924:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007926:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8007928:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800792a:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800792c:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800792e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007932:	e7db      	b.n	80078ec <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007934:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007936:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007938:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800793a:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800793c:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8007940:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007942:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007946:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007948:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800794a:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800794c:	d1ce      	bne.n	80078ec <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 800794e:	2308      	movs	r3, #8
 8007950:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 8007952:	e7cb      	b.n	80078ec <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8007954:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007956:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007958:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800795a:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800795e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007960:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8007964:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8007966:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800796a:	d1bf      	bne.n	80078ec <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 800796c:	2310      	movs	r3, #16
 800796e:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 8007970:	e7bc      	b.n	80078ec <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007972:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8007974:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8007976:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8007978:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800797a:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800797c:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800797e:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8007980:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8007984:	e7b2      	b.n	80078ec <HAL_SAI_InitProtocol+0xd4>
 8007986:	bf00      	nop
 8007988:	40015804 	.word	0x40015804

0800798c <HAL_SAI_Transmit_DMA>:
{
 800798c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007990:	460f      	mov	r7, r1
 8007992:	4604      	mov	r4, r0
 8007994:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8007996:	f7fb fe19 	bl	80035cc <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800799a:	2f00      	cmp	r7, #0
 800799c:	d061      	beq.n	8007a62 <HAL_SAI_Transmit_DMA+0xd6>
 800799e:	fab5 f885 	clz	r8, r5
 80079a2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	d05b      	beq.n	8007a62 <HAL_SAI_Transmit_DMA+0xd6>
  if (hsai->State == HAL_SAI_STATE_READY)
 80079aa:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	fa5f f983 	uxtb.w	r9, r3
 80079b4:	d150      	bne.n	8007a58 <HAL_SAI_Transmit_DMA+0xcc>
    __HAL_LOCK(hsai);
 80079b6:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d04c      	beq.n	8007a58 <HAL_SAI_Transmit_DMA+0xcc>
    hsai->XferSize = Size;
 80079be:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80079c0:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
 80079c4:	4606      	mov	r6, r0
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80079c6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    hsai->XferSize = Size;
 80079ca:	f365 030f 	bfi	r3, r5, #0, #16
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80079ce:	6822      	ldr	r2, [r4, #0]
    __HAL_LOCK(hsai);
 80079d0:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80079d4:	4639      	mov	r1, r7
    hsai->XferSize = Size;
 80079d6:	f365 431f 	bfi	r3, r5, #16, #16
    hsai->pBuffPtr = pData;
 80079da:	67a7      	str	r7, [r4, #120]	; 0x78
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80079dc:	321c      	adds	r2, #28
    hsai->XferSize = Size;
 80079de:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80079e0:	462b      	mov	r3, r5
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80079e2:	2512      	movs	r5, #18
 80079e4:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80079e8:	4d2e      	ldr	r5, [pc, #184]	; (8007aa4 <HAL_SAI_Transmit_DMA+0x118>)
    hsai->hdmatx->XferAbortCallback = NULL;
 80079ea:	f8c0 8050 	str.w	r8, [r0, #80]	; 0x50
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80079ee:	6405      	str	r5, [r0, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80079f0:	4d2d      	ldr	r5, [pc, #180]	; (8007aa8 <HAL_SAI_Transmit_DMA+0x11c>)
 80079f2:	63c5      	str	r5, [r0, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80079f4:	4d2d      	ldr	r5, [pc, #180]	; (8007aac <HAL_SAI_Transmit_DMA+0x120>)
 80079f6:	64c5      	str	r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80079f8:	f7fc fa28 	bl	8003e4c <HAL_DMA_Start_IT>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d13e      	bne.n	8007a7e <HAL_SAI_Transmit_DMA+0xf2>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007a00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007a02:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007a04:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007a06:	d031      	beq.n	8007a6c <HAL_SAI_Transmit_DMA+0xe0>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007a08:	2105      	movs	r1, #5
 8007a0a:	2261      	movs	r2, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007a0c:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	bf98      	it	ls
 8007a12:	4611      	movls	r1, r2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007a14:	6822      	ldr	r2, [r4, #0]
 8007a16:	6913      	ldr	r3, [r2, #16]
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007a1c:	6813      	ldr	r3, [r2, #0]
 8007a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a22:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007a24:	e006      	b.n	8007a34 <HAL_SAI_Transmit_DMA+0xa8>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8007a26:	f7fb fdd1 	bl	80035cc <HAL_GetTick>
 8007a2a:	1b83      	subs	r3, r0, r6
 8007a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a30:	d82a      	bhi.n	8007a88 <HAL_SAI_Transmit_DMA+0xfc>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8007a32:	6822      	ldr	r2, [r4, #0]
 8007a34:	6955      	ldr	r5, [r2, #20]
 8007a36:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8007a3a:	d0f4      	beq.n	8007a26 <HAL_SAI_Transmit_DMA+0x9a>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007a3c:	6813      	ldr	r3, [r2, #0]
 8007a3e:	03db      	lsls	r3, r3, #15
 8007a40:	d403      	bmi.n	8007a4a <HAL_SAI_Transmit_DMA+0xbe>
      __HAL_SAI_ENABLE(hsai);
 8007a42:	6813      	ldr	r3, [r2, #0]
 8007a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a48:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8007a4a:	2300      	movs	r3, #0
    return HAL_OK;
 8007a4c:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
 8007a4e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8007a52:	4648      	mov	r0, r9
 8007a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8007a58:	f04f 0902 	mov.w	r9, #2
}
 8007a5c:	4648      	mov	r0, r9
 8007a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8007a62:	f04f 0901 	mov.w	r9, #1
}
 8007a66:	4648      	mov	r0, r9
 8007a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007a6c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007a70:	2a01      	cmp	r2, #1
 8007a72:	bf0b      	itete	eq
 8007a74:	2115      	moveq	r1, #21
 8007a76:	2105      	movne	r1, #5
 8007a78:	2271      	moveq	r2, #113	; 0x71
 8007a7a:	2261      	movne	r2, #97	; 0x61
 8007a7c:	e7c6      	b.n	8007a0c <HAL_SAI_Transmit_DMA+0x80>
}
 8007a7e:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
 8007a80:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
 8007a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007a88:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8007a8c:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
 8007a90:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8007a98:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007a9a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8007a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa2:	bf00      	nop
 8007aa4:	08007be5 	.word	0x08007be5
 8007aa8:	08007b81 	.word	0x08007b81
 8007aac:	08007c61 	.word	0x08007c61

08007ab0 <HAL_SAI_Receive_DMA>:
{
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((pData == NULL) || (Size == 0U))
 8007ab2:	2900      	cmp	r1, #0
 8007ab4:	d04e      	beq.n	8007b54 <HAL_SAI_Receive_DMA+0xa4>
 8007ab6:	fab2 f582 	clz	r5, r2
 8007aba:	4613      	mov	r3, r2
 8007abc:	096d      	lsrs	r5, r5, #5
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	d048      	beq.n	8007b54 <HAL_SAI_Receive_DMA+0xa4>
  if (hsai->State == HAL_SAI_STATE_READY)
 8007ac2:	f890 2091 	ldrb.w	r2, [r0, #145]	; 0x91
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	2a01      	cmp	r2, #1
 8007aca:	b2d6      	uxtb	r6, r2
 8007acc:	d13f      	bne.n	8007b4e <HAL_SAI_Receive_DMA+0x9e>
    __HAL_LOCK(hsai);
 8007ace:	f890 2090 	ldrb.w	r2, [r0, #144]	; 0x90
 8007ad2:	2a01      	cmp	r2, #1
 8007ad4:	d03b      	beq.n	8007b4e <HAL_SAI_Receive_DMA+0x9e>
    hsai->pBuffPtr = pData;
 8007ad6:	6781      	str	r1, [r0, #120]	; 0x78
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007ad8:	460a      	mov	r2, r1
    hsai->XferSize = Size;
 8007ada:	4629      	mov	r1, r5
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007adc:	2722      	movs	r7, #34	; 0x22
    __HAL_LOCK(hsai);
 8007ade:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->XferSize = Size;
 8007ae2:	f363 010f 	bfi	r1, r3, #0, #16
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007ae6:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    hsai->XferSize = Size;
 8007aea:	f363 411f 	bfi	r1, r3, #16, #16
 8007aee:	67c1      	str	r1, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007af0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8007af4:	f884 7091 	strb.w	r7, [r4, #145]	; 0x91
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007af8:	4f1e      	ldr	r7, [pc, #120]	; (8007b74 <HAL_SAI_Receive_DMA+0xc4>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007afa:	6821      	ldr	r1, [r4, #0]
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8007afc:	6407      	str	r7, [r0, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007afe:	4f1e      	ldr	r7, [pc, #120]	; (8007b78 <HAL_SAI_Receive_DMA+0xc8>)
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007b00:	311c      	adds	r1, #28
    hsai->hdmarx->XferAbortCallback = NULL;
 8007b02:	6505      	str	r5, [r0, #80]	; 0x50
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8007b04:	63c7      	str	r7, [r0, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8007b06:	4f1d      	ldr	r7, [pc, #116]	; (8007b7c <HAL_SAI_Receive_DMA+0xcc>)
 8007b08:	64c7      	str	r7, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8007b0a:	f7fc f99f 	bl	8003e4c <HAL_DMA_Start_IT>
 8007b0e:	bb20      	cbnz	r0, 8007b5a <HAL_SAI_Receive_DMA+0xaa>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b10:	6c63      	ldr	r3, [r4, #68]	; 0x44
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b12:	6862      	ldr	r2, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b14:	2b08      	cmp	r3, #8
 8007b16:	d024      	beq.n	8007b62 <HAL_SAI_Receive_DMA+0xb2>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b18:	2105      	movs	r1, #5
 8007b1a:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007b1c:	6823      	ldr	r3, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007b1e:	3a02      	subs	r2, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8007b20:	2a01      	cmp	r2, #1
 8007b22:	bf98      	it	ls
 8007b24:	4601      	movls	r1, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007b32:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	03d2      	lsls	r2, r2, #15
 8007b38:	d403      	bmi.n	8007b42 <HAL_SAI_Receive_DMA+0x92>
      __HAL_SAI_ENABLE(hsai);
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007b40:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8007b42:	2300      	movs	r3, #0
    return HAL_OK;
 8007b44:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
 8007b46:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8007b4e:	2602      	movs	r6, #2
}
 8007b50:	4630      	mov	r0, r6
 8007b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return  HAL_ERROR;
 8007b54:	2601      	movs	r6, #1
}
 8007b56:	4630      	mov	r0, r6
 8007b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b5a:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
 8007b5c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
 8007b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007b62:	f022 0302 	bic.w	r3, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	bf0b      	itete	eq
 8007b6a:	2115      	moveq	r1, #21
 8007b6c:	2105      	movne	r1, #5
 8007b6e:	2071      	moveq	r0, #113	; 0x71
 8007b70:	2061      	movne	r0, #97	; 0x61
 8007b72:	e7d3      	b.n	8007b1c <HAL_SAI_Receive_DMA+0x6c>
 8007b74:	08007c55 	.word	0x08007c55
 8007b78:	08007bf1 	.word	0x08007bf1
 8007b7c:	08007c61 	.word	0x08007c61

08007b80 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8007b80:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007b82:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b84:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b8a:	d01b      	beq.n	8007bc4 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007b8c:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 8007b8e:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b92:	6c41      	ldr	r1, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007b94:	681a      	ldr	r2, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007b96:	2908      	cmp	r1, #8
    hsai->XferCount = 0;
 8007b98:	f8a0 c07e 	strh.w	ip, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007b9c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007ba0:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007ba2:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007ba4:	d011      	beq.n	8007bca <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007ba6:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8007baa:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007bae:	3a02      	subs	r2, #2
 8007bb0:	2a01      	cmp	r2, #1
 8007bb2:	bf98      	it	ls
 8007bb4:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007bb6:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007bb8:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007bbc:	400a      	ands	r2, r1
 8007bbe:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8007bc0:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8007bc4:	f7fa f85e 	bl	8001c84 <HAL_SAI_TxCpltCallback>
#endif
}
 8007bc8:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007bca:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007bce:	2901      	cmp	r1, #1
 8007bd0:	bf0b      	itete	eq
 8007bd2:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8007bd6:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8007bda:	f06f 0115 	mvneq.w	r1, #21
 8007bde:	f06f 0105 	mvnne.w	r1, #5
 8007be2:	e7e4      	b.n	8007bae <SAI_DMATxCplt+0x2e>

08007be4 <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007be4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007be6:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8007be8:	f7fa f84e 	bl	8001c88 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8007bec:	bd08      	pop	{r3, pc}
 8007bee:	bf00      	nop

08007bf0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8007bf0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007bf2:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bf4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfa:	d01b      	beq.n	8007c34 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007bfc:	6803      	ldr	r3, [r0, #0]
    hsai->XferCount = 0;
 8007bfe:	f04f 0c00 	mov.w	ip, #0
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007c02:	6c41      	ldr	r1, [r0, #68]	; 0x44
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007c04:	681a      	ldr	r2, [r3, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007c06:	2908      	cmp	r1, #8
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8007c08:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007c0c:	601a      	str	r2, [r3, #0]
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007c0e:	6842      	ldr	r2, [r0, #4]
    hsai->XferCount = 0;
 8007c10:	f8a0 c07e 	strh.w	ip, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007c14:	d011      	beq.n	8007c3a <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007c16:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8007c1a:	f06f 0105 	mvn.w	r1, #5
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007c1e:	3a02      	subs	r2, #2
 8007c20:	2a01      	cmp	r2, #1
 8007c22:	bf98      	it	ls
 8007c24:	4661      	movls	r1, ip

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007c26:	691a      	ldr	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8007c28:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8007c2c:	400a      	ands	r2, r1
 8007c2e:	611a      	str	r2, [r3, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8007c30:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8007c34:	f00f fb30 	bl	8017298 <__HAL_SAI_RxCpltCallback_veneer>
#endif
}
 8007c38:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8007c3a:	f022 0102 	bic.w	r1, r2, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8007c3e:	2901      	cmp	r1, #1
 8007c40:	bf0b      	itete	eq
 8007c42:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8007c46:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8007c4a:	f06f 0115 	mvneq.w	r1, #21
 8007c4e:	f06f 0105 	mvnne.w	r1, #5
 8007c52:	e7e4      	b.n	8007c1e <SAI_DMARxCplt+0x2e>

08007c54 <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007c54:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007c56:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 8007c58:	f00f fb1a 	bl	8017290 <__HAL_SAI_RxHalfCpltCallback_veneer>
#endif
}
 8007c5c:	bd08      	pop	{r3, pc}
 8007c5e:	bf00      	nop

08007c60 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c60:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c62:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007c64:	f7fc fea4 	bl	80049b0 <HAL_DMA_GetError>
 8007c68:	2802      	cmp	r0, #2
 8007c6a:	d023      	beq.n	8007cb4 <SAI_DMAError+0x54>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007c6c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007c70:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007c72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007c76:	4b13      	ldr	r3, [pc, #76]	; (8007cc4 <SAI_DMAError+0x64>)
 8007c78:	4813      	ldr	r0, [pc, #76]	; (8007cc8 <SAI_DMAError+0x68>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8007c7a:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007c7e:	681b      	ldr	r3, [r3, #0]
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007c80:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007c82:	fba0 0303 	umull	r0, r3, r0, r3
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007c86:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007c8a:	0b1b      	lsrs	r3, r3, #12
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8007c8c:	600a      	str	r2, [r1, #0]
  __HAL_SAI_DISABLE(hsai);
 8007c8e:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007c90:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8007c92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c96:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 8007c98:	b16b      	cbz	r3, 8007cb6 <SAI_DMAError+0x56>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007c9a:	680a      	ldr	r2, [r1, #0]
    count--;
 8007c9c:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007c9e:	03d2      	lsls	r2, r2, #15
 8007ca0:	d4fa      	bmi.n	8007c98 <SAI_DMAError+0x38>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8007ca2:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8007ca4:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8007ca6:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8007ca8:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8007cac:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8007cb0:	f7f9 ffe6 	bl	8001c80 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8007cb4:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007cb6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8007cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cbe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 8007cc2:	e7ee      	b.n	8007ca2 <SAI_DMAError+0x42>
 8007cc4:	2000009c 	.word	0x2000009c
 8007cc8:	95cbec1b 	.word	0x95cbec1b

08007ccc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cd6:	f7fb fc79 	bl	80035cc <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007cda:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8007cdc:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007cde:	6828      	ldr	r0, [r5, #0]
 8007ce0:	f001 fbaa 	bl	8009438 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	b118      	cbz	r0, 8007cf0 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8007ce8:	4620      	mov	r0, r4
 8007cea:	b006      	add	sp, #24
 8007cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007cf0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8007cf2:	6828      	ldr	r0, [r5, #0]
 8007cf4:	0409      	lsls	r1, r1, #16
 8007cf6:	f002 f8f9 	bl	8009eec <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d1f3      	bne.n	8007ce8 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d04:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d06:	4669      	mov	r1, sp
 8007d08:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d0a:	e9cd 2300 	strd	r2, r3, [sp]
 8007d0e:	2230      	movs	r2, #48	; 0x30
 8007d10:	2302      	movs	r3, #2
 8007d12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d1e:	f001 fb75 	bl	800940c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007d22:	6828      	ldr	r0, [r5, #0]
 8007d24:	f002 fa68 	bl	800a1f8 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d28:	4604      	mov	r4, r0
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d1dc      	bne.n	8007ce8 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007d2e:	4682      	mov	sl, r0
 8007d30:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007d32:	f240 582a 	movw	r8, #1322	; 0x52a
 8007d36:	e004      	b.n	8007d42 <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007d38:	f7fb fc48 	bl	80035cc <HAL_GetTick>
 8007d3c:	1b83      	subs	r3, r0, r6
 8007d3e:	3301      	adds	r3, #1
 8007d40:	d024      	beq.n	8007d8c <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007d42:	6828      	ldr	r0, [r5, #0]
 8007d44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007d46:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007d4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007d4c:	d10c      	bne.n	8007d68 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007d4e:	0319      	lsls	r1, r3, #12
 8007d50:	d4f2      	bmi.n	8007d38 <SD_FindSCR+0x6c>
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	d1f0      	bne.n	8007d38 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007d56:	f001 fb3f 	bl	80093d8 <SDMMC_ReadFIFO>
 8007d5a:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007d5c:	6828      	ldr	r0, [r5, #0]
      index++;
 8007d5e:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007d60:	f001 fb3a 	bl	80093d8 <SDMMC_ReadFIFO>
 8007d64:	4682      	mov	sl, r0
      index++;
 8007d66:	e7e7      	b.n	8007d38 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007d68:	071a      	lsls	r2, r3, #28
 8007d6a:	d416      	bmi.n	8007d9a <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007d6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007d6e:	079b      	lsls	r3, r3, #30
 8007d70:	d40f      	bmi.n	8007d92 <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007d72:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007d74:	f014 0420 	ands.w	r4, r4, #32
 8007d78:	d113      	bne.n	8007da2 <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007d7a:	fa9a f28a 	rev.w	r2, sl
 8007d7e:	fa99 f389 	rev.w	r3, r9
 8007d82:	490a      	ldr	r1, [pc, #40]	; (8007dac <SD_FindSCR+0xe0>)
 8007d84:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007d86:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8007d8a:	e7ad      	b.n	8007ce8 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8007d8c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007d90:	e7aa      	b.n	8007ce8 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007d92:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d94:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007d96:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007d98:	e7a6      	b.n	8007ce8 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007d9a:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007d9c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007d9e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007da0:	e7a2      	b.n	8007ce8 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007da2:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8007da4:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007da6:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8007da8:	e79e      	b.n	8007ce8 <SD_FindSCR+0x1c>
 8007daa:	bf00      	nop
 8007dac:	18000f3a 	.word	0x18000f3a

08007db0 <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 8007db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007db4:	4604      	mov	r4, r0
 8007db6:	b097      	sub	sp, #92	; 0x5c
 8007db8:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8007dba:	f7fb fc07 	bl	80035cc <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007dbe:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8007dc0:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007dc2:	6820      	ldr	r0, [r4, #0]
 8007dc4:	f001 fb1e 	bl	8009404 <SDMMC_GetResponse>
 8007dc8:	0182      	lsls	r2, r0, #6
 8007dca:	d45b      	bmi.n	8007e84 <HAL_SD_GetCardStatus.part.0+0xd4>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007dcc:	2140      	movs	r1, #64	; 0x40
 8007dce:	6820      	ldr	r0, [r4, #0]
 8007dd0:	f001 fb32 	bl	8009438 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	b1e0      	cbz	r0, 8007e12 <HAL_SD_GetCardStatus.part.0+0x62>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007dd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007dda:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ddc:	6820      	ldr	r0, [r4, #0]
 8007dde:	4a5a      	ldr	r2, [pc, #360]	; (8007f48 <HAL_SD_GetCardStatus.part.0+0x198>)
    hsd->State = HAL_SD_STATE_READY;
 8007de0:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007de2:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8007de4:	460e      	mov	r6, r1
    hsd->ErrorCode |= errorstate;
 8007de6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007de8:	4313      	orrs	r3, r2
 8007dea:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007dec:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007df4:	f001 fb20 	bl	8009438 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007df8:	b138      	cbz	r0, 8007e0a <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8007dfa:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	4952      	ldr	r1, [pc, #328]	; (8007f48 <HAL_SD_GetCardStatus.part.0+0x198>)
    status = HAL_ERROR;
 8007e00:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e02:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007e04:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007e06:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	b017      	add	sp, #92	; 0x5c
 8007e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007e14:	6820      	ldr	r0, [r4, #0]
 8007e16:	0409      	lsls	r1, r1, #16
 8007e18:	f002 f868 	bl	8009eec <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d1da      	bne.n	8007dd8 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e26:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e28:	4669      	mov	r1, sp
 8007e2a:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e2c:	e9cd 2300 	strd	r2, r3, [sp]
 8007e30:	2260      	movs	r2, #96	; 0x60
 8007e32:	2302      	movs	r3, #2
 8007e34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e40:	f001 fae4 	bl	800940c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007e44:	6820      	ldr	r0, [r4, #0]
 8007e46:	f002 fbfb 	bl	800a640 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d1c3      	bne.n	8007dd8 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
 8007e50:	ae06      	add	r6, sp, #24
 8007e52:	e004      	b.n	8007e5e <HAL_SD_GetCardStatus.part.0+0xae>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e54:	f7fb fbba 	bl	80035cc <HAL_GetTick>
 8007e58:	1bc0      	subs	r0, r0, r7
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	d016      	beq.n	8007e8c <HAL_SD_GetCardStatus.part.0+0xdc>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e62:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007e66:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e68:	d113      	bne.n	8007e92 <HAL_SD_GetCardStatus.part.0+0xe2>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007e6a:	041b      	lsls	r3, r3, #16
 8007e6c:	d5f2      	bpl.n	8007e54 <HAL_SD_GetCardStatus.part.0+0xa4>
 8007e6e:	f106 0820 	add.w	r8, r6, #32
 8007e72:	e000      	b.n	8007e76 <HAL_SD_GetCardStatus.part.0+0xc6>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e74:	6820      	ldr	r0, [r4, #0]
 8007e76:	f001 faaf 	bl	80093d8 <SDMMC_ReadFIFO>
 8007e7a:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8007e7e:	4546      	cmp	r6, r8
 8007e80:	d1f8      	bne.n	8007e74 <HAL_SD_GetCardStatus.part.0+0xc4>
 8007e82:	e7e7      	b.n	8007e54 <HAL_SD_GetCardStatus.part.0+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e84:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e8a:	e7a8      	b.n	8007dde <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 8007e8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e90:	e7a4      	b.n	8007ddc <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e92:	0719      	lsls	r1, r3, #28
 8007e94:	d451      	bmi.n	8007f3a <HAL_SD_GetCardStatus.part.0+0x18a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e98:	079a      	lsls	r2, r3, #30
 8007e9a:	d450      	bmi.n	8007f3e <HAL_SD_GetCardStatus.part.0+0x18e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e9e:	069b      	lsls	r3, r3, #26
 8007ea0:	d50a      	bpl.n	8007eb8 <HAL_SD_GetCardStatus.part.0+0x108>
 8007ea2:	e04e      	b.n	8007f42 <HAL_SD_GetCardStatus.part.0+0x192>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ea4:	f001 fa98 	bl	80093d8 <SDMMC_ReadFIFO>
 8007ea8:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007eac:	f7fb fb8e 	bl	80035cc <HAL_GetTick>
 8007eb0:	1bc0      	subs	r0, r0, r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d0ea      	beq.n	8007e8c <HAL_SD_GetCardStatus.part.0+0xdc>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007eb6:	6820      	ldr	r0, [r4, #0]
 8007eb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007eba:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8007ebe:	d1f1      	bne.n	8007ea4 <HAL_SD_GetCardStatus.part.0+0xf4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007ec0:	9906      	ldr	r1, [sp, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec2:	461e      	mov	r6, r3
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007ec4:	4a21      	ldr	r2, [pc, #132]	; (8007f4c <HAL_SD_GetCardStatus.part.0+0x19c>)
 8007ec6:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007ec8:	0a0a      	lsrs	r2, r1, #8
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007eca:	e9dd c308 	ldrd	ip, r3, [sp, #32]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007ece:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007ed2:	ea4f 471c 	mov.w	r7, ip, lsr #16
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007ed6:	ea42 6211 	orr.w	r2, r2, r1, lsr #24
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007eda:	fa5f f883 	uxtb.w	r8, r3
 8007ede:	f027 07ff 	bic.w	r7, r7, #255	; 0xff
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007ee2:	fa1f f982 	uxth.w	r9, r2
 8007ee6:	9a07      	ldr	r2, [sp, #28]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007ee8:	ea47 0708 	orr.w	r7, r7, r8
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007eec:	f3c1 1881 	ubfx	r8, r1, #6, #2
 8007ef0:	fa92 fe82 	rev.w	lr, r2
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007ef4:	f3c1 1140 	ubfx	r1, r1, #5, #1
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007ef8:	fa5f f28c 	uxtb.w	r2, ip
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007efc:	f885 8000 	strb.w	r8, [r5]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007f00:	7069      	strb	r1, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007f02:	f8a5 9002 	strh.w	r9, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007f06:	f8c5 e004 	str.w	lr, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007f0a:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007f0c:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8007f10:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007f12:	f3cc 5203 	ubfx	r2, ip, #20, #4
 8007f16:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007f18:	f3c3 2285 	ubfx	r2, r3, #10, #6
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007f1c:	81af      	strh	r7, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8007f1e:	73aa      	strb	r2, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8007f20:	f3c3 2201 	ubfx	r2, r3, #8, #2
 8007f24:	73ea      	strb	r2, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007f26:	f3c3 1203 	ubfx	r2, r3, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007f2a:	f003 030f 	and.w	r3, r3, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8007f2e:	742a      	strb	r2, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8007f30:	746b      	strb	r3, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007f32:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 8007f36:	74ab      	strb	r3, [r5, #18]
 8007f38:	e75a      	b.n	8007df0 <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007f3a:	2308      	movs	r3, #8
 8007f3c:	e74f      	b.n	8007dde <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	e74d      	b.n	8007dde <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 8007f42:	2320      	movs	r3, #32
 8007f44:	e74b      	b.n	8007dde <HAL_SD_GetCardStatus.part.0+0x2e>
 8007f46:	bf00      	nop
 8007f48:	1fe00fff 	.word	0x1fe00fff
 8007f4c:	18000f3a 	.word	0x18000f3a

08007f50 <HAL_SD_ReadBlocks>:
{
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	460d      	mov	r5, r1
 8007f56:	b087      	sub	sp, #28
 8007f58:	4680      	mov	r8, r0
 8007f5a:	4614      	mov	r4, r2
 8007f5c:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8007f5e:	f7fb fb35 	bl	80035cc <HAL_GetTick>
  if (NULL == pData)
 8007f62:	2d00      	cmp	r5, #0
 8007f64:	f000 8099 	beq.w	800809a <HAL_SD_ReadBlocks+0x14a>
  if (hsd->State == HAL_SD_STATE_READY)
 8007f68:	f898 3030 	ldrb.w	r3, [r8, #48]	; 0x30
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	fa5f f983 	uxtb.w	r9, r3
 8007f72:	d17f      	bne.n	8008074 <HAL_SD_ReadBlocks+0x124>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f74:	19e3      	adds	r3, r4, r7
 8007f76:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f7a:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f7c:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f7e:	f8c8 1034 	str.w	r1, [r8, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f82:	f200 8096 	bhi.w	80080b2 <HAL_SD_ReadBlocks+0x162>
    hsd->State = HAL_SD_STATE_BUSY;
 8007f86:	2303      	movs	r3, #3
 8007f88:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 8007f8a:	f8d8 0000 	ldr.w	r0, [r8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007f8e:	f04f 0a02 	mov.w	sl, #2
    hsd->State = HAL_SD_STATE_BUSY;
 8007f92:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f96:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
 8007f9a:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007f9c:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007f9e:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007fa0:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007fa4:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 8007fac:	bf18      	it	ne
 8007fae:	0264      	lslne	r4, r4, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007fb0:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007fb2:	027b      	lsls	r3, r7, #9
 8007fb4:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007fb6:	2390      	movs	r3, #144	; 0x90
 8007fb8:	e9cd 3a02 	strd	r3, sl, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007fbc:	f001 fa26 	bl	800940c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007fc0:	f8d8 0000 	ldr.w	r0, [r8]
    if (NumberOfBlocks > 1U)
 8007fc4:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007fc6:	68c3      	ldr	r3, [r0, #12]
 8007fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fcc:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8007fce:	d95d      	bls.n	800808c <HAL_SD_ReadBlocks+0x13c>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007fd0:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007fd2:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007fd6:	f001 fb7b 	bl	80096d0 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d173      	bne.n	80080c6 <HAL_SD_ReadBlocks+0x176>
    dataremaining = config.DataLength;
 8007fde:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007fe2:	e005      	b.n	8007ff0 <HAL_SD_ReadBlocks+0xa0>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007fe4:	f7fb faf2 	bl	80035cc <HAL_GetTick>
 8007fe8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fea:	1b80      	subs	r0, r0, r6
 8007fec:	4298      	cmp	r0, r3
 8007fee:	d22b      	bcs.n	8008048 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ff0:	f8d8 0000 	ldr.w	r0, [r8]
 8007ff4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ff6:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8007ffa:	d174      	bne.n	80080e6 <HAL_SD_ReadBlocks+0x196>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8007ffc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ffe:	041a      	lsls	r2, r3, #16
 8008000:	d5f0      	bpl.n	8007fe4 <HAL_SD_ReadBlocks+0x94>
 8008002:	f1bb 0f1f 	cmp.w	fp, #31
 8008006:	d9ed      	bls.n	8007fe4 <HAL_SD_ReadBlocks+0x94>
 8008008:	1d2c      	adds	r4, r5, #4
 800800a:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 800800e:	e001      	b.n	8008014 <HAL_SD_ReadBlocks+0xc4>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008010:	f8d8 0000 	ldr.w	r0, [r8]
        for (count = 0U; count < 8U; count++)
 8008014:	3404      	adds	r4, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008016:	f001 f9df 	bl	80093d8 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800801a:	0a01      	lsrs	r1, r0, #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800801c:	0c02      	lsrs	r2, r0, #16
        for (count = 0U; count < 8U; count++)
 800801e:	4554      	cmp	r4, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008020:	ea4f 6310 	mov.w	r3, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008024:	f804 0c08 	strb.w	r0, [r4, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008028:	f804 1c07 	strb.w	r1, [r4, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800802c:	f804 2c06 	strb.w	r2, [r4, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008030:	f804 3c05 	strb.w	r3, [r4, #-5]
        for (count = 0U; count < 8U; count++)
 8008034:	d1ec      	bne.n	8008010 <HAL_SD_ReadBlocks+0xc0>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008036:	f7fb fac9 	bl	80035cc <HAL_GetTick>
 800803a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800803c:	1b80      	subs	r0, r0, r6
          tempbuff++;
 800803e:	3520      	adds	r5, #32
        dataremaining -= 32U;
 8008040:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008044:	4298      	cmp	r0, r3
 8008046:	d3d3      	bcc.n	8007ff0 <HAL_SD_ReadBlocks+0xa0>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008048:	f8d8 3000 	ldr.w	r3, [r8]
        return HAL_TIMEOUT;
 800804c:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008050:	484d      	ldr	r0, [pc, #308]	; (8008188 <HAL_SD_ReadBlocks+0x238>)
        hsd->State = HAL_SD_STATE_READY;
 8008052:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 8008054:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008056:	6398      	str	r0, [r3, #56]	; 0x38
}
 8008058:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800805a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800805e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008062:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008066:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800806a:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
}
 800806e:	b007      	add	sp, #28
 8008070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008074:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    return HAL_ERROR;
 8008078:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800807c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008080:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
}
 8008084:	4648      	mov	r0, r9
 8008086:	b007      	add	sp, #28
 8008088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800808c:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800808e:	4621      	mov	r1, r4
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008090:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008094:	f001 fa76 	bl	8009584 <SDMMC_CmdReadSingleBlock>
 8008098:	e79f      	b.n	8007fda <HAL_SD_ReadBlocks+0x8a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800809a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    return HAL_ERROR;
 800809e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 80080a6:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080a8:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
}
 80080ac:	b007      	add	sp, #28
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080b2:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
}
 80080b6:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80080b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080bc:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
}
 80080c0:	b007      	add	sp, #28
 80080c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80080c6:	f8d8 3000 	ldr.w	r3, [r8]
 80080ca:	4a2f      	ldr	r2, [pc, #188]	; (8008188 <HAL_SD_ReadBlocks+0x238>)
 80080cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80080ce:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 80080d0:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 80080d4:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 80080d6:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 80080d8:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80080dc:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80080e0:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
          return HAL_ERROR;
 80080e4:	e7ce      	b.n	8008084 <HAL_SD_ReadBlocks+0x134>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80080e6:	68c3      	ldr	r3, [r0, #12]
 80080e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ec:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80080ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80080f0:	05db      	lsls	r3, r3, #23
 80080f2:	d50b      	bpl.n	800810c <HAL_SD_ReadBlocks+0x1bc>
 80080f4:	2f01      	cmp	r7, #1
 80080f6:	d909      	bls.n	800810c <HAL_SD_ReadBlocks+0x1bc>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80080f8:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d005      	beq.n	800810c <HAL_SD_ReadBlocks+0x1bc>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008100:	f001 fcd8 	bl	8009ab4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8008104:	2800      	cmp	r0, #0
 8008106:	d1de      	bne.n	80080c6 <HAL_SD_ReadBlocks+0x176>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008108:	f8d8 0000 	ldr.w	r0, [r8]
 800810c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800810e:	f013 0308 	ands.w	r3, r3, #8
 8008112:	d115      	bne.n	8008140 <HAL_SD_ReadBlocks+0x1f0>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008114:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008116:	f012 0202 	ands.w	r2, r2, #2
 800811a:	d120      	bne.n	800815e <HAL_SD_ReadBlocks+0x20e>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800811c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800811e:	f013 0320 	ands.w	r3, r3, #32
 8008122:	d02a      	beq.n	800817a <HAL_SD_ReadBlocks+0x22a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008124:	4b18      	ldr	r3, [pc, #96]	; (8008188 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
 8008126:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008128:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800812a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800812e:	f043 0320 	orr.w	r3, r3, #32
 8008132:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008136:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800813a:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
      return HAL_ERROR;
 800813e:	e7a1      	b.n	8008084 <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008140:	4b11      	ldr	r3, [pc, #68]	; (8008188 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
 8008142:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008144:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008146:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
 800814a:	f043 0308 	orr.w	r3, r3, #8
 800814e:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008152:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8008154:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008158:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
      return HAL_ERROR;
 800815c:	e792      	b.n	8008084 <HAL_SD_ReadBlocks+0x134>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800815e:	4a0a      	ldr	r2, [pc, #40]	; (8008188 <HAL_SD_ReadBlocks+0x238>)
      hsd->State = HAL_SD_STATE_READY;
 8008160:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008162:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008164:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8008168:	f042 0202 	orr.w	r2, r2, #2
 800816c:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008170:	f888 1030 	strb.w	r1, [r8, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008174:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
      return HAL_ERROR;
 8008178:	e784      	b.n	8008084 <HAL_SD_ReadBlocks+0x134>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800817a:	4904      	ldr	r1, [pc, #16]	; (800818c <HAL_SD_ReadBlocks+0x23c>)
    hsd->State = HAL_SD_STATE_READY;
 800817c:	2201      	movs	r2, #1
    return HAL_OK;
 800817e:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008180:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008182:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
    return HAL_OK;
 8008186:	e77d      	b.n	8008084 <HAL_SD_ReadBlocks+0x134>
 8008188:	1fe00fff 	.word	0x1fe00fff
 800818c:	18000f3a 	.word	0x18000f3a

08008190 <HAL_SD_WriteBlocks>:
{
 8008190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	460d      	mov	r5, r1
 8008196:	b089      	sub	sp, #36	; 0x24
 8008198:	4604      	mov	r4, r0
 800819a:	4692      	mov	sl, r2
 800819c:	461f      	mov	r7, r3
 800819e:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80081a2:	f7fb fa13 	bl	80035cc <HAL_GetTick>
  if (NULL == pData)
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	d079      	beq.n	800829e <HAL_SD_WriteBlocks+0x10e>
  if (hsd->State == HAL_SD_STATE_READY)
 80081aa:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	fa5f f983 	uxtb.w	r9, r3
 80081b4:	d164      	bne.n	8008280 <HAL_SD_WriteBlocks+0xf0>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081b6:	eb0a 0307 	add.w	r3, sl, r7
 80081ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081bc:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081be:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081c0:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081c2:	d876      	bhi.n	80082b2 <HAL_SD_WriteBlocks+0x122>
    hsd->State = HAL_SD_STATE_BUSY;
 80081c4:	2303      	movs	r3, #3
 80081c6:	4606      	mov	r6, r0
    hsd->Instance->DCTRL = 0U;
 80081c8:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80081ca:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->Instance->DCTRL = 0U;
 80081d0:	62c1      	str	r1, [r0, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081d2:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081d4:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80081d6:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80081da:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80081de:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 80081e4:	bf18      	it	ne
 80081e6:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80081ea:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80081ec:	027b      	lsls	r3, r7, #9
 80081ee:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80081f0:	2390      	movs	r3, #144	; 0x90
 80081f2:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80081f4:	f001 f90a 	bl	800940c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80081f8:	6820      	ldr	r0, [r4, #0]
    if (NumberOfBlocks > 1U)
 80081fa:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80081fc:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80081fe:	68c3      	ldr	r3, [r0, #12]
 8008200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008204:	60c3      	str	r3, [r0, #12]
    if (NumberOfBlocks > 1U)
 8008206:	d945      	bls.n	8008294 <HAL_SD_WriteBlocks+0x104>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008208:	2320      	movs	r3, #32
 800820a:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800820c:	f001 fbac 	bl	8009968 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008210:	2800      	cmp	r0, #0
 8008212:	d156      	bne.n	80082c2 <HAL_SD_WriteBlocks+0x132>
    dataremaining = config.DataLength;
 8008214:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008218:	e004      	b.n	8008224 <HAL_SD_WriteBlocks+0x94>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800821a:	f7fb f9d7 	bl	80035cc <HAL_GetTick>
 800821e:	1b80      	subs	r0, r0, r6
 8008220:	4540      	cmp	r0, r8
 8008222:	d21d      	bcs.n	8008260 <HAL_SD_WriteBlocks+0xd0>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008224:	6820      	ldr	r0, [r4, #0]
 8008226:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008228:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800822c:	d155      	bne.n	80082da <HAL_SD_WriteBlocks+0x14a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800822e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008230:	045a      	lsls	r2, r3, #17
 8008232:	d5f2      	bpl.n	800821a <HAL_SD_WriteBlocks+0x8a>
 8008234:	f1bb 0f1f 	cmp.w	fp, #31
 8008238:	d9ef      	bls.n	800821a <HAL_SD_WriteBlocks+0x8a>
 800823a:	f105 0a20 	add.w	sl, r5, #32
 800823e:	e000      	b.n	8008242 <HAL_SD_WriteBlocks+0xb2>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008240:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008242:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008246:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008248:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800824a:	f001 f8c9 	bl	80093e0 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800824e:	4555      	cmp	r5, sl
 8008250:	d1f6      	bne.n	8008240 <HAL_SD_WriteBlocks+0xb0>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008252:	f7fb f9bb 	bl	80035cc <HAL_GetTick>
 8008256:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
 8008258:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800825c:	4540      	cmp	r0, r8
 800825e:	d3e1      	bcc.n	8008224 <HAL_SD_WriteBlocks+0x94>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008260:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
 8008262:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008266:	4840      	ldr	r0, [pc, #256]	; (8008368 <HAL_SD_WriteBlocks+0x1d8>)
        hsd->State = HAL_SD_STATE_READY;
 8008268:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 800826a:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800826c:	6388      	str	r0, [r1, #56]	; 0x38
}
 800826e:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
 8008270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008272:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8008274:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8008278:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800827a:	b009      	add	sp, #36	; 0x24
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008280:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8008282:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800828a:	6363      	str	r3, [r4, #52]	; 0x34
}
 800828c:	4648      	mov	r0, r9
 800828e:	b009      	add	sp, #36	; 0x24
 8008290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008294:	2310      	movs	r3, #16
 8008296:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008298:	f001 fac0 	bl	800981c <SDMMC_CmdWriteSingleBlock>
 800829c:	e7b8      	b.n	8008210 <HAL_SD_WriteBlocks+0x80>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800829e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80082a0:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 80082a8:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082aa:	6363      	str	r3, [r4, #52]	; 0x34
}
 80082ac:	b009      	add	sp, #36	; 0x24
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 80082b4:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80082ba:	6363      	str	r3, [r4, #52]	; 0x34
}
 80082bc:	b009      	add	sp, #36	; 0x24
 80082be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	4a28      	ldr	r2, [pc, #160]	; (8008368 <HAL_SD_WriteBlocks+0x1d8>)
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80082c8:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 80082ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082cc:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 80082ce:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 80082d0:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 80082d2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80082d6:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80082d8:	e7d8      	b.n	800828c <HAL_SD_WriteBlocks+0xfc>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80082da:	68c3      	ldr	r3, [r0, #12]
 80082dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e0:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80082e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80082e4:	05db      	lsls	r3, r3, #23
 80082e6:	d509      	bpl.n	80082fc <HAL_SD_WriteBlocks+0x16c>
 80082e8:	2f01      	cmp	r7, #1
 80082ea:	d907      	bls.n	80082fc <HAL_SD_WriteBlocks+0x16c>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80082ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082ee:	2b03      	cmp	r3, #3
 80082f0:	d004      	beq.n	80082fc <HAL_SD_WriteBlocks+0x16c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80082f2:	f001 fbdf 	bl	8009ab4 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d1e3      	bne.n	80082c2 <HAL_SD_WriteBlocks+0x132>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80082fa:	6820      	ldr	r0, [r4, #0]
 80082fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80082fe:	f013 0308 	ands.w	r3, r3, #8
 8008302:	d112      	bne.n	800832a <HAL_SD_WriteBlocks+0x19a>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008304:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8008306:	f012 0202 	ands.w	r2, r2, #2
 800830a:	d11a      	bne.n	8008342 <HAL_SD_WriteBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800830c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800830e:	f013 0310 	ands.w	r3, r3, #16
 8008312:	d021      	beq.n	8008358 <HAL_SD_WriteBlocks+0x1c8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008314:	4b14      	ldr	r3, [pc, #80]	; (8008368 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8008316:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008318:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800831a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800831c:	f043 0310 	orr.w	r3, r3, #16
 8008320:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008322:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008326:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8008328:	e7b0      	b.n	800828c <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800832a:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 800832c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800832e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008332:	f043 0308 	orr.w	r3, r3, #8
 8008336:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008338:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800833a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800833e:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8008340:	e7a4      	b.n	800828c <HAL_SD_WriteBlocks+0xfc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008342:	4a09      	ldr	r2, [pc, #36]	; (8008368 <HAL_SD_WriteBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8008344:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008346:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008348:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800834a:	f042 0202 	orr.w	r2, r2, #2
 800834e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008350:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008354:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8008356:	e799      	b.n	800828c <HAL_SD_WriteBlocks+0xfc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008358:	4904      	ldr	r1, [pc, #16]	; (800836c <HAL_SD_WriteBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
 800835a:	2201      	movs	r2, #1
    return HAL_OK;
 800835c:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800835e:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008360:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 8008364:	e792      	b.n	800828c <HAL_SD_WriteBlocks+0xfc>
 8008366:	bf00      	nop
 8008368:	1fe00fff 	.word	0x1fe00fff
 800836c:	18000f3a 	.word	0x18000f3a

08008370 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008370:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
{
 8008372:	4603      	mov	r3, r0
 8008374:	b410      	push	{r4}
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008376:	f3c2 6083 	ubfx	r0, r2, #26, #4
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800837a:	0f94      	lsrs	r4, r2, #30
 800837c:	700c      	strb	r4, [r1, #0]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800837e:	f3c2 6401 	ubfx	r4, r2, #24, #2
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008382:	7048      	strb	r0, [r1, #1]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008384:	f3c2 4007 	ubfx	r0, r2, #16, #8
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008388:	708c      	strb	r4, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800838a:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800838c:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008390:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008392:	7108      	strb	r0, [r1, #4]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008394:	2000      	movs	r0, #0
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008396:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008398:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800839a:	0d14      	lsrs	r4, r2, #20
 800839c:	80cc      	strh	r4, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800839e:	f3c2 4403 	ubfx	r4, r2, #16, #4
 80083a2:	720c      	strb	r4, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80083a4:	f3c2 34c0 	ubfx	r4, r2, #15, #1
 80083a8:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80083aa:	f3c2 3480 	ubfx	r4, r2, #14, #1
 80083ae:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80083b0:	f3c2 3440 	ubfx	r4, r2, #13, #1
 80083b4:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80083b6:	f3c2 3400 	ubfx	r4, r2, #12, #1
 80083ba:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80083bc:	7348      	strb	r0, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 80083be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d170      	bne.n	80084a6 <HAL_SD_GetCardCSD+0x136>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80083c4:	f640 74fc 	movw	r4, #4092	; 0xffc
 80083c8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80083ca:	ea04 0282 	and.w	r2, r4, r2, lsl #2
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80083ce:	f3c0 64c2 	ubfx	r4, r0, #27, #3
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80083d2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80083d6:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80083d8:	f3c0 5242 	ubfx	r2, r0, #21, #3
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80083dc:	750c      	strb	r4, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80083de:	f3c0 6402 	ubfx	r4, r0, #24, #3
 80083e2:	754c      	strb	r4, [r1, #21]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80083e4:	f3c0 4482 	ubfx	r4, r0, #18, #3
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80083e8:	758a      	strb	r2, [r1, #22]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80083ea:	f3c0 32c2 	ubfx	r2, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80083ee:	75cc      	strb	r4, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80083f0:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80083f2:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80083f4:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80083f6:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80083f8:	f004 0407 	and.w	r4, r4, #7
 80083fc:	3402      	adds	r4, #2
 80083fe:	fa02 f404 	lsl.w	r4, r2, r4
 8008402:	649c      	str	r4, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008404:	7a0a      	ldrb	r2, [r1, #8]
 8008406:	f002 0c0f 	and.w	ip, r2, #15
 800840a:	2201      	movs	r2, #1
 800840c:	fa02 f20c 	lsl.w	r2, r2, ip
 8008410:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008412:	0a52      	lsrs	r2, r2, #9
 8008414:	fb04 f202 	mul.w	r2, r4, r2
    hsd->SdCard.LogBlockSize = 512U;
 8008418:	f44f 7400 	mov.w	r4, #512	; 0x200
 800841c:	e9c3 2414 	strd	r2, r4, [r3, #80]	; 0x50
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008420:	f3c0 14c6 	ubfx	r4, r0, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008424:	f000 027f 	and.w	r2, r0, #127	; 0x7f
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008428:	f3c0 3c80 	ubfx	ip, r0, #14, #1
  pCSD->Reserved3 = 0;
 800842c:	2000      	movs	r0, #0
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800842e:	f881 c019 	strb.w	ip, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008432:	768c      	strb	r4, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008434:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008438:	0fdc      	lsrs	r4, r3, #31
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800843a:	f3c3 7241 	ubfx	r2, r3, #29, #2
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800843e:	770c      	strb	r4, [r1, #28]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008440:	f3c3 6482 	ubfx	r4, r3, #26, #3
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008444:	774a      	strb	r2, [r1, #29]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008446:	f3c3 5283 	ubfx	r2, r3, #22, #4
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800844a:	778c      	strb	r4, [r1, #30]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800844c:	f3c3 5440 	ubfx	r4, r3, #21, #1
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008450:	77ca      	strb	r2, [r1, #31]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008452:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008456:	f881 4020 	strb.w	r4, [r1, #32]
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800845a:	f3c3 34c0 	ubfx	r4, r3, #15, #1
  pCSD->Reserved3 = 0;
 800845e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008462:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008466:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800846a:	f881 4023 	strb.w	r4, [r1, #35]	; 0x23
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800846e:	f3c3 3440 	ubfx	r4, r3, #13, #1
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008472:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008476:	f3c3 3200 	ubfx	r2, r3, #12, #1
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800847a:	f881 4025 	strb.w	r4, [r1, #37]	; 0x25
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800847e:	f3c3 2481 	ubfx	r4, r3, #10, #2
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008482:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008486:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800848a:	f881 4027 	strb.w	r4, [r1, #39]	; 0x27
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800848e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008492:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->Reserved4 = 1;
 8008496:	2201      	movs	r2, #1
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008498:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800849c:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
}
 80084a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a4:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80084a6:	2801      	cmp	r0, #1
 80084a8:	d110      	bne.n	80084cc <HAL_SD_GetCardCSD+0x15c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80084aa:	0412      	lsls	r2, r2, #16
 80084ac:	6e58      	ldr	r0, [r3, #100]	; 0x64
    hsd->SdCard.BlockSize = 512U;
 80084ae:	f44f 7400 	mov.w	r4, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80084b2:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80084b6:	ea42 4210 	orr.w	r2, r2, r0, lsr #16
 80084ba:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80084bc:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80084be:	64dc      	str	r4, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80084c0:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80084c2:	655c      	str	r4, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80084c4:	0292      	lsls	r2, r2, #10
 80084c6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80084c8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80084ca:	e7a9      	b.n	8008420 <HAL_SD_GetCardCSD+0xb0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084cc:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 80084ce:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d0:	4805      	ldr	r0, [pc, #20]	; (80084e8 <HAL_SD_GetCardCSD+0x178>)
 80084d2:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 80084d4:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80084dc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80084de:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 80084e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	1fe00fff 	.word	0x1fe00fff

080084ec <HAL_SD_InitCard>:
{
 80084ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80084ee:	2200      	movs	r2, #0
{
 80084f0:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80084f2:	2300      	movs	r3, #0
{
 80084f4:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80084f6:	2100      	movs	r1, #0
 80084f8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80084fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008500:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008504:	f7fe fd84 	bl	8007010 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8008508:	b940      	cbnz	r0, 800851c <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 800850a:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800850c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 8008510:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008514:	6363      	str	r3, [r4, #52]	; 0x34
}
 8008516:	4630      	mov	r0, r6
 8008518:	b015      	add	sp, #84	; 0x54
 800851a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800851c:	0a06      	lsrs	r6, r0, #8
 800851e:	4b8f      	ldr	r3, [pc, #572]	; (800875c <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
 8008520:	aa07      	add	r2, sp, #28
 8008522:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008524:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 8008528:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800852a:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800852c:	9608      	str	r6, [sp, #32]
 800852e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008532:	e88d 0003 	stmia.w	sp, {r0, r1}
 8008536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008538:	6820      	ldr	r0, [r4, #0]
 800853a:	f000 ff31 	bl	80093a0 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800853e:	6820      	ldr	r0, [r4, #0]
 8008540:	f000 ff54 	bl	80093ec <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8008544:	4b86      	ldr	r3, [pc, #536]	; (8008760 <HAL_SD_InitCard+0x274>)
 8008546:	429d      	cmp	r5, r3
 8008548:	d902      	bls.n	8008550 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800854a:	0076      	lsls	r6, r6, #1
 800854c:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008550:	4884      	ldr	r0, [pc, #528]	; (8008764 <HAL_SD_InitCard+0x278>)
 8008552:	fbb0 f0f5 	udiv	r0, r0, r5
 8008556:	3001      	adds	r0, #1
 8008558:	f7fb f83e 	bl	80035d8 <HAL_Delay>
  __IO uint32_t count = 0U;
 800855c:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800855e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8008560:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008562:	f001 fc57 	bl	8009e14 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008566:	4605      	mov	r5, r0
 8008568:	b140      	cbz	r0, 800857c <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800856a:	2601      	movs	r6, #1
 800856c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 8008570:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 8008572:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008574:	431d      	orrs	r5, r3
 8008576:	6365      	str	r5, [r4, #52]	; 0x34
}
 8008578:	b015      	add	sp, #84	; 0x54
 800857a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800857c:	6820      	ldr	r0, [r4, #0]
 800857e:	f001 fc75 	bl	8009e6c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008582:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8008586:	d06c      	beq.n	8008662 <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008588:	2301      	movs	r3, #1
 800858a:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800858c:	2100      	movs	r1, #0
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	f001 fcac 	bl	8009eec <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008594:	bb08      	cbnz	r0, 80085da <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008596:	9b03      	ldr	r3, [sp, #12]
 8008598:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800859c:	42b3      	cmp	r3, r6
 800859e:	f200 80d6 	bhi.w	800874e <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80085a2:	4f71      	ldr	r7, [pc, #452]	; (8008768 <HAL_SD_InitCard+0x27c>)
 80085a4:	e00b      	b.n	80085be <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085a6:	6820      	ldr	r0, [r4, #0]
 80085a8:	f000 ff2c 	bl	8009404 <SDMMC_GetResponse>
    count++;
 80085ac:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80085ae:	2800      	cmp	r0, #0
    count++;
 80085b0:	f103 0301 	add.w	r3, r3, #1
 80085b4:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	db12      	blt.n	80085e0 <HAL_SD_InitCard+0xf4>
 80085ba:	42b3      	cmp	r3, r6
 80085bc:	d810      	bhi.n	80085e0 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80085be:	2100      	movs	r1, #0
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	f001 fc93 	bl	8009eec <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80085c6:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 80085c8:	4605      	mov	r5, r0
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d1cd      	bne.n	800856a <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80085ce:	6820      	ldr	r0, [r4, #0]
 80085d0:	f001 fd32 	bl	800a038 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80085d4:	4601      	mov	r1, r0
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d0e5      	beq.n	80085a6 <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085da:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80085de:	e7c4      	b.n	800856a <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80085e0:	9a03      	ldr	r2, [sp, #12]
 80085e2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80085e6:	429a      	cmp	r2, r3
 80085e8:	f200 80ab 	bhi.w	8008742 <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80085ec:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 80085f0:	d043      	beq.n	800867a <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80085f2:	2301      	movs	r3, #1
 80085f4:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 80085fc:	f7fa ffe6 	bl	80035cc <HAL_GetTick>
 8008600:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	f000 fefa 	bl	80093fc <SDMMC_GetPowerState>
 8008608:	2800      	cmp	r0, #0
 800860a:	d038      	beq.n	800867e <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800860c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800860e:	2b03      	cmp	r3, #3
 8008610:	d140      	bne.n	8008694 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008612:	2104      	movs	r1, #4
 8008614:	6820      	ldr	r0, [r4, #0]
 8008616:	f000 fef5 	bl	8009404 <SDMMC_GetResponse>
 800861a:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800861c:	a909      	add	r1, sp, #36	; 0x24
 800861e:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008620:	0d1b      	lsrs	r3, r3, #20
 8008622:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008624:	f7ff fea4 	bl	8008370 <HAL_SD_GetCardCSD>
 8008628:	4606      	mov	r6, r0
 800862a:	2800      	cmp	r0, #0
 800862c:	f040 808c 	bne.w	8008748 <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008630:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008632:	6820      	ldr	r0, [r4, #0]
 8008634:	0409      	lsls	r1, r1, #16
 8008636:	f001 fb47 	bl	8009cc8 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800863a:	bb10      	cbnz	r0, 8008682 <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800863c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008640:	6820      	ldr	r0, [r4, #0]
 8008642:	f000 fef9 	bl	8009438 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008646:	2800      	cmp	r0, #0
 8008648:	f43f af65 	beq.w	8008516 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800864c:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800864e:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008650:	4946      	ldr	r1, [pc, #280]	; (800876c <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
 8008652:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008654:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008656:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008658:	4310      	orrs	r0, r2
 800865a:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800865c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 8008660:	e759      	b.n	8008516 <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008662:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008664:	6820      	ldr	r0, [r4, #0]
 8008666:	f001 fbd5 	bl	8009e14 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800866a:	4605      	mov	r5, r0
 800866c:	2800      	cmp	r0, #0
 800866e:	f47f af7c 	bne.w	800856a <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008672:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008674:	2b01      	cmp	r3, #1
 8008676:	d18e      	bne.n	8008596 <HAL_SD_InitCard+0xaa>
 8008678:	e788      	b.n	800858c <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
 800867a:	63a0      	str	r0, [r4, #56]	; 0x38
 800867c:	e7bb      	b.n	80085f6 <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800867e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8008682:	2601      	movs	r6, #1
 8008684:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008688:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800868a:	4318      	orrs	r0, r3
 800868c:	6360      	str	r0, [r4, #52]	; 0x34
}
 800868e:	4630      	mov	r0, r6
 8008690:	b015      	add	sp, #84	; 0x54
 8008692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	f001 fe57 	bl	800a348 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800869a:	2800      	cmp	r0, #0
 800869c:	d1f1      	bne.n	8008682 <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800869e:	4601      	mov	r1, r0
 80086a0:	6820      	ldr	r0, [r4, #0]
 80086a2:	f000 feaf 	bl	8009404 <SDMMC_GetResponse>
 80086a6:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086a8:	2104      	movs	r1, #4
 80086aa:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086ac:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086ae:	f000 fea9 	bl	8009404 <SDMMC_GetResponse>
 80086b2:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086b4:	2108      	movs	r1, #8
 80086b6:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086b8:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086ba:	f000 fea3 	bl	8009404 <SDMMC_GetResponse>
 80086be:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086c0:	210c      	movs	r1, #12
 80086c2:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086c4:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086c6:	f000 fe9d 	bl	8009404 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80086ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086cc:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d09f      	beq.n	8008612 <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80086d2:	f241 3687 	movw	r6, #4999	; 0x1387
 80086d6:	e009      	b.n	80086ec <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80086d8:	6820      	ldr	r0, [r4, #0]
 80086da:	f001 feb3 	bl	800a444 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 80086de:	2800      	cmp	r0, #0
 80086e0:	d1cf      	bne.n	8008682 <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80086e2:	f7fa ff73 	bl	80035cc <HAL_GetTick>
 80086e6:	1b43      	subs	r3, r0, r5
 80086e8:	42b3      	cmp	r3, r6
 80086ea:	d827      	bhi.n	800873c <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
 80086ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80086f0:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0ef      	beq.n	80086d8 <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80086f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086fa:	2a03      	cmp	r2, #3
 80086fc:	d089      	beq.n	8008612 <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086fe:	0419      	lsls	r1, r3, #16
 8008700:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8008702:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008704:	f001 fe5e 	bl	800a3c4 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008708:	2800      	cmp	r0, #0
 800870a:	d1ba      	bne.n	8008682 <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800870c:	4601      	mov	r1, r0
 800870e:	6820      	ldr	r0, [r4, #0]
 8008710:	f000 fe78 	bl	8009404 <SDMMC_GetResponse>
 8008714:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008716:	2104      	movs	r1, #4
 8008718:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800871a:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800871c:	f000 fe72 	bl	8009404 <SDMMC_GetResponse>
 8008720:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008722:	2108      	movs	r1, #8
 8008724:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008726:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008728:	f000 fe6c 	bl	8009404 <SDMMC_GetResponse>
 800872c:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800872e:	210c      	movs	r1, #12
 8008730:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008732:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008734:	f000 fe66 	bl	8009404 <SDMMC_GetResponse>
 8008738:	66a0      	str	r0, [r4, #104]	; 0x68
 800873a:	e76a      	b.n	8008612 <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
 800873c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 8008740:	e79f      	b.n	8008682 <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008742:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8008746:	e710      	b.n	800856a <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008748:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800874c:	e799      	b.n	8008682 <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800874e:	9b03      	ldr	r3, [sp, #12]
 8008750:	42b3      	cmp	r3, r6
 8008752:	d8f6      	bhi.n	8008742 <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
 8008754:	2300      	movs	r3, #0
 8008756:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8008758:	e74d      	b.n	80085f6 <HAL_SD_InitCard+0x10a>
 800875a:	bf00      	nop
 800875c:	014f8b59 	.word	0x014f8b59
 8008760:	000c34ff 	.word	0x000c34ff
 8008764:	00012110 	.word	0x00012110
 8008768:	c1100000 	.word	0xc1100000
 800876c:	1fe00fff 	.word	0x1fe00fff

08008770 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008770:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
 8008772:	b4f0      	push	{r4, r5, r6, r7}
 8008774:	e9d0 c70f 	ldrd	ip, r7, [r0, #60]	; 0x3c
 8008778:	e9d0 6511 	ldrd	r6, r5, [r0, #68]	; 0x44
 800877c:	e9d0 4213 	ldrd	r4, r2, [r0, #76]	; 0x4c
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008780:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008782:	61cb      	str	r3, [r1, #28]
 8008784:	6008      	str	r0, [r1, #0]
}
 8008786:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008788:	e9c1 c701 	strd	ip, r7, [r1, #4]
 800878c:	e9c1 6503 	strd	r6, r5, [r1, #12]
 8008790:	e9c1 4205 	strd	r4, r2, [r1, #20]
}
 8008794:	bcf0      	pop	{r4, r5, r6, r7}
 8008796:	4770      	bx	lr

08008798 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8008798:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800879a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800879c:	4293      	cmp	r3, r2
{
 800879e:	b530      	push	{r4, r5, lr}
 80087a0:	4604      	mov	r4, r0
 80087a2:	b089      	sub	sp, #36	; 0x24
 80087a4:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80087a6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 80087aa:	d034      	beq.n	8008816 <HAL_SD_ConfigWideBusOperation+0x7e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80087ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80087b0:	d031      	beq.n	8008816 <HAL_SD_ConfigWideBusOperation+0x7e>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80087b2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80087b6:	f000 8086 	beq.w	80088c6 <HAL_SD_ConfigWideBusOperation+0x12e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80087ba:	2900      	cmp	r1, #0
 80087bc:	d064      	beq.n	8008888 <HAL_SD_ConfigWideBusOperation+0xf0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80087c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80087c4:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80087c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087c8:	bb63      	cbnz	r3, 8008824 <HAL_SD_ConfigWideBusOperation+0x8c>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80087ca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80087ce:	2100      	movs	r1, #0
 80087d0:	f7fe fc1e 	bl	8007010 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d03b      	beq.n	8008850 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80087d8:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80087da:	4b56      	ldr	r3, [pc, #344]	; (8008934 <HAL_SD_ConfigWideBusOperation+0x19c>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80087dc:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 80087de:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80087e0:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80087e2:	fba3 5300 	umull	r5, r3, r3, r0
 80087e6:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80087e8:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80087ea:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80087ee:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80087f0:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80087f4:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80087f6:	d239      	bcs.n	800886c <HAL_SD_ConfigWideBusOperation+0xd4>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80087f8:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80087fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80087fe:	d035      	beq.n	800886c <HAL_SD_ConfigWideBusOperation+0xd4>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008800:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008804:	f000 8081 	beq.w	800890a <HAL_SD_ConfigWideBusOperation+0x172>
        if (hsd->Init.ClockDiv == 0U)
 8008808:	bb4a      	cbnz	r2, 800885e <HAL_SD_ConfigWideBusOperation+0xc6>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800880a:	4b4b      	ldr	r3, [pc, #300]	; (8008938 <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800880c:	4298      	cmp	r0, r3
 800880e:	f240 8086 	bls.w	800891e <HAL_SD_ConfigWideBusOperation+0x186>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008812:	9506      	str	r5, [sp, #24]
 8008814:	e02b      	b.n	800886e <HAL_SD_ConfigWideBusOperation+0xd6>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800881c:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800881e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0d2      	beq.n	80087ca <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008824:	6820      	ldr	r0, [r4, #0]
    status = HAL_ERROR;
 8008826:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008828:	4b44      	ldr	r3, [pc, #272]	; (800893c <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800882a:	6383      	str	r3, [r0, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800882c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008830:	f000 fe02 	bl	8009438 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008834:	b130      	cbz	r0, 8008844 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008836:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8008838:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800883a:	4a40      	ldr	r2, [pc, #256]	; (800893c <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800883c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800883e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008840:	4318      	orrs	r0, r3
 8008842:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 8008844:	2301      	movs	r3, #1
}
 8008846:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8008848:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800884c:	b009      	add	sp, #36	; 0x24
 800884e:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008850:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 8008852:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008854:	6820      	ldr	r0, [r4, #0]
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800885a:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800885c:	e7e6      	b.n	800882c <HAL_SD_ConfigWideBusOperation+0x94>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800885e:	0053      	lsls	r3, r2, #1
 8008860:	fbb0 f0f3 	udiv	r0, r0, r3
 8008864:	4b34      	ldr	r3, [pc, #208]	; (8008938 <HAL_SD_ConfigWideBusOperation+0x1a0>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008866:	4298      	cmp	r0, r3
 8008868:	bf88      	it	hi
 800886a:	462a      	movhi	r2, r5
 800886c:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800886e:	aa05      	add	r2, sp, #20
 8008870:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 8008872:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 8008874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008878:	e88d 0003 	stmia.w	sp, {r0, r1}
 800887c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800887e:	6820      	ldr	r0, [r4, #0]
 8008880:	f000 fd8e 	bl	80093a0 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	e7d1      	b.n	800882c <HAL_SD_ConfigWideBusOperation+0x94>
  uint32_t scr[2U] = {0UL, 0UL};
 8008888:	2200      	movs	r2, #0
 800888a:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800888c:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800888e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008892:	f000 fdb7 	bl	8009404 <SDMMC_GetResponse>
 8008896:	0182      	lsls	r2, r0, #6
 8008898:	d434      	bmi.n	8008904 <HAL_SD_ConfigWideBusOperation+0x16c>
  errorstate = SD_FindSCR(hsd, scr);
 800889a:	a902      	add	r1, sp, #8
 800889c:	4620      	mov	r0, r4
 800889e:	f7ff fa15 	bl	8007ccc <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80088a2:	b960      	cbnz	r0, 80088be <HAL_SD_ConfigWideBusOperation+0x126>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088a4:	9b03      	ldr	r3, [sp, #12]
 80088a6:	03db      	lsls	r3, r3, #15
 80088a8:	d536      	bpl.n	8008918 <HAL_SD_ConfigWideBusOperation+0x180>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80088ac:	6820      	ldr	r0, [r4, #0]
 80088ae:	0409      	lsls	r1, r1, #16
 80088b0:	f001 fb1c 	bl	8009eec <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80088b4:	b918      	cbnz	r0, 80088be <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80088b6:	4601      	mov	r1, r0
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	f001 fbf7 	bl	800a0ac <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80088be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088c0:	4318      	orrs	r0, r3
 80088c2:	6360      	str	r0, [r4, #52]	; 0x34
 80088c4:	e7ab      	b.n	800881e <HAL_SD_ConfigWideBusOperation+0x86>
  uint32_t scr[2U] = {0UL, 0UL};
 80088c6:	2200      	movs	r2, #0
 80088c8:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088ca:	2100      	movs	r1, #0
 80088cc:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 80088ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088d2:	f000 fd97 	bl	8009404 <SDMMC_GetResponse>
 80088d6:	0180      	lsls	r0, r0, #6
 80088d8:	d414      	bmi.n	8008904 <HAL_SD_ConfigWideBusOperation+0x16c>
  errorstate = SD_FindSCR(hsd, scr);
 80088da:	a902      	add	r1, sp, #8
 80088dc:	4620      	mov	r0, r4
 80088de:	f7ff f9f5 	bl	8007ccc <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d1eb      	bne.n	80088be <HAL_SD_ConfigWideBusOperation+0x126>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	0359      	lsls	r1, r3, #13
 80088ea:	d515      	bpl.n	8008918 <HAL_SD_ConfigWideBusOperation+0x180>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80088ee:	6820      	ldr	r0, [r4, #0]
 80088f0:	0409      	lsls	r1, r1, #16
 80088f2:	f001 fafb 	bl	8009eec <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d1e1      	bne.n	80088be <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80088fa:	2102      	movs	r1, #2
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	f001 fbd5 	bl	800a0ac <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8008902:	e7dc      	b.n	80088be <HAL_SD_ConfigWideBusOperation+0x126>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008904:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008908:	e7d9      	b.n	80088be <HAL_SD_ConfigWideBusOperation+0x126>
        if (hsd->Init.ClockDiv == 0U)
 800890a:	b95a      	cbnz	r2, 8008924 <HAL_SD_ConfigWideBusOperation+0x18c>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800890c:	4a0c      	ldr	r2, [pc, #48]	; (8008940 <HAL_SD_ConfigWideBusOperation+0x1a8>)
 800890e:	4290      	cmp	r0, r2
 8008910:	d905      	bls.n	800891e <HAL_SD_ConfigWideBusOperation+0x186>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008912:	0e5b      	lsrs	r3, r3, #25
 8008914:	9306      	str	r3, [sp, #24]
 8008916:	e7aa      	b.n	800886e <HAL_SD_ConfigWideBusOperation+0xd6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008918:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800891c:	e7cf      	b.n	80088be <HAL_SD_ConfigWideBusOperation+0x126>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800891e:	2300      	movs	r3, #0
 8008920:	9306      	str	r3, [sp, #24]
 8008922:	e7a4      	b.n	800886e <HAL_SD_ConfigWideBusOperation+0xd6>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008924:	0051      	lsls	r1, r2, #1
 8008926:	fbb0 f0f1 	udiv	r0, r0, r1
 800892a:	4905      	ldr	r1, [pc, #20]	; (8008940 <HAL_SD_ConfigWideBusOperation+0x1a8>)
 800892c:	4288      	cmp	r0, r1
 800892e:	d99d      	bls.n	800886c <HAL_SD_ConfigWideBusOperation+0xd4>
 8008930:	e7ef      	b.n	8008912 <HAL_SD_ConfigWideBusOperation+0x17a>
 8008932:	bf00      	nop
 8008934:	55e63b89 	.word	0x55e63b89
 8008938:	017d7840 	.word	0x017d7840
 800893c:	1fe00fff 	.word	0x1fe00fff
 8008940:	02faf080 	.word	0x02faf080

08008944 <HAL_SD_Init>:
{
 8008944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008946:	b087      	sub	sp, #28
  if (hsd == NULL)
 8008948:	2800      	cmp	r0, #0
 800894a:	d044      	beq.n	80089d6 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
 800894c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008950:	4604      	mov	r4, r0
 8008952:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008956:	2b00      	cmp	r3, #0
 8008958:	d041      	beq.n	80089de <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800895a:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800895c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800895e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008962:	f7ff fdc3 	bl	80084ec <HAL_SD_InitCard>
 8008966:	2800      	cmp	r0, #0
 8008968:	d135      	bne.n	80089d6 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800896a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800896e:	2b03      	cmp	r3, #3
 8008970:	d031      	beq.n	80089d6 <HAL_SD_Init+0x92>
 8008972:	a901      	add	r1, sp, #4
 8008974:	4620      	mov	r0, r4
 8008976:	f7ff fa1b 	bl	8007db0 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800897a:	bb60      	cbnz	r0, 80089d6 <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800897c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800897e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008982:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008984:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8008988:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800898a:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800898c:	d02b      	beq.n	80089e6 <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800898e:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008990:	68e1      	ldr	r1, [r4, #12]
 8008992:	4620      	mov	r0, r4
 8008994:	f7ff ff00 	bl	8008798 <HAL_SD_ConfigWideBusOperation>
 8008998:	4606      	mov	r6, r0
 800899a:	b9e0      	cbnz	r0, 80089d6 <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
 800899c:	f7fa fe16 	bl	80035cc <HAL_GetTick>
 80089a0:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80089a2:	e00c      	b.n	80089be <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80089a4:	6820      	ldr	r0, [r4, #0]
 80089a6:	4629      	mov	r1, r5
 80089a8:	f000 fd2c 	bl	8009404 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 80089ac:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80089b0:	2804      	cmp	r0, #4
 80089b2:	d020      	beq.n	80089f6 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089b4:	f7fa fe0a 	bl	80035cc <HAL_GetTick>
 80089b8:	1bc3      	subs	r3, r0, r7
 80089ba:	3301      	adds	r3, #1
 80089bc:	d021      	beq.n	8008a02 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80089be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80089c0:	6820      	ldr	r0, [r4, #0]
 80089c2:	0409      	lsls	r1, r1, #16
 80089c4:	f001 fd96 	bl	800a4f4 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 80089c8:	4605      	mov	r5, r0
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d0ea      	beq.n	80089a4 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
 80089ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089d0:	4303      	orrs	r3, r0
 80089d2:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 80089d4:	e7ee      	b.n	80089b4 <HAL_SD_Init+0x70>
    return HAL_ERROR;
 80089d6:	2601      	movs	r6, #1
}
 80089d8:	4630      	mov	r0, r6
 80089da:	b007      	add	sp, #28
 80089dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 80089de:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 80089e0:	f7fa fa74 	bl	8002ecc <HAL_SD_MspInit>
 80089e4:	e7b9      	b.n	800895a <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80089e6:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80089e8:	bf14      	ite	ne
 80089ea:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80089ee:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80089f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80089f4:	e7cc      	b.n	8008990 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 80089f6:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80089f8:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80089fa:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 80089fc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 8008a00:	e7ea      	b.n	80089d8 <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8008a06:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8008a08:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008a0a:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008a0c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 8008a10:	e7e2      	b.n	80089d8 <HAL_SD_Init+0x94>
 8008a12:	bf00      	nop

08008a14 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a14:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 8008a16:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a18:	0409      	lsls	r1, r1, #16
{
 8008a1a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a1c:	6800      	ldr	r0, [r0, #0]
 8008a1e:	f001 fd69 	bl	800a4f4 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a22:	4601      	mov	r1, r0
 8008a24:	b120      	cbz	r0, 8008a30 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8008a26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a28:	2000      	movs	r0, #0
 8008a2a:	4319      	orrs	r1, r3
 8008a2c:	6361      	str	r1, [r4, #52]	; 0x34
}
 8008a2e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a30:	6820      	ldr	r0, [r4, #0]
 8008a32:	f000 fce7 	bl	8009404 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008a36:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8008a3a:	bd10      	pop	{r4, pc}

08008a3c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008a3c:	b318      	cbz	r0, 8008a86 <HAL_SDRAM_Init+0x4a>
{
 8008a3e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a40:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008a44:	4604      	mov	r4, r0
 8008a46:	460d      	mov	r5, r1
 8008a48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008a4c:	b1b3      	cbz	r3, 8008a7c <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a4e:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a50:	2302      	movs	r3, #2
 8008a52:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a56:	f851 0b04 	ldr.w	r0, [r1], #4
 8008a5a:	f000 fbf1 	bl	8009240 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008a5e:	6862      	ldr	r2, [r4, #4]
 8008a60:	4629      	mov	r1, r5
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	f000 fc2a 	bl	80092bc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8008a68:	4a08      	ldr	r2, [pc, #32]	; (8008a8c <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a6a:	2101      	movs	r1, #1

  return HAL_OK;
 8008a6c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8008a6e:	6813      	ldr	r3, [r2, #0]
 8008a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a74:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a76:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8008a7a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8008a7c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8008a80:	f7f9 fa0e 	bl	8001ea0 <HAL_SDRAM_MspInit>
 8008a84:	e7e3      	b.n	8008a4e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8008a86:	2001      	movs	r0, #1
}
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	52004000 	.word	0x52004000

08008a90 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008a90:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008a92:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8008a96:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008a98:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008a9a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8008a9c:	d004      	beq.n	8008aa8 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008a9e:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 8008aa2:	2e01      	cmp	r6, #1
 8008aa4:	d001      	beq.n	8008aaa <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8008aa6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8008aa8:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008aaa:	2302      	movs	r3, #2
 8008aac:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008aae:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ab0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008ab4:	f000 fc4e 	bl	8009354 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d003      	beq.n	8008ac6 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8008abe:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008ac0:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 8008ac4:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008ac6:	2305      	movs	r3, #5
  return HAL_OK;
 8008ac8:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008aca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8008ace:	bd70      	pop	{r4, r5, r6, pc}

08008ad0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008ad0:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ad2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8008ad6:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	b2d8      	uxtb	r0, r3
 8008adc:	d005      	beq.n	8008aea <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008ade:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	b2dd      	uxtb	r5, r3
 8008ae6:	d001      	beq.n	8008aec <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8008ae8:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008aec:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008aee:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008af0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008af4:	f000 fc46 	bl	8009384 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8008af8:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008afa:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8008afe:	bd38      	pop	{r3, r4, r5, pc}

08008b00 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8008b00:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008b02:	492c      	ldr	r1, [pc, #176]	; (8008bb4 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8008b04:	695a      	ldr	r2, [r3, #20]
{
 8008b06:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b08:	699c      	ldr	r4, [r3, #24]
 8008b0a:	f044 0408 	orr.w	r4, r4, #8
 8008b0e:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b10:	699c      	ldr	r4, [r3, #24]
 8008b12:	f044 0410 	orr.w	r4, r4, #16
 8008b16:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8008b18:	681c      	ldr	r4, [r3, #0]
 8008b1a:	f024 0401 	bic.w	r4, r4, #1
 8008b1e:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008b20:	691c      	ldr	r4, [r3, #16]
 8008b22:	4021      	ands	r1, r4
 8008b24:	6119      	str	r1, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b26:	6899      	ldr	r1, [r3, #8]
 8008b28:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8008b2c:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b2e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8008b32:	2904      	cmp	r1, #4
 8008b34:	d001      	beq.n	8008b3a <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008b36:	0691      	lsls	r1, r2, #26
 8008b38:	d430      	bmi.n	8008b9c <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008b3a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 8008b3e:	2903      	cmp	r1, #3
 8008b40:	d001      	beq.n	8008b46 <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008b42:	0654      	lsls	r4, r2, #25
 8008b44:	d41f      	bmi.n	8008b86 <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008b46:	0591      	lsls	r1, r2, #22
 8008b48:	d509      	bpl.n	8008b5e <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b4a:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8008b4e:	f041 0101 	orr.w	r1, r1, #1
 8008b52:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b56:	6999      	ldr	r1, [r3, #24]
 8008b58:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008b5c:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008b5e:	05d2      	lsls	r2, r2, #23
 8008b60:	d509      	bpl.n	8008b76 <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b62:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8008b66:	f042 0208 	orr.w	r2, r2, #8
 8008b6a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b6e:	699a      	ldr	r2, [r3, #24]
 8008b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b74:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008b76:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8008b78:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8008b7c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008b80:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8008b84:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b86:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8008b8a:	f041 0104 	orr.w	r1, r1, #4
 8008b8e:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b92:	6999      	ldr	r1, [r3, #24]
 8008b94:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008b98:	6199      	str	r1, [r3, #24]
 8008b9a:	e7d4      	b.n	8008b46 <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008b9c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8008ba0:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8008ba4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008ba8:	6999      	ldr	r1, [r3, #24]
 8008baa:	f041 0120 	orr.w	r1, r1, #32
 8008bae:	6199      	str	r1, [r3, #24]
 8008bb0:	e7c3      	b.n	8008b3a <SPI_CloseTransfer+0x3a>
 8008bb2:	bf00      	nop
 8008bb4:	fffffc90 	.word	0xfffffc90

08008bb8 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	f000 80c9 	beq.w	8008d50 <HAL_SPI_Init+0x198>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008bbe:	4a66      	ldr	r2, [pc, #408]	; (8008d58 <HAL_SPI_Init+0x1a0>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bc0:	2100      	movs	r1, #0
{
 8008bc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008bc6:	6803      	ldr	r3, [r0, #0]
 8008bc8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bca:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d017      	beq.n	8008c00 <HAL_SPI_Init+0x48>
 8008bd0:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d013      	beq.n	8008c00 <HAL_SPI_Init+0x48>
 8008bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	68c2      	ldr	r2, [r0, #12]
 8008be0:	f000 80ae 	beq.w	8008d40 <HAL_SPI_Init+0x188>
 8008be4:	2a0f      	cmp	r2, #15
 8008be6:	d808      	bhi.n	8008bfa <HAL_SPI_Init+0x42>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008be8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008bea:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008bee:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8008bf0:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 8008bf2:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bf6:	2908      	cmp	r1, #8
 8008bf8:	d916      	bls.n	8008c28 <HAL_SPI_Init+0x70>
    return HAL_ERROR;
 8008bfa:	2001      	movs	r0, #1
}
 8008bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008c00:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008c02:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8008c04:	f102 0108 	add.w	r1, r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c08:	4e53      	ldr	r6, [pc, #332]	; (8008d58 <HAL_SPI_Init+0x1a0>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008c0a:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8008c0c:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8008c0e:	fb05 1101 	mla	r1, r5, r1, r1
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c12:	4d52      	ldr	r5, [pc, #328]	; (8008d5c <HAL_SPI_Init+0x1a4>)
 8008c14:	42ab      	cmp	r3, r5
 8008c16:	bf18      	it	ne
 8008c18:	42b3      	cmpne	r3, r6
 8008c1a:	d003      	beq.n	8008c24 <HAL_SPI_Init+0x6c>
 8008c1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008c20:	42ab      	cmp	r3, r5
 8008c22:	d101      	bne.n	8008c28 <HAL_SPI_Init+0x70>
 8008c24:	2910      	cmp	r1, #16
 8008c26:	d8e8      	bhi.n	8008bfa <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c28:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8008c2c:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8008c30:	2900      	cmp	r1, #0
 8008c32:	d07a      	beq.n	8008d2a <HAL_SPI_Init+0x172>
 8008c34:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8008c38:	2102      	movs	r1, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c3a:	69a7      	ldr	r7, [r4, #24]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c3c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8008c3e:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c42:	f1b7 6f80 	cmp.w	r7, #67108864	; 0x4000000
  __HAL_SPI_DISABLE(hspi);
 8008c46:	6819      	ldr	r1, [r3, #0]
 8008c48:	f021 0101 	bic.w	r1, r1, #1
 8008c4c:	6019      	str	r1, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008c4e:	6899      	ldr	r1, [r3, #8]
 8008c50:	f401 1cf8 	and.w	ip, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c54:	6861      	ldr	r1, [r4, #4]
 8008c56:	d058      	beq.n	8008d0a <HAL_SPI_Init+0x152>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008c58:	f411 0980 	ands.w	r9, r1, #4194304	; 0x400000
 8008c5c:	d001      	beq.n	8008c62 <HAL_SPI_Init+0xaa>
 8008c5e:	2a06      	cmp	r2, #6
 8008c60:	d849      	bhi.n	8008cf6 <HAL_SPI_Init+0x13e>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008c62:	f8d3 e000 	ldr.w	lr, [r3]
 8008c66:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8008c6a:	f8c3 e000 	str.w	lr, [r3]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c6e:	6b66      	ldr	r6, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008c70:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c74:	4337      	orrs	r7, r6
 8008c76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c78:	4337      	orrs	r7, r6
 8008c7a:	6926      	ldr	r6, [r4, #16]
 8008c7c:	4337      	orrs	r7, r6
 8008c7e:	6966      	ldr	r6, [r4, #20]
 8008c80:	4337      	orrs	r7, r6
 8008c82:	6a26      	ldr	r6, [r4, #32]
 8008c84:	4337      	orrs	r7, r6
 8008c86:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8008c88:	4337      	orrs	r7, r6
 8008c8a:	68a6      	ldr	r6, [r4, #8]
 8008c8c:	4337      	orrs	r7, r6
 8008c8e:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8008c90:	4337      	orrs	r7, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008c92:	69e6      	ldr	r6, [r4, #28]
 8008c94:	4332      	orrs	r2, r6
 8008c96:	4310      	orrs	r0, r2
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c98:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008c9a:	433a      	orrs	r2, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008c9c:	ea40 000c 	orr.w	r0, r0, ip
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ca0:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ca2:	6098      	str	r0, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ca4:	4315      	orrs	r5, r2
 8008ca6:	60dd      	str	r5, [r3, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008ca8:	b9b9      	cbnz	r1, 8008cda <HAL_SPI_Init+0x122>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8008cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cb4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8008cbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008cc0:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cc4:	f022 0201 	bic.w	r2, r2, #1
 8008cc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cca:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8008ccc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cce:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008cd2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8008cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cdc:	f022 0201 	bic.w	r2, r2, #1
 8008ce0:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008ce2:	f1b9 0f00 	cmp.w	r9, #0
 8008ce6:	d0f0      	beq.n	8008cca <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008cec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008cf0:	430a      	orrs	r2, r1
 8008cf2:	60da      	str	r2, [r3, #12]
 8008cf4:	e7e9      	b.n	8008cca <HAL_SPI_Init+0x112>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008cf6:	f8d3 e000 	ldr.w	lr, [r3]
 8008cfa:	6d26      	ldr	r6, [r4, #80]	; 0x50
 8008cfc:	f42e 7e80 	bic.w	lr, lr, #256	; 0x100
 8008d00:	ea4e 0e06 	orr.w	lr, lr, r6
 8008d04:	f8c3 e000 	str.w	lr, [r3]
 8008d08:	e7b1      	b.n	8008c6e <HAL_SPI_Init+0xb6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d0a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8008d0e:	d006      	beq.n	8008d1e <HAL_SPI_Init+0x166>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008d10:	2900      	cmp	r1, #0
 8008d12:	d1a1      	bne.n	8008c58 <HAL_SPI_Init+0xa0>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008d14:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
 8008d18:	d002      	beq.n	8008d20 <HAL_SPI_Init+0x168>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008d1a:	4689      	mov	r9, r1
 8008d1c:	e7a1      	b.n	8008c62 <HAL_SPI_Init+0xaa>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008d1e:	b9cd      	cbnz	r5, 8008d54 <HAL_SPI_Init+0x19c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008d20:	681e      	ldr	r6, [r3, #0]
 8008d22:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 8008d26:	601e      	str	r6, [r3, #0]
 8008d28:	e796      	b.n	8008c58 <HAL_SPI_Init+0xa0>
    HAL_SPI_MspInit(hspi);
 8008d2a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8008d2c:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8008d30:	f7fa f9aa 	bl	8003088 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8008d34:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008d36:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008d38:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8008d3c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008d3e:	e77b      	b.n	8008c38 <HAL_SPI_Init+0x80>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d40:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8008d42:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d46:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8008d48:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8008d4a:	fb05 1101 	mla	r1, r5, r1, r1
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d4e:	e769      	b.n	8008c24 <HAL_SPI_Init+0x6c>
    return HAL_ERROR;
 8008d50:	2001      	movs	r0, #1
}
 8008d52:	4770      	bx	lr
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008d54:	4689      	mov	r9, r1
 8008d56:	e782      	b.n	8008c5e <HAL_SPI_Init+0xa6>
 8008d58:	40013000 	.word	0x40013000
 8008d5c:	40003800 	.word	0x40003800

08008d60 <HAL_SPI_Receive_DMA>:
{
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8008d62:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	f000 8096 	beq.w	8008e98 <HAL_SPI_Receive_DMA+0x138>
  if (hspi->State != HAL_SPI_STATE_READY)
 8008d6c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8008d70:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 8008d72:	2201      	movs	r2, #1
 8008d74:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8008d76:	b2de      	uxtb	r6, r3
 8008d78:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 8008d7a:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 8008d7e:	d16a      	bne.n	8008e56 <HAL_SPI_Receive_DMA+0xf6>
  if ((pData == NULL) || (Size == 0UL))
 8008d80:	2900      	cmp	r1, #0
 8008d82:	d063      	beq.n	8008e4c <HAL_SPI_Receive_DMA+0xec>
 8008d84:	fab5 f385 	clz	r3, r5
 8008d88:	095b      	lsrs	r3, r3, #5
 8008d8a:	2d00      	cmp	r5, #0
 8008d8c:	d05e      	beq.n	8008e4c <HAL_SPI_Receive_DMA+0xec>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d8e:	2204      	movs	r2, #4
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008d90:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008d94:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d96:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d9a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferCount = Size;
 8008d9e:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008da2:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferSize  = Size;
 8008da6:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxISR       = NULL;
 8008daa:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dae:	6883      	ldr	r3, [r0, #8]
 8008db0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    SPI_1LINE_RX(hspi);
 8008db4:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008db6:	d06a      	beq.n	8008e8e <HAL_SPI_Receive_DMA+0x12e>
    SPI_2LINES_RX(hspi);
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8008dbe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008dc2:	60da      	str	r2, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008dc4:	68e2      	ldr	r2, [r4, #12]
 8008dc6:	2a0f      	cmp	r2, #15
 8008dc8:	d94b      	bls.n	8008e62 <HAL_SPI_Receive_DMA+0x102>
 8008dca:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008dcc:	6982      	ldr	r2, [r0, #24]
 8008dce:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008dd2:	d13b      	bne.n	8008e4c <HAL_SPI_Receive_DMA+0xec>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008dda:	609a      	str	r2, [r3, #8]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008ddc:	4f41      	ldr	r7, [pc, #260]	; (8008ee4 <HAL_SPI_Receive_DMA+0x184>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008dde:	460a      	mov	r2, r1
 8008de0:	f103 0130 	add.w	r1, r3, #48	; 0x30
                                 hspi->RxXferCount))
 8008de4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008de8:	6407      	str	r7, [r0, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008dea:	4f3f      	ldr	r7, [pc, #252]	; (8008ee8 <HAL_SPI_Receive_DMA+0x188>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008dec:	b29b      	uxth	r3, r3
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008dee:	63c7      	str	r7, [r0, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008df0:	4f3e      	ldr	r7, [pc, #248]	; (8008eec <HAL_SPI_Receive_DMA+0x18c>)
 8008df2:	64c7      	str	r7, [r0, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8008df4:	2700      	movs	r7, #0
 8008df6:	6507      	str	r7, [r0, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008df8:	f7fb f828 	bl	8003e4c <HAL_DMA_Start_IT>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d14e      	bne.n	8008e9e <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008e00:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008e02:	4a3b      	ldr	r2, [pc, #236]	; (8008ef0 <HAL_SPI_Receive_DMA+0x190>)
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	6859      	ldr	r1, [r3, #4]
 8008e0e:	ea02 0201 	and.w	r2, r2, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008e12:	bf18      	it	ne
 8008e14:	432a      	orrne	r2, r5
 8008e16:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008e18:	689a      	ldr	r2, [r3, #8]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e1a:	6861      	ldr	r1, [r4, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008e1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e20:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008e24:	609a      	str	r2, [r3, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8008e26:	691a      	ldr	r2, [r3, #16]
 8008e28:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8008e2c:	611a      	str	r2, [r3, #16]
  __HAL_SPI_ENABLE(hspi);
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	f042 0201 	orr.w	r2, r2, #1
 8008e34:	601a      	str	r2, [r3, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e36:	d103      	bne.n	8008e40 <HAL_SPI_Receive_DMA+0xe0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e3e:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8008e40:	2300      	movs	r3, #0
  return errorcode;
 8008e42:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 8008e44:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8008e48:	4630      	mov	r0, r6
 8008e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8008e52:	4630      	mov	r0, r6
 8008e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 8008e56:	2300      	movs	r3, #0
    return errorcode;
 8008e58:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 8008e5a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8008e5e:	4630      	mov	r0, r6
 8008e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008e62:	2a07      	cmp	r2, #7
 8008e64:	d827      	bhi.n	8008eb6 <HAL_SPI_Receive_DMA+0x156>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008e66:	689a      	ldr	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e68:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008e6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e6e:	609a      	str	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e70:	6982      	ldr	r2, [r0, #24]
 8008e72:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8008e76:	d02d      	beq.n	8008ed4 <HAL_SPI_Receive_DMA+0x174>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008e78:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8008e7c:	d1ae      	bne.n	8008ddc <HAL_SPI_Receive_DMA+0x7c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8008e7e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8008e82:	b292      	uxth	r2, r2
 8008e84:	3203      	adds	r2, #3
 8008e86:	0892      	lsrs	r2, r2, #2
 8008e88:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8008e8c:	e7a6      	b.n	8008ddc <HAL_SPI_Receive_DMA+0x7c>
    SPI_1LINE_RX(hspi);
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	e795      	b.n	8008dc4 <HAL_SPI_Receive_DMA+0x64>
  __HAL_LOCK(hspi);
 8008e98:	2602      	movs	r6, #2
}
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e9e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008ea2:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 8008ea4:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ea8:	f043 0310 	orr.w	r3, r3, #16
 8008eac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008eb0:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8008eb4:	e7cd      	b.n	8008e52 <HAL_SPI_Receive_DMA+0xf2>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008eb6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008eb8:	6987      	ldr	r7, [r0, #24]
 8008eba:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8008ebe:	d002      	beq.n	8008ec6 <HAL_SPI_Receive_DMA+0x166>
 8008ec0:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
 8008ec4:	d1c2      	bne.n	8008e4c <HAL_SPI_Receive_DMA+0xec>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008ec6:	689a      	ldr	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008ec8:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008ecc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ed0:	609a      	str	r2, [r3, #8]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008ed2:	d183      	bne.n	8008ddc <HAL_SPI_Receive_DMA+0x7c>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008ed4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8008ed8:	b292      	uxth	r2, r2
 8008eda:	3201      	adds	r2, #1
 8008edc:	0852      	lsrs	r2, r2, #1
 8008ede:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8008ee2:	e77b      	b.n	8008ddc <HAL_SPI_Receive_DMA+0x7c>
 8008ee4:	08008f25 	.word	0x08008f25
 8008ee8:	08008ef9 	.word	0x08008ef9
 8008eec:	08008f35 	.word	0x08008f35
 8008ef0:	ffff0000 	.word	0xffff0000

08008ef4 <HAL_SPI_TxCpltCallback>:
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop

08008ef8 <SPI_DMAReceiveCplt>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008efa:	b508      	push	{r3, lr}
  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008efc:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8008f00:	2b07      	cmp	r3, #7
 8008f02:	d009      	beq.n	8008f18 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008f04:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f0c:	d005      	beq.n	8008f1a <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008f0e:	6802      	ldr	r2, [r0, #0]
 8008f10:	6913      	ldr	r3, [r2, #16]
 8008f12:	f043 0308 	orr.w	r3, r3, #8
 8008f16:	6113      	str	r3, [r2, #16]
}
 8008f18:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 8008f1a:	f7f8 fdc5 	bl	8001aa8 <HAL_SPI_RxCpltCallback>
}
 8008f1e:	bd08      	pop	{r3, pc}

08008f20 <HAL_SPI_TxRxCpltCallback>:
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop

08008f24 <SPI_DMAHalfReceiveCplt>:
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008f24:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008f26:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008f28:	f7f8 fe34 	bl	8001b94 <HAL_SPI_RxHalfCpltCallback>
}
 8008f2c:	bd08      	pop	{r3, pc}
 8008f2e:	bf00      	nop

08008f30 <HAL_SPI_ErrorCallback>:
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop

08008f34 <SPI_DMAError>:
{
 8008f34:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f36:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008f38:	f7fb fd3a 	bl	80049b0 <HAL_DMA_GetError>
 8008f3c:	2802      	cmp	r0, #2
 8008f3e:	d100      	bne.n	8008f42 <SPI_DMAError+0xe>
}
 8008f40:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 8008f42:	6823      	ldr	r3, [r4, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008f44:	4930      	ldr	r1, [pc, #192]	; (8009008 <SPI_DMAError+0xd4>)
  uint32_t itflag = hspi->Instance->SR;
 8008f46:	695a      	ldr	r2, [r3, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008f48:	6998      	ldr	r0, [r3, #24]
 8008f4a:	f040 0008 	orr.w	r0, r0, #8
 8008f4e:	6198      	str	r0, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008f50:	6998      	ldr	r0, [r3, #24]
 8008f52:	f040 0010 	orr.w	r0, r0, #16
 8008f56:	6198      	str	r0, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	f020 0001 	bic.w	r0, r0, #1
 8008f5e:	6018      	str	r0, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008f60:	6918      	ldr	r0, [r3, #16]
 8008f62:	4001      	ands	r1, r0
 8008f64:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008f66:	6899      	ldr	r1, [r3, #8]
 8008f68:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8008f6c:	6099      	str	r1, [r3, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f6e:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8008f72:	2904      	cmp	r1, #4
 8008f74:	d001      	beq.n	8008f7a <SPI_DMAError+0x46>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008f76:	0691      	lsls	r1, r2, #26
 8008f78:	d43a      	bmi.n	8008ff0 <SPI_DMAError+0xbc>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f7a:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
 8008f7e:	2903      	cmp	r1, #3
 8008f80:	d001      	beq.n	8008f86 <SPI_DMAError+0x52>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008f82:	0650      	lsls	r0, r2, #25
 8008f84:	d429      	bmi.n	8008fda <SPI_DMAError+0xa6>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008f86:	0591      	lsls	r1, r2, #22
 8008f88:	d509      	bpl.n	8008f9e <SPI_DMAError+0x6a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f8a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008f8e:	f041 0101 	orr.w	r1, r1, #1
 8008f92:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f96:	6999      	ldr	r1, [r3, #24]
 8008f98:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8008f9c:	6199      	str	r1, [r3, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008f9e:	05d2      	lsls	r2, r2, #23
 8008fa0:	d509      	bpl.n	8008fb6 <SPI_DMAError+0x82>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008fa2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8008fa6:	f042 0208 	orr.w	r2, r2, #8
 8008faa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008fae:	699a      	ldr	r2, [r3, #24]
 8008fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008fb4:	619a      	str	r2, [r3, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8008fb6:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 8008fb8:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 8008fba:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 8008fbc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008fc0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008fc4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8008fc8:	f043 0310 	orr.w	r3, r3, #16
 8008fcc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008fd0:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 8008fd4:	f7ff ffac 	bl	8008f30 <HAL_SPI_ErrorCallback>
}
 8008fd8:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fda:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008fde:	f041 0104 	orr.w	r1, r1, #4
 8008fe2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fe6:	6999      	ldr	r1, [r3, #24]
 8008fe8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8008fec:	6199      	str	r1, [r3, #24]
 8008fee:	e7ca      	b.n	8008f86 <SPI_DMAError+0x52>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ff0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8008ff4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8008ff8:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008ffc:	6999      	ldr	r1, [r3, #24]
 8008ffe:	f041 0120 	orr.w	r1, r1, #32
 8009002:	6199      	str	r1, [r3, #24]
 8009004:	e7b9      	b.n	8008f7a <SPI_DMAError+0x46>
 8009006:	bf00      	nop
 8009008:	fffffc90 	.word	0xfffffc90

0800900c <SPI_DMAAbortOnError>:
{
 800900c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800900e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 8009010:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8009012:	2201      	movs	r2, #1
  hspi->RxXferCount = (uint16_t) 0UL;
 8009014:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009018:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800901c:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8009020:	f7ff ff86 	bl	8008f30 <HAL_SPI_ErrorCallback>
}
 8009024:	bd08      	pop	{r3, pc}
 8009026:	bf00      	nop

08009028 <HAL_SPI_SuspendCallback>:
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop

0800902c <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->IER;
 800902c:	6803      	ldr	r3, [r0, #0]
 800902e:	6919      	ldr	r1, [r3, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8009030:	695a      	ldr	r2, [r3, #20]
{
 8009032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009036:	689f      	ldr	r7, [r3, #8]
  uint32_t trigger  = itsource & itflag;
 8009038:	ea01 0502 	and.w	r5, r1, r2
  HAL_SPI_StateTypeDef State = hspi->State;
 800903c:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009040:	0512      	lsls	r2, r2, #20
{
 8009042:	4604      	mov	r4, r0
  HAL_SPI_StateTypeDef State = hspi->State;
 8009044:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009046:	d502      	bpl.n	800904e <HAL_SPI_IRQHandler+0x22>
 8009048:	0709      	lsls	r1, r1, #28
 800904a:	f100 80d2 	bmi.w	80091f2 <HAL_SPI_IRQHandler+0x1c6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800904e:	f005 0264 	and.w	r2, r5, #100	; 0x64
 8009052:	2a04      	cmp	r2, #4
 8009054:	d03e      	beq.n	80090d4 <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009056:	f005 0245 	and.w	r2, r5, #69	; 0x45
 800905a:	2a01      	cmp	r2, #1
 800905c:	d044      	beq.n	80090e8 <HAL_SPI_IRQHandler+0xbc>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800905e:	f005 0226 	and.w	r2, r5, #38	; 0x26
 8009062:	2a02      	cmp	r2, #2
 8009064:	f000 80dc 	beq.w	8009220 <HAL_SPI_IRQHandler+0x1f4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009068:	072a      	lsls	r2, r5, #28
 800906a:	d55c      	bpl.n	8009126 <HAL_SPI_IRQHandler+0xfa>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	f042 0208 	orr.w	r2, r2, #8
 8009072:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	f042 0210 	orr.w	r2, r2, #16
 800907a:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800907c:	699a      	ldr	r2, [r3, #24]
 800907e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009082:	619a      	str	r2, [r3, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009084:	691a      	ldr	r2, [r3, #16]
 8009086:	f022 0208 	bic.w	r2, r2, #8
 800908a:	611a      	str	r2, [r3, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8009092:	d133      	bne.n	80090fc <HAL_SPI_IRQHandler+0xd0>
      while (hspi->RxXferCount != 0UL)
 8009094:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8009098:	b292      	uxth	r2, r2
 800909a:	b37a      	cbz	r2, 80090fc <HAL_SPI_IRQHandler+0xd0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800909c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800909e:	e00e      	b.n	80090be <HAL_SPI_IRQHandler+0x92>
 80090a0:	6822      	ldr	r2, [r4, #0]
 80090a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80090a4:	f841 2b04 	str.w	r2, [r1], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80090a8:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 80090aa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80090ae:	3a01      	subs	r2, #1
 80090b0:	b292      	uxth	r2, r2
 80090b2:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80090b6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80090ba:	b292      	uxth	r2, r2
 80090bc:	b1f2      	cbz	r2, 80090fc <HAL_SPI_IRQHandler+0xd0>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80090be:	68e2      	ldr	r2, [r4, #12]
 80090c0:	2a0f      	cmp	r2, #15
 80090c2:	d8ed      	bhi.n	80090a0 <HAL_SPI_IRQHandler+0x74>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090c4:	2a07      	cmp	r2, #7
 80090c6:	f240 80a3 	bls.w	8009210 <HAL_SPI_IRQHandler+0x1e4>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80090ca:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80090cc:	f821 2b02 	strh.w	r2, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090d0:	6661      	str	r1, [r4, #100]	; 0x64
 80090d2:	e7ea      	b.n	80090aa <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 80090d4:	4620      	mov	r0, r4
 80090d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80090d8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80090da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80090dc:	4620      	mov	r0, r4
 80090de:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80090e0:	f005 0345 	and.w	r3, r5, #69	; 0x45
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d102      	bne.n	80090ee <HAL_SPI_IRQHandler+0xc2>
    hspi->RxISR(hspi);
 80090e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80090ea:	4620      	mov	r0, r4
 80090ec:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80090ee:	f005 0526 	and.w	r5, r5, #38	; 0x26
 80090f2:	2d02      	cmp	r5, #2
 80090f4:	f000 8094 	beq.w	8009220 <HAL_SPI_IRQHandler+0x1f4>
}
 80090f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 80090fc:	4620      	mov	r0, r4
 80090fe:	f7ff fcff 	bl	8008b00 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 8009102:	2301      	movs	r3, #1
 8009104:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009108:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800910c:	2b00      	cmp	r3, #0
 800910e:	d17c      	bne.n	800920a <HAL_SPI_IRQHandler+0x1de>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009110:	2e05      	cmp	r6, #5
 8009112:	f000 808a 	beq.w	800922a <HAL_SPI_IRQHandler+0x1fe>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009116:	2e04      	cmp	r6, #4
 8009118:	f000 808a 	beq.w	8009230 <HAL_SPI_IRQHandler+0x204>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800911c:	2e03      	cmp	r6, #3
 800911e:	d1eb      	bne.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
      HAL_SPI_TxCpltCallback(hspi);
 8009120:	f7ff fee8 	bl	8008ef4 <HAL_SPI_TxCpltCallback>
 8009124:	e7e8      	b.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009126:	f415 7f58 	tst.w	r5, #864	; 0x360
 800912a:	d0e5      	beq.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800912c:	066e      	lsls	r6, r5, #25
 800912e:	d509      	bpl.n	8009144 <HAL_SPI_IRQHandler+0x118>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009130:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8009134:	f042 0204 	orr.w	r2, r2, #4
 8009138:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800913c:	699a      	ldr	r2, [r3, #24]
 800913e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009142:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009144:	05a8      	lsls	r0, r5, #22
 8009146:	d509      	bpl.n	800915c <HAL_SPI_IRQHandler+0x130>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009148:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800914c:	f042 0201 	orr.w	r2, r2, #1
 8009150:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009154:	699a      	ldr	r2, [r3, #24]
 8009156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800915a:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800915c:	05e9      	lsls	r1, r5, #23
 800915e:	d509      	bpl.n	8009174 <HAL_SPI_IRQHandler+0x148>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009160:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8009164:	f042 0208 	orr.w	r2, r2, #8
 8009168:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800916c:	699a      	ldr	r2, [r3, #24]
 800916e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009172:	619a      	str	r2, [r3, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009174:	06aa      	lsls	r2, r5, #26
 8009176:	d509      	bpl.n	800918c <HAL_SPI_IRQHandler+0x160>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009178:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800917c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009180:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	f042 0220 	orr.w	r2, r2, #32
 800918a:	619a      	str	r2, [r3, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800918c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8009190:	2a00      	cmp	r2, #0
 8009192:	d0b1      	beq.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
      __HAL_SPI_DISABLE(hspi);
 8009194:	6819      	ldr	r1, [r3, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009196:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800919a:	4a27      	ldr	r2, [pc, #156]	; (8009238 <HAL_SPI_IRQHandler+0x20c>)
      __HAL_SPI_DISABLE(hspi);
 800919c:	f021 0101 	bic.w	r1, r1, #1
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80091a0:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80091a4:	6019      	str	r1, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80091a6:	6919      	ldr	r1, [r3, #16]
 80091a8:	ea02 0201 	and.w	r2, r2, r1
 80091ac:	611a      	str	r2, [r3, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80091ae:	d128      	bne.n	8009202 <HAL_SPI_IRQHandler+0x1d6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80091b0:	689a      	ldr	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80091b2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80091b4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80091b8:	609a      	str	r2, [r3, #8]
        if (hspi->hdmarx != NULL)
 80091ba:	b150      	cbz	r0, 80091d2 <HAL_SPI_IRQHandler+0x1a6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80091bc:	4b1f      	ldr	r3, [pc, #124]	; (800923c <HAL_SPI_IRQHandler+0x210>)
 80091be:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80091c0:	f7fa ffdc 	bl	800417c <HAL_DMA_Abort_IT>
 80091c4:	b128      	cbz	r0, 80091d2 <HAL_SPI_IRQHandler+0x1a6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80091c6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80091ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ce:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 80091d2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d08f      	beq.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80091d8:	4b18      	ldr	r3, [pc, #96]	; (800923c <HAL_SPI_IRQHandler+0x210>)
 80091da:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80091dc:	f7fa ffce 	bl	800417c <HAL_DMA_Abort_IT>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d089      	beq.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80091e4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80091e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ec:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80091f0:	e782      	b.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80091f2:	699a      	ldr	r2, [r3, #24]
 80091f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091f8:	619a      	str	r2, [r3, #24]
    HAL_SPI_SuspendCallback(hspi);
 80091fa:	f7ff ff15 	bl	8009028 <HAL_SPI_SuspendCallback>
}
 80091fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 8009202:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8009204:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8009206:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800920a:	f7ff fe91 	bl	8008f30 <HAL_SPI_ErrorCallback>
 800920e:	e773      	b.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8009216:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009218:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800921a:	3101      	adds	r1, #1
 800921c:	6661      	str	r1, [r4, #100]	; 0x64
 800921e:	e744      	b.n	80090aa <HAL_SPI_IRQHandler+0x7e>
    hspi->TxISR(hspi);
 8009220:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009222:	4620      	mov	r0, r4
}
 8009224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8009228:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800922a:	f7ff fe79 	bl	8008f20 <HAL_SPI_TxRxCpltCallback>
 800922e:	e763      	b.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
      HAL_SPI_RxCpltCallback(hspi);
 8009230:	f7f8 fc3a 	bl	8001aa8 <HAL_SPI_RxCpltCallback>
 8009234:	e760      	b.n	80090f8 <HAL_SPI_IRQHandler+0xcc>
 8009236:	bf00      	nop
 8009238:	fffffc94 	.word	0xfffffc94
 800923c:	0800900d 	.word	0x0800900d

08009240 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009240:	680b      	ldr	r3, [r1, #0]
{
 8009242:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009244:	b9d3      	cbnz	r3, 800927c <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009246:	6804      	ldr	r4, [r0, #0]
 8009248:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800924c:	684a      	ldr	r2, [r1, #4]
 800924e:	4023      	ands	r3, r4
 8009250:	4313      	orrs	r3, r2
 8009252:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8009256:	4323      	orrs	r3, r4
 8009258:	4313      	orrs	r3, r2
 800925a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800925e:	4323      	orrs	r3, r4
 8009260:	4313      	orrs	r3, r2
 8009262:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 8009266:	4323      	orrs	r3, r4
 8009268:	4313      	orrs	r3, r2
 800926a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800926e:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8009270:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009274:	4313      	orrs	r3, r2
 8009276:	6003      	str	r3, [r0, #0]
}
 8009278:	2000      	movs	r0, #0
 800927a:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800927c:	6802      	ldr	r2, [r0, #0]
 800927e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8009282:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8009286:	4322      	orrs	r2, r4
 8009288:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800928a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800928c:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800928e:	4322      	orrs	r2, r4
 8009290:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009292:	6842      	ldr	r2, [r0, #4]
 8009294:	4013      	ands	r3, r2
 8009296:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800929a:	4323      	orrs	r3, r4
 800929c:	4313      	orrs	r3, r2
 800929e:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 80092a2:	4323      	orrs	r3, r4
 80092a4:	4313      	orrs	r3, r2
 80092a6:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 80092aa:	4323      	orrs	r3, r4
}
 80092ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80092b0:	4313      	orrs	r3, r2
 80092b2:	6043      	str	r3, [r0, #4]
}
 80092b4:	2000      	movs	r0, #0
 80092b6:	4770      	bx	lr
 80092b8:	ffff8000 	.word	0xffff8000

080092bc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80092bc:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80092be:	bb0a      	cbnz	r2, 8009304 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80092c0:	6883      	ldr	r3, [r0, #8]
 80092c2:	e9d1 2400 	ldrd	r2, r4, [r1]
 80092c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80092ca:	3c01      	subs	r4, #1
 80092cc:	3a01      	subs	r2, #1
 80092ce:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80092d2:	4313      	orrs	r3, r2
 80092d4:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 80092d8:	3a01      	subs	r2, #1
 80092da:	3c01      	subs	r4, #1
 80092dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092e0:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
 80092e4:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
 80092e8:	6989      	ldr	r1, [r1, #24]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	3c01      	subs	r4, #1
 80092ee:	3901      	subs	r1, #1
 80092f0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80092f4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80092f8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80092fc:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80092fe:	6083      	str	r3, [r0, #8]
}
 8009300:	2000      	movs	r0, #0
 8009302:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009304:	6882      	ldr	r2, [r0, #8]
 8009306:	68cc      	ldr	r4, [r1, #12]
 8009308:	4b11      	ldr	r3, [pc, #68]	; (8009350 <FMC_SDRAM_Timing_Init+0x94>)
 800930a:	3c01      	subs	r4, #1
 800930c:	4013      	ands	r3, r2
 800930e:	694a      	ldr	r2, [r1, #20]
 8009310:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8009314:	1e54      	subs	r4, r2, #1
 8009316:	ea43 5404 	orr.w	r4, r3, r4, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800931a:	e9d1 2500 	ldrd	r2, r5, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800931e:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009320:	68c3      	ldr	r3, [r0, #12]
 8009322:	1e6c      	subs	r4, r5, #1
 8009324:	3a01      	subs	r2, #1
 8009326:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800932a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800932e:	690c      	ldr	r4, [r1, #16]
 8009330:	431a      	orrs	r2, r3
 8009332:	688b      	ldr	r3, [r1, #8]
 8009334:	3c01      	subs	r4, #1
 8009336:	6989      	ldr	r1, [r1, #24]
 8009338:	3b01      	subs	r3, #1
 800933a:	3901      	subs	r1, #1
 800933c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8009340:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009344:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
 8009348:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800934a:	60c3      	str	r3, [r0, #12]
}
 800934c:	2000      	movs	r0, #0
 800934e:	4770      	bx	lr
 8009350:	ff0f0fff 	.word	0xff0f0fff

08009354 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009354:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009356:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800935a:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800935c:	6900      	ldr	r0, [r0, #16]
 800935e:	4323      	orrs	r3, r4
 8009360:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 8009364:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8009368:	4c05      	ldr	r4, [pc, #20]	; (8009380 <FMC_SDRAM_SendCommand+0x2c>)
 800936a:	3901      	subs	r1, #1
 800936c:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800936e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009370:	4323      	orrs	r3, r4
}
 8009372:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009376:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800937a:	6113      	str	r3, [r2, #16]
}
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	ffc00000 	.word	0xffc00000

08009384 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009384:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 8009388:	2000      	movs	r0, #0
{
 800938a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800938c:	6954      	ldr	r4, [r2, #20]
 800938e:	4023      	ands	r3, r4
}
 8009390:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009394:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8009398:	6151      	str	r1, [r2, #20]
}
 800939a:	4770      	bx	lr
 800939c:	ffffc001 	.word	0xffffc001

080093a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80093a0:	b084      	sub	sp, #16
 80093a2:	b410      	push	{r4}
 80093a4:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80093a8:	4614      	mov	r4, r2
{
 80093aa:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 80093ae:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 80093b0:	9904      	ldr	r1, [sp, #16]
{
 80093b2:	4602      	mov	r2, r0
             Init.BusWide             | \
 80093b4:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 80093b6:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80093b8:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 80093ba:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 80093bc:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 80093be:	4303      	orrs	r3, r0

  return HAL_OK;
}
 80093c0:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 80093c2:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80093c4:	4903      	ldr	r1, [pc, #12]	; (80093d4 <SDMMC_Init+0x34>)
 80093c6:	4021      	ands	r1, r4
}
 80093c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80093cc:	430b      	orrs	r3, r1
}
 80093ce:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80093d0:	6053      	str	r3, [r2, #4]
}
 80093d2:	4770      	bx	lr
 80093d4:	ffc02c00 	.word	0xffc02c00

080093d8 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80093d8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop

080093e0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80093e0:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80093e2:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 80093e4:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 80093e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80093ea:	4770      	bx	lr

080093ec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80093ec:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 80093ee:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	f042 0203 	orr.w	r2, r2, #3
 80093f6:	601a      	str	r2, [r3, #0]
}
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop

080093fc <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80093fc:	6800      	ldr	r0, [r0, #0]
}
 80093fe:	f000 0003 	and.w	r0, r0, #3
 8009402:	4770      	bx	lr

08009404 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009404:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 8009406:	5840      	ldr	r0, [r0, r1]
}
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop

0800940c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800940c:	b430      	push	{r4, r5}

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800940e:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
                       Data->TransferDir   | \
 8009412:	690d      	ldr	r5, [r1, #16]
{
 8009414:	4602      	mov	r2, r0
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009416:	4323      	orrs	r3, r4
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009418:	6808      	ldr	r0, [r1, #0]
  SDMMCx->DLEN = Data->DataLength;
 800941a:	684c      	ldr	r4, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 800941c:	6250      	str	r0, [r2, #36]	; 0x24
                       Data->TransferDir   | \
 800941e:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 8009420:	6948      	ldr	r0, [r1, #20]
  SDMMCx->DLEN = Data->DataLength;
 8009422:	6294      	str	r4, [r2, #40]	; 0x28
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009424:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                       Data->TransferMode  | \
 8009426:	4303      	orrs	r3, r0

  return HAL_OK;

}
 8009428:	2000      	movs	r0, #0
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800942a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800942e:	430b      	orrs	r3, r1
}
 8009430:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009432:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop

08009438 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009438:	4a4c      	ldr	r2, [pc, #304]	; (800956c <SDMMC_CmdBlockLength+0x134>)
 800943a:	4b4d      	ldr	r3, [pc, #308]	; (8009570 <SDMMC_CmdBlockLength+0x138>)
 800943c:	6812      	ldr	r2, [r2, #0]
{
 800943e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009440:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009444:	4c4b      	ldr	r4, [pc, #300]	; (8009574 <SDMMC_CmdBlockLength+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8009446:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009448:	f241 1310 	movw	r3, #4368	; 0x1110
 800944c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800944e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009450:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009452:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009456:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009458:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800945c:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800945e:	b14a      	cbz	r2, 8009474 <SDMMC_CmdBlockLength+0x3c>
 8009460:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009462:	4945      	ldr	r1, [pc, #276]	; (8009578 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
 8009464:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8009466:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009468:	420a      	tst	r2, r1
 800946a:	d001      	beq.n	8009470 <SDMMC_CmdBlockLength+0x38>
 800946c:	0492      	lsls	r2, r2, #18
 800946e:	d507      	bpl.n	8009480 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
 8009470:	1c5c      	adds	r4, r3, #1
 8009472:	d1f7      	bne.n	8009464 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8009474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8009478:	4618      	mov	r0, r3
 800947a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800947e:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009480:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009482:	075c      	lsls	r4, r3, #29
 8009484:	d43d      	bmi.n	8009502 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009486:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009488:	f013 0301 	ands.w	r3, r3, #1
 800948c:	d134      	bne.n	80094f8 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800948e:	4b3b      	ldr	r3, [pc, #236]	; (800957c <SDMMC_CmdBlockLength+0x144>)
 8009490:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009492:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b10      	cmp	r3, #16
 8009498:	d131      	bne.n	80094fe <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
 800949a:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800949c:	4b38      	ldr	r3, [pc, #224]	; (8009580 <SDMMC_CmdBlockLength+0x148>)
 800949e:	4013      	ands	r3, r2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0e9      	beq.n	8009478 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	db30      	blt.n	800950a <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80094a8:	0051      	lsls	r1, r2, #1
 80094aa:	d431      	bmi.n	8009510 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80094ac:	0094      	lsls	r4, r2, #2
 80094ae:	d431      	bmi.n	8009514 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80094b0:	00d0      	lsls	r0, r2, #3
 80094b2:	d431      	bmi.n	8009518 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80094b4:	0111      	lsls	r1, r2, #4
 80094b6:	d432      	bmi.n	800951e <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80094b8:	0154      	lsls	r4, r2, #5
 80094ba:	d433      	bmi.n	8009524 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80094bc:	01d0      	lsls	r0, r2, #7
 80094be:	d434      	bmi.n	800952a <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80094c0:	0211      	lsls	r1, r2, #8
 80094c2:	d435      	bmi.n	8009530 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80094c4:	0254      	lsls	r4, r2, #9
 80094c6:	d436      	bmi.n	8009536 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80094c8:	0290      	lsls	r0, r2, #10
 80094ca:	d440      	bmi.n	800954e <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80094cc:	02d1      	lsls	r1, r2, #11
 80094ce:	d43b      	bmi.n	8009548 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80094d0:	0354      	lsls	r4, r2, #13
 80094d2:	d436      	bmi.n	8009542 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80094d4:	0390      	lsls	r0, r2, #14
 80094d6:	d431      	bmi.n	800953c <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80094d8:	03d1      	lsls	r1, r2, #15
 80094da:	d444      	bmi.n	8009566 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80094dc:	0414      	lsls	r4, r2, #16
 80094de:	d43f      	bmi.n	8009560 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80094e0:	0450      	lsls	r0, r2, #17
 80094e2:	d43a      	bmi.n	800955a <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80094e4:	0491      	lsls	r1, r2, #18
 80094e6:	d435      	bmi.n	8009554 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094e8:	f012 0f08 	tst.w	r2, #8
 80094ec:	bf14      	ite	ne
 80094ee:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80094f2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80094f6:	e7bf      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80094f8:	2201      	movs	r2, #1
 80094fa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094fc:	e7bc      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094fe:	2301      	movs	r3, #1
 8009500:	e7ba      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009502:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009504:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009506:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009508:	e7b6      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800950a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800950e:	e7b3      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009510:	2340      	movs	r3, #64	; 0x40
 8009512:	e7b1      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009514:	2380      	movs	r3, #128	; 0x80
 8009516:	e7af      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800951c:	e7ac      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800951e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009522:	e7a9      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009528:	e7a6      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800952a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800952e:	e7a3      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009534:	e7a0      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800953a:	e79d      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800953c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009540:	e79a      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009546:	e797      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 8009548:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800954c:	e794      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800954e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009552:	e791      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8009554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009558:	e78e      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800955a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800955e:	e78b      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009560:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009564:	e788      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009566:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800956a:	e785      	b.n	8009478 <SDMMC_CmdBlockLength+0x40>
 800956c:	2000009c 	.word	0x2000009c
 8009570:	10624dd3 	.word	0x10624dd3
 8009574:	fffee0c0 	.word	0xfffee0c0
 8009578:	00200045 	.word	0x00200045
 800957c:	002000c5 	.word	0x002000c5
 8009580:	fdffe008 	.word	0xfdffe008

08009584 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009584:	4a4c      	ldr	r2, [pc, #304]	; (80096b8 <SDMMC_CmdReadSingleBlock+0x134>)
 8009586:	4b4d      	ldr	r3, [pc, #308]	; (80096bc <SDMMC_CmdReadSingleBlock+0x138>)
 8009588:	6812      	ldr	r2, [r2, #0]
{
 800958a:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800958c:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009590:	4c4b      	ldr	r4, [pc, #300]	; (80096c0 <SDMMC_CmdReadSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8009592:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009594:	f241 1311 	movw	r3, #4369	; 0x1111
 8009598:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800959a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800959c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800959e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80095a2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80095a4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80095a8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80095aa:	b14a      	cbz	r2, 80095c0 <SDMMC_CmdReadSingleBlock+0x3c>
 80095ac:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80095ae:	4945      	ldr	r1, [pc, #276]	; (80096c4 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 80095b0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80095b2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80095b4:	420a      	tst	r2, r1
 80095b6:	d001      	beq.n	80095bc <SDMMC_CmdReadSingleBlock+0x38>
 80095b8:	0492      	lsls	r2, r2, #18
 80095ba:	d507      	bpl.n	80095cc <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 80095bc:	1c5c      	adds	r4, r3, #1
 80095be:	d1f7      	bne.n	80095b0 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80095c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ca:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80095cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80095ce:	075c      	lsls	r4, r3, #29
 80095d0:	d43d      	bmi.n	800964e <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80095d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80095d4:	f013 0301 	ands.w	r3, r3, #1
 80095d8:	d134      	bne.n	8009644 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80095da:	4b3b      	ldr	r3, [pc, #236]	; (80096c8 <SDMMC_CmdReadSingleBlock+0x144>)
 80095dc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80095de:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b11      	cmp	r3, #17
 80095e4:	d131      	bne.n	800964a <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 80095e6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80095e8:	4b38      	ldr	r3, [pc, #224]	; (80096cc <SDMMC_CmdReadSingleBlock+0x148>)
 80095ea:	4013      	ands	r3, r2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0e9      	beq.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80095f0:	2a00      	cmp	r2, #0
 80095f2:	db30      	blt.n	8009656 <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80095f4:	0051      	lsls	r1, r2, #1
 80095f6:	d431      	bmi.n	800965c <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80095f8:	0094      	lsls	r4, r2, #2
 80095fa:	d431      	bmi.n	8009660 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80095fc:	00d0      	lsls	r0, r2, #3
 80095fe:	d431      	bmi.n	8009664 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009600:	0111      	lsls	r1, r2, #4
 8009602:	d432      	bmi.n	800966a <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009604:	0154      	lsls	r4, r2, #5
 8009606:	d433      	bmi.n	8009670 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009608:	01d0      	lsls	r0, r2, #7
 800960a:	d434      	bmi.n	8009676 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800960c:	0211      	lsls	r1, r2, #8
 800960e:	d435      	bmi.n	800967c <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009610:	0254      	lsls	r4, r2, #9
 8009612:	d436      	bmi.n	8009682 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009614:	0290      	lsls	r0, r2, #10
 8009616:	d440      	bmi.n	800969a <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009618:	02d1      	lsls	r1, r2, #11
 800961a:	d43b      	bmi.n	8009694 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800961c:	0354      	lsls	r4, r2, #13
 800961e:	d436      	bmi.n	800968e <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009620:	0390      	lsls	r0, r2, #14
 8009622:	d431      	bmi.n	8009688 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009624:	03d1      	lsls	r1, r2, #15
 8009626:	d444      	bmi.n	80096b2 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009628:	0414      	lsls	r4, r2, #16
 800962a:	d43f      	bmi.n	80096ac <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800962c:	0450      	lsls	r0, r2, #17
 800962e:	d43a      	bmi.n	80096a6 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009630:	0491      	lsls	r1, r2, #18
 8009632:	d435      	bmi.n	80096a0 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009634:	f012 0f08 	tst.w	r2, #8
 8009638:	bf14      	ite	ne
 800963a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800963e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8009642:	e7bf      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009644:	2201      	movs	r2, #1
 8009646:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009648:	e7bc      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800964a:	2301      	movs	r3, #1
 800964c:	e7ba      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800964e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009650:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009652:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009654:	e7b6      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800965a:	e7b3      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800965c:	2340      	movs	r3, #64	; 0x40
 800965e:	e7b1      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009660:	2380      	movs	r3, #128	; 0x80
 8009662:	e7af      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009668:	e7ac      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800966a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800966e:	e7a9      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009674:	e7a6      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800967a:	e7a3      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800967c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009680:	e7a0      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009686:	e79d      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009688:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800968c:	e79a      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800968e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009692:	e797      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8009694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009698:	e794      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800969a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800969e:	e791      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80096a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80096a4:	e78e      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80096a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80096aa:	e78b      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80096ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80096b0:	e788      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80096b2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80096b6:	e785      	b.n	80095c4 <SDMMC_CmdReadSingleBlock+0x40>
 80096b8:	2000009c 	.word	0x2000009c
 80096bc:	10624dd3 	.word	0x10624dd3
 80096c0:	fffee0c0 	.word	0xfffee0c0
 80096c4:	00200045 	.word	0x00200045
 80096c8:	002000c5 	.word	0x002000c5
 80096cc:	fdffe008 	.word	0xfdffe008

080096d0 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80096d0:	4a4c      	ldr	r2, [pc, #304]	; (8009804 <SDMMC_CmdReadMultiBlock+0x134>)
 80096d2:	4b4d      	ldr	r3, [pc, #308]	; (8009808 <SDMMC_CmdReadMultiBlock+0x138>)
 80096d4:	6812      	ldr	r2, [r2, #0]
{
 80096d6:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80096d8:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80096dc:	4c4b      	ldr	r4, [pc, #300]	; (800980c <SDMMC_CmdReadMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 80096de:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80096e0:	f241 1312 	movw	r3, #4370	; 0x1112
 80096e4:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80096e6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80096e8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80096ea:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80096ee:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80096f0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80096f4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80096f6:	b14a      	cbz	r2, 800970c <SDMMC_CmdReadMultiBlock+0x3c>
 80096f8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80096fa:	4945      	ldr	r1, [pc, #276]	; (8009810 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 80096fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80096fe:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009700:	420a      	tst	r2, r1
 8009702:	d001      	beq.n	8009708 <SDMMC_CmdReadMultiBlock+0x38>
 8009704:	0492      	lsls	r2, r2, #18
 8009706:	d507      	bpl.n	8009718 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 8009708:	1c5c      	adds	r4, r3, #1
 800970a:	d1f7      	bne.n	80096fc <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800970c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8009710:	4618      	mov	r0, r3
 8009712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009716:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009718:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800971a:	075c      	lsls	r4, r3, #29
 800971c:	d43d      	bmi.n	800979a <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800971e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009720:	f013 0301 	ands.w	r3, r3, #1
 8009724:	d134      	bne.n	8009790 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009726:	4b3b      	ldr	r3, [pc, #236]	; (8009814 <SDMMC_CmdReadMultiBlock+0x144>)
 8009728:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800972a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b12      	cmp	r3, #18
 8009730:	d131      	bne.n	8009796 <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8009732:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009734:	4b38      	ldr	r3, [pc, #224]	; (8009818 <SDMMC_CmdReadMultiBlock+0x148>)
 8009736:	4013      	ands	r3, r2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d0e9      	beq.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800973c:	2a00      	cmp	r2, #0
 800973e:	db30      	blt.n	80097a2 <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009740:	0051      	lsls	r1, r2, #1
 8009742:	d431      	bmi.n	80097a8 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009744:	0094      	lsls	r4, r2, #2
 8009746:	d431      	bmi.n	80097ac <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009748:	00d0      	lsls	r0, r2, #3
 800974a:	d431      	bmi.n	80097b0 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800974c:	0111      	lsls	r1, r2, #4
 800974e:	d432      	bmi.n	80097b6 <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009750:	0154      	lsls	r4, r2, #5
 8009752:	d433      	bmi.n	80097bc <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009754:	01d0      	lsls	r0, r2, #7
 8009756:	d434      	bmi.n	80097c2 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009758:	0211      	lsls	r1, r2, #8
 800975a:	d435      	bmi.n	80097c8 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800975c:	0254      	lsls	r4, r2, #9
 800975e:	d436      	bmi.n	80097ce <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009760:	0290      	lsls	r0, r2, #10
 8009762:	d440      	bmi.n	80097e6 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009764:	02d1      	lsls	r1, r2, #11
 8009766:	d43b      	bmi.n	80097e0 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009768:	0354      	lsls	r4, r2, #13
 800976a:	d436      	bmi.n	80097da <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800976c:	0390      	lsls	r0, r2, #14
 800976e:	d431      	bmi.n	80097d4 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009770:	03d1      	lsls	r1, r2, #15
 8009772:	d444      	bmi.n	80097fe <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009774:	0414      	lsls	r4, r2, #16
 8009776:	d43f      	bmi.n	80097f8 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009778:	0450      	lsls	r0, r2, #17
 800977a:	d43a      	bmi.n	80097f2 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800977c:	0491      	lsls	r1, r2, #18
 800977e:	d435      	bmi.n	80097ec <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009780:	f012 0f08 	tst.w	r2, #8
 8009784:	bf14      	ite	ne
 8009786:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800978a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800978e:	e7bf      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009790:	2201      	movs	r2, #1
 8009792:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009794:	e7bc      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009796:	2301      	movs	r3, #1
 8009798:	e7ba      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800979a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800979c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800979e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097a0:	e7b6      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80097a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097a6:	e7b3      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80097a8:	2340      	movs	r3, #64	; 0x40
 80097aa:	e7b1      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80097ac:	2380      	movs	r3, #128	; 0x80
 80097ae:	e7af      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80097b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097b4:	e7ac      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80097b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097ba:	e7a9      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80097bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097c0:	e7a6      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80097c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097c6:	e7a3      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80097c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097cc:	e7a0      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80097ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097d2:	e79d      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80097d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80097d8:	e79a      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80097da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80097de:	e797      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80097e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097e4:	e794      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80097e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80097ea:	e791      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80097ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80097f0:	e78e      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80097f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80097f6:	e78b      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80097f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80097fc:	e788      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80097fe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009802:	e785      	b.n	8009710 <SDMMC_CmdReadMultiBlock+0x40>
 8009804:	2000009c 	.word	0x2000009c
 8009808:	10624dd3 	.word	0x10624dd3
 800980c:	fffee0c0 	.word	0xfffee0c0
 8009810:	00200045 	.word	0x00200045
 8009814:	002000c5 	.word	0x002000c5
 8009818:	fdffe008 	.word	0xfdffe008

0800981c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800981c:	4a4c      	ldr	r2, [pc, #304]	; (8009950 <SDMMC_CmdWriteSingleBlock+0x134>)
 800981e:	4b4d      	ldr	r3, [pc, #308]	; (8009954 <SDMMC_CmdWriteSingleBlock+0x138>)
 8009820:	6812      	ldr	r2, [r2, #0]
{
 8009822:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009824:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009828:	4c4b      	ldr	r4, [pc, #300]	; (8009958 <SDMMC_CmdWriteSingleBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800982a:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800982c:	f241 1318 	movw	r3, #4376	; 0x1118
 8009830:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009832:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009834:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009836:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800983a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800983c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009840:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8009842:	b14a      	cbz	r2, 8009858 <SDMMC_CmdWriteSingleBlock+0x3c>
 8009844:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009846:	4945      	ldr	r1, [pc, #276]	; (800995c <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8009848:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800984a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800984c:	420a      	tst	r2, r1
 800984e:	d001      	beq.n	8009854 <SDMMC_CmdWriteSingleBlock+0x38>
 8009850:	0492      	lsls	r2, r2, #18
 8009852:	d507      	bpl.n	8009864 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
 8009854:	1c5c      	adds	r4, r3, #1
 8009856:	d1f7      	bne.n	8009848 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8009858:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800985c:	4618      	mov	r0, r3
 800985e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009862:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009864:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009866:	075c      	lsls	r4, r3, #29
 8009868:	d43d      	bmi.n	80098e6 <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800986a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800986c:	f013 0301 	ands.w	r3, r3, #1
 8009870:	d134      	bne.n	80098dc <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009872:	4b3b      	ldr	r3, [pc, #236]	; (8009960 <SDMMC_CmdWriteSingleBlock+0x144>)
 8009874:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009876:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b18      	cmp	r3, #24
 800987c:	d131      	bne.n	80098e2 <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800987e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009880:	4b38      	ldr	r3, [pc, #224]	; (8009964 <SDMMC_CmdWriteSingleBlock+0x148>)
 8009882:	4013      	ands	r3, r2
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0e9      	beq.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009888:	2a00      	cmp	r2, #0
 800988a:	db30      	blt.n	80098ee <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800988c:	0051      	lsls	r1, r2, #1
 800988e:	d431      	bmi.n	80098f4 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009890:	0094      	lsls	r4, r2, #2
 8009892:	d431      	bmi.n	80098f8 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009894:	00d0      	lsls	r0, r2, #3
 8009896:	d431      	bmi.n	80098fc <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009898:	0111      	lsls	r1, r2, #4
 800989a:	d432      	bmi.n	8009902 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800989c:	0154      	lsls	r4, r2, #5
 800989e:	d433      	bmi.n	8009908 <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80098a0:	01d0      	lsls	r0, r2, #7
 80098a2:	d434      	bmi.n	800990e <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80098a4:	0211      	lsls	r1, r2, #8
 80098a6:	d435      	bmi.n	8009914 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80098a8:	0254      	lsls	r4, r2, #9
 80098aa:	d436      	bmi.n	800991a <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80098ac:	0290      	lsls	r0, r2, #10
 80098ae:	d440      	bmi.n	8009932 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80098b0:	02d1      	lsls	r1, r2, #11
 80098b2:	d43b      	bmi.n	800992c <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80098b4:	0354      	lsls	r4, r2, #13
 80098b6:	d436      	bmi.n	8009926 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80098b8:	0390      	lsls	r0, r2, #14
 80098ba:	d431      	bmi.n	8009920 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80098bc:	03d1      	lsls	r1, r2, #15
 80098be:	d444      	bmi.n	800994a <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80098c0:	0414      	lsls	r4, r2, #16
 80098c2:	d43f      	bmi.n	8009944 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80098c4:	0450      	lsls	r0, r2, #17
 80098c6:	d43a      	bmi.n	800993e <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80098c8:	0491      	lsls	r1, r2, #18
 80098ca:	d435      	bmi.n	8009938 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098cc:	f012 0f08 	tst.w	r2, #8
 80098d0:	bf14      	ite	ne
 80098d2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80098d6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80098da:	e7bf      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098dc:	2201      	movs	r2, #1
 80098de:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098e0:	e7bc      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e7ba      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098e6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098e8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098ea:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098ec:	e7b6      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80098ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098f2:	e7b3      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80098f4:	2340      	movs	r3, #64	; 0x40
 80098f6:	e7b1      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80098f8:	2380      	movs	r3, #128	; 0x80
 80098fa:	e7af      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80098fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009900:	e7ac      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009906:	e7a9      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800990c:	e7a6      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800990e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009912:	e7a3      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009918:	e7a0      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800991a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800991e:	e79d      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009920:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009924:	e79a      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800992a:	e797      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800992c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009930:	e794      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009932:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009936:	e791      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8009938:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800993c:	e78e      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800993e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009942:	e78b      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009944:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009948:	e788      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800994a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800994e:	e785      	b.n	800985c <SDMMC_CmdWriteSingleBlock+0x40>
 8009950:	2000009c 	.word	0x2000009c
 8009954:	10624dd3 	.word	0x10624dd3
 8009958:	fffee0c0 	.word	0xfffee0c0
 800995c:	00200045 	.word	0x00200045
 8009960:	002000c5 	.word	0x002000c5
 8009964:	fdffe008 	.word	0xfdffe008

08009968 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009968:	4a4c      	ldr	r2, [pc, #304]	; (8009a9c <SDMMC_CmdWriteMultiBlock+0x134>)
 800996a:	4b4d      	ldr	r3, [pc, #308]	; (8009aa0 <SDMMC_CmdWriteMultiBlock+0x138>)
 800996c:	6812      	ldr	r2, [r2, #0]
{
 800996e:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009970:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009974:	4c4b      	ldr	r4, [pc, #300]	; (8009aa4 <SDMMC_CmdWriteMultiBlock+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8009976:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009978:	f241 1319 	movw	r3, #4377	; 0x1119
 800997c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800997e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009980:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009982:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009986:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009988:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800998c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800998e:	b14a      	cbz	r2, 80099a4 <SDMMC_CmdWriteMultiBlock+0x3c>
 8009990:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009992:	4945      	ldr	r1, [pc, #276]	; (8009aa8 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8009994:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8009996:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009998:	420a      	tst	r2, r1
 800999a:	d001      	beq.n	80099a0 <SDMMC_CmdWriteMultiBlock+0x38>
 800999c:	0492      	lsls	r2, r2, #18
 800999e:	d507      	bpl.n	80099b0 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 80099a0:	1c5c      	adds	r4, r3, #1
 80099a2:	d1f7      	bne.n	8009994 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80099a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099ae:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099b2:	075c      	lsls	r4, r3, #29
 80099b4:	d43d      	bmi.n	8009a32 <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80099b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099b8:	f013 0301 	ands.w	r3, r3, #1
 80099bc:	d134      	bne.n	8009a28 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099be:	4b3b      	ldr	r3, [pc, #236]	; (8009aac <SDMMC_CmdWriteMultiBlock+0x144>)
 80099c0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80099c2:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	2b19      	cmp	r3, #25
 80099c8:	d131      	bne.n	8009a2e <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 80099ca:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80099cc:	4b38      	ldr	r3, [pc, #224]	; (8009ab0 <SDMMC_CmdWriteMultiBlock+0x148>)
 80099ce:	4013      	ands	r3, r2
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0e9      	beq.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80099d4:	2a00      	cmp	r2, #0
 80099d6:	db30      	blt.n	8009a3a <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80099d8:	0051      	lsls	r1, r2, #1
 80099da:	d431      	bmi.n	8009a40 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80099dc:	0094      	lsls	r4, r2, #2
 80099de:	d431      	bmi.n	8009a44 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80099e0:	00d0      	lsls	r0, r2, #3
 80099e2:	d431      	bmi.n	8009a48 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80099e4:	0111      	lsls	r1, r2, #4
 80099e6:	d432      	bmi.n	8009a4e <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80099e8:	0154      	lsls	r4, r2, #5
 80099ea:	d433      	bmi.n	8009a54 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80099ec:	01d0      	lsls	r0, r2, #7
 80099ee:	d434      	bmi.n	8009a5a <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80099f0:	0211      	lsls	r1, r2, #8
 80099f2:	d435      	bmi.n	8009a60 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80099f4:	0254      	lsls	r4, r2, #9
 80099f6:	d436      	bmi.n	8009a66 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80099f8:	0290      	lsls	r0, r2, #10
 80099fa:	d440      	bmi.n	8009a7e <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80099fc:	02d1      	lsls	r1, r2, #11
 80099fe:	d43b      	bmi.n	8009a78 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009a00:	0354      	lsls	r4, r2, #13
 8009a02:	d436      	bmi.n	8009a72 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009a04:	0390      	lsls	r0, r2, #14
 8009a06:	d431      	bmi.n	8009a6c <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009a08:	03d1      	lsls	r1, r2, #15
 8009a0a:	d444      	bmi.n	8009a96 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009a0c:	0414      	lsls	r4, r2, #16
 8009a0e:	d43f      	bmi.n	8009a90 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009a10:	0450      	lsls	r0, r2, #17
 8009a12:	d43a      	bmi.n	8009a8a <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009a14:	0491      	lsls	r1, r2, #18
 8009a16:	d435      	bmi.n	8009a84 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a18:	f012 0f08 	tst.w	r2, #8
 8009a1c:	bf14      	ite	ne
 8009a1e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8009a22:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8009a26:	e7bf      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a28:	2201      	movs	r2, #1
 8009a2a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a2c:	e7bc      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e7ba      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a32:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a34:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a36:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a38:	e7b6      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a3e:	e7b3      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009a40:	2340      	movs	r3, #64	; 0x40
 8009a42:	e7b1      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009a44:	2380      	movs	r3, #128	; 0x80
 8009a46:	e7af      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a4c:	e7ac      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a52:	e7a9      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a58:	e7a6      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a5e:	e7a3      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a64:	e7a0      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a6a:	e79d      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009a6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009a70:	e79a      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009a72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a76:	e797      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8009a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a7c:	e794      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009a7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009a82:	e791      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8009a84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a88:	e78e      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009a8a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009a8e:	e78b      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009a90:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a94:	e788      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009a96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a9a:	e785      	b.n	80099a8 <SDMMC_CmdWriteMultiBlock+0x40>
 8009a9c:	2000009c 	.word	0x2000009c
 8009aa0:	10624dd3 	.word	0x10624dd3
 8009aa4:	fffee0c0 	.word	0xfffee0c0
 8009aa8:	00200045 	.word	0x00200045
 8009aac:	002000c5 	.word	0x002000c5
 8009ab0:	fdffe008 	.word	0xfdffe008

08009ab4 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ab4:	4b7d      	ldr	r3, [pc, #500]	; (8009cac <SDMMC_CmdStopTransfer+0x1f8>)
 8009ab6:	497e      	ldr	r1, [pc, #504]	; (8009cb0 <SDMMC_CmdStopTransfer+0x1fc>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009aba:	4b7e      	ldr	r3, [pc, #504]	; (8009cb4 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009abc:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009ac0:	68c1      	ldr	r1, [r0, #12]
 8009ac2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ac6:	0a52      	lsrs	r2, r2, #9
{
 8009ac8:	b430      	push	{r4, r5}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009aca:	60c1      	str	r1, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 8009acc:	2400      	movs	r4, #0
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009ace:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ad0:	4d79      	ldr	r5, [pc, #484]	; (8009cb8 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009ad2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ad6:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009ada:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009adc:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 8009ae0:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009ae2:	68c4      	ldr	r4, [r0, #12]
 8009ae4:	4023      	ands	r3, r4
 8009ae6:	4319      	orrs	r1, r3
 8009ae8:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8009aea:	b14a      	cbz	r2, 8009b00 <SDMMC_CmdStopTransfer+0x4c>
 8009aec:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009aee:	4973      	ldr	r1, [pc, #460]	; (8009cbc <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 8009af0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8009af2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009af4:	420a      	tst	r2, r1
 8009af6:	d001      	beq.n	8009afc <SDMMC_CmdStopTransfer+0x48>
 8009af8:	0492      	lsls	r2, r2, #18
 8009afa:	d50a      	bpl.n	8009b12 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8009afc:	1c5c      	adds	r4, r3, #1
 8009afe:	d1f7      	bne.n	8009af0 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009b00:	68c2      	ldr	r2, [r0, #12]
 8009b02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b0a:	60c2      	str	r2, [r0, #12]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	bc30      	pop	{r4, r5}
 8009b10:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b12:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b14:	075b      	lsls	r3, r3, #29
 8009b16:	d454      	bmi.n	8009bc2 <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009b1a:	f013 0301 	ands.w	r3, r3, #1
 8009b1e:	d13c      	bne.n	8009b9a <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b20:	4a67      	ldr	r2, [pc, #412]	; (8009cc0 <SDMMC_CmdStopTransfer+0x20c>)
 8009b22:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009b24:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b26:	b2d2      	uxtb	r2, r2
 8009b28:	2a0c      	cmp	r2, #12
 8009b2a:	d144      	bne.n	8009bb6 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 8009b2c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009b2e:	4965      	ldr	r1, [pc, #404]	; (8009cc4 <SDMMC_CmdStopTransfer+0x210>)
 8009b30:	4011      	ands	r1, r2
 8009b32:	2900      	cmp	r1, #0
 8009b34:	d038      	beq.n	8009ba8 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009b36:	2a00      	cmp	r2, #0
 8009b38:	db36      	blt.n	8009ba8 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009b3a:	0055      	lsls	r5, r2, #1
 8009b3c:	d448      	bmi.n	8009bd0 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009b3e:	0094      	lsls	r4, r2, #2
 8009b40:	d44c      	bmi.n	8009bdc <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009b42:	00d1      	lsls	r1, r2, #3
 8009b44:	d450      	bmi.n	8009be8 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009b46:	0113      	lsls	r3, r2, #4
 8009b48:	d455      	bmi.n	8009bf6 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009b4a:	0155      	lsls	r5, r2, #5
 8009b4c:	d45a      	bmi.n	8009c04 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009b4e:	01d4      	lsls	r4, r2, #7
 8009b50:	d466      	bmi.n	8009c20 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009b52:	0211      	lsls	r1, r2, #8
 8009b54:	d45d      	bmi.n	8009c12 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009b56:	0253      	lsls	r3, r2, #9
 8009b58:	d470      	bmi.n	8009c3c <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009b5a:	0295      	lsls	r5, r2, #10
 8009b5c:	d467      	bmi.n	8009c2e <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009b5e:	02d4      	lsls	r4, r2, #11
 8009b60:	f100 8081 	bmi.w	8009c66 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009b64:	0351      	lsls	r1, r2, #13
 8009b66:	d477      	bmi.n	8009c58 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009b68:	0393      	lsls	r3, r2, #14
 8009b6a:	d46e      	bmi.n	8009c4a <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009b6c:	03d5      	lsls	r5, r2, #15
 8009b6e:	f100 8096 	bmi.w	8009c9e <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009b72:	0414      	lsls	r4, r2, #16
 8009b74:	f100 8085 	bmi.w	8009c82 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009b78:	0451      	lsls	r1, r2, #17
 8009b7a:	d47b      	bmi.n	8009c74 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009b7c:	0493      	lsls	r3, r2, #18
 8009b7e:	f100 8087 	bmi.w	8009c90 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009b82:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009b86:	68c2      	ldr	r2, [r0, #12]
 8009b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009b8c:	bf14      	ite	ne
 8009b8e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b92:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009b96:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009b98:	e7b8      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009b9e:	68c2      	ldr	r2, [r0, #12]
 8009ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ba4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009ba6:	e7b1      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ba8:	68c2      	ldr	r2, [r0, #12]
 8009baa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
}
 8009bae:	bc30      	pop	{r4, r5}
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bb0:	60c2      	str	r2, [r0, #12]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bb6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bb8:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bbe:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009bc0:	e7a4      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009bc2:	2304      	movs	r3, #4
 8009bc4:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bc6:	68c2      	ldr	r2, [r0, #12]
 8009bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bcc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009bce:	e79d      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bd0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009bd2:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bd8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009bda:	e797      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bdc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bde:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009be4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009be6:	e791      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009be8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009bea:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bf2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009bf4:	e78a      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bf6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c00:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c02:	e783      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c04:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c0e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c10:	e77c      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c12:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c1c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c1e:	e775      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c20:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c2a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c2c:	e76e      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c2e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c38:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c3a:	e767      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c3c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c46:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c48:	e760      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c4a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c54:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c56:	e759      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c58:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c62:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c64:	e752      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c66:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 8009c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c70:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c72:	e74b      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c74:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009c76:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c7e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c80:	e744      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c82:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009c84:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c8c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c8e:	e73d      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c90:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 8009c92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c9a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009c9c:	e736      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009c9e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009ca0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ca8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009caa:	e72f      	b.n	8009b0c <SDMMC_CmdStopTransfer+0x58>
 8009cac:	2000009c 	.word	0x2000009c
 8009cb0:	10624dd3 	.word	0x10624dd3
 8009cb4:	fffee0c0 	.word	0xfffee0c0
 8009cb8:	05f5e100 	.word	0x05f5e100
 8009cbc:	00200045 	.word	0x00200045
 8009cc0:	002000c5 	.word	0x002000c5
 8009cc4:	fdffe008 	.word	0xfdffe008

08009cc8 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cc8:	4a4c      	ldr	r2, [pc, #304]	; (8009dfc <SDMMC_CmdSelDesel+0x134>)
 8009cca:	4b4d      	ldr	r3, [pc, #308]	; (8009e00 <SDMMC_CmdSelDesel+0x138>)
 8009ccc:	6812      	ldr	r2, [r2, #0]
{
 8009cce:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cd0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009cd4:	4c4b      	ldr	r4, [pc, #300]	; (8009e04 <SDMMC_CmdSelDesel+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8009cd6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009cd8:	f241 1307 	movw	r3, #4359	; 0x1107
 8009cdc:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cde:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009ce0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ce2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009ce6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ce8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009cec:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8009cee:	b14a      	cbz	r2, 8009d04 <SDMMC_CmdSelDesel+0x3c>
 8009cf0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009cf2:	4945      	ldr	r1, [pc, #276]	; (8009e08 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 8009cf4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8009cf6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009cf8:	420a      	tst	r2, r1
 8009cfa:	d001      	beq.n	8009d00 <SDMMC_CmdSelDesel+0x38>
 8009cfc:	0492      	lsls	r2, r2, #18
 8009cfe:	d507      	bpl.n	8009d10 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
 8009d00:	1c5c      	adds	r4, r3, #1
 8009d02:	d1f7      	bne.n	8009cf4 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8009d04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d0e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009d10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d12:	075c      	lsls	r4, r3, #29
 8009d14:	d43d      	bmi.n	8009d92 <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d18:	f013 0301 	ands.w	r3, r3, #1
 8009d1c:	d134      	bne.n	8009d88 <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d1e:	4b3b      	ldr	r3, [pc, #236]	; (8009e0c <SDMMC_CmdSelDesel+0x144>)
 8009d20:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009d22:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b07      	cmp	r3, #7
 8009d28:	d131      	bne.n	8009d8e <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
 8009d2a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d2c:	4b38      	ldr	r3, [pc, #224]	; (8009e10 <SDMMC_CmdSelDesel+0x148>)
 8009d2e:	4013      	ands	r3, r2
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d0e9      	beq.n	8009d08 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d34:	2a00      	cmp	r2, #0
 8009d36:	db30      	blt.n	8009d9a <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d38:	0051      	lsls	r1, r2, #1
 8009d3a:	d431      	bmi.n	8009da0 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d3c:	0094      	lsls	r4, r2, #2
 8009d3e:	d431      	bmi.n	8009da4 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d40:	00d0      	lsls	r0, r2, #3
 8009d42:	d431      	bmi.n	8009da8 <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d44:	0111      	lsls	r1, r2, #4
 8009d46:	d432      	bmi.n	8009dae <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d48:	0154      	lsls	r4, r2, #5
 8009d4a:	d433      	bmi.n	8009db4 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d4c:	01d0      	lsls	r0, r2, #7
 8009d4e:	d434      	bmi.n	8009dba <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d50:	0211      	lsls	r1, r2, #8
 8009d52:	d435      	bmi.n	8009dc0 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d54:	0254      	lsls	r4, r2, #9
 8009d56:	d436      	bmi.n	8009dc6 <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d58:	0290      	lsls	r0, r2, #10
 8009d5a:	d440      	bmi.n	8009dde <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d5c:	02d1      	lsls	r1, r2, #11
 8009d5e:	d43b      	bmi.n	8009dd8 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d60:	0354      	lsls	r4, r2, #13
 8009d62:	d436      	bmi.n	8009dd2 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d64:	0390      	lsls	r0, r2, #14
 8009d66:	d431      	bmi.n	8009dcc <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d68:	03d1      	lsls	r1, r2, #15
 8009d6a:	d444      	bmi.n	8009df6 <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009d6c:	0414      	lsls	r4, r2, #16
 8009d6e:	d43f      	bmi.n	8009df0 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009d70:	0450      	lsls	r0, r2, #17
 8009d72:	d43a      	bmi.n	8009dea <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009d74:	0491      	lsls	r1, r2, #18
 8009d76:	d435      	bmi.n	8009de4 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d78:	f012 0f08 	tst.w	r2, #8
 8009d7c:	bf14      	ite	ne
 8009d7e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8009d82:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8009d86:	e7bf      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d88:	2201      	movs	r2, #1
 8009d8a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d8c:	e7bc      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e7ba      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d92:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d94:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d96:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d98:	e7b6      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d9e:	e7b3      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009da0:	2340      	movs	r3, #64	; 0x40
 8009da2:	e7b1      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009da4:	2380      	movs	r3, #128	; 0x80
 8009da6:	e7af      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dac:	e7ac      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009db2:	e7a9      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009db8:	e7a6      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dbe:	e7a3      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dc4:	e7a0      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009dca:	e79d      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009dcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009dd0:	e79a      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009dd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009dd6:	e797      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 8009dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ddc:	e794      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009dde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009de2:	e791      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8009de4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009de8:	e78e      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009dea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009dee:	e78b      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009df0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009df4:	e788      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009df6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009dfa:	e785      	b.n	8009d08 <SDMMC_CmdSelDesel+0x40>
 8009dfc:	2000009c 	.word	0x2000009c
 8009e00:	10624dd3 	.word	0x10624dd3
 8009e04:	fffee0c0 	.word	0xfffee0c0
 8009e08:	00200045 	.word	0x00200045
 8009e0c:	002000c5 	.word	0x002000c5
 8009e10:	fdffe008 	.word	0xfdffe008

08009e14 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e14:	4b11      	ldr	r3, [pc, #68]	; (8009e5c <SDMMC_CmdGoIdleState+0x48>)
{
 8009e16:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e18:	4a11      	ldr	r2, [pc, #68]	; (8009e60 <SDMMC_CmdGoIdleState+0x4c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e1a:	681b      	ldr	r3, [r3, #0]
{
 8009e1c:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e1e:	4c11      	ldr	r4, [pc, #68]	; (8009e64 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8009e20:	2500      	movs	r5, #0
 8009e22:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e24:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e28:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e2a:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e2e:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e30:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e36:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e3a:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e3c:	e002      	b.n	8009e44 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009e3e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8009e40:	0612      	lsls	r2, r2, #24
 8009e42:	d405      	bmi.n	8009e50 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8009e44:	3b01      	subs	r3, #1
 8009e46:	d2fa      	bcs.n	8009e3e <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8009e48:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009e4c:	bc30      	pop	{r4, r5}
 8009e4e:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e50:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 8009e52:	2000      	movs	r0, #0
}
 8009e54:	bc30      	pop	{r4, r5}
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e56:	638b      	str	r3, [r1, #56]	; 0x38
}
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	2000009c 	.word	0x2000009c
 8009e60:	fffee0c0 	.word	0xfffee0c0
 8009e64:	10624dd3 	.word	0x10624dd3
 8009e68:	002000c5 	.word	0x002000c5

08009e6c <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e6c:	4a1c      	ldr	r2, [pc, #112]	; (8009ee0 <SDMMC_CmdOperCond+0x74>)
{
 8009e6e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8009e70:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e74:	481b      	ldr	r0, [pc, #108]	; (8009ee4 <SDMMC_CmdOperCond+0x78>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e76:	6812      	ldr	r2, [r2, #0]
{
 8009e78:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e7a:	4c1b      	ldr	r4, [pc, #108]	; (8009ee8 <SDMMC_CmdOperCond+0x7c>)
  SDMMCx->ARG = Command->Argument;
 8009e7c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e7e:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e82:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e86:	68cc      	ldr	r4, [r1, #12]
 8009e88:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e8a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e8c:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e8e:	f241 3088 	movw	r0, #5000	; 0x1388
 8009e92:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009e96:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8009e98:	b14a      	cbz	r2, 8009eae <SDMMC_CmdOperCond+0x42>
 8009e9a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8009e9c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8009e9e:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009ea0:	f012 0f45 	tst.w	r2, #69	; 0x45
 8009ea4:	d001      	beq.n	8009eaa <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ea6:	0490      	lsls	r0, r2, #18
 8009ea8:	d506      	bpl.n	8009eb8 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 8009eaa:	1c5c      	adds	r4, r3, #1
 8009eac:	d1f6      	bne.n	8009e9c <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8009eae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8009eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eb6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009eb8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009eba:	075a      	lsls	r2, r3, #29
 8009ebc:	d40c      	bmi.n	8009ed8 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ebe:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8009ec0:	f010 0001 	ands.w	r0, r0, #1
 8009ec4:	d105      	bne.n	8009ed2 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009ec6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8009ec8:	065b      	lsls	r3, r3, #25
 8009eca:	d5f2      	bpl.n	8009eb2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009ecc:	2340      	movs	r3, #64	; 0x40
 8009ece:	638b      	str	r3, [r1, #56]	; 0x38
 8009ed0:	e7ef      	b.n	8009eb2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ed6:	e7ec      	b.n	8009eb2 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ed8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eda:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009edc:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ede:	e7e8      	b.n	8009eb2 <SDMMC_CmdOperCond+0x46>
 8009ee0:	2000009c 	.word	0x2000009c
 8009ee4:	fffee0c0 	.word	0xfffee0c0
 8009ee8:	10624dd3 	.word	0x10624dd3

08009eec <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009eec:	4a4c      	ldr	r2, [pc, #304]	; (800a020 <SDMMC_CmdAppCommand+0x134>)
 8009eee:	4b4d      	ldr	r3, [pc, #308]	; (800a024 <SDMMC_CmdAppCommand+0x138>)
 8009ef0:	6812      	ldr	r2, [r2, #0]
{
 8009ef2:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ef4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009ef8:	4c4b      	ldr	r4, [pc, #300]	; (800a028 <SDMMC_CmdAppCommand+0x13c>)
  SDMMCx->ARG = Command->Argument;
 8009efa:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009efc:	f241 1337 	movw	r3, #4407	; 0x1137
 8009f00:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f02:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f04:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f06:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f0a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009f0c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f10:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8009f12:	b14a      	cbz	r2, 8009f28 <SDMMC_CmdAppCommand+0x3c>
 8009f14:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009f16:	4945      	ldr	r1, [pc, #276]	; (800a02c <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
 8009f18:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8009f1a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f1c:	420a      	tst	r2, r1
 8009f1e:	d001      	beq.n	8009f24 <SDMMC_CmdAppCommand+0x38>
 8009f20:	0492      	lsls	r2, r2, #18
 8009f22:	d507      	bpl.n	8009f34 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 8009f24:	1c5c      	adds	r4, r3, #1
 8009f26:	d1f7      	bne.n	8009f18 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8009f28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f32:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009f36:	075c      	lsls	r4, r3, #29
 8009f38:	d43d      	bmi.n	8009fb6 <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009f3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009f3c:	f013 0301 	ands.w	r3, r3, #1
 8009f40:	d134      	bne.n	8009fac <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f42:	4b3b      	ldr	r3, [pc, #236]	; (800a030 <SDMMC_CmdAppCommand+0x144>)
 8009f44:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8009f46:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b37      	cmp	r3, #55	; 0x37
 8009f4c:	d131      	bne.n	8009fb2 <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
 8009f4e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009f50:	4b38      	ldr	r3, [pc, #224]	; (800a034 <SDMMC_CmdAppCommand+0x148>)
 8009f52:	4013      	ands	r3, r2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0e9      	beq.n	8009f2c <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009f58:	2a00      	cmp	r2, #0
 8009f5a:	db30      	blt.n	8009fbe <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009f5c:	0051      	lsls	r1, r2, #1
 8009f5e:	d431      	bmi.n	8009fc4 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009f60:	0094      	lsls	r4, r2, #2
 8009f62:	d431      	bmi.n	8009fc8 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009f64:	00d0      	lsls	r0, r2, #3
 8009f66:	d431      	bmi.n	8009fcc <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009f68:	0111      	lsls	r1, r2, #4
 8009f6a:	d432      	bmi.n	8009fd2 <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009f6c:	0154      	lsls	r4, r2, #5
 8009f6e:	d433      	bmi.n	8009fd8 <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009f70:	01d0      	lsls	r0, r2, #7
 8009f72:	d434      	bmi.n	8009fde <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009f74:	0211      	lsls	r1, r2, #8
 8009f76:	d435      	bmi.n	8009fe4 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009f78:	0254      	lsls	r4, r2, #9
 8009f7a:	d436      	bmi.n	8009fea <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009f7c:	0290      	lsls	r0, r2, #10
 8009f7e:	d440      	bmi.n	800a002 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009f80:	02d1      	lsls	r1, r2, #11
 8009f82:	d43b      	bmi.n	8009ffc <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009f84:	0354      	lsls	r4, r2, #13
 8009f86:	d436      	bmi.n	8009ff6 <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009f88:	0390      	lsls	r0, r2, #14
 8009f8a:	d431      	bmi.n	8009ff0 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009f8c:	03d1      	lsls	r1, r2, #15
 8009f8e:	d444      	bmi.n	800a01a <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009f90:	0414      	lsls	r4, r2, #16
 8009f92:	d43f      	bmi.n	800a014 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009f94:	0450      	lsls	r0, r2, #17
 8009f96:	d43a      	bmi.n	800a00e <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009f98:	0491      	lsls	r1, r2, #18
 8009f9a:	d435      	bmi.n	800a008 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009f9c:	f012 0f08 	tst.w	r2, #8
 8009fa0:	bf14      	ite	ne
 8009fa2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8009fa6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8009faa:	e7bf      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009fac:	2201      	movs	r2, #1
 8009fae:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fb0:	e7bc      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e7ba      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fb6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fb8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009fba:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009fbc:	e7b6      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fc2:	e7b3      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009fc4:	2340      	movs	r3, #64	; 0x40
 8009fc6:	e7b1      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009fc8:	2380      	movs	r3, #128	; 0x80
 8009fca:	e7af      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fd0:	e7ac      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fd6:	e7a9      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fdc:	e7a6      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009fde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fe2:	e7a3      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fe8:	e7a0      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fee:	e79d      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ff4:	e79a      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009ffa:	e797      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8009ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a000:	e794      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a002:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a006:	e791      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800a008:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a00c:	e78e      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a00e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a012:	e78b      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a014:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a018:	e788      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a01a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a01e:	e785      	b.n	8009f2c <SDMMC_CmdAppCommand+0x40>
 800a020:	2000009c 	.word	0x2000009c
 800a024:	10624dd3 	.word	0x10624dd3
 800a028:	fffee0c0 	.word	0xfffee0c0
 800a02c:	00200045 	.word	0x00200045
 800a030:	002000c5 	.word	0x002000c5
 800a034:	fdffe008 	.word	0xfdffe008

0800a038 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a038:	4a18      	ldr	r2, [pc, #96]	; (800a09c <SDMMC_CmdAppOperCommand+0x64>)
 800a03a:	4b19      	ldr	r3, [pc, #100]	; (800a0a0 <SDMMC_CmdAppOperCommand+0x68>)
 800a03c:	6812      	ldr	r2, [r2, #0]
{
 800a03e:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a040:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a044:	4c17      	ldr	r4, [pc, #92]	; (800a0a4 <SDMMC_CmdAppOperCommand+0x6c>)
  SDMMCx->ARG = Command->Argument;
 800a046:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a048:	f241 1329 	movw	r3, #4393	; 0x1129
 800a04c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a04e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a050:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a052:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a056:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a058:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a05c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800a05e:	b14a      	cbz	r2, 800a074 <SDMMC_CmdAppOperCommand+0x3c>
 800a060:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a062:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800a064:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a066:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a06a:	d001      	beq.n	800a070 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a06c:	0492      	lsls	r2, r2, #18
 800a06e:	d507      	bpl.n	800a080 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
 800a070:	1c59      	adds	r1, r3, #1
 800a072:	d1f6      	bne.n	800a062 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800a074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800a078:	4618      	mov	r0, r3
 800a07a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a07e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a080:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a082:	f013 0304 	ands.w	r3, r3, #4
 800a086:	d105      	bne.n	800a094 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a088:	4a07      	ldr	r2, [pc, #28]	; (800a0a8 <SDMMC_CmdAppOperCommand+0x70>)
}
 800a08a:	f85d 4b04 	ldr.w	r4, [sp], #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a08e:	6382      	str	r2, [r0, #56]	; 0x38
}
 800a090:	4618      	mov	r0, r3
 800a092:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a094:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a096:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a098:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a09a:	e7ed      	b.n	800a078 <SDMMC_CmdAppOperCommand+0x40>
 800a09c:	2000009c 	.word	0x2000009c
 800a0a0:	10624dd3 	.word	0x10624dd3
 800a0a4:	fffee0c0 	.word	0xfffee0c0
 800a0a8:	002000c5 	.word	0x002000c5

0800a0ac <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a0ac:	4a4c      	ldr	r2, [pc, #304]	; (800a1e0 <SDMMC_CmdBusWidth+0x134>)
 800a0ae:	4b4d      	ldr	r3, [pc, #308]	; (800a1e4 <SDMMC_CmdBusWidth+0x138>)
 800a0b0:	6812      	ldr	r2, [r2, #0]
{
 800a0b2:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a0b4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a0b8:	4c4b      	ldr	r4, [pc, #300]	; (800a1e8 <SDMMC_CmdBusWidth+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800a0ba:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a0bc:	f241 1306 	movw	r3, #4358	; 0x1106
 800a0c0:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a0c2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a0c4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a0c6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a0ca:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a0cc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a0d0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800a0d2:	b14a      	cbz	r2, 800a0e8 <SDMMC_CmdBusWidth+0x3c>
 800a0d4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a0d6:	4945      	ldr	r1, [pc, #276]	; (800a1ec <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
 800a0d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800a0da:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a0dc:	420a      	tst	r2, r1
 800a0de:	d001      	beq.n	800a0e4 <SDMMC_CmdBusWidth+0x38>
 800a0e0:	0492      	lsls	r2, r2, #18
 800a0e2:	d507      	bpl.n	800a0f4 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 800a0e4:	1c5c      	adds	r4, r3, #1
 800a0e6:	d1f7      	bne.n	800a0d8 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800a0e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0f2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a0f6:	075c      	lsls	r4, r3, #29
 800a0f8:	d43d      	bmi.n	800a176 <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a0fc:	f013 0301 	ands.w	r3, r3, #1
 800a100:	d134      	bne.n	800a16c <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a102:	4b3b      	ldr	r3, [pc, #236]	; (800a1f0 <SDMMC_CmdBusWidth+0x144>)
 800a104:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a106:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b06      	cmp	r3, #6
 800a10c:	d131      	bne.n	800a172 <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
 800a10e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a110:	4b38      	ldr	r3, [pc, #224]	; (800a1f4 <SDMMC_CmdBusWidth+0x148>)
 800a112:	4013      	ands	r3, r2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0e9      	beq.n	800a0ec <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a118:	2a00      	cmp	r2, #0
 800a11a:	db30      	blt.n	800a17e <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a11c:	0051      	lsls	r1, r2, #1
 800a11e:	d431      	bmi.n	800a184 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a120:	0094      	lsls	r4, r2, #2
 800a122:	d431      	bmi.n	800a188 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a124:	00d0      	lsls	r0, r2, #3
 800a126:	d431      	bmi.n	800a18c <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a128:	0111      	lsls	r1, r2, #4
 800a12a:	d432      	bmi.n	800a192 <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a12c:	0154      	lsls	r4, r2, #5
 800a12e:	d433      	bmi.n	800a198 <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a130:	01d0      	lsls	r0, r2, #7
 800a132:	d434      	bmi.n	800a19e <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a134:	0211      	lsls	r1, r2, #8
 800a136:	d435      	bmi.n	800a1a4 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a138:	0254      	lsls	r4, r2, #9
 800a13a:	d436      	bmi.n	800a1aa <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a13c:	0290      	lsls	r0, r2, #10
 800a13e:	d440      	bmi.n	800a1c2 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a140:	02d1      	lsls	r1, r2, #11
 800a142:	d43b      	bmi.n	800a1bc <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a144:	0354      	lsls	r4, r2, #13
 800a146:	d436      	bmi.n	800a1b6 <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a148:	0390      	lsls	r0, r2, #14
 800a14a:	d431      	bmi.n	800a1b0 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a14c:	03d1      	lsls	r1, r2, #15
 800a14e:	d444      	bmi.n	800a1da <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a150:	0414      	lsls	r4, r2, #16
 800a152:	d43f      	bmi.n	800a1d4 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a154:	0450      	lsls	r0, r2, #17
 800a156:	d43a      	bmi.n	800a1ce <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a158:	0491      	lsls	r1, r2, #18
 800a15a:	d435      	bmi.n	800a1c8 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a15c:	f012 0f08 	tst.w	r2, #8
 800a160:	bf14      	ite	ne
 800a162:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800a166:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800a16a:	e7bf      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a16c:	2201      	movs	r2, #1
 800a16e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a170:	e7bc      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a172:	2301      	movs	r3, #1
 800a174:	e7ba      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a176:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a178:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a17a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a17c:	e7b6      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a17e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a182:	e7b3      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	e7b1      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	e7af      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a18c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a190:	e7ac      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a192:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a196:	e7a9      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a19c:	e7a6      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a19e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a1a2:	e7a3      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a1a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1a8:	e7a0      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a1aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a1ae:	e79d      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a1b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a1b4:	e79a      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a1b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a1ba:	e797      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 800a1bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1c0:	e794      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a1c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1c6:	e791      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800a1c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a1cc:	e78e      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a1ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a1d2:	e78b      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a1d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a1d8:	e788      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a1da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a1de:	e785      	b.n	800a0ec <SDMMC_CmdBusWidth+0x40>
 800a1e0:	2000009c 	.word	0x2000009c
 800a1e4:	10624dd3 	.word	0x10624dd3
 800a1e8:	fffee0c0 	.word	0xfffee0c0
 800a1ec:	00200045 	.word	0x00200045
 800a1f0:	002000c5 	.word	0x002000c5
 800a1f4:	fdffe008 	.word	0xfdffe008

0800a1f8 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1f8:	4a4d      	ldr	r2, [pc, #308]	; (800a330 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
 800a1fa:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a1fc:	494d      	ldr	r1, [pc, #308]	; (800a334 <SDMMC_CmdSendSCR+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a1fe:	6812      	ldr	r2, [r2, #0]
{
 800a200:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a202:	4c4d      	ldr	r4, [pc, #308]	; (800a338 <SDMMC_CmdSendSCR+0x140>)
  SDMMCx->ARG = Command->Argument;
 800a204:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a206:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a20a:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a20e:	68c4      	ldr	r4, [r0, #12]
 800a210:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a212:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a214:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a216:	f241 3188 	movw	r1, #5000	; 0x1388
 800a21a:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a21e:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800a220:	b14a      	cbz	r2, 800a236 <SDMMC_CmdSendSCR+0x3e>
 800a222:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a224:	4945      	ldr	r1, [pc, #276]	; (800a33c <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800a226:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800a228:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a22a:	420a      	tst	r2, r1
 800a22c:	d001      	beq.n	800a232 <SDMMC_CmdSendSCR+0x3a>
 800a22e:	0492      	lsls	r2, r2, #18
 800a230:	d507      	bpl.n	800a242 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800a232:	1c5c      	adds	r4, r3, #1
 800a234:	d1f7      	bne.n	800a226 <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800a236:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a240:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a242:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a244:	075c      	lsls	r4, r3, #29
 800a246:	d43d      	bmi.n	800a2c4 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a248:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a24a:	f013 0301 	ands.w	r3, r3, #1
 800a24e:	d134      	bne.n	800a2ba <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a250:	4b3b      	ldr	r3, [pc, #236]	; (800a340 <SDMMC_CmdSendSCR+0x148>)
 800a252:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a254:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b33      	cmp	r3, #51	; 0x33
 800a25a:	d131      	bne.n	800a2c0 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800a25c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a25e:	4b39      	ldr	r3, [pc, #228]	; (800a344 <SDMMC_CmdSendSCR+0x14c>)
 800a260:	4013      	ands	r3, r2
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0e9      	beq.n	800a23a <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a266:	2a00      	cmp	r2, #0
 800a268:	db30      	blt.n	800a2cc <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a26a:	0051      	lsls	r1, r2, #1
 800a26c:	d431      	bmi.n	800a2d2 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a26e:	0094      	lsls	r4, r2, #2
 800a270:	d431      	bmi.n	800a2d6 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a272:	00d0      	lsls	r0, r2, #3
 800a274:	d431      	bmi.n	800a2da <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a276:	0111      	lsls	r1, r2, #4
 800a278:	d432      	bmi.n	800a2e0 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a27a:	0154      	lsls	r4, r2, #5
 800a27c:	d433      	bmi.n	800a2e6 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a27e:	01d0      	lsls	r0, r2, #7
 800a280:	d434      	bmi.n	800a2ec <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a282:	0211      	lsls	r1, r2, #8
 800a284:	d435      	bmi.n	800a2f2 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a286:	0254      	lsls	r4, r2, #9
 800a288:	d436      	bmi.n	800a2f8 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a28a:	0290      	lsls	r0, r2, #10
 800a28c:	d440      	bmi.n	800a310 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a28e:	02d1      	lsls	r1, r2, #11
 800a290:	d43b      	bmi.n	800a30a <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a292:	0354      	lsls	r4, r2, #13
 800a294:	d436      	bmi.n	800a304 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a296:	0390      	lsls	r0, r2, #14
 800a298:	d431      	bmi.n	800a2fe <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a29a:	03d1      	lsls	r1, r2, #15
 800a29c:	d444      	bmi.n	800a328 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a29e:	0414      	lsls	r4, r2, #16
 800a2a0:	d43f      	bmi.n	800a322 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a2a2:	0450      	lsls	r0, r2, #17
 800a2a4:	d43a      	bmi.n	800a31c <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a2a6:	0491      	lsls	r1, r2, #18
 800a2a8:	d435      	bmi.n	800a316 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2aa:	f012 0f08 	tst.w	r2, #8
 800a2ae:	bf14      	ite	ne
 800a2b0:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800a2b4:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800a2b8:	e7bf      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2be:	e7bc      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e7ba      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2c4:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2c6:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2c8:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2ca:	e7b6      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a2cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2d0:	e7b3      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a2d2:	2340      	movs	r3, #64	; 0x40
 800a2d4:	e7b1      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a2d6:	2380      	movs	r3, #128	; 0x80
 800a2d8:	e7af      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a2da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2de:	e7ac      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a2e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2e4:	e7a9      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ea:	e7a6      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a2ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2f0:	e7a3      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a2f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2f6:	e7a0      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a2f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2fc:	e79d      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a2fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a302:	e79a      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a308:	e797      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 800a30a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a30e:	e794      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a310:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a314:	e791      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800a316:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a31a:	e78e      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a31c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a320:	e78b      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a322:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a326:	e788      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a328:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a32c:	e785      	b.n	800a23a <SDMMC_CmdSendSCR+0x42>
 800a32e:	bf00      	nop
 800a330:	2000009c 	.word	0x2000009c
 800a334:	fffee0c0 	.word	0xfffee0c0
 800a338:	10624dd3 	.word	0x10624dd3
 800a33c:	00200045 	.word	0x00200045
 800a340:	002000c5 	.word	0x002000c5
 800a344:	fdffe008 	.word	0xfdffe008

0800a348 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a348:	4a1a      	ldr	r2, [pc, #104]	; (800a3b4 <SDMMC_CmdSendCID+0x6c>)
{
 800a34a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800a34c:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a34e:	481a      	ldr	r0, [pc, #104]	; (800a3b8 <SDMMC_CmdSendCID+0x70>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a350:	6812      	ldr	r2, [r2, #0]
{
 800a352:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a354:	4c19      	ldr	r4, [pc, #100]	; (800a3bc <SDMMC_CmdSendCID+0x74>)
  SDMMCx->ARG = Command->Argument;
 800a356:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a358:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a35c:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a360:	68cc      	ldr	r4, [r1, #12]
 800a362:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a364:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a366:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a368:	f241 3088 	movw	r0, #5000	; 0x1388
 800a36c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a370:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800a372:	b14a      	cbz	r2, 800a388 <SDMMC_CmdSendCID+0x40>
 800a374:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a376:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800a378:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a37a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a37e:	d001      	beq.n	800a384 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a380:	0492      	lsls	r2, r2, #18
 800a382:	d506      	bpl.n	800a392 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800a384:	1c58      	adds	r0, r3, #1
 800a386:	d1f6      	bne.n	800a376 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800a388:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a38c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a390:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a392:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800a394:	075b      	lsls	r3, r3, #29
 800a396:	d409      	bmi.n	800a3ac <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a398:	6b48      	ldr	r0, [r1, #52]	; 0x34
}
 800a39a:	f85d 4b04 	ldr.w	r4, [sp], #4
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a39e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3a2:	bf14      	ite	ne
 800a3a4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3a6:	4b06      	ldreq	r3, [pc, #24]	; (800a3c0 <SDMMC_CmdSendCID+0x78>)
 800a3a8:	638b      	str	r3, [r1, #56]	; 0x38
}
 800a3aa:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3ac:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3ae:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a3b0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3b2:	e7eb      	b.n	800a38c <SDMMC_CmdSendCID+0x44>
 800a3b4:	2000009c 	.word	0x2000009c
 800a3b8:	fffee0c0 	.word	0xfffee0c0
 800a3bc:	10624dd3 	.word	0x10624dd3
 800a3c0:	002000c5 	.word	0x002000c5

0800a3c4 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3c4:	4a1b      	ldr	r2, [pc, #108]	; (800a434 <SDMMC_CmdSendCSD+0x70>)
{
 800a3c6:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3c8:	4b1b      	ldr	r3, [pc, #108]	; (800a438 <SDMMC_CmdSendCSD+0x74>)
 800a3ca:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800a3cc:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3d0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3d4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800a3d8:	4818      	ldr	r0, [pc, #96]	; (800a43c <SDMMC_CmdSendCSD+0x78>)
 800a3da:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3de:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3e0:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3e2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3e6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3e8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a3ec:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800a3f0:	1e53      	subs	r3, r2, #1
 800a3f2:	b14a      	cbz	r2, 800a408 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800a3f4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800a3f8:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a3fa:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a3fe:	d001      	beq.n	800a404 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a400:	0492      	lsls	r2, r2, #18
 800a402:	d504      	bpl.n	800a40e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800a404:	1c59      	adds	r1, r3, #1
 800a406:	d1f5      	bne.n	800a3f4 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800a408:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800a40c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a40e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800a412:	075b      	lsls	r3, r3, #29
 800a414:	d409      	bmi.n	800a42a <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a416:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800a41a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a41e:	bf14      	ite	ne
 800a420:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a422:	4b07      	ldreq	r3, [pc, #28]	; (800a440 <SDMMC_CmdSendCSD+0x7c>)
 800a424:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800a428:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a42a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a42c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a42e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a432:	4770      	bx	lr
 800a434:	2000009c 	.word	0x2000009c
 800a438:	10624dd3 	.word	0x10624dd3
 800a43c:	fffee0c0 	.word	0xfffee0c0
 800a440:	002000c5 	.word	0x002000c5

0800a444 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800a444:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a446:	4a27      	ldr	r2, [pc, #156]	; (800a4e4 <SDMMC_CmdSetRelAdd+0xa0>)
{
 800a448:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800a44a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a44c:	4c26      	ldr	r4, [pc, #152]	; (800a4e8 <SDMMC_CmdSetRelAdd+0xa4>)
 800a44e:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a450:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a452:	401c      	ands	r4, r3
 800a454:	f241 1303 	movw	r3, #4355	; 0x1103
 800a458:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a45a:	4c24      	ldr	r4, [pc, #144]	; (800a4ec <SDMMC_CmdSetRelAdd+0xa8>)
 800a45c:	fba4 4202 	umull	r4, r2, r4, r2
 800a460:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a464:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a466:	0a52      	lsrs	r2, r2, #9
 800a468:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
 800a46c:	b14a      	cbz	r2, 800a482 <SDMMC_CmdSetRelAdd+0x3e>
 800a46e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800a470:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800a472:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a474:	f012 0f45 	tst.w	r2, #69	; 0x45
 800a478:	d001      	beq.n	800a47e <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a47a:	0492      	lsls	r2, r2, #18
 800a47c:	d507      	bpl.n	800a48e <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
 800a47e:	1c5c      	adds	r4, r3, #1
 800a480:	d1f6      	bne.n	800a470 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800a482:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800a486:	4618      	mov	r0, r3
 800a488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a48c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a48e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a490:	075c      	lsls	r4, r3, #29
 800a492:	d41c      	bmi.n	800a4ce <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a494:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a496:	f013 0301 	ands.w	r3, r3, #1
 800a49a:	d113      	bne.n	800a4c4 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
 800a49c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b03      	cmp	r3, #3
 800a4a2:	d112      	bne.n	800a4ca <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4a4:	4b12      	ldr	r3, [pc, #72]	; (800a4f0 <SDMMC_CmdSetRelAdd+0xac>)
 800a4a6:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800a4a8:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a4aa:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 800a4ae:	d015      	beq.n	800a4dc <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a4b0:	0451      	lsls	r1, r2, #17
 800a4b2:	d410      	bmi.n	800a4d6 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a4b4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800a4b8:	bf14      	ite	ne
 800a4ba:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800a4be:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800a4c2:	e7e0      	b.n	800a486 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4c8:	e7dd      	b.n	800a486 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e7db      	b.n	800a486 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4ce:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4d0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4d2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4d4:	e7d7      	b.n	800a486 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4da:	e7d4      	b.n	800a486 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a4dc:	0c12      	lsrs	r2, r2, #16
 800a4de:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 800a4e0:	e7d1      	b.n	800a486 <SDMMC_CmdSetRelAdd+0x42>
 800a4e2:	bf00      	nop
 800a4e4:	2000009c 	.word	0x2000009c
 800a4e8:	fffee0c0 	.word	0xfffee0c0
 800a4ec:	10624dd3 	.word	0x10624dd3
 800a4f0:	002000c5 	.word	0x002000c5

0800a4f4 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a4f4:	4a4c      	ldr	r2, [pc, #304]	; (800a628 <SDMMC_CmdSendStatus+0x134>)
 800a4f6:	4b4d      	ldr	r3, [pc, #308]	; (800a62c <SDMMC_CmdSendStatus+0x138>)
 800a4f8:	6812      	ldr	r2, [r2, #0]
{
 800a4fa:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a4fc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a500:	4c4b      	ldr	r4, [pc, #300]	; (800a630 <SDMMC_CmdSendStatus+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800a502:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a504:	f241 130d 	movw	r3, #4365	; 0x110d
 800a508:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a50a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a50c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a50e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a512:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a514:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a518:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800a51a:	b14a      	cbz	r2, 800a530 <SDMMC_CmdSendStatus+0x3c>
 800a51c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a51e:	4945      	ldr	r1, [pc, #276]	; (800a634 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
 800a520:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800a522:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a524:	420a      	tst	r2, r1
 800a526:	d001      	beq.n	800a52c <SDMMC_CmdSendStatus+0x38>
 800a528:	0492      	lsls	r2, r2, #18
 800a52a:	d507      	bpl.n	800a53c <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 800a52c:	1c5c      	adds	r4, r3, #1
 800a52e:	d1f7      	bne.n	800a520 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800a530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800a534:	4618      	mov	r0, r3
 800a536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a53a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a53c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a53e:	075c      	lsls	r4, r3, #29
 800a540:	d43d      	bmi.n	800a5be <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a542:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a544:	f013 0301 	ands.w	r3, r3, #1
 800a548:	d134      	bne.n	800a5b4 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a54a:	4b3b      	ldr	r3, [pc, #236]	; (800a638 <SDMMC_CmdSendStatus+0x144>)
 800a54c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a54e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b0d      	cmp	r3, #13
 800a554:	d131      	bne.n	800a5ba <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
 800a556:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a558:	4b38      	ldr	r3, [pc, #224]	; (800a63c <SDMMC_CmdSendStatus+0x148>)
 800a55a:	4013      	ands	r3, r2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0e9      	beq.n	800a534 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a560:	2a00      	cmp	r2, #0
 800a562:	db30      	blt.n	800a5c6 <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a564:	0051      	lsls	r1, r2, #1
 800a566:	d431      	bmi.n	800a5cc <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a568:	0094      	lsls	r4, r2, #2
 800a56a:	d431      	bmi.n	800a5d0 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a56c:	00d0      	lsls	r0, r2, #3
 800a56e:	d431      	bmi.n	800a5d4 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a570:	0111      	lsls	r1, r2, #4
 800a572:	d432      	bmi.n	800a5da <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a574:	0154      	lsls	r4, r2, #5
 800a576:	d433      	bmi.n	800a5e0 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a578:	01d0      	lsls	r0, r2, #7
 800a57a:	d434      	bmi.n	800a5e6 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a57c:	0211      	lsls	r1, r2, #8
 800a57e:	d435      	bmi.n	800a5ec <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a580:	0254      	lsls	r4, r2, #9
 800a582:	d436      	bmi.n	800a5f2 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a584:	0290      	lsls	r0, r2, #10
 800a586:	d440      	bmi.n	800a60a <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a588:	02d1      	lsls	r1, r2, #11
 800a58a:	d43b      	bmi.n	800a604 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a58c:	0354      	lsls	r4, r2, #13
 800a58e:	d436      	bmi.n	800a5fe <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a590:	0390      	lsls	r0, r2, #14
 800a592:	d431      	bmi.n	800a5f8 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a594:	03d1      	lsls	r1, r2, #15
 800a596:	d444      	bmi.n	800a622 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a598:	0414      	lsls	r4, r2, #16
 800a59a:	d43f      	bmi.n	800a61c <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a59c:	0450      	lsls	r0, r2, #17
 800a59e:	d43a      	bmi.n	800a616 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a5a0:	0491      	lsls	r1, r2, #18
 800a5a2:	d435      	bmi.n	800a610 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a5a4:	f012 0f08 	tst.w	r2, #8
 800a5a8:	bf14      	ite	ne
 800a5aa:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800a5ae:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800a5b2:	e7bf      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5b8:	e7bc      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e7ba      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5be:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5c0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a5c2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5c4:	e7b6      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a5c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5ca:	e7b3      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a5cc:	2340      	movs	r3, #64	; 0x40
 800a5ce:	e7b1      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a5d0:	2380      	movs	r3, #128	; 0x80
 800a5d2:	e7af      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a5d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5d8:	e7ac      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a5da:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5de:	e7a9      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a5e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5e4:	e7a6      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a5e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5ea:	e7a3      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a5ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5f0:	e7a0      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a5f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5f6:	e79d      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a5f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a5fc:	e79a      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a5fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a602:	e797      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 800a604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a608:	e794      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a60a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a60e:	e791      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800a610:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a614:	e78e      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a616:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a61a:	e78b      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a61c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a620:	e788      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a622:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a626:	e785      	b.n	800a534 <SDMMC_CmdSendStatus+0x40>
 800a628:	2000009c 	.word	0x2000009c
 800a62c:	10624dd3 	.word	0x10624dd3
 800a630:	fffee0c0 	.word	0xfffee0c0
 800a634:	00200045 	.word	0x00200045
 800a638:	002000c5 	.word	0x002000c5
 800a63c:	fdffe008 	.word	0xfdffe008

0800a640 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a640:	4a4d      	ldr	r2, [pc, #308]	; (800a778 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
 800a642:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a644:	494d      	ldr	r1, [pc, #308]	; (800a77c <SDMMC_CmdStatusRegister+0x13c>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a646:	6812      	ldr	r2, [r2, #0]
{
 800a648:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a64a:	4c4d      	ldr	r4, [pc, #308]	; (800a780 <SDMMC_CmdStatusRegister+0x140>)
  SDMMCx->ARG = Command->Argument;
 800a64c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a64e:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a652:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a656:	68c4      	ldr	r4, [r0, #12]
 800a658:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a65a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a65c:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a65e:	f241 3188 	movw	r1, #5000	; 0x1388
 800a662:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a666:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800a668:	b14a      	cbz	r2, 800a67e <SDMMC_CmdStatusRegister+0x3e>
 800a66a:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a66c:	4945      	ldr	r1, [pc, #276]	; (800a784 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800a66e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800a670:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a672:	420a      	tst	r2, r1
 800a674:	d001      	beq.n	800a67a <SDMMC_CmdStatusRegister+0x3a>
 800a676:	0492      	lsls	r2, r2, #18
 800a678:	d507      	bpl.n	800a68a <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800a67a:	1c5c      	adds	r4, r3, #1
 800a67c:	d1f7      	bne.n	800a66e <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800a67e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800a682:	4618      	mov	r0, r3
 800a684:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a688:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a68a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a68c:	075c      	lsls	r4, r3, #29
 800a68e:	d43d      	bmi.n	800a70c <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a690:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a692:	f013 0301 	ands.w	r3, r3, #1
 800a696:	d134      	bne.n	800a702 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a698:	4b3b      	ldr	r3, [pc, #236]	; (800a788 <SDMMC_CmdStatusRegister+0x148>)
 800a69a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800a69c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	2b0d      	cmp	r3, #13
 800a6a2:	d131      	bne.n	800a708 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800a6a4:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a6a6:	4b39      	ldr	r3, [pc, #228]	; (800a78c <SDMMC_CmdStatusRegister+0x14c>)
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d0e9      	beq.n	800a682 <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	db30      	blt.n	800a714 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a6b2:	0051      	lsls	r1, r2, #1
 800a6b4:	d431      	bmi.n	800a71a <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a6b6:	0094      	lsls	r4, r2, #2
 800a6b8:	d431      	bmi.n	800a71e <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a6ba:	00d0      	lsls	r0, r2, #3
 800a6bc:	d431      	bmi.n	800a722 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a6be:	0111      	lsls	r1, r2, #4
 800a6c0:	d432      	bmi.n	800a728 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a6c2:	0154      	lsls	r4, r2, #5
 800a6c4:	d433      	bmi.n	800a72e <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a6c6:	01d0      	lsls	r0, r2, #7
 800a6c8:	d434      	bmi.n	800a734 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a6ca:	0211      	lsls	r1, r2, #8
 800a6cc:	d435      	bmi.n	800a73a <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a6ce:	0254      	lsls	r4, r2, #9
 800a6d0:	d436      	bmi.n	800a740 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a6d2:	0290      	lsls	r0, r2, #10
 800a6d4:	d440      	bmi.n	800a758 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a6d6:	02d1      	lsls	r1, r2, #11
 800a6d8:	d43b      	bmi.n	800a752 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a6da:	0354      	lsls	r4, r2, #13
 800a6dc:	d436      	bmi.n	800a74c <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a6de:	0390      	lsls	r0, r2, #14
 800a6e0:	d431      	bmi.n	800a746 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a6e2:	03d1      	lsls	r1, r2, #15
 800a6e4:	d444      	bmi.n	800a770 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a6e6:	0414      	lsls	r4, r2, #16
 800a6e8:	d43f      	bmi.n	800a76a <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a6ea:	0450      	lsls	r0, r2, #17
 800a6ec:	d43a      	bmi.n	800a764 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a6ee:	0491      	lsls	r1, r2, #18
 800a6f0:	d435      	bmi.n	800a75e <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6f2:	f012 0f08 	tst.w	r2, #8
 800a6f6:	bf14      	ite	ne
 800a6f8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800a6fc:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800a700:	e7bf      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a702:	2201      	movs	r2, #1
 800a704:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a706:	e7bc      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a708:	2301      	movs	r3, #1
 800a70a:	e7ba      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a70c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a70e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a710:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a712:	e7b6      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a714:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a718:	e7b3      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a71a:	2340      	movs	r3, #64	; 0x40
 800a71c:	e7b1      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a71e:	2380      	movs	r3, #128	; 0x80
 800a720:	e7af      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a722:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a726:	e7ac      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a72c:	e7a9      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a72e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a732:	e7a6      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a734:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a738:	e7a3      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a73a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a73e:	e7a0      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a744:	e79d      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a746:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a74a:	e79a      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a74c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a750:	e797      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 800a752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a756:	e794      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a758:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a75c:	e791      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800a75e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a762:	e78e      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a764:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a768:	e78b      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a76a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a76e:	e788      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a770:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a774:	e785      	b.n	800a682 <SDMMC_CmdStatusRegister+0x42>
 800a776:	bf00      	nop
 800a778:	2000009c 	.word	0x2000009c
 800a77c:	fffee0c0 	.word	0xfffee0c0
 800a780:	10624dd3 	.word	0x10624dd3
 800a784:	00200045 	.word	0x00200045
 800a788:	002000c5 	.word	0x002000c5
 800a78c:	fdffe008 	.word	0xfdffe008

0800a790 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a790:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a792:	4903      	ldr	r1, [pc, #12]	; (800a7a0 <MX_FATFS_Init+0x10>)
 800a794:	4803      	ldr	r0, [pc, #12]	; (800a7a4 <MX_FATFS_Init+0x14>)
 800a796:	f003 f947 	bl	800da28 <FATFS_LinkDriver>
 800a79a:	4b03      	ldr	r3, [pc, #12]	; (800a7a8 <MX_FATFS_Init+0x18>)
 800a79c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a79e:	bd08      	pop	{r3, pc}
 800a7a0:	20018978 	.word	0x20018978
 800a7a4:	080172dc 	.word	0x080172dc
 800a7a8:	2001897c 	.word	0x2001897c

0800a7ac <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4770      	bx	lr

0800a7b0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	4694      	mov	ip, r2
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a7b8:	460a      	mov	r2, r1
 800a7ba:	4663      	mov	r3, ip
 800a7bc:	4601      	mov	r1, r0
 800a7be:	9400      	str	r4, [sp, #0]
 800a7c0:	4803      	ldr	r0, [pc, #12]	; (800a7d0 <BSP_SD_ReadBlocks+0x20>)
 800a7c2:	f7fd fbc5 	bl	8007f50 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a7c6:	3800      	subs	r0, #0
 800a7c8:	bf18      	it	ne
 800a7ca:	2001      	movne	r0, #1
 800a7cc:	b002      	add	sp, #8
 800a7ce:	bd10      	pop	{r4, pc}
 800a7d0:	20018190 	.word	0x20018190

0800a7d4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	4694      	mov	ip, r2
 800a7d8:	b082      	sub	sp, #8
 800a7da:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a7dc:	460a      	mov	r2, r1
 800a7de:	4663      	mov	r3, ip
 800a7e0:	4601      	mov	r1, r0
 800a7e2:	9400      	str	r4, [sp, #0]
 800a7e4:	4803      	ldr	r0, [pc, #12]	; (800a7f4 <BSP_SD_WriteBlocks+0x20>)
 800a7e6:	f7fd fcd3 	bl	8008190 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800a7ea:	3800      	subs	r0, #0
 800a7ec:	bf18      	it	ne
 800a7ee:	2001      	movne	r0, #1
 800a7f0:	b002      	add	sp, #8
 800a7f2:	bd10      	pop	{r4, pc}
 800a7f4:	20018190 	.word	0x20018190

0800a7f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a7f8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a7fa:	4803      	ldr	r0, [pc, #12]	; (800a808 <BSP_SD_GetCardState+0x10>)
 800a7fc:	f7fe f90a 	bl	8008a14 <HAL_SD_GetCardState>
}
 800a800:	3804      	subs	r0, #4
 800a802:	bf18      	it	ne
 800a804:	2001      	movne	r0, #1
 800a806:	bd08      	pop	{r3, pc}
 800a808:	20018190 	.word	0x20018190

0800a80c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a80c:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800a80e:	4801      	ldr	r0, [pc, #4]	; (800a814 <BSP_SD_GetCardInfo+0x8>)
 800a810:	f7fd bfae 	b.w	8008770 <HAL_SD_GetCardInfo>
 800a814:	20018190 	.word	0x20018190

0800a818 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a818:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 800a81a:	2301      	movs	r3, #1
{
 800a81c:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 800a81e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800a822:	f000 f821 	bl	800a868 <BSP_PlatformIsDetected>
 800a826:	b908      	cbnz	r0, 800a82c <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 800a828:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 800a82c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800a830:	b003      	add	sp, #12
 800a832:	f85d fb04 	ldr.w	pc, [sp], #4
 800a836:	bf00      	nop

0800a838 <BSP_SD_Init>:
{
 800a838:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a83a:	f7ff ffed 	bl	800a818 <BSP_SD_IsDetected>
 800a83e:	2801      	cmp	r0, #1
 800a840:	d001      	beq.n	800a846 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800a842:	2002      	movs	r0, #2
}
 800a844:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800a846:	4807      	ldr	r0, [pc, #28]	; (800a864 <BSP_SD_Init+0x2c>)
 800a848:	f7fe f87c 	bl	8008944 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d1f9      	bne.n	800a844 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800a850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a854:	4803      	ldr	r0, [pc, #12]	; (800a864 <BSP_SD_Init+0x2c>)
 800a856:	f7fd ff9f 	bl	8008798 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800a85a:	3800      	subs	r0, #0
 800a85c:	bf18      	it	ne
 800a85e:	2001      	movne	r0, #1
}
 800a860:	bd08      	pop	{r3, pc}
 800a862:	bf00      	nop
 800a864:	20018190 	.word	0x20018190

0800a868 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a868:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a86c:	4804      	ldr	r0, [pc, #16]	; (800a880 <BSP_PlatformIsDetected+0x18>)
uint8_t	BSP_PlatformIsDetected(void) {
 800a86e:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_SET)
 800a870:	f7fa f9da 	bl	8004c28 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800a874:	f1a0 0001 	sub.w	r0, r0, #1
 800a878:	fab0 f080 	clz	r0, r0
 800a87c:	0940      	lsrs	r0, r0, #5
 800a87e:	bd08      	pop	{r3, pc}
 800a880:	58020800 	.word	0x58020800

0800a884 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a884:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800a886:	4c0a      	ldr	r4, [pc, #40]	; (800a8b0 <SD_initialize+0x2c>)
 800a888:	2501      	movs	r5, #1
 800a88a:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a88c:	f7ff ffd4 	bl	800a838 <BSP_SD_Init>
 800a890:	b108      	cbz	r0, 800a896 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a892:	7820      	ldrb	r0, [r4, #0]
}
 800a894:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800a896:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800a898:	f7ff ffae 	bl	800a7f8 <BSP_SD_GetCardState>
 800a89c:	b918      	cbnz	r0, 800a8a6 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800a89e:	7823      	ldrb	r3, [r4, #0]
 800a8a0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a8a4:	7023      	strb	r3, [r4, #0]
  return Stat;
 800a8a6:	7823      	ldrb	r3, [r4, #0]
 800a8a8:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800a8aa:	7023      	strb	r3, [r4, #0]
  return Stat;
 800a8ac:	7820      	ldrb	r0, [r4, #0]
}
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	200000ac 	.word	0x200000ac

0800a8b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a8b4:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	4c05      	ldr	r4, [pc, #20]	; (800a8d0 <SD_status+0x1c>)
 800a8ba:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800a8bc:	f7ff ff9c 	bl	800a7f8 <BSP_SD_GetCardState>
 800a8c0:	b918      	cbnz	r0, 800a8ca <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800a8c2:	7823      	ldrb	r3, [r4, #0]
 800a8c4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a8c8:	7023      	strb	r3, [r4, #0]
  return Stat;
 800a8ca:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800a8cc:	bd10      	pop	{r4, pc}
 800a8ce:	bf00      	nop
 800a8d0:	200000ac 	.word	0x200000ac

0800a8d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a8d4:	b508      	push	{r3, lr}
 800a8d6:	4608      	mov	r0, r1
 800a8d8:	4611      	mov	r1, r2
 800a8da:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a8dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8e0:	f7ff ff66 	bl	800a7b0 <BSP_SD_ReadBlocks>
 800a8e4:	b108      	cbz	r0, 800a8ea <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800a8e6:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800a8e8:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a8ea:	f7ff ff85 	bl	800a7f8 <BSP_SD_GetCardState>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d0fa      	beq.n	800a8e8 <SD_read+0x14>
 800a8f2:	f7ff ff81 	bl	800a7f8 <BSP_SD_GetCardState>
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	d1f7      	bne.n	800a8ea <SD_read+0x16>
 800a8fa:	e7f5      	b.n	800a8e8 <SD_read+0x14>

0800a8fc <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a8fc:	4b18      	ldr	r3, [pc, #96]	; (800a960 <SD_ioctl+0x64>)
{
 800a8fe:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a900:	7818      	ldrb	r0, [r3, #0]
{
 800a902:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a904:	f010 0401 	ands.w	r4, r0, #1
 800a908:	d106      	bne.n	800a918 <SD_ioctl+0x1c>
 800a90a:	4615      	mov	r5, r2

  switch (cmd)
 800a90c:	2903      	cmp	r1, #3
 800a90e:	d824      	bhi.n	800a95a <SD_ioctl+0x5e>
 800a910:	e8df f001 	tbb	[pc, r1]
 800a914:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a918:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800a91a:	4620      	mov	r0, r4
 800a91c:	b00b      	add	sp, #44	; 0x2c
 800a91e:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800a920:	460c      	mov	r4, r1
}
 800a922:	4620      	mov	r0, r4
 800a924:	b00b      	add	sp, #44	; 0x2c
 800a926:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800a928:	a801      	add	r0, sp, #4
 800a92a:	f7ff ff6f 	bl	800a80c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a92e:	9b07      	ldr	r3, [sp, #28]
}
 800a930:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a932:	602b      	str	r3, [r5, #0]
}
 800a934:	b00b      	add	sp, #44	; 0x2c
 800a936:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800a938:	a801      	add	r0, sp, #4
 800a93a:	f7ff ff67 	bl	800a80c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a93e:	9b08      	ldr	r3, [sp, #32]
}
 800a940:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a942:	802b      	strh	r3, [r5, #0]
}
 800a944:	b00b      	add	sp, #44	; 0x2c
 800a946:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800a948:	a801      	add	r0, sp, #4
 800a94a:	f7ff ff5f 	bl	800a80c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a94e:	9b08      	ldr	r3, [sp, #32]
}
 800a950:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a952:	0a5b      	lsrs	r3, r3, #9
 800a954:	602b      	str	r3, [r5, #0]
}
 800a956:	b00b      	add	sp, #44	; 0x2c
 800a958:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800a95a:	2404      	movs	r4, #4
 800a95c:	e7dd      	b.n	800a91a <SD_ioctl+0x1e>
 800a95e:	bf00      	nop
 800a960:	200000ac 	.word	0x200000ac

0800a964 <SD_write>:
{
 800a964:	b508      	push	{r3, lr}
 800a966:	4608      	mov	r0, r1
 800a968:	4611      	mov	r1, r2
 800a96a:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a96c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a970:	f7ff ff30 	bl	800a7d4 <BSP_SD_WriteBlocks>
 800a974:	b108      	cbz	r0, 800a97a <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800a976:	2001      	movs	r0, #1
}
 800a978:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a97a:	f7ff ff3d 	bl	800a7f8 <BSP_SD_GetCardState>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d0fa      	beq.n	800a978 <SD_write+0x14>
 800a982:	f7ff ff39 	bl	800a7f8 <BSP_SD_GetCardState>
 800a986:	2800      	cmp	r0, #0
 800a988:	d1f7      	bne.n	800a97a <SD_write+0x16>
 800a98a:	e7f5      	b.n	800a978 <SD_write+0x14>

0800a98c <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a98c:	4b03      	ldr	r3, [pc, #12]	; (800a99c <disk_status+0x10>)
 800a98e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800a992:	4403      	add	r3, r0
 800a994:	6852      	ldr	r2, [r2, #4]
 800a996:	7a18      	ldrb	r0, [r3, #8]
 800a998:	6853      	ldr	r3, [r2, #4]
 800a99a:	4718      	bx	r3
 800a99c:	20018ba8 	.word	0x20018ba8

0800a9a0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800a9a0:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <disk_initialize+0x20>)
 800a9a2:	5c1a      	ldrb	r2, [r3, r0]
 800a9a4:	b952      	cbnz	r2, 800a9bc <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a9a6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800a9aa:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800a9ac:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a9b0:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800a9b2:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a9b6:	7a08      	ldrb	r0, [r1, #8]
 800a9b8:	6813      	ldr	r3, [r2, #0]
 800a9ba:	4718      	bx	r3
  }
  return stat;
}
 800a9bc:	2000      	movs	r0, #0
 800a9be:	4770      	bx	lr
 800a9c0:	20018ba8 	.word	0x20018ba8

0800a9c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a9c4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a9c6:	4c05      	ldr	r4, [pc, #20]	; (800a9dc <disk_read+0x18>)
 800a9c8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800a9cc:	4404      	add	r4, r0
 800a9ce:	686d      	ldr	r5, [r5, #4]
 800a9d0:	7a20      	ldrb	r0, [r4, #8]
 800a9d2:	68ac      	ldr	r4, [r5, #8]
 800a9d4:	46a4      	mov	ip, r4
  return res;
}
 800a9d6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a9d8:	4760      	bx	ip
 800a9da:	bf00      	nop
 800a9dc:	20018ba8 	.word	0x20018ba8

0800a9e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a9e0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a9e2:	4c05      	ldr	r4, [pc, #20]	; (800a9f8 <disk_write+0x18>)
 800a9e4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800a9e8:	4404      	add	r4, r0
 800a9ea:	686d      	ldr	r5, [r5, #4]
 800a9ec:	7a20      	ldrb	r0, [r4, #8]
 800a9ee:	68ec      	ldr	r4, [r5, #12]
 800a9f0:	46a4      	mov	ip, r4
  return res;
}
 800a9f2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a9f4:	4760      	bx	ip
 800a9f6:	bf00      	nop
 800a9f8:	20018ba8 	.word	0x20018ba8

0800a9fc <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a9fc:	4b04      	ldr	r3, [pc, #16]	; (800aa10 <disk_ioctl+0x14>)
 800a9fe:	eb03 0c00 	add.w	ip, r3, r0
 800aa02:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	4718      	bx	r3
 800aa10:	20018ba8 	.word	0x20018ba8

0800aa14 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800aa14:	4b27      	ldr	r3, [pc, #156]	; (800aab4 <inc_lock+0xa0>)
{
 800aa16:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	6805      	ldr	r5, [r0, #0]
 800aa1c:	4295      	cmp	r5, r2
 800aa1e:	d01b      	beq.n	800aa58 <inc_lock+0x44>
 800aa20:	691c      	ldr	r4, [r3, #16]
 800aa22:	42ac      	cmp	r4, r5
 800aa24:	d006      	beq.n	800aa34 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa26:	b30a      	cbz	r2, 800aa6c <inc_lock+0x58>
 800aa28:	2c00      	cmp	r4, #0
 800aa2a:	d037      	beq.n	800aa9c <inc_lock+0x88>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aa2c:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800aa2e:	4620      	mov	r0, r4
 800aa30:	bcf0      	pop	{r4, r5, r6, r7}
 800aa32:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800aa34:	695e      	ldr	r6, [r3, #20]
 800aa36:	6887      	ldr	r7, [r0, #8]
 800aa38:	42be      	cmp	r6, r7
 800aa3a:	d1f4      	bne.n	800aa26 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 800aa3c:	699e      	ldr	r6, [r3, #24]
 800aa3e:	6947      	ldr	r7, [r0, #20]
 800aa40:	42be      	cmp	r6, r7
 800aa42:	d1f0      	bne.n	800aa26 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aa44:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa46:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800aa4a:	bb51      	cbnz	r1, 800aaa2 <inc_lock+0x8e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa4c:	0111      	lsls	r1, r2, #4
	return i + 1;
 800aa4e:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa50:	8982      	ldrh	r2, [r0, #12]
 800aa52:	3201      	adds	r2, #1
 800aa54:	b292      	uxth	r2, r2
 800aa56:	e01c      	b.n	800aa92 <inc_lock+0x7e>
		if (Files[i].fs == dp->obj.fs &&
 800aa58:	6884      	ldr	r4, [r0, #8]
 800aa5a:	685e      	ldr	r6, [r3, #4]
 800aa5c:	42a6      	cmp	r6, r4
 800aa5e:	d1df      	bne.n	800aa20 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 800aa60:	689c      	ldr	r4, [r3, #8]
 800aa62:	6946      	ldr	r6, [r0, #20]
 800aa64:	42a6      	cmp	r6, r4
 800aa66:	d1db      	bne.n	800aa20 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aa68:	2200      	movs	r2, #0
 800aa6a:	e7ec      	b.n	800aa46 <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa6c:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa6e:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800aa70:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800aa74:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 800aa78:	6882      	ldr	r2, [r0, #8]
		Files[i].fs = dp->obj.fs;
 800aa7a:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800aa7c:	6945      	ldr	r5, [r0, #20]
 800aa7e:	e9cc 2501 	strd	r2, r5, [ip, #4]
		Files[i].ctr = 0;
 800aa82:	f04f 0200 	mov.w	r2, #0
 800aa86:	f8ac 200c 	strh.w	r2, [ip, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa8a:	bf14      	ite	ne
 800aa8c:	f44f 7280 	movne.w	r2, #256	; 0x100
 800aa90:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa92:	440b      	add	r3, r1
}
 800aa94:	4620      	mov	r0, r4
 800aa96:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa98:	819a      	strh	r2, [r3, #12]
}
 800aa9a:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aa9c:	2402      	movs	r4, #2
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	e7e5      	b.n	800aa6e <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aaa2:	8980      	ldrh	r0, [r0, #12]
 800aaa4:	0111      	lsls	r1, r2, #4
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d1c0      	bne.n	800aa2c <inc_lock+0x18>
	return i + 1;
 800aaaa:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aaac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aab0:	e7ef      	b.n	800aa92 <inc_lock+0x7e>
 800aab2:	bf00      	nop
 800aab4:	20018984 	.word	0x20018984

0800aab8 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800aab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aabc:	440a      	add	r2, r1
 800aabe:	460d      	mov	r5, r1
 800aac0:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800aac2:	4f37      	ldr	r7, [pc, #220]	; (800aba0 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800aac4:	42aa      	cmp	r2, r5
 800aac6:	d012      	beq.n	800aaee <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800aac8:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800aacc:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800aad0:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800aad4:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800aad8:	2919      	cmp	r1, #25
 800aada:	d9f3      	bls.n	800aac4 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800aadc:	2c7f      	cmp	r4, #127	; 0x7f
 800aade:	bf88      	it	hi
 800aae0:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800aae4:	2c00      	cmp	r4, #0
 800aae6:	d1ed      	bne.n	800aac4 <pattern_matching+0xc>
 800aae8:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800aaea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800aaee:	1e1f      	subs	r7, r3, #0
 800aaf0:	f896 8000 	ldrb.w	r8, [r6]
 800aaf4:	bf18      	it	ne
 800aaf6:	2701      	movne	r7, #1
 800aaf8:	f1b8 0f00 	cmp.w	r8, #0
 800aafc:	d100      	bne.n	800ab00 <pattern_matching+0x48>
 800aafe:	bb8f      	cbnz	r7, 800ab64 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ab00:	4c27      	ldr	r4, [pc, #156]	; (800aba0 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ab02:	4630      	mov	r0, r6
{
 800ab04:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ab06:	46a9      	mov	r9, r5
 800ab08:	e010      	b.n	800ab2c <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ab0a:	3a20      	subs	r2, #32
 800ab0c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ab0e:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ab12:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ab16:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ab18:	f1bc 0f19 	cmp.w	ip, #25
 800ab1c:	d815      	bhi.n	800ab4a <pattern_matching+0x92>
 800ab1e:	3b20      	subs	r3, #32
 800ab20:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d118      	bne.n	800ab58 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800ab26:	b1eb      	cbz	r3, 800ab64 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800ab28:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ab2c:	2b3f      	cmp	r3, #63	; 0x3f
 800ab2e:	d01c      	beq.n	800ab6a <pattern_matching+0xb2>
 800ab30:	2b2a      	cmp	r3, #42	; 0x2a
 800ab32:	d01a      	beq.n	800ab6a <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ab34:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ab38:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ab3a:	2919      	cmp	r1, #25
 800ab3c:	d9e5      	bls.n	800ab0a <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ab3e:	2a7f      	cmp	r2, #127	; 0x7f
 800ab40:	d9e5      	bls.n	800ab0e <pattern_matching+0x56>
 800ab42:	4423      	add	r3, r4
 800ab44:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800ab48:	e7e1      	b.n	800ab0e <pattern_matching+0x56>
 800ab4a:	2b7f      	cmp	r3, #127	; 0x7f
 800ab4c:	d9e9      	bls.n	800ab22 <pattern_matching+0x6a>
 800ab4e:	4421      	add	r1, r4
 800ab50:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d0e6      	beq.n	800ab26 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ab58:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d0c4      	beq.n	800aae8 <pattern_matching+0x30>
 800ab5e:	2f00      	cmp	r7, #0
 800ab60:	d1cf      	bne.n	800ab02 <pattern_matching+0x4a>
 800ab62:	e7c1      	b.n	800aae8 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800ab64:	2001      	movs	r0, #1
}
 800ab66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6a:	4601      	mov	r1, r0
				nm = nx = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f811 cb01 	ldrb.w	ip, [r1], #1
 800ab72:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800ab74:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800ab78:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800ab7a:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800ab7e:	bf0c      	ite	eq
 800ab80:	3201      	addeq	r2, #1
 800ab82:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800ab84:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800ab88:	d0f4      	beq.n	800ab74 <pattern_matching+0xbc>
 800ab8a:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800ab8e:	d0f1      	beq.n	800ab74 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800ab90:	4649      	mov	r1, r9
 800ab92:	f7ff ff91 	bl	800aab8 <pattern_matching>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d1e4      	bne.n	800ab64 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 800ab9a:	f899 3000 	ldrb.w	r3, [r9]
 800ab9e:	e7db      	b.n	800ab58 <pattern_matching+0xa0>
 800aba0:	08017304 	.word	0x08017304

0800aba4 <get_fileinfo>:
{
 800aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	fno->fname[0] = 0;		/* Invaidate file info */
 800aba8:	2600      	movs	r6, #0
	FATFS *fs = dp->obj.fs;
 800abaa:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800abae:	758e      	strb	r6, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800abb0:	69c3      	ldr	r3, [r0, #28]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d05a      	beq.n	800ac6c <get_fileinfo+0xc8>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800abb6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800abb8:	4607      	mov	r7, r0
 800abba:	460d      	mov	r5, r1
 800abbc:	3301      	adds	r3, #1
 800abbe:	d01e      	beq.n	800abfe <get_fileinfo+0x5a>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800abc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abc4:	8818      	ldrh	r0, [r3, #0]
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d061      	beq.n	800ac8e <get_fileinfo+0xea>
 800abca:	f101 0615 	add.w	r6, r1, #21
 800abce:	2401      	movs	r4, #1
 800abd0:	e000      	b.n	800abd4 <get_fileinfo+0x30>
 800abd2:	461c      	mov	r4, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800abd4:	2100      	movs	r1, #0
 800abd6:	f002 ff4b 	bl	800da70 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800abda:	1c63      	adds	r3, r4, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800abdc:	2800      	cmp	r0, #0
 800abde:	d056      	beq.n	800ac8e <get_fileinfo+0xea>
 800abe0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800abe4:	d053      	beq.n	800ac8e <get_fileinfo+0xea>
				fno->fname[i++] = (TCHAR)w;
 800abe6:	f806 0f01 	strb.w	r0, [r6, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800abea:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800abee:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 800abf2:	2800      	cmp	r0, #0
 800abf4:	d1ed      	bne.n	800abd2 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 800abf6:	442c      	add	r4, r5
 800abf8:	2300      	movs	r3, #0
 800abfa:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800abfc:	7dae      	ldrb	r6, [r5, #22]
 800abfe:	f8d7 c020 	ldr.w	ip, [r7, #32]
	i = j = 0;
 800ac02:	2000      	movs	r0, #0
			fno->altname[j++] = '.';
 800ac04:	f04f 082e 	mov.w	r8, #46	; 0x2e
 800ac08:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	i = j = 0;
 800ac0c:	4602      	mov	r2, r0
		c = (TCHAR)dp->dir[i++];
 800ac0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac12:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800ac14:	2b20      	cmp	r3, #32
 800ac16:	d018      	beq.n	800ac4a <get_fileinfo+0xa6>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ac18:	2b05      	cmp	r3, #5
 800ac1a:	bf08      	it	eq
 800ac1c:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800ac1e:	2a09      	cmp	r2, #9
 800ac20:	d026      	beq.n	800ac70 <get_fileinfo+0xcc>
		fno->altname[j] = c;
 800ac22:	182c      	adds	r4, r5, r0
 800ac24:	7263      	strb	r3, [r4, #9]
		if (!lfv) {
 800ac26:	b97e      	cbnz	r6, 800ac48 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ac28:	f1a3 0741 	sub.w	r7, r3, #65	; 0x41
 800ac2c:	2f19      	cmp	r7, #25
 800ac2e:	d80a      	bhi.n	800ac46 <get_fileinfo+0xa2>
 800ac30:	2a08      	cmp	r2, #8
 800ac32:	f89c e00c 	ldrb.w	lr, [ip, #12]
 800ac36:	bf8c      	ite	hi
 800ac38:	2710      	movhi	r7, #16
 800ac3a:	2708      	movls	r7, #8
 800ac3c:	ea1e 0f07 	tst.w	lr, r7
 800ac40:	d001      	beq.n	800ac46 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800ac42:	3320      	adds	r3, #32
 800ac44:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 800ac46:	75a3      	strb	r3, [r4, #22]
		j++;
 800ac48:	3001      	adds	r0, #1
	while (i < 11) {		/* Copy name body and extension */
 800ac4a:	2a0b      	cmp	r2, #11
 800ac4c:	d1df      	bne.n	800ac0e <get_fileinfo+0x6a>
		fno->fname[j] = 0;
 800ac4e:	182c      	adds	r4, r5, r0
	if (!lfv) {
 800ac50:	b1b6      	cbz	r6, 800ac80 <get_fileinfo+0xdc>
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ac52:	2300      	movs	r3, #0
 800ac54:	7263      	strb	r3, [r4, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ac56:	f89c 300b 	ldrb.w	r3, [ip, #11]
 800ac5a:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800ac5c:	f8dc 301c 	ldr.w	r3, [ip, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ac60:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800ac62:	f8dc 3016 	ldr.w	r3, [ip, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ac66:	0c1a      	lsrs	r2, r3, #16
 800ac68:	80eb      	strh	r3, [r5, #6]
 800ac6a:	80aa      	strh	r2, [r5, #4]
}
 800ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800ac70:	182c      	adds	r4, r5, r0
 800ac72:	b90e      	cbnz	r6, 800ac78 <get_fileinfo+0xd4>
 800ac74:	f884 8016 	strb.w	r8, [r4, #22]
			fno->altname[j++] = '.';
 800ac78:	3001      	adds	r0, #1
 800ac7a:	f884 8009 	strb.w	r8, [r4, #9]
 800ac7e:	e7d0      	b.n	800ac22 <get_fileinfo+0x7e>
		fno->fname[j] = 0;
 800ac80:	75a6      	strb	r6, [r4, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ac82:	f89c 300c 	ldrb.w	r3, [ip, #12]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	bf08      	it	eq
 800ac8a:	462c      	moveq	r4, r5
 800ac8c:	e7e1      	b.n	800ac52 <get_fileinfo+0xae>
			i = j = 0;
 800ac8e:	2400      	movs	r4, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ac90:	2300      	movs	r3, #0
 800ac92:	442c      	add	r4, r5
 800ac94:	75a3      	strb	r3, [r4, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ac96:	7dae      	ldrb	r6, [r5, #22]
 800ac98:	e7b1      	b.n	800abfe <get_fileinfo+0x5a>
 800ac9a:	bf00      	nop

0800ac9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ac9c:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ac9e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800aca2:	2300      	movs	r3, #0
{
 800aca4:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800aca6:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800aca8:	70c3      	strb	r3, [r0, #3]
 800acaa:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800acac:	d00c      	beq.n	800acc8 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800acae:	460d      	mov	r5, r1
 800acb0:	460a      	mov	r2, r1
 800acb2:	2301      	movs	r3, #1
 800acb4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800acb8:	7840      	ldrb	r0, [r0, #1]
 800acba:	f7ff fe83 	bl	800a9c4 <disk_read>
 800acbe:	b110      	cbz	r0, 800acc6 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800acc0:	2004      	movs	r0, #4
			fs->winsect = sector;
 800acc2:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800acc4:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800acc6:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800acc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800accc:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d11a      	bne.n	800ad0a <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800acd4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800acd8:	2be9      	cmp	r3, #233	; 0xe9
 800acda:	d007      	beq.n	800acec <check_fs+0x50>
 800acdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acde:	4a0d      	ldr	r2, [pc, #52]	; (800ad14 <check_fs+0x78>)
 800ace0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d001      	beq.n	800acec <check_fs+0x50>
	return 2;
 800ace8:	2002      	movs	r0, #2
}
 800acea:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800acec:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800acf0:	4a09      	ldr	r2, [pc, #36]	; (800ad18 <check_fs+0x7c>)
 800acf2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d009      	beq.n	800ad0e <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800acfa:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800acfe:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <check_fs+0x80>)
 800ad00:	4298      	cmp	r0, r3
 800ad02:	bf14      	ite	ne
 800ad04:	2002      	movne	r0, #2
 800ad06:	2000      	moveq	r0, #0
}
 800ad08:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ad0a:	2003      	movs	r0, #3
}
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ad0e:	2000      	movs	r0, #0
}
 800ad10:	bd70      	pop	{r4, r5, r6, pc}
 800ad12:	bf00      	nop
 800ad14:	009000eb 	.word	0x009000eb
 800ad18:	00544146 	.word	0x00544146
 800ad1c:	33544146 	.word	0x33544146

0800ad20 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ad20:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ad22:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ad24:	b083      	sub	sp, #12
 800ad26:	4604      	mov	r4, r0
 800ad28:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ad2a:	b973      	cbnz	r3, 800ad4a <move_window.part.0+0x2a>
 800ad2c:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ad30:	2301      	movs	r3, #1
 800ad32:	462a      	mov	r2, r5
 800ad34:	7860      	ldrb	r0, [r4, #1]
 800ad36:	f7ff fe45 	bl	800a9c4 <disk_read>
 800ad3a:	b910      	cbnz	r0, 800ad42 <move_window.part.0+0x22>
			fs->winsect = sector;
 800ad3c:	6325      	str	r5, [r4, #48]	; 0x30
}
 800ad3e:	b003      	add	sp, #12
 800ad40:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 800ad42:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ad44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ad48:	e7f8      	b.n	800ad3c <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 800ad4a:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ad4c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800ad50:	2301      	movs	r3, #1
 800ad52:	7840      	ldrb	r0, [r0, #1]
 800ad54:	4632      	mov	r2, r6
 800ad56:	9101      	str	r1, [sp, #4]
 800ad58:	f7ff fe42 	bl	800a9e0 <disk_write>
 800ad5c:	b9b8      	cbnz	r0, 800ad8e <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ad5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ad60:	69e3      	ldr	r3, [r4, #28]
 800ad62:	1ab2      	subs	r2, r6, r2
 800ad64:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 800ad66:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d2e1      	bcs.n	800ad30 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad6c:	78a7      	ldrb	r7, [r4, #2]
 800ad6e:	2f01      	cmp	r7, #1
 800ad70:	d801      	bhi.n	800ad76 <move_window.part.0+0x56>
 800ad72:	e7dd      	b.n	800ad30 <move_window.part.0+0x10>
					wsect += fs->fsize;
 800ad74:	69e3      	ldr	r3, [r4, #28]
 800ad76:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad78:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	7860      	ldrb	r0, [r4, #1]
 800ad7e:	4632      	mov	r2, r6
 800ad80:	9101      	str	r1, [sp, #4]
 800ad82:	f7ff fe2d 	bl	800a9e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ad86:	2f01      	cmp	r7, #1
 800ad88:	9901      	ldr	r1, [sp, #4]
 800ad8a:	d1f3      	bne.n	800ad74 <move_window.part.0+0x54>
 800ad8c:	e7d0      	b.n	800ad30 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 800ad8e:	2001      	movs	r0, #1
}
 800ad90:	b003      	add	sp, #12
 800ad92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ad98:	2300      	movs	r3, #0
	if (*path) {	/* If the pointer is not a null */
 800ad9a:	6804      	ldr	r4, [r0, #0]
	*rfs = 0;
 800ad9c:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800ad9e:	b18c      	cbz	r4, 800adc4 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ada0:	7825      	ldrb	r5, [r4, #0]
 800ada2:	2d1f      	cmp	r5, #31
 800ada4:	d912      	bls.n	800adcc <find_volume+0x38>
 800ada6:	2d3a      	cmp	r5, #58	; 0x3a
 800ada8:	d010      	beq.n	800adcc <find_volume+0x38>
 800adaa:	46a4      	mov	ip, r4
 800adac:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800adb0:	2b1f      	cmp	r3, #31
 800adb2:	d90d      	bls.n	800add0 <find_volume+0x3c>
 800adb4:	2b3a      	cmp	r3, #58	; 0x3a
 800adb6:	d1f9      	bne.n	800adac <find_volume+0x18>
			i = *tp++ - '0';
 800adb8:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800adba:	45a4      	cmp	ip, r4
 800adbc:	d102      	bne.n	800adc4 <find_volume+0x30>
 800adbe:	2d30      	cmp	r5, #48	; 0x30
 800adc0:	f000 80da 	beq.w	800af78 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800adc4:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800adc6:	4620      	mov	r0, r4
 800adc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800adcc:	462b      	mov	r3, r5
 800adce:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800add0:	2b3a      	cmp	r3, #58	; 0x3a
 800add2:	d0f1      	beq.n	800adb8 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800add4:	4ba6      	ldr	r3, [pc, #664]	; (800b070 <find_volume+0x2dc>)
 800add6:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800add8:	2d00      	cmp	r5, #0
 800adda:	f000 80c9 	beq.w	800af70 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 800adde:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ade0:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ade4:	782b      	ldrb	r3, [r5, #0]
 800ade6:	b17b      	cbz	r3, 800ae08 <find_volume+0x74>
		stat = disk_status(fs->drv);
 800ade8:	7868      	ldrb	r0, [r5, #1]
 800adea:	f7ff fdcf 	bl	800a98c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800adee:	07c1      	lsls	r1, r0, #31
 800adf0:	d40a      	bmi.n	800ae08 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800adf2:	2c00      	cmp	r4, #0
 800adf4:	f000 80ab 	beq.w	800af4e <find_volume+0x1ba>
 800adf8:	f010 0404 	ands.w	r4, r0, #4
 800adfc:	f000 80a7 	beq.w	800af4e <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 800ae00:	240a      	movs	r4, #10
}
 800ae02:	4620      	mov	r0, r4
 800ae04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800ae08:	2000      	movs	r0, #0
 800ae0a:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae0c:	f7ff fdc8 	bl	800a9a0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ae10:	07c2      	lsls	r2, r0, #31
 800ae12:	f100 809f 	bmi.w	800af54 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ae16:	b10c      	cbz	r4, 800ae1c <find_volume+0x88>
 800ae18:	0743      	lsls	r3, r0, #29
 800ae1a:	d4f1      	bmi.n	800ae00 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f7ff ff3c 	bl	800ac9c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ae24:	2802      	cmp	r0, #2
 800ae26:	d077      	beq.n	800af18 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ae28:	2804      	cmp	r0, #4
 800ae2a:	f000 809f 	beq.w	800af6c <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ae2e:	2801      	cmp	r0, #1
 800ae30:	f200 808c 	bhi.w	800af4c <find_volume+0x1b8>
	bsect = 0;
 800ae34:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ae36:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 800ae3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae3e:	f040 8085 	bne.w	800af4c <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ae42:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ae46:	b902      	cbnz	r2, 800ae4a <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 800ae48:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ae4a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 800ae4e:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ae50:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ae52:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ae54:	2901      	cmp	r1, #1
 800ae56:	d879      	bhi.n	800af4c <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ae58:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 800ae5c:	b288      	uxth	r0, r1
 800ae5e:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d073      	beq.n	800af4c <find_volume+0x1b8>
 800ae64:	1e48      	subs	r0, r1, #1
 800ae66:	4208      	tst	r0, r1
 800ae68:	d170      	bne.n	800af4c <find_volume+0x1b8>
	rv = ptr[1];
 800ae6a:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ae6e:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ae72:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ae76:	d169      	bne.n	800af4c <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ae78:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ae7c:	b900      	cbnz	r0, 800ae80 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 800ae7e:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
 800ae80:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ae84:	2f00      	cmp	r7, #0
 800ae86:	d061      	beq.n	800af4c <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ae88:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ae8c:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 800ae90:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ae92:	42b0      	cmp	r0, r6
 800ae94:	d35a      	bcc.n	800af4c <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ae96:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ae9a:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ae9c:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800aea0:	d354      	bcc.n	800af4c <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800aea2:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 800aea6:	4288      	cmp	r0, r1
 800aea8:	f200 8084 	bhi.w	800afb4 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800aeac:	f640 71f5 	movw	r1, #4085	; 0xff5
 800aeb0:	4288      	cmp	r0, r1
 800aeb2:	f200 80a3 	bhi.w	800affc <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aeb6:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800aeb8:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800aeba:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800aebc:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800aebe:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800aec0:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800aec2:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aec4:	f1bc 0f00 	cmp.w	ip, #0
 800aec8:	d040      	beq.n	800af4c <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aeca:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800aece:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aed2:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aed4:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 800aed8:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aeda:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aedc:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800aee0:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 800aee4:	d332      	bcc.n	800af4c <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800aeea:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aeec:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 800aef0:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800aef2:	4960      	ldr	r1, [pc, #384]	; (800b074 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800aef4:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aef6:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800aef8:	485f      	ldr	r0, [pc, #380]	; (800b078 <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aefa:	4a60      	ldr	r2, [pc, #384]	; (800b07c <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
 800aefc:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800aefe:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af00:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800af02:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af04:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 800af06:	800b      	strh	r3, [r1, #0]
 800af08:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800af0a:	f000 8086 	beq.w	800b01a <find_volume+0x286>
 800af0e:	6913      	ldr	r3, [r2, #16]
 800af10:	429d      	cmp	r5, r3
 800af12:	d06f      	beq.n	800aff4 <find_volume+0x260>
	return FR_OK;
 800af14:	2400      	movs	r4, #0
 800af16:	e01a      	b.n	800af4e <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af18:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 800af1c:	b10e      	cbz	r6, 800af22 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 800af1e:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af22:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 800af26:	b10c      	cbz	r4, 800af2c <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800af28:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af2c:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 800af30:	b303      	cbz	r3, 800af74 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 800af32:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af36:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 800af3a:	b10f      	cbz	r7, 800af40 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 800af3c:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af40:	b9f6      	cbnz	r6, 800af80 <find_volume+0x1ec>
 800af42:	bb2c      	cbnz	r4, 800af90 <find_volume+0x1fc>
 800af44:	f1b8 0f00 	cmp.w	r8, #0
 800af48:	d12c      	bne.n	800afa4 <find_volume+0x210>
 800af4a:	b93f      	cbnz	r7, 800af5c <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800af4c:	240d      	movs	r4, #13
}
 800af4e:	4620      	mov	r0, r4
 800af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af54:	2403      	movs	r4, #3
}
 800af56:	4620      	mov	r0, r4
 800af58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af5c:	4639      	mov	r1, r7
 800af5e:	4628      	mov	r0, r5
 800af60:	f7ff fe9c 	bl	800ac9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af64:	2801      	cmp	r0, #1
 800af66:	d95b      	bls.n	800b020 <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af68:	2804      	cmp	r0, #4
 800af6a:	d1ef      	bne.n	800af4c <find_volume+0x1b8>
 800af6c:	2401      	movs	r4, #1
 800af6e:	e7ee      	b.n	800af4e <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800af70:	240c      	movs	r4, #12
 800af72:	e7ec      	b.n	800af4e <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800af74:	4698      	mov	r8, r3
 800af76:	e7de      	b.n	800af36 <find_volume+0x1a2>
					*path = ++tt;
 800af78:	f10c 0301 	add.w	r3, ip, #1
 800af7c:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800af7e:	e729      	b.n	800add4 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af80:	4631      	mov	r1, r6
 800af82:	4628      	mov	r0, r5
 800af84:	f7ff fe8a 	bl	800ac9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af88:	2801      	cmp	r0, #1
 800af8a:	d8da      	bhi.n	800af42 <find_volume+0x1ae>
 800af8c:	4634      	mov	r4, r6
 800af8e:	e752      	b.n	800ae36 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af90:	4621      	mov	r1, r4
 800af92:	4628      	mov	r0, r5
 800af94:	f7ff fe82 	bl	800ac9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800af98:	2801      	cmp	r0, #1
 800af9a:	f67f af4c 	bls.w	800ae36 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800af9e:	f1b8 0f00 	cmp.w	r8, #0
 800afa2:	d0d2      	beq.n	800af4a <find_volume+0x1b6>
 800afa4:	4641      	mov	r1, r8
 800afa6:	4628      	mov	r0, r5
 800afa8:	f7ff fe78 	bl	800ac9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800afac:	2801      	cmp	r0, #1
 800afae:	d8cc      	bhi.n	800af4a <find_volume+0x1b6>
 800afb0:	4644      	mov	r4, r8
 800afb2:	e740      	b.n	800ae36 <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
 800afb4:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800afb8:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800afba:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800afbc:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800afbe:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800afc2:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800afc4:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800afc6:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800afc8:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800afca:	d1bf      	bne.n	800af4c <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800afcc:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 800afce:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800afd0:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800afd4:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800afd6:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800afda:	d3b7      	bcc.n	800af4c <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800afdc:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800afe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800afe4:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800afe6:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800afe8:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800afea:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800afee:	d019      	beq.n	800b024 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aff0:	2003      	movs	r0, #3
 800aff2:	e77e      	b.n	800aef2 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aff4:	2300      	movs	r3, #0
	return FR_OK;
 800aff6:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aff8:	6113      	str	r3, [r2, #16]
 800affa:	e7a8      	b.n	800af4e <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800affc:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800affe:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800b000:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800b002:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b004:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800b006:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b008:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b00a:	f1bc 0f00 	cmp.w	ip, #0
 800b00e:	d09d      	beq.n	800af4c <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b010:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b012:	0049      	lsls	r1, r1, #1
 800b014:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b016:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b018:	e760      	b.n	800aedc <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	6013      	str	r3, [r2, #0]
 800b01e:	e776      	b.n	800af0e <find_volume+0x17a>
 800b020:	463c      	mov	r4, r7
 800b022:	e708      	b.n	800ae36 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b024:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b026:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b028:	4299      	cmp	r1, r3
 800b02a:	d004      	beq.n	800b036 <find_volume+0x2a2>
 800b02c:	4628      	mov	r0, r5
 800b02e:	f7ff fe77 	bl	800ad20 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b032:	2800      	cmp	r0, #0
 800b034:	d1dc      	bne.n	800aff0 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b036:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b03a:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 800b03e:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b040:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 800b042:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b044:	d1d4      	bne.n	800aff0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800b046:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b048:	4b0d      	ldr	r3, [pc, #52]	; (800b080 <find_volume+0x2ec>)
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d1d0      	bne.n	800aff0 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b04e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800b052:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b056:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b05a:	3320      	adds	r3, #32
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d1c7      	bne.n	800aff0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800b060:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b064:	2003      	movs	r0, #3
 800b066:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 800b06a:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800b06e:	e740      	b.n	800aef2 <find_volume+0x15e>
 800b070:	20018980 	.word	0x20018980
 800b074:	200189a4 	.word	0x200189a4
 800b078:	200189a8 	.word	0x200189a8
 800b07c:	20018984 	.word	0x20018984
 800b080:	41615252 	.word	0x41615252

0800b084 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 800b088:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800b08a:	4604      	mov	r4, r0
 800b08c:	460d      	mov	r5, r1
 800b08e:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800b090:	2b02      	cmp	r3, #2
 800b092:	d006      	beq.n	800b0a2 <put_fat.part.0+0x1e>
 800b094:	2b03      	cmp	r3, #3
 800b096:	d052      	beq.n	800b13e <put_fat.part.0+0xba>
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d01b      	beq.n	800b0d4 <put_fat.part.0+0x50>
 800b09c:	2002      	movs	r0, #2
}
 800b09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b0a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b0a6:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0aa:	4299      	cmp	r1, r3
 800b0ac:	d003      	beq.n	800b0b6 <put_fat.part.0+0x32>
 800b0ae:	f7ff fe37 	bl	800ad20 <move_window.part.0>
			if (res != FR_OK) break;
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d1f3      	bne.n	800b09e <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b0b6:	006d      	lsls	r5, r5, #1
 800b0b8:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800b0bc:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
 800b0c0:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b0c2:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800b0c6:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b0c8:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
 800b0ca:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800b0cc:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 800b0ce:	70e3      	strb	r3, [r4, #3]
}
 800b0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 800b0d4:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b0d8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0da:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b0dc:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	d003      	beq.n	800b0ec <put_fat.part.0+0x68>
 800b0e4:	f7ff fe1c 	bl	800ad20 <move_window.part.0>
			if (res != FR_OK) break;
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d1d8      	bne.n	800b09e <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b0ec:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 800b0ee:	f107 0801 	add.w	r8, r7, #1
 800b0f2:	f104 0934 	add.w	r9, r4, #52	; 0x34
 800b0f6:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b0fa:	d542      	bpl.n	800b182 <put_fat.part.0+0xfe>
 800b0fc:	f819 3007 	ldrb.w	r3, [r9, r7]
 800b100:	f003 030f 	and.w	r3, r3, #15
 800b104:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 800b108:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
 800b10c:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b10e:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800b110:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b112:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b116:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b118:	4299      	cmp	r1, r3
 800b11a:	d004      	beq.n	800b126 <put_fat.part.0+0xa2>
 800b11c:	4620      	mov	r0, r4
 800b11e:	f7ff fdff 	bl	800ad20 <move_window.part.0>
			if (res != FR_OK) break;
 800b122:	2800      	cmp	r0, #0
 800b124:	d1bb      	bne.n	800b09e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800b126:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b12a:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 800b12e:	44c8      	add	r8, r9
			fs->wflag = 1;
 800b130:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b132:	f888 2000 	strb.w	r2, [r8]
			break;
 800b136:	2000      	movs	r0, #0
			fs->wflag = 1;
 800b138:	70e3      	strb	r3, [r4, #3]
}
 800b13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b13e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b140:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b142:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b146:	4299      	cmp	r1, r3
 800b148:	d003      	beq.n	800b152 <put_fat.part.0+0xce>
 800b14a:	f7ff fde9 	bl	800ad20 <move_window.part.0>
			if (res != FR_OK) break;
 800b14e:	2800      	cmp	r0, #0
 800b150:	d1a5      	bne.n	800b09e <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b152:	00ad      	lsls	r5, r5, #2
 800b154:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800b158:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 800b15c:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800b160:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b162:	1941      	adds	r1, r0, r5
 800b164:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b168:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
 800b16a:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800b16c:	5542      	strb	r2, [r0, r5]
 800b16e:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800b170:	708b      	strb	r3, [r1, #2]
 800b172:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
 800b174:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800b176:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
 800b178:	70ca      	strb	r2, [r1, #3]
			break;
 800b17a:	2000      	movs	r0, #0
			fs->wflag = 1;
 800b17c:	70e3      	strb	r3, [r4, #3]
}
 800b17e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b182:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 800b186:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b188:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800b18a:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b18c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b190:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b192:	4299      	cmp	r1, r3
 800b194:	d005      	beq.n	800b1a2 <put_fat.part.0+0x11e>
 800b196:	4620      	mov	r0, r4
 800b198:	f7ff fdc2 	bl	800ad20 <move_window.part.0>
			if (res != FR_OK) break;
 800b19c:	2800      	cmp	r0, #0
 800b19e:	f47f af7e 	bne.w	800b09e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800b1a2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b1a6:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 800b1aa:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b1ac:	f898 3000 	ldrb.w	r3, [r8]
 800b1b0:	f023 060f 	bic.w	r6, r3, #15
 800b1b4:	4332      	orrs	r2, r6
 800b1b6:	e7bb      	b.n	800b130 <put_fat.part.0+0xac>

0800b1b8 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b1b8:	2901      	cmp	r1, #1
 800b1ba:	d90e      	bls.n	800b1da <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b1be:	6983      	ldr	r3, [r0, #24]
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	4299      	cmp	r1, r3
 800b1c6:	d206      	bcs.n	800b1d6 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800b1c8:	7803      	ldrb	r3, [r0, #0]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d03e      	beq.n	800b24c <get_fat.isra.0+0x94>
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d02b      	beq.n	800b22a <get_fat.isra.0+0x72>
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d003      	beq.n	800b1de <get_fat.isra.0+0x26>
 800b1d6:	2001      	movs	r0, #1
}
 800b1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800b1da:	2001      	movs	r0, #1
}
 800b1dc:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 800b1de:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1e4:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1e6:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1ea:	4291      	cmp	r1, r2
 800b1ec:	d004      	beq.n	800b1f8 <get_fat.isra.0+0x40>
 800b1ee:	f7ff fd97 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1f2:	bba0      	cbnz	r0, 800b25e <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1f6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800b1f8:	1c77      	adds	r7, r6, #1
 800b1fa:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b1fe:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b202:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b204:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800b206:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b20a:	d003      	beq.n	800b214 <get_fat.isra.0+0x5c>
 800b20c:	4628      	mov	r0, r5
 800b20e:	f7ff fd87 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b212:	bb20      	cbnz	r0, 800b25e <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b214:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b218:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800b21a:	443d      	add	r5, r7
 800b21c:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 800b220:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b224:	d524      	bpl.n	800b270 <get_fat.isra.0+0xb8>
 800b226:	0900      	lsrs	r0, r0, #4
}
 800b228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b22a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b22c:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b22e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b232:	4299      	cmp	r1, r3
 800b234:	d002      	beq.n	800b23c <get_fat.isra.0+0x84>
 800b236:	f7ff fd73 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b23a:	b980      	cbnz	r0, 800b25e <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b23c:	00a4      	lsls	r4, r4, #2
 800b23e:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800b242:	4425      	add	r5, r4
 800b244:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b246:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800b24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b24c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b24e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b250:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b254:	4299      	cmp	r1, r3
 800b256:	d005      	beq.n	800b264 <get_fat.isra.0+0xac>
 800b258:	f7ff fd62 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b25c:	b110      	cbz	r0, 800b264 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b25e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b264:	0064      	lsls	r4, r4, #1
 800b266:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800b26a:	4425      	add	r5, r4
 800b26c:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 800b26e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b270:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 800b274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b276:	bf00      	nop

0800b278 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 800b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b27c:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b27e:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b280:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b282:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800b286:	d22c      	bcs.n	800b2e2 <dir_next.constprop.0+0x6a>
 800b288:	b35b      	cbz	r3, 800b2e2 <dir_next.constprop.0+0x6a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b28a:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800b28e:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800b290:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b292:	b137      	cbz	r7, 800b2a2 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b294:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 800b296:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800b298:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b29a:	443e      	add	r6, r7
 800b29c:	6226      	str	r6, [r4, #32]
}
 800b29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 800b2a2:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800b2a4:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800b2a6:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800b2a8:	b1f1      	cbz	r1, 800b2e8 <dir_next.constprop.0+0x70>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b2aa:	8973      	ldrh	r3, [r6, #10]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 800b2b2:	d1ef      	bne.n	800b294 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f7ff ff7f 	bl	800b1b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b2ba:	2801      	cmp	r0, #1
 800b2bc:	d91c      	bls.n	800b2f8 <dir_next.constprop.0+0x80>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b2be:	1c43      	adds	r3, r0, #1
 800b2c0:	d01c      	beq.n	800b2fc <dir_next.constprop.0+0x84>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b2c2:	69b3      	ldr	r3, [r6, #24]
 800b2c4:	4298      	cmp	r0, r3
 800b2c6:	d213      	bcs.n	800b2f0 <dir_next.constprop.0+0x78>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b2c8:	3b02      	subs	r3, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800b2ca:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800b2cc:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b2ce:	4298      	cmp	r0, r3
 800b2d0:	d204      	bcs.n	800b2dc <dir_next.constprop.0+0x64>
	return clst * fs->csize + fs->database;
 800b2d2:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 800b2d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b2d8:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 800b2dc:	f8c4 801c 	str.w	r8, [r4, #28]
 800b2e0:	e7d8      	b.n	800b294 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b2e2:	2004      	movs	r0, #4
}
 800b2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b2e8:	8933      	ldrh	r3, [r6, #8]
 800b2ea:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800b2ee:	d8d1      	bhi.n	800b294 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	2004      	movs	r0, #4
 800b2f4:	61e3      	str	r3, [r4, #28]
 800b2f6:	e7d2      	b.n	800b29e <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b2f8:	2002      	movs	r0, #2
 800b2fa:	e7d0      	b.n	800b29e <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e7ce      	b.n	800b29e <dir_next.constprop.0+0x26>

0800b300 <dir_read>:
{
 800b300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800b304:	69c6      	ldr	r6, [r0, #28]
{
 800b306:	b083      	sub	sp, #12
 800b308:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800b30a:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 800b30c:	2e00      	cmp	r6, #0
 800b30e:	d060      	beq.n	800b3d2 <dir_read+0xd2>
	BYTE ord = 0xFF, sum = 0xFF;
 800b310:	23ff      	movs	r3, #255	; 0xff
 800b312:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b314:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 800b318:	4698      	mov	r8, r3
 800b31a:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b31c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800b31e:	42b5      	cmp	r5, r6
 800b320:	d013      	beq.n	800b34a <dir_read+0x4a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b322:	78fb      	ldrb	r3, [r7, #3]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d16d      	bne.n	800b404 <dir_read+0x104>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b328:	2301      	movs	r3, #1
 800b32a:	4632      	mov	r2, r6
 800b32c:	4649      	mov	r1, r9
 800b32e:	7878      	ldrb	r0, [r7, #1]
 800b330:	f7ff fb48 	bl	800a9c4 <disk_read>
 800b334:	b140      	cbz	r0, 800b348 <dir_read+0x48>
			fs->winsect = sector;
 800b336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800b33a:	2001      	movs	r0, #1
			fs->winsect = sector;
 800b33c:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b33e:	2300      	movs	r3, #0
 800b340:	61e3      	str	r3, [r4, #28]
}
 800b342:	b003      	add	sp, #12
 800b344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800b348:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b34a:	6a21      	ldr	r1, [r4, #32]
 800b34c:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800b34e:	2a00      	cmp	r2, #0
 800b350:	d03f      	beq.n	800b3d2 <dir_read+0xd2>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b352:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b354:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b35a:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b35c:	d00a      	beq.n	800b374 <dir_read+0x74>
 800b35e:	2a2e      	cmp	r2, #46	; 0x2e
 800b360:	d008      	beq.n	800b374 <dir_read+0x74>
 800b362:	f023 0020 	bic.w	r0, r3, #32
 800b366:	f1a0 0008 	sub.w	r0, r0, #8
 800b36a:	fab0 f080 	clz	r0, r0
 800b36e:	0940      	lsrs	r0, r0, #5
 800b370:	4550      	cmp	r0, sl
 800b372:	d035      	beq.n	800b3e0 <dir_read+0xe0>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b374:	6965      	ldr	r5, [r4, #20]
				ord = 0xFF;
 800b376:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b37a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b37c:	69e6      	ldr	r6, [r4, #28]
 800b37e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800b382:	d226      	bcs.n	800b3d2 <dir_read+0xd2>
 800b384:	b32e      	cbz	r6, 800b3d2 <dir_read+0xd2>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b386:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 800b38a:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b38c:	bb1a      	cbnz	r2, 800b3d6 <dir_read+0xd6>
		dp->sect++;				/* Next sector */
 800b38e:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800b390:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800b392:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800b394:	b961      	cbnz	r1, 800b3b0 <dir_read+0xb0>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b396:	891a      	ldrh	r2, [r3, #8]
 800b398:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800b39c:	d919      	bls.n	800b3d2 <dir_read+0xd2>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b39e:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800b3a0:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b3a2:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800b3a4:	2e00      	cmp	r6, #0
 800b3a6:	d1b9      	bne.n	800b31c <dir_read+0x1c>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b3a8:	2000      	movs	r0, #0
}
 800b3aa:	b003      	add	sp, #12
 800b3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b3b0:	895a      	ldrh	r2, [r3, #10]
 800b3b2:	3a01      	subs	r2, #1
 800b3b4:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 800b3b8:	d1f1      	bne.n	800b39e <dir_read+0x9e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	f7ff fefb 	bl	800b1b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b3c2:	2801      	cmp	r0, #1
 800b3c4:	d952      	bls.n	800b46c <dir_read+0x16c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b3c6:	1c43      	adds	r3, r0, #1
 800b3c8:	d023      	beq.n	800b412 <dir_read+0x112>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b3ca:	9b01      	ldr	r3, [sp, #4]
 800b3cc:	699a      	ldr	r2, [r3, #24]
 800b3ce:	4290      	cmp	r0, r2
 800b3d0:	d341      	bcc.n	800b456 <dir_read+0x156>
	FRESULT res = FR_NO_FILE;
 800b3d2:	2004      	movs	r0, #4
 800b3d4:	e7b3      	b.n	800b33e <dir_read+0x3e>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b3d6:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800b3d8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b3da:	441a      	add	r2, r3
 800b3dc:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 800b3de:	e79d      	b.n	800b31c <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b3e0:	2b0f      	cmp	r3, #15
 800b3e2:	f040 80ae 	bne.w	800b542 <dir_read+0x242>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b3e6:	0650      	lsls	r0, r2, #25
 800b3e8:	d515      	bpl.n	800b416 <dir_read+0x116>
						sum = dp->dir[LDIR_Chksum];
 800b3ea:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800b3ec:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800b3f0:	6965      	ldr	r5, [r4, #20]
 800b3f2:	4618      	mov	r0, r3
						sum = dp->dir[LDIR_Chksum];
 800b3f4:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 800b3f6:	6325      	str	r5, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b3f8:	7b4b      	ldrb	r3, [r1, #13]
 800b3fa:	4283      	cmp	r3, r0
 800b3fc:	d038      	beq.n	800b470 <dir_read+0x170>
 800b3fe:	f04f 08ff 	mov.w	r8, #255	; 0xff
 800b402:	e7ba      	b.n	800b37a <dir_read+0x7a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b404:	2301      	movs	r3, #1
 800b406:	462a      	mov	r2, r5
 800b408:	4649      	mov	r1, r9
 800b40a:	7878      	ldrb	r0, [r7, #1]
 800b40c:	f7ff fae8 	bl	800a9e0 <disk_write>
 800b410:	b130      	cbz	r0, 800b420 <dir_read+0x120>
	FRESULT res = FR_NO_FILE;
 800b412:	2001      	movs	r0, #1
 800b414:	e793      	b.n	800b33e <dir_read+0x3e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b416:	4590      	cmp	r8, r2
						dp->blk_ofs = dp->dptr;
 800b418:	6965      	ldr	r5, [r4, #20]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b41a:	d1f0      	bne.n	800b3fe <dir_read+0xfe>
 800b41c:	9800      	ldr	r0, [sp, #0]
 800b41e:	e7eb      	b.n	800b3f8 <dir_read+0xf8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800b422:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b424:	1aea      	subs	r2, r5, r3
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	429a      	cmp	r2, r3
 800b42a:	f4bf af7d 	bcs.w	800b328 <dir_read+0x28>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b42e:	f897 b002 	ldrb.w	fp, [r7, #2]
 800b432:	f1bb 0f01 	cmp.w	fp, #1
 800b436:	d801      	bhi.n	800b43c <dir_read+0x13c>
 800b438:	e776      	b.n	800b328 <dir_read+0x28>
					wsect += fs->fsize;
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b43e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800b442:	2301      	movs	r3, #1
 800b444:	4649      	mov	r1, r9
 800b446:	462a      	mov	r2, r5
 800b448:	7878      	ldrb	r0, [r7, #1]
 800b44a:	f7ff fac9 	bl	800a9e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b44e:	f1bb 0f01 	cmp.w	fp, #1
 800b452:	d1f2      	bne.n	800b43a <dir_read+0x13a>
 800b454:	e768      	b.n	800b328 <dir_read+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b456:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800b458:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800b45a:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b45c:	4290      	cmp	r0, r2
 800b45e:	d26a      	bcs.n	800b536 <dir_read+0x236>
	return clst * fs->csize + fs->database;
 800b460:	895a      	ldrh	r2, [r3, #10]
 800b462:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800b464:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 800b468:	61e6      	str	r6, [r4, #28]
 800b46a:	e798      	b.n	800b39e <dir_read+0x9e>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b46c:	2002      	movs	r0, #2
 800b46e:	e766      	b.n	800b33e <dir_read+0x3e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b470:	8b4b      	ldrh	r3, [r1, #26]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1c3      	bne.n	800b3fe <dir_read+0xfe>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b476:	780b      	ldrb	r3, [r1, #0]
 800b478:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 800b47c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b480:	3b01      	subs	r3, #1
 800b482:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800b486:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b48a:	2bfe      	cmp	r3, #254	; 0xfe
 800b48c:	d8b7      	bhi.n	800b3fe <dir_read+0xfe>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b48e:	68fe      	ldr	r6, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b490:	f103 0801 	add.w	r8, r3, #1
 800b494:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
 800b498:	f8b1 c003 	ldrh.w	ip, [r1, #3]
		if (wc) {
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d159      	bne.n	800b554 <dir_read+0x254>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b4a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4a4:	459c      	cmp	ip, r3
 800b4a6:	d1aa      	bne.n	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b4a8:	f8b1 b005 	ldrh.w	fp, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b4ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4b0:	459b      	cmp	fp, r3
 800b4b2:	d1a4      	bne.n	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b4b4:	f8b1 e007 	ldrh.w	lr, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b4b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4bc:	459e      	cmp	lr, r3
 800b4be:	d19e      	bne.n	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b4c0:	f8b1 c009 	ldrh.w	ip, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b4c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4c8:	459c      	cmp	ip, r3
 800b4ca:	d198      	bne.n	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b4cc:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b4d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4d4:	459e      	cmp	lr, r3
 800b4d6:	d192      	bne.n	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b4d8:	f8b1 b010 	ldrh.w	fp, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b4dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4e0:	459b      	cmp	fp, r3
 800b4e2:	d18c      	bne.n	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b4e4:	f8b1 c012 	ldrh.w	ip, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b4e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4ec:	459c      	cmp	ip, r3
 800b4ee:	d186      	bne.n	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b4f0:	f8b1 e014 	ldrh.w	lr, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b4f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4f8:	459e      	cmp	lr, r3
 800b4fa:	d180      	bne.n	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b4fc:	f8b1 c016 	ldrh.w	ip, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b504:	459c      	cmp	ip, r3
 800b506:	f47f af7a 	bne.w	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b50a:	f8b1 e018 	ldrh.w	lr, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b50e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b512:	459e      	cmp	lr, r3
 800b514:	f47f af73 	bne.w	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b518:	f8b1 c01c 	ldrh.w	ip, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b51c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b520:	459c      	cmp	ip, r3
 800b522:	f47f af6c 	bne.w	800b3fe <dir_read+0xfe>
	rv = ptr[1];
 800b526:	f8b1 e01e 	ldrh.w	lr, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b52a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b52e:	459e      	cmp	lr, r3
 800b530:	f000 80b1 	beq.w	800b696 <dir_read+0x396>
 800b534:	e763      	b.n	800b3fe <dir_read+0xfe>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b536:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b538:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 800b53c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b53e:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800b540:	e732      	b.n	800b3a8 <dir_read+0xa8>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b542:	f1b8 0f00 	cmp.w	r8, #0
 800b546:	f000 80b4 	beq.w	800b6b2 <dir_read+0x3b2>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b54a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b54e:	2000      	movs	r0, #0
 800b550:	6323      	str	r3, [r4, #48]	; 0x30
 800b552:	e6f6      	b.n	800b342 <dir_read+0x42>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b554:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b558:	f43f af0f 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b55c:	f826 c018 	strh.w	ip, [r6, r8, lsl #1]
 800b560:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800b564:	f8b1 b005 	ldrh.w	fp, [r1, #5]
 800b568:	f103 0802 	add.w	r8, r3, #2
		if (wc) {
 800b56c:	f1bc 0f00 	cmp.w	ip, #0
 800b570:	d09c      	beq.n	800b4ac <dir_read+0x1ac>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b572:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b576:	f43f af00 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b57a:	4430      	add	r0, r6
 800b57c:	f103 0803 	add.w	r8, r3, #3
 800b580:	f8a0 b002 	strh.w	fp, [r0, #2]
 800b584:	f8b1 e007 	ldrh.w	lr, [r1, #7]
		if (wc) {
 800b588:	f1bb 0f00 	cmp.w	fp, #0
 800b58c:	d094      	beq.n	800b4b8 <dir_read+0x1b8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b58e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b592:	f43f aef2 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b596:	f8a0 e004 	strh.w	lr, [r0, #4]
 800b59a:	f103 0804 	add.w	r8, r3, #4
	rv = ptr[1];
 800b59e:	f8b1 c009 	ldrh.w	ip, [r1, #9]
		if (wc) {
 800b5a2:	f1be 0f00 	cmp.w	lr, #0
 800b5a6:	d08d      	beq.n	800b4c4 <dir_read+0x1c4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b5a8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b5ac:	f43f aee5 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b5b0:	f8a0 c006 	strh.w	ip, [r0, #6]
 800b5b4:	f103 0805 	add.w	r8, r3, #5
	rv = ptr[1];
 800b5b8:	f8b1 e00e 	ldrh.w	lr, [r1, #14]
		if (wc) {
 800b5bc:	f1bc 0f00 	cmp.w	ip, #0
 800b5c0:	d086      	beq.n	800b4d0 <dir_read+0x1d0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b5c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b5c6:	f43f aed8 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b5ca:	f8a0 e008 	strh.w	lr, [r0, #8]
 800b5ce:	f103 0806 	add.w	r8, r3, #6
	rv = ptr[1];
 800b5d2:	f8b1 b010 	ldrh.w	fp, [r1, #16]
		if (wc) {
 800b5d6:	f1be 0f00 	cmp.w	lr, #0
 800b5da:	f43f af7f 	beq.w	800b4dc <dir_read+0x1dc>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b5de:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b5e2:	f43f aeca 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b5e6:	f8a0 b00a 	strh.w	fp, [r0, #10]
 800b5ea:	f103 0807 	add.w	r8, r3, #7
	rv = ptr[1];
 800b5ee:	f8b1 c012 	ldrh.w	ip, [r1, #18]
		if (wc) {
 800b5f2:	f1bb 0f00 	cmp.w	fp, #0
 800b5f6:	f43f af77 	beq.w	800b4e8 <dir_read+0x1e8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b5fa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b5fe:	f43f aebc 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b602:	f8a0 c00c 	strh.w	ip, [r0, #12]
 800b606:	f103 0808 	add.w	r8, r3, #8
	rv = ptr[1];
 800b60a:	f8b1 e014 	ldrh.w	lr, [r1, #20]
		if (wc) {
 800b60e:	f1bc 0f00 	cmp.w	ip, #0
 800b612:	f43f af6f 	beq.w	800b4f4 <dir_read+0x1f4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b616:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b61a:	f43f aeae 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b61e:	f8a0 e00e 	strh.w	lr, [r0, #14]
 800b622:	f103 0809 	add.w	r8, r3, #9
	rv = ptr[1];
 800b626:	f8b1 c016 	ldrh.w	ip, [r1, #22]
		if (wc) {
 800b62a:	f1be 0f00 	cmp.w	lr, #0
 800b62e:	f43f af67 	beq.w	800b500 <dir_read+0x200>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b632:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b636:	f43f aea0 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b63a:	f8a0 c010 	strh.w	ip, [r0, #16]
 800b63e:	f103 080a 	add.w	r8, r3, #10
	rv = ptr[1];
 800b642:	f8b1 e018 	ldrh.w	lr, [r1, #24]
		if (wc) {
 800b646:	f1bc 0f00 	cmp.w	ip, #0
 800b64a:	f43f af60 	beq.w	800b50e <dir_read+0x20e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b64e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b652:	f43f ae92 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b656:	f8a0 e012 	strh.w	lr, [r0, #18]
 800b65a:	f103 080b 	add.w	r8, r3, #11
	rv = ptr[1];
 800b65e:	f8b1 c01c 	ldrh.w	ip, [r1, #28]
		if (wc) {
 800b662:	f1be 0f00 	cmp.w	lr, #0
 800b666:	f43f af59 	beq.w	800b51c <dir_read+0x21c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b66a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b66e:	f43f ae84 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b672:	f8a0 c014 	strh.w	ip, [r0, #20]
 800b676:	f103 080c 	add.w	r8, r3, #12
	rv = ptr[1];
 800b67a:	f8b1 e01e 	ldrh.w	lr, [r1, #30]
		if (wc) {
 800b67e:	f1bc 0f00 	cmp.w	ip, #0
 800b682:	f43f af52 	beq.w	800b52a <dir_read+0x22a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b686:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b68a:	f43f ae76 	beq.w	800b37a <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b68e:	f103 080d 	add.w	r8, r3, #13
 800b692:	f8a0 e016 	strh.w	lr, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b696:	780b      	ldrb	r3, [r1, #0]
 800b698:	0659      	lsls	r1, r3, #25
 800b69a:	d506      	bpl.n	800b6aa <dir_read+0x3aa>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b69c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 800b6a0:	f43f ae6b 	beq.w	800b37a <dir_read+0x7a>
		lfnbuf[i] = 0;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b6aa:	3a01      	subs	r2, #1
 800b6ac:	fa5f f882 	uxtb.w	r8, r2
 800b6b0:	e663      	b.n	800b37a <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b6b2:	780a      	ldrb	r2, [r1, #0]
 800b6b4:	01d3      	lsls	r3, r2, #7
 800b6b6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800b6ba:	784a      	ldrb	r2, [r1, #1]
 800b6bc:	441a      	add	r2, r3
 800b6be:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b6c2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b6c6:	788a      	ldrb	r2, [r1, #2]
 800b6c8:	fa52 f283 	uxtab	r2, r2, r3
 800b6cc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b6d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b6d4:	78ca      	ldrb	r2, [r1, #3]
 800b6d6:	fa52 f283 	uxtab	r2, r2, r3
 800b6da:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b6de:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b6e2:	790a      	ldrb	r2, [r1, #4]
 800b6e4:	fa52 f283 	uxtab	r2, r2, r3
 800b6e8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b6ec:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b6f0:	794a      	ldrb	r2, [r1, #5]
 800b6f2:	fa52 f283 	uxtab	r2, r2, r3
 800b6f6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b6fa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b6fe:	798a      	ldrb	r2, [r1, #6]
 800b700:	fa52 f283 	uxtab	r2, r2, r3
 800b704:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b708:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b70c:	79ca      	ldrb	r2, [r1, #7]
 800b70e:	fa52 f283 	uxtab	r2, r2, r3
 800b712:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b716:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b71a:	7a0a      	ldrb	r2, [r1, #8]
 800b71c:	fa52 f283 	uxtab	r2, r2, r3
 800b720:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b724:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800b728:	7a4a      	ldrb	r2, [r1, #9]
 800b72a:	7a89      	ldrb	r1, [r1, #10]
 800b72c:	fa52 f283 	uxtab	r2, r2, r3
 800b730:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800b734:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b738:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b73a:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	429a      	cmp	r2, r3
 800b742:	f47f af02 	bne.w	800b54a <dir_read+0x24a>
 800b746:	e62f      	b.n	800b3a8 <dir_read+0xa8>

0800b748 <sync_fs>:
{
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b74a:	78c3      	ldrb	r3, [r0, #3]
{
 800b74c:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b74e:	b95b      	cbnz	r3, 800b768 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b750:	7823      	ldrb	r3, [r4, #0]
 800b752:	2b03      	cmp	r3, #3
 800b754:	d029      	beq.n	800b7aa <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b756:	2200      	movs	r2, #0
 800b758:	7860      	ldrb	r0, [r4, #1]
 800b75a:	4611      	mov	r1, r2
 800b75c:	f7ff f94e 	bl	800a9fc <disk_ioctl>
			res = FR_DISK_ERR;
 800b760:	3800      	subs	r0, #0
 800b762:	bf18      	it	ne
 800b764:	2001      	movne	r0, #1
}
 800b766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800b768:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b76a:	f100 0734 	add.w	r7, r0, #52	; 0x34
 800b76e:	2301      	movs	r3, #1
 800b770:	7840      	ldrb	r0, [r0, #1]
 800b772:	462a      	mov	r2, r5
 800b774:	4639      	mov	r1, r7
 800b776:	f7ff f933 	bl	800a9e0 <disk_write>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d150      	bne.n	800b820 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b77e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b780:	69e3      	ldr	r3, [r4, #28]
 800b782:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800b784:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b786:	429a      	cmp	r2, r3
 800b788:	d2e2      	bcs.n	800b750 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b78a:	78a6      	ldrb	r6, [r4, #2]
 800b78c:	2e01      	cmp	r6, #1
 800b78e:	d801      	bhi.n	800b794 <sync_fs+0x4c>
 800b790:	e7de      	b.n	800b750 <sync_fs+0x8>
					wsect += fs->fsize;
 800b792:	69e3      	ldr	r3, [r4, #28]
 800b794:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b796:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800b798:	2301      	movs	r3, #1
 800b79a:	4639      	mov	r1, r7
 800b79c:	462a      	mov	r2, r5
 800b79e:	7860      	ldrb	r0, [r4, #1]
 800b7a0:	f7ff f91e 	bl	800a9e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b7a4:	2e01      	cmp	r6, #1
 800b7a6:	d1f4      	bne.n	800b792 <sync_fs+0x4a>
 800b7a8:	e7d2      	b.n	800b750 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b7aa:	7925      	ldrb	r5, [r4, #4]
 800b7ac:	2d01      	cmp	r5, #1
 800b7ae:	d1d2      	bne.n	800b756 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800b7b0:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 800b7b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f009 fc7e 	bl	80150bc <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800b7c0:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b7c4:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b7c6:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800b7c8:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b7cc:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800b7ce:	4815      	ldr	r0, [pc, #84]	; (800b824 <sync_fs+0xdc>)
 800b7d0:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 800b7d4:	6360      	str	r0, [r4, #52]	; 0x34
 800b7d6:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
 800b7da:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 800b7de:	3020      	adds	r0, #32
 800b7e0:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 800b7e4:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800b7e6:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
 800b7ea:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800b7ec:	0e12      	lsrs	r2, r2, #24
 800b7ee:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b7f2:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
 800b7f4:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 800b7f8:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
 800b7fa:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7fc:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
 800b800:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800b802:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 800b806:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800b808:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 800b80a:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800b80c:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 800b810:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b814:	7860      	ldrb	r0, [r4, #1]
 800b816:	f7ff f8e3 	bl	800a9e0 <disk_write>
			fs->fsi_flag = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	7123      	strb	r3, [r4, #4]
 800b81e:	e79a      	b.n	800b756 <sync_fs+0xe>
			res = FR_DISK_ERR;
 800b820:	2001      	movs	r0, #1
}
 800b822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b824:	41615252 	.word	0x41615252

0800b828 <create_chain>:
{
 800b828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
 800b82e:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 800b830:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
 800b834:	2900      	cmp	r1, #0
 800b836:	f040 80b4 	bne.w	800b9a2 <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b83a:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b83e:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b842:	b9ce      	cbnz	r6, 800b878 <create_chain+0x50>
 800b844:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 800b846:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800b848:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b84a:	429c      	cmp	r4, r3
 800b84c:	d318      	bcc.n	800b880 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 800b84e:	2e01      	cmp	r6, #1
 800b850:	f000 80a3 	beq.w	800b99a <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b854:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
 800b858:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b85a:	69ab      	ldr	r3, [r5, #24]
 800b85c:	42a3      	cmp	r3, r4
 800b85e:	d907      	bls.n	800b870 <create_chain+0x48>
		switch (fs->fs_type) {
 800b860:	782b      	ldrb	r3, [r5, #0]
 800b862:	2b02      	cmp	r3, #2
 800b864:	f000 8088 	beq.w	800b978 <create_chain+0x150>
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d044      	beq.n	800b8f6 <create_chain+0xce>
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d00c      	beq.n	800b88a <create_chain+0x62>
 800b870:	2401      	movs	r4, #1
}
 800b872:	4620      	mov	r0, r4
 800b874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b878:	42b3      	cmp	r3, r6
 800b87a:	bf98      	it	ls
 800b87c:	2601      	movls	r6, #1
 800b87e:	e7e2      	b.n	800b846 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b880:	2c01      	cmp	r4, #1
 800b882:	f8da 5000 	ldr.w	r5, [sl]
 800b886:	d9f3      	bls.n	800b870 <create_chain+0x48>
 800b888:	e7e7      	b.n	800b85a <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 800b88a:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b88e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b890:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b892:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b896:	4291      	cmp	r1, r2
 800b898:	d005      	beq.n	800b8a6 <create_chain+0x7e>
 800b89a:	4628      	mov	r0, r5
 800b89c:	f7ff fa40 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8a0:	bb20      	cbnz	r0, 800b8ec <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b8a4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800b8a6:	f107 0b01 	add.w	fp, r7, #1
 800b8aa:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8ae:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b8b2:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b8b4:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800b8b6:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b8ba:	d003      	beq.n	800b8c4 <create_chain+0x9c>
 800b8bc:	4628      	mov	r0, r5
 800b8be:	f7ff fa2f 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8c2:	b998      	cbnz	r0, 800b8ec <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b8c4:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b8c8:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800b8ca:	445d      	add	r5, fp
 800b8cc:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800b8d0:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b8d4:	d575      	bpl.n	800b9c2 <create_chain+0x19a>
 800b8d6:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 800b8d8:	b30b      	cbz	r3, 800b91e <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d0c8      	beq.n	800b870 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 800b8de:	42a6      	cmp	r6, r4
 800b8e0:	d05b      	beq.n	800b99a <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b8e2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b8e6:	e7af      	b.n	800b848 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b8e8:	2801      	cmp	r0, #1
 800b8ea:	d1c1      	bne.n	800b870 <create_chain+0x48>
 800b8ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8f6:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b8f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8fa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b8fe:	4299      	cmp	r1, r3
 800b900:	d004      	beq.n	800b90c <create_chain+0xe4>
 800b902:	4628      	mov	r0, r5
 800b904:	f7ff fa0c 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b908:	2800      	cmp	r0, #0
 800b90a:	d1ef      	bne.n	800b8ec <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b90c:	00a3      	lsls	r3, r4, #2
 800b90e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800b912:	441d      	add	r5, r3
 800b914:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b916:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1dd      	bne.n	800b8da <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b91e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b922:	42a3      	cmp	r3, r4
 800b924:	d9a4      	bls.n	800b870 <create_chain+0x48>
 800b926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b92a:	4621      	mov	r1, r4
 800b92c:	4648      	mov	r0, r9
 800b92e:	f7ff fba9 	bl	800b084 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800b932:	b970      	cbnz	r0, 800b952 <create_chain+0x12a>
 800b934:	f1b8 0f00 	cmp.w	r8, #0
 800b938:	d00b      	beq.n	800b952 <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b93a:	f1b8 0f01 	cmp.w	r8, #1
 800b93e:	d097      	beq.n	800b870 <create_chain+0x48>
 800b940:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b944:	4598      	cmp	r8, r3
 800b946:	d293      	bcs.n	800b870 <create_chain+0x48>
 800b948:	4622      	mov	r2, r4
 800b94a:	4641      	mov	r1, r8
 800b94c:	4648      	mov	r0, r9
 800b94e:	f7ff fb99 	bl	800b084 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b952:	2800      	cmp	r0, #0
 800b954:	d1c8      	bne.n	800b8e8 <create_chain+0xc0>
		fs->last_clst = ncl;
 800b956:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b95a:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
 800b95e:	3b02      	subs	r3, #2
 800b960:	429a      	cmp	r2, r3
 800b962:	d802      	bhi.n	800b96a <create_chain+0x142>
 800b964:	3a01      	subs	r2, #1
 800b966:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
 800b96a:	f899 3004 	ldrb.w	r3, [r9, #4]
 800b96e:	f043 0301 	orr.w	r3, r3, #1
 800b972:	f889 3004 	strb.w	r3, [r9, #4]
 800b976:	e77c      	b.n	800b872 <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b978:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b97a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b97c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b980:	4299      	cmp	r1, r3
 800b982:	d004      	beq.n	800b98e <create_chain+0x166>
 800b984:	4628      	mov	r0, r5
 800b986:	f7ff f9cb 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d1ae      	bne.n	800b8ec <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b98e:	0063      	lsls	r3, r4, #1
 800b990:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b994:	441d      	add	r5, r3
 800b996:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 800b998:	e79e      	b.n	800b8d8 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 800b99a:	2400      	movs	r4, #0
}
 800b99c:	4620      	mov	r0, r4
 800b99e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b9a2:	4648      	mov	r0, r9
 800b9a4:	f7ff fc08 	bl	800b1b8 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b9a8:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b9aa:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b9ac:	f67f af60 	bls.w	800b870 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b9b0:	1c41      	adds	r1, r0, #1
 800b9b2:	d09b      	beq.n	800b8ec <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b9b4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800b9b8:	4283      	cmp	r3, r0
 800b9ba:	f63f af5a 	bhi.w	800b872 <create_chain+0x4a>
 800b9be:	4646      	mov	r6, r8
 800b9c0:	e741      	b.n	800b846 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b9c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b9c6:	e787      	b.n	800b8d8 <create_chain+0xb0>

0800b9c8 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b9c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b9cc:	d274      	bcs.n	800bab8 <dir_sdi+0xf0>
 800b9ce:	06ca      	lsls	r2, r1, #27
{
 800b9d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d4:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b9d6:	d151      	bne.n	800ba7c <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b9d8:	6885      	ldr	r5, [r0, #8]
 800b9da:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 800b9dc:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 800b9e0:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b9e2:	2d00      	cmp	r5, #0
 800b9e4:	d04d      	beq.n	800ba82 <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b9e6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b9ea:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b9ee:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800b9f2:	f0c0 808e 	bcc.w	800bb12 <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b9f6:	2d01      	cmp	r5, #1
 800b9f8:	d040      	beq.n	800ba7c <dir_sdi+0xb4>
 800b9fa:	4647      	mov	r7, r8
 800b9fc:	e03b      	b.n	800ba76 <dir_sdi+0xae>
		switch (fs->fs_type) {
 800b9fe:	783b      	ldrb	r3, [r7, #0]
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d073      	beq.n	800baec <dir_sdi+0x124>
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	d05f      	beq.n	800bac8 <dir_sdi+0x100>
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d137      	bne.n	800ba7c <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 800ba0c:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba14:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba18:	4291      	cmp	r1, r2
 800ba1a:	d006      	beq.n	800ba2a <dir_sdi+0x62>
 800ba1c:	4638      	mov	r0, r7
 800ba1e:	f7ff f97f 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d172      	bne.n	800bb0c <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800ba2a:	f10a 0b01 	add.w	fp, sl, #1
 800ba2e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba32:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800ba36:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba38:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800ba3a:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba3e:	d004      	beq.n	800ba4a <dir_sdi+0x82>
 800ba40:	4638      	mov	r0, r7
 800ba42:	f7ff f96d 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba46:	2800      	cmp	r0, #0
 800ba48:	d160      	bne.n	800bb0c <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ba4a:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 800ba4e:	445f      	add	r7, fp
 800ba50:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ba54:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ba58:	07eb      	lsls	r3, r5, #31
 800ba5a:	d568      	bpl.n	800bb2e <dir_sdi+0x166>
 800ba5c:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ba60:	2d01      	cmp	r5, #1
 800ba62:	d90b      	bls.n	800ba7c <dir_sdi+0xb4>
 800ba64:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ba68:	42ab      	cmp	r3, r5
 800ba6a:	d907      	bls.n	800ba7c <dir_sdi+0xb4>
			ofs -= csz;
 800ba6c:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba70:	45a1      	cmp	r9, r4
 800ba72:	d850      	bhi.n	800bb16 <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ba74:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	42ab      	cmp	r3, r5
 800ba7a:	d8c0      	bhi.n	800b9fe <dir_sdi+0x36>
		switch (fs->fs_type) {
 800ba7c:	2002      	movs	r0, #2
}
 800ba7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ba82:	f898 3000 	ldrb.w	r3, [r8]
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d818      	bhi.n	800babc <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ba8a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800ba8e:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800ba92:	d9f3      	bls.n	800ba7c <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 800ba94:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800ba98:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800ba9a:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ba9c:	2a00      	cmp	r2, #0
 800ba9e:	d0ed      	beq.n	800ba7c <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800baa0:	f108 0834 	add.w	r8, r8, #52	; 0x34
 800baa4:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800baa8:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
 800baac:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800baae:	4443      	add	r3, r8
 800bab0:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800bab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 800bab8:	2002      	movs	r0, #2
}
 800baba:	4770      	bx	lr
		clst = fs->dirbase;
 800babc:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d0e2      	beq.n	800ba8a <dir_sdi+0xc2>
 800bac4:	461d      	mov	r5, r3
 800bac6:	e78e      	b.n	800b9e6 <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bacc:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bad0:	4299      	cmp	r1, r3
 800bad2:	d003      	beq.n	800badc <dir_sdi+0x114>
 800bad4:	4638      	mov	r0, r7
 800bad6:	f7ff f923 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bada:	b9b8      	cbnz	r0, 800bb0c <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800badc:	00ad      	lsls	r5, r5, #2
 800bade:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800bae2:	442f      	add	r7, r5
 800bae4:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bae6:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 800baea:	e7b9      	b.n	800ba60 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800baec:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800baf0:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800baf4:	4299      	cmp	r1, r3
 800baf6:	d003      	beq.n	800bb00 <dir_sdi+0x138>
 800baf8:	4638      	mov	r0, r7
 800bafa:	f7ff f911 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bafe:	b928      	cbnz	r0, 800bb0c <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bb00:	006d      	lsls	r5, r5, #1
 800bb02:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 800bb06:	442f      	add	r7, r5
 800bb08:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
 800bb0a:	e7a9      	b.n	800ba60 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bb0c:	2001      	movs	r0, #1
}
 800bb0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb12:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800bb16:	3b02      	subs	r3, #2
	clst -= 2;
 800bb18:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bb1a:	4299      	cmp	r1, r3
 800bb1c:	d20a      	bcs.n	800bb34 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
 800bb1e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800bb22:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 800bb26:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 800bb2a:	61f2      	str	r2, [r6, #28]
 800bb2c:	e7b5      	b.n	800ba9a <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bb2e:	f3ca 050b 	ubfx	r5, sl, #0, #12
 800bb32:	e795      	b.n	800ba60 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 800bb34:	2300      	movs	r3, #0
 800bb36:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bb3a:	e79f      	b.n	800ba7c <dir_sdi+0xb4>

0800bb3c <dir_find>:
{
 800bb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bb40:	2100      	movs	r1, #0
{
 800bb42:	b085      	sub	sp, #20
 800bb44:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800bb46:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bb4a:	f7ff ff3d 	bl	800b9c8 <dir_sdi>
	if (res != FR_OK) return res;
 800bb4e:	4607      	mov	r7, r0
 800bb50:	b9e8      	cbnz	r0, 800bb8e <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb52:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800bb56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 800bb5a:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bb5c:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb5e:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bb60:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 800bb64:	42b5      	cmp	r5, r6
 800bb66:	d018      	beq.n	800bb9a <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb68:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bb6c:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f040 8088 	bne.w	800bc86 <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bb76:	2301      	movs	r3, #1
 800bb78:	4632      	mov	r2, r6
 800bb7a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bb7e:	f7fe ff21 	bl	800a9c4 <disk_read>
 800bb82:	b140      	cbz	r0, 800bb96 <dir_find+0x5a>
			fs->winsect = sector;
 800bb84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800bb88:	2701      	movs	r7, #1
			fs->winsect = sector;
 800bb8a:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 800bb8e:	4638      	mov	r0, r7
 800bb90:	b005      	add	sp, #20
 800bb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800bb96:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 800bb9a:	6a26      	ldr	r6, [r4, #32]
 800bb9c:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bb9e:	b34d      	cbz	r5, 800bbf4 <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bba0:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bba2:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bba4:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 800bba8:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bbaa:	d004      	beq.n	800bbb6 <dir_find+0x7a>
 800bbac:	0717      	lsls	r7, r2, #28
 800bbae:	d526      	bpl.n	800bbfe <dir_find+0xc2>
 800bbb0:	2b0f      	cmp	r3, #15
 800bbb2:	f000 8093 	beq.w	800bcdc <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bbb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbba:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800bbbe:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bbc0:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bbc2:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bbc4:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bbc6:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800bbca:	d213      	bcs.n	800bbf4 <dir_find+0xb8>
 800bbcc:	b196      	cbz	r6, 800bbf4 <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bbce:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 800bbd2:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bbd4:	b94b      	cbnz	r3, 800bbea <dir_find+0xae>
		dp->sect++;				/* Next sector */
 800bbd6:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800bbd8:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800bbda:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800bbdc:	2900      	cmp	r1, #0
 800bbde:	d15e      	bne.n	800bc9e <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bbe0:	893a      	ldrh	r2, [r7, #8]
 800bbe2:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800bbe6:	f240 8133 	bls.w	800be50 <dir_find+0x314>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bbea:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800bbec:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bbee:	443b      	add	r3, r7
 800bbf0:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 800bbf2:	e7b5      	b.n	800bb60 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bbf4:	2704      	movs	r7, #4
}
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	b005      	add	sp, #20
 800bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bbfe:	2b0f      	cmp	r3, #15
 800bc00:	d06c      	beq.n	800bcdc <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bc02:	f1ba 0f00 	cmp.w	sl, #0
 800bc06:	f000 80d5 	beq.w	800bdb4 <dir_find+0x278>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bc0a:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
 800bc0e:	f01a 0a01 	ands.w	sl, sl, #1
 800bc12:	d1d0      	bne.n	800bbb6 <dir_find+0x7a>
	} while (--cnt && r == 0);
 800bc14:	7832      	ldrb	r2, [r6, #0]
 800bc16:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d1cb      	bne.n	800bbb6 <dir_find+0x7a>
 800bc1e:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800bc22:	7873      	ldrb	r3, [r6, #1]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d1c6      	bne.n	800bbb6 <dir_find+0x7a>
 800bc28:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800bc2c:	78b3      	ldrb	r3, [r6, #2]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d1c1      	bne.n	800bbb6 <dir_find+0x7a>
 800bc32:	78f2      	ldrb	r2, [r6, #3]
 800bc34:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d1bc      	bne.n	800bbb6 <dir_find+0x7a>
 800bc3c:	7932      	ldrb	r2, [r6, #4]
 800bc3e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d1b7      	bne.n	800bbb6 <dir_find+0x7a>
 800bc46:	7972      	ldrb	r2, [r6, #5]
 800bc48:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d1b2      	bne.n	800bbb6 <dir_find+0x7a>
 800bc50:	79b2      	ldrb	r2, [r6, #6]
 800bc52:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d1ad      	bne.n	800bbb6 <dir_find+0x7a>
 800bc5a:	79f2      	ldrb	r2, [r6, #7]
 800bc5c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d1a8      	bne.n	800bbb6 <dir_find+0x7a>
 800bc64:	7a32      	ldrb	r2, [r6, #8]
 800bc66:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d1a3      	bne.n	800bbb6 <dir_find+0x7a>
 800bc6e:	7a72      	ldrb	r2, [r6, #9]
 800bc70:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d19e      	bne.n	800bbb6 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bc78:	7ab2      	ldrb	r2, [r6, #10]
 800bc7a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d199      	bne.n	800bbb6 <dir_find+0x7a>
 800bc82:	4657      	mov	r7, sl
 800bc84:	e783      	b.n	800bb8e <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc86:	2301      	movs	r3, #1
 800bc88:	462a      	mov	r2, r5
 800bc8a:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bc8e:	9100      	str	r1, [sp, #0]
 800bc90:	f7fe fea6 	bl	800a9e0 <disk_write>
 800bc94:	9900      	ldr	r1, [sp, #0]
 800bc96:	2800      	cmp	r0, #0
 800bc98:	d06c      	beq.n	800bd74 <dir_find+0x238>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc9a:	2701      	movs	r7, #1
 800bc9c:	e777      	b.n	800bb8e <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bc9e:	897a      	ldrh	r2, [r7, #10]
 800bca0:	3a01      	subs	r2, #1
 800bca2:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 800bca6:	d1a0      	bne.n	800bbea <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bca8:	4638      	mov	r0, r7
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	f7ff fa84 	bl	800b1b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bcb0:	2801      	cmp	r0, #1
 800bcb2:	f240 80d1 	bls.w	800be58 <dir_find+0x31c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	d0ef      	beq.n	800bc9a <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bcba:	69ba      	ldr	r2, [r7, #24]
 800bcbc:	4290      	cmp	r0, r2
 800bcbe:	f080 80c7 	bcs.w	800be50 <dir_find+0x314>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bcc2:	3a02      	subs	r2, #2
				dp->clust = clst;		/* Initialize data for new cluster */
 800bcc4:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800bcc6:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bcc8:	9b00      	ldr	r3, [sp, #0]
 800bcca:	4290      	cmp	r0, r2
 800bccc:	f080 80c6 	bcs.w	800be5c <dir_find+0x320>
	return clst * fs->csize + fs->database;
 800bcd0:	897a      	ldrh	r2, [r7, #10]
 800bcd2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800bcd4:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 800bcd8:	61e6      	str	r6, [r4, #28]
 800bcda:	e786      	b.n	800bbea <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bcdc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800bce0:	0658      	lsls	r0, r3, #25
 800bce2:	f53f af6d 	bmi.w	800bbc0 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bce6:	0669      	lsls	r1, r5, #25
 800bce8:	d53f      	bpl.n	800bd6a <dir_find+0x22e>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bcea:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bcec:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800bcf0:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bcf4:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bcf6:	7b73      	ldrb	r3, [r6, #13]
 800bcf8:	454b      	cmp	r3, r9
 800bcfa:	d138      	bne.n	800bd6e <dir_find+0x232>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800bcfc:	8b73      	ldrh	r3, [r6, #26]
 800bcfe:	bbb3      	cbnz	r3, 800bd6e <dir_find+0x232>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bd00:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bd02:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bd04:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bd08:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800bd0c:	f8df a174 	ldr.w	sl, [pc, #372]	; 800be84 <dir_find+0x348>
 800bd10:	9502      	str	r5, [sp, #8]
 800bd12:	4615      	mov	r5, r2
 800bd14:	3f01      	subs	r7, #1
 800bd16:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bd1a:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800bd1c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800bd20:	f8cd 8000 	str.w	r8, [sp]
 800bd24:	9401      	str	r4, [sp, #4]
 800bd26:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bd2a:	e010      	b.n	800bd4e <dir_find+0x212>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bd2c:	2ffe      	cmp	r7, #254	; 0xfe
 800bd2e:	4620      	mov	r0, r4
 800bd30:	d816      	bhi.n	800bd60 <dir_find+0x224>
 800bd32:	f001 febb 	bl	800daac <ff_wtoupper>
 800bd36:	4680      	mov	r8, r0
 800bd38:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 800bd3c:	3701      	adds	r7, #1
 800bd3e:	f001 feb5 	bl	800daac <ff_wtoupper>
 800bd42:	4580      	cmp	r8, r0
 800bd44:	4621      	mov	r1, r4
 800bd46:	d10b      	bne.n	800bd60 <dir_find+0x224>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bd48:	45d3      	cmp	fp, sl
 800bd4a:	f000 8089 	beq.w	800be60 <dir_find+0x324>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bd4e:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 800bd52:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 800bd54:	2900      	cmp	r1, #0
 800bd56:	d1e9      	bne.n	800bd2c <dir_find+0x1f0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bd58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	d0f3      	beq.n	800bd48 <dir_find+0x20c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bd60:	e9dd 8400 	ldrd	r8, r4, [sp]
 800bd64:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800bd68:	e72a      	b.n	800bbc0 <dir_find+0x84>
 800bd6a:	45aa      	cmp	sl, r5
 800bd6c:	d0c3      	beq.n	800bcf6 <dir_find+0x1ba>
 800bd6e:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800bd72:	e725      	b.n	800bbc0 <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bd74:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 800bd78:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bd7c:	1aea      	subs	r2, r5, r3
 800bd7e:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	f4bf aef7 	bcs.w	800bb76 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd88:	f898 7002 	ldrb.w	r7, [r8, #2]
 800bd8c:	2f01      	cmp	r7, #1
 800bd8e:	f67f aef2 	bls.w	800bb76 <dir_find+0x3a>
 800bd92:	468b      	mov	fp, r1
 800bd94:	e001      	b.n	800bd9a <dir_find+0x25e>
					wsect += fs->fsize;
 800bd96:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800bd9a:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bd9c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800bd9e:	2301      	movs	r3, #1
 800bda0:	4659      	mov	r1, fp
 800bda2:	462a      	mov	r2, r5
 800bda4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bda8:	f7fe fe1a 	bl	800a9e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bdac:	2f01      	cmp	r7, #1
 800bdae:	d1f2      	bne.n	800bd96 <dir_find+0x25a>
 800bdb0:	4659      	mov	r1, fp
 800bdb2:	e6e0      	b.n	800bb76 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800bdb4:	7830      	ldrb	r0, [r6, #0]
 800bdb6:	7872      	ldrb	r2, [r6, #1]
 800bdb8:	01c1      	lsls	r1, r0, #7
 800bdba:	78b3      	ldrb	r3, [r6, #2]
 800bdbc:	f896 b003 	ldrb.w	fp, [r6, #3]
 800bdc0:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 800bdc4:	7937      	ldrb	r7, [r6, #4]
 800bdc6:	f896 e005 	ldrb.w	lr, [r6, #5]
 800bdca:	4411      	add	r1, r2
 800bdcc:	f896 c006 	ldrb.w	ip, [r6, #6]
 800bdd0:	7a32      	ldrb	r2, [r6, #8]
 800bdd2:	f3c1 0046 	ubfx	r0, r1, #1, #7
 800bdd6:	7a75      	ldrb	r5, [r6, #9]
 800bdd8:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 800bddc:	fa53 f180 	uxtab	r1, r3, r0
 800bde0:	79f3      	ldrb	r3, [r6, #7]
 800bde2:	f3c1 0046 	ubfx	r0, r1, #1, #7
 800bde6:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 800bdea:	7ab1      	ldrb	r1, [r6, #10]
 800bdec:	fa5b fb80 	uxtab	fp, fp, r0
 800bdf0:	f3cb 0046 	ubfx	r0, fp, #1, #7
 800bdf4:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
 800bdf8:	fa57 f780 	uxtab	r7, r7, r0
 800bdfc:	f3c7 0046 	ubfx	r0, r7, #1, #7
 800be00:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 800be04:	fa5e f080 	uxtab	r0, lr, r0
 800be08:	f3c0 0746 	ubfx	r7, r0, #1, #7
 800be0c:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
 800be10:	fa5c f780 	uxtab	r7, ip, r0
 800be14:	f3c7 0046 	ubfx	r0, r7, #1, #7
 800be18:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 800be1c:	fa53 f080 	uxtab	r0, r3, r0
 800be20:	f3c0 0346 	ubfx	r3, r0, #1, #7
 800be24:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 800be28:	fa52 f383 	uxtab	r3, r2, r3
 800be2c:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800be30:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 800be34:	fa55 f283 	uxtab	r2, r5, r3
 800be38:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800be3c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800be40:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800be44:	b2db      	uxtb	r3, r3
 800be46:	4599      	cmp	r9, r3
 800be48:	f47f aedf 	bne.w	800bc0a <dir_find+0xce>
 800be4c:	4657      	mov	r7, sl
 800be4e:	e69e      	b.n	800bb8e <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
 800be50:	2300      	movs	r3, #0
 800be52:	2704      	movs	r7, #4
 800be54:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 800be56:	e69a      	b.n	800bb8e <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800be58:	2702      	movs	r7, #2
 800be5a:	e698      	b.n	800bb8e <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be5c:	461e      	mov	r6, r3
 800be5e:	e73b      	b.n	800bcd8 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800be60:	7833      	ldrb	r3, [r6, #0]
 800be62:	f8dd 8000 	ldr.w	r8, [sp]
 800be66:	065a      	lsls	r2, r3, #25
 800be68:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 800be6c:	d500      	bpl.n	800be70 <dir_find+0x334>
 800be6e:	b919      	cbnz	r1, 800be78 <dir_find+0x33c>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800be70:	3d01      	subs	r5, #1
 800be72:	fa5f fa85 	uxtb.w	sl, r5
 800be76:	e6a3      	b.n	800bbc0 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800be78:	9b03      	ldr	r3, [sp, #12]
 800be7a:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d0f6      	beq.n	800be70 <dir_find+0x334>
 800be82:	e774      	b.n	800bd6e <dir_find+0x232>
 800be84:	08017384 	.word	0x08017384

0800be88 <follow_path>:
{
 800be88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800be8c:	780b      	ldrb	r3, [r1, #0]
{
 800be8e:	b083      	sub	sp, #12
 800be90:	4688      	mov	r8, r1
 800be92:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800be94:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 800be96:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800be9a:	d103      	bne.n	800bea4 <follow_path+0x1c>
 800be9c:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800bea0:	2b2f      	cmp	r3, #47	; 0x2f
 800bea2:	d0fb      	beq.n	800be9c <follow_path+0x14>
 800bea4:	2b5c      	cmp	r3, #92	; 0x5c
 800bea6:	d0f9      	beq.n	800be9c <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 800bea8:	2100      	movs	r1, #0
 800beaa:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800beac:	f898 3000 	ldrb.w	r3, [r8]
 800beb0:	2b1f      	cmp	r3, #31
 800beb2:	f240 8148 	bls.w	800c146 <follow_path+0x2be>
 800beb6:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 800beb8:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800beba:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 800bebc:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 800bebe:	d929      	bls.n	800bf14 <follow_path+0x8c>
 800bec0:	f1a5 0902 	sub.w	r9, r5, #2
 800bec4:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 800bec6:	2401      	movs	r4, #1
 800bec8:	e008      	b.n	800bedc <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 800beca:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 800bece:	1c63      	adds	r3, r4, #1
 800bed0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800bed4:	281f      	cmp	r0, #31
 800bed6:	f240 80f7 	bls.w	800c0c8 <follow_path+0x240>
		w = p[si++];					/* Get a character */
 800beda:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800bedc:	282f      	cmp	r0, #47	; 0x2f
 800bede:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800bee2:	d01d      	beq.n	800bf20 <follow_path+0x98>
 800bee4:	285c      	cmp	r0, #92	; 0x5c
 800bee6:	d01b      	beq.n	800bf20 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800bee8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800beec:	d00e      	beq.n	800bf0c <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800beee:	2101      	movs	r1, #1
 800bef0:	f001 fdbe 	bl	800da70 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800bef4:	b150      	cbz	r0, 800bf0c <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800bef6:	287f      	cmp	r0, #127	; 0x7f
 800bef8:	d8e7      	bhi.n	800beca <follow_path+0x42>
	while (*str && *str != chr) str++;
 800befa:	2322      	movs	r3, #34	; 0x22
 800befc:	4aa5      	ldr	r2, [pc, #660]	; (800c194 <follow_path+0x30c>)
 800befe:	e003      	b.n	800bf08 <follow_path+0x80>
 800bf00:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0e0      	beq.n	800beca <follow_path+0x42>
 800bf08:	4298      	cmp	r0, r3
 800bf0a:	d1f9      	bne.n	800bf00 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bf0c:	2006      	movs	r0, #6
}
 800bf0e:	b003      	add	sp, #12
 800bf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 800bf14:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bf16:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 800bf18:	802b      	strh	r3, [r5, #0]
}
 800bf1a:	b003      	add	sp, #12
 800bf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bf20:	f818 3004 	ldrb.w	r3, [r8, r4]
 800bf24:	eb08 0204 	add.w	r2, r8, r4
 800bf28:	2b5c      	cmp	r3, #92	; 0x5c
 800bf2a:	d002      	beq.n	800bf32 <follow_path+0xaa>
 800bf2c:	2b2f      	cmp	r3, #47	; 0x2f
 800bf2e:	f040 811f 	bne.w	800c170 <follow_path+0x2e8>
 800bf32:	1c63      	adds	r3, r4, #1
 800bf34:	4443      	add	r3, r8
 800bf36:	4698      	mov	r8, r3
 800bf38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf3c:	2a2f      	cmp	r2, #47	; 0x2f
 800bf3e:	d0fa      	beq.n	800bf36 <follow_path+0xae>
 800bf40:	2a5c      	cmp	r2, #92	; 0x5c
 800bf42:	d0f8      	beq.n	800bf36 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bf44:	f1ba 0f00 	cmp.w	sl, #0
 800bf48:	d0e4      	beq.n	800bf14 <follow_path+0x8c>
 800bf4a:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bf4c:	2400      	movs	r4, #0
 800bf4e:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 800bf52:	e002      	b.n	800bf5a <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bf54:	f1ba 0a01 	subs.w	sl, sl, #1
 800bf58:	d0dc      	beq.n	800bf14 <follow_path+0x8c>
		w = lfn[di - 1];
 800bf5a:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800bf5e:	2b20      	cmp	r3, #32
 800bf60:	d0f8      	beq.n	800bf54 <follow_path+0xcc>
 800bf62:	2b2e      	cmp	r3, #46	; 0x2e
 800bf64:	d0f6      	beq.n	800bf54 <follow_path+0xcc>
		*d++ = (BYTE)val;
 800bf66:	2320      	movs	r3, #32
 800bf68:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 800bf72:	627a      	str	r2, [r7, #36]	; 0x24
 800bf74:	62ba      	str	r2, [r7, #40]	; 0x28
 800bf76:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800bf7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800bf7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bf82:	8828      	ldrh	r0, [r5, #0]
 800bf84:	282e      	cmp	r0, #46	; 0x2e
 800bf86:	d002      	beq.n	800bf8e <follow_path+0x106>
 800bf88:	4298      	cmp	r0, r3
 800bf8a:	f040 80e5 	bne.w	800c158 <follow_path+0x2d0>
 800bf8e:	462a      	mov	r2, r5
 800bf90:	2300      	movs	r3, #0
 800bf92:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800bf96:	461c      	mov	r4, r3
 800bf98:	3301      	adds	r3, #1
 800bf9a:	2820      	cmp	r0, #32
 800bf9c:	d0f9      	beq.n	800bf92 <follow_path+0x10a>
 800bf9e:	282e      	cmp	r0, #46	; 0x2e
 800bfa0:	d0f7      	beq.n	800bf92 <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
 800bfa2:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bfa4:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 800bfa8:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800bfac:	2a2e      	cmp	r2, #46	; 0x2e
 800bfae:	d002      	beq.n	800bfb6 <follow_path+0x12e>
 800bfb0:	f1ba 0a01 	subs.w	sl, sl, #1
 800bfb4:	d1f8      	bne.n	800bfa8 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
 800bfb6:	b3b0      	cbz	r0, 800c026 <follow_path+0x19e>
 800bfb8:	2208      	movs	r2, #8
 800bfba:	4641      	mov	r1, r8
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	46b8      	mov	r8, r7
 800bfc0:	462f      	mov	r7, r5
 800bfc2:	4615      	mov	r5, r2
 800bfc4:	4699      	mov	r9, r3
 800bfc6:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bfc8:	2820      	cmp	r0, #32
 800bfca:	d003      	beq.n	800bfd4 <follow_path+0x14c>
 800bfcc:	282e      	cmp	r0, #46	; 0x2e
 800bfce:	d14d      	bne.n	800c06c <follow_path+0x1e4>
 800bfd0:	45a2      	cmp	sl, r4
 800bfd2:	d04b      	beq.n	800c06c <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 800bfd4:	f046 0603 	orr.w	r6, r6, #3
 800bfd8:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 800bfda:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800bfde:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d1f1      	bne.n	800bfc8 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bfe4:	4647      	mov	r7, r8
 800bfe6:	4690      	mov	r8, r2
 800bfe8:	462a      	mov	r2, r5
 800bfea:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800bfee:	29e5      	cmp	r1, #229	; 0xe5
 800bff0:	d102      	bne.n	800bff8 <follow_path+0x170>
 800bff2:	2105      	movs	r1, #5
 800bff4:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800bff8:	2a08      	cmp	r2, #8
 800bffa:	f000 8093 	beq.w	800c124 <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bffe:	f003 020c 	and.w	r2, r3, #12
 800c002:	2a0c      	cmp	r2, #12
 800c004:	d065      	beq.n	800c0d2 <follow_path+0x24a>
 800c006:	f003 0303 	and.w	r3, r3, #3
 800c00a:	2b03      	cmp	r3, #3
 800c00c:	d061      	beq.n	800c0d2 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c00e:	07b1      	lsls	r1, r6, #30
 800c010:	d409      	bmi.n	800c026 <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c012:	2b01      	cmp	r3, #1
 800c014:	d102      	bne.n	800c01c <follow_path+0x194>
 800c016:	f046 0610 	orr.w	r6, r6, #16
 800c01a:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c01c:	2a04      	cmp	r2, #4
 800c01e:	d102      	bne.n	800c026 <follow_path+0x19e>
 800c020:	f046 0608 	orr.w	r6, r6, #8
 800c024:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 800c026:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c028:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800c02c:	f7ff fd86 	bl	800bb3c <dir_find>
			ns = dp->fn[NSFLAG];
 800c030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800c034:	2800      	cmp	r0, #0
 800c036:	d158      	bne.n	800c0ea <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c038:	075a      	lsls	r2, r3, #29
 800c03a:	f53f af68 	bmi.w	800bf0e <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c03e:	79bb      	ldrb	r3, [r7, #6]
 800c040:	06db      	lsls	r3, r3, #27
 800c042:	f140 8097 	bpl.w	800c174 <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 800c04c:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c050:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800c054:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c056:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800c058:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800c05a:	d102      	bne.n	800c062 <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c05c:	8a9b      	ldrh	r3, [r3, #20]
 800c05e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c062:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c064:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 800c066:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c06a:	e725      	b.n	800beb8 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c06c:	454d      	cmp	r5, r9
 800c06e:	d91c      	bls.n	800c0aa <follow_path+0x222>
 800c070:	ebaa 0104 	sub.w	r1, sl, r4
 800c074:	fab1 f181 	clz	r1, r1
 800c078:	0949      	lsrs	r1, r1, #5
 800c07a:	b9b1      	cbnz	r1, 800c0aa <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 800c07c:	287f      	cmp	r0, #127	; 0x7f
 800c07e:	d83c      	bhi.n	800c0fa <follow_path+0x272>
	while (*str && *str != chr) str++;
 800c080:	212b      	movs	r1, #43	; 0x2b
 800c082:	f8df c118 	ldr.w	ip, [pc, #280]	; 800c19c <follow_path+0x314>
 800c086:	e003      	b.n	800c090 <follow_path+0x208>
 800c088:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800c08c:	2900      	cmp	r1, #0
 800c08e:	d052      	beq.n	800c136 <follow_path+0x2ae>
 800c090:	4281      	cmp	r1, r0
 800c092:	d1f9      	bne.n	800c088 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c094:	f046 0603 	orr.w	r6, r6, #3
 800c098:	205f      	movs	r0, #95	; 0x5f
 800c09a:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 800c09c:	eb08 0109 	add.w	r1, r8, r9
 800c0a0:	f109 0901 	add.w	r9, r9, #1
 800c0a4:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800c0a8:	e797      	b.n	800bfda <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 800c0aa:	2d0b      	cmp	r5, #11
 800c0ac:	d064      	beq.n	800c178 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c0ae:	45a2      	cmp	sl, r4
 800c0b0:	d003      	beq.n	800c0ba <follow_path+0x232>
 800c0b2:	f046 0603 	orr.w	r6, r6, #3
 800c0b6:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 800c0b8:	d394      	bcc.n	800bfe4 <follow_path+0x15c>
			b <<= 2; continue;
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c0be:	250b      	movs	r5, #11
 800c0c0:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 800c0c4:	b2db      	uxtb	r3, r3
 800c0c6:	e788      	b.n	800bfda <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
 800c0c8:	46a2      	mov	sl, r4
 800c0ca:	4498      	add	r8, r3
 800c0cc:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c0ce:	2404      	movs	r4, #4
 800c0d0:	e73d      	b.n	800bf4e <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c0d2:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 800c0d6:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c0d8:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c0da:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800c0de:	f7ff fd2d 	bl	800bb3c <dir_find>
			ns = dp->fn[NSFLAG];
 800c0e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d0a6      	beq.n	800c038 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c0ea:	2804      	cmp	r0, #4
 800c0ec:	f47f af0f 	bne.w	800bf0e <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c0f0:	f013 0f04 	tst.w	r3, #4
 800c0f4:	bf08      	it	eq
 800c0f6:	2005      	moveq	r0, #5
 800c0f8:	e709      	b.n	800bf0e <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c0fa:	e9cd 3200 	strd	r3, r2, [sp]
 800c0fe:	f001 fcb7 	bl	800da70 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c102:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c106:	b918      	cbnz	r0, 800c110 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
 800c108:	f046 0602 	orr.w	r6, r6, #2
 800c10c:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c10e:	e7c1      	b.n	800c094 <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c110:	4921      	ldr	r1, [pc, #132]	; (800c198 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 800c112:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c116:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 800c118:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c11a:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c11e:	2800      	cmp	r0, #0
 800c120:	d0b8      	beq.n	800c094 <follow_path+0x20c>
 800c122:	e7ad      	b.n	800c080 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c12a:	2a0c      	cmp	r2, #12
 800c12c:	d0d1      	beq.n	800c0d2 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c12e:	07b0      	lsls	r0, r6, #30
 800c130:	f57f af74 	bpl.w	800c01c <follow_path+0x194>
 800c134:	e777      	b.n	800c026 <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
 800c136:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800c13a:	2919      	cmp	r1, #25
 800c13c:	d80f      	bhi.n	800c15e <follow_path+0x2d6>
					b |= 2;
 800c13e:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 800c142:	b2c0      	uxtb	r0, r0
 800c144:	e7aa      	b.n	800c09c <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
 800c146:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800c148:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 800c14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 800c14e:	b003      	add	sp, #12
 800c150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800c154:	f7ff bc38 	b.w	800b9c8 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c158:	4626      	mov	r6, r4
 800c15a:	2401      	movs	r4, #1
 800c15c:	e722      	b.n	800bfa4 <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 800c15e:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800c162:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800c164:	bf9c      	itt	ls
 800c166:	3820      	subls	r0, #32
 800c168:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 800c16c:	b2c0      	uxtb	r0, r0
 800c16e:	e795      	b.n	800c09c <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c170:	4690      	mov	r8, r2
 800c172:	e6e7      	b.n	800bf44 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c174:	2005      	movs	r0, #5
 800c176:	e6ca      	b.n	800bf0e <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 800c178:	4647      	mov	r7, r8
 800c17a:	4690      	mov	r8, r2
 800c17c:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c180:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 800c184:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c186:	2ae5      	cmp	r2, #229	; 0xe5
 800c188:	f47f af39 	bne.w	800bffe <follow_path+0x176>
 800c18c:	2205      	movs	r2, #5
 800c18e:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800c192:	e734      	b.n	800bffe <follow_path+0x176>
 800c194:	080172f0 	.word	0x080172f0
 800c198:	08017304 	.word	0x08017304
 800c19c:	080172fc 	.word	0x080172fc

0800c1a0 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c1a0:	2901      	cmp	r1, #1
{
 800c1a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a6:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800c1a8:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c1aa:	d90f      	bls.n	800c1cc <remove_chain+0x2c>
 800c1ac:	69ab      	ldr	r3, [r5, #24]
 800c1ae:	428b      	cmp	r3, r1
 800c1b0:	d90c      	bls.n	800c1cc <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	b962      	cbnz	r2, 800c1d2 <remove_chain+0x32>
 800c1b8:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c1ba:	429c      	cmp	r4, r3
 800c1bc:	d206      	bcs.n	800c1cc <remove_chain+0x2c>
		switch (fs->fs_type) {
 800c1be:	783b      	ldrb	r3, [r7, #0]
 800c1c0:	2b02      	cmp	r3, #2
 800c1c2:	d072      	beq.n	800c2aa <remove_chain+0x10a>
 800c1c4:	2b03      	cmp	r3, #3
 800c1c6:	d05d      	beq.n	800c284 <remove_chain+0xe4>
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d010      	beq.n	800c1ee <remove_chain+0x4e>
 800c1cc:	2002      	movs	r0, #2
}
 800c1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d9fa      	bls.n	800c1cc <remove_chain+0x2c>
 800c1d6:	2a01      	cmp	r2, #1
 800c1d8:	d0f8      	beq.n	800c1cc <remove_chain+0x2c>
 800c1da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1de:	4628      	mov	r0, r5
 800c1e0:	f7fe ff50 	bl	800b084 <put_fat.part.0>
		if (res != FR_OK) return res;
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d1f2      	bne.n	800c1ce <remove_chain+0x2e>
 800c1e8:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	e7e5      	b.n	800c1ba <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
 800c1ee:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c1f6:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c1fa:	4291      	cmp	r1, r2
 800c1fc:	d006      	beq.n	800c20c <remove_chain+0x6c>
 800c1fe:	4638      	mov	r0, r7
 800c200:	f7fe fd8e 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c204:	2800      	cmp	r0, #0
 800c206:	d161      	bne.n	800c2cc <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c20a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 800c20c:	f108 0901 	add.w	r9, r8, #1
 800c210:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c214:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800c218:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c21a:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 800c21c:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c220:	d004      	beq.n	800c22c <remove_chain+0x8c>
 800c222:	4638      	mov	r0, r7
 800c224:	f7fe fd7c 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c228:	2800      	cmp	r0, #0
 800c22a:	d14f      	bne.n	800c2cc <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c22c:	f3c9 0908 	ubfx	r9, r9, #0, #9
 800c230:	444f      	add	r7, r9
 800c232:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c236:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c23a:	07e3      	lsls	r3, r4, #31
 800c23c:	d548      	bpl.n	800c2d0 <remove_chain+0x130>
 800c23e:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 800c242:	f1b8 0f00 	cmp.w	r8, #0
 800c246:	d046      	beq.n	800c2d6 <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c248:	f1b8 0f01 	cmp.w	r8, #1
 800c24c:	d0be      	beq.n	800c1cc <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c24e:	69ab      	ldr	r3, [r5, #24]
 800c250:	42a3      	cmp	r3, r4
 800c252:	d9bb      	bls.n	800c1cc <remove_chain+0x2c>
 800c254:	2200      	movs	r2, #0
 800c256:	4621      	mov	r1, r4
 800c258:	4628      	mov	r0, r5
 800c25a:	f7fe ff13 	bl	800b084 <put_fat.part.0>
			if (res != FR_OK) return res;
 800c25e:	2800      	cmp	r0, #0
 800c260:	d1b5      	bne.n	800c1ce <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c262:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800c266:	1e91      	subs	r1, r2, #2
 800c268:	428b      	cmp	r3, r1
 800c26a:	d205      	bcs.n	800c278 <remove_chain+0xd8>
			fs->free_clst++;
 800c26c:	3301      	adds	r3, #1
 800c26e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800c270:	792b      	ldrb	r3, [r5, #4]
 800c272:	f043 0301 	orr.w	r3, r3, #1
 800c276:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c278:	4542      	cmp	r2, r8
 800c27a:	d92c      	bls.n	800c2d6 <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c27c:	6837      	ldr	r7, [r6, #0]
 800c27e:	4644      	mov	r4, r8
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	e79a      	b.n	800c1ba <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c284:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c288:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c28c:	4299      	cmp	r1, r3
 800c28e:	d003      	beq.n	800c298 <remove_chain+0xf8>
 800c290:	4638      	mov	r0, r7
 800c292:	f7fe fd45 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c296:	b9c8      	cbnz	r0, 800c2cc <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c298:	00a3      	lsls	r3, r4, #2
 800c29a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800c29e:	441f      	add	r7, r3
 800c2a0:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c2a4:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 800c2a8:	e7cb      	b.n	800c242 <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c2aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c2ae:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c2b2:	4299      	cmp	r1, r3
 800c2b4:	d003      	beq.n	800c2be <remove_chain+0x11e>
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	f7fe fd32 	bl	800ad20 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c2bc:	b930      	cbnz	r0, 800c2cc <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c2be:	0063      	lsls	r3, r4, #1
 800c2c0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c2c4:	441f      	add	r7, r3
 800c2c6:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 800c2ca:	e7ba      	b.n	800c242 <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c2cc:	2001      	movs	r0, #1
 800c2ce:	e77e      	b.n	800c1ce <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c2d0:	f3c8 080b 	ubfx	r8, r8, #0, #12
 800c2d4:	e7b5      	b.n	800c242 <remove_chain+0xa2>
	return FR_OK;
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	e779      	b.n	800c1ce <remove_chain+0x2e>
 800c2da:	bf00      	nop

0800c2dc <dir_alloc>:
{
 800c2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e0:	460b      	mov	r3, r1
	res = dir_sdi(dp, 0);
 800c2e2:	2100      	movs	r1, #0
{
 800c2e4:	4681      	mov	r9, r0
	FATFS *fs = dp->obj.fs;
 800c2e6:	f8d0 8000 	ldr.w	r8, [r0]
{
 800c2ea:	ed2d 8b02 	vpush	{d8}
 800c2ee:	b089      	sub	sp, #36	; 0x24
 800c2f0:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 800c2f2:	f7ff fb69 	bl	800b9c8 <dir_sdi>
	if (res == FR_OK) {
 800c2f6:	9002      	str	r0, [sp, #8]
 800c2f8:	b150      	cbz	r0, 800c310 <dir_alloc+0x34>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c2fa:	9b02      	ldr	r3, [sp, #8]
 800c2fc:	2b04      	cmp	r3, #4
 800c2fe:	d101      	bne.n	800c304 <dir_alloc+0x28>
 800c300:	2307      	movs	r3, #7
 800c302:	9302      	str	r3, [sp, #8]
}
 800c304:	9802      	ldr	r0, [sp, #8]
 800c306:	b009      	add	sp, #36	; 0x24
 800c308:	ecbd 8b02 	vpop	{d8}
 800c30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 800c310:	f8d9 b01c 	ldr.w	fp, [r9, #28]
 800c314:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c316:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 800c31a:	465d      	mov	r5, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c31c:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
 800c320:	42ac      	cmp	r4, r5
 800c322:	d019      	beq.n	800c358 <dir_alloc+0x7c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c324:	f898 3003 	ldrb.w	r3, [r8, #3]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d148      	bne.n	800c3be <dir_alloc+0xe2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c32c:	2301      	movs	r3, #1
 800c32e:	462a      	mov	r2, r5
 800c330:	4651      	mov	r1, sl
 800c332:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c336:	f7fe fb45 	bl	800a9c4 <disk_read>
 800c33a:	b158      	cbz	r0, 800c354 <dir_alloc+0x78>
				res = FR_DISK_ERR;
 800c33c:	2201      	movs	r2, #1
			fs->winsect = sector;
 800c33e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800c342:	9202      	str	r2, [sp, #8]
}
 800c344:	9802      	ldr	r0, [sp, #8]
			fs->winsect = sector;
 800c346:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 800c34a:	b009      	add	sp, #36	; 0x24
 800c34c:	ecbd 8b02 	vpop	{d8}
 800c350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800c354:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c358:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2be5      	cmp	r3, #229	; 0xe5
 800c360:	d028      	beq.n	800c3b4 <dir_alloc+0xd8>
 800c362:	fab3 f283 	clz	r2, r3
 800c366:	0952      	lsrs	r2, r2, #5
 800c368:	b323      	cbz	r3, 800c3b4 <dir_alloc+0xd8>
				n = 0;					/* Not a blank entry. Restart to search */
 800c36a:	4617      	mov	r7, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c36c:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c370:	f8d9 501c 	ldr.w	r5, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c374:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c376:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 800c37a:	d2c1      	bcs.n	800c300 <dir_alloc+0x24>
 800c37c:	2d00      	cmp	r5, #0
 800c37e:	d0bf      	beq.n	800c300 <dir_alloc+0x24>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c380:	f3c4 0b08 	ubfx	fp, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 800c384:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c388:	f1bb 0f00 	cmp.w	fp, #0
 800c38c:	d109      	bne.n	800c3a2 <dir_alloc+0xc6>
		dp->sect++;				/* Next sector */
 800c38e:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 800c390:	f8d9 1018 	ldr.w	r1, [r9, #24]
		dp->sect++;				/* Next sector */
 800c394:	f8c9 501c 	str.w	r5, [r9, #28]
		if (!dp->clust) {		/* Static table */
 800c398:	bba9      	cbnz	r1, 800c406 <dir_alloc+0x12a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c39a:	8933      	ldrh	r3, [r6, #8]
 800c39c:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800c3a0:	d95a      	bls.n	800c458 <dir_alloc+0x17c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c3a2:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800c3a6:	9301      	str	r3, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c3a8:	445b      	add	r3, fp
	dp->dptr = ofs;						/* Current entry */
 800c3aa:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c3ae:	f8c9 3020 	str.w	r3, [r9, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c3b2:	e7b3      	b.n	800c31c <dir_alloc+0x40>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c3b4:	3701      	adds	r7, #1
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	429f      	cmp	r7, r3
 800c3ba:	d1d7      	bne.n	800c36c <dir_alloc+0x90>
 800c3bc:	e7a2      	b.n	800c304 <dir_alloc+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c3be:	2301      	movs	r3, #1
 800c3c0:	4622      	mov	r2, r4
 800c3c2:	4651      	mov	r1, sl
 800c3c4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c3c8:	f7fe fb0a 	bl	800a9e0 <disk_write>
 800c3cc:	bb48      	cbnz	r0, 800c422 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c3ce:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 800c3d2:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c3d6:	1ae2      	subs	r2, r4, r3
 800c3d8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d2a5      	bcs.n	800c32c <dir_alloc+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3e0:	f898 6002 	ldrb.w	r6, [r8, #2]
 800c3e4:	2e01      	cmp	r6, #1
 800c3e6:	d802      	bhi.n	800c3ee <dir_alloc+0x112>
 800c3e8:	e7a0      	b.n	800c32c <dir_alloc+0x50>
					wsect += fs->fsize;
 800c3ea:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800c3ee:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3f0:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	4651      	mov	r1, sl
 800c3f6:	4622      	mov	r2, r4
 800c3f8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c3fc:	f7fe faf0 	bl	800a9e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c400:	2e01      	cmp	r6, #1
 800c402:	d1f2      	bne.n	800c3ea <dir_alloc+0x10e>
 800c404:	e792      	b.n	800c32c <dir_alloc+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c406:	8973      	ldrh	r3, [r6, #10]
 800c408:	3b01      	subs	r3, #1
 800c40a:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 800c40e:	d1c8      	bne.n	800c3a2 <dir_alloc+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c410:	4630      	mov	r0, r6
 800c412:	f7fe fed1 	bl	800b1b8 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c416:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c418:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c41a:	f240 8081 	bls.w	800c520 <dir_alloc+0x244>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d102      	bne.n	800c428 <dir_alloc+0x14c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c422:	2301      	movs	r3, #1
 800c424:	9302      	str	r3, [sp, #8]
 800c426:	e76d      	b.n	800c304 <dir_alloc+0x28>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c428:	69b3      	ldr	r3, [r6, #24]
 800c42a:	4298      	cmp	r0, r3
 800c42c:	d219      	bcs.n	800c462 <dir_alloc+0x186>
	clst -= 2;
 800c42e:	1e82      	subs	r2, r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c430:	3b02      	subs	r3, #2
	clst -= 2;
 800c432:	9205      	str	r2, [sp, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c434:	f106 0234 	add.w	r2, r6, #52	; 0x34
 800c438:	9201      	str	r2, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
 800c43a:	9a04      	ldr	r2, [sp, #16]
 800c43c:	f8c9 2018 	str.w	r2, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c440:	9a05      	ldr	r2, [sp, #20]
 800c442:	4293      	cmp	r3, r2
 800c444:	f240 809e 	bls.w	800c584 <dir_alloc+0x2a8>
	return clst * fs->csize + fs->database;
 800c448:	8973      	ldrh	r3, [r6, #10]
 800c44a:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 800c44c:	fb02 5503 	mla	r5, r2, r3, r5
 800c450:	9b01      	ldr	r3, [sp, #4]
				dp->sect = clust2sect(fs, clst);
 800c452:	f8c9 501c 	str.w	r5, [r9, #28]
 800c456:	e7a7      	b.n	800c3a8 <dir_alloc+0xcc>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c458:	2307      	movs	r3, #7
				dp->sect = 0; return FR_NO_FILE;
 800c45a:	f8c9 101c 	str.w	r1, [r9, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c45e:	9302      	str	r3, [sp, #8]
 800c460:	e750      	b.n	800c304 <dir_alloc+0x28>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c462:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800c466:	4648      	mov	r0, r9
 800c468:	f7ff f9de 	bl	800b828 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c46c:	4603      	mov	r3, r0
 800c46e:	9004      	str	r0, [sp, #16]
 800c470:	2800      	cmp	r0, #0
 800c472:	f43f af45 	beq.w	800c300 <dir_alloc+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c476:	2801      	cmp	r0, #1
 800c478:	d052      	beq.n	800c520 <dir_alloc+0x244>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c47a:	3301      	adds	r3, #1
 800c47c:	d0d1      	beq.n	800c422 <dir_alloc+0x146>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c47e:	78f3      	ldrb	r3, [r6, #3]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d150      	bne.n	800c526 <dir_alloc+0x24a>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c484:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800c488:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 800c48a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c48e:	2100      	movs	r1, #0
 800c490:	9801      	ldr	r0, [sp, #4]
 800c492:	f008 fe13 	bl	80150bc <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c496:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 800c498:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c49a:	3b02      	subs	r3, #2
	clst -= 2;
 800c49c:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c49e:	429a      	cmp	r2, r3
	clst -= 2;
 800c4a0:	9205      	str	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c4a2:	d27d      	bcs.n	800c5a0 <dir_alloc+0x2c4>
	return clst * fs->csize + fs->database;
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	8971      	ldrh	r1, [r6, #10]
 800c4a8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800c4aa:	fb00 2201 	mla	r2, r0, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c4ae:	6332      	str	r2, [r6, #48]	; 0x30
 800c4b0:	2900      	cmp	r1, #0
 800c4b2:	d073      	beq.n	800c59c <dir_alloc+0x2c0>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	ee08 aa10 	vmov	s16, sl
 800c4ba:	9706      	str	r7, [sp, #24]
 800c4bc:	4692      	mov	sl, r2
 800c4be:	f8cd 901c 	str.w	r9, [sp, #28]
 800c4c2:	46a1      	mov	r9, r4
 800c4c4:	9f01      	ldr	r7, [sp, #4]
 800c4c6:	461c      	mov	r4, r3
						fs->wflag = 1;
 800c4c8:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c4cc:	4652      	mov	r2, sl
 800c4ce:	4639      	mov	r1, r7
 800c4d0:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 800c4d2:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	f7fe fa83 	bl	800a9e0 <disk_write>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d1a1      	bne.n	800c422 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c4de:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 800c4e0:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c4e2:	ebaa 0203 	sub.w	r2, sl, r3
 800c4e6:	69f3      	ldr	r3, [r6, #28]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d20e      	bcs.n	800c50a <dir_alloc+0x22e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4ec:	78b5      	ldrb	r5, [r6, #2]
 800c4ee:	2d01      	cmp	r5, #1
 800c4f0:	d801      	bhi.n	800c4f6 <dir_alloc+0x21a>
 800c4f2:	e00a      	b.n	800c50a <dir_alloc+0x22e>
					wsect += fs->fsize;
 800c4f4:	69f3      	ldr	r3, [r6, #28]
 800c4f6:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4f8:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	4639      	mov	r1, r7
 800c4fe:	4652      	mov	r2, sl
 800c500:	7870      	ldrb	r0, [r6, #1]
 800c502:	f7fe fa6d 	bl	800a9e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c506:	2d01      	cmp	r5, #1
 800c508:	d1f4      	bne.n	800c4f4 <dir_alloc+0x218>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c50a:	6b31      	ldr	r1, [r6, #48]	; 0x30
 800c50c:	1c63      	adds	r3, r4, #1
 800c50e:	8972      	ldrh	r2, [r6, #10]
 800c510:	f101 0a01 	add.w	sl, r1, #1
 800c514:	4293      	cmp	r3, r2
 800c516:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
 800c51a:	d235      	bcs.n	800c588 <dir_alloc+0x2ac>
 800c51c:	461c      	mov	r4, r3
 800c51e:	e7d3      	b.n	800c4c8 <dir_alloc+0x1ec>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c520:	2302      	movs	r3, #2
 800c522:	9302      	str	r3, [sp, #8]
 800c524:	e6ee      	b.n	800c304 <dir_alloc+0x28>
		wsect = fs->winsect;	/* Current sector number */
 800c526:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c528:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800c52c:	2301      	movs	r3, #1
 800c52e:	7870      	ldrb	r0, [r6, #1]
 800c530:	9205      	str	r2, [sp, #20]
 800c532:	9101      	str	r1, [sp, #4]
 800c534:	f7fe fa54 	bl	800a9e0 <disk_write>
 800c538:	2800      	cmp	r0, #0
 800c53a:	f47f af72 	bne.w	800c422 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c53e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c540:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
 800c542:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c544:	1ad1      	subs	r1, r2, r3
 800c546:	69f3      	ldr	r3, [r6, #28]
 800c548:	4299      	cmp	r1, r3
 800c54a:	d29e      	bcs.n	800c48a <dir_alloc+0x1ae>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c54c:	78b5      	ldrb	r5, [r6, #2]
 800c54e:	2d01      	cmp	r5, #1
 800c550:	d99b      	bls.n	800c48a <dir_alloc+0x1ae>
 800c552:	ee08 aa10 	vmov	s16, sl
 800c556:	f8cd 9014 	str.w	r9, [sp, #20]
 800c55a:	4692      	mov	sl, r2
 800c55c:	46a1      	mov	r9, r4
 800c55e:	9c01      	ldr	r4, [sp, #4]
 800c560:	e000      	b.n	800c564 <dir_alloc+0x288>
					wsect += fs->fsize;
 800c562:	69f3      	ldr	r3, [r6, #28]
 800c564:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c566:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800c568:	2301      	movs	r3, #1
 800c56a:	4621      	mov	r1, r4
 800c56c:	4652      	mov	r2, sl
 800c56e:	7870      	ldrb	r0, [r6, #1]
 800c570:	f7fe fa36 	bl	800a9e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c574:	2d01      	cmp	r5, #1
 800c576:	d1f4      	bne.n	800c562 <dir_alloc+0x286>
 800c578:	464c      	mov	r4, r9
 800c57a:	ee18 aa10 	vmov	sl, s16
 800c57e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c582:	e782      	b.n	800c48a <dir_alloc+0x1ae>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c584:	2500      	movs	r5, #0
 800c586:	e763      	b.n	800c450 <dir_alloc+0x174>
					fs->winsect -= n;							/* Restore window offset */
 800c588:	4623      	mov	r3, r4
 800c58a:	9f06      	ldr	r7, [sp, #24]
 800c58c:	464c      	mov	r4, r9
 800c58e:	ee18 aa10 	vmov	sl, s16
 800c592:	1aca      	subs	r2, r1, r3
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c594:	69b3      	ldr	r3, [r6, #24]
					fs->winsect -= n;							/* Restore window offset */
 800c596:	f8dd 901c 	ldr.w	r9, [sp, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c59a:	3b02      	subs	r3, #2
					fs->winsect -= n;							/* Restore window offset */
 800c59c:	6332      	str	r2, [r6, #48]	; 0x30
 800c59e:	e74c      	b.n	800c43a <dir_alloc+0x15e>
	return clst * fs->csize + fs->database;
 800c5a0:	8971      	ldrh	r1, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	e783      	b.n	800c4ae <dir_alloc+0x1d2>
 800c5a6:	bf00      	nop

0800c5a8 <dir_register>:
{
 800c5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c5ac:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 800c5b0:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c5b2:	f013 0ba0 	ands.w	fp, r3, #160	; 0xa0
 800c5b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5b8:	f040 82cc 	bne.w	800cb54 <dir_register+0x5ac>
	FATFS *fs = dp->obj.fs;
 800c5bc:	f8d0 9000 	ldr.w	r9, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	f8d9 c00c 	ldr.w	ip, [r9, #12]
 800c5c6:	f8bc 3000 	ldrh.w	r3, [ip]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	f000 8444 	beq.w	800ce58 <dir_register+0x8b0>
 800c5d0:	4663      	mov	r3, ip
 800c5d2:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 800c5d6:	f10b 0b01 	add.w	fp, fp, #1
 800c5da:	2a00      	cmp	r2, #0
 800c5dc:	d1f9      	bne.n	800c5d2 <dir_register+0x2a>
	mem_cpy(sn, dp->fn, 12);
 800c5de:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
 800c5e2:	ab12      	add	r3, sp, #72	; 0x48
 800c5e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800c5e8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ee:	07d8      	lsls	r0, r3, #31
 800c5f0:	f140 8187 	bpl.w	800c902 <dir_register+0x35a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c5f4:	2340      	movs	r3, #64	; 0x40
			*d++ = *s++;
 800c5f6:	f89d 2045 	ldrb.w	r2, [sp, #69]	; 0x45
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c5fa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
		for (n = 1; n < 100; n++) {
 800c5fe:	2701      	movs	r7, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c600:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c604:	f04f 0820 	mov.w	r8, #32
			*d++ = *s++;
 800c608:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c60c:	4661      	mov	r1, ip
			*d++ = *s++;
 800c60e:	f89d a046 	ldrb.w	sl, [sp, #70]	; 0x46
 800c612:	9301      	str	r3, [sp, #4]
 800c614:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
				if (sr & 0x10000) sr ^= 0x11021;
 800c618:	4dc3      	ldr	r5, [pc, #780]	; (800c928 <dir_register+0x380>)
			*d++ = *s++;
 800c61a:	9304      	str	r3, [sp, #16]
 800c61c:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800c620:	9208      	str	r2, [sp, #32]
 800c622:	9303      	str	r3, [sp, #12]
 800c624:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 800c628:	9302      	str	r3, [sp, #8]
 800c62a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800c62e:	9307      	str	r3, [sp, #28]
 800c630:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 800c634:	9306      	str	r3, [sp, #24]
 800c636:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800c63a:	9305      	str	r3, [sp, #20]
 800c63c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 800c640:	9309      	str	r3, [sp, #36]	; 0x24
 800c642:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c646:	469b      	mov	fp, r3
			*d++ = *s++;
 800c648:	9b08      	ldr	r3, [sp, #32]
 800c64a:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c64c:	2f05      	cmp	r7, #5
			*d++ = *s++;
 800c64e:	f884 b02c 	strb.w	fp, [r4, #44]	; 0x2c
 800c652:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 800c656:	9b01      	ldr	r3, [sp, #4]
 800c658:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
 800c65c:	f363 0207 	bfi	r2, r3, #0, #8
 800c660:	9b04      	ldr	r3, [sp, #16]
 800c662:	f363 220f 	bfi	r2, r3, #8, #8
 800c666:	9b03      	ldr	r3, [sp, #12]
 800c668:	f363 4217 	bfi	r2, r3, #16, #8
 800c66c:	9b02      	ldr	r3, [sp, #8]
 800c66e:	f363 621f 	bfi	r2, r3, #24, #8
 800c672:	9b07      	ldr	r3, [sp, #28]
 800c674:	6262      	str	r2, [r4, #36]	; 0x24
 800c676:	f04f 0200 	mov.w	r2, #0
 800c67a:	f363 0207 	bfi	r2, r3, #0, #8
 800c67e:	9b06      	ldr	r3, [sp, #24]
 800c680:	f363 220f 	bfi	r2, r3, #8, #8
 800c684:	9b05      	ldr	r3, [sp, #20]
 800c686:	f363 4217 	bfi	r2, r3, #16, #8
 800c68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c68c:	f363 621f 	bfi	r2, r3, #24, #8
 800c690:	62a2      	str	r2, [r4, #40]	; 0x28
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c692:	f240 8183 	bls.w	800c99c <dir_register+0x3f4>
		while (*lfn) {	/* Create a CRC */
 800c696:	880a      	ldrh	r2, [r1, #0]
 800c698:	2a00      	cmp	r2, #0
 800c69a:	f000 817f 	beq.w	800c99c <dir_register+0x3f4>
				sr = (sr << 1) + (wc & 1);
 800c69e:	468c      	mov	ip, r1
 800c6a0:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 800c6a4:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 800c6a6:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c6aa:	e009      	b.n	800c6c0 <dir_register+0x118>
				sr = (sr << 1) + (wc & 1);
 800c6ac:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c6b0:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 800c6b4:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 800c6b8:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c6bc:	bf18      	it	ne
 800c6be:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 800c6c0:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 800c6c4:	0893      	lsrs	r3, r2, #2
 800c6c6:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 800c6c8:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c6cc:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c6d6:	bf48      	it	mi
 800c6d8:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
 800c6dc:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 800c6de:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c6e2:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 800c6e6:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c6ea:	bf18      	it	ne
 800c6ec:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 800c6ee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c6f2:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800c6f4:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 800c6f8:	bf48      	it	mi
 800c6fa:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c704:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800c706:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 800c70a:	bf48      	it	mi
 800c70c:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 800c70e:	f000 0001 	and.w	r0, r0, #1
 800c712:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c716:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800c718:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 800c71c:	bf48      	it	mi
 800c71e:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 800c720:	f001 0101 	and.w	r1, r1, #1
 800c724:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c728:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800c72a:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 800c72e:	bf48      	it	mi
 800c730:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c73a:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800c73c:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 800c740:	bf48      	it	mi
 800c742:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 800c744:	f000 0001 	and.w	r0, r0, #1
 800c748:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c74c:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800c74e:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 800c752:	bf48      	it	mi
 800c754:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 800c756:	f001 0101 	and.w	r1, r1, #1
 800c75a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c75e:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800c760:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 800c764:	bf48      	it	mi
 800c766:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 800c768:	f003 0301 	and.w	r3, r3, #1
 800c76c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c770:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800c772:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 800c776:	bf48      	it	mi
 800c778:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 800c77a:	f000 0001 	and.w	r0, r0, #1
 800c77e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c782:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800c784:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 800c788:	bf48      	it	mi
 800c78a:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 800c78c:	f001 0101 	and.w	r1, r1, #1
 800c790:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c794:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800c796:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 800c79a:	bf48      	it	mi
 800c79c:	4068      	eormi	r0, r5
				wc >>= 1;
 800c79e:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
 800c7a0:	f003 0301 	and.w	r3, r3, #1
 800c7a4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c7a8:	0400      	lsls	r0, r0, #16
 800c7aa:	bf48      	it	mi
 800c7ac:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 800c7ae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c7b2:	0409      	lsls	r1, r1, #16
 800c7b4:	bf48      	it	mi
 800c7b6:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 800c7b8:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c7bc:	041a      	lsls	r2, r3, #16
		while (*lfn) {	/* Create a CRC */
 800c7be:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 800c7c2:	bf48      	it	mi
 800c7c4:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
 800c7c8:	2a00      	cmp	r2, #0
 800c7ca:	f47f af6f 	bne.w	800c6ac <dir_register+0x104>
		c = (BYTE)((seq % 16) + '0');
 800c7ce:	f00e 010f 	and.w	r1, lr, #15
 800c7d2:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800c7d6:	2a39      	cmp	r2, #57	; 0x39
 800c7d8:	bf88      	it	hi
 800c7da:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800c7de:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 800c7e2:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 800c7e6:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
 800c7ea:	f240 8186 	bls.w	800cafa <dir_register+0x552>
		c = (BYTE)((seq % 16) + '0');
 800c7ee:	f001 000f 	and.w	r0, r1, #15
 800c7f2:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800c7f6:	2a39      	cmp	r2, #57	; 0x39
 800c7f8:	bf88      	it	hi
 800c7fa:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800c7fe:	290f      	cmp	r1, #15
		seq /= 16;
 800c800:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 800c804:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
 800c808:	f240 817d 	bls.w	800cb06 <dir_register+0x55e>
		c = (BYTE)((seq % 16) + '0');
 800c80c:	f000 010f 	and.w	r1, r0, #15
 800c810:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800c814:	2a39      	cmp	r2, #57	; 0x39
 800c816:	bf88      	it	hi
 800c818:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800c81c:	280f      	cmp	r0, #15
		seq /= 16;
 800c81e:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 800c822:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
 800c826:	f240 8174 	bls.w	800cb12 <dir_register+0x56a>
		c = (BYTE)((seq % 16) + '0');
 800c82a:	f001 000f 	and.w	r0, r1, #15
 800c82e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800c832:	2a39      	cmp	r2, #57	; 0x39
 800c834:	bf88      	it	hi
 800c836:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800c83a:	290f      	cmp	r1, #15
		seq /= 16;
 800c83c:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 800c840:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
 800c844:	f240 8174 	bls.w	800cb30 <dir_register+0x588>
		c = (BYTE)((seq % 16) + '0');
 800c848:	f000 010f 	and.w	r1, r0, #15
 800c84c:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800c850:	2a39      	cmp	r2, #57	; 0x39
 800c852:	bf88      	it	hi
 800c854:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800c858:	280f      	cmp	r0, #15
		seq /= 16;
 800c85a:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 800c85e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
 800c862:	f240 816b 	bls.w	800cb3c <dir_register+0x594>
		c = (BYTE)((seq % 16) + '0');
 800c866:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 800c86a:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 800c86e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800c872:	2a39      	cmp	r2, #57	; 0x39
 800c874:	bf88      	it	hi
 800c876:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800c87a:	290f      	cmp	r1, #15
		ns[i--] = c;
 800c87c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
 800c880:	f240 8162 	bls.w	800cb48 <dir_register+0x5a0>
		c = (BYTE)((seq % 16) + '0');
 800c884:	f00e 010f 	and.w	r1, lr, #15
 800c888:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800c88c:	2a39      	cmp	r2, #57	; 0x39
 800c88e:	bf88      	it	hi
 800c890:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800c894:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 800c898:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 800c89c:	f240 813f 	bls.w	800cb1e <dir_register+0x576>
		ns[i--] = c;
 800c8a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c8a4:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	e002      	b.n	800c8b2 <dir_register+0x30a>
 800c8ac:	3201      	adds	r2, #1
 800c8ae:	4562      	cmp	r2, ip
 800c8b0:	d003      	beq.n	800c8ba <dir_register+0x312>
 800c8b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c8b6:	2b20      	cmp	r3, #32
 800c8b8:	d1f8      	bne.n	800c8ac <dir_register+0x304>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c8ba:	f1bc 0f07 	cmp.w	ip, #7
 800c8be:	d96f      	bls.n	800c9a0 <dir_register+0x3f8>
 800c8c0:	1c50      	adds	r0, r2, #1
 800c8c2:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 800c8c6:	2807      	cmp	r0, #7
 800c8c8:	d809      	bhi.n	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c8ca:	1c42      	adds	r2, r0, #1
 800c8cc:	2120      	movs	r1, #32
 800c8ce:	2a08      	cmp	r2, #8
 800c8d0:	f1c0 0208 	rsb	r2, r0, #8
 800c8d4:	4430      	add	r0, r6
 800c8d6:	bf88      	it	hi
 800c8d8:	2201      	movhi	r2, #1
 800c8da:	f008 fbef 	bl	80150bc <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f7ff f92c 	bl	800bb3c <dir_find>
			if (res != FR_OK) break;
 800c8e4:	b930      	cbnz	r0, 800c8f4 <dir_register+0x34c>
		for (n = 1; n < 100; n++) {
 800c8e6:	3701      	adds	r7, #1
 800c8e8:	2f64      	cmp	r7, #100	; 0x64
 800c8ea:	f000 82b8 	beq.w	800ce5e <dir_register+0x8b6>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c8ee:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800c8f2:	e6a9      	b.n	800c648 <dir_register+0xa0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c8f4:	2804      	cmp	r0, #4
 800c8f6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800c8fa:	d112      	bne.n	800c922 <dir_register+0x37a>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8fe:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c904:	079b      	lsls	r3, r3, #30
 800c906:	d513      	bpl.n	800c930 <dir_register+0x388>
 800c908:	f10b 0b0c 	add.w	fp, fp, #12
 800c90c:	4d07      	ldr	r5, [pc, #28]	; (800c92c <dir_register+0x384>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c90e:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c910:	fba5 350b 	umull	r3, r5, r5, fp
 800c914:	08ad      	lsrs	r5, r5, #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c916:	1c69      	adds	r1, r5, #1
 800c918:	f7ff fce0 	bl	800c2dc <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c91c:	2800      	cmp	r0, #0
 800c91e:	f000 811d 	beq.w	800cb5c <dir_register+0x5b4>
}
 800c922:	b013      	add	sp, #76	; 0x4c
 800c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c928:	00011021 	.word	0x00011021
 800c92c:	4ec4ec4f 	.word	0x4ec4ec4f
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c930:	2101      	movs	r1, #1
 800c932:	4620      	mov	r0, r4
 800c934:	f7ff fcd2 	bl	800c2dc <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c938:	2800      	cmp	r0, #0
 800c93a:	d1f2      	bne.n	800c922 <dir_register+0x37a>
		res = move_window(fs, dp->sect);
 800c93c:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800c93e:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800c942:	4299      	cmp	r1, r3
 800c944:	d004      	beq.n	800c950 <dir_register+0x3a8>
 800c946:	4648      	mov	r0, r9
 800c948:	f7fe f9ea 	bl	800ad20 <move_window.part.0>
		if (res == FR_OK) {
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d1e8      	bne.n	800c922 <dir_register+0x37a>
		*d++ = (BYTE)val;
 800c950:	2220      	movs	r2, #32
 800c952:	2100      	movs	r1, #0
 800c954:	6a20      	ldr	r0, [r4, #32]
 800c956:	f008 fbb1 	bl	80150bc <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c95a:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c95c:	f104 0225 	add.w	r2, r4, #37	; 0x25
 800c960:	1a9a      	subs	r2, r3, r2
 800c962:	2a02      	cmp	r2, #2
 800c964:	f240 8295 	bls.w	800ce92 <dir_register+0x8ea>
			*d++ = *s++;
 800c968:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c96e:	605a      	str	r2, [r3, #4]
 800c970:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
			fs->wflag = 1;
 800c974:	2000      	movs	r0, #0
			*d++ = *s++;
 800c976:	721a      	strb	r2, [r3, #8]
 800c978:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 800c97c:	725a      	strb	r2, [r3, #9]
 800c97e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 800c982:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 800c984:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c986:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800c98a:	6a21      	ldr	r1, [r4, #32]
 800c98c:	f003 0318 	and.w	r3, r3, #24
 800c990:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800c992:	f889 2003 	strb.w	r2, [r9, #3]
}
 800c996:	b013      	add	sp, #76	; 0x4c
 800c998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99c:	46be      	mov	lr, r7
 800c99e:	e716      	b.n	800c7ce <dir_register+0x226>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9a0:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 800c9a4:	f10c 0c01 	add.w	ip, ip, #1
 800c9a8:	eb0d 0103 	add.w	r1, sp, r3
 800c9ac:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800c9b0:	54b1      	strb	r1, [r6, r2]
 800c9b2:	3201      	adds	r2, #1
	} while (j < 8);
 800c9b4:	2a07      	cmp	r2, #7
 800c9b6:	d892      	bhi.n	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9b8:	f1bc 0f08 	cmp.w	ip, #8
 800c9bc:	d066      	beq.n	800ca8c <dir_register+0x4e4>
 800c9be:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
 800c9c2:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9c4:	f102 0001 	add.w	r0, r2, #1
 800c9c8:	eb0d 0103 	add.w	r1, sp, r3
 800c9cc:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800c9d0:	54b1      	strb	r1, [r6, r2]
 800c9d2:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 800c9d6:	d082      	beq.n	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9d8:	2908      	cmp	r1, #8
 800c9da:	d05f      	beq.n	800ca9c <dir_register+0x4f4>
 800c9dc:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
 800c9e0:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9e2:	eb0d 0103 	add.w	r1, sp, r3
 800c9e6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800c9ea:	5431      	strb	r1, [r6, r0]
 800c9ec:	f10c 0102 	add.w	r1, ip, #2
 800c9f0:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800c9f4:	f43f af73 	beq.w	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c9f8:	2908      	cmp	r1, #8
 800c9fa:	d057      	beq.n	800caac <dir_register+0x504>
 800c9fc:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
 800ca00:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca02:	eb0d 0103 	add.w	r1, sp, r3
 800ca06:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ca0a:	5431      	strb	r1, [r6, r0]
 800ca0c:	f10c 0103 	add.w	r1, ip, #3
 800ca10:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800ca14:	f43f af63 	beq.w	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca18:	2908      	cmp	r1, #8
 800ca1a:	d04f      	beq.n	800cabc <dir_register+0x514>
 800ca1c:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
 800ca20:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca22:	eb0d 0103 	add.w	r1, sp, r3
 800ca26:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ca2a:	5431      	strb	r1, [r6, r0]
 800ca2c:	f10c 0104 	add.w	r1, ip, #4
 800ca30:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800ca34:	f43f af53 	beq.w	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca38:	2908      	cmp	r1, #8
 800ca3a:	d047      	beq.n	800cacc <dir_register+0x524>
 800ca3c:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
 800ca40:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca42:	eb0d 0103 	add.w	r1, sp, r3
 800ca46:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ca4a:	5431      	strb	r1, [r6, r0]
 800ca4c:	f10c 0105 	add.w	r1, ip, #5
 800ca50:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800ca54:	f43f af43 	beq.w	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca58:	2908      	cmp	r1, #8
 800ca5a:	d03f      	beq.n	800cadc <dir_register+0x534>
 800ca5c:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
 800ca60:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca62:	eb0d 0103 	add.w	r1, sp, r3
 800ca66:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ca6a:	5431      	strb	r1, [r6, r0]
 800ca6c:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 800ca70:	f43f af35 	beq.w	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca74:	f1bc 0f01 	cmp.w	ip, #1
 800ca78:	d138      	bne.n	800caec <dir_register+0x544>
 800ca7a:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
 800ca7e:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca80:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 800ca82:	f47f af2c 	bne.w	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca86:	f884 802b 	strb.w	r8, [r4, #43]	; 0x2b
	} while (j < 8);
 800ca8a:	e728      	b.n	800c8de <dir_register+0x336>
 800ca8c:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca8e:	f102 0001 	add.w	r0, r2, #1
 800ca92:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 800ca96:	f47f af18 	bne.w	800c8ca <dir_register+0x322>
 800ca9a:	e720      	b.n	800c8de <dir_register+0x336>
 800ca9c:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ca9e:	f806 8000 	strb.w	r8, [r6, r0]
 800caa2:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800caa6:	f47f af10 	bne.w	800c8ca <dir_register+0x322>
 800caaa:	e718      	b.n	800c8de <dir_register+0x336>
 800caac:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800caae:	f806 8000 	strb.w	r8, [r6, r0]
 800cab2:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800cab6:	f47f af08 	bne.w	800c8ca <dir_register+0x322>
 800caba:	e710      	b.n	800c8de <dir_register+0x336>
 800cabc:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cabe:	f806 8000 	strb.w	r8, [r6, r0]
 800cac2:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800cac6:	f47f af00 	bne.w	800c8ca <dir_register+0x322>
 800caca:	e708      	b.n	800c8de <dir_register+0x336>
 800cacc:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cace:	f806 8000 	strb.w	r8, [r6, r0]
 800cad2:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800cad6:	f47f aef8 	bne.w	800c8ca <dir_register+0x322>
 800cada:	e700      	b.n	800c8de <dir_register+0x336>
 800cadc:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cade:	f806 8000 	strb.w	r8, [r6, r0]
 800cae2:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 800cae6:	f47f aef0 	bne.w	800c8ca <dir_register+0x322>
 800caea:	e6f8      	b.n	800c8de <dir_register+0x336>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800caec:	f806 8001 	strb.w	r8, [r6, r1]
	} while (j < 8);
 800caf0:	2a00      	cmp	r2, #0
 800caf2:	f47f aef4 	bne.w	800c8de <dir_register+0x336>
 800caf6:	2007      	movs	r0, #7
 800caf8:	e6e7      	b.n	800c8ca <dir_register+0x322>
	ns[i] = '~';
 800cafa:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800cafc:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 800cb00:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb04:	e6ce      	b.n	800c8a4 <dir_register+0x2fc>
	ns[i] = '~';
 800cb06:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800cb08:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 800cb0c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb10:	e6c8      	b.n	800c8a4 <dir_register+0x2fc>
	ns[i] = '~';
 800cb12:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800cb14:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 800cb18:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb1c:	e6c2      	b.n	800c8a4 <dir_register+0x2fc>
	ns[i] = '~';
 800cb1e:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cb20:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800cb24:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cb28:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800cb2c:	4662      	mov	r2, ip
 800cb2e:	e746      	b.n	800c9be <dir_register+0x416>
	ns[i] = '~';
 800cb30:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800cb32:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 800cb36:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb3a:	e6b3      	b.n	800c8a4 <dir_register+0x2fc>
	ns[i] = '~';
 800cb3c:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800cb3e:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 800cb42:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb46:	e6ad      	b.n	800c8a4 <dir_register+0x2fc>
	ns[i] = '~';
 800cb48:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800cb4a:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800cb4e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb52:	e6a7      	b.n	800c8a4 <dir_register+0x2fc>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cb54:	2006      	movs	r0, #6
}
 800cb56:	b013      	add	sp, #76	; 0x4c
 800cb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cb5c:	f1bb 0f0c 	cmp.w	fp, #12
 800cb60:	f43f aeec 	beq.w	800c93c <dir_register+0x394>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cb64:	6961      	ldr	r1, [r4, #20]
 800cb66:	4620      	mov	r0, r4
 800cb68:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 800cb6c:	f7fe ff2c 	bl	800b9c8 <dir_sdi>
		if (res == FR_OK) {
 800cb70:	2800      	cmp	r0, #0
 800cb72:	f47f aed6 	bne.w	800c922 <dir_register+0x37a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cb76:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
	dir[LDIR_Type] = 0;
 800cb7a:	4680      	mov	r8, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cb7c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800cb80:	01fb      	lsls	r3, r7, #7
 800cb82:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 800cb86:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 800cb8a:	ea43 0357 	orr.w	r3, r3, r7, lsr #1
 800cb8e:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
 800cb92:	f894 e02a 	ldrb.w	lr, [r4, #42]	; 0x2a
 800cb96:	189f      	adds	r7, r3, r2
 800cb98:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800cb9c:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
 800cba0:	f3c7 0346 	ubfx	r3, r7, #1, #7
 800cba4:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 800cba8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 800cbac:	fa50 f783 	uxtab	r7, r0, r3
 800cbb0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800cbb4:	f3c7 0346 	ubfx	r3, r7, #1, #7
 800cbb8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 800cbbc:	fa51 f783 	uxtab	r7, r1, r3
 800cbc0:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 800cbc4:	f3c7 0346 	ubfx	r3, r7, #1, #7
 800cbc8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cbcc:	f64f 77fd 	movw	r7, #65533	; 0xfffd
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cbd0:	fa5a fa83 	uxtab	sl, sl, r3
 800cbd4:	f3ca 0346 	ubfx	r3, sl, #1, #7
 800cbd8:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 800cbdc:	fa52 f283 	uxtab	r2, r2, r3
 800cbe0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800cbe4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800cbe8:	fa5e f283 	uxtab	r2, lr, r3
 800cbec:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800cbf0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800cbf4:	fa5c f283 	uxtab	r2, ip, r3
 800cbf8:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800cbfc:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800cc00:	fa56 f283 	uxtab	r2, r6, r3
 800cc04:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800cc08:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800cc0c:	fa50 f383 	uxtab	r3, r0, r3
 800cc10:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800cc14:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 800cc18:	fa51 f183 	uxtab	r1, r1, r3
 800cc1c:	b2ce      	uxtb	r6, r1
	} while (--n);
 800cc1e:	e036      	b.n	800cc8e <dir_register+0x6e6>
	*ptr++ = (BYTE)val; val >>= 8;
 800cc20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc24:	f8a3 2003 	strh.w	r2, [r3, #3]
 800cc28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc2c:	f8a3 2005 	strh.w	r2, [r3, #5]
 800cc30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc34:	f8a3 2007 	strh.w	r2, [r3, #7]
 800cc38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc3c:	f8a3 2009 	strh.w	r2, [r3, #9]
 800cc40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc44:	81da      	strh	r2, [r3, #14]
 800cc46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc4a:	821a      	strh	r2, [r3, #16]
 800cc4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc50:	825a      	strh	r2, [r3, #18]
 800cc52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc56:	829a      	strh	r2, [r3, #20]
 800cc58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc5c:	82da      	strh	r2, [r3, #22]
 800cc5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc62:	831a      	strh	r2, [r3, #24]
 800cc64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc68:	839a      	strh	r2, [r3, #28]
 800cc6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc6e:	83da      	strh	r2, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cc70:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cc74:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 800cc76:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800cc78:	4620      	mov	r0, r4
				fs->wflag = 1;
 800cc7a:	f889 3003 	strb.w	r3, [r9, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cc7e:	f7fe fafb 	bl	800b278 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 800cc82:	2800      	cmp	r0, #0
 800cc84:	f47f ae4d 	bne.w	800c922 <dir_register+0x37a>
 800cc88:	3d01      	subs	r5, #1
 800cc8a:	f43f ae57 	beq.w	800c93c <dir_register+0x394>
				res = move_window(fs, dp->sect);
 800cc8e:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc90:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800cc94:	4299      	cmp	r1, r3
 800cc96:	d005      	beq.n	800cca4 <dir_register+0x6fc>
 800cc98:	4648      	mov	r0, r9
 800cc9a:	f7fe f841 	bl	800ad20 <move_window.part.0>
				if (res != FR_OK) break;
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	f47f ae3f 	bne.w	800c922 <dir_register+0x37a>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cca4:	6a23      	ldr	r3, [r4, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cca6:	f04f 020f 	mov.w	r2, #15
 800ccaa:	b2e8      	uxtb	r0, r5
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ccac:	f8d9 100c 	ldr.w	r1, [r9, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ccb0:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ccb2:	1e42      	subs	r2, r0, #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ccb4:	735e      	strb	r6, [r3, #13]
	dir[LDIR_Type] = 0;
 800ccb6:	f883 800c 	strb.w	r8, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ccba:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ccbe:	f883 801a 	strb.w	r8, [r3, #26]
	*ptr++ = (BYTE)val;
 800ccc2:	f883 801b 	strb.w	r8, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ccc6:	eb02 028c 	add.w	r2, r2, ip, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ccca:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 800ccce:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ccd2:	f883 c001 	strb.w	ip, [r3, #1]
 800ccd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ccda:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800ccde:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cce2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800cce6:	45be      	cmp	lr, r7
 800cce8:	d89a      	bhi.n	800cc20 <dir_register+0x678>
 800ccea:	3201      	adds	r2, #1
 800ccec:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 800ccf0:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800ccf2:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 800ccf6:	f883 a003 	strb.w	sl, [r3, #3]
	*ptr++ = (BYTE)val;
 800ccfa:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ccfe:	f1ba 0f00 	cmp.w	sl, #0
 800cd02:	d091      	beq.n	800cc28 <dir_register+0x680>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cd04:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800cd08:	45f2      	cmp	sl, lr
 800cd0a:	d08d      	beq.n	800cc28 <dir_register+0x680>
 800cd0c:	440a      	add	r2, r1
 800cd0e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd12:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 800cd16:	f883 a005 	strb.w	sl, [r3, #5]
	*ptr++ = (BYTE)val;
 800cd1a:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cd1e:	f1ba 0f00 	cmp.w	sl, #0
 800cd22:	f000 809e 	beq.w	800ce62 <dir_register+0x8ba>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cd26:	45f2      	cmp	sl, lr
 800cd28:	d082      	beq.n	800cc30 <dir_register+0x688>
 800cd2a:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd2e:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 800cd32:	f883 a007 	strb.w	sl, [r3, #7]
	*ptr++ = (BYTE)val;
 800cd36:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cd3a:	f1ba 0f00 	cmp.w	sl, #0
 800cd3e:	f000 80a5 	beq.w	800ce8c <dir_register+0x8e4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cd42:	45f2      	cmp	sl, lr
 800cd44:	f43f af78 	beq.w	800cc38 <dir_register+0x690>
 800cd48:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd4c:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 800cd50:	f883 a009 	strb.w	sl, [r3, #9]
	*ptr++ = (BYTE)val;
 800cd54:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cd58:	f1ba 0f00 	cmp.w	sl, #0
 800cd5c:	f000 8093 	beq.w	800ce86 <dir_register+0x8de>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cd60:	45f2      	cmp	sl, lr
 800cd62:	f43f af6d 	beq.w	800cc40 <dir_register+0x698>
 800cd66:	f8b2 a008 	ldrh.w	sl, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd6a:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 800cd6e:	f883 a00e 	strb.w	sl, [r3, #14]
	*ptr++ = (BYTE)val;
 800cd72:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cd76:	f1ba 0f00 	cmp.w	sl, #0
 800cd7a:	f43f af64 	beq.w	800cc46 <dir_register+0x69e>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cd7e:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800cd82:	45f2      	cmp	sl, lr
 800cd84:	f43f af5f 	beq.w	800cc46 <dir_register+0x69e>
 800cd88:	f8b2 a00a 	ldrh.w	sl, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd8c:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 800cd90:	f883 a010 	strb.w	sl, [r3, #16]
	*ptr++ = (BYTE)val;
 800cd94:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cd98:	f1ba 0f00 	cmp.w	sl, #0
 800cd9c:	d070      	beq.n	800ce80 <dir_register+0x8d8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cd9e:	45f2      	cmp	sl, lr
 800cda0:	f43f af54 	beq.w	800cc4c <dir_register+0x6a4>
 800cda4:	f8b2 a00c 	ldrh.w	sl, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800cda8:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 800cdac:	f883 a012 	strb.w	sl, [r3, #18]
	*ptr++ = (BYTE)val;
 800cdb0:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cdb4:	f1ba 0f00 	cmp.w	sl, #0
 800cdb8:	d05f      	beq.n	800ce7a <dir_register+0x8d2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cdba:	45f2      	cmp	sl, lr
 800cdbc:	f43f af49 	beq.w	800cc52 <dir_register+0x6aa>
 800cdc0:	f8b2 a00e 	ldrh.w	sl, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdc4:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 800cdc8:	f883 a014 	strb.w	sl, [r3, #20]
	*ptr++ = (BYTE)val;
 800cdcc:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cdd0:	f1ba 0f00 	cmp.w	sl, #0
 800cdd4:	d04e      	beq.n	800ce74 <dir_register+0x8cc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cdd6:	45f2      	cmp	sl, lr
 800cdd8:	f43f af3e 	beq.w	800cc58 <dir_register+0x6b0>
 800cddc:	f8b2 a010 	ldrh.w	sl, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800cde0:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 800cde4:	f883 a016 	strb.w	sl, [r3, #22]
	*ptr++ = (BYTE)val;
 800cde8:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cdec:	f1ba 0f00 	cmp.w	sl, #0
 800cdf0:	d03d      	beq.n	800ce6e <dir_register+0x8c6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cdf2:	45f2      	cmp	sl, lr
 800cdf4:	f43f af33 	beq.w	800cc5e <dir_register+0x6b6>
 800cdf8:	f8b2 e012 	ldrh.w	lr, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdfc:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 800ce00:	f883 e018 	strb.w	lr, [r3, #24]
	*ptr++ = (BYTE)val;
 800ce04:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ce08:	f1be 0f00 	cmp.w	lr, #0
 800ce0c:	f43f af2a 	beq.w	800cc64 <dir_register+0x6bc>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce10:	f64f 7aff 	movw	sl, #65535	; 0xffff
 800ce14:	45d6      	cmp	lr, sl
 800ce16:	f43f af25 	beq.w	800cc64 <dir_register+0x6bc>
 800ce1a:	f8b2 e014 	ldrh.w	lr, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800ce1e:	ea4f 2b1e 	mov.w	fp, lr, lsr #8
 800ce22:	f883 e01c 	strb.w	lr, [r3, #28]
	*ptr++ = (BYTE)val;
 800ce26:	f883 b01d 	strb.w	fp, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ce2a:	f1be 0f00 	cmp.w	lr, #0
 800ce2e:	d01b      	beq.n	800ce68 <dir_register+0x8c0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce30:	45d6      	cmp	lr, sl
 800ce32:	f43f af1a 	beq.w	800cc6a <dir_register+0x6c2>
 800ce36:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ce38:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800ce3c:	779a      	strb	r2, [r3, #30]
 800ce3e:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800ce40:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ce42:	fa1f f28e 	uxth.w	r2, lr
 800ce46:	42ba      	cmp	r2, r7
 800ce48:	f63f af12 	bhi.w	800cc70 <dir_register+0x6c8>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ce4c:	4461      	add	r1, ip
 800ce4e:	8b4a      	ldrh	r2, [r1, #26]
 800ce50:	2a00      	cmp	r2, #0
 800ce52:	f47f af0f 	bne.w	800cc74 <dir_register+0x6cc>
 800ce56:	e70b      	b.n	800cc70 <dir_register+0x6c8>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ce58:	469b      	mov	fp, r3
 800ce5a:	f7ff bbc0 	b.w	800c5de <dir_register+0x36>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ce5e:	2007      	movs	r0, #7
 800ce60:	e55f      	b.n	800c922 <dir_register+0x37a>
	*ptr++ = (BYTE)val; val >>= 8;
 800ce62:	f8a3 e007 	strh.w	lr, [r3, #7]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce66:	e6e7      	b.n	800cc38 <dir_register+0x690>
	*ptr++ = (BYTE)val; val >>= 8;
 800ce68:	f8a3 a01e 	strh.w	sl, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ce6c:	e700      	b.n	800cc70 <dir_register+0x6c8>
	*ptr++ = (BYTE)val; val >>= 8;
 800ce6e:	f8a3 e018 	strh.w	lr, [r3, #24]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce72:	e6f7      	b.n	800cc64 <dir_register+0x6bc>
	*ptr++ = (BYTE)val; val >>= 8;
 800ce74:	f8a3 e016 	strh.w	lr, [r3, #22]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce78:	e6f1      	b.n	800cc5e <dir_register+0x6b6>
	*ptr++ = (BYTE)val; val >>= 8;
 800ce7a:	f8a3 e014 	strh.w	lr, [r3, #20]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce7e:	e6eb      	b.n	800cc58 <dir_register+0x6b0>
	*ptr++ = (BYTE)val; val >>= 8;
 800ce80:	f8a3 e012 	strh.w	lr, [r3, #18]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce84:	e6e5      	b.n	800cc52 <dir_register+0x6aa>
	*ptr++ = (BYTE)val; val >>= 8;
 800ce86:	f8a3 e00e 	strh.w	lr, [r3, #14]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce8a:	e6dc      	b.n	800cc46 <dir_register+0x69e>
	*ptr++ = (BYTE)val; val >>= 8;
 800ce8c:	f8a3 e009 	strh.w	lr, [r3, #9]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce90:	e6d6      	b.n	800cc40 <dir_register+0x698>
			*d++ = *s++;
 800ce92:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800ce9c:	705a      	strb	r2, [r3, #1]
 800ce9e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800cea2:	709a      	strb	r2, [r3, #2]
 800cea4:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800cea8:	70da      	strb	r2, [r3, #3]
 800ceaa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800ceae:	711a      	strb	r2, [r3, #4]
 800ceb0:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 800ceb4:	715a      	strb	r2, [r3, #5]
 800ceb6:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800ceba:	719a      	strb	r2, [r3, #6]
 800cebc:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 800cec0:	71da      	strb	r2, [r3, #7]
 800cec2:	e555      	b.n	800c970 <dir_register+0x3c8>

0800cec4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cec4:	b510      	push	{r4, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800cecc:	b1a1      	cbz	r1, 800cef8 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cece:	f891 c000 	ldrb.w	ip, [r1]
 800ced2:	f1bc 0f1f 	cmp.w	ip, #31
 800ced6:	d912      	bls.n	800cefe <f_mount+0x3a>
 800ced8:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 800cedc:	d00f      	beq.n	800cefe <f_mount+0x3a>
 800cede:	4608      	mov	r0, r1
 800cee0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800cee4:	2b1f      	cmp	r3, #31
 800cee6:	d90c      	bls.n	800cf02 <f_mount+0x3e>
 800cee8:	2b3a      	cmp	r3, #58	; 0x3a
 800ceea:	d1f9      	bne.n	800cee0 <f_mount+0x1c>
			i = *tp++ - '0';
 800ceec:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ceee:	4288      	cmp	r0, r1
 800cef0:	d102      	bne.n	800cef8 <f_mount+0x34>
 800cef2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cef6:	d006      	beq.n	800cf06 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800cef8:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800cefa:	b002      	add	sp, #8
 800cefc:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cefe:	4663      	mov	r3, ip
 800cf00:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cf02:	2b3a      	cmp	r3, #58	; 0x3a
 800cf04:	d0f2      	beq.n	800ceec <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf06:	4913      	ldr	r1, [pc, #76]	; (800cf54 <f_mount+0x90>)
 800cf08:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800cf0a:	b143      	cbz	r3, 800cf1e <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cf0c:	4812      	ldr	r0, [pc, #72]	; (800cf58 <f_mount+0x94>)
 800cf0e:	6804      	ldr	r4, [r0, #0]
 800cf10:	42a3      	cmp	r3, r4
 800cf12:	d019      	beq.n	800cf48 <f_mount+0x84>
 800cf14:	6904      	ldr	r4, [r0, #16]
 800cf16:	429c      	cmp	r4, r3
 800cf18:	d013      	beq.n	800cf42 <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800cf1e:	9b01      	ldr	r3, [sp, #4]
 800cf20:	b15b      	cbz	r3, 800cf3a <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf22:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf24:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800cf26:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800cf28:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf2a:	d1e6      	bne.n	800cefa <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	a901      	add	r1, sp, #4
 800cf30:	4668      	mov	r0, sp
 800cf32:	f7fd ff2f 	bl	800ad94 <find_volume>
}
 800cf36:	b002      	add	sp, #8
 800cf38:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cf3a:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 800cf3c:	600b      	str	r3, [r1, #0]
}
 800cf3e:	b002      	add	sp, #8
 800cf40:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cf42:	2400      	movs	r4, #0
 800cf44:	6104      	str	r4, [r0, #16]
 800cf46:	e7e8      	b.n	800cf1a <f_mount+0x56>
 800cf48:	2400      	movs	r4, #0
 800cf4a:	6004      	str	r4, [r0, #0]
 800cf4c:	6904      	ldr	r4, [r0, #16]
 800cf4e:	429c      	cmp	r4, r3
 800cf50:	d1e3      	bne.n	800cf1a <f_mount+0x56>
 800cf52:	e7f6      	b.n	800cf42 <f_mount+0x7e>
 800cf54:	20018980 	.word	0x20018980
 800cf58:	20018984 	.word	0x20018984

0800cf5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf60:	b092      	sub	sp, #72	; 0x48
 800cf62:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cf64:	2800      	cmp	r0, #0
 800cf66:	f000 80a0 	beq.w	800d0aa <f_open+0x14e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cf6a:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800cf6e:	4616      	mov	r6, r2
 800cf70:	4604      	mov	r4, r0
 800cf72:	a903      	add	r1, sp, #12
 800cf74:	a801      	add	r0, sp, #4
 800cf76:	463a      	mov	r2, r7
 800cf78:	f7fd ff0c 	bl	800ad94 <find_volume>
	if (res == FR_OK) {
 800cf7c:	4605      	mov	r5, r0
 800cf7e:	b128      	cbz	r0, 800cf8c <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cf80:	2300      	movs	r3, #0
 800cf82:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800cf84:	4628      	mov	r0, r5
 800cf86:	b012      	add	sp, #72	; 0x48
 800cf88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800cf8c:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf8e:	a804      	add	r0, sp, #16
 800cf90:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800cf92:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf94:	f7fe ff78 	bl	800be88 <follow_path>
		if (res == FR_OK) {
 800cf98:	bb00      	cbnz	r0, 800cfdc <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cf9a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f2c0 808a 	blt.w	800d0b8 <f_open+0x15c>
		if (Files[i].fs) {	/* Existing entry */
 800cfa4:	4ba7      	ldr	r3, [pc, #668]	; (800d244 <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfa6:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cfaa:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800cfac:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfb0:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
 800cfb2:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 800cfb6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 800cfba:	f1b8 0f00 	cmp.w	r8, #0
 800cfbe:	f000 80fd 	beq.w	800d1bc <f_open+0x260>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cfc2:	4580      	cmp	r8, r0
 800cfc4:	d07a      	beq.n	800d0bc <f_open+0x160>
		if (Files[i].fs) {	/* Existing entry */
 800cfc6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800cfca:	f1b8 0f00 	cmp.w	r8, #0
 800cfce:	f000 808d 	beq.w	800d0ec <f_open+0x190>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cfd2:	4580      	cmp	r8, r0
 800cfd4:	f000 8102 	beq.w	800d1dc <f_open+0x280>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cfd8:	2512      	movs	r5, #18
 800cfda:	e7d1      	b.n	800cf80 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cfdc:	f016 0f1c 	tst.w	r6, #28
 800cfe0:	d068      	beq.n	800d0b4 <f_open+0x158>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cfe2:	2804      	cmp	r0, #4
 800cfe4:	d166      	bne.n	800d0b4 <f_open+0x158>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cfe6:	4b97      	ldr	r3, [pc, #604]	; (800d244 <f_open+0x2e8>)
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	b112      	cbz	r2, 800cff2 <f_open+0x96>
 800cfec:	691b      	ldr	r3, [r3, #16]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1f2      	bne.n	800cfd8 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cff2:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cff4:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cff8:	f7ff fad6 	bl	800c5a8 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cffc:	2800      	cmp	r0, #0
 800cffe:	d159      	bne.n	800d0b4 <f_open+0x158>
				dw = GET_FATTIME();
 800d000:	f7fd fbd4 	bl	800a7ac <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800d006:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d00a:	f3c0 4107 	ubfx	r1, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d00e:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d012:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
 800d016:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800d018:	73d6      	strb	r6, [r2, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 800d01a:	f882 c00e 	strb.w	ip, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 800d01e:	7411      	strb	r1, [r2, #16]
	*ptr++ = (BYTE)val;
 800d020:	7450      	strb	r0, [r2, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d022:	9a0c      	ldr	r2, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d024:	9b03      	ldr	r3, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800d026:	75d6      	strb	r6, [r2, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800d028:	f882 c016 	strb.w	ip, [r2, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800d02c:	7611      	strb	r1, [r2, #24]
	*ptr++ = (BYTE)val;
 800d02e:	7650      	strb	r0, [r2, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d032:	f882 e00b 	strb.w	lr, [r2, #11]
	if (fs->fs_type == FS_FAT32) {
 800d036:	7819      	ldrb	r1, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800d03a:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800d03c:	8b56      	ldrh	r6, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800d03e:	d102      	bne.n	800d046 <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d040:	8a91      	ldrh	r1, [r2, #20]
 800d042:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d046:	2100      	movs	r1, #0
 800d048:	8351      	strh	r1, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800d04a:	7818      	ldrb	r0, [r3, #0]
 800d04c:	2803      	cmp	r0, #3
 800d04e:	d100      	bne.n	800d052 <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
 800d050:	8291      	strh	r1, [r2, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 800d052:	990c      	ldr	r1, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800d054:	2200      	movs	r2, #0
 800d056:	61ca      	str	r2, [r1, #28]
					fs->wflag = 1;
 800d058:	2101      	movs	r1, #1
 800d05a:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800d05c:	b19e      	cbz	r6, 800d086 <f_open+0x12a>
						res = remove_chain(&dj.obj, cl, 0);
 800d05e:	4631      	mov	r1, r6
 800d060:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800d062:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800d066:	f7ff f89b 	bl	800c1a0 <remove_chain>
						if (res == FR_OK) {
 800d06a:	bb18      	cbnz	r0, 800d0b4 <f_open+0x158>
							res = move_window(fs, dw);
 800d06c:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d06e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d070:	4590      	cmp	r8, r2
 800d072:	f000 80e3 	beq.w	800d23c <f_open+0x2e0>
 800d076:	4618      	mov	r0, r3
 800d078:	4641      	mov	r1, r8
 800d07a:	f7fd fe51 	bl	800ad20 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d07e:	3e01      	subs	r6, #1
 800d080:	9b03      	ldr	r3, [sp, #12]
 800d082:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 800d084:	b9b0      	cbnz	r0, 800d0b4 <f_open+0x158>
				mode |= FA_MODIFIED;
 800d086:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d08a:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d08e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d090:	3900      	subs	r1, #0
 800d092:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d094:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d096:	bf18      	it	ne
 800d098:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 800d09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d09c:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d09e:	f7fd fcb9 	bl	800aa14 <inc_lock>
 800d0a2:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d0a4:	bb70      	cbnz	r0, 800d104 <f_open+0x1a8>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d0a6:	2502      	movs	r5, #2
 800d0a8:	e76a      	b.n	800cf80 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800d0aa:	2509      	movs	r5, #9
}
 800d0ac:	4628      	mov	r0, r5
 800d0ae:	b012      	add	sp, #72	; 0x48
 800d0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b4:	4605      	mov	r5, r0
 800d0b6:	e763      	b.n	800cf80 <f_open+0x24>
				res = FR_INVALID_NAME;
 800d0b8:	2506      	movs	r5, #6
 800d0ba:	e761      	b.n	800cf80 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d0bc:	6858      	ldr	r0, [r3, #4]
 800d0be:	4560      	cmp	r0, ip
 800d0c0:	f000 8095 	beq.w	800d1ee <f_open+0x292>
		if (Files[i].fs) {	/* Existing entry */
 800d0c4:	6918      	ldr	r0, [r3, #16]
 800d0c6:	b188      	cbz	r0, 800d0ec <f_open+0x190>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d0c8:	4540      	cmp	r0, r8
 800d0ca:	d185      	bne.n	800cfd8 <f_open+0x7c>
 800d0cc:	6958      	ldr	r0, [r3, #20]
 800d0ce:	4560      	cmp	r0, ip
 800d0d0:	d182      	bne.n	800cfd8 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 800d0d2:	6998      	ldr	r0, [r3, #24]
 800d0d4:	4570      	cmp	r0, lr
 800d0d6:	f47f af7f 	bne.w	800cfd8 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d0da:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d0dc:	2a00      	cmp	r2, #0
 800d0de:	d164      	bne.n	800d1aa <f_open+0x24e>
 800d0e0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800d0e4:	899b      	ldrh	r3, [r3, #12]
 800d0e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0ea:	d05e      	beq.n	800d1aa <f_open+0x24e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d0ec:	f016 0f1c 	tst.w	r6, #28
 800d0f0:	d04b      	beq.n	800d18a <f_open+0x22e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d0f2:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d0f6:	f013 0f11 	tst.w	r3, #17
 800d0fa:	d15d      	bne.n	800d1b8 <f_open+0x25c>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d0fc:	0773      	lsls	r3, r6, #29
 800d0fe:	d556      	bpl.n	800d1ae <f_open+0x252>
 800d100:	2508      	movs	r5, #8
 800d102:	e73d      	b.n	800cf80 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d104:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800d10a:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 800d10e:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800d110:	2a03      	cmp	r2, #3
 800d112:	d102      	bne.n	800d11a <f_open+0x1be>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d114:	8a9a      	ldrh	r2, [r3, #20]
 800d116:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d11a:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d11c:	60a6      	str	r6, [r4, #8]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d11e:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	rv = rv << 8 | ptr[0];
 800d122:	f8d3 801c 	ldr.w	r8, [r3, #28]
			fp->obj.id = fs->id;
 800d126:	f8b9 3006 	ldrh.w	r3, [r9, #6]
		*d++ = (BYTE)val;
 800d12a:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d12e:	62e1      	str	r1, [r4, #44]	; 0x2c
		*d++ = (BYTE)val;
 800d130:	4650      	mov	r0, sl
			fp->err = 0;			/* Clear error flag */
 800d132:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d134:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d136:	61a1      	str	r1, [r4, #24]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d138:	f8c4 9000 	str.w	r9, [r4]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d13c:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->obj.id = fs->id;
 800d140:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 800d142:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 800d144:	f007 ffba 	bl	80150bc <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d148:	06b9      	lsls	r1, r7, #26
 800d14a:	f57f af1b 	bpl.w	800cf84 <f_open+0x28>
 800d14e:	f1b8 0f00 	cmp.w	r8, #0
 800d152:	f43f af17 	beq.w	800cf84 <f_open+0x28>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d156:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d15a:	f8c4 8018 	str.w	r8, [r4, #24]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d15e:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d162:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d166:	d804      	bhi.n	800d172 <f_open+0x216>
 800d168:	e047      	b.n	800d1fa <f_open+0x29e>
 800d16a:	1c42      	adds	r2, r0, #1
 800d16c:	d06c      	beq.n	800d248 <f_open+0x2ec>
 800d16e:	4547      	cmp	r7, r8
 800d170:	d26a      	bcs.n	800d248 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d172:	4631      	mov	r1, r6
 800d174:	6820      	ldr	r0, [r4, #0]
 800d176:	f7fe f81f 	bl	800b1b8 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800d17a:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d17c:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
 800d180:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800d182:	d8f2      	bhi.n	800d16a <f_open+0x20e>
 800d184:	2502      	movs	r5, #2
				fp->clust = clst;
 800d186:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d188:	e6fa      	b.n	800cf80 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d18a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d18e:	06d9      	lsls	r1, r3, #27
 800d190:	d422      	bmi.n	800d1d8 <f_open+0x27c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d192:	07b1      	lsls	r1, r6, #30
 800d194:	d501      	bpl.n	800d19a <f_open+0x23e>
 800d196:	07d8      	lsls	r0, r3, #31
 800d198:	d40e      	bmi.n	800d1b8 <f_open+0x25c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d19a:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d19e:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d1a0:	2e00      	cmp	r6, #0
 800d1a2:	f47f af70 	bne.w	800d086 <f_open+0x12a>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	e771      	b.n	800d08e <f_open+0x132>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d1aa:	2510      	movs	r5, #16
 800d1ac:	e6e8      	b.n	800cf80 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d1ae:	0730      	lsls	r0, r6, #28
 800d1b0:	f53f af26 	bmi.w	800d000 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d1b4:	9b03      	ldr	r3, [sp, #12]
 800d1b6:	e76a      	b.n	800d08e <f_open+0x132>
						res = FR_DENIED;
 800d1b8:	2507      	movs	r5, #7
 800d1ba:	e6e1      	b.n	800cf80 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 800d1bc:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800d1c0:	f1b8 0f00 	cmp.w	r8, #0
 800d1c4:	d092      	beq.n	800d0ec <f_open+0x190>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d1c6:	4540      	cmp	r0, r8
 800d1c8:	d190      	bne.n	800d0ec <f_open+0x190>
 800d1ca:	6958      	ldr	r0, [r3, #20]
 800d1cc:	4560      	cmp	r0, ip
 800d1ce:	d18d      	bne.n	800d0ec <f_open+0x190>
				Files[i].clu == dp->obj.sclust &&
 800d1d0:	6998      	ldr	r0, [r3, #24]
 800d1d2:	4586      	cmp	lr, r0
 800d1d4:	d18a      	bne.n	800d0ec <f_open+0x190>
 800d1d6:	e780      	b.n	800d0da <f_open+0x17e>
					res = FR_NO_FILE;
 800d1d8:	2504      	movs	r5, #4
 800d1da:	e6d1      	b.n	800cf80 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d1dc:	6958      	ldr	r0, [r3, #20]
 800d1de:	4560      	cmp	r0, ip
 800d1e0:	f47f aefa 	bne.w	800cfd8 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 800d1e4:	6998      	ldr	r0, [r3, #24]
 800d1e6:	4586      	cmp	lr, r0
 800d1e8:	f47f aef6 	bne.w	800cfd8 <f_open+0x7c>
 800d1ec:	e775      	b.n	800d0da <f_open+0x17e>
 800d1ee:	6898      	ldr	r0, [r3, #8]
 800d1f0:	4570      	cmp	r0, lr
 800d1f2:	f47f af67 	bne.w	800d0c4 <f_open+0x168>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	e770      	b.n	800d0dc <f_open+0x180>
				fp->clust = clst;
 800d1fa:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d1fc:	f3c8 0308 	ubfx	r3, r8, #0, #9
 800d200:	2b00      	cmp	r3, #0
 800d202:	f43f aebf 	beq.w	800cf84 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d206:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
 800d208:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d20a:	6983      	ldr	r3, [r0, #24]
 800d20c:	3b02      	subs	r3, #2
 800d20e:	429e      	cmp	r6, r3
 800d210:	f4bf af49 	bcs.w	800d0a6 <f_open+0x14a>
	return clst * fs->csize + fs->database;
 800d214:	8942      	ldrh	r2, [r0, #10]
 800d216:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800d218:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d21c:	2a00      	cmp	r2, #0
 800d21e:	f43f af42 	beq.w	800d0a6 <f_open+0x14a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d222:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d226:	4651      	mov	r1, sl
 800d228:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d22a:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d22c:	7840      	ldrb	r0, [r0, #1]
 800d22e:	f7fd fbc9 	bl	800a9c4 <disk_read>
 800d232:	2800      	cmp	r0, #0
 800d234:	f43f aea6 	beq.w	800cf84 <f_open+0x28>
 800d238:	2501      	movs	r5, #1
 800d23a:	e6a1      	b.n	800cf80 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d23c:	3e01      	subs	r6, #1
 800d23e:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 800d240:	e721      	b.n	800d086 <f_open+0x12a>
 800d242:	bf00      	nop
 800d244:	20018984 	.word	0x20018984
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d248:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
 800d24a:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d24c:	bf0c      	ite	eq
 800d24e:	2301      	moveq	r3, #1
 800d250:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d252:	d1d3      	bne.n	800d1fc <f_open+0x2a0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d254:	461d      	mov	r5, r3
 800d256:	e693      	b.n	800cf80 <f_open+0x24>

0800d258 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800d25e:	2300      	movs	r3, #0
{
 800d260:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 800d262:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d264:	b150      	cbz	r0, 800d27c <f_read+0x24>
 800d266:	6803      	ldr	r3, [r0, #0]
 800d268:	4604      	mov	r4, r0
 800d26a:	b13b      	cbz	r3, 800d27c <f_read+0x24>
 800d26c:	4617      	mov	r7, r2
 800d26e:	781a      	ldrb	r2, [r3, #0]
 800d270:	b122      	cbz	r2, 800d27c <f_read+0x24>
 800d272:	460d      	mov	r5, r1
 800d274:	88da      	ldrh	r2, [r3, #6]
 800d276:	8881      	ldrh	r1, [r0, #4]
 800d278:	4291      	cmp	r1, r2
 800d27a:	d005      	beq.n	800d288 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800d27c:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800d280:	4640      	mov	r0, r8
 800d282:	b005      	add	sp, #20
 800d284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d288:	7858      	ldrb	r0, [r3, #1]
 800d28a:	f7fd fb7f 	bl	800a98c <disk_status>
 800d28e:	07c2      	lsls	r2, r0, #31
 800d290:	d4f4      	bmi.n	800d27c <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d292:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d296:	f1b8 0f00 	cmp.w	r8, #0
 800d29a:	d1f1      	bne.n	800d280 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d29c:	7d23      	ldrb	r3, [r4, #20]
 800d29e:	f013 0301 	ands.w	r3, r3, #1
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	f000 80d8 	beq.w	800d458 <f_read+0x200>
	remain = fp->obj.objsize - fp->fptr;
 800d2a8:	69a0      	ldr	r0, [r4, #24]
 800d2aa:	68e3      	ldr	r3, [r4, #12]
 800d2ac:	1a1b      	subs	r3, r3, r0
 800d2ae:	429f      	cmp	r7, r3
 800d2b0:	bf28      	it	cs
 800d2b2:	461f      	movcs	r7, r3
	for ( ;  btr;								/* Repeat until all data read */
 800d2b4:	2f00      	cmp	r7, #0
 800d2b6:	d0e3      	beq.n	800d280 <f_read+0x28>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d2b8:	46a2      	mov	sl, r4
 800d2ba:	f104 0331 	add.w	r3, r4, #49	; 0x31
 800d2be:	f8cd 8008 	str.w	r8, [sp, #8]
 800d2c2:	f85a 9b30 	ldr.w	r9, [sl], #48
 800d2c6:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d2c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d158      	bne.n	800d382 <f_read+0x12a>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d2d0:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800d2d4:	0a43      	lsrs	r3, r0, #9
 800d2d6:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800d2d8:	ea12 2250 	ands.w	r2, r2, r0, lsr #9
 800d2dc:	f000 8081 	beq.w	800d3e2 <f_read+0x18a>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d2e0:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d2e2:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 800d2e6:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d2e8:	3b02      	subs	r3, #2
 800d2ea:	4298      	cmp	r0, r3
 800d2ec:	f080 8087 	bcs.w	800d3fe <f_read+0x1a6>
	return clst * fs->csize + fs->database;
 800d2f0:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800d2f4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800d2f8:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d07e      	beq.n	800d3fe <f_read+0x1a6>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d300:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 800d304:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d308:	d325      	bcc.n	800d356 <f_read+0xfe>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d30a:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d30e:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d312:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d314:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800d318:	bf88      	it	hi
 800d31a:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d31e:	465a      	mov	r2, fp
 800d320:	4629      	mov	r1, r5
 800d322:	4643      	mov	r3, r8
 800d324:	f7fd fb4e 	bl	800a9c4 <disk_read>
 800d328:	2800      	cmp	r0, #0
 800d32a:	f040 8083 	bne.w	800d434 <f_read+0x1dc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d32e:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800d332:	2a00      	cmp	r2, #0
 800d334:	f2c0 80a7 	blt.w	800d486 <f_read+0x22e>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d338:	ea4f 2c48 	mov.w	ip, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d33c:	69a0      	ldr	r0, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800d33e:	ebb7 070c 	subs.w	r7, r7, ip
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d342:	6833      	ldr	r3, [r6, #0]
 800d344:	4465      	add	r5, ip
 800d346:	4460      	add	r0, ip
 800d348:	4463      	add	r3, ip
 800d34a:	61a0      	str	r0, [r4, #24]
 800d34c:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800d34e:	d1bb      	bne.n	800d2c8 <f_read+0x70>
 800d350:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d354:	e794      	b.n	800d280 <f_read+0x28>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d356:	6a22      	ldr	r2, [r4, #32]
 800d358:	455a      	cmp	r2, fp
 800d35a:	d00d      	beq.n	800d378 <f_read+0x120>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d35c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d360:	2b00      	cmp	r3, #0
 800d362:	f2c0 8083 	blt.w	800d46c <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d366:	2301      	movs	r3, #1
 800d368:	465a      	mov	r2, fp
 800d36a:	4651      	mov	r1, sl
 800d36c:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d370:	f7fd fb28 	bl	800a9c4 <disk_read>
 800d374:	2800      	cmp	r0, #0
 800d376:	d15d      	bne.n	800d434 <f_read+0x1dc>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d378:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800d37a:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d37e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d382:	1c59      	adds	r1, r3, #1
 800d384:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d388:	4453      	add	r3, sl
 800d38a:	4451      	add	r1, sl
 800d38c:	45bc      	cmp	ip, r7
 800d38e:	eba5 0101 	sub.w	r1, r5, r1
 800d392:	bf28      	it	cs
 800d394:	46bc      	movcs	ip, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d396:	2902      	cmp	r1, #2
 800d398:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 800d39c:	d952      	bls.n	800d444 <f_read+0x1ec>
 800d39e:	f1bb 0f07 	cmp.w	fp, #7
 800d3a2:	d94f      	bls.n	800d444 <f_read+0x1ec>
 800d3a4:	f02c 0e03 	bic.w	lr, ip, #3
 800d3a8:	462a      	mov	r2, r5
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	44ae      	add	lr, r5
			*d++ = *s++;
 800d3ae:	f851 0b04 	ldr.w	r0, [r1], #4
 800d3b2:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800d3b6:	4596      	cmp	lr, r2
 800d3b8:	d1f9      	bne.n	800d3ae <f_read+0x156>
 800d3ba:	f02c 0203 	bic.w	r2, ip, #3
 800d3be:	4594      	cmp	ip, r2
 800d3c0:	eb05 0102 	add.w	r1, r5, r2
 800d3c4:	eb03 0002 	add.w	r0, r3, r2
 800d3c8:	d0b8      	beq.n	800d33c <f_read+0xe4>
			*d++ = *s++;
 800d3ca:	5c9b      	ldrb	r3, [r3, r2]
 800d3cc:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 800d3ce:	ebbb 0202 	subs.w	r2, fp, r2
 800d3d2:	d0b3      	beq.n	800d33c <f_read+0xe4>
			*d++ = *s++;
 800d3d4:	7843      	ldrb	r3, [r0, #1]
		} while (--cnt);
 800d3d6:	2a01      	cmp	r2, #1
			*d++ = *s++;
 800d3d8:	704b      	strb	r3, [r1, #1]
		} while (--cnt);
 800d3da:	d0af      	beq.n	800d33c <f_read+0xe4>
			*d++ = *s++;
 800d3dc:	7883      	ldrb	r3, [r0, #2]
 800d3de:	708b      	strb	r3, [r1, #2]
		} while (--cnt);
 800d3e0:	e7ac      	b.n	800d33c <f_read+0xe4>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d3e2:	b998      	cbnz	r0, 800d40c <f_read+0x1b4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d3e4:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d3e6:	2801      	cmp	r0, #1
 800d3e8:	d909      	bls.n	800d3fe <f_read+0x1a6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d3ea:	1c43      	adds	r3, r0, #1
 800d3ec:	d022      	beq.n	800d434 <f_read+0x1dc>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d3ee:	f8d9 3018 	ldr.w	r3, [r9, #24]
				fp->clust = clst;				/* Update current cluster */
 800d3f2:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800d3f4:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d3f6:	3b02      	subs	r3, #2
 800d3f8:	4298      	cmp	r0, r3
 800d3fa:	f4ff af79 	bcc.w	800d2f0 <f_read+0x98>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d3fe:	2302      	movs	r3, #2
 800d400:	4698      	mov	r8, r3
 800d402:	7563      	strb	r3, [r4, #21]
}
 800d404:	4640      	mov	r0, r8
 800d406:	b005      	add	sp, #20
 800d408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 800d40c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d40e:	b330      	cbz	r0, 800d45e <f_read+0x206>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d410:	6821      	ldr	r1, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d412:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d414:	8949      	ldrh	r1, [r1, #10]
 800d416:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d41a:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d41c:	b929      	cbnz	r1, 800d42a <f_read+0x1d2>
 800d41e:	e7ee      	b.n	800d3fe <f_read+0x1a6>
		cl -= ncl; tbl++;		/* Next fragment */
 800d420:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d422:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d426:	2900      	cmp	r1, #0
 800d428:	d0e9      	beq.n	800d3fe <f_read+0x1a6>
		if (cl < ncl) break;	/* In this fragment? */
 800d42a:	4299      	cmp	r1, r3
 800d42c:	d9f8      	bls.n	800d420 <f_read+0x1c8>
	return cl + *tbl;	/* Return the cluster number */
 800d42e:	6840      	ldr	r0, [r0, #4]
 800d430:	4418      	add	r0, r3
 800d432:	e7d8      	b.n	800d3e6 <f_read+0x18e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d434:	f8dd 8000 	ldr.w	r8, [sp]
 800d438:	2301      	movs	r3, #1
}
 800d43a:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d43c:	7563      	strb	r3, [r4, #21]
}
 800d43e:	b005      	add	sp, #20
 800d440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d444:	1e6a      	subs	r2, r5, #1
 800d446:	eb03 000c 	add.w	r0, r3, ip
			*d++ = *s++;
 800d44a:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 800d44e:	4283      	cmp	r3, r0
			*d++ = *s++;
 800d450:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 800d454:	d1f9      	bne.n	800d44a <f_read+0x1f2>
 800d456:	e771      	b.n	800d33c <f_read+0xe4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d458:	f04f 0807 	mov.w	r8, #7
 800d45c:	e710      	b.n	800d280 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d45e:	69e1      	ldr	r1, [r4, #28]
 800d460:	6820      	ldr	r0, [r4, #0]
 800d462:	9203      	str	r2, [sp, #12]
 800d464:	f7fd fea8 	bl	800b1b8 <get_fat.isra.0>
 800d468:	9a03      	ldr	r2, [sp, #12]
 800d46a:	e7bc      	b.n	800d3e6 <f_read+0x18e>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d46c:	2301      	movs	r3, #1
 800d46e:	4651      	mov	r1, sl
 800d470:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d474:	f7fd fab4 	bl	800a9e0 <disk_write>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d1db      	bne.n	800d434 <f_read+0x1dc>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d47c:	7d23      	ldrb	r3, [r4, #20]
 800d47e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d482:	7523      	strb	r3, [r4, #20]
 800d484:	e76f      	b.n	800d366 <f_read+0x10e>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d486:	6a22      	ldr	r2, [r4, #32]
 800d488:	eba2 0b0b 	sub.w	fp, r2, fp
 800d48c:	45c3      	cmp	fp, r8
 800d48e:	f4bf af53 	bcs.w	800d338 <f_read+0xe0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d492:	eb05 224b 	add.w	r2, r5, fp, lsl #9
 800d496:	9b01      	ldr	r3, [sp, #4]
 800d498:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d49a:	1ad0      	subs	r0, r2, r3
 800d49c:	2802      	cmp	r0, #2
 800d49e:	d908      	bls.n	800d4b2 <f_read+0x25a>
 800d4a0:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 800d4a4:	f851 3b04 	ldr.w	r3, [r1], #4
 800d4a8:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800d4ac:	4562      	cmp	r2, ip
 800d4ae:	d1f9      	bne.n	800d4a4 <f_read+0x24c>
 800d4b0:	e742      	b.n	800d338 <f_read+0xe0>
 800d4b2:	3a01      	subs	r2, #1
 800d4b4:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 800d4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800d4bc:	458c      	cmp	ip, r1
			*d++ = *s++;
 800d4be:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800d4c2:	d1f9      	bne.n	800d4b8 <f_read+0x260>
 800d4c4:	e738      	b.n	800d338 <f_read+0xe0>
 800d4c6:	bf00      	nop

0800d4c8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800d4ce:	2300      	movs	r3, #0
{
 800d4d0:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 800d4d2:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d4d4:	b150      	cbz	r0, 800d4ec <f_write+0x24>
 800d4d6:	6803      	ldr	r3, [r0, #0]
 800d4d8:	4604      	mov	r4, r0
 800d4da:	b13b      	cbz	r3, 800d4ec <f_write+0x24>
 800d4dc:	4616      	mov	r6, r2
 800d4de:	781a      	ldrb	r2, [r3, #0]
 800d4e0:	b122      	cbz	r2, 800d4ec <f_write+0x24>
 800d4e2:	460d      	mov	r5, r1
 800d4e4:	88da      	ldrh	r2, [r3, #6]
 800d4e6:	8881      	ldrh	r1, [r0, #4]
 800d4e8:	4291      	cmp	r1, r2
 800d4ea:	d005      	beq.n	800d4f8 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800d4ec:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	b005      	add	sp, #20
 800d4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d4f8:	7858      	ldrb	r0, [r3, #1]
 800d4fa:	f7fd fa47 	bl	800a98c <disk_status>
 800d4fe:	07c0      	lsls	r0, r0, #31
 800d500:	d4f4      	bmi.n	800d4ec <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d502:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d506:	f1b8 0f00 	cmp.w	r8, #0
 800d50a:	d1f1      	bne.n	800d4f0 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d50c:	7d22      	ldrb	r2, [r4, #20]
 800d50e:	0791      	lsls	r1, r2, #30
 800d510:	f140 80f0 	bpl.w	800d6f4 <f_write+0x22c>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d514:	69a3      	ldr	r3, [r4, #24]
 800d516:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d518:	bf28      	it	cs
 800d51a:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 800d51c:	2e00      	cmp	r6, #0
 800d51e:	d066      	beq.n	800d5ee <f_write+0x126>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d520:	46a2      	mov	sl, r4
 800d522:	f504 720c 	add.w	r2, r4, #560	; 0x230
 800d526:	f85a 9b30 	ldr.w	r9, [sl], #48
 800d52a:	9201      	str	r2, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d52c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d530:	2a00      	cmp	r2, #0
 800d532:	d16b      	bne.n	800d60c <f_write+0x144>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d534:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 800d538:	0a5a      	lsrs	r2, r3, #9
 800d53a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 800d53e:	ea1b 2b53 	ands.w	fp, fp, r3, lsr #9
 800d542:	d110      	bne.n	800d566 <f_write+0x9e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d544:	2b00      	cmp	r3, #0
 800d546:	f040 80a0 	bne.w	800d68a <f_write+0x1c2>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d54a:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800d54c:	2800      	cmp	r0, #0
 800d54e:	f000 80dc 	beq.w	800d70a <f_write+0x242>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d552:	2801      	cmp	r0, #1
 800d554:	f000 8092 	beq.w	800d67c <f_write+0x1b4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d558:	1c43      	adds	r3, r0, #1
 800d55a:	f000 80ba 	beq.w	800d6d2 <f_write+0x20a>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d55e:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800d560:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d562:	b903      	cbnz	r3, 800d566 <f_write+0x9e>
 800d564:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d566:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f2c0 80a4 	blt.w	800d6b8 <f_write+0x1f0>
	clst -= 2;
 800d570:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d572:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 800d576:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d578:	3b02      	subs	r3, #2
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d27e      	bcs.n	800d67c <f_write+0x1b4>
	return clst * fs->csize + fs->database;
 800d57e:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800d582:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800d586:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d58a:	2a00      	cmp	r2, #0
 800d58c:	d076      	beq.n	800d67c <f_write+0x1b4>
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d58e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 800d592:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d594:	d32f      	bcc.n	800d5f6 <f_write+0x12e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d596:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d59a:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d59c:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d59e:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800d5a2:	bf88      	it	hi
 800d5a4:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d5ae:	f7fd fa17 	bl	800a9e0 <disk_write>
 800d5b2:	2800      	cmp	r0, #0
 800d5b4:	f040 808d 	bne.w	800d6d2 <f_write+0x20a>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d5b8:	6a21      	ldr	r1, [r4, #32]
 800d5ba:	9a02      	ldr	r2, [sp, #8]
 800d5bc:	9b03      	ldr	r3, [sp, #12]
 800d5be:	1a8a      	subs	r2, r1, r2
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	f0c0 80b6 	bcc.w	800d732 <f_write+0x26a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d5c6:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 800d5ca:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d5ce:	69a3      	ldr	r3, [r4, #24]
 800d5d0:	4615      	mov	r5, r2
 800d5d2:	68e2      	ldr	r2, [r4, #12]
 800d5d4:	4463      	add	r3, ip
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	61a3      	str	r3, [r4, #24]
 800d5da:	bf38      	it	cc
 800d5dc:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 800d5de:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d5e2:	60e2      	str	r2, [r4, #12]
 800d5e4:	683a      	ldr	r2, [r7, #0]
 800d5e6:	4462      	add	r2, ip
 800d5e8:	603a      	str	r2, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800d5ea:	d19f      	bne.n	800d52c <f_write+0x64>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d5ec:	7d22      	ldrb	r2, [r4, #20]
 800d5ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5f2:	7522      	strb	r2, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800d5f4:	e77c      	b.n	800d4f0 <f_write+0x28>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5f6:	6a23      	ldr	r3, [r4, #32]
 800d5f8:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 800d5fa:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5fc:	d003      	beq.n	800d606 <f_write+0x13e>
 800d5fe:	68e1      	ldr	r1, [r4, #12]
 800d600:	428b      	cmp	r3, r1
 800d602:	f0c0 808a 	bcc.w	800d71a <f_write+0x252>
			fp->sect = sect;
 800d606:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d608:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d60c:	f5c2 7c00 	rsb	ip, r2, #512	; 0x200
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d610:	eb0a 0302 	add.w	r3, sl, r2
 800d614:	1c6a      	adds	r2, r5, #1
 800d616:	45b4      	cmp	ip, r6
 800d618:	eba3 0202 	sub.w	r2, r3, r2
 800d61c:	bf28      	it	cs
 800d61e:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d620:	2a02      	cmp	r2, #2
 800d622:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 800d626:	d95b      	bls.n	800d6e0 <f_write+0x218>
 800d628:	f1bb 0f07 	cmp.w	fp, #7
 800d62c:	d958      	bls.n	800d6e0 <f_write+0x218>
 800d62e:	f02c 0e03 	bic.w	lr, ip, #3
 800d632:	461a      	mov	r2, r3
 800d634:	4629      	mov	r1, r5
 800d636:	449e      	add	lr, r3
			*d++ = *s++;
 800d638:	f851 0b04 	ldr.w	r0, [r1], #4
 800d63c:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800d640:	4572      	cmp	r2, lr
 800d642:	d1f9      	bne.n	800d638 <f_write+0x170>
 800d644:	f02c 0103 	bic.w	r1, ip, #3
 800d648:	458c      	cmp	ip, r1
 800d64a:	eb03 0001 	add.w	r0, r3, r1
 800d64e:	eb05 0201 	add.w	r2, r5, r1
 800d652:	d00e      	beq.n	800d672 <f_write+0x1aa>
			*d++ = *s++;
 800d654:	f815 e001 	ldrb.w	lr, [r5, r1]
 800d658:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 800d65c:	ebbb 0101 	subs.w	r1, fp, r1
 800d660:	d005      	beq.n	800d66e <f_write+0x1a6>
			*d++ = *s++;
 800d662:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 800d664:	2901      	cmp	r1, #1
			*d++ = *s++;
 800d666:	7043      	strb	r3, [r0, #1]
 800d668:	bf1c      	itt	ne
 800d66a:	7893      	ldrbne	r3, [r2, #2]
 800d66c:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 800d66e:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 800d672:	7d23      	ldrb	r3, [r4, #20]
 800d674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d678:	7523      	strb	r3, [r4, #20]
 800d67a:	e7a8      	b.n	800d5ce <f_write+0x106>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d67c:	2302      	movs	r3, #2
 800d67e:	4698      	mov	r8, r3
 800d680:	7563      	strb	r3, [r4, #21]
}
 800d682:	4640      	mov	r0, r8
 800d684:	b005      	add	sp, #20
 800d686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 800d68a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d68c:	b3a9      	cbz	r1, 800d6fa <f_write+0x232>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d68e:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d690:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d692:	895b      	ldrh	r3, [r3, #10]
 800d694:	fbb2 f3f3 	udiv	r3, r2, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d698:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d69a:	b92a      	cbnz	r2, 800d6a8 <f_write+0x1e0>
 800d69c:	e7a6      	b.n	800d5ec <f_write+0x124>
		cl -= ncl; tbl++;		/* Next fragment */
 800d69e:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d6a0:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d6a4:	2a00      	cmp	r2, #0
 800d6a6:	d0a1      	beq.n	800d5ec <f_write+0x124>
		if (cl < ncl) break;	/* In this fragment? */
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d2f8      	bcs.n	800d69e <f_write+0x1d6>
	return cl + *tbl;	/* Return the cluster number */
 800d6ac:	6848      	ldr	r0, [r1, #4]
 800d6ae:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	f47f af4e 	bne.w	800d552 <f_write+0x8a>
 800d6b6:	e799      	b.n	800d5ec <f_write+0x124>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	6a22      	ldr	r2, [r4, #32]
 800d6bc:	4651      	mov	r1, sl
 800d6be:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d6c2:	f7fd f98d 	bl	800a9e0 <disk_write>
 800d6c6:	b920      	cbnz	r0, 800d6d2 <f_write+0x20a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d6c8:	7d23      	ldrb	r3, [r4, #20]
 800d6ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ce:	7523      	strb	r3, [r4, #20]
 800d6d0:	e74e      	b.n	800d570 <f_write+0xa8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4698      	mov	r8, r3
 800d6d6:	7563      	strb	r3, [r4, #21]
}
 800d6d8:	4640      	mov	r0, r8
 800d6da:	b005      	add	sp, #20
 800d6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 800d6e6:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 800d6ea:	4295      	cmp	r5, r2
			*d++ = *s++;
 800d6ec:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 800d6f0:	d1f9      	bne.n	800d6e6 <f_write+0x21e>
 800d6f2:	e7be      	b.n	800d672 <f_write+0x1aa>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d6f4:	f04f 0807 	mov.w	r8, #7
 800d6f8:	e6fa      	b.n	800d4f0 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d6fa:	69e1      	ldr	r1, [r4, #28]
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f7fe f893 	bl	800b828 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d702:	2800      	cmp	r0, #0
 800d704:	f47f af25 	bne.w	800d552 <f_write+0x8a>
 800d708:	e770      	b.n	800d5ec <f_write+0x124>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d70a:	4659      	mov	r1, fp
 800d70c:	4620      	mov	r0, r4
 800d70e:	f7fe f88b 	bl	800b828 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d712:	2800      	cmp	r0, #0
 800d714:	f47f af1d 	bne.w	800d552 <f_write+0x8a>
 800d718:	e768      	b.n	800d5ec <f_write+0x124>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d71a:	2301      	movs	r3, #1
 800d71c:	4651      	mov	r1, sl
 800d71e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d722:	9202      	str	r2, [sp, #8]
 800d724:	f7fd f94e 	bl	800a9c4 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800d728:	2800      	cmp	r0, #0
 800d72a:	d1d2      	bne.n	800d6d2 <f_write+0x20a>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d72c:	69a3      	ldr	r3, [r4, #24]
 800d72e:	9a02      	ldr	r2, [sp, #8]
 800d730:	e769      	b.n	800d606 <f_write+0x13e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d732:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 800d736:	1c42      	adds	r2, r0, #1
 800d738:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d73a:	ebaa 0202 	sub.w	r2, sl, r2
 800d73e:	2a02      	cmp	r2, #2
 800d740:	d90d      	bls.n	800d75e <f_write+0x296>
 800d742:	4652      	mov	r2, sl
 800d744:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 800d748:	f851 0b04 	ldr.w	r0, [r1], #4
 800d74c:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800d750:	4562      	cmp	r2, ip
 800d752:	d1f9      	bne.n	800d748 <f_write+0x280>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d754:	7d22      	ldrb	r2, [r4, #20]
 800d756:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d75a:	7522      	strb	r2, [r4, #20]
 800d75c:	e733      	b.n	800d5c6 <f_write+0xfe>
 800d75e:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 800d762:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 800d766:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 800d76a:	458c      	cmp	ip, r1
			*d++ = *s++;
 800d76c:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800d770:	d1f9      	bne.n	800d766 <f_write+0x29e>
 800d772:	e7ef      	b.n	800d754 <f_write+0x28c>

0800d774 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d774:	b158      	cbz	r0, 800d78e <f_close+0x1a>
 800d776:	6803      	ldr	r3, [r0, #0]
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	4604      	mov	r4, r0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d77c:	b12b      	cbz	r3, 800d78a <f_close+0x16>
 800d77e:	781a      	ldrb	r2, [r3, #0]
 800d780:	b11a      	cbz	r2, 800d78a <f_close+0x16>
 800d782:	8881      	ldrh	r1, [r0, #4]
 800d784:	88da      	ldrh	r2, [r3, #6]
 800d786:	4291      	cmp	r1, r2
 800d788:	d003      	beq.n	800d792 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 800d78a:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800d78c:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800d78e:	2009      	movs	r0, #9
}
 800d790:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d792:	7858      	ldrb	r0, [r3, #1]
 800d794:	f7fd f8fa 	bl	800a98c <disk_status>
 800d798:	07c1      	lsls	r1, r0, #31
 800d79a:	d4f6      	bmi.n	800d78a <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d79c:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d79e:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d7a0:	065a      	lsls	r2, r3, #25
 800d7a2:	d53c      	bpl.n	800d81e <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d7a4:	061b      	lsls	r3, r3, #24
 800d7a6:	d45d      	bmi.n	800d864 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 800d7a8:	f7fd f800 	bl	800a7ac <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800d7ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d7ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 800d7b0:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d7b2:	4299      	cmp	r1, r3
 800d7b4:	d004      	beq.n	800d7c0 <f_close+0x4c>
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	f7fd fab2 	bl	800ad20 <move_window.part.0>
				if (res == FR_OK) {
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d1e5      	bne.n	800d78c <f_close+0x18>
					dir = fp->dir_ptr;
 800d7c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d7c2:	7ad3      	ldrb	r3, [r2, #11]
 800d7c4:	f043 0320 	orr.w	r3, r3, #32
 800d7c8:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d7ca:	68a3      	ldr	r3, [r4, #8]
 800d7cc:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7ce:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800d7d2:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 800d7d4:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 800d7d6:	7809      	ldrb	r1, [r1, #0]
 800d7d8:	2903      	cmp	r1, #3
 800d7da:	d103      	bne.n	800d7e4 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d7dc:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d7de:	7513      	strb	r3, [r2, #20]
 800d7e0:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 800d7e2:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d7e4:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d7e6:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800d7e8:	7596      	strb	r6, [r2, #22]
 800d7ea:	0a19      	lsrs	r1, r3, #8
 800d7ec:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7ee:	7751      	strb	r1, [r2, #29]
 800d7f0:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d7f2:	0e1b      	lsrs	r3, r3, #24
 800d7f4:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 800d7f6:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7f8:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d7fa:	75d3      	strb	r3, [r2, #23]
 800d7fc:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d7fe:	0e36      	lsrs	r6, r6, #24
 800d800:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 800d802:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 800d804:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800d806:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
 800d808:	2301      	movs	r3, #1
 800d80a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d80c:	f7fd ff9c 	bl	800b748 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d810:	7d23      	ldrb	r3, [r4, #20]
 800d812:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d816:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800d818:	2800      	cmp	r0, #0
 800d81a:	d1b7      	bne.n	800d78c <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d81c:	6825      	ldr	r5, [r4, #0]
 800d81e:	2d00      	cmp	r5, #0
 800d820:	d0b3      	beq.n	800d78a <f_close+0x16>
 800d822:	782b      	ldrb	r3, [r5, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0b0      	beq.n	800d78a <f_close+0x16>
 800d828:	88a2      	ldrh	r2, [r4, #4]
 800d82a:	88eb      	ldrh	r3, [r5, #6]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d1ac      	bne.n	800d78a <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d830:	7868      	ldrb	r0, [r5, #1]
 800d832:	f7fd f8ab 	bl	800a98c <disk_status>
 800d836:	f010 0001 	ands.w	r0, r0, #1
 800d83a:	d1a6      	bne.n	800d78a <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d83c:	6923      	ldr	r3, [r4, #16]
 800d83e:	3b01      	subs	r3, #1
 800d840:	2b01      	cmp	r3, #1
 800d842:	d81c      	bhi.n	800d87e <f_close+0x10a>
		n = Files[i].ctr;
 800d844:	4912      	ldr	r1, [pc, #72]	; (800d890 <f_close+0x11c>)
 800d846:	011d      	lsls	r5, r3, #4
 800d848:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800d84c:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d84e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d852:	d016      	beq.n	800d882 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 800d854:	b1b2      	cbz	r2, 800d884 <f_close+0x110>
 800d856:	3a01      	subs	r2, #1
 800d858:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800d85a:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d85c:	b192      	cbz	r2, 800d884 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 800d85e:	2300      	movs	r3, #0
 800d860:	6023      	str	r3, [r4, #0]
}
 800d862:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d864:	2301      	movs	r3, #1
 800d866:	6a22      	ldr	r2, [r4, #32]
 800d868:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d86c:	7868      	ldrb	r0, [r5, #1]
 800d86e:	f7fd f8b7 	bl	800a9e0 <disk_write>
 800d872:	b950      	cbnz	r0, 800d88a <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d874:	7d23      	ldrb	r3, [r4, #20]
 800d876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d87a:	7523      	strb	r3, [r4, #20]
 800d87c:	e794      	b.n	800d7a8 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d87e:	2002      	movs	r0, #2
}
 800d880:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800d882:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d884:	2300      	movs	r3, #0
 800d886:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 800d888:	e7e9      	b.n	800d85e <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d88a:	2001      	movs	r0, #1
}
 800d88c:	bd70      	pop	{r4, r5, r6, pc}
 800d88e:	bf00      	nop
 800d890:	20018984 	.word	0x20018984

0800d894 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d896:	b150      	cbz	r0, 800d8ae <f_findnext+0x1a>
 800d898:	4605      	mov	r5, r0
 800d89a:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d89c:	4c3a      	ldr	r4, [pc, #232]	; (800d988 <f_findnext+0xf4>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d89e:	682b      	ldr	r3, [r5, #0]
 800d8a0:	b12b      	cbz	r3, 800d8ae <f_findnext+0x1a>
 800d8a2:	781a      	ldrb	r2, [r3, #0]
 800d8a4:	b11a      	cbz	r2, 800d8ae <f_findnext+0x1a>
 800d8a6:	88a9      	ldrh	r1, [r5, #4]
 800d8a8:	88da      	ldrh	r2, [r3, #6]
 800d8aa:	4291      	cmp	r1, r2
 800d8ac:	d002      	beq.n	800d8b4 <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800d8ae:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d8b4:	7858      	ldrb	r0, [r3, #1]
 800d8b6:	f7fd f869 	bl	800a98c <disk_status>
 800d8ba:	f010 0101 	ands.w	r1, r0, #1
 800d8be:	d1f6      	bne.n	800d8ae <f_findnext+0x1a>
		if (!fno) {
 800d8c0:	2e00      	cmp	r6, #0
 800d8c2:	d058      	beq.n	800d976 <f_findnext+0xe2>
			res = dir_read(dp, 0);			/* Read an item */
 800d8c4:	4628      	mov	r0, r5
 800d8c6:	f7fd fd1b 	bl	800b300 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 800d8ca:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800d8ce:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800d8d0:	d1ee      	bne.n	800d8b0 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d8d2:	4631      	mov	r1, r6
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	f7fd f965 	bl	800aba4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d8da:	4628      	mov	r0, r5
 800d8dc:	f7fd fccc 	bl	800b278 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800d8e0:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 800d8e4:	d14d      	bne.n	800d982 <f_findnext+0xee>
 800d8e6:	7db3      	ldrb	r3, [r6, #22]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d0e1      	beq.n	800d8b0 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d8ec:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 800d8f0:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 800d8f4:	e00f      	b.n	800d916 <f_findnext+0x82>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d8f6:	3a20      	subs	r2, #32
 800d8f8:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d8fa:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d8fe:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d902:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d904:	f1be 0f19 	cmp.w	lr, #25
 800d908:	d817      	bhi.n	800d93a <f_findnext+0xa6>
 800d90a:	3b20      	subs	r3, #32
 800d90c:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800d90e:	4293      	cmp	r3, r2
 800d910:	d1c5      	bne.n	800d89e <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800d912:	2b00      	cmp	r3, #0
 800d914:	d0cc      	beq.n	800d8b0 <f_findnext+0x1c>
 800d916:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800d918:	f81c 3b01 	ldrb.w	r3, [ip], #1
 800d91c:	2b3f      	cmp	r3, #63	; 0x3f
 800d91e:	d012      	beq.n	800d946 <f_findnext+0xb2>
 800d920:	2b2a      	cmp	r3, #42	; 0x2a
 800d922:	d010      	beq.n	800d946 <f_findnext+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d924:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d928:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d92a:	2819      	cmp	r0, #25
 800d92c:	d9e3      	bls.n	800d8f6 <f_findnext+0x62>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d92e:	2a7f      	cmp	r2, #127	; 0x7f
 800d930:	d9e3      	bls.n	800d8fa <f_findnext+0x66>
 800d932:	4423      	add	r3, r4
 800d934:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800d938:	e7df      	b.n	800d8fa <f_findnext+0x66>
 800d93a:	2b7f      	cmp	r3, #127	; 0x7f
 800d93c:	d9e7      	bls.n	800d90e <f_findnext+0x7a>
 800d93e:	4420      	add	r0, r4
 800d940:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 800d944:	e7e3      	b.n	800d90e <f_findnext+0x7a>
 800d946:	4694      	mov	ip, r2
				nm = nx = 0;
 800d948:	2300      	movs	r3, #0
 800d94a:	f81c eb01 	ldrb.w	lr, [ip], #1
 800d94e:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800d950:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800d954:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 800d956:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800d95a:	bf0c      	ite	eq
 800d95c:	3201      	addeq	r2, #1
 800d95e:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800d960:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800d964:	d0f4      	beq.n	800d950 <f_findnext+0xbc>
 800d966:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 800d96a:	d0f1      	beq.n	800d950 <f_findnext+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800d96c:	f7fd f8a4 	bl	800aab8 <pattern_matching>
 800d970:	2800      	cmp	r0, #0
 800d972:	d094      	beq.n	800d89e <f_findnext+0xa>
 800d974:	e79c      	b.n	800d8b0 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d976:	4631      	mov	r1, r6
 800d978:	4628      	mov	r0, r5
}
 800d97a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d97e:	f7fe b823 	b.w	800b9c8 <dir_sdi>
 800d982:	4607      	mov	r7, r0
 800d984:	e794      	b.n	800d8b0 <f_findnext+0x1c>
 800d986:	bf00      	nop
 800d988:	08017304 	.word	0x08017304

0800d98c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800d98c:	b570      	push	{r4, r5, r6, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	4615      	mov	r5, r2
 800d992:	4604      	mov	r4, r0
 800d994:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800d996:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 800d998:	2200      	movs	r2, #0
 800d99a:	a901      	add	r1, sp, #4
 800d99c:	4668      	mov	r0, sp
 800d99e:	9500      	str	r5, [sp, #0]
 800d9a0:	f7fd f9f8 	bl	800ad94 <find_volume>
	if (res == FR_OK) {
 800d9a4:	b118      	cbz	r0, 800d9ae <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800d9aa:	b002      	add	sp, #8
 800d9ac:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d9ae:	e9dd 1300 	ldrd	r1, r3, [sp]
 800d9b2:	4620      	mov	r0, r4
		obj->fs = fs;
 800d9b4:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d9b6:	f7fe fa67 	bl	800be88 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800d9ba:	bb08      	cbnz	r0, 800da00 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d9bc:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	db25      	blt.n	800da10 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d9c4:	79a3      	ldrb	r3, [r4, #6]
 800d9c6:	06db      	lsls	r3, r3, #27
 800d9c8:	d520      	bpl.n	800da0c <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d9ca:	9b01      	ldr	r3, [sp, #4]
 800d9cc:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 800d9ce:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 800d9d0:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 800d9d2:	2803      	cmp	r0, #3
 800d9d4:	d102      	bne.n	800d9dc <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d9d6:	8a89      	ldrh	r1, [r1, #20]
 800d9d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d9dc:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
 800d9de:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d9e0:	2100      	movs	r1, #0
 800d9e2:	4620      	mov	r0, r4
				obj->id = fs->id;
 800d9e4:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d9e6:	f7fd ffef 	bl	800b9c8 <dir_sdi>
				if (res == FR_OK) {
 800d9ea:	b948      	cbnz	r0, 800da00 <f_findfirst+0x74>
					if (obj->sclust) {
 800d9ec:	68a3      	ldr	r3, [r4, #8]
 800d9ee:	b98b      	cbnz	r3, 800da14 <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d9f0:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4620      	mov	r0, r4
}
 800d9f6:	b002      	add	sp, #8
 800d9f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 800d9fc:	f7ff bf4a 	b.w	800d894 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800da00:	2804      	cmp	r0, #4
 800da02:	d1d0      	bne.n	800d9a6 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800da04:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800da06:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800da08:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 800da0a:	e7ce      	b.n	800d9aa <f_findfirst+0x1e>
					res = FR_NO_PATH;
 800da0c:	2005      	movs	r0, #5
 800da0e:	e7ca      	b.n	800d9a6 <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800da10:	9b01      	ldr	r3, [sp, #4]
 800da12:	e7e4      	b.n	800d9de <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800da14:	4601      	mov	r1, r0
 800da16:	4620      	mov	r0, r4
 800da18:	f7fc fffc 	bl	800aa14 <inc_lock>
 800da1c:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800da1e:	2800      	cmp	r0, #0
 800da20:	d1e7      	bne.n	800d9f2 <f_findfirst+0x66>
 800da22:	2012      	movs	r0, #18
 800da24:	e7bf      	b.n	800d9a6 <f_findfirst+0x1a>
 800da26:	bf00      	nop

0800da28 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800da28:	4b10      	ldr	r3, [pc, #64]	; (800da6c <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800da2a:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800da2c:	7a5c      	ldrb	r4, [r3, #9]
 800da2e:	b9cc      	cbnz	r4, 800da64 <FATFS_LinkDriver+0x3c>
 800da30:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 800da32:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 800da36:	7a5c      	ldrb	r4, [r3, #9]
 800da38:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800da3a:	7a5c      	ldrb	r4, [r3, #9]
 800da3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800da40:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800da42:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800da44:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800da46:	441c      	add	r4, r3
 800da48:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 800da4a:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 800da4c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800da4e:	b2e4      	uxtb	r4, r4
 800da50:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800da52:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800da54:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800da56:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800da58:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 800da5a:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800da5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 800da60:	708b      	strb	r3, [r1, #2]
}
 800da62:	4770      	bx	lr
  uint8_t ret = 1;
 800da64:	2001      	movs	r0, #1
}
 800da66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	20018ba8 	.word	0x20018ba8

0800da70 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800da70:	287f      	cmp	r0, #127	; 0x7f
 800da72:	d912      	bls.n	800da9a <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800da74:	b971      	cbnz	r1, 800da94 <ff_convert+0x24>
 800da76:	4b0c      	ldr	r3, [pc, #48]	; (800daa8 <ff_convert+0x38>)
 800da78:	e001      	b.n	800da7e <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800da7a:	2980      	cmp	r1, #128	; 0x80
 800da7c:	d00c      	beq.n	800da98 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
 800da7e:	f833 2b02 	ldrh.w	r2, [r3], #2
 800da82:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 800da86:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 800da88:	4282      	cmp	r2, r0
 800da8a:	d1f6      	bne.n	800da7a <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 800da8c:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 800da90:	b280      	uxth	r0, r0
 800da92:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800da94:	28ff      	cmp	r0, #255	; 0xff
 800da96:	d901      	bls.n	800da9c <ff_convert+0x2c>
 800da98:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800da9a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800da9c:	4b02      	ldr	r3, [pc, #8]	; (800daa8 <ff_convert+0x38>)
 800da9e:	3880      	subs	r0, #128	; 0x80
 800daa0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	08017394 	.word	0x08017394

0800daac <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800daac:	4b22      	ldr	r3, [pc, #136]	; (800db38 <ff_wtoupper+0x8c>)
 800daae:	4a23      	ldr	r2, [pc, #140]	; (800db3c <ff_wtoupper+0x90>)
 800dab0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800dab4:	bf28      	it	cs
 800dab6:	4613      	movcs	r3, r2
{
 800dab8:	b510      	push	{r4, lr}
 800daba:	3304      	adds	r3, #4
 800dabc:	e001      	b.n	800dac2 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800dabe:	3304      	adds	r3, #4
 800dac0:	b1da      	cbz	r2, 800dafa <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
 800dac2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 800dac6:	461c      	mov	r4, r3
 800dac8:	b1b1      	cbz	r1, 800daf8 <ff_wtoupper+0x4c>
 800daca:	4288      	cmp	r0, r1
 800dacc:	d314      	bcc.n	800daf8 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dace:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800dad2:	fa5f fc82 	uxtb.w	ip, r2
 800dad6:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 800dad8:	eb0c 0e01 	add.w	lr, ip, r1
 800dadc:	4570      	cmp	r0, lr
 800dade:	daee      	bge.n	800dabe <ff_wtoupper+0x12>
			switch (cmd) {
 800dae0:	2a08      	cmp	r2, #8
 800dae2:	d809      	bhi.n	800daf8 <ff_wtoupper+0x4c>
 800dae4:	e8df f002 	tbb	[pc, r2]
 800dae8:	19161005 	.word	0x19161005
 800daec:	25221f1c 	.word	0x25221f1c
 800daf0:	0c          	.byte	0x0c
 800daf1:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800daf2:	1a41      	subs	r1, r0, r1
 800daf4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 800daf8:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
 800dafa:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 800dafe:	e7dc      	b.n	800daba <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800db00:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800db04:	b280      	uxth	r0, r0
}
 800db06:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800db08:	1a43      	subs	r3, r0, r1
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	1ac0      	subs	r0, r0, r3
 800db10:	b280      	uxth	r0, r0
}
 800db12:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 800db14:	3810      	subs	r0, #16
 800db16:	b280      	uxth	r0, r0
}
 800db18:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 800db1a:	3820      	subs	r0, #32
 800db1c:	b280      	uxth	r0, r0
}
 800db1e:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 800db20:	3830      	subs	r0, #48	; 0x30
 800db22:	b280      	uxth	r0, r0
}
 800db24:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 800db26:	381a      	subs	r0, #26
 800db28:	b280      	uxth	r0, r0
}
 800db2a:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 800db2c:	3008      	adds	r0, #8
 800db2e:	b280      	uxth	r0, r0
}
 800db30:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 800db32:	3850      	subs	r0, #80	; 0x50
 800db34:	b280      	uxth	r0, r0
}
 800db36:	bd10      	pop	{r4, pc}
 800db38:	08017494 	.word	0x08017494
 800db3c:	08017688 	.word	0x08017688

0800db40 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800db44:	6811      	ldr	r1, [r2, #0]
{
 800db46:	4606      	mov	r6, r0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800db48:	202c      	movs	r0, #44	; 0x2c
{
 800db4a:	ed2d 8b02 	vpush	{d8}
 800db4e:	b082      	sub	sp, #8
 800db50:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800db54:	9101      	str	r1, [sp, #4]
 800db56:	f002 f9fd 	bl	800ff54 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 800db5a:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
 800db5e:	9901      	ldr	r1, [sp, #4]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800db60:	6030      	str	r0, [r6, #0]
 800db62:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 800db64:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 800db68:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 800db6a:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800db6c:	eef4 7ac8 	vcmpe.f32	s15, s16
 800db70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db74:	d550      	bpl.n	800dc18 <tLinearDelay_initToPool+0xd8>
 800db76:	edc0 7a08 	vstr	s15, [r0, #32]
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 800db7a:	00a8      	lsls	r0, r5, #2
 800db7c:	f002 f9ea 	bl	800ff54 <mpool_alloc>
    return d->lastOut;
}

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;
 800db80:	6835      	ldr	r5, [r6, #0]
    d->gain = 1.0f;
 800db82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->lastIn = 0.0f;
 800db86:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800dc2c <tLinearDelay_initToPool+0xec>

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 800db8a:	ed95 1a07 	vldr	s2, [r5, #28]
    d->inPoint = 0;
 800db8e:	2300      	movs	r3, #0
    d->gain = 1.0f;
 800db90:	6062      	str	r2, [r4, #4]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 800db92:	eeb8 1a41 	vcvt.f32.u32	s2, s2
 800db96:	edd4 0a08 	vldr	s1, [r4, #32]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 800db9a:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
 800db9c:	ed84 0a04 	vstr	s0, [r4, #16]
    d->lastOut = 0.0f;
 800dba0:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = 0;
 800dba4:	e9c4 3305 	strd	r3, r3, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 800dba8:	f002 f89a 	bl	800fce0 <LEAF_clip>

    float outPointer = d->inPoint - d->delay;
 800dbac:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 800dbb0:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
 800dbb4:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 800dbb8:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
 800dbba:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 800dbbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbc6:	d50a      	bpl.n	800dbde <tLinearDelay_initToPool+0x9e>
        outPointer += d->maxDelay; // modulo maximum length
 800dbc8:	ee07 2a90 	vmov	s15, r2
 800dbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd0:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 800dbd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbdc:	d4f8      	bmi.n	800dbd0 <tLinearDelay_initToPool+0x90>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800dbde:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800dbe2:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 800dbe6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800dbea:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800dbee:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 800dbf0:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 800dbf4:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 800dbf6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800dbfa:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 800dbfe:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 800dc02:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800dc06:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800dc0a:	d101      	bne.n	800dc10 <tLinearDelay_initToPool+0xd0>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	61ab      	str	r3, [r5, #24]
}
 800dc10:	b002      	add	sp, #8
 800dc12:	ecbd 8b02 	vpop	{d8}
 800dc16:	bd70      	pop	{r4, r5, r6, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
 800dc18:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc22:	bf4c      	ite	mi
 800dc24:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
 800dc26:	ed80 8a08 	vstrpl	s16, [r0, #32]
 800dc2a:	e7a6      	b.n	800db7a <tLinearDelay_initToPool+0x3a>
 800dc2c:	00000000 	.word	0x00000000

0800dc30 <tLinearDelay_tick>:
    _tLinearDelay* d = *dl;
 800dc30:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 800dc32:	695a      	ldr	r2, [r3, #20]
 800dc34:	edd3 7a01 	vldr	s15, [r3, #4]
 800dc38:	6899      	ldr	r1, [r3, #8]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dc3a:	69d8      	ldr	r0, [r3, #28]
    d->buff[d->inPoint] = input * d->gain;
 800dc3c:	ee27 0a80 	vmul.f32	s0, s15, s0
{
 800dc40:	b410      	push	{r4}
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dc42:	1c54      	adds	r4, r2, #1
    d->buff[d->inPoint] = input * d->gain;
 800dc44:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dc48:	4284      	cmp	r4, r0
    d->buff[d->inPoint] = input * d->gain;
 800dc4a:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dc4e:	615c      	str	r4, [r3, #20]
 800dc50:	d101      	bne.n	800dc56 <tLinearDelay_tick+0x26>
 800dc52:	2200      	movs	r2, #0
 800dc54:	615a      	str	r2, [r3, #20]
    uint32_t idx = (uint32_t) d->outPoint;
 800dc56:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800dc58:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800dc5c:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
 800dc60:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 800dc62:	ed94 0a00 	vldr	s0, [r4]
    if ((idx + 1) < d->maxDelay)
 800dc66:	4290      	cmp	r0, r2
    d->lastOut = d->buff[idx] * d->omAlpha;
 800dc68:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dc6c:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 800dc70:	d90b      	bls.n	800dc8a <tLinearDelay_tick+0x5a>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800dc72:	ed94 7a01 	vldr	s14, [r4, #4]
 800dc76:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
}
 800dc7a:	f85d 4b04 	ldr.w	r4, [sp], #4
        d->lastOut += d->buff[idx+1] * d->alpha;
 800dc7e:	eea7 0a27 	vfma.f32	s0, s14, s15
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800dc82:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 800dc84:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800dc88:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800dc8a:	ed91 7a00 	vldr	s14, [r1]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800dc8e:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
 800dc90:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
}
 800dc94:	f85d 4b04 	ldr.w	r4, [sp], #4
        d->lastOut += d->buff[0] * d->alpha;
 800dc98:	eea7 0a27 	vfma.f32	s0, s14, s15
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800dc9c:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 800dc9e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800dca2:	4770      	bx	lr

0800dca4 <tLinearDelay_setDelay>:
{
 800dca4:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800dca6:	6804      	ldr	r4, [r0, #0]
{
 800dca8:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 800dcac:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800dd24 <tLinearDelay_setDelay+0x80>
 800dcb0:	edd4 7a07 	vldr	s15, [r4, #28]
 800dcb4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800dcb8:	f002 f812 	bl	800fce0 <LEAF_clip>
    float outPointer = d->inPoint - d->delay;
 800dcbc:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 800dcc0:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
 800dcc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
 800dcc8:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
 800dcca:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 800dcce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcd6:	d50a      	bpl.n	800dcee <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 800dcd8:	ee07 2a90 	vmov	s15, r2
 800dcdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dce0:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 800dce4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcec:	d4f8      	bmi.n	800dce0 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 800dcee:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800dcf2:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
 800dcf6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800dcfa:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800dcfe:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 800dd00:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 800dd04:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 800dd06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800dd0a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 800dd0e:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 800dd12:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800dd16:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800dd1a:	d000      	beq.n	800dd1e <tLinearDelay_setDelay+0x7a>
}
 800dd1c:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	61a3      	str	r3, [r4, #24]
}
 800dd22:	bd10      	pop	{r4, pc}
 800dd24:	00000000 	.word	0x00000000

0800dd28 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
 800dd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd2c:	460d      	mov	r5, r1

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
 800dd2e:	1e16      	subs	r6, r2, #0
    _tMempool* m = *mp;
 800dd30:	6999      	ldr	r1, [r3, #24]
{
 800dd32:	b082      	sub	sp, #8
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 800dd34:	f1a5 0302 	sub.w	r3, r5, #2
    if (extraQuality) offset = 6;
 800dd38:	bf0c      	ite	eq
 800dd3a:	2700      	moveq	r7, #0
 800dd3c:	2706      	movne	r7, #6
{
 800dd3e:	4680      	mov	r8, r0
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 800dd40:	2b1e      	cmp	r3, #30
 800dd42:	d93a      	bls.n	800ddba <tOversampler_init+0x92>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
 800dd44:	2d40      	cmp	r5, #64	; 0x40
 800dd46:	d135      	bne.n	800ddb4 <tOversampler_init+0x8c>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 800dd48:	2028      	movs	r0, #40	; 0x28
 800dd4a:	9101      	str	r1, [sp, #4]
 800dd4c:	f002 f902 	bl	800ff54 <mpool_alloc>
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 800dd50:	ee07 5a90 	vmov	s15, r5
        os->mempool = m;
 800dd54:	9901      	ldr	r1, [sp, #4]
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 800dd56:	4604      	mov	r4, r0
 800dd58:	f8c8 0000 	str.w	r0, [r8]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 800dd5c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->mempool = m;
 800dd60:	6001      	str	r1, [r0, #0]
        os->ratio = os->maxRatio;
 800dd62:	60c5      	str	r5, [r0, #12]
        os->offset = offset;
 800dd64:	6107      	str	r7, [r0, #16]
        os->allowHighQuality = extraQuality;
 800dd66:	e9c0 5601 	strd	r5, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 800dd6a:	f007 fb77 	bl	801545c <log2f>
 800dd6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 800dd72:	4a16      	ldr	r2, [pc, #88]	; (800ddcc <tOversampler_init+0xa4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 800dd74:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 800dd76:	ee17 3a90 	vmov	r3, s15
 800dd7a:	3b01      	subs	r3, #1
 800dd7c:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 800dd7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dd82:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 800dd86:	4a12      	ldr	r2, [pc, #72]	; (800ddd0 <tOversampler_init+0xa8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 800dd88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 800dd8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 800dd90:	ee17 0a90 	vmov	r0, s15
 800dd94:	edc4 7a08 	vstr	s15, [r4, #32]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 800dd98:	6163      	str	r3, [r4, #20]
        os->phaseLength = os->numTaps / os->ratio;
 800dd9a:	fb90 f5f5 	sdiv	r5, r0, r5
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 800dd9e:	00c0      	lsls	r0, r0, #3
        os->phaseLength = os->numTaps / os->ratio;
 800dda0:	6265      	str	r5, [r4, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 800dda2:	f002 f8d7 	bl	800ff54 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 800dda6:	6a23      	ldr	r3, [r4, #32]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 800dda8:	61a0      	str	r0, [r4, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 800ddaa:	9901      	ldr	r1, [sp, #4]
 800ddac:	00d8      	lsls	r0, r3, #3
 800ddae:	f002 f8d1 	bl	800ff54 <mpool_alloc>
 800ddb2:	61e0      	str	r0, [r4, #28]
}
 800ddb4:	b002      	add	sp, #8
 800ddb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 800ddba:	4a06      	ldr	r2, [pc, #24]	; (800ddd4 <tOversampler_init+0xac>)
 800ddbc:	fa22 f303 	lsr.w	r3, r2, r3
 800ddc0:	07db      	lsls	r3, r3, #31
 800ddc2:	d4c1      	bmi.n	800dd48 <tOversampler_init+0x20>
}
 800ddc4:	b002      	add	sp, #8
 800ddc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddca:	bf00      	nop
 800ddcc:	08020dc4 	.word	0x08020dc4
 800ddd0:	200000b0 	.word	0x200000b0
 800ddd4:	40004045 	.word	0x40004045

0800ddd8 <tOversampler_upsample>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, float input, float* output)
#else
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
#endif
{
    _tOversampler* os = *osr;
 800ddd8:	6803      	ldr	r3, [r0, #0]
{
 800ddda:	b570      	push	{r4, r5, r6, lr}
    
    if (os->ratio == 1)
 800dddc:	68de      	ldr	r6, [r3, #12]
 800ddde:	2e01      	cmp	r6, #1
 800dde0:	d034      	beq.n	800de4c <tOversampler_upsample+0x74>
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 800dde2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 800dde4:	e9d3 4005 	ldrd	r4, r0, [r3, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 800dde8:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 800ddec:	ed03 0a01 	vstr	s0, [r3, #-4]
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
    
    while (i > 0U)
 800ddf0:	b31e      	cbz	r6, 800de3a <tOversampler_upsample+0x62>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
 800ddf2:	ee07 6a90 	vmov	s15, r6
 800ddf6:	1e73      	subs	r3, r6, #1
            ptr2 += os->ratio;
 800ddf8:	ea4f 0e86 	mov.w	lr, r6, lsl #2
        while (tapCnt > 0U)
 800ddfc:	eddf 5a16 	vldr	s11, [pc, #88]	; 800de58 <tOversampler_upsample+0x80>
        *output++ = sum0 * os->ratio;
 800de00:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800de04:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800de08:	eb01 0686 	add.w	r6, r1, r6, lsl #2
        ptr2 = pCoeffs + (os->ratio - j);
 800de0c:	4623      	mov	r3, r4
        while (tapCnt > 0U)
 800de0e:	b305      	cbz	r5, 800de52 <tOversampler_upsample+0x7a>
 800de10:	462a      	mov	r2, r5
        ptr1 = pState;
 800de12:	4684      	mov	ip, r0
        sum0 = 0.0f;
 800de14:	eddf 7a10 	vldr	s15, [pc, #64]	; 800de58 <tOversampler_upsample+0x80>
            sum0 += *ptr1++ * *ptr2;
 800de18:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 800de1c:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 800de1e:	ecfc 6a01 	vldmia	ip!, {s13}
            ptr2 += os->ratio;
 800de22:	4473      	add	r3, lr
            sum0 += *ptr1++ * *ptr2;
 800de24:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 800de28:	d1f6      	bne.n	800de18 <tOversampler_upsample+0x40>
        *output++ = sum0 * os->ratio;
 800de2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800de2e:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 800de32:	42b1      	cmp	r1, r6
 800de34:	f1a4 0404 	sub.w	r4, r4, #4
 800de38:	d1e8      	bne.n	800de0c <tOversampler_upsample+0x34>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 800de3a:	1e6a      	subs	r2, r5, #1
    pState = pState + 1;
 800de3c:	f100 0104 	add.w	r1, r0, #4
    while (tapCnt > 0U)
 800de40:	d006      	beq.n	800de50 <tOversampler_upsample+0x78>
    {
        *pStateCur++ = *pState++;
 800de42:	0092      	lsls	r2, r2, #2
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 800de44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        *pStateCur++ = *pState++;
 800de48:	f007 b91e 	b.w	8015088 <memmove>
        output[0] = input;
 800de4c:	ed81 0a00 	vstr	s0, [r1]
}
 800de50:	bd70      	pop	{r4, r5, r6, pc}
        while (tapCnt > 0U)
 800de52:	eef0 7a65 	vmov.f32	s15, s11
 800de56:	e7ea      	b.n	800de2e <tOversampler_upsample+0x56>
 800de58:	00000000 	.word	0x00000000

0800de5c <tOversampler_downsample>:
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, float* input)
#else
float tOversampler_downsample(tOversampler *const osr, float* input)
#endif
{
    _tOversampler* os = *osr;
 800de5c:	6803      	ldr	r3, [r0, #0]
{
 800de5e:	b470      	push	{r4, r5, r6}
    
    if (os->ratio == 1) return input[0];
 800de60:	68dd      	ldr	r5, [r3, #12]
 800de62:	2d01      	cmp	r5, #1
 800de64:	d028      	beq.n	800deb8 <tOversampler_downsample+0x5c>
    
    float *pState = os->downState;                 /* State pointer */
 800de66:	69dc      	ldr	r4, [r3, #28]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 800de68:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 800de6c:	695e      	ldr	r6, [r3, #20]
    
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
 800de6e:	462a      	mov	r2, r5
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
 800de70:	6a1b      	ldr	r3, [r3, #32]
    pStateCur = os->downState + (numTaps - 1U);
 800de72:	4418      	add	r0, r3
 800de74:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    
    do
    {
        *pStateCur++ = *input++;
 800de78:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
 800de7c:	3a01      	subs	r2, #1
        *pStateCur++ = *input++;
 800de7e:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
 800de82:	d1f9      	bne.n	800de78 <tOversampler_downsample+0x1c>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 800de84:	b1e3      	cbz	r3, 800dec0 <tOversampler_downsample+0x64>
 800de86:	461a      	mov	r2, r3
    acc0 = 0.0f;
 800de88:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800ded0 <tOversampler_downsample+0x74>
    px0 = pState;
 800de8c:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 800de8e:	ecb6 7a01 	vldmia	r6!, {s14}
    while (tapCnt > 0U)
 800de92:	3a01      	subs	r2, #1
        acc0 += x0 * c0;
 800de94:	ecf1 7a01 	vldmia	r1!, {s15}
 800de98:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 800de9c:	d1f7      	bne.n	800de8e <tOversampler_downsample+0x32>
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 800de9e:	3b01      	subs	r3, #1
    pState = pState + os->ratio;
 800dea0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    while (tapCnt > 0U)
 800dea4:	d006      	beq.n	800deb4 <tOversampler_downsample+0x58>
 800dea6:	4622      	mov	r2, r4
    {
        *pStateCur++ = *pState++;
 800dea8:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 800deac:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 800deae:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 800deb2:	d1f9      	bne.n	800dea8 <tOversampler_downsample+0x4c>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 800deb4:	bc70      	pop	{r4, r5, r6}
 800deb6:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
 800deb8:	ed91 0a00 	vldr	s0, [r1]
}
 800debc:	bc70      	pop	{r4, r5, r6}
 800debe:	4770      	bx	lr
    pState = pState + os->ratio;
 800dec0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    acc0 = 0.0f;
 800dec4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800ded0 <tOversampler_downsample+0x74>
    tapCnt = (numTaps - 1U);
 800dec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800decc:	e7eb      	b.n	800dea6 <tOversampler_downsample+0x4a>
 800dece:	bf00      	nop
 800ded0:	00000000 	.word	0x00000000

0800ded4 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 800ded4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 800ded6:	698f      	ldr	r7, [r1, #24]
{
 800ded8:	4606      	mov	r6, r0
 800deda:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 800dedc:	2020      	movs	r0, #32
 800dede:	4639      	mov	r1, r7
 800dee0:	f002 f838 	bl	800ff54 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = SCALAR;
    c->rnd = 0.25f;
 800dee4:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 800dee8:	6030      	str	r0, [r6, #0]
 800deea:	4604      	mov	r4, r0
    c->mempool = m;
 800deec:	6007      	str	r7, [r0, #0]
    c->op = 4;
 800deee:	2104      	movs	r1, #4
    _tMempool* m = *mp;
 800def0:	69ad      	ldr	r5, [r5, #24]
    c->div = SCALAR;
 800def2:	4a0e      	ldr	r2, [pc, #56]	; (800df2c <tCrusher_init+0x58>)
    c->op = 4;
 800def4:	6141      	str	r1, [r0, #20]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800def6:	4629      	mov	r1, r5
    c->rnd = 0.25f;
 800def8:	6103      	str	r3, [r0, #16]
    c->div = SCALAR;
 800defa:	60c2      	str	r2, [r0, #12]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800defc:	2010      	movs	r0, #16
    c->srr = 0.25f;
 800defe:	6063      	str	r3, [r4, #4]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800df00:	f002 f828 	bl	800ff54 <mpool_alloc>
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 800df04:	edd4 6a03 	vldr	s13, [r4, #12]
 800df08:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800df30 <tCrusher_init+0x5c>
    s->invRatio = 1.0f;
 800df0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 800df10:	eddf 7a08 	vldr	s15, [pc, #32]	; 800df34 <tCrusher_init+0x60>
    s->hold = 0.0f;
 800df14:	2200      	movs	r2, #0
    s->count = 0;
 800df16:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800df18:	61e0      	str	r0, [r4, #28]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 800df1a:	eee6 7a87 	vfma.f32	s15, s13, s14
    s->mempool = m;
 800df1e:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 800df20:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 800df22:	6082      	str	r2, [r0, #8]
    s->count = 0;
 800df24:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 800df26:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800df2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df2c:	459c4000 	.word	0x459c4000
 800df30:	3912ccf6 	.word	0x3912ccf6
 800df34:	3e99999a 	.word	0x3e99999a

0800df38 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 800df38:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800dfb4 <tCrusher_tick+0x7c>
 800df3c:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 800df40:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 800df42:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 800df46:	6804      	ldr	r4, [r0, #0]
    
    sample /= c->div;
 800df48:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 800df4c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 800df50:	6960      	ldr	r0, [r4, #20]
 800df52:	05c0      	lsls	r0, r0, #23
 800df54:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800df58:	f001 febc 	bl	800fcd4 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 800df5c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 800df60:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 800df64:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800df68:	f001 feba 	bl	800fce0 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 800df6c:	edd4 0a04 	vldr	s1, [r4, #16]
 800df70:	f001 fe9e 	bl	800fcb0 <LEAF_round>
    _tSampleReducer* s = *sr;
 800df74:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 800df76:	68da      	ldr	r2, [r3, #12]
 800df78:	edd3 7a01 	vldr	s15, [r3, #4]
 800df7c:	ee07 2a10 	vmov	s14, r2
 800df80:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800df84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df8c:	dc08      	bgt.n	800dfa0 <tCrusher_tick+0x68>
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 800df8e:	edd4 7a06 	vldr	s15, [r4, #24]
    s->count++;
 800df92:	3201      	adds	r2, #1
    return s->hold;
 800df94:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 800df98:	60da      	str	r2, [r3, #12]
    
}
 800df9a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df9e:	bd10      	pop	{r4, pc}
    return sample * c->gain;
 800dfa0:	edd4 7a06 	vldr	s15, [r4, #24]
        s->hold = input;
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 800dfaa:	60da      	str	r2, [r3, #12]
}
 800dfac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dfb0:	bd10      	pop	{r4, pc}
 800dfb2:	bf00      	nop
 800dfb4:	459c4000 	.word	0x459c4000

0800dfb8 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, float op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
 800dfb8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800dfbc:	6803      	ldr	r3, [r0, #0]
 800dfbe:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dfc2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800dfc6:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800dfca:	4770      	bx	lr

0800dfcc <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, float val)
{
 800dfcc:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
 800dfd0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e004 <tCrusher_setQuality+0x38>
 800dfd4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 800dfd8:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 800dfda:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
 800dfdc:	f001 fe80 	bl	800fce0 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 800dfe0:	ed9f 6a09 	vldr	s12, [pc, #36]	; 800e008 <tCrusher_setQuality+0x3c>
 800dfe4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e00c <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 800dfe8:	eddf 6a09 	vldr	s13, [pc, #36]	; 800e010 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
 800dfec:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 800dff0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800e014 <tCrusher_setQuality+0x48>
 800dff4:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
 800dff8:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 800dffc:	ed84 7a06 	vstr	s14, [r4, #24]
}
 800e000:	bd10      	pop	{r4, pc}
 800e002:	bf00      	nop
 800e004:	00000000 	.word	0x00000000
 800e008:	459c4000 	.word	0x459c4000
 800e00c:	3c23d70a 	.word	0x3c23d70a
 800e010:	3912ccf6 	.word	0x3912ccf6
 800e014:	3e99999a 	.word	0x3e99999a

0800e018 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, float rnd)
{
    _tCrusher* c = *cr;
    c->rnd = rnd;
 800e018:	6803      	ldr	r3, [r0, #0]
 800e01a:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800e01e:	4770      	bx	lr

0800e020 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800e020:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
 800e024:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 800e026:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800e02a:	eeb4 0a67 	vcmp.f32	s0, s15
 800e02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e032:	d809      	bhi.n	800e048 <tCrusher_setSamplingRatio+0x28>
 800e034:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03c:	db04      	blt.n	800e048 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 800e03e:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800e042:	69db      	ldr	r3, [r3, #28]
 800e044:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 800e048:	4770      	bx	lr
 800e04a:	bf00      	nop

0800e04c <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
 800e04c:	b570      	push	{r4, r5, r6, lr}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
 800e04e:	698d      	ldr	r5, [r1, #24]
{
 800e050:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800e052:	204c      	movs	r0, #76	; 0x4c
 800e054:	4629      	mov	r1, r5
{
 800e056:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800e05a:	f001 ff7b 	bl	800ff54 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
 800e05e:	686b      	ldr	r3, [r5, #4]
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800e060:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800e064:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 800e066:	ed93 8a00 	vldr	s16, [r3]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800e06a:	6030      	str	r0, [r6, #0]
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800e06c:	ee80 0a08 	vdiv.f32	s0, s0, s16
    c->sampleRate = leaf->sampleRate;
 800e070:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->mempool = m;
 800e074:	6005      	str	r5, [r0, #0]
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800e076:	f007 f90f 	bl	8015298 <expf>
 800e07a:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 800e07e:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 800e082:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e086:	f007 f907 	bl	8015298 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 800e08a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 800e08e:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 800e090:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 800e094:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 800e096:	2200      	movs	r2, #0
    c->M = 3.0f; // decibel Make-up gain
 800e098:	490b      	ldr	r1, [pc, #44]	; (800e0c8 <tCompressor_init+0x7c>)
    c->isActive = 0;
 800e09a:	6462      	str	r2, [r4, #68]	; 0x44
    c->W = 1.5f; // decibel Width of knee transition
 800e09c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 800e0a0:	6263      	str	r3, [r4, #36]	; 0x24
 800e0a2:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
 800e0a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0a6:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
 800e0a8:	6363      	str	r3, [r4, #52]	; 0x34
 800e0aa:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
 800e0ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e0ae:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 800e0b0:	60e3      	str	r3, [r4, #12]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 800e0b2:	4b06      	ldr	r3, [pc, #24]	; (800e0cc <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 800e0b4:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 800e0b8:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 800e0ba:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 800e0bc:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 800e0be:	6223      	str	r3, [r4, #32]
}
 800e0c0:	ecbd 8b02 	vpop	{d8}
 800e0c4:	bd70      	pop	{r4, r5, r6, pc}
 800e0c6:	bf00      	nop
 800e0c8:	40400000 	.word	0x40400000
 800e0cc:	3e2aaaab 	.word	0x3e2aaaab

0800e0d0 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
 800e0d0:	b510      	push	{r4, lr}
 800e0d2:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 800e0d6:	6804      	ldr	r4, [r0, #0]
{
 800e0d8:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 800e0dc:	f001 fd64 	bl	800fba8 <fastabsf>
 800e0e0:	f001 fece 	bl	800fe80 <fasteratodb>
 800e0e4:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800e198 <tCompressor_tick+0xc8>
 800e0e8:	eef0 0a40 	vmov.f32	s1, s0
 800e0ec:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800e19c <tCompressor_tick+0xcc>
 800e0f0:	f001 fdf6 	bl	800fce0 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 800e0f4:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
 800e0f8:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 800e0fc:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
 800e100:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 800e104:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
 800e108:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 800e10c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e114:	db23      	blt.n	800e15e <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
 800e116:	2300      	movs	r3, #0
 800e118:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e198 <tCompressor_tick+0xc8>
 800e11c:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 800e11e:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 800e122:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 800e126:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
 800e12a:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 800e12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 800e132:	bf4c      	ite	mi
 800e134:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 800e138:	ed94 6a02 	vldrpl	s12, [r4, #8]
 800e13c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e140:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e144:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 800e148:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e14c:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800e150:	f001 feca 	bl	800fee8 <fasterdbtoa>
    return attenuation * in;
}
 800e154:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e158:	ecbd 8b02 	vpop	{d8}
 800e15c:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 800e15e:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
 800e162:	edd4 5a07 	vldr	s11, [r4, #28]
 800e166:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 800e16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 800e16e:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 800e172:	dd0c      	ble.n	800e18e <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 800e174:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
 800e178:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
 800e17c:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 800e17e:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
 800e182:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 800e184:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e188:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
 800e18c:	e7c7      	b.n	800e11e <tCompressor_tick+0x4e>
        c->isActive = 1;
 800e18e:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
 800e190:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
 800e194:	6463      	str	r3, [r4, #68]	; 0x44
 800e196:	e7c2      	b.n	800e11e <tCompressor_tick+0x4e>
 800e198:	00000000 	.word	0x00000000
 800e19c:	c2b40000 	.word	0xc2b40000

0800e1a0 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 800e1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 800e1a2:	699e      	ldr	r6, [r3, #24]
{
 800e1a4:	4614      	mov	r4, r2
 800e1a6:	4607      	mov	r7, r0
 800e1a8:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800e1aa:	2068      	movs	r0, #104	; 0x68
 800e1ac:	4631      	mov	r1, r6
{
 800e1ae:	ed2d 8b04 	vpush	{d8-d9}
 800e1b2:	eef0 9a40 	vmov.f32	s19, s0
 800e1b6:	eeb0 9a60 	vmov.f32	s18, s1
 800e1ba:	eef0 8a61 	vmov.f32	s17, s3
 800e1be:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800e1c2:	f001 fec7 	bl	800ff54 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e1c6:	ee07 4a90 	vmov	s15, r4
    LEAF* leaf = adsr->mempool->leaf;
 800e1ca:	6873      	ldr	r3, [r6, #4]
 800e1cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e1d0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800e260 <tADSRT_init+0xc0>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e1d4:	eef8 5a67 	vcvt.f32.u32	s11, s15
 800e1d8:	eddf 7a22 	vldr	s15, [pc, #136]	; 800e264 <tADSRT_init+0xc4>
    adsr->sampleRate = leaf->sampleRate;
 800e1dc:	ed93 5a00 	vldr	s10, [r3]
 800e1e0:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800e1e4:	6038      	str	r0, [r7, #0]
    adsr->mempool = m;
 800e1e6:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e1ea:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;

    adsr->baseLeakFactor = 1.0f;
    adsr->leakFactor = 1.0f;
    adsr->invSampleRate = leaf->invSampleRate;
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	fec8 1a87 	vmaxnm.f32	s3, s17, s14
 800e1f4:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
 800e1f8:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800e1fc:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e200:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->baseLeakFactor = 1.0f;
 800e204:	ed80 6a17 	vstr	s12, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
 800e208:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->sustain = sustain;
 800e20c:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
 800e210:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
 800e214:	2200      	movs	r2, #0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800e216:	1e61      	subs	r1, r4, #1
    adsr->sustain = sustain;
 800e218:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->mempool = m;
 800e21c:	6006      	str	r6, [r0, #0]
    adsr->exp_buff = expBuffer;
 800e21e:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 800e220:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800e222:	60c1      	str	r1, [r0, #12]
    adsr->whichStage = env_idle;
 800e224:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
 800e226:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->decay = decay;
 800e22a:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
 800e22e:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->invSampleRate = leaf->invSampleRate;
 800e232:	6643      	str	r3, [r0, #100]	; 0x64
}
 800e234:	ecbd 8b04 	vpop	{d8-d9}
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e238:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e23c:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e240:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e244:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800e248:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e24c:	ed80 5a0a 	vstr	s10, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800e250:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e254:	edc0 5a0b 	vstr	s11, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e258:	ed80 6a0c 	vstr	s12, [r0, #48]	; 0x30
}
 800e25c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e25e:	bf00      	nop
 800e260:	00000000 	.word	0x00000000
 800e264:	4479ffff 	.word	0x4479ffff

0800e268 <tADSRT_setAttack>:
    mpool_free((char*)adsr, adsr->mempool);
}

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;
 800e268:	6803      	ldr	r3, [r0, #0]

    if (attack < 0.0f)
 800e26a:	eddf 7a06 	vldr	s15, [pc, #24]	; 800e284 <tADSRT_setAttack+0x1c>
    {
        attack = 0.0f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e26e:	ed93 7a05 	vldr	s14, [r3, #20]
 800e272:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    adsr->attack = attack;
 800e276:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e27a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e27e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800e282:	4770      	bx	lr
 800e284:	00000000 	.word	0x00000000

0800e288 <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;
 800e288:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
 800e28a:	eddf 7a06 	vldr	s15, [pc, #24]	; 800e2a4 <tADSRT_setDecay+0x1c>
    {
        decay = 0.0f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e28e:	ed93 7a05 	vldr	s14, [r3, #20]
 800e292:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    adsr->decay = decay;
 800e296:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e29a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e29e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800e2a2:	4770      	bx	lr
 800e2a4:	00000000 	.word	0x00000000

0800e2a8 <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800e2a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
 800e2ac:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800e2ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b6:	dd02      	ble.n	800e2be <tADSRT_setSustain+0x16>
 800e2b8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 800e2bc:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 800e2be:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c8:	bf4c      	ite	mi
 800e2ca:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
 800e2cc:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
 800e2d0:	4770      	bx	lr
 800e2d2:	bf00      	nop

0800e2d4 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;
 800e2d4:	6803      	ldr	r3, [r0, #0]

    if (release < 0.0f)
 800e2d6:	eddf 7a06 	vldr	s15, [pc, #24]	; 800e2f0 <tADSRT_setRelease+0x1c>
    {
        release = 0.0f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e2da:	ed93 7a05 	vldr	s14, [r3, #20]
 800e2de:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    adsr->release = release;
 800e2e2:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e2e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e2ea:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800e2ee:	4770      	bx	lr
 800e2f0:	00000000 	.word	0x00000000

0800e2f4 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 800e2f4:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800e2f6:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800e2f8:	eddf 7a06 	vldr	s15, [pc, #24]	; 800e314 <tADSRT_setLeakFactor+0x20>
 800e2fc:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 800e300:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800e304:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e308:	f007 f966 	bl	80155d8 <powf>
 800e30c:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 800e310:	bd10      	pop	{r4, pc}
 800e312:	bf00      	nop
 800e314:	472c4400 	.word	0x472c4400

0800e318 <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 800e318:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 800e31a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e31c:	b162      	cbz	r2, 800e338 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 800e31e:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 800e320:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 800e322:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 800e324:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 800e326:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 800e328:	2200      	movs	r2, #0
 800e32a:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 800e32c:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 800e330:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 800e332:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 800e334:	655a      	str	r2, [r3, #84]	; 0x54
}
 800e336:	4770      	bx	lr
        adsr->whichStage = env_attack;
 800e338:	2101      	movs	r1, #1
 800e33a:	e7f5      	b.n	800e328 <tADSRT_on+0x10>

0800e33c <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 800e33c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 800e33e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e340:	b11a      	cbz	r2, 800e34a <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 800e342:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 800e344:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 800e346:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 800e348:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 800e34a:	4770      	bx	lr

0800e34c <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
 800e34c:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800e34e:	6804      	ldr	r4, [r0, #0]

    switch (adsr->whichStage)
 800e350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e352:	3b01      	subs	r3, #1
{
 800e354:	ed2d 8b02 	vpush	{d8}
    switch (adsr->whichStage)
 800e358:	2b04      	cmp	r3, #4
 800e35a:	f200 8148 	bhi.w	800e5ee <tADSRT_tick+0x2a2>
 800e35e:	e8df f003 	tbb	[pc, r3]
 800e362:	441f      	.short	0x441f
 800e364:	6339      	.short	0x6339
 800e366:	03          	.byte	0x03
 800e367:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800e368:	edd4 7a03 	vldr	s15, [r4, #12]
 800e36c:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 800e370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e374:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37c:	dd71      	ble.n	800e462 <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 800e37e:	eddf 7a9d 	vldr	s15, [pc, #628]	; 800e5f4 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
 800e382:	2301      	movs	r3, #1
 800e384:	eeb0 0a67 	vmov.f32	s0, s15
 800e388:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 800e38a:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 800e38e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800e392:	ee37 1a81 	vadd.f32	s2, s15, s2
 800e396:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800e39a:	ecbd 8b02 	vpop	{d8}
 800e39e:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800e3a0:	edd4 7a03 	vldr	s15, [r4, #12]
 800e3a4:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 800e3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3ac:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800e3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b4:	dd7f      	ble.n	800e4b6 <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
 800e3b6:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 800e3b8:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
 800e3bc:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
 800e3be:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 800e3c2:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800e3c6:	ee37 1a81 	vadd.f32	s2, s15, s2
}
 800e3ca:	ecbd 8b02 	vpop	{d8}
            adsr->attackPhase += adsr->attackInc;
 800e3ce:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
 800e3d2:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
 800e3d4:	ed94 0a06 	vldr	s0, [r4, #24]
 800e3d8:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 800e3dc:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800e3e0:	ecbd 8b02 	vpop	{d8}
            adsr->next = adsr->next * adsr->leakFactor;
 800e3e4:	ed84 0a06 	vstr	s0, [r4, #24]
}
 800e3e8:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800e3ea:	edd4 7a03 	vldr	s15, [r4, #12]
 800e3ee:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 800e3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3f6:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800e3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fe:	f340 8088 	ble.w	800e512 <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
 800e402:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 800e406:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
 800e408:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 800e40c:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 800e40e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e412:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 800e416:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800e41a:	ee37 1a81 	vadd.f32	s2, s15, s2
}
 800e41e:	ecbd 8b02 	vpop	{d8}
            adsr->decayPhase += adsr->decayInc;
 800e422:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
 800e426:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800e428:	edd4 7a03 	vldr	s15, [r4, #12]
 800e42c:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 800e430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e434:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800e438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43c:	f340 809e 	ble.w	800e57c <tADSRT_tick+0x230>
                adsr->next = 0.0f;
 800e440:	eddf 7a6c 	vldr	s15, [pc, #432]	; 800e5f4 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
 800e444:	2300      	movs	r3, #0
 800e446:	eeb0 0a67 	vmov.f32	s0, s15
 800e44a:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 800e44c:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 800e450:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800e454:	ee37 1a81 	vadd.f32	s2, s15, s2
}
 800e458:	ecbd 8b02 	vpop	{d8}
            adsr->releasePhase += adsr->releaseInc;
 800e45c:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
 800e460:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e462:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 800e466:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e46a:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
 800e46e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e472:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
 800e476:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47e:	f100 80b2 	bmi.w	800e5e6 <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e482:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e486:	6862      	ldr	r2, [r4, #4]
 800e488:	ee17 3a90 	vmov	r3, s15
 800e48c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e490:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 800e494:	ee16 3a90 	vmov	r3, s13
 800e498:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 800e49c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e4a0:	ed92 0a00 	vldr	s0, [r2]
 800e4a4:	f001 fc94 	bl	800fdd0 <LEAF_interpolation_linear>
 800e4a8:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 800e4ac:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 800e4b0:	ed84 0a06 	vstr	s0, [r4, #24]
 800e4b4:	e76b      	b.n	800e38e <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e4b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 800e4ba:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e4be:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
 800e4c2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e4c6:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
 800e4ca:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d2:	f100 8084 	bmi.w	800e5de <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 800e4d6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e4da:	6862      	ldr	r2, [r4, #4]
 800e4dc:	ee17 3a90 	vmov	r3, s15
 800e4e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4e4:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800e4e8:	ee16 3a90 	vmov	r3, s13
 800e4ec:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 800e4f0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e4f4:	ed92 0a00 	vldr	s0, [r2]
 800e4f8:	f001 fc6a 	bl	800fdd0 <LEAF_interpolation_linear>
 800e4fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 800e500:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800e504:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e508:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e50c:	ed84 0a06 	vstr	s0, [r4, #24]
 800e510:	e757      	b.n	800e3c2 <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 800e516:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e51a:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
 800e51e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e522:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
 800e526:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e52e:	d452      	bmi.n	800e5d6 <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 800e530:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e534:	6862      	ldr	r2, [r4, #4]
 800e536:	ee17 3a90 	vmov	r3, s15
 800e53a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e53e:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
 800e542:	ee16 3a90 	vmov	r3, s13
 800e546:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e54a:	ed92 0a00 	vldr	s0, [r2]
 800e54e:	f001 fc3f 	bl	800fdd0 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800e552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e556:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800e55a:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800e55e:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800e562:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
            adsr->decayPhase += adsr->decayInc;
 800e566:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800e56a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e56e:	eea6 7a80 	vfma.f32	s14, s13, s0
 800e572:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e576:	ed84 0a06 	vstr	s0, [r4, #24]
 800e57a:	e74c      	b.n	800e416 <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800e57c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 800e580:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800e584:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
 800e588:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800e58c:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
 800e590:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800e594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e598:	d419      	bmi.n	800e5ce <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 800e59a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e59e:	6862      	ldr	r2, [r4, #4]
 800e5a0:	ee17 3a90 	vmov	r3, s15
 800e5a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5a8:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 800e5ac:	ee16 3a90 	vmov	r3, s13
 800e5b0:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 800e5b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e5b8:	ed92 0a00 	vldr	s0, [r2]
 800e5bc:	f001 fc08 	bl	800fdd0 <LEAF_interpolation_linear>
 800e5c0:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 800e5c4:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 800e5c8:	ed84 0a06 	vstr	s0, [r4, #24]
 800e5cc:	e740      	b.n	800e450 <tADSRT_tick+0x104>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e5ce:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800e5d0:	eddf 0a08 	vldr	s1, [pc, #32]	; 800e5f4 <tADSRT_tick+0x2a8>
 800e5d4:	e7ea      	b.n	800e5ac <tADSRT_tick+0x260>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e5d6:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800e5d8:	eddf 0a06 	vldr	s1, [pc, #24]	; 800e5f4 <tADSRT_tick+0x2a8>
 800e5dc:	e7b1      	b.n	800e542 <tADSRT_tick+0x1f6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e5de:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800e5e0:	eddf 0a04 	vldr	s1, [pc, #16]	; 800e5f4 <tADSRT_tick+0x2a8>
 800e5e4:	e780      	b.n	800e4e8 <tADSRT_tick+0x19c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e5e6:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800e5e8:	eddf 0a02 	vldr	s1, [pc, #8]	; 800e5f4 <tADSRT_tick+0x2a8>
 800e5ec:	e752      	b.n	800e494 <tADSRT_tick+0x148>
    return adsr->next;
 800e5ee:	ed94 0a06 	vldr	s0, [r4, #24]
 800e5f2:	e6d2      	b.n	800e39a <tADSRT_tick+0x4e>
 800e5f4:	00000000 	.word	0x00000000

0800e5f8 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800e5f8:	b538      	push	{r3, r4, r5, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 800e5fa:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800e5fc:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e5fe:	201c      	movs	r0, #28
 800e600:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800e602:	ed2d 8b02 	vpush	{d8}
 800e606:	eef0 8a40 	vmov.f32	s17, s0
 800e60a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e60e:	f001 fca1 	bl	800ff54 <mpool_alloc>
 800e612:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e616:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800e64c <tExpSmooth_init+0x54>
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 800e61a:	6863      	ldr	r3, [r4, #4]
 800e61c:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
 800e620:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
 800e624:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 800e628:	685b      	ldr	r3, [r3, #4]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e62a:	6028      	str	r0, [r5, #0]
    smooth->curr = val;
 800e62c:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 800e630:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->mempool = m;
 800e634:	6004      	str	r4, [r0, #0]
    smooth->baseFactor = factor;
 800e636:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 800e63a:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 800e63e:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 800e642:	6183      	str	r3, [r0, #24]
}
 800e644:	ecbd 8b02 	vpop	{d8}
 800e648:	bd38      	pop	{r3, r4, r5, pc}
 800e64a:	bf00      	nop
 800e64c:	00000000 	.word	0x00000000

0800e650 <tExpSmooth_setDest>:
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
    smooth->dest=dest;
 800e650:	6803      	ldr	r3, [r0, #0]
 800e652:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800e656:	4770      	bx	lr

0800e658 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 800e658:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 800e65a:	edd3 6a04 	vldr	s13, [r3, #16]
 800e65e:	ed93 0a03 	vldr	s0, [r3, #12]
 800e662:	ed93 7a02 	vldr	s14, [r3, #8]
 800e666:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e66a:	edd3 7a05 	vldr	s15, [r3, #20]
 800e66e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800e672:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 800e676:	4770      	bx	lr

0800e678 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 800e678:	b538      	push	{r3, r4, r5, lr}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 800e67a:	698d      	ldr	r5, [r1, #24]
{
 800e67c:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800e67e:	201c      	movs	r0, #28
 800e680:	4629      	mov	r1, r5
{
 800e682:	ed2d 8b02 	vpush	{d8}
 800e686:	eef0 8a40 	vmov.f32	s17, s0
 800e68a:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800e68e:	f001 fc61 	bl	800ff54 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 800e692:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 800e696:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800e698:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800e69a:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 800e69c:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 800e6a0:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 800e6a4:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 800e6a8:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 800e6aa:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 800e6ac:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 800e6ae:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 800e6b0:	ee87 7aa0 	vdiv.f32	s14, s15, s1
}
 800e6b4:	ecbd 8b02 	vpop	{d8}
    s->invUpSlide = 1.0f / upSlide;
 800e6b8:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 800e6bc:	ed80 7a05 	vstr	s14, [r0, #20]
}
 800e6c0:	bd38      	pop	{r3, r4, r5, pc}
 800e6c2:	bf00      	nop

0800e6c4 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 800e6c4:	6803      	ldr	r3, [r0, #0]
{
 800e6c6:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 800e6ca:	edd3 7a01 	vldr	s15, [r3, #4]
 800e6ce:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800e6d2:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 800e6d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800e6da:	bf94      	ite	ls
 800e6dc:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800e6e0:	edd3 6a05 	vldrhi	s13, [r3, #20]
 800e6e4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e6e8:	eeb0 0a67 	vmov.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800e6ec:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800e720 <tSlide_tick+0x5c>
 800e6f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f8:	d406      	bmi.n	800e708 <tSlide_tick+0x44>
 800e6fa:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
 800e6fe:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
 800e702:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 800e706:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800e708:	eddf 7a06 	vldr	s15, [pc, #24]	; 800e724 <tSlide_tick+0x60>
    s->prevIn = in;
 800e70c:	ed83 7a03 	vstr	s14, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800e710:	eeb0 0a67 	vmov.f32	s0, s15
 800e714:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 800e718:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop
 800e720:	006ce3ee 	.word	0x006ce3ee
 800e724:	00000000 	.word	0x00000000

0800e728 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
 800e728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 800e72a:	6997      	ldr	r7, [r2, #24]
{
 800e72c:	4606      	mov	r6, r0
 800e72e:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800e730:	2044      	movs	r0, #68	; 0x44
 800e732:	4639      	mov	r1, r7
{
 800e734:	ed2d 8b02 	vpush	{d8}
 800e738:	eef0 8a40 	vmov.f32	s17, s0
 800e73c:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800e740:	f001 fc08 	bl	800ff54 <mpool_alloc>
    
    svf->ic1eq = 0;
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800e744:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800e800 <tSVF_init+0xd8>
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800e748:	4604      	mov	r4, r0
    LEAF* leaf = svf->mempool->leaf;
 800e74a:	687b      	ldr	r3, [r7, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800e74c:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->invSampleRate = leaf->invSampleRate;
 800e750:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->sampleRate = leaf->sampleRate;
 800e754:	681b      	ldr	r3, [r3, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800e756:	6030      	str	r0, [r6, #0]
    svf->ic1eq = 0;
 800e758:	2600      	movs	r6, #0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800e75a:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 800e75e:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->mempool = m;
 800e762:	6007      	str	r7, [r0, #0]
    svf->sampleRate = leaf->sampleRate;
 800e764:	63c3      	str	r3, [r0, #60]	; 0x3c
    svf->type = type;
 800e766:	7105      	strb	r5, [r0, #4]
    svf->ic1eq = 0;
 800e768:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
 800e76a:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
 800e76c:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 800e770:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800e774:	f007 f890 	bl	8015898 <tanf>
    svf->k = 1.0f/Q;
 800e778:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800e77c:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 800e780:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
 800e782:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
 800e784:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
 800e788:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
 800e78a:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
 800e78c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e790:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
 800e794:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e798:	eeb0 7a67 	vmov.f32	s14, s15
 800e79c:	eea0 7a26 	vfma.f32	s14, s0, s13
 800e7a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
 800e7a4:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e7a8:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 800e7ac:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
 800e7b0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 800e7b4:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
 800e7b8:	d007      	beq.n	800e7ca <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 800e7ba:	2d02      	cmp	r5, #2
 800e7bc:	d008      	beq.n	800e7d0 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
 800e7be:	b96d      	cbnz	r5, 800e7dc <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 800e7c0:	4b10      	ldr	r3, [pc, #64]	; (800e804 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 800e7c2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 800e7c6:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 800e7c8:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e7ca:	ecbd 8b02 	vpop	{d8}
 800e7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7d0:	ecbd 8b02 	vpop	{d8}
        svf->cB = 1.0f;
 800e7d4:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
 800e7d8:	6366      	str	r6, [r4, #52]	; 0x34
}
 800e7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
 800e7dc:	2d03      	cmp	r5, #3
 800e7de:	d009      	beq.n	800e7f4 <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
 800e7e0:	2d04      	cmp	r5, #4
 800e7e2:	d1f2      	bne.n	800e7ca <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 800e7e4:	4a07      	ldr	r2, [pc, #28]	; (800e804 <tSVF_init+0xdc>)
        svf->cL = -2.0f;
 800e7e6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 800e7ea:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 800e7ee:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 800e7f0:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e7f2:	e7ea      	b.n	800e7ca <tSVF_init+0xa2>
        svf->cBK = -1.0f;
 800e7f4:	4b03      	ldr	r3, [pc, #12]	; (800e804 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 800e7f6:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
 800e7fa:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
 800e7fc:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 800e7fe:	e7e4      	b.n	800e7ca <tSVF_init+0xa2>
 800e800:	40490fdb 	.word	0x40490fdb
 800e804:	bf800000 	.word	0xbf800000

0800e808 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 800e808:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800e80a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 800e80e:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800e812:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800e816:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800e81a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 800e81e:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800e822:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
 800e826:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
 800e82a:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800e82e:	edd3 2a08 	vldr	s5, [r3, #32]
 800e832:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e836:	ed93 2a07 	vldr	s4, [r3, #28]
 800e83a:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800e83e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800e842:	eea2 5a23 	vfma.f32	s10, s4, s7
 800e846:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800e84a:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800e84e:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800e852:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800e856:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800e85a:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 800e85e:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800e862:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800e866:	edc3 6a05 	vstr	s13, [r3, #20]
}
 800e86a:	eea3 7a80 	vfma.f32	s14, s7, s0
 800e86e:	eeb0 0a47 	vmov.f32	s0, s14
 800e872:	4770      	bx	lr

0800e874 <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
 800e874:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800e878:	4a18      	ldr	r2, [pc, #96]	; (800e8dc <tSVF_setFreqFast+0x68>)
 800e87a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
 800e87e:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
 800e880:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e884:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800e888:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
 800e88c:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800e890:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
 800e894:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800e898:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
 800e89c:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800e8a0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800e8a4:	ed90 6a00 	vldr	s12, [r0]
 800e8a8:	ee20 0a25 	vmul.f32	s0, s0, s11
 800e8ac:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e8b0:	eef0 6a67 	vmov.f32	s13, s15
 800e8b4:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800e8b8:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e8bc:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e8c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
 800e8c4:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e8c8:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 800e8cc:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 800e8d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 800e8d4:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 800e8d8:	4770      	bx	lr
 800e8da:	bf00      	nop
 800e8dc:	08017744 	.word	0x08017744

0800e8e0 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 800e8e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 800e8e4:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e8e6:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 800e8ea:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 800e8ee:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e8f2:	eeb0 6a47 	vmov.f32	s12, s14
 800e8f6:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 800e8fa:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e8fe:	eea7 6aa5 	vfma.f32	s12, s15, s11
 800e902:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 800e906:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800e90a:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 800e90e:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 800e912:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 800e916:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 800e91a:	4770      	bx	lr

0800e91c <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 800e91c:	b538      	push	{r3, r4, r5, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 800e91e:	698c      	ldr	r4, [r1, #24]
{
 800e920:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800e922:	2018      	movs	r0, #24
 800e924:	4621      	mov	r1, r4
{
 800e926:	ed2d 8b02 	vpush	{d8}
 800e92a:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800e92e:	f001 fb85 	bl	801003c <mpool_calloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800e932:	6862      	ldr	r2, [r4, #4]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800e934:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->ys = 0.0f;
 800e938:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800e93a:	ed92 7a03 	vldr	s14, [r2, #12]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800e93e:	6028      	str	r0, [r5, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800e940:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
    
    f->frequency = freq;
 800e944:	ed80 8a04 	vstr	s16, [r0, #16]
    f->mempool = m;
 800e948:	6004      	str	r4, [r0, #0]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800e94a:	ed80 7a05 	vstr	s14, [r0, #20]
    f->ys = 0.0f;
 800e94e:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 800e950:	6043      	str	r3, [r0, #4]
}
 800e952:	ecbd 8b02 	vpop	{d8}
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800e956:	edc0 7a03 	vstr	s15, [r0, #12]
}
 800e95a:	bd38      	pop	{r3, r4, r5, pc}

0800e95c <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 800e95c:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 800e95e:	edd3 7a01 	vldr	s15, [r3, #4]
 800e962:	ed93 7a02 	vldr	s14, [r3, #8]
 800e966:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 800e96a:	ed83 0a01 	vstr	s0, [r3, #4]
 800e96e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 800e972:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e976:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 800e97a:	4770      	bx	lr

0800e97c <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 800e97c:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800e97e:	edd3 6a03 	vldr	s13, [r3, #12]
 800e982:	ed93 7a02 	vldr	s14, [r3, #8]
 800e986:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e98a:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 800e98e:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 800e992:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800e996:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800e99a:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 800e99e:	edd3 4a08 	vldr	s9, [r3, #32]
 800e9a2:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800e9a6:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 800e9aa:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800e9ae:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 800e9b2:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 800e9b6:	eeb0 5a47 	vmov.f32	s10, s14
 800e9ba:	eea4 0a87 	vfma.f32	s0, s9, s14
 800e9be:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 800e9c2:	eef0 7a66 	vmov.f32	s15, s13
}
 800e9c6:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 800e9ca:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 800e9ce:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 800e9d2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800e9d6:	4770      	bx	lr

0800e9d8 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 800e9d8:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 800e9da:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800e9dc:	eddf 7a98 	vldr	s15, [pc, #608]	; 800ec40 <tVZFilter_calcCoeffs+0x268>
 800e9e0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
{
 800e9e4:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800e9e8:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 800e9ec:	ee68 8a87 	vmul.f32	s17, s17, s14
 800e9f0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800e9f4:	eeb0 0a68 	vmov.f32	s0, s17
 800e9f8:	f006 ff4e 	bl	8015898 <tanf>
    
    switch( f->type )
 800e9fc:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800e9fe:	eeb0 8a40 	vmov.f32	s16, s0
 800ea02:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 800ea06:	2b0a      	cmp	r3, #10
 800ea08:	f200 8117 	bhi.w	800ec3a <tVZFilter_calcCoeffs+0x262>
 800ea0c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ea10:	002f0026 	.word	0x002f0026
 800ea14:	00410038 	.word	0x00410038
 800ea18:	0056004d 	.word	0x0056004d
 800ea1c:	00a1008b 	.word	0x00a1008b
 800ea20:	010a00b7 	.word	0x010a00b7
 800ea24:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800ea26:	edd4 7a05 	vldr	s15, [r4, #20]
 800ea2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ea2e:	eeb1 7a67 	vneg.f32	s14, s15
 800ea32:	61e3      	str	r3, [r4, #28]
 800ea34:	6263      	str	r3, [r4, #36]	; 0x24
 800ea36:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800ea3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 800ea3e:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800ea42:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 800ea46:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800ea4a:	eee7 6a88 	vfma.f32	s13, s15, s16
}
 800ea4e:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800ea52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea56:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800ea5a:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800ea62:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800ea66:	61e3      	str	r3, [r4, #28]
 800ea68:	6223      	str	r3, [r4, #32]
 800ea6a:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 800ea6c:	e7e5      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800ea74:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800ea78:	6223      	str	r3, [r4, #32]
 800ea7a:	6263      	str	r3, [r4, #36]	; 0x24
 800ea7c:	61e2      	str	r2, [r4, #28]
            break;
 800ea7e:	e7dc      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800ea80:	2300      	movs	r3, #0
 800ea82:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800ea86:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800ea8a:	61e3      	str	r3, [r4, #28]
 800ea8c:	6263      	str	r3, [r4, #36]	; 0x24
 800ea8e:	6222      	str	r2, [r4, #32]
            break;
 800ea90:	e7d3      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800ea92:	edd4 7a05 	vldr	s15, [r4, #20]
 800ea96:	2300      	movs	r3, #0
 800ea98:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800ea9c:	61e3      	str	r3, [r4, #28]
 800ea9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eaa2:	6263      	str	r3, [r4, #36]	; 0x24
 800eaa4:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 800eaa8:	e7c7      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800eaaa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800eaae:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 800eab0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800eab4:	6222      	str	r2, [r4, #32]
 800eab6:	61e3      	str	r3, [r4, #28]
 800eab8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800eaba:	e7be      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800eabc:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800eac0:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800eac4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800eac8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800eacc:	f006 fd84 	bl	80155d8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800ead0:	ee28 0a80 	vmul.f32	s0, s17, s0
 800ead4:	f006 fee0 	bl	8015898 <tanf>
            float r  = f->g/wl;
 800ead8:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800eadc:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 800eae0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eae4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800eae8:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800eaec:	ed84 7a07 	vstr	s14, [r4, #28]
 800eaf0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800eaf4:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800eaf8:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800eafc:	eef0 6a47 	vmov.f32	s13, s14
 800eb00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800eb04:	ee77 7a45 	vsub.f32	s15, s14, s10
 800eb08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800eb0c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800eb10:	eef1 7ac7 	vsqrt.f32	s15, s14
 800eb14:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800eb18:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800eb1c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800eb20:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 800eb24:	e789      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 800eb26:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800eb2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800eb2e:	edd4 7a05 	vldr	s15, [r4, #20]
 800eb32:	eef1 6ac7 	vsqrt.f32	s13, s14
 800eb36:	ed84 7a07 	vstr	s14, [r4, #28]
 800eb3a:	6263      	str	r3, [r4, #36]	; 0x24
 800eb3c:	ee27 6a27 	vmul.f32	s12, s14, s15
 800eb40:	ed84 6a08 	vstr	s12, [r4, #32]
 800eb44:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800eb48:	ee80 8a07 	vdiv.f32	s16, s0, s14
 800eb4c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 800eb50:	e773      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 800eb52:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800eb56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800eb5a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800eb5e:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800eb62:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 800eb66:	61e3      	str	r3, [r4, #28]
 800eb68:	ee27 6a27 	vmul.f32	s12, s14, s15
 800eb6c:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800eb70:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800eb74:	ee20 8a07 	vmul.f32	s16, s0, s14
 800eb78:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 800eb7c:	e75d      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 800eb7e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800eb82:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800eb86:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800eb8a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800ec44 <tVZFilter_calcCoeffs+0x26c>
 800eb8e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 800eb92:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800eb96:	eeb0 0a48 	vmov.f32	s0, s16
 800eb9a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800eb9e:	f001 f9bd 	bl	800ff1c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800eba2:	eddf 0a28 	vldr	s1, [pc, #160]	; 800ec44 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800eba6:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800ebaa:	eeb0 0a68 	vmov.f32	s0, s17
 800ebae:	f001 f9b9 	bl	800ff24 <minimum>
            f->cB = 1.0f-x*x;
 800ebb2:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800ebb6:	edd4 7a05 	vldr	s15, [r4, #20]
 800ebba:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 800ebbe:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800ebc2:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800ebc6:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800ebca:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800ebce:	ee76 5a06 	vadd.f32	s11, s12, s12
 800ebd2:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 800ebd6:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800ebda:	eee6 7a06 	vfma.f32	s15, s12, s12
 800ebde:	eee0 7a00 	vfma.f32	s15, s0, s0
 800ebe2:	eee0 7a65 	vfms.f32	s15, s0, s11
 800ebe6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800ebea:	f000 ffbb 	bl	800fb64 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 800ebee:	edd4 5a07 	vldr	s11, [r4, #28]
 800ebf2:	ed94 6a08 	vldr	s12, [r4, #32]
 800ebf6:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 800ebfa:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800ebfe:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 800ec02:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800ec06:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800ec0a:	ee65 5a80 	vmul.f32	s11, s11, s0
 800ec0e:	ee26 6a00 	vmul.f32	s12, s12, s0
 800ec12:	ee26 0a80 	vmul.f32	s0, s13, s0
 800ec16:	edc4 5a07 	vstr	s11, [r4, #28]
 800ec1a:	ed84 6a08 	vstr	s12, [r4, #32]
 800ec1e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 800ec22:	e70a      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 800ec24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800ec28:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 800ec2c:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 800ec2e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 800ec32:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 800ec36:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800ec38:	e6ff      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 800ec3a:	edd4 7a05 	vldr	s15, [r4, #20]
 800ec3e:	e6fc      	b.n	800ea3a <tVZFilter_calcCoeffs+0x62>
 800ec40:	40490fdb 	.word	0x40490fdb
 800ec44:	00000000 	.word	0x00000000

0800ec48 <tVZFilter_initToPool>:
{
 800ec48:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 800ec4a:	6817      	ldr	r7, [r2, #0]
{
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800ec50:	204c      	movs	r0, #76	; 0x4c
 800ec52:	4639      	mov	r1, r7
{
 800ec54:	ed2d 8b04 	vpush	{d8-d9}
 800ec58:	b083      	sub	sp, #12
 800ec5a:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ec5e:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800ec62:	ed9f 8a43 	vldr	s16, [pc, #268]	; 800ed70 <tVZFilter_initToPool+0x128>
{
 800ec66:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800ec6a:	f001 f973 	bl	800ff54 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
 800ec6e:	687b      	ldr	r3, [r7, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800ec70:	4604      	mov	r4, r0
 800ec72:	6028      	str	r0, [r5, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ec74:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 800ec78:	edd3 7a00 	vldr	s15, [r3]
    f->invSampleRate = leaf->invSampleRate;
 800ec7c:	685b      	ldr	r3, [r3, #4]
    f->mempool = m;
 800ec7e:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ec80:	ee27 1aa9 	vmul.f32	s2, s15, s19
    f->sampleRate = leaf->sampleRate;
 800ec84:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    f->invSampleRate = leaf->invSampleRate;
 800ec88:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ec8a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ec8e:	f001 f827 	bl	800fce0 <LEAF_clip>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800ec92:	ed9f 9a38 	vldr	s18, [pc, #224]	; 800ed74 <tVZFilter_initToPool+0x12c>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800ec96:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ed78 <tVZFilter_initToPool+0x130>
    f->R2Plusg = f->R2 + f->g;
 800ec9a:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800ec9e:	ee20 6a09 	vmul.f32	s12, s0, s18
 800eca2:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 800eca6:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 800ecaa:	4b34      	ldr	r3, [pc, #208]	; (800ed7c <tVZFilter_initToPool+0x134>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800ecac:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 800ecb0:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 800ecb2:	ed84 7a05 	vstr	s14, [r4, #20]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ecb6:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800ecba:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 800ecbe:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 800ecc0:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 800ecc4:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 800ecc8:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 800eccc:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 800ecd0:	ed84 8a03 	vstr	s16, [r4, #12]
    f->R2Plusg = f->R2 + f->g;
 800ecd4:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800ecd8:	f006 fdde 	bl	8015898 <tanf>
 800ecdc:	eef0 7a40 	vmov.f32	s15, s0
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800ece0:	ed9f 1a27 	vldr	s2, [pc, #156]	; 800ed80 <tVZFilter_initToPool+0x138>
 800ece4:	eef0 0a68 	vmov.f32	s1, s17
 800ece8:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 800ecec:	682e      	ldr	r6, [r5, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800ecee:	edc4 7a04 	vstr	s15, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800ecf2:	f000 fff5 	bl	800fce0 <LEAF_clip>
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800ecf6:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800ecfa:	eef0 7a40 	vmov.f32	s15, s0
    _tVZFilter* f = *vf;
 800ecfe:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800ed00:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ed04:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800ed08:	edc6 7a0e 	vstr	s15, [r6, #56]	; 0x38
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800ed0c:	f006 fc64 	bl	80155d8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800ed10:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 800ed14:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800ed18:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed1c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ed20:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ed24:	f006 fdb8 	bl	8015898 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800ed28:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800ed2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 800ed30:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800ed32:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800ed36:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800ed3a:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ed3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ed46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ed4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ed4e:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800ed52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ed56:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 800ed5a:	f7ff fe3d 	bl	800e9d8 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 800ed5e:	4628      	mov	r0, r5
}
 800ed60:	b003      	add	sp, #12
 800ed62:	ecbd 8b04 	vpop	{d8-d9}
 800ed66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 800ed6a:	f7ff be35 	b.w	800e9d8 <tVZFilter_calcCoeffs>
 800ed6e:	bf00      	nop
 800ed70:	00000000 	.word	0x00000000
 800ed74:	40490fdb 	.word	0x40490fdb
 800ed78:	3fb504f3 	.word	0x3fb504f3
 800ed7c:	3f3504f3 	.word	0x3f3504f3
 800ed80:	42c80000 	.word	0x42c80000

0800ed84 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 800ed84:	3218      	adds	r2, #24
 800ed86:	f7ff bf5f 	b.w	800ec48 <tVZFilter_initToPool>
 800ed8a:	bf00      	nop

0800ed8c <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
 800ed8c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800ed90:	4baa      	ldr	r3, [pc, #680]	; (800f03c <tVZFilter_setFreqFast+0x2b0>)
 800ed92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
 800ed96:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800ed9a:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
 800ed9e:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800eda2:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 800eda6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800edaa:	ed91 6a01 	vldr	s12, [r1, #4]
{
 800edae:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
 800edb0:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
 800edb4:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800edb6:	ee37 7a26 	vadd.f32	s14, s14, s13
 800edba:	edd1 6a00 	vldr	s13, [r1]
 800edbe:	ee67 7a86 	vmul.f32	s15, s15, s12
{
 800edc2:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800edc6:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
 800edca:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800edcc:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 800edd0:	2a0a      	cmp	r2, #10
 800edd2:	f200 812f 	bhi.w	800f034 <tVZFilter_setFreqFast+0x2a8>
 800edd6:	e8df f012 	tbh	[pc, r2, lsl #1]
 800edda:	0026      	.short	0x0026
 800eddc:	0038002f 	.word	0x0038002f
 800ede0:	004d0041 	.word	0x004d0041
 800ede4:	009b0056 	.word	0x009b0056
 800ede8:	00cf00b5 	.word	0x00cf00b5
 800edec:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800edf0:	ed94 7a05 	vldr	s14, [r4, #20]
 800edf4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800edf8:	eef1 6a47 	vneg.f32	s13, s14
 800edfc:	61e3      	str	r3, [r4, #28]
 800edfe:	6263      	str	r3, [r4, #36]	; 0x24
 800ee00:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 800ee04:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800ee08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
}
 800ee0c:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800ee10:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 800ee14:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800ee18:	eee0 6a27 	vfma.f32	s13, s0, s15
 800ee1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ee20:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800ee24:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800ee26:	2300      	movs	r3, #0
 800ee28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800ee2c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800ee30:	61e3      	str	r3, [r4, #28]
 800ee32:	6223      	str	r3, [r4, #32]
 800ee34:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 800ee36:	e7e5      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800ee3e:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800ee42:	6223      	str	r3, [r4, #32]
 800ee44:	6263      	str	r3, [r4, #36]	; 0x24
 800ee46:	61e2      	str	r2, [r4, #28]
            break;
 800ee48:	e7dc      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800ee50:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800ee54:	61e3      	str	r3, [r4, #28]
 800ee56:	6263      	str	r3, [r4, #36]	; 0x24
 800ee58:	6222      	str	r2, [r4, #32]
            break;
 800ee5a:	e7d3      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800ee5c:	ed94 7a05 	vldr	s14, [r4, #20]
 800ee60:	2300      	movs	r3, #0
 800ee62:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800ee66:	61e3      	str	r3, [r4, #28]
 800ee68:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ee6c:	6263      	str	r3, [r4, #36]	; 0x24
 800ee6e:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 800ee72:	e7c7      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800ee74:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ee78:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 800ee7a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800ee7e:	6222      	str	r2, [r4, #32]
 800ee80:	61e3      	str	r3, [r4, #28]
 800ee82:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800ee84:	e7be      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800ee86:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800ee8a:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800ee8e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800ee92:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800ee96:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800ee9a:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ee9e:	f000 fea5 	bl	800fbec <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800eea2:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 800eea6:	eddf 7a66 	vldr	s15, [pc, #408]	; 800f040 <tVZFilter_setFreqFast+0x2b4>
 800eeaa:	ee28 8a07 	vmul.f32	s16, s16, s14
 800eeae:	ee28 8a27 	vmul.f32	s16, s16, s15
 800eeb2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800eeb6:	f000 fe41 	bl	800fb3c <fastertanf>
            float r  = f->g/wl;
 800eeba:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800eebe:	eeb0 5a68 	vmov.f32	s10, s17
 800eec2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
 800eec6:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800eeca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800eece:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800eed2:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800eed6:	eea7 5aa7 	vfma.f32	s10, s15, s15
 800eeda:	ee85 7a27 	vdiv.f32	s14, s10, s15
 800eede:	ee77 7a65 	vsub.f32	s15, s14, s11
 800eee2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800eee6:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 800eeea:	f000 fe3b 	bl	800fb64 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800eeee:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 800eef2:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800eef6:	edc4 8a07 	vstr	s17, [r4, #28]
 800eefa:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800eefe:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800ef02:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800ef06:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800ef0a:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 800ef0e:	e779      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 800ef10:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800ef14:	f000 fe26 	bl	800fb64 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800ef18:	f000 fe24 	bl	800fb64 <fastsqrtf>
 800ef1c:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800ef20:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800ef24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800ef28:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800ef2c:	ed94 7a05 	vldr	s14, [r4, #20]
 800ef30:	edc4 6a07 	vstr	s13, [r4, #28]
 800ef34:	6263      	str	r3, [r4, #36]	; 0x24
 800ef36:	ee66 6a87 	vmul.f32	s13, s13, s14
 800ef3a:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800ef3e:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 800ef42:	e75f      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 800ef44:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800ef48:	f000 fe0c 	bl	800fb64 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800ef4c:	f000 fe0a 	bl	800fb64 <fastsqrtf>
 800ef50:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800ef54:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800ef58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ef5c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800ef60:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800ef64:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 800ef68:	ee67 6a26 	vmul.f32	s13, s14, s13
 800ef6c:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800ef6e:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800ef72:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 800ef76:	e745      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
 800ef78:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ef7c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800ef80:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800ef84:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800f044 <tVZFilter_setFreqFast+0x2b8>
 800ef88:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 800ef8c:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800ef90:	eeb0 0a48 	vmov.f32	s0, s16
 800ef94:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ef98:	f000 ffc0 	bl	800ff1c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800ef9c:	eddf 0a29 	vldr	s1, [pc, #164]	; 800f044 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800efa0:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800efa4:	eeb0 0a68 	vmov.f32	s0, s17
 800efa8:	f000 ffbc 	bl	800ff24 <minimum>
            f->cB = 1.0f-x*x;
 800efac:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800efb0:	edd4 7a05 	vldr	s15, [r4, #20]
 800efb4:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 800efb8:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800efbc:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800efc0:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800efc4:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800efc8:	ee76 5a06 	vadd.f32	s11, s12, s12
 800efcc:	ee38 8a08 	vadd.f32	s16, s16, s16
 800efd0:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 800efd4:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800efd8:	eee6 7a06 	vfma.f32	s15, s12, s12
 800efdc:	eee0 7a00 	vfma.f32	s15, s0, s0
 800efe0:	eee0 7a65 	vfms.f32	s15, s0, s11
 800efe4:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800efe8:	f000 fdbc 	bl	800fb64 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 800efec:	edd4 5a07 	vldr	s11, [r4, #28]
 800eff0:	ed94 6a08 	vldr	s12, [r4, #32]
 800eff4:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 800eff8:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800effc:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 800f000:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 800f004:	ee65 5a80 	vmul.f32	s11, s11, s0
 800f008:	ee26 6a00 	vmul.f32	s12, s12, s0
 800f00c:	ee26 0a80 	vmul.f32	s0, s13, s0
 800f010:	edc4 5a07 	vstr	s11, [r4, #28]
 800f014:	ed84 6a08 	vstr	s12, [r4, #32]
 800f018:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 800f01c:	e6f2      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
 800f01e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800f022:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 800f026:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 800f028:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 800f02c:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 800f030:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f032:	e6e7      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
 800f034:	ed94 7a05 	vldr	s14, [r4, #20]
 800f038:	e6e4      	b.n	800ee04 <tVZFilter_setFreqFast+0x78>
 800f03a:	bf00      	nop
 800f03c:	08017744 	.word	0x08017744
 800f040:	40490fdb 	.word	0x40490fdb
 800f044:	00000000 	.word	0x00000000

0800f048 <tVZFilter_setGain>:
{
 800f048:	b538      	push	{r3, r4, r5, lr}
 800f04a:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800f04e:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800f078 <tVZFilter_setGain+0x30>
 800f052:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800f07c <tVZFilter_setGain+0x34>
{
 800f056:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 800f058:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800f05a:	f000 fe41 	bl	800fce0 <LEAF_clip>
    f->invG = 1.0f/f->G;
 800f05e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 800f062:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800f064:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 800f068:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f06c:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 800f070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 800f074:	f7ff bcb0 	b.w	800e9d8 <tVZFilter_calcCoeffs>
 800f078:	457a0000 	.word	0x457a0000
 800f07c:	358637bd 	.word	0x358637bd

0800f080 <tVZFilter_setResonance>:
{
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800f086:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800f0b0 <tVZFilter_setResonance+0x30>
 800f08a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800f0b4 <tVZFilter_setResonance+0x34>
{
 800f08e:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 800f090:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800f092:	f000 fe25 	bl	800fce0 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 800f096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 800f09a:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800f09c:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 800f0a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f0a4:	edc5 7a05 	vstr	s15, [r5, #20]
}
 800f0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 800f0ac:	f7ff bc94 	b.w	800e9d8 <tVZFilter_calcCoeffs>
 800f0b0:	42c80000 	.word	0x42c80000
 800f0b4:	3c23d70a 	.word	0x3c23d70a

0800f0b8 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 800f0b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
{
 800f0bc:	b510      	push	{r4, lr}
    f->invSampleRate = 1.0f/f->sampleRate;
 800f0be:	eec7 7a00 	vdiv.f32	s15, s14, s0
    _tVZFilter* f = *vf;
 800f0c2:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f0c4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
{
 800f0c8:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f0cc:	eddf 8a97 	vldr	s17, [pc, #604]	; 800f32c <tVZFilter_setSampleRate+0x274>
    f->sampleRate = sr;
 800f0d0:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f0d4:	ee67 8aa8 	vmul.f32	s17, s15, s17
    f->invSampleRate = 1.0f/f->sampleRate;
 800f0d8:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f0dc:	ee68 8a87 	vmul.f32	s17, s17, s14
 800f0e0:	eeb0 0a68 	vmov.f32	s0, s17
 800f0e4:	f006 fbd8 	bl	8015898 <tanf>
    switch( f->type )
 800f0e8:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f0ea:	eeb0 8a40 	vmov.f32	s16, s0
 800f0ee:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 800f0f2:	2b0a      	cmp	r3, #10
 800f0f4:	f200 8117 	bhi.w	800f326 <tVZFilter_setSampleRate+0x26e>
 800f0f8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f0fc:	002f0026 	.word	0x002f0026
 800f100:	00410038 	.word	0x00410038
 800f104:	0056004d 	.word	0x0056004d
 800f108:	00a1008b 	.word	0x00a1008b
 800f10c:	010a00b7 	.word	0x010a00b7
 800f110:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800f112:	edd4 7a05 	vldr	s15, [r4, #20]
 800f116:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f11a:	eeb1 7a67 	vneg.f32	s14, s15
 800f11e:	61e3      	str	r3, [r4, #28]
 800f120:	6263      	str	r3, [r4, #36]	; 0x24
 800f122:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 800f12a:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f12e:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 800f132:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f136:	eee7 6a88 	vfma.f32	s13, s15, s16
    tVZFilter_calcCoeffs(vf);
}
 800f13a:	ecbd 8b02 	vpop	{d8}
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f13e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f142:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800f146:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f148:	2300      	movs	r3, #0
 800f14a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800f14e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f152:	61e3      	str	r3, [r4, #28]
 800f154:	6223      	str	r3, [r4, #32]
 800f156:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 800f158:	e7e5      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800f15a:	2300      	movs	r3, #0
 800f15c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800f160:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800f164:	6223      	str	r3, [r4, #32]
 800f166:	6263      	str	r3, [r4, #36]	; 0x24
 800f168:	61e2      	str	r2, [r4, #28]
            break;
 800f16a:	e7dc      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800f16c:	2300      	movs	r3, #0
 800f16e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 800f172:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800f176:	61e3      	str	r3, [r4, #28]
 800f178:	6263      	str	r3, [r4, #36]	; 0x24
 800f17a:	6222      	str	r2, [r4, #32]
            break;
 800f17c:	e7d3      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f17e:	edd4 7a05 	vldr	s15, [r4, #20]
 800f182:	2300      	movs	r3, #0
 800f184:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800f188:	61e3      	str	r3, [r4, #28]
 800f18a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f18e:	6263      	str	r3, [r4, #36]	; 0x24
 800f190:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 800f194:	e7c7      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f196:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f19a:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 800f19c:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f1a0:	6222      	str	r2, [r4, #32]
 800f1a2:	61e3      	str	r3, [r4, #28]
 800f1a4:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f1a6:	e7be      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800f1a8:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800f1ac:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800f1b0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800f1b4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f1b8:	f006 fa0e 	bl	80155d8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800f1bc:	ee28 0a80 	vmul.f32	s0, s17, s0
 800f1c0:	f006 fb6a 	bl	8015898 <tanf>
            float r  = f->g/wl;
 800f1c4:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f1c8:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 800f1cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f1d0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800f1d4:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f1d8:	ed84 7a07 	vstr	s14, [r4, #28]
 800f1dc:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800f1e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f1e4:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f1e8:	eef0 6a47 	vmov.f32	s13, s14
 800f1ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f1f0:	ee77 7a45 	vsub.f32	s15, s14, s10
 800f1f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f1f8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800f1fc:	eef1 7ac7 	vsqrt.f32	s15, s14
 800f200:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f204:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f208:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f20c:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 800f210:	e789      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
            float A = sqrtf(f->G);
 800f212:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f216:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f21a:	edd4 7a05 	vldr	s15, [r4, #20]
 800f21e:	eef1 6ac7 	vsqrt.f32	s13, s14
 800f222:	ed84 7a07 	vstr	s14, [r4, #28]
 800f226:	6263      	str	r3, [r4, #36]	; 0x24
 800f228:	ee27 6a27 	vmul.f32	s12, s14, s15
 800f22c:	ed84 6a08 	vstr	s12, [r4, #32]
 800f230:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f234:	ee80 8a07 	vdiv.f32	s16, s0, s14
 800f238:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 800f23c:	e773      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
            float A = sqrtf(f->G);
 800f23e:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f242:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f246:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f24a:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f24e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 800f252:	61e3      	str	r3, [r4, #28]
 800f254:	ee27 6a27 	vmul.f32	s12, s14, s15
 800f258:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f25c:	eeb1 7ae6 	vsqrt.f32	s14, s13
 800f260:	ee20 8a07 	vmul.f32	s16, s0, s14
 800f264:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 800f268:	e75d      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
            float x  = (2.0f*f->m-1.0f);
 800f26a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f26e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f272:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f276:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800f330 <tVZFilter_setSampleRate+0x278>
 800f27a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 800f27e:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f282:	eeb0 0a48 	vmov.f32	s0, s16
 800f286:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f28a:	f000 fe47 	bl	800ff1c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f28e:	eddf 0a28 	vldr	s1, [pc, #160]	; 800f330 <tVZFilter_setSampleRate+0x278>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f292:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f296:	eeb0 0a68 	vmov.f32	s0, s17
 800f29a:	f000 fe43 	bl	800ff24 <minimum>
            f->cB = 1.0f-x*x;
 800f29e:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f2a2:	edd4 7a05 	vldr	s15, [r4, #20]
 800f2a6:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 800f2aa:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f2ae:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800f2b2:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f2b6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f2ba:	ee76 5a06 	vadd.f32	s11, s12, s12
 800f2be:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 800f2c2:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f2c6:	eee6 7a06 	vfma.f32	s15, s12, s12
 800f2ca:	eee0 7a00 	vfma.f32	s15, s0, s0
 800f2ce:	eee0 7a65 	vfms.f32	s15, s0, s11
 800f2d2:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800f2d6:	f000 fc45 	bl	800fb64 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 800f2da:	edd4 5a07 	vldr	s11, [r4, #28]
 800f2de:	ed94 6a08 	vldr	s12, [r4, #32]
 800f2e2:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 800f2e6:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f2ea:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 800f2ee:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f2f2:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800f2f6:	ee65 5a80 	vmul.f32	s11, s11, s0
 800f2fa:	ee26 6a00 	vmul.f32	s12, s12, s0
 800f2fe:	ee26 0a80 	vmul.f32	s0, s13, s0
 800f302:	edc4 5a07 	vstr	s11, [r4, #28]
 800f306:	ed84 6a08 	vstr	s12, [r4, #32]
 800f30a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 800f30e:	e70a      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
            f->cL = 1.0f;
 800f310:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800f314:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 800f318:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 800f31a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 800f31e:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 800f322:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f324:	e6ff      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
    f->R2Plusg = f->R2+f->g;
 800f326:	edd4 7a05 	vldr	s15, [r4, #20]
 800f32a:	e6fc      	b.n	800f126 <tVZFilter_setSampleRate+0x6e>
 800f32c:	40490fdb 	.word	0x40490fdb
 800f330:	00000000 	.word	0x00000000

0800f334 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 800f334:	b570      	push	{r4, r5, r6, lr}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 800f336:	698d      	ldr	r5, [r1, #24]
{
 800f338:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 800f33a:	2040      	movs	r0, #64	; 0x40
 800f33c:	4629      	mov	r1, r5
{
 800f33e:	ed2d 8b02 	vpush	{d8}
 800f342:	eeb0 8a40 	vmov.f32	s16, s0
 800f346:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 800f34a:	f000 fe03 	bl	800ff54 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 800f34e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f3c8 <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 800f352:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 800f354:	686b      	ldr	r3, [r5, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 800f356:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
 800f35a:	ed93 0a01 	vldr	s0, [r3, #4]
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 800f35e:	6030      	str	r0, [r6, #0]
    f->invSampleRate = leaf->invSampleRate;
 800f360:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 800f364:	ee27 0a80 	vmul.f32	s0, s15, s0
    f->cutoff = cutoff;
 800f368:	ed80 8a01 	vstr	s16, [r0, #4]
    f->mempool = m;
 800f36c:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 800f36e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800f372:	f005 ff5d 	bl	8015230 <tan>
    f->r = (7.f * resonance + 0.5f);
 800f376:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f37a:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 800f37e:	4913      	ldr	r1, [pc, #76]	; (800f3cc <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
 800f380:	4b13      	ldr	r3, [pc, #76]	; (800f3d0 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 800f382:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
 800f386:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
 800f38a:	2000      	movs	r0, #0
    f->n = 1.836f;
 800f38c:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 800f38e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
 800f392:	4910      	ldr	r1, [pc, #64]	; (800f3d4 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
 800f394:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
 800f398:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
 800f39a:	4b0f      	ldr	r3, [pc, #60]	; (800f3d8 <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
 800f39c:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
 800f39e:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
 800f3a0:	480e      	ldr	r0, [pc, #56]	; (800f3dc <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
 800f3a2:	490f      	ldr	r1, [pc, #60]	; (800f3e0 <tDiodeFilter_init+0xac>)
    f->g0inv = 1.f/(2.f*f->Vt);
 800f3a4:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
 800f3a6:	6323      	str	r3, [r4, #48]	; 0x30
    f->g2inv = 1.f/(6.f*f->gamma);
 800f3a8:	4a0e      	ldr	r2, [pc, #56]	; (800f3e4 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
 800f3aa:	4b0f      	ldr	r3, [pc, #60]	; (800f3e8 <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 800f3ac:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
 800f3b0:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 800f3b4:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
 800f3b8:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
 800f3ba:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 800f3bc:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
 800f3be:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800f3c0:	ecbd 8b02 	vpop	{d8}
 800f3c4:	bd70      	pop	{r4, r5, r6, pc}
 800f3c6:	bf00      	nop
 800f3c8:	40490fdb 	.word	0x40490fdb
 800f3cc:	3feb020c 	.word	0x3feb020c
 800f3d0:	3f6b020c 	.word	0x3f6b020c
 800f3d4:	3c23d70a 	.word	0x3c23d70a
 800f3d8:	3ca3d70a 	.word	0x3ca3d70a
 800f3dc:	3cf5c28f 	.word	0x3cf5c28f
 800f3e0:	3f0b6efd 	.word	0x3f0b6efd
 800f3e4:	3e39e952 	.word	0x3e39e952
 800f3e8:	3d23d70a 	.word	0x3d23d70a

0800f3ec <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 800f3ec:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 800f3ee:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f3f2:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
 800f3f6:	ed9f 7ae2 	vldr	s14, [pc, #904]	; 800f780 <tDiodeFilter_tick+0x394>
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 800f3fa:	ed93 4a03 	vldr	s8, [r3, #12]
 800f3fe:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float ih = 0.5f * (in + f->zi);
 800f402:	ed93 6a07 	vldr	s12, [r3, #28]
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 800f406:	ee66 7ac4 	vnmul.f32	s15, s13, s8
 800f40a:	ed93 2a08 	vldr	s4, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 800f40e:	ee30 6a06 	vadd.f32	s12, s0, s12
    if (testVal!= 0.0f)
 800f412:	eddf 5adc 	vldr	s11, [pc, #880]	; 800f784 <tDiodeFilter_tick+0x398>
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 800f416:	ed93 5a02 	vldr	s10, [r3, #8]
 800f41a:	eee6 7a23 	vfma.f32	s15, s12, s7
{
 800f41e:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 800f422:	ee67 7a82 	vmul.f32	s15, s15, s4
    float a = x*x;
 800f426:	ee67 7aa7 	vmul.f32	s15, s15, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f42a:	eea7 7aa4 	vfma.f32	s14, s15, s9
 800f42e:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
 800f432:	eeb4 7a65 	vcmp.f32	s14, s11
 800f436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f43a:	f000 8194 	beq.w	800f766 <tDiodeFilter_tick+0x37a>
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f43e:	eddf 4ad2 	vldr	s9, [pc, #840]	; 800f788 <tDiodeFilter_tick+0x39c>
 800f442:	ee77 4a24 	vadd.f32	s9, s14, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 800f446:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f44a:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 800f44e:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 800f452:	ee25 2a02 	vmul.f32	s4, s10, s4
    return ((a + 105.0f)*a + 945.0f) / output;
 800f456:	eddf 1acc 	vldr	s3, [pc, #816]	; 800f788 <tDiodeFilter_tick+0x39c>
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 800f45a:	eef0 9a08 	vmov.f32	s19, #8	; 0x40400000  3.0
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 800f45e:	ee33 7ac3 	vsub.f32	s14, s7, s6
 800f462:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / output;
 800f466:	eddf 5ac9 	vldr	s11, [pc, #804]	; 800f78c <tDiodeFilter_tick+0x3a0>
 800f46a:	eeb0 8a61 	vmov.f32	s16, s3
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f46e:	ed9f 6ac4 	vldr	s12, [pc, #784]	; 800f780 <tDiodeFilter_tick+0x394>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 800f472:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 800f476:	ee77 5aa5 	vadd.f32	s11, s15, s11
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 800f47a:	ee27 7a01 	vmul.f32	s14, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 800f47e:	eea7 8aa5 	vfma.f32	s16, s15, s11
    if (testVal!= 0.0f)
 800f482:	eddf 5ac0 	vldr	s11, [pc, #768]	; 800f784 <tDiodeFilter_tick+0x398>
    float a = x*x;
 800f486:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f48a:	eef0 7a46 	vmov.f32	s15, s12
 800f48e:	ee25 6a01 	vmul.f32	s12, s10, s2
 800f492:	eee7 7a20 	vfma.f32	s15, s14, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 800f496:	eddf 0abc 	vldr	s1, [pc, #752]	; 800f788 <tDiodeFilter_tick+0x39c>
 800f49a:	eec8 2a24 	vdiv.f32	s5, s16, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 800f49e:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4a6:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 800f4aa:	eef0 8a60 	vmov.f32	s17, s1
    if (testVal!= 0.0f)
 800f4ae:	eef4 7a65 	vcmp.f32	s15, s11
    return ((a + 105.0f)*a + 945.0f) / output;
 800f4b2:	eddf 5ab6 	vldr	s11, [pc, #728]	; 800f78c <tDiodeFilter_tick+0x3a0>
 800f4b6:	ee77 5a25 	vadd.f32	s11, s14, s11
    if (testVal!= 0.0f)
 800f4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
 800f4be:	eee7 8a25 	vfma.f32	s17, s14, s11
    if (testVal!= 0.0f)
 800f4c2:	eddf 5ab0 	vldr	s11, [pc, #704]	; 800f784 <tDiodeFilter_tick+0x398>
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f4c6:	bf18      	it	ne
 800f4c8:	ee77 1aa1 	vaddne.f32	s3, s15, s3
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 800f4cc:	ee74 7ae3 	vsub.f32	s15, s9, s7
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 800f4d0:	ee22 2a82 	vmul.f32	s4, s5, s4
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f4d4:	eddf 2aaa 	vldr	s5, [pc, #680]	; 800f780 <tDiodeFilter_tick+0x394>
    float output = 1.0f;
 800f4d8:	bf08      	it	eq
 800f4da:	eef7 1a00 	vmoveq.f32	s3, #112	; 0x3f800000  1.0
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 800f4de:	ee67 7a81 	vmul.f32	s15, s15, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 800f4e2:	ee88 7aa1 	vdiv.f32	s14, s17, s3
 800f4e6:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800f78c <tDiodeFilter_tick+0x3a0>
    float a = x*x;
 800f4ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f4ee:	eee7 2a88 	vfma.f32	s5, s15, s16
    return ((a + 105.0f)*a + 945.0f) / output;
 800f4f2:	ee77 1aa1 	vadd.f32	s3, s15, s3
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f4f6:	ee67 2aa2 	vmul.f32	s5, s15, s5
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 800f4fa:	ee27 7a06 	vmul.f32	s14, s14, s12
    if (testVal!= 0.0f)
 800f4fe:	eef4 2a65 	vcmp.f32	s5, s11
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 800f502:	ee76 5ae4 	vsub.f32	s11, s13, s9
    if (testVal!= 0.0f)
 800f506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 800f50a:	ee65 5a81 	vmul.f32	s11, s11, s2
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f50e:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
 800f512:	bf18      	it	ne
 800f514:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 800f518:	eddf 0a9b 	vldr	s1, [pc, #620]	; 800f788 <tDiodeFilter_tick+0x39c>
    float output = 1.0f;
 800f51c:	bf08      	it	eq
 800f51e:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 800f522:	eeb0 8a60 	vmov.f32	s16, s1
    float a = x*x;
 800f526:	ee65 5aa5 	vmul.f32	s11, s11, s11
    return ((a + 105.0f)*a + 945.0f) / output;
 800f52a:	eea7 8aa1 	vfma.f32	s16, s15, s3
    if (testVal!= 0.0f)
 800f52e:	eddf 1a95 	vldr	s3, [pc, #596]	; 800f784 <tDiodeFilter_tick+0x398>
    return ((a + 105.0f)*a + 945.0f) / output;
 800f532:	eec8 7a22 	vdiv.f32	s15, s16, s5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f536:	eddf 2a92 	vldr	s5, [pc, #584]	; 800f780 <tDiodeFilter_tick+0x394>
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 800f53a:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f53e:	eee5 2a81 	vfma.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 800f542:	ed9f 1a91 	vldr	s2, [pc, #580]	; 800f788 <tDiodeFilter_tick+0x39c>
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 800f546:	ee25 5a08 	vmul.f32	s10, s10, s16
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f54a:	ee65 2aa2 	vmul.f32	s5, s11, s5
    if (testVal!= 0.0f)
 800f54e:	eef4 2a61 	vcmp.f32	s5, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 800f552:	eddf 1a8e 	vldr	s3, [pc, #568]	; 800f78c <tDiodeFilter_tick+0x3a0>
 800f556:	ee75 1aa1 	vadd.f32	s3, s11, s3
    if (testVal!= 0.0f)
 800f55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 800f55e:	ee67 7a86 	vmul.f32	s15, s15, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f562:	bf18      	it	ne
 800f564:	ee72 2aa0 	vaddne.f32	s5, s5, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 800f568:	eef0 0a41 	vmov.f32	s1, s2
    float output = 1.0f;
 800f56c:	bf08      	it	eq
 800f56e:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 800f572:	eee5 0aa1 	vfma.f32	s1, s11, s3
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 800f576:	ee66 1a88 	vmul.f32	s3, s13, s16
    float a = x*x;
 800f57a:	ee61 1aa1 	vmul.f32	s3, s3, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 800f57e:	eec0 5aa2 	vdiv.f32	s11, s1, s5
 800f582:	eddf 0a81 	vldr	s1, [pc, #516]	; 800f788 <tDiodeFilter_tick+0x39c>
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f586:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 800f58a:	ee25 6a86 	vmul.f32	s12, s11, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f58e:	eddf 5a7c 	vldr	s11, [pc, #496]	; 800f780 <tDiodeFilter_tick+0x394>
 800f592:	eee1 5aa2 	vfma.f32	s11, s3, s5
    if (testVal!= 0.0f)
 800f596:	eddf 2a7b 	vldr	s5, [pc, #492]	; 800f784 <tDiodeFilter_tick+0x398>
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f59a:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
 800f59e:	eef4 5a62 	vcmp.f32	s11, s5
 800f5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 800f5a6:	bf18      	it	ne
 800f5a8:	ee75 2a81 	vaddne.f32	s5, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 800f5ac:	ed9f 1a77 	vldr	s2, [pc, #476]	; 800f78c <tDiodeFilter_tick+0x3a0>
    float output = 1.0f;
 800f5b0:	bf08      	it	eq
 800f5b2:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 800f5b6:	ee31 1a81 	vadd.f32	s2, s3, s2
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 800f5ba:	ee76 5aa4 	vadd.f32	s11, s13, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 800f5be:	eee1 0a81 	vfma.f32	s1, s3, s2
 800f5c2:	ee36 1aa3 	vadd.f32	s2, s13, s7
 800f5c6:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 800f5ca:	eef0 8a61 	vmov.f32	s17, s3
 800f5ce:	ee80 8aa2 	vdiv.f32	s16, s1, s5
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 800f5d2:	ee73 2a24 	vadd.f32	s5, s6, s9
 800f5d6:	ee74 0a81 	vadd.f32	s1, s9, s2
 800f5da:	ee72 2a81 	vadd.f32	s5, s5, s2
 800f5de:	eeb0 1a60 	vmov.f32	s2, s1
 800f5e2:	eee0 2a02 	vfma.f32	s5, s0, s4
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 800f5e6:	ee28 5a05 	vmul.f32	s10, s16, s10
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 800f5ea:	eea2 1a87 	vfma.f32	s2, s5, s14
 800f5ee:	ee75 2aa5 	vadd.f32	s5, s11, s11
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 800f5f2:	ee35 9a29 	vadd.f32	s18, s10, s19
 800f5f6:	eee5 8a21 	vfma.f32	s17, s10, s3
 800f5fa:	eee7 5a22 	vfma.f32	s11, s14, s5
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 800f5fe:	ee66 2a87 	vmul.f32	s5, s13, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 800f602:	ee75 0a0a 	vadd.f32	s1, s10, s20
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 800f606:	eee1 5a27 	vfma.f32	s11, s2, s15
 800f60a:	eeb0 1a66 	vmov.f32	s2, s13
 800f60e:	eea2 1aa1 	vfma.f32	s2, s5, s3
 800f612:	ee62 2aa9 	vmul.f32	s5, s5, s19
 800f616:	eee6 2aa1 	vfma.f32	s5, s13, s3
 800f61a:	eea2 1aa7 	vfma.f32	s2, s5, s15
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 800f61e:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 800f622:	eea5 1a86 	vfma.f32	s2, s11, s12
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 800f626:	eef0 5a62 	vmov.f32	s11, s5
 800f62a:	eee5 2a21 	vfma.f32	s5, s10, s3
 800f62e:	eee4 5a02 	vfma.f32	s11, s8, s4
 800f632:	eeb0 8a62 	vmov.f32	s16, s5
 800f636:	ee75 2a25 	vadd.f32	s5, s10, s11
 800f63a:	eef0 5a45 	vmov.f32	s11, s10
 800f63e:	eea2 9a87 	vfma.f32	s18, s5, s14
 800f642:	ee75 2a21 	vadd.f32	s5, s10, s3
 800f646:	eee8 2a07 	vfma.f32	s5, s16, s14
 800f64a:	eeb0 8a68 	vmov.f32	s16, s17
 800f64e:	eee9 2a27 	vfma.f32	s5, s18, s15
 800f652:	ee20 9a87 	vmul.f32	s18, s1, s14
 800f656:	eea9 8a29 	vfma.f32	s16, s18, s19
 800f65a:	eee9 5a21 	vfma.f32	s11, s18, s3
 800f65e:	eee8 5a27 	vfma.f32	s11, s16, s15
 800f662:	eee2 5a86 	vfma.f32	s11, s5, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 800f666:	eeff 2a00 	vmov.f32	s5, #240	; 0xbf800000 -1.0
 800f66a:	eef4 5a62 	vcmp.f32	s11, s5
 800f66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 800f672:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 800f676:	bf14      	ite	ne
 800f678:	ee75 5a8a 	vaddne.f32	s11, s11, s20
        tempy3denom = 0.000001f;
 800f67c:	eddf 5a44 	vldreq	s11, [pc, #272]	; 800f790 <tDiodeFilter_tick+0x3a4>
    if (t1 == 0.0f)
 800f680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 800f684:	eec1 2a25 	vdiv.f32	s5, s2, s11
    if (t1 == 0.0f)
 800f688:	d075      	beq.n	800f776 <tDiodeFilter_tick+0x38a>
 800f68a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800f68e:	ee77 1a21 	vadd.f32	s3, s14, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 800f692:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69a:	d067      	beq.n	800f76c <tDiodeFilter_tick+0x380>
 800f69c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f6a0:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 800f6a4:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
 800f6a8:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 800f6ac:	eeb0 8a66 	vmov.f32	s16, s13
    float xx = (in - f->r*y3);
 800f6b0:	ee24 4a22 	vmul.f32	s8, s8, s5
    if (t3 == 0.0f)
 800f6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b8:	eeb0 1a64 	vmov.f32	s2, s9
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 800f6bc:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
 800f6c0:	bf08      	it	eq
 800f6c2:	ed9f 6a33 	vldreq	s12, [pc, #204]	; 800f790 <tDiodeFilter_tick+0x3a4>
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 800f6c6:	ee70 0a86 	vadd.f32	s1, s1, s12
 800f6ca:	eea6 1a22 	vfma.f32	s2, s12, s5
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 800f6ce:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 800f6d2:	ee90 8aa2 	vfnms.f32	s16, s1, s5
    float xx = (in - f->r*y3);
 800f6d6:	ee70 0a44 	vsub.f32	s1, s0, s8
    return tanhf(y3*f->r);
 800f6da:	eeb0 0a44 	vmov.f32	s0, s8
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 800f6de:	ee88 4a06 	vdiv.f32	s8, s16, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 800f6e2:	ee95 1a84 	vfnms.f32	s2, s11, s8
 800f6e6:	eeb0 8a41 	vmov.f32	s16, s2
 800f6ea:	eeb0 1a63 	vmov.f32	s2, s7
 800f6ee:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 800f6f2:	eea7 1a84 	vfma.f32	s2, s15, s8
 800f6f6:	ee91 1aa5 	vfnms.f32	s2, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 800f6fa:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800f6fe:	ee61 1aa7 	vmul.f32	s3, s3, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 800f702:	ee81 8a07 	vdiv.f32	s16, s2, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 800f706:	ee34 1a62 	vsub.f32	s2, s8, s5
 800f70a:	ee21 1a06 	vmul.f32	s2, s2, s12
 800f70e:	eea5 1a62 	vfms.f32	s2, s10, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 800f712:	ee72 2ac4 	vsub.f32	s5, s5, s8
 800f716:	eeb0 5a61 	vmov.f32	s10, s3
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 800f71a:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 800f71e:	eea2 5a86 	vfma.f32	s10, s5, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 800f722:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 800f726:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800f72a:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 800f72e:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 800f732:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 800f736:	eee1 6a22 	vfma.f32	s13, s2, s5
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 800f73a:	eee2 5a20 	vfma.f32	s11, s4, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 800f73e:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 800f742:	eee5 4a22 	vfma.f32	s9, s10, s5
}
 800f746:	ecbd 8b06 	vpop	{d8-d10}
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 800f74a:	eea5 3aa2 	vfma.f32	s6, s11, s5
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 800f74e:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 800f752:	eee7 3a22 	vfma.f32	s7, s14, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 800f756:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 800f75a:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 800f75e:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
    return tanhf(y3*f->r);
 800f762:	f006 b8c5 	b.w	80158f0 <tanhf>
    float output = 1.0f;
 800f766:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f76a:	e66c      	b.n	800f446 <tDiodeFilter_tick+0x5a>
 800f76c:	eddf 5a09 	vldr	s11, [pc, #36]	; 800f794 <tDiodeFilter_tick+0x3a8>
        t2 = 0.000001f;
 800f770:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f790 <tDiodeFilter_tick+0x3a4>
 800f774:	e796      	b.n	800f6a4 <tDiodeFilter_tick+0x2b8>
 800f776:	eddf 1a07 	vldr	s3, [pc, #28]	; 800f794 <tDiodeFilter_tick+0x3a8>
        t1 = 0.000001f;
 800f77a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800f790 <tDiodeFilter_tick+0x3a4>
 800f77e:	e788      	b.n	800f692 <tDiodeFilter_tick+0x2a6>
 800f780:	43d20000 	.word	0x43d20000
 800f784:	c46c4000 	.word	0xc46c4000
 800f788:	446c4000 	.word	0x446c4000
 800f78c:	42d20000 	.word	0x42d20000
 800f790:	358637bd 	.word	0x358637bd
 800f794:	3f800008 	.word	0x3f800008

0800f798 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
 800f798:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800f79c:	4b0d      	ldr	r3, [pc, #52]	; (800f7d4 <tDiodeFilter_setFreqFast+0x3c>)
 800f79e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f7a2:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 800f7a4:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 800f7a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800f7ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f7b0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 800f7b4:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800f7b8:	edd0 6a01 	vldr	s13, [r0, #4]
 800f7bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7c0:	ed90 7a00 	vldr	s14, [r0]
 800f7c4:	ee20 0a26 	vmul.f32	s0, s0, s13
 800f7c8:	eea7 0a27 	vfma.f32	s0, s14, s15
 800f7cc:	ed81 0a02 	vstr	s0, [r1, #8]
}
 800f7d0:	4770      	bx	lr
 800f7d2:	bf00      	nop
 800f7d4:	08017744 	.word	0x08017744

0800f7d8 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 800f7d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f7dc:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800f7e0:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 800f7e4:	eef0 0a67 	vmov.f32	s1, s15
{
 800f7e8:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 800f7ea:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 800f7ec:	eee0 0a07 	vfma.f32	s1, s0, s14
 800f7f0:	eeb0 0a67 	vmov.f32	s0, s15
 800f7f4:	f000 fa74 	bl	800fce0 <LEAF_clip>
 800f7f8:	ed84 0a03 	vstr	s0, [r4, #12]
}
 800f7fc:	bd10      	pop	{r4, pc}
 800f7fe:	bf00      	nop

0800f800 <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 800f800:	b570      	push	{r4, r5, r6, lr}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 800f802:	698d      	ldr	r5, [r1, #24]
{
 800f804:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 800f806:	2038      	movs	r0, #56	; 0x38
 800f808:	4629      	mov	r1, r5
{
 800f80a:	ed2d 8b02 	vpush	{d8}
 800f80e:	eef0 8a40 	vmov.f32	s17, s0
 800f812:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 800f816:	f000 fb9d 	bl	800ff54 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 800f81a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f87c <tLadderFilter_init+0x7c>
    f->oversampling = 1;
 800f81e:	2301      	movs	r3, #1
    f->invSampleRate = leaf->invSampleRate;
 800f820:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 800f822:	4604      	mov	r4, r0
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 800f824:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
 800f828:	ed92 0a01 	vldr	s0, [r2, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 800f82c:	6030      	str	r0, [r6, #0]
    f->invSampleRate = leaf->invSampleRate;
 800f82e:	ed80 0a02 	vstr	s0, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 800f832:	ee27 0a80 	vmul.f32	s0, s15, s0
    f->cutoff = cutoff;
 800f836:	edc0 8a01 	vstr	s17, [r0, #4]
    f->oversampling = 1;
 800f83a:	60c3      	str	r3, [r0, #12]
    f->mempool = m;
 800f83c:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 800f83e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 800f842:	f005 fcf5 	bl	8015230 <tan>
 800f846:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 800f84a:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 800f84e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 800f852:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 800f856:	490a      	ldr	r1, [pc, #40]	; (800f880 <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
 800f858:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 800f85c:	4b09      	ldr	r3, [pc, #36]	; (800f884 <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
 800f85e:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 800f862:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
 800f866:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
 800f868:	6221      	str	r1, [r4, #32]
    f->fb = (resonance * 8.0f);
 800f86a:	ed84 8a05 	vstr	s16, [r4, #20]
    f->d = 1.0f;
 800f86e:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
 800f870:	edc4 7a06 	vstr	s15, [r4, #24]
    f->b[0] = 0.04f;
 800f874:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800f876:	ecbd 8b02 	vpop	{d8}
 800f87a:	bd70      	pop	{r4, r5, r6, pc}
 800f87c:	40490fdb 	.word	0x40490fdb
 800f880:	3dcccccd 	.word	0x3dcccccd
 800f884:	3d23d70a 	.word	0x3d23d70a

0800f888 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
 800f888:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
 800f88a:	eddf 7a8f 	vldr	s15, [pc, #572]	; 800fac8 <tLadderFilter_tick+0x240>
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 800f88e:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 800f890:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 800f894:	2900      	cmp	r1, #0
{
 800f896:	ed2d 8b10 	vpush	{d8-d15}
    for (int i = 0; i < f->oversampling; i++) {
 800f89a:	f340 8110 	ble.w	800fabe <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 800f89e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
 800f8a2:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 800f8a6:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
 800f8aa:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
 800f8ae:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 800f8b2:	ed92 7a08 	vldr	s14, [r2, #32]
 800f8b6:	ee72 2a27 	vadd.f32	s5, s4, s15
 800f8ba:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 800f8be:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 800f8c2:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 800f8c6:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800f8ca:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 800f8ce:	ee25 9a28 	vmul.f32	s18, s10, s17
 800f8d2:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 800f8d6:	ee62 2a87 	vmul.f32	s5, s5, s14
 800f8da:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 800f8de:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 800f8e2:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 800f8e4:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 800f8e8:	ed9f 8a78 	vldr	s16, [pc, #480]	; 800facc <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 800f8ec:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 800f8f0:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 800f8f2:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 800f8f6:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 800f8fa:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 800f8fc:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f900:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f904:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f908:	ee22 baa5 	vmul.f32	s22, s5, s11
 800f90c:	ee26 ca22 	vmul.f32	s24, s12, s5
 800f910:	ee72 5a25 	vadd.f32	s11, s4, s11
 800f914:	ee32 6a06 	vadd.f32	s12, s4, s12
 800f918:	ee66 baa2 	vmul.f32	s23, s13, s5
 800f91c:	eecb ea25 	vdiv.f32	s29, s22, s11
 800f920:	ee8c ba06 	vdiv.f32	s22, s24, s12
 800f924:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 800f928:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 800f92c:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 800f930:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f934:	ee77 eaee 	vsub.f32	s29, s15, s29
 800f938:	ee77 6acb 	vsub.f32	s13, s15, s22
 800f93c:	ee62 5a87 	vmul.f32	s11, s5, s14
 800f940:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
 800f944:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 800f948:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
 800f94c:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 800f950:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
 800f954:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
 800f958:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
 800f95c:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
 800f960:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
 800f964:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
 800f968:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 800f96c:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
 800f970:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
 800f974:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
 800f978:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 800f97c:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
 800f980:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
 800f984:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 800f988:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
 800f98c:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 800f990:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
 800f994:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
 800f998:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
 800f99c:	ee73 5a2a 	vadd.f32	s11, s6, s21
 800f9a0:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 800f9a4:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f9a8:	ee65 5a89 	vmul.f32	s11, s11, s18
 800f9ac:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 800f9b0:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 800f9b4:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 800f9b8:	ee2d 7a07 	vmul.f32	s14, s26, s14
 800f9bc:	ee65 5a8f 	vmul.f32	s11, s11, s30
 800f9c0:	ee60 ea8e 	vmul.f32	s29, s1, s28
 800f9c4:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 800f9c8:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 800f9cc:	eeb0 ea67 	vmov.f32	s28, s15
 800f9d0:	eeab eaad 	vfma.f32	s28, s23, s27
 800f9d4:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
 800f9d8:	eeb0 ba67 	vmov.f32	s22, s15
 800f9dc:	eeec 5a84 	vfma.f32	s11, s25, s8
 800f9e0:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 800f9e4:	eec9 ba8e 	vdiv.f32	s23, s19, s28
 800f9e8:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
 800f9ec:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 800f9f0:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
 800f9f4:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
 800f9f8:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 800f9fc:	eef0 ca48 	vmov.f32	s25, s16
 800fa00:	eeab da0b 	vfma.f32	s26, s22, s22
 800fa04:	eee5 caa5 	vfma.f32	s25, s11, s11
 800fa08:	eef1 5acd 	vsqrt.f32	s11, s26
 800fa0c:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 800fa10:	ee3b ba65 	vsub.f32	s22, s22, s11
 800fa14:	eef0 5a40 	vmov.f32	s11, s0
 800fa18:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 800fa1c:	eeb0 ba43 	vmov.f32	s22, s6
 800fa20:	eea5 ba25 	vfma.f32	s22, s10, s11
 800fa24:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 800fa28:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 800fa2c:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 800fa30:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 800fa34:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 800fa38:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 800fa3c:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 800fa40:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 800fa44:	ee36 6a66 	vsub.f32	s12, s12, s13
 800fa48:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 800fa4c:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 800fa50:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 800fa54:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 800fa58:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fa5c:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 800fa60:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 800fa64:	ee37 7a4c 	vsub.f32	s14, s14, s24
 800fa68:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 800fa6c:	f47f af3e 	bne.w	800f8ec <tLadderFilter_tick+0x64>
 800fa70:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 800fa74:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 800fa78:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 800fa7c:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 800fa80:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800facc <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
 800fa84:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 800fa88:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 800fa8c:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 800fa90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 800fa94:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
 800fa98:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 800fa9c:	eea0 7aa0 	vfma.f32	s14, s1, s1
 800faa0:	eef1 7ae5 	vsqrt.f32	s15, s11
 800faa4:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
 800faa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faac:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 800fab0:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
 800fab4:	ee20 0a0c 	vmul.f32	s0, s0, s24
 800fab8:	ecbd 8b10 	vpop	{d8-d15}
 800fabc:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 800fabe:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
 800fac2:	ed9f ca03 	vldr	s24, [pc, #12]	; 800fad0 <tLadderFilter_tick+0x248>
 800fac6:	e7db      	b.n	800fa80 <tLadderFilter_tick+0x1f8>
 800fac8:	3c75c28f 	.word	0x3c75c28f
 800facc:	3c23d70a 	.word	0x3c23d70a
 800fad0:	00000000 	.word	0x00000000

0800fad4 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
 800fad4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800fad8:	4b0f      	ldr	r3, [pc, #60]	; (800fb18 <tLadderFilter_setFreqFast+0x44>)
 800fada:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
 800fade:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 800fae0:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 800fae4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800fae8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800faec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 800faf0:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800faf4:	edd0 6a01 	vldr	s13, [r0, #4]
 800faf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fafc:	ed90 7a00 	vldr	s14, [r0]
 800fb00:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fb04:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
 800fb08:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 800fb0c:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
 800fb10:	edc1 7a06 	vstr	s15, [r1, #24]
}
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	08017744 	.word	0x08017744

0800fb1c <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
 800fb1c:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 800fb1e:	6804      	ldr	r4, [r0, #0]
{
 800fb20:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 800fb24:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 800fb28:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800fb38 <tLadderFilter_setQ+0x1c>
 800fb2c:	f000 f8d8 	bl	800fce0 <LEAF_clip>
 800fb30:	ed84 0a05 	vstr	s0, [r4, #20]
}
 800fb34:	bd10      	pop	{r4, pc}
 800fb36:	bf00      	nop
 800fb38:	3e4ccccd 	.word	0x3e4ccccd

0800fb3c <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
 800fb3c:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 800fb40:	ed9f 6a06 	vldr	s12, [pc, #24]	; 800fb5c <fastertanf+0x20>
 800fb44:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800fb60 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 800fb48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 800fb4c:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 800fb50:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 800fb54:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	3e502de0 	.word	0x3e502de0
 800fb60:	3ea295ea 	.word	0x3ea295ea

0800fb64 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 800fb64:	ee10 2a10 	vmov	r2, s0
 800fb68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 800fb6c:	4b0d      	ldr	r3, [pc, #52]	; (800fba4 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 800fb6e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800fb72:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 800fb76:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fb7a:	ee00 3a10 	vmov	s0, r3
 800fb7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fb82:	eea0 7a67 	vfms.f32	s14, s0, s15
 800fb86:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 800fb8a:	ee10 3a10 	vmov	r3, s0
 800fb8e:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 800fb92:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 800fb96:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 800fb9a:	336e      	adds	r3, #110	; 0x6e
}
 800fb9c:	ee00 3a10 	vmov	s0, r3
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	5f3759df 	.word	0x5f3759df

0800fba8 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 800fba8:	ee10 3a10 	vmov	r3, s0
 800fbac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbb0:	ee00 3a10 	vmov	s0, r3
}
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop

0800fbb8 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
 800fbb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fbbc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800fbe8 <fasterexpf+0x30>
 800fbc0:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 800fbc4:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800fbc8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fbcc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fbd0:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 800fbd4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fbd8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fbdc:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 800fbe0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fbe4:	4770      	bx	lr
 800fbe6:	bf00      	nop
 800fbe8:	3b800000 	.word	0x3b800000

0800fbec <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 800fbec:	ee10 3a10 	vmov	r3, s0
 800fbf0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800fc14 <fastPowf+0x28>
 800fbf4:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800fbf8:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 800fbfc:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 800fc00:	330b      	adds	r3, #11
 800fc02:	ee07 3a90 	vmov	s15, r3
 800fc06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc0a:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 800fc0e:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 800fc12:	4770      	bx	lr
 800fc14:	4e7de250 	.word	0x4e7de250

0800fc18 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 800fc18:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fc98 <LEAF_shaper+0x80>
 800fc1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc24:	d406      	bmi.n	800fc34 <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
 800fc26:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800fc9c <LEAF_shaper+0x84>
 800fc2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc32:	dd02      	ble.n	800fc3a <LEAF_shaper+0x22>
 800fc34:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800fca0 <LEAF_shaper+0x88>
}
 800fc38:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
 800fc3a:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800fc3e:	ed9f 5a19 	vldr	s10, [pc, #100]	; 800fca4 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 800fc42:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
 800fc46:	ed9f 4a18 	vldr	s8, [pc, #96]	; 800fca8 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800fc4a:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
 800fc4e:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800fc52:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
 800fc56:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800fc5a:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800fc5e:	eddf 5a13 	vldr	s11, [pc, #76]	; 800fcac <LEAF_shaper+0x94>
 800fc62:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
 800fc66:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800fc6a:	ee66 4aa6 	vmul.f32	s9, s13, s13
 800fc6e:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
 800fc72:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800fc76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800fc7a:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800fc7e:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
 800fc82:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 800fc86:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 800fc8a:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
 800fc8e:	ee20 0a80 	vmul.f32	s0, s1, s0
 800fc92:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
 800fc96:	4770      	bx	lr
 800fc98:	bfb504f3 	.word	0xbfb504f3
 800fc9c:	3fb504f3 	.word	0x3fb504f3
 800fca0:	00000000 	.word	0x00000000
 800fca4:	3c800000 	.word	0x3c800000
 800fca8:	3f272f05 	.word	0x3f272f05
 800fcac:	3d4ccccd 	.word	0x3d4ccccd

0800fcb0 <LEAF_round>:
    rnd = fabsf(rnd);
 800fcb0:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 800fcb4:	eddf 7a06 	vldr	s15, [pc, #24]	; 800fcd0 <LEAF_round+0x20>
 800fcb8:	eef4 0ae7 	vcmpe.f32	s1, s15
 800fcbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc0:	d905      	bls.n	800fcce <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 800fcc2:	eec0 7a20 	vdiv.f32	s15, s0, s1
 800fcc6:	feb8 0a67 	vrinta.f32	s0, s15
 800fcca:	ee20 0a20 	vmul.f32	s0, s0, s1
}
 800fcce:	4770      	bx	lr
 800fcd0:	33d6bf95 	.word	0x33d6bf95

0800fcd4 <LEAF_bitwise_xor>:
    return unholy.f;
 800fcd4:	ee10 3a10 	vmov	r3, s0
 800fcd8:	4043      	eors	r3, r0
 800fcda:	ee00 3a10 	vmov	s0, r3
}
 800fcde:	4770      	bx	lr

0800fce0 <LEAF_clip>:
    if (min > max)
 800fce0:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800fce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce8:	dd05      	ble.n	800fcf6 <LEAF_clip+0x16>
 800fcea:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
 800fcee:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 800fcf2:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
 800fcf6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800fcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcfe:	dc01      	bgt.n	800fd04 <LEAF_clip+0x24>
    else if (val > tempmax)
 800fd00:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
}
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop

0800fd08 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
 800fd08:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
 800fd0a:	1e4b      	subs	r3, r1, #1
 800fd0c:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 800fd10:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
 800fd12:	ee07 3a90 	vmov	s15, r3
 800fd16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800fd1a:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
 800fd1e:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 800fd22:	dd16      	ble.n	800fd52 <LEAF_generate_exp+0x4a>
 800fd24:	4604      	mov	r4, r0
 800fd26:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800fd2a:	eeb0 8a60 	vmov.f32	s16, s1
 800fd2e:	eef0 8a40 	vmov.f32	s17, s0
 800fd32:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 800fd36:	eef0 0a48 	vmov.f32	s1, s16
 800fd3a:	eeb0 0a68 	vmov.f32	s0, s17
 800fd3e:	f005 fc4b 	bl	80155d8 <powf>
 800fd42:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 800fd46:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 800fd4a:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 800fd4e:	42a5      	cmp	r5, r4
 800fd50:	d1f1      	bne.n	800fd36 <LEAF_generate_exp+0x2e>
    }
}
 800fd52:	ecbd 8b04 	vpop	{d8-d9}
 800fd56:	bd38      	pop	{r3, r4, r5, pc}

0800fd58 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
 800fd58:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 800fd5a:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 800fd5e:	460d      	mov	r5, r1
 800fd60:	4604      	mov	r4, r0
 800fd62:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 800fd66:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 800fd6a:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 800fd6e:	ee81 0a29 	vdiv.f32	s0, s2, s19
 800fd72:	f005 fb0d 	bl	8015390 <logf>
    float increment = 1.0 / (float)(size-1);
 800fd76:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
 800fd78:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
 800fd7a:	ee07 3a90 	vmov	s15, r3
 800fd7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd86:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 800fd8a:	dd19      	ble.n	800fdc0 <LEAF_generate_table_skew_non_sym+0x68>
 800fd8c:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 800fdc8 <LEAF_generate_table_skew_non_sym+0x70>
 800fd90:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
 800fd94:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800fdcc <LEAF_generate_table_skew_non_sym+0x74>
 800fd98:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
 800fd9c:	eeb0 0a48 	vmov.f32	s0, s16
 800fda0:	f005 faf6 	bl	8015390 <logf>
 800fda4:	ee20 0a09 	vmul.f32	s0, s0, s18
 800fda8:	f005 fa76 	bl	8015298 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
 800fdac:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 800fdb0:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
 800fdb4:	eee9 7a80 	vfma.f32	s15, s19, s0
 800fdb8:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 800fdbc:	42a5      	cmp	r5, r4
 800fdbe:	d1ed      	bne.n	800fd9c <LEAF_generate_table_skew_non_sym+0x44>
    }
}
 800fdc0:	ecbd 8b06 	vpop	{d8-d10}
 800fdc4:	bd38      	pop	{r3, r4, r5, pc}
 800fdc6:	bf00      	nop
 800fdc8:	bfb8aa3b 	.word	0xbfb8aa3b
 800fdcc:	00000000 	.word	0x00000000

0800fdd0 <LEAF_interpolation_linear>:
}

// alpha, [0.0, 1.0]
float LEAF_interpolation_linear (float A, float B, float alpha)
{
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 800fdd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
 800fdd4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800fdf4 <LEAF_interpolation_linear+0x24>
 800fdd8:	fe81 1a67 	vminnm.f32	s2, s2, s15
 800fddc:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    
    float omAlpha = 1.0f - alpha;
 800fde0:	ee77 7ac1 	vsub.f32	s15, s15, s2
    
    // First 1/2 of interpolation
    float out = A * omAlpha;
    
    out += B * alpha;
 800fde4:	ee61 0a20 	vmul.f32	s1, s2, s1
    
    return out;
}
 800fde8:	eee7 0a80 	vfma.f32	s1, s15, s0
 800fdec:	eeb0 0a60 	vmov.f32	s0, s1
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	00000000 	.word	0x00000000

0800fdf8 <mtof>:

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 800fdf8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800fe38 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 800fdfc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800fe3c <mtof+0x44>
 800fe00:	e006      	b.n	800fe10 <mtof+0x18>
 800fe02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fe06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0a:	dd09      	ble.n	800fe20 <mtof+0x28>
 800fe0c:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 800fe10:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fe14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe18:	d8f3      	bhi.n	800fe02 <mtof+0xa>
 800fe1a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800fe40 <mtof+0x48>
    else return (8.17579891564f * expf(0.0577622650f * f));
}
 800fe1e:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 800fe20:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fe44 <mtof+0x4c>
{
 800fe24:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 800fe26:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fe2a:	f005 fa35 	bl	8015298 <expf>
 800fe2e:	eddf 7a06 	vldr	s15, [pc, #24]	; 800fe48 <mtof+0x50>
 800fe32:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800fe36:	bd08      	pop	{r3, pc}
 800fe38:	c4bb8000 	.word	0xc4bb8000
 800fe3c:	44bb6000 	.word	0x44bb6000
 800fe40:	00000000 	.word	0x00000000
 800fe44:	3d6c9820 	.word	0x3d6c9820
 800fe48:	4102d013 	.word	0x4102d013

0800fe4c <ftom>:
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
}

float ftom(float f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 800fe4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fe50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe54:	dd0b      	ble.n	800fe6e <ftom+0x22>
 800fe56:	eddf 7a07 	vldr	s15, [pc, #28]	; 800fe74 <ftom+0x28>
{
 800fe5a:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 800fe5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fe60:	f005 fa96 	bl	8015390 <logf>
 800fe64:	eddf 7a04 	vldr	s15, [pc, #16]	; 800fe78 <ftom+0x2c>
 800fe68:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800fe6c:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 800fe6e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800fe7c <ftom+0x30>
}
 800fe72:	4770      	bx	lr
 800fe74:	3dfa7ed2 	.word	0x3dfa7ed2
 800fe78:	418a7fac 	.word	0x418a7fac
 800fe7c:	c4bb8000 	.word	0xc4bb8000

0800fe80 <fasteratodb>:
float atodb(float a)
{
    return 20.0f*log10f(a);
}
float fasteratodb(float a)
{
 800fe80:	b500      	push	{lr}
 800fe82:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 800fe84:	eeb0 0ac0 	vabs.f32	s0, s0
 800fe88:	a801      	add	r0, sp, #4
 800fe8a:	f005 f91f 	bl	80150cc <frexpf>
    Y += -4.11852516267426f;
 800fe8e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800fec4 <fasteratodb+0x44>
 800fe92:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800fec8 <fasteratodb+0x48>
    Y += 6.02197014179219f;
 800fe96:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800fecc <fasteratodb+0x4c>
    Y += -4.11852516267426f;
 800fe9a:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
 800fe9e:	eddd 7a01 	vldr	s15, [sp, #4]
 800fea2:	eddf 5a0b 	vldr	s11, [pc, #44]	; 800fed0 <fasteratodb+0x50>
 800fea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
 800feaa:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 800fed4 <fasteratodb+0x54>
    Y += E;
 800feae:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
 800feb2:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 800feb6:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 800feba:	ee27 0a86 	vmul.f32	s0, s15, s12
 800febe:	b003      	add	sp, #12
 800fec0:	f85d fb04 	ldr.w	pc, [sp], #4
 800fec4:	3f9da1a8 	.word	0x3f9da1a8
 800fec8:	c083caf5 	.word	0xc083caf5
 800fecc:	40c0b3fb 	.word	0x40c0b3fb
 800fed0:	404892e0 	.word	0x404892e0
 800fed4:	40c0a8c2 	.word	0x40c0a8c2

0800fed8 <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 800fed8:	eddf 7a02 	vldr	s15, [pc, #8]	; 800fee4 <fastdbtoa+0xc>
 800fedc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fee0:	f005 b9da 	b.w	8015298 <expf>
 800fee4:	3debc8e3 	.word	0x3debc8e3

0800fee8 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 800fee8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800feec:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800ff18 <fasterdbtoa+0x30>
 800fef0:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 800fef4:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800fef8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fefc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ff00:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 800ff04:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ff08:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ff0c:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 800ff10:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	39ebc8e3 	.word	0x39ebc8e3

0800ff1c <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 800ff1c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop

0800ff24 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 800ff24:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 800ff28:	4770      	bx	lr
 800ff2a:	bf00      	nop

0800ff2c <leaf_pool_init>:
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 800ff2c:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800ff2e:	6a04      	ldr	r4, [r0, #32]
 800ff30:	2510      	movs	r5, #16
    pool->usize  = 0;
 800ff32:	2300      	movs	r3, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800ff34:	6365      	str	r5, [r4, #52]	; 0x34
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 800ff36:	194c      	adds	r4, r1, r5
    pool->msize  = size;
 800ff38:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800ff3a:	3a10      	subs	r2, #16
    pool->usize  = 0;
 800ff3c:	e9c0 1309 	strd	r1, r3, [r0, #36]	; 0x24
    node->pool = block_location + header_size;
 800ff40:	600c      	str	r4, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 800ff42:	f100 041c 	add.w	r4, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 800ff46:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 800ff48:	e9c1 3301 	strd	r3, r3, [r1, #4]
    leaf->mempool = &leaf->_internal_mempool;
 800ff4c:	6184      	str	r4, [r0, #24]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800ff4e:	6301      	str	r1, [r0, #48]	; 0x30
}
 800ff50:	bc30      	pop	{r4, r5}
 800ff52:	4770      	bx	lr

0800ff54 <mpool_alloc>:
{
 800ff54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    pool->leaf->allocCount++;
 800ff58:	684d      	ldr	r5, [r1, #4]
    if (pool->head == NULL)
 800ff5a:	694e      	ldr	r6, [r1, #20]
    pool->leaf->allocCount++;
 800ff5c:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800ff5e:	3301      	adds	r3, #1
 800ff60:	64ab      	str	r3, [r5, #72]	; 0x48
    if (pool->head == NULL)
 800ff62:	2e00      	cmp	r6, #0
 800ff64:	d056      	beq.n	8010014 <mpool_alloc+0xc0>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800ff66:	1dc2      	adds	r2, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 800ff68:	4634      	mov	r4, r6
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800ff6a:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 800ff6e:	e002      	b.n	800ff76 <mpool_alloc+0x22>
        node_to_alloc = node_to_alloc->next;
 800ff70:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 800ff72:	2c00      	cmp	r4, #0
 800ff74:	d03d      	beq.n	800fff2 <mpool_alloc+0x9e>
    while (node_to_alloc->size < size_to_alloc)
 800ff76:	68e3      	ldr	r3, [r4, #12]
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d3f9      	bcc.n	800ff70 <mpool_alloc+0x1c>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800ff7c:	1a9f      	subs	r7, r3, r2
    if (leftover > pool->leaf->header_size)
 800ff7e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    node_to_alloc->size = size_to_alloc;
 800ff80:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 800ff82:	42b8      	cmp	r0, r7
 800ff84:	d242      	bcs.n	801000c <mpool_alloc+0xb8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800ff86:	f8d1 c008 	ldr.w	ip, [r1, #8]
        new_node = create_node(&pool->mpool[offset],
 800ff8a:	1a3b      	subs	r3, r7, r0
        offset += pool->leaf->header_size + node_to_alloc->size;
 800ff8c:	4402      	add	r2, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800ff8e:	eba4 070c 	sub.w	r7, r4, ip
        offset += pool->leaf->header_size + node_to_alloc->size;
 800ff92:	443a      	add	r2, r7
        new_node = create_node(&pool->mpool[offset],
 800ff94:	eb0c 0702 	add.w	r7, ip, r2
                               node_to_alloc->next,
 800ff98:	e9d4 8e01 	ldrd	r8, lr, [r4, #4]
    node->pool = block_location + header_size;
 800ff9c:	eb07 0900 	add.w	r9, r7, r0
 800ffa0:	f84c 9002 	str.w	r9, [ip, r2]
    node->size = size;
 800ffa4:	60fb      	str	r3, [r7, #12]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800ffa6:	68e3      	ldr	r3, [r4, #12]
    node->next = next;
 800ffa8:	e9c7 8e01 	strd	r8, lr, [r7, #4]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800ffac:	6862      	ldr	r2, [r4, #4]
    if (pool->head == node_to_alloc)
 800ffae:	42a6      	cmp	r6, r4
        pool->head = new_node;
 800ffb0:	bf08      	it	eq
 800ffb2:	614f      	streq	r7, [r1, #20]
    if (node->next != NULL)
 800ffb4:	b10a      	cbz	r2, 800ffba <mpool_alloc+0x66>
    {
        // Close the link
        node->next->prev = node->prev;
 800ffb6:	68a6      	ldr	r6, [r4, #8]
 800ffb8:	6096      	str	r6, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800ffba:	68a6      	ldr	r6, [r4, #8]
 800ffbc:	b106      	cbz	r6, 800ffc0 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 800ffbe:	6072      	str	r2, [r6, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800ffc0:	68ca      	ldr	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800ffc2:	696d      	ldr	r5, [r5, #20]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800ffc4:	4402      	add	r2, r0
    }
    
    node->next = NULL;
 800ffc6:	2000      	movs	r0, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800ffc8:	441a      	add	r2, r3
    if (pool->leaf->clearOnAllocation > 0)
 800ffca:	4285      	cmp	r5, r0
    node->prev = NULL;
 800ffcc:	e9c4 0001 	strd	r0, r0, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800ffd0:	60ca      	str	r2, [r1, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800ffd2:	dd0a      	ble.n	800ffea <mpool_alloc+0x96>
        char* new_pool = (char*)node_to_alloc->pool;
 800ffd4:	6825      	ldr	r5, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800ffd6:	b373      	cbz	r3, 8010036 <mpool_alloc+0xe2>
 800ffd8:	1e6a      	subs	r2, r5, #1
 800ffda:	4613      	mov	r3, r2
 800ffdc:	f802 0f01 	strb.w	r0, [r2, #1]!
 800ffe0:	68e1      	ldr	r1, [r4, #12]
 800ffe2:	3302      	adds	r3, #2
 800ffe4:	1b5b      	subs	r3, r3, r5
 800ffe6:	4299      	cmp	r1, r3
 800ffe8:	d8f7      	bhi.n	800ffda <mpool_alloc+0x86>
    return node_to_alloc->pool;
 800ffea:	6824      	ldr	r4, [r4, #0]
}
 800ffec:	4620      	mov	r0, r4
 800ffee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if ((pool->msize - pool->usize) > asize)
 800fff2:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 800fff6:	1a9b      	subs	r3, r3, r2
 800fff8:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800fffa:	4628      	mov	r0, r5
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800fffc:	bf8c      	ite	hi
 800fffe:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8010000:	4621      	movls	r1, r4
 8010002:	f004 ffa5 	bl	8014f50 <LEAF_internalErrorCallback>
}
 8010006:	4620      	mov	r0, r4
 8010008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_node = node_to_alloc->next;
 801000c:	6867      	ldr	r7, [r4, #4]
        node_to_alloc->size += leftover;
 801000e:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 8010010:	463a      	mov	r2, r7
 8010012:	e7cc      	b.n	800ffae <mpool_alloc+0x5a>
        if ((pool->msize - pool->usize) > asize)
 8010014:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 8010018:	1a9b      	subs	r3, r3, r2
 801001a:	4283      	cmp	r3, r0
 801001c:	d905      	bls.n	801002a <mpool_alloc+0xd6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 801001e:	2101      	movs	r1, #1
 8010020:	4628      	mov	r0, r5
        return NULL;
 8010022:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8010024:	f004 ff94 	bl	8014f50 <LEAF_internalErrorCallback>
 8010028:	e7e0      	b.n	800ffec <mpool_alloc+0x98>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 801002a:	4631      	mov	r1, r6
 801002c:	4628      	mov	r0, r5
        return NULL;
 801002e:	4634      	mov	r4, r6
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8010030:	f004 ff8e 	bl	8014f50 <LEAF_internalErrorCallback>
 8010034:	e7da      	b.n	800ffec <mpool_alloc+0x98>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8010036:	462c      	mov	r4, r5
    return node_to_alloc->pool;
 8010038:	e7d8      	b.n	800ffec <mpool_alloc+0x98>
 801003a:	bf00      	nop

0801003c <mpool_calloc>:
{
 801003c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pool->leaf->allocCount++;
 8010040:	684e      	ldr	r6, [r1, #4]
    if (pool->head == NULL)
 8010042:	694d      	ldr	r5, [r1, #20]
    pool->leaf->allocCount++;
 8010044:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010046:	3301      	adds	r3, #1
 8010048:	64b3      	str	r3, [r6, #72]	; 0x48
    if (pool->head == NULL)
 801004a:	2d00      	cmp	r5, #0
 801004c:	d04e      	beq.n	80100ec <mpool_calloc+0xb0>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 801004e:	1dc2      	adds	r2, r0, #7
    while (node_to_alloc->size < size_to_alloc)
 8010050:	462c      	mov	r4, r5
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8010052:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 8010056:	e002      	b.n	801005e <mpool_calloc+0x22>
        node_to_alloc = node_to_alloc->next;
 8010058:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 801005a:	2c00      	cmp	r4, #0
 801005c:	d035      	beq.n	80100ca <mpool_calloc+0x8e>
    while (node_to_alloc->size < size_to_alloc)
 801005e:	68e3      	ldr	r3, [r4, #12]
 8010060:	4293      	cmp	r3, r2
 8010062:	d3f9      	bcc.n	8010058 <mpool_calloc+0x1c>
    if (leftover > pool->leaf->header_size)
 8010064:	6b70      	ldr	r0, [r6, #52]	; 0x34
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8010066:	1a9e      	subs	r6, r3, r2
    node_to_alloc->size = size_to_alloc;
 8010068:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 801006a:	42b0      	cmp	r0, r6
 801006c:	d23a      	bcs.n	80100e4 <mpool_calloc+0xa8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801006e:	688f      	ldr	r7, [r1, #8]
        new_node = create_node(&pool->mpool[offset],
 8010070:	1a33      	subs	r3, r6, r0
        offset += pool->leaf->header_size + node_to_alloc->size;
 8010072:	4402      	add	r2, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8010074:	1be6      	subs	r6, r4, r7
        offset += pool->leaf->header_size + node_to_alloc->size;
 8010076:	4432      	add	r2, r6
        new_node = create_node(&pool->mpool[offset],
 8010078:	18be      	adds	r6, r7, r2
                               node_to_alloc->next,
 801007a:	e9d4 ec01 	ldrd	lr, ip, [r4, #4]
    node->pool = block_location + header_size;
 801007e:	eb06 0800 	add.w	r8, r6, r0
 8010082:	f847 8002 	str.w	r8, [r7, r2]
    node->size = size;
 8010086:	60f3      	str	r3, [r6, #12]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8010088:	68e3      	ldr	r3, [r4, #12]
    node->next = next;
 801008a:	e9c6 ec01 	strd	lr, ip, [r6, #4]
    if (node->next != NULL)
 801008e:	6862      	ldr	r2, [r4, #4]
    if (pool->head == node_to_alloc)
 8010090:	42a5      	cmp	r5, r4
        pool->head = new_node;
 8010092:	bf08      	it	eq
 8010094:	614e      	streq	r6, [r1, #20]
    if (node->next != NULL)
 8010096:	b10a      	cbz	r2, 801009c <mpool_calloc+0x60>
        node->next->prev = node->prev;
 8010098:	68a5      	ldr	r5, [r4, #8]
 801009a:	6095      	str	r5, [r2, #8]
    if (node->prev != NULL)
 801009c:	68a5      	ldr	r5, [r4, #8]
 801009e:	b105      	cbz	r5, 80100a2 <mpool_calloc+0x66>
        node->prev->next = node->next;
 80100a0:	606a      	str	r2, [r5, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80100a2:	68cd      	ldr	r5, [r1, #12]
    node->next = NULL;
 80100a4:	2200      	movs	r2, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80100a6:	4428      	add	r0, r5
 80100a8:	4418      	add	r0, r3
    node->prev = NULL;
 80100aa:	e9c4 2201 	strd	r2, r2, [r4, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80100ae:	60c8      	str	r0, [r1, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 80100b0:	b13b      	cbz	r3, 80100c2 <mpool_calloc+0x86>
 80100b2:	4613      	mov	r3, r2
 80100b4:	4611      	mov	r1, r2
 80100b6:	6822      	ldr	r2, [r4, #0]
 80100b8:	54d1      	strb	r1, [r2, r3]
 80100ba:	3301      	adds	r3, #1
 80100bc:	68e2      	ldr	r2, [r4, #12]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d8f9      	bhi.n	80100b6 <mpool_calloc+0x7a>
    return node_to_alloc->pool;
 80100c2:	6824      	ldr	r4, [r4, #0]
}
 80100c4:	4620      	mov	r0, r4
 80100c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if ((pool->msize - pool->usize) > asize)
 80100ca:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 80100ce:	1a9b      	subs	r3, r3, r2
 80100d0:	4283      	cmp	r3, r0
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80100d2:	4630      	mov	r0, r6
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80100d4:	bf8c      	ite	hi
 80100d6:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80100d8:	4621      	movls	r1, r4
 80100da:	f004 ff39 	bl	8014f50 <LEAF_internalErrorCallback>
}
 80100de:	4620      	mov	r0, r4
 80100e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        new_node = node_to_alloc->next;
 80100e4:	6866      	ldr	r6, [r4, #4]
        node_to_alloc->size += leftover;
 80100e6:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 80100e8:	4632      	mov	r2, r6
 80100ea:	e7d1      	b.n	8010090 <mpool_calloc+0x54>
        if ((pool->msize - pool->usize) > asize)
 80100ec:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
 80100f0:	1a9b      	subs	r3, r3, r2
 80100f2:	4283      	cmp	r3, r0
 80100f4:	d905      	bls.n	8010102 <mpool_calloc+0xc6>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80100f6:	2101      	movs	r1, #1
 80100f8:	4630      	mov	r0, r6
        return NULL;
 80100fa:	462c      	mov	r4, r5
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80100fc:	f004 ff28 	bl	8014f50 <LEAF_internalErrorCallback>
 8010100:	e7e0      	b.n	80100c4 <mpool_calloc+0x88>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8010102:	4629      	mov	r1, r5
 8010104:	4630      	mov	r0, r6
        return NULL;
 8010106:	462c      	mov	r4, r5
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8010108:	f004 ff22 	bl	8014f50 <LEAF_internalErrorCallback>
 801010c:	e7da      	b.n	80100c4 <mpool_calloc+0x88>
 801010e:	bf00      	nop

08010110 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8010110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 8010112:	699f      	ldr	r7, [r3, #24]
{
 8010114:	460c      	mov	r4, r1
 8010116:	4606      	mov	r6, r0
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8010118:	2018      	movs	r0, #24
 801011a:	4639      	mov	r1, r7
{
 801011c:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 801011e:	f7ff ff19 	bl	800ff54 <mpool_alloc>
    m->leaf = mm->leaf;
 8010122:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8010124:	2210      	movs	r2, #16
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8010126:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
 8010128:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801012a:	635a      	str	r2, [r3, #52]	; 0x34
    pool->usize  = 0;
 801012c:	2300      	movs	r3, #0
    pool->msize  = size;
 801012e:	6105      	str	r5, [r0, #16]
    node->pool = block_location + header_size;
 8010130:	18a2      	adds	r2, r4, r2
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8010132:	3d10      	subs	r5, #16
    pool->usize  = 0;
 8010134:	e9c0 4302 	strd	r4, r3, [r0, #8]
    node->next = next;
 8010138:	e9c4 2300 	strd	r2, r3, [r4]
    node->size = size;
 801013c:	e9c4 3502 	strd	r3, r5, [r4, #8]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8010140:	6144      	str	r4, [r0, #20]
}
 8010142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010144 <tStack_remove>:
    return added;
}

// Remove noteVal. return 1 if removed, 0 if not
int tStack_remove(tStack* const stack, uint16_t noteVal)
{
 8010144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    _tStack* ns = *stack;
 8010148:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < ns->size; i++)
 801014a:	f8b5 4206 	ldrh.w	r4, [r5, #518]	; 0x206
 801014e:	4620      	mov	r0, r4
 8010150:	b384      	cbz	r4, 80101b4 <tStack_remove+0x70>
 8010152:	462b      	mov	r3, r5
 8010154:	2000      	movs	r0, #0
 8010156:	e002      	b.n	801015e <tStack_remove+0x1a>
 8010158:	3001      	adds	r0, #1
 801015a:	42a0      	cmp	r0, r4
 801015c:	d02c      	beq.n	80101b8 <tStack_remove+0x74>
        if (ns->data[i] == noteVal)    return i;
 801015e:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8010162:	428a      	cmp	r2, r1
 8010164:	d1f8      	bne.n	8010158 <tStack_remove+0x14>
    int foundIndex = tStack_contains(stack, noteVal);
    int removed = 0;
    
    if (foundIndex >= 0)
    {
        for (k = 0; k < (ns->size - foundIndex); k++)
 8010166:	1a26      	subs	r6, r4, r0
 8010168:	2e00      	cmp	r6, #0
 801016a:	dd28      	ble.n	80101be <tStack_remove+0x7a>
        {
            if ((k+foundIndex) >= (ns->capacity - 1))
 801016c:	f8b5 e208 	ldrh.w	lr, [r5, #520]	; 0x208
        for (k = 0; k < (ns->size - foundIndex); k++)
 8010170:	2200      	movs	r2, #0
 8010172:	3c01      	subs	r4, #1
            else
            {
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
                if ((k + foundIndex) == (ns->size - 1))
                {
                    ns->data[k + foundIndex + 1] = -1;
 8010174:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
            if ((k+foundIndex) >= (ns->capacity - 1))
 8010178:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
        for (k = 0; k < (ns->size - foundIndex); k++)
 801017c:	4613      	mov	r3, r2
 801017e:	e006      	b.n	801018e <tStack_remove+0x4a>
 8010180:	3201      	adds	r2, #1
                ns->data[k + foundIndex] = -1;
 8010182:	f8c1 8004 	str.w	r8, [r1, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 8010186:	b2d2      	uxtb	r2, r2
 8010188:	42b2      	cmp	r2, r6
 801018a:	4613      	mov	r3, r2
 801018c:	da0f      	bge.n	80101ae <tStack_remove+0x6a>
            if ((k+foundIndex) >= (ns->capacity - 1))
 801018e:	4403      	add	r3, r0
 8010190:	4573      	cmp	r3, lr
 8010192:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8010196:	daf3      	bge.n	8010180 <tStack_remove+0x3c>
        for (k = 0; k < (ns->size - foundIndex); k++)
 8010198:	3201      	adds	r2, #1
                if ((k + foundIndex) == (ns->size - 1))
 801019a:	42a3      	cmp	r3, r4
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 801019c:	688f      	ldr	r7, [r1, #8]
        for (k = 0; k < (ns->size - foundIndex); k++)
 801019e:	b2d2      	uxtb	r2, r2
                    ns->data[k + foundIndex + 1] = -1;
 80101a0:	bf08      	it	eq
 80101a2:	f8c1 8008 	streq.w	r8, [r1, #8]
                ns->data[k + foundIndex] = ns->data[k + foundIndex + 1];
 80101a6:	604f      	str	r7, [r1, #4]
        for (k = 0; k < (ns->size - foundIndex); k++)
 80101a8:	42b2      	cmp	r2, r6
 80101aa:	4613      	mov	r3, r2
 80101ac:	dbef      	blt.n	801018e <tStack_remove+0x4a>
            
        }
        // in case it got put on the stack multiple times
        foundIndex--;
        ns->size--;
        removed = 1;
 80101ae:	2001      	movs	r0, #1
        ns->size--;
 80101b0:	f8a5 4206 	strh.w	r4, [r5, #518]	; 0x206
    }
    
    return removed;
}
 80101b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int removed = 0;
 80101b8:	2000      	movs	r0, #0
}
 80101ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101be:	3c01      	subs	r4, #1
 80101c0:	e7f5      	b.n	80101ae <tStack_remove+0x6a>
 80101c2:	bf00      	nop
 80101c4:	0000      	movs	r0, r0
	...

080101c8 <tSimplePoly_initToPool>:
{
    tSimplePoly_initToPool(polyh, maxNumVoices, &leaf->mempool);
}

void    tSimplePoly_initToPool            (tSimplePoly* const polyh, int maxNumVoices, tMempool* const mp)
{
 80101c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tMempool* m = *mp;
 80101cc:	f8d2 8000 	ldr.w	r8, [r2]
{
 80101d0:	4607      	mov	r7, r0
 80101d2:	460c      	mov	r4, r1
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 80101d4:	f240 401c 	movw	r0, #1052	; 0x41c
 80101d8:	4641      	mov	r1, r8
{
 80101da:	4616      	mov	r6, r2
    _tSimplePoly* poly = *polyh = (_tSimplePoly*) mpool_alloc(sizeof(_tSimplePoly), m);
 80101dc:	f7ff feba 	bl	800ff54 <mpool_alloc>
 80101e0:	f100 031c 	add.w	r3, r0, #28
 80101e4:	6038      	str	r0, [r7, #0]
 80101e6:	4605      	mov	r5, r0
 80101e8:	075a      	lsls	r2, r3, #29
    poly->mempool = m;
 80101ea:	f8c0 8000 	str.w	r8, [r0]

    poly->numVoices = maxNumVoices;
    poly->maxNumVoices = maxNumVoices;
 80101ee:	e9c0 4402 	strd	r4, r4, [r0, #8]

    for (int i = 0; i < 128; i++)
 80101f2:	d13d      	bne.n	8010270 <tSimplePoly_initToPool+0xa8>
 80101f4:	f200 4c1c 	addw	ip, r0, #1052	; 0x41c
    {
        poly->notes[i][0] = -1;
 80101f8:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8010288 <tSimplePoly_initToPool+0xc0>
 80101fc:	eca3 7b02 	vstmia	r3!, {d7}
    for (int i = 0; i < 128; i++)
 8010200:	4563      	cmp	r3, ip
 8010202:	d1fb      	bne.n	80101fc <tSimplePoly_initToPool+0x34>
        poly->notes[i][1] = 0;
    }
    poly->stealing_on = 1;
 8010204:	2301      	movs	r3, #1
    poly->recover_stolen = 1;
    poly->voices = (int**) mpool_calloc(sizeof(int*) * poly->maxNumVoices, m);
 8010206:	00a0      	lsls	r0, r4, #2
 8010208:	4641      	mov	r1, r8
    poly->recover_stolen = 1;
 801020a:	e9c5 3305 	strd	r3, r3, [r5, #20]
    poly->voices = (int**) mpool_calloc(sizeof(int*) * poly->maxNumVoices, m);
 801020e:	f7ff ff15 	bl	801003c <mpool_calloc>

    for (int i = 0; i < poly->maxNumVoices; ++i)
 8010212:	68eb      	ldr	r3, [r5, #12]
    poly->voices = (int**) mpool_calloc(sizeof(int*) * poly->maxNumVoices, m);
 8010214:	4607      	mov	r7, r0
 8010216:	6128      	str	r0, [r5, #16]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 8010218:	2b00      	cmp	r3, #0
 801021a:	dd11      	ble.n	8010240 <tSimplePoly_initToPool+0x78>
 801021c:	2400      	movs	r4, #0
    {
        poly->voices[i] = (int*) mpool_calloc(sizeof(int) * 3, m);
        poly->voices[i][0] = -1;
 801021e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        poly->voices[i] = (int*) mpool_calloc(sizeof(int) * 3, m);
 8010222:	4641      	mov	r1, r8
 8010224:	200c      	movs	r0, #12
 8010226:	f7ff ff09 	bl	801003c <mpool_calloc>
 801022a:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
        poly->voices[i][0] = -1;
 801022e:	692f      	ldr	r7, [r5, #16]
 8010230:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 8010234:	3401      	adds	r4, #1
        poly->voices[i][0] = -1;
 8010236:	f8c3 9000 	str.w	r9, [r3]
    for (int i = 0; i < poly->maxNumVoices; ++i)
 801023a:	68eb      	ldr	r3, [r5, #12]
 801023c:	42a3      	cmp	r3, r4
 801023e:	dcf0      	bgt.n	8010222 <tSimplePoly_initToPool+0x5a>
    _tMempool* m = *mp;
 8010240:	6834      	ldr	r4, [r6, #0]
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 8010242:	f44f 7004 	mov.w	r0, #528	; 0x210
    ns->capacity = STACK_SIZE;
 8010246:	2680      	movs	r6, #128	; 0x80
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 8010248:	4621      	mov	r1, r4
 801024a:	f7ff fe83 	bl	800ff54 <mpool_alloc>
    ns->ordered = 0;
 801024e:	2300      	movs	r3, #0
    _tStack* ns = *stack = (_tStack*) mpool_alloc(sizeof(_tStack), m);
 8010250:	6068      	str	r0, [r5, #4]
    for (int i = 0; i < STACK_SIZE; i++) ns->data[i] = -1;
 8010252:	f44f 7200 	mov.w	r2, #512	; 0x200
    ns->mempool = m;
 8010256:	6004      	str	r4, [r0, #0]
    for (int i = 0; i < STACK_SIZE; i++) ns->data[i] = -1;
 8010258:	21ff      	movs	r1, #255	; 0xff
    ns->ordered = 0;
 801025a:	f8c0 320c 	str.w	r3, [r0, #524]	; 0x20c
    for (int i = 0; i < STACK_SIZE; i++) ns->data[i] = -1;
 801025e:	3004      	adds	r0, #4
    ns->pos = 0;
 8010260:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    ns->capacity = STACK_SIZE;
 8010264:	f8a0 6204 	strh.w	r6, [r0, #516]	; 0x204
    }
    tStack_initToPool(&poly->stack, mp);

}
 8010268:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    for (int i = 0; i < STACK_SIZE; i++) ns->data[i] = -1;
 801026c:	f004 bf26 	b.w	80150bc <memset>
 8010270:	4603      	mov	r3, r0
        poly->notes[i][0] = -1;
 8010272:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010276:	f500 6080 	add.w	r0, r0, #1024	; 0x400
        poly->notes[i][1] = 0;
 801027a:	2200      	movs	r2, #0
 801027c:	e9c3 1207 	strd	r1, r2, [r3, #28]
    for (int i = 0; i < 128; i++)
 8010280:	3308      	adds	r3, #8
 8010282:	4283      	cmp	r3, r0
 8010284:	d1fa      	bne.n	801027c <tSimplePoly_initToPool+0xb4>
 8010286:	e7bd      	b.n	8010204 <tSimplePoly_initToPool+0x3c>
 8010288:	ffffffff 	.word	0xffffffff
 801028c:	00000000 	.word	0x00000000

08010290 <tSimplePoly_init>:
    tSimplePoly_initToPool(polyh, maxNumVoices, &leaf->mempool);
 8010290:	3218      	adds	r2, #24
 8010292:	f7ff bf99 	b.w	80101c8 <tSimplePoly_initToPool>
 8010296:	bf00      	nop

08010298 <tSimplePoly_noteOn>:
    mpool_free((char*)poly->voices, poly->mempool);
    mpool_free((char*)poly, poly->mempool);
}

int tSimplePoly_noteOn(tSimplePoly* const polyh, int note, uint8_t vel)
{
 8010298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimplePoly* poly = *polyh;
 801029c:	f8d0 e000 	ldr.w	lr, [r0]
{
 80102a0:	4694      	mov	ip, r2
    _tStack* ns = *stack;
 80102a2:	f8de 4004 	ldr.w	r4, [lr, #4]
    for (int i = 0; i < ns->size; i++)
 80102a6:	f8b4 5206 	ldrh.w	r5, [r4, #518]	; 0x206
 80102aa:	b175      	cbz	r5, 80102ca <tSimplePoly_noteOn+0x32>
 80102ac:	b28e      	uxth	r6, r1
 80102ae:	4620      	mov	r0, r4
 80102b0:	2300      	movs	r3, #0
 80102b2:	e001      	b.n	80102b8 <tSimplePoly_noteOn+0x20>
 80102b4:	42ab      	cmp	r3, r5
 80102b6:	d008      	beq.n	80102ca <tSimplePoly_noteOn+0x32>
        if (ns->data[i] == noteVal)    return i;
 80102b8:	f850 7f04 	ldr.w	r7, [r0, #4]!
    for (int i = 0; i < ns->size; i++)
 80102bc:	3301      	adds	r3, #1
        if (ns->data[i] == noteVal)    return i;
 80102be:	42b7      	cmp	r7, r6
 80102c0:	d1f8      	bne.n	80102b4 <tSimplePoly_noteOn+0x1c>
    int whichVoice, whichNote, oldNote, alteredVoice;
    // if not in keymap or already on stack, dont do anything. else, add that note.
    if (tStack_contains(&poly->stack, note) >= 0) return -1;
 80102c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                }
            }
        }
        return alteredVoice;
    }
}
 80102c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        for (int i = 0; i < poly->numVoices; i++)
 80102ca:	f8de 7008 	ldr.w	r7, [lr, #8]
 80102ce:	2f00      	cmp	r7, #0
 80102d0:	dd46      	ble.n	8010360 <tSimplePoly_noteOn+0xc8>
 80102d2:	f8de 3010 	ldr.w	r3, [lr, #16]
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 80102d6:	2000      	movs	r0, #0
 80102d8:	f1a3 0804 	sub.w	r8, r3, #4
 80102dc:	4646      	mov	r6, r8
 80102de:	e002      	b.n	80102e6 <tSimplePoly_noteOn+0x4e>
        for (int i = 0; i < poly->numVoices; i++)
 80102e0:	3001      	adds	r0, #1
 80102e2:	42b8      	cmp	r0, r7
 80102e4:	d07f      	beq.n	80103e6 <tSimplePoly_noteOn+0x14e>
            if (poly->voices[i][0] == -1)    // if inactive voice, give this note to voice
 80102e6:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	3201      	adds	r2, #1
 80102ee:	d1f7      	bne.n	80102e0 <tSimplePoly_noteOn+0x48>
                poly->notes[note][0] = i;
 80102f0:	eb0e 06c1 	add.w	r6, lr, r1, lsl #3
                poly->voices[i][1] = vel;
 80102f4:	e9c3 1c00 	strd	r1, ip, [r3]
                poly->notes[note][0] = i;
 80102f8:	61f0      	str	r0, [r6, #28]
                poly->notes[note][1] = vel;
 80102fa:	46b6      	mov	lr, r6
 80102fc:	f8c6 c020 	str.w	ip, [r6, #32]
                poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 8010300:	b28e      	uxth	r6, r1
 8010302:	6099      	str	r1, [r3, #8]
    if (ns->ordered)
 8010304:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8010308:	b19b      	cbz	r3, 8010332 <tSimplePoly_noteOn+0x9a>
        for (j = 0; j < ns->size; j++)
 801030a:	b195      	cbz	r5, 8010332 <tSimplePoly_noteOn+0x9a>
 801030c:	2200      	movs	r2, #0
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 801030e:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8010312:	1c53      	adds	r3, r2, #1
            if (noteVal > ns->data[j])
 8010314:	f8dc 7004 	ldr.w	r7, [ip, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8010318:	4619      	mov	r1, r3
            if (noteVal > ns->data[j])
 801031a:	42b7      	cmp	r7, r6
 801031c:	da05      	bge.n	801032a <tSimplePoly_noteOn+0x92>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 801031e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8010322:	42b2      	cmp	r2, r6
 8010324:	dc06      	bgt.n	8010334 <tSimplePoly_noteOn+0x9c>
 8010326:	3201      	adds	r2, #1
 8010328:	d004      	beq.n	8010334 <tSimplePoly_noteOn+0x9c>
        for (j = 0; j < ns->size; j++)
 801032a:	b2d9      	uxtb	r1, r3
 801032c:	42a9      	cmp	r1, r5
 801032e:	460a      	mov	r2, r1
 8010330:	d3ed      	bcc.n	801030e <tSimplePoly_noteOn+0x76>
    int whereToInsert = 0;
 8010332:	2100      	movs	r1, #0
    for (j = ns->size; j > whereToInsert; j--)
 8010334:	b2eb      	uxtb	r3, r5
 8010336:	428b      	cmp	r3, r1
 8010338:	dd0a      	ble.n	8010350 <tSimplePoly_noteOn+0xb8>
 801033a:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 801033e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
        ns->data[j] = ns->data[(j - 1)];
 8010342:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
 8010346:	fa5f f38c 	uxtb.w	r3, ip
        ns->data[j] = ns->data[(j - 1)];
 801034a:	6057      	str	r7, [r2, #4]
    for (j = ns->size; j > whereToInsert; j--)
 801034c:	428b      	cmp	r3, r1
 801034e:	dcf4      	bgt.n	801033a <tSimplePoly_noteOn+0xa2>
    ns->data[whereToInsert] = noteVal;
 8010350:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    ns->size++;
 8010354:	3501      	adds	r5, #1
    ns->data[whereToInsert] = noteVal;
 8010356:	604e      	str	r6, [r1, #4]
    ns->size++;
 8010358:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
}
 801035c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((!found) && (poly->stealing_on)) //steal
 8010360:	f8de 3014 	ldr.w	r3, [lr, #20]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d0ac      	beq.n	80102c2 <tSimplePoly_noteOn+0x2a>
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 8010368:	1e68      	subs	r0, r5, #1
 801036a:	2d00      	cmp	r5, #0
 801036c:	d0ab      	beq.n	80102c6 <tSimplePoly_noteOn+0x2e>
 801036e:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8010372:	e001      	b.n	8010378 <tSimplePoly_noteOn+0xe0>
 8010374:	1c43      	adds	r3, r0, #1
 8010376:	d0a6      	beq.n	80102c6 <tSimplePoly_noteOn+0x2e>
    return ns->data[which];
 8010378:	f856 3904 	ldr.w	r3, [r6], #-4
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
 801037c:	3801      	subs	r0, #1
                whichVoice = poly->notes[whichNote][0];
 801037e:	eb0e 03c3 	add.w	r3, lr, r3, lsl #3
 8010382:	69df      	ldr	r7, [r3, #28]
                if (whichVoice >= 0)
 8010384:	2f00      	cmp	r7, #0
 8010386:	dbf5      	blt.n	8010374 <tSimplePoly_noteOn+0xdc>
                    oldNote = poly->voices[whichVoice][0];
 8010388:	f8de 3010 	ldr.w	r3, [lr, #16]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 801038c:	f06f 0602 	mvn.w	r6, #2
                    oldNote = poly->voices[whichVoice][0];
 8010390:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8010394:	6818      	ldr	r0, [r3, #0]
                    poly->voices[whichVoice][1] = vel;
 8010396:	f8c3 c004 	str.w	ip, [r3, #4]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 801039a:	eb0e 00c0 	add.w	r0, lr, r0, lsl #3
                    poly->voices[whichVoice][0] = note;
 801039e:	6019      	str	r1, [r3, #0]
                    poly->notes[oldNote][0] = -3; //mark the stolen voice as stolen (in the second dimension of the notes array)
 80103a0:	61c6      	str	r6, [r0, #28]
                    poly->notes[note][0] = whichVoice;
 80103a2:	eb0e 00c1 	add.w	r0, lr, r1, lsl #3
 80103a6:	61c7      	str	r7, [r0, #28]
                    poly->notes[note][1] = vel;
 80103a8:	f8c0 c020 	str.w	ip, [r0, #32]
                    poly->voices[whichVoice][2] = note;
 80103ac:	6099      	str	r1, [r3, #8]
    if (ns->ordered)
 80103ae:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d058      	beq.n	8010468 <tSimplePoly_noteOn+0x1d0>
        for (j = 0; j < ns->size; j++)
 80103b6:	2d00      	cmp	r5, #0
 80103b8:	d06e      	beq.n	8010498 <tSimplePoly_noteOn+0x200>
 80103ba:	b28e      	uxth	r6, r1
 80103bc:	2200      	movs	r2, #0
 80103be:	46b6      	mov	lr, r6
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 80103c0:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 80103c4:	1c53      	adds	r3, r2, #1
            if (noteVal > ns->data[j])
 80103c6:	f8dc 1004 	ldr.w	r1, [ip, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 80103ca:	4618      	mov	r0, r3
            if (noteVal > ns->data[j])
 80103cc:	42b1      	cmp	r1, r6
 80103ce:	da05      	bge.n	80103dc <tSimplePoly_noteOn+0x144>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 80103d0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80103d4:	42b2      	cmp	r2, r6
 80103d6:	dc4a      	bgt.n	801046e <tSimplePoly_noteOn+0x1d6>
 80103d8:	3201      	adds	r2, #1
 80103da:	d048      	beq.n	801046e <tSimplePoly_noteOn+0x1d6>
        for (j = 0; j < ns->size; j++)
 80103dc:	b2d8      	uxtb	r0, r3
 80103de:	42a8      	cmp	r0, r5
 80103e0:	4602      	mov	r2, r0
 80103e2:	d3ed      	bcc.n	80103c0 <tSimplePoly_noteOn+0x128>
 80103e4:	e041      	b.n	801046a <tSimplePoly_noteOn+0x1d2>
 80103e6:	2000      	movs	r0, #0
 80103e8:	e002      	b.n	80103f0 <tSimplePoly_noteOn+0x158>
            for (int i = 0 ; i < poly->numVoices; i++)
 80103ea:	3001      	adds	r0, #1
 80103ec:	42b8      	cmp	r0, r7
 80103ee:	d0b7      	beq.n	8010360 <tSimplePoly_noteOn+0xc8>
                if (poly->voices[i][0] == -2)    // if voice is released but still sounding, take over this voice
 80103f0:	f858 6f04 	ldr.w	r6, [r8, #4]!
 80103f4:	6833      	ldr	r3, [r6, #0]
 80103f6:	3302      	adds	r3, #2
 80103f8:	d1f7      	bne.n	80103ea <tSimplePoly_noteOn+0x152>
                    poly->notes[note][0] = i;
 80103fa:	eb0e 03c1 	add.w	r3, lr, r1, lsl #3
                    poly->voices[i][1] = vel;
 80103fe:	e9c6 1c00 	strd	r1, ip, [r6]
                    poly->notes[note][1] = vel;
 8010402:	469e      	mov	lr, r3
                    poly->notes[note][0] = i;
 8010404:	61d8      	str	r0, [r3, #28]
                    poly->notes[note][1] = vel;
 8010406:	f8c3 c020 	str.w	ip, [r3, #32]
                    poly->voices[i][2] = note; // voices[i][2] is the output midi note, (avoiding the -1 when a voice is inactive)
 801040a:	60b1      	str	r1, [r6, #8]
    if (ns->ordered)
 801040c:	b28e      	uxth	r6, r1
 801040e:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 8010412:	b19b      	cbz	r3, 801043c <tSimplePoly_noteOn+0x1a4>
        for (j = 0; j < ns->size; j++)
 8010414:	b195      	cbz	r5, 801043c <tSimplePoly_noteOn+0x1a4>
 8010416:	2200      	movs	r2, #0
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8010418:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 801041c:	1c53      	adds	r3, r2, #1
            if (noteVal > ns->data[j])
 801041e:	f8dc 7004 	ldr.w	r7, [ip, #4]
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8010422:	4619      	mov	r1, r3
            if (noteVal > ns->data[j])
 8010424:	42b7      	cmp	r7, r6
 8010426:	da05      	bge.n	8010434 <tSimplePoly_noteOn+0x19c>
                if ((noteVal < ns->data[j+1]) || (ns->data[j+1] == -1))
 8010428:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801042c:	1c57      	adds	r7, r2, #1
 801042e:	d006      	beq.n	801043e <tSimplePoly_noteOn+0x1a6>
 8010430:	42b2      	cmp	r2, r6
 8010432:	dc04      	bgt.n	801043e <tSimplePoly_noteOn+0x1a6>
        for (j = 0; j < ns->size; j++)
 8010434:	b2d9      	uxtb	r1, r3
 8010436:	42a9      	cmp	r1, r5
 8010438:	460a      	mov	r2, r1
 801043a:	d3ed      	bcc.n	8010418 <tSimplePoly_noteOn+0x180>
    int whereToInsert = 0;
 801043c:	2100      	movs	r1, #0
    for (j = ns->size; j > whereToInsert; j--)
 801043e:	b2eb      	uxtb	r3, r5
 8010440:	4299      	cmp	r1, r3
 8010442:	da85      	bge.n	8010350 <tSimplePoly_noteOn+0xb8>
 8010444:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8010448:	eb04 0283 	add.w	r2, r4, r3, lsl #2
        ns->data[j] = ns->data[(j - 1)];
 801044c:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
    for (j = ns->size; j > whereToInsert; j--)
 8010450:	fa5f f38c 	uxtb.w	r3, ip
        ns->data[j] = ns->data[(j - 1)];
 8010454:	6057      	str	r7, [r2, #4]
    for (j = ns->size; j > whereToInsert; j--)
 8010456:	428b      	cmp	r3, r1
 8010458:	dcf4      	bgt.n	8010444 <tSimplePoly_noteOn+0x1ac>
    ns->data[whereToInsert] = noteVal;
 801045a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    ns->size++;
 801045e:	3501      	adds	r5, #1
    ns->data[whereToInsert] = noteVal;
 8010460:	604e      	str	r6, [r1, #4]
    ns->size++;
 8010462:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
 8010466:	e779      	b.n	801035c <tSimplePoly_noteOn+0xc4>
 8010468:	b28e      	uxth	r6, r1
 801046a:	46b6      	mov	lr, r6
    int whereToInsert = 0;
 801046c:	2000      	movs	r0, #0
    for (j = ns->size; j > whereToInsert; j--)
 801046e:	b2eb      	uxtb	r3, r5
 8010470:	4298      	cmp	r0, r3
 8010472:	da08      	bge.n	8010486 <tSimplePoly_noteOn+0x1ee>
 8010474:	1e5a      	subs	r2, r3, #1
 8010476:	eb04 0683 	add.w	r6, r4, r3, lsl #2
        ns->data[j] = ns->data[(j - 1)];
 801047a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801047e:	6073      	str	r3, [r6, #4]
    for (j = ns->size; j > whereToInsert; j--)
 8010480:	b2d3      	uxtb	r3, r2
 8010482:	4283      	cmp	r3, r0
 8010484:	dcf6      	bgt.n	8010474 <tSimplePoly_noteOn+0x1dc>
    ns->data[whereToInsert] = noteVal;
 8010486:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    ns->size++;
 801048a:	3501      	adds	r5, #1
                whichVoice = poly->notes[whichNote][0];
 801048c:	4638      	mov	r0, r7
    ns->data[whereToInsert] = noteVal;
 801048e:	f8c3 e004 	str.w	lr, [r3, #4]
    ns->size++;
 8010492:	f8a4 5206 	strh.w	r5, [r4, #518]	; 0x206
}
 8010496:	e716      	b.n	80102c6 <tSimplePoly_noteOn+0x2e>
 8010498:	fa1f fe81 	uxth.w	lr, r1
    int whereToInsert = 0;
 801049c:	4628      	mov	r0, r5
 801049e:	e7f2      	b.n	8010486 <tSimplePoly_noteOn+0x1ee>

080104a0 <tSimplePoly_noteOff>:



int tSimplePoly_noteOff(tSimplePoly* const polyh, uint8_t note)
{
 80104a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tSimplePoly* poly = *polyh;
 80104a2:	6805      	ldr	r5, [r0, #0]
{
 80104a4:	460c      	mov	r4, r1
    int16_t noteToTest = -1;

    tStack_remove(&poly->stack, note);
 80104a6:	1d28      	adds	r0, r5, #4
 80104a8:	f7ff fe4c 	bl	8010144 <tStack_remove>
    poly->notes[note][0] = -1;

    int deactivatedVoice = -1;
    for (int i = 0; i < poly->maxNumVoices; i++)
 80104ac:	68e9      	ldr	r1, [r5, #12]
    poly->notes[note][0] = -1;
 80104ae:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80104b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    for (int i = 0; i < poly->maxNumVoices; i++)
 80104b6:	2900      	cmp	r1, #0
    poly->notes[note][0] = -1;
 80104b8:	61d8      	str	r0, [r3, #28]
    for (int i = 0; i < poly->maxNumVoices; i++)
 80104ba:	dd2d      	ble.n	8010518 <tSimplePoly_noteOff+0x78>
 80104bc:	692b      	ldr	r3, [r5, #16]
 80104be:	2000      	movs	r0, #0
 80104c0:	3b04      	subs	r3, #4
 80104c2:	e002      	b.n	80104ca <tSimplePoly_noteOff+0x2a>
 80104c4:	3001      	adds	r0, #1
 80104c6:	4288      	cmp	r0, r1
 80104c8:	d024      	beq.n	8010514 <tSimplePoly_noteOff+0x74>
    {
        if (poly->voices[i][0] == note)
 80104ca:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80104ce:	6816      	ldr	r6, [r2, #0]
 80104d0:	42b4      	cmp	r4, r6
 80104d2:	d1f7      	bne.n	80104c4 <tSimplePoly_noteOff+0x24>
        {
            poly->voices[i][0] = -1;
            poly->voices[i][1] = 0;
 80104d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104d8:	2400      	movs	r4, #0
 80104da:	e9c2 3400 	strd	r3, r4, [r2]
            deactivatedVoice = i;
            break;
        }
    }

    if (poly->recover_stolen)
 80104de:	69ab      	ldr	r3, [r5, #24]
 80104e0:	b1d3      	cbz	r3, 8010518 <tSimplePoly_noteOff+0x78>
    _tStack* ns = *stack;
 80104e2:	686b      	ldr	r3, [r5, #4]
    return ns->size;
 80104e4:	f8b3 6206 	ldrh.w	r6, [r3, #518]	; 0x206
    {
        //grab old notes off the stack if there are notes waiting to replace the free voice
        if (deactivatedVoice >= 0)
        {
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 80104e8:	b1b6      	cbz	r6, 8010518 <tSimplePoly_noteOff+0x78>
 80104ea:	469c      	mov	ip, r3
 80104ec:	e001      	b.n	80104f2 <tSimplePoly_noteOff+0x52>
 80104ee:	42b4      	cmp	r4, r6
 80104f0:	d012      	beq.n	8010518 <tSimplePoly_noteOff+0x78>
            {
                noteToTest = tStack_get(&poly->stack, j);
 80104f2:	f85c 3f04 	ldr.w	r3, [ip, #4]!
            for (int j = 0; j < tStack_getSize(&poly->stack); ++j)
 80104f6:	3401      	adds	r4, #1

                if (poly->notes[noteToTest][0] == -3) //if there is a stolen note waiting (marked inactive but on the stack)
 80104f8:	b21b      	sxth	r3, r3
 80104fa:	1cd9      	adds	r1, r3, #3
 80104fc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8010500:	684f      	ldr	r7, [r1, #4]
 8010502:	3703      	adds	r7, #3
 8010504:	d1f3      	bne.n	80104ee <tSimplePoly_noteOff+0x4e>
                {
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 8010506:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
                    poly->voices[deactivatedVoice][0] = noteToTest; //set the newly free voice to use the old stolen note
 801050a:	6013      	str	r3, [r2, #0]
                    poly->voices[deactivatedVoice][1] = poly->notes[noteToTest][1]; // set the velocity of the voice to be the velocity of that note
 801050c:	6a2c      	ldr	r4, [r5, #32]
 801050e:	e9c2 4301 	strd	r4, r3, [r2, #4]
                    poly->voices[deactivatedVoice][2] = noteToTest;
                    poly->notes[noteToTest][0] = deactivatedVoice; //mark that it is no longer stolen and is now active
 8010512:	6048      	str	r0, [r1, #4]
                    return -1;
 8010514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                }
            }
        }
    }
    return deactivatedVoice;
}
 8010518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801051a:	bf00      	nop

0801051c <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 801051c:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801051e:	698c      	ldr	r4, [r1, #24]
{
 8010520:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8010522:	2018      	movs	r0, #24
 8010524:	4621      	mov	r1, r4
 8010526:	f7ff fd15 	bl	800ff54 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
 801052a:	6862      	ldr	r2, [r4, #4]
    
    c->inc      =  0;
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801052c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8010550 <tCycle_init+0x34>
    c->inc      =  0;
 8010530:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8010532:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8010536:	f240 72ff 	movw	r2, #2047	; 0x7ff
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801053a:	6028      	str	r0, [r5, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801053c:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->mempool = m;
 8010540:	6004      	str	r4, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 8010542:	6142      	str	r2, [r0, #20]
    c->phase    =  0;
 8010544:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8010548:	edc0 7a04 	vstr	s15, [r0, #16]
}
 801054c:	bd38      	pop	{r3, r4, r5, pc}
 801054e:	bf00      	nop
 8010550:	4f800000 	.word	0x4f800000

08010554 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8010554:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 8010556:	4910      	ldr	r1, [pc, #64]	; (8010598 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8010558:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801059c <tCycle_tick+0x48>
    c->phase += c->inc;
 801055c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010560:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 8010562:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 8010564:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8010566:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 801056a:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 801056c:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 8010570:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 8010574:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8010576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 801057a:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 801057e:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 8010580:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8010584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010588:	ed92 7a00 	vldr	s14, [r2]
 801058c:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8010590:	eea7 0a27 	vfma.f32	s0, s14, s15
 8010594:	4770      	bx	lr
 8010596:	bf00      	nop
 8010598:	0801edc4 	.word	0x0801edc4
 801059c:	35000004 	.word	0x35000004

080105a0 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 80105a0:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80105a2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 80105a6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80105aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80105ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80105b2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80105b6:	4770      	bx	lr

080105b8 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 80105b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 80105bc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80105d8 <tCycle_setPhase+0x20>
 80105c0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80105c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80105c6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 80105ca:	ee20 0a07 	vmul.f32	s0, s0, s14
 80105ce:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80105d2:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80105d6:	4770      	bx	lr
 80105d8:	4f800000 	.word	0x4f800000

080105dc <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 80105dc:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 80105de:	6994      	ldr	r4, [r2, #24]
{
 80105e0:	4606      	mov	r6, r0
 80105e2:	460d      	mov	r5, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 80105e4:	2018      	movs	r0, #24
 80105e6:	4621      	mov	r1, r4
 80105e8:	f7ff fcb4 	bl	800ff54 <mpool_alloc>
    n->mempool = m;
    LEAF* leaf = n->mempool->leaf;
 80105ec:	6863      	ldr	r3, [r4, #4]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 80105ee:	6030      	str	r0, [r6, #0]
    
    n->type = type;
 80105f0:	7105      	strb	r5, [r0, #4]
    n->rand = leaf->random;
 80105f2:	691b      	ldr	r3, [r3, #16]
    n->mempool = m;
 80105f4:	6004      	str	r4, [r0, #0]
    n->rand = leaf->random;
 80105f6:	6143      	str	r3, [r0, #20]
}
 80105f8:	bd70      	pop	{r4, r5, r6, pc}
 80105fa:	bf00      	nop

080105fc <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

float   tNoise_tick(tNoise* const ns)
{
 80105fc:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 80105fe:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
 8010600:	6963      	ldr	r3, [r4, #20]
 8010602:	4798      	blx	r3
    
    if (n->type == PinkNoise)
 8010604:	7923      	ldrb	r3, [r4, #4]
    float rand = (n->rand() * 2.0f) - 1.0f;
 8010606:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801060a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
 801060e:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
 8010610:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
 8010614:	d12f      	bne.n	8010676 <tNoise_tick+0x7a>
    {
        float tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8010616:	ed9f 6a19 	vldr	s12, [pc, #100]	; 801067c <tNoise_tick+0x80>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801061a:	eddf 6a19 	vldr	s13, [pc, #100]	; 8010680 <tNoise_tick+0x84>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 801061e:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8010622:	ed94 5a03 	vldr	s10, [r4, #12]
 8010626:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 801062a:	edd4 3a02 	vldr	s7, [r4, #8]
 801062e:	eddf 4a15 	vldr	s9, [pc, #84]	; 8010684 <tNoise_tick+0x88>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8010632:	eddf 5a15 	vldr	s11, [pc, #84]	; 8010688 <tNoise_tick+0x8c>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8010636:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 801063a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 801068c <tNoise_tick+0x90>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 801063e:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8010642:	ed94 4a04 	vldr	s8, [r4, #16]
 8010646:	ee27 7a87 	vmul.f32	s14, s15, s14
 801064a:	eddf 4a11 	vldr	s9, [pc, #68]	; 8010690 <tNoise_tick+0x94>
 801064e:	ed9f 5a11 	vldr	s10, [pc, #68]	; 8010694 <tNoise_tick+0x98>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
 8010652:	eddf 5a11 	vldr	s11, [pc, #68]	; 8010698 <tNoise_tick+0x9c>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8010656:	eea4 7a24 	vfma.f32	s14, s8, s9
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 801065a:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 801065e:	ee36 0a26 	vadd.f32	s0, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8010662:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8010666:	eea7 0a85 	vfma.f32	s0, s15, s10
 801066a:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 801066e:	ee77 7a00 	vadd.f32	s15, s14, s0
        return (tmp * 0.05f);
 8010672:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8010676:	eeb0 0a67 	vmov.f32	s0, s15
 801067a:	bd10      	pop	{r4, pc}
 801067c:	3dcad8a1 	.word	0x3dcad8a1
 8010680:	3e97d0ff 	.word	0x3e97d0ff
 8010684:	3f7f65fe 	.word	0x3f7f65fe
 8010688:	3f76872b 	.word	0x3f76872b
 801068c:	3f86be97 	.word	0x3f86be97
 8010690:	3f11eb85 	.word	0x3f11eb85
 8010694:	3e3d3c36 	.word	0x3e3d3c36
 8010698:	3d4ccccd 	.word	0x3d4ccccd

0801069c <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
 801069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801069e:	698e      	ldr	r6, [r1, #24]
{
 80106a0:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 80106a2:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 80106a6:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 80106a8:	4631      	mov	r1, r6
 80106aa:	f7ff fc53 	bl	800ff54 <mpool_alloc>
    c->invSampleRate = leaf->invSampleRate;
 80106ae:	6873      	ldr	r3, [r6, #4]
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 80106b0:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8010720 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 80106b4:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 80106b6:	edd3 7a01 	vldr	s15, [r3, #4]
    c->lastsyncin = 0.0f;
 80106ba:	2300      	movs	r3, #0
    c->freq = 440.f;
 80106bc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8010724 <tMBPulse_init+0x88>
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80106c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->_inv_w = 1.0f / c->_w;
 80106c4:	eec6 6a27 	vdiv.f32	s13, s12, s15
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 80106c8:	6038      	str	r0, [r7, #0]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80106ca:	f44f 5290 	mov.w	r2, #4608	; 0x1200
    c->lastsyncin = 0.0f;
 80106ce:	6103      	str	r3, [r0, #16]
    c->sync = 0.0f;
 80106d0:	6143      	str	r3, [r0, #20]
    c->waveform = 0.0f;
 80106d2:	60c3      	str	r3, [r0, #12]
    c->_z = 0.0f;
 80106d4:	6303      	str	r3, [r0, #48]	; 0x30
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80106d6:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->_p = 0.0f;  /* phase [0, 1) */
 80106da:	6203      	str	r3, [r0, #32]
    c->syncdir = 1.0f;
 80106dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    c->mempool = m;
 80106e0:	6006      	str	r6, [r0, #0]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80106e2:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80106e6:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
 80106e8:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 80106ea:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80106ec:	6281      	str	r1, [r0, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
 80106ee:	62c1      	str	r1, [r0, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80106f0:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 80106f2:	edc0 7aba 	vstr	s15, [r0, #744]	; 0x2e8
    c->freq = 440.f;
 80106f6:	ed80 7a02 	vstr	s14, [r0, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80106fa:	ed80 6a09 	vstr	s12, [r0, #36]	; 0x24
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80106fe:	3066      	adds	r0, #102	; 0x66
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8010700:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
 8010702:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
 8010704:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    c->syncdir = 1.0f;
 8010708:	61a3      	str	r3, [r4, #24]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801070a:	f004 fcd7 	bl	80150bc <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801070e:	4629      	mov	r1, r5
 8010710:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8010714:	2220      	movs	r2, #32
}
 8010716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 801071a:	f004 bccf 	b.w	80150bc <memset>
 801071e:	bf00      	nop
 8010720:	3b14f209 	.word	0x3b14f209
 8010724:	43dc0000 	.word	0x43dc0000

08010728 <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
 8010728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    _tMBPulse* c = *osc;
 801072c:	6804      	ldr	r4, [r0, #0]
{
 801072e:	ed2d 8b0a 	vpush	{d8-d12}
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
 8010732:	ed94 8a05 	vldr	s16, [r4, #20]
{
 8010736:	b083      	sub	sp, #12


    p = c->_p;  /* phase [0, 1) */
 8010738:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801073c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
 8010740:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
 8010744:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 8010748:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801074c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
 8010750:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8010754:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8010758:	dd63      	ble.n	8010822 <tMBPulse_tick+0xfa>
 801075a:	f8d4 801c 	ldr.w	r8, [r4, #28]
 801075e:	f1b8 0f00 	cmp.w	r8, #0
 8010762:	dd2e      	ble.n	80107c2 <tMBPulse_tick+0x9a>
 8010764:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8010768:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801076c:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 8010770:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8010774:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8010778:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 801077c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8010780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010784:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8010788:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
 801078c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
 8010790:	2f00      	cmp	r7, #0
 8010792:	d15a      	bne.n	801084a <tMBPulse_tick+0x122>
        if (sw > 0)
 8010794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010798:	f340 81c2 	ble.w	8010b20 <tMBPulse_tick+0x3f8>
        {
            if (p >= b) {
 801079c:	eef4 aac8 	vcmpe.f32	s21, s16
 80107a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107a4:	f240 8154 	bls.w	8010a50 <tMBPulse_tick+0x328>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80107a8:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80107ac:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
 80107ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80107b2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80107b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ba:	f280 8266 	bge.w	8010c8a <tMBPulse_tick+0x562>
 80107be:	461f      	mov	r7, r3
 80107c0:	e051      	b.n	8010866 <tMBPulse_tick+0x13e>
    sw = w * c->syncdir;
 80107c2:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80107c6:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 80107ca:	ee67 7a89 	vmul.f32	s15, s15, s18
    float inv_sw = c->_inv_w * c->syncdir;
 80107ce:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 80107d2:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 80107d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80107da:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80107de:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 80107e2:	f040 84dd 	bne.w	80111a0 <tMBPulse_tick+0xa78>
        if (sw > 0) p = eof_offset;
 80107e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
        float eof_offset = sync * sw;
 80107ea:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
 80107ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 80107f2:	ee38 aac8 	vsub.f32	s20, s17, s16
        if (sw > 0) p = eof_offset;
 80107f6:	f340 80c7 	ble.w	8010988 <tMBPulse_tick+0x260>
        if (!k) {
 80107fa:	2f00      	cmp	r7, #0
 80107fc:	f040 8208 	bne.w	8010c10 <tMBPulse_tick+0x4e8>
                if (p_at_reset >= b) {
 8010800:	eef4 aaca 	vcmpe.f32	s21, s20
 8010804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010808:	f240 8395 	bls.w	8010f36 <tMBPulse_tick+0x80e>
                if (p_at_reset >= 1.0f) {
 801080c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010810:	eeb4 aae7 	vcmpe.f32	s20, s15
 8010814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010818:	f280 8287 	bge.w	8010d2a <tMBPulse_tick+0x602>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801081c:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8010820:	e22c      	b.n	8010c7c <tMBPulse_tick+0x554>
    sw = w * c->syncdir;
 8010822:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8010826:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 801082a:	ee67 7a89 	vmul.f32	s15, s15, s18
    float inv_sw = c->_inv_w * c->syncdir;
 801082e:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8010832:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8010836:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
 801083a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 801083e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8010842:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
 8010846:	2f00      	cmp	r7, #0
 8010848:	d0a4      	beq.n	8010794 <tMBPulse_tick+0x6c>
            }
        }
        
    } else {  /* normal operation, signal currently low */
        
        if (sw > 0)
 801084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801084e:	f340 8132 	ble.w	8010ab6 <tMBPulse_tick+0x38e>
        {
            if (p >= 1.0f) {
 8010852:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010856:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801085a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085e:	f280 809a 	bge.w	8010996 <tMBPulse_tick+0x26e>

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    
    c->_f[currentSamp] = x;

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8010862:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8010866:	1d33      	adds	r3, r6, #4
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8010868:	b2ea      	uxtb	r2, r5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801086a:	f003 0307 	and.w	r3, r3, #7
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801086e:	f88d 2005 	strb.w	r2, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8010872:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] = x;
 8010876:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801087a:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801087e:	2a00      	cmp	r2, #0
 8010880:	f000 81bb 	beq.w	8010bfa <tMBPulse_tick+0x4d2>
 8010884:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8010888:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801088c:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8010890:	f04f 0c00 	mov.w	ip, #0
 8010894:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
 8010898:	4dda      	ldr	r5, [pc, #872]	; (8010c04 <tMBPulse_tick+0x4dc>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801089a:	eba8 030c 	sub.w	r3, r8, ip
 801089e:	b29b      	uxth	r3, r3
 80108a0:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
 80108a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80108a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108ac:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80108b0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80108b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80108b8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80108bc:	b289      	uxth	r1, r1
 80108be:	f8bd a006 	ldrh.w	sl, [sp, #6]
 80108c2:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80108c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80108c8:	b280      	uxth	r0, r0
 80108ca:	fa1f fa8a 	uxth.w	sl, sl
 80108ce:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80108d2:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
 80108d6:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80108da:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80108dc:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
 80108e0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80108e4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80108e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80108ec:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 80108f0:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
 80108f4:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80108f8:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80108fc:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8010900:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8010902:	edda 6a01 	vldr	s13, [sl, #4]
 8010906:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801090a:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801090c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8010910:	eee6 7a26 	vfma.f32	s15, s12, s13
 8010914:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8010918:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801091c:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
 8010920:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8010922:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8010926:	d328      	bcc.n	801097a <tMBPulse_tick+0x252>
		{
			c->numBLEPs--;
 8010928:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801092c:	f10c 0c01 	add.w	ip, ip, #1
 8010930:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8010934:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8010936:	4562      	cmp	r2, ip
			c->numBLEPs--;
 8010938:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801093c:	dcad      	bgt.n	801089a <tMBPulse_tick+0x172>
 801093e:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
 8010942:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
 8010946:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
 8010948:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 801094c:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8010950:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
 8010954:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
    c->_b = b;
    c->_x = x;
 8010958:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
    c->_k = k;
 801095c:	63e7      	str	r7, [r4, #60]	; 0x3c
    z += 0.5f * (c->_f[j] - z);
 801095e:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_j = j;
 8010962:	63a6      	str	r6, [r4, #56]	; 0x38
    
    return -c->out;
 8010964:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8010968:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 801096c:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 8010970:	b003      	add	sp, #12
 8010972:	ecbd 8b0a 	vpop	{d8-d12}
 8010976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801097a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801097e:	f10c 0c01 	add.w	ip, ip, #1
 8010982:	4563      	cmp	r3, ip
 8010984:	dc89      	bgt.n	801089a <tMBPulse_tick+0x172>
 8010986:	e7da      	b.n	801093e <tMBPulse_tick+0x216>
        else if (sw < 0) p = 1.0f - eof_offset;
 8010988:	f100 8232 	bmi.w	8010df0 <tMBPulse_tick+0x6c8>
    p += sw - (int)sw;
 801098c:	eeb0 8a68 	vmov.f32	s16, s17
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8010990:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8010994:	e767      	b.n	8010866 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
 8010996:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 801099a:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8010c0c <tMBPulse_tick+0x4e4>
                p -= 1.0f;
 801099e:	ee38 8a68 	vsub.f32	s16, s16, s17
	r = MINBLEP_PHASES * phase * inv_w;
 80109a2:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 80109a6:	eeb0 0a4a 	vmov.f32	s0, s20
 80109aa:	eea8 0a09 	vfma.f32	s0, s16, s18
 80109ae:	f004 fdbb 	bl	8015528 <lrintf>
	r -= (float)i;
 80109b2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80109b6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            if (!k && p >= b) {
 80109ba:	eef4 aac8 	vcmpe.f32	s21, s16
	r -= (float)i;
 80109be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80109c2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80109c6:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80109c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80109cc:	3201      	adds	r2, #1
            if (!k && p >= b) {
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80109d2:	f003 073f 	and.w	r7, r3, #63	; 0x3f
	r -= (float)i;
 80109d6:	eed8 7a09 	vfnms.f32	s15, s16, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80109da:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 80109de:	eb04 0347 	add.w	r3, r4, r7, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80109e2:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80109e6:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80109ea:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80109ee:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80109f2:	edc3 8a3b 	vstr	s17, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80109f6:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (!k && p >= b) {
 80109fa:	f200 82e1 	bhi.w	8010fc0 <tMBPulse_tick+0x898>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 80109fe:	ee78 aa6a 	vsub.f32	s21, s16, s21
	i = lrintf(r - 0.5f);
 8010a02:	eeb0 0a4a 	vmov.f32	s0, s20
 8010a06:	eeaa 0a89 	vfma.f32	s0, s21, s18
 8010a0a:	f004 fd8d 	bl	8015528 <lrintf>
	r -= (float)i;
 8010a0e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010a12:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010a14:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8010a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010a1a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                x = -0.5f;
 8010a1e:	eef0 5a4a 	vmov.f32	s11, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010a22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010a26:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
 8010a2a:	eeda 7a89 	vfnms.f32	s15, s21, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010a2e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010a32:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010a36:	4a74      	ldr	r2, [pc, #464]	; (8010c08 <tMBPulse_tick+0x4e0>)
                k = 1;
 8010a38:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010a3a:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010a3e:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8010a42:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010a46:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010a4a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
 8010a4e:	e70a      	b.n	8010866 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
 8010a50:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 8010a54:	eddf 8a6d 	vldr	s17, [pc, #436]	; 8010c0c <tMBPulse_tick+0x4e4>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8010a58:	ee78 aa6a 	vsub.f32	s21, s16, s21
	r = MINBLEP_PHASES * phase * inv_w;
 8010a5c:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8010a60:	eeb0 0a4a 	vmov.f32	s0, s20
 8010a64:	eeaa 0aa8 	vfma.f32	s0, s21, s17
 8010a68:	f004 fd5e 	bl	8015528 <lrintf>
	r -= (float)i;
 8010a6c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010a70:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010a74:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8010a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010a7c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010a80:	3301      	adds	r3, #1
                x = -0.5f;
 8010a82:	eef0 5a4a 	vmov.f32	s11, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010a86:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8010a8c:	eeda 7aa8 	vfnms.f32	s15, s21, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010a90:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010a94:	4a5c      	ldr	r2, [pc, #368]	; (8010c08 <tMBPulse_tick+0x4e0>)
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010a96:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010a9a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010a9e:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010aa2:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
                k = 1;
 8010aa6:	2301      	movs	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010aa8:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010aac:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010ab0:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
 8010ab4:	e67b      	b.n	80107ae <tMBPulse_tick+0x86>
        else if (sw < 0)
 8010ab6:	f57f aed4 	bpl.w	8010862 <tMBPulse_tick+0x13a>
            if (p < b) {
 8010aba:	eef4 aac8 	vcmpe.f32	s21, s16
 8010abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ac2:	f300 8163 	bgt.w	8010d8c <tMBPulse_tick+0x664>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010ac6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
            if (p < 0.0f) {
 8010aca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad2:	f57f aec8 	bpl.w	8010866 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
 8010ad6:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 8010ada:	eddf 8a4c 	vldr	s17, [pc, #304]	; 8010c0c <tMBPulse_tick+0x4e4>
	r = MINBLEP_PHASES * phase * inv_w;
 8010ade:	ee28 9a09 	vmul.f32	s18, s16, s18
                p += 1.0f;
 8010ae2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8010ae6:	eeb0 0a4a 	vmov.f32	s0, s20
                p += 1.0f;
 8010aea:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
 8010aee:	eea9 0a28 	vfma.f32	s0, s18, s17
 8010af2:	f004 fd19 	bl	8015528 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010af6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	r -= (float)i;
 8010afa:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010afe:	1c6a      	adds	r2, r5, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010b00:	3301      	adds	r3, #1
                x = -0.5f;
 8010b02:	eef0 5a4a 	vmov.f32	s11, s20
	r -= (float)i;
 8010b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010b0a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010b12:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8010b16:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010b1a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8010b1e:	e788      	b.n	8010a32 <tMBPulse_tick+0x30a>
            if (p < 0.0f) {
 8010b20:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b28:	f57f ae9b 	bpl.w	8010862 <tMBPulse_tick+0x13a>
 8010b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b34:	f57f ae95 	bpl.w	8010862 <tMBPulse_tick+0x13a>
	i = lrintf(r - 0.5f);
 8010b38:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 8010b3c:	eddf 8a33 	vldr	s17, [pc, #204]	; 8010c0c <tMBPulse_tick+0x4e4>
	r = MINBLEP_PHASES * phase * inv_w;
 8010b40:	ee68 ba09 	vmul.f32	s23, s16, s18
                p += 1.0f;
 8010b44:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8010b48:	eeb0 0a4a 	vmov.f32	s0, s20
                p += 1.0f;
 8010b4c:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
 8010b50:	eeab 0aa8 	vfma.f32	s0, s23, s17
 8010b54:	f004 fce8 	bl	8015528 <lrintf>
	r -= (float)i;
 8010b58:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010b5c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
            if (k && p < b) {
 8010b60:	eef4 aac8 	vcmpe.f32	s21, s16
	r -= (float)i;
 8010b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010b68:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010b6c:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010b6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010b72:	3201      	adds	r2, #1
            if (k && p < b) {
 8010b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010b78:	f003 083f 	and.w	r8, r3, #63	; 0x3f
	r -= (float)i;
 8010b7c:	eedb 7aa8 	vfnms.f32	s15, s23, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010b80:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010b84:	4a20      	ldr	r2, [pc, #128]	; (8010c08 <tMBPulse_tick+0x4e0>)
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010b86:	eb04 0348 	add.w	r3, r4, r8, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010b8a:	f8a4 8062 	strh.w	r8, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010b8e:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010b92:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 8010b96:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010b9a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010b9e:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (k && p < b) {
 8010ba2:	f340 82f8 	ble.w	8011196 <tMBPulse_tick+0xa6e>
	r = MINBLEP_PHASES * phase * inv_w;
 8010ba6:	ee78 aa6a 	vsub.f32	s21, s16, s21
 8010baa:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8010bae:	eeb0 0a4a 	vmov.f32	s0, s20
 8010bb2:	eea8 0aaa 	vfma.f32	s0, s17, s21
 8010bb6:	f004 fcb7 	bl	8015528 <lrintf>
	r -= (float)i;
 8010bba:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010bbe:	f108 0301 	add.w	r3, r8, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010bc2:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8010bc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010bc8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010bd0:	f002 053f 	and.w	r5, r2, #63	; 0x3f
                x = 0.5f;
 8010bd4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	r -= (float)i;
 8010bd8:	eed8 7aaa 	vfnms.f32	s15, s17, s21
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010bdc:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010be0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010be4:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010be8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010bec:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010bf0:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010bf4:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
 8010bf8:	e635      	b.n	8010866 <tMBPulse_tick+0x13e>
    z += 0.5f * (c->_f[j] - z);
 8010bfa:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010bfe:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8010c02:	e69e      	b.n	8010942 <tMBPulse_tick+0x21a>
 8010c04:	08025548 	.word	0x08025548
 8010c08:	bf800000 	.word	0xbf800000
 8010c0c:	42800000 	.word	0x42800000
                if (p_at_reset >= 1.0f) {
 8010c10:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010c14:	eeb4 aae8 	vcmpe.f32	s20, s17
 8010c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1c:	f280 8131 	bge.w	8010e82 <tMBPulse_tick+0x75a>
 8010c20:	ed5f ba06 	vldr	s23, [pc, #-24]	; 8010c0c <tMBPulse_tick+0x4e4>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010c24:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
 8010c28:	ee69 ba2b 	vmul.f32	s23, s18, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010c2c:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
	i = lrintf(r - 0.5f);
 8010c30:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8010c34:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8010c38:	f004 fc76 	bl	8015528 <lrintf>
	r -= (float)i;
 8010c3c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010c40:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010c42:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8010c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010c48:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                x = 0.5f;
 8010c50:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010c54:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010c58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	r -= (float)i;
 8010c5c:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010c60:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010c64:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010c68:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010c6c:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010c70:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010c74:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010c78:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (p >= b) {
 8010c7c:	eef4 aac8 	vcmpe.f32	s21, s16
 8010c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c84:	d92e      	bls.n	8010ce4 <tMBPulse_tick+0x5bc>
 8010c86:	4647      	mov	r7, r8
 8010c88:	e5ed      	b.n	8010866 <tMBPulse_tick+0x13e>
                p -= 1.0f;
 8010c8a:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8010c0c <tMBPulse_tick+0x4e4>
 8010c8e:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
 8010c92:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8010c96:	ee29 9a27 	vmul.f32	s18, s18, s15
 8010c9a:	eea8 0a09 	vfma.f32	s0, s16, s18
 8010c9e:	f004 fc43 	bl	8015528 <lrintf>
	r -= (float)i;
 8010ca2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010ca6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010caa:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8010cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010cb0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010cb4:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010cb6:	f002 053f 	and.w	r5, r2, #63	; 0x3f
                x = 0.5f;
 8010cba:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010cbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8010cc2:	eed8 7a09 	vfnms.f32	s15, s16, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010cc6:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010cca:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010cce:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010cd2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8010cd6:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010cda:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010cde:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
 8010ce2:	e5c0      	b.n	8010866 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
 8010ce4:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 8010ce8:	ed5f 7a38 	vldr	s15, [pc, #-224]	; 8010c0c <tMBPulse_tick+0x4e4>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8010cec:	ee78 aa6a 	vsub.f32	s21, s16, s21
	r = MINBLEP_PHASES * phase * inv_w;
 8010cf0:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8010cf4:	eeb0 0a68 	vmov.f32	s0, s17
 8010cf8:	eeaa 0a89 	vfma.f32	s0, s21, s18
 8010cfc:	f004 fc14 	bl	8015528 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010d00:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	r -= (float)i;
 8010d04:	ee07 0a90 	vmov	s15, r0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010d08:	1c6a      	adds	r2, r5, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010d0a:	3301      	adds	r3, #1
                x = -0.5f;
 8010d0c:	eef0 5a68 	vmov.f32	s11, s17
	r -= (float)i;
 8010d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010d14:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010d1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8010d20:	eeda 7a89 	vfnms.f32	s15, s21, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010d24:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010d28:	e683      	b.n	8010a32 <tMBPulse_tick+0x30a>
 8010d2a:	ed5f ba48 	vldr	s23, [pc, #-288]	; 8010c0c <tMBPulse_tick+0x4e4>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010d2e:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
 8010d32:	ee69 ba2b 	vmul.f32	s23, s18, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010d36:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8010d3a:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8010d3e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8010d42:	ee78 8aca 	vsub.f32	s17, s17, s20
	i = lrintf(r - 0.5f);
 8010d46:	eea8 0aab 	vfma.f32	s0, s17, s23
 8010d4a:	f004 fbed 	bl	8015528 <lrintf>
	r -= (float)i;
 8010d4e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010d52:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010d54:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8010d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010d5a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010d62:	f002 053f 	and.w	r5, r2, #63	; 0x3f
                    x = 0.5f;
 8010d66:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	r -= (float)i;
 8010d6a:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010d6e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010d72:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010d76:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010d7a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010d7e:	ed82 aa3b 	vstr	s20, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010d82:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010d86:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
        if (sw > 0)
 8010d8a:	e777      	b.n	8010c7c <tMBPulse_tick+0x554>
	r = MINBLEP_PHASES * phase * inv_w;
 8010d8c:	ed5f 8a61 	vldr	s17, [pc, #-388]	; 8010c0c <tMBPulse_tick+0x4e4>
 8010d90:	ee78 aa6a 	vsub.f32	s21, s16, s21
	i = lrintf(r - 0.5f);
 8010d94:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 0;
 8010d98:	2700      	movs	r7, #0
 8010d9a:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8010d9e:	eea8 0aaa 	vfma.f32	s0, s17, s21
 8010da2:	f004 fbc1 	bl	8015528 <lrintf>
	r -= (float)i;
 8010da6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010daa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010dae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8010db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010db6:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010dba:	3301      	adds	r3, #1
                x = 0.5f;
 8010dbc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010dc0:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8010dc6:	eed8 7aaa 	vfnms.f32	s15, s17, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010dca:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010dce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010dd2:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010dd6:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010dda:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010dde:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8010de2:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010de6:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010dea:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
 8010dee:	e66c      	b.n	8010aca <tMBPulse_tick+0x3a2>
        else if (sw < 0) p = 1.0f - eof_offset;
 8010df0:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8010df4:	ee7b cac8 	vsub.f32	s25, s23, s16
        if (!k) {
 8010df8:	2f00      	cmp	r7, #0
 8010dfa:	f040 80d2 	bne.w	8010fa2 <tMBPulse_tick+0x87a>
                if (p_at_reset < 0.0f) {
 8010dfe:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8010e02:	ed1f ba7e 	vldr	s22, [pc, #-504]	; 8010c0c <tMBPulse_tick+0x4e4>
 8010e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e0a:	f100 810f 	bmi.w	801102c <tMBPulse_tick+0x904>
 8010e0e:	ee29 ba0b 	vmul.f32	s22, s18, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010e12:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010e16:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
	i = lrintf(r - 0.5f);
 8010e1a:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
 8010e1e:	2701      	movs	r7, #1
 8010e20:	eeb1 aa48 	vneg.f32	s20, s16
	i = lrintf(r - 0.5f);
 8010e24:	eeb0 0a68 	vmov.f32	s0, s17
 8010e28:	eea8 0a4b 	vfms.f32	s0, s16, s22
 8010e2c:	f004 fb7c 	bl	8015528 <lrintf>
	r -= (float)i;
 8010e30:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010e34:	eb09 0307 	add.w	r3, r9, r7
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010e38:	19ea      	adds	r2, r5, r7
	r -= (float)i;
 8010e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010e3e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                x = -0.5f;
 8010e42:	eef0 5a68 	vmov.f32	s11, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010e46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010e4a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
 8010e4e:	eeda 7a0b 	vfnms.f32	s15, s20, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010e52:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010e56:	eb04 0143 	add.w	r1, r4, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010e5a:	4ad3      	ldr	r2, [pc, #844]	; (80111a8 <tMBPulse_tick+0xa80>)
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010e5c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010e60:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8010e64:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010e68:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010e6c:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
            if (p < b) {
 8010e70:	eef4 aaec 	vcmpe.f32	s21, s25
 8010e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e78:	f300 80a6 	bgt.w	8010fc8 <tMBPulse_tick+0x8a0>
 8010e7c:	eeb0 8a6c 	vmov.f32	s16, s25
 8010e80:	e4f1      	b.n	8010866 <tMBPulse_tick+0x13e>
                    p_at_reset -= 1.0f;
 8010e82:	ee3a aa68 	vsub.f32	s20, s20, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8010e86:	eddf bac9 	vldr	s23, [pc, #804]	; 80111ac <tMBPulse_tick+0xa84>
	i = lrintf(r - 0.5f);
 8010e8a:	eebe ca00 	vmov.f32	s24, #224	; 0xbf000000 -0.5
 8010e8e:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8010e92:	ee38 ba0a 	vadd.f32	s22, s16, s20
	i = lrintf(r - 0.5f);
 8010e96:	eeb0 0a4c 	vmov.f32	s0, s24
 8010e9a:	eeab 0a8b 	vfma.f32	s0, s23, s22
 8010e9e:	f004 fb43 	bl	8015528 <lrintf>
	r -= (float)i;
 8010ea2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010ea6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (!k && p_at_reset >= b) {
 8010eaa:	eef4 aaca 	vcmpe.f32	s21, s20
	r -= (float)i;
 8010eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010eb2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010eb6:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010eb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010ebc:	3201      	adds	r2, #1
                if (!k && p_at_reset >= b) {
 8010ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010ec2:	f003 073f 	and.w	r7, r3, #63	; 0x3f
	r -= (float)i;
 8010ec6:	eedb 7a8b 	vfnms.f32	s15, s23, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010eca:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010ece:	eb04 0347 	add.w	r3, r4, r7, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010ed2:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010ed6:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010eda:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8010ede:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010ee2:	edc3 8a3b 	vstr	s17, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010ee6:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
 8010eea:	f200 8144 	bhi.w	8011176 <tMBPulse_tick+0xa4e>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8010eee:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
 8010ef2:	eeb0 0a4c 	vmov.f32	s0, s24
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8010ef6:	ee78 8a8a 	vadd.f32	s17, s17, s20
	i = lrintf(r - 0.5f);
 8010efa:	eeab 0aa8 	vfma.f32	s0, s23, s17
 8010efe:	f004 fb13 	bl	8015528 <lrintf>
	r -= (float)i;
 8010f02:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010f06:	1c7b      	adds	r3, r7, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010f08:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8010f0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010f0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010f12:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010f16:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010f1a:	4aa3      	ldr	r2, [pc, #652]	; (80111a8 <tMBPulse_tick+0xa80>)
	r -= (float)i;
 8010f1c:	eedb 7aa8 	vfnms.f32	s15, s23, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010f20:	eb04 0347 	add.w	r3, r4, r7, lsl #1
 8010f24:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010f28:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010f2c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010f30:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
        if (sw > 0)
 8010f34:	e67c      	b.n	8010c30 <tMBPulse_tick+0x508>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8010f36:	eddf ba9d 	vldr	s23, [pc, #628]	; 80111ac <tMBPulse_tick+0xa84>
 8010f3a:	ee38 baea 	vsub.f32	s22, s17, s21
	i = lrintf(r - 0.5f);
 8010f3e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8010f42:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8010f46:	eeab 0a2b 	vfma.f32	s0, s22, s23
 8010f4a:	f004 faed 	bl	8015528 <lrintf>
	r -= (float)i;
 8010f4e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010f52:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (p_at_reset >= 1.0f) {
 8010f56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	r -= (float)i;
 8010f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010f5e:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010f62:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010f64:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 8010f68:	eeb4 aac7 	vcmpe.f32	s20, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010f6c:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010f6e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
	r -= (float)i;
 8010f72:	eedb 7a2b 	vfnms.f32	s15, s22, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010f76:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010f7a:	4a8b      	ldr	r2, [pc, #556]	; (80111a8 <tMBPulse_tick+0xa80>)
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010f7c:	eb04 0347 	add.w	r3, r4, r7, lsl #1
                if (p_at_reset >= 1.0f) {
 8010f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010f84:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8010f88:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8010f8c:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8010f90:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010f94:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010f98:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
 8010f9c:	f6ff ae48 	blt.w	8010c30 <tMBPulse_tick+0x508>
 8010fa0:	e6cb      	b.n	8010d3a <tMBPulse_tick+0x612>
                if (p_at_reset < b) {
 8010fa2:	eef4 aaca 	vcmpe.f32	s21, s20
 8010fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010faa:	f300 8095 	bgt.w	80110d8 <tMBPulse_tick+0x9b0>
                if (p_at_reset < 0.0f) {
 8010fae:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8010fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb6:	f100 80e1 	bmi.w	801117c <tMBPulse_tick+0xa54>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010fba:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8010fbe:	e757      	b.n	8010e70 <tMBPulse_tick+0x748>
                x = 0.5f;
 8010fc0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
 8010fc4:	2700      	movs	r7, #0
 8010fc6:	e44e      	b.n	8010866 <tMBPulse_tick+0x13e>
	r = MINBLEP_PHASES * phase * inv_w;
 8010fc8:	eddf 7a78 	vldr	s15, [pc, #480]	; 80111ac <tMBPulse_tick+0xa84>
 8010fcc:	ee7c aaea 	vsub.f32	s21, s25, s21
	i = lrintf(r - 0.5f);
 8010fd0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 0;
 8010fd4:	4647      	mov	r7, r8
 8010fd6:	ee29 9a27 	vmul.f32	s18, s18, s15
}
 8010fda:	eeb0 8a6c 	vmov.f32	s16, s25
	i = lrintf(r - 0.5f);
 8010fde:	eeaa 0a89 	vfma.f32	s0, s21, s18
 8010fe2:	f004 faa1 	bl	8015528 <lrintf>
	r -= (float)i;
 8010fe6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010fea:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010fee:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8010ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8010ff4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8010ff8:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8010ffa:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8010ffe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                x = 0.5f;
 8011002:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801100a:	eeda 7a89 	vfnms.f32	s15, s21, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
 801100e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011012:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011016:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801101a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801101e:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011022:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011026:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
}
 801102a:	e41c      	b.n	8010866 <tMBPulse_tick+0x13e>
	i = lrintf(r - 0.5f);
 801102c:	eebe ca00 	vmov.f32	s24, #224	; 0xbf000000 -0.5
 8011030:	ee29 ba0b 	vmul.f32	s22, s18, s22
                    p_at_reset += 1.0f;
 8011034:	ee3a aa2b 	vadd.f32	s20, s20, s23
	i = lrintf(r - 0.5f);
 8011038:	eeb0 0a4c 	vmov.f32	s0, s24
 801103c:	eea8 0a8b 	vfma.f32	s0, s17, s22
 8011040:	f004 fa72 	bl	8015528 <lrintf>
	r -= (float)i;
 8011044:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011048:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (k && p_at_reset < b) {
 801104c:	eef4 aaca 	vcmpe.f32	s21, s20
	r -= (float)i;
 8011050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011054:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011058:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801105a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801105e:	3201      	adds	r2, #1
                if (k && p_at_reset < b) {
 8011060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011064:	f003 093f 	and.w	r9, r3, #63	; 0x3f
	r -= (float)i;
 8011068:	eed8 7a8b 	vfnms.f32	s15, s17, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801106c:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011070:	4a4d      	ldr	r2, [pc, #308]	; (80111a8 <tMBPulse_tick+0xa80>)
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011072:	eb04 0349 	add.w	r3, r4, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011076:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801107a:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801107e:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
 8011082:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011086:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801108a:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
 801108e:	dd7e      	ble.n	801118e <tMBPulse_tick+0xa66>
	r = MINBLEP_PHASES * phase * inv_w;
 8011090:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
 8011094:	eeb0 0a4c 	vmov.f32	s0, s24
 8011098:	ee78 8a8a 	vadd.f32	s17, s17, s20
 801109c:	eeab 0a28 	vfma.f32	s0, s22, s17
 80110a0:	f004 fa42 	bl	8015528 <lrintf>
	r -= (float)i;
 80110a4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80110a8:	f109 0301 	add.w	r3, r9, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80110ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80110b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80110b4:	1c6a      	adds	r2, r5, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80110b6:	f003 093f 	and.w	r9, r3, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80110ba:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
 80110be:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 80110c2:	eb04 0349 	add.w	r3, r4, r9, lsl #1
 80110c6:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80110ca:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80110ce:	edc3 ba3b 	vstr	s23, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80110d2:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
        else if (sw < 0)
 80110d6:	e6a0      	b.n	8010e1a <tMBPulse_tick+0x6f2>
	r = MINBLEP_PHASES * phase * inv_w;
 80110d8:	ed9f ba34 	vldr	s22, [pc, #208]	; 80111ac <tMBPulse_tick+0xa84>
 80110dc:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
 80110e0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80110e4:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80110e8:	eeac 0a0b 	vfma.f32	s0, s24, s22
 80110ec:	f004 fa1c 	bl	8015528 <lrintf>
	r -= (float)i;
 80110f0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80110f4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
                if (p_at_reset < 0.0f) {
 80110f8:	eeb5 aac0 	vcmpe.f32	s20, #0.0
	r -= (float)i;
 80110fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011100:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011104:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011106:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801110a:	3201      	adds	r2, #1
                if (p_at_reset < 0.0f) {
 801110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011110:	f003 093f 	and.w	r9, r3, #63	; 0x3f
	r -= (float)i;
 8011114:	eedc 7a0b 	vfnms.f32	s15, s24, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011118:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801111c:	eb04 0349 	add.w	r3, r4, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011120:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011124:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011128:	eb04 03c9 	add.w	r3, r4, r9, lsl #3
 801112c:	edc3 7a3a 	vstr	s15, [r3, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011130:	edc3 ba3b 	vstr	s23, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011134:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
 8011138:	f57f ae6f 	bpl.w	8010e1a <tMBPulse_tick+0x6f2>
	i = lrintf(r - 0.5f);
 801113c:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
 8011140:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
 8011142:	eeb0 0a48 	vmov.f32	s0, s16
 8011146:	eea8 0a8b 	vfma.f32	s0, s17, s22
 801114a:	f004 f9ed 	bl	8015528 <lrintf>
	r -= (float)i;
 801114e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011152:	eb09 0307 	add.w	r3, r9, r7
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011156:	19ea      	adds	r2, r5, r7
	r -= (float)i;
 8011158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801115c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                    x = -0.5f;
 8011164:	eef0 5a48 	vmov.f32	s11, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011168:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
 801116c:	eed8 7a8b 	vfnms.f32	s15, s17, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011170:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8011174:	e66f      	b.n	8010e56 <tMBPulse_tick+0x72e>
                    x = 0.5f;
 8011176:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801117a:	e57f      	b.n	8010c7c <tMBPulse_tick+0x554>
 801117c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 80111ac <tMBPulse_tick+0xa84>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011180:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
 8011184:	ee29 ba0b 	vmul.f32	s22, s18, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011188:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801118c:	e7d6      	b.n	801113c <tMBPulse_tick+0xa14>
                    x = -0.5f;
 801118e:	eef0 5a4c 	vmov.f32	s11, s24
                    k = 1;
 8011192:	2701      	movs	r7, #1
 8011194:	e66c      	b.n	8010e70 <tMBPulse_tick+0x748>
                x = -0.5f;
 8011196:	eef0 5a4a 	vmov.f32	s11, s20
                k = 1;
 801119a:	2701      	movs	r7, #1
 801119c:	f7ff bb63 	b.w	8010866 <tMBPulse_tick+0x13e>
    p += sw - (int)sw;
 80111a0:	eeb0 8a68 	vmov.f32	s16, s17
 80111a4:	f7ff baf2 	b.w	801078c <tMBPulse_tick+0x64>
 80111a8:	bf800000 	.word	0xbf800000
 80111ac:	42800000 	.word	0x42800000

080111b0 <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
 80111b0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80111b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80111b6:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
 80111ba:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80111be:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 80111c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80111c6:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80111ca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 80111ce:	4770      	bx	lr

080111d0 <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
 80111d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
 80111d4:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
 80111d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
 80111da:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
 80111de:	ee70 7a27 	vadd.f32	s15, s0, s15
 80111e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80111e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80111ea:	4770      	bx	lr

080111ec <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
 80111ec:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80111ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 80111f2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 80111f6:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 80111fa:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 80111fe:	eef1 7a67 	vneg.f32	s15, s15
 8011202:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8011206:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801120e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011212:	bfcc      	ite	gt
 8011214:	2201      	movgt	r2, #1
 8011216:	2200      	movle	r2, #0
 8011218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121c:	f002 0201 	and.w	r2, r2, #1
 8011220:	bf88      	it	hi
 8011222:	2200      	movhi	r2, #0
 8011224:	b122      	cbz	r2, 8011230 <tMBPulse_sync+0x44>
 8011226:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801122a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801122e:	da04      	bge.n	801123a <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8011230:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8011248 <tMBPulse_sync+0x5c>
 8011234:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 8011238:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801123a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801123e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011242:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8011246:	4770      	bx	lr
 8011248:	00000000 	.word	0x00000000

0801124c <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
 801124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801124e:	698e      	ldr	r6, [r1, #24]
{
 8011250:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8011252:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8011256:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8011258:	4631      	mov	r1, r6
 801125a:	f7fe fe7b 	bl	800ff54 <mpool_alloc>
    c->invSampleRate = leaf->invSampleRate;
 801125e:	6873      	ldr	r3, [r6, #4]
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8011260:	ed9f 6a20 	vldr	s12, [pc, #128]	; 80112e4 <tMBTriangle_init+0x98>
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8011264:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 8011268:	edd3 7a01 	vldr	s15, [r3, #4]
    c->lastsyncin = 0.0f;
 801126c:	2300      	movs	r3, #0
    c->freq = 440.f;
 801126e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80112e8 <tMBTriangle_init+0x9c>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8011272:	4604      	mov	r4, r0
    c->_inv_w = 1.0f / c->_w;
 8011274:	eec6 6a27 	vdiv.f32	s13, s12, s15
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8011278:	6038      	str	r0, [r7, #0]
    c->lastsyncin = 0.0f;
 801127a:	6103      	str	r3, [r0, #16]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801127c:	306c      	adds	r0, #108	; 0x6c
    c->sync = 0.0f;
 801127e:	f840 3c58 	str.w	r3, [r0, #-88]
    c->waveform = 0.0f;
 8011282:	f840 3c60 	str.w	r3, [r0, #-96]
    c->_z = 0.0f;
 8011286:	f840 3c40 	str.w	r3, [r0, #-64]
    c->_p = 0.25f;  /* phase [0, 1) */
 801128a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801128e:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8011292:	4916      	ldr	r1, [pc, #88]	; (80112ec <tMBTriangle_init+0xa0>)
    c->_p = 0.25f;  /* phase [0, 1) */
 8011294:	f840 3c4c 	str.w	r3, [r0, #-76]
    c->syncdir = 1.0f;
 8011298:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    c->mempool = m;
 801129c:	f840 6c6c 	str.w	r6, [r0, #-108]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80112a0:	f840 1c04 	str.w	r1, [r0, #-4]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80112a4:	4629      	mov	r1, r5
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80112a6:	f840 2c44 	str.w	r2, [r0, #-68]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80112aa:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
 80112ac:	f840 5c50 	str.w	r5, [r0, #-80]
    c->_j = 0;
 80112b0:	f840 5c38 	str.w	r5, [r0, #-56]
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80112b4:	f840 5c34 	str.w	r5, [r0, #-52]
    c->numBLEPs = 0;
 80112b8:	f840 5c08 	str.w	r5, [r0, #-8]
    c->syncdir = 1.0f;
 80112bc:	f840 3c54 	str.w	r3, [r0, #-84]
    c->invSampleRate = leaf->invSampleRate;
 80112c0:	edc0 7ae0 	vstr	s15, [r0, #896]	; 0x380
    c->freq = 440.f;
 80112c4:	ed00 7a19 	vstr	s14, [r0, #-100]	; 0xffffff9c
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80112c8:	ed00 6a12 	vstr	s12, [r0, #-72]	; 0xffffffb8
    c->_inv_w = 1.0f / c->_w;
 80112cc:	ed40 6a0c 	vstr	s13, [r0, #-48]	; 0xffffffd0
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80112d0:	f003 fef4 	bl	80150bc <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 80112d4:	4629      	mov	r1, r5
 80112d6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80112da:	2220      	movs	r2, #32
}
 80112dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 80112e0:	f003 beec 	b.w	80150bc <memset>
 80112e4:	3b14f209 	.word	0x3b14f209
 80112e8:	43dc0000 	.word	0x43dc0000
 80112ec:	11c01200 	.word	0x11c01200

080112f0 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
 80112f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tMBTriangle* c = *osc;
 80112f4:	6804      	ldr	r4, [r0, #0]
{
 80112f6:	ed2d 8b10 	vpush	{d8-d15}
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 80112fa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
 80112fe:	edd4 6a03 	vldr	s13, [r4, #12]
 8011302:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    sync = c->sync;
 8011306:	ed94 8a05 	vldr	s16, [r4, #20]
    invB = 1.0f / b;
 801130a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
{
 801130e:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
 8011310:	ee76 6a89 	vadd.f32	s13, s13, s18
    p = c->_p;  /* phase [0, 1) */
 8011314:	edd4 7a08 	vldr	s15, [r4, #32]
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8011318:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
 801131c:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
    invB = 1.0f / b;
 8011320:	eec9 ca07 	vdiv.f32	s25, s18, s14
    z = c->_z;  /* low pass filter state */
 8011324:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
 8011328:	ee26 aa8b 	vmul.f32	s20, s13, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 8011330:	ee39 7a4a 	vsub.f32	s14, s18, s20
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8011334:	e9d4 560d 	ldrd	r5, r6, [r4, #52]	; 0x34
    invB1 = 1.0f / b1;
 8011338:	ee89 da07 	vdiv.f32	s26, s18, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801133c:	dd7f      	ble.n	801143e <tMBTriangle_tick+0x14e>
 801133e:	f8d4 801c 	ldr.w	r8, [r4, #28]
 8011342:	f1b8 0f00 	cmp.w	r8, #0
 8011346:	dd34      	ble.n	80113b2 <tMBTriangle_tick+0xc2>
 8011348:	ed94 7a06 	vldr	s14, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 801134c:	edd4 ba0f 	vldr	s23, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8011350:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
 8011354:	ee67 8a28 	vmul.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8011358:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 801135c:	ee67 ba2b 	vmul.f32	s23, s14, s23
    p += sw - (int)sw;
 8011360:	eebd 8ae8 	vcvt.s32.f32	s16, s17
 8011364:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8011368:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801136c:	ee37 8ac8 	vsub.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 8011370:	2e00      	cmp	r6, #0
 8011372:	d176      	bne.n	8011462 <tMBTriangle_tick+0x172>
        
        x = -0.5f + p * invB;
 8011374:	eefe 9a00 	vmov.f32	s19, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8011378:	eef5 8ac0 	vcmpe.f32	s17, #0.0
        x = -0.5f + p * invB;
 801137c:	eeb0 9a69 	vmov.f32	s18, s19
        if (sw > 0)
 8011380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 8011384:	eea8 9a2c 	vfma.f32	s18, s16, s25
        if (sw > 0)
 8011388:	f340 8296 	ble.w	80118b8 <tMBTriangle_tick+0x5c8>
        {
            if (p >= b) {
 801138c:	eeb4 8aca 	vcmpe.f32	s16, s20
 8011390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011394:	f280 8206 	bge.w	80117a4 <tMBTriangle_tick+0x4b4>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011398:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 801139c:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 801139e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80113a2:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80113a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113aa:	f280 836d 	bge.w	8011a88 <tMBTriangle_tick+0x798>
 80113ae:	461e      	mov	r6, r3
 80113b0:	e06f      	b.n	8011492 <tMBTriangle_tick+0x1a2>
    sw = w * c->syncdir;
 80113b2:	edd4 ba06 	vldr	s23, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80113b6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 80113ba:	ee68 8aab 	vmul.f32	s17, s17, s23
    float inv_sw = c->_inv_w * c->syncdir;
 80113be:	ee6b ba87 	vmul.f32	s23, s23, s14
    p += sw - (int)sw;
 80113c2:	eebd cae8 	vcvt.s32.f32	s24, s17
 80113c6:	ee77 9aa8 	vadd.f32	s19, s15, s17
 80113ca:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 80113ce:	ee39 eacc 	vsub.f32	s28, s19, s24
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 80113d2:	f040 8712 	bne.w	80121fa <tMBTriangle_tick+0xf0a>
        if (sw > 0) p = eof_offset;
 80113d6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
        float eof_offset = sync * sw;
 80113da:	ee28 8a28 	vmul.f32	s16, s16, s17
        if (sw > 0) p = eof_offset;
 80113de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 80113e2:	ee7e da48 	vsub.f32	s27, s28, s16
        if (sw > 0) p = eof_offset;
 80113e6:	f340 8150 	ble.w	801168a <tMBTriangle_tick+0x39a>
        if (!k) {
 80113ea:	2e00      	cmp	r6, #0
 80113ec:	f040 82e3 	bne.w	80119b6 <tMBTriangle_tick+0x6c6>
                if (p_at_reset >= b) {
 80113f0:	eeb4 aaed 	vcmpe.f32	s20, s27
 80113f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113f8:	f240 8522 	bls.w	8011e40 <tMBTriangle_tick+0xb50>
                if (p_at_reset >= 1.0f) {
 80113fc:	eef4 dac9 	vcmpe.f32	s27, s18
 8011400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011404:	f280 83b8 	bge.w	8011b78 <tMBTriangle_tick+0x888>
 8011408:	eddf 7ae5 	vldr	s15, [pc, #916]	; 80117a0 <tMBTriangle_tick+0x4b0>
            x = -0.5f + p_at_reset * invB;
 801140c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8011410:	ee6b baa7 	vmul.f32	s23, s23, s15
 8011414:	eeb0 ca40 	vmov.f32	s24, s0
	i = lrintf(r - 0.5f);
 8011418:	eea8 0a2b 	vfma.f32	s0, s16, s23
 801141c:	f004 f884 	bl	8015528 <lrintf>
	r -= (float)i;
 8011420:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 8011424:	eeac caad 	vfma.f32	s24, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011428:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	r -= (float)i;
 801142c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011430:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011434:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
 8011438:	eed8 7a2b 	vfnms.f32	s15, s16, s23
 801143c:	e2fb      	b.n	8011a36 <tMBTriangle_tick+0x746>
    sw = w * c->syncdir;
 801143e:	edd4 ba06 	vldr	s23, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8011442:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8011446:	ee6b 8aa8 	vmul.f32	s17, s23, s17
    float inv_sw = c->_inv_w * c->syncdir;
 801144a:	ee6b ba87 	vmul.f32	s23, s23, s14
    p += sw - (int)sw;
 801144e:	eebd 8ae8 	vcvt.s32.f32	s16, s17
 8011452:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8011456:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801145a:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (!k) {  /* normal operation, slope currently up */
 801145e:	2e00      	cmp	r6, #0
 8011460:	d088      	beq.n	8011374 <tMBTriangle_tick+0x84>
            }
        }
        
    } else {  /* normal operation, slope currently down */
        
        x = 0.5f - (p - b) * invB1;
 8011462:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
        if (sw > 0)
 8011466:	eef5 8ac0 	vcmpe.f32	s17, #0.0
        x = 0.5f - (p - b) * invB1;
 801146a:	ee7a 7a48 	vsub.f32	s15, s20, s16
 801146e:	eeb0 9a69 	vmov.f32	s18, s19
        if (sw > 0)
 8011472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 8011476:	eea7 9a8d 	vfma.f32	s18, s15, s26
        if (sw > 0)
 801147a:	f340 81d1 	ble.w	8011820 <tMBTriangle_tick+0x530>
        {
            if (p >= 1.0f) {
 801147e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8011482:	eeb4 8acb 	vcmpe.f32	s16, s22
 8011486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801148a:	f280 8112 	bge.w	80116b2 <tMBTriangle_tick+0x3c2>
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
    
    c->_f[currentSamp] = x;

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801148e:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8011492:	1d2b      	adds	r3, r5, #4
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8011494:	b2ff      	uxtb	r7, r7
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8011496:	f003 0307 	and.w	r3, r3, #7
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801149a:	f88d 7005 	strb.w	r7, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801149e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] = x;
 80114a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80114a6:	ed83 9a11 	vstr	s18, [r3, #68]	; 0x44
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80114aa:	2a00      	cmp	r2, #0
 80114ac:	f000 827e 	beq.w	80119ac <tMBTriangle_tick+0x6bc>
 80114b0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 80114b4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80114b8:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80114bc:	2200      	movs	r2, #0
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80114be:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80114c2:	49b5      	ldr	r1, [pc, #724]	; (8011798 <tMBTriangle_tick+0x4a8>)
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80114c4:	4fb5      	ldr	r7, [pc, #724]	; (801179c <tMBTriangle_tick+0x4ac>)
 80114c6:	e051      	b.n	801156c <tMBTriangle_tick+0x27c>
 80114c8:	f8bd e006 	ldrh.w	lr, [sp, #6]
 80114cc:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80114d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80114d4:	fa1f fe8e 	uxth.w	lr, lr
 80114d8:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 80114dc:	fa1f f989 	uxth.w	r9, r9
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	fa1f f888 	uxth.w	r8, r8
 80114e6:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80114ea:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80114ee:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 80114f2:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80114f6:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80114fa:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 80114fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011502:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 8011506:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 801150a:	eb07 0ec8 	add.w	lr, r7, r8, lsl #3
 801150e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011512:	ed99 7a00 	vldr	s14, [r9]
 8011516:	edde 5a01 	vldr	s11, [lr, #4]
 801151a:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801151e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8011522:	eea5 7a25 	vfma.f32	s14, s10, s11
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8011526:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801152a:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801152c:	fa1f fe8e 	uxth.w	lr, lr
 8011530:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011534:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8011538:	eee6 7a87 	vfma.f32	s15, s13, s14
 801153c:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8011540:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8011544:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8011548:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801154c:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8011550:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8011554:	459e      	cmp	lr, r3
 8011556:	d304      	bcc.n	8011562 <tMBTriangle_tick+0x272>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 8011558:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801155c:	3b01      	subs	r3, #1
 801155e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8011562:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011566:	3201      	adds	r2, #1
 8011568:	4293      	cmp	r3, r2
 801156a:	dd72      	ble.n	8011652 <tMBTriangle_tick+0x362>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801156c:	ebac 0302 	sub.w	r3, ip, r2
 8011570:	b29b      	uxth	r3, r3
 8011572:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 8011576:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801157a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801157e:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8011582:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011586:	b29b      	uxth	r3, r3
 8011588:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801158c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011590:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 8011594:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8011598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801159c:	d494      	bmi.n	80114c8 <tMBTriangle_tick+0x1d8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801159e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80115a2:	f8bd e006 	ldrh.w	lr, [sp, #6]
 80115a6:	b29b      	uxth	r3, r3
 80115a8:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 80115ac:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80115b0:	fa1f fe8e 	uxth.w	lr, lr
 80115b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80115b8:	fa1f f989 	uxth.w	r9, r9
 80115bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80115c0:	fa1f f888 	uxth.w	r8, r8
 80115c4:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
 80115c8:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80115cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80115d0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80115d4:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80115d8:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 80115dc:	b29b      	uxth	r3, r3
 80115de:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80115e2:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 80115e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80115ea:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 80115ee:	eb01 0889 	add.w	r8, r1, r9, lsl #2
 80115f2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80115f6:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80115fa:	edd8 6a01 	vldr	s13, [r8, #4]
 80115fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011602:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8011606:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801160a:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801160e:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8011612:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8011616:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801161a:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801161e:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8011622:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8011626:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801162a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801162e:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8011632:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8011636:	3340      	adds	r3, #64	; 0x40
 8011638:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801163c:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8011640:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8011644:	459e      	cmp	lr, r3
 8011646:	d287      	bcs.n	8011558 <tMBTriangle_tick+0x268>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8011648:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801164c:	3201      	adds	r2, #1
 801164e:	4293      	cmp	r3, r2
 8011650:	dc8c      	bgt.n	801156c <tMBTriangle_tick+0x27c>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8011652:	ee77 7aea 	vsub.f32	s15, s15, s21
    c->out = z;
    j = (j+1) & 7;
 8011656:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 8011658:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    c->_p = p;
 801165c:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8011660:	eeb0 7a6a 	vmov.f32	s14, s21
    j = (j+1) & 7;
 8011664:	f005 0507 	and.w	r5, r5, #7
    c->_w = w;
    c->_b = b;
 8011668:	ed84 aa0a 	vstr	s20, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
 801166c:	63a6      	str	r6, [r4, #56]	; 0x38
    z += 0.5f * (c->_f[j] - z);
 801166e:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->_j = j;
 8011672:	6365      	str	r5, [r4, #52]	; 0x34
    
    return -c->out;
 8011674:	eeb1 0a47 	vneg.f32	s0, s14
    c->out = z;
 8011678:	ed84 7a01 	vstr	s14, [r4, #4]
    c->_z = z;
 801167c:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
}
 8011680:	b003      	add	sp, #12
 8011682:	ecbd 8b10 	vpop	{d8-d15}
 8011686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (sw < 0) p = 1.0f - eof_offset;
 801168a:	f100 82fa 	bmi.w	8011c82 <tMBTriangle_tick+0x992>
        if (!k) {
 801168e:	2e00      	cmp	r6, #0
 8011690:	f000 8269 	beq.w	8011b66 <tMBTriangle_tick+0x876>
            x = 0.5f - (p_at_reset - b) * invB1;
 8011694:	ee3a 7a08 	vadd.f32	s14, s20, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8011698:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            x = 0.5f - (p_at_reset - b) * invB1;
 801169c:	ee7c 7a69 	vsub.f32	s15, s24, s19
 80116a0:	eeb0 9a4b 	vmov.f32	s18, s22
    p += sw - (int)sw;
 80116a4:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 80116a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116ac:	eead 9a27 	vfma.f32	s18, s26, s15
            if (sw > 0)
 80116b0:	e6ef      	b.n	8011492 <tMBTriangle_tick+0x1a2>
	i = lrintf(r - 0.5f);
 80116b2:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
 80116b6:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80117a0 <tMBTriangle_tick+0x4b0>
                p -= 1.0f;
 80116ba:	ee38 ca4b 	vsub.f32	s24, s16, s22
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 80116be:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
 80116c2:	eeb0 0a49 	vmov.f32	s0, s18
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 80116c6:	ee3c 7a8d 	vadd.f32	s14, s25, s26
	i = lrintf(r - 0.5f);
 80116ca:	eeab 0a8c 	vfma.f32	s0, s23, s24
	scale *= w;
 80116ce:	ee68 8a87 	vmul.f32	s17, s17, s14
	i = lrintf(r - 0.5f);
 80116d2:	f003 ff29 	bl	8015528 <lrintf>
	r -= (float)i;
 80116d6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80116da:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80116de:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
 80116e2:	eeb4 aacc 	vcmpe.f32	s20, s24
	r -= (float)i;
 80116e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80116ea:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80116ec:	3701      	adds	r7, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80116ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80116f2:	f003 063f 	and.w	r6, r3, #63	; 0x3f
            if (!k && p >= b) {
 80116f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 80116fa:	eedb 7a8c 	vfnms.f32	s15, s23, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80116fe:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011702:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011706:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 801170a:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801170e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011712:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011716:	edc3 8a3c 	vstr	s17, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801171a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801171e:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011722:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
 8011726:	f200 8403 	bhi.w	8011f30 <tMBTriangle_tick+0xc40>
                x = 0.5f - (p - b) * invB1;
 801172a:	ee7a 7a0b 	vadd.f32	s15, s20, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801172e:	3701      	adds	r7, #1
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8011730:	ee7c ca4a 	vsub.f32	s25, s24, s20
	i = lrintf(r - 0.5f);
 8011734:	eeb0 0a49 	vmov.f32	s0, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011738:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
 801173c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8011740:	eeb0 9a69 	vmov.f32	s18, s19
	i = lrintf(r - 0.5f);
 8011744:	eeab 0aac 	vfma.f32	s0, s23, s25
                p -= 1.0f;
 8011748:	eeb0 8a4c 	vmov.f32	s16, s24
                x = 0.5f - (p - b) * invB1;
 801174c:	eea7 9a8d 	vfma.f32	s18, s15, s26
	i = lrintf(r - 0.5f);
 8011750:	f003 feea 	bl	8015528 <lrintf>
	r -= (float)i;
 8011754:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011758:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801175a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801175e:	eef1 7a68 	vneg.f32	s15, s17
	r -= (float)i;
 8011762:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                k = 1;
 801176a:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801176c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011770:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
 8011774:	ee9b 7aac 	vfnms.f32	s14, s23, s25
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011778:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801177c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011780:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011784:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011788:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801178c:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011790:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8011794:	e67d      	b.n	8011492 <tMBTriangle_tick+0x1a2>
 8011796:	bf00      	nop
 8011798:	08020e44 	.word	0x08020e44
 801179c:	08025548 	.word	0x08025548
 80117a0:	42800000 	.word	0x42800000
                x = 0.5f - (p - b) * invB1;;
 80117a4:	ed1f ca02 	vldr	s24, [pc, #-8]	; 80117a0 <tMBTriangle_tick+0x4b0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 80117a8:	ee78 da4a 	vsub.f32	s27, s16, s20
	i = lrintf(r - 0.5f);
 80117ac:	eeb0 0a69 	vmov.f32	s0, s19
 80117b0:	ee2b ca8c 	vmul.f32	s24, s23, s24
                x = 0.5f - (p - b) * invB1;;
 80117b4:	ee7a 7a48 	vsub.f32	s15, s20, s16
 80117b8:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 80117bc:	eead 0a8c 	vfma.f32	s0, s27, s24
 80117c0:	ee3c ba8d 	vadd.f32	s22, s25, s26
                x = 0.5f - (p - b) * invB1;;
 80117c4:	eea7 9a8d 	vfma.f32	s18, s15, s26
	i = lrintf(r - 0.5f);
 80117c8:	f003 feae 	bl	8015528 <lrintf>
	r -= (float)i;
 80117cc:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80117d0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80117d4:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80117d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80117dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80117e0:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80117e2:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80117e4:	ee68 7acb 	vnmul.f32	s15, s17, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80117e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80117ec:	ee9d 7a8c 	vfnms.f32	s14, s27, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80117f0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80117f4:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80117f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80117fc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011800:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011808:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801180c:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011810:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011814:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
                k = 1;
 8011818:	2301      	movs	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801181a:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 801181e:	e5be      	b.n	801139e <tMBTriangle_tick+0xae>
        else if (sw < 0)
 8011820:	f57f ae35 	bpl.w	801148e <tMBTriangle_tick+0x19e>
            if (p < b) {
 8011824:	eeb4 8aca 	vcmpe.f32	s16, s20
 8011828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182c:	f100 81ed 	bmi.w	8011c0a <tMBTriangle_tick+0x91a>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011830:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (p < 0.0f) {
 8011834:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183c:	f57f ae29 	bpl.w	8011492 <tMBTriangle_tick+0x1a2>
                p += 1.0f;
 8011840:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8011844:	ed1f ba2a 	vldr	s22, [pc, #-168]	; 80117a0 <tMBTriangle_tick+0x4b0>
	r = MINBLEP_PHASES * phase * inv_w;
 8011848:	ee6b ba88 	vmul.f32	s23, s23, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801184c:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
 801184e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 1;
 8011852:	2601      	movs	r6, #1
                p += 1.0f;
 8011854:	ee38 8a29 	vadd.f32	s16, s16, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011858:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
 801185c:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8011860:	eeab 0a8b 	vfma.f32	s0, s23, s22
                x = 0.5f - (p - b) * invB1;
 8011864:	ee7a 7a48 	vsub.f32	s15, s20, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8011868:	ee7c ca8d 	vadd.f32	s25, s25, s26
                x = 0.5f - (p - b) * invB1;
 801186c:	eea7 9a8d 	vfma.f32	s18, s15, s26
	i = lrintf(r - 0.5f);
 8011870:	f003 fe5a 	bl	8015528 <lrintf>
	r -= (float)i;
 8011874:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011878:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801187c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011880:	ee6c cae8 	vnmul.f32	s25, s25, s17
	r -= (float)i;
 8011884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011888:	3301      	adds	r3, #1
 801188a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801188e:	eedb 7a8b 	vfnms.f32	s15, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011892:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011896:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801189a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801189e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80118a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80118a6:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80118aa:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80118ae:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80118b2:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 80118b6:	e5ec      	b.n	8011492 <tMBTriangle_tick+0x1a2>
            if (p < 0.0f) {
 80118b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80118bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c0:	f57f ade5 	bpl.w	801148e <tMBTriangle_tick+0x19e>
 80118c4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80118c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118cc:	f57f addf 	bpl.w	801148e <tMBTriangle_tick+0x19e>
	r = MINBLEP_PHASES * phase * inv_w;
 80118d0:	ee6b da88 	vmul.f32	s27, s23, s16
	i = lrintf(r - 0.5f);
 80118d4:	ed1f ba4e 	vldr	s22, [pc, #-312]	; 80117a0 <tMBTriangle_tick+0x4b0>
 80118d8:	eeb0 0a69 	vmov.f32	s0, s19
                p += 1.0f;
 80118dc:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 80118e0:	ee3c 9a8d 	vadd.f32	s18, s25, s26
	i = lrintf(r - 0.5f);
 80118e4:	eead 0a8b 	vfma.f32	s0, s27, s22
 80118e8:	f003 fe1e 	bl	8015528 <lrintf>
	r -= (float)i;
 80118ec:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80118f0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                p += 1.0f;
 80118f4:	ee38 8a0c 	vadd.f32	s16, s16, s24
	r -= (float)i;
 80118f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80118fc:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011900:	3301      	adds	r3, #1
 8011902:	ee69 8a28 	vmul.f32	s17, s18, s17
            if (k && p < b) {
 8011906:	eeb4 aac8 	vcmpe.f32	s20, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801190a:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801190c:	f003 083f 	and.w	r8, r3, #63	; 0x3f
	r -= (float)i;
 8011910:	eedd 7a8b 	vfnms.f32	s15, s27, s22
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011914:	eeb1 7a68 	vneg.f32	s14, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011918:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801191c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
            if (k && p < b) {
 8011920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011924:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011928:	eb04 0248 	add.w	r2, r4, r8, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801192c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011930:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011934:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011938:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801193c:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011940:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011944:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (k && p < b) {
 8011948:	f340 844e 	ble.w	80121e8 <tMBTriangle_tick+0xef8>
                x = -0.5f + p * invB;
 801194c:	ee38 da4a 	vsub.f32	s26, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011950:	3701      	adds	r7, #1
 8011952:	ee2b ba8b 	vmul.f32	s22, s23, s22
	i = lrintf(r - 0.5f);
 8011956:	eeb0 0a69 	vmov.f32	s0, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801195a:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
 801195e:	eeb0 9a69 	vmov.f32	s18, s19
	i = lrintf(r - 0.5f);
 8011962:	eeab 0a0d 	vfma.f32	s0, s22, s26
 8011966:	f003 fddf 	bl	8015528 <lrintf>
	r -= (float)i;
 801196a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801196e:	f108 0301 	add.w	r3, r8, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011972:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8011976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801197a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                x = -0.5f + p * invB;
 801197e:	eeac 9a88 	vfma.f32	s18, s25, s16
	r -= (float)i;
 8011982:	eedb 7a0d 	vfnms.f32	s15, s22, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011986:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801198a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801198e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011992:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011996:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801199a:	edc3 8a3c 	vstr	s17, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801199e:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80119a2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80119a6:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 80119aa:	e572      	b.n	8011492 <tMBTriangle_tick+0x1a2>
    z += 0.5f * (c->_f[j] - z);
 80119ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80119b0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80119b4:	e64d      	b.n	8011652 <tMBTriangle_tick+0x362>
            x = 0.5f - (p_at_reset - b) * invB1;
 80119b6:	ee7c 9a69 	vsub.f32	s19, s24, s19
 80119ba:	ee7a 7a08 	vadd.f32	s15, s20, s16
                if (p_at_reset >= 1.0f) {
 80119be:	eef4 dac9 	vcmpe.f32	s27, s18
            x = 0.5f - (p_at_reset - b) * invB1;
 80119c2:	eeb0 ca4b 	vmov.f32	s24, s22
 80119c6:	ee77 7aa9 	vadd.f32	s15, s15, s19
                if (p_at_reset >= 1.0f) {
 80119ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 80119ce:	eea7 ca8d 	vfma.f32	s24, s15, s26
                if (p_at_reset >= 1.0f) {
 80119d2:	f280 81c6 	bge.w	8011d62 <tMBTriangle_tick+0xa72>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80119d6:	ee3c ea8d 	vadd.f32	s28, s25, s26
 80119da:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80117a0 <tMBTriangle_tick+0x4b0>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80119de:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
 80119e2:	ee6b baa7 	vmul.f32	s23, s23, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80119e6:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 80119ea:	ee2e ea28 	vmul.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
 80119ee:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80119f2:	3601      	adds	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80119f4:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80119f6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	i = lrintf(r - 0.5f);
 80119fa:	eea8 0a2b 	vfma.f32	s0, s16, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80119fe:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8011a02:	f003 fd91 	bl	8015528 <lrintf>
	r -= (float)i;
 8011a06:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011a0a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011a0e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8011a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011a16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011a1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011a1e:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
 8011a22:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011a26:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011a2a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011a2e:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011a32:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8011a36:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011a3a:	3601      	adds	r6, #1
            if (p >= b) {
 8011a3c:	eeb4 aac8 	vcmpe.f32	s20, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011a40:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011a42:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8011a46:	ee39 ca4c 	vsub.f32	s24, s18, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011a4a:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011a4e:	eb04 0346 	add.w	r3, r4, r6, lsl #1
            if (p >= b) {
 8011a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011a56:	eb06 0246 	add.w	r2, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011a5a:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	scale *= w;
 8011a5e:	ee2c ca28 	vmul.f32	s24, s24, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011a62:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011a66:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011a6a:	f04f 0300 	mov.w	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011a6e:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011a72:	ed82 ca3c 	vstr	s24, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011a76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011a7a:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p >= b) {
 8011a7e:	d93a      	bls.n	8011af6 <tMBTriangle_tick+0x806>
            x = -0.5f + p * invB;
 8011a80:	eeac 9a88 	vfma.f32	s18, s25, s16
            k = 0;
 8011a84:	4646      	mov	r6, r8
 8011a86:	e504      	b.n	8011492 <tMBTriangle_tick+0x1a2>
                p -= 1.0f;
 8011a88:	ed5f 7abb 	vldr	s15, [pc, #-748]	; 80117a0 <tMBTriangle_tick+0x4b0>
 8011a8c:	ee38 8a69 	vsub.f32	s16, s16, s19
                x = -0.5f + p * invB;
 8011a90:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011a94:	3701      	adds	r7, #1
 8011a96:	ee6b baa7 	vmul.f32	s23, s23, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8011a9a:	ee3c da8d 	vadd.f32	s26, s25, s26
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011a9e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
 8011aa2:	eeb0 9a40 	vmov.f32	s18, s0
	i = lrintf(r - 0.5f);
 8011aa6:	eeab 0a88 	vfma.f32	s0, s23, s16
 8011aaa:	f003 fd3d 	bl	8015528 <lrintf>
	r -= (float)i;
 8011aae:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011ab2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011ab6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8011aba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011abe:	3301      	adds	r3, #1
	scale *= w;
 8011ac0:	ee2d da28 	vmul.f32	s26, s26, s17
                x = -0.5f + p * invB;
 8011ac4:	eeac 9a88 	vfma.f32	s18, s25, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8011acc:	eedb 7a88 	vfnms.f32	s15, s23, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011ad0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011ad4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011ad8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011adc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011ae0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ae4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011ae8:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011aec:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011af0:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8011af4:	e4cd      	b.n	8011492 <tMBTriangle_tick+0x1a2>
                x = 0.5f - (p - b) * invB1;
 8011af6:	ee3a 7a48 	vsub.f32	s14, s20, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011afa:	3701      	adds	r7, #1
                x = 0.5f - (p - b) * invB1;
 8011afc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8011b00:	ee78 9a4a 	vsub.f32	s19, s16, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011b04:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8011b08:	eeb0 0a49 	vmov.f32	s0, s18
                x = 0.5f - (p - b) * invB1;
 8011b0c:	eee7 7a0d 	vfma.f32	s15, s14, s26
 8011b10:	ee7c ca8d 	vadd.f32	s25, s25, s26
	i = lrintf(r - 0.5f);
 8011b14:	eea9 0aab 	vfma.f32	s0, s19, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011b18:	ee68 caec 	vnmul.f32	s25, s17, s25
                x = 0.5f - (p - b) * invB1;
 8011b1c:	eeb0 9a67 	vmov.f32	s18, s15
	i = lrintf(r - 0.5f);
 8011b20:	f003 fd02 	bl	8015528 <lrintf>
	r -= (float)i;
 8011b24:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011b28:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011b2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011b2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
 8011b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                k = 1;
 8011b3a:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011b3c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011b40:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
 8011b44:	eed9 7aab 	vfnms.f32	s15, s19, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011b48:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011b4c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011b50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011b54:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011b58:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011b5c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011b60:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8011b64:	e495      	b.n	8011492 <tMBTriangle_tick+0x1a2>
            x = -0.5f + p_at_reset * invB;
 8011b66:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8011b6a:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    p += sw - (int)sw;
 8011b6e:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
 8011b72:	eeac 9aad 	vfma.f32	s18, s25, s27
            else if (sw < 0)
 8011b76:	e48c      	b.n	8011492 <tMBTriangle_tick+0x1a2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8011b78:	ee7c 7a8d 	vadd.f32	s15, s25, s26
 8011b7c:	ed9f 7af0 	vldr	s14, [pc, #960]	; 8011f40 <tMBTriangle_tick+0xc50>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011b80:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
 8011b84:	ee6b ba87 	vmul.f32	s23, s23, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011b88:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 8011b8c:	ee67 eaa8 	vmul.f32	s29, s15, s17
                    p_at_reset -= 1.0f;
 8011b90:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011b94:	3601      	adds	r6, #1
                    x = -0.5f + p_at_reset * invB;
 8011b96:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011b9a:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011b9c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    p_at_reset -= 1.0f;
 8011ba0:	ee7d dae9 	vsub.f32	s27, s27, s19
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011ba4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8011ba8:	eeb0 0a49 	vmov.f32	s0, s18
                    x = -0.5f + p_at_reset * invB;
 8011bac:	eeb0 ca49 	vmov.f32	s24, s18
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8011bb0:	ee38 ba2d 	vadd.f32	s22, s16, s27
                    x = -0.5f + p_at_reset * invB;
 8011bb4:	eeac caad 	vfma.f32	s24, s25, s27
	i = lrintf(r - 0.5f);
 8011bb8:	eeab 0a2b 	vfma.f32	s0, s22, s23
 8011bbc:	f003 fcb4 	bl	8015528 <lrintf>
	r -= (float)i;
 8011bc0:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011bc4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i = lrintf(r - 0.5f);
 8011bc8:	eeb0 0a49 	vmov.f32	s0, s18
	r -= (float)i;
 8011bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011bd0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011bd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011bd8:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	i = lrintf(r - 0.5f);
 8011bdc:	eea8 0a2b 	vfma.f32	s0, s16, s23
	r -= (float)i;
 8011be0:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011be4:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011be8:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011bec:	edc3 9a3d 	vstr	s19, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011bf0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
 8011bf4:	f003 fc98 	bl	8015528 <lrintf>
	r -= (float)i;
 8011bf8:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011bfc:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8011c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c04:	eed8 7a2b 	vfnms.f32	s15, s16, s23
 8011c08:	e715      	b.n	8011a36 <tMBTriangle_tick+0x746>
                x = -0.5f + p * invB;
 8011c0a:	ed9f bacd 	vldr	s22, [pc, #820]	; 8011f40 <tMBTriangle_tick+0xc50>
 8011c0e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8011c12:	ee78 9a4a 	vsub.f32	s19, s16, s20
                k = 0;
 8011c16:	2600      	movs	r6, #0
 8011c18:	ee2b ba8b 	vmul.f32	s22, s23, s22
                x = -0.5f + p * invB;
 8011c1c:	eeb0 9a40 	vmov.f32	s18, s0
	i = lrintf(r - 0.5f);
 8011c20:	eeab 0a29 	vfma.f32	s0, s22, s19
 8011c24:	f003 fc80 	bl	8015528 <lrintf>
	r -= (float)i;
 8011c28:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011c2c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
 8011c30:	ee7c 7a8d 	vadd.f32	s15, s25, s26
	r -= (float)i;
 8011c34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011c38:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011c3c:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011c3e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011c42:	3701      	adds	r7, #1
	scale *= w;
 8011c44:	ee67 7aa8 	vmul.f32	s15, s15, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8011c4c:	ee9b 7a29 	vfnms.f32	s14, s22, s19
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011c50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011c54:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011c58:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011c5c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011c60:	eb04 0343 	add.w	r3, r4, r3, lsl #1
                x = -0.5f + p * invB;
 8011c64:	eea8 9a2c 	vfma.f32	s18, s16, s25
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011c68:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011c6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c70:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011c74:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011c78:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011c7c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8011c80:	e5d8      	b.n	8011834 <tMBTriangle_tick+0x544>
        else if (sw < 0) p = 1.0f - eof_offset;
 8011c82:	ee79 ea48 	vsub.f32	s29, s18, s16
        if (!k) {
 8011c86:	2e00      	cmp	r6, #0
 8011c88:	f040 8123 	bne.w	8011ed2 <tMBTriangle_tick+0xbe2>
                if (p_at_reset < 0.0f) {
 8011c8c:	eef5 dac0 	vcmpe.f32	s27, #0.0
 8011c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c94:	f100 818e 	bmi.w	8011fb4 <tMBTriangle_tick+0xcc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8011c98:	ee7c 9a8d 	vadd.f32	s19, s25, s26
 8011c9c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8011f40 <tMBTriangle_tick+0xc50>
            x = -0.5f + p_at_reset * invB;
 8011ca0:	ee6c daad 	vmul.f32	s27, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011ca4:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
 8011ca8:	ee6b baa7 	vmul.f32	s23, s23, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011cac:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 8011cb0:	ee68 9ae9 	vnmul.f32	s19, s17, s19
	i = lrintf(r - 0.5f);
 8011cb4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011cb8:	3601      	adds	r6, #1
 8011cba:	eeb1 9a48 	vneg.f32	s18, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011cbe:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011cc0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8011cc4:	eea8 0a6b 	vfms.f32	s0, s16, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011cc8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8011ccc:	f003 fc2c 	bl	8015528 <lrintf>
	r -= (float)i;
 8011cd0:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011cd4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011cd8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
 8011cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011ce0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011ce4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011ce8:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
 8011cec:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011cf0:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011cf4:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011cf8:	edc2 9a3c 	vstr	s19, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011cfc:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011d00:	3601      	adds	r6, #1
            if (p < b) {
 8011d02:	eeb4 aaee 	vcmpe.f32	s20, s29
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011d06:	3701      	adds	r7, #1
	scale *= w;
 8011d08:	ee28 7aad 	vmul.f32	s14, s17, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011d0c:	f006 093f 	and.w	r9, r6, #63	; 0x3f
            if (p < b) {
 8011d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011d14:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011d18:	eb09 0249 	add.w	r2, r9, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011d1c:	f8a4 9066 	strh.w	r9, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011d20:	eb04 0149 	add.w	r1, r4, r9, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011d24:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011d28:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011d2c:	f04f 0300 	mov.w	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011d30:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011d34:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011d38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011d3c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p < b) {
 8011d40:	f300 8100 	bgt.w	8011f44 <tMBTriangle_tick+0xc54>
            x = 0.5f - (p - b) * invB1;
 8011d44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
 8011d48:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8011d4a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8011d4e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8011d52:	eeb0 8a6e 	vmov.f32	s16, s29
 8011d56:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8011d5a:	eea7 9a8d 	vfma.f32	s18, s15, s26
 8011d5e:	f7ff bb98 	b.w	8011492 <tMBTriangle_tick+0x1a2>
                    p_at_reset -= 1.0f;
 8011d62:	ee7d dac9 	vsub.f32	s27, s27, s18
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8011d66:	eddf 7a76 	vldr	s15, [pc, #472]	; 8011f40 <tMBTriangle_tick+0xc50>
	i = lrintf(r - 0.5f);
 8011d6a:	eebe ca00 	vmov.f32	s24, #224	; 0xbf000000 -0.5
 8011d6e:	ee6b baa7 	vmul.f32	s23, s23, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8011d72:	ee78 ea2d 	vadd.f32	s29, s16, s27
	i = lrintf(r - 0.5f);
 8011d76:	eeb0 0a4c 	vmov.f32	s0, s24
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8011d7a:	ee3c ea8d 	vadd.f32	s28, s25, s26
	i = lrintf(r - 0.5f);
 8011d7e:	eeae 0aab 	vfma.f32	s0, s29, s23
 8011d82:	f003 fbd1 	bl	8015528 <lrintf>
	r -= (float)i;
 8011d86:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011d8a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (!k && p_at_reset >= b) {
 8011d8e:	eeb4 aaed 	vcmpe.f32	s20, s27
	r -= (float)i;
 8011d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011d96:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011d9a:	3301      	adds	r3, #1
	scale *= w;
 8011d9c:	ee2e ea28 	vmul.f32	s28, s28, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011da0:	3701      	adds	r7, #1
                if (!k && p_at_reset >= b) {
 8011da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011da6:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
 8011daa:	eede 7aab 	vfnms.f32	s15, s29, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011dae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011db2:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011db6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011dba:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011dbe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011dc2:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011dc6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011dca:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011dce:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011dd2:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 8011dd6:	f200 8190 	bhi.w	80120fa <tMBTriangle_tick+0xe0a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8011dda:	ee78 7a4a 	vsub.f32	s15, s16, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011dde:	3601      	adds	r6, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
 8011de0:	ee3a 7a09 	vadd.f32	s14, s20, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011de4:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
 8011de6:	eeb0 0a4c 	vmov.f32	s0, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011dea:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8011dee:	ee77 daad 	vadd.f32	s27, s15, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011df2:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
 8011df6:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
 8011dfa:	eead 0aab 	vfma.f32	s0, s27, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
 8011dfe:	ee77 9a29 	vadd.f32	s19, s14, s19
	i = lrintf(r - 0.5f);
 8011e02:	f003 fb91 	bl	8015528 <lrintf>
	r -= (float)i;
 8011e06:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011e0a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011e0e:	eeb1 7a4e 	vneg.f32	s14, s28
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011e12:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8011e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011e1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
 8011e1e:	eea9 ba8d 	vfma.f32	s22, s19, s26
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011e22:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	r -= (float)i;
 8011e26:	eedd 7aab 	vfnms.f32	s15, s27, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011e2a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011e2e:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011e32:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
                    x = 0.5f - (p_at_reset - b) * invB1;
 8011e36:	eeb0 ca4b 	vmov.f32	s24, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011e3a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        if (sw > 0)
 8011e3e:	e5d6      	b.n	80119ee <tMBTriangle_tick+0x6fe>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8011e40:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8011f40 <tMBTriangle_tick+0xc50>
 8011e44:	ee3e fa4a 	vsub.f32	s30, s28, s20
	i = lrintf(r - 0.5f);
 8011e48:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8011e4c:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011e50:	ee7c 7a8d 	vadd.f32	s15, s25, s26
 8011e54:	eeaf 0a2b 	vfma.f32	s0, s30, s23
 8011e58:	ee27 eaa8 	vmul.f32	s28, s15, s17
 8011e5c:	f003 fb64 	bl	8015528 <lrintf>
	r -= (float)i;
 8011e60:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011e64:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011e68:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 8011e6c:	eef4 dac9 	vcmpe.f32	s27, s18
	r -= (float)i;
 8011e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011e74:	1c5e      	adds	r6, r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011e76:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011e78:	eeb1 7a4e 	vneg.f32	s14, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011e7c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 8011e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8011e84:	eedf 7a2b 	vfnms.f32	s15, s30, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011e88:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011e8c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011e90:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011e94:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011e98:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011e9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ea0:	eef0 ea4e 	vmov.f32	s29, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011ea4:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011ea8:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011eac:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011eb0:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011eb4:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 8011eb8:	f6bf ae6a 	bge.w	8011b90 <tMBTriangle_tick+0x8a0>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8011ebc:	ee7a 7a08 	vadd.f32	s15, s20, s16
 8011ec0:	ee77 7a8c 	vadd.f32	s15, s15, s24
 8011ec4:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8011ec8:	eea7 ba8d 	vfma.f32	s22, s15, s26
 8011ecc:	eeb0 ca4b 	vmov.f32	s24, s22
 8011ed0:	e58d      	b.n	80119ee <tMBTriangle_tick+0x6fe>
            x = 0.5f - (p_at_reset - b) * invB1;
 8011ed2:	ee7c 9a69 	vsub.f32	s19, s24, s19
 8011ed6:	ee3a 7a08 	vadd.f32	s14, s20, s16
                if (p_at_reset < b) {
 8011eda:	eeb4 aaed 	vcmpe.f32	s20, s27
            x = 0.5f - (p_at_reset - b) * invB1;
 8011ede:	ee39 7a87 	vadd.f32	s14, s19, s14
                if (p_at_reset < b) {
 8011ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8011ee6:	ee6d 7a07 	vmul.f32	s15, s26, s14
                if (p_at_reset < b) {
 8011eea:	f300 80c8 	bgt.w	801207e <tMBTriangle_tick+0xd8e>
                if (p_at_reset < 0.0f) {
 8011eee:	eef5 dac0 	vcmpe.f32	s27, #0.0
 8011ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef6:	f100 8111 	bmi.w	801211c <tMBTriangle_tick+0xe2c>
        else if (sw < 0)
 8011efa:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8011f40 <tMBTriangle_tick+0xc50>
	i = lrintf(r - 0.5f);
 8011efe:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8011f02:	ee77 da89 	vadd.f32	s27, s15, s18
 8011f06:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011f0a:	eeb1 9a48 	vneg.f32	s18, s16
 8011f0e:	eea8 0a6b 	vfms.f32	s0, s16, s23
 8011f12:	f003 fb09 	bl	8015528 <lrintf>
	r -= (float)i;
 8011f16:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011f1a:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011f1e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
 8011f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011f26:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
 8011f2a:	eed9 7a2b 	vfnms.f32	s15, s18, s23
 8011f2e:	e6e7      	b.n	8011d00 <tMBTriangle_tick+0xa10>
                x = -0.5f + p * invB;
 8011f30:	eeac 9a8c 	vfma.f32	s18, s25, s24
                k = 0;
 8011f34:	2600      	movs	r6, #0
                p -= 1.0f;
 8011f36:	eeb0 8a4c 	vmov.f32	s16, s24
 8011f3a:	f7ff baaa 	b.w	8011492 <tMBTriangle_tick+0x1a2>
 8011f3e:	bf00      	nop
 8011f40:	42800000 	.word	0x42800000
                x = -0.5f + p * invB;
 8011f44:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011f48:	3701      	adds	r7, #1
 8011f4a:	ee7e 9aca 	vsub.f32	s19, s29, s20
                k = 0;
 8011f4e:	4646      	mov	r6, r8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011f50:	f007 073f 	and.w	r7, r7, #63	; 0x3f
}
 8011f54:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
 8011f58:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
 8011f5c:	eeac 9aae 	vfma.f32	s18, s25, s29
	scale *= w;
 8011f60:	ee7c ca8d 	vadd.f32	s25, s25, s26
	i = lrintf(r - 0.5f);
 8011f64:	eea9 0aab 	vfma.f32	s0, s19, s23
 8011f68:	f003 fade 	bl	8015528 <lrintf>
	r -= (float)i;
 8011f6c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011f70:	f109 0301 	add.w	r3, r9, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8011f74:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8011f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
 8011f80:	ee6c 8aa8 	vmul.f32	s17, s25, s17
	r -= (float)i;
 8011f84:	eed9 7aab 	vfnms.f32	s15, s19, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011f88:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011f8c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8011f90:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011f94:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011f98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011f9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8011fa0:	edc3 8a3c 	vstr	s17, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8011fa4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8011fa8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011fac:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8011fb0:	f7ff ba6f 	b.w	8011492 <tMBTriangle_tick+0x1a2>
	i = lrintf(r - 0.5f);
 8011fb4:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
 8011fb8:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 8011f40 <tMBTriangle_tick+0xc50>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8011fbc:	ee3c ba8d 	vadd.f32	s22, s25, s26
 8011fc0:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
 8011fc4:	eeb0 0a6f 	vmov.f32	s0, s31
                    p_at_reset += 1.0f;
 8011fc8:	ee3d fa89 	vadd.f32	s30, s27, s18
	i = lrintf(r - 0.5f);
 8011fcc:	ee2b ba28 	vmul.f32	s22, s22, s17
 8011fd0:	eeae 0a2b 	vfma.f32	s0, s28, s23
 8011fd4:	f003 faa8 	bl	8015528 <lrintf>
	r -= (float)i;
 8011fd8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011fdc:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (k && p_at_reset < b) {
 8011fe0:	eeb4 aacf 	vcmpe.f32	s20, s30
	r -= (float)i;
 8011fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011fe8:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011fec:	3301      	adds	r3, #1
 8011fee:	eef1 9a4b 	vneg.f32	s19, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8011ff2:	3701      	adds	r7, #1
                if (k && p_at_reset < b) {
 8011ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8011ff8:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
 8011ffc:	eede 7a2b 	vfnms.f32	s15, s28, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012000:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012004:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012008:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801200c:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012010:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012014:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012018:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801201c:	edc3 9a3c 	vstr	s19, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012020:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012024:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (k && p_at_reset < b) {
 8012028:	f340 80c7 	ble.w	80121ba <tMBTriangle_tick+0xeca>
                    x = -0.5f + p_at_reset * invB;
 801202c:	ee38 ca4a 	vsub.f32	s24, s16, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012030:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
 8012032:	eeb0 0a6f 	vmov.f32	s0, s31
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012036:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012038:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    x = -0.5f + p_at_reset * invB;
 801203c:	ee6c da8f 	vmul.f32	s27, s25, s30
	r = MINBLEP_PHASES * phase * inv_w;
 8012040:	ee3c ca0f 	vadd.f32	s24, s24, s30
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012044:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8012048:	eeac 0a2b 	vfma.f32	s0, s24, s23
 801204c:	f003 fa6c 	bl	8015528 <lrintf>
	r -= (float)i;
 8012050:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012054:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012058:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801205c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012060:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012068:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
	r -= (float)i;
 801206c:	eedc 7a2b 	vfnms.f32	s15, s24, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012070:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012074:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012078:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        else if (sw < 0)
 801207c:	e61a      	b.n	8011cb4 <tMBTriangle_tick+0x9c4>
	r = MINBLEP_PHASES * phase * inv_w;
 801207e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8011f40 <tMBTriangle_tick+0xc50>
 8012082:	ee38 ca47 	vsub.f32	s24, s16, s14
	i = lrintf(r - 0.5f);
 8012086:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801208a:	ee6b baa7 	vmul.f32	s23, s23, s15
	scale *= w;
 801208e:	ee3c ba8d 	vadd.f32	s22, s25, s26
	i = lrintf(r - 0.5f);
 8012092:	eeac 0a2b 	vfma.f32	s0, s24, s23
 8012096:	f003 fa47 	bl	8015528 <lrintf>
	r -= (float)i;
 801209a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801209e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (p_at_reset < 0.0f) {
 80120a2:	eef5 dac0 	vcmpe.f32	s27, #0.0
	r -= (float)i;
 80120a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80120aa:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80120ae:	3301      	adds	r3, #1
	scale *= w;
 80120b0:	ee2b ba28 	vmul.f32	s22, s22, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80120b4:	3701      	adds	r7, #1
                if (p_at_reset < 0.0f) {
 80120b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80120ba:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
 80120be:	eedc 7a2b 	vfnms.f32	s15, s24, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80120c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80120c6:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80120ca:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80120ce:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 80120d2:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80120d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 80120da:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80120de:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80120e2:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80120e6:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80120ea:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 80120ee:	d421      	bmi.n	8012134 <tMBTriangle_tick+0xe44>
                    x = -0.5f + p_at_reset * invB;
 80120f0:	ee6c daad 	vmul.f32	s27, s25, s27
        else if (sw < 0)
 80120f4:	eef1 9a4b 	vneg.f32	s19, s22
 80120f8:	e5dc      	b.n	8011cb4 <tMBTriangle_tick+0x9c4>
	i = lrintf(r - 0.5f);
 80120fa:	eeb0 0a4c 	vmov.f32	s0, s24
                    x = -0.5f + p_at_reset * invB;
 80120fe:	eeac caad 	vfma.f32	s24, s25, s27
	i = lrintf(r - 0.5f);
 8012102:	eeab 0a88 	vfma.f32	s0, s23, s16
 8012106:	f003 fa0f 	bl	8015528 <lrintf>
	r -= (float)i;
 801210a:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801210e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8012112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012116:	eedb 7a88 	vfnms.f32	s15, s23, s16
 801211a:	e48c      	b.n	8011a36 <tMBTriangle_tick+0x746>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801211c:	ee3c ba8d 	vadd.f32	s22, s25, s26
 8012120:	ed5f 7a79 	vldr	s15, [pc, #-484]	; 8011f40 <tMBTriangle_tick+0xc50>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012124:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
 8012128:	ee6b baa7 	vmul.f32	s23, s23, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801212c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 8012130:	ee2b ba28 	vmul.f32	s22, s22, s17
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012134:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012138:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
 801213a:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801213e:	3701      	adds	r7, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012140:	ee79 9a88 	vadd.f32	s19, s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012144:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012148:	ee7a 7a4c 	vsub.f32	s15, s20, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801214c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8012150:	eeb0 0a4f 	vmov.f32	s0, s30
 8012154:	eef0 da4c 	vmov.f32	s27, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012158:	ee79 7aa7 	vadd.f32	s15, s19, s15
	i = lrintf(r - 0.5f);
 801215c:	eeae 0a2b 	vfma.f32	s0, s28, s23
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012160:	eef1 9a4b 	vneg.f32	s19, s22
 8012164:	eee7 da8d 	vfma.f32	s27, s15, s26
	i = lrintf(r - 0.5f);
 8012168:	f003 f9de 	bl	8015528 <lrintf>
	r -= (float)i;
 801216c:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012170:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i = lrintf(r - 0.5f);
 8012174:	eeb0 0a4f 	vmov.f32	s0, s30
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012178:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801217c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012180:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012184:	eb04 0246 	add.w	r2, r4, r6, lsl #1
 8012188:	eeb1 9a48 	vneg.f32	s18, s16
	i = lrintf(r - 0.5f);
 801218c:	eea8 0a6b 	vfms.f32	s0, s16, s23
	r -= (float)i;
 8012190:	eede 7a2b 	vfnms.f32	s15, s28, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012194:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012198:	edc3 9a3c 	vstr	s19, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801219c:	ed83 ca3d 	vstr	s24, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80121a0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
 80121a4:	f003 f9c0 	bl	8015528 <lrintf>
	r -= (float)i;
 80121a8:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80121ac:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
 80121b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121b4:	eedb 7a89 	vfnms.f32	s15, s23, s18
 80121b8:	e5a2      	b.n	8011d00 <tMBTriangle_tick+0xa10>
                    x = 0.5f - (p_at_reset - b)  * invB1;
 80121ba:	ee3a ca4f 	vsub.f32	s24, s20, s30
	i = lrintf(r - 0.5f);
 80121be:	eeb0 0a6f 	vmov.f32	s0, s31
 80121c2:	eef1 9a48 	vneg.f32	s19, s16
 80121c6:	eeac 9a0d 	vfma.f32	s18, s24, s26
 80121ca:	eea8 0a6b 	vfms.f32	s0, s16, s23
 80121ce:	f003 f9ab 	bl	8015528 <lrintf>
	r -= (float)i;
 80121d2:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80121d6:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
 80121da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121de:	eef0 da49 	vmov.f32	s27, s18
 80121e2:	eedb 7aa9 	vfnms.f32	s15, s23, s19
 80121e6:	e58b      	b.n	8011d00 <tMBTriangle_tick+0xa10>
                x = 0.5f - (p - b) * invB1;
 80121e8:	ee7a 7a48 	vsub.f32	s15, s20, s16
                k = 1;
 80121ec:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 80121ee:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80121f2:	eea7 9a8d 	vfma.f32	s18, s15, s26
 80121f6:	f7ff b94c 	b.w	8011492 <tMBTriangle_tick+0x1a2>
    p += sw - (int)sw;
 80121fa:	eeb0 8a4e 	vmov.f32	s16, s28
 80121fe:	f7ff b8b7 	b.w	8011370 <tMBTriangle_tick+0x80>
 8012202:	bf00      	nop

08012204 <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
 8012204:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8012206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801220a:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 801220e:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8012212:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8012216:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801221a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801221e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 8012222:	4770      	bx	lr

08012224 <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
 8012224:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
 8012226:	6804      	ldr	r4, [r0, #0]
{
 8012228:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
 801222c:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8012240 <tMBTriangle_setWidth+0x1c>
 8012230:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8012244 <tMBTriangle_setWidth+0x20>
 8012234:	f7fd fd54 	bl	800fce0 <LEAF_clip>
    c->waveform = w;
 8012238:	ed84 0a03 	vstr	s0, [r4, #12]
}
 801223c:	bd10      	pop	{r4, pc}
 801223e:	bf00      	nop
 8012240:	3f7d70a4 	.word	0x3f7d70a4
 8012244:	00000000 	.word	0x00000000

08012248 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
 8012248:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801224a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801224e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 8012252:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8012256:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801225a:	eef1 7a67 	vneg.f32	s15, s15
 801225e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8012262:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8012266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801226a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801226e:	bfcc      	ite	gt
 8012270:	2201      	movgt	r2, #1
 8012272:	2200      	movle	r2, #0
 8012274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012278:	f002 0201 	and.w	r2, r2, #1
 801227c:	bf88      	it	hi
 801227e:	2200      	movhi	r2, #0
 8012280:	b122      	cbz	r2, 801228c <tMBTriangle_sync+0x44>
 8012282:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801228a:	da04      	bge.n	8012296 <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801228c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80122a4 <tMBTriangle_sync+0x5c>
 8012290:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 8012294:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8012296:	ee37 7a66 	vsub.f32	s14, s14, s13
 801229a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801229e:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80122a2:	4770      	bx	lr
 80122a4:	00000000 	.word	0x00000000

080122a8 <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
 80122a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 80122aa:	698e      	ldr	r6, [r1, #24]
{
 80122ac:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 80122ae:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 80122b2:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 80122b4:	4631      	mov	r1, r6
 80122b6:	f7fd fe4d 	bl	800ff54 <mpool_alloc>
    c->invSampleRate = leaf->invSampleRate;
 80122ba:	6873      	ldr	r3, [r6, #4]
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 80122bc:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8012354 <tMBSineTri_init+0xac>
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 80122c0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 80122c4:	edd3 7a01 	vldr	s15, [r3, #4]
    c->lastsyncin = 0.0f;
 80122c8:	2300      	movs	r3, #0
    c->freq = 440.f;
 80122ca:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8012358 <tMBSineTri_init+0xb0>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 80122ce:	4604      	mov	r4, r0
    c->_inv_w = 1.0f / c->_w;
 80122d0:	eec6 6a27 	vdiv.f32	s13, s12, s15
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 80122d4:	6038      	str	r0, [r7, #0]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80122d6:	4921      	ldr	r1, [pc, #132]	; (801235c <tMBSineTri_init+0xb4>)
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80122d8:	306c      	adds	r0, #108	; 0x6c
    c->lastsyncin = 0.0f;
 80122da:	f840 3c5c 	str.w	r3, [r0, #-92]
    c->sync = 0.0f;
 80122de:	f840 3c58 	str.w	r3, [r0, #-88]
    c->waveform = 0.0f;
 80122e2:	f840 3c60 	str.w	r3, [r0, #-96]
    c->shape = 0.0f;
 80122e6:	f840 3c38 	str.w	r3, [r0, #-56]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80122ea:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->_z = 0.0f;
 80122ee:	f840 3c40 	str.w	r3, [r0, #-64]
    c->_sinPhase = 0.0f;
 80122f2:	f840 3c3c 	str.w	r3, [r0, #-60]
    c->_p = 0.25f;  /* phase [0, 1) */
 80122f6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80122fa:	f840 1c04 	str.w	r1, [r0, #-4]
    c->sineMask = 2047;
 80122fe:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
 8012302:	f840 3c4c 	str.w	r3, [r0, #-76]
    c->syncdir = 1.0f;
 8012306:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    c->mempool = m;
 801230a:	f840 6c6c 	str.w	r6, [r0, #-108]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801230e:	f840 2c44 	str.w	r2, [r0, #-68]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8012312:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
 8012314:	f840 5c50 	str.w	r5, [r0, #-80]
    c->_j = 0;
 8012318:	f840 5c34 	str.w	r5, [r0, #-52]
    c->sineMask = 2047;
 801231c:	f8c0 1384 	str.w	r1, [r0, #900]	; 0x384
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8012320:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8012322:	f840 5c30 	str.w	r5, [r0, #-48]
    c->numBLEPs = 0;
 8012326:	f840 5c08 	str.w	r5, [r0, #-8]
    c->syncdir = 1.0f;
 801232a:	f840 3c54 	str.w	r3, [r0, #-84]
    c->invSampleRate = leaf->invSampleRate;
 801232e:	edc0 7ae0 	vstr	s15, [r0, #896]	; 0x380
    c->freq = 440.f;
 8012332:	ed00 7a19 	vstr	s14, [r0, #-100]	; 0xffffff9c
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8012336:	ed00 6a12 	vstr	s12, [r0, #-72]	; 0xffffffb8
    c->_inv_w = 1.0f / c->_w;
 801233a:	ed40 6a0b 	vstr	s13, [r0, #-44]	; 0xffffffd4
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801233e:	f002 febd 	bl	80150bc <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8012342:	4629      	mov	r1, r5
 8012344:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8012348:	2220      	movs	r2, #32
}
 801234a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 801234e:	f002 beb5 	b.w	80150bc <memset>
 8012352:	bf00      	nop
 8012354:	3b14f209 	.word	0x3b14f209
 8012358:	43dc0000 	.word	0x43dc0000
 801235c:	11c01200 	.word	0x11c01200

08012360 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
 8012360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tMBSineTri* c = *osc;
 8012364:	6804      	ldr	r4, [r0, #0]
{
 8012366:	ed2d 8b10 	vpush	{d8-d15}

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 801236a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
 801236e:	ed94 9a03 	vldr	s18, [r4, #12]
 8012372:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    sync = c->sync;
 8012376:	ed94 7a05 	vldr	s14, [r4, #20]
    invB = 1.0f / b;
 801237a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
{
 801237e:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
 8012380:	ee39 9a28 	vadd.f32	s18, s18, s17
    p = c->_p;  /* phase [0, 1) */
 8012384:	ed94 aa08 	vldr	s20, [r4, #32]
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8012388:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    sinPhase = c->_sinPhase;
 801238c:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    invB = 1.0f / b;
 8012390:	eec8 caa7 	vdiv.f32	s25, s17, s15
    w = c->_w;  /* phase increment */
 8012394:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 8012398:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
 801239c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 801239e:	6be6      	ldr	r6, [r4, #60]	; 0x3c
    b = 0.5f * (1.0f + c->waveform);
 80123a0:	ee29 9a0b 	vmul.f32	s18, s18, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80123a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 80123a8:	ee78 7ac9 	vsub.f32	s15, s17, s18
    invB1 = 1.0f / b1;
 80123ac:	ee88 daa7 	vdiv.f32	s26, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80123b0:	f340 8088 	ble.w	80124c4 <tMBSineTri_tick+0x164>
 80123b4:	f8d4 801c 	ldr.w	r8, [r4, #28]
 80123b8:	f1b8 0f00 	cmp.w	r8, #0
 80123bc:	dd36      	ble.n	801242c <tMBSineTri_tick+0xcc>
 80123be:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 80123c2:	ed94 ca10 	vldr	s24, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80123c6:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
 80123ca:	ee67 ba2b 	vmul.f32	s23, s14, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80123ce:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80123d2:	ee27 ca0c 	vmul.f32	s24, s14, s24
    float inc_amount = sw - (int)sw;
 80123d6:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 80123da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123de:	ee7b 7ae7 	vsub.f32	s15, s23, s15
    p += inc_amount;
 80123e2:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
 80123e6:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 80123ea:	2e00      	cmp	r6, #0
 80123ec:	d173      	bne.n	80124d6 <tMBSineTri_tick+0x176>

        x = -0.5f + p * invB;
 80123ee:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
        if (sw > 0)
 80123f2:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
 80123f6:	eef0 8a6a 	vmov.f32	s17, s21
        if (sw > 0)
 80123fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 80123fe:	eeea 8a2c 	vfma.f32	s17, s20, s25
        if (sw > 0)
 8012402:	f340 82e5 	ble.w	80129d0 <tMBSineTri_tick+0x670>
        {
            if (p >= b) {
 8012406:	eeb4 aac9 	vcmpe.f32	s20, s18
 801240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801240e:	f280 8255 	bge.w	80128bc <tMBSineTri_tick+0x55c>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012412:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8012416:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 8012418:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801241c:	eeb4 aaea 	vcmpe.f32	s20, s21
 8012420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012424:	f280 83b8 	bge.w	8012b98 <tMBSineTri_tick+0x838>
 8012428:	461e      	mov	r6, r3
 801242a:	e06c      	b.n	8012506 <tMBSineTri_tick+0x1a6>
    sw = w * c->syncdir;
 801242c:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8012430:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 8012434:	ee6b ba8c 	vmul.f32	s23, s23, s24
    float inv_sw = c->_inv_w * c->syncdir;
 8012438:	ee2c ca27 	vmul.f32	s24, s24, s15
    float inc_amount = sw - (int)sw;
 801243c:	eefd 7aeb 	vcvt.s32.f32	s15, s23
 8012440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012444:	ee7b 7ae7 	vsub.f32	s15, s23, s15
    p += inc_amount;
 8012448:	ee77 aa8a 	vadd.f32	s21, s15, s20
    sinPhase += inc_amount;
 801244c:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8012450:	f040 875b 	bne.w	801330a <tMBSineTri_tick+0xfaa>
        if (sw > 0)
 8012454:	eef5 bac0 	vcmpe.f32	s23, #0.0
        float eof_offset = sync * sw;
 8012458:	ee2b 8a87 	vmul.f32	s16, s23, s14
        if (sw > 0)
 801245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8012460:	ee7a dac8 	vsub.f32	s27, s21, s16
        if (sw > 0)
 8012464:	f340 819a 	ble.w	801279c <tMBSineTri_tick+0x43c>
        	p = eof_offset + 0.25f;
 8012468:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
 801246c:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
 8012470:	2e00      	cmp	r6, #0
 8012472:	f040 832c 	bne.w	8012ace <tMBSineTri_tick+0x76e>
                if (p_at_reset >= b) {
 8012476:	eeb4 9aed 	vcmpe.f32	s18, s27
 801247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801247e:	f240 856f 	bls.w	8012f60 <tMBSineTri_tick+0xc00>
                if (p_at_reset >= 1.0f) {
 8012482:	eef4 dae8 	vcmpe.f32	s27, s17
 8012486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801248a:	f280 83fd 	bge.w	8012c88 <tMBSineTri_tick+0x928>
 801248e:	eddf 7ad1 	vldr	s15, [pc, #836]	; 80127d4 <tMBSineTri_tick+0x474>
            x = -0.5f + p_at_reset * invB;
 8012492:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8012496:	ee2c ca27 	vmul.f32	s24, s24, s15
 801249a:	eeb0 fa40 	vmov.f32	s30, s0
	i = lrintf(r - 0.5f);
 801249e:	eeaa 0a0c 	vfma.f32	s0, s20, s24
 80124a2:	f003 f841 	bl	8015528 <lrintf>
	r -= (float)i;
 80124a6:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 80124aa:	eeac faad 	vfma.f32	s30, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80124ae:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	r -= (float)i;
 80124b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
 80124b6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80124ba:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
 80124be:	eeda 7a0c 	vfnms.f32	s15, s20, s24
 80124c2:	e342      	b.n	8012b4a <tMBSineTri_tick+0x7ea>
    sw = w * c->syncdir;
 80124c4:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80124c8:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 80124cc:	ee6b ba8c 	vmul.f32	s23, s23, s24
    float inv_sw = c->_inv_w * c->syncdir;
 80124d0:	ee2c ca27 	vmul.f32	s24, s24, s15
 80124d4:	e77f      	b.n	80123d6 <tMBSineTri_tick+0x76>
            }
        }

    } else {  /* normal operation, slope currently down */

        x = 0.5f - (p - b) * invB1;
 80124d6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        if (sw > 0)
 80124da:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
 80124de:	ee79 7a4a 	vsub.f32	s15, s18, s20
 80124e2:	eef0 8a6a 	vmov.f32	s17, s21
        if (sw > 0)
 80124e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 80124ea:	eee7 8a8d 	vfma.f32	s17, s15, s26
        if (sw > 0)
 80124ee:	f340 8223 	ble.w	8012938 <tMBSineTri_tick+0x5d8>
        {
            if (p >= 1.0f) {
 80124f2:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 80124f6:	eeb4 aacb 	vcmpe.f32	s20, s22
 80124fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fe:	f280 816b 	bge.w	80127d8 <tMBSineTri_tick+0x478>
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8012502:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    while (sinPhase >= 1.0f)
 8012506:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801250a:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
 801250c:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8012510:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
 8012514:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
 8012518:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
 801251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012520:	db0a      	blt.n	8012538 <tMBSineTri_tick+0x1d8>
 8012522:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    	sinPhase -= 1.0f;
 8012526:	eef0 7a48 	vmov.f32	s15, s16
 801252a:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
 801252e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012536:	daf6      	bge.n	8012526 <tMBSineTri_tick+0x1c6>
    while (sinPhase < 0.0f)
 8012538:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012540:	d50c      	bpl.n	801255c <tMBSineTri_tick+0x1fc>
    	sinPhase += 1.0f;
 8012542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
 8012546:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
 801254a:	eef0 7a48 	vmov.f32	s15, s16
 801254e:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
 8012552:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801255a:	d4f6      	bmi.n	801254a <tMBSineTri_tick+0x1ea>
    float tempPhase = (sinPhase * 2048.0f);
 801255c:	eddf 7a99 	vldr	s15, [pc, #612]	; 80127c4 <tMBSineTri_tick+0x464>
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8012560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
 8012564:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8012568:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
 801256c:	ee68 7a27 	vmul.f32	s15, s16, s15
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8012570:	b2ff      	uxtb	r7, r7
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8012572:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012576:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801257a:	f88d 7005 	strb.w	r7, [sp, #5]
    idx = (uint32_t)tempPhase; //11 bit table
 801257e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8012582:	f89d 7005 	ldrb.w	r7, [sp, #5]
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8012586:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
 801258a:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
 801258e:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
 8012592:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
 8012594:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
 8012598:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
 801259a:	498b      	ldr	r1, [pc, #556]	; (80127c8 <tMBSineTri_tick+0x468>)
 801259c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
 80125a0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
 80125a4:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
 80125a8:	ed91 6a00 	vldr	s12, [r1]
 80125ac:	ee36 6a66 	vsub.f32	s12, s12, s13
 80125b0:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80125b4:	eee7 8a26 	vfma.f32	s17, s14, s13
 80125b8:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80125bc:	2f00      	cmp	r7, #0
 80125be:	f000 8281 	beq.w	8012ac4 <tMBSineTri_tick+0x764>
 80125c2:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80125c6:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80125ca:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80125cc:	497f      	ldr	r1, [pc, #508]	; (80127cc <tMBSineTri_tick+0x46c>)
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80125ce:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
 80125d2:	4f7f      	ldr	r7, [pc, #508]	; (80127d0 <tMBSineTri_tick+0x470>)
 80125d4:	e051      	b.n	801267a <tMBSineTri_tick+0x31a>
 80125d6:	f8bd e006 	ldrh.w	lr, [sp, #6]
 80125da:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80125de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80125e2:	fa1f fe8e 	uxth.w	lr, lr
 80125e6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 80125ea:	fa1f f989 	uxth.w	r9, r9
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	fa1f f888 	uxth.w	r8, r8
 80125f4:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80125f8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80125fc:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 8012600:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8012604:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8012608:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 801260c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012610:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 8012614:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 8012618:	eb07 0ec8 	add.w	lr, r7, r8, lsl #3
 801261c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012620:	ed99 7a00 	vldr	s14, [r9]
 8012624:	ed9e 6a01 	vldr	s12, [lr, #4]
 8012628:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801262c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8012630:	eea5 7a06 	vfma.f32	s14, s10, s12
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8012634:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8012638:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801263a:	fa1f fe8e 	uxth.w	lr, lr
 801263e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012642:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8012646:	eee6 7a87 	vfma.f32	s15, s13, s14
 801264a:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801264e:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8012652:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8012656:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801265a:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 801265e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8012662:	459e      	cmp	lr, r3
 8012664:	d304      	bcc.n	8012670 <tMBSineTri_tick+0x310>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 8012666:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801266a:	3b01      	subs	r3, #1
 801266c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8012670:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012674:	3201      	adds	r2, #1
 8012676:	4293      	cmp	r3, r2
 8012678:	dd74      	ble.n	8012764 <tMBSineTri_tick+0x404>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801267a:	ebac 0302 	sub.w	r3, ip, r2
 801267e:	b29b      	uxth	r3, r3
 8012680:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 8012684:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801268c:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8012690:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012694:	b29b      	uxth	r3, r3
 8012696:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801269a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801269e:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 80126a2:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80126a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126aa:	d494      	bmi.n	80125d6 <tMBSineTri_tick+0x276>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80126ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80126b0:	f8bd e006 	ldrh.w	lr, [sp, #6]
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 80126ba:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80126be:	fa1f fe8e 	uxth.w	lr, lr
 80126c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80126c6:	fa1f f989 	uxth.w	r9, r9
 80126ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80126ce:	fa1f f888 	uxth.w	r8, r8
 80126d2:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 80126d6:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80126da:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80126de:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80126e2:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80126e6:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	ee24 7a07 	vmul.f32	s14, s8, s14
 80126f0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80126f4:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 80126f8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80126fc:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 8012700:	eb01 0889 	add.w	r8, r1, r9, lsl #2
 8012704:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8012708:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 801270c:	ed98 6a01 	vldr	s12, [r8, #4]
 8012710:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012714:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8012718:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 801271c:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8012720:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8012724:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8012728:	ee36 6a64 	vsub.f32	s12, s12, s9
 801272c:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8012730:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8012734:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8012738:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 801273c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012740:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8012744:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8012748:	3340      	adds	r3, #64	; 0x40
 801274a:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801274e:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8012752:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8012756:	459e      	cmp	lr, r3
 8012758:	d285      	bcs.n	8012666 <tMBSineTri_tick+0x306>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801275a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801275e:	3201      	adds	r2, #1
 8012760:	4293      	cmp	r3, r2
 8012762:	dc8a      	bgt.n	801267a <tMBSineTri_tick+0x31a>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8012764:	ee77 7ae9 	vsub.f32	s15, s15, s19
    j = (j+1) & 7;
 8012768:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 801276a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->out = z;
    c->_p = p;
 801276e:	ed84 aa08 	vstr	s20, [r4, #32]
    j = (j+1) & 7;
 8012772:	f005 0507 	and.w	r5, r5, #7
    c->_w = w;
    c->_b = b;
 8012776:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
 801277a:	63e6      	str	r6, [r4, #60]	; 0x3c
    z += 0.5f * (c->_f[j] - z);
 801277c:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_sinPhase = sinPhase;
 8012780:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    c->_j = j;
 8012784:	63a5      	str	r5, [r4, #56]	; 0x38

    return -c->out;
 8012786:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
 801278a:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
 801278e:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
 8012792:	b003      	add	sp, #12
 8012794:	ecbd 8b10 	vpop	{d8-d15}
 8012798:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if (sw < 0)
 801279c:	f100 82f9 	bmi.w	8012d92 <tMBSineTri_tick+0xa32>
        if (!k) {
 80127a0:	2e00      	cmp	r6, #0
 80127a2:	f000 8266 	beq.w	8012c72 <tMBSineTri_tick+0x912>
            x = 0.5f - (p_at_reset - b) * invB1;
 80127a6:	ee39 7a08 	vadd.f32	s14, s18, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 80127aa:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    p += inc_amount;
 80127ae:	eeb0 aa6a 	vmov.f32	s20, s21
            x = 0.5f - (p_at_reset - b) * invB1;
 80127b2:	eef0 8a4b 	vmov.f32	s17, s22
 80127b6:	ee77 aa6a 	vsub.f32	s21, s14, s21
    sinPhase += inc_amount;
 80127ba:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
 80127be:	eeed 8a2a 	vfma.f32	s17, s26, s21
            if (sw > 0)
 80127c2:	e6a0      	b.n	8012506 <tMBSineTri_tick+0x1a6>
 80127c4:	45000000 	.word	0x45000000
 80127c8:	0801edc4 	.word	0x0801edc4
 80127cc:	08020e44 	.word	0x08020e44
 80127d0:	08025548 	.word	0x08025548
 80127d4:	42800000 	.word	0x42800000
	i = lrintf(r - 0.5f);
 80127d8:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 80127dc:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 80127d4 <tMBSineTri_tick+0x474>
                p -= 1.0f;
 80127e0:	ee7a da4b 	vsub.f32	s27, s20, s22
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 80127e4:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 80127e8:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 80127ec:	ee3c 7a8d 	vadd.f32	s14, s25, s26
	i = lrintf(r - 0.5f);
 80127f0:	eeac 0a2d 	vfma.f32	s0, s24, s27
	scale *= w;
 80127f4:	ee6b ba87 	vmul.f32	s23, s23, s14
	i = lrintf(r - 0.5f);
 80127f8:	f002 fe96 	bl	8015528 <lrintf>
	r -= (float)i;
 80127fc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012800:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012804:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
 8012808:	eeb4 9aed 	vcmpe.f32	s18, s27
	r -= (float)i;
 801280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012810:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012812:	3701      	adds	r7, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012814:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012818:	f003 063f 	and.w	r6, r3, #63	; 0x3f
            if (!k && p >= b) {
 801281c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8012820:	eedc 7a2d 	vfnms.f32	s15, s24, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012824:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012828:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801282c:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012830:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012834:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012838:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801283c:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012840:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012844:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012848:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (!k && p >= b) {
 801284c:	f200 83fc 	bhi.w	8013048 <tMBSineTri_tick+0xce8>
                x = 0.5f - (p - b) * invB1;
 8012850:	ee79 7a0b 	vadd.f32	s15, s18, s22
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012854:	3701      	adds	r7, #1
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8012856:	ee7d cac9 	vsub.f32	s25, s27, s18
	i = lrintf(r - 0.5f);
 801285a:	eeb0 0a68 	vmov.f32	s0, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801285e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
 8012862:	ee77 7aca 	vsub.f32	s15, s15, s20
 8012866:	eef0 8a6a 	vmov.f32	s17, s21
	i = lrintf(r - 0.5f);
 801286a:	eeac 0a8c 	vfma.f32	s0, s25, s24
                p -= 1.0f;
 801286e:	eeb0 aa6d 	vmov.f32	s20, s27
                x = 0.5f - (p - b) * invB1;
 8012872:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
 8012876:	f002 fe57 	bl	8015528 <lrintf>
	r -= (float)i;
 801287a:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801287e:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012880:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012884:	eef1 7a6b 	vneg.f32	s15, s23
	r -= (float)i;
 8012888:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801288c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                k = 1;
 8012890:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012892:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012896:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
 801289a:	ee9c 7a8c 	vfnms.f32	s14, s25, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 801289e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80128a2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80128a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80128aa:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80128ae:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80128b2:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80128b6:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 80128ba:	e624      	b.n	8012506 <tMBSineTri_tick+0x1a6>
                x = 0.5f - (p - b) * invB1;;
 80128bc:	ed1f ea3b 	vldr	s28, [pc, #-236]	; 80127d4 <tMBSineTri_tick+0x474>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 80128c0:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
 80128c4:	eeb0 0a6a 	vmov.f32	s0, s21
 80128c8:	ee2c ea0e 	vmul.f32	s28, s24, s28
                x = 0.5f - (p - b) * invB1;;
 80128cc:	ee79 7a4a 	vsub.f32	s15, s18, s20
 80128d0:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 80128d4:	eeae 0a2d 	vfma.f32	s0, s28, s27
 80128d8:	ee3c ba8d 	vadd.f32	s22, s25, s26
                x = 0.5f - (p - b) * invB1;;
 80128dc:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
 80128e0:	f002 fe22 	bl	8015528 <lrintf>
	r -= (float)i;
 80128e4:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80128e8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80128ec:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80128f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80128f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80128f8:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80128fa:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80128fc:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8012904:	ee9e 7a2d 	vfnms.f32	s14, s28, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012908:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801290c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012910:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012914:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012918:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801291c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012920:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012924:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012928:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801292c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
                k = 1;
 8012930:	2301      	movs	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012932:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8012936:	e56f      	b.n	8012418 <tMBSineTri_tick+0xb8>
        else if (sw < 0)
 8012938:	f57f ade3 	bpl.w	8012502 <tMBSineTri_tick+0x1a2>
            if (p < b) {
 801293c:	eeb4 aac9 	vcmpe.f32	s20, s18
 8012940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012944:	f100 81e9 	bmi.w	8012d1a <tMBSineTri_tick+0x9ba>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012948:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            if (p < 0.0f) {
 801294c:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8012950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012954:	f57f add7 	bpl.w	8012506 <tMBSineTri_tick+0x1a6>
                p += 1.0f;
 8012958:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801295c:	ed1f ba63 	vldr	s22, [pc, #-396]	; 80127d4 <tMBSineTri_tick+0x474>
	r = MINBLEP_PHASES * phase * inv_w;
 8012960:	ee2c ca0a 	vmul.f32	s24, s24, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012964:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
 8012966:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                k = 1;
 801296a:	2601      	movs	r6, #1
                p += 1.0f;
 801296c:	ee3a aa2a 	vadd.f32	s20, s20, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012970:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
 8012974:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8012978:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
 801297c:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8012980:	ee7c ca8d 	vadd.f32	s25, s25, s26
                x = 0.5f - (p - b) * invB1;
 8012984:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
 8012988:	f002 fdce 	bl	8015528 <lrintf>
	r -= (float)i;
 801298c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012990:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012994:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012998:	ee6c caeb 	vnmul.f32	s25, s25, s23
	r -= (float)i;
 801299c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80129a0:	3301      	adds	r3, #1
 80129a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80129a6:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80129aa:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80129ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80129b2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80129b6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80129ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80129be:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80129c2:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80129c6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80129ca:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 80129ce:	e59a      	b.n	8012506 <tMBSineTri_tick+0x1a6>
            if (p < 0.0f) {
 80129d0:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80129d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d8:	f57f ad93 	bpl.w	8012502 <tMBSineTri_tick+0x1a2>
 80129dc:	eef5 bac0 	vcmpe.f32	s23, #0.0
 80129e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129e4:	f57f ad8d 	bpl.w	8012502 <tMBSineTri_tick+0x1a2>
	r = MINBLEP_PHASES * phase * inv_w;
 80129e8:	ee2c ea0a 	vmul.f32	s28, s24, s20
	i = lrintf(r - 0.5f);
 80129ec:	ed1f ba87 	vldr	s22, [pc, #-540]	; 80127d4 <tMBSineTri_tick+0x474>
 80129f0:	eeb0 0a6a 	vmov.f32	s0, s21
                p += 1.0f;
 80129f4:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 80129f8:	ee7c 8a8d 	vadd.f32	s17, s25, s26
	i = lrintf(r - 0.5f);
 80129fc:	eeae 0a0b 	vfma.f32	s0, s28, s22
 8012a00:	f002 fd92 	bl	8015528 <lrintf>
	r -= (float)i;
 8012a04:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012a08:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                p += 1.0f;
 8012a0c:	ee3a aa2d 	vadd.f32	s20, s20, s27
	r -= (float)i;
 8012a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012a14:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012a18:	3301      	adds	r3, #1
 8012a1a:	ee6b baa8 	vmul.f32	s23, s23, s17
            if (k && p < b) {
 8012a1e:	eeb4 9aca 	vcmpe.f32	s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012a22:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012a24:	f003 083f 	and.w	r8, r3, #63	; 0x3f
	r -= (float)i;
 8012a28:	eede 7a0b 	vfnms.f32	s15, s28, s22
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012a2c:	eeb1 7a6b 	vneg.f32	s14, s23
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012a30:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012a34:	eb08 0348 	add.w	r3, r8, r8, lsl #1
            if (k && p < b) {
 8012a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012a3c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012a40:	eb04 0248 	add.w	r2, r4, r8, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012a44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012a48:	f8a4 8066 	strh.w	r8, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012a4c:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012a50:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012a54:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012a58:	edc3 da3d 	vstr	s27, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012a5c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (k && p < b) {
 8012a60:	f340 844a 	ble.w	80132f8 <tMBSineTri_tick+0xf98>
                x = -0.5f + p * invB;
 8012a64:	ee3a da49 	vsub.f32	s26, s20, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012a68:	3701      	adds	r7, #1
 8012a6a:	ee2c ba0b 	vmul.f32	s22, s24, s22
	i = lrintf(r - 0.5f);
 8012a6e:	eeb0 0a6a 	vmov.f32	s0, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012a72:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
 8012a76:	eef0 8a6a 	vmov.f32	s17, s21
	i = lrintf(r - 0.5f);
 8012a7a:	eeab 0a0d 	vfma.f32	s0, s22, s26
 8012a7e:	f002 fd53 	bl	8015528 <lrintf>
	r -= (float)i;
 8012a82:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012a86:	f108 0301 	add.w	r3, r8, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012a8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8012a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                x = -0.5f + p * invB;
 8012a96:	eeec 8a8a 	vfma.f32	s17, s25, s20
	r -= (float)i;
 8012a9a:	eedb 7a0d 	vfnms.f32	s15, s22, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012a9e:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012aa2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012aa6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012aaa:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012aae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012ab2:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012ab6:	edc3 da3d 	vstr	s27, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012aba:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012abe:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8012ac2:	e520      	b.n	8012506 <tMBSineTri_tick+0x1a6>
    z += 0.5f * (c->_f[j] - z);
 8012ac4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012ac8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8012acc:	e64a      	b.n	8012764 <tMBSineTri_tick+0x404>
            x = 0.5f - (p_at_reset - b) * invB1;
 8012ace:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
 8012ad2:	eef4 dae8 	vcmpe.f32	s27, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8012ad6:	eeb0 fa4b 	vmov.f32	s30, s22
 8012ada:	ee77 7aea 	vsub.f32	s15, s15, s21
                if (p_at_reset >= 1.0f) {
 8012ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8012ae2:	eead fa27 	vfma.f32	s30, s26, s15
                if (p_at_reset >= 1.0f) {
 8012ae6:	f280 81cc 	bge.w	8012e82 <tMBSineTri_tick+0xb22>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8012aea:	ee3c ea8d 	vadd.f32	s28, s25, s26
 8012aee:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 80127d4 <tMBSineTri_tick+0x474>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012af2:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
 8012af6:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012afa:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 8012afe:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
 8012b02:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012b06:	3601      	adds	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012b08:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012b0a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8012b0e:	eeaa 0a0c 	vfma.f32	s0, s20, s24
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012b12:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8012b16:	f002 fd07 	bl	8015528 <lrintf>
	r -= (float)i;
 8012b1a:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012b1e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012b22:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8012b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012b2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012b2e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012b32:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
 8012b36:	eeda 7a0c 	vfnms.f32	s15, s20, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012b3a:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012b3e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012b42:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012b46:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012b4a:	3601      	adds	r6, #1
            if (p >= b) {
 8012b4c:	eeb4 9aca 	vcmpe.f32	s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012b50:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012b52:	ee2f 7a6b 	vnmul.f32	s14, s30, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012b56:	f006 063f 	and.w	r6, r6, #63	; 0x3f
            if (p >= b) {
 8012b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012b5e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012b62:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012b66:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012b6a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012b6e:	f8a2 106c 	strh.w	r1, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012b72:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012b76:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012b7a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012b7e:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012b82:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012b86:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p >= b) {
 8012b8a:	d93c      	bls.n	8012c06 <tMBSineTri_tick+0x8a6>
            x = -0.5f + p * invB;
 8012b8c:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
 8012b90:	4646      	mov	r6, r8
            x = -0.5f + p * invB;
 8012b92:	eeec 8a8a 	vfma.f32	s17, s25, s20
 8012b96:	e4b6      	b.n	8012506 <tMBSineTri_tick+0x1a6>
                p -= 1.0f;
 8012b98:	ed5f 7af2 	vldr	s15, [pc, #-968]	; 80127d4 <tMBSineTri_tick+0x474>
 8012b9c:	ee3a aa6a 	vsub.f32	s20, s20, s21
                x = -0.5f + p * invB;
 8012ba0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012ba4:	3701      	adds	r7, #1
 8012ba6:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8012baa:	ee3c da8d 	vadd.f32	s26, s25, s26
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012bae:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = -0.5f + p * invB;
 8012bb2:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8012bb6:	eeac 0a0a 	vfma.f32	s0, s24, s20
 8012bba:	f002 fcb5 	bl	8015528 <lrintf>
	r -= (float)i;
 8012bbe:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012bc2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012bc6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8012bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012bce:	3301      	adds	r3, #1
	scale *= w;
 8012bd0:	ee2b da8d 	vmul.f32	s26, s23, s26
                x = -0.5f + p * invB;
 8012bd4:	eeec 8a8a 	vfma.f32	s17, s25, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8012bdc:	eedc 7a0a 	vfnms.f32	s15, s24, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012be0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012be4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012be8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012bec:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012bf0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012bf4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012bf8:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012bfc:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012c00:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8012c04:	e47f      	b.n	8012506 <tMBSineTri_tick+0x1a6>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8012c06:	ee7a aa49 	vsub.f32	s21, s20, s18
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012c0a:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
 8012c0c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
 8012c10:	ee79 7a4a 	vsub.f32	s15, s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012c14:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                x = 0.5f - (p - b) * invB1;
 8012c18:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8012c1c:	eeaa 0a8c 	vfma.f32	s0, s21, s24
 8012c20:	ee7c ca8d 	vadd.f32	s25, s25, s26
                x = 0.5f - (p - b) * invB1;
 8012c24:	eee7 8a8d 	vfma.f32	s17, s15, s26
	i = lrintf(r - 0.5f);
 8012c28:	f002 fc7e 	bl	8015528 <lrintf>
	r -= (float)i;
 8012c2c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012c30:	1c73      	adds	r3, r6, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012c32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012c36:	ee6c caeb 	vnmul.f32	s25, s25, s23
	r -= (float)i;
 8012c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012c3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012c42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
                k = 1;
 8012c46:	2601      	movs	r6, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012c48:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012c4c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	r -= (float)i;
 8012c50:	eeda 7a8c 	vfnms.f32	s15, s21, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012c54:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012c58:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012c5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012c60:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012c64:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012c68:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012c6c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8012c70:	e449      	b.n	8012506 <tMBSineTri_tick+0x1a6>
            x = -0.5f + p_at_reset * invB;
 8012c72:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8012c76:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
    sinPhase += inc_amount;
 8012c7a:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 8012c7e:	eeb0 aa6a 	vmov.f32	s20, s21
            x = -0.5f + p_at_reset * invB;
 8012c82:	eeec 8aad 	vfma.f32	s17, s25, s27
            else if (sw < 0)
 8012c86:	e43e      	b.n	8012506 <tMBSineTri_tick+0x1a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8012c88:	ee3c ea8d 	vadd.f32	s28, s25, s26
 8012c8c:	eddf 7af2 	vldr	s15, [pc, #968]	; 8013058 <tMBSineTri_tick+0xcf8>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012c90:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
 8012c94:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012c98:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 8012c9c:	ee6b ea8e 	vmul.f32	s29, s23, s28
                    p_at_reset -= 1.0f;
 8012ca0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012ca4:	3601      	adds	r6, #1
                    x = -0.5f + p_at_reset * invB;
 8012ca6:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012caa:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012cac:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    p_at_reset -= 1.0f;
 8012cb0:	ee7d daea 	vsub.f32	s27, s27, s21
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012cb4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8012cb8:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8012cbc:	eeb0 fa68 	vmov.f32	s30, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8012cc0:	ee38 ba2d 	vadd.f32	s22, s16, s27
                    x = -0.5f + p_at_reset * invB;
 8012cc4:	eeac faad 	vfma.f32	s30, s25, s27
	i = lrintf(r - 0.5f);
 8012cc8:	eeab 0a0c 	vfma.f32	s0, s22, s24
 8012ccc:	f002 fc2c 	bl	8015528 <lrintf>
	r -= (float)i;
 8012cd0:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012cd4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i = lrintf(r - 0.5f);
 8012cd8:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 8012cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012ce0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012ce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012ce8:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	i = lrintf(r - 0.5f);
 8012cec:	eeaa 0a0c 	vfma.f32	s0, s20, s24
	r -= (float)i;
 8012cf0:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012cf4:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012cf8:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012cfc:	edc3 aa3d 	vstr	s21, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012d00:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
 8012d04:	f002 fc10 	bl	8015528 <lrintf>
	r -= (float)i;
 8012d08:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012d0c:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8012d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d14:	eeda 7a0c 	vfnms.f32	s15, s20, s24
 8012d18:	e717      	b.n	8012b4a <tMBSineTri_tick+0x7ea>
                x = -0.5f + p * invB;
 8012d1a:	ed9f bacf 	vldr	s22, [pc, #828]	; 8013058 <tMBSineTri_tick+0xcf8>
 8012d1e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8012d22:	ee7a aa49 	vsub.f32	s21, s20, s18
                k = 0;
 8012d26:	2600      	movs	r6, #0
 8012d28:	ee2c ba0b 	vmul.f32	s22, s24, s22
                x = -0.5f + p * invB;
 8012d2c:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8012d30:	eeab 0a2a 	vfma.f32	s0, s22, s21
 8012d34:	f002 fbf8 	bl	8015528 <lrintf>
	r -= (float)i;
 8012d38:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012d3c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
	scale *= w;
 8012d40:	ee7c 7a8d 	vadd.f32	s15, s25, s26
	r -= (float)i;
 8012d44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012d48:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012d4c:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012d4e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012d52:	3701      	adds	r7, #1
	scale *= w;
 8012d54:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8012d5c:	ee9b 7a2a 	vfnms.f32	s14, s22, s21
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012d60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012d64:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012d68:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012d6c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012d70:	eb04 0343 	add.w	r3, r4, r3, lsl #1
                x = -0.5f + p * invB;
 8012d74:	eeea 8a2c 	vfma.f32	s17, s20, s25
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012d78:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012d7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012d80:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012d84:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012d88:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012d8c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 8012d90:	e5dc      	b.n	801294c <tMBSineTri_tick+0x5ec>
        	p = (1.0f - eof_offset) + 0.25f;
 8012d92:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
 8012d96:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
 8012d9a:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
 8012d9e:	2e00      	cmp	r6, #0
 8012da0:	f040 8125 	bne.w	8012fee <tMBSineTri_tick+0xc8e>
                if (p_at_reset < 0.0f) {
 8012da4:	eef5 dac0 	vcmpe.f32	s27, #0.0
 8012da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dac:	f100 818e 	bmi.w	80130cc <tMBSineTri_tick+0xd6c>
            x = -0.5f + p_at_reset * invB;
 8012db0:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8012db4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8013058 <tMBSineTri_tick+0xcf8>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8012db8:	ee7c aa8d 	vadd.f32	s21, s25, s26
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012dbc:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
 8012dc0:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012dc4:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
            x = -0.5f + p_at_reset * invB;
 8012dc8:	eeac baad 	vfma.f32	s22, s25, s27
 8012dcc:	ee6b aaea 	vnmul.f32	s21, s23, s21
	r = MINBLEP_PHASES * phase * inv_w;
 8012dd0:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012dd4:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
 8012dd6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012dda:	3701      	adds	r7, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012ddc:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 8012de0:	ee78 8ac8 	vsub.f32	s17, s17, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012de4:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8012de8:	eea8 0a8c 	vfma.f32	s0, s17, s24
 8012dec:	f002 fb9c 	bl	8015528 <lrintf>
	r -= (float)i;
 8012df0:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012df4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012df8:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
 8012dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012e00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012e04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012e08:	eb04 0046 	add.w	r0, r4, r6, lsl #1
	r -= (float)i;
 8012e0c:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012e10:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012e14:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012e18:	edc2 aa3c 	vstr	s21, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012e1c:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012e20:	3601      	adds	r6, #1
            if (p < b) {
 8012e22:	eeb4 9aca 	vcmpe.f32	s18, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012e26:	3701      	adds	r7, #1
	scale *= w;
 8012e28:	ee2b 7a8b 	vmul.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012e2c:	f006 093f 	and.w	r9, r6, #63	; 0x3f
            if (p < b) {
 8012e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012e34:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012e38:	eb09 0249 	add.w	r2, r9, r9, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012e3c:	f8a4 9066 	strh.w	r9, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012e40:	eb04 0149 	add.w	r1, r4, r9, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012e44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012e48:	f8a1 306c 	strh.w	r3, [r1, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012e4c:	f04f 0300 	mov.w	r3, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012e50:	edc2 7a3b 	vstr	s15, [r2, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012e54:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012e58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012e5c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
            if (p < b) {
 8012e60:	f300 80fc 	bgt.w	801305c <tMBSineTri_tick+0xcfc>
            x = 0.5f - (p - b) * invB1;
 8012e64:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
 8012e68:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8012e6a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8012e6e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8012e72:	eeb0 8a6e 	vmov.f32	s16, s29
 8012e76:	ee77 7a89 	vadd.f32	s15, s15, s18
 8012e7a:	eee7 8a8d 	vfma.f32	s17, s15, s26
 8012e7e:	f7ff bb42 	b.w	8012506 <tMBSineTri_tick+0x1a6>
                    p_at_reset -= 1.0f;
 8012e82:	ee7d dae8 	vsub.f32	s27, s27, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8012e86:	eddf 7a74 	vldr	s15, [pc, #464]	; 8013058 <tMBSineTri_tick+0xcf8>
	i = lrintf(r - 0.5f);
 8012e8a:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
 8012e8e:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8012e92:	ee78 ea2d 	vadd.f32	s29, s16, s27
	i = lrintf(r - 0.5f);
 8012e96:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8012e9a:	ee3c ea8d 	vadd.f32	s28, s25, s26
	i = lrintf(r - 0.5f);
 8012e9e:	eeae 0a8c 	vfma.f32	s0, s29, s24
 8012ea2:	f002 fb41 	bl	8015528 <lrintf>
	r -= (float)i;
 8012ea6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012eaa:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (!k && p_at_reset >= b) {
 8012eae:	eeb4 9aed 	vcmpe.f32	s18, s27
	r -= (float)i;
 8012eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012eb6:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012eba:	3301      	adds	r3, #1
	scale *= w;
 8012ebc:	ee2e ea2b 	vmul.f32	s28, s28, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012ec0:	3701      	adds	r7, #1
                if (!k && p_at_reset >= b) {
 8012ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012ec6:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
 8012eca:	eede 7a8c 	vfnms.f32	s15, s29, s24
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012ece:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012ed2:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012ed6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012eda:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012ede:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012ee2:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012ee6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012eea:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012eee:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012ef2:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 8012ef6:	f200 8190 	bhi.w	801321a <tMBSineTri_tick+0xeba>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8012efa:	ee78 7a49 	vsub.f32	s15, s16, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012efe:	3601      	adds	r6, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012f00:	ee39 7a28 	vadd.f32	s14, s18, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012f04:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
 8012f06:	eeb0 0a4f 	vmov.f32	s0, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012f0a:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8012f0e:	ee77 daad 	vadd.f32	s27, s15, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012f12:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012f16:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
 8012f1a:	eead 0a8c 	vfma.f32	s0, s27, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012f1e:	ee77 aa6a 	vsub.f32	s21, s14, s21
	i = lrintf(r - 0.5f);
 8012f22:	f002 fb01 	bl	8015528 <lrintf>
	r -= (float)i;
 8012f26:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012f2a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012f2e:	eeb1 7a4e 	vneg.f32	s14, s28
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012f32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8012f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012f3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012f3e:	eeaa ba8d 	vfma.f32	s22, s21, s26
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012f42:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	r -= (float)i;
 8012f46:	eedd 7a8c 	vfnms.f32	s15, s27, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012f4a:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012f4e:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012f52:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012f56:	eeb0 fa4b 	vmov.f32	s30, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012f5a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        if (sw > 0)
 8012f5e:	e5d0      	b.n	8012b02 <tMBSineTri_tick+0x7a2>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8012f60:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8013058 <tMBSineTri_tick+0xcf8>
 8012f64:	ee3a fac9 	vsub.f32	s30, s21, s18
	i = lrintf(r - 0.5f);
 8012f68:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8012f6c:	ee2c ca27 	vmul.f32	s24, s24, s15
 8012f70:	ee3c ea8d 	vadd.f32	s28, s25, s26
 8012f74:	eeaf 0a0c 	vfma.f32	s0, s30, s24
 8012f78:	f002 fad6 	bl	8015528 <lrintf>
	r -= (float)i;
 8012f7c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012f80:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8012f84:	ee2b ea8e 	vmul.f32	s28, s23, s28
	r -= (float)i;
 8012f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012f8c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012f90:	1c5e      	adds	r6, r3, #1
                if (p_at_reset >= 1.0f) {
 8012f92:	eef4 dae8 	vcmpe.f32	s27, s17
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012f96:	3701      	adds	r7, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012f98:	eeb1 7a4e 	vneg.f32	s14, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012f9c:	f006 063f 	and.w	r6, r6, #63	; 0x3f
	r -= (float)i;
 8012fa0:	eedf 7a0c 	vfnms.f32	s15, s30, s24
                if (p_at_reset >= 1.0f) {
 8012fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8012fa8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012fac:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012fb0:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012fb4:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8012fb8:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012fbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012fc0:	eef0 ea4e 	vmov.f32	s29, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
 8012fc4:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8012fc8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8012fcc:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8012fd0:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8012fd4:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 8012fd8:	f6bf ae62 	bge.w	8012ca0 <tMBSineTri_tick+0x940>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8012fdc:	ee79 7a08 	vadd.f32	s15, s18, s16
 8012fe0:	ee77 aaea 	vsub.f32	s21, s15, s21
 8012fe4:	eeaa ba8d 	vfma.f32	s22, s21, s26
 8012fe8:	eeb0 fa4b 	vmov.f32	s30, s22
 8012fec:	e589      	b.n	8012b02 <tMBSineTri_tick+0x7a2>
            x = 0.5f - (p_at_reset - b) * invB1;
 8012fee:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
 8012ff2:	eeb4 9aed 	vcmpe.f32	s18, s27
            x = 0.5f - (p_at_reset - b) * invB1;
 8012ff6:	ee77 7aea 	vsub.f32	s15, s15, s21
                if (p_at_reset < b) {
 8012ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8012ffe:	eea7 ba8d 	vfma.f32	s22, s15, s26
                if (p_at_reset < b) {
 8013002:	f300 80ca 	bgt.w	801319a <tMBSineTri_tick+0xe3a>
                if (p_at_reset < 0.0f) {
 8013006:	eef5 dac0 	vcmpe.f32	s27, #0.0
 801300a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801300e:	f100 8115 	bmi.w	801323c <tMBSineTri_tick+0xedc>
        else if (sw < 0)
 8013012:	eef5 aa00 	vmov.f32	s21, #80	; 0x3e800000  0.250
 8013016:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013058 <tMBSineTri_tick+0xcf8>
	i = lrintf(r - 0.5f);
 801301a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801301e:	ee2c ca27 	vmul.f32	s24, s24, s15
 8013022:	ee7a aac8 	vsub.f32	s21, s21, s16
 8013026:	eeac 0a2a 	vfma.f32	s0, s24, s21
 801302a:	f002 fa7d 	bl	8015528 <lrintf>
	r -= (float)i;
 801302e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013032:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8013036:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
 801303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801303e:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	r -= (float)i;
 8013042:	eedc 7a2a 	vfnms.f32	s15, s24, s21
 8013046:	e6eb      	b.n	8012e20 <tMBSineTri_tick+0xac0>
                x = -0.5f + p * invB;
 8013048:	eeec 8aad 	vfma.f32	s17, s25, s27
                k = 0;
 801304c:	2600      	movs	r6, #0
                p -= 1.0f;
 801304e:	eeb0 aa6d 	vmov.f32	s20, s27
 8013052:	f7ff ba58 	b.w	8012506 <tMBSineTri_tick+0x1a6>
 8013056:	bf00      	nop
 8013058:	42800000 	.word	0x42800000
                x = -0.5f + p * invB;
 801305c:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013060:	3701      	adds	r7, #1
 8013062:	ee7a aa49 	vsub.f32	s21, s20, s18
                k = 0;
 8013066:	4646      	mov	r6, r8
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013068:	f007 073f 	and.w	r7, r7, #63	; 0x3f
}
 801306c:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
 8013070:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 8013074:	eeec 8a8a 	vfma.f32	s17, s25, s20
	scale *= w;
 8013078:	ee7c ca8d 	vadd.f32	s25, s25, s26
	i = lrintf(r - 0.5f);
 801307c:	eeaa 0a8c 	vfma.f32	s0, s21, s24
 8013080:	f002 fa52 	bl	8015528 <lrintf>
	r -= (float)i;
 8013084:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013088:	f109 0301 	add.w	r3, r9, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801308c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8013090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	scale *= w;
 8013098:	ee6c baab 	vmul.f32	s23, s25, s23
	r -= (float)i;
 801309c:	eeda 7a8c 	vfnms.f32	s15, s21, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80130a0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80130a4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80130a8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80130ac:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80130b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80130b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80130b8:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80130bc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80130c0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80130c4:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
}
 80130c8:	f7ff ba1d 	b.w	8012506 <tMBSineTri_tick+0x1a6>
	i = lrintf(r - 0.5f);
 80130cc:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
 80130d0:	ed5f 7a1f 	vldr	s15, [pc, #-124]	; 8013058 <tMBSineTri_tick+0xcf8>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80130d4:	ee3c ea8d 	vadd.f32	s28, s25, s26
 80130d8:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 80130dc:	eeb0 0a4f 	vmov.f32	s0, s30
                    p_at_reset += 1.0f;
 80130e0:	ee7d daa8 	vadd.f32	s27, s27, s17
	i = lrintf(r - 0.5f);
 80130e4:	ee2e ea2b 	vmul.f32	s28, s28, s23
 80130e8:	eeac 0a2a 	vfma.f32	s0, s24, s21
 80130ec:	f002 fa1c 	bl	8015528 <lrintf>
	r -= (float)i;
 80130f0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80130f4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (k && p_at_reset < b) {
 80130f8:	eeb4 9aed 	vcmpe.f32	s18, s27
	r -= (float)i;
 80130fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013100:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013104:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8013106:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801310a:	3701      	adds	r7, #1
                if (k && p_at_reset < b) {
 801310c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8013110:	eedc 7a2a 	vfnms.f32	s15, s24, s21
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013114:	f003 063f 	and.w	r6, r3, #63	; 0x3f
 8013118:	eef1 aa4e 	vneg.f32	s21, s28
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801311c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013120:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8013124:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013128:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 801312c:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013130:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013134:	edc3 aa3c 	vstr	s21, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8013138:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801313c:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (k && p_at_reset < b) {
 8013140:	f340 80cd 	ble.w	80132de <tMBSineTri_tick+0xf7e>
                    x = -0.5f + p_at_reset * invB;
 8013144:	ee78 7a49 	vsub.f32	s15, s16, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013148:	3601      	adds	r6, #1
                    x = -0.5f + p_at_reset * invB;
 801314a:	eeb0 ba4f 	vmov.f32	s22, s30
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801314e:	3701      	adds	r7, #1
	i = lrintf(r - 0.5f);
 8013150:	eeb0 0a4f 	vmov.f32	s0, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013154:	f006 063f 	and.w	r6, r6, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013158:	f007 073f 	and.w	r7, r7, #63	; 0x3f
                    x = -0.5f + p_at_reset * invB;
 801315c:	eeac baad 	vfma.f32	s22, s25, s27
	r = MINBLEP_PHASES * phase * inv_w;
 8013160:	ee77 daad 	vadd.f32	s27, s15, s27
	i = lrintf(r - 0.5f);
 8013164:	eeac 0a2d 	vfma.f32	s0, s24, s27
 8013168:	f002 f9de 	bl	8015528 <lrintf>
	r -= (float)i;
 801316c:	ee07 0a90 	vmov	s15, r0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013170:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8013174:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8013178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->BLEPindices[c->mostRecentBLEP] = i;
 801317c:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013180:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 8013184:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
	r -= (float)i;
 8013188:	eedc 7a2d 	vfnms.f32	s15, s24, s27
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801318c:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8013190:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013194:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
        else if (sw < 0)
 8013198:	e61a      	b.n	8012dd0 <tMBSineTri_tick+0xa70>
	i = lrintf(r - 0.5f);
 801319a:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 801319e:	ed5f 7a52 	vldr	s15, [pc, #-328]	; 8013058 <tMBSineTri_tick+0xcf8>
 80131a2:	ee3a fac9 	vsub.f32	s30, s21, s18
 80131a6:	ee2c ca27 	vmul.f32	s24, s24, s15
 80131aa:	eeb0 0a4b 	vmov.f32	s0, s22
	scale *= w;
 80131ae:	ee3c ea8d 	vadd.f32	s28, s25, s26
	i = lrintf(r - 0.5f);
 80131b2:	eeac 0a0f 	vfma.f32	s0, s24, s30
 80131b6:	f002 f9b7 	bl	8015528 <lrintf>
	r -= (float)i;
 80131ba:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80131be:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
                if (p_at_reset < 0.0f) {
 80131c2:	eef5 dac0 	vcmpe.f32	s27, #0.0
	r -= (float)i;
 80131c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80131ca:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80131ce:	3301      	adds	r3, #1
	scale *= w;
 80131d0:	ee2e ea2b 	vmul.f32	s28, s28, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80131d4:	3701      	adds	r7, #1
                if (p_at_reset < 0.0f) {
 80131d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80131da:	f003 063f 	and.w	r6, r3, #63	; 0x3f
	r -= (float)i;
 80131de:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80131e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80131e6:	f007 073f 	and.w	r7, r7, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80131ea:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80131ee:	f8a4 6066 	strh.w	r6, [r4, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 80131f2:	eb04 0246 	add.w	r2, r4, r6, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80131f6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	c->BLEPindices[c->mostRecentBLEP] = i;
 80131fa:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80131fe:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013202:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8013206:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801320a:	f8a4 7064 	strh.w	r7, [r4, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 801320e:	d421      	bmi.n	8013254 <tMBSineTri_tick+0xef4>
                    x = -0.5f + p_at_reset * invB;
 8013210:	eeac baad 	vfma.f32	s22, s25, s27
        else if (sw < 0)
 8013214:	eef1 aa4e 	vneg.f32	s21, s28
 8013218:	e5da      	b.n	8012dd0 <tMBSineTri_tick+0xa70>
	i = lrintf(r - 0.5f);
 801321a:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
 801321e:	eeac faad 	vfma.f32	s30, s25, s27
	i = lrintf(r - 0.5f);
 8013222:	eeaa 0a0c 	vfma.f32	s0, s20, s24
 8013226:	f002 f97f 	bl	8015528 <lrintf>
	r -= (float)i;
 801322a:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801322e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8013232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013236:	eeda 7a0c 	vfnms.f32	s15, s20, s24
 801323a:	e486      	b.n	8012b4a <tMBSineTri_tick+0x7ea>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801323c:	ee3c ea8d 	vadd.f32	s28, s25, s26
 8013240:	ed5f 7a7b 	vldr	s15, [pc, #-492]	; 8013058 <tMBSineTri_tick+0xcf8>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013244:	f8b4 6066 	ldrh.w	r6, [r4, #102]	; 0x66
 8013248:	ee2c ca27 	vmul.f32	s24, s24, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801324c:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 8013250:	ee2e ea2b 	vmul.f32	s28, s28, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
 8013254:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013258:	3601      	adds	r6, #1
	i = lrintf(r - 0.5f);
 801325a:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801325e:	3701      	adds	r7, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
 8013260:	ee78 7a6a 	vsub.f32	s15, s16, s21
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013264:	f006 063f 	and.w	r6, r6, #63	; 0x3f
                    x = 0.5f - (p_at_reset - b) * invB1;
 8013268:	ee39 7a6d 	vsub.f32	s14, s18, s27
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801326c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8013270:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
 8013274:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 8013278:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
 801327c:	eeaa 0a8c 	vfma.f32	s0, s21, s24
 8013280:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
 8013284:	eea7 ba8d 	vfma.f32	s22, s15, s26
	i = lrintf(r - 0.5f);
 8013288:	f002 f94e 	bl	8015528 <lrintf>
	r -= (float)i;
 801328c:	ee07 0a90 	vmov	s15, r0
	i = lrintf(r - 0.5f);
 8013290:	eeb0 0a4f 	vmov.f32	s0, s30
 8013294:	ee78 8ac8 	vsub.f32	s17, s17, s16
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013298:	eb06 0346 	add.w	r3, r6, r6, lsl #1
	r -= (float)i;
 801329c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80132a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80132a4:	eeb1 ea4e 	vneg.f32	s28, s28
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80132a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	i = lrintf(r - 0.5f);
 80132ac:	eeac 0a28 	vfma.f32	s0, s24, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 80132b0:	eb04 0246 	add.w	r2, r4, r6, lsl #1
	r -= (float)i;
 80132b4:	eeda 7a8c 	vfnms.f32	s15, s21, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 80132b8:	f8a2 006c 	strh.w	r0, [r2, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80132bc:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80132c0:	edc3 da3d 	vstr	s27, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80132c4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
	i = lrintf(r - 0.5f);
 80132c8:	f002 f92e 	bl	8015528 <lrintf>
	r -= (float)i;
 80132cc:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80132d0:	f000 033f 	and.w	r3, r0, #63	; 0x3f
	r -= (float)i;
 80132d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132d8:	eedc 7a28 	vfnms.f32	s15, s24, s17
 80132dc:	e5a0      	b.n	8012e20 <tMBSineTri_tick+0xac0>
 80132de:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
 80132e2:	ee79 da6d 	vsub.f32	s27, s18, s27
	i = lrintf(r - 0.5f);
 80132e6:	eeb0 0a4f 	vmov.f32	s0, s30
 80132ea:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
 80132ee:	eead ba8d 	vfma.f32	s22, s27, s26
	i = lrintf(r - 0.5f);
 80132f2:	eeac 0a28 	vfma.f32	s0, s24, s17
 80132f6:	e7e7      	b.n	80132c8 <tMBSineTri_tick+0xf68>
                x = 0.5f - (p - b) * invB1;
 80132f8:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
 80132fc:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 80132fe:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8013302:	eee7 8a8d 	vfma.f32	s17, s15, s26
 8013306:	f7ff b8fe 	b.w	8012506 <tMBSineTri_tick+0x1a6>
    sinPhase += inc_amount;
 801330a:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 801330e:	eeb0 aa6a 	vmov.f32	s20, s21
 8013312:	f7ff b86a 	b.w	80123ea <tMBSineTri_tick+0x8a>
 8013316:	bf00      	nop

08013318 <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
 8013318:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801331a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801331e:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 8013322:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8013326:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801332a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801332e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8013332:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 8013336:	4770      	bx	lr

08013338 <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
 8013338:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801333a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801333e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 8013342:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8013346:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801334a:	eef1 7a67 	vneg.f32	s15, s15
 801334e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8013352:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8013356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801335a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801335e:	bfcc      	ite	gt
 8013360:	2201      	movgt	r2, #1
 8013362:	2200      	movle	r2, #0
 8013364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013368:	f002 0201 	and.w	r2, r2, #1
 801336c:	bf88      	it	hi
 801336e:	2200      	movhi	r2, #0
 8013370:	b122      	cbz	r2, 801337c <tMBSineTri_sync+0x44>
 8013372:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8013376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337a:	da04      	bge.n	8013386 <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801337c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013394 <tMBSineTri_sync+0x5c>
 8013380:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
 8013384:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8013386:	ee37 7a66 	vsub.f32	s14, s14, s13
 801338a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801338e:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8013392:	4770      	bx	lr
 8013394:	00000000 	.word	0x00000000

08013398 <tMBSineTri_setShape>:
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
    c->shape = shape;
 8013398:	6803      	ldr	r3, [r0, #0]
 801339a:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 801339e:	4770      	bx	lr

080133a0 <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
 80133a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 80133a2:	698e      	ldr	r6, [r1, #24]
{
 80133a4:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80133a6:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 80133aa:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80133ac:	4631      	mov	r1, r6
 80133ae:	f7fc fdd1 	bl	800ff54 <mpool_alloc>
    c->invSampleRate = leaf->invSampleRate;
 80133b2:	6873      	ldr	r3, [r6, #4]
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80133b4:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8013418 <tMBSaw_init+0x78>
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80133b8:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->invSampleRate = leaf->invSampleRate;
 80133bc:	edd3 7a01 	vldr	s15, [r3, #4]
    c->lastsyncin = 0.0f;
 80133c0:	2300      	movs	r3, #0
    c->freq = 440.f;
 80133c2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801341c <tMBSaw_init+0x7c>
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80133c6:	4604      	mov	r4, r0
    c->_inv_w = 1.0f / c->_w;
 80133c8:	eec6 6a27 	vdiv.f32	s13, s12, s15
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 80133cc:	6038      	str	r0, [r7, #0]
    c->lastsyncin = 0.0f;
 80133ce:	60c3      	str	r3, [r0, #12]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80133d0:	2280      	movs	r2, #128	; 0x80
    c->sync = 0.0f;
 80133d2:	6103      	str	r3, [r0, #16]
    c->_z = 0.0f;
 80133d4:	6243      	str	r3, [r0, #36]	; 0x24
    c->_p = 0.0f;  /* phase [0, 1) */
 80133d6:	61c3      	str	r3, [r0, #28]
    c->syncdir = 1.0f;
 80133d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80133dc:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->mempool = m;
 80133e0:	6006      	str	r6, [r0, #0]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 80133e2:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80133e6:	4629      	mov	r1, r5
    c->softsync = 0;
 80133e8:	6185      	str	r5, [r0, #24]
    c->_j = 0;
 80133ea:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
 80133ec:	6505      	str	r5, [r0, #80]	; 0x50
    c->syncdir = 1.0f;
 80133ee:	6143      	str	r3, [r0, #20]
    c->invSampleRate = leaf->invSampleRate;
 80133f0:	edc0 7ab6 	vstr	s15, [r0, #728]	; 0x2d8
    c->freq = 440.f;
 80133f4:	ed80 7a02 	vstr	s14, [r0, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80133f8:	ed80 6a08 	vstr	s12, [r0, #32]
    c->_inv_w = 1.0f / c->_w;
 80133fc:	edc0 6a0a 	vstr	s13, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8013400:	3056      	adds	r0, #86	; 0x56
 8013402:	f001 fe5b 	bl	80150bc <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8013406:	4629      	mov	r1, r5
 8013408:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801340c:	2220      	movs	r2, #32
}
 801340e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8013412:	f001 be53 	b.w	80150bc <memset>
 8013416:	bf00      	nop
 8013418:	3b14f209 	.word	0x3b14f209
 801341c:	43dc0000 	.word	0x43dc0000

08013420 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
 8013420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _tMBSaw* c = *osc;
 8013424:	6804      	ldr	r4, [r0, #0]

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
 8013426:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
 801342a:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801342e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    j = c->_j;  /* index into buffer _f */
 8013432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
{
 8013434:	ed2d 8b08 	vpush	{d8-d11}
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8013438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 801343c:	b082      	sub	sp, #8
    z = c->_z;  /* low pass filter state */
 801343e:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8013442:	f340 8114 	ble.w	801366e <tMBSaw_tick+0x24e>
 8013446:	69a3      	ldr	r3, [r4, #24]
 8013448:	2b00      	cmp	r3, #0
 801344a:	f340 80b1 	ble.w	80135b0 <tMBSaw_tick+0x190>
 801344e:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
 8013452:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8013456:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
 801345a:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801345e:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8013462:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8013466:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
 801346a:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 801346e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8013472:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 8013476:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
 801347a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801347e:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8013482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013486:	f280 810c 	bge.w	80136a2 <tMBSaw_tick+0x282>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
 801348a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013492:	f100 8195 	bmi.w	80137c0 <tMBSaw_tick+0x3a0>

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8013496:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
    c->_f[currentSamp] = 0.5f - p;
 801349a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801349e:	1d33      	adds	r3, r6, #4
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 80134a0:	b2ea      	uxtb	r2, r5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 80134a2:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
 80134a6:	ee37 7a48 	vsub.f32	s14, s14, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 80134aa:	f88d 2005 	strb.w	r2, [sp, #5]
    c->_f[currentSamp] = 0.5f - p;
 80134ae:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80134b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] = 0.5f - p;
 80134b6:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80134ba:	2a00      	cmp	r2, #0
 80134bc:	f000 817b 	beq.w	80137b6 <tMBSaw_tick+0x396>
 80134c0:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80134c4:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80134c8:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80134cc:	2000      	movs	r0, #0
 80134ce:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80134d2:	4dec      	ldr	r5, [pc, #944]	; (8013884 <tMBSaw_tick+0x464>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80134d4:	ebae 0300 	sub.w	r3, lr, r0
 80134d8:	b29b      	uxth	r3, r3
 80134da:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 80134de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80134e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80134e6:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80134ea:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80134ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80134f2:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 80134f6:	b289      	uxth	r1, r1
 80134f8:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80134fc:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80134fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013502:	fa1f f888 	uxth.w	r8, r8
 8013506:	fa1f f989 	uxth.w	r9, r9
 801350a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801350e:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8013512:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
 8013516:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 801351a:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801351e:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013520:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
 8013524:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 8013528:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801352c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013530:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8013534:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8013538:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801353a:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801353e:	edd9 6a01 	vldr	s13, [r9, #4]
 8013542:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8013546:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801354a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801354e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013552:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8013556:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801355a:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
 801355e:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013560:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8013564:	d37c      	bcc.n	8013660 <tMBSaw_tick+0x240>
		{
			c->numBLEPs--;
 8013566:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801356a:	3001      	adds	r0, #1
 801356c:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8013570:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013572:	4290      	cmp	r0, r2
			c->numBLEPs--;
 8013574:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013578:	dbac      	blt.n	80134d4 <tMBSaw_tick+0xb4>
 801357a:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
 801357e:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 8013582:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8013584:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 8013588:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801358c:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 8013590:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
 8013594:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8013596:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
 801359a:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 801359e:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 80135a2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 80135a6:	b002      	add	sp, #8
 80135a8:	ecbd 8b08 	vpop	{d8-d11}
 80135ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
 80135b0:	edd4 8a05 	vldr	s17, [r4, #20]
 80135b4:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 80135b8:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 80135bc:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
 80135c0:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
 80135c4:	eebd 9aca 	vcvt.s32.f32	s18, s20
 80135c8:	ee77 7a8a 	vadd.f32	s15, s15, s20
 80135cc:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80135d0:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 80135d4:	f040 815c 	bne.w	8013890 <tMBSaw_tick+0x470>
        if (sw > 0) p = eof_offset;
 80135d8:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
 80135dc:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
 80135e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 80135e4:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
 80135e8:	f340 8088 	ble.w	80136fc <tMBSaw_tick+0x2dc>
 80135ec:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
 80135f0:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 80135f4:	eef4 aacb 	vcmpe.f32	s21, s22
 80135f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135fc:	f280 80ac 	bge.w	8013758 <tMBSaw_tick+0x338>
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013600:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
 8013604:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8013608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801360c:	f100 8106 	bmi.w	801381c <tMBSaw_tick+0x3fc>
        if (sw > 0)
 8013610:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8013614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013618:	dc75      	bgt.n	8013706 <tMBSaw_tick+0x2e6>
        else if (sw < 0)
 801361a:	f57f af3e 	bpl.w	801349a <tMBSaw_tick+0x7a>
	r = MINBLEP_PHASES * phase * inv_w;
 801361e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013622:	ed9f 9a99 	vldr	s18, [pc, #612]	; 8013888 <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
 8013626:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801362a:	ee28 9a89 	vmul.f32	s18, s17, s18
 801362e:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
 8013632:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
 8013636:	eea9 0a28 	vfma.f32	s0, s18, s17
 801363a:	f001 ff75 	bl	8015528 <lrintf>
	r -= (float)i;
 801363e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013642:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013646:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8013648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801364c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013650:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013652:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
 8013656:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801365a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801365e:	e06c      	b.n	801373a <tMBSaw_tick+0x31a>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013660:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013664:	3001      	adds	r0, #1
 8013666:	4283      	cmp	r3, r0
 8013668:	f73f af34 	bgt.w	80134d4 <tMBSaw_tick+0xb4>
 801366c:	e785      	b.n	801357a <tMBSaw_tick+0x15a>
    sw = c->_w * c->syncdir;
 801366e:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
 8013672:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
 8013676:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 801367a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801367e:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
 8013682:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
 8013686:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 801368a:	ee77 7a88 	vadd.f32	s15, s15, s16
 801368e:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8013692:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
 8013696:	eeb4 8ac9 	vcmpe.f32	s16, s18
 801369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801369e:	f6ff aef4 	blt.w	801348a <tMBSaw_tick+0x6a>
        p -= 1.0f;
 80136a2:	eddf 7a79 	vldr	s15, [pc, #484]	; 8013888 <tMBSaw_tick+0x468>
 80136a6:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 80136aa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80136ae:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80136b2:	eea8 0a88 	vfma.f32	s0, s17, s16
 80136b6:	f001 ff37 	bl	8015528 <lrintf>
	r -= (float)i;
 80136ba:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80136be:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80136c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80136c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80136ca:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80136ce:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80136d0:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80136d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80136d6:	eed8 7a88 	vfnms.f32	s15, s17, s16
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80136da:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 80136de:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80136e2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 80136e6:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80136ea:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80136ee:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80136f2:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80136f6:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
 80136fa:	e6ce      	b.n	801349a <tMBSaw_tick+0x7a>
        else if (sw < 0) p = 1.0f - eof_offset;
 80136fc:	f100 80bc 	bmi.w	8013878 <tMBSaw_tick+0x458>
    p += sw - (int)sw;
 8013700:	eeb0 8a49 	vmov.f32	s16, s18
 8013704:	e774      	b.n	80135f0 <tMBSaw_tick+0x1d0>
	r = MINBLEP_PHASES * phase * inv_w;
 8013706:	eddf 7a60 	vldr	s15, [pc, #384]	; 8013888 <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
 801370a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801370e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013712:	eea8 0a88 	vfma.f32	s0, s17, s16
 8013716:	f001 ff07 	bl	8015528 <lrintf>
	r -= (float)i;
 801371a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801371e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013722:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8013724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8013728:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801372c:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801372e:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	r -= (float)i;
 8013732:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801373a:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801373e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8013742:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013746:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801374a:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801374e:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013752:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
 8013756:	e6a0      	b.n	801349a <tMBSaw_tick+0x7a>
            p_at_reset -= 1.0f;
 8013758:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801375c:	eddf ba4a 	vldr	s23, [pc, #296]	; 8013888 <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
 8013760:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8013764:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8013768:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
 801376c:	eea9 0a2b 	vfma.f32	s0, s18, s23
 8013770:	f001 feda 	bl	8015528 <lrintf>
	r -= (float)i;
 8013774:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013778:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801377c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8013780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013784:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013788:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801378a:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801378c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8013790:	eed9 7a2b 	vfnms.f32	s15, s18, s23
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013794:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8013798:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801379c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 80137a0:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80137a4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80137a8:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80137ac:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80137b0:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
 80137b4:	e726      	b.n	8013604 <tMBSaw_tick+0x1e4>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 80137b6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80137ba:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80137be:	e6de      	b.n	801357e <tMBSaw_tick+0x15e>
	r = MINBLEP_PHASES * phase * inv_w;
 80137c0:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
 80137c4:	ed9f aa30 	vldr	s20, [pc, #192]	; 8013888 <tMBSaw_tick+0x468>
 80137c8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
        p += 1.0f;
 80137cc:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 80137d0:	eea8 0a8a 	vfma.f32	s0, s17, s20
 80137d4:	f001 fea8 	bl	8015528 <lrintf>
	r -= (float)i;
 80137d8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80137dc:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80137e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80137e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80137e8:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80137ec:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80137ee:	3201      	adds	r2, #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80137f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80137f4:	eed8 7a8a 	vfnms.f32	s15, s17, s20
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80137f8:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80137fc:	4a23      	ldr	r2, [pc, #140]	; (801388c <tMBSaw_tick+0x46c>)
	c->BLEPindices[c->mostRecentBLEP] = i;
 80137fe:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013802:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8013806:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801380a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801380e:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013812:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013816:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
 801381a:	e63e      	b.n	801349a <tMBSaw_tick+0x7a>
            p_at_reset += 1.0f;
 801381c:	ed9f ba1a 	vldr	s22, [pc, #104]	; 8013888 <tMBSaw_tick+0x468>
	i = lrintf(r - 0.5f);
 8013820:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
 8013824:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013828:	ee28 ba8b 	vmul.f32	s22, s17, s22
 801382c:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
 8013830:	eeab 0a09 	vfma.f32	s0, s22, s18
 8013834:	f001 fe78 	bl	8015528 <lrintf>
	r -= (float)i;
 8013838:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801383c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013840:	1c6a      	adds	r2, r5, #1
	r -= (float)i;
 8013842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8013846:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801384a:	3301      	adds	r3, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801384c:	f002 053f 	and.w	r5, r2, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013850:	4a0e      	ldr	r2, [pc, #56]	; (801388c <tMBSaw_tick+0x46c>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8013852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8013856:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->BLEPindices[c->mostRecentBLEP] = i;
 801385a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801385e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8013862:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013866:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801386a:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801386e:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8013872:	f8a4 5050 	strh.w	r5, [r4, #80]	; 0x50
}
 8013876:	e6cb      	b.n	8013610 <tMBSaw_tick+0x1f0>
        else if (sw < 0) p = 1.0f - eof_offset;
 8013878:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801387c:	ee38 8a47 	vsub.f32	s16, s16, s14
 8013880:	e6b6      	b.n	80135f0 <tMBSaw_tick+0x1d0>
 8013882:	bf00      	nop
 8013884:	08025548 	.word	0x08025548
 8013888:	42800000 	.word	0x42800000
 801388c:	bf800000 	.word	0xbf800000
    p += sw - (int)sw;
 8013890:	eeb0 8a49 	vmov.f32	s16, s18
 8013894:	e5f1      	b.n	801347a <tMBSaw_tick+0x5a>
 8013896:	bf00      	nop

08013898 <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
 8013898:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
 801389a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
 801389e:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
 80138a2:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
 80138a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 80138aa:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
 80138ae:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
 80138b2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80138b6:	4770      	bx	lr

080138b8 <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
 80138b8:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80138ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 80138be:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 80138c2:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 80138c6:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 80138ca:	eef1 7a67 	vneg.f32	s15, s15
 80138ce:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80138d2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80138d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138da:	eef4 6ac7 	vcmpe.f32	s13, s14
 80138de:	bfcc      	ite	gt
 80138e0:	2201      	movgt	r2, #1
 80138e2:	2200      	movle	r2, #0
 80138e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138e8:	f002 0201 	and.w	r2, r2, #1
 80138ec:	bf88      	it	hi
 80138ee:	2200      	movhi	r2, #0
 80138f0:	b122      	cbz	r2, 80138fc <tMBSaw_sync+0x44>
 80138f2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80138f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138fa:	da04      	bge.n	8013906 <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 80138fc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8013914 <tMBSaw_sync+0x5c>
 8013900:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
 8013904:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8013906:	ee37 7a66 	vsub.f32	s14, s14, s13
 801390a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801390e:	ed83 7a04 	vstr	s14, [r3, #16]
}
 8013912:	4770      	bx	lr
 8013914:	00000000 	.word	0x00000000

08013918 <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
 8013918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801391a:	698e      	ldr	r6, [r1, #24]
{
 801391c:	4607      	mov	r7, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801391e:	f44f 60af 	mov.w	r0, #1400	; 0x578
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8013922:	2500      	movs	r5, #0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8013924:	4631      	mov	r1, r6
 8013926:	f7fc fb15 	bl	800ff54 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
 801392a:	6873      	ldr	r3, [r6, #4]
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801392c:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 80139ac <tMBSawPulse_init+0x94>
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8013930:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8013932:	edd3 7a01 	vldr	s15, [r3, #4]
    c->gain = 1.0f;
 8013936:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->freq = 440.f;
 801393a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80139b0 <tMBSawPulse_init+0x98>
    c->lastsyncin = 0.0f;
 801393e:	2300      	movs	r3, #0
    c->_inv_w = 1.0f / c->_w;
 8013940:	eec6 6a27 	vdiv.f32	s13, s12, s15
    c->gain = 1.0f;
 8013944:	f500 60ae 	add.w	r0, r0, #1392	; 0x570
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8013948:	603c      	str	r4, [r7, #0]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801394a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->mempool = m;
 801394e:	6026      	str	r6, [r4, #0]
    c->gain = 1.0f;
 8013950:	6001      	str	r1, [r0, #0]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8013952:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    c->lastsyncin = 0.0f;
 8013956:	60e3      	str	r3, [r4, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8013958:	ee27 6a87 	vmul.f32	s12, s15, s14
    c->sync = 0.0f;
 801395c:	6123      	str	r3, [r4, #16]
    c->waveform = 0.0f;
 801395e:	61e3      	str	r3, [r4, #28]
    c->_z = 0.0f;
 8013960:	6323      	str	r3, [r4, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
 8013962:	6223      	str	r3, [r4, #32]
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8013964:	6363      	str	r3, [r4, #52]	; 0x34
    c->active = 1;
 8013966:	2301      	movs	r3, #1
    c->syncdir = 1.0f;
 8013968:	6161      	str	r1, [r4, #20]
    memset (c->BLEPindices, 0, 128 * sizeof (uint16_t));
 801396a:	4629      	mov	r1, r5
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801396c:	62a2      	str	r2, [r4, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
 801396e:	62e2      	str	r2, [r4, #44]	; 0x2c
    memset (c->BLEPindices, 0, 128 * sizeof (uint16_t));
 8013970:	f44f 7280 	mov.w	r2, #256	; 0x100
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8013974:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    memset (c->BLEPindices, 0, 128 * sizeof (uint16_t));
 8013978:	f104 006e 	add.w	r0, r4, #110	; 0x6e
    c->invSampleRate = leaf->invSampleRate;
 801397c:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    c->freq = 440.f;
 8013980:	ed84 7a02 	vstr	s14, [r4, #8]
    c->softsync = 0;
 8013984:	61a5      	str	r5, [r4, #24]
    c->_j = 0;
 8013986:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8013988:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
    c->numBLEPs = 0;
 801398c:	66a5      	str	r5, [r4, #104]	; 0x68
    c->_inv_w = 1.0f / c->_w;
 801398e:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    c->active = 1;
 8013992:	f8c4 3574 	str.w	r3, [r4, #1396]	; 0x574
    memset (c->BLEPindices, 0, 128 * sizeof (uint16_t));
 8013996:	f001 fb91 	bl	80150bc <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801399a:	4629      	mov	r1, r5
 801399c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80139a0:	2220      	movs	r2, #32
}
 80139a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 80139a6:	f001 bb89 	b.w	80150bc <memset>
 80139aa:	bf00      	nop
 80139ac:	3b14f209 	.word	0x3b14f209
 80139b0:	43dc0000 	.word	0x43dc0000

080139b4 <tMBSawPulse_tick>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tMBSawPulse_tick(tMBSawPulse* const osc)
#else
float tMBSawPulse_tick(tMBSawPulse* const osc)
#endif
{
 80139b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    _tMBSawPulse* c = *osc;
 80139b8:	6804      	ldr	r4, [r0, #0]
{
 80139ba:	ed2d 8b0e 	vpush	{d8-d14}
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    float shape = c->shape;
    float sawShape = 1.0f - c->shape;
    sync = c->sync;
 80139be:	ed94 8a04 	vldr	s16, [r4, #16]
    float sawShape = 1.0f - c->shape;
 80139c2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    float shape = c->shape;
 80139c6:	edd4 aa11 	vldr	s21, [r4, #68]	; 0x44
{
 80139ca:	b082      	sub	sp, #8
    x = c->_x;  /* temporary output variable */
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */

    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80139cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80139d0:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
 80139d4:	ee79 ba6a 	vsub.f32	s23, s18, s21
    p = c->_p;  /* phase [0, 1) */
 80139d8:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80139dc:	eebd bae5 	vcvt.s32.f32	s22, s11
    w = c->_w;  /* phase increment */
 80139e0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80139e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
 80139e8:	edd4 ca0a 	vldr	s25, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 80139ec:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
 80139f0:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
 80139f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80139f6:	dd75      	ble.n	8013ae4 <tMBSawPulse_tick+0x130>
 80139f8:	69a7      	ldr	r7, [r4, #24]
 80139fa:	2f00      	cmp	r7, #0
 80139fc:	dd2e      	ble.n	8013a5c <tMBSawPulse_tick+0xa8>
 80139fe:	edd4 6a05 	vldr	s13, [r4, #20]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8013a02:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8013a06:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 8013a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8013a0e:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8013a12:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
 8013a16:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8013a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013a1e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8013a22:	ee37 8a48 	vsub.f32	s16, s14, s16


    }


    else if (!k)
 8013a26:	ee1b 3a10 	vmov	r3, s22
    {  /* normal operation for pulse, signal currently high */

		if (sw > 0)
 8013a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d16e      	bne.n	8013b10 <tMBSawPulse_tick+0x15c>
		if (sw > 0)
 8013a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a36:	f340 8238 	ble.w	8013eaa <tMBSawPulse_tick+0x4f6>
		{
			if (p >= b) {
 8013a3a:	eef4 cac8 	vcmpe.f32	s25, s16
 8013a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a42:	f240 818d 	bls.w	8013d60 <tMBSawPulse_tick+0x3ac>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
				k = 1;
				x = -0.5f;
			}
			if (p >= 1.0f) {
 8013a46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013a4a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a52:	f280 8283 	bge.w	8013f5c <tMBSawPulse_tick+0x5a8>
 8013a56:	eddf 5ac0 	vldr	s11, [pc, #768]	; 8013d58 <tMBSawPulse_tick+0x3a4>
 8013a5a:	e067      	b.n	8013b2c <tMBSawPulse_tick+0x178>
    sw = w * c->syncdir;
 8013a5c:	edd4 8a05 	vldr	s17, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8013a60:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8013a64:	ee67 7aa8 	vmul.f32	s15, s15, s17
    float inv_sw = c->_inv_w * c->syncdir;
 8013a68:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
 8013a6c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8013a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013a74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013a78:	ee77 da66 	vsub.f32	s27, s14, s13
    if (sync > 0.0f && c->softsync == 0)
 8013a7c:	f040 8661 	bne.w	8014742 <tMBSawPulse_tick+0xd8e>
        if (sw > 0) p = eof_offset;
 8013a80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
        float eof_offset = sync * sw;
 8013a84:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
 8013a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8013a8c:	ee3d cac8 	vsub.f32	s24, s27, s16
        if (sw > 0) p = eof_offset;
 8013a90:	f340 80eb 	ble.w	8013c6a <tMBSawPulse_tick+0x2b6>
		 if (!k)
 8013a94:	ee1b 3a10 	vmov	r3, s22
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	f040 821b 	bne.w	8013ed4 <tMBSawPulse_tick+0x520>
				 if (p_at_reset >= b)
 8013a9e:	eef4 cacc 	vcmpe.f32	s25, s24
    if (c->active)
 8013aa2:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
				 if (p_at_reset >= b)
 8013aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aaa:	f240 844e 	bls.w	801434a <tMBSawPulse_tick+0x996>
				 if (p_at_reset >= 1.0f)
 8013aae:	eeb4 cac9 	vcmpe.f32	s24, s18
 8013ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab6:	f280 8287 	bge.w	8013fc8 <tMBSawPulse_tick+0x614>
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013aba:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	f040 8215 	bne.w	8013eee <tMBSawPulse_tick+0x53a>
			if (p >= b) {
 8013ac4:	eef4 cac8 	vcmpe.f32	s25, s16
 8013ac8:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8013d58 <tMBSawPulse_tick+0x3a4>
 8013acc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013ad0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8013ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad8:	bf88      	it	hi
 8013ada:	eef0 5a47 	vmovhi.f32	s11, s14
 8013ade:	fe3a aa27 	vselgt.f32	s20, s20, s15
 8013ae2:	e025      	b.n	8013b30 <tMBSawPulse_tick+0x17c>
    sw = w * c->syncdir;
 8013ae4:	edd4 8a05 	vldr	s17, [r4, #20]
    else if (!k)
 8013ae8:	ee1b 3a10 	vmov	r3, s22
    float inv_sw = c->_inv_w * c->syncdir;
 8013aec:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8013af0:	ee67 7aa8 	vmul.f32	s15, s15, s17
    float inv_sw = c->_inv_w * c->syncdir;
 8013af4:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
 8013af8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8013afc:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
 8013b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 8013b04:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8013b08:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d090      	beq.n	8013a32 <tMBSawPulse_tick+0x7e>
			}
		}

	} else {  /* normal operation, signal currently low */

		if (sw > 0)
 8013b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b14:	f340 8180 	ble.w	8013e18 <tMBSawPulse_tick+0x464>
		{
			if (p >= 1.0f) {
 8013b18:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013b1c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8013b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b24:	f280 80b1 	bge.w	8013c8a <tMBSawPulse_tick+0x2d6>
    c->_w = w;
    c->_b = b;
    c->_x = x;
    c->_z = z;
    c->_j = j;
    c->_k = k;
 8013b28:	eef8 5acb 	vcvt.f32.s32	s11, s22
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8013b2c:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 8013b30:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8013b34:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
 8013b36:	ee2a 7a2a 	vmul.f32	s14, s20, s21
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8013b3a:	b2ea      	uxtb	r2, r5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8013b3c:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 8013b40:	ee76 6ac8 	vsub.f32	s13, s13, s16
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8013b44:	f88d 2005 	strb.w	r2, [sp, #5]
    c->_f[currentSamp] += (x * shape);//pulse
 8013b48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013b4c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c->_f[currentSamp] += (x * shape);//pulse
 8013b50:	eea6 7aab 	vfma.f32	s14, s13, s23
 8013b54:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013b58:	2a00      	cmp	r2, #0
 8013b5a:	f000 81b6 	beq.w	8013eca <tMBSawPulse_tick+0x516>
 8013b5e:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8013b62:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8013b66:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013b6a:	2000      	movs	r0, #0
 8013b6c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8013b70:	4d78      	ldr	r5, [pc, #480]	; (8013d54 <tMBSawPulse_tick+0x3a0>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8013b72:	ebae 0300 	sub.w	r3, lr, r0
 8013b76:	b29b      	uxth	r3, r3
 8013b78:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 127;
 8013b7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b84:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013b88:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8013b8c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013b90:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8013b94:	b289      	uxth	r1, r1
 8013b96:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8013b9a:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8013b9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013ba0:	fa1f f888 	uxth.w	r8, r8
 8013ba4:	fa1f f989 	uxth.w	r9, r9
 8013ba8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8013bac:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8013bb0:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
 8013bb4:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8013bb8:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8013bbc:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013bbe:	ed98 6a5c 	vldr	s12, [r8, #368]	; 0x170
 8013bc2:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 8013bc6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8013bca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013bce:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8013bd2:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8013bd6:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8013bd8:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013bdc:	edd9 6a01 	vldr	s13, [r9, #4]
 8013be0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8013be4:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8013be8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013bec:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013bf0:	edd1 6a5d 	vldr	s13, [r1, #372]	; 0x174
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8013bf4:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8013bf8:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
 8013bfc:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8013bfe:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8013c02:	d32c      	bcc.n	8013c5e <tMBSawPulse_tick+0x2aa>
			c->numBLEPs--;
 8013c04:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013c08:	3001      	adds	r0, #1
 8013c0a:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8013c0e:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013c10:	4282      	cmp	r2, r0
			c->numBLEPs--;
 8013c12:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013c16:	dcac      	bgt.n	8013b72 <tMBSawPulse_tick+0x1be>
 8013c18:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8013c1c:	ee37 7a69 	vsub.f32	s14, s14, s19

    return -c->out * c->gain;
 8013c20:	f504 63ae 	add.w	r3, r4, #1392	; 0x570
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8013c24:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 8013c28:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8013c2a:	eef0 7a69 	vmov.f32	s15, s19
    return -c->out * c->gain;
 8013c2e:	ed93 0a00 	vldr	s0, [r3]
    j = (j+1) & 7;
 8013c32:	f006 0607 	and.w	r6, r6, #7
    c->_p = p;
 8013c36:	ed84 8a08 	vstr	s16, [r4, #32]
    c->_x = x;
 8013c3a:	ed84 aa0b 	vstr	s20, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8013c3e:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_k = k;
 8013c42:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    c->_j = j;
 8013c46:	63a6      	str	r6, [r4, #56]	; 0x38
    return -c->out * c->gain;
 8013c48:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
 8013c4c:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8013c50:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 8013c54:	b002      	add	sp, #8
 8013c56:	ecbd 8b0e 	vpop	{d8-d14}
 8013c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8013c5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8013c62:	3001      	adds	r0, #1
 8013c64:	4283      	cmp	r3, r0
 8013c66:	dc84      	bgt.n	8013b72 <tMBSawPulse_tick+0x1be>
 8013c68:	e7d6      	b.n	8013c18 <tMBSawPulse_tick+0x264>
        else if (sw < 0) p = 1.0f - eof_offset;
 8013c6a:	f100 8243 	bmi.w	80140f4 <tMBSawPulse_tick+0x740>
		 if (!k)
 8013c6e:	ee1b 3a10 	vmov	r3, s22
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	f040 8191 	bne.w	8013f9a <tMBSawPulse_tick+0x5e6>
    p += sw - (int)sw;
 8013c78:	eeb0 da6d 	vmov.f32	s26, s27
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8013c7c:	eeb0 8a4d 	vmov.f32	s16, s26
 8013c80:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 8013c84:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013d58 <tMBSawPulse_tick+0x3a4>
 8013c88:	e752      	b.n	8013b30 <tMBSawPulse_tick+0x17c>
    if (c->active)
 8013c8a:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
				p -= 1.0f;
 8013c8e:	ee38 8a49 	vsub.f32	s16, s16, s18
    if (c->active)
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	f000 8175 	beq.w	8013f82 <tMBSawPulse_tick+0x5ce>
		i = lrintf(r - 0.5f);
 8013c98:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8013c9c:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8013d5c <tMBSawPulse_tick+0x3a8>
 8013ca0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013ca4:	eeb0 0a4b 	vmov.f32	s0, s22
 8013ca8:	eea8 0a28 	vfma.f32	s0, s16, s17
 8013cac:	f001 fc3c 	bl	8015528 <lrintf>
		r -= (float)i;
 8013cb0:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013cb4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (!k && p >= b) {
 8013cb8:	eef4 cac8 	vcmpe.f32	s25, s16
		r -= (float)i;
 8013cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013cc0:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013cc4:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8013cc6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013cca:	3201      	adds	r2, #1
			if (!k && p >= b) {
 8013ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013cd0:	f003 077f 	and.w	r7, r3, #127	; 0x7f
		r -= (float)i;
 8013cd4:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013cd8:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013cdc:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013ce0:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013ce4:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013ce8:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8013cec:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013cf0:	ed83 9a5d 	vstr	s18, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013cf4:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (!k && p >= b) {
 8013cf8:	f200 81b4 	bhi.w	8014064 <tMBSawPulse_tick+0x6b0>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8013cfc:	ee78 ca6c 	vsub.f32	s25, s16, s25
		i = lrintf(r - 0.5f);
 8013d00:	eeb0 0a4b 	vmov.f32	s0, s22
				x = -0.5f;
 8013d04:	eeb0 aa4b 	vmov.f32	s20, s22
		i = lrintf(r - 0.5f);
 8013d08:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8013d0c:	f001 fc0c 	bl	8015528 <lrintf>
		r -= (float)i;
 8013d10:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013d14:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013d16:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
 8013d18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8013d1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013d24:	f002 057f 	and.w	r5, r2, #127	; 0x7f
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8013d28:	eef1 7a6a 	vneg.f32	s15, s21
		r -= (float)i;
 8013d2c:	ee9c 7aa8 	vfnms.f32	s14, s25, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013d30:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013d34:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013d38:	eef0 5a49 	vmov.f32	s11, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013d3c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013d40:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013d44:	edc2 7a5d 	vstr	s15, [r2, #372]	; 0x174
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013d48:	ed82 7a5c 	vstr	s14, [r2, #368]	; 0x170
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013d4c:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 8013d50:	e6ee      	b.n	8013b30 <tMBSawPulse_tick+0x17c>
 8013d52:	bf00      	nop
 8013d54:	08025548 	.word	0x08025548
 8013d58:	00000000 	.word	0x00000000
 8013d5c:	42800000 	.word	0x42800000
    if (c->active)
 8013d60:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f000 8125 	beq.w	8013fb4 <tMBSawPulse_tick+0x600>
		i = lrintf(r - 0.5f);
 8013d6a:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 8013d6e:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 8013d5c <tMBSawPulse_tick+0x3a8>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8013d72:	ee78 ca6c 	vsub.f32	s25, s16, s25
 8013d76:	ee68 8aa7 	vmul.f32	s17, s17, s15
		i = lrintf(r - 0.5f);
 8013d7a:	eeb0 0a4a 	vmov.f32	s0, s20
 8013d7e:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8013d82:	f001 fbd1 	bl	8015528 <lrintf>
		r -= (float)i;
 8013d86:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013d8a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (p >= 1.0f) {
 8013d8e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		r -= (float)i;
 8013d92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013d96:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013d9a:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8013d9c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
			if (p >= 1.0f) {
 8013da0:	eeb4 8ae5 	vcmpe.f32	s16, s11
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013da4:	3201      	adds	r2, #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013da6:	f003 077f 	and.w	r7, r3, #127	; 0x7f
		r -= (float)i;
 8013daa:	ee9c 7aa8 	vfnms.f32	s14, s25, s17
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8013dae:	eef1 7a6a 	vneg.f32	s15, s21
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013db2:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013db6:	eb04 0347 	add.w	r3, r4, r7, lsl #1
			if (p >= 1.0f) {
 8013dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013dbe:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013dc2:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013dc6:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8013dca:	ed83 7a5c 	vstr	s14, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013dce:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013dd2:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (p >= 1.0f) {
 8013dd6:	f6ff aeab 	blt.w	8013b30 <tMBSawPulse_tick+0x17c>
				p -= 1.0f;
 8013dda:	ee38 8a65 	vsub.f32	s16, s16, s11
		i = lrintf(r - 0.5f);
 8013dde:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
 8013de2:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 8013de6:	eea8 0a28 	vfma.f32	s0, s16, s17
 8013dea:	f001 fb9d 	bl	8015528 <lrintf>
		r -= (float)i;
 8013dee:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013df2:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013df4:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
 8013df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013dfa:	ed5f 5a29 	vldr	s11, [pc, #-164]	; 8013d58 <tMBSawPulse_tick+0x3a4>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013e02:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8013e06:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013e0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
		r -= (float)i;
 8013e0e:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013e12:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8013e16:	e03b      	b.n	8013e90 <tMBSawPulse_tick+0x4dc>
		else if (sw < 0)
 8013e18:	f57f ae86 	bpl.w	8013b28 <tMBSawPulse_tick+0x174>
			if (p < b) {
 8013e1c:	eef4 cac8 	vcmpe.f32	s25, s16
 8013e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e24:	f300 8121 	bgt.w	801406a <tMBSawPulse_tick+0x6b6>
			if (p < 0.0f) {
 8013e28:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e30:	f57f ae7a 	bpl.w	8013b28 <tMBSawPulse_tick+0x174>
				p += 1.0f;
 8013e34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (c->active)
 8013e38:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
				p += 1.0f;
 8013e3c:	ee78 7a27 	vadd.f32	s15, s16, s15
    if (c->active)
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	f000 840f 	beq.w	8014664 <tMBSawPulse_tick+0xcb0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013e46:	f8b4 706a 	ldrh.w	r7, [r4, #106]	; 0x6a
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013e4a:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
		i = lrintf(r - 0.5f);
 8013e4e:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 8013e52:	ed1f 9a3e 	vldr	s18, [pc, #-248]	; 8013d5c <tMBSawPulse_tick+0x3a8>
		r = MINBLEP_PHASES * phase * inv_w;
 8013e56:	ee68 8a88 	vmul.f32	s17, s17, s16
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013e5a:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
 8013e5e:	eeb0 0a4a 	vmov.f32	s0, s20
 8013e62:	eea8 0a89 	vfma.f32	s0, s17, s18
 8013e66:	f001 fb5f 	bl	8015528 <lrintf>
		r -= (float)i;
 8013e6a:	ee07 0a90 	vmov	s15, r0
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013e6e:	1c6a      	adds	r2, r5, #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013e70:	1c7b      	adds	r3, r7, #1
		r -= (float)i;
 8013e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8013e76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013e7a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013e82:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013e86:	4a98      	ldr	r2, [pc, #608]	; (80140e8 <tMBSawPulse_tick+0x734>)
		r -= (float)i;
 8013e88:	eed8 7a89 	vfnms.f32	s15, s17, s18
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013e8c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013e90:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8013e94:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013e98:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8013e9c:	edc1 7a5c 	vstr	s15, [r1, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013ea0:	f8c1 2174 	str.w	r2, [r1, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013ea4:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 8013ea8:	e642      	b.n	8013b30 <tMBSawPulse_tick+0x17c>
			if (p < 0.0f) {
 8013eaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb2:	d505      	bpl.n	8013ec0 <tMBSawPulse_tick+0x50c>
 8013eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ebc:	f100 82e6 	bmi.w	801448c <tMBSawPulse_tick+0xad8>
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8013ec0:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 8013ec4:	eddf 5a89 	vldr	s11, [pc, #548]	; 80140ec <tMBSawPulse_tick+0x738>
 8013ec8:	e632      	b.n	8013b30 <tMBSawPulse_tick+0x17c>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8013eca:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013ece:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8013ed2:	e6a3      	b.n	8013c1c <tMBSawPulse_tick+0x268>
				 if (p_at_reset >= 1.0f)
 8013ed4:	eeb4 cac9 	vcmpe.f32	s24, s18
    if (c->active)
 8013ed8:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
				 if (p_at_reset >= 1.0f)
 8013edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ee0:	f280 81ce 	bge.w	8014280 <tMBSawPulse_tick+0x8cc>
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013ee4:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f000 8298 	beq.w	801441e <tMBSawPulse_tick+0xa6a>
		r = MINBLEP_PHASES * phase * inv_w;
 8013eee:	eddf 7a80 	vldr	s15, [pc, #512]	; 80140f0 <tMBSawPulse_tick+0x73c>
		i = lrintf(r - 0.5f);
 8013ef2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
 8013ef6:	ee2b ca8c 	vmul.f32	s24, s23, s24
 8013efa:	ee68 8aa7 	vmul.f32	s17, s17, s15
		i = lrintf(r - 0.5f);
 8013efe:	eea8 0a88 	vfma.f32	s0, s17, s16
 8013f02:	f001 fb11 	bl	8015528 <lrintf>
		r -= (float)i;
 8013f06:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013f0a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013f0e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8013f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013f16:	1c6a      	adds	r2, r5, #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013f18:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013f1a:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013f1e:	f003 077f 	and.w	r7, r3, #127	; 0x7f
		r -= (float)i;
 8013f22:	eed8 7a88 	vfnms.f32	s15, s17, s16
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013f26:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013f2a:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8013f2e:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8013f32:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8013f36:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8013f3a:	ed83 ca5d 	vstr	s24, [r3, #372]	; 0x174
            if (k) {
 8013f3e:	ee1b 3a10 	vmov	r3, s22
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013f42:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
            if (k) {
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d172      	bne.n	8014030 <tMBSawPulse_tick+0x67c>
			if (p >= b) {
 8013f4a:	eef4 cac8 	vcmpe.f32	s25, s16
 8013f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f52:	f240 8268 	bls.w	8014426 <tMBSawPulse_tick+0xa72>
 8013f56:	eddf 5a65 	vldr	s11, [pc, #404]	; 80140ec <tMBSawPulse_tick+0x738>
 8013f5a:	e5e9      	b.n	8013b30 <tMBSawPulse_tick+0x17c>
    if (c->active)
 8013f5c:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
				p -= 1.0f;
 8013f60:	ee38 8a67 	vsub.f32	s16, s16, s15
    if (c->active)
 8013f64:	b153      	cbz	r3, 8013f7c <tMBSawPulse_tick+0x5c8>
 8013f66:	eddf 7a62 	vldr	s15, [pc, #392]	; 80140f0 <tMBSawPulse_tick+0x73c>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013f6a:	f8b4 706a 	ldrh.w	r7, [r4, #106]	; 0x6a
 8013f6e:	ee68 8aa7 	vmul.f32	s17, s17, s15
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013f72:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 8013f76:	e732      	b.n	8013dde <tMBSawPulse_tick+0x42a>
				p -= 1.0f;
 8013f78:	ee38 8a65 	vsub.f32	s16, s16, s11
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8013f7c:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8013f80:	e79e      	b.n	8013ec0 <tMBSawPulse_tick+0x50c>
			if (!k && p >= b) {
 8013f82:	eef4 cac8 	vcmpe.f32	s25, s16
 8013f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8a:	d8f7      	bhi.n	8013f7c <tMBSawPulse_tick+0x5c8>
				x = -0.5f;
 8013f8c:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8013f90:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 8013f94:	eef0 5a49 	vmov.f32	s11, s18
 8013f98:	e5ca      	b.n	8013b30 <tMBSawPulse_tick+0x17c>
			 else if (sw < 0)
 8013f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa2:	f100 820d 	bmi.w	80143c0 <tMBSawPulse_tick+0xa0c>
    c->_k = k;
 8013fa6:	eef8 5acb 	vcvt.f32.s32	s11, s22
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8013faa:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    p += sw - (int)sw;
 8013fae:	eeb0 8a6d 	vmov.f32	s16, s27
 8013fb2:	e5bd      	b.n	8013b30 <tMBSawPulse_tick+0x17c>
			if (p >= 1.0f) {
 8013fb4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013fb8:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8013fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc0:	dada      	bge.n	8013f78 <tMBSawPulse_tick+0x5c4>
				x = -0.5f;
 8013fc2:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 8013fc6:	e5b1      	b.n	8013b2c <tMBSawPulse_tick+0x178>
					 p_at_reset -= 1.0f;
 8013fc8:	ee3c ca49 	vsub.f32	s24, s24, s18
    if (c->active)
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	f000 8219 	beq.w	8014404 <tMBSawPulse_tick+0xa50>
 8013fd2:	ed9f da47 	vldr	s26, [pc, #284]	; 80140f0 <tMBSawPulse_tick+0x73c>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8013fd6:	ee38 9a0c 	vadd.f32	s18, s16, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013fda:	f8b4 706a 	ldrh.w	r7, [r4, #106]	; 0x6a
 8013fde:	ee28 da8d 	vmul.f32	s26, s17, s26
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013fe2:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
		i = lrintf(r - 0.5f);
 8013fe6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
 8013fea:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 8013fee:	eea9 0a0d 	vfma.f32	s0, s18, s26
 8013ff2:	f001 fa99 	bl	8015528 <lrintf>
		r -= (float)i;
 8013ff6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8013ffa:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8013ffc:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
 8013ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014002:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801400a:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801400e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
		r -= (float)i;
 8014012:	eed9 7a0d 	vfnms.f32	s15, s18, s26
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014016:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801401a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801401e:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014022:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014026:	f8c1 2174 	str.w	r2, [r1, #372]	; 0x174
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801402a:	edc1 7a5c 	vstr	s15, [r1, #368]	; 0x170
    if (c->active)
 801402e:	e75e      	b.n	8013eee <tMBSawPulse_tick+0x53a>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014030:	3701      	adds	r7, #1
			if (p >= b) {
 8014032:	eef4 cac8 	vcmpe.f32	s25, s16
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014036:	1c6a      	adds	r2, r5, #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014038:	f007 077f 	and.w	r7, r7, #127	; 0x7f
			if (p >= b) {
 801403c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014040:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014044:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014048:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801404c:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014050:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8014054:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014058:	edc3 aa5d 	vstr	s21, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801405c:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (p >= b) {
 8014060:	f240 81e1 	bls.w	8014426 <tMBSawPulse_tick+0xa72>
				x = 0.5f;
 8014064:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8014068:	e775      	b.n	8013f56 <tMBSawPulse_tick+0x5a2>
    if (c->active)
 801406a:	f204 5374 	addw	r3, r4, #1396	; 0x574
 801406e:	ed93 ba00 	vldr	s22, [r3]
 8014072:	ee1b 3a10 	vmov	r3, s22
 8014076:	2b00      	cmp	r3, #0
 8014078:	f000 8284 	beq.w	8014584 <tMBSawPulse_tick+0xbd0>
		r = MINBLEP_PHASES * phase * inv_w;
 801407c:	ed9f 9a1c 	vldr	s18, [pc, #112]	; 80140f0 <tMBSawPulse_tick+0x73c>
 8014080:	ee78 ca6c 	vsub.f32	s25, s16, s25
		i = lrintf(r - 0.5f);
 8014084:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8014088:	ee28 9a89 	vmul.f32	s18, s17, s18
 801408c:	eeac 0a89 	vfma.f32	s0, s25, s18
 8014090:	f001 fa4a 	bl	8015528 <lrintf>
		r -= (float)i;
 8014094:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014098:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (p < 0.0f) {
 801409c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		r -= (float)i;
 80140a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80140a4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80140a8:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80140aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80140ae:	3201      	adds	r2, #1
			if (p < 0.0f) {
 80140b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80140b4:	f003 077f 	and.w	r7, r3, #127	; 0x7f
		r -= (float)i;
 80140b8:	eedc 7a89 	vfnms.f32	s15, s25, s18
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80140bc:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80140c0:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80140c4:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80140c8:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80140cc:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80140d0:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80140d4:	edc3 aa5d 	vstr	s21, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80140d8:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (p < 0.0f) {
 80140dc:	d5c2      	bpl.n	8014064 <tMBSawPulse_tick+0x6b0>
				p += 1.0f;
 80140de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80140e2:	ee78 7a27 	vadd.f32	s15, s16, s15
    if (c->active)
 80140e6:	e6b2      	b.n	8013e4e <tMBSawPulse_tick+0x49a>
 80140e8:	bf800000 	.word	0xbf800000
 80140ec:	00000000 	.word	0x00000000
 80140f0:	42800000 	.word	0x42800000
		 if (!k)
 80140f4:	ee1b 3a10 	vmov	r3, s22
        else if (sw < 0) p = 1.0f - eof_offset;
 80140f8:	ee39 da48 	vsub.f32	s26, s18, s16
		 if (!k)
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	f040 8161 	bne.w	80143c4 <tMBSawPulse_tick+0xa10>
				 if (p_at_reset < 0.0f)
 8014102:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8014106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801410a:	f140 80a0 	bpl.w	801424e <tMBSawPulse_tick+0x89a>
    if (c->active)
 801410e:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
					 p_at_reset += 1.0f;
 8014112:	ee3c ca09 	vadd.f32	s24, s24, s18
    if (c->active)
 8014116:	2b00      	cmp	r3, #0
 8014118:	f000 82b3 	beq.w	8014682 <tMBSawPulse_tick+0xcce>
		r = MINBLEP_PHASES * phase * inv_w;
 801411c:	ed1f 9a0c 	vldr	s18, [pc, #-48]	; 80140f0 <tMBSawPulse_tick+0x73c>
		i = lrintf(r - 0.5f);
 8014120:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8014124:	ee28 9a89 	vmul.f32	s18, s17, s18
 8014128:	eead 0a89 	vfma.f32	s0, s27, s18
 801412c:	f001 f9fc 	bl	8015528 <lrintf>
		r -= (float)i;
 8014130:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014134:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (k && p_at_reset < b)
 8014138:	eef4 cacc 	vcmpe.f32	s25, s24
		r -= (float)i;
 801413c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014140:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014144:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014146:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801414a:	3201      	adds	r2, #1
				 if (k && p_at_reset < b)
 801414c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014150:	f003 077f 	and.w	r7, r3, #127	; 0x7f
		r -= (float)i;
 8014154:	eedd 7a89 	vfnms.f32	s15, s27, s18
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014158:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801415c:	4ac8      	ldr	r2, [pc, #800]	; (8014480 <tMBSawPulse_tick+0xacc>)
		c->BLEPindices[c->mostRecentBLEP] = i;
 801415e:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014162:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014166:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801416a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801416e:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014172:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014176:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
				 if (k && p_at_reset < b)
 801417a:	f340 82ee 	ble.w	801475a <tMBSawPulse_tick+0xda6>
		r = MINBLEP_PHASES * phase * inv_w;
 801417e:	ee78 da6c 	vsub.f32	s27, s16, s25
		i = lrintf(r - 0.5f);
 8014182:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
 8014186:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 801418a:	ee7d da8c 	vadd.f32	s27, s27, s24
        else if (sw < 0) p = 1.0f - eof_offset;
 801418e:	eeb0 8a4d 	vmov.f32	s16, s26
		i = lrintf(r - 0.5f);
 8014192:	eead 0a89 	vfma.f32	s0, s27, s18
 8014196:	f001 f9c7 	bl	8015528 <lrintf>
		r -= (float)i;
 801419a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801419e:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80141a0:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
 80141a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80141a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80141aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80141ae:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		r -= (float)i;
 80141b2:	eedd 7a89 	vfnms.f32	s15, s27, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
 80141b6:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80141ba:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80141be:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80141c2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80141c6:	edc2 aa5d 	vstr	s21, [r2, #372]	; 0x174
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80141ca:	edc2 7a5c 	vstr	s15, [r2, #368]	; 0x170
		r = MINBLEP_PHASES * phase * inv_w;
 80141ce:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80141d2:	eddf 7aad 	vldr	s15, [pc, #692]	; 8014488 <tMBSawPulse_tick+0xad4>
		i = lrintf(r - 0.5f);
 80141d6:	eebe ea00 	vmov.f32	s28, #224	; 0xbf000000 -0.5
 80141da:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80141de:	ee7d da49 	vsub.f32	s27, s26, s18
 80141e2:	eeb0 0a4e 	vmov.f32	s0, s28
 80141e6:	eead 0aa8 	vfma.f32	s0, s27, s17
 80141ea:	f001 f99d 	bl	8015528 <lrintf>
		r -= (float)i;
 80141ee:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80141f2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 80141f6:	ee3a 7ac9 	vsub.f32	s14, s21, s18
		r -= (float)i;
 80141fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPindices[c->mostRecentBLEP] = i;
 80141fe:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014202:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014204:	1c6a      	adds	r2, r5, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 8014206:	ee27 ca0c 	vmul.f32	s24, s14, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801420a:	f003 077f 	and.w	r7, r3, #127	; 0x7f
		r -= (float)i;
 801420e:	eedd 7aa8 	vfnms.f32	s15, s27, s17
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014212:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014216:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801421a:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801421e:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014222:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8014226:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801422a:	ed83 ca5d 	vstr	s24, [r3, #372]	; 0x174
			if (!k) {
 801422e:	ee1b 3a10 	vmov	r3, s22
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014232:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (!k) {
 8014236:	2b00      	cmp	r3, #0
 8014238:	f000 81ef 	beq.w	801461a <tMBSawPulse_tick+0xc66>
			if (p < b) {
 801423c:	eeb4 daec 	vcmpe.f32	s26, s25
 8014240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014244:	f100 81e2 	bmi.w	801460c <tMBSawPulse_tick+0xc58>
    c->_k = k;
 8014248:	eef8 5acb 	vcvt.f32.s32	s11, s22
 801424c:	e470      	b.n	8013b30 <tMBSawPulse_tick+0x17c>
		else if (sw < 0)
 801424e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014256:	f57f ad11 	bpl.w	8013c7c <tMBSawPulse_tick+0x2c8>
    if (c->active)
 801425a:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801425e:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
 8014262:	2b00      	cmp	r3, #0
 8014264:	f040 818b 	bne.w	801457e <tMBSawPulse_tick+0xbca>
				x = -0.5f;
 8014268:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
				k = 1;
 801426c:	ed9f ba85 	vldr	s22, [pc, #532]	; 8014484 <tMBSawPulse_tick+0xad0>
					 k = 1;
 8014270:	eeb0 8a4d 	vmov.f32	s16, s26
			if (p < b) {
 8014274:	eef4 cacd 	vcmpe.f32	s25, s26
 8014278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801427c:	dde4      	ble.n	8014248 <tMBSawPulse_tick+0x894>
 801427e:	e6f1      	b.n	8014064 <tMBSawPulse_tick+0x6b0>
					 p_at_reset -= 1.0f;
 8014280:	ee3c ca49 	vsub.f32	s24, s24, s18
    if (c->active)
 8014284:	2b00      	cmp	r3, #0
 8014286:	f000 80c3 	beq.w	8014410 <tMBSawPulse_tick+0xa5c>
		i = lrintf(r - 0.5f);
 801428a:	eefe da00 	vmov.f32	s27, #224	; 0xbf000000 -0.5
 801428e:	ed9f da7e 	vldr	s26, [pc, #504]	; 8014488 <tMBSawPulse_tick+0xad4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8014292:	ee38 aa0c 	vadd.f32	s20, s16, s24
 8014296:	ee28 da8d 	vmul.f32	s26, s17, s26
		i = lrintf(r - 0.5f);
 801429a:	eeb0 0a6d 	vmov.f32	s0, s27
 801429e:	eeaa 0a0d 	vfma.f32	s0, s20, s26
 80142a2:	f001 f941 	bl	8015528 <lrintf>
		r -= (float)i;
 80142a6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80142aa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (!k && p_at_reset >= b)
 80142ae:	eef4 cacc 	vcmpe.f32	s25, s24
		r -= (float)i;
 80142b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80142b6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80142ba:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80142bc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80142c0:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
 80142c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80142c6:	f003 087f 	and.w	r8, r3, #127	; 0x7f
		r -= (float)i;
 80142ca:	eeda 7a0d 	vfnms.f32	s15, s20, s26
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80142ce:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80142d2:	eb04 0348 	add.w	r3, r4, r8, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80142d6:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80142da:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80142de:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 80142e2:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80142e6:	ed83 9a5d 	vstr	s18, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80142ea:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
				 if (!k && p_at_reset >= b)
 80142ee:	f200 821b 	bhi.w	8014728 <tMBSawPulse_tick+0xd74>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 80142f2:	ee38 9a6c 	vsub.f32	s18, s16, s25
					 k = 1;
 80142f6:	ed9f ba63 	vldr	s22, [pc, #396]	; 8014484 <tMBSawPulse_tick+0xad0>
		i = lrintf(r - 0.5f);
 80142fa:	eeb0 0a6d 	vmov.f32	s0, s27
					 x = -0.5f;
 80142fe:	eeb0 aa6d 	vmov.f32	s20, s27
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8014302:	ee39 9a0c 	vadd.f32	s18, s18, s24
		i = lrintf(r - 0.5f);
 8014306:	eead 0a09 	vfma.f32	s0, s26, s18
 801430a:	f001 f90d 	bl	8015528 <lrintf>
		r -= (float)i;
 801430e:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014312:	f108 0301 	add.w	r3, r8, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014316:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
 8014318:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801431c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014324:	f002 057f 	and.w	r5, r2, #127	; 0x7f
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8014328:	eef1 7a6a 	vneg.f32	s15, s21
		r -= (float)i;
 801432c:	ee9d 7a09 	vfnms.f32	s14, s26, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014330:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014334:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014338:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801433c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014340:	edc2 7a5d 	vstr	s15, [r2, #372]	; 0x174
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014344:	ed82 7a5c 	vstr	s14, [r2, #368]	; 0x170
    if (c->active)
 8014348:	e5d1      	b.n	8013eee <tMBSawPulse_tick+0x53a>
 801434a:	2b00      	cmp	r3, #0
 801434c:	d055      	beq.n	80143fa <tMBSawPulse_tick+0xa46>
		i = lrintf(r - 0.5f);
 801434e:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 8014352:	ed9f da4d 	vldr	s26, [pc, #308]	; 8014488 <tMBSawPulse_tick+0xad4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8014356:	ee7d daec 	vsub.f32	s27, s27, s25
 801435a:	ee28 da8d 	vmul.f32	s26, s17, s26
		i = lrintf(r - 0.5f);
 801435e:	eeb0 0a4a 	vmov.f32	s0, s20
 8014362:	eead 0a8d 	vfma.f32	s0, s27, s26
 8014366:	f001 f8df 	bl	8015528 <lrintf>
		r -= (float)i;
 801436a:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801436e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (p_at_reset >= 1.0f)
 8014372:	eeb4 cac9 	vcmpe.f32	s24, s18
		r -= (float)i;
 8014376:	eef8 6ac7 	vcvt.f32.s32	s13, s14
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801437a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801437e:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8014380:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014384:	3201      	adds	r2, #1
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8014386:	eef1 7a6a 	vneg.f32	s15, s21
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801438a:	f003 077f 	and.w	r7, r3, #127	; 0x7f
		r -= (float)i;
 801438e:	eedd 6a8d 	vfnms.f32	s13, s27, s26
				 if (p_at_reset >= 1.0f)
 8014392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014396:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801439a:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801439e:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80143a2:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80143a6:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80143aa:	edc3 6a5c 	vstr	s13, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80143ae:	edc3 7a5d 	vstr	s15, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80143b2:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
				 if (p_at_reset >= 1.0f)
 80143b6:	f280 815f 	bge.w	8014678 <tMBSawPulse_tick+0xcc4>
					 k = 1;
 80143ba:	ed9f ba32 	vldr	s22, [pc, #200]	; 8014484 <tMBSawPulse_tick+0xad0>
 80143be:	e596      	b.n	8013eee <tMBSawPulse_tick+0x53a>
    p += sw - (int)sw;
 80143c0:	eeb0 da6d 	vmov.f32	s26, s27
				 if (p_at_reset < b)
 80143c4:	eef4 cacc 	vcmpe.f32	s25, s24
    if (c->active)
 80143c8:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
				 if (p_at_reset < b)
 80143cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d0:	f300 80e1 	bgt.w	8014596 <tMBSawPulse_tick+0xbe2>
				 if (p_at_reset < 0.0f)
 80143d4:	eeb5 cac0 	vcmpe.f32	s24, #0.0
 80143d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143dc:	f100 8167 	bmi.w	80146ae <tMBSawPulse_tick+0xcfa>
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80143e0:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	f040 80ca 	bne.w	801457e <tMBSawPulse_tick+0xbca>
			if (!k) {
 80143ea:	ee1b 3a10 	vmov	r3, s22
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f43f af3a 	beq.w	8014268 <tMBSawPulse_tick+0x8b4>
 80143f4:	eeb0 8a4d 	vmov.f32	s16, s26
 80143f8:	e73c      	b.n	8014274 <tMBSawPulse_tick+0x8c0>
				 if (p_at_reset >= 1.0f)
 80143fa:	eeb4 cac9 	vcmpe.f32	s24, s18
 80143fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014402:	db0a      	blt.n	801441a <tMBSawPulse_tick+0xa66>
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014404:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8014408:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
 801440c:	f7ff bb5a 	b.w	8013ac4 <tMBSawPulse_tick+0x110>
				 if (!k && p_at_reset >= b)
 8014410:	eef4 cacc 	vcmpe.f32	s25, s24
 8014414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014418:	d8f4      	bhi.n	8014404 <tMBSawPulse_tick+0xa50>
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801441a:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
				x = 0.5f;
 801441e:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8014422:	f7ff bb4f 	b.w	8013ac4 <tMBSawPulse_tick+0x110>
		i = lrintf(r - 0.5f);
 8014426:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801442a:	ee78 ca6c 	vsub.f32	s25, s16, s25
 801442e:	eeb1 9a6a 	vneg.f32	s18, s21
		i = lrintf(r - 0.5f);
 8014432:	eeb0 0a4a 	vmov.f32	s0, s20
 8014436:	eea8 0aac 	vfma.f32	s0, s17, s25
 801443a:	f001 f875 	bl	8015528 <lrintf>
		r -= (float)i;
 801443e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014442:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014444:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
 8014446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801444a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801444e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014452:	f002 057f 	and.w	r5, r2, #127	; 0x7f
 8014456:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		r -= (float)i;
 801445a:	eed8 7aac 	vfnms.f32	s15, s17, s25
		c->BLEPindices[c->mostRecentBLEP] = i;
 801445e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014462:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014466:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801446a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801446e:	ed82 9a5d 	vstr	s18, [r2, #372]	; 0x174
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014472:	edc2 7a5c 	vstr	s15, [r2, #368]	; 0x170
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014476:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 801447a:	f7ff bb59 	b.w	8013b30 <tMBSawPulse_tick+0x17c>
 801447e:	bf00      	nop
 8014480:	bf800000 	.word	0xbf800000
 8014484:	00000001 	.word	0x00000001
 8014488:	42800000 	.word	0x42800000
				p += 1.0f;
 801448c:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    if (c->active)
 8014490:	f8d4 3574 	ldr.w	r3, [r4, #1396]	; 0x574
				p += 1.0f;
 8014494:	ee38 9a0c 	vadd.f32	s18, s16, s24
    if (c->active)
 8014498:	2b00      	cmp	r3, #0
 801449a:	d060      	beq.n	801455e <tMBSawPulse_tick+0xbaa>
		i = lrintf(r - 0.5f);
 801449c:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 80144a0:	ed1f aa07 	vldr	s20, [pc, #-28]	; 8014488 <tMBSawPulse_tick+0xad4>
		r = MINBLEP_PHASES * phase * inv_w;
 80144a4:	ee28 8a88 	vmul.f32	s16, s17, s16
		i = lrintf(r - 0.5f);
 80144a8:	eeb0 0a4b 	vmov.f32	s0, s22
 80144ac:	eea8 0a0a 	vfma.f32	s0, s16, s20
 80144b0:	f001 f83a 	bl	8015528 <lrintf>
		r -= (float)i;
 80144b4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80144b8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
			if (k && p < b) {
 80144bc:	eef4 cac9 	vcmpe.f32	s25, s18
		r -= (float)i;
 80144c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80144c4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80144c8:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80144ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80144ce:	3201      	adds	r2, #1
			if (k && p < b) {
 80144d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80144d4:	f003 077f 	and.w	r7, r3, #127	; 0x7f
		r -= (float)i;
 80144d8:	eed8 7a0a 	vfnms.f32	s15, s16, s20
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80144dc:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80144e0:	4aa6      	ldr	r2, [pc, #664]	; (801477c <tMBSawPulse_tick+0xdc8>)
		c->BLEPindices[c->mostRecentBLEP] = i;
 80144e2:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80144e6:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80144ea:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80144ee:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80144f2:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80144f6:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80144fa:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (k && p < b) {
 80144fe:	f340 8124 	ble.w	801474a <tMBSawPulse_tick+0xd96>
		r = MINBLEP_PHASES * phase * inv_w;
 8014502:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8014506:	ee79 ca6c 	vsub.f32	s25, s18, s25
				x = 0.5f;
 801450a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801450e:	eeb0 8a49 	vmov.f32	s16, s18
		i = lrintf(r - 0.5f);
 8014512:	eeb0 0a4b 	vmov.f32	s0, s22
 8014516:	eeac 0aa8 	vfma.f32	s0, s25, s17
 801451a:	f001 f805 	bl	8015528 <lrintf>
		r -= (float)i;
 801451e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014522:	1c7b      	adds	r3, r7, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014524:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
 8014526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801452a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801452e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014532:	f002 057f 	and.w	r5, r2, #127	; 0x7f
 8014536:	eddf 5a92 	vldr	s11, [pc, #584]	; 8014780 <tMBSawPulse_tick+0xdcc>
		r -= (float)i;
 801453a:	eedc 7aa8 	vfnms.f32	s15, s25, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801453e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014542:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014546:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801454a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801454e:	edc2 aa5d 	vstr	s21, [r2, #372]	; 0x174
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014552:	edc2 7a5c 	vstr	s15, [r2, #368]	; 0x170
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014556:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
 801455a:	f7ff bae9 	b.w	8013b30 <tMBSawPulse_tick+0x17c>
			if (k && p < b) {
 801455e:	eef4 cac9 	vcmpe.f32	s25, s18
 8014562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014566:	f340 80ff 	ble.w	8014768 <tMBSawPulse_tick+0xdb4>
				x = 0.5f;
 801456a:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801456e:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 8014572:	eeb0 8a49 	vmov.f32	s16, s18
 8014576:	eddf 5a82 	vldr	s11, [pc, #520]	; 8014780 <tMBSawPulse_tick+0xdcc>
 801457a:	f7ff bad9 	b.w	8013b30 <tMBSawPulse_tick+0x17c>
 801457e:	eeb0 8a4d 	vmov.f32	s16, s26
 8014582:	e624      	b.n	80141ce <tMBSawPulse_tick+0x81a>
			if (p < 0.0f) {
 8014584:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801458c:	d466      	bmi.n	801465c <tMBSawPulse_tick+0xca8>
				x = 0.5f;
 801458e:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8014592:	f7ff bac9 	b.w	8013b28 <tMBSawPulse_tick+0x174>
    if (c->active)
 8014596:	2b00      	cmp	r3, #0
 8014598:	d07b      	beq.n	8014692 <tMBSawPulse_tick+0xcde>
		r = MINBLEP_PHASES * phase * inv_w;
 801459a:	ed9f 9a7a 	vldr	s18, [pc, #488]	; 8014784 <tMBSawPulse_tick+0xdd0>
 801459e:	ee7d daec 	vsub.f32	s27, s27, s25
		i = lrintf(r - 0.5f);
 80145a2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80145a6:	ee28 9a89 	vmul.f32	s18, s17, s18
 80145aa:	eead 0a89 	vfma.f32	s0, s27, s18
 80145ae:	f000 ffbb 	bl	8015528 <lrintf>
		r -= (float)i;
 80145b2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80145b6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
				 if (p_at_reset < 0.0f)
 80145ba:	eeb5 cac0 	vcmpe.f32	s24, #0.0
		r -= (float)i;
 80145be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80145c2:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80145c6:	3301      	adds	r3, #1
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80145c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80145cc:	3201      	adds	r2, #1
				 if (p_at_reset < 0.0f)
 80145ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80145d2:	f003 087f 	and.w	r8, r3, #127	; 0x7f
		r -= (float)i;
 80145d6:	eedd 7a89 	vfnms.f32	s15, s27, s18
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80145da:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80145de:	eb04 0348 	add.w	r3, r4, r8, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80145e2:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80145e6:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80145ea:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
 80145ee:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80145f2:	edc3 aa5d 	vstr	s21, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80145f6:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
				 if (p_at_reset < 0.0f)
 80145fa:	f100 809b 	bmi.w	8014734 <tMBSawPulse_tick+0xd80>
					 x = 0.5f;
 80145fe:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
					 k = 0;
 8014602:	ee0b 7a10 	vmov	s22, r7
				 if (p_at_reset < 0.0f)
 8014606:	eeb0 8a4d 	vmov.f32	s16, s26
 801460a:	e5e0      	b.n	80141ce <tMBSawPulse_tick+0x81a>
		r = MINBLEP_PHASES * phase * inv_w;
 801460c:	ee7d ca6c 	vsub.f32	s25, s26, s25
		i = lrintf(r - 0.5f);
 8014610:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
 8014614:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 8014618:	e77d      	b.n	8014516 <tMBSawPulse_tick+0xb62>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 801461a:	3701      	adds	r7, #1
			if (p < b) {
 801461c:	eeb4 daec 	vcmpe.f32	s26, s25
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014620:	1c6a      	adds	r2, r5, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
 8014622:	eeb1 7a6a 	vneg.f32	s14, s21
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014626:	f007 077f 	and.w	r7, r7, #127	; 0x7f
			if (p < b) {
 801462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801462e:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014632:	eb04 0347 	add.w	r3, r4, r7, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014636:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801463a:	f8a3 006e 	strh.w	r0, [r3, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801463e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8014642:	edc3 7a5c 	vstr	s15, [r3, #368]	; 0x170
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014646:	ed83 7a5d 	vstr	s14, [r3, #372]	; 0x174
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801464a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
			if (p < b) {
 801464e:	d4dd      	bmi.n	801460c <tMBSawPulse_tick+0xc58>
 8014650:	eef0 5a49 	vmov.f32	s11, s18
				x = -0.5f;
 8014654:	eeb0 aa4e 	vmov.f32	s20, s28
 8014658:	f7ff ba6a 	b.w	8013b30 <tMBSawPulse_tick+0x17c>
				p += 1.0f;
 801465c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014660:	ee78 7a27 	vadd.f32	s15, s16, s15
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8014664:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014668:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
				x = -0.5f;
 801466c:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8014670:	eeb0 8a67 	vmov.f32	s16, s15
 8014674:	f7ff ba5c 	b.w	8013b30 <tMBSawPulse_tick+0x17c>
					 p_at_reset -= 1.0f;
 8014678:	ee3c ca49 	vsub.f32	s24, s24, s18
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801467c:	ee38 9a0c 	vadd.f32	s18, s16, s24
    if (c->active)
 8014680:	e4b1      	b.n	8013fe6 <tMBSawPulse_tick+0x632>
				 if (k && p_at_reset < b)
 8014682:	eef4 cacc 	vcmpe.f32	s25, s24
 8014686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801468a:	dd07      	ble.n	801469c <tMBSawPulse_tick+0xce8>
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 801468c:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    if (c->active)
 8014690:	e5ea      	b.n	8014268 <tMBSawPulse_tick+0x8b4>
				 if (p_at_reset < 0.0f)
 8014692:	eeb5 cac0 	vcmpe.f32	s24, #0.0
 8014696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801469a:	d5f7      	bpl.n	801468c <tMBSawPulse_tick+0xcd8>
					 x = -0.5f;
 801469c:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80146a0:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 80146a4:	eeb0 8a4d 	vmov.f32	s16, s26
					 k = 1;
 80146a8:	ed9f ba37 	vldr	s22, [pc, #220]	; 8014788 <tMBSawPulse_tick+0xdd4>
 80146ac:	e5e2      	b.n	8014274 <tMBSawPulse_tick+0x8c0>
					 p_at_reset += 1.0f;
 80146ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80146b2:	ee3c ca27 	vadd.f32	s24, s24, s15
    if (c->active)
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d0f0      	beq.n	801469c <tMBSawPulse_tick+0xce8>
 80146ba:	ed9f 9a32 	vldr	s18, [pc, #200]	; 8014784 <tMBSawPulse_tick+0xdd0>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, -1.0f);
 80146be:	ee78 da0c 	vadd.f32	s27, s16, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80146c2:	f8b4 806a 	ldrh.w	r8, [r4, #106]	; 0x6a
 80146c6:	ee28 9a89 	vmul.f32	s18, s17, s18
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80146ca:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
		r = MINBLEP_PHASES * phase * inv_w;
 80146ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					 k = 1;
 80146d2:	ed9f ba2d 	vldr	s22, [pc, #180]	; 8014788 <tMBSawPulse_tick+0xdd4>
		i = lrintf(r - 0.5f);
 80146d6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80146da:	eeb0 8a4d 	vmov.f32	s16, s26
 80146de:	ee7d dae7 	vsub.f32	s27, s27, s15
					 x = -0.5f;
 80146e2:	eeb0 aa40 	vmov.f32	s20, s0
		i = lrintf(r - 0.5f);
 80146e6:	eead 0a89 	vfma.f32	s0, s27, s18
 80146ea:	f000 ff1d 	bl	8015528 <lrintf>
		r -= (float)i;
 80146ee:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 80146f2:	f108 0301 	add.w	r3, r8, #1
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 80146f6:	1c6a      	adds	r2, r5, #1
		r -= (float)i;
 80146f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80146fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		c->numBLEPs = (c->numBLEPs + 1) & 127;
 8014704:	f002 057f 	and.w	r5, r2, #127	; 0x7f
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8014708:	4a1c      	ldr	r2, [pc, #112]	; (801477c <tMBSawPulse_tick+0xdc8>)
		r -= (float)i;
 801470a:	eedd 7a89 	vfnms.f32	s15, s27, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
 801470e:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 127;
 8014712:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8014716:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801471a:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801471e:	f8c1 2174 	str.w	r2, [r1, #372]	; 0x174
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8014722:	edc1 7a5c 	vstr	s15, [r1, #368]	; 0x170
    if (c->active)
 8014726:	e552      	b.n	80141ce <tMBSawPulse_tick+0x81a>
				 if (!k && p_at_reset >= b)
 8014728:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
 801472c:	ee0b 7a10 	vmov	s22, r7
 8014730:	f7ff bbdd 	b.w	8013eee <tMBSawPulse_tick+0x53a>
					 p_at_reset += 1.0f;
 8014734:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014738:	ee3c ca27 	vadd.f32	s24, s24, s15
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, -1.0f);
 801473c:	ee7c da08 	vadd.f32	s27, s24, s16
    if (c->active)
 8014740:	e7c5      	b.n	80146ce <tMBSawPulse_tick+0xd1a>
    p += sw - (int)sw;
 8014742:	eeb0 8a6d 	vmov.f32	s16, s27
 8014746:	f7ff b96e 	b.w	8013a26 <tMBSawPulse_tick+0x72>
			if (k && p < b) {
 801474a:	eeb0 8a49 	vmov.f32	s16, s18
 801474e:	eef0 5a4c 	vmov.f32	s11, s24
 8014752:	eeb0 aa4b 	vmov.f32	s20, s22
 8014756:	f7ff b9eb 	b.w	8013b30 <tMBSawPulse_tick+0x17c>
				 if (k && p_at_reset < b)
 801475a:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 801475e:	ed9f ba0a 	vldr	s22, [pc, #40]	; 8014788 <tMBSawPulse_tick+0xdd4>
        else if (sw < 0) p = 1.0f - eof_offset;
 8014762:	eeb0 8a4d 	vmov.f32	s16, s26
 8014766:	e532      	b.n	80141ce <tMBSawPulse_tick+0x81a>
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8014768:	eebe aa00 	vmov.f32	s20, #224	; 0xbf000000 -0.5
 801476c:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
 8014770:	eeb0 8a49 	vmov.f32	s16, s18
 8014774:	eef0 5a4c 	vmov.f32	s11, s24
 8014778:	f7ff b9da 	b.w	8013b30 <tMBSawPulse_tick+0x17c>
 801477c:	bf800000 	.word	0xbf800000
 8014780:	00000000 	.word	0x00000000
 8014784:	42800000 	.word	0x42800000
 8014788:	00000001 	.word	0x00000001

0801478c <tMBSawPulse_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#else
void tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#endif
{
    _tMBSawPulse* c = *osc;
 801478c:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801478e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
 8014792:	eddf 6a16 	vldr	s13, [pc, #88]	; 80147ec <tMBSawPulse_setFreq+0x60>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8014796:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
 801479a:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
 801479e:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80147a2:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
 80147a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
 80147aa:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80147ae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80147b2:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
 80147b6:	dc0e      	bgt.n	80147d6 <tMBSawPulse_setFreq+0x4a>
 80147b8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80147f0 <tMBSawPulse_setFreq+0x64>
 80147bc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80147c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147c4:	d407      	bmi.n	80147d6 <tMBSawPulse_setFreq+0x4a>
    	c->active = 0;
    	c->gain = 0.0f;
    }
    else
    {
    	c->active = 1;
 80147c6:	2201      	movs	r2, #1
 80147c8:	f503 61ae 	add.w	r1, r3, #1392	; 0x570
 80147cc:	ed81 7a00 	vstr	s14, [r1]
 80147d0:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
    	c->gain = 1.0f;
    }
}
 80147d4:	4770      	bx	lr
    	c->gain = 0.0f;
 80147d6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80147f4 <tMBSawPulse_setFreq+0x68>
    	c->active = 0;
 80147da:	2200      	movs	r2, #0
 80147dc:	f503 61ae 	add.w	r1, r3, #1392	; 0x570
 80147e0:	ed81 7a00 	vstr	s14, [r1]
 80147e4:	f8c3 2574 	str.w	r2, [r3, #1396]	; 0x574
}
 80147e8:	4770      	bx	lr
 80147ea:	bf00      	nop
 80147ec:	45bb8000 	.word	0x45bb8000
 80147f0:	c5bb8000 	.word	0xc5bb8000
 80147f4:	00000000 	.word	0x00000000

080147f8 <tMBSawPulse_sync>:
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#else
float tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#endif
{
    _tMBSawPulse* c = *osc;
 80147f8:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80147fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 80147fe:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 8014802:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 8014806:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801480a:	eef1 7a67 	vneg.f32	s15, s15
 801480e:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8014812:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801481e:	bfcc      	ite	gt
 8014820:	2201      	movgt	r2, #1
 8014822:	2200      	movle	r2, #0
 8014824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014828:	f002 0201 	and.w	r2, r2, #1
 801482c:	bf88      	it	hi
 801482e:	2200      	movhi	r2, #0
 8014830:	b122      	cbz	r2, 801483c <tMBSawPulse_sync+0x44>
 8014832:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801483a:	da04      	bge.n	8014846 <tMBSawPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801483c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8014854 <tMBSawPulse_sync+0x5c>
 8014840:	ed83 7a04 	vstr	s14, [r3, #16]

    return value;
}
 8014844:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8014846:	ee37 7a66 	vsub.f32	s14, s14, s13
 801484a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801484e:	ed83 7a04 	vstr	s14, [r3, #16]
}
 8014852:	4770      	bx	lr
 8014854:	00000000 	.word	0x00000000

08014858 <tMBSawPulse_setShape>:
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
    c->shape = shape;
 8014858:	6803      	ldr	r3, [r0, #0]
 801485a:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 801485e:	4770      	bx	lr

08014860 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 8014860:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014862:	698c      	ldr	r4, [r1, #24]
{
 8014864:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014866:	201c      	movs	r0, #28
 8014868:	4621      	mov	r1, r4
 801486a:	f7fb fb73 	bl	800ff54 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
 801486e:	6862      	ldr	r2, [r4, #4]
    
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014870:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801488c <tIntPhasor_init+0x2c>
    c->phase    =  0;
 8014874:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014876:	edd2 7a01 	vldr	s15, [r2, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801487a:	6028      	str	r0, [r5, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801487c:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->mempool = m;
 8014880:	6004      	str	r4, [r0, #0]
    c->phase    =  0;
 8014882:	6043      	str	r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014884:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8014888:	bd38      	pop	{r3, r4, r5, pc}
 801488a:	bf00      	nop
 801488c:	4f800000 	.word	0x4f800000

08014890 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 8014890:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 8014892:	eddf 7a06 	vldr	s15, [pc, #24]	; 80148ac <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 8014896:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 801489a:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 801489c:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 80148a0:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 80148a2:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 80148a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80148aa:	4770      	bx	lr
 80148ac:	2f80000d 	.word	0x2f80000d

080148b0 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
 80148b0:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80148b2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 80148b6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80148ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80148be:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80148c2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80148c6:	4770      	bx	lr

080148c8 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 80148c8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 80148cc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80148e8 <tIntPhasor_setPhase+0x20>
 80148d0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80148d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148d6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 80148da:	ee20 0a07 	vmul.f32	s0, s0, s14
 80148de:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80148e2:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80148e6:	4770      	bx	lr
 80148e8:	4f800000 	.word	0x4f800000

080148ec <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 80148ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80148ee:	698f      	ldr	r7, [r1, #24]
{
 80148f0:	4606      	mov	r6, r0
 80148f2:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80148f4:	2010      	movs	r0, #16
 80148f6:	4639      	mov	r1, r7
{
 80148f8:	ed2d 8b02 	vpush	{d8}
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80148fc:	f7fb fb2a 	bl	800ff54 <mpool_alloc>
 8014900:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8014902:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014904:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8014906:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014908:	201c      	movs	r0, #28
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801490a:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8014984 <tSquareLFO_init+0x98>
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801490e:	4639      	mov	r1, r7
 8014910:	f7fb fb20 	bl	800ff54 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
 8014914:	687b      	ldr	r3, [r7, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014916:	60a0      	str	r0, [r4, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014918:	edd3 7a01 	vldr	s15, [r3, #4]
    c->mempool = m;
 801491c:	6007      	str	r7, [r0, #0]
    c->phase    =  0;
 801491e:	2700      	movs	r7, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014920:	ee67 7a88 	vmul.f32	s15, s15, s16
    _tMempool* m = *mp;
 8014924:	69ad      	ldr	r5, [r5, #24]
    c->phase    =  0;
 8014926:	6047      	str	r7, [r0, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014928:	4629      	mov	r1, r5
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801492a:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801492e:	201c      	movs	r0, #28
 8014930:	f7fb fb10 	bl	800ff54 <mpool_alloc>
    tIntPhasor_setSampleRate(&c->invPhasor, sr);
}

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;
 8014934:	6833      	ldr	r3, [r6, #0]
    LEAF* leaf = c->mempool->leaf;
 8014936:	6869      	ldr	r1, [r5, #4]

    c->pulsewidth = pw;
 8014938:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801493c:	60e0      	str	r0, [r4, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801493e:	689a      	ldr	r2, [r3, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014940:	edd1 6a01 	vldr	s13, [r1, #4]
    c->phase    =  0;
 8014944:	6047      	str	r7, [r0, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014946:	ed92 7a01 	vldr	s14, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801494a:	ee66 6a88 	vmul.f32	s13, s13, s16
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801494e:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8014988 <tSquareLFO_init+0x9c>
 8014952:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    c->phase = phase * TWO_TO_32;
 8014956:	68da      	ldr	r2, [r3, #12]
    c->mempool = m;
 8014958:	6005      	str	r5, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801495a:	edc0 6a06 	vstr	s13, [r0, #24]
    c->pulsewidth = pw;
 801495e:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014962:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8014966:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801496a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801496e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014972:	ee67 7a88 	vmul.f32	s15, s15, s16
}
 8014976:	ecbd 8b02 	vpop	{d8}
    c->phase = phase * TWO_TO_32;
 801497a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801497e:	edc2 7a01 	vstr	s15, [r2, #4]
}
 8014982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014984:	4f800000 	.word	0x4f800000
 8014988:	2f80000d 	.word	0x2f80000d

0801498c <tSquareLFO_initToPool>:
{
 801498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 801498e:	680f      	ldr	r7, [r1, #0]
{
 8014990:	4606      	mov	r6, r0
 8014992:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8014994:	2010      	movs	r0, #16
 8014996:	4639      	mov	r1, r7
{
 8014998:	ed2d 8b02 	vpush	{d8}
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801499c:	f7fb fada 	bl	800ff54 <mpool_alloc>
 80149a0:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 80149a2:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80149a4:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 80149a6:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80149a8:	201c      	movs	r0, #28
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149aa:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8014a24 <tSquareLFO_initToPool+0x98>
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80149ae:	4639      	mov	r1, r7
 80149b0:	f7fb fad0 	bl	800ff54 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
 80149b4:	687b      	ldr	r3, [r7, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80149b6:	60a0      	str	r0, [r4, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149b8:	edd3 7a01 	vldr	s15, [r3, #4]
    c->mempool = m;
 80149bc:	6007      	str	r7, [r0, #0]
    c->phase    =  0;
 80149be:	2700      	movs	r7, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149c0:	ee67 7a88 	vmul.f32	s15, s15, s16
    _tMempool* m = *mp;
 80149c4:	682d      	ldr	r5, [r5, #0]
    c->phase    =  0;
 80149c6:	6047      	str	r7, [r0, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80149c8:	4629      	mov	r1, r5
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149ca:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80149ce:	201c      	movs	r0, #28
 80149d0:	f7fb fac0 	bl	800ff54 <mpool_alloc>
    _tSquareLFO *c = *cy;
 80149d4:	6833      	ldr	r3, [r6, #0]
    LEAF* leaf = c->mempool->leaf;
 80149d6:	6869      	ldr	r1, [r5, #4]
    c->pulsewidth = pw;
 80149d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80149dc:	60e0      	str	r0, [r4, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80149de:	689a      	ldr	r2, [r3, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149e0:	edd1 6a01 	vldr	s13, [r1, #4]
    c->phase    =  0;
 80149e4:	6047      	str	r7, [r0, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80149e6:	ed92 7a01 	vldr	s14, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149ea:	ee66 6a88 	vmul.f32	s13, s13, s16
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80149ee:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8014a28 <tSquareLFO_initToPool+0x9c>
 80149f2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    c->phase = phase * TWO_TO_32;
 80149f6:	68da      	ldr	r2, [r3, #12]
    c->mempool = m;
 80149f8:	6005      	str	r5, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80149fa:	edc0 6a06 	vstr	s13, [r0, #24]
    c->pulsewidth = pw;
 80149fe:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014a02:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8014a06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014a0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014a0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014a12:	ee67 7a88 	vmul.f32	s15, s15, s16
}
 8014a16:	ecbd 8b02 	vpop	{d8}
    c->phase = phase * TWO_TO_32;
 8014a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014a1e:	edc2 7a01 	vstr	s15, [r2, #4]
}
 8014a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a24:	4f800000 	.word	0x4f800000
 8014a28:	2f80000d 	.word	0x2f80000d

08014a2c <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 8014a2c:	6803      	ldr	r3, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014a2e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014a32:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8014a78 <tSquareLFO_tick+0x4c>
 8014a36:	ed93 0a01 	vldr	s0, [r3, #4]
    _tIntPhasor* c = *cy;
 8014a3a:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
{
 8014a3e:	b410      	push	{r4}
    c->phase = (c->phase + c->inc);
 8014a40:	6853      	ldr	r3, [r2, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014a42:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = (c->phase + c->inc);
 8014a46:	6894      	ldr	r4, [r2, #8]
 8014a48:	6888      	ldr	r0, [r1, #8]
 8014a4a:	4423      	add	r3, r4
}
 8014a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
    c->phase = (c->phase + c->inc);
 8014a50:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8014a52:	ee07 3a90 	vmov	s15, r3
    c->phase = (c->phase + c->inc);
 8014a56:	684a      	ldr	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8014a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8014a5c:	4402      	add	r2, r0
    return c->phase * INV_TWO_TO_32; 
 8014a5e:	ee06 2a90 	vmov	s13, r2
    c->phase = (c->phase + c->inc);
 8014a62:	604a      	str	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8014a64:	eef8 6a66 	vcvt.f32.u32	s13, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014a68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014a6c:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8014a70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014a74:	4770      	bx	lr
 8014a76:	bf00      	nop
 8014a78:	2f80000d 	.word	0x2f80000d

08014a7c <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 8014a7c:	6803      	ldr	r3, [r0, #0]
    _tIntPhasor* c = *cy;
 8014a7e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014a82:	ed92 7a06 	vldr	s14, [r2, #24]
 8014a86:	edd3 7a06 	vldr	s15, [r3, #24]
 8014a8a:	ee20 7a07 	vmul.f32	s14, s0, s14
    c->freq  = freq;
 8014a8e:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014a92:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014a96:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8014a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014a9e:	ed82 7a02 	vstr	s14, [r2, #8]
    c->freq  = freq;
 8014aa2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014aa6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8014aaa:	4770      	bx	lr

08014aac <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 8014aac:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014aae:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014ae4 <tSquareLFO_setPulseWidth+0x38>
    c->pulsewidth = pw;
 8014ab2:	ed83 0a01 	vstr	s0, [r3, #4]
    c->phase = phase * TWO_TO_32;
 8014ab6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014ae8 <tSquareLFO_setPulseWidth+0x3c>
 8014aba:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014abe:	edd1 7a01 	vldr	s15, [r1, #4]
 8014ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ac6:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 8014aca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8014ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ad2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014ad6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014ada:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014ade:	ed82 0a01 	vstr	s0, [r2, #4]
}
 8014ae2:	4770      	bx	lr
 8014ae4:	2f80000d 	.word	0x2f80000d
 8014ae8:	4f800000 	.word	0x4f800000

08014aec <tSquareLFO_setPhase>:
    int i = phase;
 8014aec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8014af0:	eddf 6a12 	vldr	s13, [pc, #72]	; 8014b3c <tSquareLFO_setPhase+0x50>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
 8014af4:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014af6:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8014b40 <tSquareLFO_setPhase+0x54>
    phase -= i;
 8014afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014afe:	ed93 7a01 	vldr	s14, [r3, #4]
    c->phase = phase * TWO_TO_32;
 8014b02:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    phase -= i;
 8014b06:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->phase = phase * TWO_TO_32;
 8014b0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014b12:	eef8 5a67 	vcvt.f32.u32	s11, s15
    c->phase = phase * TWO_TO_32;
 8014b16:	edc2 7a01 	vstr	s15, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014b1a:	eef0 7a47 	vmov.f32	s15, s14
 8014b1e:	eee5 7a86 	vfma.f32	s15, s11, s12
    int i = phase;
 8014b22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014b26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014b2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b36:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8014b3a:	4770      	bx	lr
 8014b3c:	4f800000 	.word	0x4f800000
 8014b40:	2f80000d 	.word	0x2f80000d

08014b44 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 8014b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014b46:	460c      	mov	r4, r1
{
 8014b48:	4606      	mov	r6, r0
 8014b4a:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8014b4c:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8014b4e:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8014b52:	4639      	mov	r1, r7
 8014b54:	f7fb f9fe 	bl	800ff54 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 8014b58:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8014b5a:	6030      	str	r0, [r6, #0]
 8014b5c:	4604      	mov	r4, r0
    c->mempool = m;
 8014b5e:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8014b62:	f7ff ff13 	bl	801498c <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 8014b66:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014b68:	201c      	movs	r0, #28
 8014b6a:	4629      	mov	r1, r5
 8014b6c:	f7fb f9f2 	bl	800ff54 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
 8014b70:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014b72:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014b8c <tSawSquareLFO_init+0x48>
    c->phase    =  0;
 8014b76:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014b78:	edd2 7a01 	vldr	s15, [r2, #4]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8014b7c:	60a0      	str	r0, [r4, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014b7e:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->mempool = m;
 8014b82:	6005      	str	r5, [r0, #0]
    c->phase    =  0;
 8014b84:	6043      	str	r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014b86:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8014b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b8c:	4f800000 	.word	0x4f800000

08014b90 <tSawSquareLFO_tick>:
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
    _tSawSquareLFO* c = *cy;
 8014b90:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014b92:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8014b96:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8014b9a:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8014c0c <tSawSquareLFO_tick+0x7c>
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 8014b9e:	ed92 0a01 	vldr	s0, [r2, #4]
 8014ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
{
 8014ba6:	b430      	push	{r4, r5}
    _tSquareLFO* c = *cy;
 8014ba8:	e9d2 4302 	ldrd	r4, r3, [r2, #8]
    return  (1 - c->shape) * a + c->shape * b; 
 8014bac:	ee37 7a40 	vsub.f32	s14, s14, s0
    _tIntPhasor* c = *cy;
 8014bb0:	6898      	ldr	r0, [r3, #8]
    return  (1 - c->shape) * a + c->shape * b; 
 8014bb2:	ee30 0a00 	vadd.f32	s0, s0, s0
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014bb6:	edd3 6a01 	vldr	s13, [r3, #4]
    c->phase = (c->phase + c->inc);
 8014bba:	6885      	ldr	r5, [r0, #8]
    return  (1 - c->shape) * a + c->shape * b; 
 8014bbc:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014bc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
    c->phase = (c->phase + c->inc);
 8014bc4:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014bc8:	440a      	add	r2, r1
    _tIntPhasor* c = *cy;
 8014bca:	68d9      	ldr	r1, [r3, #12]
    c->phase = (c->phase + c->inc);
 8014bcc:	6062      	str	r2, [r4, #4]
    return c->phase * INV_TWO_TO_32; 
 8014bce:	ee07 2a90 	vmov	s15, r2
    c->phase = (c->phase + c->inc);
 8014bd2:	6843      	ldr	r3, [r0, #4]
 8014bd4:	688c      	ldr	r4, [r1, #8]
    return c->phase * INV_TWO_TO_32; 
 8014bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8014bda:	442b      	add	r3, r5
 8014bdc:	6043      	str	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8014bde:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 8014be2:	684a      	ldr	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8014be4:	ee07 3a90 	vmov	s15, r3
    c->phase = (c->phase + c->inc);
 8014be8:	4422      	add	r2, r4
    return c->phase * INV_TWO_TO_32; 
 8014bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014bee:	ee05 2a10 	vmov	s10, r2
    c->phase = (c->phase + c->inc);
 8014bf2:	604a      	str	r2, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8014bf4:	eeb8 5a45 	vcvt.f32.u32	s10, s10
}
 8014bf8:	bc30      	pop	{r4, r5}
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8014bfa:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8014bfe:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 8014c02:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8014c06:	eea6 0a07 	vfma.f32	s0, s12, s14
 8014c0a:	4770      	bx	lr
 8014c0c:	2f80000d 	.word	0x2f80000d

08014c10 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
 8014c10:	6803      	ldr	r3, [r0, #0]
    _tIntPhasor* c = *cy;
 8014c12:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8014c16:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014c1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8014c1e:	edd1 6a06 	vldr	s13, [r1, #24]
 8014c22:	ed92 7a06 	vldr	s14, [r2, #24]
 8014c26:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014c2a:	ee60 6a26 	vmul.f32	s13, s0, s13
    c->freq  = freq;
 8014c2e:	ed81 0a03 	vstr	s0, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014c32:	ee20 7a07 	vmul.f32	s14, s0, s14
 8014c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014c3a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8014c3e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8014c42:	edc1 6a02 	vstr	s13, [r1, #8]
    c->freq  = freq;
 8014c46:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014c4a:	ed82 7a02 	vstr	s14, [r2, #8]
    c->freq  = freq;
 8014c4e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014c52:	edc3 7a02 	vstr	s15, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 8014c56:	4770      	bx	lr

08014c58 <tSawSquareLFO_setPhase>:
    int i = phase;
 8014c58:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 8014c5c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8014cac <tSawSquareLFO_setPhase+0x54>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
 8014c60:	6802      	ldr	r2, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c62:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8014cb0 <tSawSquareLFO_setPhase+0x58>
    phase -= i;
 8014c66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    c->phase = phase * TWO_TO_32;
 8014c6a:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
    phase -= i;
 8014c6e:	ee30 0a47 	vsub.f32	s0, s0, s14
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c72:	edd3 7a01 	vldr	s15, [r3, #4]
    c->phase = phase * TWO_TO_32;
 8014c76:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014c7a:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 8014c7e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c82:	eeb8 7a40 	vcvt.f32.u32	s14, s0
    c->phase = phase * TWO_TO_32;
 8014c86:	ed81 0a01 	vstr	s0, [r1, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8014c8a:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8014c8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8014c92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8014c9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014ca2:	edc3 7a01 	vstr	s15, [r3, #4]
 8014ca6:	ed82 0a01 	vstr	s0, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 8014caa:	4770      	bx	lr
 8014cac:	4f800000 	.word	0x4f800000
 8014cb0:	2f80000d 	.word	0x2f80000d

08014cb4 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
    c->shape = shape; 
 8014cb4:	6803      	ldr	r3, [r0, #0]
 8014cb6:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014cba:	4770      	bx	lr

08014cbc <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 8014cbc:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014cbe:	698c      	ldr	r4, [r1, #24]
{
 8014cc0:	4605      	mov	r5, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8014cc2:	2018      	movs	r0, #24
 8014cc4:	4621      	mov	r1, r4
 8014cc6:	f7fb f945 	bl	800ff54 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
 8014cca:	6863      	ldr	r3, [r4, #4]
    
    c->inc      =  0;
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014ccc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014d00 <tTriLFO_init+0x44>
    c->invSampleRate = leaf->invSampleRate;
 8014cd0:	edd3 6a01 	vldr	s13, [r3, #4]
    c->phase    =  0;
 8014cd4:	2300      	movs	r3, #0

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 8014cd6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014d04 <tTriLFO_init+0x48>
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014cda:	ee26 7a87 	vmul.f32	s14, s13, s14
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8014cde:	6028      	str	r0, [r5, #0]
    c->freq  = freq;
 8014ce0:	edc0 7a03 	vstr	s15, [r0, #12]
    c->mempool = m;
 8014ce4:	6004      	str	r4, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->phase    =  0;
 8014cea:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8014cec:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014cf0:	ed80 7a05 	vstr	s14, [r0, #20]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014cf4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014cf8:	edc0 7a02 	vstr	s15, [r0, #8]
}
 8014cfc:	bd38      	pop	{r3, r4, r5, pc}
 8014cfe:	bf00      	nop
 8014d00:	4f800000 	.word	0x4f800000
 8014d04:	435c0000 	.word	0x435c0000

08014d08 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 8014d08:	6803      	ldr	r3, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8014d0a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8014d0e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014d38 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 8014d12:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8014d16:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8014d18:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
 8014d1c:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8014d1e:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8014d22:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8014d26:	ee07 3a90 	vmov	s15, r3
 8014d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d2e:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8014d32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014d36:	4770      	bx	lr
 8014d38:	2ffffff6 	.word	0x2ffffff6

08014d3c <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 8014d3c:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d3e:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8014d42:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d4a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014d4e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014d52:	4770      	bx	lr

08014d54 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 8014d54:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32_INT;
 8014d58:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8014d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014d5e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8014d62:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 8014d66:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8014d6a:	4770      	bx	lr

08014d6c <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 8014d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014d6e:	698f      	ldr	r7, [r1, #24]
{
 8014d70:	4606      	mov	r6, r0
 8014d72:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8014d74:	2010      	movs	r0, #16
 8014d76:	4639      	mov	r1, r7
{
 8014d78:	ed2d 8b02 	vpush	{d8}
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8014d7c:	f7fb f8ea 	bl	800ff54 <mpool_alloc>
 8014d80:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8014d82:	2018      	movs	r0, #24
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014d84:	ed9f 8a1a 	vldr	s16, [pc, #104]	; 8014df0 <tSineTriLFO_init+0x84>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8014d88:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 8014d8a:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 8014d8c:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8014d8e:	4631      	mov	r1, r6
 8014d90:	f7fb f8e0 	bl	800ff54 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
 8014d94:	6873      	ldr	r3, [r6, #4]
    c->freq  = freq;
 8014d96:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8014df4 <tSineTriLFO_init+0x88>
    c->invSampleRate = leaf->invSampleRate;
 8014d9a:	ed93 6a01 	vldr	s12, [r3, #4]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8014d9e:	60a0      	str	r0, [r4, #8]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014da0:	ee66 6a08 	vmul.f32	s13, s12, s16
    c->mempool = m;
 8014da4:	6006      	str	r6, [r0, #0]
    c->phase    =  0;
 8014da6:	2600      	movs	r6, #0
    _tMempool* m = *mp;
 8014da8:	69ad      	ldr	r5, [r5, #24]
    c->invSampleRate = leaf->invSampleRate;
 8014daa:	ed80 6a04 	vstr	s12, [r0, #16]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014dae:	ee66 7a87 	vmul.f32	s15, s13, s14
    c->phase    =  0;
 8014db2:	6046      	str	r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8014db4:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014db8:	4629      	mov	r1, r5
    c->freq  = freq;
 8014dba:	ed80 7a03 	vstr	s14, [r0, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014dc2:	edc0 7a02 	vstr	s15, [r0, #8]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014dc6:	2018      	movs	r0, #24
 8014dc8:	f7fb f8c4 	bl	800ff54 <mpool_alloc>
    LEAF* leaf = c->mempool->leaf;
 8014dcc:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014dce:	edd3 7a01 	vldr	s15, [r3, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8014dd2:	f240 73ff 	movw	r3, #2047	; 0x7ff
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014dd6:	60e0      	str	r0, [r4, #12]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014dd8:	ee67 7a88 	vmul.f32	s15, s15, s16
    c->mempool = m;
 8014ddc:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 8014dde:	6143      	str	r3, [r0, #20]
}
 8014de0:	ecbd 8b02 	vpop	{d8}
    c->phase    =  0;
 8014de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014de8:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8014dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dee:	bf00      	nop
 8014df0:	4f800000 	.word	0x4f800000
 8014df4:	435c0000 	.word	0x435c0000

08014df8 <tSineTriLFO_tick>:
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
    _tSineTriLFO* c = *cy;
 8014df8:	6803      	ldr	r3, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 8014dfa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 8014dfe:	4a21      	ldr	r2, [pc, #132]	; (8014e84 <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8014e00:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 8014e04:	68d9      	ldr	r1, [r3, #12]
    return  (1.0f - c->shape) * a + c->shape * b;
 8014e06:	ed93 7a01 	vldr	s14, [r3, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014e0a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8014e88 <tSineTriLFO_tick+0x90>
    return  (1.0f - c->shape) * a + c->shape * b;
 8014e0e:	ee37 6a07 	vadd.f32	s12, s14, s14
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8014e12:	eddf 4a1e 	vldr	s9, [pc, #120]	; 8014e8c <tSineTriLFO_tick+0x94>
    return  (1.0f - c->shape) * a + c->shape * b;
 8014e16:	ee75 5ac7 	vsub.f32	s11, s11, s14
{
 8014e1a:	b430      	push	{r4, r5}
    _tTriLFO* c = *cy;
 8014e1c:	689c      	ldr	r4, [r3, #8]
    idx = (idx + 1) & c->mask;
 8014e1e:	694d      	ldr	r5, [r1, #20]
    c->phase += c->inc;
 8014e20:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8014e24:	4403      	add	r3, r0
    idx = c->phase >> 21; //11 bit table 
 8014e26:	0d58      	lsrs	r0, r3, #21
    c->phase += c->inc;
 8014e28:	604b      	str	r3, [r1, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014e2a:	f3c3 0314 	ubfx	r3, r3, #0, #21
    c->phase += c->inc;
 8014e2e:	68a1      	ldr	r1, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014e30:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 8014e34:	6863      	ldr	r3, [r4, #4]
 8014e36:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
 8014e38:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
 8014e3a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    idx = (idx + 1) & c->mask;
 8014e42:	4029      	ands	r1, r5
    c->phase += c->inc;
 8014e44:	6063      	str	r3, [r4, #4]
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8014e46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    samp1 = __leaf_table_sinewave[idx];
 8014e4a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014e4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8014e52:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
 8014e56:	edd0 6a00 	vldr	s13, [r0]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014e5a:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8014e5e:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014e62:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8014e66:	ee07 3a10 	vmov	s14, r3
 8014e6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014e6e:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8014e72:	eea7 0a24 	vfma.f32	s0, s14, s9
}
 8014e76:	bc30      	pop	{r4, r5}
    return  (1.0f - c->shape) * a + c->shape * b;
 8014e78:	ee26 0a00 	vmul.f32	s0, s12, s0
}
 8014e7c:	eea5 0aa6 	vfma.f32	s0, s11, s13
 8014e80:	4770      	bx	lr
 8014e82:	bf00      	nop
 8014e84:	0801edc4 	.word	0x0801edc4
 8014e88:	35000004 	.word	0x35000004
 8014e8c:	2ffffff6 	.word	0x2ffffff6

08014e90 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
 8014e90:	6803      	ldr	r3, [r0, #0]
    _tCycle* c = *cy;
 8014e92:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e96:	ed92 7a05 	vldr	s14, [r2, #20]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e9a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e9e:	ee20 7a07 	vmul.f32	s14, s0, s14
    c->freq  = freq;
 8014ea2:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014ea6:	ee60 7a27 	vmul.f32	s15, s0, s15
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014eaa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014eb2:	ed82 7a02 	vstr	s14, [r2, #8]
    c->freq  = freq;
 8014eb6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014eba:	edc3 7a02 	vstr	s15, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 8014ebe:	4770      	bx	lr

08014ec0 <tSineTriLFO_setPhase>:
    int i = phase;
 8014ec0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 8014ec4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8014eec <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
 8014ec8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8014eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase = phase * TWO_TO_32;
 8014ece:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    phase -= i;
 8014ed2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8014ed6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014eda:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8014ede:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 8014ee2:	edc2 7a01 	vstr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 8014ee6:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 8014eea:	4770      	bx	lr
 8014eec:	4f800000 	.word	0x4f800000

08014ef0 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
    c->shape = shape;
 8014ef0:	6803      	ldr	r3, [r0, #0]
 8014ef2:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 8014ef6:	4770      	bx	lr

08014ef8 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 8014ef8:	4770      	bx	lr
 8014efa:	bf00      	nop

08014efc <LEAF_init>:
{
 8014efc:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 8014efe:	6200      	str	r0, [r0, #32]
{
 8014f00:	4604      	mov	r4, r0
 8014f02:	461d      	mov	r5, r3
 8014f04:	ed2d 8b02 	vpush	{d8}
 8014f08:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 8014f0c:	f7fb f80e 	bl	800ff2c <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 8014f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8014f14:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8014f48 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 8014f18:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 8014f1a:	4b0c      	ldr	r3, [pc, #48]	; (8014f4c <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 8014f1c:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 8014f20:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 8014f24:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 8014f26:	6162      	str	r2, [r4, #20]
}
 8014f28:	ecbd 8b02 	vpop	{d8}
        leaf->errorState[i] = 0;
 8014f2c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 8014f30:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 8014f34:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8014f38:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8014f3c:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8014f40:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8014f44:	bd38      	pop	{r3, r4, r5, pc}
 8014f46:	bf00      	nop
 8014f48:	40c90fdb 	.word	0x40c90fdb
 8014f4c:	08014ef9 	.word	0x08014ef9

08014f50 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8014f50:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 8014f52:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8014f56:	2401      	movs	r4, #1
    leaf->errorCallback(leaf, whichone);
 8014f58:	6b83      	ldr	r3, [r0, #56]	; 0x38
    leaf->errorState[whichone] = 1;
 8014f5a:	63d4      	str	r4, [r2, #60]	; 0x3c
}
 8014f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 8014f60:	4718      	bx	r3
 8014f62:	bf00      	nop

08014f64 <arm_sin_f32>:
 8014f64:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014fe4 <arm_sin_f32+0x80>
 8014f68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014f6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014f70:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f78:	d504      	bpl.n	8014f84 <arm_sin_f32+0x20>
 8014f7a:	ee17 3a90 	vmov	r3, s15
 8014f7e:	3b01      	subs	r3, #1
 8014f80:	ee07 3a90 	vmov	s15, r3
 8014f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f88:	eddf 6a17 	vldr	s13, [pc, #92]	; 8014fe8 <arm_sin_f32+0x84>
 8014f8c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8014f90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f94:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8014f98:	ee17 3a10 	vmov	r3, s14
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014fa2:	d21a      	bcs.n	8014fda <arm_sin_f32+0x76>
 8014fa4:	ee07 3a10 	vmov	s14, r3
 8014fa8:	1c59      	adds	r1, r3, #1
 8014faa:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 8014fae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014fb2:	4a0e      	ldr	r2, [pc, #56]	; (8014fec <arm_sin_f32+0x88>)
 8014fb4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014fb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014fbc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014fc0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014fc4:	edd3 6a00 	vldr	s13, [r3]
 8014fc8:	ed92 7a00 	vldr	s14, [r2]
 8014fcc:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014fd4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014fd8:	4770      	bx	lr
 8014fda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014fde:	2101      	movs	r1, #1
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	e7e6      	b.n	8014fb2 <arm_sin_f32+0x4e>
 8014fe4:	3e22f983 	.word	0x3e22f983
 8014fe8:	44000000 	.word	0x44000000
 8014fec:	0802e550 	.word	0x0802e550

08014ff0 <__libc_init_array>:
 8014ff0:	b570      	push	{r4, r5, r6, lr}
 8014ff2:	4d0d      	ldr	r5, [pc, #52]	; (8015028 <__libc_init_array+0x38>)
 8014ff4:	4c0d      	ldr	r4, [pc, #52]	; (801502c <__libc_init_array+0x3c>)
 8014ff6:	1b64      	subs	r4, r4, r5
 8014ff8:	10a4      	asrs	r4, r4, #2
 8014ffa:	2600      	movs	r6, #0
 8014ffc:	42a6      	cmp	r6, r4
 8014ffe:	d109      	bne.n	8015014 <__libc_init_array+0x24>
 8015000:	4d0b      	ldr	r5, [pc, #44]	; (8015030 <__libc_init_array+0x40>)
 8015002:	4c0c      	ldr	r4, [pc, #48]	; (8015034 <__libc_init_array+0x44>)
 8015004:	f002 f928 	bl	8017258 <_init>
 8015008:	1b64      	subs	r4, r4, r5
 801500a:	10a4      	asrs	r4, r4, #2
 801500c:	2600      	movs	r6, #0
 801500e:	42a6      	cmp	r6, r4
 8015010:	d105      	bne.n	801501e <__libc_init_array+0x2e>
 8015012:	bd70      	pop	{r4, r5, r6, pc}
 8015014:	f855 3b04 	ldr.w	r3, [r5], #4
 8015018:	4798      	blx	r3
 801501a:	3601      	adds	r6, #1
 801501c:	e7ee      	b.n	8014ffc <__libc_init_array+0xc>
 801501e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015022:	4798      	blx	r3
 8015024:	3601      	adds	r6, #1
 8015026:	e7f2      	b.n	801500e <__libc_init_array+0x1e>
 8015028:	0802f7e0 	.word	0x0802f7e0
 801502c:	0802f7e0 	.word	0x0802f7e0
 8015030:	0802f7e0 	.word	0x0802f7e0
 8015034:	0802f7e4 	.word	0x0802f7e4

08015038 <__itoa>:
 8015038:	1e93      	subs	r3, r2, #2
 801503a:	2b22      	cmp	r3, #34	; 0x22
 801503c:	b510      	push	{r4, lr}
 801503e:	460c      	mov	r4, r1
 8015040:	d904      	bls.n	801504c <__itoa+0x14>
 8015042:	2300      	movs	r3, #0
 8015044:	700b      	strb	r3, [r1, #0]
 8015046:	461c      	mov	r4, r3
 8015048:	4620      	mov	r0, r4
 801504a:	bd10      	pop	{r4, pc}
 801504c:	2a0a      	cmp	r2, #10
 801504e:	d109      	bne.n	8015064 <__itoa+0x2c>
 8015050:	2800      	cmp	r0, #0
 8015052:	da07      	bge.n	8015064 <__itoa+0x2c>
 8015054:	232d      	movs	r3, #45	; 0x2d
 8015056:	700b      	strb	r3, [r1, #0]
 8015058:	4240      	negs	r0, r0
 801505a:	2101      	movs	r1, #1
 801505c:	4421      	add	r1, r4
 801505e:	f000 f85b 	bl	8015118 <__utoa>
 8015062:	e7f1      	b.n	8015048 <__itoa+0x10>
 8015064:	2100      	movs	r1, #0
 8015066:	e7f9      	b.n	801505c <__itoa+0x24>

08015068 <itoa>:
 8015068:	f7ff bfe6 	b.w	8015038 <__itoa>

0801506c <memcpy>:
 801506c:	440a      	add	r2, r1
 801506e:	4291      	cmp	r1, r2
 8015070:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015074:	d100      	bne.n	8015078 <memcpy+0xc>
 8015076:	4770      	bx	lr
 8015078:	b510      	push	{r4, lr}
 801507a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801507e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015082:	4291      	cmp	r1, r2
 8015084:	d1f9      	bne.n	801507a <memcpy+0xe>
 8015086:	bd10      	pop	{r4, pc}

08015088 <memmove>:
 8015088:	4288      	cmp	r0, r1
 801508a:	b510      	push	{r4, lr}
 801508c:	eb01 0402 	add.w	r4, r1, r2
 8015090:	d902      	bls.n	8015098 <memmove+0x10>
 8015092:	4284      	cmp	r4, r0
 8015094:	4623      	mov	r3, r4
 8015096:	d807      	bhi.n	80150a8 <memmove+0x20>
 8015098:	1e43      	subs	r3, r0, #1
 801509a:	42a1      	cmp	r1, r4
 801509c:	d008      	beq.n	80150b0 <memmove+0x28>
 801509e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150a6:	e7f8      	b.n	801509a <memmove+0x12>
 80150a8:	4402      	add	r2, r0
 80150aa:	4601      	mov	r1, r0
 80150ac:	428a      	cmp	r2, r1
 80150ae:	d100      	bne.n	80150b2 <memmove+0x2a>
 80150b0:	bd10      	pop	{r4, pc}
 80150b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80150b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80150ba:	e7f7      	b.n	80150ac <memmove+0x24>

080150bc <memset>:
 80150bc:	4402      	add	r2, r0
 80150be:	4603      	mov	r3, r0
 80150c0:	4293      	cmp	r3, r2
 80150c2:	d100      	bne.n	80150c6 <memset+0xa>
 80150c4:	4770      	bx	lr
 80150c6:	f803 1b01 	strb.w	r1, [r3], #1
 80150ca:	e7f9      	b.n	80150c0 <memset+0x4>

080150cc <frexpf>:
 80150cc:	ee10 3a10 	vmov	r3, s0
 80150d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80150d4:	2100      	movs	r1, #0
 80150d6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80150da:	6001      	str	r1, [r0, #0]
 80150dc:	da19      	bge.n	8015112 <frexpf+0x46>
 80150de:	b1c2      	cbz	r2, 8015112 <frexpf+0x46>
 80150e0:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80150e4:	d10a      	bne.n	80150fc <frexpf+0x30>
 80150e6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8015114 <frexpf+0x48>
 80150ea:	ee60 7a27 	vmul.f32	s15, s0, s15
 80150ee:	f06f 0118 	mvn.w	r1, #24
 80150f2:	ee17 3a90 	vmov	r3, s15
 80150f6:	6001      	str	r1, [r0, #0]
 80150f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80150fc:	6801      	ldr	r1, [r0, #0]
 80150fe:	15d2      	asrs	r2, r2, #23
 8015100:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015104:	3a7e      	subs	r2, #126	; 0x7e
 8015106:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801510a:	440a      	add	r2, r1
 801510c:	ee00 3a10 	vmov	s0, r3
 8015110:	6002      	str	r2, [r0, #0]
 8015112:	4770      	bx	lr
 8015114:	4c000000 	.word	0x4c000000

08015118 <__utoa>:
 8015118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801511a:	4c1f      	ldr	r4, [pc, #124]	; (8015198 <__utoa+0x80>)
 801511c:	b08b      	sub	sp, #44	; 0x2c
 801511e:	4605      	mov	r5, r0
 8015120:	460b      	mov	r3, r1
 8015122:	466e      	mov	r6, sp
 8015124:	f104 0c20 	add.w	ip, r4, #32
 8015128:	6820      	ldr	r0, [r4, #0]
 801512a:	6861      	ldr	r1, [r4, #4]
 801512c:	4637      	mov	r7, r6
 801512e:	c703      	stmia	r7!, {r0, r1}
 8015130:	3408      	adds	r4, #8
 8015132:	4564      	cmp	r4, ip
 8015134:	463e      	mov	r6, r7
 8015136:	d1f7      	bne.n	8015128 <__utoa+0x10>
 8015138:	7921      	ldrb	r1, [r4, #4]
 801513a:	7139      	strb	r1, [r7, #4]
 801513c:	1e91      	subs	r1, r2, #2
 801513e:	6820      	ldr	r0, [r4, #0]
 8015140:	6038      	str	r0, [r7, #0]
 8015142:	2922      	cmp	r1, #34	; 0x22
 8015144:	f04f 0100 	mov.w	r1, #0
 8015148:	d904      	bls.n	8015154 <__utoa+0x3c>
 801514a:	7019      	strb	r1, [r3, #0]
 801514c:	460b      	mov	r3, r1
 801514e:	4618      	mov	r0, r3
 8015150:	b00b      	add	sp, #44	; 0x2c
 8015152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015154:	1e58      	subs	r0, r3, #1
 8015156:	4684      	mov	ip, r0
 8015158:	fbb5 f7f2 	udiv	r7, r5, r2
 801515c:	fb02 5617 	mls	r6, r2, r7, r5
 8015160:	3628      	adds	r6, #40	; 0x28
 8015162:	446e      	add	r6, sp
 8015164:	460c      	mov	r4, r1
 8015166:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801516a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801516e:	462e      	mov	r6, r5
 8015170:	42b2      	cmp	r2, r6
 8015172:	f101 0101 	add.w	r1, r1, #1
 8015176:	463d      	mov	r5, r7
 8015178:	d9ee      	bls.n	8015158 <__utoa+0x40>
 801517a:	2200      	movs	r2, #0
 801517c:	545a      	strb	r2, [r3, r1]
 801517e:	1919      	adds	r1, r3, r4
 8015180:	1aa5      	subs	r5, r4, r2
 8015182:	42aa      	cmp	r2, r5
 8015184:	dae3      	bge.n	801514e <__utoa+0x36>
 8015186:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801518a:	780e      	ldrb	r6, [r1, #0]
 801518c:	7006      	strb	r6, [r0, #0]
 801518e:	3201      	adds	r2, #1
 8015190:	f801 5901 	strb.w	r5, [r1], #-1
 8015194:	e7f4      	b.n	8015180 <__utoa+0x68>
 8015196:	bf00      	nop
 8015198:	0802ed54 	.word	0x0802ed54

0801519c <with_errnof>:
 801519c:	b513      	push	{r0, r1, r4, lr}
 801519e:	4604      	mov	r4, r0
 80151a0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80151a4:	f002 f852 	bl	801724c <__errno>
 80151a8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80151ac:	6004      	str	r4, [r0, #0]
 80151ae:	b002      	add	sp, #8
 80151b0:	bd10      	pop	{r4, pc}

080151b2 <xflowf>:
 80151b2:	b130      	cbz	r0, 80151c2 <xflowf+0x10>
 80151b4:	eef1 7a40 	vneg.f32	s15, s0
 80151b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80151bc:	2022      	movs	r0, #34	; 0x22
 80151be:	f7ff bfed 	b.w	801519c <with_errnof>
 80151c2:	eef0 7a40 	vmov.f32	s15, s0
 80151c6:	e7f7      	b.n	80151b8 <xflowf+0x6>

080151c8 <__math_uflowf>:
 80151c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80151d0 <__math_uflowf+0x8>
 80151cc:	f7ff bff1 	b.w	80151b2 <xflowf>
 80151d0:	10000000 	.word	0x10000000

080151d4 <__math_may_uflowf>:
 80151d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80151dc <__math_may_uflowf+0x8>
 80151d8:	f7ff bfeb 	b.w	80151b2 <xflowf>
 80151dc:	1a200000 	.word	0x1a200000

080151e0 <__math_oflowf>:
 80151e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80151e8 <__math_oflowf+0x8>
 80151e4:	f7ff bfe5 	b.w	80151b2 <xflowf>
 80151e8:	70000000 	.word	0x70000000

080151ec <__math_divzerof>:
 80151ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80151f0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80151f4:	2800      	cmp	r0, #0
 80151f6:	fe40 7a27 	vseleq.f32	s15, s0, s15
 80151fa:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8015208 <__math_divzerof+0x1c>
 80151fe:	2022      	movs	r0, #34	; 0x22
 8015200:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015204:	f7ff bfca 	b.w	801519c <with_errnof>
 8015208:	00000000 	.word	0x00000000

0801520c <__math_invalidf>:
 801520c:	eef0 7a40 	vmov.f32	s15, s0
 8015210:	ee30 7a40 	vsub.f32	s14, s0, s0
 8015214:	eef4 7a67 	vcmp.f32	s15, s15
 8015218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801521c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8015220:	d602      	bvs.n	8015228 <__math_invalidf+0x1c>
 8015222:	2021      	movs	r0, #33	; 0x21
 8015224:	f7ff bfba 	b.w	801519c <with_errnof>
 8015228:	4770      	bx	lr
 801522a:	0000      	movs	r0, r0
 801522c:	0000      	movs	r0, r0
	...

08015230 <tan>:
 8015230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015232:	eeb0 7b40 	vmov.f64	d7, d0
 8015236:	ee17 3a90 	vmov	r3, s15
 801523a:	4a15      	ldr	r2, [pc, #84]	; (8015290 <tan+0x60>)
 801523c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015240:	4293      	cmp	r3, r2
 8015242:	dc07      	bgt.n	8015254 <tan+0x24>
 8015244:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8015288 <tan+0x58>
 8015248:	2001      	movs	r0, #1
 801524a:	b005      	add	sp, #20
 801524c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015250:	f001 b8ba 	b.w	80163c8 <__kernel_tan>
 8015254:	4a0f      	ldr	r2, [pc, #60]	; (8015294 <tan+0x64>)
 8015256:	4293      	cmp	r3, r2
 8015258:	dd04      	ble.n	8015264 <tan+0x34>
 801525a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801525e:	b005      	add	sp, #20
 8015260:	f85d fb04 	ldr.w	pc, [sp], #4
 8015264:	4668      	mov	r0, sp
 8015266:	f000 fb97 	bl	8015998 <__ieee754_rem_pio2>
 801526a:	0040      	lsls	r0, r0, #1
 801526c:	f000 0002 	and.w	r0, r0, #2
 8015270:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015274:	ed9d 0b00 	vldr	d0, [sp]
 8015278:	f1c0 0001 	rsb	r0, r0, #1
 801527c:	f001 f8a4 	bl	80163c8 <__kernel_tan>
 8015280:	e7ed      	b.n	801525e <tan+0x2e>
 8015282:	bf00      	nop
 8015284:	f3af 8000 	nop.w
	...
 8015290:	3fe921fb 	.word	0x3fe921fb
 8015294:	7fefffff 	.word	0x7fefffff

08015298 <expf>:
 8015298:	ee10 2a10 	vmov	r2, s0
 801529c:	f240 412a 	movw	r1, #1066	; 0x42a
 80152a0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 80152a4:	428b      	cmp	r3, r1
 80152a6:	b430      	push	{r4, r5}
 80152a8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80152ac:	d92a      	bls.n	8015304 <expf+0x6c>
 80152ae:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 80152b2:	d058      	beq.n	8015366 <expf+0xce>
 80152b4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80152b8:	d303      	bcc.n	80152c2 <expf+0x2a>
 80152ba:	ee30 0a00 	vadd.f32	s0, s0, s0
 80152be:	bc30      	pop	{r4, r5}
 80152c0:	4770      	bx	lr
 80152c2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801536c <expf+0xd4>
 80152c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80152ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152ce:	dd03      	ble.n	80152d8 <expf+0x40>
 80152d0:	bc30      	pop	{r4, r5}
 80152d2:	2000      	movs	r0, #0
 80152d4:	f7ff bf84 	b.w	80151e0 <__math_oflowf>
 80152d8:	eddf 7a25 	vldr	s15, [pc, #148]	; 8015370 <expf+0xd8>
 80152dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80152e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152e4:	d503      	bpl.n	80152ee <expf+0x56>
 80152e6:	bc30      	pop	{r4, r5}
 80152e8:	2000      	movs	r0, #0
 80152ea:	f7ff bf6d 	b.w	80151c8 <__math_uflowf>
 80152ee:	eddf 7a21 	vldr	s15, [pc, #132]	; 8015374 <expf+0xdc>
 80152f2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80152f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152fa:	d503      	bpl.n	8015304 <expf+0x6c>
 80152fc:	bc30      	pop	{r4, r5}
 80152fe:	2000      	movs	r0, #0
 8015300:	f7ff bf68 	b.w	80151d4 <__math_may_uflowf>
 8015304:	4b1c      	ldr	r3, [pc, #112]	; (8015378 <expf+0xe0>)
 8015306:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801530a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801530e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8015312:	eeb0 7b44 	vmov.f64	d7, d4
 8015316:	eea5 7b06 	vfma.f64	d7, d5, d6
 801531a:	ee17 0a10 	vmov	r0, s14
 801531e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8015322:	f000 021f 	and.w	r2, r0, #31
 8015326:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801532a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801532e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8015332:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8015336:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801533a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801533e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8015342:	684d      	ldr	r5, [r1, #4]
 8015344:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8015348:	2100      	movs	r1, #0
 801534a:	190a      	adds	r2, r1, r4
 801534c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8015350:	eea5 0b07 	vfma.f64	d0, d5, d7
 8015354:	ec43 2b17 	vmov	d7, r2, r3
 8015358:	eea6 0b04 	vfma.f64	d0, d6, d4
 801535c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015360:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015364:	e7ab      	b.n	80152be <expf+0x26>
 8015366:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801537c <expf+0xe4>
 801536a:	e7a8      	b.n	80152be <expf+0x26>
 801536c:	42b17217 	.word	0x42b17217
 8015370:	c2cff1b4 	.word	0xc2cff1b4
 8015374:	c2ce8ecf 	.word	0xc2ce8ecf
 8015378:	0802ed80 	.word	0x0802ed80
 801537c:	00000000 	.word	0x00000000

08015380 <fabsf>:
 8015380:	ee10 3a10 	vmov	r3, s0
 8015384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015388:	ee00 3a10 	vmov	s0, r3
 801538c:	4770      	bx	lr
	...

08015390 <logf>:
 8015390:	ee10 3a10 	vmov	r3, s0
 8015394:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015398:	b410      	push	{r4}
 801539a:	d055      	beq.n	8015448 <logf+0xb8>
 801539c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80153a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80153a4:	d31a      	bcc.n	80153dc <logf+0x4c>
 80153a6:	005a      	lsls	r2, r3, #1
 80153a8:	d104      	bne.n	80153b4 <logf+0x24>
 80153aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153ae:	2001      	movs	r0, #1
 80153b0:	f7ff bf1c 	b.w	80151ec <__math_divzerof>
 80153b4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80153b8:	d043      	beq.n	8015442 <logf+0xb2>
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	db02      	blt.n	80153c4 <logf+0x34>
 80153be:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80153c2:	d303      	bcc.n	80153cc <logf+0x3c>
 80153c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153c8:	f7ff bf20 	b.w	801520c <__math_invalidf>
 80153cc:	eddf 7a20 	vldr	s15, [pc, #128]	; 8015450 <logf+0xc0>
 80153d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80153d4:	ee10 3a10 	vmov	r3, s0
 80153d8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80153dc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 80153e0:	491c      	ldr	r1, [pc, #112]	; (8015454 <logf+0xc4>)
 80153e2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 80153e6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 80153ea:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80153ee:	0dd4      	lsrs	r4, r2, #23
 80153f0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80153f4:	05e4      	lsls	r4, r4, #23
 80153f6:	ed90 6b00 	vldr	d6, [r0]
 80153fa:	1b1b      	subs	r3, r3, r4
 80153fc:	ee07 3a90 	vmov	s15, r3
 8015400:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8015404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015408:	15d2      	asrs	r2, r2, #23
 801540a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801540e:	ed90 6b02 	vldr	d6, [r0, #8]
 8015412:	ee20 4b00 	vmul.f64	d4, d0, d0
 8015416:	ee07 2a90 	vmov	s15, r2
 801541a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801541e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015422:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8015426:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801542a:	eea5 7b00 	vfma.f64	d7, d5, d0
 801542e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8015432:	ee30 0b06 	vadd.f64	d0, d0, d6
 8015436:	eea5 7b04 	vfma.f64	d7, d5, d4
 801543a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801543e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015446:	4770      	bx	lr
 8015448:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8015458 <logf+0xc8>
 801544c:	e7f9      	b.n	8015442 <logf+0xb2>
 801544e:	bf00      	nop
 8015450:	4b000000 	.word	0x4b000000
 8015454:	0802efe8 	.word	0x0802efe8
 8015458:	00000000 	.word	0x00000000

0801545c <log2f>:
 801545c:	ee10 2a10 	vmov	r2, s0
 8015460:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015464:	b410      	push	{r4}
 8015466:	d055      	beq.n	8015514 <log2f+0xb8>
 8015468:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 801546c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8015470:	d31a      	bcc.n	80154a8 <log2f+0x4c>
 8015472:	0053      	lsls	r3, r2, #1
 8015474:	d104      	bne.n	8015480 <log2f+0x24>
 8015476:	f85d 4b04 	ldr.w	r4, [sp], #4
 801547a:	2001      	movs	r0, #1
 801547c:	f7ff beb6 	b.w	80151ec <__math_divzerof>
 8015480:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015484:	d043      	beq.n	801550e <log2f+0xb2>
 8015486:	2a00      	cmp	r2, #0
 8015488:	db02      	blt.n	8015490 <log2f+0x34>
 801548a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801548e:	d303      	bcc.n	8015498 <log2f+0x3c>
 8015490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015494:	f7ff beba 	b.w	801520c <__math_invalidf>
 8015498:	eddf 7a20 	vldr	s15, [pc, #128]	; 801551c <log2f+0xc0>
 801549c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80154a0:	ee10 3a10 	vmov	r3, s0
 80154a4:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 80154a8:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 80154ac:	491c      	ldr	r1, [pc, #112]	; (8015520 <log2f+0xc4>)
 80154ae:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80154b2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 80154b6:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 80154ba:	0ddc      	lsrs	r4, r3, #23
 80154bc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80154c0:	05e4      	lsls	r4, r4, #23
 80154c2:	ed90 5b00 	vldr	d5, [r0]
 80154c6:	1b12      	subs	r2, r2, r4
 80154c8:	ee07 2a90 	vmov	s15, r2
 80154cc:	15db      	asrs	r3, r3, #23
 80154ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80154d2:	eea5 6b07 	vfma.f64	d6, d5, d7
 80154d6:	ed90 7b02 	vldr	d7, [r0, #8]
 80154da:	ee26 4b06 	vmul.f64	d4, d6, d6
 80154de:	ee00 3a10 	vmov	s0, r3
 80154e2:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 80154e6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80154ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 80154ee:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 80154f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80154f6:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 80154fa:	eea5 7b04 	vfma.f64	d7, d5, d4
 80154fe:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 8015502:	eea5 0b06 	vfma.f64	d0, d5, d6
 8015506:	eea4 0b07 	vfma.f64	d0, d4, d7
 801550a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801550e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015512:	4770      	bx	lr
 8015514:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8015524 <log2f+0xc8>
 8015518:	e7f9      	b.n	801550e <log2f+0xb2>
 801551a:	bf00      	nop
 801551c:	4b000000 	.word	0x4b000000
 8015520:	0802eec8 	.word	0x0802eec8
 8015524:	00000000 	.word	0x00000000

08015528 <lrintf>:
 8015528:	ee10 3a10 	vmov	r3, s0
 801552c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015530:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 8015534:	281e      	cmp	r0, #30
 8015536:	b082      	sub	sp, #8
 8015538:	dc2e      	bgt.n	8015598 <lrintf+0x70>
 801553a:	1c41      	adds	r1, r0, #1
 801553c:	da02      	bge.n	8015544 <lrintf+0x1c>
 801553e:	2000      	movs	r0, #0
 8015540:	b002      	add	sp, #8
 8015542:	4770      	bx	lr
 8015544:	2816      	cmp	r0, #22
 8015546:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801554a:	dd09      	ble.n	8015560 <lrintf+0x38>
 801554c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8015550:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015554:	3a96      	subs	r2, #150	; 0x96
 8015556:	4090      	lsls	r0, r2
 8015558:	2900      	cmp	r1, #0
 801555a:	d0f1      	beq.n	8015540 <lrintf+0x18>
 801555c:	4240      	negs	r0, r0
 801555e:	e7ef      	b.n	8015540 <lrintf+0x18>
 8015560:	4b10      	ldr	r3, [pc, #64]	; (80155a4 <lrintf+0x7c>)
 8015562:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015566:	ed93 7a00 	vldr	s14, [r3]
 801556a:	ee37 0a00 	vadd.f32	s0, s14, s0
 801556e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015572:	eddd 7a01 	vldr	s15, [sp, #4]
 8015576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801557a:	ee17 3a90 	vmov	r3, s15
 801557e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8015582:	d0dc      	beq.n	801553e <lrintf+0x16>
 8015584:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8015588:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801558c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015590:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8015594:	40d8      	lsrs	r0, r3
 8015596:	e7df      	b.n	8015558 <lrintf+0x30>
 8015598:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801559c:	ee17 0a90 	vmov	r0, s15
 80155a0:	e7ce      	b.n	8015540 <lrintf+0x18>
 80155a2:	bf00      	nop
 80155a4:	0802f108 	.word	0x0802f108

080155a8 <checkint>:
 80155a8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80155ac:	2b7e      	cmp	r3, #126	; 0x7e
 80155ae:	dd10      	ble.n	80155d2 <checkint+0x2a>
 80155b0:	2b96      	cmp	r3, #150	; 0x96
 80155b2:	dc0c      	bgt.n	80155ce <checkint+0x26>
 80155b4:	2201      	movs	r2, #1
 80155b6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80155ba:	fa02 f303 	lsl.w	r3, r2, r3
 80155be:	1e5a      	subs	r2, r3, #1
 80155c0:	4202      	tst	r2, r0
 80155c2:	d106      	bne.n	80155d2 <checkint+0x2a>
 80155c4:	4203      	tst	r3, r0
 80155c6:	bf0c      	ite	eq
 80155c8:	2002      	moveq	r0, #2
 80155ca:	2001      	movne	r0, #1
 80155cc:	4770      	bx	lr
 80155ce:	2002      	movs	r0, #2
 80155d0:	4770      	bx	lr
 80155d2:	2000      	movs	r0, #0
 80155d4:	4770      	bx	lr
	...

080155d8 <powf>:
 80155d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155da:	ee10 1a10 	vmov	r1, s0
 80155de:	ee10 4a90 	vmov	r4, s1
 80155e2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 80155e6:	0062      	lsls	r2, r4, #1
 80155e8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80155ec:	eef0 7a40 	vmov.f32	s15, s0
 80155f0:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 80155f4:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 80155f8:	d252      	bcs.n	80156a0 <powf+0xc8>
 80155fa:	4298      	cmp	r0, r3
 80155fc:	d252      	bcs.n	80156a4 <powf+0xcc>
 80155fe:	2000      	movs	r0, #0
 8015600:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 8015604:	4ca0      	ldr	r4, [pc, #640]	; (8015888 <powf+0x2b0>)
 8015606:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 801560a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801560e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 8015612:	0dd2      	lsrs	r2, r2, #23
 8015614:	05d2      	lsls	r2, r2, #23
 8015616:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 801561a:	1a8b      	subs	r3, r1, r2
 801561c:	ed95 6b00 	vldr	d6, [r5]
 8015620:	ee07 3a90 	vmov	s15, r3
 8015624:	15d2      	asrs	r2, r2, #23
 8015626:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801562a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801562e:	ed95 6b02 	vldr	d6, [r5, #8]
 8015632:	ee25 2b05 	vmul.f64	d2, d5, d5
 8015636:	ee22 1b02 	vmul.f64	d1, d2, d2
 801563a:	ee07 2a90 	vmov	s15, r2
 801563e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 8015642:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015646:	ee37 7b06 	vadd.f64	d7, d7, d6
 801564a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 801564e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 8015652:	eea5 3b06 	vfma.f64	d3, d5, d6
 8015656:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 801565a:	eea5 6b04 	vfma.f64	d6, d5, d4
 801565e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 8015662:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 8015666:	eea5 7b04 	vfma.f64	d7, d5, d4
 801566a:	eea2 7b06 	vfma.f64	d7, d2, d6
 801566e:	eea3 7b01 	vfma.f64	d7, d3, d1
 8015672:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015676:	ee10 3a90 	vmov	r3, s1
 801567a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801567e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8015682:	429a      	cmp	r2, r3
 8015684:	f0c0 80b1 	bcc.w	80157ea <powf+0x212>
 8015688:	ed9f 7b77 	vldr	d7, [pc, #476]	; 8015868 <powf+0x290>
 801568c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015694:	dd79      	ble.n	801578a <powf+0x1b2>
 8015696:	b003      	add	sp, #12
 8015698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801569c:	f7ff bda0 	b.w	80151e0 <__math_oflowf>
 80156a0:	4298      	cmp	r0, r3
 80156a2:	d32d      	bcc.n	8015700 <powf+0x128>
 80156a4:	b952      	cbnz	r2, 80156bc <powf+0xe4>
 80156a6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 80156aa:	005b      	lsls	r3, r3, #1
 80156ac:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80156b0:	f240 80c9 	bls.w	8015846 <powf+0x26e>
 80156b4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 80156b8:	b003      	add	sp, #12
 80156ba:	bd30      	pop	{r4, r5, pc}
 80156bc:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 80156c0:	d105      	bne.n	80156ce <powf+0xf6>
 80156c2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80156c6:	0064      	lsls	r4, r4, #1
 80156c8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80156cc:	e7f0      	b.n	80156b0 <powf+0xd8>
 80156ce:	004b      	lsls	r3, r1, #1
 80156d0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80156d4:	d8ee      	bhi.n	80156b4 <powf+0xdc>
 80156d6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80156da:	d1eb      	bne.n	80156b4 <powf+0xdc>
 80156dc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80156e0:	f000 80b1 	beq.w	8015846 <powf+0x26e>
 80156e4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 80156e8:	ea6f 0404 	mvn.w	r4, r4
 80156ec:	bf34      	ite	cc
 80156ee:	2300      	movcc	r3, #0
 80156f0:	2301      	movcs	r3, #1
 80156f2:	0fe4      	lsrs	r4, r4, #31
 80156f4:	42a3      	cmp	r3, r4
 80156f6:	f040 80a9 	bne.w	801584c <powf+0x274>
 80156fa:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80156fe:	e7db      	b.n	80156b8 <powf+0xe0>
 8015700:	004d      	lsls	r5, r1, #1
 8015702:	1e6a      	subs	r2, r5, #1
 8015704:	429a      	cmp	r2, r3
 8015706:	d31c      	bcc.n	8015742 <powf+0x16a>
 8015708:	2900      	cmp	r1, #0
 801570a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801570e:	da0f      	bge.n	8015730 <powf+0x158>
 8015710:	ee10 0a90 	vmov	r0, s1
 8015714:	f7ff ff48 	bl	80155a8 <checkint>
 8015718:	2801      	cmp	r0, #1
 801571a:	d109      	bne.n	8015730 <powf+0x158>
 801571c:	eeb1 0a40 	vneg.f32	s0, s0
 8015720:	b945      	cbnz	r5, 8015734 <powf+0x15c>
 8015722:	2c00      	cmp	r4, #0
 8015724:	dac8      	bge.n	80156b8 <powf+0xe0>
 8015726:	b003      	add	sp, #12
 8015728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801572c:	f7ff bd5e 	b.w	80151ec <__math_divzerof>
 8015730:	2000      	movs	r0, #0
 8015732:	e7f5      	b.n	8015720 <powf+0x148>
 8015734:	2c00      	cmp	r4, #0
 8015736:	dabf      	bge.n	80156b8 <powf+0xe0>
 8015738:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801573c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015740:	e7ba      	b.n	80156b8 <powf+0xe0>
 8015742:	2900      	cmp	r1, #0
 8015744:	da1f      	bge.n	8015786 <powf+0x1ae>
 8015746:	ee10 0a90 	vmov	r0, s1
 801574a:	f7ff ff2d 	bl	80155a8 <checkint>
 801574e:	b920      	cbnz	r0, 801575a <powf+0x182>
 8015750:	b003      	add	sp, #12
 8015752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015756:	f7ff bd59 	b.w	801520c <__math_invalidf>
 801575a:	2801      	cmp	r0, #1
 801575c:	bf14      	ite	ne
 801575e:	2000      	movne	r0, #0
 8015760:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8015764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015768:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801576c:	f4bf af48 	bcs.w	8015600 <powf+0x28>
 8015770:	ed9f 0a46 	vldr	s0, [pc, #280]	; 801588c <powf+0x2b4>
 8015774:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015778:	ee10 3a10 	vmov	r3, s0
 801577c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015780:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8015784:	e73c      	b.n	8015600 <powf+0x28>
 8015786:	2000      	movs	r0, #0
 8015788:	e7ee      	b.n	8015768 <powf+0x190>
 801578a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8015870 <powf+0x298>
 801578e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015796:	dd10      	ble.n	80157ba <powf+0x1e2>
 8015798:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801579c:	2800      	cmp	r0, #0
 801579e:	d158      	bne.n	8015852 <powf+0x27a>
 80157a0:	9300      	str	r3, [sp, #0]
 80157a2:	eddd 7a00 	vldr	s15, [sp]
 80157a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80157aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80157ae:	eef4 7a47 	vcmp.f32	s15, s14
 80157b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157b6:	f47f af6e 	bne.w	8015696 <powf+0xbe>
 80157ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8015878 <powf+0x2a0>
 80157be:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80157c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157c6:	d804      	bhi.n	80157d2 <powf+0x1fa>
 80157c8:	b003      	add	sp, #12
 80157ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80157ce:	f7ff bcfb 	b.w	80151c8 <__math_uflowf>
 80157d2:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8015880 <powf+0x2a8>
 80157d6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80157da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157de:	d504      	bpl.n	80157ea <powf+0x212>
 80157e0:	b003      	add	sp, #12
 80157e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80157e6:	f7ff bcf5 	b.w	80151d4 <__math_may_uflowf>
 80157ea:	4b29      	ldr	r3, [pc, #164]	; (8015890 <powf+0x2b8>)
 80157ec:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 80157f0:	ee30 6b07 	vadd.f64	d6, d0, d7
 80157f4:	ee16 2a10 	vmov	r2, s12
 80157f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80157fc:	f002 011f 	and.w	r1, r2, #31
 8015800:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8015804:	ee30 7b47 	vsub.f64	d7, d0, d7
 8015808:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801580c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 8015810:	ee27 4b07 	vmul.f64	d4, d7, d7
 8015814:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8015818:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801581c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015820:	686d      	ldr	r5, [r5, #4]
 8015822:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 8015826:	1882      	adds	r2, r0, r2
 8015828:	2300      	movs	r3, #0
 801582a:	1918      	adds	r0, r3, r4
 801582c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8015830:	eea7 0b05 	vfma.f64	d0, d7, d5
 8015834:	ec41 0b17 	vmov	d7, r0, r1
 8015838:	eea6 0b04 	vfma.f64	d0, d6, d4
 801583c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015840:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015844:	e738      	b.n	80156b8 <powf+0xe0>
 8015846:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801584a:	e735      	b.n	80156b8 <powf+0xe0>
 801584c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8015894 <powf+0x2bc>
 8015850:	e732      	b.n	80156b8 <powf+0xe0>
 8015852:	9301      	str	r3, [sp, #4]
 8015854:	eddd 7a01 	vldr	s15, [sp, #4]
 8015858:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801585c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015860:	e7a5      	b.n	80157ae <powf+0x1d6>
 8015862:	bf00      	nop
 8015864:	f3af 8000 	nop.w
 8015868:	ffd1d571 	.word	0xffd1d571
 801586c:	405fffff 	.word	0x405fffff
 8015870:	ffa3aae2 	.word	0xffa3aae2
 8015874:	405fffff 	.word	0x405fffff
 8015878:	00000000 	.word	0x00000000
 801587c:	c062c000 	.word	0xc062c000
 8015880:	00000000 	.word	0x00000000
 8015884:	c062a000 	.word	0xc062a000
 8015888:	0802f110 	.word	0x0802f110
 801588c:	4b000000 	.word	0x4b000000
 8015890:	0802ed80 	.word	0x0802ed80
 8015894:	00000000 	.word	0x00000000

08015898 <tanf>:
 8015898:	ee10 3a10 	vmov	r3, s0
 801589c:	b507      	push	{r0, r1, r2, lr}
 801589e:	4a12      	ldr	r2, [pc, #72]	; (80158e8 <tanf+0x50>)
 80158a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158a4:	4293      	cmp	r3, r2
 80158a6:	dc07      	bgt.n	80158b8 <tanf+0x20>
 80158a8:	eddf 0a10 	vldr	s1, [pc, #64]	; 80158ec <tanf+0x54>
 80158ac:	2001      	movs	r0, #1
 80158ae:	b003      	add	sp, #12
 80158b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80158b4:	f001 b916 	b.w	8016ae4 <__kernel_tanf>
 80158b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80158bc:	db04      	blt.n	80158c8 <tanf+0x30>
 80158be:	ee30 0a40 	vsub.f32	s0, s0, s0
 80158c2:	b003      	add	sp, #12
 80158c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80158c8:	4668      	mov	r0, sp
 80158ca:	f000 f9a9 	bl	8015c20 <__ieee754_rem_pio2f>
 80158ce:	0040      	lsls	r0, r0, #1
 80158d0:	f000 0002 	and.w	r0, r0, #2
 80158d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80158d8:	ed9d 0a00 	vldr	s0, [sp]
 80158dc:	f1c0 0001 	rsb	r0, r0, #1
 80158e0:	f001 f900 	bl	8016ae4 <__kernel_tanf>
 80158e4:	e7ed      	b.n	80158c2 <tanf+0x2a>
 80158e6:	bf00      	nop
 80158e8:	3f490fda 	.word	0x3f490fda
 80158ec:	00000000 	.word	0x00000000

080158f0 <tanhf>:
 80158f0:	b510      	push	{r4, lr}
 80158f2:	ee10 4a10 	vmov	r4, s0
 80158f6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80158fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80158fe:	ed2d 8b02 	vpush	{d8}
 8015902:	eeb0 7a40 	vmov.f32	s14, s0
 8015906:	db0c      	blt.n	8015922 <tanhf+0x32>
 8015908:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801590c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8015910:	2c00      	cmp	r4, #0
 8015912:	bfac      	ite	ge
 8015914:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8015918:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 801591c:	ecbd 8b02 	vpop	{d8}
 8015920:	bd10      	pop	{r4, pc}
 8015922:	4a1b      	ldr	r2, [pc, #108]	; (8015990 <tanhf+0xa0>)
 8015924:	4293      	cmp	r3, r2
 8015926:	dc30      	bgt.n	801598a <tanhf+0x9a>
 8015928:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 801592c:	da06      	bge.n	801593c <tanhf+0x4c>
 801592e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015932:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015936:	ee27 0a80 	vmul.f32	s0, s15, s0
 801593a:	e7ef      	b.n	801591c <tanhf+0x2c>
 801593c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015940:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8015944:	db12      	blt.n	801596c <tanhf+0x7c>
 8015946:	f7ff fd1b 	bl	8015380 <fabsf>
 801594a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801594e:	f001 fab1 	bl	8016eb4 <expm1f>
 8015952:	ee30 0a08 	vadd.f32	s0, s0, s16
 8015956:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801595a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801595e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015962:	2c00      	cmp	r4, #0
 8015964:	bfb8      	it	lt
 8015966:	eeb1 0a40 	vneglt.f32	s0, s0
 801596a:	e7d7      	b.n	801591c <tanhf+0x2c>
 801596c:	f7ff fd08 	bl	8015380 <fabsf>
 8015970:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8015974:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015978:	f001 fa9c 	bl	8016eb4 <expm1f>
 801597c:	ee70 7a08 	vadd.f32	s15, s0, s16
 8015980:	eeb1 7a40 	vneg.f32	s14, s0
 8015984:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015988:	e7eb      	b.n	8015962 <tanhf+0x72>
 801598a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801598e:	e7e8      	b.n	8015962 <tanhf+0x72>
 8015990:	41afffff 	.word	0x41afffff
 8015994:	00000000 	.word	0x00000000

08015998 <__ieee754_rem_pio2>:
 8015998:	b570      	push	{r4, r5, r6, lr}
 801599a:	eeb0 7b40 	vmov.f64	d7, d0
 801599e:	ee17 5a90 	vmov	r5, s15
 80159a2:	4b99      	ldr	r3, [pc, #612]	; (8015c08 <__ieee754_rem_pio2+0x270>)
 80159a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80159a8:	429e      	cmp	r6, r3
 80159aa:	b088      	sub	sp, #32
 80159ac:	4604      	mov	r4, r0
 80159ae:	dc07      	bgt.n	80159c0 <__ieee754_rem_pio2+0x28>
 80159b0:	2200      	movs	r2, #0
 80159b2:	2300      	movs	r3, #0
 80159b4:	ed84 0b00 	vstr	d0, [r4]
 80159b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80159bc:	2000      	movs	r0, #0
 80159be:	e01b      	b.n	80159f8 <__ieee754_rem_pio2+0x60>
 80159c0:	4b92      	ldr	r3, [pc, #584]	; (8015c0c <__ieee754_rem_pio2+0x274>)
 80159c2:	429e      	cmp	r6, r3
 80159c4:	dc3b      	bgt.n	8015a3e <__ieee754_rem_pio2+0xa6>
 80159c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80159ca:	2d00      	cmp	r5, #0
 80159cc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8015bc8 <__ieee754_rem_pio2+0x230>
 80159d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80159d4:	dd19      	ble.n	8015a0a <__ieee754_rem_pio2+0x72>
 80159d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80159da:	429e      	cmp	r6, r3
 80159dc:	d00e      	beq.n	80159fc <__ieee754_rem_pio2+0x64>
 80159de:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8015bd0 <__ieee754_rem_pio2+0x238>
 80159e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80159e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80159ea:	ed84 5b00 	vstr	d5, [r4]
 80159ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80159f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80159f6:	2001      	movs	r0, #1
 80159f8:	b008      	add	sp, #32
 80159fa:	bd70      	pop	{r4, r5, r6, pc}
 80159fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015bd8 <__ieee754_rem_pio2+0x240>
 8015a00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015a04:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015be0 <__ieee754_rem_pio2+0x248>
 8015a08:	e7eb      	b.n	80159e2 <__ieee754_rem_pio2+0x4a>
 8015a0a:	429e      	cmp	r6, r3
 8015a0c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015a10:	d00e      	beq.n	8015a30 <__ieee754_rem_pio2+0x98>
 8015a12:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8015bd0 <__ieee754_rem_pio2+0x238>
 8015a16:	ee37 5b06 	vadd.f64	d5, d7, d6
 8015a1a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015a1e:	ed84 5b00 	vstr	d5, [r4]
 8015a22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015a26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8015a2e:	e7e3      	b.n	80159f8 <__ieee754_rem_pio2+0x60>
 8015a30:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015bd8 <__ieee754_rem_pio2+0x240>
 8015a34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015a38:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015be0 <__ieee754_rem_pio2+0x248>
 8015a3c:	e7eb      	b.n	8015a16 <__ieee754_rem_pio2+0x7e>
 8015a3e:	4b74      	ldr	r3, [pc, #464]	; (8015c10 <__ieee754_rem_pio2+0x278>)
 8015a40:	429e      	cmp	r6, r3
 8015a42:	dc70      	bgt.n	8015b26 <__ieee754_rem_pio2+0x18e>
 8015a44:	f001 f92e 	bl	8016ca4 <fabs>
 8015a48:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8015a4c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015be8 <__ieee754_rem_pio2+0x250>
 8015a50:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015a54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015a58:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8015a5c:	ee17 0a90 	vmov	r0, s15
 8015a60:	eeb1 4b45 	vneg.f64	d4, d5
 8015a64:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015bc8 <__ieee754_rem_pio2+0x230>
 8015a68:	eea5 0b47 	vfms.f64	d0, d5, d7
 8015a6c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015bd0 <__ieee754_rem_pio2+0x238>
 8015a70:	281f      	cmp	r0, #31
 8015a72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015a76:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015a7a:	dc08      	bgt.n	8015a8e <__ieee754_rem_pio2+0xf6>
 8015a7c:	4b65      	ldr	r3, [pc, #404]	; (8015c14 <__ieee754_rem_pio2+0x27c>)
 8015a7e:	1e42      	subs	r2, r0, #1
 8015a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a84:	42b3      	cmp	r3, r6
 8015a86:	d002      	beq.n	8015a8e <__ieee754_rem_pio2+0xf6>
 8015a88:	ed84 6b00 	vstr	d6, [r4]
 8015a8c:	e026      	b.n	8015adc <__ieee754_rem_pio2+0x144>
 8015a8e:	ee16 3a90 	vmov	r3, s13
 8015a92:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015a96:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015a9a:	2b10      	cmp	r3, #16
 8015a9c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015aa0:	ddf2      	ble.n	8015a88 <__ieee754_rem_pio2+0xf0>
 8015aa2:	eeb0 6b40 	vmov.f64	d6, d0
 8015aa6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8015bd8 <__ieee754_rem_pio2+0x240>
 8015aaa:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8015be0 <__ieee754_rem_pio2+0x248>
 8015aae:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015ab2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015ab6:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015aba:	eeb0 7b40 	vmov.f64	d7, d0
 8015abe:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8015ac2:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015ac6:	ee13 3a90 	vmov	r3, s7
 8015aca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015ace:	1ad3      	subs	r3, r2, r3
 8015ad0:	2b31      	cmp	r3, #49	; 0x31
 8015ad2:	dc17      	bgt.n	8015b04 <__ieee754_rem_pio2+0x16c>
 8015ad4:	eeb0 0b46 	vmov.f64	d0, d6
 8015ad8:	ed84 3b00 	vstr	d3, [r4]
 8015adc:	ed94 6b00 	vldr	d6, [r4]
 8015ae0:	2d00      	cmp	r5, #0
 8015ae2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015ae6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015aea:	ed84 0b02 	vstr	d0, [r4, #8]
 8015aee:	da83      	bge.n	80159f8 <__ieee754_rem_pio2+0x60>
 8015af0:	eeb1 6b46 	vneg.f64	d6, d6
 8015af4:	eeb1 0b40 	vneg.f64	d0, d0
 8015af8:	ed84 6b00 	vstr	d6, [r4]
 8015afc:	ed84 0b02 	vstr	d0, [r4, #8]
 8015b00:	4240      	negs	r0, r0
 8015b02:	e779      	b.n	80159f8 <__ieee754_rem_pio2+0x60>
 8015b04:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8015bf0 <__ieee754_rem_pio2+0x258>
 8015b08:	eeb0 0b46 	vmov.f64	d0, d6
 8015b0c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8015b10:	ee36 7b40 	vsub.f64	d7, d6, d0
 8015b14:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8015bf8 <__ieee754_rem_pio2+0x260>
 8015b18:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015b1c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8015b20:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015b24:	e7b0      	b.n	8015a88 <__ieee754_rem_pio2+0xf0>
 8015b26:	4b3c      	ldr	r3, [pc, #240]	; (8015c18 <__ieee754_rem_pio2+0x280>)
 8015b28:	429e      	cmp	r6, r3
 8015b2a:	dd06      	ble.n	8015b3a <__ieee754_rem_pio2+0x1a2>
 8015b2c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8015b30:	ed80 7b02 	vstr	d7, [r0, #8]
 8015b34:	ed80 7b00 	vstr	d7, [r0]
 8015b38:	e740      	b.n	80159bc <__ieee754_rem_pio2+0x24>
 8015b3a:	1532      	asrs	r2, r6, #20
 8015b3c:	ee10 0a10 	vmov	r0, s0
 8015b40:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8015b44:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8015b48:	ec41 0b17 	vmov	d7, r0, r1
 8015b4c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015b50:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8015c00 <__ieee754_rem_pio2+0x268>
 8015b54:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015b58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015b5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015b60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015b64:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015b68:	a902      	add	r1, sp, #8
 8015b6a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015b6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015b72:	ed8d 6b04 	vstr	d6, [sp, #16]
 8015b76:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015b7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015b7e:	2603      	movs	r6, #3
 8015b80:	4608      	mov	r0, r1
 8015b82:	ed91 7b04 	vldr	d7, [r1, #16]
 8015b86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b8e:	4633      	mov	r3, r6
 8015b90:	f1a1 0108 	sub.w	r1, r1, #8
 8015b94:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8015b98:	d0f3      	beq.n	8015b82 <__ieee754_rem_pio2+0x1ea>
 8015b9a:	4920      	ldr	r1, [pc, #128]	; (8015c1c <__ieee754_rem_pio2+0x284>)
 8015b9c:	9101      	str	r1, [sp, #4]
 8015b9e:	2102      	movs	r1, #2
 8015ba0:	9100      	str	r1, [sp, #0]
 8015ba2:	4621      	mov	r1, r4
 8015ba4:	f000 f978 	bl	8015e98 <__kernel_rem_pio2>
 8015ba8:	2d00      	cmp	r5, #0
 8015baa:	f6bf af25 	bge.w	80159f8 <__ieee754_rem_pio2+0x60>
 8015bae:	ed94 7b00 	vldr	d7, [r4]
 8015bb2:	eeb1 7b47 	vneg.f64	d7, d7
 8015bb6:	ed84 7b00 	vstr	d7, [r4]
 8015bba:	ed94 7b02 	vldr	d7, [r4, #8]
 8015bbe:	eeb1 7b47 	vneg.f64	d7, d7
 8015bc2:	ed84 7b02 	vstr	d7, [r4, #8]
 8015bc6:	e79b      	b.n	8015b00 <__ieee754_rem_pio2+0x168>
 8015bc8:	54400000 	.word	0x54400000
 8015bcc:	3ff921fb 	.word	0x3ff921fb
 8015bd0:	1a626331 	.word	0x1a626331
 8015bd4:	3dd0b461 	.word	0x3dd0b461
 8015bd8:	1a600000 	.word	0x1a600000
 8015bdc:	3dd0b461 	.word	0x3dd0b461
 8015be0:	2e037073 	.word	0x2e037073
 8015be4:	3ba3198a 	.word	0x3ba3198a
 8015be8:	6dc9c883 	.word	0x6dc9c883
 8015bec:	3fe45f30 	.word	0x3fe45f30
 8015bf0:	2e000000 	.word	0x2e000000
 8015bf4:	3ba3198a 	.word	0x3ba3198a
 8015bf8:	252049c1 	.word	0x252049c1
 8015bfc:	397b839a 	.word	0x397b839a
 8015c00:	00000000 	.word	0x00000000
 8015c04:	41700000 	.word	0x41700000
 8015c08:	3fe921fb 	.word	0x3fe921fb
 8015c0c:	4002d97b 	.word	0x4002d97b
 8015c10:	413921fb 	.word	0x413921fb
 8015c14:	0802f238 	.word	0x0802f238
 8015c18:	7fefffff 	.word	0x7fefffff
 8015c1c:	0802f2b8 	.word	0x0802f2b8

08015c20 <__ieee754_rem_pio2f>:
 8015c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c22:	ee10 6a10 	vmov	r6, s0
 8015c26:	4b8e      	ldr	r3, [pc, #568]	; (8015e60 <__ieee754_rem_pio2f+0x240>)
 8015c28:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8015c2c:	429d      	cmp	r5, r3
 8015c2e:	b087      	sub	sp, #28
 8015c30:	eef0 7a40 	vmov.f32	s15, s0
 8015c34:	4604      	mov	r4, r0
 8015c36:	dc05      	bgt.n	8015c44 <__ieee754_rem_pio2f+0x24>
 8015c38:	2300      	movs	r3, #0
 8015c3a:	ed80 0a00 	vstr	s0, [r0]
 8015c3e:	6043      	str	r3, [r0, #4]
 8015c40:	2000      	movs	r0, #0
 8015c42:	e01a      	b.n	8015c7a <__ieee754_rem_pio2f+0x5a>
 8015c44:	4b87      	ldr	r3, [pc, #540]	; (8015e64 <__ieee754_rem_pio2f+0x244>)
 8015c46:	429d      	cmp	r5, r3
 8015c48:	dc46      	bgt.n	8015cd8 <__ieee754_rem_pio2f+0xb8>
 8015c4a:	2e00      	cmp	r6, #0
 8015c4c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8015e68 <__ieee754_rem_pio2f+0x248>
 8015c50:	4b86      	ldr	r3, [pc, #536]	; (8015e6c <__ieee754_rem_pio2f+0x24c>)
 8015c52:	f025 050f 	bic.w	r5, r5, #15
 8015c56:	dd1f      	ble.n	8015c98 <__ieee754_rem_pio2f+0x78>
 8015c58:	429d      	cmp	r5, r3
 8015c5a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015c5e:	d00e      	beq.n	8015c7e <__ieee754_rem_pio2f+0x5e>
 8015c60:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8015e70 <__ieee754_rem_pio2f+0x250>
 8015c64:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015c68:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015c6c:	ed80 0a00 	vstr	s0, [r0]
 8015c70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c74:	2001      	movs	r0, #1
 8015c76:	edc4 7a01 	vstr	s15, [r4, #4]
 8015c7a:	b007      	add	sp, #28
 8015c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c7e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8015e74 <__ieee754_rem_pio2f+0x254>
 8015c82:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8015e78 <__ieee754_rem_pio2f+0x258>
 8015c86:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015c8a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015c8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015c92:	edc0 6a00 	vstr	s13, [r0]
 8015c96:	e7eb      	b.n	8015c70 <__ieee754_rem_pio2f+0x50>
 8015c98:	429d      	cmp	r5, r3
 8015c9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015c9e:	d00e      	beq.n	8015cbe <__ieee754_rem_pio2f+0x9e>
 8015ca0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8015e70 <__ieee754_rem_pio2f+0x250>
 8015ca4:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015ca8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015cac:	ed80 0a00 	vstr	s0, [r0]
 8015cb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015cb8:	edc4 7a01 	vstr	s15, [r4, #4]
 8015cbc:	e7dd      	b.n	8015c7a <__ieee754_rem_pio2f+0x5a>
 8015cbe:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8015e74 <__ieee754_rem_pio2f+0x254>
 8015cc2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8015e78 <__ieee754_rem_pio2f+0x258>
 8015cc6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015cca:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015cce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015cd2:	edc0 6a00 	vstr	s13, [r0]
 8015cd6:	e7eb      	b.n	8015cb0 <__ieee754_rem_pio2f+0x90>
 8015cd8:	4b68      	ldr	r3, [pc, #416]	; (8015e7c <__ieee754_rem_pio2f+0x25c>)
 8015cda:	429d      	cmp	r5, r3
 8015cdc:	dc72      	bgt.n	8015dc4 <__ieee754_rem_pio2f+0x1a4>
 8015cde:	f7ff fb4f 	bl	8015380 <fabsf>
 8015ce2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8015e80 <__ieee754_rem_pio2f+0x260>
 8015ce6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015cea:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015cf6:	ee17 0a90 	vmov	r0, s15
 8015cfa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8015e68 <__ieee754_rem_pio2f+0x248>
 8015cfe:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015d02:	281f      	cmp	r0, #31
 8015d04:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8015e70 <__ieee754_rem_pio2f+0x250>
 8015d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015d0c:	eeb1 6a47 	vneg.f32	s12, s14
 8015d10:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015d14:	ee16 2a90 	vmov	r2, s13
 8015d18:	dc1c      	bgt.n	8015d54 <__ieee754_rem_pio2f+0x134>
 8015d1a:	495a      	ldr	r1, [pc, #360]	; (8015e84 <__ieee754_rem_pio2f+0x264>)
 8015d1c:	1e47      	subs	r7, r0, #1
 8015d1e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8015d22:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8015d26:	428b      	cmp	r3, r1
 8015d28:	d014      	beq.n	8015d54 <__ieee754_rem_pio2f+0x134>
 8015d2a:	6022      	str	r2, [r4, #0]
 8015d2c:	ed94 7a00 	vldr	s14, [r4]
 8015d30:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015d34:	2e00      	cmp	r6, #0
 8015d36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015d3a:	ed84 0a01 	vstr	s0, [r4, #4]
 8015d3e:	da9c      	bge.n	8015c7a <__ieee754_rem_pio2f+0x5a>
 8015d40:	eeb1 7a47 	vneg.f32	s14, s14
 8015d44:	eeb1 0a40 	vneg.f32	s0, s0
 8015d48:	ed84 7a00 	vstr	s14, [r4]
 8015d4c:	ed84 0a01 	vstr	s0, [r4, #4]
 8015d50:	4240      	negs	r0, r0
 8015d52:	e792      	b.n	8015c7a <__ieee754_rem_pio2f+0x5a>
 8015d54:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015d58:	15eb      	asrs	r3, r5, #23
 8015d5a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8015d5e:	2d08      	cmp	r5, #8
 8015d60:	dde3      	ble.n	8015d2a <__ieee754_rem_pio2f+0x10a>
 8015d62:	eddf 7a44 	vldr	s15, [pc, #272]	; 8015e74 <__ieee754_rem_pio2f+0x254>
 8015d66:	eddf 5a44 	vldr	s11, [pc, #272]	; 8015e78 <__ieee754_rem_pio2f+0x258>
 8015d6a:	eef0 6a40 	vmov.f32	s13, s0
 8015d6e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015d72:	ee30 0a66 	vsub.f32	s0, s0, s13
 8015d76:	eea6 0a27 	vfma.f32	s0, s12, s15
 8015d7a:	eef0 7a40 	vmov.f32	s15, s0
 8015d7e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8015d82:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8015d86:	ee15 2a90 	vmov	r2, s11
 8015d8a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015d8e:	1a5b      	subs	r3, r3, r1
 8015d90:	2b19      	cmp	r3, #25
 8015d92:	dc04      	bgt.n	8015d9e <__ieee754_rem_pio2f+0x17e>
 8015d94:	edc4 5a00 	vstr	s11, [r4]
 8015d98:	eeb0 0a66 	vmov.f32	s0, s13
 8015d9c:	e7c6      	b.n	8015d2c <__ieee754_rem_pio2f+0x10c>
 8015d9e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8015e88 <__ieee754_rem_pio2f+0x268>
 8015da2:	eeb0 0a66 	vmov.f32	s0, s13
 8015da6:	eea6 0a25 	vfma.f32	s0, s12, s11
 8015daa:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8015dae:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015e8c <__ieee754_rem_pio2f+0x26c>
 8015db2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015db6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8015dba:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015dbe:	ed84 7a00 	vstr	s14, [r4]
 8015dc2:	e7b3      	b.n	8015d2c <__ieee754_rem_pio2f+0x10c>
 8015dc4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8015dc8:	db06      	blt.n	8015dd8 <__ieee754_rem_pio2f+0x1b8>
 8015dca:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015dce:	edc0 7a01 	vstr	s15, [r0, #4]
 8015dd2:	edc0 7a00 	vstr	s15, [r0]
 8015dd6:	e733      	b.n	8015c40 <__ieee754_rem_pio2f+0x20>
 8015dd8:	15ea      	asrs	r2, r5, #23
 8015dda:	3a86      	subs	r2, #134	; 0x86
 8015ddc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8015de0:	ee07 3a90 	vmov	s15, r3
 8015de4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015de8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8015e90 <__ieee754_rem_pio2f+0x270>
 8015dec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015df0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015df4:	ed8d 7a03 	vstr	s14, [sp, #12]
 8015df8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015dfc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015e00:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015e04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015e08:	ed8d 7a04 	vstr	s14, [sp, #16]
 8015e0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015e10:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e18:	edcd 7a05 	vstr	s15, [sp, #20]
 8015e1c:	d11e      	bne.n	8015e5c <__ieee754_rem_pio2f+0x23c>
 8015e1e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8015e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e26:	bf14      	ite	ne
 8015e28:	2302      	movne	r3, #2
 8015e2a:	2301      	moveq	r3, #1
 8015e2c:	4919      	ldr	r1, [pc, #100]	; (8015e94 <__ieee754_rem_pio2f+0x274>)
 8015e2e:	9101      	str	r1, [sp, #4]
 8015e30:	2102      	movs	r1, #2
 8015e32:	9100      	str	r1, [sp, #0]
 8015e34:	a803      	add	r0, sp, #12
 8015e36:	4621      	mov	r1, r4
 8015e38:	f000 fbde 	bl	80165f8 <__kernel_rem_pio2f>
 8015e3c:	2e00      	cmp	r6, #0
 8015e3e:	f6bf af1c 	bge.w	8015c7a <__ieee754_rem_pio2f+0x5a>
 8015e42:	edd4 7a00 	vldr	s15, [r4]
 8015e46:	eef1 7a67 	vneg.f32	s15, s15
 8015e4a:	edc4 7a00 	vstr	s15, [r4]
 8015e4e:	edd4 7a01 	vldr	s15, [r4, #4]
 8015e52:	eef1 7a67 	vneg.f32	s15, s15
 8015e56:	edc4 7a01 	vstr	s15, [r4, #4]
 8015e5a:	e779      	b.n	8015d50 <__ieee754_rem_pio2f+0x130>
 8015e5c:	2303      	movs	r3, #3
 8015e5e:	e7e5      	b.n	8015e2c <__ieee754_rem_pio2f+0x20c>
 8015e60:	3f490fd8 	.word	0x3f490fd8
 8015e64:	4016cbe3 	.word	0x4016cbe3
 8015e68:	3fc90f80 	.word	0x3fc90f80
 8015e6c:	3fc90fd0 	.word	0x3fc90fd0
 8015e70:	37354443 	.word	0x37354443
 8015e74:	37354400 	.word	0x37354400
 8015e78:	2e85a308 	.word	0x2e85a308
 8015e7c:	43490f80 	.word	0x43490f80
 8015e80:	3f22f984 	.word	0x3f22f984
 8015e84:	0802f3c0 	.word	0x0802f3c0
 8015e88:	2e85a300 	.word	0x2e85a300
 8015e8c:	248d3132 	.word	0x248d3132
 8015e90:	43800000 	.word	0x43800000
 8015e94:	0802f440 	.word	0x0802f440

08015e98 <__kernel_rem_pio2>:
 8015e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e9c:	ed2d 8b06 	vpush	{d8-d10}
 8015ea0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8015ea4:	460f      	mov	r7, r1
 8015ea6:	9002      	str	r0, [sp, #8]
 8015ea8:	49c5      	ldr	r1, [pc, #788]	; (80161c0 <__kernel_rem_pio2+0x328>)
 8015eaa:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8015eac:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8015eb0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8015eb4:	9301      	str	r3, [sp, #4]
 8015eb6:	f112 0f14 	cmn.w	r2, #20
 8015eba:	bfa8      	it	ge
 8015ebc:	2018      	movge	r0, #24
 8015ebe:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8015ec2:	bfb8      	it	lt
 8015ec4:	2000      	movlt	r0, #0
 8015ec6:	f06f 0417 	mvn.w	r4, #23
 8015eca:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80161a8 <__kernel_rem_pio2+0x310>
 8015ece:	bfa4      	itt	ge
 8015ed0:	f1a2 0a03 	subge.w	sl, r2, #3
 8015ed4:	fb9a f0f0 	sdivge	r0, sl, r0
 8015ed8:	fb00 4404 	mla	r4, r0, r4, r4
 8015edc:	1a46      	subs	r6, r0, r1
 8015ede:	4414      	add	r4, r2
 8015ee0:	eb09 0c01 	add.w	ip, r9, r1
 8015ee4:	ad1a      	add	r5, sp, #104	; 0x68
 8015ee6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8015eea:	2200      	movs	r2, #0
 8015eec:	4562      	cmp	r2, ip
 8015eee:	dd10      	ble.n	8015f12 <__kernel_rem_pio2+0x7a>
 8015ef0:	9a01      	ldr	r2, [sp, #4]
 8015ef2:	ab1a      	add	r3, sp, #104	; 0x68
 8015ef4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8015ef8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8015efc:	f04f 0c00 	mov.w	ip, #0
 8015f00:	45cc      	cmp	ip, r9
 8015f02:	dc26      	bgt.n	8015f52 <__kernel_rem_pio2+0xba>
 8015f04:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80161a8 <__kernel_rem_pio2+0x310>
 8015f08:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015f0c:	4616      	mov	r6, r2
 8015f0e:	2500      	movs	r5, #0
 8015f10:	e015      	b.n	8015f3e <__kernel_rem_pio2+0xa6>
 8015f12:	42d6      	cmn	r6, r2
 8015f14:	d409      	bmi.n	8015f2a <__kernel_rem_pio2+0x92>
 8015f16:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8015f1a:	ee07 3a90 	vmov	s15, r3
 8015f1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015f22:	eca5 7b02 	vstmia	r5!, {d7}
 8015f26:	3201      	adds	r2, #1
 8015f28:	e7e0      	b.n	8015eec <__kernel_rem_pio2+0x54>
 8015f2a:	eeb0 7b46 	vmov.f64	d7, d6
 8015f2e:	e7f8      	b.n	8015f22 <__kernel_rem_pio2+0x8a>
 8015f30:	ecb8 5b02 	vldmia	r8!, {d5}
 8015f34:	ed96 6b00 	vldr	d6, [r6]
 8015f38:	3501      	adds	r5, #1
 8015f3a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015f3e:	428d      	cmp	r5, r1
 8015f40:	f1a6 0608 	sub.w	r6, r6, #8
 8015f44:	ddf4      	ble.n	8015f30 <__kernel_rem_pio2+0x98>
 8015f46:	ecaa 7b02 	vstmia	sl!, {d7}
 8015f4a:	f10c 0c01 	add.w	ip, ip, #1
 8015f4e:	3208      	adds	r2, #8
 8015f50:	e7d6      	b.n	8015f00 <__kernel_rem_pio2+0x68>
 8015f52:	ab06      	add	r3, sp, #24
 8015f54:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80161b0 <__kernel_rem_pio2+0x318>
 8015f58:	ed9f ab97 	vldr	d10, [pc, #604]	; 80161b8 <__kernel_rem_pio2+0x320>
 8015f5c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8015f60:	9303      	str	r3, [sp, #12]
 8015f62:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8015f66:	464d      	mov	r5, r9
 8015f68:	00eb      	lsls	r3, r5, #3
 8015f6a:	9304      	str	r3, [sp, #16]
 8015f6c:	ab92      	add	r3, sp, #584	; 0x248
 8015f6e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8015f72:	f10d 0b18 	add.w	fp, sp, #24
 8015f76:	ab6a      	add	r3, sp, #424	; 0x1a8
 8015f78:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8015f7c:	465e      	mov	r6, fp
 8015f7e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8015f82:	4628      	mov	r0, r5
 8015f84:	2800      	cmp	r0, #0
 8015f86:	f1a2 0208 	sub.w	r2, r2, #8
 8015f8a:	dc4c      	bgt.n	8016026 <__kernel_rem_pio2+0x18e>
 8015f8c:	4620      	mov	r0, r4
 8015f8e:	9105      	str	r1, [sp, #20]
 8015f90:	f000 ff06 	bl	8016da0 <scalbn>
 8015f94:	eeb0 8b40 	vmov.f64	d8, d0
 8015f98:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8015f9c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8015fa0:	f000 fe8a 	bl	8016cb8 <floor>
 8015fa4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8015fa8:	eea0 8b47 	vfms.f64	d8, d0, d7
 8015fac:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8015fb0:	2c00      	cmp	r4, #0
 8015fb2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8015fb6:	ee17 8a90 	vmov	r8, s15
 8015fba:	ee38 8b40 	vsub.f64	d8, d8, d0
 8015fbe:	9905      	ldr	r1, [sp, #20]
 8015fc0:	dd43      	ble.n	801604a <__kernel_rem_pio2+0x1b2>
 8015fc2:	1e68      	subs	r0, r5, #1
 8015fc4:	ab06      	add	r3, sp, #24
 8015fc6:	f1c4 0c18 	rsb	ip, r4, #24
 8015fca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8015fce:	fa46 f20c 	asr.w	r2, r6, ip
 8015fd2:	4490      	add	r8, r2
 8015fd4:	fa02 f20c 	lsl.w	r2, r2, ip
 8015fd8:	1ab6      	subs	r6, r6, r2
 8015fda:	f1c4 0217 	rsb	r2, r4, #23
 8015fde:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8015fe2:	4116      	asrs	r6, r2
 8015fe4:	2e00      	cmp	r6, #0
 8015fe6:	dd3f      	ble.n	8016068 <__kernel_rem_pio2+0x1d0>
 8015fe8:	f04f 0c00 	mov.w	ip, #0
 8015fec:	f108 0801 	add.w	r8, r8, #1
 8015ff0:	4660      	mov	r0, ip
 8015ff2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8015ff6:	4565      	cmp	r5, ip
 8015ff8:	dc6e      	bgt.n	80160d8 <__kernel_rem_pio2+0x240>
 8015ffa:	2c00      	cmp	r4, #0
 8015ffc:	dd04      	ble.n	8016008 <__kernel_rem_pio2+0x170>
 8015ffe:	2c01      	cmp	r4, #1
 8016000:	d07f      	beq.n	8016102 <__kernel_rem_pio2+0x26a>
 8016002:	2c02      	cmp	r4, #2
 8016004:	f000 8087 	beq.w	8016116 <__kernel_rem_pio2+0x27e>
 8016008:	2e02      	cmp	r6, #2
 801600a:	d12d      	bne.n	8016068 <__kernel_rem_pio2+0x1d0>
 801600c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016010:	ee30 8b48 	vsub.f64	d8, d0, d8
 8016014:	b340      	cbz	r0, 8016068 <__kernel_rem_pio2+0x1d0>
 8016016:	4620      	mov	r0, r4
 8016018:	9105      	str	r1, [sp, #20]
 801601a:	f000 fec1 	bl	8016da0 <scalbn>
 801601e:	9905      	ldr	r1, [sp, #20]
 8016020:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016024:	e020      	b.n	8016068 <__kernel_rem_pio2+0x1d0>
 8016026:	ee20 7b09 	vmul.f64	d7, d0, d9
 801602a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801602e:	3801      	subs	r0, #1
 8016030:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8016034:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8016038:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801603c:	eca6 0a01 	vstmia	r6!, {s0}
 8016040:	ed92 0b00 	vldr	d0, [r2]
 8016044:	ee37 0b00 	vadd.f64	d0, d7, d0
 8016048:	e79c      	b.n	8015f84 <__kernel_rem_pio2+0xec>
 801604a:	d105      	bne.n	8016058 <__kernel_rem_pio2+0x1c0>
 801604c:	1e6a      	subs	r2, r5, #1
 801604e:	ab06      	add	r3, sp, #24
 8016050:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8016054:	15f6      	asrs	r6, r6, #23
 8016056:	e7c5      	b.n	8015fe4 <__kernel_rem_pio2+0x14c>
 8016058:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801605c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016064:	da36      	bge.n	80160d4 <__kernel_rem_pio2+0x23c>
 8016066:	2600      	movs	r6, #0
 8016068:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801606c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016070:	f040 80aa 	bne.w	80161c8 <__kernel_rem_pio2+0x330>
 8016074:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8016078:	4658      	mov	r0, fp
 801607a:	2200      	movs	r2, #0
 801607c:	4548      	cmp	r0, r9
 801607e:	da52      	bge.n	8016126 <__kernel_rem_pio2+0x28e>
 8016080:	2a00      	cmp	r2, #0
 8016082:	f000 8081 	beq.w	8016188 <__kernel_rem_pio2+0x2f0>
 8016086:	ab06      	add	r3, sp, #24
 8016088:	3c18      	subs	r4, #24
 801608a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801608e:	2b00      	cmp	r3, #0
 8016090:	f000 8087 	beq.w	80161a2 <__kernel_rem_pio2+0x30a>
 8016094:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016098:	4620      	mov	r0, r4
 801609a:	f000 fe81 	bl	8016da0 <scalbn>
 801609e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80160a2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80161b0 <__kernel_rem_pio2+0x318>
 80160a6:	a96a      	add	r1, sp, #424	; 0x1a8
 80160a8:	f103 0208 	add.w	r2, r3, #8
 80160ac:	1888      	adds	r0, r1, r2
 80160ae:	4659      	mov	r1, fp
 80160b0:	2900      	cmp	r1, #0
 80160b2:	f280 80b7 	bge.w	8016224 <__kernel_rem_pio2+0x38c>
 80160b6:	4659      	mov	r1, fp
 80160b8:	2900      	cmp	r1, #0
 80160ba:	f2c0 80d5 	blt.w	8016268 <__kernel_rem_pio2+0x3d0>
 80160be:	a86a      	add	r0, sp, #424	; 0x1a8
 80160c0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80160c4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80161a8 <__kernel_rem_pio2+0x310>
 80160c8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80161c4 <__kernel_rem_pio2+0x32c>
 80160cc:	2400      	movs	r4, #0
 80160ce:	ebab 0001 	sub.w	r0, fp, r1
 80160d2:	e0be      	b.n	8016252 <__kernel_rem_pio2+0x3ba>
 80160d4:	2602      	movs	r6, #2
 80160d6:	e787      	b.n	8015fe8 <__kernel_rem_pio2+0x150>
 80160d8:	f8db 2000 	ldr.w	r2, [fp]
 80160dc:	b958      	cbnz	r0, 80160f6 <__kernel_rem_pio2+0x25e>
 80160de:	b122      	cbz	r2, 80160ea <__kernel_rem_pio2+0x252>
 80160e0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80160e4:	f8cb 2000 	str.w	r2, [fp]
 80160e8:	2201      	movs	r2, #1
 80160ea:	f10c 0c01 	add.w	ip, ip, #1
 80160ee:	f10b 0b04 	add.w	fp, fp, #4
 80160f2:	4610      	mov	r0, r2
 80160f4:	e77f      	b.n	8015ff6 <__kernel_rem_pio2+0x15e>
 80160f6:	ebae 0202 	sub.w	r2, lr, r2
 80160fa:	f8cb 2000 	str.w	r2, [fp]
 80160fe:	4602      	mov	r2, r0
 8016100:	e7f3      	b.n	80160ea <__kernel_rem_pio2+0x252>
 8016102:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8016106:	ab06      	add	r3, sp, #24
 8016108:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801610c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8016110:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8016114:	e778      	b.n	8016008 <__kernel_rem_pio2+0x170>
 8016116:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801611a:	ab06      	add	r3, sp, #24
 801611c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8016120:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8016124:	e7f4      	b.n	8016110 <__kernel_rem_pio2+0x278>
 8016126:	ab06      	add	r3, sp, #24
 8016128:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801612c:	3801      	subs	r0, #1
 801612e:	431a      	orrs	r2, r3
 8016130:	e7a4      	b.n	801607c <__kernel_rem_pio2+0x1e4>
 8016132:	f10c 0c01 	add.w	ip, ip, #1
 8016136:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801613a:	2800      	cmp	r0, #0
 801613c:	d0f9      	beq.n	8016132 <__kernel_rem_pio2+0x29a>
 801613e:	9b04      	ldr	r3, [sp, #16]
 8016140:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8016144:	eb0d 0203 	add.w	r2, sp, r3
 8016148:	9b01      	ldr	r3, [sp, #4]
 801614a:	18e8      	adds	r0, r5, r3
 801614c:	ab1a      	add	r3, sp, #104	; 0x68
 801614e:	1c6e      	adds	r6, r5, #1
 8016150:	3a98      	subs	r2, #152	; 0x98
 8016152:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8016156:	4465      	add	r5, ip
 8016158:	42b5      	cmp	r5, r6
 801615a:	f6ff af05 	blt.w	8015f68 <__kernel_rem_pio2+0xd0>
 801615e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8016162:	f8dd e008 	ldr.w	lr, [sp, #8]
 8016166:	ee07 3a90 	vmov	s15, r3
 801616a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801616e:	f04f 0c00 	mov.w	ip, #0
 8016172:	eca0 7b02 	vstmia	r0!, {d7}
 8016176:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80161a8 <__kernel_rem_pio2+0x310>
 801617a:	4680      	mov	r8, r0
 801617c:	458c      	cmp	ip, r1
 801617e:	dd07      	ble.n	8016190 <__kernel_rem_pio2+0x2f8>
 8016180:	eca2 7b02 	vstmia	r2!, {d7}
 8016184:	3601      	adds	r6, #1
 8016186:	e7e7      	b.n	8016158 <__kernel_rem_pio2+0x2c0>
 8016188:	9a03      	ldr	r2, [sp, #12]
 801618a:	f04f 0c01 	mov.w	ip, #1
 801618e:	e7d2      	b.n	8016136 <__kernel_rem_pio2+0x29e>
 8016190:	ecbe 5b02 	vldmia	lr!, {d5}
 8016194:	ed38 6b02 	vldmdb	r8!, {d6}
 8016198:	f10c 0c01 	add.w	ip, ip, #1
 801619c:	eea5 7b06 	vfma.f64	d7, d5, d6
 80161a0:	e7ec      	b.n	801617c <__kernel_rem_pio2+0x2e4>
 80161a2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80161a6:	e76e      	b.n	8016086 <__kernel_rem_pio2+0x1ee>
	...
 80161b4:	3e700000 	.word	0x3e700000
 80161b8:	00000000 	.word	0x00000000
 80161bc:	41700000 	.word	0x41700000
 80161c0:	0802f798 	.word	0x0802f798
 80161c4:	0802f758 	.word	0x0802f758
 80161c8:	4260      	negs	r0, r4
 80161ca:	eeb0 0b48 	vmov.f64	d0, d8
 80161ce:	f000 fde7 	bl	8016da0 <scalbn>
 80161d2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80163b0 <__kernel_rem_pio2+0x518>
 80161d6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80161da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161de:	db18      	blt.n	8016212 <__kernel_rem_pio2+0x37a>
 80161e0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80163b8 <__kernel_rem_pio2+0x520>
 80161e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80161e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80161ec:	aa06      	add	r2, sp, #24
 80161ee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80161f2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80161f6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80161fa:	f105 0b01 	add.w	fp, r5, #1
 80161fe:	ee10 3a10 	vmov	r3, s0
 8016202:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8016206:	ee17 3a10 	vmov	r3, s14
 801620a:	3418      	adds	r4, #24
 801620c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8016210:	e740      	b.n	8016094 <__kernel_rem_pio2+0x1fc>
 8016212:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016216:	aa06      	add	r2, sp, #24
 8016218:	ee10 3a10 	vmov	r3, s0
 801621c:	46ab      	mov	fp, r5
 801621e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8016222:	e737      	b.n	8016094 <__kernel_rem_pio2+0x1fc>
 8016224:	ac06      	add	r4, sp, #24
 8016226:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801622a:	9401      	str	r4, [sp, #4]
 801622c:	ee07 4a90 	vmov	s15, r4
 8016230:	3901      	subs	r1, #1
 8016232:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016236:	ee27 7b00 	vmul.f64	d7, d7, d0
 801623a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801623e:	ed20 7b02 	vstmdb	r0!, {d7}
 8016242:	e735      	b.n	80160b0 <__kernel_rem_pio2+0x218>
 8016244:	ecbc 5b02 	vldmia	ip!, {d5}
 8016248:	ecb5 6b02 	vldmia	r5!, {d6}
 801624c:	3401      	adds	r4, #1
 801624e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016252:	454c      	cmp	r4, r9
 8016254:	dc01      	bgt.n	801625a <__kernel_rem_pio2+0x3c2>
 8016256:	4284      	cmp	r4, r0
 8016258:	ddf4      	ble.n	8016244 <__kernel_rem_pio2+0x3ac>
 801625a:	ac42      	add	r4, sp, #264	; 0x108
 801625c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8016260:	ed80 7b00 	vstr	d7, [r0]
 8016264:	3901      	subs	r1, #1
 8016266:	e727      	b.n	80160b8 <__kernel_rem_pio2+0x220>
 8016268:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801626a:	2902      	cmp	r1, #2
 801626c:	dc0a      	bgt.n	8016284 <__kernel_rem_pio2+0x3ec>
 801626e:	2900      	cmp	r1, #0
 8016270:	dc2c      	bgt.n	80162cc <__kernel_rem_pio2+0x434>
 8016272:	d045      	beq.n	8016300 <__kernel_rem_pio2+0x468>
 8016274:	f008 0007 	and.w	r0, r8, #7
 8016278:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801627c:	ecbd 8b06 	vpop	{d8-d10}
 8016280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016284:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8016286:	2a03      	cmp	r2, #3
 8016288:	d1f4      	bne.n	8016274 <__kernel_rem_pio2+0x3dc>
 801628a:	aa42      	add	r2, sp, #264	; 0x108
 801628c:	4413      	add	r3, r2
 801628e:	461a      	mov	r2, r3
 8016290:	4619      	mov	r1, r3
 8016292:	4658      	mov	r0, fp
 8016294:	2800      	cmp	r0, #0
 8016296:	f1a1 0108 	sub.w	r1, r1, #8
 801629a:	dc54      	bgt.n	8016346 <__kernel_rem_pio2+0x4ae>
 801629c:	4659      	mov	r1, fp
 801629e:	2901      	cmp	r1, #1
 80162a0:	f1a2 0208 	sub.w	r2, r2, #8
 80162a4:	dc5f      	bgt.n	8016366 <__kernel_rem_pio2+0x4ce>
 80162a6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80163c0 <__kernel_rem_pio2+0x528>
 80162aa:	3308      	adds	r3, #8
 80162ac:	f1bb 0f01 	cmp.w	fp, #1
 80162b0:	dc69      	bgt.n	8016386 <__kernel_rem_pio2+0x4ee>
 80162b2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80162b6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80162ba:	2e00      	cmp	r6, #0
 80162bc:	d16a      	bne.n	8016394 <__kernel_rem_pio2+0x4fc>
 80162be:	ed87 5b00 	vstr	d5, [r7]
 80162c2:	ed87 6b02 	vstr	d6, [r7, #8]
 80162c6:	ed87 7b04 	vstr	d7, [r7, #16]
 80162ca:	e7d3      	b.n	8016274 <__kernel_rem_pio2+0x3dc>
 80162cc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80163c0 <__kernel_rem_pio2+0x528>
 80162d0:	ab42      	add	r3, sp, #264	; 0x108
 80162d2:	441a      	add	r2, r3
 80162d4:	465b      	mov	r3, fp
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	da26      	bge.n	8016328 <__kernel_rem_pio2+0x490>
 80162da:	b35e      	cbz	r6, 8016334 <__kernel_rem_pio2+0x49c>
 80162dc:	eeb1 7b46 	vneg.f64	d7, d6
 80162e0:	ed87 7b00 	vstr	d7, [r7]
 80162e4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80162e8:	aa44      	add	r2, sp, #272	; 0x110
 80162ea:	2301      	movs	r3, #1
 80162ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80162f0:	459b      	cmp	fp, r3
 80162f2:	da22      	bge.n	801633a <__kernel_rem_pio2+0x4a2>
 80162f4:	b10e      	cbz	r6, 80162fa <__kernel_rem_pio2+0x462>
 80162f6:	eeb1 7b47 	vneg.f64	d7, d7
 80162fa:	ed87 7b02 	vstr	d7, [r7, #8]
 80162fe:	e7b9      	b.n	8016274 <__kernel_rem_pio2+0x3dc>
 8016300:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80163c0 <__kernel_rem_pio2+0x528>
 8016304:	ab42      	add	r3, sp, #264	; 0x108
 8016306:	441a      	add	r2, r3
 8016308:	f1bb 0f00 	cmp.w	fp, #0
 801630c:	da05      	bge.n	801631a <__kernel_rem_pio2+0x482>
 801630e:	b10e      	cbz	r6, 8016314 <__kernel_rem_pio2+0x47c>
 8016310:	eeb1 7b47 	vneg.f64	d7, d7
 8016314:	ed87 7b00 	vstr	d7, [r7]
 8016318:	e7ac      	b.n	8016274 <__kernel_rem_pio2+0x3dc>
 801631a:	ed32 6b02 	vldmdb	r2!, {d6}
 801631e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8016322:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016326:	e7ef      	b.n	8016308 <__kernel_rem_pio2+0x470>
 8016328:	ed32 7b02 	vldmdb	r2!, {d7}
 801632c:	3b01      	subs	r3, #1
 801632e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016332:	e7d0      	b.n	80162d6 <__kernel_rem_pio2+0x43e>
 8016334:	eeb0 7b46 	vmov.f64	d7, d6
 8016338:	e7d2      	b.n	80162e0 <__kernel_rem_pio2+0x448>
 801633a:	ecb2 6b02 	vldmia	r2!, {d6}
 801633e:	3301      	adds	r3, #1
 8016340:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016344:	e7d4      	b.n	80162f0 <__kernel_rem_pio2+0x458>
 8016346:	ed91 7b00 	vldr	d7, [r1]
 801634a:	ed91 5b02 	vldr	d5, [r1, #8]
 801634e:	3801      	subs	r0, #1
 8016350:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016354:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016358:	ed81 6b00 	vstr	d6, [r1]
 801635c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016360:	ed81 7b02 	vstr	d7, [r1, #8]
 8016364:	e796      	b.n	8016294 <__kernel_rem_pio2+0x3fc>
 8016366:	ed92 7b00 	vldr	d7, [r2]
 801636a:	ed92 5b02 	vldr	d5, [r2, #8]
 801636e:	3901      	subs	r1, #1
 8016370:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016374:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016378:	ed82 6b00 	vstr	d6, [r2]
 801637c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016380:	ed82 7b02 	vstr	d7, [r2, #8]
 8016384:	e78b      	b.n	801629e <__kernel_rem_pio2+0x406>
 8016386:	ed33 6b02 	vldmdb	r3!, {d6}
 801638a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801638e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016392:	e78b      	b.n	80162ac <__kernel_rem_pio2+0x414>
 8016394:	eeb1 5b45 	vneg.f64	d5, d5
 8016398:	eeb1 6b46 	vneg.f64	d6, d6
 801639c:	ed87 5b00 	vstr	d5, [r7]
 80163a0:	eeb1 7b47 	vneg.f64	d7, d7
 80163a4:	ed87 6b02 	vstr	d6, [r7, #8]
 80163a8:	e78d      	b.n	80162c6 <__kernel_rem_pio2+0x42e>
 80163aa:	bf00      	nop
 80163ac:	f3af 8000 	nop.w
 80163b0:	00000000 	.word	0x00000000
 80163b4:	41700000 	.word	0x41700000
 80163b8:	00000000 	.word	0x00000000
 80163bc:	3e700000 	.word	0x3e700000
	...

080163c8 <__kernel_tan>:
 80163c8:	eeb0 7b40 	vmov.f64	d7, d0
 80163cc:	ee17 3a90 	vmov	r3, s15
 80163d0:	4987      	ldr	r1, [pc, #540]	; (80165f0 <__kernel_tan+0x228>)
 80163d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80163d6:	428a      	cmp	r2, r1
 80163d8:	b510      	push	{r4, lr}
 80163da:	dc33      	bgt.n	8016444 <__kernel_tan+0x7c>
 80163dc:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80163e0:	ee16 1a90 	vmov	r1, s13
 80163e4:	2900      	cmp	r1, #0
 80163e6:	d143      	bne.n	8016470 <__kernel_tan+0xa8>
 80163e8:	ee10 4a10 	vmov	r4, s0
 80163ec:	1c43      	adds	r3, r0, #1
 80163ee:	4323      	orrs	r3, r4
 80163f0:	4313      	orrs	r3, r2
 80163f2:	d108      	bne.n	8016406 <__kernel_tan+0x3e>
 80163f4:	f000 fc56 	bl	8016ca4 <fabs>
 80163f8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80163fc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016400:	eeb0 0b47 	vmov.f64	d0, d7
 8016404:	bd10      	pop	{r4, pc}
 8016406:	2801      	cmp	r0, #1
 8016408:	d0fa      	beq.n	8016400 <__kernel_tan+0x38>
 801640a:	ee30 6b01 	vadd.f64	d6, d0, d1
 801640e:	ec53 2b16 	vmov	r2, r3, d6
 8016412:	460a      	mov	r2, r1
 8016414:	ec43 2b15 	vmov	d5, r2, r3
 8016418:	ee35 7b40 	vsub.f64	d7, d5, d0
 801641c:	ee31 1b47 	vsub.f64	d1, d1, d7
 8016420:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8016424:	ee87 4b06 	vdiv.f64	d4, d7, d6
 8016428:	ec53 2b14 	vmov	r2, r3, d4
 801642c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016430:	460a      	mov	r2, r1
 8016432:	ec43 2b17 	vmov	d7, r2, r3
 8016436:	eea5 6b07 	vfma.f64	d6, d5, d7
 801643a:	eea1 6b07 	vfma.f64	d6, d1, d7
 801643e:	eea6 7b04 	vfma.f64	d7, d6, d4
 8016442:	e7dd      	b.n	8016400 <__kernel_tan+0x38>
 8016444:	496b      	ldr	r1, [pc, #428]	; (80165f4 <__kernel_tan+0x22c>)
 8016446:	428a      	cmp	r2, r1
 8016448:	dd12      	ble.n	8016470 <__kernel_tan+0xa8>
 801644a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8016570 <__kernel_tan+0x1a8>
 801644e:	2b00      	cmp	r3, #0
 8016450:	bfb8      	it	lt
 8016452:	eeb1 7b40 	vneglt.f64	d7, d0
 8016456:	ee36 7b47 	vsub.f64	d7, d6, d7
 801645a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8016578 <__kernel_tan+0x1b0>
 801645e:	bfb8      	it	lt
 8016460:	eeb1 1b41 	vneglt.f64	d1, d1
 8016464:	ee36 1b41 	vsub.f64	d1, d6, d1
 8016468:	ee31 7b07 	vadd.f64	d7, d1, d7
 801646c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8016580 <__kernel_tan+0x1b8>
 8016470:	ee27 5b07 	vmul.f64	d5, d7, d7
 8016474:	ee25 6b05 	vmul.f64	d6, d5, d5
 8016478:	ed9f 3b43 	vldr	d3, [pc, #268]	; 8016588 <__kernel_tan+0x1c0>
 801647c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8016590 <__kernel_tan+0x1c8>
 8016480:	eea6 4b03 	vfma.f64	d4, d6, d3
 8016484:	ed9f 3b44 	vldr	d3, [pc, #272]	; 8016598 <__kernel_tan+0x1d0>
 8016488:	eea4 3b06 	vfma.f64	d3, d4, d6
 801648c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 80165a0 <__kernel_tan+0x1d8>
 8016490:	eea3 4b06 	vfma.f64	d4, d3, d6
 8016494:	ed9f 3b44 	vldr	d3, [pc, #272]	; 80165a8 <__kernel_tan+0x1e0>
 8016498:	eea4 3b06 	vfma.f64	d3, d4, d6
 801649c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 80165b0 <__kernel_tan+0x1e8>
 80164a0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 80165b8 <__kernel_tan+0x1f0>
 80164a4:	eea3 4b06 	vfma.f64	d4, d3, d6
 80164a8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 80165c0 <__kernel_tan+0x1f8>
 80164ac:	eea6 3b02 	vfma.f64	d3, d6, d2
 80164b0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 80165c8 <__kernel_tan+0x200>
 80164b4:	eea3 2b06 	vfma.f64	d2, d3, d6
 80164b8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 80165d0 <__kernel_tan+0x208>
 80164bc:	eea2 3b06 	vfma.f64	d3, d2, d6
 80164c0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 80165d8 <__kernel_tan+0x210>
 80164c4:	eea3 2b06 	vfma.f64	d2, d3, d6
 80164c8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 80165e0 <__kernel_tan+0x218>
 80164cc:	4949      	ldr	r1, [pc, #292]	; (80165f4 <__kernel_tan+0x22c>)
 80164ce:	eea2 3b06 	vfma.f64	d3, d2, d6
 80164d2:	ee27 2b05 	vmul.f64	d2, d7, d5
 80164d6:	eeb0 6b44 	vmov.f64	d6, d4
 80164da:	eeb0 4b41 	vmov.f64	d4, d1
 80164de:	eea3 6b05 	vfma.f64	d6, d3, d5
 80164e2:	eea6 4b02 	vfma.f64	d4, d6, d2
 80164e6:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80165e8 <__kernel_tan+0x220>
 80164ea:	eea4 1b05 	vfma.f64	d1, d4, d5
 80164ee:	428a      	cmp	r2, r1
 80164f0:	eea2 1b06 	vfma.f64	d1, d2, d6
 80164f4:	ee37 5b01 	vadd.f64	d5, d7, d1
 80164f8:	dd1d      	ble.n	8016536 <__kernel_tan+0x16e>
 80164fa:	ee25 3b05 	vmul.f64	d3, d5, d5
 80164fe:	179b      	asrs	r3, r3, #30
 8016500:	ee06 0a90 	vmov	s13, r0
 8016504:	f003 0302 	and.w	r3, r3, #2
 8016508:	f1c3 0301 	rsb	r3, r3, #1
 801650c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016510:	ee35 5b06 	vadd.f64	d5, d5, d6
 8016514:	ee83 4b05 	vdiv.f64	d4, d3, d5
 8016518:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801651c:	ee34 1b41 	vsub.f64	d1, d4, d1
 8016520:	ee37 7b41 	vsub.f64	d7, d7, d1
 8016524:	eea7 6b45 	vfms.f64	d6, d7, d5
 8016528:	ee07 3a10 	vmov	s14, r3
 801652c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8016530:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016534:	e764      	b.n	8016400 <__kernel_tan+0x38>
 8016536:	2801      	cmp	r0, #1
 8016538:	d016      	beq.n	8016568 <__kernel_tan+0x1a0>
 801653a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801653e:	ec51 0b15 	vmov	r0, r1, d5
 8016542:	2000      	movs	r0, #0
 8016544:	ec41 0b13 	vmov	d3, r0, r1
 8016548:	ee33 7b47 	vsub.f64	d7, d3, d7
 801654c:	ee31 1b47 	vsub.f64	d1, d1, d7
 8016550:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8016554:	ee87 4b05 	vdiv.f64	d4, d7, d5
 8016558:	ec53 2b14 	vmov	r2, r3, d4
 801655c:	4602      	mov	r2, r0
 801655e:	ec43 2b17 	vmov	d7, r2, r3
 8016562:	eea3 6b07 	vfma.f64	d6, d3, d7
 8016566:	e768      	b.n	801643a <__kernel_tan+0x72>
 8016568:	eeb0 7b45 	vmov.f64	d7, d5
 801656c:	e748      	b.n	8016400 <__kernel_tan+0x38>
 801656e:	bf00      	nop
 8016570:	54442d18 	.word	0x54442d18
 8016574:	3fe921fb 	.word	0x3fe921fb
 8016578:	33145c07 	.word	0x33145c07
 801657c:	3c81a626 	.word	0x3c81a626
	...
 8016588:	db605373 	.word	0xdb605373
 801658c:	bef375cb 	.word	0xbef375cb
 8016590:	a03792a6 	.word	0xa03792a6
 8016594:	3f147e88 	.word	0x3f147e88
 8016598:	f2f26501 	.word	0xf2f26501
 801659c:	3f4344d8 	.word	0x3f4344d8
 80165a0:	c9560328 	.word	0xc9560328
 80165a4:	3f6d6d22 	.word	0x3f6d6d22
 80165a8:	8406d637 	.word	0x8406d637
 80165ac:	3f9664f4 	.word	0x3f9664f4
 80165b0:	1110fe7a 	.word	0x1110fe7a
 80165b4:	3fc11111 	.word	0x3fc11111
 80165b8:	74bf7ad4 	.word	0x74bf7ad4
 80165bc:	3efb2a70 	.word	0x3efb2a70
 80165c0:	32f0a7e9 	.word	0x32f0a7e9
 80165c4:	3f12b80f 	.word	0x3f12b80f
 80165c8:	1a8d1068 	.word	0x1a8d1068
 80165cc:	3f3026f7 	.word	0x3f3026f7
 80165d0:	fee08315 	.word	0xfee08315
 80165d4:	3f57dbc8 	.word	0x3f57dbc8
 80165d8:	e96e8493 	.word	0xe96e8493
 80165dc:	3f8226e3 	.word	0x3f8226e3
 80165e0:	1bb341fe 	.word	0x1bb341fe
 80165e4:	3faba1ba 	.word	0x3faba1ba
 80165e8:	55555563 	.word	0x55555563
 80165ec:	3fd55555 	.word	0x3fd55555
 80165f0:	3e2fffff 	.word	0x3e2fffff
 80165f4:	3fe59427 	.word	0x3fe59427

080165f8 <__kernel_rem_pio2f>:
 80165f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165fc:	ed2d 8b04 	vpush	{d8-d9}
 8016600:	b0d9      	sub	sp, #356	; 0x164
 8016602:	4688      	mov	r8, r1
 8016604:	9002      	str	r0, [sp, #8]
 8016606:	49bb      	ldr	r1, [pc, #748]	; (80168f4 <__kernel_rem_pio2f+0x2fc>)
 8016608:	9866      	ldr	r0, [sp, #408]	; 0x198
 801660a:	9301      	str	r3, [sp, #4]
 801660c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8016610:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8016614:	1e59      	subs	r1, r3, #1
 8016616:	1d13      	adds	r3, r2, #4
 8016618:	db27      	blt.n	801666a <__kernel_rem_pio2f+0x72>
 801661a:	f1b2 0b03 	subs.w	fp, r2, #3
 801661e:	bf48      	it	mi
 8016620:	f102 0b04 	addmi.w	fp, r2, #4
 8016624:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8016628:	1c45      	adds	r5, r0, #1
 801662a:	00ec      	lsls	r4, r5, #3
 801662c:	1a47      	subs	r7, r0, r1
 801662e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8016904 <__kernel_rem_pio2f+0x30c>
 8016632:	9403      	str	r4, [sp, #12]
 8016634:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8016638:	eb0a 0c01 	add.w	ip, sl, r1
 801663c:	ae1c      	add	r6, sp, #112	; 0x70
 801663e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8016642:	2400      	movs	r4, #0
 8016644:	4564      	cmp	r4, ip
 8016646:	dd12      	ble.n	801666e <__kernel_rem_pio2f+0x76>
 8016648:	9b01      	ldr	r3, [sp, #4]
 801664a:	ac1c      	add	r4, sp, #112	; 0x70
 801664c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8016650:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8016654:	f04f 0c00 	mov.w	ip, #0
 8016658:	45d4      	cmp	ip, sl
 801665a:	dc27      	bgt.n	80166ac <__kernel_rem_pio2f+0xb4>
 801665c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8016660:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8016904 <__kernel_rem_pio2f+0x30c>
 8016664:	4627      	mov	r7, r4
 8016666:	2600      	movs	r6, #0
 8016668:	e016      	b.n	8016698 <__kernel_rem_pio2f+0xa0>
 801666a:	2000      	movs	r0, #0
 801666c:	e7dc      	b.n	8016628 <__kernel_rem_pio2f+0x30>
 801666e:	42e7      	cmn	r7, r4
 8016670:	bf5d      	ittte	pl
 8016672:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8016676:	ee07 3a90 	vmovpl	s15, r3
 801667a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801667e:	eef0 7a47 	vmovmi.f32	s15, s14
 8016682:	ece6 7a01 	vstmia	r6!, {s15}
 8016686:	3401      	adds	r4, #1
 8016688:	e7dc      	b.n	8016644 <__kernel_rem_pio2f+0x4c>
 801668a:	ecf9 6a01 	vldmia	r9!, {s13}
 801668e:	ed97 7a00 	vldr	s14, [r7]
 8016692:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016696:	3601      	adds	r6, #1
 8016698:	428e      	cmp	r6, r1
 801669a:	f1a7 0704 	sub.w	r7, r7, #4
 801669e:	ddf4      	ble.n	801668a <__kernel_rem_pio2f+0x92>
 80166a0:	eceb 7a01 	vstmia	fp!, {s15}
 80166a4:	f10c 0c01 	add.w	ip, ip, #1
 80166a8:	3404      	adds	r4, #4
 80166aa:	e7d5      	b.n	8016658 <__kernel_rem_pio2f+0x60>
 80166ac:	ab08      	add	r3, sp, #32
 80166ae:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80166b2:	eddf 8a93 	vldr	s17, [pc, #588]	; 8016900 <__kernel_rem_pio2f+0x308>
 80166b6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80168fc <__kernel_rem_pio2f+0x304>
 80166ba:	9304      	str	r3, [sp, #16]
 80166bc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80166c0:	4656      	mov	r6, sl
 80166c2:	00b3      	lsls	r3, r6, #2
 80166c4:	9305      	str	r3, [sp, #20]
 80166c6:	ab58      	add	r3, sp, #352	; 0x160
 80166c8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80166cc:	ac08      	add	r4, sp, #32
 80166ce:	ab44      	add	r3, sp, #272	; 0x110
 80166d0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80166d4:	46a4      	mov	ip, r4
 80166d6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80166da:	4637      	mov	r7, r6
 80166dc:	2f00      	cmp	r7, #0
 80166de:	f1a0 0004 	sub.w	r0, r0, #4
 80166e2:	dc4f      	bgt.n	8016784 <__kernel_rem_pio2f+0x18c>
 80166e4:	4628      	mov	r0, r5
 80166e6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80166ea:	f000 fd3f 	bl	801716c <scalbnf>
 80166ee:	eeb0 8a40 	vmov.f32	s16, s0
 80166f2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80166f6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80166fa:	f000 fcf5 	bl	80170e8 <floorf>
 80166fe:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8016702:	eea0 8a67 	vfms.f32	s16, s0, s15
 8016706:	2d00      	cmp	r5, #0
 8016708:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801670c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8016710:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016714:	ee17 9a90 	vmov	r9, s15
 8016718:	ee38 8a40 	vsub.f32	s16, s16, s0
 801671c:	dd44      	ble.n	80167a8 <__kernel_rem_pio2f+0x1b0>
 801671e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8016722:	ab08      	add	r3, sp, #32
 8016724:	f1c5 0e08 	rsb	lr, r5, #8
 8016728:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801672c:	fa47 f00e 	asr.w	r0, r7, lr
 8016730:	4481      	add	r9, r0
 8016732:	fa00 f00e 	lsl.w	r0, r0, lr
 8016736:	1a3f      	subs	r7, r7, r0
 8016738:	f1c5 0007 	rsb	r0, r5, #7
 801673c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8016740:	4107      	asrs	r7, r0
 8016742:	2f00      	cmp	r7, #0
 8016744:	dd3f      	ble.n	80167c6 <__kernel_rem_pio2f+0x1ce>
 8016746:	f04f 0e00 	mov.w	lr, #0
 801674a:	f109 0901 	add.w	r9, r9, #1
 801674e:	4673      	mov	r3, lr
 8016750:	4576      	cmp	r6, lr
 8016752:	dc6b      	bgt.n	801682c <__kernel_rem_pio2f+0x234>
 8016754:	2d00      	cmp	r5, #0
 8016756:	dd04      	ble.n	8016762 <__kernel_rem_pio2f+0x16a>
 8016758:	2d01      	cmp	r5, #1
 801675a:	d078      	beq.n	801684e <__kernel_rem_pio2f+0x256>
 801675c:	2d02      	cmp	r5, #2
 801675e:	f000 8081 	beq.w	8016864 <__kernel_rem_pio2f+0x26c>
 8016762:	2f02      	cmp	r7, #2
 8016764:	d12f      	bne.n	80167c6 <__kernel_rem_pio2f+0x1ce>
 8016766:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801676a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801676e:	b353      	cbz	r3, 80167c6 <__kernel_rem_pio2f+0x1ce>
 8016770:	4628      	mov	r0, r5
 8016772:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8016776:	f000 fcf9 	bl	801716c <scalbnf>
 801677a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801677e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016782:	e020      	b.n	80167c6 <__kernel_rem_pio2f+0x1ce>
 8016784:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016788:	3f01      	subs	r7, #1
 801678a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801678e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016792:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016796:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801679a:	ecac 0a01 	vstmia	ip!, {s0}
 801679e:	ed90 0a00 	vldr	s0, [r0]
 80167a2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80167a6:	e799      	b.n	80166dc <__kernel_rem_pio2f+0xe4>
 80167a8:	d105      	bne.n	80167b6 <__kernel_rem_pio2f+0x1be>
 80167aa:	1e70      	subs	r0, r6, #1
 80167ac:	ab08      	add	r3, sp, #32
 80167ae:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80167b2:	11ff      	asrs	r7, r7, #7
 80167b4:	e7c5      	b.n	8016742 <__kernel_rem_pio2f+0x14a>
 80167b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80167ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80167be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c2:	da31      	bge.n	8016828 <__kernel_rem_pio2f+0x230>
 80167c4:	2700      	movs	r7, #0
 80167c6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80167ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167ce:	f040 809b 	bne.w	8016908 <__kernel_rem_pio2f+0x310>
 80167d2:	1e74      	subs	r4, r6, #1
 80167d4:	46a4      	mov	ip, r4
 80167d6:	2000      	movs	r0, #0
 80167d8:	45d4      	cmp	ip, sl
 80167da:	da4a      	bge.n	8016872 <__kernel_rem_pio2f+0x27a>
 80167dc:	2800      	cmp	r0, #0
 80167de:	d07a      	beq.n	80168d6 <__kernel_rem_pio2f+0x2de>
 80167e0:	ab08      	add	r3, sp, #32
 80167e2:	3d08      	subs	r5, #8
 80167e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	f000 8081 	beq.w	80168f0 <__kernel_rem_pio2f+0x2f8>
 80167ee:	4628      	mov	r0, r5
 80167f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80167f4:	00a5      	lsls	r5, r4, #2
 80167f6:	f000 fcb9 	bl	801716c <scalbnf>
 80167fa:	aa44      	add	r2, sp, #272	; 0x110
 80167fc:	1d2b      	adds	r3, r5, #4
 80167fe:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8016900 <__kernel_rem_pio2f+0x308>
 8016802:	18d1      	adds	r1, r2, r3
 8016804:	4622      	mov	r2, r4
 8016806:	2a00      	cmp	r2, #0
 8016808:	f280 80ae 	bge.w	8016968 <__kernel_rem_pio2f+0x370>
 801680c:	4622      	mov	r2, r4
 801680e:	2a00      	cmp	r2, #0
 8016810:	f2c0 80cc 	blt.w	80169ac <__kernel_rem_pio2f+0x3b4>
 8016814:	a944      	add	r1, sp, #272	; 0x110
 8016816:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801681a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80168f8 <__kernel_rem_pio2f+0x300>
 801681e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8016904 <__kernel_rem_pio2f+0x30c>
 8016822:	2000      	movs	r0, #0
 8016824:	1aa1      	subs	r1, r4, r2
 8016826:	e0b6      	b.n	8016996 <__kernel_rem_pio2f+0x39e>
 8016828:	2702      	movs	r7, #2
 801682a:	e78c      	b.n	8016746 <__kernel_rem_pio2f+0x14e>
 801682c:	6820      	ldr	r0, [r4, #0]
 801682e:	b94b      	cbnz	r3, 8016844 <__kernel_rem_pio2f+0x24c>
 8016830:	b118      	cbz	r0, 801683a <__kernel_rem_pio2f+0x242>
 8016832:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8016836:	6020      	str	r0, [r4, #0]
 8016838:	2001      	movs	r0, #1
 801683a:	f10e 0e01 	add.w	lr, lr, #1
 801683e:	3404      	adds	r4, #4
 8016840:	4603      	mov	r3, r0
 8016842:	e785      	b.n	8016750 <__kernel_rem_pio2f+0x158>
 8016844:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8016848:	6020      	str	r0, [r4, #0]
 801684a:	4618      	mov	r0, r3
 801684c:	e7f5      	b.n	801683a <__kernel_rem_pio2f+0x242>
 801684e:	1e74      	subs	r4, r6, #1
 8016850:	a808      	add	r0, sp, #32
 8016852:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016856:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801685a:	f10d 0c20 	add.w	ip, sp, #32
 801685e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8016862:	e77e      	b.n	8016762 <__kernel_rem_pio2f+0x16a>
 8016864:	1e74      	subs	r4, r6, #1
 8016866:	a808      	add	r0, sp, #32
 8016868:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801686c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8016870:	e7f3      	b.n	801685a <__kernel_rem_pio2f+0x262>
 8016872:	ab08      	add	r3, sp, #32
 8016874:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016878:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801687c:	4318      	orrs	r0, r3
 801687e:	e7ab      	b.n	80167d8 <__kernel_rem_pio2f+0x1e0>
 8016880:	f10c 0c01 	add.w	ip, ip, #1
 8016884:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8016888:	2c00      	cmp	r4, #0
 801688a:	d0f9      	beq.n	8016880 <__kernel_rem_pio2f+0x288>
 801688c:	9b05      	ldr	r3, [sp, #20]
 801688e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8016892:	eb0d 0003 	add.w	r0, sp, r3
 8016896:	9b01      	ldr	r3, [sp, #4]
 8016898:	18f4      	adds	r4, r6, r3
 801689a:	ab1c      	add	r3, sp, #112	; 0x70
 801689c:	1c77      	adds	r7, r6, #1
 801689e:	384c      	subs	r0, #76	; 0x4c
 80168a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80168a4:	4466      	add	r6, ip
 80168a6:	42be      	cmp	r6, r7
 80168a8:	f6ff af0b 	blt.w	80166c2 <__kernel_rem_pio2f+0xca>
 80168ac:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80168b0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80168b4:	ee07 3a90 	vmov	s15, r3
 80168b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80168bc:	f04f 0c00 	mov.w	ip, #0
 80168c0:	ece4 7a01 	vstmia	r4!, {s15}
 80168c4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8016904 <__kernel_rem_pio2f+0x30c>
 80168c8:	46a1      	mov	r9, r4
 80168ca:	458c      	cmp	ip, r1
 80168cc:	dd07      	ble.n	80168de <__kernel_rem_pio2f+0x2e6>
 80168ce:	ece0 7a01 	vstmia	r0!, {s15}
 80168d2:	3701      	adds	r7, #1
 80168d4:	e7e7      	b.n	80168a6 <__kernel_rem_pio2f+0x2ae>
 80168d6:	9804      	ldr	r0, [sp, #16]
 80168d8:	f04f 0c01 	mov.w	ip, #1
 80168dc:	e7d2      	b.n	8016884 <__kernel_rem_pio2f+0x28c>
 80168de:	ecfe 6a01 	vldmia	lr!, {s13}
 80168e2:	ed39 7a01 	vldmdb	r9!, {s14}
 80168e6:	f10c 0c01 	add.w	ip, ip, #1
 80168ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 80168ee:	e7ec      	b.n	80168ca <__kernel_rem_pio2f+0x2d2>
 80168f0:	3c01      	subs	r4, #1
 80168f2:	e775      	b.n	80167e0 <__kernel_rem_pio2f+0x1e8>
 80168f4:	0802f7d4 	.word	0x0802f7d4
 80168f8:	0802f7a8 	.word	0x0802f7a8
 80168fc:	43800000 	.word	0x43800000
 8016900:	3b800000 	.word	0x3b800000
 8016904:	00000000 	.word	0x00000000
 8016908:	9b03      	ldr	r3, [sp, #12]
 801690a:	eeb0 0a48 	vmov.f32	s0, s16
 801690e:	1a98      	subs	r0, r3, r2
 8016910:	f000 fc2c 	bl	801716c <scalbnf>
 8016914:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80168fc <__kernel_rem_pio2f+0x304>
 8016918:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801691c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016920:	db19      	blt.n	8016956 <__kernel_rem_pio2f+0x35e>
 8016922:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016900 <__kernel_rem_pio2f+0x308>
 8016926:	ee60 7a27 	vmul.f32	s15, s0, s15
 801692a:	aa08      	add	r2, sp, #32
 801692c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016930:	1c74      	adds	r4, r6, #1
 8016932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016936:	3508      	adds	r5, #8
 8016938:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801693c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016940:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016944:	ee10 3a10 	vmov	r3, s0
 8016948:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801694c:	ee17 3a90 	vmov	r3, s15
 8016950:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8016954:	e74b      	b.n	80167ee <__kernel_rem_pio2f+0x1f6>
 8016956:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801695a:	aa08      	add	r2, sp, #32
 801695c:	ee10 3a10 	vmov	r3, s0
 8016960:	4634      	mov	r4, r6
 8016962:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8016966:	e742      	b.n	80167ee <__kernel_rem_pio2f+0x1f6>
 8016968:	a808      	add	r0, sp, #32
 801696a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801696e:	9001      	str	r0, [sp, #4]
 8016970:	ee07 0a90 	vmov	s15, r0
 8016974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016978:	3a01      	subs	r2, #1
 801697a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801697e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016982:	ed61 7a01 	vstmdb	r1!, {s15}
 8016986:	e73e      	b.n	8016806 <__kernel_rem_pio2f+0x20e>
 8016988:	ecfc 6a01 	vldmia	ip!, {s13}
 801698c:	ecb6 7a01 	vldmia	r6!, {s14}
 8016990:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016994:	3001      	adds	r0, #1
 8016996:	4550      	cmp	r0, sl
 8016998:	dc01      	bgt.n	801699e <__kernel_rem_pio2f+0x3a6>
 801699a:	4288      	cmp	r0, r1
 801699c:	ddf4      	ble.n	8016988 <__kernel_rem_pio2f+0x390>
 801699e:	a858      	add	r0, sp, #352	; 0x160
 80169a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80169a4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80169a8:	3a01      	subs	r2, #1
 80169aa:	e730      	b.n	801680e <__kernel_rem_pio2f+0x216>
 80169ac:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80169ae:	2a02      	cmp	r2, #2
 80169b0:	dc09      	bgt.n	80169c6 <__kernel_rem_pio2f+0x3ce>
 80169b2:	2a00      	cmp	r2, #0
 80169b4:	dc2a      	bgt.n	8016a0c <__kernel_rem_pio2f+0x414>
 80169b6:	d043      	beq.n	8016a40 <__kernel_rem_pio2f+0x448>
 80169b8:	f009 0007 	and.w	r0, r9, #7
 80169bc:	b059      	add	sp, #356	; 0x164
 80169be:	ecbd 8b04 	vpop	{d8-d9}
 80169c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80169c8:	2b03      	cmp	r3, #3
 80169ca:	d1f5      	bne.n	80169b8 <__kernel_rem_pio2f+0x3c0>
 80169cc:	ab30      	add	r3, sp, #192	; 0xc0
 80169ce:	442b      	add	r3, r5
 80169d0:	461a      	mov	r2, r3
 80169d2:	4619      	mov	r1, r3
 80169d4:	4620      	mov	r0, r4
 80169d6:	2800      	cmp	r0, #0
 80169d8:	f1a1 0104 	sub.w	r1, r1, #4
 80169dc:	dc51      	bgt.n	8016a82 <__kernel_rem_pio2f+0x48a>
 80169de:	4621      	mov	r1, r4
 80169e0:	2901      	cmp	r1, #1
 80169e2:	f1a2 0204 	sub.w	r2, r2, #4
 80169e6:	dc5c      	bgt.n	8016aa2 <__kernel_rem_pio2f+0x4aa>
 80169e8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8016904 <__kernel_rem_pio2f+0x30c>
 80169ec:	3304      	adds	r3, #4
 80169ee:	2c01      	cmp	r4, #1
 80169f0:	dc67      	bgt.n	8016ac2 <__kernel_rem_pio2f+0x4ca>
 80169f2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80169f6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80169fa:	2f00      	cmp	r7, #0
 80169fc:	d167      	bne.n	8016ace <__kernel_rem_pio2f+0x4d6>
 80169fe:	edc8 6a00 	vstr	s13, [r8]
 8016a02:	ed88 7a01 	vstr	s14, [r8, #4]
 8016a06:	edc8 7a02 	vstr	s15, [r8, #8]
 8016a0a:	e7d5      	b.n	80169b8 <__kernel_rem_pio2f+0x3c0>
 8016a0c:	aa30      	add	r2, sp, #192	; 0xc0
 8016a0e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8016904 <__kernel_rem_pio2f+0x30c>
 8016a12:	4413      	add	r3, r2
 8016a14:	4622      	mov	r2, r4
 8016a16:	2a00      	cmp	r2, #0
 8016a18:	da24      	bge.n	8016a64 <__kernel_rem_pio2f+0x46c>
 8016a1a:	b34f      	cbz	r7, 8016a70 <__kernel_rem_pio2f+0x478>
 8016a1c:	eef1 7a47 	vneg.f32	s15, s14
 8016a20:	edc8 7a00 	vstr	s15, [r8]
 8016a24:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8016a28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a2c:	aa31      	add	r2, sp, #196	; 0xc4
 8016a2e:	2301      	movs	r3, #1
 8016a30:	429c      	cmp	r4, r3
 8016a32:	da20      	bge.n	8016a76 <__kernel_rem_pio2f+0x47e>
 8016a34:	b10f      	cbz	r7, 8016a3a <__kernel_rem_pio2f+0x442>
 8016a36:	eef1 7a67 	vneg.f32	s15, s15
 8016a3a:	edc8 7a01 	vstr	s15, [r8, #4]
 8016a3e:	e7bb      	b.n	80169b8 <__kernel_rem_pio2f+0x3c0>
 8016a40:	aa30      	add	r2, sp, #192	; 0xc0
 8016a42:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8016904 <__kernel_rem_pio2f+0x30c>
 8016a46:	4413      	add	r3, r2
 8016a48:	2c00      	cmp	r4, #0
 8016a4a:	da05      	bge.n	8016a58 <__kernel_rem_pio2f+0x460>
 8016a4c:	b10f      	cbz	r7, 8016a52 <__kernel_rem_pio2f+0x45a>
 8016a4e:	eef1 7a67 	vneg.f32	s15, s15
 8016a52:	edc8 7a00 	vstr	s15, [r8]
 8016a56:	e7af      	b.n	80169b8 <__kernel_rem_pio2f+0x3c0>
 8016a58:	ed33 7a01 	vldmdb	r3!, {s14}
 8016a5c:	3c01      	subs	r4, #1
 8016a5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a62:	e7f1      	b.n	8016a48 <__kernel_rem_pio2f+0x450>
 8016a64:	ed73 7a01 	vldmdb	r3!, {s15}
 8016a68:	3a01      	subs	r2, #1
 8016a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a6e:	e7d2      	b.n	8016a16 <__kernel_rem_pio2f+0x41e>
 8016a70:	eef0 7a47 	vmov.f32	s15, s14
 8016a74:	e7d4      	b.n	8016a20 <__kernel_rem_pio2f+0x428>
 8016a76:	ecb2 7a01 	vldmia	r2!, {s14}
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a80:	e7d6      	b.n	8016a30 <__kernel_rem_pio2f+0x438>
 8016a82:	edd1 7a00 	vldr	s15, [r1]
 8016a86:	edd1 6a01 	vldr	s13, [r1, #4]
 8016a8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016a8e:	3801      	subs	r0, #1
 8016a90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a94:	ed81 7a00 	vstr	s14, [r1]
 8016a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a9c:	edc1 7a01 	vstr	s15, [r1, #4]
 8016aa0:	e799      	b.n	80169d6 <__kernel_rem_pio2f+0x3de>
 8016aa2:	edd2 7a00 	vldr	s15, [r2]
 8016aa6:	edd2 6a01 	vldr	s13, [r2, #4]
 8016aaa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016aae:	3901      	subs	r1, #1
 8016ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ab4:	ed82 7a00 	vstr	s14, [r2]
 8016ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016abc:	edc2 7a01 	vstr	s15, [r2, #4]
 8016ac0:	e78e      	b.n	80169e0 <__kernel_rem_pio2f+0x3e8>
 8016ac2:	ed33 7a01 	vldmdb	r3!, {s14}
 8016ac6:	3c01      	subs	r4, #1
 8016ac8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016acc:	e78f      	b.n	80169ee <__kernel_rem_pio2f+0x3f6>
 8016ace:	eef1 6a66 	vneg.f32	s13, s13
 8016ad2:	eeb1 7a47 	vneg.f32	s14, s14
 8016ad6:	edc8 6a00 	vstr	s13, [r8]
 8016ada:	ed88 7a01 	vstr	s14, [r8, #4]
 8016ade:	eef1 7a67 	vneg.f32	s15, s15
 8016ae2:	e790      	b.n	8016a06 <__kernel_rem_pio2f+0x40e>

08016ae4 <__kernel_tanf>:
 8016ae4:	b508      	push	{r3, lr}
 8016ae6:	ee10 3a10 	vmov	r3, s0
 8016aea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016aee:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016af2:	eef0 7a40 	vmov.f32	s15, s0
 8016af6:	da17      	bge.n	8016b28 <__kernel_tanf+0x44>
 8016af8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016afc:	ee17 1a10 	vmov	r1, s14
 8016b00:	bb41      	cbnz	r1, 8016b54 <__kernel_tanf+0x70>
 8016b02:	1c43      	adds	r3, r0, #1
 8016b04:	4313      	orrs	r3, r2
 8016b06:	d108      	bne.n	8016b1a <__kernel_tanf+0x36>
 8016b08:	f7fe fc3a 	bl	8015380 <fabsf>
 8016b0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b10:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b14:	eeb0 0a67 	vmov.f32	s0, s15
 8016b18:	bd08      	pop	{r3, pc}
 8016b1a:	2801      	cmp	r0, #1
 8016b1c:	d0fa      	beq.n	8016b14 <__kernel_tanf+0x30>
 8016b1e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016b22:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016b26:	e7f5      	b.n	8016b14 <__kernel_tanf+0x30>
 8016b28:	494c      	ldr	r1, [pc, #304]	; (8016c5c <__kernel_tanf+0x178>)
 8016b2a:	428a      	cmp	r2, r1
 8016b2c:	db12      	blt.n	8016b54 <__kernel_tanf+0x70>
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	bfb8      	it	lt
 8016b32:	eef1 7a40 	vneglt.f32	s15, s0
 8016b36:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016c60 <__kernel_tanf+0x17c>
 8016b3a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016b3e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8016c64 <__kernel_tanf+0x180>
 8016b42:	bfb8      	it	lt
 8016b44:	eef1 0a60 	vneglt.f32	s1, s1
 8016b48:	ee70 0a60 	vsub.f32	s1, s0, s1
 8016b4c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016b50:	eddf 0a45 	vldr	s1, [pc, #276]	; 8016c68 <__kernel_tanf+0x184>
 8016b54:	eddf 5a45 	vldr	s11, [pc, #276]	; 8016c6c <__kernel_tanf+0x188>
 8016b58:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8016c70 <__kernel_tanf+0x18c>
 8016b5c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8016c74 <__kernel_tanf+0x190>
 8016b60:	493e      	ldr	r1, [pc, #248]	; (8016c5c <__kernel_tanf+0x178>)
 8016b62:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016b66:	428a      	cmp	r2, r1
 8016b68:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016b6c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016b70:	eddf 5a41 	vldr	s11, [pc, #260]	; 8016c78 <__kernel_tanf+0x194>
 8016b74:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b78:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8016c7c <__kernel_tanf+0x198>
 8016b7c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b80:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8016c80 <__kernel_tanf+0x19c>
 8016b84:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016b88:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8016c84 <__kernel_tanf+0x1a0>
 8016b8c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016b90:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8016c88 <__kernel_tanf+0x1a4>
 8016b94:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016b98:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8016c8c <__kernel_tanf+0x1a8>
 8016b9c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016ba0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8016c90 <__kernel_tanf+0x1ac>
 8016ba4:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016ba8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8016c94 <__kernel_tanf+0x1b0>
 8016bac:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016bb0:	eddf 5a39 	vldr	s11, [pc, #228]	; 8016c98 <__kernel_tanf+0x1b4>
 8016bb4:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016bb8:	eeb0 7a46 	vmov.f32	s14, s12
 8016bbc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016bc0:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8016bc4:	eeb0 6a60 	vmov.f32	s12, s1
 8016bc8:	eea7 6a05 	vfma.f32	s12, s14, s10
 8016bcc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016c9c <__kernel_tanf+0x1b8>
 8016bd0:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016bd4:	eee5 0a07 	vfma.f32	s1, s10, s14
 8016bd8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016bdc:	db1d      	blt.n	8016c1a <__kernel_tanf+0x136>
 8016bde:	ee06 0a90 	vmov	s13, r0
 8016be2:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016be6:	ee27 6a07 	vmul.f32	s12, s14, s14
 8016bea:	ee37 7a00 	vadd.f32	s14, s14, s0
 8016bee:	179b      	asrs	r3, r3, #30
 8016bf0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8016bf4:	f003 0302 	and.w	r3, r3, #2
 8016bf8:	f1c3 0301 	rsb	r3, r3, #1
 8016bfc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016c00:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8016c04:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016c08:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016c0c:	ee07 3a90 	vmov	s15, r3
 8016c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c14:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016c18:	e77c      	b.n	8016b14 <__kernel_tanf+0x30>
 8016c1a:	2801      	cmp	r0, #1
 8016c1c:	d01b      	beq.n	8016c56 <__kernel_tanf+0x172>
 8016c1e:	4b20      	ldr	r3, [pc, #128]	; (8016ca0 <__kernel_tanf+0x1bc>)
 8016c20:	ee17 2a10 	vmov	r2, s14
 8016c24:	401a      	ands	r2, r3
 8016c26:	ee06 2a10 	vmov	s12, r2
 8016c2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016c2e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016c32:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016c36:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c3e:	ee16 2a90 	vmov	r2, s13
 8016c42:	4013      	ands	r3, r2
 8016c44:	ee07 3a90 	vmov	s15, r3
 8016c48:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016c4c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016c50:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016c54:	e75e      	b.n	8016b14 <__kernel_tanf+0x30>
 8016c56:	eef0 7a47 	vmov.f32	s15, s14
 8016c5a:	e75b      	b.n	8016b14 <__kernel_tanf+0x30>
 8016c5c:	3f2ca140 	.word	0x3f2ca140
 8016c60:	3f490fda 	.word	0x3f490fda
 8016c64:	33222168 	.word	0x33222168
 8016c68:	00000000 	.word	0x00000000
 8016c6c:	b79bae5f 	.word	0xb79bae5f
 8016c70:	38a3f445 	.word	0x38a3f445
 8016c74:	37d95384 	.word	0x37d95384
 8016c78:	3a1a26c8 	.word	0x3a1a26c8
 8016c7c:	3b6b6916 	.word	0x3b6b6916
 8016c80:	3cb327a4 	.word	0x3cb327a4
 8016c84:	3e088889 	.word	0x3e088889
 8016c88:	3895c07a 	.word	0x3895c07a
 8016c8c:	398137b9 	.word	0x398137b9
 8016c90:	3abede48 	.word	0x3abede48
 8016c94:	3c11371f 	.word	0x3c11371f
 8016c98:	3d5d0dd1 	.word	0x3d5d0dd1
 8016c9c:	3eaaaaab 	.word	0x3eaaaaab
 8016ca0:	fffff000 	.word	0xfffff000

08016ca4 <fabs>:
 8016ca4:	ec51 0b10 	vmov	r0, r1, d0
 8016ca8:	ee10 2a10 	vmov	r2, s0
 8016cac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016cb0:	ec43 2b10 	vmov	d0, r2, r3
 8016cb4:	4770      	bx	lr
	...

08016cb8 <floor>:
 8016cb8:	ee10 1a90 	vmov	r1, s1
 8016cbc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016cc0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8016cc4:	2b13      	cmp	r3, #19
 8016cc6:	b530      	push	{r4, r5, lr}
 8016cc8:	ee10 0a10 	vmov	r0, s0
 8016ccc:	ee10 5a10 	vmov	r5, s0
 8016cd0:	dc31      	bgt.n	8016d36 <floor+0x7e>
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	da15      	bge.n	8016d02 <floor+0x4a>
 8016cd6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016d90 <floor+0xd8>
 8016cda:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016cde:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce6:	dd07      	ble.n	8016cf8 <floor+0x40>
 8016ce8:	2900      	cmp	r1, #0
 8016cea:	da4e      	bge.n	8016d8a <floor+0xd2>
 8016cec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016cf0:	4318      	orrs	r0, r3
 8016cf2:	d001      	beq.n	8016cf8 <floor+0x40>
 8016cf4:	4928      	ldr	r1, [pc, #160]	; (8016d98 <floor+0xe0>)
 8016cf6:	2000      	movs	r0, #0
 8016cf8:	460b      	mov	r3, r1
 8016cfa:	4602      	mov	r2, r0
 8016cfc:	ec43 2b10 	vmov	d0, r2, r3
 8016d00:	e020      	b.n	8016d44 <floor+0x8c>
 8016d02:	4a26      	ldr	r2, [pc, #152]	; (8016d9c <floor+0xe4>)
 8016d04:	411a      	asrs	r2, r3
 8016d06:	ea01 0402 	and.w	r4, r1, r2
 8016d0a:	4304      	orrs	r4, r0
 8016d0c:	d01a      	beq.n	8016d44 <floor+0x8c>
 8016d0e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016d90 <floor+0xd8>
 8016d12:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016d16:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d1e:	ddeb      	ble.n	8016cf8 <floor+0x40>
 8016d20:	2900      	cmp	r1, #0
 8016d22:	bfbe      	ittt	lt
 8016d24:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8016d28:	fa40 f303 	asrlt.w	r3, r0, r3
 8016d2c:	18c9      	addlt	r1, r1, r3
 8016d2e:	ea21 0102 	bic.w	r1, r1, r2
 8016d32:	2000      	movs	r0, #0
 8016d34:	e7e0      	b.n	8016cf8 <floor+0x40>
 8016d36:	2b33      	cmp	r3, #51	; 0x33
 8016d38:	dd05      	ble.n	8016d46 <floor+0x8e>
 8016d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016d3e:	d101      	bne.n	8016d44 <floor+0x8c>
 8016d40:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016d44:	bd30      	pop	{r4, r5, pc}
 8016d46:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8016d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d4e:	40e2      	lsrs	r2, r4
 8016d50:	4202      	tst	r2, r0
 8016d52:	d0f7      	beq.n	8016d44 <floor+0x8c>
 8016d54:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8016d90 <floor+0xd8>
 8016d58:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016d5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d64:	ddc8      	ble.n	8016cf8 <floor+0x40>
 8016d66:	2900      	cmp	r1, #0
 8016d68:	da02      	bge.n	8016d70 <floor+0xb8>
 8016d6a:	2b14      	cmp	r3, #20
 8016d6c:	d103      	bne.n	8016d76 <floor+0xbe>
 8016d6e:	3101      	adds	r1, #1
 8016d70:	ea20 0002 	bic.w	r0, r0, r2
 8016d74:	e7c0      	b.n	8016cf8 <floor+0x40>
 8016d76:	2401      	movs	r4, #1
 8016d78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016d7c:	fa04 f303 	lsl.w	r3, r4, r3
 8016d80:	4418      	add	r0, r3
 8016d82:	42a8      	cmp	r0, r5
 8016d84:	bf38      	it	cc
 8016d86:	1909      	addcc	r1, r1, r4
 8016d88:	e7f2      	b.n	8016d70 <floor+0xb8>
 8016d8a:	2000      	movs	r0, #0
 8016d8c:	4601      	mov	r1, r0
 8016d8e:	e7b3      	b.n	8016cf8 <floor+0x40>
 8016d90:	8800759c 	.word	0x8800759c
 8016d94:	7e37e43c 	.word	0x7e37e43c
 8016d98:	bff00000 	.word	0xbff00000
 8016d9c:	000fffff 	.word	0x000fffff

08016da0 <scalbn>:
 8016da0:	ee10 1a90 	vmov	r1, s1
 8016da4:	b510      	push	{r4, lr}
 8016da6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8016daa:	b98c      	cbnz	r4, 8016dd0 <scalbn+0x30>
 8016dac:	ee10 3a10 	vmov	r3, s0
 8016db0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016db4:	430b      	orrs	r3, r1
 8016db6:	d011      	beq.n	8016ddc <scalbn+0x3c>
 8016db8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8016e80 <scalbn+0xe0>
 8016dbc:	4b3c      	ldr	r3, [pc, #240]	; (8016eb0 <scalbn+0x110>)
 8016dbe:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016dc2:	4298      	cmp	r0, r3
 8016dc4:	da0b      	bge.n	8016dde <scalbn+0x3e>
 8016dc6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8016e88 <scalbn+0xe8>
 8016dca:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016dce:	e005      	b.n	8016ddc <scalbn+0x3c>
 8016dd0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8016dd4:	429c      	cmp	r4, r3
 8016dd6:	d107      	bne.n	8016de8 <scalbn+0x48>
 8016dd8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016ddc:	bd10      	pop	{r4, pc}
 8016dde:	ee10 1a90 	vmov	r1, s1
 8016de2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8016de6:	3c36      	subs	r4, #54	; 0x36
 8016de8:	4404      	add	r4, r0
 8016dea:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8016dee:	429c      	cmp	r4, r3
 8016df0:	dd0d      	ble.n	8016e0e <scalbn+0x6e>
 8016df2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8016e90 <scalbn+0xf0>
 8016df6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8016e98 <scalbn+0xf8>
 8016dfa:	eeb0 6b47 	vmov.f64	d6, d7
 8016dfe:	ee10 3a90 	vmov	r3, s1
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	fe27 7b05 	vselge.f64	d7, d7, d5
 8016e08:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016e0c:	e7e6      	b.n	8016ddc <scalbn+0x3c>
 8016e0e:	2c00      	cmp	r4, #0
 8016e10:	dd0a      	ble.n	8016e28 <scalbn+0x88>
 8016e12:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016e16:	ec53 2b10 	vmov	r2, r3, d0
 8016e1a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016e1e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016e22:	ec43 2b10 	vmov	d0, r2, r3
 8016e26:	e7d9      	b.n	8016ddc <scalbn+0x3c>
 8016e28:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8016e2c:	da19      	bge.n	8016e62 <scalbn+0xc2>
 8016e2e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016e32:	4298      	cmp	r0, r3
 8016e34:	ee10 3a90 	vmov	r3, s1
 8016e38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016e3c:	dd09      	ble.n	8016e52 <scalbn+0xb2>
 8016e3e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8016e90 <scalbn+0xf0>
 8016e42:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8016e98 <scalbn+0xf8>
 8016e46:	eeb0 7b40 	vmov.f64	d7, d0
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8016e50:	e7bb      	b.n	8016dca <scalbn+0x2a>
 8016e52:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8016e88 <scalbn+0xe8>
 8016e56:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8016ea0 <scalbn+0x100>
 8016e5a:	eeb0 7b40 	vmov.f64	d7, d0
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	e7f4      	b.n	8016e4c <scalbn+0xac>
 8016e62:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016e66:	ec53 2b10 	vmov	r2, r3, d0
 8016e6a:	3436      	adds	r4, #54	; 0x36
 8016e6c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016e70:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016e74:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8016ea8 <scalbn+0x108>
 8016e78:	ec43 2b10 	vmov	d0, r2, r3
 8016e7c:	e7a5      	b.n	8016dca <scalbn+0x2a>
 8016e7e:	bf00      	nop
 8016e80:	00000000 	.word	0x00000000
 8016e84:	43500000 	.word	0x43500000
 8016e88:	c2f8f359 	.word	0xc2f8f359
 8016e8c:	01a56e1f 	.word	0x01a56e1f
 8016e90:	8800759c 	.word	0x8800759c
 8016e94:	7e37e43c 	.word	0x7e37e43c
 8016e98:	8800759c 	.word	0x8800759c
 8016e9c:	fe37e43c 	.word	0xfe37e43c
 8016ea0:	c2f8f359 	.word	0xc2f8f359
 8016ea4:	81a56e1f 	.word	0x81a56e1f
 8016ea8:	00000000 	.word	0x00000000
 8016eac:	3c900000 	.word	0x3c900000
 8016eb0:	ffff3cb0 	.word	0xffff3cb0

08016eb4 <expm1f>:
 8016eb4:	ee10 2a10 	vmov	r2, s0
 8016eb8:	497c      	ldr	r1, [pc, #496]	; (80170ac <expm1f+0x1f8>)
 8016eba:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8016ebe:	428b      	cmp	r3, r1
 8016ec0:	d920      	bls.n	8016f04 <expm1f+0x50>
 8016ec2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016ec6:	d902      	bls.n	8016ece <expm1f+0x1a>
 8016ec8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016ecc:	4770      	bx	lr
 8016ece:	d105      	bne.n	8016edc <expm1f+0x28>
 8016ed0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016ed4:	2a00      	cmp	r2, #0
 8016ed6:	fe20 0a27 	vselge.f32	s0, s0, s15
 8016eda:	4770      	bx	lr
 8016edc:	2a00      	cmp	r2, #0
 8016ede:	db05      	blt.n	8016eec <expm1f+0x38>
 8016ee0:	4973      	ldr	r1, [pc, #460]	; (80170b0 <expm1f+0x1fc>)
 8016ee2:	428b      	cmp	r3, r1
 8016ee4:	d95c      	bls.n	8016fa0 <expm1f+0xec>
 8016ee6:	2000      	movs	r0, #0
 8016ee8:	f7fe b97a 	b.w	80151e0 <__math_oflowf>
 8016eec:	eddf 7a71 	vldr	s15, [pc, #452]	; 80170b4 <expm1f+0x200>
 8016ef0:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016ef4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016efc:	d550      	bpl.n	8016fa0 <expm1f+0xec>
 8016efe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016f02:	4770      	bx	lr
 8016f04:	496c      	ldr	r1, [pc, #432]	; (80170b8 <expm1f+0x204>)
 8016f06:	428b      	cmp	r3, r1
 8016f08:	d966      	bls.n	8016fd8 <expm1f+0x124>
 8016f0a:	496c      	ldr	r1, [pc, #432]	; (80170bc <expm1f+0x208>)
 8016f0c:	428b      	cmp	r3, r1
 8016f0e:	d847      	bhi.n	8016fa0 <expm1f+0xec>
 8016f10:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80170c0 <expm1f+0x20c>
 8016f14:	2a00      	cmp	r2, #0
 8016f16:	bfa7      	ittee	ge
 8016f18:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8016f1c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 80170c4 <expm1f+0x210>
 8016f20:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 80170c8 <expm1f+0x214>
 8016f24:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8016f28:	bfac      	ite	ge
 8016f2a:	2301      	movge	r3, #1
 8016f2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016f30:	ee37 0a67 	vsub.f32	s0, s14, s15
 8016f34:	ee37 7a40 	vsub.f32	s14, s14, s0
 8016f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f3c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016f40:	ee20 4a25 	vmul.f32	s8, s0, s11
 8016f44:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80170cc <expm1f+0x218>
 8016f48:	eddf 6a61 	vldr	s13, [pc, #388]	; 80170d0 <expm1f+0x21c>
 8016f4c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 80170d4 <expm1f+0x220>
 8016f50:	ee20 7a04 	vmul.f32	s14, s0, s8
 8016f54:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8016f58:	eee7 6a06 	vfma.f32	s13, s14, s12
 8016f5c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 80170d8 <expm1f+0x224>
 8016f60:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016f64:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80170dc <expm1f+0x228>
 8016f68:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016f6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016f70:	eea6 5a87 	vfma.f32	s10, s13, s14
 8016f74:	eef0 6a46 	vmov.f32	s13, s12
 8016f78:	eee5 6a07 	vfma.f32	s13, s10, s14
 8016f7c:	eee4 4a66 	vfms.f32	s9, s8, s13
 8016f80:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8016f84:	eea0 4a64 	vfms.f32	s8, s0, s9
 8016f88:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8016f8c:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8016f90:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016f94:	bb73      	cbnz	r3, 8016ff4 <expm1f+0x140>
 8016f96:	eef0 7a47 	vmov.f32	s15, s14
 8016f9a:	eed0 7a26 	vfnms.f32	s15, s0, s13
 8016f9e:	e024      	b.n	8016fea <expm1f+0x136>
 8016fa0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8016fa4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016fa8:	2a00      	cmp	r2, #0
 8016faa:	fe67 7a87 	vselge.f32	s15, s15, s14
 8016fae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80170e0 <expm1f+0x22c>
 8016fb2:	eddf 6a43 	vldr	s13, [pc, #268]	; 80170c0 <expm1f+0x20c>
 8016fb6:	ee40 7a07 	vmla.f32	s15, s0, s14
 8016fba:	eeb0 7a40 	vmov.f32	s14, s0
 8016fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016fc2:	ee17 3a90 	vmov	r3, s15
 8016fc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fca:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8016fce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80170c4 <expm1f+0x210>
 8016fd2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016fd6:	e7ab      	b.n	8016f30 <expm1f+0x7c>
 8016fd8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8016fdc:	d208      	bcs.n	8016ff0 <expm1f+0x13c>
 8016fde:	eddf 7a41 	vldr	s15, [pc, #260]	; 80170e4 <expm1f+0x230>
 8016fe2:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016fe6:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8016fea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016fee:	4770      	bx	lr
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	e7a3      	b.n	8016f3c <expm1f+0x88>
 8016ff4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8016ff8:	1c5a      	adds	r2, r3, #1
 8016ffa:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8016ffe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017002:	d106      	bne.n	8017012 <expm1f+0x15e>
 8017004:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017008:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801700c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8017010:	4770      	bx	lr
 8017012:	2b01      	cmp	r3, #1
 8017014:	d118      	bne.n	8017048 <expm1f+0x194>
 8017016:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801701a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017022:	bf5b      	ittet	pl
 8017024:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8017028:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801702c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8017030:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8017034:	bf43      	ittte	mi
 8017036:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 801703a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801703e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8017042:	eeb0 0a46 	vmovpl.f32	s0, s12
 8017046:	4770      	bx	lr
 8017048:	1c5a      	adds	r2, r3, #1
 801704a:	2a39      	cmp	r2, #57	; 0x39
 801704c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8017050:	d90b      	bls.n	801706a <expm1f+0x1b6>
 8017052:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017056:	ee36 0a40 	vsub.f32	s0, s12, s0
 801705a:	ee10 3a10 	vmov	r3, s0
 801705e:	440b      	add	r3, r1
 8017060:	ee00 3a10 	vmov	s0, r3
 8017064:	ee30 0a46 	vsub.f32	s0, s0, s12
 8017068:	4770      	bx	lr
 801706a:	2b16      	cmp	r3, #22
 801706c:	dc11      	bgt.n	8017092 <expm1f+0x1de>
 801706e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017072:	fa42 f303 	asr.w	r3, r2, r3
 8017076:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801707a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801707e:	ee07 3a90 	vmov	s15, r3
 8017082:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017086:	ee10 3a10 	vmov	r3, s0
 801708a:	440b      	add	r3, r1
 801708c:	ee00 3a10 	vmov	s0, r3
 8017090:	4770      	bx	lr
 8017092:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8017096:	05db      	lsls	r3, r3, #23
 8017098:	ee07 3a10 	vmov	s14, r3
 801709c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80170a0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80170a4:	ee37 0a86 	vadd.f32	s0, s15, s12
 80170a8:	e7ed      	b.n	8017086 <expm1f+0x1d2>
 80170aa:	bf00      	nop
 80170ac:	4195b843 	.word	0x4195b843
 80170b0:	42b17217 	.word	0x42b17217
 80170b4:	0da24260 	.word	0x0da24260
 80170b8:	3eb17218 	.word	0x3eb17218
 80170bc:	3f851591 	.word	0x3f851591
 80170c0:	3f317180 	.word	0x3f317180
 80170c4:	3717f7d1 	.word	0x3717f7d1
 80170c8:	b717f7d1 	.word	0xb717f7d1
 80170cc:	b457edbb 	.word	0xb457edbb
 80170d0:	36867e54 	.word	0x36867e54
 80170d4:	bd088889 	.word	0xbd088889
 80170d8:	b8a670cd 	.word	0xb8a670cd
 80170dc:	3ad00d01 	.word	0x3ad00d01
 80170e0:	3fb8aa3b 	.word	0x3fb8aa3b
 80170e4:	7149f2ca 	.word	0x7149f2ca

080170e8 <floorf>:
 80170e8:	ee10 3a10 	vmov	r3, s0
 80170ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80170f0:	3a7f      	subs	r2, #127	; 0x7f
 80170f2:	2a16      	cmp	r2, #22
 80170f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80170f8:	dc2a      	bgt.n	8017150 <floorf+0x68>
 80170fa:	2a00      	cmp	r2, #0
 80170fc:	da11      	bge.n	8017122 <floorf+0x3a>
 80170fe:	eddf 7a18 	vldr	s15, [pc, #96]	; 8017160 <floorf+0x78>
 8017102:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017106:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801710a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801710e:	dd05      	ble.n	801711c <floorf+0x34>
 8017110:	2b00      	cmp	r3, #0
 8017112:	da23      	bge.n	801715c <floorf+0x74>
 8017114:	4a13      	ldr	r2, [pc, #76]	; (8017164 <floorf+0x7c>)
 8017116:	2900      	cmp	r1, #0
 8017118:	bf18      	it	ne
 801711a:	4613      	movne	r3, r2
 801711c:	ee00 3a10 	vmov	s0, r3
 8017120:	4770      	bx	lr
 8017122:	4911      	ldr	r1, [pc, #68]	; (8017168 <floorf+0x80>)
 8017124:	4111      	asrs	r1, r2
 8017126:	420b      	tst	r3, r1
 8017128:	d0fa      	beq.n	8017120 <floorf+0x38>
 801712a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8017160 <floorf+0x78>
 801712e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017132:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801713a:	ddef      	ble.n	801711c <floorf+0x34>
 801713c:	2b00      	cmp	r3, #0
 801713e:	bfbe      	ittt	lt
 8017140:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8017144:	fa40 f202 	asrlt.w	r2, r0, r2
 8017148:	189b      	addlt	r3, r3, r2
 801714a:	ea23 0301 	bic.w	r3, r3, r1
 801714e:	e7e5      	b.n	801711c <floorf+0x34>
 8017150:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017154:	d3e4      	bcc.n	8017120 <floorf+0x38>
 8017156:	ee30 0a00 	vadd.f32	s0, s0, s0
 801715a:	4770      	bx	lr
 801715c:	2300      	movs	r3, #0
 801715e:	e7dd      	b.n	801711c <floorf+0x34>
 8017160:	7149f2ca 	.word	0x7149f2ca
 8017164:	bf800000 	.word	0xbf800000
 8017168:	007fffff 	.word	0x007fffff

0801716c <scalbnf>:
 801716c:	ee10 3a10 	vmov	r3, s0
 8017170:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017174:	d024      	beq.n	80171c0 <scalbnf+0x54>
 8017176:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801717a:	d302      	bcc.n	8017182 <scalbnf+0x16>
 801717c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017180:	4770      	bx	lr
 8017182:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017186:	d121      	bne.n	80171cc <scalbnf+0x60>
 8017188:	4b29      	ldr	r3, [pc, #164]	; (8017230 <scalbnf+0xc4>)
 801718a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8017234 <scalbnf+0xc8>
 801718e:	4298      	cmp	r0, r3
 8017190:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017194:	db15      	blt.n	80171c2 <scalbnf+0x56>
 8017196:	ee10 3a10 	vmov	r3, s0
 801719a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801719e:	3a19      	subs	r2, #25
 80171a0:	4402      	add	r2, r0
 80171a2:	2afe      	cmp	r2, #254	; 0xfe
 80171a4:	dd14      	ble.n	80171d0 <scalbnf+0x64>
 80171a6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8017238 <scalbnf+0xcc>
 80171aa:	eddf 6a24 	vldr	s13, [pc, #144]	; 801723c <scalbnf+0xd0>
 80171ae:	ee10 3a10 	vmov	r3, s0
 80171b2:	eeb0 7a67 	vmov.f32	s14, s15
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	fe67 7aa6 	vselge.f32	s15, s15, s13
 80171bc:	ee27 0a27 	vmul.f32	s0, s14, s15
 80171c0:	4770      	bx	lr
 80171c2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017240 <scalbnf+0xd4>
 80171c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80171ca:	4770      	bx	lr
 80171cc:	0dd2      	lsrs	r2, r2, #23
 80171ce:	e7e7      	b.n	80171a0 <scalbnf+0x34>
 80171d0:	2a00      	cmp	r2, #0
 80171d2:	dd06      	ble.n	80171e2 <scalbnf+0x76>
 80171d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80171d8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80171dc:	ee00 3a10 	vmov	s0, r3
 80171e0:	4770      	bx	lr
 80171e2:	f112 0f16 	cmn.w	r2, #22
 80171e6:	da19      	bge.n	801721c <scalbnf+0xb0>
 80171e8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80171ec:	4298      	cmp	r0, r3
 80171ee:	ee10 3a10 	vmov	r3, s0
 80171f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80171f6:	dd09      	ble.n	801720c <scalbnf+0xa0>
 80171f8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8017238 <scalbnf+0xcc>
 80171fc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801723c <scalbnf+0xd0>
 8017200:	eef0 7a40 	vmov.f32	s15, s0
 8017204:	2b00      	cmp	r3, #0
 8017206:	fe00 0a07 	vseleq.f32	s0, s0, s14
 801720a:	e7dc      	b.n	80171c6 <scalbnf+0x5a>
 801720c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8017240 <scalbnf+0xd4>
 8017210:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8017244 <scalbnf+0xd8>
 8017214:	eef0 7a40 	vmov.f32	s15, s0
 8017218:	2b00      	cmp	r3, #0
 801721a:	e7f4      	b.n	8017206 <scalbnf+0x9a>
 801721c:	3219      	adds	r2, #25
 801721e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017222:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8017226:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017248 <scalbnf+0xdc>
 801722a:	ee07 3a10 	vmov	s14, r3
 801722e:	e7c5      	b.n	80171bc <scalbnf+0x50>
 8017230:	ffff3cb0 	.word	0xffff3cb0
 8017234:	4c000000 	.word	0x4c000000
 8017238:	7149f2ca 	.word	0x7149f2ca
 801723c:	f149f2ca 	.word	0xf149f2ca
 8017240:	0da24260 	.word	0x0da24260
 8017244:	8da24260 	.word	0x8da24260
 8017248:	33000000 	.word	0x33000000

0801724c <__errno>:
 801724c:	4b01      	ldr	r3, [pc, #4]	; (8017254 <__errno+0x8>)
 801724e:	6818      	ldr	r0, [r3, #0]
 8017250:	4770      	bx	lr
 8017252:	bf00      	nop
 8017254:	20000130 	.word	0x20000130

08017258 <_init>:
 8017258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801725a:	bf00      	nop
 801725c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801725e:	bc08      	pop	{r3}
 8017260:	469e      	mov	lr, r3
 8017262:	4770      	bx	lr

08017264 <_fini>:
 8017264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017266:	bf00      	nop
 8017268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801726a:	bc08      	pop	{r3}
 801726c:	469e      	mov	lr, r3
 801726e:	4770      	bx	lr

08017270 <__oscillator_tick_veneer>:
 8017270:	f85f f000 	ldr.w	pc, [pc]	; 8017274 <__oscillator_tick_veneer+0x4>
 8017274:	00000001 	.word	0x00000001

08017278 <__cStack_init_veneer>:
 8017278:	f85f f000 	ldr.w	pc, [pc]	; 801727c <__cStack_init_veneer+0x4>
 801727c:	000010e1 	.word	0x000010e1

08017280 <__filter_tick_veneer>:
 8017280:	f85f f000 	ldr.w	pc, [pc]	; 8017284 <__filter_tick_veneer+0x4>
 8017284:	00000401 	.word	0x00000401

08017288 <__noise_tick_veneer>:
 8017288:	f85f f000 	ldr.w	pc, [pc]	; 801728c <__noise_tick_veneer+0x4>
 801728c:	00001ea1 	.word	0x00001ea1

08017290 <__HAL_SAI_RxHalfCpltCallback_veneer>:
 8017290:	f85f f000 	ldr.w	pc, [pc]	; 8017294 <__HAL_SAI_RxHalfCpltCallback_veneer+0x4>
 8017294:	00001fa1 	.word	0x00001fa1

08017298 <__HAL_SAI_RxCpltCallback_veneer>:
 8017298:	f85f f000 	ldr.w	pc, [pc]	; 801729c <__HAL_SAI_RxCpltCallback_veneer+0x4>
 801729c:	00001f81 	.word	0x00001f81

080172a0 <__parsePreset_veneer>:
 80172a0:	f85f f000 	ldr.w	pc, [pc]	; 80172a4 <__parsePreset_veneer+0x4>
 80172a4:	00002301 	.word	0x00002301

080172a8 <__tickMappings_veneer>:
 80172a8:	f85f f000 	ldr.w	pc, [pc]	; 80172ac <__tickMappings_veneer+0x4>
 80172ac:	00000e41 	.word	0x00000e41

Disassembly of section .ITCMRAM:

00000000 <oscillator_tick>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
       0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
       4:	4a3d      	ldr	r2, [pc, #244]	; (fc <oscillator_tick+0xfc>)
  if (HAL_SD_Erase(&hsd1, StartAddr, EndAddr) != HAL_OK)
       6:	2500      	movs	r5, #0
       8:	4b3d      	ldr	r3, [pc, #244]	; (100 <oscillator_tick+0x100>)
       a:	4c3e      	ldr	r4, [pc, #248]	; (104 <oscillator_tick+0x104>)
       c:	4e3e      	ldr	r6, [pc, #248]	; (108 <oscillator_tick+0x108>)
}
       e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 11c <oscillator_tick+0x11c>
      12:	f8df 910c 	ldr.w	r9, [pc, #268]	; 120 <oscillator_tick+0x120>
      16:	f8df 810c 	ldr.w	r8, [pc, #268]	; 124 <oscillator_tick+0x124>
      1a:	4f3c      	ldr	r7, [pc, #240]	; (10c <oscillator_tick+0x10c>)
    __HAL_RCC_RNG_CLK_DISABLE();
  /* USER CODE BEGIN RNG_MspDeInit 1 */

  /* USER CODE END RNG_MspDeInit 1 */
  }
}
      1c:	f8df b108 	ldr.w	fp, [pc, #264]	; 128 <oscillator_tick+0x128>
      20:	ed2d 8b08 	vpush	{d8-d11}
  DWT->CYCCNT = 0;
      24:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
}
      28:	b087      	sub	sp, #28
      2a:	eeb0 9a40 	vmov.f32	s18, s0
      2e:	7015      	strb	r5, [r2, #0]
      30:	ed9f aa37 	vldr	s20, [pc, #220]	; 110 <oscillator_tick+0x110>
      34:	685b      	ldr	r3, [r3, #4]
      36:	eddf 9a37 	vldr	s19, [pc, #220]	; 114 <oscillator_tick+0x114>
      3a:	9303      	str	r3, [sp, #12]
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
      3c:	ed94 7aa6 	vldr	s14, [r4, #664]	; 0x298
}
      40:	eeb0 0a49 	vmov.f32	s0, s18
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
      44:	edd4 7a83 	vldr	s15, [r4, #524]	; 0x20c
  }
  else
  {
    return HAL_BUSY;
  }
}
      48:	4630      	mov	r0, r6
    return HAL_BUSY;
      4a:	eeb4 7aea 	vcmpe.f32	s14, s21
      4e:	edd4 0a8d 	vldr	s1, [r4, #564]	; 0x234
}
      52:	eea7 0a8a 	vfma.f32	s0, s15, s20
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
      56:	ed94 8ab5 	vldr	s16, [r4, #724]	; 0x2d4
      5a:	ed94 ba88 	vldr	s22, [r4, #544]	; 0x220
      5e:	f504 7482 	add.w	r4, r4, #260	; 0x104

  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
      62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      66:	edcd 0a02 	vstr	s1, [sp, #8]
      6a:	edd4 8a51 	vldr	s17, [r4, #324]	; 0x144
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
      6e:	bfcc      	ite	gt
    c->W = 1.5f; // decibel Width of knee transition
      70:	2201      	movgt	r2, #1
    c->inv4W = 1.0f / (4.0f * c->W) ;
      72:	2200      	movle	r2, #0
}
      74:	9201      	str	r2, [sp, #4]
      76:	f003 fb63 	bl	3740 <__tExpSmooth_setDest_veneer>
      7a:	4630      	mov	r0, r6
      7c:	3604      	adds	r6, #4
      7e:	f003 fb0f 	bl	36a0 <__tExpSmooth_tick_veneer>
      82:	f003 fb49 	bl	3718 <__mtof_veneer>
    PE3     ------> SAI1_SD_B
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_3);

    HAL_DMA_DeInit(saiHandle->hdmarx);
    HAL_DMA_DeInit(saiHandle->hdmatx);
      86:	ecfa 7a01 	vldmia	sl!, {s15}
      8a:	4629      	mov	r1, r5
      8c:	eddd 0a02 	vldr	s1, [sp, #8]
      90:	eea7 ba80 	vfma.f32	s22, s15, s0
  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
  {
     if( EXTI_LineCmd == 0UL)
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
      94:	9a01      	ldr	r2, [sp, #4]
      96:	f859 3b04 	ldr.w	r3, [r9], #4
      9a:	a805      	add	r0, sp, #20
      9c:	edcd 9a05 	vstr	s19, [sp, #20]

    /* SPI5 DMA DeInit */
    HAL_DMA_DeInit(spiHandle->hdmarx);

    /* SPI5 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI5_IRQn);
      a0:	3501      	adds	r5, #1
      a2:	eeb0 0a4b 	vmov.f32	s0, s22
      a6:	4798      	blx	r3
      a8:	eddd 6a05 	vldr	s13, [sp, #20]
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
      ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

        /* Get tick */
        tickstart = HAL_GetTick ();

        /* Wait till voltage level flag is set */
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
      b0:	ed9b 7a00 	vldr	s14, [fp]
      b4:	ee68 6aa6 	vmul.f32	s13, s17, s13
    node->prev = NULL;
      b8:	ed94 6a38 	vldr	s12, [r4, #224]	; 0xe0
                pool->head = pool->head->next;
      bc:	2d03      	cmp	r5, #3
      be:	ee77 7ac8 	vsub.f32	s15, s15, s16
    freed_node->next = pool->head;
      c2:	ee26 7a87 	vmul.f32	s14, s13, s14
    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
    
    d->outPoint = (uint32_t) outPointer;   // integer part
    
    d->alpha = outPointer - d->outPoint; // fractional part
      c6:	ece8 6a01 	vstmia	r8!, {s13}
    d->omAlpha = 1.0f - d->alpha;
      ca:	ee26 8a08 	vmul.f32	s16, s12, s16
    d->alpha = outPointer - d->outPoint; // fractional part
      ce:	ee67 7a87 	vmul.f32	s15, s15, s14
    d->omAlpha = 1.0f - d->alpha;
      d2:	ee28 8a07 	vmul.f32	s16, s16, s14
}
      d6:	ee67 7a86 	vmul.f32	s15, s15, s12
      da:	eca7 8a01 	vstmia	r7!, {s16}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
      de:	edc7 7a02 	vstr	s15, [r7, #8]
      e2:	d1ab      	bne.n	3c <oscillator_tick+0x3c>
      e4:	4b06      	ldr	r3, [pc, #24]	; (100 <oscillator_tick+0x100>)
      e6:	9903      	ldr	r1, [sp, #12]
    else if (delay < 0.0f)  d->delay = 0.0f;
      e8:	685b      	ldr	r3, [r3, #4]
      ea:	4a0b      	ldr	r2, [pc, #44]	; (118 <oscillator_tick+0x118>)
      ec:	1a5b      	subs	r3, r3, r1
      ee:	6013      	str	r3, [r2, #0]
      f0:	b007      	add	sp, #28
      f2:	ecbd 8b08 	vpop	{d8-d11}
    else                    d->delay = delay;
      f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      fa:	bf00      	nop
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
      fc:	20012745 	.word	0x20012745
    return SDMMC_ERROR_COM_CRC_FAILED;
     100:	e0001000 	.word	0xe0001000
    return SDMMC_ERROR_ILLEGAL_CMD;
     104:	20014e04 	.word	0x20014e04
     108:	200006e4 	.word	0x200006e4
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
     10c:	20000630 	.word	0x20000630
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
     110:	3c23d70a 	.word	0x3c23d70a
     114:	00000000 	.word	0x00000000
    return SDMMC_ERROR_CC_ERR;
     118:	2000f4b0 	.word	0x2000f4b0
    return SDMMC_ERROR_CARD_ECC_FAILED;
     11c:	20000354 	.word	0x20000354
     120:	2000076c 	.word	0x2000076c
    return SDMMC_ERROR_ERASE_RESET;
     124:	2000f358 	.word	0x2000f358
    return SDMMC_ERROR_CARD_ECC_DISABLED;
     128:	20000078 	.word	0x20000078
     12c:	f3af 8000 	nop.w
    return SDMMC_ERROR_WP_ERASE_SKIP;
     130:	f3af 8000 	nop.w
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
     134:	f3af 8000 	nop.w
     138:	f3af 8000 	nop.w
     13c:	f3af 8000 	nop.w

00000140 <sawSquareTick>:
     140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     142:	4c16      	ldr	r4, [pc, #88]	; (19c <sawSquareTick+0x5c>)
     144:	4617      	mov	r7, r2
     146:	4605      	mov	r5, r0
     148:	460e      	mov	r6, r1
     14a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
     14e:	ed2d 8b02 	vpush	{d8}
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );

        break;

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
     152:	eeb0 8a60 	vmov.f32	s16, s1
     156:	4620      	mov	r0, r4
     158:	f003 faba 	bl	36d0 <__tMBSawPulse_setFreq_veneer>
     15c:	4620      	mov	r0, r4
     15e:	eeb0 0a48 	vmov.f32	s0, s16
     162:	f003 fa41 	bl	35e8 <__tMBSawPulse_setShape_veneer>
     166:	b96f      	cbnz	r7, 184 <sawSquareTick+0x44>
     168:	4620      	mov	r0, r4
     16a:	f003 fa55 	bl	3618 <__tMBSawPulse_tick_veneer>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
     16e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     172:	edd5 7a00 	vldr	s15, [r5]
     176:	eee0 7a07 	vfma.f32	s15, s0, s14
     17a:	ecbd 8b02 	vpop	{d8}
     17e:	edc5 7a00 	vstr	s15, [r5]
     182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     184:	4a06      	ldr	r2, [pc, #24]	; (1a0 <sawSquareTick+0x60>)
     186:	4620      	mov	r0, r4
     188:	4b06      	ldr	r3, [pc, #24]	; (1a4 <sawSquareTick+0x64>)
     18a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
     18e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
      return HAL_ERROR;
     192:	ed93 0a00 	vldr	s0, [r3]
     196:	f003 faef 	bl	3778 <__tMBSawPulse_sync_veneer>
     19a:	e7e5      	b.n	168 <sawSquareTick+0x28>
     19c:	20000740 	.word	0x20000740
}
     1a0:	080172b0 	.word	0x080172b0
        	w->u = 10e-5;
     1a4:	2000f358 	.word	0x2000f358
    if (adsr->inSustain)
     1a8:	f3af 8000 	nop.w
            adsr->next = (adsr->gain * (adsr->sustain + ((adsr->exp_buff[(uint32_t)adsr->decayPhase]) * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
     1ac:	f3af 8000 	nop.w
        adsr->decayPhase += adsr->decayInc;
     1b0:	f3af 8000 	nop.w
            adsr->next = (adsr->gain * (adsr->sustain + ((adsr->exp_buff[(uint32_t)adsr->decayPhase]) * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
     1b4:	f3af 8000 	nop.w
     1b8:	f3af 8000 	nop.w
        adsr->decayPhase += adsr->decayInc;
     1bc:	f3af 8000 	nop.w

000001c0 <sineTriTick>:
     1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     1c2:	4c16      	ldr	r4, [pc, #88]	; (21c <sineTriTick+0x5c>)
                    poly->notes[oldNote][1] = -1; //mark the stolen voice as inactive (in the second dimension of the notes array)
     1c4:	4617      	mov	r7, r2
     1c6:	4605      	mov	r5, r0
     1c8:	460e      	mov	r6, r1
     1ca:	eb04 0481 	add.w	r4, r4, r1, lsl #2
                    poly->notes[note][0] = vel;
     1ce:	ed2d 8b02 	vpush	{d8}
                    poly->notes[note][1] = whichVoice;
     1d2:	eeb0 8a60 	vmov.f32	s16, s1
                    if (poly->pitchGlideIsActive)
     1d6:	4620      	mov	r0, r4
                    	tRamp_setVal(&poly->ramps[whichVoice], note);
     1d8:	f003 fa4e 	bl	3678 <__tMBSineTri_setFreq_veneer>
     1dc:	4620      	mov	r0, r4
     1de:	eeb0 0a48 	vmov.f32	s0, s16
     1e2:	f003 fa09 	bl	35f8 <__tMBSineTri_setShape_veneer>
                    tRamp_setDest(&poly->ramps[whichVoice], poly->voices[whichVoice][0]);
     1e6:	b96f      	cbnz	r7, 204 <sineTriTick+0x44>
     1e8:	4620      	mov	r0, r4
     1ea:	f003 fa4d 	bl	3688 <__tMBSineTri_tick_veneer>
     1ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     1f2:	edd5 7a00 	vldr	s15, [r5]
     1f6:	eee0 7a07 	vfma.f32	s15, s0, s14
     1fa:	ecbd 8b02 	vpop	{d8}
}
     1fe:	edc5 7a00 	vstr	s15, [r5]
                    	tRamp_setTime(&poly->ramps[whichVoice], poly->glideTime);
     202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     204:	4a06      	ldr	r2, [pc, #24]	; (220 <sineTriTick+0x60>)
     206:	4620      	mov	r0, r4
     208:	4b06      	ldr	r3, [pc, #24]	; (224 <sineTriTick+0x64>)
     20a:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    int whereToInsert = 0;
     20e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     212:	ed93 0a00 	vldr	s0, [r3]
    for (j = 0; j < ns->size; j++)
     216:	f003 fabb 	bl	3790 <__tMBSineTri_sync_veneer>
        for (int i = 0; i < poly->numVoices; i++)
     21a:	e7e5      	b.n	1e8 <sineTriTick+0x28>
     21c:	200007a4 	.word	0x200007a4
    ns->data[whereToInsert] = noteVal;
     220:	080172b0 	.word	0x080172b0
    ns->size++;
     224:	2000f358 	.word	0x2000f358
        for (int i = 0; i < poly->numVoices; i++)
     228:	f3af 8000 	nop.w
    ns->size++;
     22c:	f3af 8000 	nop.w
        for (int i = 0; i < poly->numVoices; i++)
     230:	f3af 8000 	nop.w
            for (int j = tStack_getSize(&poly->stack) - 1; j >= 0; j--)
     234:	f3af 8000 	nop.w
            f->cL *= s; f->cB *= s; f->cH *= s;
     238:	f3af 8000 	nop.w
     23c:	f3af 8000 	nop.w

00000240 <sawTick>:
     240:	4b12      	ldr	r3, [pc, #72]	; (28c <sawTick+0x4c>)
     242:	b570      	push	{r4, r5, r6, lr}
     244:	4616      	mov	r6, r2
     246:	b082      	sub	sp, #8
     248:	4604      	mov	r4, r0
     24a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            f->cL = 1.0f;
     24e:	460d      	mov	r5, r1
     250:	9001      	str	r0, [sp, #4]
            f->R2 = f->invG;
     252:	f003 f9d5 	bl	3600 <__tMBSaw_setFreq_veneer>
            f->cL = 1.0f;
     256:	9801      	ldr	r0, [sp, #4]
            f->R2 = f->invG;
     258:	b95e      	cbnz	r6, 272 <sawTick+0x32>
     25a:	f003 fa65 	bl	3728 <__tMBSaw_tick_veneer>
            f->cB = f->R2;
     25e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
            break;
     262:	edd4 7a00 	vldr	s15, [r4]
    f->R2Plusg = f->R2+f->g;
     266:	eee0 7a07 	vfma.f32	s15, s0, s14
     26a:	edc4 7a00 	vstr	s15, [r4]
     26e:	b002      	add	sp, #8
     270:	bd70      	pop	{r4, r5, r6, pc}
     272:	4a07      	ldr	r2, [pc, #28]	; (290 <sawTick+0x50>)
          hsd->ErrorCode |= errorstate;
     274:	4b07      	ldr	r3, [pc, #28]	; (294 <sawTick+0x54>)
     276:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
          HAL_SD_ErrorCallback(hsd);
     27a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
     27e:	ed93 0a00 	vldr	s0, [r3]
}
     282:	f003 fa11 	bl	36a8 <__tMBSaw_sync_veneer>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
     286:	9801      	ldr	r0, [sp, #4]
     288:	e7e7      	b.n	25a <sawTick+0x1a>
     28a:	bf00      	nop
     28c:	20000734 	.word	0x20000734
     290:	080172b0 	.word	0x080172b0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
     294:	2000f358 	.word	0x2000f358
    I2C_RESET_CR2(hi2c);
     298:	f3af 8000 	nop.w
     29c:	f3af 8000 	nop.w

000002a0 <pulseTick>:
     2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    hi2c->State = HAL_I2C_STATE_READY;
     2a2:	4c16      	ldr	r4, [pc, #88]	; (2fc <pulseTick+0x5c>)
     2a4:	4617      	mov	r7, r2
    __HAL_UNLOCK(hi2c);
     2a6:	4605      	mov	r5, r0
     2a8:	460e      	mov	r6, r1
    hi2c->Mode  = HAL_I2C_MODE_NONE;
     2aa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    return HAL_OK;
     2ae:	ed2d 8b02 	vpush	{d8}
      return HAL_ERROR;
     2b2:	eeb0 8a60 	vmov.f32	s16, s1
     2b6:	4620      	mov	r0, r4
     2b8:	f003 fa5a 	bl	3770 <__tMBPulse_setFreq_veneer>
     2bc:	4620      	mov	r0, r4
     2be:	eeb0 0a48 	vmov.f32	s0, s16
     2c2:	f003 fa75 	bl	37b0 <__tMBPulse_setWidth_veneer>
     2c6:	b96f      	cbnz	r7, 2e4 <pulseTick+0x44>
     2c8:	4620      	mov	r0, r4
     2ca:	f003 fa81 	bl	37d0 <__tMBPulse_tick_veneer>
        w = (1.0f - xc2 * 0.25f + xc4 * 0.015625f) * wscale;
     2ce:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
     2d2:	edd5 7a00 	vldr	s15, [r5]
        c = 0.5f * shapeVoltage * (3.0f - (xc2));
     2d6:	eee0 7a07 	vfma.f32	s15, s0, s14
        shapeVoltage = w * (c + 0.05f * xc2) * (m_drive + 0.75f);
     2da:	ecbd 8b02 	vpop	{d8}
        w = (1.0f - xc2 * 0.25f + xc4 * 0.015625f) * wscale;
     2de:	edc5 7a00 	vstr	s15, [r5]
        shapeVoltage = w * (c + 0.05f * xc2) * (m_drive + 0.75f);
     2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2e4:	4a06      	ldr	r2, [pc, #24]	; (300 <pulseTick+0x60>)
     2e6:	4620      	mov	r0, r4
     2e8:	4b06      	ldr	r3, [pc, #24]	; (304 <pulseTick+0x64>)
        w = (1.0f - xc2 * 0.25f + xc4 * 0.015625f) * wscale;
     2ea:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        n->voltage = 100.0f * shapeVoltage;
     2ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     2f2:	ed93 0a00 	vldr	s0, [r3]
     2f6:	f003 f99b 	bl	3630 <__tMBPulse_sync_veneer>
     2fa:	e7e5      	b.n	2c8 <pulseTick+0x28>
     2fc:	20000724 	.word	0x20000724
     300:	080172b0 	.word	0x080172b0
     304:	2000f358 	.word	0x2000f358
     308:	f3af 8000 	nop.w
     30c:	f3af 8000 	nop.w
     310:	f3af 8000 	nop.w
     314:	f3af 8000 	nop.w
     318:	f3af 8000 	nop.w
     31c:	f3af 8000 	nop.w

00000320 <sineTick>:
     320:	4b09      	ldr	r3, [pc, #36]	; (348 <sineTick+0x28>)
     322:	b510      	push	{r4, lr}
     324:	4604      	mov	r4, r0
     326:	b082      	sub	sp, #8
     328:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        hspi->TxXferCount--;
     32c:	9001      	str	r0, [sp, #4]
     32e:	f003 f9e7 	bl	3700 <__tCycle_setFreq_veneer>
        initial_TxXferCount = hspi->TxXferCount;
     332:	9801      	ldr	r0, [sp, #4]
     334:	f003 f9f4 	bl	3720 <__tCycle_tick_veneer>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
     338:	edd4 7a00 	vldr	s15, [r4]
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
     33c:	ee37 0a80 	vadd.f32	s0, s15, s0
     340:	ed84 0a00 	vstr	s0, [r4]
     344:	b002      	add	sp, #8
        hspi->RxXferCount--;
     346:	bd10      	pop	{r4, pc}
     348:	20000798 	.word	0x20000798
     34c:	f3af 8000 	nop.w
     350:	f3af 8000 	nop.w
        initial_RxXferCount = hspi->RxXferCount;
     354:	f3af 8000 	nop.w
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
     358:	f3af 8000 	nop.w
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
     35c:	f3af 8000 	nop.w

00000360 <triTick>:
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
     360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     362:	4c16      	ldr	r4, [pc, #88]	; (3bc <triTick+0x5c>)
     364:	4617      	mov	r7, r2
     366:	4605      	mov	r5, r0
        hspi->TxXferCount--;
     368:	460e      	mov	r6, r1
     36a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
     36e:	ed2d 8b02 	vpush	{d8}
        hspi->pTxBuffPtr += sizeof(uint8_t);
     372:	eeb0 8a60 	vmov.f32	s16, s1
     376:	4620      	mov	r0, r4
        hspi->TxXferCount--;
     378:	f003 f93a 	bl	35f0 <__tMBTriangle_setFreq_veneer>
        initial_TxXferCount = hspi->TxXferCount;
     37c:	4620      	mov	r0, r4
     37e:	eeb0 0a48 	vmov.f32	s0, s16
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
     382:	f003 f961 	bl	3648 <__tMBTriangle_setWidth_veneer>
     386:	b96f      	cbnz	r7, 3a4 <triTick+0x44>
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
     388:	4620      	mov	r0, r4
     38a:	f003 f925 	bl	35d8 <__tMBTriangle_tick_veneer>
     38e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
        hspi->RxXferCount--;
     392:	edd5 7a00 	vldr	s15, [r5]
     396:	eee0 7a07 	vfma.f32	s15, s0, s14
     39a:	ecbd 8b02 	vpop	{d8}
     39e:	edc5 7a00 	vstr	s15, [r5]
        initial_RxXferCount = hspi->RxXferCount;
     3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a4:	4a06      	ldr	r2, [pc, #24]	; (3c0 <triTick+0x60>)
     3a6:	4620      	mov	r0, r4
    else if (n == 1) return in;
     3a8:	4b06      	ldr	r3, [pc, #24]	; (3c4 <triTick+0x64>)
float LEAF_chebyshevT(float in, int n){
     3aa:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
    if (n == 0) return 1;
     3ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     3b2:	ed93 0a00 	vldr	s0, [r3]
     3b6:	f003 f9d3 	bl	3760 <__tMBTriangle_sync_veneer>
     3ba:	e7e5      	b.n	388 <triTick+0x28>
     3bc:	2000f4c4 	.word	0x2000f4c4
    else if (n == 1) return in;
     3c0:	080172b0 	.word	0x080172b0
     3c4:	2000f358 	.word	0x2000f358
    if (n == 0) return 1;
     3c8:	f3af 8000 	nop.w
    else if (n == 1) return in;
     3cc:	f3af 8000 	nop.w
     3d0:	f3af 8000 	nop.w
     3d4:	f3af 8000 	nop.w
    if (n == 0) return 1;
     3d8:	f3af 8000 	nop.w
     3dc:	f3af 8000 	nop.w

000003e0 <userTick>:
     3e0:	4770      	bx	lr
     3e2:	bf00      	nop
}
     3e4:	f3af 8000 	nop.w
     3e8:	f3af 8000 	nop.w
     3ec:	f3af 8000 	nop.w
     3f0:	f3af 8000 	nop.w
    if (n == 0) return 1;
     3f4:	f3af 8000 	nop.w
}
     3f8:	f3af 8000 	nop.w
     3fc:	f3af 8000 	nop.w

00000400 <filter_tick>:
     400:	4b48      	ldr	r3, [pc, #288]	; (524 <filter_tick+0x124>)
     402:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     406:	4a48      	ldr	r2, [pc, #288]	; (528 <filter_tick+0x128>)
     408:	2100      	movs	r1, #0
     40a:	b530      	push	{r4, r5, lr}
     40c:	ed2d 8b04 	vpush	{d8-d9}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     410:	ed93 9a00 	vldr	s18, [r3]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
     414:	eeb0 8a40 	vmov.f32	s16, s0
     418:	7011      	strb	r1, [r2, #0]
     41a:	b083      	sub	sp, #12
     41c:	eeb4 9ae7 	vcmpe.f32	s18, s15
    hdma->State = HAL_DMA_STATE_READY;
     420:	4a42      	ldr	r2, [pc, #264]	; (52c <filter_tick+0x12c>)
  return status;
     422:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_READY;
     424:	6855      	ldr	r5, [r2, #4]
     426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    __HAL_UNLOCK(hdma);
     42a:	d91b      	bls.n	464 <filter_tick+0x64>
     42c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
    __HAL_UNLOCK(hdma);
     430:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
     434:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
    __HAL_UNLOCK(hdma);
     438:	eddf 0a3d 	vldr	s1, [pc, #244]	; 530 <filter_tick+0x130>
}
     43c:	ee77 7ae6 	vsub.f32	s15, s15, s13
      cpltlevel_mask = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
     440:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 534 <filter_tick+0x134>
     444:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 538 <filter_tick+0x138>
     448:	eee8 7a07 	vfma.f32	s15, s16, s14
     44c:	ee67 0aa0 	vmul.f32	s1, s15, s1
    return HAL_ERROR;
     450:	f003 f97e 	bl	3750 <__LEAF_clip_veneer>
}
     454:	4839      	ldr	r0, [pc, #228]	; (53c <filter_tick+0x13c>)
     456:	f003 f973 	bl	3740 <__tExpSmooth_setDest_veneer>
      hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
     45a:	4838      	ldr	r0, [pc, #224]	; (53c <filter_tick+0x13c>)
      return HAL_ERROR;
     45c:	f003 f920 	bl	36a0 <__tExpSmooth_tick_veneer>
}
     460:	ed8d 0a00 	vstr	s0, [sp]
     464:	4b36      	ldr	r3, [pc, #216]	; (540 <filter_tick+0x140>)
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
     466:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     46a:	edd3 8a00 	vldr	s17, [r3]
     46e:	eef4 8ae7 	vcmpe.f32	s17, s15
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
     472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        hdma->State = HAL_DMA_STATE_READY;
     476:	d91b      	bls.n	4b0 <filter_tick+0xb0>
     478:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
        __HAL_UNLOCK(hdma);
     47c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
     480:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
     484:	eddf 0a2a 	vldr	s1, [pc, #168]	; 530 <filter_tick+0x130>
        (void) HAL_DMA_Abort(hdma);
     488:	ee77 7ae6 	vsub.f32	s15, s15, s13
        return HAL_ERROR;
     48c:	ed9f 1a29 	vldr	s2, [pc, #164]	; 534 <filter_tick+0x134>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     490:	ed9f 0a29 	vldr	s0, [pc, #164]	; 538 <filter_tick+0x138>
     494:	eee7 7a08 	vfma.f32	s15, s14, s16
     498:	ee67 0aa0 	vmul.f32	s1, s15, s1
     49c:	f003 f958 	bl	3750 <__LEAF_clip_veneer>
     4a0:	4828      	ldr	r0, [pc, #160]	; (544 <filter_tick+0x144>)
     4a2:	f003 f94d 	bl	3740 <__tExpSmooth_setDest_veneer>
     4a6:	4827      	ldr	r0, [pc, #156]	; (544 <filter_tick+0x144>)
     4a8:	f003 f8fa 	bl	36a0 <__tExpSmooth_tick_veneer>
     4ac:	ed8d 0a01 	vstr	s0, [sp, #4]
     4b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     4b4:	4b24      	ldr	r3, [pc, #144]	; (548 <filter_tick+0x148>)
     4b6:	ed93 8a00 	vldr	s16, [r3]
     4ba:	eeb4 9ae7 	vcmpe.f32	s18, s15
     4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4c2:	dd06      	ble.n	4d2 <filter_tick+0xd2>
     4c4:	4b21      	ldr	r3, [pc, #132]	; (54c <filter_tick+0x14c>)
     4c6:	2100      	movs	r1, #0
     4c8:	ed9d 0a00 	vldr	s0, [sp]
     4cc:	4620      	mov	r0, r4
     4ce:	681b      	ldr	r3, [r3, #0]
     4d0:	4798      	blx	r3
     4d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     4d6:	ed94 0a01 	vldr	s0, [r4, #4]
     4da:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
     4de:	ed94 7a00 	vldr	s14, [r4]
     4e2:	ee77 7ac8 	vsub.f32	s15, s15, s16
     4e6:	eef4 8ae6 	vcmpe.f32	s17, s13
     4ea:	eea7 0a27 	vfma.f32	s0, s14, s15
     4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     4f2:	ed84 0a01 	vstr	s0, [r4, #4]
     4f6:	dd0a      	ble.n	50e <filter_tick+0x10e>
     4f8:	4b14      	ldr	r3, [pc, #80]	; (54c <filter_tick+0x14c>)
     4fa:	2101      	movs	r1, #1
     4fc:	ed9d 0a01 	vldr	s0, [sp, #4]
     500:	1d20      	adds	r0, r4, #4
     502:	685b      	ldr	r3, [r3, #4]
     504:	4798      	blx	r3
     506:	ed94 0a01 	vldr	s0, [r4, #4]
     50a:	ed94 7a00 	vldr	s14, [r4]
     50e:	eea8 0a07 	vfma.f32	s0, s16, s14
     512:	4b06      	ldr	r3, [pc, #24]	; (52c <filter_tick+0x12c>)
     514:	4a0e      	ldr	r2, [pc, #56]	; (550 <filter_tick+0x150>)
     516:	685b      	ldr	r3, [r3, #4]
     518:	1b5b      	subs	r3, r3, r5
     51a:	6013      	str	r3, [r2, #0]
     51c:	b003      	add	sp, #12
     51e:	ecbd 8b04 	vpop	{d8-d9}
     522:	bd30      	pop	{r4, r5, pc}
     524:	20015574 	.word	0x20015574
     528:	20012745 	.word	0x20012745
     52c:	e0001000 	.word	0xe0001000
     530:	420fb824 	.word	0x420fb824
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     534:	457ff000 	.word	0x457ff000
  return status;
     538:	00000000 	.word	0x00000000
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     53c:	20000330 	.word	0x20000330
     540:	200155ec 	.word	0x200155ec
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     544:	20000334 	.word	0x20000334
     548:	20015664 	.word	0x20015664
     54c:	20000340 	.word	0x20000340
     550:	2000f49c 	.word	0x2000f49c
    if(Timeout != HAL_MAX_DELAY)
     554:	f3af 8000 	nop.w
     558:	f3af 8000 	nop.w
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     55c:	f3af 8000 	nop.w

00000560 <lowpassTick>:
     560:	4b0d      	ldr	r3, [pc, #52]	; (598 <lowpassTick+0x38>)
     562:	b530      	push	{r4, r5, lr}
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     564:	4604      	mov	r4, r0
     566:	b083      	sub	sp, #12
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     568:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     56c:	008d      	lsls	r5, r1, #2
     56e:	9001      	str	r0, [sp, #4]
     570:	f003 f8de 	bl	3730 <__tSVF_setFreqFast_veneer>
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     574:	ed94 0a00 	vldr	s0, [r4]
     578:	9801      	ldr	r0, [sp, #4]
     57a:	f003 f851 	bl	3620 <__tSVF_tick_veneer>
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     57e:	4907      	ldr	r1, [pc, #28]	; (59c <lowpassTick+0x3c>)
     580:	ed84 0a00 	vstr	s0, [r4]
        return HAL_ERROR;
     584:	4429      	add	r1, r5
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     586:	edd1 7a00 	vldr	s15, [r1]
        __HAL_UNLOCK(hdma);
     58a:	ee27 0a80 	vmul.f32	s0, s15, s0
        hdma->State = HAL_DMA_STATE_READY;
     58e:	ed84 0a00 	vstr	s0, [r4]
        return HAL_ERROR;
     592:	b003      	add	sp, #12
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     594:	bd30      	pop	{r4, r5, pc}
     596:	bf00      	nop
     598:	20000490 	.word	0x20000490
     59c:	20000338 	.word	0x20000338

000005a0 <highpassTick>:
     5a0:	4b0d      	ldr	r3, [pc, #52]	; (5d8 <highpassTick+0x38>)
     5a2:	b530      	push	{r4, r5, lr}
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5a4:	4604      	mov	r4, r0
     5a6:	b083      	sub	sp, #12
     5a8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     5ac:	008d      	lsls	r5, r1, #2
     5ae:	9001      	str	r0, [sp, #4]
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b0:	f003 f8be 	bl	3730 <__tSVF_setFreqFast_veneer>
     5b4:	ed94 0a00 	vldr	s0, [r4]
     5b8:	9801      	ldr	r0, [sp, #4]
     5ba:	f003 f831 	bl	3620 <__tSVF_tick_veneer>
     5be:	4907      	ldr	r1, [pc, #28]	; (5dc <highpassTick+0x3c>)
     5c0:	ed84 0a00 	vstr	s0, [r4]
     5c4:	4429      	add	r1, r5
     5c6:	edd1 7a00 	vldr	s15, [r1]
	*ptr++ = (BYTE)val; val >>= 8;
     5ca:	ee27 0a80 	vmul.f32	s0, s15, s0
     5ce:	ed84 0a00 	vstr	s0, [r4]
     5d2:	b003      	add	sp, #12
     5d4:	bd30      	pop	{r4, r5, pc}
     5d6:	bf00      	nop
     5d8:	20000390 	.word	0x20000390
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     5dc:	20000338 	.word	0x20000338

000005e0 <bandpassTick>:
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     5e0:	4b0d      	ldr	r3, [pc, #52]	; (618 <bandpassTick+0x38>)
     5e2:	b530      	push	{r4, r5, lr}
     5e4:	4604      	mov	r4, r0
     5e6:	b083      	sub	sp, #12
     5e8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
		*d++ = (BYTE)val;
     5ec:	008d      	lsls	r5, r1, #2
     5ee:	9001      	str	r0, [sp, #4]
     5f0:	f003 f89e 	bl	3730 <__tSVF_setFreqFast_veneer>
     5f4:	ed94 0a00 	vldr	s0, [r4]
	*ptr++ = (BYTE)val; val >>= 8;
     5f8:	9801      	ldr	r0, [sp, #4]
     5fa:	f003 f811 	bl	3620 <__tSVF_tick_veneer>
     5fe:	4907      	ldr	r1, [pc, #28]	; (61c <bandpassTick+0x3c>)
     600:	ed84 0a00 	vstr	s0, [r4]
     604:	4429      	add	r1, r5
     606:	edd1 7a00 	vldr	s15, [r1]
     60a:	ee27 0a80 	vmul.f32	s0, s15, s0
     60e:	ed84 0a00 	vstr	s0, [r4]
	*ptr++ = (BYTE)val; val >>= 8;
     612:	b003      	add	sp, #12
     614:	bd30      	pop	{r4, r5, pc}
	*ptr++ = (BYTE)val; val >>= 8;
     616:	bf00      	nop
     618:	20000270 	.word	0x20000270
	*ptr++ = (BYTE)val;
     61c:	20000338 	.word	0x20000338

00000620 <diodeLowpassTick>:
}
     620:	4b0d      	ldr	r3, [pc, #52]	; (658 <diodeLowpassTick+0x38>)
	const BYTE *s = (const BYTE*)src;
     622:	b530      	push	{r4, r5, lr}
     624:	4604      	mov	r4, r0
     626:	b083      	sub	sp, #12
     628:	eb03 0081 	add.w	r0, r3, r1, lsl #2
			*d++ = *s++;
     62c:	008d      	lsls	r5, r1, #2
		} while (--cnt);
     62e:	9001      	str	r0, [sp, #4]
			*d++ = *s++;
     630:	f003 f84a 	bl	36c8 <__tDiodeFilter_setFreqFast_veneer>
		} while (--cnt);
     634:	ed94 0a00 	vldr	s0, [r4]

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
     638:	9801      	ldr	r0, [sp, #4]
     63a:	f003 f869 	bl	3710 <__tDiodeFilter_tick_veneer>
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
     63e:	4907      	ldr	r1, [pc, #28]	; (65c <diodeLowpassTick+0x3c>)
     640:	ed84 0a00 	vstr	s0, [r4]
     644:	4429      	add	r1, r5
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     646:	edd1 7a00 	vldr	s15, [r1]
     64a:	ee27 0a80 	vmul.f32	s0, s15, s0
     64e:	ed84 0a00 	vstr	s0, [r4]
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     652:	b003      	add	sp, #12
		*d++ = (BYTE)val;
     654:	bd30      	pop	{r4, r5, pc}
     656:	bf00      	nop
     658:	200002fc 	.word	0x200002fc
     65c:	20000338 	.word	0x20000338

00000660 <VZpeakTick>:
     660:	4b08      	ldr	r3, [pc, #32]	; (684 <VZpeakTick+0x24>)
	*ptr++ = (BYTE)val; val >>= 8;
     662:	b510      	push	{r4, lr}
			pte[PTE_Boot] = 0;					/* Boot indicator */
			pte[PTE_StHead] = 1;				/* Start head */
			pte[PTE_StSec] = 1;					/* Start sector */
			pte[PTE_StCyl] = 0;					/* Start cylinder */
			pte[PTE_System] = sys;				/* System type */
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     664:	4604      	mov	r4, r0
     666:	b082      	sub	sp, #8
			pte[PTE_System] = sys;				/* System type */
     668:	eb03 0081 	add.w	r0, r3, r1, lsl #2
	*ptr++ = (BYTE)val; val >>= 8;
     66c:	9001      	str	r0, [sp, #4]
     66e:	f002 ffb7 	bl	35e0 <__tVZFilter_setFreqFast_veneer>
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     672:	9801      	ldr	r0, [sp, #4]
     674:	ed94 0a00 	vldr	s0, [r4]
	*ptr++ = (BYTE)val; val >>= 8;
     678:	f003 f83a 	bl	36f0 <__tVZFilter_tickEfficient_veneer>
	*ptr++ = (BYTE)val; val >>= 8;
     67c:	ed84 0a00 	vstr	s0, [r4]
     680:	b002      	add	sp, #8
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     682:	bd10      	pop	{r4, pc}
     684:	20000264 	.word	0x20000264
			pte[PTE_EdHead] = 254;				/* End head */
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     688:	f3af 8000 	nop.w
	*ptr++ = (BYTE)val; val >>= 8;
     68c:	f3af 8000 	nop.w
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     690:	f3af 8000 	nop.w
			pte[PTE_EdHead] = 254;				/* End head */
     694:	f3af 8000 	nop.w
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     698:	f3af 8000 	nop.w
	*ptr++ = (BYTE)val; val >>= 8;
     69c:	f3af 8000 	nop.w

000006a0 <VZlowshelfTick>:
	*ptr++ = (BYTE)val;
     6a0:	4b08      	ldr	r3, [pc, #32]	; (6c4 <VZlowshelfTick+0x24>)
     6a2:	b510      	push	{r4, lr}
	*ptr++ = (BYTE)val; val >>= 8;
     6a4:	4604      	mov	r4, r0
     6a6:	b082      	sub	sp, #8
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     6a8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6ac:	9001      	str	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
     6ae:	f002 ff97 	bl	35e0 <__tVZFilter_setFreqFast_veneer>
			pte[PTE_Boot] = 0;					/* Boot indicator */
     6b2:	9801      	ldr	r0, [sp, #4]
     6b4:	ed94 0a00 	vldr	s0, [r4]
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     6b8:	f003 f81a 	bl	36f0 <__tVZFilter_tickEfficient_veneer>
     6bc:	ed84 0a00 	vstr	s0, [r4]
     6c0:	b002      	add	sp, #8
     6c2:	bd10      	pop	{r4, pc}
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     6c4:	2000025c 	.word	0x2000025c
     6c8:	f3af 8000 	nop.w
     6cc:	f3af 8000 	nop.w
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     6d0:	f3af 8000 	nop.w
     6d4:	f3af 8000 	nop.w
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     6d8:	f3af 8000 	nop.w
			sys = 0x0C;		/* FAT32X */
     6dc:	f3af 8000 	nop.w

000006e0 <VZhighshelfTick>:
	const BYTE *s = (const BYTE*)src;
     6e0:	4b08      	ldr	r3, [pc, #32]	; (704 <VZhighshelfTick+0x24>)
     6e2:	b510      	push	{r4, lr}
     6e4:	4604      	mov	r4, r0
			*d++ = *s++;
     6e6:	b082      	sub	sp, #8
     6e8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     6ec:	9001      	str	r0, [sp, #4]
     6ee:	f002 ff77 	bl	35e0 <__tVZFilter_setFreqFast_veneer>
		} while (--cnt);
     6f2:	9801      	ldr	r0, [sp, #4]
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
     6f4:	ed94 0a00 	vldr	s0, [r4]
     6f8:	f002 fffa 	bl	36f0 <__tVZFilter_tickEfficient_veneer>
     6fc:	ed84 0a00 	vstr	s0, [r4]
     700:	b002      	add	sp, #8
     702:	bd10      	pop	{r4, pc}
     704:	20000254 	.word	0x20000254
     708:	f3af 8000 	nop.w
     70c:	f3af 8000 	nop.w
     710:	f3af 8000 	nop.w
     714:	f3af 8000 	nop.w
     718:	f3af 8000 	nop.w
     71c:	f3af 8000 	nop.w

00000720 <VZbandrejectTick>:
     720:	4b0d      	ldr	r3, [pc, #52]	; (758 <VZbandrejectTick+0x38>)
     722:	b530      	push	{r4, r5, lr}
     724:	4604      	mov	r4, r0
     726:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v], cutoff);
     728:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     72c:	008d      	lsls	r5, r1, #2
     72e:	9001      	str	r0, [sp, #4]
     730:	f002 ff56 	bl	35e0 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v], *sample);
     734:	ed94 0a00 	vldr	s0, [r4]
     738:	9801      	ldr	r0, [sp, #4]
     73a:	f002 ffd9 	bl	36f0 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v];
     73e:	4907      	ldr	r1, [pc, #28]	; (75c <VZbandrejectTick+0x3c>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v], *sample);
     740:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v];
     744:	4429      	add	r1, r5
     746:	edd1 7a00 	vldr	s15, [r1]
     74a:	ee27 0a80 	vmul.f32	s0, s15, s0
     74e:	ed84 0a00 	vstr	s0, [r4]
}
     752:	b003      	add	sp, #12
     754:	bd30      	pop	{r4, r5, pc}
     756:	bf00      	nop
     758:	2000024c 	.word	0x2000024c
     75c:	20000338 	.word	0x20000338

00000760 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v], cutoff);
     760:	4b0d      	ldr	r3, [pc, #52]	; (798 <LadderLowpassTick+0x38>)
{
     762:	b530      	push	{r4, r5, lr}
     764:	4604      	mov	r4, r0
     766:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v], cutoff);
     768:	eb03 0081 	add.w	r0, r3, r1, lsl #2
     76c:	008d      	lsls	r5, r1, #2
     76e:	9001      	str	r0, [sp, #4]
     770:	f002 ff5a 	bl	3628 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v], *sample);
     774:	ed94 0a00 	vldr	s0, [r4]
     778:	9801      	ldr	r0, [sp, #4]
     77a:	f002 ff99 	bl	36b0 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v];
     77e:	4907      	ldr	r1, [pc, #28]	; (79c <LadderLowpassTick+0x3c>)
	*sample = tLadderFilter_tick(&Ladderfilter[v], *sample);
     780:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v];
     784:	4429      	add	r1, r5
     786:	edd1 7a00 	vldr	s15, [r1]
     78a:	ee27 0a80 	vmul.f32	s0, s15, s0
     78e:	ed84 0a00 	vstr	s0, [r4]
}
     792:	b003      	add	sp, #12
     794:	bd30      	pop	{r4, r5, pc}
     796:	bf00      	nop
     798:	20000244 	.word	0x20000244
     79c:	20000338 	.word	0x20000338

000007a0 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal > 0.5f) ///check for value of 1 since this is a float
     7a0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     7a4:	4a0f      	ldr	r2, [pc, #60]	; (7e4 <setFreqMultPitch+0x44>)
     7a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     7aa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     7ae:	3320      	adds	r3, #32
     7b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     7b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     7b8:	ed93 7a01 	vldr	s14, [r3, #4]
     7bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
     7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     7c4:	dc0d      	bgt.n	7e2 <setFreqMultPitch+0x42>
		freqMult[osc] = powf(1.059463094359295f, pitch); //TODO: is this wrong??
     7c6:	eef0 0a40 	vmov.f32	s1, s0
     7ca:	ed9f 0a07 	vldr	s0, [pc, #28]	; 7e8 <setFreqMultPitch+0x48>
{
     7ce:	b510      	push	{r4, lr}
     7d0:	4604      	mov	r4, r0
		freqMult[osc] = powf(1.059463094359295f, pitch); //TODO: is this wrong??
     7d2:	f002 ff3d 	bl	3650 <__powf_veneer>
     7d6:	4805      	ldr	r0, [pc, #20]	; (7ec <setFreqMultPitch+0x4c>)
     7d8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
     7dc:	ed84 0a00 	vstr	s0, [r4]
}
     7e0:	bd10      	pop	{r4, pc}
     7e2:	4770      	bx	lr
     7e4:	20014e04 	.word	0x20014e04
     7e8:	3f879c7d 	.word	0x3f879c7d
     7ec:	20000354 	.word	0x20000354
     7f0:	f3af 8000 	nop.w
     7f4:	f3af 8000 	nop.w
     7f8:	f3af 8000 	nop.w
     7fc:	f3af 8000 	nop.w

00000800 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal > 0.5f) ///check for value of 1 since this is a float
     800:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     804:	4a16      	ldr	r2, [pc, #88]	; (860 <setFreqMultHarm+0x60>)
     806:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     80a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
     80e:	3320      	adds	r3, #32
     810:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     814:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     818:	ed93 7a01 	vldr	s14, [r3, #4]
     81c:	eeb4 7ae7 	vcmpe.f32	s14, s15
     820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     824:	dd01      	ble.n	82a <setFreqMultHarm+0x2a>
		harm = roundf(harm);
     826:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
     82a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc] = (harm + 1);
     82e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
     832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     836:	db07      	blt.n	848 <setFreqMultHarm+0x48>
		freqMult[osc] = (harm + 1);
     838:	4b0a      	ldr	r3, [pc, #40]	; (864 <setFreqMultHarm+0x64>)
     83a:	ee30 0a27 	vadd.f32	s0, s0, s15
     83e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     842:	ed80 0a00 	vstr	s0, [r0]
}
     846:	4770      	bx	lr
		freqMult[osc] = (1.0f / fabsf((harm - 1)));
     848:	ee30 0a67 	vsub.f32	s0, s0, s15
     84c:	4b05      	ldr	r3, [pc, #20]	; (864 <setFreqMultHarm+0x64>)
     84e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     852:	eeb0 7ac0 	vabs.f32	s14, s0
     856:	ee87 0a87 	vdiv.f32	s0, s15, s14
     85a:	ed80 0a00 	vstr	s0, [r0]
}
     85e:	4770      	bx	lr
     860:	20014e04 	.word	0x20014e04
     864:	20000354 	.word	0x20000354
     868:	f3af 8000 	nop.w
     86c:	f3af 8000 	nop.w
     870:	f3af 8000 	nop.w
     874:	f3af 8000 	nop.w
     878:	f3af 8000 	nop.w
     87c:	f3af 8000 	nop.w

00000880 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v], q);
     880:	4b02      	ldr	r3, [pc, #8]	; (88c <lowpassSetQ+0xc>)
     882:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     886:	f002 bee7 	b.w	3658 <__tSVF_setQ_veneer>
     88a:	bf00      	nop
     88c:	20000490 	.word	0x20000490
     890:	f3af 8000 	nop.w
     894:	f3af 8000 	nop.w
     898:	f3af 8000 	nop.w
     89c:	f3af 8000 	nop.w

000008a0 <highpassSetQ>:
    tSVF_setQ(&highpass[v], q);
     8a0:	4b02      	ldr	r3, [pc, #8]	; (8ac <highpassSetQ+0xc>)
     8a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     8a6:	f002 bed7 	b.w	3658 <__tSVF_setQ_veneer>
     8aa:	bf00      	nop
     8ac:	20000390 	.word	0x20000390
     8b0:	f3af 8000 	nop.w
     8b4:	f3af 8000 	nop.w
     8b8:	f3af 8000 	nop.w
     8bc:	f3af 8000 	nop.w

000008c0 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v], q);
     8c0:	4b02      	ldr	r3, [pc, #8]	; (8cc <bandpassSetQ+0xc>)
     8c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     8c6:	f002 bec7 	b.w	3658 <__tSVF_setQ_veneer>
     8ca:	bf00      	nop
     8cc:	20000270 	.word	0x20000270
     8d0:	f3af 8000 	nop.w
     8d4:	f3af 8000 	nop.w
     8d8:	f3af 8000 	nop.w
     8dc:	f3af 8000 	nop.w

000008e0 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v], q);
     8e0:	4b02      	ldr	r3, [pc, #8]	; (8ec <diodeLowpassSetQ+0xc>)
     8e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     8e6:	f002 bf3f 	b.w	3768 <__tDiodeFilter_setQ_veneer>
     8ea:	bf00      	nop
     8ec:	200002fc 	.word	0x200002fc
     8f0:	f3af 8000 	nop.w
     8f4:	f3af 8000 	nop.w
     8f8:	f3af 8000 	nop.w
     8fc:	f3af 8000 	nop.w

00000900 <VZpeakSetQ>:
	tVZFilter_setResonance(&VZfilterPeak[v], q);
     900:	4b02      	ldr	r3, [pc, #8]	; (90c <VZpeakSetQ+0xc>)
     902:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     906:	f002 bf1f 	b.w	3748 <__tVZFilter_setResonance_veneer>
     90a:	bf00      	nop
     90c:	20000264 	.word	0x20000264
     910:	f3af 8000 	nop.w
     914:	f3af 8000 	nop.w
     918:	f3af 8000 	nop.w
     91c:	f3af 8000 	nop.w

00000920 <VZlowshelfSetQ>:
	tVZFilter_setResonance(&VZfilterLS[v], q);
     920:	4b02      	ldr	r3, [pc, #8]	; (92c <VZlowshelfSetQ+0xc>)
     922:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     926:	f002 bf0f 	b.w	3748 <__tVZFilter_setResonance_veneer>
     92a:	bf00      	nop
     92c:	2000025c 	.word	0x2000025c
     930:	f3af 8000 	nop.w
     934:	f3af 8000 	nop.w
     938:	f3af 8000 	nop.w
     93c:	f3af 8000 	nop.w

00000940 <VZhighshelfSetQ>:
	tVZFilter_setResonance(&VZfilterHS[v], q);
     940:	4b02      	ldr	r3, [pc, #8]	; (94c <VZhighshelfSetQ+0xc>)
     942:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     946:	f002 beff 	b.w	3748 <__tVZFilter_setResonance_veneer>
     94a:	bf00      	nop
     94c:	20000254 	.word	0x20000254
     950:	f3af 8000 	nop.w
     954:	f3af 8000 	nop.w
     958:	f3af 8000 	nop.w
     95c:	f3af 8000 	nop.w

00000960 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v], q);
     960:	4b02      	ldr	r3, [pc, #8]	; (96c <VZbandrejectSetQ+0xc>)
     962:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     966:	f002 beef 	b.w	3748 <__tVZFilter_setResonance_veneer>
     96a:	bf00      	nop
     96c:	2000024c 	.word	0x2000024c
     970:	f3af 8000 	nop.w
     974:	f3af 8000 	nop.w
     978:	f3af 8000 	nop.w
     97c:	f3af 8000 	nop.w

00000980 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v], q);
     980:	4b02      	ldr	r3, [pc, #8]	; (98c <LadderLowpassSetQ+0xc>)
     982:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     986:	f002 be9b 	b.w	36c0 <__tLadderFilter_setQ_veneer>
     98a:	bf00      	nop
     98c:	20000244 	.word	0x20000244
     990:	f3af 8000 	nop.w
     994:	f3af 8000 	nop.w
     998:	f3af 8000 	nop.w
     99c:	f3af 8000 	nop.w

000009a0 <lowpassSetGain>:
    filterGain[v] = fasterdbtoa((gain * 24.0f) - 12.0f);
     9a0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     9a4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
     9a8:	b510      	push	{r4, lr}
    filterGain[v] = fasterdbtoa((gain * 24.0f) - 12.0f);
     9aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
     9ae:	4604      	mov	r4, r0
    filterGain[v] = fasterdbtoa((gain * 24.0f) - 12.0f);
     9b0:	eeb0 0a67 	vmov.f32	s0, s15
     9b4:	f002 fe58 	bl	3668 <__fasterdbtoa_veneer>
     9b8:	4802      	ldr	r0, [pc, #8]	; (9c4 <lowpassSetGain+0x24>)
     9ba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     9be:	ed80 0a00 	vstr	s0, [r0]
}
     9c2:	bd10      	pop	{r4, pc}
     9c4:	20000338 	.word	0x20000338
     9c8:	f3af 8000 	nop.w
     9cc:	f3af 8000 	nop.w
     9d0:	f3af 8000 	nop.w
     9d4:	f3af 8000 	nop.w
     9d8:	f3af 8000 	nop.w
     9dc:	f3af 8000 	nop.w

000009e0 <highpassSetGain>:
     9e0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     9e4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
     9e8:	b510      	push	{r4, lr}
     9ea:	eee0 7a07 	vfma.f32	s15, s0, s14
     9ee:	4604      	mov	r4, r0
     9f0:	eeb0 0a67 	vmov.f32	s0, s15
     9f4:	f002 fe38 	bl	3668 <__fasterdbtoa_veneer>
     9f8:	4802      	ldr	r0, [pc, #8]	; (a04 <highpassSetGain+0x24>)
     9fa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     9fe:	ed80 0a00 	vstr	s0, [r0]
     a02:	bd10      	pop	{r4, pc}
     a04:	20000338 	.word	0x20000338
     a08:	f3af 8000 	nop.w
     a0c:	f3af 8000 	nop.w
     a10:	f3af 8000 	nop.w
     a14:	f3af 8000 	nop.w
     a18:	f3af 8000 	nop.w
     a1c:	f3af 8000 	nop.w

00000a20 <bandpassSetGain>:
     a20:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     a24:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
     a28:	b510      	push	{r4, lr}
     a2a:	eee0 7a07 	vfma.f32	s15, s0, s14
     a2e:	4604      	mov	r4, r0
     a30:	eeb0 0a67 	vmov.f32	s0, s15
     a34:	f002 fe18 	bl	3668 <__fasterdbtoa_veneer>
     a38:	4802      	ldr	r0, [pc, #8]	; (a44 <bandpassSetGain+0x24>)
     a3a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     a3e:	ed80 0a00 	vstr	s0, [r0]
     a42:	bd10      	pop	{r4, pc}
     a44:	20000338 	.word	0x20000338
     a48:	f3af 8000 	nop.w
     a4c:	f3af 8000 	nop.w
     a50:	f3af 8000 	nop.w
     a54:	f3af 8000 	nop.w
     a58:	f3af 8000 	nop.w
     a5c:	f3af 8000 	nop.w

00000a60 <diodeLowpassSetGain>:
     a60:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     a64:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
     a68:	b510      	push	{r4, lr}
     a6a:	eee0 7a07 	vfma.f32	s15, s0, s14
     a6e:	4604      	mov	r4, r0
     a70:	eeb0 0a67 	vmov.f32	s0, s15
     a74:	f002 fdf8 	bl	3668 <__fasterdbtoa_veneer>
     a78:	4802      	ldr	r0, [pc, #8]	; (a84 <diodeLowpassSetGain+0x24>)
     a7a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     a7e:	ed80 0a00 	vstr	s0, [r0]
     a82:	bd10      	pop	{r4, pc}
     a84:	20000338 	.word	0x20000338
     a88:	f3af 8000 	nop.w
     a8c:	f3af 8000 	nop.w
     a90:	f3af 8000 	nop.w
     a94:	f3af 8000 	nop.w
     a98:	f3af 8000 	nop.w
     a9c:	f3af 8000 	nop.w

00000aa0 <VZpeakSetGain>:
	 tVZFilter_setGain(&VZfilterPeak[v], fasterdbtoa((gain * 50.f) - 25.f));
     aa0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
     aa4:	ed9f 7a08 	vldr	s14, [pc, #32]	; ac8 <VZpeakSetGain+0x28>
{
     aa8:	b510      	push	{r4, lr}
	 tVZFilter_setGain(&VZfilterPeak[v], fasterdbtoa((gain * 50.f) - 25.f));
     aaa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
     aae:	4604      	mov	r4, r0
	 tVZFilter_setGain(&VZfilterPeak[v], fasterdbtoa((gain * 50.f) - 25.f));
     ab0:	eeb0 0a67 	vmov.f32	s0, s15
     ab4:	f002 fdd8 	bl	3668 <__fasterdbtoa_veneer>
     ab8:	4804      	ldr	r0, [pc, #16]	; (acc <VZpeakSetGain+0x2c>)
     aba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
     abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	 tVZFilter_setGain(&VZfilterPeak[v], fasterdbtoa((gain * 50.f) - 25.f));
     ac2:	f002 be71 	b.w	37a8 <__tVZFilter_setGain_veneer>
     ac6:	bf00      	nop
     ac8:	42480000 	.word	0x42480000
     acc:	20000264 	.word	0x20000264
     ad0:	f3af 8000 	nop.w
     ad4:	f3af 8000 	nop.w
     ad8:	f3af 8000 	nop.w
     adc:	f3af 8000 	nop.w

00000ae0 <VZlowshelfSetGain>:
	tVZFilter_setGain(&VZfilterLS[v], fasterdbtoa((gain * 50.f) - 25.f));
     ae0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
     ae4:	ed9f 7a08 	vldr	s14, [pc, #32]	; b08 <VZlowshelfSetGain+0x28>
{
     ae8:	b510      	push	{r4, lr}
	tVZFilter_setGain(&VZfilterLS[v], fasterdbtoa((gain * 50.f) - 25.f));
     aea:	eee0 7a07 	vfma.f32	s15, s0, s14
{
     aee:	4604      	mov	r4, r0
	tVZFilter_setGain(&VZfilterLS[v], fasterdbtoa((gain * 50.f) - 25.f));
     af0:	eeb0 0a67 	vmov.f32	s0, s15
     af4:	f002 fdb8 	bl	3668 <__fasterdbtoa_veneer>
     af8:	4804      	ldr	r0, [pc, #16]	; (b0c <VZlowshelfSetGain+0x2c>)
     afa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
     afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&VZfilterLS[v], fasterdbtoa((gain * 50.f) - 25.f));
     b02:	f002 be51 	b.w	37a8 <__tVZFilter_setGain_veneer>
     b06:	bf00      	nop
     b08:	42480000 	.word	0x42480000
     b0c:	2000025c 	.word	0x2000025c
     b10:	f3af 8000 	nop.w
     b14:	f3af 8000 	nop.w
     b18:	f3af 8000 	nop.w
     b1c:	f3af 8000 	nop.w

00000b20 <VZhighshelfSetGain>:
     b20:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
     b24:	ed9f 7a08 	vldr	s14, [pc, #32]	; b48 <VZhighshelfSetGain+0x28>
     b28:	b510      	push	{r4, lr}
     b2a:	eee0 7a07 	vfma.f32	s15, s0, s14
     b2e:	4604      	mov	r4, r0
     b30:	eeb0 0a67 	vmov.f32	s0, s15
     b34:	f002 fd98 	bl	3668 <__fasterdbtoa_veneer>
     b38:	4804      	ldr	r0, [pc, #16]	; (b4c <VZhighshelfSetGain+0x2c>)
     b3a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b42:	f002 be31 	b.w	37a8 <__tVZFilter_setGain_veneer>
     b46:	bf00      	nop
     b48:	42480000 	.word	0x42480000
     b4c:	2000025c 	.word	0x2000025c
     b50:	f3af 8000 	nop.w
     b54:	f3af 8000 	nop.w
     b58:	f3af 8000 	nop.w
     b5c:	f3af 8000 	nop.w

00000b60 <VZbandrejectSetGain>:
     b60:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     b64:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
     b68:	b510      	push	{r4, lr}
     b6a:	eee0 7a07 	vfma.f32	s15, s0, s14
     b6e:	4604      	mov	r4, r0
     b70:	eeb0 0a67 	vmov.f32	s0, s15
     b74:	f002 fd78 	bl	3668 <__fasterdbtoa_veneer>
     b78:	4802      	ldr	r0, [pc, #8]	; (b84 <VZbandrejectSetGain+0x24>)
     b7a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     b7e:	ed80 0a00 	vstr	s0, [r0]
     b82:	bd10      	pop	{r4, pc}
     b84:	20000338 	.word	0x20000338
     b88:	f3af 8000 	nop.w
     b8c:	f3af 8000 	nop.w
     b90:	f3af 8000 	nop.w
     b94:	f3af 8000 	nop.w
     b98:	f3af 8000 	nop.w
     b9c:	f3af 8000 	nop.w

00000ba0 <LadderLowpassSetGain>:
     ba0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
     ba4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
     ba8:	b510      	push	{r4, lr}
     baa:	eee0 7a07 	vfma.f32	s15, s0, s14
     bae:	4604      	mov	r4, r0
     bb0:	eeb0 0a67 	vmov.f32	s0, s15
     bb4:	f002 fd58 	bl	3668 <__fasterdbtoa_veneer>
     bb8:	4802      	ldr	r0, [pc, #8]	; (bc4 <LadderLowpassSetGain+0x24>)
     bba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     bbe:	ed80 0a00 	vstr	s0, [r0]
     bc2:	bd10      	pop	{r4, pc}
     bc4:	20000338 	.word	0x20000338
     bc8:	f3af 8000 	nop.w
     bcc:	f3af 8000 	nop.w
     bd0:	f3af 8000 	nop.w
     bd4:	f3af 8000 	nop.w
     bd8:	f3af 8000 	nop.w
     bdc:	f3af 8000 	nop.w

00000be0 <envelope_tick>:
{
     be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	interruptChecker = 0;
     be2:	4a0b      	ldr	r2, [pc, #44]	; (c10 <envelope_tick+0x30>)
     be4:	2100      	movs	r1, #0
	uint32_t tempCount1 = DWT->CYCCNT;
     be6:	4b0b      	ldr	r3, [pc, #44]	; (c14 <envelope_tick+0x34>)
     be8:	4c0b      	ldr	r4, [pc, #44]	; (c18 <envelope_tick+0x38>)
	interruptChecker = 0;
     bea:	7011      	strb	r1, [r2, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
     bec:	4d0b      	ldr	r5, [pc, #44]	; (c1c <envelope_tick+0x3c>)
     bee:	f104 0610 	add.w	r6, r4, #16
     bf2:	685f      	ldr	r7, [r3, #4]
		float value = tADSRT_tick(&envs[v]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
     bf4:	4628      	mov	r0, r5
	for (int v = 0; v < NUM_ENV; v++)
     bf6:	3504      	adds	r5, #4
		float value = tADSRT_tick(&envs[v]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
     bf8:	f002 fd1e 	bl	3638 <__tADSRT_tick_veneer>
		sourceValues[ENV_SOURCE_OFFSET + v] = value;
     bfc:	eca4 0a01 	vstmia	r4!, {s0}
	for (int v = 0; v < NUM_ENV; v++)
     c00:	42b4      	cmp	r4, r6
     c02:	d1f7      	bne.n	bf4 <envelope_tick+0x14>
	timeEnv = DWT->CYCCNT - tempCount1;
     c04:	4b03      	ldr	r3, [pc, #12]	; (c14 <envelope_tick+0x34>)
     c06:	4a06      	ldr	r2, [pc, #24]	; (c20 <envelope_tick+0x40>)
     c08:	685b      	ldr	r3, [r3, #4]
     c0a:	1bdb      	subs	r3, r3, r7
     c0c:	6013      	str	r3, [r2, #0]
}
     c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c10:	20012745 	.word	0x20012745
     c14:	e0001000 	.word	0xe0001000
     c18:	2000f3a8 	.word	0x2000f3a8
     c1c:	2000031c 	.word	0x2000031c
     c20:	2000f498 	.word	0x2000f498
     c24:	f3af 8000 	nop.w
     c28:	f3af 8000 	nop.w
     c2c:	f3af 8000 	nop.w
     c30:	f3af 8000 	nop.w
     c34:	f3af 8000 	nop.w
     c38:	f3af 8000 	nop.w
     c3c:	f3af 8000 	nop.w

00000c40 <lfo_tick>:
{
     c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	interruptChecker = 0;
     c44:	4a14      	ldr	r2, [pc, #80]	; (c98 <lfo_tick+0x58>)
     c46:	2400      	movs	r4, #0
	uint32_t tempCount1 = DWT->CYCCNT;
     c48:	4b14      	ldr	r3, [pc, #80]	; (c9c <lfo_tick+0x5c>)
{
     c4a:	b083      	sub	sp, #12
	interruptChecker = 0;
     c4c:	7014      	strb	r4, [r2, #0]
		float sample = 0.0f;
     c4e:	2700      	movs	r7, #0
     c50:	4e13      	ldr	r6, [pc, #76]	; (ca0 <lfo_tick+0x60>)
     c52:	4d14      	ldr	r5, [pc, #80]	; (ca4 <lfo_tick+0x64>)
	uint32_t tempCount1 = DWT->CYCCNT;
     c54:	f8d3 8004 	ldr.w	r8, [r3, #4]
			lfoShapeTick[i](&sample,i);
     c58:	f8df 9050 	ldr.w	r9, [pc, #80]	; cac <lfo_tick+0x6c>
		if (lfoOn[i])
     c5c:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i);
     c60:	4621      	mov	r1, r4
     c62:	a801      	add	r0, sp, #4
		float sample = 0.0f;
     c64:	9701      	str	r7, [sp, #4]
		if (lfoOn[i])
     c66:	b18b      	cbz	r3, c8c <lfo_tick+0x4c>
			lfoShapeTick[i](&sample,i);
     c68:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
     c6c:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i);
     c6e:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i] = sample;
     c70:	9b01      	ldr	r3, [sp, #4]
	for (int i = 0; i < NUM_LFOS; i++)
     c72:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i] = sample;
     c74:	f845 3b04 	str.w	r3, [r5], #4
	for (int i = 0; i < NUM_LFOS; i++)
     c78:	d1f0      	bne.n	c5c <lfo_tick+0x1c>
	timeLFO = DWT->CYCCNT - tempCount1;
     c7a:	4b08      	ldr	r3, [pc, #32]	; (c9c <lfo_tick+0x5c>)
     c7c:	4a0a      	ldr	r2, [pc, #40]	; (ca8 <lfo_tick+0x68>)
     c7e:	685b      	ldr	r3, [r3, #4]
     c80:	eba3 0308 	sub.w	r3, r3, r8
     c84:	6013      	str	r3, [r2, #0]
}
     c86:	b003      	add	sp, #12
     c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < NUM_LFOS; i++)
     c8c:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i] = sample;
     c8e:	f845 7b04 	str.w	r7, [r5], #4
	for (int i = 0; i < NUM_LFOS; i++)
     c92:	2c04      	cmp	r4, #4
     c94:	d1e2      	bne.n	c5c <lfo_tick+0x1c>
     c96:	e7f0      	b.n	c7a <lfo_tick+0x3a>
     c98:	20012745 	.word	0x20012745
     c9c:	e0001000 	.word	0xe0001000
     ca0:	2000041c 	.word	0x2000041c
     ca4:	2000f3b8 	.word	0x2000f3b8
     ca8:	2000f4a4 	.word	0x2000f4a4
     cac:	20000450 	.word	0x20000450
     cb0:	f3af 8000 	nop.w
     cb4:	f3af 8000 	nop.w
     cb8:	f3af 8000 	nop.w
     cbc:	f3af 8000 	nop.w

00000cc0 <setEnvelopeAttack>:
	tADSRT_setAttack(&envs[v], a);
     cc0:	4b02      	ldr	r3, [pc, #8]	; (ccc <setEnvelopeAttack+0xc>)
     cc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     cc6:	f002 bce7 	b.w	3698 <__tADSRT_setAttack_veneer>
     cca:	bf00      	nop
     ccc:	2000031c 	.word	0x2000031c
     cd0:	f3af 8000 	nop.w
     cd4:	f3af 8000 	nop.w
     cd8:	f3af 8000 	nop.w
     cdc:	f3af 8000 	nop.w

00000ce0 <setEnvelopeDecay>:
	tADSRT_setDecay(&envs[v], d);
     ce0:	4b02      	ldr	r3, [pc, #8]	; (cec <setEnvelopeDecay+0xc>)
     ce2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     ce6:	f002 bd37 	b.w	3758 <__tADSRT_setDecay_veneer>
     cea:	bf00      	nop
     cec:	2000031c 	.word	0x2000031c
     cf0:	f3af 8000 	nop.w
     cf4:	f3af 8000 	nop.w
     cf8:	f3af 8000 	nop.w
     cfc:	f3af 8000 	nop.w

00000d00 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v], s);
     d00:	4b02      	ldr	r3, [pc, #8]	; (d0c <setEnvelopeSustain+0xc>)
     d02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     d06:	f002 bd67 	b.w	37d8 <__tADSRT_setSustain_veneer>
     d0a:	bf00      	nop
     d0c:	2000031c 	.word	0x2000031c
     d10:	f3af 8000 	nop.w
     d14:	f3af 8000 	nop.w
     d18:	f3af 8000 	nop.w
     d1c:	f3af 8000 	nop.w

00000d20 <setEnvelopeRelease>:
	tADSRT_setRelease(&envs[v], r);
     d20:	4b02      	ldr	r3, [pc, #8]	; (d2c <setEnvelopeRelease+0xc>)
     d22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     d26:	f002 bc73 	b.w	3610 <__tADSRT_setRelease_veneer>
     d2a:	bf00      	nop
     d2c:	2000031c 	.word	0x2000031c
     d30:	f3af 8000 	nop.w
     d34:	f3af 8000 	nop.w
     d38:	f3af 8000 	nop.w
     d3c:	f3af 8000 	nop.w

00000d40 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v], 0.99995f + 0.00005f*(1.f-leak));
     d40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     d44:	eddf 6a07 	vldr	s13, [pc, #28]	; d64 <setEnvelopeLeak+0x24>
     d48:	ed9f 7a07 	vldr	s14, [pc, #28]	; d68 <setEnvelopeLeak+0x28>
     d4c:	4b07      	ldr	r3, [pc, #28]	; (d6c <setEnvelopeLeak+0x2c>)
     d4e:	ee77 7ac0 	vsub.f32	s15, s15, s0
     d52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     d56:	eea7 7aa6 	vfma.f32	s14, s15, s13
     d5a:	eeb0 0a47 	vmov.f32	s0, s14
     d5e:	f002 bc7f 	b.w	3660 <__tADSRT_setLeakFactor_veneer>
     d62:	bf00      	nop
     d64:	3851b717 	.word	0x3851b717
     d68:	3f7ffcb9 	.word	0x3f7ffcb9
     d6c:	2000031c 	.word	0x2000031c
     d70:	f3af 8000 	nop.w
     d74:	f3af 8000 	nop.w
     d78:	f3af 8000 	nop.w
     d7c:	f3af 8000 	nop.w

00000d80 <setAmp>:
	amplitude = amp;
     d80:	4b01      	ldr	r3, [pc, #4]	; (d88 <setAmp+0x8>)
     d82:	ed83 0a00 	vstr	s0, [r3]
}
     d86:	4770      	bx	lr
     d88:	2000026c 	.word	0x2000026c
     d8c:	f3af 8000 	nop.w
     d90:	f3af 8000 	nop.w
     d94:	f3af 8000 	nop.w
     d98:	f3af 8000 	nop.w
     d9c:	f3af 8000 	nop.w

00000da0 <setMaster>:
	finalMaster = amp;
     da0:	4b01      	ldr	r3, [pc, #4]	; (da8 <setMaster+0x8>)
     da2:	ed83 0a00 	vstr	s0, [r3]
}
     da6:	4770      	bx	lr
     da8:	20000004 	.word	0x20000004
     dac:	f3af 8000 	nop.w
     db0:	f3af 8000 	nop.w
     db4:	f3af 8000 	nop.w
     db8:	f3af 8000 	nop.w
     dbc:	f3af 8000 	nop.w

00000dc0 <setTranspose>:
	transpose = in;
     dc0:	4b01      	ldr	r3, [pc, #4]	; (dc8 <setTranspose+0x8>)
     dc2:	ed83 0a00 	vstr	s0, [r3]
}
     dc6:	4770      	bx	lr
     dc8:	2000f4c0 	.word	0x2000f4c0
     dcc:	f3af 8000 	nop.w
     dd0:	f3af 8000 	nop.w
     dd4:	f3af 8000 	nop.w
     dd8:	f3af 8000 	nop.w
     ddc:	f3af 8000 	nop.w

00000de0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
     de0:	eddf 7a03 	vldr	s15, [pc, #12]	; df0 <setPitchBendRange+0x10>
     de4:	4b03      	ldr	r3, [pc, #12]	; (df4 <setPitchBendRange+0x14>)
     de6:	ee20 0a27 	vmul.f32	s0, s0, s15
     dea:	ed83 0a00 	vstr	s0, [r3]
}
     dee:	4770      	bx	lr
     df0:	39000200 	.word	0x39000200
     df4:	20000000 	.word	0x20000000
     df8:	f3af 8000 	nop.w
     dfc:	f3af 8000 	nop.w

00000e00 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass, LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
     e00:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
     e04:	eddf 0a09 	vldr	s1, [pc, #36]	; e2c <setFinalLowpass+0x2c>
{
     e08:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass, LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
     e0c:	ed9f 1a08 	vldr	s2, [pc, #32]	; e30 <setFinalLowpass+0x30>
     e10:	ed9f 0a08 	vldr	s0, [pc, #32]	; e34 <setFinalLowpass+0x34>
     e14:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
     e18:	b508      	push	{r3, lr}
	tSVF_setFreqFast(&finalLowpass, LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
     e1a:	ee67 0aa0 	vmul.f32	s1, s15, s1
     e1e:	f002 fc97 	bl	3750 <__LEAF_clip_veneer>
     e22:	4805      	ldr	r0, [pc, #20]	; (e38 <setFinalLowpass+0x38>)
}
     e24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tSVF_setFreqFast(&finalLowpass, LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
     e28:	f002 bc82 	b.w	3730 <__tSVF_setFreqFast_veneer>
     e2c:	420fb824 	.word	0x420fb824
     e30:	457ff000 	.word	0x457ff000
     e34:	00000000 	.word	0x00000000
     e38:	20000348 	.word	0x20000348
     e3c:	f3af 8000 	nop.w

00000e40 <tickMappings>:
{
     e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int i = 0; i < numMappings; i++)
     e44:	f8df 8120 	ldr.w	r8, [pc, #288]	; f68 <tickMappings+0x128>
	interruptChecker = 0;
     e48:	2600      	movs	r6, #0
     e4a:	4941      	ldr	r1, [pc, #260]	; (f50 <tickMappings+0x110>)
	uint32_t tempCount1 = DWT->CYCCNT;
     e4c:	4a41      	ldr	r2, [pc, #260]	; (f54 <tickMappings+0x114>)
	for (int i = 0; i < numMappings; i++)
     e4e:	f898 3000 	ldrb.w	r3, [r8]
{
     e52:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
     e56:	700e      	strb	r6, [r1, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
     e58:	f8d2 9004 	ldr.w	r9, [r2, #4]
	for (int i = 0; i < numMappings; i++)
     e5c:	2b00      	cmp	r3, #0
     e5e:	d06d      	beq.n	f3c <tickMappings+0xfc>
     e60:	4c3d      	ldr	r4, [pc, #244]	; (f58 <tickMappings+0x118>)
     e62:	4d3e      	ldr	r5, [pc, #248]	; (f5c <tickMappings+0x11c>)
     e64:	e04a      	b.n	efc <tickMappings+0xbc>
				unsmoothedValue += sum;
     e66:	eeb0 8a67 	vmov.f32	s16, s15
		float smoothedValue = 0.0f;
     e6a:	eddf 7a3d 	vldr	s15, [pc, #244]	; f60 <tickMappings+0x120>
		for (int j = 0; j < mappings[i].numHooks; j++)
     e6e:	2b01      	cmp	r3, #1
     e70:	d023      	beq.n	eba <tickMappings+0x7a>
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
     e72:	69e1      	ldr	r1, [r4, #28]
     e74:	68e2      	ldr	r2, [r4, #12]
     e76:	ed91 7a00 	vldr	s14, [r1]
     e7a:	ed92 6a00 	vldr	s12, [r2]
     e7e:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
     e82:	ee27 7a06 	vmul.f32	s14, s14, s12
			if (mappings[i].sourceSmoothed[j])
     e86:	7d60      	ldrb	r0, [r4, #21]
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
     e88:	ee27 7a26 	vmul.f32	s14, s14, s13
			if (mappings[i].sourceSmoothed[j])
     e8c:	2800      	cmp	r0, #0
     e8e:	d14a      	bne.n	f26 <tickMappings+0xe6>
				unsmoothedValue += sum;
     e90:	ee38 8a07 	vadd.f32	s16, s16, s14
		for (int j = 0; j < mappings[i].numHooks; j++)
     e94:	2b02      	cmp	r3, #2
     e96:	d010      	beq.n	eba <tickMappings+0x7a>
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
     e98:	6a21      	ldr	r1, [r4, #32]
     e9a:	6922      	ldr	r2, [r4, #16]
     e9c:	ed91 7a00 	vldr	s14, [r1]
     ea0:	ed92 6a00 	vldr	s12, [r2]
     ea4:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
     ea8:	ee27 7a06 	vmul.f32	s14, s14, s12
			if (mappings[i].sourceSmoothed[j])
     eac:	7da3      	ldrb	r3, [r4, #22]
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
     eae:	ee27 7a26 	vmul.f32	s14, s14, s13
			if (mappings[i].sourceSmoothed[j])
     eb2:	2b00      	cmp	r3, #0
     eb4:	d03f      	beq.n	f36 <tickMappings+0xf6>
				smoothedValue += sum;
     eb6:	ee77 7a87 	vadd.f32	s15, s15, s14
		smoothedValue += mappings[i].dest->zeroToOneVal;
     eba:	6863      	ldr	r3, [r4, #4]
		tExpSmooth_setDest(&mapSmoothers[i], smoothedValue);
     ebc:	4628      	mov	r0, r5
	for (int i = 0; i < numMappings; i++)
     ebe:	3434      	adds	r4, #52	; 0x34
     ec0:	3601      	adds	r6, #1
		smoothedValue += mappings[i].dest->zeroToOneVal;
     ec2:	ed93 0a00 	vldr	s0, [r3]
		tExpSmooth_setDest(&mapSmoothers[i], smoothedValue);
     ec6:	ee37 0a80 	vadd.f32	s0, s15, s0
     eca:	f002 fc39 	bl	3740 <__tExpSmooth_setDest_veneer>
		smoothedValue = tExpSmooth_tick(&mapSmoothers[i]);
     ece:	4628      	mov	r0, r5
     ed0:	f002 fbe6 	bl	36a0 <__tExpSmooth_tick_veneer>
		mappings[i].dest->realVal = mappings[i].dest->scaleFunc(finalVal);
     ed4:	f854 7c30 	ldr.w	r7, [r4, #-48]
     ed8:	ee30 0a08 	vadd.f32	s0, s0, s16
	for (int i = 0; i < numMappings; i++)
     edc:	3504      	adds	r5, #4
		mappings[i].dest->realVal = mappings[i].dest->scaleFunc(finalVal);
     ede:	68bb      	ldr	r3, [r7, #8]
     ee0:	4798      	blx	r3
		mappings[i].dest->setParam(mappings[i].dest->realVal, mappings[i].dest->objectNumber);
     ee2:	f854 3c30 	ldr.w	r3, [r4, #-48]
		mappings[i].dest->realVal = mappings[i].dest->scaleFunc(finalVal);
     ee6:	ed87 0a01 	vstr	s0, [r7, #4]
		mappings[i].dest->setParam(mappings[i].dest->realVal, mappings[i].dest->objectNumber);
     eea:	68da      	ldr	r2, [r3, #12]
     eec:	7c18      	ldrb	r0, [r3, #16]
     eee:	ed93 0a01 	vldr	s0, [r3, #4]
     ef2:	4790      	blx	r2
	for (int i = 0; i < numMappings; i++)
     ef4:	f898 3000 	ldrb.w	r3, [r8]
     ef8:	42b3      	cmp	r3, r6
     efa:	dd1f      	ble.n	f3c <tickMappings+0xfc>
		for (int j = 0; j < mappings[i].numHooks; j++)
     efc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
     f00:	b1a3      	cbz	r3, f2c <tickMappings+0xec>
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
     f02:	68a1      	ldr	r1, [r4, #8]
     f04:	69a2      	ldr	r2, [r4, #24]
     f06:	edd1 7a00 	vldr	s15, [r1]
     f0a:	ed92 7a00 	vldr	s14, [r2]
     f0e:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
     f12:	ee67 7a87 	vmul.f32	s15, s15, s14
			if (mappings[i].sourceSmoothed[j])
     f16:	7d20      	ldrb	r0, [r4, #20]
			float sum = *mappings[i].sourceValPtr[j] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j];
     f18:	ee67 7a80 	vmul.f32	s15, s15, s0
			if (mappings[i].sourceSmoothed[j])
     f1c:	2800      	cmp	r0, #0
     f1e:	d0a2      	beq.n	e66 <tickMappings+0x26>
		float unsmoothedValue = 0.0f;
     f20:	ed9f 8a0f 	vldr	s16, [pc, #60]	; f60 <tickMappings+0x120>
     f24:	e7a3      	b.n	e6e <tickMappings+0x2e>
				smoothedValue += sum;
     f26:	ee77 7a87 	vadd.f32	s15, s15, s14
     f2a:	e7b3      	b.n	e94 <tickMappings+0x54>
		float smoothedValue = 0.0f;
     f2c:	eddf 7a0c 	vldr	s15, [pc, #48]	; f60 <tickMappings+0x120>
		float unsmoothedValue = 0.0f;
     f30:	eeb0 8a67 	vmov.f32	s16, s15
     f34:	e7c1      	b.n	eba <tickMappings+0x7a>
				unsmoothedValue += sum;
     f36:	ee38 8a07 	vadd.f32	s16, s16, s14
		for (int j = 0; j < mappings[i].numHooks; j++)
     f3a:	e7be      	b.n	eba <tickMappings+0x7a>
	timeMap = DWT->CYCCNT - tempCount1;
     f3c:	4b05      	ldr	r3, [pc, #20]	; (f54 <tickMappings+0x114>)
     f3e:	4a09      	ldr	r2, [pc, #36]	; (f64 <tickMappings+0x124>)
     f40:	685b      	ldr	r3, [r3, #4]
}
     f42:	ecbd 8b02 	vpop	{d8}
	timeMap = DWT->CYCCNT - tempCount1;
     f46:	eba3 0309 	sub.w	r3, r3, r9
     f4a:	6013      	str	r3, [r2, #0]
}
     f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     f50:	20012745 	.word	0x20012745
     f54:	e0001000 	.word	0xe0001000
     f58:	2001477c 	.word	0x2001477c
     f5c:	20000498 	.word	0x20000498
     f60:	00000000 	.word	0x00000000
     f64:	2000f4a8 	.word	0x2000f4a8
     f68:	20014e00 	.word	0x20014e00
     f6c:	f3af 8000 	nop.w
     f70:	f3af 8000 	nop.w
     f74:	f3af 8000 	nop.w
     f78:	f3af 8000 	nop.w
     f7c:	f3af 8000 	nop.w

00000f80 <sendNoteOn>:
{
     f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f84:	460d      	mov	r5, r1
     f86:	4601      	mov	r1, r0
     f88:	ed2d 8b02 	vpush	{d8}
	if (velocity > 0)
     f8c:	2d00      	cmp	r5, #0
     f8e:	d043      	beq.n	1018 <sendNoteOn+0x98>
		tSimplePoly_noteOn(&myPoly, note, velocity);
     f90:	462a      	mov	r2, r5
     f92:	482b      	ldr	r0, [pc, #172]	; (1040 <sendNoteOn+0xc0>)
     f94:	f002 fbd0 	bl	3738 <__tSimplePoly_noteOn_veneer>
		float fvelocity = (float)velocity;
     f98:	ee07 5a90 	vmov	s15, r5
		fvelocity = ((0.007685533519034f*fvelocity) + 0.0239372430f);
     f9c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 1044 <sendNoteOn+0xc4>
		    voiceSounding = 1;
     fa0:	2601      	movs	r6, #1
		float fvelocity = (float)velocity;
     fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
		fvelocity = ((0.007685533519034f*fvelocity) + 0.0239372430f);
     fa6:	ed9f 8a28 	vldr	s16, [pc, #160]	; 1048 <sendNoteOn+0xc8>
     faa:	4c28      	ldr	r4, [pc, #160]	; (104c <sendNoteOn+0xcc>)
     fac:	4d28      	ldr	r5, [pc, #160]	; (1050 <sendNoteOn+0xd0>)
     fae:	eea7 8a87 	vfma.f32	s16, s15, s14
		fvelocity = fvelocity * fvelocity;
     fb2:	f504 78f0 	add.w	r8, r4, #480	; 0x1e0
     fb6:	4f27      	ldr	r7, [pc, #156]	; (1054 <sendNoteOn+0xd4>)
     fb8:	ee28 8a08 	vmul.f32	s16, s16, s16
			if (useVelocity == 0) envVel = 1.f;
     fbc:	edd4 7a00 	vldr	s15, [r4]
		for (int v = 0; v < NUM_ENV; v++)
     fc0:	3478      	adds	r4, #120	; 0x78
		    tADSRT_on(&envs[v], envVel);
     fc2:	4628      	mov	r0, r5
     fc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
			if (useVelocity == 0) envVel = 1.f;
     fc8:	eef5 7a40 	vcmp.f32	s15, #0.0
     fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		    tADSRT_on(&envs[v], envVel);
     fd0:	bf0c      	ite	eq
     fd2:	4628      	moveq	r0, r5
     fd4:	eeb0 0a48 	vmovne.f32	s0, s16
     fd8:	f002 fbf6 	bl	37c8 <__tADSRT_on_veneer>
		for (int v = 0; v < NUM_ENV; v++)
     fdc:	4544      	cmp	r4, r8
     fde:	f105 0504 	add.w	r5, r5, #4
		    voiceSounding = 1;
     fe2:	703e      	strb	r6, [r7, #0]
		for (int v = 0; v < NUM_ENV; v++)
     fe4:	d1ea      	bne.n	fbc <sendNoteOn+0x3c>
			if (noteOnSync > 0.5f)
     fe6:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
     fea:	4d1b      	ldr	r5, [pc, #108]	; (1058 <sendNoteOn+0xd8>)
		for (int v = 0; v < NUM_LFOS; v++)
     fec:	2400      	movs	r4, #0
			if (noteOnSync > 0.5f)
     fee:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
				lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal, v);
     ff2:	4620      	mov	r0, r4
		for (int v = 0; v < NUM_LFOS; v++)
     ff4:	3401      	adds	r4, #1
			if (noteOnSync > 0.5f)
     ff6:	eef4 7ac8 	vcmpe.f32	s15, s16
     ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     ffe:	dd03      	ble.n	1008 <sendNoteOn+0x88>
				lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal, v);
    1000:	68ab      	ldr	r3, [r5, #8]
    1002:	ed95 0a00 	vldr	s0, [r5]
    1006:	4798      	blx	r3
		for (int v = 0; v < NUM_LFOS; v++)
    1008:	2c04      	cmp	r4, #4
    100a:	f105 0564 	add.w	r5, r5, #100	; 0x64
    100e:	d1ee      	bne.n	fee <sendNoteOn+0x6e>
}
    1010:	ecbd 8b02 	vpop	{d8}
    1014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tSimplePoly_noteOff(&myPoly, note);
    1018:	4809      	ldr	r0, [pc, #36]	; (1040 <sendNoteOn+0xc0>)
    101a:	f002 fb5d 	bl	36d8 <__tSimplePoly_noteOff_veneer>
			tADSRT_off(&envs[v]);
    101e:	480c      	ldr	r0, [pc, #48]	; (1050 <sendNoteOn+0xd0>)
    1020:	f002 fb5e 	bl	36e0 <__tADSRT_off_veneer>
    1024:	480d      	ldr	r0, [pc, #52]	; (105c <sendNoteOn+0xdc>)
    1026:	f002 fb5b 	bl	36e0 <__tADSRT_off_veneer>
    102a:	480d      	ldr	r0, [pc, #52]	; (1060 <sendNoteOn+0xe0>)
    102c:	f002 fb58 	bl	36e0 <__tADSRT_off_veneer>
    1030:	480c      	ldr	r0, [pc, #48]	; (1064 <sendNoteOn+0xe4>)
}
    1032:	ecbd 8b02 	vpop	{d8}
    1036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			tADSRT_off(&envs[v]);
    103a:	f002 bb51 	b.w	36e0 <__tADSRT_off_veneer>
    103e:	bf00      	nop
    1040:	20000600 	.word	0x20000600
    1044:	3bfbd6ee 	.word	0x3bfbd6ee
    1048:	3cc41809 	.word	0x3cc41809
    104c:	200156dc 	.word	0x200156dc
    1050:	2000031c 	.word	0x2000031c
    1054:	2000f4d4 	.word	0x2000f4d4
    1058:	20015880 	.word	0x20015880
    105c:	20000320 	.word	0x20000320
    1060:	20000324 	.word	0x20000324
    1064:	20000328 	.word	0x20000328
    1068:	f3af 8000 	nop.w
    106c:	f3af 8000 	nop.w
    1070:	f3af 8000 	nop.w
    1074:	f3af 8000 	nop.w
    1078:	f3af 8000 	nop.w
    107c:	f3af 8000 	nop.w

00001080 <sendCtrl>:
	sourceValues[CTRL_SOURCE_OFFSET + (ctrl - CTRL_MIDI_START)] = (float)value * INV_TWO_TO_7;
    1080:	ee07 1a90 	vmov	s15, r1
    1084:	4b03      	ldr	r3, [pc, #12]	; (1094 <sendCtrl+0x14>)
    1086:	eefb 7aec 	vcvt.f32.u32	s15, s15, #7
    108a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    108e:	edc0 7a03 	vstr	s15, [r0, #12]
}
    1092:	4770      	bx	lr
    1094:	2000f358 	.word	0x2000f358
    1098:	f3af 8000 	nop.w
    109c:	f3af 8000 	nop.w

000010a0 <sendPitchBend>:
	bend = bendInt * bendRangeMultiplier; //by default, divide by (16383 / 96 semitones)
    10a0:	4a08      	ldr	r2, [pc, #32]	; (10c4 <sendPitchBend+0x24>)
	int bendInt = value + (ctrl << 7);
    10a2:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
	bend = bendInt * bendRangeMultiplier; //by default, divide by (16383 / 96 semitones)
    10a6:	4b08      	ldr	r3, [pc, #32]	; (10c8 <sendPitchBend+0x28>)
    10a8:	ed92 7a00 	vldr	s14, [r2]
	bendInt = bendInt - 8192;
    10ac:	f5a1 5200 	sub.w	r2, r1, #8192	; 0x2000
    10b0:	ee07 2a90 	vmov	s15, r2
	bend = bendInt * bendRangeMultiplier; //by default, divide by (16383 / 96 semitones)
    10b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    10b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    10bc:	edc3 7a00 	vstr	s15, [r3]
}
    10c0:	4770      	bx	lr
    10c2:	bf00      	nop
    10c4:	20000000 	.word	0x20000000
    10c8:	20000298 	.word	0x20000298
    10cc:	f3af 8000 	nop.w
    10d0:	f3af 8000 	nop.w
    10d4:	f3af 8000 	nop.w
    10d8:	f3af 8000 	nop.w
    10dc:	f3af 8000 	nop.w

000010e0 <cStack_init>:
        stack->buffer[i][0] = -1;
    10e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    stack->writeCnt = 0;
    10e4:	2200      	movs	r2, #0
        stack->buffer[i][0] = -1;
    10e6:	6003      	str	r3, [r0, #0]
    stack->writeCnt = 0;
    10e8:	f8a0 20c0 	strh.w	r2, [r0, #192]	; 0xc0
        stack->buffer[i][0] = -1;
    10ec:	6043      	str	r3, [r0, #4]
    10ee:	6083      	str	r3, [r0, #8]
    10f0:	60c3      	str	r3, [r0, #12]
    10f2:	6103      	str	r3, [r0, #16]
    10f4:	6143      	str	r3, [r0, #20]
    10f6:	6183      	str	r3, [r0, #24]
    10f8:	61c3      	str	r3, [r0, #28]
    10fa:	6203      	str	r3, [r0, #32]
    10fc:	6243      	str	r3, [r0, #36]	; 0x24
    10fe:	6283      	str	r3, [r0, #40]	; 0x28
    1100:	62c3      	str	r3, [r0, #44]	; 0x2c
    1102:	6303      	str	r3, [r0, #48]	; 0x30
    1104:	6343      	str	r3, [r0, #52]	; 0x34
    1106:	6383      	str	r3, [r0, #56]	; 0x38
    1108:	63c3      	str	r3, [r0, #60]	; 0x3c
    110a:	6403      	str	r3, [r0, #64]	; 0x40
    110c:	6443      	str	r3, [r0, #68]	; 0x44
    110e:	6483      	str	r3, [r0, #72]	; 0x48
    1110:	64c3      	str	r3, [r0, #76]	; 0x4c
    1112:	6503      	str	r3, [r0, #80]	; 0x50
    1114:	6543      	str	r3, [r0, #84]	; 0x54
    1116:	6583      	str	r3, [r0, #88]	; 0x58
    1118:	65c3      	str	r3, [r0, #92]	; 0x5c
    111a:	6603      	str	r3, [r0, #96]	; 0x60
    111c:	6643      	str	r3, [r0, #100]	; 0x64
    111e:	6683      	str	r3, [r0, #104]	; 0x68
    1120:	66c3      	str	r3, [r0, #108]	; 0x6c
    1122:	6703      	str	r3, [r0, #112]	; 0x70
    1124:	6743      	str	r3, [r0, #116]	; 0x74
    1126:	6783      	str	r3, [r0, #120]	; 0x78
    1128:	67c3      	str	r3, [r0, #124]	; 0x7c
    112a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    112e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    1132:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    1136:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    113a:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    113e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
    1142:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
    1146:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    114a:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    114e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    1152:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    1156:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    115a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    115e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    1162:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
    1166:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
}
    116a:	4770      	bx	lr
    116c:	f3af 8000 	nop.w
    1170:	f3af 8000 	nop.w
    1174:	f3af 8000 	nop.w
    1178:	f3af 8000 	nop.w
    117c:	f3af 8000 	nop.w

00001180 <cStack_push>:
    stack->buffer[stack->writeCnt][0] = val;
    1180:	f990 c0c0 	ldrsb.w	ip, [r0, #192]	; 0xc0
{
    1184:	b500      	push	{lr}
    stack->buffer[stack->writeCnt][0] = val;
    1186:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
    stack->writeCnt = (stack->writeCnt + 1 ) & 63;
    118a:	f10c 0c01 	add.w	ip, ip, #1
    stack->buffer[stack->writeCnt][0] = val;
    118e:	f800 100e 	strb.w	r1, [r0, lr]
    stack->writeCnt = (stack->writeCnt + 1 ) & 63;
    1192:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    stack->buffer[stack->writeCnt][0] = val;
    1196:	4486      	add	lr, r0
    stack->buffer[stack->writeCnt][1] = val1;
    1198:	f88e 2001 	strb.w	r2, [lr, #1]
    stack->buffer[stack->writeCnt][2] = val2;
    119c:	f88e 3002 	strb.w	r3, [lr, #2]
    stack->writeCnt = (stack->writeCnt + 1 ) & 63;
    11a0:	f880 c0c0 	strb.w	ip, [r0, #192]	; 0xc0
}
    11a4:	f85d fb04 	ldr.w	pc, [sp], #4
    11a8:	f3af 8000 	nop.w
    11ac:	f3af 8000 	nop.w
    11b0:	f3af 8000 	nop.w
    11b4:	f3af 8000 	nop.w
    11b8:	f3af 8000 	nop.w
    11bc:	f3af 8000 	nop.w

000011c0 <cStack_pop>:
    output[0] = stack->buffer[stack->readCnt][0];
    11c0:	f990 30c1 	ldrsb.w	r3, [r0, #193]	; 0xc1
    11c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    11c8:	5cc3      	ldrb	r3, [r0, r3]
    11ca:	700b      	strb	r3, [r1, #0]
    output[1] = stack->buffer[stack->readCnt][1];
    11cc:	f990 30c1 	ldrsb.w	r3, [r0, #193]	; 0xc1
    11d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    11d4:	4403      	add	r3, r0
    11d6:	785b      	ldrb	r3, [r3, #1]
    11d8:	704b      	strb	r3, [r1, #1]
    output[2] = stack->buffer[stack->readCnt][2];
    11da:	f990 30c1 	ldrsb.w	r3, [r0, #193]	; 0xc1
    11de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    11e2:	4403      	add	r3, r0
    11e4:	789b      	ldrb	r3, [r3, #2]
    11e6:	708b      	strb	r3, [r1, #2]
    stack->readCnt = (stack->readCnt + 1) & 63;
    11e8:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
    11ec:	3301      	adds	r3, #1
    11ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    11f2:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
}
    11f6:	4770      	bx	lr
    11f8:	f3af 8000 	nop.w
    11fc:	f3af 8000 	nop.w

00001200 <clipperGainSet>:
	param1[v] = fasterdbtoa(value * 24.0f);
    1200:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    1204:	b510      	push	{r4, lr}
	param1[v] = fasterdbtoa(value * 24.0f);
    1206:	ee20 0a27 	vmul.f32	s0, s0, s15
{
    120a:	4604      	mov	r4, r0
	param1[v] = fasterdbtoa(value * 24.0f);
    120c:	f002 fa2c 	bl	3668 <__fasterdbtoa_veneer>
    1210:	4802      	ldr	r0, [pc, #8]	; (121c <clipperGainSet+0x1c>)
    1212:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1216:	ed80 0a00 	vstr	s0, [r0]
}
    121a:	bd10      	pop	{r4, pc}
    121c:	20000654 	.word	0x20000654

00001220 <wavefolderParam1>:
	param1[v] = fasterdbtoa(value * 12.0f);
    1220:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    1224:	b510      	push	{r4, lr}
	param1[v] = fasterdbtoa(value * 12.0f);
    1226:	ee20 0a27 	vmul.f32	s0, s0, s15
{
    122a:	4604      	mov	r4, r0
	param1[v] = fasterdbtoa(value * 12.0f);
    122c:	f002 fa1c 	bl	3668 <__fasterdbtoa_veneer>
    1230:	4802      	ldr	r0, [pc, #8]	; (123c <wavefolderParam1+0x1c>)
    1232:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1236:	ed80 0a00 	vstr	s0, [r0]
}
    123a:	bd10      	pop	{r4, pc}
    123c:	20000654 	.word	0x20000654

00001240 <wavefolderParam3>:
	invCurFB[v] = (1.0f / (1.0f + value));
    1240:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1244:	4b07      	ldr	r3, [pc, #28]	; (1264 <wavefolderParam3+0x24>)
	param3[v] = value;
    1246:	4a08      	ldr	r2, [pc, #32]	; (1268 <wavefolderParam3+0x28>)
	invCurFB[v] = (1.0f / (1.0f + value));
    1248:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    124c:	ee70 6a27 	vadd.f32	s13, s0, s15
	param3[v] = value;
    1250:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1254:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v] = (1.0f / (1.0f + value));
    1258:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    125c:	ed83 7a00 	vstr	s14, [r3]
}
    1260:	4770      	bx	lr
    1262:	bf00      	nop
    1264:	20000398 	.word	0x20000398
    1268:	20000674 	.word	0x20000674
    126c:	f3af 8000 	nop.w
    1270:	f3af 8000 	nop.w
    1274:	f3af 8000 	nop.w
    1278:	f3af 8000 	nop.w
    127c:	f3af 8000 	nop.w

00001280 <tiltParam1>:
{
    1280:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1282:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    1286:	0084      	lsls	r4, r0, #2
{
    1288:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    128c:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    1290:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1294:	eee0 7a68 	vfms.f32	s15, s0, s17
    1298:	eeb0 0a67 	vmov.f32	s0, s15
    129c:	f002 f9e4 	bl	3668 <__fasterdbtoa_veneer>
    12a0:	4808      	ldr	r0, [pc, #32]	; (12c4 <tiltParam1+0x44>)
    12a2:	4420      	add	r0, r4
    12a4:	f002 fa80 	bl	37a8 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&shelf2[v], fasterdbtoa((value * 30.0f) - 15.0f));
    12a8:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    12ac:	eea8 0a28 	vfma.f32	s0, s16, s17
    12b0:	f002 f9da 	bl	3668 <__fasterdbtoa_veneer>
    12b4:	4804      	ldr	r0, [pc, #16]	; (12c8 <tiltParam1+0x48>)
}
    12b6:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v], fasterdbtoa((value * 30.0f) - 15.0f));
    12ba:	4420      	add	r0, r4
}
    12bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v], fasterdbtoa((value * 30.0f) - 15.0f));
    12c0:	f002 ba72 	b.w	37a8 <__tVZFilter_setGain_veneer>
    12c4:	20000778 	.word	0x20000778
    12c8:	20000788 	.word	0x20000788
    12cc:	f3af 8000 	nop.w
    12d0:	f3af 8000 	nop.w
    12d4:	f3af 8000 	nop.w
    12d8:	f3af 8000 	nop.w
    12dc:	f3af 8000 	nop.w

000012e0 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    12e0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    12e4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 1314 <tiltParam2+0x34>
    12e8:	eddf 0a0b 	vldr	s1, [pc, #44]	; 1318 <tiltParam2+0x38>
    12ec:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 131c <tiltParam2+0x3c>
    12f0:	eee0 7a07 	vfma.f32	s15, s0, s14
    12f4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 1320 <tiltParam2+0x40>
{
    12f8:	b510      	push	{r4, lr}
    12fa:	4604      	mov	r4, r0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    12fc:	ee67 0aa0 	vmul.f32	s1, s15, s1
    1300:	f002 fa26 	bl	3750 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&bell1[v], value);
    1304:	4807      	ldr	r0, [pc, #28]	; (1324 <tiltParam2+0x44>)
    1306:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    130a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&bell1[v], value);
    130e:	f002 b967 	b.w	35e0 <__tVZFilter_setFreqFast_veneer>
    1312:	bf00      	nop
    1314:	429a0000 	.word	0x429a0000
    1318:	420fb824 	.word	0x420fb824
    131c:	457ff000 	.word	0x457ff000
    1320:	00000000 	.word	0x00000000
    1324:	20000288 	.word	0x20000288
    1328:	f3af 8000 	nop.w
    132c:	f3af 8000 	nop.w
    1330:	f3af 8000 	nop.w
    1334:	f3af 8000 	nop.w
    1338:	f3af 8000 	nop.w
    133c:	f3af 8000 	nop.w

00001340 <tiltParam3>:
	tVZFilter_setResonance(&bell1[v], (value +1.0f)*6.0f);//TODO: make this match plugin
    1340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1344:	4b05      	ldr	r3, [pc, #20]	; (135c <tiltParam3+0x1c>)
    1346:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    134a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    134e:	ee30 0a07 	vadd.f32	s0, s0, s14
    1352:	ee20 0a27 	vmul.f32	s0, s0, s15
    1356:	f002 b9f7 	b.w	3748 <__tVZFilter_setResonance_veneer>
    135a:	bf00      	nop
    135c:	20000288 	.word	0x20000288

00001360 <tiltParam4>:
	tVZFilter_setGain(&bell1[v], fastdbtoa((value * 34.0f) - 17.0f));
    1360:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    1364:	ed9f 7a08 	vldr	s14, [pc, #32]	; 1388 <tiltParam4+0x28>
{
    1368:	b510      	push	{r4, lr}
	tVZFilter_setGain(&bell1[v], fastdbtoa((value * 34.0f) - 17.0f));
    136a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    136e:	4604      	mov	r4, r0
	tVZFilter_setGain(&bell1[v], fastdbtoa((value * 34.0f) - 17.0f));
    1370:	eeb0 0a67 	vmov.f32	s0, s15
    1374:	f002 fa10 	bl	3798 <__fastdbtoa_veneer>
    1378:	4804      	ldr	r0, [pc, #16]	; (138c <tiltParam4+0x2c>)
    137a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    137e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&bell1[v], fastdbtoa((value * 34.0f) - 17.0f));
    1382:	f002 ba11 	b.w	37a8 <__tVZFilter_setGain_veneer>
    1386:	bf00      	nop
    1388:	42080000 	.word	0x42080000
    138c:	20000288 	.word	0x20000288
    1390:	f3af 8000 	nop.w
    1394:	f3af 8000 	nop.w
    1398:	f3af 8000 	nop.w
    139c:	f3af 8000 	nop.w

000013a0 <compressorParam1>:
	comp[v]->T = value*-24.0f;
    13a0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    13a4:	4b03      	ldr	r3, [pc, #12]	; (13b4 <compressorParam1+0x14>)
    13a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    13aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    13ae:	ed83 0a03 	vstr	s0, [r3, #12]
}
    13b2:	4770      	bx	lr
    13b4:	200002a0 	.word	0x200002a0
    13b8:	f3af 8000 	nop.w
    13bc:	f3af 8000 	nop.w

000013c0 <compressorParam2>:
	comp[v]->R = ((value*10.0f)+1.0f);
    13c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    13c4:	4b07      	ldr	r3, [pc, #28]	; (13e4 <compressorParam2+0x24>)
    13c6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    13ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    13ce:	eef0 7a47 	vmov.f32	s15, s14
    13d2:	eee0 7a26 	vfma.f32	s15, s0, s13
	comp[v]->invR  = 1.0f / comp[v]->R;
    13d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
	comp[v]->R = ((value*10.0f)+1.0f);
    13da:	edc3 7a04 	vstr	s15, [r3, #16]
	comp[v]->invR  = 1.0f / comp[v]->R;
    13de:	edc3 6a07 	vstr	s13, [r3, #28]
}
    13e2:	4770      	bx	lr
    13e4:	200002a0 	.word	0x200002a0
    13e8:	f3af 8000 	nop.w
    13ec:	f3af 8000 	nop.w
    13f0:	f3af 8000 	nop.w
    13f4:	f3af 8000 	nop.w
    13f8:	f3af 8000 	nop.w
    13fc:	f3af 8000 	nop.w

00001400 <compressorParam3>:
	comp[v]->M = value * 18.0f;
    1400:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    1404:	4b03      	ldr	r3, [pc, #12]	; (1414 <compressorParam3+0x14>)
    1406:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    140a:	ee20 0a27 	vmul.f32	s0, s0, s15
    140e:	ed83 0a06 	vstr	s0, [r3, #24]
}
    1412:	4770      	bx	lr
    1414:	200002a0 	.word	0x200002a0
    1418:	f3af 8000 	nop.w
    141c:	f3af 8000 	nop.w

00001420 <compressorParam4>:
	comp[v]->tauAttack = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1420:	4b0a      	ldr	r3, [pc, #40]	; (144c <compressorParam4+0x2c>)
    1422:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	value = (value +  0.001f);
    1426:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1450 <compressorParam4+0x30>
{
    142a:	b510      	push	{r4, lr}
	comp[v]->tauAttack = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    142c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    1430:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v]->tauAttack = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1434:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    1438:	ee20 0a07 	vmul.f32	s0, s0, s14
    143c:	ee87 0a80 	vdiv.f32	s0, s15, s0
    1440:	f002 f95a 	bl	36f8 <__fasterexpf_veneer>
    1444:	ed84 0a01 	vstr	s0, [r4, #4]
}
    1448:	bd10      	pop	{r4, pc}
    144a:	bf00      	nop
    144c:	200002a0 	.word	0x200002a0
    1450:	3a83126f 	.word	0x3a83126f
    1454:	f3af 8000 	nop.w
    1458:	f3af 8000 	nop.w
    145c:	f3af 8000 	nop.w

00001460 <compressorParam5>:
	comp[v]->tauRelease = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1460:	4b0a      	ldr	r3, [pc, #40]	; (148c <compressorParam5+0x2c>)
    1462:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	value = (value + 0.001f);
    1466:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1490 <compressorParam5+0x30>
{
    146a:	b510      	push	{r4, lr}
	comp[v]->tauRelease = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    146c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    1470:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v]->tauRelease = fasterexpf(-1.0f/(value * comp[v]->sampleRate));
    1474:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    1478:	ee20 0a07 	vmul.f32	s0, s0, s14
    147c:	ee87 0a80 	vdiv.f32	s0, s15, s0
    1480:	f002 f93a 	bl	36f8 <__fasterexpf_veneer>
    1484:	ed84 0a02 	vstr	s0, [r4, #8]
}
    1488:	bd10      	pop	{r4, pc}
    148a:	bf00      	nop
    148c:	200002a0 	.word	0x200002a0
    1490:	3a83126f 	.word	0x3a83126f
    1494:	f3af 8000 	nop.w
    1498:	f3af 8000 	nop.w
    149c:	f3af 8000 	nop.w

000014a0 <offsetParam2>:
	param2[v] = (value * 2.0f) - 1.0f;
    14a0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    14a4:	4b04      	ldr	r3, [pc, #16]	; (14b8 <offsetParam2+0x18>)
    14a6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    14aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    14ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    14b2:	edc0 7a00 	vstr	s15, [r0]
}
    14b6:	4770      	bx	lr
    14b8:	20000664 	.word	0x20000664
    14bc:	f3af 8000 	nop.w

000014c0 <param2Linear>:
	param2[v] = value;
    14c0:	4b02      	ldr	r3, [pc, #8]	; (14cc <param2Linear+0xc>)
    14c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    14c6:	ed80 0a00 	vstr	s0, [r0]
}
    14ca:	4770      	bx	lr
    14cc:	20000664 	.word	0x20000664
    14d0:	f3af 8000 	nop.w
    14d4:	f3af 8000 	nop.w
    14d8:	f3af 8000 	nop.w
    14dc:	f3af 8000 	nop.w

000014e0 <param3Linear>:
	param3[v] = value;
    14e0:	4b02      	ldr	r3, [pc, #8]	; (14ec <param3Linear+0xc>)
    14e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    14e6:	ed80 0a00 	vstr	s0, [r0]
}
    14ea:	4770      	bx	lr
    14ec:	20000674 	.word	0x20000674
    14f0:	f3af 8000 	nop.w
    14f4:	f3af 8000 	nop.w
    14f8:	f3af 8000 	nop.w
    14fc:	f3af 8000 	nop.w

00001500 <param3Soft>:
	param3[v] = (value * .99f) + 0.01f;
    1500:	eddf 6a0f 	vldr	s13, [pc, #60]	; 1540 <param3Soft+0x40>
    1504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1508:	eddf 7a0e 	vldr	s15, [pc, #56]	; 1544 <param3Soft+0x44>
    150c:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 1548 <param3Soft+0x48>
    1510:	eee0 7a26 	vfma.f32	s15, s0, s13
    1514:	4a0d      	ldr	r2, [pc, #52]	; (154c <param3Soft+0x4c>)
    1516:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v] = 1.0f / (param3[v] - ((param3[v]*param3[v]*param3[v]) * 0.3333333f));
    151a:	4b0d      	ldr	r3, [pc, #52]	; (1550 <param3Soft+0x50>)
	param3[v] = (value * .99f) + 0.01f;
    151c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	shapeDividerS[v] = 1.0f / (param3[v] - ((param3[v]*param3[v]*param3[v]) * 0.3333333f));
    1520:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1524:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v] = (value * .99f) + 0.01f;
    1528:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v] = 1.0f / (param3[v] - ((param3[v]*param3[v]*param3[v]) * 0.3333333f));
    152c:	eee5 6a86 	vfma.f32	s13, s11, s12
    1530:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1534:	eec7 6a27 	vdiv.f32	s13, s14, s15
    1538:	edc3 6a00 	vstr	s13, [r3]
}
    153c:	4770      	bx	lr
    153e:	bf00      	nop
    1540:	3f7d70a4 	.word	0x3f7d70a4
    1544:	3c23d70a 	.word	0x3c23d70a
    1548:	3eaaaaaa 	.word	0x3eaaaaaa
    154c:	20000674 	.word	0x20000674
    1550:	2000075c 	.word	0x2000075c
    1554:	f3af 8000 	nop.w
    1558:	f3af 8000 	nop.w
    155c:	f3af 8000 	nop.w

00001560 <param3Hard>:
	param3[v] = ((value * .99f) + 0.01f) * HALF_PI;
    1560:	eddf 6a0d 	vldr	s13, [pc, #52]	; 1598 <param3Hard+0x38>
    1564:	eddf 7a0d 	vldr	s15, [pc, #52]	; 159c <param3Hard+0x3c>
    1568:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 15a0 <param3Hard+0x40>
    156c:	eee0 7a26 	vfma.f32	s15, s0, s13
    1570:	4b0c      	ldr	r3, [pc, #48]	; (15a4 <param3Hard+0x44>)
    1572:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    1576:	b510      	push	{r4, lr}
	param3[v] = ((value * .99f) + 0.01f) * HALF_PI;
    1578:	ee27 0a87 	vmul.f32	s0, s15, s14
    157c:	0084      	lsls	r4, r0, #2
    157e:	ed83 0a00 	vstr	s0, [r3]
	shapeDividerH[v] = 1.0f / arm_sin_f32(param3[v]);
    1582:	f002 f87d 	bl	3680 <__arm_sin_f32_veneer>
    1586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    158a:	4807      	ldr	r0, [pc, #28]	; (15a8 <param3Hard+0x48>)
    158c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    1590:	4420      	add	r0, r4
    1592:	edc0 7a00 	vstr	s15, [r0]
}
    1596:	bd10      	pop	{r4, pc}
    1598:	3f7d70a4 	.word	0x3f7d70a4
    159c:	3c23d70a 	.word	0x3c23d70a
    15a0:	3fc90fdb 	.word	0x3fc90fdb
    15a4:	20000674 	.word	0x20000674
    15a8:	2000074c 	.word	0x2000074c
    15ac:	f3af 8000 	nop.w
    15b0:	f3af 8000 	nop.w
    15b4:	f3af 8000 	nop.w
    15b8:	f3af 8000 	nop.w
    15bc:	f3af 8000 	nop.w

000015c0 <param4Linear>:
	param4[v] = value;
    15c0:	4b02      	ldr	r3, [pc, #8]	; (15cc <param4Linear+0xc>)
    15c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    15c6:	ed80 0a00 	vstr	s0, [r0]
}
    15ca:	4770      	bx	lr
    15cc:	20000684 	.word	0x20000684
    15d0:	f3af 8000 	nop.w
    15d4:	f3af 8000 	nop.w
    15d8:	f3af 8000 	nop.w
    15dc:	f3af 8000 	nop.w

000015e0 <param5Linear>:
	param5[v] = value;
    15e0:	4b02      	ldr	r3, [pc, #8]	; (15ec <param5Linear+0xc>)
    15e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    15e6:	ed80 0a00 	vstr	s0, [r0]
}
    15ea:	4770      	bx	lr
    15ec:	20000694 	.word	0x20000694
    15f0:	f3af 8000 	nop.w
    15f4:	f3af 8000 	nop.w
    15f8:	f3af 8000 	nop.w
    15fc:	f3af 8000 	nop.w

00001600 <param2BC>:
	tCrusher_setQuality (&bc[v],value);
    1600:	4b02      	ldr	r3, [pc, #8]	; (160c <param2BC+0xc>)
    1602:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1606:	f002 b8db 	b.w	37c0 <__tCrusher_setQuality_veneer>
    160a:	bf00      	nop
    160c:	20000278 	.word	0x20000278
    1610:	f3af 8000 	nop.w
    1614:	f3af 8000 	nop.w
    1618:	f3af 8000 	nop.w
    161c:	f3af 8000 	nop.w

00001620 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    1620:	4b06      	ldr	r3, [pc, #24]	; (163c <param3BC+0x1c>)
    1622:	eddf 7a07 	vldr	s15, [pc, #28]	; 1640 <param3BC+0x20>
    1626:	ed93 7a00 	vldr	s14, [r3]
	tCrusher_setSamplingRatio (&bc[v], value);
    162a:	4b06      	ldr	r3, [pc, #24]	; (1644 <param3BC+0x24>)
    162c:	eee7 7a00 	vfma.f32	s15, s14, s0
    1630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1634:	eeb0 0a67 	vmov.f32	s0, s15
    1638:	f002 b82a 	b.w	3690 <__tCrusher_setSamplingRatio_veneer>
    163c:	2000005c 	.word	0x2000005c
    1640:	3c23d70a 	.word	0x3c23d70a
    1644:	20000278 	.word	0x20000278
    1648:	f3af 8000 	nop.w
    164c:	f3af 8000 	nop.w
    1650:	f3af 8000 	nop.w
    1654:	f3af 8000 	nop.w
    1658:	f3af 8000 	nop.w
    165c:	f3af 8000 	nop.w

00001660 <param4BC>:
	tCrusher_setRound(&bc[v], value);
    1660:	4b02      	ldr	r3, [pc, #8]	; (166c <param4BC+0xc>)
    1662:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1666:	f002 b827 	b.w	36b8 <__tCrusher_setRound_veneer>
    166a:	bf00      	nop
    166c:	20000278 	.word	0x20000278
    1670:	f3af 8000 	nop.w
    1674:	f3af 8000 	nop.w
    1678:	f3af 8000 	nop.w
    167c:	f3af 8000 	nop.w

00001680 <param5BC>:
	tCrusher_setOperation(&bc[v], value);
    1680:	4b02      	ldr	r3, [pc, #8]	; (168c <param5BC+0xc>)
    1682:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1686:	f002 b87b 	b.w	3780 <__tCrusher_setOperation_veneer>
    168a:	bf00      	nop
    168c:	20000278 	.word	0x20000278
    1690:	f3af 8000 	nop.w
    1694:	f3af 8000 	nop.w
    1698:	f3af 8000 	nop.w
    169c:	f3af 8000 	nop.w

000016a0 <fxMixSet>:
	fxMix[v] = value;
    16a0:	4b02      	ldr	r3, [pc, #8]	; (16ac <fxMixSet+0xc>)
    16a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    16a6:	ed80 0a00 	vstr	s0, [r0]
}
    16aa:	4770      	bx	lr
    16ac:	20000370 	.word	0x20000370
    16b0:	f3af 8000 	nop.w
    16b4:	f3af 8000 	nop.w
    16b8:	f3af 8000 	nop.w
    16bc:	f3af 8000 	nop.w

000016c0 <fxPostGainSet>:
	fxPostGain[v] = fasterdbtoa((value * 24.0f) - 12.0f);
    16c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    16c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    16c8:	b510      	push	{r4, lr}
	fxPostGain[v] = fasterdbtoa((value * 24.0f) - 12.0f);
    16ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    16ce:	4604      	mov	r4, r0
	fxPostGain[v] = fasterdbtoa((value * 24.0f) - 12.0f);
    16d0:	eeb0 0a67 	vmov.f32	s0, s15
    16d4:	f001 ffc8 	bl	3668 <__fasterdbtoa_veneer>
    16d8:	4802      	ldr	r0, [pc, #8]	; (16e4 <fxPostGainSet+0x24>)
    16da:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    16de:	ed80 0a00 	vstr	s0, [r0]
}
    16e2:	bd10      	pop	{r4, pc}
    16e4:	20000380 	.word	0x20000380
    16e8:	f3af 8000 	nop.w
    16ec:	f3af 8000 	nop.w
    16f0:	f3af 8000 	nop.w
    16f4:	f3af 8000 	nop.w
    16f8:	f3af 8000 	nop.w
    16fc:	f3af 8000 	nop.w

00001700 <wavefolderTick>:
{
    1700:	b538      	push	{r3, r4, r5, lr}
    float fbSample = wfState[v];
    1702:	4d36      	ldr	r5, [pc, #216]	; (17dc <wavefolderTick+0xdc>)
    1704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    1708:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    170c:	4b34      	ldr	r3, [pc, #208]	; (17e0 <wavefolderTick+0xe0>)
    float fbSample = wfState[v];
    170e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    1712:	4a34      	ldr	r2, [pc, #208]	; (17e4 <wavefolderTick+0xe4>)
    1714:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1718:	ed9f 4a33 	vldr	s8, [pc, #204]	; 17e8 <wavefolderTick+0xe8>
    171c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    1720:	eddf 4a32 	vldr	s9, [pc, #200]	; 17ec <wavefolderTick+0xec>
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    1724:	ed93 6a00 	vldr	s12, [r3]
    1728:	0084      	lsls	r4, r0, #2
    float curFB = param3[v];
    172a:	4b31      	ldr	r3, [pc, #196]	; (17f0 <wavefolderTick+0xf0>)
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    172c:	ee30 0a06 	vadd.f32	s0, s0, s12
    1730:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v];
    1734:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v];
    1738:	4a2e      	ldr	r2, [pc, #184]	; (17f4 <wavefolderTick+0xf4>)
{
    173a:	ed2d 8b02 	vpush	{d8}
    173e:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v] + ((param2[v] * param1[v]));
    1742:	ee20 6a06 	vmul.f32	s12, s0, s12
    float curFF = param4[v];
    1746:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    174a:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 17f8 <wavefolderTick+0xf8>
    174e:	fe88 8a66 	vminnm.f32	s16, s16, s13
    1752:	fe88 8a05 	vmaxnm.f32	s16, s16, s10
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1756:	ee68 7a08 	vmul.f32	s15, s16, s16
    175a:	fe86 7a66 	vminnm.f32	s14, s12, s13
    175e:	fe87 7a05 	vmaxnm.f32	s14, s14, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    1762:	ee27 5a07 	vmul.f32	s10, s14, s14
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1766:	ee26 0a00 	vmul.f32	s0, s12, s0
    176a:	ee67 7a84 	vmul.f32	s15, s15, s8
    176e:	ee25 5a04 	vmul.f32	s10, s10, s8
    1772:	ee76 5ae7 	vsub.f32	s11, s13, s15
    float fb = curFB * fbSample;
    1776:	edd3 7a00 	vldr	s15, [r3]
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    177a:	4b20      	ldr	r3, [pc, #128]	; (17fc <wavefolderTick+0xfc>)
    float fb = curFB * fbSample;
    177c:	ee67 7aa4 	vmul.f32	s15, s15, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    1780:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v];
    1784:	edd2 5a00 	vldr	s11, [r2]
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1788:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    178c:	ee76 3ae5 	vsub.f32	s7, s13, s11
    float fb = curFB * fbSample;
    1790:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    1794:	edd3 8a00 	vldr	s17, [r3]
    1798:	ee76 6ac5 	vsub.f32	s13, s13, s10
    179c:	ee65 5aa4 	vmul.f32	s11, s11, s9
    17a0:	eee3 7a86 	vfma.f32	s15, s7, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    17a4:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    17a8:	eee7 7a25 	vfma.f32	s15, s14, s11
    17ac:	eeb0 8a67 	vmov.f32	s16, s15
    17b0:	f001 ff66 	bl	3680 <__arm_sin_f32_veneer>
    sample = wfState[v] * invCurFB[v];
    17b4:	4b12      	ldr	r3, [pc, #72]	; (1800 <wavefolderTick+0x100>)
    sample = tHighpass_tick(&dcBlock1[v], sample);
    17b6:	4813      	ldr	r0, [pc, #76]	; (1804 <wavefolderTick+0x104>)
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    17b8:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v] * invCurFB[v];
    17bc:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v], sample);
    17be:	4420      	add	r0, r4
    sample = wfState[v] * invCurFB[v];
    17c0:	ed93 7a00 	vldr	s14, [r3]
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    17c4:	eee8 7ac0 	vfms.f32	s15, s17, s0
}
    17c8:	ecbd 8b02 	vpop	{d8}
    wfState[v] = (ff + fb) - param5[v] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    17cc:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v], sample);
    17d0:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    17d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v], sample);
    17d8:	f001 bf96 	b.w	3708 <__tHighpass_tick_veneer>
    17dc:	2000f4e4 	.word	0x2000f4e4
    17e0:	20000664 	.word	0x20000664
    17e4:	20000654 	.word	0x20000654
    17e8:	3eaaaaaa 	.word	0x3eaaaaaa
    17ec:	3fbffff8 	.word	0x3fbffff8
    17f0:	20000674 	.word	0x20000674
    17f4:	20000684 	.word	0x20000684
    17f8:	40c90fdb 	.word	0x40c90fdb
    17fc:	20000694 	.word	0x20000694
    1800:	20000398 	.word	0x20000398
    1804:	200002b8 	.word	0x200002b8
    1808:	f3af 8000 	nop.w
    180c:	f3af 8000 	nop.w
    1810:	f3af 8000 	nop.w
    1814:	f3af 8000 	nop.w
    1818:	f3af 8000 	nop.w
    181c:	f3af 8000 	nop.w

00001820 <chorusParam1>:
	param1[v] = value * 5780.0f + 10.0f;
    1820:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    1824:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1838 <chorusParam1+0x18>
    1828:	4b04      	ldr	r3, [pc, #16]	; (183c <chorusParam1+0x1c>)
    182a:	eee0 7a07 	vfma.f32	s15, s0, s14
    182e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1832:	edc0 7a00 	vstr	s15, [r0]
}
    1836:	4770      	bx	lr
    1838:	45b4a000 	.word	0x45b4a000
    183c:	20000654 	.word	0x20000654

00001840 <chorusParam2>:
	param2[v] = value * 0.1f;
    1840:	eddf 7a04 	vldr	s15, [pc, #16]	; 1854 <chorusParam2+0x14>
    1844:	4b04      	ldr	r3, [pc, #16]	; (1858 <chorusParam2+0x18>)
    1846:	ee20 0a27 	vmul.f32	s0, s0, s15
    184a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    184e:	ed80 0a00 	vstr	s0, [r0]
}
    1852:	4770      	bx	lr
    1854:	3dcccccd 	.word	0x3dcccccd
    1858:	20000664 	.word	0x20000664
    185c:	f3af 8000 	nop.w

00001860 <chorusParam3>:
    tCycle_setFreq(&mod1[v], (value * 0.4f) + 0.01f);
    1860:	ed9f 7a06 	vldr	s14, [pc, #24]	; 187c <chorusParam3+0x1c>
    1864:	eddf 7a06 	vldr	s15, [pc, #24]	; 1880 <chorusParam3+0x20>
    1868:	4b06      	ldr	r3, [pc, #24]	; (1884 <chorusParam3+0x24>)
    186a:	eee0 7a07 	vfma.f32	s15, s0, s14
    186e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1872:	eeb0 0a67 	vmov.f32	s0, s15
    1876:	f001 bf43 	b.w	3700 <__tCycle_setFreq_veneer>
    187a:	bf00      	nop
    187c:	3ecccccd 	.word	0x3ecccccd
    1880:	3c23d70a 	.word	0x3c23d70a
    1884:	200005e0 	.word	0x200005e0
    1888:	f3af 8000 	nop.w
    188c:	f3af 8000 	nop.w
    1890:	f3af 8000 	nop.w
    1894:	f3af 8000 	nop.w
    1898:	f3af 8000 	nop.w
    189c:	f3af 8000 	nop.w

000018a0 <chorusParam4>:
    tCycle_setFreq(&mod2[v], (value * 0.4444444f) + 0.011f);
    18a0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 18bc <chorusParam4+0x1c>
    18a4:	eddf 7a06 	vldr	s15, [pc, #24]	; 18c0 <chorusParam4+0x20>
    18a8:	4b06      	ldr	r3, [pc, #24]	; (18c4 <chorusParam4+0x24>)
    18aa:	eee0 7a07 	vfma.f32	s15, s0, s14
    18ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    18b2:	eeb0 0a67 	vmov.f32	s0, s15
    18b6:	f001 bf23 	b.w	3700 <__tCycle_setFreq_veneer>
    18ba:	bf00      	nop
    18bc:	3ee38e37 	.word	0x3ee38e37
    18c0:	3c343958 	.word	0x3c343958
    18c4:	200005f0 	.word	0x200005f0
    18c8:	f3af 8000 	nop.w
    18cc:	f3af 8000 	nop.w
    18d0:	f3af 8000 	nop.w
    18d4:	f3af 8000 	nop.w
    18d8:	f3af 8000 	nop.w
    18dc:	f3af 8000 	nop.w

000018e0 <chorusTick>:
{
    18e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18e2:	4604      	mov	r4, r0
	tLinearDelay_setDelay(&delay1[v], param1[v] * .707f * (1.0f + param2[v] * tCycle_tick(&mod1[v])));
    18e4:	4f27      	ldr	r7, [pc, #156]	; (1984 <chorusTick+0xa4>)
    18e6:	4e28      	ldr	r6, [pc, #160]	; (1988 <chorusTick+0xa8>)
    18e8:	4828      	ldr	r0, [pc, #160]	; (198c <chorusTick+0xac>)
    18ea:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    18ee:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    18f2:	4d27      	ldr	r5, [pc, #156]	; (1990 <chorusTick+0xb0>)
    18f4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    18f8:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    18fc:	00a4      	lsls	r4, r4, #2
{
    18fe:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v], param1[v] * .707f * (1.0f + param2[v] * tCycle_tick(&mod1[v])));
    1902:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    1906:	ed97 9a00 	vldr	s18, [r7]
{
    190a:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v], param1[v] * .707f * (1.0f + param2[v] * tCycle_tick(&mod1[v])));
    190e:	edd6 9a00 	vldr	s19, [r6]
    1912:	f001 ff05 	bl	3720 <__tCycle_tick_veneer>
    1916:	4628      	mov	r0, r5
    1918:	eef0 7a48 	vmov.f32	s15, s16
    191c:	eee9 7a80 	vfma.f32	s15, s19, s0
    1920:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 1994 <chorusTick+0xb4>
    1924:	ee29 0a00 	vmul.f32	s0, s18, s0
    1928:	ee20 0a27 	vmul.f32	s0, s0, s15
    192c:	f001 ff2c 	bl	3788 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v], param1[v] * .5f * (1.0f - param2[v] * tCycle_tick(&mod2[v])));
    1930:	4819      	ldr	r0, [pc, #100]	; (1998 <chorusTick+0xb8>)
    1932:	4b1a      	ldr	r3, [pc, #104]	; (199c <chorusTick+0xbc>)
    1934:	edd6 9a00 	vldr	s19, [r6]
    1938:	4420      	add	r0, r4
    193a:	ed97 9a00 	vldr	s18, [r7]
    193e:	441c      	add	r4, r3
    1940:	f001 feee 	bl	3720 <__tCycle_tick_veneer>
    1944:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1948:	eea9 8ac0 	vfms.f32	s16, s19, s0
    194c:	4620      	mov	r0, r4
    194e:	ee29 0a27 	vmul.f32	s0, s18, s15
    1952:	ee20 0a08 	vmul.f32	s0, s0, s16
    1956:	f001 ff17 	bl	3788 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v], sample) - sample;
    195a:	eeb0 0a68 	vmov.f32	s0, s17
    195e:	4628      	mov	r0, r5
    1960:	f001 fec2 	bl	36e8 <__tLinearDelay_tick_veneer>
    1964:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v], sample) - sample;
    1968:	4620      	mov	r0, r4
    196a:	eeb0 0a68 	vmov.f32	s0, s17
    196e:	f001 febb 	bl	36e8 <__tLinearDelay_tick_veneer>
    return -temp;
    1972:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    1976:	ee38 0a00 	vadd.f32	s0, s16, s0
}
    197a:	ee98 0aa7 	vfnms.f32	s0, s17, s15
    197e:	ecbd 8b04 	vpop	{d8-d9}
    1982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1984:	20000654 	.word	0x20000654
    1988:	20000664 	.word	0x20000664
    198c:	200005e0 	.word	0x200005e0
    1990:	200002dc 	.word	0x200002dc
    1994:	3f34fdf4 	.word	0x3f34fdf4
    1998:	200005f0 	.word	0x200005f0
    199c:	200002ec 	.word	0x200002ec

000019a0 <shaperTick>:
    float temp = LEAF_shaper(sample + (param2[v] * param1[v]),param3[v]);
    19a0:	4b0e      	ldr	r3, [pc, #56]	; (19dc <shaperTick+0x3c>)
    sample = sample * param1[v];
    19a2:	4a0f      	ldr	r2, [pc, #60]	; (19e0 <shaperTick+0x40>)
    float temp = LEAF_shaper(sample + (param2[v] * param1[v]),param3[v]);
    19a4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample * param1[v];
    19a8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float temp = LEAF_shaper(sample + (param2[v] * param1[v]),param3[v]);
    19ac:	edd3 7a00 	vldr	s15, [r3]
    19b0:	4b0c      	ldr	r3, [pc, #48]	; (19e4 <shaperTick+0x44>)
    19b2:	ee30 0a27 	vadd.f32	s0, s0, s15
    19b6:	edd2 7a00 	vldr	s15, [r2]
    19ba:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    19be:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v] * param1[v]),param3[v]);
    19c0:	ee20 0a27 	vmul.f32	s0, s0, s15
    19c4:	edd3 0a00 	vldr	s1, [r3]
    19c8:	0084      	lsls	r4, r0, #2
    19ca:	f001 fe39 	bl	3640 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v], temp);
    19ce:	4806      	ldr	r0, [pc, #24]	; (19e8 <shaperTick+0x48>)
    19d0:	4420      	add	r0, r4
}
    19d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v], temp);
    19d6:	f001 be97 	b.w	3708 <__tHighpass_tick_veneer>
    19da:	bf00      	nop
    19dc:	20000664 	.word	0x20000664
    19e0:	20000654 	.word	0x20000654
    19e4:	20000674 	.word	0x20000674
    19e8:	200002b8 	.word	0x200002b8
    19ec:	f3af 8000 	nop.w
    19f0:	f3af 8000 	nop.w
    19f4:	f3af 8000 	nop.w
    19f8:	f3af 8000 	nop.w
    19fc:	f3af 8000 	nop.w

00001a00 <blankTick>:
}
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop
    1a04:	f3af 8000 	nop.w
    1a08:	f3af 8000 	nop.w
    1a0c:	f3af 8000 	nop.w
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <tiltFilterTick>:
{
    1a20:	b510      	push	{r4, lr}
    1a22:	4604      	mov	r4, r0
    sample = tVZFilter_tickEfficient(&shelf1[v], sample);
    1a24:	4807      	ldr	r0, [pc, #28]	; (1a44 <tiltFilterTick+0x24>)
    1a26:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1a2a:	f001 fe61 	bl	36f0 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&shelf2[v], sample);
    1a2e:	4806      	ldr	r0, [pc, #24]	; (1a48 <tiltFilterTick+0x28>)
    1a30:	00a4      	lsls	r4, r4, #2
    1a32:	4420      	add	r0, r4
    1a34:	f001 fe5c 	bl	36f0 <__tVZFilter_tickEfficient_veneer>
    sample = tVZFilter_tickEfficient(&bell1[v], sample);
    1a38:	4804      	ldr	r0, [pc, #16]	; (1a4c <tiltFilterTick+0x2c>)
    1a3a:	4420      	add	r0, r4
}
    1a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v], sample);
    1a40:	f001 be56 	b.w	36f0 <__tVZFilter_tickEfficient_veneer>
    1a44:	20000778 	.word	0x20000778
    1a48:	20000788 	.word	0x20000788
    1a4c:	20000288 	.word	0x20000288
    1a50:	f3af 8000 	nop.w
    1a54:	f3af 8000 	nop.w
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <tanhTick>:
    float temp = tanhf(sample + (param2[v]*gain));
    1a60:	4a10      	ldr	r2, [pc, #64]	; (1aa4 <tanhTick+0x44>)
    1a62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    float gain = param1[v];
    1a66:	4b10      	ldr	r3, [pc, #64]	; (1aa8 <tanhTick+0x48>)
    float temp = tanhf(sample + (param2[v]*gain));
    1a68:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float gain = param1[v];
    1a6c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1a70:	ed92 7a00 	vldr	s14, [r2]
    1a74:	eea7 0a27 	vfma.f32	s0, s14, s15
    float temp = tanhf(sample + (param2[v]*gain));
    1a78:	edd3 7a00 	vldr	s15, [r3]
{
    1a7c:	b510      	push	{r4, lr}
    float temp = tanhf(sample + (param2[v]*gain));
    1a7e:	0084      	lsls	r4, r0, #2
    1a80:	ee20 0a27 	vmul.f32	s0, s0, s15
    1a84:	f001 fe98 	bl	37b8 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v], temp);
    1a88:	4808      	ldr	r0, [pc, #32]	; (1aac <tanhTick+0x4c>)
    1a8a:	4420      	add	r0, r4
    1a8c:	f001 fe3c 	bl	3708 <__tHighpass_tick_veneer>
    temp *= param4[v];
    1a90:	4b07      	ldr	r3, [pc, #28]	; (1ab0 <tanhTick+0x50>)
    1a92:	4423      	add	r3, r4
    1a94:	edd3 7a00 	vldr	s15, [r3]
}
    1a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    1a9c:	ee20 0a27 	vmul.f32	s0, s0, s15
    1aa0:	f001 be8a 	b.w	37b8 <__tanhf_veneer>
    1aa4:	20000664 	.word	0x20000664
    1aa8:	20000654 	.word	0x20000654
    1aac:	200002b8 	.word	0x200002b8
    1ab0:	20000684 	.word	0x20000684
    1ab4:	f3af 8000 	nop.w
    1ab8:	f3af 8000 	nop.w
    1abc:	f3af 8000 	nop.w

00001ac0 <softClipTick>:
    sample = sample * param1[v];
    1ac0:	4918      	ldr	r1, [pc, #96]	; (1b24 <softClipTick+0x64>)
    1ac2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    sample = sample + param2[v];
    1ac6:	4a18      	ldr	r2, [pc, #96]	; (1b28 <softClipTick+0x68>)
    1ac8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample * param1[v];
    1acc:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    float shape = param3[v];
    1ad0:	4b16      	ldr	r3, [pc, #88]	; (1b2c <softClipTick+0x6c>)
    sample = sample + param2[v];
    1ad2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    1ad6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 1b30 <softClipTick+0x70>
    1ada:	ed91 5a00 	vldr	s10, [r1]
    float shape = param3[v];
    1ade:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample + param2[v];
    1ae2:	edd2 7a00 	vldr	s15, [r2]
    float shape = param3[v];
    1ae6:	edd3 6a00 	vldr	s13, [r3]
    sample = sample + param2[v];
    1aea:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v];
    1aee:	4b11      	ldr	r3, [pc, #68]	; (1b34 <softClipTick+0x74>)
    1af0:	ee26 7a87 	vmul.f32	s14, s13, s14
    sample = tHighpass_tick(&dcBlock1[v], sample);
    1af4:	4a10      	ldr	r2, [pc, #64]	; (1b38 <softClipTick+0x78>)
        sample = sample * shapeDividerS[v];
    1af6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = tHighpass_tick(&dcBlock1[v], sample);
    1afa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
        sample = sample * shapeDividerS[v];
    1afe:	ed93 0a00 	vldr	s0, [r3]
    1b02:	fec7 7ae5 	vminnm.f32	s15, s15, s11
    1b06:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
    1b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
    1b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
    1b12:	ee36 7ac7 	vsub.f32	s14, s13, s14
    1b16:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v], sample);
    1b1a:	ee27 0a80 	vmul.f32	s0, s15, s0
    1b1e:	f001 bdf3 	b.w	3708 <__tHighpass_tick_veneer>
    1b22:	bf00      	nop
    1b24:	20000654 	.word	0x20000654
    1b28:	20000664 	.word	0x20000664
    1b2c:	20000674 	.word	0x20000674
    1b30:	3eaaaaaa 	.word	0x3eaaaaaa
    1b34:	2000075c 	.word	0x2000075c
    1b38:	200002b8 	.word	0x200002b8
    1b3c:	f3af 8000 	nop.w

00001b40 <hardClipTick>:
    sample = sample * param1[v];
    1b40:	4a1a      	ldr	r2, [pc, #104]	; (1bac <hardClipTick+0x6c>)
    1b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample + param2[v];
    1b46:	4b1a      	ldr	r3, [pc, #104]	; (1bb0 <hardClipTick+0x70>)
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v]) * shapeDividerH[v]) * param3[v]);
    1b48:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    sample = sample * param1[v];
    1b4c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    sample = sample + param2[v];
    1b50:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    1b54:	ed92 6a00 	vldr	s12, [r2]
    1b58:	edd3 7a00 	vldr	s15, [r3]
{
    1b5c:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v];
    1b5e:	eee6 7a00 	vfma.f32	s15, s12, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v]) * shapeDividerH[v]) * param3[v]);
    1b62:	4e14      	ldr	r6, [pc, #80]	; (1bb4 <hardClipTick+0x74>)
    sample = sample * param1[v];
    1b64:	0084      	lsls	r4, r0, #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v]) * shapeDividerH[v]) * param3[v]);
    1b66:	4d14      	ldr	r5, [pc, #80]	; (1bb8 <hardClipTick+0x78>)
    1b68:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    1b6c:	4425      	add	r5, r4
    1b6e:	ed96 0a00 	vldr	s0, [r6]
    1b72:	fec7 7ae6 	vminnm.f32	s15, s15, s13
    1b76:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    1b7a:	ee27 0a80 	vmul.f32	s0, s15, s0
    1b7e:	f001 fd7f 	bl	3680 <__arm_sin_f32_veneer>
    1b82:	ed96 7a00 	vldr	s14, [r6]
    1b86:	edd5 7a00 	vldr	s15, [r5]
    1b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
    1b8e:	ee27 0a80 	vmul.f32	s0, s15, s0
    1b92:	f001 fd75 	bl	3680 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v];
    1b96:	edd5 7a00 	vldr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v], sample);
    1b9a:	4808      	ldr	r0, [pc, #32]	; (1bbc <hardClipTick+0x7c>)
    1b9c:	ee20 0a27 	vmul.f32	s0, s0, s15
    1ba0:	4420      	add	r0, r4
}
    1ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v], sample);
    1ba6:	f001 bdaf 	b.w	3708 <__tHighpass_tick_veneer>
    1baa:	bf00      	nop
    1bac:	20000654 	.word	0x20000654
    1bb0:	20000664 	.word	0x20000664
    1bb4:	20000674 	.word	0x20000674
    1bb8:	2000074c 	.word	0x2000074c
    1bbc:	200002b8 	.word	0x200002b8

00001bc0 <satTick>:
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    1bc0:	4b17      	ldr	r3, [pc, #92]	; (1c20 <satTick+0x60>)
    1bc2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    sample = sample * param1[v];
    1bc6:	4a17      	ldr	r2, [pc, #92]	; (1c24 <satTick+0x64>)
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    1bc8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample * param1[v];
    1bcc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    1bd0:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v];
    1bd4:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    1bd8:	eeb0 6a47 	vmov.f32	s12, s14
    temp = tHighpass_tick(&dcBlock1[v], temp);
    1bdc:	4a12      	ldr	r2, [pc, #72]	; (1c28 <satTick+0x68>)
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    1bde:	ee27 7a87 	vmul.f32	s14, s15, s14
    1be2:	eea7 6a80 	vfma.f32	s12, s15, s0
    1be6:	eea7 7a80 	vfma.f32	s14, s15, s0
{;
    1bea:	b510      	push	{r4, lr}
    sample = sample * param1[v];
    1bec:	0084      	lsls	r4, r0, #2
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    1bee:	eeb0 6ac6 	vabs.f32	s12, s12
    temp = tHighpass_tick(&dcBlock1[v], temp);
    1bf2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    float temp = (sample + (param2[v] * param1[v])) / (1.0f + fabs(sample + param2[v]));
    1bf6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    1bfa:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    1bfe:	ee36 6b05 	vadd.f64	d6, d6, d5
    1c02:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v], temp);
    1c06:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    1c0a:	f001 fd7d 	bl	3708 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v], temp);
    1c0e:	4807      	ldr	r0, [pc, #28]	; (1c2c <satTick+0x6c>)
    1c10:	4420      	add	r0, r4
    1c12:	f001 fd79 	bl	3708 <__tHighpass_tick_veneer>
}
    1c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    1c1a:	f001 bdcd 	b.w	37b8 <__tanhf_veneer>
    1c1e:	bf00      	nop
    1c20:	20000664 	.word	0x20000664
    1c24:	20000654 	.word	0x20000654
    1c28:	200002b8 	.word	0x200002b8
    1c2c:	200002c8 	.word	0x200002c8
    1c30:	f3af 8000 	nop.w
    1c34:	f3af 8000 	nop.w
    1c38:	f3af 8000 	nop.w
    1c3c:	f3af 8000 	nop.w

00001c40 <bcTick>:
    sample = sample * param1[v];
    1c40:	4b05      	ldr	r3, [pc, #20]	; (1c58 <bcTick+0x18>)
    return tCrusher_tick(&bc[v], sample);
    1c42:	4a06      	ldr	r2, [pc, #24]	; (1c5c <bcTick+0x1c>)
    sample = sample * param1[v];
    1c44:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    return tCrusher_tick(&bc[v], sample);
    1c48:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    sample = sample * param1[v];
    1c4c:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v], sample);
    1c50:	ee20 0a27 	vmul.f32	s0, s0, s15
    1c54:	f001 bdc4 	b.w	37e0 <__tCrusher_tick_veneer>
    1c58:	20000654 	.word	0x20000654
    1c5c:	20000278 	.word	0x20000278

00001c60 <compressorTick>:
    return tCompressor_tick(&comp[v], sample);
    1c60:	4b02      	ldr	r3, [pc, #8]	; (1c6c <compressorTick+0xc>)
    1c62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c66:	f001 bd03 	b.w	3670 <__tCompressor_tick_veneer>
    1c6a:	bf00      	nop
    1c6c:	200002a0 	.word	0x200002a0
    1c70:	f3af 8000 	nop.w
    1c74:	f3af 8000 	nop.w
    1c78:	f3af 8000 	nop.w
    1c7c:	f3af 8000 	nop.w

00001c80 <FXlowpassTick>:
	return tSVF_tick(&FXlowpass[v], sample);
    1c80:	4b02      	ldr	r3, [pc, #8]	; (1c8c <FXlowpassTick+0xc>)
    1c82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1c86:	f001 bccb 	b.w	3620 <__tSVF_tick_veneer>
    1c8a:	bf00      	nop
    1c8c:	20000234 	.word	0x20000234
    1c90:	f3af 8000 	nop.w
    1c94:	f3af 8000 	nop.w
    1c98:	f3af 8000 	nop.w
    1c9c:	f3af 8000 	nop.w

00001ca0 <FXhighpassTick>:
	return tSVF_tick(&FXhighpass[v], sample);
    1ca0:	4b02      	ldr	r3, [pc, #8]	; (1cac <FXhighpassTick+0xc>)
    1ca2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ca6:	f001 bcbb 	b.w	3620 <__tSVF_tick_veneer>
    1caa:	bf00      	nop
    1cac:	20000224 	.word	0x20000224
    1cb0:	f3af 8000 	nop.w
    1cb4:	f3af 8000 	nop.w
    1cb8:	f3af 8000 	nop.w
    1cbc:	f3af 8000 	nop.w

00001cc0 <FXbandpassTick>:
	return tSVF_tick(&FXbandpass[v], sample);
    1cc0:	4b02      	ldr	r3, [pc, #8]	; (1ccc <FXbandpassTick+0xc>)
    1cc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1cc6:	f001 bcab 	b.w	3620 <__tSVF_tick_veneer>
    1cca:	bf00      	nop
    1ccc:	20000204 	.word	0x20000204
    1cd0:	f3af 8000 	nop.w
    1cd4:	f3af 8000 	nop.w
    1cd8:	f3af 8000 	nop.w
    1cdc:	f3af 8000 	nop.w

00001ce0 <FXdiodeLowpassTick>:
	return tDiodeFilter_tick(&FXdiodeFilters[v], sample);
    1ce0:	4b02      	ldr	r3, [pc, #8]	; (1cec <FXdiodeLowpassTick+0xc>)
    1ce2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1ce6:	f001 bd13 	b.w	3710 <__tDiodeFilter_tick_veneer>
    1cea:	bf00      	nop
    1cec:	20000214 	.word	0x20000214
    1cf0:	f3af 8000 	nop.w
    1cf4:	f3af 8000 	nop.w
    1cf8:	f3af 8000 	nop.w
    1cfc:	f3af 8000 	nop.w

00001d00 <FXVZpeakTick>:
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v], sample);
    1d00:	4b02      	ldr	r3, [pc, #8]	; (1d0c <FXVZpeakTick+0xc>)
    1d02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d06:	f001 bcf3 	b.w	36f0 <__tVZFilter_tickEfficient_veneer>
    1d0a:	bf00      	nop
    1d0c:	200001f4 	.word	0x200001f4
    1d10:	f3af 8000 	nop.w
    1d14:	f3af 8000 	nop.w
    1d18:	f3af 8000 	nop.w
    1d1c:	f3af 8000 	nop.w

00001d20 <FXVZlowshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterLS[v], sample);
    1d20:	4b02      	ldr	r3, [pc, #8]	; (1d2c <FXVZlowshelfTick+0xc>)
    1d22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d26:	f001 bce3 	b.w	36f0 <__tVZFilter_tickEfficient_veneer>
    1d2a:	bf00      	nop
    1d2c:	200001e4 	.word	0x200001e4
    1d30:	f3af 8000 	nop.w
    1d34:	f3af 8000 	nop.w
    1d38:	f3af 8000 	nop.w
    1d3c:	f3af 8000 	nop.w

00001d40 <FXVZhighshelfTick>:
	return tVZFilter_tickEfficient(&FXVZfilterHS[v], sample);
    1d40:	4b02      	ldr	r3, [pc, #8]	; (1d4c <FXVZhighshelfTick+0xc>)
    1d42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d46:	f001 bcd3 	b.w	36f0 <__tVZFilter_tickEfficient_veneer>
    1d4a:	bf00      	nop
    1d4c:	200001d4 	.word	0x200001d4
    1d50:	f3af 8000 	nop.w
    1d54:	f3af 8000 	nop.w
    1d58:	f3af 8000 	nop.w
    1d5c:	f3af 8000 	nop.w

00001d60 <FXVZbandrejectTick>:
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v], sample);
    1d60:	4b02      	ldr	r3, [pc, #8]	; (1d6c <FXVZbandrejectTick+0xc>)
    1d62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d66:	f001 bcc3 	b.w	36f0 <__tVZFilter_tickEfficient_veneer>
    1d6a:	bf00      	nop
    1d6c:	200001c4 	.word	0x200001c4
    1d70:	f3af 8000 	nop.w
    1d74:	f3af 8000 	nop.w
    1d78:	f3af 8000 	nop.w
    1d7c:	f3af 8000 	nop.w

00001d80 <FXLadderLowpassTick>:
	return tLadderFilter_tick(&FXLadderfilter[v], sample);
    1d80:	4b02      	ldr	r3, [pc, #8]	; (1d8c <FXLadderLowpassTick+0xc>)
    1d82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d86:	f001 bc93 	b.w	36b0 <__tLadderFilter_tick_veneer>
    1d8a:	bf00      	nop
    1d8c:	200001b4 	.word	0x200001b4
    1d90:	f3af 8000 	nop.w
    1d94:	f3af 8000 	nop.w
    1d98:	f3af 8000 	nop.w
    1d9c:	f3af 8000 	nop.w

00001da0 <noiseSetTilt>:
{
    1da0:	b508      	push	{r3, lr}
	tVZFilter_setGain(&noiseShelf1, fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1da2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
{
    1da6:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1, fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1daa:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    1dae:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1, fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
    1db2:	eee0 7a68 	vfms.f32	s15, s0, s17
    1db6:	eeb0 0a67 	vmov.f32	s0, s15
    1dba:	f001 fced 	bl	3798 <__fastdbtoa_veneer>
    1dbe:	4808      	ldr	r0, [pc, #32]	; (1de0 <noiseSetTilt+0x40>)
    1dc0:	f001 fcf2 	bl	37a8 <__tVZFilter_setGain_veneer>
	tVZFilter_setGain(&noiseShelf2, fastdbtoa((value * 30.0f) - 15.0f));
    1dc4:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    1dc8:	eea8 0a28 	vfma.f32	s0, s16, s17
    1dcc:	f001 fce4 	bl	3798 <__fastdbtoa_veneer>
    1dd0:	4804      	ldr	r0, [pc, #16]	; (1de4 <noiseSetTilt+0x44>)
}
    1dd2:	ecbd 8b02 	vpop	{d8}
    1dd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tVZFilter_setGain(&noiseShelf2, fastdbtoa((value * 30.0f) - 15.0f));
    1dda:	f001 bce5 	b.w	37a8 <__tVZFilter_setGain_veneer>
    1dde:	bf00      	nop
    1de0:	20000624 	.word	0x20000624
    1de4:	20000628 	.word	0x20000628
    1de8:	f3af 8000 	nop.w
    1dec:	f3af 8000 	nop.w
    1df0:	f3af 8000 	nop.w
    1df4:	f3af 8000 	nop.w
    1df8:	f3af 8000 	nop.w
    1dfc:	f3af 8000 	nop.w

00001e00 <noiseSetGain>:
	tVZFilter_setGain(&noiseBell1, fastdbtoa((value* 34.0f) - 17.0f));
    1e00:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    1e04:	ed9f 7a06 	vldr	s14, [pc, #24]	; 1e20 <noiseSetGain+0x20>
{
    1e08:	b508      	push	{r3, lr}
	tVZFilter_setGain(&noiseBell1, fastdbtoa((value* 34.0f) - 17.0f));
    1e0a:	eee0 7a07 	vfma.f32	s15, s0, s14
    1e0e:	eeb0 0a67 	vmov.f32	s0, s15
    1e12:	f001 fcc1 	bl	3798 <__fastdbtoa_veneer>
    1e16:	4803      	ldr	r0, [pc, #12]	; (1e24 <noiseSetGain+0x24>)
}
    1e18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tVZFilter_setGain(&noiseBell1, fastdbtoa((value* 34.0f) - 17.0f));
    1e1c:	f001 bcc4 	b.w	37a8 <__tVZFilter_setGain_veneer>
    1e20:	42080000 	.word	0x42080000
    1e24:	20000618 	.word	0x20000618
    1e28:	f3af 8000 	nop.w
    1e2c:	f3af 8000 	nop.w
    1e30:	f3af 8000 	nop.w
    1e34:	f3af 8000 	nop.w
    1e38:	f3af 8000 	nop.w
    1e3c:	f3af 8000 	nop.w

00001e40 <noiseSetFreq>:
{
    1e40:	eef0 6a40 	vmov.f32	s13, s0
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    1e44:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1e70 <noiseSetFreq+0x30>
    1e48:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
    1e4c:	eddf 0a09 	vldr	s1, [pc, #36]	; 1e74 <noiseSetFreq+0x34>
    1e50:	ed9f 1a09 	vldr	s2, [pc, #36]	; 1e78 <noiseSetFreq+0x38>
    1e54:	ed9f 0a09 	vldr	s0, [pc, #36]	; 1e7c <noiseSetFreq+0x3c>
    1e58:	eee6 7a87 	vfma.f32	s15, s13, s14
{
    1e5c:	b508      	push	{r3, lr}
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    1e5e:	ee67 0aa0 	vmul.f32	s1, s15, s1
    1e62:	f001 fc75 	bl	3750 <__LEAF_clip_veneer>
	tVZFilter_setFreqFast(&noiseBell1, value);
    1e66:	4806      	ldr	r0, [pc, #24]	; (1e80 <noiseSetFreq+0x40>)
}
    1e68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tVZFilter_setFreqFast(&noiseBell1, value);
    1e6c:	f001 bbb8 	b.w	35e0 <__tVZFilter_setFreqFast_veneer>
    1e70:	429a0000 	.word	0x429a0000
    1e74:	420fb824 	.word	0x420fb824
    1e78:	457ff000 	.word	0x457ff000
    1e7c:	00000000 	.word	0x00000000
    1e80:	20000618 	.word	0x20000618
    1e84:	f3af 8000 	nop.w
    1e88:	f3af 8000 	nop.w
    1e8c:	f3af 8000 	nop.w
    1e90:	f3af 8000 	nop.w
    1e94:	f3af 8000 	nop.w
    1e98:	f3af 8000 	nop.w
    1e9c:	f3af 8000 	nop.w

00001ea0 <noise_tick>:
{
    1ea0:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal;
    1ea2:	4b28      	ldr	r3, [pc, #160]	; (1f44 <noise_tick+0xa4>)
	uint32_t tempCount7 = DWT->CYCCNT;
    1ea4:	4c28      	ldr	r4, [pc, #160]	; (1f48 <noise_tick+0xa8>)
	float sample = tNoise_tick(&noise);
    1ea6:	4829      	ldr	r0, [pc, #164]	; (1f4c <noise_tick+0xac>)
	uint32_t tempCount7 = DWT->CYCCNT;
    1ea8:	6865      	ldr	r5, [r4, #4]
{
    1eaa:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal;
    1eae:	edd3 9a5b 	vldr	s19, [r3, #364]	; 0x16c
	float filterSend = params[NoiseFilterSend].realVal;
    1eb2:	ed93 8a74 	vldr	s16, [r3, #464]	; 0x1d0
	float amp = params[NoiseAmp].realVal;
    1eb6:	edd3 8a6f 	vldr	s17, [r3, #444]	; 0x1bc
	float sample = tNoise_tick(&noise);
    1eba:	f001 fc71 	bl	37a0 <__tNoise_tick_veneer>
	uint32_t tempCount8 = DWT->CYCCNT;
    1ebe:	6863      	ldr	r3, [r4, #4]
	float sample = tNoise_tick(&noise);
    1ec0:	eeb0 9a40 	vmov.f32	s18, s0
	float sample1 = random_values[randomValPointer++];
    1ec4:	4922      	ldr	r1, [pc, #136]	; (1f50 <noise_tick+0xb0>)
	timeNoise = tempCount8-tempCount7;
    1ec6:	1b5b      	subs	r3, r3, r5
    1ec8:	4a22      	ldr	r2, [pc, #136]	; (1f54 <noise_tick+0xb4>)
	sample1 = tVZFilter_tickEfficient(&noiseShelf1, sample1);
    1eca:	4823      	ldr	r0, [pc, #140]	; (1f58 <noise_tick+0xb8>)
	timeNoise = tempCount8-tempCount7;
    1ecc:	6013      	str	r3, [r2, #0]
	float sample1 = random_values[randomValPointer++];
    1ece:	780b      	ldrb	r3, [r1, #0]
    1ed0:	4a22      	ldr	r2, [pc, #136]	; (1f5c <noise_tick+0xbc>)
	uint32_t tempCount9 = DWT->CYCCNT;
    1ed2:	6865      	ldr	r5, [r4, #4]
	float sample1 = random_values[randomValPointer++];
    1ed4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1ed8:	3301      	adds	r3, #1
    1eda:	700b      	strb	r3, [r1, #0]
	uint32_t tempCount10 = DWT->CYCCNT;
    1edc:	6863      	ldr	r3, [r4, #4]
	sample1 = tVZFilter_tickEfficient(&noiseShelf1, sample1);
    1ede:	ed92 0a00 	vldr	s0, [r2]
	timeRandom = tempCount10-tempCount9;
    1ee2:	1b5b      	subs	r3, r3, r5
    1ee4:	4a1e      	ldr	r2, [pc, #120]	; (1f60 <noise_tick+0xc0>)
    1ee6:	6013      	str	r3, [r2, #0]
	sample1 = tVZFilter_tickEfficient(&noiseShelf1, sample1);
    1ee8:	f001 fc02 	bl	36f0 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseShelf2, sample);
    1eec:	eeb0 0a49 	vmov.f32	s0, s18
    1ef0:	481c      	ldr	r0, [pc, #112]	; (1f64 <noise_tick+0xc4>)
    1ef2:	f001 fbfd 	bl	36f0 <__tVZFilter_tickEfficient_veneer>
	sample = tVZFilter_tickEfficient(&noiseBell1, sample);
    1ef6:	481c      	ldr	r0, [pc, #112]	; (1f68 <noise_tick+0xc8>)
    1ef8:	f001 fbfa 	bl	36f0 <__tVZFilter_tickEfficient_veneer>
	float normSample = (sample + 1.f) * 0.5f;
    1efc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    1f00:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 1f6c <noise_tick+0xcc>
	noiseOuts[0] = sample * filterSend *  enabled;
    1f04:	ee29 7a88 	vmul.f32	s14, s19, s16
	float normSample = (sample + 1.f) * 0.5f;
    1f08:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0] = sample * filterSend *  enabled;
    1f0c:	4b18      	ldr	r3, [pc, #96]	; (1f70 <noise_tick+0xd0>)
	noiseOuts[1] = sample * (1.f-filterSend) * enabled ;
    1f0e:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    1f12:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    1f16:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[3] = normSample;
    1f1a:	4a16      	ldr	r2, [pc, #88]	; (1f74 <noise_tick+0xd4>)
	noiseOuts[1] = sample * (1.f-filterSend) * enabled ;
    1f1c:	ee28 8a29 	vmul.f32	s16, s16, s19
	float normSample = (sample + 1.f) * 0.5f;
    1f20:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0] = sample * filterSend *  enabled;
    1f24:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1] = sample * (1.f-filterSend) * enabled ;
    1f28:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    1f2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0] = sample * filterSend *  enabled;
    1f30:	ed83 7a00 	vstr	s14, [r3]
	noiseOuts[1] = sample * (1.f-filterSend) * enabled ;
    1f34:	ed83 0a01 	vstr	s0, [r3, #4]
	sourceValues[3] = normSample;
    1f38:	edc2 7a03 	vstr	s15, [r2, #12]
}
    1f3c:	ecbd 8b04 	vpop	{d8-d9}
    1f40:	bd38      	pop	{r3, r4, r5, pc}
    1f42:	bf00      	nop
    1f44:	20014e04 	.word	0x20014e04
    1f48:	e0001000 	.word	0xe0001000
    1f4c:	20000614 	.word	0x20000614
    1f50:	20000730 	.word	0x20000730
    1f54:	2000f4ac 	.word	0x2000f4ac
    1f58:	20000624 	.word	0x20000624
    1f5c:	20015b58 	.word	0x20015b58
    1f60:	2000f4b4 	.word	0x2000f4b4
    1f64:	20000628 	.word	0x20000628
    1f68:	20000618 	.word	0x20000618
    1f6c:	00000000 	.word	0x00000000
    1f70:	2000061c 	.word	0x2000061c
    1f74:	2000f358 	.word	0x2000f358
    1f78:	f3af 8000 	nop.w
    1f7c:	f3af 8000 	nop.w

00001f80 <HAL_SAI_RxCpltCallback>:
	if (!diskBusy)
    1f80:	4b03      	ldr	r3, [pc, #12]	; (1f90 <HAL_SAI_RxCpltCallback+0x10>)
    1f82:	781b      	ldrb	r3, [r3, #0]
    1f84:	b103      	cbz	r3, 1f88 <HAL_SAI_RxCpltCallback+0x8>
}
    1f86:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
    1f88:	2020      	movs	r0, #32
    1f8a:	f001 bb3d 	b.w	3608 <__audioFrame_veneer>
    1f8e:	bf00      	nop
    1f90:	200105c8 	.word	0x200105c8
    1f94:	f3af 8000 	nop.w
    1f98:	f3af 8000 	nop.w
    1f9c:	f3af 8000 	nop.w

00001fa0 <HAL_SAI_RxHalfCpltCallback>:
	if (!diskBusy)
    1fa0:	4b02      	ldr	r3, [pc, #8]	; (1fac <HAL_SAI_RxHalfCpltCallback+0xc>)
    1fa2:	7818      	ldrb	r0, [r3, #0]
    1fa4:	b100      	cbz	r0, 1fa8 <HAL_SAI_RxHalfCpltCallback+0x8>
}
    1fa6:	4770      	bx	lr
	audioFrame(0);
    1fa8:	f001 bb2e 	b.w	3608 <__audioFrame_veneer>
    1fac:	200105c8 	.word	0x200105c8
	...

00001fc0 <scaleOscPitch>:
	return (input * 48.0f) - 24.0f;
    1fc0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    1fc4:	ed9f 7a03 	vldr	s14, [pc, #12]	; 1fd4 <scaleOscPitch+0x14>
}
    1fc8:	eee0 7a07 	vfma.f32	s15, s0, s14
    1fcc:	eeb0 0a67 	vmov.f32	s0, s15
    1fd0:	4770      	bx	lr
    1fd2:	bf00      	nop
    1fd4:	42400000 	.word	0x42400000
    1fd8:	f3af 8000 	nop.w
    1fdc:	f3af 8000 	nop.w

00001fe0 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    1fe0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1ff4 <scaleOscFine+0x14>
    1fe4:	eddf 7a04 	vldr	s15, [pc, #16]	; 1ff8 <scaleOscFine+0x18>
}
    1fe8:	eee0 7a07 	vfma.f32	s15, s0, s14
    1fec:	eeb0 0a67 	vmov.f32	s0, s15
    1ff0:	4770      	bx	lr
    1ff2:	bf00      	nop
    1ff4:	43480000 	.word	0x43480000
    1ff8:	c2c80000 	.word	0xc2c80000
    1ffc:	f3af 8000 	nop.w

00002000 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    2000:	ed9f 7a04 	vldr	s14, [pc, #16]	; 2014 <scaleOscFreq+0x14>
    2004:	eddf 7a04 	vldr	s15, [pc, #16]	; 2018 <scaleOscFreq+0x18>
}
    2008:	eee0 7a07 	vfma.f32	s15, s0, s14
    200c:	eeb0 0a67 	vmov.f32	s0, s15
    2010:	4770      	bx	lr
    2012:	bf00      	nop
    2014:	457a0000 	.word	0x457a0000
    2018:	c4fa0000 	.word	0xc4fa0000
    201c:	f3af 8000 	nop.w

00002020 <scaleFilterCutoff>:
	return (input * 127.0f);
    2020:	eddf 7a02 	vldr	s15, [pc, #8]	; 202c <scaleFilterCutoff+0xc>
}
    2024:	ee20 0a27 	vmul.f32	s0, s0, s15
    2028:	4770      	bx	lr
    202a:	bf00      	nop
    202c:	42fe0000 	.word	0x42fe0000
    2030:	f3af 8000 	nop.w
    2034:	f3af 8000 	nop.w
    2038:	f3af 8000 	nop.w
    203c:	f3af 8000 	nop.w

00002040 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    2040:	ed9f 7a04 	vldr	s14, [pc, #16]	; 2054 <scaleFinalLowpass+0x14>
    2044:	eddf 7a04 	vldr	s15, [pc, #16]	; 2058 <scaleFinalLowpass+0x18>
}
    2048:	eee0 7a07 	vfma.f32	s15, s0, s14
    204c:	eeb0 0a67 	vmov.f32	s0, s15
    2050:	4770      	bx	lr
    2052:	bf00      	nop
    2054:	428c0000 	.word	0x428c0000
    2058:	42680000 	.word	0x42680000
    205c:	f3af 8000 	nop.w

00002060 <scaleDefault>:
{
    2060:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    2064:	ed9f 0a02 	vldr	s0, [pc, #8]	; 2070 <scaleDefault+0x10>
    2068:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    206c:	f001 bb70 	b.w	3750 <__LEAF_clip_veneer>
    2070:	00000000 	.word	0x00000000
    2074:	f3af 8000 	nop.w
    2078:	f3af 8000 	nop.w
    207c:	f3af 8000 	nop.w

00002080 <scaleTwo>:
{
    2080:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    2084:	ed9f 0a04 	vldr	s0, [pc, #16]	; 2098 <scaleTwo+0x18>
    2088:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    208c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    208e:	f001 fb5f 	bl	3750 <__LEAF_clip_veneer>
}
    2092:	ee30 0a00 	vadd.f32	s0, s0, s0
    2096:	bd08      	pop	{r3, pc}
    2098:	00000000 	.word	0x00000000
    209c:	f3af 8000 	nop.w

000020a0 <scaleTranspose>:
{
    20a0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    20a4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 20c4 <scaleTranspose+0x24>
    20a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    20ac:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    20ae:	f001 fb4f 	bl	3750 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    20b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 20c8 <scaleTranspose+0x28>
    20b6:	eddf 7a05 	vldr	s15, [pc, #20]	; 20cc <scaleTranspose+0x2c>
}
    20ba:	eee0 7a07 	vfma.f32	s15, s0, s14
    20be:	eeb0 0a67 	vmov.f32	s0, s15
    20c2:	bd08      	pop	{r3, pc}
    20c4:	00000000 	.word	0x00000000
    20c8:	42c00000 	.word	0x42c00000
    20cc:	c2400000 	.word	0xc2400000
    20d0:	f3af 8000 	nop.w
    20d4:	f3af 8000 	nop.w
    20d8:	f3af 8000 	nop.w
    20dc:	f3af 8000 	nop.w

000020e0 <scalePitchBend>:
{
    20e0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    20e4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 20fc <scalePitchBend+0x1c>
    20e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    20ec:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    20ee:	f001 fb2f 	bl	3750 <__LEAF_clip_veneer>
	return (input * 48.0f);
    20f2:	eddf 7a03 	vldr	s15, [pc, #12]	; 2100 <scalePitchBend+0x20>
}
    20f6:	ee20 0a27 	vmul.f32	s0, s0, s15
    20fa:	bd08      	pop	{r3, pc}
    20fc:	00000000 	.word	0x00000000
    2100:	42400000 	.word	0x42400000
    2104:	f3af 8000 	nop.w
    2108:	f3af 8000 	nop.w
    210c:	f3af 8000 	nop.w
    2110:	f3af 8000 	nop.w
    2114:	f3af 8000 	nop.w
    2118:	f3af 8000 	nop.w
    211c:	f3af 8000 	nop.w

00002120 <scaleFilterResonance>:
{
    2120:	b510      	push	{r4, lr}
    2122:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
    2126:	ed9f 9a21 	vldr	s18, [pc, #132]	; 21ac <scaleFilterResonance+0x8c>
{
    212a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
    212e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    2132:	eeb0 0a49 	vmov.f32	s0, s18
    2136:	f001 fb0b 	bl	3750 <__LEAF_clip_veneer>
    213a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    213e:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 21b0 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2142:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 21b4 <scaleFilterResonance+0x94>
	input *= 2047.0f;
    2146:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    214a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    214e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    2152:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2156:	1c63      	adds	r3, r4, #1
    2158:	ee00 3a90 	vmov	s1, r3
    215c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    2160:	f001 faf6 	bl	3750 <__LEAF_clip_veneer>
    2164:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    2168:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    216c:	4b12      	ldr	r3, [pc, #72]	; (21b8 <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
    216e:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2172:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    2176:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    217a:	ee38 8a27 	vadd.f32	s16, s16, s15
    217e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2182:	edd4 7a00 	vldr	s15, [r4]
    2186:	eeb0 0a49 	vmov.f32	s0, s18
    218a:	ed93 7a00 	vldr	s14, [r3]
    218e:	ee38 8a68 	vsub.f32	s16, s16, s17
    2192:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    2196:	ee60 0a87 	vmul.f32	s1, s1, s14
    219a:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    219e:	ecbd 8b04 	vpop	{d8-d9}
    21a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    21a6:	f001 bad3 	b.w	3750 <__LEAF_clip_veneer>
    21aa:	bf00      	nop
    21ac:	3dcccccd 	.word	0x3dcccccd
    21b0:	44ffe000 	.word	0x44ffe000
    21b4:	00000000 	.word	0x00000000
    21b8:	20015f58 	.word	0x20015f58
    21bc:	f3af 8000 	nop.w

000021c0 <scaleEnvTimes>:
{
    21c0:	b510      	push	{r4, lr}
    21c2:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    21c6:	eddf 8a1d 	vldr	s17, [pc, #116]	; 223c <scaleEnvTimes+0x7c>
{
    21ca:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    21ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    21d2:	eeb0 0a68 	vmov.f32	s0, s17
    21d6:	f001 fabb 	bl	3750 <__LEAF_clip_veneer>
    21da:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    21de:	ed9f 1a18 	vldr	s2, [pc, #96]	; 2240 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    21e2:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    21e6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    21ea:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    21ee:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    21f2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    21f6:	1c63      	adds	r3, r4, #1
    21f8:	ee00 3a90 	vmov	s1, r3
    21fc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    2200:	f001 faa6 	bl	3750 <__LEAF_clip_veneer>
    2204:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    2208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    220c:	4b0d      	ldr	r3, [pc, #52]	; (2244 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
    220e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    2212:	ee10 2a10 	vmov	r2, s0
    2216:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    221a:	ee38 8a07 	vadd.f32	s16, s16, s14
    221e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2222:	ed94 7a00 	vldr	s14, [r4]
    2226:	ed93 0a00 	vldr	s0, [r3]
    222a:	ee38 8a68 	vsub.f32	s16, s16, s17
    222e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    2232:	eea7 0a08 	vfma.f32	s0, s14, s16
    2236:	ecbd 8b02 	vpop	{d8}
    223a:	bd10      	pop	{r4, pc}
    223c:	00000000 	.word	0x00000000
    2240:	44ffe000 	.word	0x44ffe000
    2244:	2001061c 	.word	0x2001061c
    2248:	f3af 8000 	nop.w
    224c:	f3af 8000 	nop.w
    2250:	f3af 8000 	nop.w
    2254:	f3af 8000 	nop.w
    2258:	f3af 8000 	nop.w
    225c:	f3af 8000 	nop.w

00002260 <scaleLFORates>:
{
    2260:	b510      	push	{r4, lr}
    2262:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
    2266:	eddf 8a1d 	vldr	s17, [pc, #116]	; 22dc <scaleLFORates+0x7c>
{
    226a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
    226e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    2272:	eeb0 0a68 	vmov.f32	s0, s17
    2276:	f001 fa6b 	bl	3750 <__LEAF_clip_veneer>
    227a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    227e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 22e0 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2282:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
    2286:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    228a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    228e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    2292:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    2296:	1c63      	adds	r3, r4, #1
    2298:	ee00 3a90 	vmov	s1, r3
    229c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    22a0:	f001 fa56 	bl	3750 <__LEAF_clip_veneer>
    22a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    22a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    22ac:	4b0d      	ldr	r3, [pc, #52]	; (22e4 <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
    22ae:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    22b2:	ee10 2a10 	vmov	r2, s0
    22b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    22ba:	ee38 8a07 	vadd.f32	s16, s16, s14
    22be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    22c2:	ed94 7a00 	vldr	s14, [r4]
    22c6:	ed93 0a00 	vldr	s0, [r3]
    22ca:	ee38 8a68 	vsub.f32	s16, s16, s17
    22ce:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    22d2:	eea7 0a08 	vfma.f32	s0, s14, s16
    22d6:	ecbd 8b02 	vpop	{d8}
    22da:	bd10      	pop	{r4, pc}
    22dc:	00000000 	.word	0x00000000
    22e0:	44ffe000 	.word	0x44ffe000
    22e4:	20012748 	.word	0x20012748
    22e8:	f3af 8000 	nop.w
    22ec:	f3af 8000 	nop.w
    22f0:	f3af 8000 	nop.w
    22f4:	f3af 8000 	nop.w
    22f8:	f3af 8000 	nop.w
    22fc:	f3af 8000 	nop.w

00002300 <parsePreset>:
{
    2300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2304:	b087      	sub	sp, #28
    2306:	460d      	mov	r5, r1
    2308:	9001      	str	r0, [sp, #4]
    230a:	9105      	str	r1, [sp, #20]
  __ASM volatile ("cpsid i" : : : "memory");
    230c:	b672      	cpsid	i
		presetName[i] = buffer[i];
    230e:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 26bc <parsePreset+0x3bc>
		 audioOutBuffer[i] = 0;
    2312:	f44f 7280 	mov.w	r2, #256	; 0x100
    2316:	2100      	movs	r1, #0
    2318:	48cf      	ldr	r0, [pc, #828]	; (2658 <parsePreset+0x358>)
    231a:	f001 f959 	bl	35d0 <__memset_veneer>
		presetName[i] = buffer[i];
    231e:	4bcf      	ldr	r3, [pc, #828]	; (265c <parsePreset+0x35c>)
		presetNamesArray[presetNumber][i] = buffer[i];
    2320:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
		presetName[i] = buffer[i];
    2324:	f89b 5006 	ldrb.w	r5, [fp, #6]
    2328:	f89b 2000 	ldrb.w	r2, [fp]
    232c:	f89b c007 	ldrb.w	ip, [fp, #7]
		presetNamesArray[presetNumber][i] = buffer[i];
    2330:	4ccb      	ldr	r4, [pc, #812]	; (2660 <parsePreset+0x360>)
		presetName[i] = buffer[i];
    2332:	719d      	strb	r5, [r3, #6]
    2334:	9503      	str	r5, [sp, #12]
	audioMasterLevel = 0.0f;
    2336:	eddf 7acb 	vldr	s15, [pc, #812]	; 2664 <parsePreset+0x364>
    233a:	4dcb      	ldr	r5, [pc, #812]	; (2668 <parsePreset+0x368>)
		presetName[i] = buffer[i];
    233c:	9202      	str	r2, [sp, #8]
	audioMasterLevel = 0.0f;
    233e:	edc5 7a00 	vstr	s15, [r5]
		presetNamesArray[presetNumber][i] = buffer[i];
    2342:	4625      	mov	r5, r4
		presetName[i] = buffer[i];
    2344:	f89b a001 	ldrb.w	sl, [fp, #1]
    2348:	f89b 9002 	ldrb.w	r9, [fp, #2]
    234c:	f89b 8003 	ldrb.w	r8, [fp, #3]
    2350:	f89b 7004 	ldrb.w	r7, [fp, #4]
    2354:	f89b 6005 	ldrb.w	r6, [fp, #5]
    2358:	f89b e008 	ldrb.w	lr, [fp, #8]
    235c:	701a      	strb	r2, [r3, #0]
		presetNamesArray[presetNumber][i] = buffer[i];
    235e:	eb04 0241 	add.w	r2, r4, r1, lsl #1
		presetName[i] = buffer[i];
    2362:	f883 c007 	strb.w	ip, [r3, #7]
		presetNamesArray[presetNumber][i] = buffer[i];
    2366:	0049      	lsls	r1, r1, #1
    2368:	9c02      	ldr	r4, [sp, #8]
		presetName[i] = buffer[i];
    236a:	f8cd c010 	str.w	ip, [sp, #16]
    236e:	f89b c009 	ldrb.w	ip, [fp, #9]
		presetNamesArray[presetNumber][i] = buffer[i];
    2372:	546c      	strb	r4, [r5, r1]
		presetName[i] = buffer[i];
    2374:	f89b 000a 	ldrb.w	r0, [fp, #10]
		presetNamesArray[presetNumber][i] = buffer[i];
    2378:	f882 a001 	strb.w	sl, [r2, #1]
		presetName[i] = buffer[i];
    237c:	f883 a001 	strb.w	sl, [r3, #1]
		presetNamesArray[presetNumber][i] = buffer[i];
    2380:	f882 9002 	strb.w	r9, [r2, #2]
		presetName[i] = buffer[i];
    2384:	f883 9002 	strb.w	r9, [r3, #2]
		presetNamesArray[presetNumber][i] = buffer[i];
    2388:	f882 8003 	strb.w	r8, [r2, #3]
		presetName[i] = buffer[i];
    238c:	f883 8003 	strb.w	r8, [r3, #3]
    2390:	711f      	strb	r7, [r3, #4]
    2392:	715e      	strb	r6, [r3, #5]
    2394:	f883 e008 	strb.w	lr, [r3, #8]
    2398:	f883 c009 	strb.w	ip, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[i];
    239c:	7117      	strb	r7, [r2, #4]
    239e:	7156      	strb	r6, [r2, #5]
    23a0:	9c03      	ldr	r4, [sp, #12]
    23a2:	9904      	ldr	r1, [sp, #16]
    23a4:	7194      	strb	r4, [r2, #6]
		presetName[i] = buffer[i];
    23a6:	7298      	strb	r0, [r3, #10]
		presetNamesArray[presetNumber][i] = buffer[i];
    23a8:	71d1      	strb	r1, [r2, #7]
    23aa:	f882 e008 	strb.w	lr, [r2, #8]
	uint16_t paramCount = (buffer[14] << 8) + buffer[15];
    23ae:	f89b 100f 	ldrb.w	r1, [fp, #15]
		presetNamesArray[presetNumber][i] = buffer[i];
    23b2:	f882 c009 	strb.w	ip, [r2, #9]
    23b6:	7290      	strb	r0, [r2, #10]
	uint16_t paramCount = (buffer[14] << 8) + buffer[15];
    23b8:	f89b 000e 	ldrb.w	r0, [fp, #14]
    23bc:	eb01 2100 	add.w	r1, r1, r0, lsl #8
		presetName[i] = buffer[i];
    23c0:	f89b 000b 	ldrb.w	r0, [fp, #11]
		presetNamesArray[presetNumber][i] = buffer[i];
    23c4:	72d0      	strb	r0, [r2, #11]
	uint16_t paramCount = (buffer[14] << 8) + buffer[15];
    23c6:	b289      	uxth	r1, r1
		presetName[i] = buffer[i];
    23c8:	72d8      	strb	r0, [r3, #11]
    23ca:	f89b 000c 	ldrb.w	r0, [fp, #12]
		presetNamesArray[presetNumber][i] = buffer[i];
    23ce:	7310      	strb	r0, [r2, #12]
		presetName[i] = buffer[i];
    23d0:	7318      	strb	r0, [r3, #12]
    23d2:	f89b 000d 	ldrb.w	r0, [fp, #13]
    23d6:	7358      	strb	r0, [r3, #13]
	if (paramCount > size)
    23d8:	9b01      	ldr	r3, [sp, #4]
		presetNamesArray[presetNumber][i] = buffer[i];
    23da:	7350      	strb	r0, [r2, #13]
	if (paramCount > size)
    23dc:	4299      	cmp	r1, r3
    23de:	dc0d      	bgt.n	23fc <parsePreset+0xfc>
	uint16_t paramEndCheck = (buffer[paramCount*2+16] << 8) + buffer[paramCount*2+17];
    23e0:	f101 0308 	add.w	r3, r1, #8
	if (paramEndCheck != 0xefef)
    23e4:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+16] << 8) + buffer[paramCount*2+17];
    23e8:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
    23ec:	f81b 4013 	ldrb.w	r4, [fp, r3, lsl #1]
    23f0:	7853      	ldrb	r3, [r2, #1]
    23f2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
	if (paramEndCheck != 0xefef)
    23f6:	b29b      	uxth	r3, r3
    23f8:	4283      	cmp	r3, r0
    23fa:	d00a      	beq.n	2412 <parsePreset+0x112>
		audioMasterLevel = 1.0f;
    23fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    2400:	4b9a      	ldr	r3, [pc, #616]	; (266c <parsePreset+0x36c>)
    2402:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    2404:	4898      	ldr	r0, [pc, #608]	; (2668 <parsePreset+0x368>)
		presetWaitingToParse = 0;
    2406:	601a      	str	r2, [r3, #0]
		audioMasterLevel = 1.0f;
    2408:	6001      	str	r1, [r0, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    240a:	b662      	cpsie	i
}
    240c:	b007      	add	sp, #28
    240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
    2412:	7893      	ldrb	r3, [r2, #2]
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
    2414:	f101 050a 	add.w	r5, r1, #10
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
    2418:	f892 a003 	ldrb.w	sl, [r2, #3]
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
    241c:	006d      	lsls	r5, r5, #1
	if (mappingEndLocation > size)
    241e:	9a01      	ldr	r2, [sp, #4]
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
    2420:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
    2424:	b2ad      	uxth	r5, r5
	uint16_t mappingCount = (buffer[paramCount*2+18] << 8) + buffer[paramCount*2+19];
    2426:	fa1f fa8a 	uxth.w	sl, sl
	uint16_t mappingEndLocation = (paramCount * 2) + 20 + (mappingCount * 5);
    242a:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    242e:	b29b      	uxth	r3, r3
    2430:	9302      	str	r3, [sp, #8]
    2432:	18eb      	adds	r3, r5, r3
	if (mappingEndLocation > size)
    2434:	b29b      	uxth	r3, r3
    2436:	4293      	cmp	r3, r2
    2438:	dce0      	bgt.n	23fc <parsePreset+0xfc>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    243a:	eb0b 0003 	add.w	r0, fp, r3
    243e:	f81b 2003 	ldrb.w	r2, [fp, r3]
    2442:	7843      	ldrb	r3, [r0, #1]
    2444:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    2448:	f64f 62fe 	movw	r2, #65278	; 0xfefe
    244c:	b29b      	uxth	r3, r3
    244e:	4293      	cmp	r3, r2
    2450:	d1d4      	bne.n	23fc <parsePreset+0xfc>
	for (int i = 0; i < paramCount; i++)
    2452:	2900      	cmp	r1, #0
    2454:	f001 8059 	beq.w	350a <_Min_Heap_Size+0x50a>
    2458:	f8df c264 	ldr.w	ip, [pc, #612]	; 26c0 <parsePreset+0x3c0>
    245c:	eb0b 0e41 	add.w	lr, fp, r1, lsl #1
    2460:	4e83      	ldr	r6, [pc, #524]	; (2670 <parsePreset+0x370>)
    2462:	4658      	mov	r0, fp
    2464:	4663      	mov	r3, ip
		params[i].zeroToOneVal = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2466:	ed9f 7a83 	vldr	s14, [pc, #524]	; 2674 <parsePreset+0x374>
    246a:	468c      	mov	ip, r1
    246c:	4632      	mov	r2, r6
    246e:	4f82      	ldr	r7, [pc, #520]	; (2678 <parsePreset+0x378>)
    2470:	4619      	mov	r1, r3
    2472:	7c04      	ldrb	r4, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    2474:	3002      	adds	r0, #2
		params[i].zeroToOneVal = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2476:	7bc3      	ldrb	r3, [r0, #15]
	for (int i = 0; i < paramCount; i++)
    2478:	4570      	cmp	r0, lr
		params[i].zeroToOneVal = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    247a:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    247e:	ee07 3a90 	vmov	s15, r3
    2482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		params[i].setParam = &blankFunction;
    2486:	e9c2 1702 	strd	r1, r7, [r2, #8]
		params[i].zeroToOneVal = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    248a:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int i = 0; i < paramCount; i++)
    248e:	f102 0214 	add.w	r2, r2, #20
		params[i].zeroToOneVal = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2492:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	for (int i = 0; i < paramCount; i++)
    2496:	d1ec      	bne.n	2472 <parsePreset+0x172>
    2498:	4661      	mov	r1, ip
	for (int i = paramCount; i < NUM_PARAMS; i++)
    249a:	299a      	cmp	r1, #154	; 0x9a
    249c:	f301 8032 	bgt.w	3504 <_Min_Heap_Size+0x504>
    24a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    24a4:	f8df c218 	ldr.w	ip, [pc, #536]	; 26c0 <parsePreset+0x3c0>
    24a8:	4c74      	ldr	r4, [pc, #464]	; (267c <parsePreset+0x37c>)
		params[i].zeroToOneVal = 0.0f;
    24aa:	2200      	movs	r2, #0
    24ac:	eb06 0381 	add.w	r3, r6, r1, lsl #2
    24b0:	4f71      	ldr	r7, [pc, #452]	; (2678 <parsePreset+0x378>)
    24b2:	4661      	mov	r1, ip
    24b4:	601a      	str	r2, [r3, #0]
		params[i].setParam = &blankFunction;
    24b6:	e9c3 1702 	strd	r1, r7, [r3, #8]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    24ba:	3314      	adds	r3, #20
    24bc:	42a3      	cmp	r3, r4
    24be:	d1f9      	bne.n	24b4 <parsePreset+0x1b4>
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    24c0:	4a6f      	ldr	r2, [pc, #444]	; (2680 <parsePreset+0x380>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    24c2:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
    24c6:	486f      	ldr	r0, [pc, #444]	; (2684 <parsePreset+0x384>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    24c8:	f8c6 21fc 	str.w	r2, [r6, #508]	; 0x1fc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    24cc:	f8c6 2260 	str.w	r2, [r6, #608]	; 0x260
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    24d0:	f8c6 2300 	str.w	r2, [r6, #768]	; 0x300
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    24d4:	f8c6 2364 	str.w	r2, [r6, #868]	; 0x364
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    24d8:	f8c6 2404 	str.w	r2, [r6, #1028]	; 0x404
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    24dc:	f8c6 2468 	str.w	r2, [r6, #1128]	; 0x468
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    24e0:	4a69      	ldr	r2, [pc, #420]	; (2688 <parsePreset+0x388>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    24e2:	4b6a      	ldr	r3, [pc, #424]	; (268c <parsePreset+0x38c>)
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    24e4:	f8c6 2210 	str.w	r2, [r6, #528]	; 0x210
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    24e8:	f8c6 2314 	str.w	r2, [r6, #788]	; 0x314
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    24ec:	f8c6 2418 	str.w	r2, [r6, #1048]	; 0x418
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    24f0:	4a67      	ldr	r2, [pc, #412]	; (2690 <parsePreset+0x390>)
	params[Master].scaleFunc = &scaleTwo;
    24f2:	4968      	ldr	r1, [pc, #416]	; (2694 <parsePreset+0x394>)
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    24f4:	f8c6 2224 	str.w	r2, [r6, #548]	; 0x224
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    24f8:	f8c6 2328 	str.w	r2, [r6, #808]	; 0x328
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    24fc:	f8c6 242c 	str.w	r2, [r6, #1068]	; 0x42c
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2500:	4a65      	ldr	r2, [pc, #404]	; (2698 <parsePreset+0x398>)
	params[Transpose].scaleFunc = &scaleTranspose;
    2502:	f8c6 0148 	str.w	r0, [r6, #328]	; 0x148
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2506:	f8c6 279c 	str.w	r2, [r6, #1948]	; 0x79c
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    250a:	f8c6 2814 	str.w	r2, [r6, #2068]	; 0x814
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    250e:	4863      	ldr	r0, [pc, #396]	; (269c <parsePreset+0x39c>)
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    2510:	4a63      	ldr	r2, [pc, #396]	; (26a0 <parsePreset+0x3a0>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2512:	f8c6 3878 	str.w	r3, [r6, #2168]	; 0x878
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    2516:	f8c6 388c 	str.w	r3, [r6, #2188]	; 0x88c
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    251a:	f8c6 38b4 	str.w	r3, [r6, #2228]	; 0x8b4
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    251e:	f8c6 38f0 	str.w	r3, [r6, #2288]	; 0x8f0
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    2522:	f8c6 3904 	str.w	r3, [r6, #2308]	; 0x904
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    2526:	f8c6 392c 	str.w	r3, [r6, #2348]	; 0x92c
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    252a:	f8c6 3968 	str.w	r3, [r6, #2408]	; 0x968
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    252e:	f8c6 397c 	str.w	r3, [r6, #2428]	; 0x97c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    2532:	f8c6 39a4 	str.w	r3, [r6, #2468]	; 0x9a4
	params[Master].scaleFunc = &scaleTwo;
    2536:	6331      	str	r1, [r6, #48]	; 0x30
	params[NoiseAmp].scaleFunc = &scaleTwo;
    2538:	f8c6 11c0 	str.w	r1, [r6, #448]	; 0x1c0
	params[Osc1Amp].scaleFunc = &scaleTwo;
    253c:	f8c6 124c 	str.w	r1, [r6, #588]	; 0x24c
	params[Osc2Amp].scaleFunc = &scaleTwo;
    2540:	f8c6 1350 	str.w	r1, [r6, #848]	; 0x350
	params[Osc3Amp].scaleFunc = &scaleTwo;
    2544:	f8c6 1454 	str.w	r1, [r6, #1108]	; 0x454
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    2548:	f8c6 27c4 	str.w	r2, [r6, #1988]	; 0x7c4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    254c:	f8c6 283c 	str.w	r2, [r6, #2108]	; 0x83c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2550:	f8c6 015c 	str.w	r0, [r6, #348]	; 0x15c
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    2554:	f8c6 39e0 	str.w	r3, [r6, #2528]	; 0x9e0
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    2558:	f8c6 39f4 	str.w	r3, [r6, #2548]	; 0x9f4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    255c:	f8c6 3a1c 	str.w	r3, [r6, #2588]	; 0xa1c
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2560:	4b50      	ldr	r3, [pc, #320]	; (26a4 <parsePreset+0x3a4>)
	params[OutputAmp].scaleFunc = &scaleTwo;
    2562:	f8c6 1be8 	str.w	r1, [r6, #3048]	; 0xbe8
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2566:	edd3 7a00 	vldr	s15, [r3]
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    256a:	4b4f      	ldr	r3, [pc, #316]	; (26a8 <parsePreset+0x3a8>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    256c:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2570:	f8c6 3a58 	str.w	r3, [r6, #2648]	; 0xa58
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    2574:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    2578:	f8c6 3abc 	str.w	r3, [r6, #2748]	; 0xabc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    257c:	fef8 7a67 	vrinta.f32	s15, s15
    2580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    2584:	f8c6 3b20 	str.w	r3, [r6, #2848]	; 0xb20
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    2588:	f8c6 3b84 	str.w	r3, [r6, #2948]	; 0xb84
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    258c:	4b47      	ldr	r3, [pc, #284]	; (26ac <parsePreset+0x3ac>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    258e:	edcd 7a01 	vstr	s15, [sp, #4]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    2592:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
				if (effectType > FXLowpass)
    2596:	f89d 3004 	ldrb.w	r3, [sp, #4]
    259a:	2b0b      	cmp	r3, #11
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    259c:	4b44      	ldr	r3, [pc, #272]	; (26b0 <parsePreset+0x3b0>)
    259e:	edd3 7a00 	vldr	s15, [r3]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    25a2:	bf88      	it	hi
    25a4:	f8c6 2530 	strhi.w	r2, [r6, #1328]	; 0x530
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    25a8:	ee67 7a87 	vmul.f32	s15, s15, s14
    25ac:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    25b0:	fef8 7a67 	vrinta.f32	s15, s15
    25b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    25b8:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
    25bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    25c0:	2b0b      	cmp	r3, #11
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    25c2:	4b3c      	ldr	r3, [pc, #240]	; (26b4 <parsePreset+0x3b4>)
    25c4:	edd3 7a00 	vldr	s15, [r3]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    25c8:	bf88      	it	hi
    25ca:	f8c6 25d0 	strhi.w	r2, [r6, #1488]	; 0x5d0
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    25ce:	ee67 7a87 	vmul.f32	s15, s15, s14
    25d2:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    25d6:	fef8 7a67 	vrinta.f32	s15, s15
    25da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    25de:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
    25e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    25e6:	2b0b      	cmp	r3, #11
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    25e8:	4b33      	ldr	r3, [pc, #204]	; (26b8 <parsePreset+0x3b8>)
    25ea:	edd3 7a00 	vldr	s15, [r3]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    25ee:	bf88      	it	hi
    25f0:	f8c6 2670 	strhi.w	r2, [r6, #1648]	; 0x670
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    25f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    25f8:	fef8 7a67 	vrinta.f32	s15, s15
    25fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2600:	edcd 7a01 	vstr	s15, [sp, #4]
				if (effectType > FXLowpass)
    2604:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2608:	2b0b      	cmp	r3, #11
    260a:	d901      	bls.n	2610 <parsePreset+0x310>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
    260c:	f8c6 2710 	str.w	r2, [r6, #1808]	; 0x710
	for (int i = 0; i < NUM_EFFECT; i++)
    2610:	f8df 905c 	ldr.w	r9, [pc, #92]	; 2670 <parsePreset+0x370>
	for (int i = 0; i < paramCount; i++)
    2614:	464e      	mov	r6, r9
    2616:	464f      	mov	r7, r9
		params[i].realVal = params[i].scaleFunc(params[i].zeroToOneVal);
    2618:	68bb      	ldr	r3, [r7, #8]
	for (int i = 0; i < NUM_PARAMS; i++)
    261a:	3714      	adds	r7, #20
		params[i].realVal = params[i].scaleFunc(params[i].zeroToOneVal);
    261c:	ed17 0a05 	vldr	s0, [r7, #-20]	; 0xffffffec
    2620:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    2622:	42a7      	cmp	r7, r4
		params[i].realVal = params[i].scaleFunc(params[i].zeroToOneVal);
    2624:	ed07 0a04 	vstr	s0, [r7, #-16]
	for (int i = 0; i < NUM_PARAMS; i++)
    2628:	d1f6      	bne.n	2618 <parsePreset+0x318>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    262a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    262e:	edd6 7ab0 	vldr	s15, [r6, #704]	; 0x2c0
    2632:	ee67 7a87 	vmul.f32	s15, s15, s14
    2636:	fef8 7a67 	vrinta.f32	s15, s15
    263a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    263e:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
    2642:	2b06      	cmp	r3, #6
    2644:	d841      	bhi.n	26ca <parsePreset+0x3ca>
    2646:	e8df f013 	tbh	[pc, r3, lsl #1]
    264a:	003d      	.short	0x003d
    264c:	073d0742 	.word	0x073d0742
    2650:	07330738 	.word	0x07330738
    2654:	0729072e 	.word	0x0729072e
    2658:	30000000 	.word	0x30000000
    265c:	20015a20 	.word	0x20015a20
    2660:	20015a30 	.word	0x20015a30
    2664:	00000000 	.word	0x00000000
    2668:	20000094 	.word	0x20000094
    266c:	20015b50 	.word	0x20015b50
    2670:	20014e04 	.word	0x20014e04
    2674:	377ffff6 	.word	0x377ffff6
    2678:	0800229d 	.word	0x0800229d
    267c:	20015a20 	.word	0x20015a20
    2680:	00001fc1 	.word	0x00001fc1
    2684:	000020a1 	.word	0x000020a1
    2688:	00001fe1 	.word	0x00001fe1
    268c:	000021c1 	.word	0x000021c1
    2690:	00002001 	.word	0x00002001
    2694:	00002081 	.word	0x00002081
    2698:	00002021 	.word	0x00002021
    269c:	000020e1 	.word	0x000020e1
    26a0:	00002121 	.word	0x00002121
    26a4:	200152f4 	.word	0x200152f4
    26a8:	00002261 	.word	0x00002261
    26ac:	00002041 	.word	0x00002041
    26b0:	20015394 	.word	0x20015394
    26b4:	20015434 	.word	0x20015434
    26b8:	200154d4 	.word	0x200154d4
    26bc:	2000f584 	.word	0x2000f584
    26c0:	00002061 	.word	0x00002061
				  shapeTick[i] = &sawSquareTick;
    26c4:	4b8d      	ldr	r3, [pc, #564]	; (28fc <parsePreset+0x5fc>)
    26c6:	4a8e      	ldr	r2, [pc, #568]	; (2900 <parsePreset+0x600>)
    26c8:	601a      	str	r2, [r3, #0]
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    26ca:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    26ce:	edd6 7af1 	vldr	s15, [r6, #964]	; 0x3c4
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    26d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    26d6:	ed96 6a79 	vldr	s12, [r6, #484]	; 0x1e4
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    26da:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    26de:	eeb4 6ae6 	vcmpe.f32	s12, s13
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    26e2:	fef8 7a67 	vrinta.f32	s15, s15
    26e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    26ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    26ee:	ee17 2a90 	vmov	r2, s15
	uint8_t enabledCount = 0;
    26f2:	bfcc      	ite	gt
    26f4:	2301      	movgt	r3, #1
    26f6:	2300      	movle	r3, #0
		switch (oscshape)
    26f8:	2a06      	cmp	r2, #6
    26fa:	d80b      	bhi.n	2714 <parsePreset+0x414>
    26fc:	e8df f012 	tbh	[pc, r2, lsl #1]
    2700:	06c90007 	.word	0x06c90007
    2704:	06bf06c4 	.word	0x06bf06c4
    2708:	06b506ba 	.word	0x06b506ba
    270c:	06b0      	.short	0x06b0
				  shapeTick[i] = &sawSquareTick;
    270e:	4a7b      	ldr	r2, [pc, #492]	; (28fc <parsePreset+0x5fc>)
    2710:	497b      	ldr	r1, [pc, #492]	; (2900 <parsePreset+0x600>)
    2712:	6051      	str	r1, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    2714:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2718:	ed96 7aba 	vldr	s14, [r6, #744]	; 0x2e8
    271c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2724:	dd01      	ble.n	272a <parsePreset+0x42a>
			enabledCount++;
    2726:	3301      	adds	r3, #1
    2728:	b2db      	uxtb	r3, r3
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal * (NUM_OSC_SHAPES-1));
    272a:	4a76      	ldr	r2, [pc, #472]	; (2904 <parsePreset+0x604>)
    272c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
    2730:	edd2 7a00 	vldr	s15, [r2]
    2734:	ee67 7a87 	vmul.f32	s15, s15, s14
    2738:	fef8 7a67 	vrinta.f32	s15, s15
    273c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2740:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
    2744:	2a06      	cmp	r2, #6
    2746:	d80b      	bhi.n	2760 <parsePreset+0x460>
    2748:	e8df f012 	tbh	[pc, r2, lsl #1]
    274c:	06850007 	.word	0x06850007
    2750:	067b0680 	.word	0x067b0680
    2754:	06710676 	.word	0x06710676
    2758:	066c      	.short	0x066c
				  shapeTick[i] = &sawSquareTick;
    275a:	4a68      	ldr	r2, [pc, #416]	; (28fc <parsePreset+0x5fc>)
    275c:	4968      	ldr	r1, [pc, #416]	; (2900 <parsePreset+0x600>)
    275e:	6091      	str	r1, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal  > 0.5f)
    2760:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2764:	ed96 7afb 	vldr	s14, [r6, #1004]	; 0x3ec
    2768:	eeb4 7ae7 	vcmpe.f32	s14, s15
    276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2770:	dd01      	ble.n	2776 <parsePreset+0x476>
			enabledCount++;
    2772:	3301      	adds	r3, #1
    2774:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    2776:	4a64      	ldr	r2, [pc, #400]	; (2908 <parsePreset+0x608>)
    2778:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    277c:	edd2 7a00 	vldr	s15, [r2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    2780:	4a62      	ldr	r2, [pc, #392]	; (290c <parsePreset+0x60c>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    2782:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
    2786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    278a:	4a61      	ldr	r2, [pc, #388]	; (2910 <parsePreset+0x610>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    278c:	fef8 7a67 	vrinta.f32	s15, s15
    2790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    2794:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    2796:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    279a:	6011      	str	r1, [r2, #0]
		switch (filterType)
    279c:	495d      	ldr	r1, [pc, #372]	; (2914 <parsePreset+0x614>)
    279e:	2b08      	cmp	r3, #8
    27a0:	d811      	bhi.n	27c6 <parsePreset+0x4c6>
    27a2:	e8df f013 	tbh	[pc, r3, lsl #1]
    27a6:	0009      	.short	0x0009
    27a8:	062d0636 	.word	0x062d0636
    27ac:	061b0624 	.word	0x061b0624
    27b0:	06090612 	.word	0x06090612
    27b4:	05f70600 	.word	0x05f70600
				  filterTick[i] = &lowpassTick;
    27b8:	4b57      	ldr	r3, [pc, #348]	; (2918 <parsePreset+0x618>)
    27ba:	4a58      	ldr	r2, [pc, #352]	; (291c <parsePreset+0x61c>)
    27bc:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
    27be:	4b58      	ldr	r3, [pc, #352]	; (2920 <parsePreset+0x620>)
    27c0:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
    27c2:	4b58      	ldr	r3, [pc, #352]	; (2924 <parsePreset+0x624>)
    27c4:	604b      	str	r3, [r1, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal * (NUM_FILTER_TYPES-1));
    27c6:	4b58      	ldr	r3, [pc, #352]	; (2928 <parsePreset+0x628>)
    27c8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    27cc:	edd3 7a00 	vldr	s15, [r3]
    27d0:	ee67 7a87 	vmul.f32	s15, s15, s14
    27d4:	fef8 7a67 	vrinta.f32	s15, s15
    27d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    27dc:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
    27e0:	2b08      	cmp	r3, #8
    27e2:	d811      	bhi.n	2808 <parsePreset+0x508>
    27e4:	e8df f013 	tbh	[pc, r3, lsl #1]
    27e8:	05cd0009 	.word	0x05cd0009
    27ec:	05bb05c4 	.word	0x05bb05c4
    27f0:	05a905b2 	.word	0x05a905b2
    27f4:	054a05a0 	.word	0x054a05a0
    27f8:	0541      	.short	0x0541
				  filterTick[i] = &lowpassTick;
    27fa:	4b47      	ldr	r3, [pc, #284]	; (2918 <parsePreset+0x618>)
    27fc:	4a47      	ldr	r2, [pc, #284]	; (291c <parsePreset+0x61c>)
    27fe:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
    2800:	4b47      	ldr	r3, [pc, #284]	; (2920 <parsePreset+0x620>)
    2802:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
    2804:	4b47      	ldr	r3, [pc, #284]	; (2924 <parsePreset+0x624>)
    2806:	60cb      	str	r3, [r1, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal * (NUM_LFO_SHAPES-1));
    2808:	4b48      	ldr	r3, [pc, #288]	; (292c <parsePreset+0x62c>)
    280a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    280e:	edd3 7a00 	vldr	s15, [r3]
    2812:	ee67 7a87 	vmul.f32	s15, s15, s14
    2816:	fef8 7a67 	vrinta.f32	s15, s15
    281a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    281e:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    2822:	2b05      	cmp	r3, #5
    2824:	f200 8689 	bhi.w	353a <_Min_Heap_Size+0x53a>
    2828:	e8df f013 	tbh	[pc, r3, lsl #1]
    282c:	05070513 	.word	0x05070513
    2830:	04ef04fb 	.word	0x04ef04fb
    2834:	000604e3 	.word	0x000604e3
				lfoShapeTick[i] = &lfoPulseTick;
    2838:	4b3d      	ldr	r3, [pc, #244]	; (2930 <parsePreset+0x630>)
    283a:	483e      	ldr	r0, [pc, #248]	; (2934 <parsePreset+0x634>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
    283c:	4a3e      	ldr	r2, [pc, #248]	; (2938 <parsePreset+0x638>)
				lfoShapeTick[i] = &lfoPulseTick;
    283e:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    2840:	4b3e      	ldr	r3, [pc, #248]	; (293c <parsePreset+0x63c>)
    2842:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    2844:	4b3e      	ldr	r3, [pc, #248]	; (2940 <parsePreset+0x640>)
    2846:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    2848:	4b3e      	ldr	r3, [pc, #248]	; (2944 <parsePreset+0x644>)
    284a:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal * (NUM_LFO_SHAPES-1));
    284c:	4b3e      	ldr	r3, [pc, #248]	; (2948 <parsePreset+0x648>)
    284e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2852:	edd3 7a00 	vldr	s15, [r3]
    2856:	ee67 7a87 	vmul.f32	s15, s15, s14
    285a:	fef8 7a67 	vrinta.f32	s15, s15
    285e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2862:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    2866:	2b05      	cmp	r3, #5
    2868:	d810      	bhi.n	288c <parsePreset+0x58c>
    286a:	e8df f013 	tbh	[pc, r3, lsl #1]
    286e:	04b7      	.short	0x04b7
    2870:	04a104ac 	.word	0x04a104ac
    2874:	04800496 	.word	0x04800496
    2878:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
    287a:	4b2d      	ldr	r3, [pc, #180]	; (2930 <parsePreset+0x630>)
    287c:	482d      	ldr	r0, [pc, #180]	; (2934 <parsePreset+0x634>)
    287e:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    2880:	4b2e      	ldr	r3, [pc, #184]	; (293c <parsePreset+0x63c>)
    2882:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    2884:	4b2e      	ldr	r3, [pc, #184]	; (2940 <parsePreset+0x640>)
    2886:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    2888:	4b2e      	ldr	r3, [pc, #184]	; (2944 <parsePreset+0x644>)
    288a:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal * (NUM_LFO_SHAPES-1));
    288c:	4b2f      	ldr	r3, [pc, #188]	; (294c <parsePreset+0x64c>)
    288e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2892:	edd3 7a00 	vldr	s15, [r3]
    2896:	ee67 7a87 	vmul.f32	s15, s15, s14
    289a:	fef8 7a67 	vrinta.f32	s15, s15
    289e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    28a2:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    28a6:	2b05      	cmp	r3, #5
    28a8:	d810      	bhi.n	28cc <parsePreset+0x5cc>
    28aa:	e8df f013 	tbh	[pc, r3, lsl #1]
    28ae:	046b      	.short	0x046b
    28b0:	044a0455 	.word	0x044a0455
    28b4:	0420043f 	.word	0x0420043f
    28b8:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
    28ba:	4b1d      	ldr	r3, [pc, #116]	; (2930 <parsePreset+0x630>)
    28bc:	481d      	ldr	r0, [pc, #116]	; (2934 <parsePreset+0x634>)
    28be:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    28c0:	4b1e      	ldr	r3, [pc, #120]	; (293c <parsePreset+0x63c>)
    28c2:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
    28c4:	4b1e      	ldr	r3, [pc, #120]	; (2940 <parsePreset+0x640>)
    28c6:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    28c8:	4b1e      	ldr	r3, [pc, #120]	; (2944 <parsePreset+0x644>)
    28ca:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal * (NUM_LFO_SHAPES-1));
    28cc:	4b20      	ldr	r3, [pc, #128]	; (2950 <parsePreset+0x650>)
    28ce:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    28d2:	edd3 7a00 	vldr	s15, [r3]
    28d6:	ee67 7a87 	vmul.f32	s15, s15, s14
    28da:	fef8 7a67 	vrinta.f32	s15, s15
    28de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    28e2:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
    28e6:	2b05      	cmp	r3, #5
    28e8:	d83d      	bhi.n	2966 <parsePreset+0x666>
    28ea:	e8df f013 	tbh	[pc, r3, lsl #1]
    28ee:	0415      	.short	0x0415
    28f0:	03f6040b 	.word	0x03f6040b
    28f4:	03e203ec 	.word	0x03e203ec
    28f8:	0033      	.short	0x0033
    28fa:	bf00      	nop
    28fc:	2000076c 	.word	0x2000076c
    2900:	00000141 	.word	0x00000141
    2904:	200152cc 	.word	0x200152cc
    2908:	20015588 	.word	0x20015588
    290c:	2000007c 	.word	0x2000007c
    2910:	20000078 	.word	0x20000078
    2914:	2001261c 	.word	0x2001261c
    2918:	20000340 	.word	0x20000340
    291c:	00000561 	.word	0x00000561
    2920:	00000881 	.word	0x00000881
    2924:	000009a1 	.word	0x000009a1
    2928:	20015600 	.word	0x20015600
    292c:	20015894 	.word	0x20015894
    2930:	20000450 	.word	0x20000450
    2934:	08000ad1 	.word	0x08000ad1
    2938:	20014748 	.word	0x20014748
    293c:	08000b39 	.word	0x08000b39
    2940:	08000bd5 	.word	0x08000bd5
    2944:	08000b99 	.word	0x08000b99
    2948:	200158f8 	.word	0x200158f8
    294c:	2001595c 	.word	0x2001595c
    2950:	200159c0 	.word	0x200159c0
				lfoShapeTick[i] = &lfoPulseTick;
    2954:	4b98      	ldr	r3, [pc, #608]	; (2bb8 <parsePreset+0x8b8>)
    2956:	4899      	ldr	r0, [pc, #612]	; (2bbc <parsePreset+0x8bc>)
    2958:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
    295a:	4b99      	ldr	r3, [pc, #612]	; (2bc0 <parsePreset+0x8c0>)
    295c:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
    295e:	4b99      	ldr	r3, [pc, #612]	; (2bc4 <parsePreset+0x8c4>)
    2960:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
    2962:	4b99      	ldr	r3, [pc, #612]	; (2bc8 <parsePreset+0x8c8>)
    2964:	62d3      	str	r3, [r2, #44]	; 0x2c
	for (int i = 0; i < NUM_LFOS; i++)
    2966:	4899      	ldr	r0, [pc, #612]	; (2bcc <parsePreset+0x8cc>)
    2968:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 2c24 <parsePreset+0x924>
    296c:	f8df e2b8 	ldr.w	lr, [pc, #696]	; 2c28 <parsePreset+0x928>
    2970:	f100 0810 	add.w	r8, r0, #16
    2974:	4663      	mov	r3, ip
				  effectSetters[i].setParam2 = &blankFunction;;
    2976:	4c96      	ldr	r4, [pc, #600]	; (2bd0 <parsePreset+0x8d0>)
				  effectTick[i] = FXVZhighshelfTick;
    2978:	9203      	str	r2, [sp, #12]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal * (NUM_EFFECT_TYPES-1));
    297a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
    297e:	edde 7a00 	vldr	s15, [lr]
    2982:	ee67 7a87 	vmul.f32	s15, s15, s14
    2986:	fef8 7a67 	vrinta.f32	s15, s15
    298a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    298e:	edcd 7a01 	vstr	s15, [sp, #4]
		switch (effectType)
    2992:	f89d 7004 	ldrb.w	r7, [sp, #4]
    2996:	2f13      	cmp	r7, #19
    2998:	d81e      	bhi.n	29d8 <parsePreset+0x6d8>
    299a:	e8df f017 	tbh	[pc, r7, lsl #1]
    299e:	0382      	.short	0x0382
    29a0:	036a0376 	.word	0x036a0376
    29a4:	02e20367 	.word	0x02e20367
    29a8:	029302d6 	.word	0x029302d6
    29ac:	027f0287 	.word	0x027f0287
    29b0:	02650272 	.word	0x02650272
    29b4:	0251025b 	.word	0x0251025b
    29b8:	02c10247 	.word	0x02c10247
    29bc:	02ab02b6 	.word	0x02ab02b6
    29c0:	02cb02a0 	.word	0x02cb02a0
    29c4:	0014      	.short	0x0014
				  effectTick[i] = &FXLadderLowpassTick;
    29c6:	4f83      	ldr	r7, [pc, #524]	; (2bd4 <parsePreset+0x8d4>)
    29c8:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
    29ca:	4f83      	ldr	r7, [pc, #524]	; (2bd8 <parsePreset+0x8d8>)
				  effectSetters[i].setParam5 = &blankFunction;;
    29cc:	611c      	str	r4, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
    29ce:	e9c3 7400 	strd	r7, r4, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
    29d2:	4f82      	ldr	r7, [pc, #520]	; (2bdc <parsePreset+0x8dc>)
				  effectSetters[i].setParam4 = &blankFunction;;
    29d4:	e9c3 7402 	strd	r7, r4, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
    29d8:	3004      	adds	r0, #4
    29da:	f10e 0ea0 	add.w	lr, lr, #160	; 0xa0
    29de:	3314      	adds	r3, #20
    29e0:	4580      	cmp	r8, r0
    29e2:	d1ca      	bne.n	297a <parsePreset+0x67a>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    29e4:	4b7e      	ldr	r3, [pc, #504]	; (2be0 <parsePreset+0x8e0>)
	params[OutputAmp].setParam = &setAmp;
    29e6:	f04f 0801 	mov.w	r8, #1
	params[Effect1Mix].setParam = &fxMixSet;
    29ea:	4c7e      	ldr	r4, [pc, #504]	; (2be4 <parsePreset+0x8e4>)
			params[i].objectNumber = 2;
    29ec:	2702      	movs	r7, #2
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    29ee:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    29f2:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    29f6:	f8c6 3408 	str.w	r3, [r6, #1032]	; 0x408
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    29fa:	4b7b      	ldr	r3, [pc, #492]	; (2be8 <parsePreset+0x8e8>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
    29fc:	487b      	ldr	r0, [pc, #492]	; (2bec <parsePreset+0x8ec>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    29fe:	f8c6 3264 	str.w	r3, [r6, #612]	; 0x264
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    2a02:	f8c6 3368 	str.w	r3, [r6, #872]	; 0x368
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    2a06:	f8c6 346c 	str.w	r3, [r6, #1132]	; 0x46c
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2a0a:	f8dc 3000 	ldr.w	r3, [ip]
	params[Effect1Mix].setParam = &fxMixSet;
    2a0e:	9a03      	ldr	r2, [sp, #12]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2a10:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    2a14:	f8dc 3004 	ldr.w	r3, [ip, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    2a18:	f8c6 4570 	str.w	r4, [r6, #1392]	; 0x570
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    2a1c:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    2a20:	f8dc 3008 	ldr.w	r3, [ip, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    2a24:	f8c6 0584 	str.w	r0, [r6, #1412]	; 0x584
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    2a28:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    2a2c:	f8dc 300c 	ldr.w	r3, [ip, #12]
    2a30:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    2a34:	f8dc 3010 	ldr.w	r3, [ip, #16]
    2a38:	f8c6 355c 	str.w	r3, [r6, #1372]	; 0x55c
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    2a3c:	f8dc 3014 	ldr.w	r3, [ip, #20]
    2a40:	f8c6 35ac 	str.w	r3, [r6, #1452]	; 0x5ac
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    2a44:	f8dc 3018 	ldr.w	r3, [ip, #24]
    2a48:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    2a4c:	f8dc 301c 	ldr.w	r3, [ip, #28]
    2a50:	f8c6 35d4 	str.w	r3, [r6, #1492]	; 0x5d4
	params[NoiseTilt].setParam = &noiseSetTilt;
    2a54:	4b66      	ldr	r3, [pc, #408]	; (2bf0 <parsePreset+0x8f0>)
    2a56:	f8c6 3188 	str.w	r3, [r6, #392]	; 0x188
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    2a5a:	4b66      	ldr	r3, [pc, #408]	; (2bf4 <parsePreset+0x8f4>)
    2a5c:	f8c6 31b0 	str.w	r3, [r6, #432]	; 0x1b0
	params[NoisePeakGain].setParam  = &noiseSetGain;
    2a60:	4b65      	ldr	r3, [pc, #404]	; (2bf8 <parsePreset+0x8f8>)
    2a62:	f8c6 319c 	str.w	r3, [r6, #412]	; 0x19c
	params[Master].setParam = &setMaster;
    2a66:	4b65      	ldr	r3, [pc, #404]	; (2bfc <parsePreset+0x8fc>)
    2a68:	6373      	str	r3, [r6, #52]	; 0x34
	params[Transpose].setParam = &setTranspose;
    2a6a:	4b65      	ldr	r3, [pc, #404]	; (2c00 <parsePreset+0x900>)
    2a6c:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
	params[PitchBendRange].setParam = &setPitchBendRange;
    2a70:	4b64      	ldr	r3, [pc, #400]	; (2c04 <parsePreset+0x904>)
    2a72:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	params[OutputTone].setParam = &setFinalLowpass;
    2a76:	4b64      	ldr	r3, [pc, #400]	; (2c08 <parsePreset+0x908>)
    2a78:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    2a7c:	f8dc 3020 	ldr.w	r3, [ip, #32]
	params[Effect2Mix].setParam = &fxMixSet;
    2a80:	f8c6 4610 	str.w	r4, [r6, #1552]	; 0x610
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    2a84:	f8c6 35e8 	str.w	r3, [r6, #1512]	; 0x5e8
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2a88:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    2a8c:	f8c6 0624 	str.w	r0, [r6, #1572]	; 0x624
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2a90:	f8c6 35fc 	str.w	r3, [r6, #1532]	; 0x5fc
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2a94:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
	params[Effect3Mix].setParam = &fxMixSet;
    2a98:	f8c6 46b0 	str.w	r4, [r6, #1712]	; 0x6b0
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2a9c:	f8c6 364c 	str.w	r3, [r6, #1612]	; 0x64c
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2aa0:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	params[Effect4Mix].setParam = &fxMixSet;
    2aa4:	f8c6 4750 	str.w	r4, [r6, #1872]	; 0x750
		params[i].objectNumber = 0;
    2aa8:	2400      	movs	r4, #0
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2aaa:	f8c6 3660 	str.w	r3, [r6, #1632]	; 0x660
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2aae:	f8dc 3030 	ldr.w	r3, [ip, #48]	; 0x30
	params[Effect3PostGain].setParam = &fxPostGainSet;
    2ab2:	f8c6 06c4 	str.w	r0, [r6, #1732]	; 0x6c4
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2ab6:	f8c6 3674 	str.w	r3, [r6, #1652]	; 0x674
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    2aba:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
	params[Effect4PostGain].setParam = &fxPostGainSet;
    2abe:	f8c6 0764 	str.w	r0, [r6, #1892]	; 0x764
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    2ac2:	f8c6 3688 	str.w	r3, [r6, #1672]	; 0x688
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    2ac6:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2aca:	4850      	ldr	r0, [pc, #320]	; (2c0c <parsePreset+0x90c>)
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    2acc:	f8c6 369c 	str.w	r3, [r6, #1692]	; 0x69c
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    2ad0:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
    2ad4:	f8c6 36ec 	str.w	r3, [r6, #1772]	; 0x6ec
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    2ad8:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
    2adc:	f8c6 3700 	str.w	r3, [r6, #1792]	; 0x700
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    2ae0:	f8dc 3044 	ldr.w	r3, [ip, #68]	; 0x44
    2ae4:	f8c6 3714 	str.w	r3, [r6, #1812]	; 0x714
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2ae8:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
    2aec:	f8c6 3728 	str.w	r3, [r6, #1832]	; 0x728
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    2af0:	f8dc 304c 	ldr.w	r3, [ip, #76]	; 0x4c
    2af4:	f8c6 373c 	str.w	r3, [r6, #1852]	; 0x73c
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2af8:	680b      	ldr	r3, [r1, #0]
    2afa:	f8c6 37c8 	str.w	r3, [r6, #1992]	; 0x7c8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    2afe:	684b      	ldr	r3, [r1, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2b00:	f8c6 087c 	str.w	r0, [r6, #2172]	; 0x87c
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    2b04:	f8c6 37b4 	str.w	r3, [r6, #1972]	; 0x7b4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    2b08:	688b      	ldr	r3, [r1, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    2b0a:	f8c6 08f4 	str.w	r0, [r6, #2292]	; 0x8f4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    2b0e:	f8c6 3840 	str.w	r3, [r6, #2112]	; 0x840
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    2b12:	68cb      	ldr	r3, [r1, #12]
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    2b14:	f8c6 096c 	str.w	r0, [r6, #2412]	; 0x96c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    2b18:	f8c6 382c 	str.w	r3, [r6, #2092]	; 0x82c
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    2b1c:	4b3c      	ldr	r3, [pc, #240]	; (2c10 <parsePreset+0x910>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    2b1e:	f8c6 09e4 	str.w	r0, [r6, #2532]	; 0x9e4
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    2b22:	f8c6 3890 	str.w	r3, [r6, #2192]	; 0x890
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    2b26:	f8c6 3908 	str.w	r3, [r6, #2312]	; 0x908
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    2b2a:	f8c6 3980 	str.w	r3, [r6, #2432]	; 0x980
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    2b2e:	f8c6 39f8 	str.w	r3, [r6, #2552]	; 0x9f8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2b32:	4b38      	ldr	r3, [pc, #224]	; (2c14 <parsePreset+0x914>)
	params[OutputAmp].setParam = &setAmp;
    2b34:	4938      	ldr	r1, [pc, #224]	; (2c18 <parsePreset+0x918>)
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2b36:	f8c6 38a4 	str.w	r3, [r6, #2212]	; 0x8a4
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    2b3a:	f8c6 391c 	str.w	r3, [r6, #2332]	; 0x91c
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    2b3e:	f8c6 3994 	str.w	r3, [r6, #2452]	; 0x994
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    2b42:	f8c6 3a0c 	str.w	r3, [r6, #2572]	; 0xa0c
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    2b46:	4b35      	ldr	r3, [pc, #212]	; (2c1c <parsePreset+0x91c>)
    2b48:	f8c6 38b8 	str.w	r3, [r6, #2232]	; 0x8b8
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    2b4c:	f8c6 3930 	str.w	r3, [r6, #2352]	; 0x930
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    2b50:	f8c6 39a8 	str.w	r3, [r6, #2472]	; 0x9a8
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    2b54:	f8c6 3a20 	str.w	r3, [r6, #2592]	; 0xa20
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    2b58:	4b31      	ldr	r3, [pc, #196]	; (2c20 <parsePreset+0x920>)
    2b5a:	f8c6 38cc 	str.w	r3, [r6, #2252]	; 0x8cc
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    2b5e:	f8c6 3944 	str.w	r3, [r6, #2372]	; 0x944
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    2b62:	f8c6 39bc 	str.w	r3, [r6, #2492]	; 0x9bc
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    2b66:	f8c6 3a34 	str.w	r3, [r6, #2612]	; 0xa34
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2b6a:	6813      	ldr	r3, [r2, #0]
    2b6c:	f8c6 3a5c 	str.w	r3, [r6, #2652]	; 0xa5c
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    2b70:	68d3      	ldr	r3, [r2, #12]
    2b72:	f8c6 3ac0 	str.w	r3, [r6, #2752]	; 0xac0
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    2b76:	6993      	ldr	r3, [r2, #24]
    2b78:	f8c6 3b24 	str.w	r3, [r6, #2852]	; 0xb24
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2b7c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	params[OutputAmp].setParam = &setAmp;
    2b7e:	f8c6 1bec 	str.w	r1, [r6, #3052]	; 0xbec
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2b82:	f8c6 3b88 	str.w	r3, [r6, #2952]	; 0xb88
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    2b86:	6853      	ldr	r3, [r2, #4]
    2b88:	f8c6 3a70 	str.w	r3, [r6, #2672]	; 0xa70
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    2b8c:	6913      	ldr	r3, [r2, #16]
    2b8e:	f8c6 3ad4 	str.w	r3, [r6, #2772]	; 0xad4
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    2b92:	69d3      	ldr	r3, [r2, #28]
    2b94:	f8c6 3b38 	str.w	r3, [r6, #2872]	; 0xb38
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    2b98:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2b9a:	f8c6 3b9c 	str.w	r3, [r6, #2972]	; 0xb9c
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    2b9e:	6893      	ldr	r3, [r2, #8]
    2ba0:	f8c6 3a84 	str.w	r3, [r6, #2692]	; 0xa84
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    2ba4:	6953      	ldr	r3, [r2, #20]
    2ba6:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    2baa:	6a13      	ldr	r3, [r2, #32]
    2bac:	f8c6 3b4c 	str.w	r3, [r6, #2892]	; 0xb4c
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2bb0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2bb2:	f8c6 3bb0 	str.w	r3, [r6, #2992]	; 0xbb0
	for (int i = 0; i < NUM_PARAMS; i++)
    2bb6:	e03d      	b.n	2c34 <parsePreset+0x934>
    2bb8:	20000450 	.word	0x20000450
    2bbc:	08000ad1 	.word	0x08000ad1
    2bc0:	08000b39 	.word	0x08000b39
    2bc4:	08000bd5 	.word	0x08000bd5
    2bc8:	08000b99 	.word	0x08000b99
    2bcc:	2000030c 	.word	0x2000030c
    2bd0:	0800229d 	.word	0x0800229d
    2bd4:	00001d81 	.word	0x00001d81
    2bd8:	08000e25 	.word	0x08000e25
    2bdc:	08000fad 	.word	0x08000fad
    2be0:	000007a1 	.word	0x000007a1
    2be4:	000016a1 	.word	0x000016a1
    2be8:	00000801 	.word	0x00000801
    2bec:	000016c1 	.word	0x000016c1
    2bf0:	00001da1 	.word	0x00001da1
    2bf4:	00001e41 	.word	0x00001e41
    2bf8:	00001e01 	.word	0x00001e01
    2bfc:	00000da1 	.word	0x00000da1
    2c00:	00000dc1 	.word	0x00000dc1
    2c04:	00000de1 	.word	0x00000de1
    2c08:	00000e01 	.word	0x00000e01
    2c0c:	00000cc1 	.word	0x00000cc1
    2c10:	00000ce1 	.word	0x00000ce1
    2c14:	00000d01 	.word	0x00000d01
    2c18:	00000d81 	.word	0x00000d81
    2c1c:	00000d21 	.word	0x00000d21
    2c20:	00000d41 	.word	0x00000d41
    2c24:	200105cc 	.word	0x200105cc
    2c28:	200152f4 	.word	0x200152f4
    2c2c:	f109 0914 	add.w	r9, r9, #20
    2c30:	f108 0801 	add.w	r8, r8, #1
		if ((i >= Osc1) && (i < Osc2))
    2c34:	f1a8 0319 	sub.w	r3, r8, #25
		params[i].objectNumber = 0;
    2c38:	f889 4010 	strb.w	r4, [r9, #16]
		if ((i >= Osc1) && (i < Osc2))
    2c3c:	2b0c      	cmp	r3, #12
    2c3e:	d94b      	bls.n	2cd8 <parsePreset+0x9d8>
		else if ((i >= Osc2) && (i < Osc3))
    2c40:	f1a8 0326 	sub.w	r3, r8, #38	; 0x26
    2c44:	2b0c      	cmp	r3, #12
    2c46:	f240 846f 	bls.w	3528 <_Min_Heap_Size+0x528>
		else if ((i >= Osc3) && (i < Effect1FXType))
    2c4a:	f1a8 0333 	sub.w	r3, r8, #51	; 0x33
    2c4e:	2b0c      	cmp	r3, #12
    2c50:	f240 845f 	bls.w	3512 <_Min_Heap_Size+0x512>
		else if ((i >= Filter1) && (i < Filter2))
    2c54:	f1a8 0360 	sub.w	r3, r8, #96	; 0x60
    2c58:	2b05      	cmp	r3, #5
    2c5a:	d93d      	bls.n	2cd8 <parsePreset+0x9d8>
		else if ((i >= Filter2) && (i < Envelope1Attack))
    2c5c:	f1a8 0366 	sub.w	r3, r8, #102	; 0x66
    2c60:	2b06      	cmp	r3, #6
    2c62:	f240 8461 	bls.w	3528 <_Min_Heap_Size+0x528>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
    2c66:	f1a8 036d 	sub.w	r3, r8, #109	; 0x6d
    2c6a:	2b05      	cmp	r3, #5
    2c6c:	d934      	bls.n	2cd8 <parsePreset+0x9d8>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
    2c6e:	f1a8 0373 	sub.w	r3, r8, #115	; 0x73
    2c72:	2b05      	cmp	r3, #5
    2c74:	f240 8458 	bls.w	3528 <_Min_Heap_Size+0x528>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
    2c78:	f1a8 0379 	sub.w	r3, r8, #121	; 0x79
    2c7c:	2b05      	cmp	r3, #5
    2c7e:	f240 8448 	bls.w	3512 <_Min_Heap_Size+0x512>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
    2c82:	f1a8 037f 	sub.w	r3, r8, #127	; 0x7f
    2c86:	2b05      	cmp	r3, #5
    2c88:	f240 8452 	bls.w	3530 <_Min_Heap_Size+0x530>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
    2c8c:	f1a8 0385 	sub.w	r3, r8, #133	; 0x85
    2c90:	2b04      	cmp	r3, #4
    2c92:	d921      	bls.n	2cd8 <parsePreset+0x9d8>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
    2c94:	f1a8 038a 	sub.w	r3, r8, #138	; 0x8a
    2c98:	2b04      	cmp	r3, #4
    2c9a:	f240 8445 	bls.w	3528 <_Min_Heap_Size+0x528>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
    2c9e:	f1a8 038f 	sub.w	r3, r8, #143	; 0x8f
    2ca2:	2b04      	cmp	r3, #4
    2ca4:	f240 8435 	bls.w	3512 <_Min_Heap_Size+0x512>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
    2ca8:	f1a8 0394 	sub.w	r3, r8, #148	; 0x94
    2cac:	2b04      	cmp	r3, #4
    2cae:	f240 843f 	bls.w	3530 <_Min_Heap_Size+0x530>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
    2cb2:	f1a8 0340 	sub.w	r3, r8, #64	; 0x40
    2cb6:	2b07      	cmp	r3, #7
    2cb8:	d90e      	bls.n	2cd8 <parsePreset+0x9d8>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
    2cba:	f1a8 0348 	sub.w	r3, r8, #72	; 0x48
    2cbe:	2b07      	cmp	r3, #7
    2cc0:	f240 8432 	bls.w	3528 <_Min_Heap_Size+0x528>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
    2cc4:	f1a8 0350 	sub.w	r3, r8, #80	; 0x50
    2cc8:	2b07      	cmp	r3, #7
    2cca:	f240 8422 	bls.w	3512 <_Min_Heap_Size+0x512>
		else if ((i >= Effect4FXType) && (i < Filter1))
    2cce:	f1a8 0358 	sub.w	r3, r8, #88	; 0x58
    2cd2:	2b07      	cmp	r3, #7
    2cd4:	f240 842c 	bls.w	3530 <_Min_Heap_Size+0x530>
		params[i].setParam(params[i].realVal, params[i].objectNumber);
    2cd8:	f8d9 300c 	ldr.w	r3, [r9, #12]
    2cdc:	2000      	movs	r0, #0
    2cde:	ed99 0a01 	vldr	s0, [r9, #4]
    2ce2:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    2ce4:	f1b8 0f9b 	cmp.w	r8, #155	; 0x9b
    2ce8:	d1a0      	bne.n	2c2c <parsePreset+0x92c>
	numMappings = 0;
    2cea:	2200      	movs	r2, #0
    2cec:	4b9e      	ldr	r3, [pc, #632]	; (2f68 <parsePreset+0xc68>)
    2cee:	f8df e378 	ldr.w	lr, [pc, #888]	; 3068 <_Min_Heap_Size+0x68>
		mappings[i].destNumber = 255;
    2cf2:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
    2cf4:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    2cf6:	4b9d      	ldr	r3, [pc, #628]	; (2f6c <parsePreset+0xc6c>)
    2cf8:	f50e 60d0 	add.w	r0, lr, #1664	; 0x680
    2cfc:	601a      	str	r2, [r3, #0]
    2cfe:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
    2d00:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2d02:	3334      	adds	r3, #52	; 0x34
		mappings[i].numHooks = 0;
    2d04:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2d08:	4283      	cmp	r3, r0
    2d0a:	d1f9      	bne.n	2d00 <parsePreset+0xa00>
	for (int i = 0; i < mappingCount; i++)
    2d0c:	f1ba 0f00 	cmp.w	sl, #0
    2d10:	d07e      	beq.n	2e10 <parsePreset+0xb10>
    2d12:	9b02      	ldr	r3, [sp, #8]
    2d14:	f04f 0a00 	mov.w	sl, #0
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    2d18:	9601      	str	r6, [sp, #4]
				foundOne = 1;
    2d1a:	f04f 0801 	mov.w	r8, #1
    2d1e:	442b      	add	r3, r5
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2d20:	ed9f 7a93 	vldr	s14, [pc, #588]	; 2f70 <parsePreset+0xc70>
			mappings[whichMapping].destNumber = destNumber;
    2d24:	f04f 0934 	mov.w	r9, #52	; 0x34
    2d28:	b29b      	uxth	r3, r3
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    2d2a:	461e      	mov	r6, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2d2c:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
    2d2e:	eb0b 0205 	add.w	r2, fp, r5
		uint8_t foundOne = 0;
    2d32:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    2d34:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
    2d36:	469c      	mov	ip, r3
		uint8_t destNumber = buffer[bufferIndex+1];
    2d38:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
    2d3a:	461c      	mov	r4, r3
			if (mappings[j].destNumber == destNumber)
    2d3c:	7811      	ldrb	r1, [r2, #0]
    2d3e:	4281      	cmp	r1, r0
    2d40:	d103      	bne.n	2d4a <parsePreset+0xa4a>
				whichHook = mappings[j].numHooks;
    2d42:	f892 c030 	ldrb.w	ip, [r2, #48]	; 0x30
    2d46:	b2dc      	uxtb	r4, r3
				foundOne = 1;
    2d48:	2701      	movs	r7, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2d4a:	3301      	adds	r3, #1
    2d4c:	3234      	adds	r2, #52	; 0x34
    2d4e:	2b20      	cmp	r3, #32
    2d50:	d1f4      	bne.n	2d3c <parsePreset+0xa3c>
		if (foundOne == 0)
    2d52:	2f00      	cmp	r7, #0
    2d54:	f000 83c0 	beq.w	34d8 <_Min_Heap_Size+0x4d8>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    2d58:	4667      	mov	r7, ip
		int source = buffer[bufferIndex];
    2d5a:	f81b 2005 	ldrb.w	r2, [fp, r5]
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    2d5e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    2d62:	fb09 e104 	mla	r1, r9, r4, lr
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    2d66:	2a03      	cmp	r2, #3
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    2d68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    2d6c:	4439      	add	r1, r7
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    2d6e:	bfcc      	ite	gt
    2d70:	4640      	movgt	r0, r8
    2d72:	2000      	movle	r0, #0
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    2d74:	443b      	add	r3, r7
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    2d76:	7508      	strb	r0, [r1, #20]
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    2d78:	497e      	ldr	r1, [pc, #504]	; (2f74 <parsePreset+0xc74>)
    2d7a:	3302      	adds	r3, #2
    2d7c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    2d80:	f84e 1023 	str.w	r1, [lr, r3, lsl #2]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2d84:	f1a2 0118 	sub.w	r1, r2, #24
		mappings[whichMapping].sourceValPtr[whichHook] = &sourceValues[source];
    2d88:	0063      	lsls	r3, r4, #1
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2d8a:	2903      	cmp	r1, #3
    2d8c:	d803      	bhi.n	2d96 <parsePreset+0xa96>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    2d8e:	4977      	ldr	r1, [pc, #476]	; (2f6c <parsePreset+0xc6c>)
    2d90:	440a      	add	r2, r1
    2d92:	f802 8c18 	strb.w	r8, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
    2d96:	eb0b 0205 	add.w	r2, fp, r5
    2d9a:	7891      	ldrb	r1, [r2, #2]
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    2d9c:	191a      	adds	r2, r3, r4
    2d9e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		if (scalar == 0xff)
    2da2:	29ff      	cmp	r1, #255	; 0xff
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    2da4:	443a      	add	r2, r7
    2da6:	f102 0206 	add.w	r2, r2, #6
		if (scalar == 0xff)
    2daa:	f000 83a7 	beq.w	34fc <_Min_Heap_Size+0x4fc>
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &sourceValues[buffer[bufferIndex+2]];
    2dae:	4871      	ldr	r0, [pc, #452]	; (2f74 <parsePreset+0xc74>)
    2db0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2db4:	f84e 0022 	str.w	r0, [lr, r2, lsl #2]
			if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2db8:	f1a1 0218 	sub.w	r2, r1, #24
    2dbc:	2a03      	cmp	r2, #3
    2dbe:	d803      	bhi.n	2dc8 <parsePreset+0xac8>
				lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2dc0:	4a6a      	ldr	r2, [pc, #424]	; (2f6c <parsePreset+0xc6c>)
    2dc2:	4411      	add	r1, r2
    2dc4:	f801 8c18 	strb.w	r8, [r1, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2dc8:	eb0b 0205 	add.w	r2, fp, r5
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2dcc:	4423      	add	r3, r4
		bufferIndex += 5;
    2dce:	3505      	adds	r5, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2dd0:	78d1      	ldrb	r1, [r2, #3]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2dd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2dd6:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].numHooks++;
    2dd8:	fb09 e404 	mla	r4, r9, r4, lr
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2ddc:	443b      	add	r3, r7
		bufferIndex += 5;
    2dde:	b2ad      	uxth	r5, r5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2de0:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2de4:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
	for (int i = 0; i < mappingCount; i++)
    2de8:	42b5      	cmp	r5, r6
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2dea:	b212      	sxth	r2, r2
    2dec:	ee07 2a90 	vmov	s15, r2
    2df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2df4:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2df8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		mappings[whichMapping].numHooks++;
    2dfc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    2e00:	f103 0301 	add.w	r3, r3, #1
    2e04:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	for (int i = 0; i < mappingCount; i++)
    2e08:	d190      	bne.n	2d2c <parsePreset+0xa2c>
    2e0a:	4b57      	ldr	r3, [pc, #348]	; (2f68 <parsePreset+0xc68>)
    2e0c:	f883 a000 	strb.w	sl, [r3]
	presetWaitingToParse = 0;
    2e10:	4b59      	ldr	r3, [pc, #356]	; (2f78 <parsePreset+0xc78>)
    2e12:	2200      	movs	r2, #0
	audioMasterLevel = 1.0f;
    2e14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    2e18:	4858      	ldr	r0, [pc, #352]	; (2f7c <parsePreset+0xc7c>)
	presetWaitingToParse = 0;
    2e1a:	601a      	str	r2, [r3, #0]
	currentActivePreset = presetNumber;
    2e1c:	4b58      	ldr	r3, [pc, #352]	; (2f80 <parsePreset+0xc80>)
    2e1e:	9a05      	ldr	r2, [sp, #20]
	audioMasterLevel = 1.0f;
    2e20:	6001      	str	r1, [r0, #0]
	currentActivePreset = presetNumber;
    2e22:	701a      	strb	r2, [r3, #0]
    2e24:	b662      	cpsie	i
}
    2e26:	b007      	add	sp, #28
    2e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
    2e2c:	4f55      	ldr	r7, [pc, #340]	; (2f84 <parsePreset+0xc84>)
				  effectSetters[i].setParam2 = &blankFunction;
    2e2e:	605c      	str	r4, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
    2e30:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
    2e32:	4f55      	ldr	r7, [pc, #340]	; (2f88 <parsePreset+0xc88>)
    2e34:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    2e36:	4f55      	ldr	r7, [pc, #340]	; (2f8c <parsePreset+0xc8c>)
				  effectSetters[i].setParam5 = &blankFunction;
    2e38:	e9c3 4403 	strd	r4, r4, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
    2e3c:	609f      	str	r7, [r3, #8]
				  break;
    2e3e:	e5cb      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &FXhighpassTick;
    2e40:	4f53      	ldr	r7, [pc, #332]	; (2f90 <parsePreset+0xc90>)
				  effectSetters[i].setParam2 = &blankFunction;
    2e42:	605c      	str	r4, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
    2e44:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
    2e46:	4f53      	ldr	r7, [pc, #332]	; (2f94 <parsePreset+0xc94>)
    2e48:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    2e4a:	4f53      	ldr	r7, [pc, #332]	; (2f98 <parsePreset+0xc98>)
				  effectSetters[i].setParam5 = &blankFunction;
    2e4c:	e9c3 4403 	strd	r4, r4, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
    2e50:	609f      	str	r7, [r3, #8]
				  break;
    2e52:	e5c1      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &FXlowpassTick;
    2e54:	4f51      	ldr	r7, [pc, #324]	; (2f9c <parsePreset+0xc9c>)
				  effectSetters[i].setParam2 = &blankFunction;
    2e56:	605c      	str	r4, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
    2e58:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
    2e5a:	4f51      	ldr	r7, [pc, #324]	; (2fa0 <parsePreset+0xca0>)
    2e5c:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    2e5e:	4f51      	ldr	r7, [pc, #324]	; (2fa4 <parsePreset+0xca4>)
				  effectSetters[i].setParam5 = &blankFunction;;
    2e60:	e9c3 4403 	strd	r4, r4, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
    2e64:	609f      	str	r7, [r3, #8]
				  break;
    2e66:	e5b7      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &wavefolderTick;
    2e68:	4f4f      	ldr	r7, [pc, #316]	; (2fa8 <parsePreset+0xca8>)
    2e6a:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &wavefolderParam1;
    2e6c:	4f4f      	ldr	r7, [pc, #316]	; (2fac <parsePreset+0xcac>)
    2e6e:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
    2e70:	4f4f      	ldr	r7, [pc, #316]	; (2fb0 <parsePreset+0xcb0>)
    2e72:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
    2e74:	4f4f      	ldr	r7, [pc, #316]	; (2fb4 <parsePreset+0xcb4>)
    2e76:	609f      	str	r7, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    2e78:	4f4f      	ldr	r7, [pc, #316]	; (2fb8 <parsePreset+0xcb8>)
    2e7a:	60df      	str	r7, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    2e7c:	4f4f      	ldr	r7, [pc, #316]	; (2fbc <parsePreset+0xcbc>)
    2e7e:	611f      	str	r7, [r3, #16]
				  break;
    2e80:	e5aa      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &tiltFilterTick;
    2e82:	4f4f      	ldr	r7, [pc, #316]	; (2fc0 <parsePreset+0xcc0>)
    2e84:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &tiltParam1;
    2e86:	4f4f      	ldr	r7, [pc, #316]	; (2fc4 <parsePreset+0xcc4>)
    2e88:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &tiltParam2;
    2e8a:	4f4f      	ldr	r7, [pc, #316]	; (2fc8 <parsePreset+0xcc8>)
    2e8c:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
    2e8e:	4f4f      	ldr	r7, [pc, #316]	; (2fcc <parsePreset+0xccc>)
    2e90:	609f      	str	r7, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
    2e92:	4f4f      	ldr	r7, [pc, #316]	; (2fd0 <parsePreset+0xcd0>)
    2e94:	60df      	str	r7, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
    2e96:	4f49      	ldr	r7, [pc, #292]	; (2fbc <parsePreset+0xcbc>)
    2e98:	611f      	str	r7, [r3, #16]
				  break;
    2e9a:	e59d      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &bcTick;
    2e9c:	4f4d      	ldr	r7, [pc, #308]	; (2fd4 <parsePreset+0xcd4>)
    2e9e:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
    2ea0:	4f4d      	ldr	r7, [pc, #308]	; (2fd8 <parsePreset+0xcd8>)
    2ea2:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &param2Linear;
    2ea4:	4f4d      	ldr	r7, [pc, #308]	; (2fdc <parsePreset+0xcdc>)
    2ea6:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
    2ea8:	4f4d      	ldr	r7, [pc, #308]	; (2fe0 <parsePreset+0xce0>)
    2eaa:	e7e4      	b.n	2e76 <parsePreset+0xb76>
				  effectTick[i] = &chorusTick;
    2eac:	4f4d      	ldr	r7, [pc, #308]	; (2fe4 <parsePreset+0xce4>)
				  effectSetters[i].setParam5 = &blankFunction;
    2eae:	611c      	str	r4, [r3, #16]
				  effectTick[i] = &chorusTick;
    2eb0:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &chorusParam1;
    2eb2:	4f4d      	ldr	r7, [pc, #308]	; (2fe8 <parsePreset+0xce8>)
    2eb4:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &chorusParam2;
    2eb6:	4f4d      	ldr	r7, [pc, #308]	; (2fec <parsePreset+0xcec>)
    2eb8:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
    2eba:	4f4d      	ldr	r7, [pc, #308]	; (2ff0 <parsePreset+0xcf0>)
    2ebc:	609f      	str	r7, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
    2ebe:	4f4d      	ldr	r7, [pc, #308]	; (2ff4 <parsePreset+0xcf4>)
    2ec0:	60df      	str	r7, [r3, #12]
				  break;
    2ec2:	e589      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &compressorTick;
    2ec4:	4f4c      	ldr	r7, [pc, #304]	; (2ff8 <parsePreset+0xcf8>)
    2ec6:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &compressorParam1;
    2ec8:	4f4c      	ldr	r7, [pc, #304]	; (2ffc <parsePreset+0xcfc>)
    2eca:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &compressorParam2;
    2ecc:	4f4c      	ldr	r7, [pc, #304]	; (3000 <_Min_Heap_Size>)
    2ece:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
    2ed0:	4f4c      	ldr	r7, [pc, #304]	; (3004 <_Min_Heap_Size+0x4>)
    2ed2:	609f      	str	r7, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
    2ed4:	4f4c      	ldr	r7, [pc, #304]	; (3008 <_Min_Heap_Size+0x8>)
    2ed6:	60df      	str	r7, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
    2ed8:	4f4c      	ldr	r7, [pc, #304]	; (300c <_Min_Heap_Size+0xc>)
    2eda:	611f      	str	r7, [r3, #16]
				  break;
    2edc:	e57c      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = FXVZhighshelfTick;
    2ede:	4f4c      	ldr	r7, [pc, #304]	; (3010 <_Min_Heap_Size+0x10>)
    2ee0:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
    2ee2:	4f4c      	ldr	r7, [pc, #304]	; (3014 <_Min_Heap_Size+0x14>)
    2ee4:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
    2ee6:	4f4c      	ldr	r7, [pc, #304]	; (3018 <_Min_Heap_Size+0x18>)
    2ee8:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    2eea:	4f4c      	ldr	r7, [pc, #304]	; (301c <_Min_Heap_Size+0x1c>)
				  effectSetters[i].setParam5 = &blankFunction;;
    2eec:	e9c3 4403 	strd	r4, r4, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
    2ef0:	609f      	str	r7, [r3, #8]
				  break;
    2ef2:	e571      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &FXVZlowshelfTick;
    2ef4:	4f4a      	ldr	r7, [pc, #296]	; (3020 <_Min_Heap_Size+0x20>)
    2ef6:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
    2ef8:	4f4a      	ldr	r7, [pc, #296]	; (3024 <_Min_Heap_Size+0x24>)
    2efa:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
    2efc:	4f4a      	ldr	r7, [pc, #296]	; (3028 <_Min_Heap_Size+0x28>)
    2efe:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    2f00:	4f4a      	ldr	r7, [pc, #296]	; (302c <_Min_Heap_Size+0x2c>)
				  effectSetters[i].setParam5 = &blankFunction;
    2f02:	e9c3 4403 	strd	r4, r4, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
    2f06:	609f      	str	r7, [r3, #8]
				  break;
    2f08:	e566      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &FXVZpeakTick;
    2f0a:	4f49      	ldr	r7, [pc, #292]	; (3030 <_Min_Heap_Size+0x30>)
    2f0c:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &FXPeakParam1;
    2f0e:	4f49      	ldr	r7, [pc, #292]	; (3034 <_Min_Heap_Size+0x34>)
    2f10:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &FXPeakParam2;
    2f12:	4f49      	ldr	r7, [pc, #292]	; (3038 <_Min_Heap_Size+0x38>)
    2f14:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    2f16:	4f49      	ldr	r7, [pc, #292]	; (303c <_Min_Heap_Size+0x3c>)
				  effectSetters[i].setParam5 = &blankFunction;
    2f18:	e9c3 4403 	strd	r4, r4, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
    2f1c:	609f      	str	r7, [r3, #8]
				  break;
    2f1e:	e55b      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &FXdiodeLowpassTick;
    2f20:	4f47      	ldr	r7, [pc, #284]	; (3040 <_Min_Heap_Size+0x40>)
				  effectSetters[i].setParam2 = &blankFunction;
    2f22:	605c      	str	r4, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
    2f24:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
    2f26:	4f47      	ldr	r7, [pc, #284]	; (3044 <_Min_Heap_Size+0x44>)
    2f28:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    2f2a:	4f47      	ldr	r7, [pc, #284]	; (3048 <_Min_Heap_Size+0x48>)
				  effectSetters[i].setParam5 = &blankFunction;
    2f2c:	e9c3 4403 	strd	r4, r4, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
    2f30:	609f      	str	r7, [r3, #8]
				  break;
    2f32:	e551      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = FXVZbandrejectTick;
    2f34:	4f45      	ldr	r7, [pc, #276]	; (304c <_Min_Heap_Size+0x4c>)
    2f36:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    2f38:	4f45      	ldr	r7, [pc, #276]	; (3050 <_Min_Heap_Size+0x50>)
				  effectSetters[i].setParam5 = &blankFunction;;
    2f3a:	611c      	str	r4, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
    2f3c:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
    2f3e:	4f45      	ldr	r7, [pc, #276]	; (3054 <_Min_Heap_Size+0x54>)
    2f40:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
    2f42:	4f45      	ldr	r7, [pc, #276]	; (3058 <_Min_Heap_Size+0x58>)
				  effectSetters[i].setParam4 = &blankFunction;;
    2f44:	e9c3 7402 	strd	r7, r4, [r3, #8]
				  break;
    2f48:	e546      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &shaperTick;
    2f4a:	4f44      	ldr	r7, [pc, #272]	; (305c <_Min_Heap_Size+0x5c>)
				  effectSetters[i].setParam5 = &blankFunction;
    2f4c:	611c      	str	r4, [r3, #16]
				  effectTick[i] = &tanhTick;
    2f4e:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
    2f50:	4f21      	ldr	r7, [pc, #132]	; (2fd8 <parsePreset+0xcd8>)
    2f52:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
    2f54:	4f16      	ldr	r7, [pc, #88]	; (2fb0 <parsePreset+0xcb0>)
    2f56:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
    2f58:	4f41      	ldr	r7, [pc, #260]	; (3060 <_Min_Heap_Size+0x60>)
    2f5a:	609f      	str	r7, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    2f5c:	4f16      	ldr	r7, [pc, #88]	; (2fb8 <parsePreset+0xcb8>)
    2f5e:	60df      	str	r7, [r3, #12]
				  break;
    2f60:	e53a      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &tanhTick;
    2f62:	4f40      	ldr	r7, [pc, #256]	; (3064 <_Min_Heap_Size+0x64>)
				  effectSetters[i].setParam5 = &blankFunction;
    2f64:	611c      	str	r4, [r3, #16]
    2f66:	e7f2      	b.n	2f4e <parsePreset+0xc4e>
    2f68:	20014e00 	.word	0x20014e00
    2f6c:	2000041c 	.word	0x2000041c
    2f70:	37fffffc 	.word	0x37fffffc
    2f74:	2000f358 	.word	0x2000f358
    2f78:	20015b50 	.word	0x20015b50
    2f7c:	20000094 	.word	0x20000094
    2f80:	20010584 	.word	0x20010584
    2f84:	00001cc1 	.word	0x00001cc1
    2f88:	08000c75 	.word	0x08000c75
    2f8c:	08000f4d 	.word	0x08000f4d
    2f90:	00001ca1 	.word	0x00001ca1
    2f94:	08000c2d 	.word	0x08000c2d
    2f98:	08000f3d 	.word	0x08000f3d
    2f9c:	00001c81 	.word	0x00001c81
    2fa0:	08000be5 	.word	0x08000be5
    2fa4:	08000f2d 	.word	0x08000f2d
    2fa8:	00001701 	.word	0x00001701
    2fac:	00001221 	.word	0x00001221
    2fb0:	000014a1 	.word	0x000014a1
    2fb4:	00001241 	.word	0x00001241
    2fb8:	000015c1 	.word	0x000015c1
    2fbc:	000015e1 	.word	0x000015e1
    2fc0:	00001a21 	.word	0x00001a21
    2fc4:	00001281 	.word	0x00001281
    2fc8:	000012e1 	.word	0x000012e1
    2fcc:	00001341 	.word	0x00001341
    2fd0:	00001361 	.word	0x00001361
    2fd4:	00001c41 	.word	0x00001c41
    2fd8:	00001201 	.word	0x00001201
    2fdc:	000014c1 	.word	0x000014c1
    2fe0:	00001621 	.word	0x00001621
    2fe4:	000018e1 	.word	0x000018e1
    2fe8:	00001821 	.word	0x00001821
    2fec:	00001841 	.word	0x00001841
    2ff0:	00001861 	.word	0x00001861
    2ff4:	000018a1 	.word	0x000018a1
    2ff8:	00001c61 	.word	0x00001c61
    2ffc:	000013a1 	.word	0x000013a1
    3000:	000013c1 	.word	0x000013c1
    3004:	00001401 	.word	0x00001401
    3008:	00001421 	.word	0x00001421
    300c:	00001461 	.word	0x00001461
    3010:	00001d41 	.word	0x00001d41
    3014:	08000d95 	.word	0x08000d95
    3018:	08000ecd 	.word	0x08000ecd
    301c:	08000f8d 	.word	0x08000f8d
    3020:	00001d21 	.word	0x00001d21
    3024:	08000d4d 	.word	0x08000d4d
    3028:	08000e9d 	.word	0x08000e9d
    302c:	08000f7d 	.word	0x08000f7d
    3030:	00001d01 	.word	0x00001d01
    3034:	08000d05 	.word	0x08000d05
    3038:	08000e6d 	.word	0x08000e6d
    303c:	08000f6d 	.word	0x08000f6d
    3040:	00001ce1 	.word	0x00001ce1
    3044:	08000cbd 	.word	0x08000cbd
    3048:	08000f5d 	.word	0x08000f5d
    304c:	00001d61 	.word	0x00001d61
    3050:	08000ddd 	.word	0x08000ddd
    3054:	08000efd 	.word	0x08000efd
    3058:	08000f9d 	.word	0x08000f9d
    305c:	000019a1 	.word	0x000019a1
    3060:	000014e1 	.word	0x000014e1
    3064:	00001a61 	.word	0x00001a61
    3068:	2001477c 	.word	0x2001477c
				  effectTick[i] = &satTick;
    306c:	4f88      	ldr	r7, [pc, #544]	; (3290 <_Min_Heap_Size+0x290>)
				  effectSetters[i].setParam5 = &blankFunction;
    306e:	611c      	str	r4, [r3, #16]
    3070:	e76d      	b.n	2f4e <parsePreset+0xc4e>
				  effectTick[i] = &hardClipTick;
    3072:	4f88      	ldr	r7, [pc, #544]	; (3294 <_Min_Heap_Size+0x294>)
				  effectSetters[i].setParam5 = &blankFunction;
    3074:	611c      	str	r4, [r3, #16]
				  effectTick[i] = &hardClipTick;
    3076:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3078:	4f87      	ldr	r7, [pc, #540]	; (3298 <_Min_Heap_Size+0x298>)
    307a:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
    307c:	4f87      	ldr	r7, [pc, #540]	; (329c <_Min_Heap_Size+0x29c>)
    307e:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
    3080:	4f87      	ldr	r7, [pc, #540]	; (32a0 <_Min_Heap_Size+0x2a0>)
    3082:	609f      	str	r7, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    3084:	4f87      	ldr	r7, [pc, #540]	; (32a4 <_Min_Heap_Size+0x2a4>)
    3086:	60df      	str	r7, [r3, #12]
				  break;
    3088:	e4a6      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &softClipTick;
    308a:	4f87      	ldr	r7, [pc, #540]	; (32a8 <_Min_Heap_Size+0x2a8>)
				  effectSetters[i].setParam5 = &blankFunction;
    308c:	611c      	str	r4, [r3, #16]
				  effectTick[i] = &softClipTick;
    308e:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam1 = &clipperGainSet;
    3090:	4f81      	ldr	r7, [pc, #516]	; (3298 <_Min_Heap_Size+0x298>)
    3092:	601f      	str	r7, [r3, #0]
				  effectSetters[i].setParam2 = &offsetParam2;
    3094:	4f81      	ldr	r7, [pc, #516]	; (329c <_Min_Heap_Size+0x29c>)
    3096:	605f      	str	r7, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
    3098:	4f84      	ldr	r7, [pc, #528]	; (32ac <_Min_Heap_Size+0x2ac>)
    309a:	609f      	str	r7, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
    309c:	4f81      	ldr	r7, [pc, #516]	; (32a4 <_Min_Heap_Size+0x2a4>)
    309e:	60df      	str	r7, [r3, #12]
				  break;
    30a0:	e49a      	b.n	29d8 <parsePreset+0x6d8>
				  effectTick[i] = &blankTick;
    30a2:	4f83      	ldr	r7, [pc, #524]	; (32b0 <_Min_Heap_Size+0x2b0>)
				  effectSetters[i].setParam5 = &blankFunction;
    30a4:	611c      	str	r4, [r3, #16]
				  effectTick[i] = &blankTick;
    30a6:	6007      	str	r7, [r0, #0]
				  effectSetters[i].setParam2 = &blankFunction;
    30a8:	e9c3 4400 	strd	r4, r4, [r3]
				  effectSetters[i].setParam4 = &blankFunction;
    30ac:	e9c3 4402 	strd	r4, r4, [r3, #8]
				  break;
    30b0:	e492      	b.n	29d8 <parsePreset+0x6d8>
				lfoShapeTick[i] = &lfoSawTick;
    30b2:	4b80      	ldr	r3, [pc, #512]	; (32b4 <_Min_Heap_Size+0x2b4>)
    30b4:	4880      	ldr	r0, [pc, #512]	; (32b8 <_Min_Heap_Size+0x2b8>)
    30b6:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
    30b8:	4b80      	ldr	r3, [pc, #512]	; (32bc <_Min_Heap_Size+0x2bc>)
    30ba:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
    30bc:	4b80      	ldr	r3, [pc, #512]	; (32c0 <_Min_Heap_Size+0x2c0>)
    30be:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    30c0:	4b80      	ldr	r3, [pc, #512]	; (32c4 <_Min_Heap_Size+0x2c4>)
    30c2:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    30c4:	e44f      	b.n	2966 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoTriTick;
    30c6:	4b7b      	ldr	r3, [pc, #492]	; (32b4 <_Min_Heap_Size+0x2b4>)
    30c8:	487f      	ldr	r0, [pc, #508]	; (32c8 <_Min_Heap_Size+0x2c8>)
    30ca:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
    30cc:	4b7f      	ldr	r3, [pc, #508]	; (32cc <_Min_Heap_Size+0x2cc>)
    30ce:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
    30d0:	4b7f      	ldr	r3, [pc, #508]	; (32d0 <_Min_Heap_Size+0x2d0>)
    30d2:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    30d4:	4b7f      	ldr	r3, [pc, #508]	; (32d4 <_Min_Heap_Size+0x2d4>)
    30d6:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    30d8:	e445      	b.n	2966 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoSineTick;
    30da:	4b76      	ldr	r3, [pc, #472]	; (32b4 <_Min_Heap_Size+0x2b4>)
    30dc:	487e      	ldr	r0, [pc, #504]	; (32d8 <_Min_Heap_Size+0x2d8>)
    30de:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
    30e0:	4b7e      	ldr	r3, [pc, #504]	; (32dc <_Min_Heap_Size+0x2dc>)
    30e2:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
    30e4:	4b7e      	ldr	r3, [pc, #504]	; (32e0 <_Min_Heap_Size+0x2e0>)
    30e6:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    30e8:	4b7e      	ldr	r3, [pc, #504]	; (32e4 <_Min_Heap_Size+0x2e4>)
    30ea:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    30ec:	e43b      	b.n	2966 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoSawTick;
    30ee:	4b71      	ldr	r3, [pc, #452]	; (32b4 <_Min_Heap_Size+0x2b4>)
    30f0:	4871      	ldr	r0, [pc, #452]	; (32b8 <_Min_Heap_Size+0x2b8>)
    30f2:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
    30f4:	4b71      	ldr	r3, [pc, #452]	; (32bc <_Min_Heap_Size+0x2bc>)
    30f6:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
    30f8:	4b71      	ldr	r3, [pc, #452]	; (32c0 <_Min_Heap_Size+0x2c0>)
    30fa:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    30fc:	4b71      	ldr	r3, [pc, #452]	; (32c4 <_Min_Heap_Size+0x2c4>)
    30fe:	6213      	str	r3, [r2, #32]
				break;
    3100:	f7ff bbe4 	b.w	28cc <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoSawSquareTick;
    3104:	4b6b      	ldr	r3, [pc, #428]	; (32b4 <_Min_Heap_Size+0x2b4>)
    3106:	4878      	ldr	r0, [pc, #480]	; (32e8 <_Min_Heap_Size+0x2e8>)
    3108:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    310a:	4b78      	ldr	r3, [pc, #480]	; (32ec <_Min_Heap_Size+0x2ec>)
    310c:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    310e:	4b78      	ldr	r3, [pc, #480]	; (32f0 <_Min_Heap_Size+0x2f0>)
    3110:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    3112:	4b78      	ldr	r3, [pc, #480]	; (32f4 <_Min_Heap_Size+0x2f4>)
    3114:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    3116:	e426      	b.n	2966 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoSineTriTick;
    3118:	4b66      	ldr	r3, [pc, #408]	; (32b4 <_Min_Heap_Size+0x2b4>)
    311a:	4877      	ldr	r0, [pc, #476]	; (32f8 <_Min_Heap_Size+0x2f8>)
    311c:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    311e:	4b77      	ldr	r3, [pc, #476]	; (32fc <_Min_Heap_Size+0x2fc>)
    3120:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    3122:	4b77      	ldr	r3, [pc, #476]	; (3300 <_Min_Heap_Size+0x300>)
    3124:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    3126:	4b77      	ldr	r3, [pc, #476]	; (3304 <_Min_Heap_Size+0x304>)
    3128:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
    312a:	e41c      	b.n	2966 <parsePreset+0x666>
				lfoShapeTick[i] = &lfoTriTick;
    312c:	4b61      	ldr	r3, [pc, #388]	; (32b4 <_Min_Heap_Size+0x2b4>)
    312e:	4866      	ldr	r0, [pc, #408]	; (32c8 <_Min_Heap_Size+0x2c8>)
    3130:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
    3132:	4b66      	ldr	r3, [pc, #408]	; (32cc <_Min_Heap_Size+0x2cc>)
    3134:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
    3136:	4b66      	ldr	r3, [pc, #408]	; (32d0 <_Min_Heap_Size+0x2d0>)
    3138:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    313a:	4b66      	ldr	r3, [pc, #408]	; (32d4 <_Min_Heap_Size+0x2d4>)
    313c:	6213      	str	r3, [r2, #32]
				break;
    313e:	f7ff bbc5 	b.w	28cc <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoSineTick;
    3142:	4b5c      	ldr	r3, [pc, #368]	; (32b4 <_Min_Heap_Size+0x2b4>)
    3144:	4864      	ldr	r0, [pc, #400]	; (32d8 <_Min_Heap_Size+0x2d8>)
    3146:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
    3148:	4b64      	ldr	r3, [pc, #400]	; (32dc <_Min_Heap_Size+0x2dc>)
    314a:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
    314c:	4b64      	ldr	r3, [pc, #400]	; (32e0 <_Min_Heap_Size+0x2e0>)
    314e:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    3150:	4b64      	ldr	r3, [pc, #400]	; (32e4 <_Min_Heap_Size+0x2e4>)
    3152:	6213      	str	r3, [r2, #32]
				break;
    3154:	f7ff bbba 	b.w	28cc <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoSawSquareTick;
    3158:	4b56      	ldr	r3, [pc, #344]	; (32b4 <_Min_Heap_Size+0x2b4>)
    315a:	4863      	ldr	r0, [pc, #396]	; (32e8 <_Min_Heap_Size+0x2e8>)
    315c:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    315e:	4b63      	ldr	r3, [pc, #396]	; (32ec <_Min_Heap_Size+0x2ec>)
    3160:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    3162:	4b63      	ldr	r3, [pc, #396]	; (32f0 <_Min_Heap_Size+0x2f0>)
    3164:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    3166:	4b63      	ldr	r3, [pc, #396]	; (32f4 <_Min_Heap_Size+0x2f4>)
    3168:	6213      	str	r3, [r2, #32]
				break;
    316a:	f7ff bbaf 	b.w	28cc <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoSawTick;
    316e:	4b51      	ldr	r3, [pc, #324]	; (32b4 <_Min_Heap_Size+0x2b4>)
    3170:	4851      	ldr	r0, [pc, #324]	; (32b8 <_Min_Heap_Size+0x2b8>)
    3172:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
    3174:	4b51      	ldr	r3, [pc, #324]	; (32bc <_Min_Heap_Size+0x2bc>)
    3176:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
    3178:	4b51      	ldr	r3, [pc, #324]	; (32c0 <_Min_Heap_Size+0x2c0>)
    317a:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    317c:	4b51      	ldr	r3, [pc, #324]	; (32c4 <_Min_Heap_Size+0x2c4>)
    317e:	6153      	str	r3, [r2, #20]
				break;
    3180:	f7ff bb84 	b.w	288c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSineTriTick;
    3184:	4b4b      	ldr	r3, [pc, #300]	; (32b4 <_Min_Heap_Size+0x2b4>)
    3186:	485c      	ldr	r0, [pc, #368]	; (32f8 <_Min_Heap_Size+0x2f8>)
    3188:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    318a:	4b5c      	ldr	r3, [pc, #368]	; (32fc <_Min_Heap_Size+0x2fc>)
    318c:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    318e:	4b5c      	ldr	r3, [pc, #368]	; (3300 <_Min_Heap_Size+0x300>)
    3190:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    3192:	4b5c      	ldr	r3, [pc, #368]	; (3304 <_Min_Heap_Size+0x304>)
    3194:	6213      	str	r3, [r2, #32]
				break;
    3196:	f7ff bb99 	b.w	28cc <parsePreset+0x5cc>
				lfoShapeTick[i] = &lfoTriTick;
    319a:	4b46      	ldr	r3, [pc, #280]	; (32b4 <_Min_Heap_Size+0x2b4>)
    319c:	484a      	ldr	r0, [pc, #296]	; (32c8 <_Min_Heap_Size+0x2c8>)
    319e:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
    31a0:	4b4a      	ldr	r3, [pc, #296]	; (32cc <_Min_Heap_Size+0x2cc>)
    31a2:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
    31a4:	4b4a      	ldr	r3, [pc, #296]	; (32d0 <_Min_Heap_Size+0x2d0>)
    31a6:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    31a8:	4b4a      	ldr	r3, [pc, #296]	; (32d4 <_Min_Heap_Size+0x2d4>)
    31aa:	6153      	str	r3, [r2, #20]
				break;
    31ac:	f7ff bb6e 	b.w	288c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSineTick;
    31b0:	4b40      	ldr	r3, [pc, #256]	; (32b4 <_Min_Heap_Size+0x2b4>)
    31b2:	4849      	ldr	r0, [pc, #292]	; (32d8 <_Min_Heap_Size+0x2d8>)
    31b4:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
    31b6:	4b49      	ldr	r3, [pc, #292]	; (32dc <_Min_Heap_Size+0x2dc>)
    31b8:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
    31ba:	4b49      	ldr	r3, [pc, #292]	; (32e0 <_Min_Heap_Size+0x2e0>)
    31bc:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    31be:	4b49      	ldr	r3, [pc, #292]	; (32e4 <_Min_Heap_Size+0x2e4>)
    31c0:	6153      	str	r3, [r2, #20]
				break;
    31c2:	f7ff bb63 	b.w	288c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSawSquareTick;
    31c6:	4b3b      	ldr	r3, [pc, #236]	; (32b4 <_Min_Heap_Size+0x2b4>)
    31c8:	4847      	ldr	r0, [pc, #284]	; (32e8 <_Min_Heap_Size+0x2e8>)
    31ca:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    31cc:	4b47      	ldr	r3, [pc, #284]	; (32ec <_Min_Heap_Size+0x2ec>)
    31ce:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    31d0:	4b47      	ldr	r3, [pc, #284]	; (32f0 <_Min_Heap_Size+0x2f0>)
    31d2:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    31d4:	4b47      	ldr	r3, [pc, #284]	; (32f4 <_Min_Heap_Size+0x2f4>)
    31d6:	6153      	str	r3, [r2, #20]
				break;
    31d8:	f7ff bb58 	b.w	288c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSineTriTick;
    31dc:	4b35      	ldr	r3, [pc, #212]	; (32b4 <_Min_Heap_Size+0x2b4>)
    31de:	4846      	ldr	r0, [pc, #280]	; (32f8 <_Min_Heap_Size+0x2f8>)
    31e0:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    31e2:	4b46      	ldr	r3, [pc, #280]	; (32fc <_Min_Heap_Size+0x2fc>)
    31e4:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    31e6:	4b46      	ldr	r3, [pc, #280]	; (3300 <_Min_Heap_Size+0x300>)
    31e8:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    31ea:	4b46      	ldr	r3, [pc, #280]	; (3304 <_Min_Heap_Size+0x304>)
    31ec:	6153      	str	r3, [r2, #20]
				break;
    31ee:	f7ff bb4d 	b.w	288c <parsePreset+0x58c>
				lfoShapeTick[i] = &lfoSawTick;
    31f2:	4b30      	ldr	r3, [pc, #192]	; (32b4 <_Min_Heap_Size+0x2b4>)
    31f4:	4830      	ldr	r0, [pc, #192]	; (32b8 <_Min_Heap_Size+0x2b8>)
				lfoSetters[i].setRate = &lfoSawSetRate;
    31f6:	4a44      	ldr	r2, [pc, #272]	; (3308 <_Min_Heap_Size+0x308>)
				lfoShapeTick[i] = &lfoSawTick;
    31f8:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
    31fa:	4b30      	ldr	r3, [pc, #192]	; (32bc <_Min_Heap_Size+0x2bc>)
    31fc:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
    31fe:	4b30      	ldr	r3, [pc, #192]	; (32c0 <_Min_Heap_Size+0x2c0>)
    3200:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
    3202:	4b30      	ldr	r3, [pc, #192]	; (32c4 <_Min_Heap_Size+0x2c4>)
    3204:	6093      	str	r3, [r2, #8]
				break;
    3206:	f7ff bb21 	b.w	284c <parsePreset+0x54c>
				lfoShapeTick[i] = &lfoTriTick;
    320a:	4b2a      	ldr	r3, [pc, #168]	; (32b4 <_Min_Heap_Size+0x2b4>)
    320c:	482e      	ldr	r0, [pc, #184]	; (32c8 <_Min_Heap_Size+0x2c8>)
				lfoSetters[i].setRate = &lfoTriSetRate;
    320e:	4a3e      	ldr	r2, [pc, #248]	; (3308 <_Min_Heap_Size+0x308>)
				lfoShapeTick[i] = &lfoTriTick;
    3210:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
    3212:	4b2e      	ldr	r3, [pc, #184]	; (32cc <_Min_Heap_Size+0x2cc>)
    3214:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
    3216:	4b2e      	ldr	r3, [pc, #184]	; (32d0 <_Min_Heap_Size+0x2d0>)
    3218:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
    321a:	4b2e      	ldr	r3, [pc, #184]	; (32d4 <_Min_Heap_Size+0x2d4>)
    321c:	6093      	str	r3, [r2, #8]
				break;
    321e:	f7ff bb15 	b.w	284c <parsePreset+0x54c>
				lfoShapeTick[i] = &lfoSineTick;
    3222:	4b24      	ldr	r3, [pc, #144]	; (32b4 <_Min_Heap_Size+0x2b4>)
    3224:	482c      	ldr	r0, [pc, #176]	; (32d8 <_Min_Heap_Size+0x2d8>)
				lfoSetters[i].setRate = &lfoSineSetRate;
    3226:	4a38      	ldr	r2, [pc, #224]	; (3308 <_Min_Heap_Size+0x308>)
				lfoShapeTick[i] = &lfoSineTick;
    3228:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
    322a:	4b2c      	ldr	r3, [pc, #176]	; (32dc <_Min_Heap_Size+0x2dc>)
    322c:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
    322e:	4b2c      	ldr	r3, [pc, #176]	; (32e0 <_Min_Heap_Size+0x2e0>)
    3230:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
    3232:	4b2c      	ldr	r3, [pc, #176]	; (32e4 <_Min_Heap_Size+0x2e4>)
    3234:	6093      	str	r3, [r2, #8]
				break;
    3236:	f7ff bb09 	b.w	284c <parsePreset+0x54c>
				lfoShapeTick[i] = &lfoSawSquareTick;
    323a:	4b1e      	ldr	r3, [pc, #120]	; (32b4 <_Min_Heap_Size+0x2b4>)
    323c:	482a      	ldr	r0, [pc, #168]	; (32e8 <_Min_Heap_Size+0x2e8>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    323e:	4a32      	ldr	r2, [pc, #200]	; (3308 <_Min_Heap_Size+0x308>)
				lfoShapeTick[i] = &lfoSawSquareTick;
    3240:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
    3242:	4b2a      	ldr	r3, [pc, #168]	; (32ec <_Min_Heap_Size+0x2ec>)
    3244:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
    3246:	4b2a      	ldr	r3, [pc, #168]	; (32f0 <_Min_Heap_Size+0x2f0>)
    3248:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
    324a:	4b2a      	ldr	r3, [pc, #168]	; (32f4 <_Min_Heap_Size+0x2f4>)
    324c:	6093      	str	r3, [r2, #8]
				break;
    324e:	f7ff bafd 	b.w	284c <parsePreset+0x54c>
				lfoShapeTick[i] = &lfoSineTriTick;
    3252:	4b18      	ldr	r3, [pc, #96]	; (32b4 <_Min_Heap_Size+0x2b4>)
    3254:	4828      	ldr	r0, [pc, #160]	; (32f8 <_Min_Heap_Size+0x2f8>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    3256:	4a2c      	ldr	r2, [pc, #176]	; (3308 <_Min_Heap_Size+0x308>)
				lfoShapeTick[i] = &lfoSineTriTick;
    3258:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
    325a:	4b28      	ldr	r3, [pc, #160]	; (32fc <_Min_Heap_Size+0x2fc>)
    325c:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
    325e:	4b28      	ldr	r3, [pc, #160]	; (3300 <_Min_Heap_Size+0x300>)
    3260:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
    3262:	4b28      	ldr	r3, [pc, #160]	; (3304 <_Min_Heap_Size+0x304>)
    3264:	6093      	str	r3, [r2, #8]
				break;
    3266:	f7ff baf1 	b.w	284c <parsePreset+0x54c>
				  filterTick[i] = &LadderLowpassTick;
    326a:	4b28      	ldr	r3, [pc, #160]	; (330c <_Min_Heap_Size+0x30c>)
    326c:	4a28      	ldr	r2, [pc, #160]	; (3310 <_Min_Heap_Size+0x310>)
    326e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    3270:	4b28      	ldr	r3, [pc, #160]	; (3314 <_Min_Heap_Size+0x314>)
    3272:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    3274:	4b28      	ldr	r3, [pc, #160]	; (3318 <_Min_Heap_Size+0x318>)
    3276:	60cb      	str	r3, [r1, #12]
				  break;
    3278:	f7ff bac6 	b.w	2808 <parsePreset+0x508>
				  filterTick[i] = &VZbandrejectTick;
    327c:	4b23      	ldr	r3, [pc, #140]	; (330c <_Min_Heap_Size+0x30c>)
    327e:	4a27      	ldr	r2, [pc, #156]	; (331c <_Min_Heap_Size+0x31c>)
    3280:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    3282:	4b27      	ldr	r3, [pc, #156]	; (3320 <_Min_Heap_Size+0x320>)
    3284:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    3286:	4b27      	ldr	r3, [pc, #156]	; (3324 <_Min_Heap_Size+0x324>)
    3288:	60cb      	str	r3, [r1, #12]
				  break;
    328a:	f7ff babd 	b.w	2808 <parsePreset+0x508>
    328e:	bf00      	nop
    3290:	00001bc1 	.word	0x00001bc1
    3294:	00001b41 	.word	0x00001b41
    3298:	00001201 	.word	0x00001201
    329c:	000014a1 	.word	0x000014a1
    32a0:	00001561 	.word	0x00001561
    32a4:	000015c1 	.word	0x000015c1
    32a8:	00001ac1 	.word	0x00001ac1
    32ac:	00001501 	.word	0x00001501
    32b0:	00001a01 	.word	0x00001a01
    32b4:	20000450 	.word	0x20000450
    32b8:	08000aad 	.word	0x08000aad
    32bc:	08000b29 	.word	0x08000b29
    32c0:	08000bd1 	.word	0x08000bd1
    32c4:	08000b89 	.word	0x08000b89
    32c8:	08000a95 	.word	0x08000a95
    32cc:	08000b19 	.word	0x08000b19
    32d0:	08000bcd 	.word	0x08000bcd
    32d4:	08000b79 	.word	0x08000b79
    32d8:	08000a7d 	.word	0x08000a7d
    32dc:	08000b09 	.word	0x08000b09
    32e0:	08000bc9 	.word	0x08000bc9
    32e4:	08000b69 	.word	0x08000b69
    32e8:	08000a4d 	.word	0x08000a4d
    32ec:	08000ae9 	.word	0x08000ae9
    32f0:	08000ba9 	.word	0x08000ba9
    32f4:	08000b49 	.word	0x08000b49
    32f8:	08000a65 	.word	0x08000a65
    32fc:	08000af9 	.word	0x08000af9
    3300:	08000bb9 	.word	0x08000bb9
    3304:	08000b59 	.word	0x08000b59
    3308:	20014748 	.word	0x20014748
    330c:	20000340 	.word	0x20000340
    3310:	00000761 	.word	0x00000761
    3314:	00000981 	.word	0x00000981
    3318:	00000ba1 	.word	0x00000ba1
    331c:	00000721 	.word	0x00000721
    3320:	00000961 	.word	0x00000961
    3324:	00000b61 	.word	0x00000b61
				  filterTick[i] = &VZhighshelfTick;
    3328:	4b85      	ldr	r3, [pc, #532]	; (3540 <_Min_Heap_Size+0x540>)
    332a:	4a86      	ldr	r2, [pc, #536]	; (3544 <_Min_Heap_Size+0x544>)
    332c:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    332e:	4b86      	ldr	r3, [pc, #536]	; (3548 <_Min_Heap_Size+0x548>)
    3330:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    3332:	4b86      	ldr	r3, [pc, #536]	; (354c <_Min_Heap_Size+0x54c>)
    3334:	60cb      	str	r3, [r1, #12]
				  break;
    3336:	f7ff ba67 	b.w	2808 <parsePreset+0x508>
				  filterTick[i] = &VZlowshelfTick;
    333a:	4b81      	ldr	r3, [pc, #516]	; (3540 <_Min_Heap_Size+0x540>)
    333c:	4a84      	ldr	r2, [pc, #528]	; (3550 <_Min_Heap_Size+0x550>)
    333e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    3340:	4b84      	ldr	r3, [pc, #528]	; (3554 <_Min_Heap_Size+0x554>)
    3342:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    3344:	4b84      	ldr	r3, [pc, #528]	; (3558 <_Min_Heap_Size+0x558>)
    3346:	60cb      	str	r3, [r1, #12]
				  break;
    3348:	f7ff ba5e 	b.w	2808 <parsePreset+0x508>
				  filterTick[i] = &VZpeakTick;
    334c:	4b7c      	ldr	r3, [pc, #496]	; (3540 <_Min_Heap_Size+0x540>)
    334e:	4a83      	ldr	r2, [pc, #524]	; (355c <_Min_Heap_Size+0x55c>)
    3350:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
    3352:	4b83      	ldr	r3, [pc, #524]	; (3560 <_Min_Heap_Size+0x560>)
    3354:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
    3356:	4b83      	ldr	r3, [pc, #524]	; (3564 <_Min_Heap_Size+0x564>)
    3358:	60cb      	str	r3, [r1, #12]
				  break;
    335a:	f7ff ba55 	b.w	2808 <parsePreset+0x508>
				  filterTick[i] = &diodeLowpassTick;
    335e:	4b78      	ldr	r3, [pc, #480]	; (3540 <_Min_Heap_Size+0x540>)
    3360:	4a81      	ldr	r2, [pc, #516]	; (3568 <_Min_Heap_Size+0x568>)
    3362:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    3364:	4b81      	ldr	r3, [pc, #516]	; (356c <_Min_Heap_Size+0x56c>)
    3366:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    3368:	4b81      	ldr	r3, [pc, #516]	; (3570 <_Min_Heap_Size+0x570>)
    336a:	60cb      	str	r3, [r1, #12]
				  break;
    336c:	f7ff ba4c 	b.w	2808 <parsePreset+0x508>
				  filterTick[i] = &bandpassTick;
    3370:	4b73      	ldr	r3, [pc, #460]	; (3540 <_Min_Heap_Size+0x540>)
    3372:	4a80      	ldr	r2, [pc, #512]	; (3574 <_Min_Heap_Size+0x574>)
    3374:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
    3376:	4b80      	ldr	r3, [pc, #512]	; (3578 <_Min_Heap_Size+0x578>)
    3378:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
    337a:	4b80      	ldr	r3, [pc, #512]	; (357c <_Min_Heap_Size+0x57c>)
    337c:	60cb      	str	r3, [r1, #12]
				  break;
    337e:	f7ff ba43 	b.w	2808 <parsePreset+0x508>
				  filterTick[i] = &highpassTick;
    3382:	4b6f      	ldr	r3, [pc, #444]	; (3540 <_Min_Heap_Size+0x540>)
    3384:	4a7e      	ldr	r2, [pc, #504]	; (3580 <_Min_Heap_Size+0x580>)
    3386:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
    3388:	4b7e      	ldr	r3, [pc, #504]	; (3584 <_Min_Heap_Size+0x584>)
    338a:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &highpassSetGain;
    338c:	4b7e      	ldr	r3, [pc, #504]	; (3588 <_Min_Heap_Size+0x588>)
    338e:	60cb      	str	r3, [r1, #12]
				  break;
    3390:	f7ff ba3a 	b.w	2808 <parsePreset+0x508>
				  filterTick[i] = &LadderLowpassTick;
    3394:	4b6a      	ldr	r3, [pc, #424]	; (3540 <_Min_Heap_Size+0x540>)
    3396:	4a7d      	ldr	r2, [pc, #500]	; (358c <_Min_Heap_Size+0x58c>)
    3398:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
    339a:	4b7d      	ldr	r3, [pc, #500]	; (3590 <_Min_Heap_Size+0x590>)
    339c:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
    339e:	4b7d      	ldr	r3, [pc, #500]	; (3594 <_Min_Heap_Size+0x594>)
    33a0:	604b      	str	r3, [r1, #4]
				  break;
    33a2:	f7ff ba10 	b.w	27c6 <parsePreset+0x4c6>
				  filterTick[i] = &VZbandrejectTick;
    33a6:	4b66      	ldr	r3, [pc, #408]	; (3540 <_Min_Heap_Size+0x540>)
    33a8:	4a7b      	ldr	r2, [pc, #492]	; (3598 <_Min_Heap_Size+0x598>)
    33aa:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
    33ac:	4b7b      	ldr	r3, [pc, #492]	; (359c <_Min_Heap_Size+0x59c>)
    33ae:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
    33b0:	4b7b      	ldr	r3, [pc, #492]	; (35a0 <_Min_Heap_Size+0x5a0>)
    33b2:	604b      	str	r3, [r1, #4]
				  break;
    33b4:	f7ff ba07 	b.w	27c6 <parsePreset+0x4c6>
				  filterTick[i] = &VZhighshelfTick;
    33b8:	4b61      	ldr	r3, [pc, #388]	; (3540 <_Min_Heap_Size+0x540>)
    33ba:	4a62      	ldr	r2, [pc, #392]	; (3544 <_Min_Heap_Size+0x544>)
    33bc:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
    33be:	4b62      	ldr	r3, [pc, #392]	; (3548 <_Min_Heap_Size+0x548>)
    33c0:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
    33c2:	4b62      	ldr	r3, [pc, #392]	; (354c <_Min_Heap_Size+0x54c>)
    33c4:	604b      	str	r3, [r1, #4]
				  break;
    33c6:	f7ff b9fe 	b.w	27c6 <parsePreset+0x4c6>
				  filterTick[i] = &VZlowshelfTick;
    33ca:	4b5d      	ldr	r3, [pc, #372]	; (3540 <_Min_Heap_Size+0x540>)
    33cc:	4a60      	ldr	r2, [pc, #384]	; (3550 <_Min_Heap_Size+0x550>)
    33ce:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
    33d0:	4b60      	ldr	r3, [pc, #384]	; (3554 <_Min_Heap_Size+0x554>)
    33d2:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
    33d4:	4b60      	ldr	r3, [pc, #384]	; (3558 <_Min_Heap_Size+0x558>)
    33d6:	604b      	str	r3, [r1, #4]
				  break;
    33d8:	f7ff b9f5 	b.w	27c6 <parsePreset+0x4c6>
				  filterTick[i] = &VZpeakTick;
    33dc:	4b58      	ldr	r3, [pc, #352]	; (3540 <_Min_Heap_Size+0x540>)
    33de:	4a5f      	ldr	r2, [pc, #380]	; (355c <_Min_Heap_Size+0x55c>)
    33e0:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
    33e2:	4b5f      	ldr	r3, [pc, #380]	; (3560 <_Min_Heap_Size+0x560>)
    33e4:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
    33e6:	4b5f      	ldr	r3, [pc, #380]	; (3564 <_Min_Heap_Size+0x564>)
    33e8:	604b      	str	r3, [r1, #4]
				  break;
    33ea:	f7ff b9ec 	b.w	27c6 <parsePreset+0x4c6>
				  filterTick[i] = &diodeLowpassTick;
    33ee:	4b54      	ldr	r3, [pc, #336]	; (3540 <_Min_Heap_Size+0x540>)
    33f0:	4a5d      	ldr	r2, [pc, #372]	; (3568 <_Min_Heap_Size+0x568>)
    33f2:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
    33f4:	4b5d      	ldr	r3, [pc, #372]	; (356c <_Min_Heap_Size+0x56c>)
    33f6:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
    33f8:	4b5d      	ldr	r3, [pc, #372]	; (3570 <_Min_Heap_Size+0x570>)
    33fa:	604b      	str	r3, [r1, #4]
				  break;
    33fc:	f7ff b9e3 	b.w	27c6 <parsePreset+0x4c6>
				  filterTick[i] = &bandpassTick;
    3400:	4b4f      	ldr	r3, [pc, #316]	; (3540 <_Min_Heap_Size+0x540>)
    3402:	4a5c      	ldr	r2, [pc, #368]	; (3574 <_Min_Heap_Size+0x574>)
    3404:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
    3406:	4b5c      	ldr	r3, [pc, #368]	; (3578 <_Min_Heap_Size+0x578>)
    3408:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
    340a:	4b5c      	ldr	r3, [pc, #368]	; (357c <_Min_Heap_Size+0x57c>)
    340c:	604b      	str	r3, [r1, #4]
				  break;
    340e:	f7ff b9da 	b.w	27c6 <parsePreset+0x4c6>
				  filterTick[i] = &highpassTick;
    3412:	4b4b      	ldr	r3, [pc, #300]	; (3540 <_Min_Heap_Size+0x540>)
    3414:	4a5a      	ldr	r2, [pc, #360]	; (3580 <_Min_Heap_Size+0x580>)
    3416:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
    3418:	4b5a      	ldr	r3, [pc, #360]	; (3584 <_Min_Heap_Size+0x584>)
    341a:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &highpassSetGain;
    341c:	4b5a      	ldr	r3, [pc, #360]	; (3588 <_Min_Heap_Size+0x588>)
    341e:	604b      	str	r3, [r1, #4]
				  break;
    3420:	f7ff b9d1 	b.w	27c6 <parsePreset+0x4c6>
				  shapeTick[i] = &userTick;
    3424:	4a5f      	ldr	r2, [pc, #380]	; (35a4 <_Min_Heap_Size+0x5a4>)
    3426:	4960      	ldr	r1, [pc, #384]	; (35a8 <_Min_Heap_Size+0x5a8>)
    3428:	6091      	str	r1, [r2, #8]
				  break;
    342a:	f7ff b999 	b.w	2760 <parsePreset+0x460>
				  shapeTick[i] = &triTick;
    342e:	4a5d      	ldr	r2, [pc, #372]	; (35a4 <_Min_Heap_Size+0x5a4>)
    3430:	495e      	ldr	r1, [pc, #376]	; (35ac <_Min_Heap_Size+0x5ac>)
    3432:	6091      	str	r1, [r2, #8]
				  break;
    3434:	f7ff b994 	b.w	2760 <parsePreset+0x460>
				  shapeTick[i] = &sineTick;
    3438:	4a5a      	ldr	r2, [pc, #360]	; (35a4 <_Min_Heap_Size+0x5a4>)
    343a:	495d      	ldr	r1, [pc, #372]	; (35b0 <_Min_Heap_Size+0x5b0>)
    343c:	6091      	str	r1, [r2, #8]
				  break;
    343e:	f7ff b98f 	b.w	2760 <parsePreset+0x460>
				  shapeTick[i] = &pulseTick;
    3442:	4a58      	ldr	r2, [pc, #352]	; (35a4 <_Min_Heap_Size+0x5a4>)
    3444:	495b      	ldr	r1, [pc, #364]	; (35b4 <_Min_Heap_Size+0x5b4>)
    3446:	6091      	str	r1, [r2, #8]
				  break;
    3448:	f7ff b98a 	b.w	2760 <parsePreset+0x460>
				  shapeTick[i] = &sawTick;
    344c:	4a55      	ldr	r2, [pc, #340]	; (35a4 <_Min_Heap_Size+0x5a4>)
    344e:	495a      	ldr	r1, [pc, #360]	; (35b8 <_Min_Heap_Size+0x5b8>)
    3450:	6091      	str	r1, [r2, #8]
				  break;
    3452:	f7ff b985 	b.w	2760 <parsePreset+0x460>
				  shapeTick[i] = &sineTriTick;
    3456:	4a53      	ldr	r2, [pc, #332]	; (35a4 <_Min_Heap_Size+0x5a4>)
    3458:	4958      	ldr	r1, [pc, #352]	; (35bc <_Min_Heap_Size+0x5bc>)
    345a:	6091      	str	r1, [r2, #8]
				  break;
    345c:	f7ff b980 	b.w	2760 <parsePreset+0x460>
				  shapeTick[i] = &userTick;
    3460:	4a50      	ldr	r2, [pc, #320]	; (35a4 <_Min_Heap_Size+0x5a4>)
    3462:	4951      	ldr	r1, [pc, #324]	; (35a8 <_Min_Heap_Size+0x5a8>)
    3464:	6051      	str	r1, [r2, #4]
				  break;
    3466:	f7ff b955 	b.w	2714 <parsePreset+0x414>
				  shapeTick[i] = &triTick;
    346a:	4a4e      	ldr	r2, [pc, #312]	; (35a4 <_Min_Heap_Size+0x5a4>)
    346c:	494f      	ldr	r1, [pc, #316]	; (35ac <_Min_Heap_Size+0x5ac>)
    346e:	6051      	str	r1, [r2, #4]
				  break;
    3470:	f7ff b950 	b.w	2714 <parsePreset+0x414>
				  shapeTick[i] = &sineTick;
    3474:	4a4b      	ldr	r2, [pc, #300]	; (35a4 <_Min_Heap_Size+0x5a4>)
    3476:	494e      	ldr	r1, [pc, #312]	; (35b0 <_Min_Heap_Size+0x5b0>)
    3478:	6051      	str	r1, [r2, #4]
				  break;
    347a:	f7ff b94b 	b.w	2714 <parsePreset+0x414>
				  shapeTick[i] = &pulseTick;
    347e:	4a49      	ldr	r2, [pc, #292]	; (35a4 <_Min_Heap_Size+0x5a4>)
    3480:	494c      	ldr	r1, [pc, #304]	; (35b4 <_Min_Heap_Size+0x5b4>)
    3482:	6051      	str	r1, [r2, #4]
				  break;
    3484:	f7ff b946 	b.w	2714 <parsePreset+0x414>
				  shapeTick[i] = &sawTick;
    3488:	4a46      	ldr	r2, [pc, #280]	; (35a4 <_Min_Heap_Size+0x5a4>)
    348a:	494b      	ldr	r1, [pc, #300]	; (35b8 <_Min_Heap_Size+0x5b8>)
    348c:	6051      	str	r1, [r2, #4]
				  break;
    348e:	f7ff b941 	b.w	2714 <parsePreset+0x414>
				  shapeTick[i] = &sineTriTick;
    3492:	4a44      	ldr	r2, [pc, #272]	; (35a4 <_Min_Heap_Size+0x5a4>)
    3494:	4949      	ldr	r1, [pc, #292]	; (35bc <_Min_Heap_Size+0x5bc>)
    3496:	6051      	str	r1, [r2, #4]
				  break;
    3498:	f7ff b93c 	b.w	2714 <parsePreset+0x414>
				  shapeTick[i] = &userTick;
    349c:	4b41      	ldr	r3, [pc, #260]	; (35a4 <_Min_Heap_Size+0x5a4>)
    349e:	4a42      	ldr	r2, [pc, #264]	; (35a8 <_Min_Heap_Size+0x5a8>)
    34a0:	601a      	str	r2, [r3, #0]
				  break;
    34a2:	f7ff b912 	b.w	26ca <parsePreset+0x3ca>
				  shapeTick[i] = &triTick;
    34a6:	4b3f      	ldr	r3, [pc, #252]	; (35a4 <_Min_Heap_Size+0x5a4>)
    34a8:	4a40      	ldr	r2, [pc, #256]	; (35ac <_Min_Heap_Size+0x5ac>)
    34aa:	601a      	str	r2, [r3, #0]
				  break;
    34ac:	f7ff b90d 	b.w	26ca <parsePreset+0x3ca>
				  shapeTick[i] = &sineTick;
    34b0:	4b3c      	ldr	r3, [pc, #240]	; (35a4 <_Min_Heap_Size+0x5a4>)
    34b2:	4a3f      	ldr	r2, [pc, #252]	; (35b0 <_Min_Heap_Size+0x5b0>)
    34b4:	601a      	str	r2, [r3, #0]
				  break;
    34b6:	f7ff b908 	b.w	26ca <parsePreset+0x3ca>
				  shapeTick[i] = &pulseTick;
    34ba:	4b3a      	ldr	r3, [pc, #232]	; (35a4 <_Min_Heap_Size+0x5a4>)
    34bc:	4a3d      	ldr	r2, [pc, #244]	; (35b4 <_Min_Heap_Size+0x5b4>)
    34be:	601a      	str	r2, [r3, #0]
				  break;
    34c0:	f7ff b903 	b.w	26ca <parsePreset+0x3ca>
				  shapeTick[i] = &sawTick;
    34c4:	4b37      	ldr	r3, [pc, #220]	; (35a4 <_Min_Heap_Size+0x5a4>)
    34c6:	4a3c      	ldr	r2, [pc, #240]	; (35b8 <_Min_Heap_Size+0x5b8>)
    34c8:	601a      	str	r2, [r3, #0]
				  break;
    34ca:	f7ff b8fe 	b.w	26ca <parsePreset+0x3ca>
				  shapeTick[i] = &sineTriTick;
    34ce:	4b35      	ldr	r3, [pc, #212]	; (35a4 <_Min_Heap_Size+0x5a4>)
    34d0:	4a3a      	ldr	r2, [pc, #232]	; (35bc <_Min_Heap_Size+0x5bc>)
    34d2:	601a      	str	r2, [r3, #0]
				  break;
    34d4:	f7ff b8f9 	b.w	26ca <parsePreset+0x3ca>
			mappings[whichMapping].destNumber = destNumber;
    34d8:	fb09 f30a 	mul.w	r3, r9, sl
    34dc:	4654      	mov	r4, sl
    34de:	eb0e 0203 	add.w	r2, lr, r3
    34e2:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
    34e6:	9b01      	ldr	r3, [sp, #4]
    34e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    34ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
    34f0:	f10a 0301 	add.w	r3, sl, #1
			mappings[whichMapping].dest = &params[destNumber];
    34f4:	6050      	str	r0, [r2, #4]
			numMappings++;
    34f6:	fa5f fa83 	uxtb.w	sl, r3
    34fa:	e42e      	b.n	2d5a <parsePreset+0xa5a>
			mappings[whichMapping].scalarSourceValPtr[whichHook] = &defaultScaling;
    34fc:	4930      	ldr	r1, [pc, #192]	; (35c0 <_Min_Heap_Size+0x5c0>)
    34fe:	f84e 1022 	str.w	r1, [lr, r2, lsl #2]
    3502:	e461      	b.n	2dc8 <parsePreset+0xac8>
    3504:	4c2f      	ldr	r4, [pc, #188]	; (35c4 <_Min_Heap_Size+0x5c4>)
    3506:	f7fe bfdb 	b.w	24c0 <parsePreset+0x1c0>
	for (int i = 0; i < paramCount; i++)
    350a:	2514      	movs	r5, #20
    350c:	4e2e      	ldr	r6, [pc, #184]	; (35c8 <_Min_Heap_Size+0x5c8>)
    350e:	f7fe bfc4 	b.w	249a <parsePreset+0x19a>
			params[i].objectNumber = 2;
    3512:	f889 7010 	strb.w	r7, [r9, #16]
		params[i].setParam(params[i].realVal, params[i].objectNumber);
    3516:	ed99 0a01 	vldr	s0, [r9, #4]
    351a:	f8d9 300c 	ldr.w	r3, [r9, #12]
    351e:	f899 0010 	ldrb.w	r0, [r9, #16]
    3522:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    3524:	f7ff bb82 	b.w	2c2c <parsePreset+0x92c>
			params[i].objectNumber = 1;
    3528:	2301      	movs	r3, #1
    352a:	f889 3010 	strb.w	r3, [r9, #16]
    352e:	e7f2      	b.n	3516 <_Min_Heap_Size+0x516>
			params[i].objectNumber = 3;
    3530:	f04f 0303 	mov.w	r3, #3
    3534:	f889 3010 	strb.w	r3, [r9, #16]
    3538:	e7ed      	b.n	3516 <_Min_Heap_Size+0x516>
    353a:	4a24      	ldr	r2, [pc, #144]	; (35cc <_Min_Heap_Size+0x5cc>)
    353c:	f7ff b986 	b.w	284c <parsePreset+0x54c>
    3540:	20000340 	.word	0x20000340
    3544:	000006e1 	.word	0x000006e1
    3548:	00000941 	.word	0x00000941
    354c:	00000b21 	.word	0x00000b21
    3550:	000006a1 	.word	0x000006a1
    3554:	00000921 	.word	0x00000921
    3558:	00000ae1 	.word	0x00000ae1
    355c:	00000661 	.word	0x00000661
    3560:	00000901 	.word	0x00000901
    3564:	00000aa1 	.word	0x00000aa1
    3568:	00000621 	.word	0x00000621
    356c:	000008e1 	.word	0x000008e1
    3570:	00000a61 	.word	0x00000a61
    3574:	000005e1 	.word	0x000005e1
    3578:	000008c1 	.word	0x000008c1
    357c:	00000a21 	.word	0x00000a21
    3580:	000005a1 	.word	0x000005a1
    3584:	000008a1 	.word	0x000008a1
    3588:	000009e1 	.word	0x000009e1
    358c:	00000761 	.word	0x00000761
    3590:	00000981 	.word	0x00000981
    3594:	00000ba1 	.word	0x00000ba1
    3598:	00000721 	.word	0x00000721
    359c:	00000961 	.word	0x00000961
    35a0:	00000b61 	.word	0x00000b61
    35a4:	2000076c 	.word	0x2000076c
    35a8:	000003e1 	.word	0x000003e1
    35ac:	00000361 	.word	0x00000361
    35b0:	00000321 	.word	0x00000321
    35b4:	000002a1 	.word	0x000002a1
    35b8:	00000241 	.word	0x00000241
    35bc:	000001c1 	.word	0x000001c1
    35c0:	20000098 	.word	0x20000098
    35c4:	20015a20 	.word	0x20015a20
    35c8:	20014e04 	.word	0x20014e04
    35cc:	20014748 	.word	0x20014748

000035d0 <__memset_veneer>:
    35d0:	f85f f000 	ldr.w	pc, [pc]	; 35d4 <__memset_veneer+0x4>
    35d4:	080150bd 	.word	0x080150bd

000035d8 <__tMBTriangle_tick_veneer>:
    35d8:	f85f f000 	ldr.w	pc, [pc]	; 35dc <__tMBTriangle_tick_veneer+0x4>
    35dc:	080112f1 	.word	0x080112f1

000035e0 <__tVZFilter_setFreqFast_veneer>:
    35e0:	f85f f000 	ldr.w	pc, [pc]	; 35e4 <__tVZFilter_setFreqFast_veneer+0x4>
    35e4:	0800ed8d 	.word	0x0800ed8d

000035e8 <__tMBSawPulse_setShape_veneer>:
    35e8:	f85f f000 	ldr.w	pc, [pc]	; 35ec <__tMBSawPulse_setShape_veneer+0x4>
    35ec:	08014859 	.word	0x08014859

000035f0 <__tMBTriangle_setFreq_veneer>:
    35f0:	f85f f000 	ldr.w	pc, [pc]	; 35f4 <__tMBTriangle_setFreq_veneer+0x4>
    35f4:	08012205 	.word	0x08012205

000035f8 <__tMBSineTri_setShape_veneer>:
    35f8:	f85f f000 	ldr.w	pc, [pc]	; 35fc <__tMBSineTri_setShape_veneer+0x4>
    35fc:	08013399 	.word	0x08013399

00003600 <__tMBSaw_setFreq_veneer>:
    3600:	f85f f000 	ldr.w	pc, [pc]	; 3604 <__tMBSaw_setFreq_veneer+0x4>
    3604:	08013899 	.word	0x08013899

00003608 <__audioFrame_veneer>:
    3608:	f85f f000 	ldr.w	pc, [pc]	; 360c <__audioFrame_veneer+0x4>
    360c:	080013f9 	.word	0x080013f9

00003610 <__tADSRT_setRelease_veneer>:
    3610:	f85f f000 	ldr.w	pc, [pc]	; 3614 <__tADSRT_setRelease_veneer+0x4>
    3614:	0800e2d5 	.word	0x0800e2d5

00003618 <__tMBSawPulse_tick_veneer>:
    3618:	f85f f000 	ldr.w	pc, [pc]	; 361c <__tMBSawPulse_tick_veneer+0x4>
    361c:	080139b5 	.word	0x080139b5

00003620 <__tSVF_tick_veneer>:
    3620:	f85f f000 	ldr.w	pc, [pc]	; 3624 <__tSVF_tick_veneer+0x4>
    3624:	0800e809 	.word	0x0800e809

00003628 <__tLadderFilter_setFreqFast_veneer>:
    3628:	f85f f000 	ldr.w	pc, [pc]	; 362c <__tLadderFilter_setFreqFast_veneer+0x4>
    362c:	0800fad5 	.word	0x0800fad5

00003630 <__tMBPulse_sync_veneer>:
    3630:	f85f f000 	ldr.w	pc, [pc]	; 3634 <__tMBPulse_sync_veneer+0x4>
    3634:	080111ed 	.word	0x080111ed

00003638 <__tADSRT_tick_veneer>:
    3638:	f85f f000 	ldr.w	pc, [pc]	; 363c <__tADSRT_tick_veneer+0x4>
    363c:	0800e34d 	.word	0x0800e34d

00003640 <__LEAF_shaper_veneer>:
    3640:	f85f f000 	ldr.w	pc, [pc]	; 3644 <__LEAF_shaper_veneer+0x4>
    3644:	0800fc19 	.word	0x0800fc19

00003648 <__tMBTriangle_setWidth_veneer>:
    3648:	f85f f000 	ldr.w	pc, [pc]	; 364c <__tMBTriangle_setWidth_veneer+0x4>
    364c:	08012225 	.word	0x08012225

00003650 <__powf_veneer>:
    3650:	f85f f000 	ldr.w	pc, [pc]	; 3654 <__powf_veneer+0x4>
    3654:	080155d9 	.word	0x080155d9

00003658 <__tSVF_setQ_veneer>:
    3658:	f85f f000 	ldr.w	pc, [pc]	; 365c <__tSVF_setQ_veneer+0x4>
    365c:	0800e8e1 	.word	0x0800e8e1

00003660 <__tADSRT_setLeakFactor_veneer>:
    3660:	f85f f000 	ldr.w	pc, [pc]	; 3664 <__tADSRT_setLeakFactor_veneer+0x4>
    3664:	0800e2f5 	.word	0x0800e2f5

00003668 <__fasterdbtoa_veneer>:
    3668:	f85f f000 	ldr.w	pc, [pc]	; 366c <__fasterdbtoa_veneer+0x4>
    366c:	0800fee9 	.word	0x0800fee9

00003670 <__tCompressor_tick_veneer>:
    3670:	f85f f000 	ldr.w	pc, [pc]	; 3674 <__tCompressor_tick_veneer+0x4>
    3674:	0800e0d1 	.word	0x0800e0d1

00003678 <__tMBSineTri_setFreq_veneer>:
    3678:	f85f f000 	ldr.w	pc, [pc]	; 367c <__tMBSineTri_setFreq_veneer+0x4>
    367c:	08013319 	.word	0x08013319

00003680 <__arm_sin_f32_veneer>:
    3680:	f85f f000 	ldr.w	pc, [pc]	; 3684 <__arm_sin_f32_veneer+0x4>
    3684:	08014f65 	.word	0x08014f65

00003688 <__tMBSineTri_tick_veneer>:
    3688:	f85f f000 	ldr.w	pc, [pc]	; 368c <__tMBSineTri_tick_veneer+0x4>
    368c:	08012361 	.word	0x08012361

00003690 <__tCrusher_setSamplingRatio_veneer>:
    3690:	f85f f000 	ldr.w	pc, [pc]	; 3694 <__tCrusher_setSamplingRatio_veneer+0x4>
    3694:	0800e021 	.word	0x0800e021

00003698 <__tADSRT_setAttack_veneer>:
    3698:	f85f f000 	ldr.w	pc, [pc]	; 369c <__tADSRT_setAttack_veneer+0x4>
    369c:	0800e269 	.word	0x0800e269

000036a0 <__tExpSmooth_tick_veneer>:
    36a0:	f85f f000 	ldr.w	pc, [pc]	; 36a4 <__tExpSmooth_tick_veneer+0x4>
    36a4:	0800e659 	.word	0x0800e659

000036a8 <__tMBSaw_sync_veneer>:
    36a8:	f85f f000 	ldr.w	pc, [pc]	; 36ac <__tMBSaw_sync_veneer+0x4>
    36ac:	080138b9 	.word	0x080138b9

000036b0 <__tLadderFilter_tick_veneer>:
    36b0:	f85f f000 	ldr.w	pc, [pc]	; 36b4 <__tLadderFilter_tick_veneer+0x4>
    36b4:	0800f889 	.word	0x0800f889

000036b8 <__tCrusher_setRound_veneer>:
    36b8:	f85f f000 	ldr.w	pc, [pc]	; 36bc <__tCrusher_setRound_veneer+0x4>
    36bc:	0800e019 	.word	0x0800e019

000036c0 <__tLadderFilter_setQ_veneer>:
    36c0:	f85f f000 	ldr.w	pc, [pc]	; 36c4 <__tLadderFilter_setQ_veneer+0x4>
    36c4:	0800fb1d 	.word	0x0800fb1d

000036c8 <__tDiodeFilter_setFreqFast_veneer>:
    36c8:	f85f f000 	ldr.w	pc, [pc]	; 36cc <__tDiodeFilter_setFreqFast_veneer+0x4>
    36cc:	0800f799 	.word	0x0800f799

000036d0 <__tMBSawPulse_setFreq_veneer>:
    36d0:	f85f f000 	ldr.w	pc, [pc]	; 36d4 <__tMBSawPulse_setFreq_veneer+0x4>
    36d4:	0801478d 	.word	0x0801478d

000036d8 <__tSimplePoly_noteOff_veneer>:
    36d8:	f85f f000 	ldr.w	pc, [pc]	; 36dc <__tSimplePoly_noteOff_veneer+0x4>
    36dc:	080104a1 	.word	0x080104a1

000036e0 <__tADSRT_off_veneer>:
    36e0:	f85f f000 	ldr.w	pc, [pc]	; 36e4 <__tADSRT_off_veneer+0x4>
    36e4:	0800e33d 	.word	0x0800e33d

000036e8 <__tLinearDelay_tick_veneer>:
    36e8:	f85f f000 	ldr.w	pc, [pc]	; 36ec <__tLinearDelay_tick_veneer+0x4>
    36ec:	0800dc31 	.word	0x0800dc31

000036f0 <__tVZFilter_tickEfficient_veneer>:
    36f0:	f85f f000 	ldr.w	pc, [pc]	; 36f4 <__tVZFilter_tickEfficient_veneer+0x4>
    36f4:	0800e97d 	.word	0x0800e97d

000036f8 <__fasterexpf_veneer>:
    36f8:	f85f f000 	ldr.w	pc, [pc]	; 36fc <__fasterexpf_veneer+0x4>
    36fc:	0800fbb9 	.word	0x0800fbb9

00003700 <__tCycle_setFreq_veneer>:
    3700:	f85f f000 	ldr.w	pc, [pc]	; 3704 <__tCycle_setFreq_veneer+0x4>
    3704:	080105a1 	.word	0x080105a1

00003708 <__tHighpass_tick_veneer>:
    3708:	f85f f000 	ldr.w	pc, [pc]	; 370c <__tHighpass_tick_veneer+0x4>
    370c:	0800e95d 	.word	0x0800e95d

00003710 <__tDiodeFilter_tick_veneer>:
    3710:	f85f f000 	ldr.w	pc, [pc]	; 3714 <__tDiodeFilter_tick_veneer+0x4>
    3714:	0800f3ed 	.word	0x0800f3ed

00003718 <__mtof_veneer>:
    3718:	f85f f000 	ldr.w	pc, [pc]	; 371c <__mtof_veneer+0x4>
    371c:	0800fdf9 	.word	0x0800fdf9

00003720 <__tCycle_tick_veneer>:
    3720:	f85f f000 	ldr.w	pc, [pc]	; 3724 <__tCycle_tick_veneer+0x4>
    3724:	08010555 	.word	0x08010555

00003728 <__tMBSaw_tick_veneer>:
    3728:	f85f f000 	ldr.w	pc, [pc]	; 372c <__tMBSaw_tick_veneer+0x4>
    372c:	08013421 	.word	0x08013421

00003730 <__tSVF_setFreqFast_veneer>:
    3730:	f85f f000 	ldr.w	pc, [pc]	; 3734 <__tSVF_setFreqFast_veneer+0x4>
    3734:	0800e875 	.word	0x0800e875

00003738 <__tSimplePoly_noteOn_veneer>:
    3738:	f85f f000 	ldr.w	pc, [pc]	; 373c <__tSimplePoly_noteOn_veneer+0x4>
    373c:	08010299 	.word	0x08010299

00003740 <__tExpSmooth_setDest_veneer>:
    3740:	f85f f000 	ldr.w	pc, [pc]	; 3744 <__tExpSmooth_setDest_veneer+0x4>
    3744:	0800e651 	.word	0x0800e651

00003748 <__tVZFilter_setResonance_veneer>:
    3748:	f85f f000 	ldr.w	pc, [pc]	; 374c <__tVZFilter_setResonance_veneer+0x4>
    374c:	0800f081 	.word	0x0800f081

00003750 <__LEAF_clip_veneer>:
    3750:	f85f f000 	ldr.w	pc, [pc]	; 3754 <__LEAF_clip_veneer+0x4>
    3754:	0800fce1 	.word	0x0800fce1

00003758 <__tADSRT_setDecay_veneer>:
    3758:	f85f f000 	ldr.w	pc, [pc]	; 375c <__tADSRT_setDecay_veneer+0x4>
    375c:	0800e289 	.word	0x0800e289

00003760 <__tMBTriangle_sync_veneer>:
    3760:	f85f f000 	ldr.w	pc, [pc]	; 3764 <__tMBTriangle_sync_veneer+0x4>
    3764:	08012249 	.word	0x08012249

00003768 <__tDiodeFilter_setQ_veneer>:
    3768:	f85f f000 	ldr.w	pc, [pc]	; 376c <__tDiodeFilter_setQ_veneer+0x4>
    376c:	0800f7d9 	.word	0x0800f7d9

00003770 <__tMBPulse_setFreq_veneer>:
    3770:	f85f f000 	ldr.w	pc, [pc]	; 3774 <__tMBPulse_setFreq_veneer+0x4>
    3774:	080111b1 	.word	0x080111b1

00003778 <__tMBSawPulse_sync_veneer>:
    3778:	f85f f000 	ldr.w	pc, [pc]	; 377c <__tMBSawPulse_sync_veneer+0x4>
    377c:	080147f9 	.word	0x080147f9

00003780 <__tCrusher_setOperation_veneer>:
    3780:	f85f f000 	ldr.w	pc, [pc]	; 3784 <__tCrusher_setOperation_veneer+0x4>
    3784:	0800dfb9 	.word	0x0800dfb9

00003788 <__tLinearDelay_setDelay_veneer>:
    3788:	f85f f000 	ldr.w	pc, [pc]	; 378c <__tLinearDelay_setDelay_veneer+0x4>
    378c:	0800dca5 	.word	0x0800dca5

00003790 <__tMBSineTri_sync_veneer>:
    3790:	f85f f000 	ldr.w	pc, [pc]	; 3794 <__tMBSineTri_sync_veneer+0x4>
    3794:	08013339 	.word	0x08013339

00003798 <__fastdbtoa_veneer>:
    3798:	f85f f000 	ldr.w	pc, [pc]	; 379c <__fastdbtoa_veneer+0x4>
    379c:	0800fed9 	.word	0x0800fed9

000037a0 <__tNoise_tick_veneer>:
    37a0:	f85f f000 	ldr.w	pc, [pc]	; 37a4 <__tNoise_tick_veneer+0x4>
    37a4:	080105fd 	.word	0x080105fd

000037a8 <__tVZFilter_setGain_veneer>:
    37a8:	f85f f000 	ldr.w	pc, [pc]	; 37ac <__tVZFilter_setGain_veneer+0x4>
    37ac:	0800f049 	.word	0x0800f049

000037b0 <__tMBPulse_setWidth_veneer>:
    37b0:	f85f f000 	ldr.w	pc, [pc]	; 37b4 <__tMBPulse_setWidth_veneer+0x4>
    37b4:	080111d1 	.word	0x080111d1

000037b8 <__tanhf_veneer>:
    37b8:	f85f f000 	ldr.w	pc, [pc]	; 37bc <__tanhf_veneer+0x4>
    37bc:	080158f1 	.word	0x080158f1

000037c0 <__tCrusher_setQuality_veneer>:
    37c0:	f85f f000 	ldr.w	pc, [pc]	; 37c4 <__tCrusher_setQuality_veneer+0x4>
    37c4:	0800dfcd 	.word	0x0800dfcd

000037c8 <__tADSRT_on_veneer>:
    37c8:	f85f f000 	ldr.w	pc, [pc]	; 37cc <__tADSRT_on_veneer+0x4>
    37cc:	0800e319 	.word	0x0800e319

000037d0 <__tMBPulse_tick_veneer>:
    37d0:	f85f f000 	ldr.w	pc, [pc]	; 37d4 <__tMBPulse_tick_veneer+0x4>
    37d4:	08010729 	.word	0x08010729

000037d8 <__tADSRT_setSustain_veneer>:
    37d8:	f85f f000 	ldr.w	pc, [pc]	; 37dc <__tADSRT_setSustain_veneer+0x4>
    37dc:	0800e2a9 	.word	0x0800e2a9

000037e0 <__tCrusher_tick_veneer>:
    37e0:	f85f f000 	ldr.w	pc, [pc]	; 37e4 <__tCrusher_tick_veneer+0x4>
    37e4:	0800df39 	.word	0x0800df39
